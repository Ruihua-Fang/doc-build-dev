import{S as k3t,i as S3t,s as R3t,e as a,k as l,w as f,t as o,M as B3t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as P3t}from"../../chunks/vendor-6b77c823.js";import{T as ZBr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-90e3aa51.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function $3t(If){let Z,io,de,Ce,lo,ge,Me,Xo,Ii,qf,fa,qi,Ni,E3,Nf,xe,co,ji,Gn,C3,On,Vn,w3,Di,Xn,A3,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),ge=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),E3=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),C3=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),w3=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),A3=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),de=n(ue,"CODE",{});var p9=s(de);Ce=r(p9,"NewModelConfig"),p9.forEach(t),lo=r(ue," is a subclass of "),ge=n(ue,"CODE",{});var Oi=s(ge);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(ue,`, make sure its
`),Ii=n(ue,"CODE",{});var _9=s(Ii);qf=r(_9,"model_type"),_9.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),qi=n(ue,"CODE",{});var u9=s(qi);Ni=r(u9,'"new-model"'),u9.forEach(t),E3=r(ue,")."),ue.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),C3=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var b9=s(On);Vn=r(b9,"PreTrainedModel"),b9.forEach(t),w3=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),A3=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var F9=s(Gi);jf=r(F9,"NewModelConfig"),F9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,ge),e(ge,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,E3),b(fo,Nf,ue),b(fo,xe,ue),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,C3),e(xe,On),e(On,Vn),e(xe,w3),e(xe,Di),e(Di,Xn),e(xe,A3),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function I3t(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function q3t(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function N3t(If){let Z,io,de,Ce,lo,ge,Me,Xo,Ii,qf,fa,qi,Ni,E3,Nf,xe,co,ji,Gn,C3,On,Vn,w3,Di,Xn,A3,Gi,jf,Da,fo,ue,p9,Oi,_9,u9,zo,Ga,b9,Df,F9,LIe,pRe,Vi,Gf,oY,y3,xIe,rY,kIe,_Re,zn,SIe,tY,RIe,BIe,aY,PIe,$Ie,uRe,L3,bRe,v9,IIe,FRe,Of,vRe,Xi,Vf,nY,x3,qIe,sY,NIe,TRe,Qo,k3,jIe,S3,DIe,T9,GIe,OIe,VIe,R3,XIe,lY,zIe,QIe,WIe,mo,B3,HIe,iY,UIe,JIe,zi,YIe,dY,KIe,ZIe,cY,eqe,oqe,rqe,F,Xf,fY,tqe,aqe,M9,nqe,sqe,lqe,zf,mY,iqe,dqe,E9,cqe,fqe,mqe,Qf,gY,gqe,hqe,C9,pqe,_qe,uqe,Wf,hY,bqe,Fqe,w9,vqe,Tqe,Mqe,Hf,pY,Eqe,Cqe,A9,wqe,Aqe,yqe,Uf,_Y,Lqe,xqe,y9,kqe,Sqe,Rqe,Jf,uY,Bqe,Pqe,L9,$qe,Iqe,qqe,Yf,bY,Nqe,jqe,x9,Dqe,Gqe,Oqe,Kf,FY,Vqe,Xqe,k9,zqe,Qqe,Wqe,Zf,vY,Hqe,Uqe,S9,Jqe,Yqe,Kqe,em,TY,Zqe,eNe,R9,oNe,rNe,tNe,om,MY,aNe,nNe,B9,sNe,lNe,iNe,rm,EY,dNe,cNe,P9,fNe,mNe,gNe,tm,CY,hNe,pNe,$9,_Ne,uNe,bNe,am,wY,FNe,vNe,I9,TNe,MNe,ENe,nm,AY,CNe,wNe,q9,ANe,yNe,LNe,sm,yY,xNe,kNe,N9,SNe,RNe,BNe,lm,LY,PNe,$Ne,j9,INe,qNe,NNe,im,xY,jNe,DNe,D9,GNe,ONe,VNe,dm,kY,XNe,zNe,G9,QNe,WNe,HNe,cm,SY,UNe,JNe,O9,YNe,KNe,ZNe,fm,RY,eje,oje,V9,rje,tje,aje,mm,BY,nje,sje,X9,lje,ije,dje,gm,PY,cje,fje,z9,mje,gje,hje,hm,$Y,pje,_je,Q9,uje,bje,Fje,pm,IY,vje,Tje,W9,Mje,Eje,Cje,_m,qY,wje,Aje,H9,yje,Lje,xje,um,NY,kje,Sje,U9,Rje,Bje,Pje,bm,jY,$je,Ije,J9,qje,Nje,jje,Fm,DY,Dje,Gje,Y9,Oje,Vje,Xje,vm,GY,zje,Qje,K9,Wje,Hje,Uje,Tm,OY,Jje,Yje,Z9,Kje,Zje,eDe,Mm,VY,oDe,rDe,ex,tDe,aDe,nDe,Em,XY,sDe,lDe,ox,iDe,dDe,cDe,Cm,zY,fDe,mDe,rx,gDe,hDe,pDe,wm,QY,_De,uDe,tx,bDe,FDe,vDe,Am,WY,TDe,MDe,ax,EDe,CDe,wDe,ym,HY,ADe,yDe,nx,LDe,xDe,kDe,Lm,UY,SDe,RDe,sx,BDe,PDe,$De,xm,JY,IDe,qDe,lx,NDe,jDe,DDe,km,YY,GDe,ODe,ix,VDe,XDe,zDe,Sm,KY,QDe,WDe,dx,HDe,UDe,JDe,Rm,ZY,YDe,KDe,cx,ZDe,eGe,oGe,Bm,eK,rGe,tGe,fx,aGe,nGe,sGe,Pm,oK,lGe,iGe,mx,dGe,cGe,fGe,$m,rK,mGe,gGe,gx,hGe,pGe,_Ge,Im,tK,uGe,bGe,hx,FGe,vGe,TGe,qm,aK,MGe,EGe,px,CGe,wGe,AGe,Nm,nK,yGe,LGe,_x,xGe,kGe,SGe,jm,sK,RGe,BGe,ux,PGe,$Ge,IGe,Dm,lK,qGe,NGe,bx,jGe,DGe,GGe,Gm,iK,OGe,VGe,Fx,XGe,zGe,QGe,Om,dK,WGe,HGe,vx,UGe,JGe,YGe,Vm,cK,KGe,ZGe,Tx,eOe,oOe,rOe,Xm,fK,tOe,aOe,Mx,nOe,sOe,lOe,zm,mK,iOe,dOe,Ex,cOe,fOe,mOe,Qm,gK,gOe,hOe,Cx,pOe,_Oe,uOe,Wm,hK,bOe,FOe,wx,vOe,TOe,MOe,Hm,pK,EOe,COe,Ax,wOe,AOe,yOe,Um,_K,LOe,xOe,yx,kOe,SOe,ROe,Jm,uK,BOe,POe,Lx,$Oe,IOe,qOe,Ym,bK,NOe,jOe,xx,DOe,GOe,OOe,Km,FK,VOe,XOe,kx,zOe,QOe,WOe,Zm,vK,HOe,UOe,Sx,JOe,YOe,KOe,eg,TK,ZOe,eVe,Rx,oVe,rVe,tVe,og,MK,aVe,nVe,Bx,sVe,lVe,iVe,rg,EK,dVe,cVe,Px,fVe,mVe,gVe,tg,CK,hVe,pVe,$x,_Ve,uVe,bVe,ag,wK,FVe,vVe,Ix,TVe,MVe,EVe,ng,AK,CVe,wVe,qx,AVe,yVe,LVe,sg,yK,xVe,kVe,Nx,SVe,RVe,BVe,lg,LK,PVe,$Ve,jx,IVe,qVe,NVe,ig,xK,jVe,DVe,Dx,GVe,OVe,VVe,dg,kK,XVe,zVe,Gx,QVe,WVe,HVe,cg,SK,UVe,JVe,Ox,YVe,KVe,ZVe,fg,RK,eXe,oXe,Vx,rXe,tXe,aXe,mg,BK,nXe,sXe,Xx,lXe,iXe,dXe,gg,PK,cXe,fXe,zx,mXe,gXe,hXe,hg,$K,pXe,_Xe,Qx,uXe,bXe,FXe,pg,IK,vXe,TXe,Wx,MXe,EXe,CXe,_g,qK,wXe,AXe,Hx,yXe,LXe,xXe,ug,NK,kXe,SXe,Ux,RXe,BXe,PXe,bg,jK,$Xe,IXe,Jx,qXe,NXe,jXe,Fg,DK,DXe,GXe,Yx,OXe,VXe,XXe,vg,GK,zXe,QXe,Kx,WXe,HXe,UXe,Tg,OK,JXe,YXe,Zx,KXe,ZXe,eze,Mg,VK,oze,rze,ek,tze,aze,nze,Eg,XK,sze,lze,ok,ize,dze,cze,Cg,zK,fze,mze,rk,gze,hze,pze,wg,QK,_ze,uze,tk,bze,Fze,vze,Ag,WK,Tze,Mze,ak,Eze,Cze,wze,yg,HK,Aze,yze,nk,Lze,xze,kze,Lg,UK,Sze,Rze,sk,Bze,Pze,$ze,xg,JK,Ize,qze,lk,Nze,jze,Dze,kg,YK,Gze,Oze,ik,Vze,Xze,zze,Sg,KK,Qze,Wze,dk,Hze,Uze,Jze,Rg,ZK,Yze,Kze,ck,Zze,eQe,oQe,Bg,eZ,rQe,tQe,fk,aQe,nQe,sQe,Pg,oZ,lQe,iQe,mk,dQe,cQe,fQe,$g,rZ,mQe,gQe,gk,hQe,pQe,_Qe,Ig,tZ,uQe,bQe,hk,FQe,vQe,TQe,aZ,MQe,EQe,P3,CQe,qg,$3,wQe,nZ,AQe,MRe,Qi,Ng,sZ,I3,yQe,lZ,LQe,ERe,Wo,q3,xQe,N3,kQe,pk,SQe,RQe,BQe,j3,PQe,iZ,$Qe,IQe,qQe,go,D3,NQe,dZ,jQe,DQe,Oa,GQe,cZ,OQe,VQe,fZ,XQe,zQe,mZ,QQe,WQe,HQe,E,Qn,gZ,UQe,JQe,_k,YQe,KQe,uk,ZQe,eWe,oWe,Wn,hZ,rWe,tWe,bk,aWe,nWe,Fk,sWe,lWe,iWe,Hn,pZ,dWe,cWe,vk,fWe,mWe,Tk,gWe,hWe,pWe,jg,_Z,_We,uWe,Mk,bWe,FWe,vWe,Un,uZ,TWe,MWe,Ek,EWe,CWe,Ck,wWe,AWe,yWe,Dg,bZ,LWe,xWe,wk,kWe,SWe,RWe,Gg,FZ,BWe,PWe,Ak,$We,IWe,qWe,Og,vZ,NWe,jWe,yk,DWe,GWe,OWe,Jn,TZ,VWe,XWe,Lk,zWe,QWe,xk,WWe,HWe,UWe,Yn,MZ,JWe,YWe,kk,KWe,ZWe,Sk,eHe,oHe,rHe,Kn,EZ,tHe,aHe,Rk,nHe,sHe,Bk,lHe,iHe,dHe,Vg,CZ,cHe,fHe,Pk,mHe,gHe,hHe,Xg,wZ,pHe,_He,$k,uHe,bHe,FHe,Zn,AZ,vHe,THe,Ik,MHe,EHe,qk,CHe,wHe,AHe,zg,yZ,yHe,LHe,Nk,xHe,kHe,SHe,es,LZ,RHe,BHe,jk,PHe,$He,Dk,IHe,qHe,NHe,os,xZ,jHe,DHe,Gk,GHe,OHe,Ok,VHe,XHe,zHe,rs,kZ,QHe,WHe,Vk,HHe,UHe,SZ,JHe,YHe,KHe,Qg,RZ,ZHe,eUe,Xk,oUe,rUe,tUe,ts,BZ,aUe,nUe,zk,sUe,lUe,Qk,iUe,dUe,cUe,Wg,PZ,fUe,mUe,Wk,gUe,hUe,pUe,as,$Z,_Ue,uUe,Hk,bUe,FUe,Uk,vUe,TUe,MUe,ns,IZ,EUe,CUe,Jk,wUe,AUe,Yk,yUe,LUe,xUe,ss,qZ,kUe,SUe,Kk,RUe,BUe,Zk,PUe,$Ue,IUe,Hg,NZ,qUe,NUe,eS,jUe,DUe,GUe,ls,jZ,OUe,VUe,oS,XUe,zUe,rS,QUe,WUe,HUe,Ug,DZ,UUe,JUe,tS,YUe,KUe,ZUe,is,GZ,eJe,oJe,aS,rJe,tJe,nS,aJe,nJe,sJe,ds,OZ,lJe,iJe,sS,dJe,cJe,lS,fJe,mJe,gJe,cs,VZ,hJe,pJe,iS,_Je,uJe,dS,bJe,FJe,vJe,fs,XZ,TJe,MJe,cS,EJe,CJe,fS,wJe,AJe,yJe,Jg,zZ,LJe,xJe,mS,kJe,SJe,RJe,ms,QZ,BJe,PJe,gS,$Je,IJe,hS,qJe,NJe,jJe,gs,WZ,DJe,GJe,pS,OJe,VJe,_S,XJe,zJe,QJe,hs,HZ,WJe,HJe,uS,UJe,JJe,bS,YJe,KJe,ZJe,ps,UZ,eYe,oYe,FS,rYe,tYe,vS,aYe,nYe,sYe,_s,JZ,lYe,iYe,TS,dYe,cYe,MS,fYe,mYe,gYe,us,YZ,hYe,pYe,ES,_Ye,uYe,CS,bYe,FYe,vYe,Yg,KZ,TYe,MYe,wS,EYe,CYe,wYe,bs,ZZ,AYe,yYe,AS,LYe,xYe,yS,kYe,SYe,RYe,Kg,eee,BYe,PYe,LS,$Ye,IYe,qYe,Zg,oee,NYe,jYe,xS,DYe,GYe,OYe,Fs,ree,VYe,XYe,kS,zYe,QYe,SS,WYe,HYe,UYe,vs,tee,JYe,YYe,RS,KYe,ZYe,BS,eKe,oKe,rKe,eh,aee,tKe,aKe,PS,nKe,sKe,lKe,Ts,nee,iKe,dKe,$S,cKe,fKe,IS,mKe,gKe,hKe,Ms,see,pKe,_Ke,qS,uKe,bKe,NS,FKe,vKe,TKe,Es,lee,MKe,EKe,jS,CKe,wKe,DS,AKe,yKe,LKe,Cs,iee,xKe,kKe,GS,SKe,RKe,OS,BKe,PKe,$Ke,ws,dee,IKe,qKe,VS,NKe,jKe,XS,DKe,GKe,OKe,oh,cee,VKe,XKe,zS,zKe,QKe,WKe,rh,fee,HKe,UKe,QS,JKe,YKe,KKe,th,mee,ZKe,eZe,WS,oZe,rZe,tZe,ah,gee,aZe,nZe,HS,sZe,lZe,iZe,As,hee,dZe,cZe,US,fZe,mZe,JS,gZe,hZe,pZe,nh,pee,_Ze,uZe,YS,bZe,FZe,vZe,ys,_ee,TZe,MZe,KS,EZe,CZe,ZS,wZe,AZe,yZe,Ls,uee,LZe,xZe,eR,kZe,SZe,oR,RZe,BZe,PZe,xs,bee,$Ze,IZe,rR,qZe,NZe,tR,jZe,DZe,GZe,ks,Fee,OZe,VZe,aR,XZe,zZe,nR,QZe,WZe,HZe,Ss,vee,UZe,JZe,sR,YZe,KZe,lR,ZZe,eeo,oeo,Rs,Tee,reo,teo,iR,aeo,neo,dR,seo,leo,ieo,sh,Mee,deo,ceo,cR,feo,meo,geo,lh,Eee,heo,peo,fR,_eo,ueo,beo,Bs,Cee,Feo,veo,mR,Teo,Meo,gR,Eeo,Ceo,weo,Ps,wee,Aeo,yeo,hR,Leo,xeo,pR,keo,Seo,Reo,$s,Aee,Beo,Peo,_R,$eo,Ieo,uR,qeo,Neo,jeo,ih,yee,Deo,Geo,bR,Oeo,Veo,Xeo,dh,Lee,zeo,Qeo,FR,Weo,Heo,Ueo,ch,xee,Jeo,Yeo,vR,Keo,Zeo,eoo,fh,kee,ooo,roo,TR,too,aoo,noo,mh,See,soo,loo,MR,ioo,doo,coo,Is,Ree,foo,moo,ER,goo,hoo,CR,poo,_oo,uoo,gh,Bee,boo,Foo,wR,voo,Too,Moo,hh,Pee,Eoo,Coo,AR,woo,Aoo,yoo,qs,$ee,Loo,xoo,yR,koo,Soo,LR,Roo,Boo,Poo,Ns,Iee,$oo,Ioo,xR,qoo,Noo,kR,joo,Doo,Goo,qee,Ooo,Voo,G3,Xoo,ph,O3,zoo,Nee,Qoo,CRe,Wi,_h,jee,V3,Woo,Dee,Hoo,wRe,Ho,X3,Uoo,z3,Joo,SR,Yoo,Koo,Zoo,Q3,ero,Gee,oro,rro,tro,$e,W3,aro,Oee,nro,sro,Va,lro,Vee,iro,dro,Xee,cro,fro,zee,mro,gro,hro,ee,uh,Qee,pro,_ro,RR,uro,bro,Fro,bh,Wee,vro,Tro,BR,Mro,Ero,Cro,Fh,Hee,wro,Aro,PR,yro,Lro,xro,vh,Uee,kro,Sro,$R,Rro,Bro,Pro,Th,Jee,$ro,Iro,IR,qro,Nro,jro,Mh,Yee,Dro,Gro,qR,Oro,Vro,Xro,Eh,Kee,zro,Qro,NR,Wro,Hro,Uro,Ch,Zee,Jro,Yro,jR,Kro,Zro,eto,wh,eoe,oto,rto,DR,tto,ato,nto,Ah,ooe,sto,lto,GR,ito,dto,cto,yh,roe,fto,mto,OR,gto,hto,pto,Lh,toe,_to,uto,VR,bto,Fto,vto,xh,aoe,Tto,Mto,XR,Eto,Cto,wto,kh,noe,Ato,yto,zR,Lto,xto,kto,Sh,soe,Sto,Rto,QR,Bto,Pto,$to,Rh,loe,Ito,qto,WR,Nto,jto,Dto,Bh,ioe,Gto,Oto,HR,Vto,Xto,zto,Ph,doe,Qto,Wto,UR,Hto,Uto,Jto,$h,coe,Yto,Kto,JR,Zto,eao,oao,Ih,rao,foe,tao,aao,H3,nao,qh,U3,sao,moe,lao,ARe,Hi,Nh,goe,J3,iao,hoe,dao,yRe,Uo,Y3,cao,K3,fao,YR,mao,gao,hao,Z3,pao,poe,_ao,uao,bao,Ie,ew,Fao,_oe,vao,Tao,Ui,Mao,uoe,Eao,Cao,boe,wao,Aao,yao,ke,jh,Foe,Lao,xao,KR,kao,Sao,Rao,Dh,voe,Bao,Pao,ZR,$ao,Iao,qao,Gh,Toe,Nao,jao,eB,Dao,Gao,Oao,Oh,Moe,Vao,Xao,oB,zao,Qao,Wao,Vh,Eoe,Hao,Uao,rB,Jao,Yao,Kao,Xh,Coe,Zao,eno,tB,ono,rno,tno,zh,woe,ano,nno,aB,sno,lno,ino,Qh,Aoe,dno,cno,nB,fno,mno,gno,Wh,hno,yoe,pno,_no,ow,uno,Hh,rw,bno,Loe,Fno,LRe,Ji,Uh,xoe,tw,vno,koe,Tno,xRe,Jo,aw,Mno,Yi,Eno,sB,Cno,wno,lB,Ano,yno,Lno,nw,xno,Soe,kno,Sno,Rno,Xr,sw,Bno,Roe,Pno,$no,Ki,Ino,Boe,qno,Nno,iB,jno,Dno,Gno,Poe,Ono,Vno,lw,Xno,qe,iw,zno,$oe,Qno,Wno,Xa,Hno,Ioe,Uno,Jno,qoe,Yno,Kno,Noe,Zno,eso,oso,T,Jh,joe,rso,tso,dB,aso,nso,sso,Yh,Doe,lso,iso,cB,dso,cso,fso,Kh,Goe,mso,gso,fB,hso,pso,_so,Zh,Ooe,uso,bso,mB,Fso,vso,Tso,ep,Voe,Mso,Eso,gB,Cso,wso,Aso,op,Xoe,yso,Lso,hB,xso,kso,Sso,rp,zoe,Rso,Bso,pB,Pso,$so,Iso,tp,Qoe,qso,Nso,_B,jso,Dso,Gso,ap,Woe,Oso,Vso,uB,Xso,zso,Qso,np,Hoe,Wso,Hso,bB,Uso,Jso,Yso,sp,Uoe,Kso,Zso,FB,elo,olo,rlo,lp,Joe,tlo,alo,vB,nlo,slo,llo,ip,Yoe,ilo,dlo,TB,clo,flo,mlo,dp,Koe,glo,hlo,MB,plo,_lo,ulo,cp,Zoe,blo,Flo,EB,vlo,Tlo,Mlo,fp,ere,Elo,Clo,CB,wlo,Alo,ylo,mp,ore,Llo,xlo,wB,klo,Slo,Rlo,gp,rre,Blo,Plo,AB,$lo,Ilo,qlo,hp,tre,Nlo,jlo,yB,Dlo,Glo,Olo,pp,are,Vlo,Xlo,LB,zlo,Qlo,Wlo,_p,nre,Hlo,Ulo,xB,Jlo,Ylo,Klo,up,sre,Zlo,eio,kB,oio,rio,tio,bp,lre,aio,nio,SB,sio,lio,iio,Fp,ire,dio,cio,RB,fio,mio,gio,vp,dre,hio,pio,BB,_io,uio,bio,Tp,cre,Fio,vio,PB,Tio,Mio,Eio,Mp,fre,Cio,wio,$B,Aio,yio,Lio,Ep,mre,xio,kio,IB,Sio,Rio,Bio,Cp,gre,Pio,$io,qB,Iio,qio,Nio,js,hre,jio,Dio,NB,Gio,Oio,jB,Vio,Xio,zio,wp,pre,Qio,Wio,DB,Hio,Uio,Jio,Ap,_re,Yio,Kio,GB,Zio,edo,odo,yp,ure,rdo,tdo,OB,ado,ndo,sdo,Lp,bre,ldo,ido,VB,ddo,cdo,fdo,xp,Fre,mdo,gdo,XB,hdo,pdo,_do,kp,vre,udo,bdo,zB,Fdo,vdo,Tdo,Sp,Tre,Mdo,Edo,QB,Cdo,wdo,Ado,Rp,Mre,ydo,Ldo,WB,xdo,kdo,Sdo,Bp,Ere,Rdo,Bdo,HB,Pdo,$do,Ido,Pp,Cre,qdo,Ndo,UB,jdo,Ddo,Gdo,$p,wre,Odo,Vdo,JB,Xdo,zdo,Qdo,Ip,Are,Wdo,Hdo,YB,Udo,Jdo,Ydo,qp,yre,Kdo,Zdo,KB,eco,oco,rco,Np,Lre,tco,aco,ZB,nco,sco,lco,jp,xre,ico,dco,eP,cco,fco,mco,Dp,kre,gco,hco,oP,pco,_co,uco,Gp,Sre,bco,Fco,rP,vco,Tco,Mco,Op,Rre,Eco,Cco,tP,wco,Aco,yco,Vp,Bre,Lco,xco,aP,kco,Sco,Rco,Xp,Pre,Bco,Pco,nP,$co,Ico,qco,zp,$re,Nco,jco,sP,Dco,Gco,Oco,Qp,Ire,Vco,Xco,lP,zco,Qco,Wco,Wp,qre,Hco,Uco,iP,Jco,Yco,Kco,Hp,Nre,Zco,efo,dP,ofo,rfo,tfo,Up,jre,afo,nfo,cP,sfo,lfo,ifo,Jp,Dre,dfo,cfo,fP,ffo,mfo,gfo,Yp,Gre,hfo,pfo,mP,_fo,ufo,bfo,Kp,Ore,Ffo,vfo,gP,Tfo,Mfo,Efo,Zp,Vre,Cfo,wfo,hP,Afo,yfo,Lfo,e_,Xre,xfo,kfo,pP,Sfo,Rfo,Bfo,o_,zre,Pfo,$fo,_P,Ifo,qfo,Nfo,r_,Qre,jfo,Dfo,uP,Gfo,Ofo,Vfo,t_,Wre,Xfo,zfo,bP,Qfo,Wfo,Hfo,a_,Hre,Ufo,Jfo,FP,Yfo,Kfo,Zfo,n_,Ure,emo,omo,vP,rmo,tmo,amo,s_,Jre,nmo,smo,TP,lmo,imo,dmo,l_,Yre,cmo,fmo,MP,mmo,gmo,hmo,i_,Kre,pmo,_mo,EP,umo,bmo,Fmo,d_,Zre,vmo,Tmo,CP,Mmo,Emo,Cmo,c_,ete,wmo,Amo,wP,ymo,Lmo,xmo,f_,ote,kmo,Smo,AP,Rmo,Bmo,Pmo,m_,rte,$mo,Imo,yP,qmo,Nmo,jmo,g_,tte,Dmo,Gmo,LP,Omo,Vmo,Xmo,h_,ate,zmo,Qmo,xP,Wmo,Hmo,Umo,p_,nte,Jmo,Ymo,kP,Kmo,Zmo,ego,__,ste,ogo,rgo,SP,tgo,ago,ngo,u_,lte,sgo,lgo,RP,igo,dgo,cgo,b_,ite,fgo,mgo,BP,ggo,hgo,pgo,F_,dte,_go,ugo,PP,bgo,Fgo,vgo,v_,cte,Tgo,Mgo,$P,Ego,Cgo,wgo,T_,fte,Ago,ygo,IP,Lgo,xgo,kgo,M_,mte,Sgo,Rgo,qP,Bgo,Pgo,$go,E_,gte,Igo,qgo,NP,Ngo,jgo,Dgo,C_,hte,Ggo,Ogo,jP,Vgo,Xgo,zgo,w_,pte,Qgo,Wgo,DP,Hgo,Ugo,Jgo,A_,_te,Ygo,Kgo,GP,Zgo,eho,oho,y_,ute,rho,tho,OP,aho,nho,sho,L_,bte,lho,iho,VP,dho,cho,fho,x_,Fte,mho,gho,XP,hho,pho,_ho,k_,vte,uho,bho,zP,Fho,vho,Tho,S_,Tte,Mho,Eho,QP,Cho,who,Aho,R_,Mte,yho,Lho,WP,xho,kho,Sho,B_,Ete,Rho,Bho,HP,Pho,$ho,Iho,P_,qho,Cte,Nho,jho,wte,Dho,Gho,Ate,Oho,Vho,dw,kRe,Zi,$_,yte,cw,Xho,Lte,zho,SRe,Yo,fw,Qho,ed,Who,UP,Hho,Uho,JP,Jho,Yho,Kho,mw,Zho,xte,epo,opo,rpo,zr,gw,tpo,kte,apo,npo,od,spo,Ste,lpo,ipo,YP,dpo,cpo,fpo,Rte,mpo,gpo,hw,hpo,Ne,pw,ppo,Bte,_po,upo,za,bpo,Pte,Fpo,vpo,$te,Tpo,Mpo,Ite,Epo,Cpo,wpo,S,I_,qte,Apo,ypo,KP,Lpo,xpo,kpo,q_,Nte,Spo,Rpo,ZP,Bpo,Ppo,$po,N_,jte,Ipo,qpo,e$,Npo,jpo,Dpo,j_,Dte,Gpo,Opo,o$,Vpo,Xpo,zpo,D_,Gte,Qpo,Wpo,r$,Hpo,Upo,Jpo,G_,Ote,Ypo,Kpo,t$,Zpo,e_o,o_o,O_,Vte,r_o,t_o,a$,a_o,n_o,s_o,V_,Xte,l_o,i_o,n$,d_o,c_o,f_o,X_,zte,m_o,g_o,s$,h_o,p_o,__o,z_,Qte,u_o,b_o,l$,F_o,v_o,T_o,Q_,Wte,M_o,E_o,i$,C_o,w_o,A_o,W_,Hte,y_o,L_o,d$,x_o,k_o,S_o,H_,Ute,R_o,B_o,c$,P_o,$_o,I_o,U_,Jte,q_o,N_o,f$,j_o,D_o,G_o,J_,Yte,O_o,V_o,m$,X_o,z_o,Q_o,Y_,Kte,W_o,H_o,g$,U_o,J_o,Y_o,K_,Zte,K_o,Z_o,h$,euo,ouo,ruo,Z_,eae,tuo,auo,p$,nuo,suo,luo,eu,oae,iuo,duo,_$,cuo,fuo,muo,ou,rae,guo,huo,u$,puo,_uo,uuo,ru,tae,buo,Fuo,b$,vuo,Tuo,Muo,tu,aae,Euo,Cuo,F$,wuo,Auo,yuo,au,nae,Luo,xuo,v$,kuo,Suo,Ruo,nu,sae,Buo,Puo,T$,$uo,Iuo,quo,su,lae,Nuo,juo,M$,Duo,Guo,Ouo,lu,iae,Vuo,Xuo,E$,zuo,Quo,Wuo,iu,dae,Huo,Uuo,C$,Juo,Yuo,Kuo,du,cae,Zuo,e2o,w$,o2o,r2o,t2o,cu,fae,a2o,n2o,A$,s2o,l2o,i2o,fu,mae,d2o,c2o,y$,f2o,m2o,g2o,mu,gae,h2o,p2o,L$,_2o,u2o,b2o,gu,hae,F2o,v2o,x$,T2o,M2o,E2o,hu,pae,C2o,w2o,k$,A2o,y2o,L2o,pu,_ae,x2o,k2o,S$,S2o,R2o,B2o,_u,uae,P2o,$2o,R$,I2o,q2o,N2o,uu,bae,j2o,D2o,B$,G2o,O2o,V2o,bu,Fae,X2o,z2o,P$,Q2o,W2o,H2o,Fu,vae,U2o,J2o,$$,Y2o,K2o,Z2o,vu,Tae,e1o,o1o,I$,r1o,t1o,a1o,Tu,n1o,Mae,s1o,l1o,Eae,i1o,d1o,Cae,c1o,f1o,_w,RRe,rd,Mu,wae,uw,m1o,Aae,g1o,BRe,Ko,bw,h1o,td,p1o,q$,_1o,u1o,N$,b1o,F1o,v1o,Fw,T1o,yae,M1o,E1o,C1o,Qr,vw,w1o,Lae,A1o,y1o,ad,L1o,xae,x1o,k1o,j$,S1o,R1o,B1o,kae,P1o,$1o,Tw,I1o,je,Mw,q1o,Sae,N1o,j1o,Qa,D1o,Rae,G1o,O1o,Bae,V1o,X1o,Pae,z1o,Q1o,W1o,$,Eu,$ae,H1o,U1o,D$,J1o,Y1o,K1o,Cu,Iae,Z1o,ebo,G$,obo,rbo,tbo,wu,qae,abo,nbo,O$,sbo,lbo,ibo,Au,Nae,dbo,cbo,V$,fbo,mbo,gbo,yu,jae,hbo,pbo,X$,_bo,ubo,bbo,Lu,Dae,Fbo,vbo,z$,Tbo,Mbo,Ebo,xu,Gae,Cbo,wbo,Q$,Abo,ybo,Lbo,ku,Oae,xbo,kbo,W$,Sbo,Rbo,Bbo,Su,Vae,Pbo,$bo,H$,Ibo,qbo,Nbo,Ru,Xae,jbo,Dbo,U$,Gbo,Obo,Vbo,Bu,zae,Xbo,zbo,J$,Qbo,Wbo,Hbo,Pu,Qae,Ubo,Jbo,Y$,Ybo,Kbo,Zbo,$u,Wae,e5o,o5o,K$,r5o,t5o,a5o,Iu,Hae,n5o,s5o,Z$,l5o,i5o,d5o,qu,Uae,c5o,f5o,eI,m5o,g5o,h5o,Nu,Jae,p5o,_5o,oI,u5o,b5o,F5o,ju,Yae,v5o,T5o,rI,M5o,E5o,C5o,Du,Kae,w5o,A5o,tI,y5o,L5o,x5o,Gu,Zae,k5o,S5o,aI,R5o,B5o,P5o,Ou,ene,$5o,I5o,nI,q5o,N5o,j5o,Vu,one,D5o,G5o,sI,O5o,V5o,X5o,Xu,rne,z5o,Q5o,lI,W5o,H5o,U5o,zu,tne,J5o,Y5o,iI,K5o,Z5o,eFo,Qu,ane,oFo,rFo,dI,tFo,aFo,nFo,Wu,nne,sFo,lFo,cI,iFo,dFo,cFo,Hu,sne,fFo,mFo,fI,gFo,hFo,pFo,Uu,lne,_Fo,uFo,mI,bFo,FFo,vFo,Ju,ine,TFo,MFo,gI,EFo,CFo,wFo,Yu,dne,AFo,yFo,hI,LFo,xFo,kFo,Ku,cne,SFo,RFo,pI,BFo,PFo,$Fo,Zu,fne,IFo,qFo,_I,NFo,jFo,DFo,e2,mne,GFo,OFo,uI,VFo,XFo,zFo,o2,gne,QFo,WFo,bI,HFo,UFo,JFo,r2,hne,YFo,KFo,FI,ZFo,evo,ovo,t2,pne,rvo,tvo,vI,avo,nvo,svo,a2,lvo,_ne,ivo,dvo,une,cvo,fvo,bne,mvo,gvo,Ew,PRe,nd,n2,Fne,Cw,hvo,vne,pvo,$Re,Zo,ww,_vo,sd,uvo,TI,bvo,Fvo,MI,vvo,Tvo,Mvo,Aw,Evo,Tne,Cvo,wvo,Avo,Wr,yw,yvo,Mne,Lvo,xvo,ld,kvo,Ene,Svo,Rvo,EI,Bvo,Pvo,$vo,Cne,Ivo,qvo,Lw,Nvo,De,xw,jvo,wne,Dvo,Gvo,Wa,Ovo,Ane,Vvo,Xvo,yne,zvo,Qvo,Lne,Wvo,Hvo,Uvo,I,s2,xne,Jvo,Yvo,CI,Kvo,Zvo,e6o,l2,kne,o6o,r6o,wI,t6o,a6o,n6o,i2,Sne,s6o,l6o,AI,i6o,d6o,c6o,d2,Rne,f6o,m6o,yI,g6o,h6o,p6o,c2,Bne,_6o,u6o,LI,b6o,F6o,v6o,f2,Pne,T6o,M6o,xI,E6o,C6o,w6o,m2,$ne,A6o,y6o,kI,L6o,x6o,k6o,g2,Ine,S6o,R6o,SI,B6o,P6o,$6o,h2,qne,I6o,q6o,RI,N6o,j6o,D6o,p2,Nne,G6o,O6o,BI,V6o,X6o,z6o,_2,jne,Q6o,W6o,PI,H6o,U6o,J6o,u2,Dne,Y6o,K6o,$I,Z6o,eTo,oTo,b2,Gne,rTo,tTo,II,aTo,nTo,sTo,F2,One,lTo,iTo,qI,dTo,cTo,fTo,v2,Vne,mTo,gTo,NI,hTo,pTo,_To,T2,Xne,uTo,bTo,jI,FTo,vTo,TTo,M2,zne,MTo,ETo,DI,CTo,wTo,ATo,E2,Qne,yTo,LTo,GI,xTo,kTo,STo,C2,Wne,RTo,BTo,OI,PTo,$To,ITo,w2,Hne,qTo,NTo,VI,jTo,DTo,GTo,A2,Une,OTo,VTo,XI,XTo,zTo,QTo,y2,Jne,WTo,HTo,zI,UTo,JTo,YTo,L2,Yne,KTo,ZTo,QI,eMo,oMo,rMo,x2,Kne,tMo,aMo,WI,nMo,sMo,lMo,k2,Zne,iMo,dMo,HI,cMo,fMo,mMo,S2,ese,gMo,hMo,UI,pMo,_Mo,uMo,R2,ose,bMo,FMo,JI,vMo,TMo,MMo,B2,rse,EMo,CMo,YI,wMo,AMo,yMo,P2,tse,LMo,xMo,KI,kMo,SMo,RMo,$2,ase,BMo,PMo,ZI,$Mo,IMo,qMo,I2,nse,NMo,jMo,sse,DMo,GMo,OMo,q2,lse,VMo,XMo,eq,zMo,QMo,WMo,N2,ise,HMo,UMo,oq,JMo,YMo,KMo,j2,dse,ZMo,e4o,rq,o4o,r4o,t4o,D2,cse,a4o,n4o,tq,s4o,l4o,i4o,G2,d4o,fse,c4o,f4o,mse,m4o,g4o,gse,h4o,p4o,kw,IRe,id,O2,hse,Sw,_4o,pse,u4o,qRe,er,Rw,b4o,dd,F4o,aq,v4o,T4o,nq,M4o,E4o,C4o,Bw,w4o,_se,A4o,y4o,L4o,Hr,Pw,x4o,use,k4o,S4o,cd,R4o,bse,B4o,P4o,sq,$4o,I4o,q4o,Fse,N4o,j4o,$w,D4o,Ge,Iw,G4o,vse,O4o,V4o,Ha,X4o,Tse,z4o,Q4o,Mse,W4o,H4o,Ese,U4o,J4o,Y4o,ne,V2,Cse,K4o,Z4o,lq,eEo,oEo,rEo,X2,wse,tEo,aEo,iq,nEo,sEo,lEo,z2,Ase,iEo,dEo,dq,cEo,fEo,mEo,Q2,yse,gEo,hEo,cq,pEo,_Eo,uEo,W2,Lse,bEo,FEo,fq,vEo,TEo,MEo,H2,xse,EEo,CEo,mq,wEo,AEo,yEo,U2,kse,LEo,xEo,gq,kEo,SEo,REo,J2,Sse,BEo,PEo,hq,$Eo,IEo,qEo,Y2,Rse,NEo,jEo,pq,DEo,GEo,OEo,K2,Bse,VEo,XEo,_q,zEo,QEo,WEo,Z2,Pse,HEo,UEo,uq,JEo,YEo,KEo,e1,$se,ZEo,eCo,bq,oCo,rCo,tCo,o1,Ise,aCo,nCo,Fq,sCo,lCo,iCo,r1,qse,dCo,cCo,vq,fCo,mCo,gCo,t1,Nse,hCo,pCo,Tq,_Co,uCo,bCo,a1,jse,FCo,vCo,Mq,TCo,MCo,ECo,n1,Dse,CCo,wCo,Eq,ACo,yCo,LCo,s1,xCo,Gse,kCo,SCo,Ose,RCo,BCo,Vse,PCo,$Co,qw,NRe,fd,l1,Xse,Nw,ICo,zse,qCo,jRe,or,jw,NCo,md,jCo,Cq,DCo,GCo,wq,OCo,VCo,XCo,Dw,zCo,Qse,QCo,WCo,HCo,Ur,Gw,UCo,Wse,JCo,YCo,gd,KCo,Hse,ZCo,e3o,Aq,o3o,r3o,t3o,Use,a3o,n3o,Ow,s3o,Oe,Vw,l3o,Jse,i3o,d3o,Ua,c3o,Yse,f3o,m3o,Kse,g3o,h3o,Zse,p3o,_3o,u3o,y,i1,ele,b3o,F3o,yq,v3o,T3o,M3o,d1,ole,E3o,C3o,Lq,w3o,A3o,y3o,c1,rle,L3o,x3o,xq,k3o,S3o,R3o,f1,tle,B3o,P3o,kq,$3o,I3o,q3o,m1,ale,N3o,j3o,Sq,D3o,G3o,O3o,g1,nle,V3o,X3o,Rq,z3o,Q3o,W3o,h1,sle,H3o,U3o,Bq,J3o,Y3o,K3o,p1,lle,Z3o,ewo,Pq,owo,rwo,two,_1,ile,awo,nwo,$q,swo,lwo,iwo,u1,dle,dwo,cwo,Iq,fwo,mwo,gwo,b1,cle,hwo,pwo,qq,_wo,uwo,bwo,F1,fle,Fwo,vwo,Nq,Two,Mwo,Ewo,v1,mle,Cwo,wwo,jq,Awo,ywo,Lwo,T1,gle,xwo,kwo,Dq,Swo,Rwo,Bwo,M1,hle,Pwo,$wo,Gq,Iwo,qwo,Nwo,E1,ple,jwo,Dwo,Oq,Gwo,Owo,Vwo,C1,_le,Xwo,zwo,Vq,Qwo,Wwo,Hwo,w1,ule,Uwo,Jwo,Xq,Ywo,Kwo,Zwo,A1,ble,eAo,oAo,zq,rAo,tAo,aAo,y1,Fle,nAo,sAo,Qq,lAo,iAo,dAo,L1,vle,cAo,fAo,Wq,mAo,gAo,hAo,x1,Tle,pAo,_Ao,Hq,uAo,bAo,FAo,k1,Mle,vAo,TAo,Uq,MAo,EAo,CAo,S1,Ele,wAo,AAo,Jq,yAo,LAo,xAo,R1,Cle,kAo,SAo,Yq,RAo,BAo,PAo,B1,wle,$Ao,IAo,Kq,qAo,NAo,jAo,P1,Ale,DAo,GAo,Zq,OAo,VAo,XAo,$1,yle,zAo,QAo,eN,WAo,HAo,UAo,I1,Lle,JAo,YAo,oN,KAo,ZAo,e0o,q1,xle,o0o,r0o,rN,t0o,a0o,n0o,N1,kle,s0o,l0o,tN,i0o,d0o,c0o,j1,Sle,f0o,m0o,aN,g0o,h0o,p0o,D1,Rle,_0o,u0o,nN,b0o,F0o,v0o,G1,Ble,T0o,M0o,sN,E0o,C0o,w0o,O1,Ple,A0o,y0o,lN,L0o,x0o,k0o,V1,$le,S0o,R0o,iN,B0o,P0o,$0o,X1,Ile,I0o,q0o,dN,N0o,j0o,D0o,z1,qle,G0o,O0o,cN,V0o,X0o,z0o,Q1,Nle,Q0o,W0o,fN,H0o,U0o,J0o,W1,jle,Y0o,K0o,mN,Z0o,eyo,oyo,H1,Dle,ryo,tyo,gN,ayo,nyo,syo,U1,Gle,lyo,iyo,hN,dyo,cyo,fyo,J1,Ole,myo,gyo,pN,hyo,pyo,_yo,Y1,Vle,uyo,byo,_N,Fyo,vyo,Tyo,K1,Xle,Myo,Eyo,uN,Cyo,wyo,Ayo,Z1,zle,yyo,Lyo,bN,xyo,kyo,Syo,eb,Qle,Ryo,Byo,FN,Pyo,$yo,Iyo,ob,qyo,Wle,Nyo,jyo,Hle,Dyo,Gyo,Ule,Oyo,Vyo,Xw,DRe,hd,rb,Jle,zw,Xyo,Yle,zyo,GRe,rr,Qw,Qyo,pd,Wyo,vN,Hyo,Uyo,TN,Jyo,Yyo,Kyo,Ww,Zyo,Kle,eLo,oLo,rLo,Jr,Hw,tLo,Zle,aLo,nLo,_d,sLo,eie,lLo,iLo,MN,dLo,cLo,fLo,oie,mLo,gLo,Uw,hLo,Ve,Jw,pLo,rie,_Lo,uLo,Ja,bLo,tie,FLo,vLo,aie,TLo,MLo,nie,ELo,CLo,wLo,G,tb,sie,ALo,yLo,EN,LLo,xLo,kLo,ab,lie,SLo,RLo,CN,BLo,PLo,$Lo,nb,iie,ILo,qLo,wN,NLo,jLo,DLo,sb,die,GLo,OLo,AN,VLo,XLo,zLo,lb,cie,QLo,WLo,yN,HLo,ULo,JLo,ib,fie,YLo,KLo,LN,ZLo,e8o,o8o,db,mie,r8o,t8o,xN,a8o,n8o,s8o,cb,gie,l8o,i8o,kN,d8o,c8o,f8o,fb,hie,m8o,g8o,SN,h8o,p8o,_8o,mb,pie,u8o,b8o,RN,F8o,v8o,T8o,gb,_ie,M8o,E8o,BN,C8o,w8o,A8o,hb,uie,y8o,L8o,PN,x8o,k8o,S8o,pb,bie,R8o,B8o,$N,P8o,$8o,I8o,_b,Fie,q8o,N8o,IN,j8o,D8o,G8o,ub,vie,O8o,V8o,qN,X8o,z8o,Q8o,bb,Tie,W8o,H8o,NN,U8o,J8o,Y8o,Fb,Mie,K8o,Z8o,jN,e7o,o7o,r7o,vb,Eie,t7o,a7o,DN,n7o,s7o,l7o,Tb,Cie,i7o,d7o,GN,c7o,f7o,m7o,Mb,wie,g7o,h7o,ON,p7o,_7o,u7o,Eb,Aie,b7o,F7o,VN,v7o,T7o,M7o,Cb,yie,E7o,C7o,XN,w7o,A7o,y7o,wb,Lie,L7o,x7o,zN,k7o,S7o,R7o,Ab,xie,B7o,P7o,QN,$7o,I7o,q7o,yb,kie,N7o,j7o,WN,D7o,G7o,O7o,Lb,Sie,V7o,X7o,HN,z7o,Q7o,W7o,xb,Rie,H7o,U7o,UN,J7o,Y7o,K7o,kb,Bie,Z7o,e9o,JN,o9o,r9o,t9o,Sb,a9o,Pie,n9o,s9o,$ie,l9o,i9o,Iie,d9o,c9o,Yw,ORe,ud,Rb,qie,Kw,f9o,Nie,m9o,VRe,tr,Zw,g9o,bd,h9o,YN,p9o,_9o,KN,u9o,b9o,F9o,eA,v9o,jie,T9o,M9o,E9o,Yr,oA,C9o,Die,w9o,A9o,Fd,y9o,Gie,L9o,x9o,ZN,k9o,S9o,R9o,Oie,B9o,P9o,rA,$9o,Xe,tA,I9o,Vie,q9o,N9o,Ya,j9o,Xie,D9o,G9o,zie,O9o,V9o,Qie,X9o,z9o,Q9o,da,Bb,Wie,W9o,H9o,ej,U9o,J9o,Y9o,Pb,Hie,K9o,Z9o,oj,exo,oxo,rxo,$b,Uie,txo,axo,rj,nxo,sxo,lxo,Ib,Jie,ixo,dxo,tj,cxo,fxo,mxo,qb,Yie,gxo,hxo,aj,pxo,_xo,uxo,Nb,bxo,Kie,Fxo,vxo,Zie,Txo,Mxo,ede,Exo,Cxo,aA,XRe,vd,jb,ode,nA,wxo,rde,Axo,zRe,ar,sA,yxo,Td,Lxo,nj,xxo,kxo,sj,Sxo,Rxo,Bxo,lA,Pxo,tde,$xo,Ixo,qxo,Kr,iA,Nxo,ade,jxo,Dxo,Md,Gxo,nde,Oxo,Vxo,lj,Xxo,zxo,Qxo,sde,Wxo,Hxo,dA,Uxo,ze,cA,Jxo,lde,Yxo,Kxo,Ka,Zxo,ide,eko,oko,dde,rko,tko,cde,ako,nko,sko,j,Db,fde,lko,iko,ij,dko,cko,fko,Gb,mde,mko,gko,dj,hko,pko,_ko,Ob,gde,uko,bko,cj,Fko,vko,Tko,Vb,hde,Mko,Eko,fj,Cko,wko,Ako,Xb,pde,yko,Lko,mj,xko,kko,Sko,zb,_de,Rko,Bko,gj,Pko,$ko,Iko,Qb,ude,qko,Nko,hj,jko,Dko,Gko,Wb,bde,Oko,Vko,pj,Xko,zko,Qko,Hb,Fde,Wko,Hko,_j,Uko,Jko,Yko,Ub,vde,Kko,Zko,uj,eSo,oSo,rSo,Jb,Tde,tSo,aSo,bj,nSo,sSo,lSo,Yb,Mde,iSo,dSo,Fj,cSo,fSo,mSo,Kb,Ede,gSo,hSo,vj,pSo,_So,uSo,Zb,Cde,bSo,FSo,Tj,vSo,TSo,MSo,e5,wde,ESo,CSo,Mj,wSo,ASo,ySo,o5,Ade,LSo,xSo,Ej,kSo,SSo,RSo,r5,yde,BSo,PSo,Cj,$So,ISo,qSo,t5,Lde,NSo,jSo,wj,DSo,GSo,OSo,a5,xde,VSo,XSo,Aj,zSo,QSo,WSo,n5,kde,HSo,USo,yj,JSo,YSo,KSo,s5,Sde,ZSo,eRo,Lj,oRo,rRo,tRo,l5,Rde,aRo,nRo,xj,sRo,lRo,iRo,i5,Bde,dRo,cRo,kj,fRo,mRo,gRo,d5,Pde,hRo,pRo,Sj,_Ro,uRo,bRo,c5,$de,FRo,vRo,Rj,TRo,MRo,ERo,f5,Ide,CRo,wRo,Bj,ARo,yRo,LRo,m5,qde,xRo,kRo,Pj,SRo,RRo,BRo,g5,Nde,PRo,$Ro,$j,IRo,qRo,NRo,h5,jde,jRo,DRo,Ij,GRo,ORo,VRo,p5,Dde,XRo,zRo,qj,QRo,WRo,HRo,_5,Gde,URo,JRo,Nj,YRo,KRo,ZRo,u5,Ode,eBo,oBo,jj,rBo,tBo,aBo,b5,Vde,nBo,sBo,Dj,lBo,iBo,dBo,F5,cBo,Xde,fBo,mBo,zde,gBo,hBo,Qde,pBo,_Bo,fA,QRe,Ed,v5,Wde,mA,uBo,Hde,bBo,WRe,nr,gA,FBo,Cd,vBo,Gj,TBo,MBo,Oj,EBo,CBo,wBo,hA,ABo,Ude,yBo,LBo,xBo,Zr,pA,kBo,Jde,SBo,RBo,wd,BBo,Yde,PBo,$Bo,Vj,IBo,qBo,NBo,Kde,jBo,DBo,_A,GBo,Qe,uA,OBo,Zde,VBo,XBo,Za,zBo,ece,QBo,WBo,oce,HBo,UBo,rce,JBo,YBo,KBo,R,T5,tce,ZBo,ePo,Xj,oPo,rPo,tPo,M5,ace,aPo,nPo,zj,sPo,lPo,iPo,E5,nce,dPo,cPo,Qj,fPo,mPo,gPo,C5,sce,hPo,pPo,Wj,_Po,uPo,bPo,w5,lce,FPo,vPo,Hj,TPo,MPo,EPo,A5,ice,CPo,wPo,Uj,APo,yPo,LPo,y5,dce,xPo,kPo,Jj,SPo,RPo,BPo,L5,cce,PPo,$Po,Yj,IPo,qPo,NPo,x5,fce,jPo,DPo,Kj,GPo,OPo,VPo,k5,mce,XPo,zPo,Zj,QPo,WPo,HPo,S5,gce,UPo,JPo,eD,YPo,KPo,ZPo,R5,hce,e$o,o$o,oD,r$o,t$o,a$o,B5,pce,n$o,s$o,rD,l$o,i$o,d$o,P5,_ce,c$o,f$o,tD,m$o,g$o,h$o,$5,uce,p$o,_$o,aD,u$o,b$o,F$o,I5,bce,v$o,T$o,nD,M$o,E$o,C$o,q5,Fce,w$o,A$o,sD,y$o,L$o,x$o,N5,vce,k$o,S$o,lD,R$o,B$o,P$o,j5,Tce,$$o,I$o,iD,q$o,N$o,j$o,D5,Mce,D$o,G$o,dD,O$o,V$o,X$o,G5,Ece,z$o,Q$o,cD,W$o,H$o,U$o,O5,Cce,J$o,Y$o,fD,K$o,Z$o,eIo,V5,wce,oIo,rIo,mD,tIo,aIo,nIo,X5,Ace,sIo,lIo,gD,iIo,dIo,cIo,z5,yce,fIo,mIo,hD,gIo,hIo,pIo,Q5,Lce,_Io,uIo,pD,bIo,FIo,vIo,W5,xce,TIo,MIo,_D,EIo,CIo,wIo,H5,kce,AIo,yIo,uD,LIo,xIo,kIo,U5,Sce,SIo,RIo,bD,BIo,PIo,$Io,J5,Rce,IIo,qIo,FD,NIo,jIo,DIo,Y5,Bce,GIo,OIo,vD,VIo,XIo,zIo,K5,Pce,QIo,WIo,TD,HIo,UIo,JIo,Z5,$ce,YIo,KIo,MD,ZIo,eqo,oqo,eF,Ice,rqo,tqo,ED,aqo,nqo,sqo,oF,qce,lqo,iqo,CD,dqo,cqo,fqo,rF,Nce,mqo,gqo,wD,hqo,pqo,_qo,tF,jce,uqo,bqo,AD,Fqo,vqo,Tqo,aF,Dce,Mqo,Eqo,yD,Cqo,wqo,Aqo,nF,Gce,yqo,Lqo,LD,xqo,kqo,Sqo,sF,Rqo,Oce,Bqo,Pqo,Vce,$qo,Iqo,Xce,qqo,Nqo,bA,HRe,Ad,lF,zce,FA,jqo,Qce,Dqo,URe,sr,vA,Gqo,yd,Oqo,xD,Vqo,Xqo,kD,zqo,Qqo,Wqo,TA,Hqo,Wce,Uqo,Jqo,Yqo,et,MA,Kqo,Hce,Zqo,eNo,Ld,oNo,Uce,rNo,tNo,SD,aNo,nNo,sNo,Jce,lNo,iNo,EA,dNo,We,CA,cNo,Yce,fNo,mNo,en,gNo,Kce,hNo,pNo,Zce,_No,uNo,efe,bNo,FNo,vNo,ofe,iF,rfe,TNo,MNo,RD,ENo,CNo,wNo,dF,ANo,tfe,yNo,LNo,afe,xNo,kNo,nfe,SNo,RNo,wA,JRe,xd,cF,sfe,AA,BNo,lfe,PNo,YRe,lr,yA,$No,kd,INo,BD,qNo,NNo,PD,jNo,DNo,GNo,LA,ONo,ife,VNo,XNo,zNo,ot,xA,QNo,dfe,WNo,HNo,Sd,UNo,cfe,JNo,YNo,$D,KNo,ZNo,ejo,ffe,ojo,rjo,kA,tjo,He,SA,ajo,mfe,njo,sjo,on,ljo,gfe,ijo,djo,hfe,cjo,fjo,pfe,mjo,gjo,hjo,ce,fF,_fe,pjo,_jo,ID,ujo,bjo,Fjo,mF,ufe,vjo,Tjo,qD,Mjo,Ejo,Cjo,Ds,bfe,wjo,Ajo,ND,yjo,Ljo,jD,xjo,kjo,Sjo,gF,Ffe,Rjo,Bjo,DD,Pjo,$jo,Ijo,ma,vfe,qjo,Njo,GD,jjo,Djo,OD,Gjo,Ojo,VD,Vjo,Xjo,zjo,hF,Tfe,Qjo,Wjo,XD,Hjo,Ujo,Jjo,pF,Mfe,Yjo,Kjo,zD,Zjo,eDo,oDo,_F,Efe,rDo,tDo,QD,aDo,nDo,sDo,uF,Cfe,lDo,iDo,WD,dDo,cDo,fDo,bF,wfe,mDo,gDo,HD,hDo,pDo,_Do,FF,Afe,uDo,bDo,UD,FDo,vDo,TDo,vF,yfe,MDo,EDo,JD,CDo,wDo,ADo,TF,yDo,Lfe,LDo,xDo,xfe,kDo,SDo,kfe,RDo,BDo,RA,KRe,Rd,MF,Sfe,BA,PDo,Rfe,$Do,ZRe,ir,PA,IDo,Bd,qDo,YD,NDo,jDo,KD,DDo,GDo,ODo,$A,VDo,Bfe,XDo,zDo,QDo,rt,IA,WDo,Pfe,HDo,UDo,Pd,JDo,$fe,YDo,KDo,ZD,ZDo,eGo,oGo,Ife,rGo,tGo,qA,aGo,Ue,NA,nGo,qfe,sGo,lGo,rn,iGo,Nfe,dGo,cGo,jfe,fGo,mGo,Dfe,gGo,hGo,pGo,Gfe,EF,Ofe,_Go,uGo,eG,bGo,FGo,vGo,CF,TGo,Vfe,MGo,EGo,Xfe,CGo,wGo,zfe,AGo,yGo,jA,eBe,$d,wF,Qfe,DA,LGo,Wfe,xGo,oBe,dr,GA,kGo,Id,SGo,oG,RGo,BGo,rG,PGo,$Go,IGo,OA,qGo,Hfe,NGo,jGo,DGo,tt,VA,GGo,Ufe,OGo,VGo,qd,XGo,Jfe,zGo,QGo,tG,WGo,HGo,UGo,Yfe,JGo,YGo,XA,KGo,Je,zA,ZGo,Kfe,eOo,oOo,tn,rOo,Zfe,tOo,aOo,eme,nOo,sOo,ome,lOo,iOo,dOo,Se,AF,rme,cOo,fOo,aG,mOo,gOo,hOo,yF,tme,pOo,_Oo,nG,uOo,bOo,FOo,LF,ame,vOo,TOo,sG,MOo,EOo,COo,xF,nme,wOo,AOo,lG,yOo,LOo,xOo,kF,sme,kOo,SOo,iG,ROo,BOo,POo,SF,lme,$Oo,IOo,dG,qOo,NOo,jOo,RF,ime,DOo,GOo,cG,OOo,VOo,XOo,BF,dme,zOo,QOo,fG,WOo,HOo,UOo,PF,JOo,cme,YOo,KOo,fme,ZOo,eVo,mme,oVo,rVo,QA,rBe,Nd,$F,gme,WA,tVo,hme,aVo,tBe,cr,HA,nVo,jd,sVo,mG,lVo,iVo,gG,dVo,cVo,fVo,UA,mVo,pme,gVo,hVo,pVo,at,JA,_Vo,_me,uVo,bVo,Dd,FVo,ume,vVo,TVo,hG,MVo,EVo,CVo,bme,wVo,AVo,YA,yVo,Ye,KA,LVo,Fme,xVo,kVo,an,SVo,vme,RVo,BVo,Tme,PVo,$Vo,Mme,IVo,qVo,NVo,nn,IF,Eme,jVo,DVo,pG,GVo,OVo,VVo,qF,Cme,XVo,zVo,_G,QVo,WVo,HVo,NF,wme,UVo,JVo,uG,YVo,KVo,ZVo,jF,Ame,eXo,oXo,bG,rXo,tXo,aXo,DF,nXo,yme,sXo,lXo,Lme,iXo,dXo,xme,cXo,fXo,ZA,aBe,Gd,GF,kme,e0,mXo,Sme,gXo,nBe,fr,o0,hXo,Od,pXo,FG,_Xo,uXo,vG,bXo,FXo,vXo,r0,TXo,Rme,MXo,EXo,CXo,nt,t0,wXo,Bme,AXo,yXo,Vd,LXo,Pme,xXo,kXo,TG,SXo,RXo,BXo,$me,PXo,$Xo,a0,IXo,Ke,n0,qXo,Ime,NXo,jXo,sn,DXo,qme,GXo,OXo,Nme,VXo,XXo,jme,zXo,QXo,WXo,Re,OF,Dme,HXo,UXo,MG,JXo,YXo,KXo,VF,Gme,ZXo,ezo,EG,ozo,rzo,tzo,XF,Ome,azo,nzo,CG,szo,lzo,izo,zF,Vme,dzo,czo,wG,fzo,mzo,gzo,QF,Xme,hzo,pzo,AG,_zo,uzo,bzo,WF,zme,Fzo,vzo,yG,Tzo,Mzo,Ezo,HF,Qme,Czo,wzo,LG,Azo,yzo,Lzo,UF,Wme,xzo,kzo,xG,Szo,Rzo,Bzo,JF,Pzo,Hme,$zo,Izo,Ume,qzo,Nzo,Jme,jzo,Dzo,s0,sBe,Xd,YF,Yme,l0,Gzo,Kme,Ozo,lBe,mr,i0,Vzo,zd,Xzo,kG,zzo,Qzo,SG,Wzo,Hzo,Uzo,d0,Jzo,Zme,Yzo,Kzo,Zzo,st,c0,eQo,ege,oQo,rQo,Qd,tQo,oge,aQo,nQo,RG,sQo,lQo,iQo,rge,dQo,cQo,f0,fQo,Ze,m0,mQo,tge,gQo,hQo,ln,pQo,age,_Qo,uQo,nge,bQo,FQo,sge,vQo,TQo,MQo,g0,KF,lge,EQo,CQo,BG,wQo,AQo,yQo,ZF,ige,LQo,xQo,PG,kQo,SQo,RQo,ev,BQo,dge,PQo,$Qo,cge,IQo,qQo,fge,NQo,jQo,h0,iBe,Wd,ov,mge,p0,DQo,gge,GQo,dBe,gr,_0,OQo,Hd,VQo,$G,XQo,zQo,IG,QQo,WQo,HQo,u0,UQo,hge,JQo,YQo,KQo,lt,b0,ZQo,pge,eWo,oWo,Ud,rWo,_ge,tWo,aWo,qG,nWo,sWo,lWo,uge,iWo,dWo,F0,cWo,eo,v0,fWo,bge,mWo,gWo,dn,hWo,Fge,pWo,_Wo,vge,uWo,bWo,Tge,FWo,vWo,TWo,cn,rv,Mge,MWo,EWo,NG,CWo,wWo,AWo,tv,Ege,yWo,LWo,jG,xWo,kWo,SWo,av,Cge,RWo,BWo,DG,PWo,$Wo,IWo,nv,wge,qWo,NWo,GG,jWo,DWo,GWo,sv,OWo,Age,VWo,XWo,yge,zWo,QWo,Lge,WWo,HWo,T0,cBe,Jd,lv,xge,M0,UWo,kge,JWo,fBe,hr,E0,YWo,Yd,KWo,OG,ZWo,eHo,VG,oHo,rHo,tHo,C0,aHo,Sge,nHo,sHo,lHo,it,w0,iHo,Rge,dHo,cHo,Kd,fHo,Bge,mHo,gHo,XG,hHo,pHo,_Ho,Pge,uHo,bHo,A0,FHo,oo,y0,vHo,$ge,THo,MHo,fn,EHo,Ige,CHo,wHo,qge,AHo,yHo,Nge,LHo,xHo,kHo,Zd,iv,jge,SHo,RHo,zG,BHo,PHo,$Ho,dv,Dge,IHo,qHo,QG,NHo,jHo,DHo,cv,Gge,GHo,OHo,WG,VHo,XHo,zHo,fv,QHo,Oge,WHo,HHo,Vge,UHo,JHo,Xge,YHo,KHo,L0,mBe,ec,mv,zge,x0,ZHo,Qge,eUo,gBe,pr,k0,oUo,oc,rUo,HG,tUo,aUo,UG,nUo,sUo,lUo,S0,iUo,Wge,dUo,cUo,fUo,dt,R0,mUo,Hge,gUo,hUo,rc,pUo,Uge,_Uo,uUo,JG,bUo,FUo,vUo,Jge,TUo,MUo,B0,EUo,ro,P0,CUo,Yge,wUo,AUo,mn,yUo,Kge,LUo,xUo,Zge,kUo,SUo,ehe,RUo,BUo,PUo,ohe,gv,rhe,$Uo,IUo,YG,qUo,NUo,jUo,hv,DUo,the,GUo,OUo,ahe,VUo,XUo,nhe,zUo,QUo,$0,hBe,tc,pv,she,I0,WUo,lhe,HUo,pBe,_r,q0,UUo,ac,JUo,KG,YUo,KUo,ZG,ZUo,eJo,oJo,N0,rJo,ihe,tJo,aJo,nJo,ct,j0,sJo,dhe,lJo,iJo,nc,dJo,che,cJo,fJo,eO,mJo,gJo,hJo,fhe,pJo,_Jo,D0,uJo,to,G0,bJo,mhe,FJo,vJo,gn,TJo,ghe,MJo,EJo,hhe,CJo,wJo,phe,AJo,yJo,LJo,_he,_v,uhe,xJo,kJo,oO,SJo,RJo,BJo,uv,PJo,bhe,$Jo,IJo,Fhe,qJo,NJo,vhe,jJo,DJo,O0,_Be,sc,bv,The,V0,GJo,Mhe,OJo,uBe,ur,X0,VJo,lc,XJo,rO,zJo,QJo,tO,WJo,HJo,UJo,z0,JJo,Ehe,YJo,KJo,ZJo,ft,Q0,eYo,Che,oYo,rYo,ic,tYo,whe,aYo,nYo,aO,sYo,lYo,iYo,Ahe,dYo,cYo,W0,fYo,ao,H0,mYo,yhe,gYo,hYo,hn,pYo,Lhe,_Yo,uYo,xhe,bYo,FYo,khe,vYo,TYo,MYo,dc,Fv,She,EYo,CYo,nO,wYo,AYo,yYo,vv,Rhe,LYo,xYo,sO,kYo,SYo,RYo,Tv,Bhe,BYo,PYo,lO,$Yo,IYo,qYo,Mv,NYo,Phe,jYo,DYo,$he,GYo,OYo,Ihe,VYo,XYo,U0,bBe,cc,Ev,qhe,J0,zYo,Nhe,QYo,FBe,br,Y0,WYo,fc,HYo,iO,UYo,JYo,dO,YYo,KYo,ZYo,K0,eKo,jhe,oKo,rKo,tKo,mt,Z0,aKo,Dhe,nKo,sKo,mc,lKo,Ghe,iKo,dKo,cO,cKo,fKo,mKo,Ohe,gKo,hKo,ey,pKo,no,oy,_Ko,Vhe,uKo,bKo,pn,FKo,Xhe,vKo,TKo,zhe,MKo,EKo,Qhe,CKo,wKo,AKo,Whe,Cv,Hhe,yKo,LKo,fO,xKo,kKo,SKo,wv,RKo,Uhe,BKo,PKo,Jhe,$Ko,IKo,Yhe,qKo,NKo,ry,vBe,gc,Av,Khe,ty,jKo,Zhe,DKo,TBe,Fr,ay,GKo,hc,OKo,mO,VKo,XKo,gO,zKo,QKo,WKo,ny,HKo,epe,UKo,JKo,YKo,gt,sy,KKo,ope,ZKo,eZo,pc,oZo,rpe,rZo,tZo,hO,aZo,nZo,sZo,tpe,lZo,iZo,ly,dZo,ho,iy,cZo,ape,fZo,mZo,_n,gZo,npe,hZo,pZo,spe,_Zo,uZo,lpe,bZo,FZo,vZo,x,yv,ipe,TZo,MZo,pO,EZo,CZo,wZo,Lv,dpe,AZo,yZo,_O,LZo,xZo,kZo,xv,cpe,SZo,RZo,uO,BZo,PZo,$Zo,kv,fpe,IZo,qZo,bO,NZo,jZo,DZo,Sv,mpe,GZo,OZo,FO,VZo,XZo,zZo,Rv,gpe,QZo,WZo,vO,HZo,UZo,JZo,Bv,hpe,YZo,KZo,TO,ZZo,eer,oer,Pv,ppe,rer,ter,MO,aer,ner,ser,$v,_pe,ler,ier,EO,der,cer,fer,Iv,upe,mer,ger,CO,her,per,_er,qv,bpe,uer,ber,wO,Fer,ver,Ter,Nv,Fpe,Mer,Eer,AO,Cer,wer,Aer,jv,vpe,yer,Ler,yO,xer,ker,Ser,Dv,Tpe,Rer,Ber,LO,Per,$er,Ier,Gv,Mpe,qer,Ner,xO,jer,Der,Ger,Ov,Epe,Oer,Ver,kO,Xer,zer,Qer,Gs,Cpe,Wer,Her,SO,Uer,Jer,RO,Yer,Ker,Zer,Vv,wpe,eor,oor,BO,ror,tor,aor,Xv,Ape,nor,sor,PO,lor,ior,dor,zv,ype,cor,mor,$O,gor,hor,por,Qv,Lpe,_or,uor,IO,bor,For,vor,Wv,xpe,Tor,Mor,qO,Eor,Cor,wor,Hv,kpe,Aor,yor,NO,Lor,xor,kor,Uv,Spe,Sor,Ror,jO,Bor,Por,$or,Jv,Rpe,Ior,qor,DO,Nor,jor,Dor,Yv,Bpe,Gor,Oor,GO,Vor,Xor,zor,Kv,Ppe,Qor,Wor,OO,Hor,Uor,Jor,Zv,$pe,Yor,Kor,VO,Zor,err,orr,e6,Ipe,rrr,trr,XO,arr,nrr,srr,o6,qpe,lrr,irr,zO,drr,crr,frr,r6,Npe,mrr,grr,QO,hrr,prr,_rr,t6,jpe,urr,brr,WO,Frr,vrr,Trr,a6,Dpe,Mrr,Err,HO,Crr,wrr,Arr,n6,Gpe,yrr,Lrr,UO,xrr,krr,Srr,s6,Ope,Rrr,Brr,JO,Prr,$rr,Irr,l6,Vpe,qrr,Nrr,YO,jrr,Drr,Grr,i6,Xpe,Orr,Vrr,KO,Xrr,zrr,Qrr,d6,zpe,Wrr,Hrr,ZO,Urr,Jrr,Yrr,c6,Qpe,Krr,Zrr,eV,etr,otr,rtr,f6,Wpe,ttr,atr,oV,ntr,str,ltr,m6,Hpe,itr,dtr,rV,ctr,ftr,mtr,g6,Upe,gtr,htr,tV,ptr,_tr,utr,h6,Jpe,btr,Ftr,aV,vtr,Ttr,Mtr,p6,Ype,Etr,Ctr,nV,wtr,Atr,ytr,Kpe,Ltr,xtr,dy,MBe,_c,_6,Zpe,cy,ktr,e_e,Str,EBe,vr,fy,Rtr,uc,Btr,sV,Ptr,$tr,lV,Itr,qtr,Ntr,my,jtr,o_e,Dtr,Gtr,Otr,ht,gy,Vtr,r_e,Xtr,ztr,bc,Qtr,t_e,Wtr,Htr,iV,Utr,Jtr,Ytr,a_e,Ktr,Ztr,hy,ear,po,py,oar,n_e,rar,tar,un,aar,s_e,nar,sar,l_e,lar,iar,i_e,dar,car,far,H,u6,d_e,mar,gar,dV,har,par,_ar,b6,c_e,uar,bar,cV,Far,Tar,Mar,F6,f_e,Ear,Car,fV,war,Aar,yar,v6,m_e,Lar,xar,mV,kar,Sar,Rar,T6,g_e,Bar,Par,gV,$ar,Iar,qar,M6,h_e,Nar,jar,hV,Dar,Gar,Oar,E6,p_e,Var,Xar,pV,zar,Qar,War,C6,__e,Har,Uar,_V,Jar,Yar,Kar,w6,u_e,Zar,enr,uV,onr,rnr,tnr,A6,b_e,anr,nnr,bV,snr,lnr,inr,y6,F_e,dnr,cnr,FV,fnr,mnr,gnr,L6,v_e,hnr,pnr,vV,_nr,unr,bnr,x6,T_e,Fnr,vnr,TV,Tnr,Mnr,Enr,k6,M_e,Cnr,wnr,MV,Anr,ynr,Lnr,S6,E_e,xnr,knr,EV,Snr,Rnr,Bnr,R6,C_e,Pnr,$nr,CV,Inr,qnr,Nnr,B6,w_e,jnr,Dnr,wV,Gnr,Onr,Vnr,P6,A_e,Xnr,znr,AV,Qnr,Wnr,Hnr,$6,y_e,Unr,Jnr,yV,Ynr,Knr,Znr,I6,L_e,esr,osr,LV,rsr,tsr,asr,q6,x_e,nsr,ssr,xV,lsr,isr,dsr,N6,k_e,csr,fsr,kV,msr,gsr,hsr,j6,S_e,psr,_sr,SV,usr,bsr,Fsr,R_e,vsr,Tsr,_y,CBe,Fc,D6,B_e,uy,Msr,P_e,Esr,wBe,Tr,by,Csr,vc,wsr,RV,Asr,ysr,BV,Lsr,xsr,ksr,Fy,Ssr,$_e,Rsr,Bsr,Psr,pt,vy,$sr,I_e,Isr,qsr,Tc,Nsr,q_e,jsr,Dsr,PV,Gsr,Osr,Vsr,N_e,Xsr,zsr,Ty,Qsr,_o,My,Wsr,j_e,Hsr,Usr,bn,Jsr,D_e,Ysr,Ksr,G_e,Zsr,elr,O_e,olr,rlr,tlr,fe,G6,V_e,alr,nlr,$V,slr,llr,ilr,O6,X_e,dlr,clr,IV,flr,mlr,glr,V6,z_e,hlr,plr,qV,_lr,ulr,blr,X6,Q_e,Flr,vlr,NV,Tlr,Mlr,Elr,z6,W_e,Clr,wlr,jV,Alr,ylr,Llr,Q6,H_e,xlr,klr,DV,Slr,Rlr,Blr,W6,U_e,Plr,$lr,GV,Ilr,qlr,Nlr,H6,J_e,jlr,Dlr,OV,Glr,Olr,Vlr,U6,Y_e,Xlr,zlr,VV,Qlr,Wlr,Hlr,J6,K_e,Ulr,Jlr,XV,Ylr,Klr,Zlr,Y6,Z_e,eir,oir,zV,rir,tir,air,K6,eue,nir,sir,QV,lir,iir,dir,oue,cir,fir,Ey,ABe,Mc,Z6,rue,Cy,mir,tue,gir,yBe,Mr,wy,hir,Ec,pir,WV,_ir,uir,HV,bir,Fir,vir,Ay,Tir,aue,Mir,Eir,Cir,_t,yy,wir,nue,Air,yir,Cc,Lir,sue,xir,kir,UV,Sir,Rir,Bir,lue,Pir,$ir,Ly,Iir,uo,xy,qir,iue,Nir,jir,Fn,Dir,due,Gir,Oir,cue,Vir,Xir,fue,zir,Qir,Wir,ky,eT,mue,Hir,Uir,JV,Jir,Yir,Kir,oT,gue,Zir,edr,YV,odr,rdr,tdr,hue,adr,ndr,Sy,LBe,wc,rT,pue,Ry,sdr,_ue,ldr,xBe,Er,By,idr,Ac,ddr,KV,cdr,fdr,ZV,mdr,gdr,hdr,Py,pdr,uue,_dr,udr,bdr,ut,$y,Fdr,bue,vdr,Tdr,yc,Mdr,Fue,Edr,Cdr,eX,wdr,Adr,ydr,vue,Ldr,xdr,Iy,kdr,bo,qy,Sdr,Tue,Rdr,Bdr,vn,Pdr,Mue,$dr,Idr,Eue,qdr,Ndr,Cue,jdr,Ddr,Gdr,J,tT,wue,Odr,Vdr,oX,Xdr,zdr,Qdr,aT,Aue,Wdr,Hdr,rX,Udr,Jdr,Ydr,nT,yue,Kdr,Zdr,tX,ecr,ocr,rcr,sT,Lue,tcr,acr,aX,ncr,scr,lcr,lT,xue,icr,dcr,nX,ccr,fcr,mcr,iT,kue,gcr,hcr,sX,pcr,_cr,ucr,dT,Sue,bcr,Fcr,lX,vcr,Tcr,Mcr,cT,Rue,Ecr,Ccr,iX,wcr,Acr,ycr,fT,Bue,Lcr,xcr,dX,kcr,Scr,Rcr,mT,Pue,Bcr,Pcr,cX,$cr,Icr,qcr,gT,$ue,Ncr,jcr,fX,Dcr,Gcr,Ocr,hT,Iue,Vcr,Xcr,mX,zcr,Qcr,Wcr,pT,que,Hcr,Ucr,gX,Jcr,Ycr,Kcr,_T,Nue,Zcr,efr,hX,ofr,rfr,tfr,uT,jue,afr,nfr,pX,sfr,lfr,ifr,bT,Due,dfr,cfr,_X,ffr,mfr,gfr,FT,Gue,hfr,pfr,uX,_fr,ufr,bfr,vT,Oue,Ffr,vfr,bX,Tfr,Mfr,Efr,TT,Vue,Cfr,wfr,FX,Afr,yfr,Lfr,MT,Xue,xfr,kfr,vX,Sfr,Rfr,Bfr,zue,Pfr,$fr,Ny,kBe,Lc,ET,Que,jy,Ifr,Wue,qfr,SBe,Cr,Dy,Nfr,xc,jfr,TX,Dfr,Gfr,MX,Ofr,Vfr,Xfr,Gy,zfr,Hue,Qfr,Wfr,Hfr,bt,Oy,Ufr,Uue,Jfr,Yfr,kc,Kfr,Jue,Zfr,emr,EX,omr,rmr,tmr,Yue,amr,nmr,Vy,smr,Fo,Xy,lmr,Kue,imr,dmr,Tn,cmr,Zue,fmr,mmr,e2e,gmr,hmr,o2e,pmr,_mr,umr,be,CT,r2e,bmr,Fmr,CX,vmr,Tmr,Mmr,wT,t2e,Emr,Cmr,wX,wmr,Amr,ymr,AT,a2e,Lmr,xmr,AX,kmr,Smr,Rmr,yT,n2e,Bmr,Pmr,yX,$mr,Imr,qmr,LT,s2e,Nmr,jmr,LX,Dmr,Gmr,Omr,xT,l2e,Vmr,Xmr,xX,zmr,Qmr,Wmr,kT,i2e,Hmr,Umr,kX,Jmr,Ymr,Kmr,ST,d2e,Zmr,egr,SX,ogr,rgr,tgr,RT,c2e,agr,ngr,RX,sgr,lgr,igr,BT,f2e,dgr,cgr,BX,fgr,mgr,ggr,m2e,hgr,pgr,zy,RBe,Sc,PT,g2e,Qy,_gr,h2e,ugr,BBe,wr,Wy,bgr,Rc,Fgr,PX,vgr,Tgr,$X,Mgr,Egr,Cgr,Hy,wgr,p2e,Agr,ygr,Lgr,Ft,Uy,xgr,_2e,kgr,Sgr,Bc,Rgr,u2e,Bgr,Pgr,IX,$gr,Igr,qgr,b2e,Ngr,jgr,Jy,Dgr,vo,Yy,Ggr,F2e,Ogr,Vgr,Mn,Xgr,v2e,zgr,Qgr,T2e,Wgr,Hgr,M2e,Ugr,Jgr,Ygr,V,$T,E2e,Kgr,Zgr,qX,ehr,ohr,rhr,IT,C2e,thr,ahr,NX,nhr,shr,lhr,qT,w2e,ihr,dhr,jX,chr,fhr,mhr,NT,A2e,ghr,hhr,DX,phr,_hr,uhr,jT,y2e,bhr,Fhr,GX,vhr,Thr,Mhr,DT,L2e,Ehr,Chr,OX,whr,Ahr,yhr,GT,x2e,Lhr,xhr,VX,khr,Shr,Rhr,OT,k2e,Bhr,Phr,XX,$hr,Ihr,qhr,VT,S2e,Nhr,jhr,zX,Dhr,Ghr,Ohr,XT,R2e,Vhr,Xhr,QX,zhr,Qhr,Whr,zT,B2e,Hhr,Uhr,WX,Jhr,Yhr,Khr,QT,P2e,Zhr,epr,HX,opr,rpr,tpr,WT,$2e,apr,npr,UX,spr,lpr,ipr,HT,I2e,dpr,cpr,JX,fpr,mpr,gpr,UT,q2e,hpr,ppr,YX,_pr,upr,bpr,JT,N2e,Fpr,vpr,KX,Tpr,Mpr,Epr,YT,j2e,Cpr,wpr,ZX,Apr,ypr,Lpr,KT,D2e,xpr,kpr,ez,Spr,Rpr,Bpr,ZT,G2e,Ppr,$pr,oz,Ipr,qpr,Npr,eM,O2e,jpr,Dpr,rz,Gpr,Opr,Vpr,oM,V2e,Xpr,zpr,tz,Qpr,Wpr,Hpr,rM,X2e,Upr,Jpr,az,Ypr,Kpr,Zpr,tM,z2e,e_r,o_r,nz,r_r,t_r,a_r,aM,Q2e,n_r,s_r,sz,l_r,i_r,d_r,nM,W2e,c_r,f_r,lz,m_r,g_r,h_r,sM,H2e,p_r,__r,iz,u_r,b_r,F_r,U2e,v_r,T_r,Ky,PBe,Pc,lM,J2e,Zy,M_r,Y2e,E_r,$Be,Ar,eL,C_r,$c,w_r,dz,A_r,y_r,cz,L_r,x_r,k_r,oL,S_r,K2e,R_r,B_r,P_r,vt,rL,$_r,Z2e,I_r,q_r,Ic,N_r,e1e,j_r,D_r,fz,G_r,O_r,V_r,o1e,X_r,z_r,tL,Q_r,To,aL,W_r,r1e,H_r,U_r,En,J_r,t1e,Y_r,K_r,a1e,Z_r,eur,n1e,our,rur,tur,se,iM,s1e,aur,nur,mz,sur,lur,iur,dM,l1e,dur,cur,gz,fur,mur,gur,cM,i1e,hur,pur,hz,_ur,uur,bur,fM,d1e,Fur,vur,pz,Tur,Mur,Eur,mM,c1e,Cur,wur,_z,Aur,yur,Lur,gM,f1e,xur,kur,uz,Sur,Rur,Bur,hM,m1e,Pur,$ur,bz,Iur,qur,Nur,pM,g1e,jur,Dur,Fz,Gur,Our,Vur,_M,h1e,Xur,zur,vz,Qur,Wur,Hur,uM,p1e,Uur,Jur,Tz,Yur,Kur,Zur,bM,_1e,e2r,o2r,Mz,r2r,t2r,a2r,FM,u1e,n2r,s2r,Ez,l2r,i2r,d2r,vM,b1e,c2r,f2r,Cz,m2r,g2r,h2r,TM,F1e,p2r,_2r,wz,u2r,b2r,F2r,MM,v1e,v2r,T2r,Az,M2r,E2r,C2r,EM,T1e,w2r,A2r,yz,y2r,L2r,x2r,CM,M1e,k2r,S2r,Lz,R2r,B2r,P2r,E1e,$2r,I2r,nL,IBe,qc,wM,C1e,sL,q2r,w1e,N2r,qBe,yr,lL,j2r,Nc,D2r,xz,G2r,O2r,kz,V2r,X2r,z2r,iL,Q2r,A1e,W2r,H2r,U2r,Tt,dL,J2r,y1e,Y2r,K2r,jc,Z2r,L1e,e1r,o1r,Sz,r1r,t1r,a1r,x1e,n1r,s1r,cL,l1r,Mo,fL,i1r,k1e,d1r,c1r,Cn,f1r,S1e,m1r,g1r,R1e,h1r,p1r,B1e,_1r,u1r,b1r,P1e,AM,$1e,F1r,v1r,Rz,T1r,M1r,E1r,I1e,C1r,w1r,mL,NBe,Dc,yM,q1e,gL,A1r,N1e,y1r,jBe,Lr,hL,L1r,Gc,x1r,Bz,k1r,S1r,Pz,R1r,B1r,P1r,pL,$1r,j1e,I1r,q1r,N1r,Mt,_L,j1r,D1e,D1r,G1r,Oc,O1r,G1e,V1r,X1r,$z,z1r,Q1r,W1r,O1e,H1r,U1r,uL,J1r,Eo,bL,Y1r,V1e,K1r,Z1r,wn,ebr,X1e,obr,rbr,z1e,tbr,abr,Q1e,nbr,sbr,lbr,Y,LM,W1e,ibr,dbr,Iz,cbr,fbr,mbr,xM,H1e,gbr,hbr,qz,pbr,_br,ubr,kM,U1e,bbr,Fbr,Nz,vbr,Tbr,Mbr,SM,J1e,Ebr,Cbr,jz,wbr,Abr,ybr,RM,Y1e,Lbr,xbr,Dz,kbr,Sbr,Rbr,BM,K1e,Bbr,Pbr,Gz,$br,Ibr,qbr,PM,Z1e,Nbr,jbr,Oz,Dbr,Gbr,Obr,$M,ebe,Vbr,Xbr,Vz,zbr,Qbr,Wbr,IM,obe,Hbr,Ubr,Xz,Jbr,Ybr,Kbr,qM,rbe,Zbr,e5r,zz,o5r,r5r,t5r,NM,tbe,a5r,n5r,Qz,s5r,l5r,i5r,jM,abe,d5r,c5r,Wz,f5r,m5r,g5r,DM,nbe,h5r,p5r,Hz,_5r,u5r,b5r,GM,sbe,F5r,v5r,Uz,T5r,M5r,E5r,OM,lbe,C5r,w5r,Jz,A5r,y5r,L5r,VM,ibe,x5r,k5r,Yz,S5r,R5r,B5r,XM,dbe,P5r,$5r,Kz,I5r,q5r,N5r,zM,cbe,j5r,D5r,Zz,G5r,O5r,V5r,QM,fbe,X5r,z5r,eQ,Q5r,W5r,H5r,WM,mbe,U5r,J5r,oQ,Y5r,K5r,Z5r,gbe,eFr,oFr,FL,DBe,Vc,HM,hbe,vL,rFr,pbe,tFr,GBe,xr,TL,aFr,Xc,nFr,rQ,sFr,lFr,tQ,iFr,dFr,cFr,ML,fFr,_be,mFr,gFr,hFr,Et,EL,pFr,ube,_Fr,uFr,zc,bFr,bbe,FFr,vFr,aQ,TFr,MFr,EFr,Fbe,CFr,wFr,CL,AFr,Co,wL,yFr,vbe,LFr,xFr,An,kFr,Tbe,SFr,RFr,Mbe,BFr,PFr,Ebe,$Fr,IFr,qFr,K,UM,Cbe,NFr,jFr,nQ,DFr,GFr,OFr,JM,wbe,VFr,XFr,sQ,zFr,QFr,WFr,YM,Abe,HFr,UFr,lQ,JFr,YFr,KFr,KM,ybe,ZFr,evr,iQ,ovr,rvr,tvr,ZM,Lbe,avr,nvr,dQ,svr,lvr,ivr,e4,xbe,dvr,cvr,cQ,fvr,mvr,gvr,o4,kbe,hvr,pvr,fQ,_vr,uvr,bvr,r4,Sbe,Fvr,vvr,mQ,Tvr,Mvr,Evr,t4,Rbe,Cvr,wvr,gQ,Avr,yvr,Lvr,a4,Bbe,xvr,kvr,hQ,Svr,Rvr,Bvr,n4,Pbe,Pvr,$vr,pQ,Ivr,qvr,Nvr,s4,$be,jvr,Dvr,_Q,Gvr,Ovr,Vvr,l4,Ibe,Xvr,zvr,uQ,Qvr,Wvr,Hvr,i4,qbe,Uvr,Jvr,bQ,Yvr,Kvr,Zvr,d4,Nbe,e6r,o6r,FQ,r6r,t6r,a6r,c4,jbe,n6r,s6r,vQ,l6r,i6r,d6r,f4,Dbe,c6r,f6r,TQ,m6r,g6r,h6r,m4,Gbe,p6r,_6r,MQ,u6r,b6r,F6r,g4,Obe,v6r,T6r,EQ,M6r,E6r,C6r,h4,Vbe,w6r,A6r,CQ,y6r,L6r,x6r,Xbe,k6r,S6r,AL,OBe,Qc,p4,zbe,yL,R6r,Qbe,B6r,VBe,kr,LL,P6r,Wc,$6r,wQ,I6r,q6r,AQ,N6r,j6r,D6r,xL,G6r,Wbe,O6r,V6r,X6r,Ct,kL,z6r,Hbe,Q6r,W6r,Hc,H6r,Ube,U6r,J6r,yQ,Y6r,K6r,Z6r,Jbe,eTr,oTr,SL,rTr,wo,RL,tTr,Ybe,aTr,nTr,yn,sTr,Kbe,lTr,iTr,Zbe,dTr,cTr,e5e,fTr,mTr,gTr,o5e,_4,r5e,hTr,pTr,LQ,_Tr,uTr,bTr,t5e,FTr,vTr,BL,XBe,Uc,u4,a5e,PL,TTr,n5e,MTr,zBe,Sr,$L,ETr,Jc,CTr,xQ,wTr,ATr,kQ,yTr,LTr,xTr,IL,kTr,s5e,STr,RTr,BTr,wt,qL,PTr,l5e,$Tr,ITr,Yc,qTr,i5e,NTr,jTr,SQ,DTr,GTr,OTr,d5e,VTr,XTr,NL,zTr,Ao,jL,QTr,c5e,WTr,HTr,Ln,UTr,f5e,JTr,YTr,m5e,KTr,ZTr,g5e,eMr,oMr,rMr,h5e,b4,p5e,tMr,aMr,RQ,nMr,sMr,lMr,_5e,iMr,dMr,DL,QBe,Kc,F4,u5e,GL,cMr,b5e,fMr,WBe,Rr,OL,mMr,Zc,gMr,BQ,hMr,pMr,PQ,_Mr,uMr,bMr,VL,FMr,F5e,vMr,TMr,MMr,At,XL,EMr,v5e,CMr,wMr,ef,AMr,T5e,yMr,LMr,$Q,xMr,kMr,SMr,M5e,RMr,BMr,zL,PMr,yo,QL,$Mr,E5e,IMr,qMr,xn,NMr,C5e,jMr,DMr,w5e,GMr,OMr,A5e,VMr,XMr,zMr,z,v4,y5e,QMr,WMr,IQ,HMr,UMr,JMr,T4,L5e,YMr,KMr,qQ,ZMr,e4r,o4r,M4,x5e,r4r,t4r,NQ,a4r,n4r,s4r,E4,k5e,l4r,i4r,jQ,d4r,c4r,f4r,C4,S5e,m4r,g4r,DQ,h4r,p4r,_4r,w4,R5e,u4r,b4r,GQ,F4r,v4r,T4r,A4,B5e,M4r,E4r,OQ,C4r,w4r,A4r,y4,P5e,y4r,L4r,VQ,x4r,k4r,S4r,L4,$5e,R4r,B4r,XQ,P4r,$4r,I4r,x4,I5e,q4r,N4r,zQ,j4r,D4r,G4r,k4,q5e,O4r,V4r,QQ,X4r,z4r,Q4r,S4,N5e,W4r,H4r,WQ,U4r,J4r,Y4r,R4,j5e,K4r,Z4r,HQ,eEr,oEr,rEr,B4,D5e,tEr,aEr,UQ,nEr,sEr,lEr,P4,G5e,iEr,dEr,JQ,cEr,fEr,mEr,$4,O5e,gEr,hEr,YQ,pEr,_Er,uEr,I4,V5e,bEr,FEr,KQ,vEr,TEr,MEr,q4,X5e,EEr,CEr,ZQ,wEr,AEr,yEr,N4,z5e,LEr,xEr,eW,kEr,SEr,REr,j4,Q5e,BEr,PEr,oW,$Er,IEr,qEr,D4,W5e,NEr,jEr,rW,DEr,GEr,OEr,G4,H5e,VEr,XEr,tW,zEr,QEr,WEr,O4,U5e,HEr,UEr,aW,JEr,YEr,KEr,V4,J5e,ZEr,eCr,nW,oCr,rCr,tCr,X4,Y5e,aCr,nCr,sW,sCr,lCr,iCr,K5e,dCr,cCr,WL,HBe,of,z4,Z5e,HL,fCr,eFe,mCr,UBe,Br,UL,gCr,rf,hCr,lW,pCr,_Cr,iW,uCr,bCr,FCr,JL,vCr,oFe,TCr,MCr,ECr,yt,YL,CCr,rFe,wCr,ACr,tf,yCr,tFe,LCr,xCr,dW,kCr,SCr,RCr,aFe,BCr,PCr,KL,$Cr,Lo,ZL,ICr,nFe,qCr,NCr,kn,jCr,sFe,DCr,GCr,lFe,OCr,VCr,iFe,XCr,zCr,QCr,ca,Q4,dFe,WCr,HCr,cW,UCr,JCr,YCr,W4,cFe,KCr,ZCr,fW,e3r,o3r,r3r,H4,fFe,t3r,a3r,mW,n3r,s3r,l3r,U4,mFe,i3r,d3r,gW,c3r,f3r,m3r,J4,gFe,g3r,h3r,hW,p3r,_3r,u3r,hFe,b3r,F3r,e8,JBe,af,Y4,pFe,o8,v3r,_Fe,T3r,YBe,Pr,r8,M3r,nf,E3r,pW,C3r,w3r,_W,A3r,y3r,L3r,t8,x3r,uFe,k3r,S3r,R3r,Lt,a8,B3r,bFe,P3r,$3r,sf,I3r,FFe,q3r,N3r,uW,j3r,D3r,G3r,vFe,O3r,V3r,n8,X3r,xo,s8,z3r,TFe,Q3r,W3r,Sn,H3r,MFe,U3r,J3r,EFe,Y3r,K3r,CFe,Z3r,ewr,owr,me,K4,wFe,rwr,twr,bW,awr,nwr,swr,Z4,AFe,lwr,iwr,FW,dwr,cwr,fwr,eE,yFe,mwr,gwr,vW,hwr,pwr,_wr,oE,LFe,uwr,bwr,TW,Fwr,vwr,Twr,rE,xFe,Mwr,Ewr,MW,Cwr,wwr,Awr,tE,kFe,ywr,Lwr,EW,xwr,kwr,Swr,aE,SFe,Rwr,Bwr,CW,Pwr,$wr,Iwr,nE,RFe,qwr,Nwr,wW,jwr,Dwr,Gwr,sE,BFe,Owr,Vwr,AW,Xwr,zwr,Qwr,lE,PFe,Wwr,Hwr,yW,Uwr,Jwr,Ywr,iE,$Fe,Kwr,Zwr,LW,eAr,oAr,rAr,dE,IFe,tAr,aAr,xW,nAr,sAr,lAr,qFe,iAr,dAr,l8,KBe,lf,cE,NFe,i8,cAr,jFe,fAr,ZBe,$r,d8,mAr,df,gAr,kW,hAr,pAr,SW,_Ar,uAr,bAr,c8,FAr,DFe,vAr,TAr,MAr,xt,f8,EAr,GFe,CAr,wAr,cf,AAr,OFe,yAr,LAr,RW,xAr,kAr,SAr,VFe,RAr,BAr,m8,PAr,ko,g8,$Ar,XFe,IAr,qAr,Rn,NAr,zFe,jAr,DAr,QFe,GAr,OAr,WFe,VAr,XAr,zAr,Fe,fE,HFe,QAr,WAr,BW,HAr,UAr,JAr,mE,UFe,YAr,KAr,PW,ZAr,e0r,o0r,gE,JFe,r0r,t0r,$W,a0r,n0r,s0r,hE,YFe,l0r,i0r,IW,d0r,c0r,f0r,pE,KFe,m0r,g0r,qW,h0r,p0r,_0r,_E,ZFe,u0r,b0r,NW,F0r,v0r,T0r,uE,eve,M0r,E0r,jW,C0r,w0r,A0r,bE,ove,y0r,L0r,DW,x0r,k0r,S0r,FE,rve,R0r,B0r,GW,P0r,$0r,I0r,vE,tve,q0r,N0r,OW,j0r,D0r,G0r,ave,O0r,V0r,h8,ePe,ff,TE,nve,p8,X0r,sve,z0r,oPe,Ir,_8,Q0r,mf,W0r,VW,H0r,U0r,XW,J0r,Y0r,K0r,u8,Z0r,lve,eyr,oyr,ryr,kt,b8,tyr,ive,ayr,nyr,gf,syr,dve,lyr,iyr,zW,dyr,cyr,fyr,cve,myr,gyr,F8,hyr,So,v8,pyr,fve,_yr,uyr,Bn,byr,mve,Fyr,vyr,gve,Tyr,Myr,hve,Eyr,Cyr,wyr,Ee,ME,pve,Ayr,yyr,QW,Lyr,xyr,kyr,EE,_ve,Syr,Ryr,WW,Byr,Pyr,$yr,CE,uve,Iyr,qyr,HW,Nyr,jyr,Dyr,wE,bve,Gyr,Oyr,UW,Vyr,Xyr,zyr,AE,Fve,Qyr,Wyr,JW,Hyr,Uyr,Jyr,yE,vve,Yyr,Kyr,YW,Zyr,eLr,oLr,LE,Tve,rLr,tLr,KW,aLr,nLr,sLr,xE,Mve,lLr,iLr,ZW,dLr,cLr,fLr,kE,Eve,mLr,gLr,eH,hLr,pLr,_Lr,Cve,uLr,bLr,T8,rPe,hf,SE,wve,M8,FLr,Ave,vLr,tPe,qr,E8,TLr,pf,MLr,oH,ELr,CLr,rH,wLr,ALr,yLr,C8,LLr,yve,xLr,kLr,SLr,St,w8,RLr,Lve,BLr,PLr,_f,$Lr,xve,ILr,qLr,tH,NLr,jLr,DLr,kve,GLr,OLr,A8,VLr,Ro,y8,XLr,Sve,zLr,QLr,Pn,WLr,Rve,HLr,ULr,Bve,JLr,YLr,Pve,KLr,ZLr,e8r,ve,RE,$ve,o8r,r8r,aH,t8r,a8r,n8r,BE,Ive,s8r,l8r,nH,i8r,d8r,c8r,PE,qve,f8r,m8r,sH,g8r,h8r,p8r,$E,Nve,_8r,u8r,lH,b8r,F8r,v8r,IE,jve,T8r,M8r,iH,E8r,C8r,w8r,qE,Dve,A8r,y8r,dH,L8r,x8r,k8r,NE,Gve,S8r,R8r,cH,B8r,P8r,$8r,jE,Ove,I8r,q8r,fH,N8r,j8r,D8r,DE,Vve,G8r,O8r,mH,V8r,X8r,z8r,GE,Xve,Q8r,W8r,gH,H8r,U8r,J8r,zve,Y8r,K8r,L8,aPe,uf,OE,Qve,x8,Z8r,Wve,e7r,nPe,Nr,k8,o7r,bf,r7r,hH,t7r,a7r,pH,n7r,s7r,l7r,S8,i7r,Hve,d7r,c7r,f7r,Rt,R8,m7r,Uve,g7r,h7r,Ff,p7r,Jve,_7r,u7r,_H,b7r,F7r,v7r,Yve,T7r,M7r,B8,E7r,Bo,P8,C7r,Kve,w7r,A7r,$n,y7r,Zve,L7r,x7r,e6e,k7r,S7r,o6e,R7r,B7r,P7r,Te,VE,r6e,$7r,I7r,uH,q7r,N7r,j7r,XE,t6e,D7r,G7r,bH,O7r,V7r,X7r,zE,a6e,z7r,Q7r,FH,W7r,H7r,U7r,QE,n6e,J7r,Y7r,vH,K7r,Z7r,e9r,WE,s6e,o9r,r9r,TH,t9r,a9r,n9r,HE,l6e,s9r,l9r,MH,i9r,d9r,c9r,UE,i6e,f9r,m9r,EH,g9r,h9r,p9r,JE,d6e,_9r,u9r,CH,b9r,F9r,v9r,YE,c6e,T9r,M9r,wH,E9r,C9r,w9r,KE,f6e,A9r,y9r,AH,L9r,x9r,k9r,m6e,S9r,R9r,$8,sPe,vf,ZE,g6e,I8,B9r,h6e,P9r,lPe,jr,q8,$9r,Tf,I9r,yH,q9r,N9r,LH,j9r,D9r,G9r,N8,O9r,p6e,V9r,X9r,z9r,Bt,j8,Q9r,_6e,W9r,H9r,Mf,U9r,u6e,J9r,Y9r,xH,K9r,Z9r,exr,b6e,oxr,rxr,D8,txr,Po,G8,axr,F6e,nxr,sxr,In,lxr,v6e,ixr,dxr,T6e,cxr,fxr,M6e,mxr,gxr,hxr,Be,eC,E6e,pxr,_xr,kH,uxr,bxr,Fxr,oC,C6e,vxr,Txr,SH,Mxr,Exr,Cxr,rC,w6e,wxr,Axr,RH,yxr,Lxr,xxr,tC,A6e,kxr,Sxr,BH,Rxr,Bxr,Pxr,aC,y6e,$xr,Ixr,PH,qxr,Nxr,jxr,nC,L6e,Dxr,Gxr,$H,Oxr,Vxr,Xxr,sC,x6e,zxr,Qxr,IH,Wxr,Hxr,Uxr,lC,k6e,Jxr,Yxr,qH,Kxr,Zxr,ekr,S6e,okr,rkr,O8,iPe,Ef,iC,R6e,V8,tkr,B6e,akr,dPe,Dr,X8,nkr,Cf,skr,NH,lkr,ikr,jH,dkr,ckr,fkr,z8,mkr,P6e,gkr,hkr,pkr,Pt,Q8,_kr,$6e,ukr,bkr,wf,Fkr,I6e,vkr,Tkr,DH,Mkr,Ekr,Ckr,q6e,wkr,Akr,W8,ykr,$o,H8,Lkr,N6e,xkr,kkr,qn,Skr,j6e,Rkr,Bkr,D6e,Pkr,$kr,G6e,Ikr,qkr,Nkr,Pe,dC,O6e,jkr,Dkr,GH,Gkr,Okr,Vkr,cC,V6e,Xkr,zkr,OH,Qkr,Wkr,Hkr,fC,X6e,Ukr,Jkr,VH,Ykr,Kkr,Zkr,mC,z6e,eSr,oSr,XH,rSr,tSr,aSr,gC,Q6e,nSr,sSr,zH,lSr,iSr,dSr,hC,W6e,cSr,fSr,QH,mSr,gSr,hSr,pC,H6e,pSr,_Sr,WH,uSr,bSr,FSr,_C,U6e,vSr,TSr,HH,MSr,ESr,CSr,J6e,wSr,ASr,U8,cPe,Af,uC,Y6e,J8,ySr,K6e,LSr,fPe,Gr,Y8,xSr,yf,kSr,UH,SSr,RSr,JH,BSr,PSr,$Sr,K8,ISr,Z6e,qSr,NSr,jSr,$t,Z8,DSr,eTe,GSr,OSr,Lf,VSr,oTe,XSr,zSr,YH,QSr,WSr,HSr,rTe,USr,JSr,e7,YSr,Io,o7,KSr,tTe,ZSr,eRr,Nn,oRr,aTe,rRr,tRr,nTe,aRr,nRr,sTe,sRr,lRr,iRr,lTe,bC,iTe,dRr,cRr,KH,fRr,mRr,gRr,dTe,hRr,pRr,r7,mPe,xf,FC,cTe,t7,_Rr,fTe,uRr,gPe,Or,a7,bRr,kf,FRr,ZH,vRr,TRr,eU,MRr,ERr,CRr,n7,wRr,mTe,ARr,yRr,LRr,It,s7,xRr,gTe,kRr,SRr,Sf,RRr,hTe,BRr,PRr,oU,$Rr,IRr,qRr,pTe,NRr,jRr,l7,DRr,qo,i7,GRr,_Te,ORr,VRr,jn,XRr,uTe,zRr,QRr,bTe,WRr,HRr,FTe,URr,JRr,YRr,d7,vC,vTe,KRr,ZRr,rU,eBr,oBr,rBr,TC,TTe,tBr,aBr,tU,nBr,sBr,lBr,MTe,iBr,dBr,c7,hPe,Rf,MC,ETe,f7,cBr,CTe,fBr,pPe,Vr,m7,mBr,Bf,gBr,aU,hBr,pBr,nU,_Br,uBr,bBr,g7,FBr,wTe,vBr,TBr,MBr,qt,h7,EBr,ATe,CBr,wBr,Pf,ABr,yTe,yBr,LBr,sU,xBr,kBr,SBr,LTe,RBr,BBr,p7,PBr,No,_7,$Br,xTe,IBr,qBr,Dn,NBr,kTe,jBr,DBr,STe,GBr,OBr,RTe,VBr,XBr,zBr,BTe,EC,PTe,QBr,WBr,lU,HBr,UBr,JBr,$Te,YBr,KBr,u7,_Pe;return ge=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),y3=new X({}),L3=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new ZBr({props:{warning:!0,$$slots:{default:[$3t]},$$scope:{ctx:If}}}),x3=new X({}),k3=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/configuration_auto.py#L552"}}),B3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/configuration_auto.py#L575"}}),P3=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),$3=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/configuration_auto.py#L697"}}),I3=new X({}),q3=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/tokenization_auto.py#L352"}}),D3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15622/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/tokenization_auto.py#L366"}}),G3=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),O3=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/tokenization_auto.py#L562"}}),V3=new X({}),X3=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),W3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15622/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),Ih=new ZBr({props:{$$slots:{default:[I3t]},$$scope:{ctx:If}}}),H3=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),U3=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),J3=new X({}),Y3=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/processing_auto.py#L70"}}),ew=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/processing_auto.py#L84"}}),Wh=new ZBr({props:{$$slots:{default:[q3t]},$$scope:{ctx:If}}}),ow=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),rw=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/processing_auto.py#L237"}}),tw=new X({}),aw=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L711"}}),sw=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),iw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cw=new X({}),fw=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L718"}}),gw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),pw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uw=new X({}),bw=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L733"}}),vw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),Tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),Mw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),Ew=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new X({}),ww=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L740"}}),yw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),xw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sw=new X({}),Rw=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L747"}}),Pw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),$w=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Iw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Nw=new X({}),jw=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L756"}}),Gw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Vw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),Xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zw=new X({}),Qw=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L790"}}),Hw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Jw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Kw=new X({}),Zw=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L797"}}),oA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),rA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),tA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),aA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nA=new X({}),sA=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L783"}}),iA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),dA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),cA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),fA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mA=new X({}),gA=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L765"}}),pA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),_A=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),uA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),bA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FA=new X({}),vA=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L772"}}),MA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),EA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),CA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),wA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AA=new X({}),yA=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L806"}}),xA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),kA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),SA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),RA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new X({}),PA=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L845"}}),IA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),qA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),NA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),jA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new X({}),GA=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L852"}}),VA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),XA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),zA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),QA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WA=new X({}),HA=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L875"}}),JA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),YA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),KA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),ZA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e0=new X({}),o0=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L859"}}),t0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),n0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l0=new X({}),i0=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L866"}}),c0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),m0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p0=new X({}),_0=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L884"}}),b0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),v0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M0=new X({}),E0=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L891"}}),w0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),y0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x0=new X({}),k0=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L838"}}),R0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),P0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I0=new X({}),q0=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L813"}}),j0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),D0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),G0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V0=new X({}),X0=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L820"}}),Q0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),W0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),H0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J0=new X({}),Y0=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_auto.py#L829"}}),Z0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),ey=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),oy=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),ry=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ty=new X({}),ay=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),sy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),iy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cy=new X({}),fy=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),gy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),py=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),_y=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new X({}),by=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),vy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),Ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),My=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),Ey=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cy=new X({}),wy=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),yy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),Ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),xy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),Sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new X({}),By=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),$y=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),Iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),qy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),Ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jy=new X({}),Dy=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Oy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),Vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Xy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),zy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new X({}),Wy=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),Uy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),Jy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Yy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),Ky=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new X({}),eL=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),rL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),tL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),aL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),nL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new X({}),lL=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),dL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),cL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),fL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),mL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gL=new X({}),hL=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),_L=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),uL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),bL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),FL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new X({}),TL=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),EL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),CL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),wL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),AL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yL=new X({}),LL=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),kL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),SL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),RL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),BL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new X({}),$L=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),qL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),NL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),jL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),DL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GL=new X({}),OL=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),XL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),zL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),QL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),WL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HL=new X({}),UL=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),YL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),KL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),ZL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),e8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o8=new X({}),r8=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),a8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),n8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),s8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),l8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i8=new X({}),d8=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),f8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),m8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),g8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),h8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p8=new X({}),_8=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),b8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),v8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),T8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M8=new X({}),E8=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),w8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),A8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),y8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),L8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x8=new X({}),k8=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),R8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),B8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),P8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),$8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I8=new X({}),q8=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),j8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),D8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),G8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),O8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V8=new X({}),X8=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Q8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),W8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),H8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),U8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J8=new X({}),Y8=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),Z8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),o7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t7=new X({}),a7=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),s7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),i7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),c7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f7=new X({}),m7=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),h7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15622/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15622/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),_7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15622/src/transformers/models/auto/auto_factory.py#L417"}}),u7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(ge.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),E3=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),C3=o("AutoConfig"),On=o(", "),Vn=a("a"),w3=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),A3=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),p9=o("will create a model that is an instance of "),Oi=a("a"),_9=o("BertModel"),u9=o("."),zo=l(),Ga=a("p"),b9=o("There is one class of "),Df=a("code"),F9=o("AutoModel"),LIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),pRe=l(),Vi=a("h2"),Gf=a("a"),oY=a("span"),f(y3.$$.fragment),xIe=l(),rY=a("span"),kIe=o("Extending the Auto Classes"),_Re=l(),zn=a("p"),SIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tY=a("code"),RIe=o("NewModel"),BIe=o(", make sure you have a "),aY=a("code"),PIe=o("NewModelConfig"),$Ie=o(` then you can add those to the auto
classes like this:`),uRe=l(),f(L3.$$.fragment),bRe=l(),v9=a("p"),IIe=o("You will then be able to use the auto classes like you would usually do!"),FRe=l(),f(Of.$$.fragment),vRe=l(),Xi=a("h2"),Vf=a("a"),nY=a("span"),f(x3.$$.fragment),qIe=l(),sY=a("span"),NIe=o("AutoConfig"),TRe=l(),Qo=a("div"),f(k3.$$.fragment),jIe=l(),S3=a("p"),DIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),T9=a("a"),GIe=o("from_pretrained()"),OIe=o(" class method."),VIe=l(),R3=a("p"),XIe=o("This class cannot be instantiated directly using "),lY=a("code"),zIe=o("__init__()"),QIe=o(" (throws an error)."),WIe=l(),mo=a("div"),f(B3.$$.fragment),HIe=l(),iY=a("p"),UIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),JIe=l(),zi=a("p"),YIe=o("The configuration class to instantiate is selected based on the "),dY=a("code"),KIe=o("model_type"),ZIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cY=a("code"),eqe=o("pretrained_model_name_or_path"),oqe=o(":"),rqe=l(),F=a("ul"),Xf=a("li"),fY=a("strong"),tqe=o("albert"),aqe=o(" \u2014 "),M9=a("a"),nqe=o("AlbertConfig"),sqe=o(" (ALBERT model)"),lqe=l(),zf=a("li"),mY=a("strong"),iqe=o("bart"),dqe=o(" \u2014 "),E9=a("a"),cqe=o("BartConfig"),fqe=o(" (BART model)"),mqe=l(),Qf=a("li"),gY=a("strong"),gqe=o("beit"),hqe=o(" \u2014 "),C9=a("a"),pqe=o("BeitConfig"),_qe=o(" (BEiT model)"),uqe=l(),Wf=a("li"),hY=a("strong"),bqe=o("bert"),Fqe=o(" \u2014 "),w9=a("a"),vqe=o("BertConfig"),Tqe=o(" (BERT model)"),Mqe=l(),Hf=a("li"),pY=a("strong"),Eqe=o("bert-generation"),Cqe=o(" \u2014 "),A9=a("a"),wqe=o("BertGenerationConfig"),Aqe=o(" (Bert Generation model)"),yqe=l(),Uf=a("li"),_Y=a("strong"),Lqe=o("big_bird"),xqe=o(" \u2014 "),y9=a("a"),kqe=o("BigBirdConfig"),Sqe=o(" (BigBird model)"),Rqe=l(),Jf=a("li"),uY=a("strong"),Bqe=o("bigbird_pegasus"),Pqe=o(" \u2014 "),L9=a("a"),$qe=o("BigBirdPegasusConfig"),Iqe=o(" (BigBirdPegasus model)"),qqe=l(),Yf=a("li"),bY=a("strong"),Nqe=o("blenderbot"),jqe=o(" \u2014 "),x9=a("a"),Dqe=o("BlenderbotConfig"),Gqe=o(" (Blenderbot model)"),Oqe=l(),Kf=a("li"),FY=a("strong"),Vqe=o("blenderbot-small"),Xqe=o(" \u2014 "),k9=a("a"),zqe=o("BlenderbotSmallConfig"),Qqe=o(" (BlenderbotSmall model)"),Wqe=l(),Zf=a("li"),vY=a("strong"),Hqe=o("camembert"),Uqe=o(" \u2014 "),S9=a("a"),Jqe=o("CamembertConfig"),Yqe=o(" (CamemBERT model)"),Kqe=l(),em=a("li"),TY=a("strong"),Zqe=o("canine"),eNe=o(" \u2014 "),R9=a("a"),oNe=o("CanineConfig"),rNe=o(" (Canine model)"),tNe=l(),om=a("li"),MY=a("strong"),aNe=o("clip"),nNe=o(" \u2014 "),B9=a("a"),sNe=o("CLIPConfig"),lNe=o(" (CLIP model)"),iNe=l(),rm=a("li"),EY=a("strong"),dNe=o("convbert"),cNe=o(" \u2014 "),P9=a("a"),fNe=o("ConvBertConfig"),mNe=o(" (ConvBERT model)"),gNe=l(),tm=a("li"),CY=a("strong"),hNe=o("convnext"),pNe=o(" \u2014 "),$9=a("a"),_Ne=o("ConvNextConfig"),uNe=o(" (ConvNext model)"),bNe=l(),am=a("li"),wY=a("strong"),FNe=o("ctrl"),vNe=o(" \u2014 "),I9=a("a"),TNe=o("CTRLConfig"),MNe=o(" (CTRL model)"),ENe=l(),nm=a("li"),AY=a("strong"),CNe=o("data2vec-audio"),wNe=o(" \u2014 "),q9=a("a"),ANe=o("Data2VecAudioConfig"),yNe=o(" (Data2VecAudio model)"),LNe=l(),sm=a("li"),yY=a("strong"),xNe=o("data2vec-text"),kNe=o(" \u2014 "),N9=a("a"),SNe=o("Data2VecTextConfig"),RNe=o(" (Data2VecText model)"),BNe=l(),lm=a("li"),LY=a("strong"),PNe=o("deberta"),$Ne=o(" \u2014 "),j9=a("a"),INe=o("DebertaConfig"),qNe=o(" (DeBERTa model)"),NNe=l(),im=a("li"),xY=a("strong"),jNe=o("deberta-v2"),DNe=o(" \u2014 "),D9=a("a"),GNe=o("DebertaV2Config"),ONe=o(" (DeBERTa-v2 model)"),VNe=l(),dm=a("li"),kY=a("strong"),XNe=o("decision_transformer"),zNe=o(" \u2014 "),G9=a("a"),QNe=o("DecisionTransformerConfig"),WNe=o(" (Decision Transformer model)"),HNe=l(),cm=a("li"),SY=a("strong"),UNe=o("deit"),JNe=o(" \u2014 "),O9=a("a"),YNe=o("DeiTConfig"),KNe=o(" (DeiT model)"),ZNe=l(),fm=a("li"),RY=a("strong"),eje=o("detr"),oje=o(" \u2014 "),V9=a("a"),rje=o("DetrConfig"),tje=o(" (DETR model)"),aje=l(),mm=a("li"),BY=a("strong"),nje=o("distilbert"),sje=o(" \u2014 "),X9=a("a"),lje=o("DistilBertConfig"),ije=o(" (DistilBERT model)"),dje=l(),gm=a("li"),PY=a("strong"),cje=o("dpr"),fje=o(" \u2014 "),z9=a("a"),mje=o("DPRConfig"),gje=o(" (DPR model)"),hje=l(),hm=a("li"),$Y=a("strong"),pje=o("dpt"),_je=o(" \u2014 "),Q9=a("a"),uje=o("DPTConfig"),bje=o(" (DPT model)"),Fje=l(),pm=a("li"),IY=a("strong"),vje=o("electra"),Tje=o(" \u2014 "),W9=a("a"),Mje=o("ElectraConfig"),Eje=o(" (ELECTRA model)"),Cje=l(),_m=a("li"),qY=a("strong"),wje=o("encoder-decoder"),Aje=o(" \u2014 "),H9=a("a"),yje=o("EncoderDecoderConfig"),Lje=o(" (Encoder decoder model)"),xje=l(),um=a("li"),NY=a("strong"),kje=o("flaubert"),Sje=o(" \u2014 "),U9=a("a"),Rje=o("FlaubertConfig"),Bje=o(" (FlauBERT model)"),Pje=l(),bm=a("li"),jY=a("strong"),$je=o("fnet"),Ije=o(" \u2014 "),J9=a("a"),qje=o("FNetConfig"),Nje=o(" (FNet model)"),jje=l(),Fm=a("li"),DY=a("strong"),Dje=o("fsmt"),Gje=o(" \u2014 "),Y9=a("a"),Oje=o("FSMTConfig"),Vje=o(" (FairSeq Machine-Translation model)"),Xje=l(),vm=a("li"),GY=a("strong"),zje=o("funnel"),Qje=o(" \u2014 "),K9=a("a"),Wje=o("FunnelConfig"),Hje=o(" (Funnel Transformer model)"),Uje=l(),Tm=a("li"),OY=a("strong"),Jje=o("glpn"),Yje=o(" \u2014 "),Z9=a("a"),Kje=o("GLPNConfig"),Zje=o(" (GLPN model)"),eDe=l(),Mm=a("li"),VY=a("strong"),oDe=o("gpt2"),rDe=o(" \u2014 "),ex=a("a"),tDe=o("GPT2Config"),aDe=o(" (OpenAI GPT-2 model)"),nDe=l(),Em=a("li"),XY=a("strong"),sDe=o("gpt_neo"),lDe=o(" \u2014 "),ox=a("a"),iDe=o("GPTNeoConfig"),dDe=o(" (GPT Neo model)"),cDe=l(),Cm=a("li"),zY=a("strong"),fDe=o("gptj"),mDe=o(" \u2014 "),rx=a("a"),gDe=o("GPTJConfig"),hDe=o(" (GPT-J model)"),pDe=l(),wm=a("li"),QY=a("strong"),_De=o("hubert"),uDe=o(" \u2014 "),tx=a("a"),bDe=o("HubertConfig"),FDe=o(" (Hubert model)"),vDe=l(),Am=a("li"),WY=a("strong"),TDe=o("ibert"),MDe=o(" \u2014 "),ax=a("a"),EDe=o("IBertConfig"),CDe=o(" (I-BERT model)"),wDe=l(),ym=a("li"),HY=a("strong"),ADe=o("imagegpt"),yDe=o(" \u2014 "),nx=a("a"),LDe=o("ImageGPTConfig"),xDe=o(" (ImageGPT model)"),kDe=l(),Lm=a("li"),UY=a("strong"),SDe=o("layoutlm"),RDe=o(" \u2014 "),sx=a("a"),BDe=o("LayoutLMConfig"),PDe=o(" (LayoutLM model)"),$De=l(),xm=a("li"),JY=a("strong"),IDe=o("layoutlmv2"),qDe=o(" \u2014 "),lx=a("a"),NDe=o("LayoutLMv2Config"),jDe=o(" (LayoutLMv2 model)"),DDe=l(),km=a("li"),YY=a("strong"),GDe=o("led"),ODe=o(" \u2014 "),ix=a("a"),VDe=o("LEDConfig"),XDe=o(" (LED model)"),zDe=l(),Sm=a("li"),KY=a("strong"),QDe=o("longformer"),WDe=o(" \u2014 "),dx=a("a"),HDe=o("LongformerConfig"),UDe=o(" (Longformer model)"),JDe=l(),Rm=a("li"),ZY=a("strong"),YDe=o("luke"),KDe=o(" \u2014 "),cx=a("a"),ZDe=o("LukeConfig"),eGe=o(" (LUKE model)"),oGe=l(),Bm=a("li"),eK=a("strong"),rGe=o("lxmert"),tGe=o(" \u2014 "),fx=a("a"),aGe=o("LxmertConfig"),nGe=o(" (LXMERT model)"),sGe=l(),Pm=a("li"),oK=a("strong"),lGe=o("m2m_100"),iGe=o(" \u2014 "),mx=a("a"),dGe=o("M2M100Config"),cGe=o(" (M2M100 model)"),fGe=l(),$m=a("li"),rK=a("strong"),mGe=o("marian"),gGe=o(" \u2014 "),gx=a("a"),hGe=o("MarianConfig"),pGe=o(" (Marian model)"),_Ge=l(),Im=a("li"),tK=a("strong"),uGe=o("maskformer"),bGe=o(" \u2014 "),hx=a("a"),FGe=o("MaskFormerConfig"),vGe=o(" (MaskFormer model)"),TGe=l(),qm=a("li"),aK=a("strong"),MGe=o("mbart"),EGe=o(" \u2014 "),px=a("a"),CGe=o("MBartConfig"),wGe=o(" (mBART model)"),AGe=l(),Nm=a("li"),nK=a("strong"),yGe=o("megatron-bert"),LGe=o(" \u2014 "),_x=a("a"),xGe=o("MegatronBertConfig"),kGe=o(" (MegatronBert model)"),SGe=l(),jm=a("li"),sK=a("strong"),RGe=o("mobilebert"),BGe=o(" \u2014 "),ux=a("a"),PGe=o("MobileBertConfig"),$Ge=o(" (MobileBERT model)"),IGe=l(),Dm=a("li"),lK=a("strong"),qGe=o("mpnet"),NGe=o(" \u2014 "),bx=a("a"),jGe=o("MPNetConfig"),DGe=o(" (MPNet model)"),GGe=l(),Gm=a("li"),iK=a("strong"),OGe=o("mt5"),VGe=o(" \u2014 "),Fx=a("a"),XGe=o("MT5Config"),zGe=o(" (mT5 model)"),QGe=l(),Om=a("li"),dK=a("strong"),WGe=o("nystromformer"),HGe=o(" \u2014 "),vx=a("a"),UGe=o("NystromformerConfig"),JGe=o(" (Nystromformer model)"),YGe=l(),Vm=a("li"),cK=a("strong"),KGe=o("openai-gpt"),ZGe=o(" \u2014 "),Tx=a("a"),eOe=o("OpenAIGPTConfig"),oOe=o(" (OpenAI GPT model)"),rOe=l(),Xm=a("li"),fK=a("strong"),tOe=o("pegasus"),aOe=o(" \u2014 "),Mx=a("a"),nOe=o("PegasusConfig"),sOe=o(" (Pegasus model)"),lOe=l(),zm=a("li"),mK=a("strong"),iOe=o("perceiver"),dOe=o(" \u2014 "),Ex=a("a"),cOe=o("PerceiverConfig"),fOe=o(" (Perceiver model)"),mOe=l(),Qm=a("li"),gK=a("strong"),gOe=o("plbart"),hOe=o(" \u2014 "),Cx=a("a"),pOe=o("PLBartConfig"),_Oe=o(" (PLBart model)"),uOe=l(),Wm=a("li"),hK=a("strong"),bOe=o("poolformer"),FOe=o(" \u2014 "),wx=a("a"),vOe=o("PoolFormerConfig"),TOe=o(" (PoolFormer model)"),MOe=l(),Hm=a("li"),pK=a("strong"),EOe=o("prophetnet"),COe=o(" \u2014 "),Ax=a("a"),wOe=o("ProphetNetConfig"),AOe=o(" (ProphetNet model)"),yOe=l(),Um=a("li"),_K=a("strong"),LOe=o("qdqbert"),xOe=o(" \u2014 "),yx=a("a"),kOe=o("QDQBertConfig"),SOe=o(" (QDQBert model)"),ROe=l(),Jm=a("li"),uK=a("strong"),BOe=o("rag"),POe=o(" \u2014 "),Lx=a("a"),$Oe=o("RagConfig"),IOe=o(" (RAG model)"),qOe=l(),Ym=a("li"),bK=a("strong"),NOe=o("realm"),jOe=o(" \u2014 "),xx=a("a"),DOe=o("RealmConfig"),GOe=o(" (Realm model)"),OOe=l(),Km=a("li"),FK=a("strong"),VOe=o("reformer"),XOe=o(" \u2014 "),kx=a("a"),zOe=o("ReformerConfig"),QOe=o(" (Reformer model)"),WOe=l(),Zm=a("li"),vK=a("strong"),HOe=o("regnet"),UOe=o(" \u2014 "),Sx=a("a"),JOe=o("RegNetConfig"),YOe=o(" (RegNet model)"),KOe=l(),eg=a("li"),TK=a("strong"),ZOe=o("rembert"),eVe=o(" \u2014 "),Rx=a("a"),oVe=o("RemBertConfig"),rVe=o(" (RemBERT model)"),tVe=l(),og=a("li"),MK=a("strong"),aVe=o("resnet"),nVe=o(" \u2014 "),Bx=a("a"),sVe=o("ResNetConfig"),lVe=o(" (ResNet model)"),iVe=l(),rg=a("li"),EK=a("strong"),dVe=o("retribert"),cVe=o(" \u2014 "),Px=a("a"),fVe=o("RetriBertConfig"),mVe=o(" (RetriBERT model)"),gVe=l(),tg=a("li"),CK=a("strong"),hVe=o("roberta"),pVe=o(" \u2014 "),$x=a("a"),_Ve=o("RobertaConfig"),uVe=o(" (RoBERTa model)"),bVe=l(),ag=a("li"),wK=a("strong"),FVe=o("roformer"),vVe=o(" \u2014 "),Ix=a("a"),TVe=o("RoFormerConfig"),MVe=o(" (RoFormer model)"),EVe=l(),ng=a("li"),AK=a("strong"),CVe=o("segformer"),wVe=o(" \u2014 "),qx=a("a"),AVe=o("SegformerConfig"),yVe=o(" (SegFormer model)"),LVe=l(),sg=a("li"),yK=a("strong"),xVe=o("sew"),kVe=o(" \u2014 "),Nx=a("a"),SVe=o("SEWConfig"),RVe=o(" (SEW model)"),BVe=l(),lg=a("li"),LK=a("strong"),PVe=o("sew-d"),$Ve=o(" \u2014 "),jx=a("a"),IVe=o("SEWDConfig"),qVe=o(" (SEW-D model)"),NVe=l(),ig=a("li"),xK=a("strong"),jVe=o("speech-encoder-decoder"),DVe=o(" \u2014 "),Dx=a("a"),GVe=o("SpeechEncoderDecoderConfig"),OVe=o(" (Speech Encoder decoder model)"),VVe=l(),dg=a("li"),kK=a("strong"),XVe=o("speech_to_text"),zVe=o(" \u2014 "),Gx=a("a"),QVe=o("Speech2TextConfig"),WVe=o(" (Speech2Text model)"),HVe=l(),cg=a("li"),SK=a("strong"),UVe=o("speech_to_text_2"),JVe=o(" \u2014 "),Ox=a("a"),YVe=o("Speech2Text2Config"),KVe=o(" (Speech2Text2 model)"),ZVe=l(),fg=a("li"),RK=a("strong"),eXe=o("splinter"),oXe=o(" \u2014 "),Vx=a("a"),rXe=o("SplinterConfig"),tXe=o(" (Splinter model)"),aXe=l(),mg=a("li"),BK=a("strong"),nXe=o("squeezebert"),sXe=o(" \u2014 "),Xx=a("a"),lXe=o("SqueezeBertConfig"),iXe=o(" (SqueezeBERT model)"),dXe=l(),gg=a("li"),PK=a("strong"),cXe=o("swin"),fXe=o(" \u2014 "),zx=a("a"),mXe=o("SwinConfig"),gXe=o(" (Swin model)"),hXe=l(),hg=a("li"),$K=a("strong"),pXe=o("t5"),_Xe=o(" \u2014 "),Qx=a("a"),uXe=o("T5Config"),bXe=o(" (T5 model)"),FXe=l(),pg=a("li"),IK=a("strong"),vXe=o("tapas"),TXe=o(" \u2014 "),Wx=a("a"),MXe=o("TapasConfig"),EXe=o(" (TAPAS model)"),CXe=l(),_g=a("li"),qK=a("strong"),wXe=o("tapex"),AXe=o(" \u2014 "),Hx=a("a"),yXe=o("BartConfig"),LXe=o(" (TAPEX model)"),xXe=l(),ug=a("li"),NK=a("strong"),kXe=o("transfo-xl"),SXe=o(" \u2014 "),Ux=a("a"),RXe=o("TransfoXLConfig"),BXe=o(" (Transformer-XL model)"),PXe=l(),bg=a("li"),jK=a("strong"),$Xe=o("trocr"),IXe=o(" \u2014 "),Jx=a("a"),qXe=o("TrOCRConfig"),NXe=o(" (TrOCR model)"),jXe=l(),Fg=a("li"),DK=a("strong"),DXe=o("unispeech"),GXe=o(" \u2014 "),Yx=a("a"),OXe=o("UniSpeechConfig"),VXe=o(" (UniSpeech model)"),XXe=l(),vg=a("li"),GK=a("strong"),zXe=o("unispeech-sat"),QXe=o(" \u2014 "),Kx=a("a"),WXe=o("UniSpeechSatConfig"),HXe=o(" (UniSpeechSat model)"),UXe=l(),Tg=a("li"),OK=a("strong"),JXe=o("van"),YXe=o(" \u2014 "),Zx=a("a"),KXe=o("VanConfig"),ZXe=o(" (VAN model)"),eze=l(),Mg=a("li"),VK=a("strong"),oze=o("vilt"),rze=o(" \u2014 "),ek=a("a"),tze=o("ViltConfig"),aze=o(" (ViLT model)"),nze=l(),Eg=a("li"),XK=a("strong"),sze=o("vision-encoder-decoder"),lze=o(" \u2014 "),ok=a("a"),ize=o("VisionEncoderDecoderConfig"),dze=o(" (Vision Encoder decoder model)"),cze=l(),Cg=a("li"),zK=a("strong"),fze=o("vision-text-dual-encoder"),mze=o(" \u2014 "),rk=a("a"),gze=o("VisionTextDualEncoderConfig"),hze=o(" (VisionTextDualEncoder model)"),pze=l(),wg=a("li"),QK=a("strong"),_ze=o("visual_bert"),uze=o(" \u2014 "),tk=a("a"),bze=o("VisualBertConfig"),Fze=o(" (VisualBert model)"),vze=l(),Ag=a("li"),WK=a("strong"),Tze=o("vit"),Mze=o(" \u2014 "),ak=a("a"),Eze=o("ViTConfig"),Cze=o(" (ViT model)"),wze=l(),yg=a("li"),HK=a("strong"),Aze=o("vit_mae"),yze=o(" \u2014 "),nk=a("a"),Lze=o("ViTMAEConfig"),xze=o(" (ViTMAE model)"),kze=l(),Lg=a("li"),UK=a("strong"),Sze=o("wav2vec2"),Rze=o(" \u2014 "),sk=a("a"),Bze=o("Wav2Vec2Config"),Pze=o(" (Wav2Vec2 model)"),$ze=l(),xg=a("li"),JK=a("strong"),Ize=o("wavlm"),qze=o(" \u2014 "),lk=a("a"),Nze=o("WavLMConfig"),jze=o(" (WavLM model)"),Dze=l(),kg=a("li"),YK=a("strong"),Gze=o("xglm"),Oze=o(" \u2014 "),ik=a("a"),Vze=o("XGLMConfig"),Xze=o(" (XGLM model)"),zze=l(),Sg=a("li"),KK=a("strong"),Qze=o("xlm"),Wze=o(" \u2014 "),dk=a("a"),Hze=o("XLMConfig"),Uze=o(" (XLM model)"),Jze=l(),Rg=a("li"),ZK=a("strong"),Yze=o("xlm-prophetnet"),Kze=o(" \u2014 "),ck=a("a"),Zze=o("XLMProphetNetConfig"),eQe=o(" (XLMProphetNet model)"),oQe=l(),Bg=a("li"),eZ=a("strong"),rQe=o("xlm-roberta"),tQe=o(" \u2014 "),fk=a("a"),aQe=o("XLMRobertaConfig"),nQe=o(" (XLM-RoBERTa model)"),sQe=l(),Pg=a("li"),oZ=a("strong"),lQe=o("xlm-roberta-xl"),iQe=o(" \u2014 "),mk=a("a"),dQe=o("XLMRobertaXLConfig"),cQe=o(" (XLM-RoBERTa-XL model)"),fQe=l(),$g=a("li"),rZ=a("strong"),mQe=o("xlnet"),gQe=o(" \u2014 "),gk=a("a"),hQe=o("XLNetConfig"),pQe=o(" (XLNet model)"),_Qe=l(),Ig=a("li"),tZ=a("strong"),uQe=o("yoso"),bQe=o(" \u2014 "),hk=a("a"),FQe=o("YosoConfig"),vQe=o(" (YOSO model)"),TQe=l(),aZ=a("p"),MQe=o("Examples:"),EQe=l(),f(P3.$$.fragment),CQe=l(),qg=a("div"),f($3.$$.fragment),wQe=l(),nZ=a("p"),AQe=o("Register a new configuration for this class."),MRe=l(),Qi=a("h2"),Ng=a("a"),sZ=a("span"),f(I3.$$.fragment),yQe=l(),lZ=a("span"),LQe=o("AutoTokenizer"),ERe=l(),Wo=a("div"),f(q3.$$.fragment),xQe=l(),N3=a("p"),kQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),pk=a("a"),SQe=o("AutoTokenizer.from_pretrained()"),RQe=o(" class method."),BQe=l(),j3=a("p"),PQe=o("This class cannot be instantiated directly using "),iZ=a("code"),$Qe=o("__init__()"),IQe=o(" (throws an error)."),qQe=l(),go=a("div"),f(D3.$$.fragment),NQe=l(),dZ=a("p"),jQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),DQe=l(),Oa=a("p"),GQe=o("The tokenizer class to instantiate is selected based on the "),cZ=a("code"),OQe=o("model_type"),VQe=o(` property of the config object (either
passed as an argument or loaded from `),fZ=a("code"),XQe=o("pretrained_model_name_or_path"),zQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mZ=a("code"),QQe=o("pretrained_model_name_or_path"),WQe=o(":"),HQe=l(),E=a("ul"),Qn=a("li"),gZ=a("strong"),UQe=o("albert"),JQe=o(" \u2014 "),_k=a("a"),YQe=o("AlbertTokenizer"),KQe=o(" or "),uk=a("a"),ZQe=o("AlbertTokenizerFast"),eWe=o(" (ALBERT model)"),oWe=l(),Wn=a("li"),hZ=a("strong"),rWe=o("bart"),tWe=o(" \u2014 "),bk=a("a"),aWe=o("BartTokenizer"),nWe=o(" or "),Fk=a("a"),sWe=o("BartTokenizerFast"),lWe=o(" (BART model)"),iWe=l(),Hn=a("li"),pZ=a("strong"),dWe=o("barthez"),cWe=o(" \u2014 "),vk=a("a"),fWe=o("BarthezTokenizer"),mWe=o(" or "),Tk=a("a"),gWe=o("BarthezTokenizerFast"),hWe=o(" (BARThez model)"),pWe=l(),jg=a("li"),_Z=a("strong"),_We=o("bartpho"),uWe=o(" \u2014 "),Mk=a("a"),bWe=o("BartphoTokenizer"),FWe=o(" (BARTpho model)"),vWe=l(),Un=a("li"),uZ=a("strong"),TWe=o("bert"),MWe=o(" \u2014 "),Ek=a("a"),EWe=o("BertTokenizer"),CWe=o(" or "),Ck=a("a"),wWe=o("BertTokenizerFast"),AWe=o(" (BERT model)"),yWe=l(),Dg=a("li"),bZ=a("strong"),LWe=o("bert-generation"),xWe=o(" \u2014 "),wk=a("a"),kWe=o("BertGenerationTokenizer"),SWe=o(" (Bert Generation model)"),RWe=l(),Gg=a("li"),FZ=a("strong"),BWe=o("bert-japanese"),PWe=o(" \u2014 "),Ak=a("a"),$We=o("BertJapaneseTokenizer"),IWe=o(" (BertJapanese model)"),qWe=l(),Og=a("li"),vZ=a("strong"),NWe=o("bertweet"),jWe=o(" \u2014 "),yk=a("a"),DWe=o("BertweetTokenizer"),GWe=o(" (Bertweet model)"),OWe=l(),Jn=a("li"),TZ=a("strong"),VWe=o("big_bird"),XWe=o(" \u2014 "),Lk=a("a"),zWe=o("BigBirdTokenizer"),QWe=o(" or "),xk=a("a"),WWe=o("BigBirdTokenizerFast"),HWe=o(" (BigBird model)"),UWe=l(),Yn=a("li"),MZ=a("strong"),JWe=o("bigbird_pegasus"),YWe=o(" \u2014 "),kk=a("a"),KWe=o("PegasusTokenizer"),ZWe=o(" or "),Sk=a("a"),eHe=o("PegasusTokenizerFast"),oHe=o(" (BigBirdPegasus model)"),rHe=l(),Kn=a("li"),EZ=a("strong"),tHe=o("blenderbot"),aHe=o(" \u2014 "),Rk=a("a"),nHe=o("BlenderbotTokenizer"),sHe=o(" or "),Bk=a("a"),lHe=o("BlenderbotTokenizerFast"),iHe=o(" (Blenderbot model)"),dHe=l(),Vg=a("li"),CZ=a("strong"),cHe=o("blenderbot-small"),fHe=o(" \u2014 "),Pk=a("a"),mHe=o("BlenderbotSmallTokenizer"),gHe=o(" (BlenderbotSmall model)"),hHe=l(),Xg=a("li"),wZ=a("strong"),pHe=o("byt5"),_He=o(" \u2014 "),$k=a("a"),uHe=o("ByT5Tokenizer"),bHe=o(" (ByT5 model)"),FHe=l(),Zn=a("li"),AZ=a("strong"),vHe=o("camembert"),THe=o(" \u2014 "),Ik=a("a"),MHe=o("CamembertTokenizer"),EHe=o(" or "),qk=a("a"),CHe=o("CamembertTokenizerFast"),wHe=o(" (CamemBERT model)"),AHe=l(),zg=a("li"),yZ=a("strong"),yHe=o("canine"),LHe=o(" \u2014 "),Nk=a("a"),xHe=o("CanineTokenizer"),kHe=o(" (Canine model)"),SHe=l(),es=a("li"),LZ=a("strong"),RHe=o("clip"),BHe=o(" \u2014 "),jk=a("a"),PHe=o("CLIPTokenizer"),$He=o(" or "),Dk=a("a"),IHe=o("CLIPTokenizerFast"),qHe=o(" (CLIP model)"),NHe=l(),os=a("li"),xZ=a("strong"),jHe=o("convbert"),DHe=o(" \u2014 "),Gk=a("a"),GHe=o("ConvBertTokenizer"),OHe=o(" or "),Ok=a("a"),VHe=o("ConvBertTokenizerFast"),XHe=o(" (ConvBERT model)"),zHe=l(),rs=a("li"),kZ=a("strong"),QHe=o("cpm"),WHe=o(" \u2014 "),Vk=a("a"),HHe=o("CpmTokenizer"),UHe=o(" or "),SZ=a("code"),JHe=o("CpmTokenizerFast"),YHe=o(" (CPM model)"),KHe=l(),Qg=a("li"),RZ=a("strong"),ZHe=o("ctrl"),eUe=o(" \u2014 "),Xk=a("a"),oUe=o("CTRLTokenizer"),rUe=o(" (CTRL model)"),tUe=l(),ts=a("li"),BZ=a("strong"),aUe=o("deberta"),nUe=o(" \u2014 "),zk=a("a"),sUe=o("DebertaTokenizer"),lUe=o(" or "),Qk=a("a"),iUe=o("DebertaTokenizerFast"),dUe=o(" (DeBERTa model)"),cUe=l(),Wg=a("li"),PZ=a("strong"),fUe=o("deberta-v2"),mUe=o(" \u2014 "),Wk=a("a"),gUe=o("DebertaV2Tokenizer"),hUe=o(" (DeBERTa-v2 model)"),pUe=l(),as=a("li"),$Z=a("strong"),_Ue=o("distilbert"),uUe=o(" \u2014 "),Hk=a("a"),bUe=o("DistilBertTokenizer"),FUe=o(" or "),Uk=a("a"),vUe=o("DistilBertTokenizerFast"),TUe=o(" (DistilBERT model)"),MUe=l(),ns=a("li"),IZ=a("strong"),EUe=o("dpr"),CUe=o(" \u2014 "),Jk=a("a"),wUe=o("DPRQuestionEncoderTokenizer"),AUe=o(" or "),Yk=a("a"),yUe=o("DPRQuestionEncoderTokenizerFast"),LUe=o(" (DPR model)"),xUe=l(),ss=a("li"),qZ=a("strong"),kUe=o("electra"),SUe=o(" \u2014 "),Kk=a("a"),RUe=o("ElectraTokenizer"),BUe=o(" or "),Zk=a("a"),PUe=o("ElectraTokenizerFast"),$Ue=o(" (ELECTRA model)"),IUe=l(),Hg=a("li"),NZ=a("strong"),qUe=o("flaubert"),NUe=o(" \u2014 "),eS=a("a"),jUe=o("FlaubertTokenizer"),DUe=o(" (FlauBERT model)"),GUe=l(),ls=a("li"),jZ=a("strong"),OUe=o("fnet"),VUe=o(" \u2014 "),oS=a("a"),XUe=o("FNetTokenizer"),zUe=o(" or "),rS=a("a"),QUe=o("FNetTokenizerFast"),WUe=o(" (FNet model)"),HUe=l(),Ug=a("li"),DZ=a("strong"),UUe=o("fsmt"),JUe=o(" \u2014 "),tS=a("a"),YUe=o("FSMTTokenizer"),KUe=o(" (FairSeq Machine-Translation model)"),ZUe=l(),is=a("li"),GZ=a("strong"),eJe=o("funnel"),oJe=o(" \u2014 "),aS=a("a"),rJe=o("FunnelTokenizer"),tJe=o(" or "),nS=a("a"),aJe=o("FunnelTokenizerFast"),nJe=o(" (Funnel Transformer model)"),sJe=l(),ds=a("li"),OZ=a("strong"),lJe=o("gpt2"),iJe=o(" \u2014 "),sS=a("a"),dJe=o("GPT2Tokenizer"),cJe=o(" or "),lS=a("a"),fJe=o("GPT2TokenizerFast"),mJe=o(" (OpenAI GPT-2 model)"),gJe=l(),cs=a("li"),VZ=a("strong"),hJe=o("gpt_neo"),pJe=o(" \u2014 "),iS=a("a"),_Je=o("GPT2Tokenizer"),uJe=o(" or "),dS=a("a"),bJe=o("GPT2TokenizerFast"),FJe=o(" (GPT Neo model)"),vJe=l(),fs=a("li"),XZ=a("strong"),TJe=o("herbert"),MJe=o(" \u2014 "),cS=a("a"),EJe=o("HerbertTokenizer"),CJe=o(" or "),fS=a("a"),wJe=o("HerbertTokenizerFast"),AJe=o(" (HerBERT model)"),yJe=l(),Jg=a("li"),zZ=a("strong"),LJe=o("hubert"),xJe=o(" \u2014 "),mS=a("a"),kJe=o("Wav2Vec2CTCTokenizer"),SJe=o(" (Hubert model)"),RJe=l(),ms=a("li"),QZ=a("strong"),BJe=o("ibert"),PJe=o(" \u2014 "),gS=a("a"),$Je=o("RobertaTokenizer"),IJe=o(" or "),hS=a("a"),qJe=o("RobertaTokenizerFast"),NJe=o(" (I-BERT model)"),jJe=l(),gs=a("li"),WZ=a("strong"),DJe=o("layoutlm"),GJe=o(" \u2014 "),pS=a("a"),OJe=o("LayoutLMTokenizer"),VJe=o(" or "),_S=a("a"),XJe=o("LayoutLMTokenizerFast"),zJe=o(" (LayoutLM model)"),QJe=l(),hs=a("li"),HZ=a("strong"),WJe=o("layoutlmv2"),HJe=o(" \u2014 "),uS=a("a"),UJe=o("LayoutLMv2Tokenizer"),JJe=o(" or "),bS=a("a"),YJe=o("LayoutLMv2TokenizerFast"),KJe=o(" (LayoutLMv2 model)"),ZJe=l(),ps=a("li"),UZ=a("strong"),eYe=o("layoutxlm"),oYe=o(" \u2014 "),FS=a("a"),rYe=o("LayoutXLMTokenizer"),tYe=o(" or "),vS=a("a"),aYe=o("LayoutXLMTokenizerFast"),nYe=o(" (LayoutXLM model)"),sYe=l(),_s=a("li"),JZ=a("strong"),lYe=o("led"),iYe=o(" \u2014 "),TS=a("a"),dYe=o("LEDTokenizer"),cYe=o(" or "),MS=a("a"),fYe=o("LEDTokenizerFast"),mYe=o(" (LED model)"),gYe=l(),us=a("li"),YZ=a("strong"),hYe=o("longformer"),pYe=o(" \u2014 "),ES=a("a"),_Ye=o("LongformerTokenizer"),uYe=o(" or "),CS=a("a"),bYe=o("LongformerTokenizerFast"),FYe=o(" (Longformer model)"),vYe=l(),Yg=a("li"),KZ=a("strong"),TYe=o("luke"),MYe=o(" \u2014 "),wS=a("a"),EYe=o("LukeTokenizer"),CYe=o(" (LUKE model)"),wYe=l(),bs=a("li"),ZZ=a("strong"),AYe=o("lxmert"),yYe=o(" \u2014 "),AS=a("a"),LYe=o("LxmertTokenizer"),xYe=o(" or "),yS=a("a"),kYe=o("LxmertTokenizerFast"),SYe=o(" (LXMERT model)"),RYe=l(),Kg=a("li"),eee=a("strong"),BYe=o("m2m_100"),PYe=o(" \u2014 "),LS=a("a"),$Ye=o("M2M100Tokenizer"),IYe=o(" (M2M100 model)"),qYe=l(),Zg=a("li"),oee=a("strong"),NYe=o("marian"),jYe=o(" \u2014 "),xS=a("a"),DYe=o("MarianTokenizer"),GYe=o(" (Marian model)"),OYe=l(),Fs=a("li"),ree=a("strong"),VYe=o("mbart"),XYe=o(" \u2014 "),kS=a("a"),zYe=o("MBartTokenizer"),QYe=o(" or "),SS=a("a"),WYe=o("MBartTokenizerFast"),HYe=o(" (mBART model)"),UYe=l(),vs=a("li"),tee=a("strong"),JYe=o("mbart50"),YYe=o(" \u2014 "),RS=a("a"),KYe=o("MBart50Tokenizer"),ZYe=o(" or "),BS=a("a"),eKe=o("MBart50TokenizerFast"),oKe=o(" (mBART-50 model)"),rKe=l(),eh=a("li"),aee=a("strong"),tKe=o("mluke"),aKe=o(" \u2014 "),PS=a("a"),nKe=o("MLukeTokenizer"),sKe=o(" (mLUKE model)"),lKe=l(),Ts=a("li"),nee=a("strong"),iKe=o("mobilebert"),dKe=o(" \u2014 "),$S=a("a"),cKe=o("MobileBertTokenizer"),fKe=o(" or "),IS=a("a"),mKe=o("MobileBertTokenizerFast"),gKe=o(" (MobileBERT model)"),hKe=l(),Ms=a("li"),see=a("strong"),pKe=o("mpnet"),_Ke=o(" \u2014 "),qS=a("a"),uKe=o("MPNetTokenizer"),bKe=o(" or "),NS=a("a"),FKe=o("MPNetTokenizerFast"),vKe=o(" (MPNet model)"),TKe=l(),Es=a("li"),lee=a("strong"),MKe=o("mt5"),EKe=o(" \u2014 "),jS=a("a"),CKe=o("MT5Tokenizer"),wKe=o(" or "),DS=a("a"),AKe=o("MT5TokenizerFast"),yKe=o(" (mT5 model)"),LKe=l(),Cs=a("li"),iee=a("strong"),xKe=o("openai-gpt"),kKe=o(" \u2014 "),GS=a("a"),SKe=o("OpenAIGPTTokenizer"),RKe=o(" or "),OS=a("a"),BKe=o("OpenAIGPTTokenizerFast"),PKe=o(" (OpenAI GPT model)"),$Ke=l(),ws=a("li"),dee=a("strong"),IKe=o("pegasus"),qKe=o(" \u2014 "),VS=a("a"),NKe=o("PegasusTokenizer"),jKe=o(" or "),XS=a("a"),DKe=o("PegasusTokenizerFast"),GKe=o(" (Pegasus model)"),OKe=l(),oh=a("li"),cee=a("strong"),VKe=o("perceiver"),XKe=o(" \u2014 "),zS=a("a"),zKe=o("PerceiverTokenizer"),QKe=o(" (Perceiver model)"),WKe=l(),rh=a("li"),fee=a("strong"),HKe=o("phobert"),UKe=o(" \u2014 "),QS=a("a"),JKe=o("PhobertTokenizer"),YKe=o(" (PhoBERT model)"),KKe=l(),th=a("li"),mee=a("strong"),ZKe=o("plbart"),eZe=o(" \u2014 "),WS=a("a"),oZe=o("PLBartTokenizer"),rZe=o(" (PLBart model)"),tZe=l(),ah=a("li"),gee=a("strong"),aZe=o("prophetnet"),nZe=o(" \u2014 "),HS=a("a"),sZe=o("ProphetNetTokenizer"),lZe=o(" (ProphetNet model)"),iZe=l(),As=a("li"),hee=a("strong"),dZe=o("qdqbert"),cZe=o(" \u2014 "),US=a("a"),fZe=o("BertTokenizer"),mZe=o(" or "),JS=a("a"),gZe=o("BertTokenizerFast"),hZe=o(" (QDQBert model)"),pZe=l(),nh=a("li"),pee=a("strong"),_Ze=o("rag"),uZe=o(" \u2014 "),YS=a("a"),bZe=o("RagTokenizer"),FZe=o(" (RAG model)"),vZe=l(),ys=a("li"),_ee=a("strong"),TZe=o("realm"),MZe=o(" \u2014 "),KS=a("a"),EZe=o("RealmTokenizer"),CZe=o(" or "),ZS=a("a"),wZe=o("RealmTokenizerFast"),AZe=o(" (Realm model)"),yZe=l(),Ls=a("li"),uee=a("strong"),LZe=o("reformer"),xZe=o(" \u2014 "),eR=a("a"),kZe=o("ReformerTokenizer"),SZe=o(" or "),oR=a("a"),RZe=o("ReformerTokenizerFast"),BZe=o(" (Reformer model)"),PZe=l(),xs=a("li"),bee=a("strong"),$Ze=o("rembert"),IZe=o(" \u2014 "),rR=a("a"),qZe=o("RemBertTokenizer"),NZe=o(" or "),tR=a("a"),jZe=o("RemBertTokenizerFast"),DZe=o(" (RemBERT model)"),GZe=l(),ks=a("li"),Fee=a("strong"),OZe=o("retribert"),VZe=o(" \u2014 "),aR=a("a"),XZe=o("RetriBertTokenizer"),zZe=o(" or "),nR=a("a"),QZe=o("RetriBertTokenizerFast"),WZe=o(" (RetriBERT model)"),HZe=l(),Ss=a("li"),vee=a("strong"),UZe=o("roberta"),JZe=o(" \u2014 "),sR=a("a"),YZe=o("RobertaTokenizer"),KZe=o(" or "),lR=a("a"),ZZe=o("RobertaTokenizerFast"),eeo=o(" (RoBERTa model)"),oeo=l(),Rs=a("li"),Tee=a("strong"),reo=o("roformer"),teo=o(" \u2014 "),iR=a("a"),aeo=o("RoFormerTokenizer"),neo=o(" or "),dR=a("a"),seo=o("RoFormerTokenizerFast"),leo=o(" (RoFormer model)"),ieo=l(),sh=a("li"),Mee=a("strong"),deo=o("speech_to_text"),ceo=o(" \u2014 "),cR=a("a"),feo=o("Speech2TextTokenizer"),meo=o(" (Speech2Text model)"),geo=l(),lh=a("li"),Eee=a("strong"),heo=o("speech_to_text_2"),peo=o(" \u2014 "),fR=a("a"),_eo=o("Speech2Text2Tokenizer"),ueo=o(" (Speech2Text2 model)"),beo=l(),Bs=a("li"),Cee=a("strong"),Feo=o("splinter"),veo=o(" \u2014 "),mR=a("a"),Teo=o("SplinterTokenizer"),Meo=o(" or "),gR=a("a"),Eeo=o("SplinterTokenizerFast"),Ceo=o(" (Splinter model)"),weo=l(),Ps=a("li"),wee=a("strong"),Aeo=o("squeezebert"),yeo=o(" \u2014 "),hR=a("a"),Leo=o("SqueezeBertTokenizer"),xeo=o(" or "),pR=a("a"),keo=o("SqueezeBertTokenizerFast"),Seo=o(" (SqueezeBERT model)"),Reo=l(),$s=a("li"),Aee=a("strong"),Beo=o("t5"),Peo=o(" \u2014 "),_R=a("a"),$eo=o("T5Tokenizer"),Ieo=o(" or "),uR=a("a"),qeo=o("T5TokenizerFast"),Neo=o(" (T5 model)"),jeo=l(),ih=a("li"),yee=a("strong"),Deo=o("tapas"),Geo=o(" \u2014 "),bR=a("a"),Oeo=o("TapasTokenizer"),Veo=o(" (TAPAS model)"),Xeo=l(),dh=a("li"),Lee=a("strong"),zeo=o("tapex"),Qeo=o(" \u2014 "),FR=a("a"),Weo=o("TapexTokenizer"),Heo=o(" (TAPEX model)"),Ueo=l(),ch=a("li"),xee=a("strong"),Jeo=o("transfo-xl"),Yeo=o(" \u2014 "),vR=a("a"),Keo=o("TransfoXLTokenizer"),Zeo=o(" (Transformer-XL model)"),eoo=l(),fh=a("li"),kee=a("strong"),ooo=o("wav2vec2"),roo=o(" \u2014 "),TR=a("a"),too=o("Wav2Vec2CTCTokenizer"),aoo=o(" (Wav2Vec2 model)"),noo=l(),mh=a("li"),See=a("strong"),soo=o("wav2vec2_phoneme"),loo=o(" \u2014 "),MR=a("a"),ioo=o("Wav2Vec2PhonemeCTCTokenizer"),doo=o(" (Wav2Vec2Phoneme model)"),coo=l(),Is=a("li"),Ree=a("strong"),foo=o("xglm"),moo=o(" \u2014 "),ER=a("a"),goo=o("XGLMTokenizer"),hoo=o(" or "),CR=a("a"),poo=o("XGLMTokenizerFast"),_oo=o(" (XGLM model)"),uoo=l(),gh=a("li"),Bee=a("strong"),boo=o("xlm"),Foo=o(" \u2014 "),wR=a("a"),voo=o("XLMTokenizer"),Too=o(" (XLM model)"),Moo=l(),hh=a("li"),Pee=a("strong"),Eoo=o("xlm-prophetnet"),Coo=o(" \u2014 "),AR=a("a"),woo=o("XLMProphetNetTokenizer"),Aoo=o(" (XLMProphetNet model)"),yoo=l(),qs=a("li"),$ee=a("strong"),Loo=o("xlm-roberta"),xoo=o(" \u2014 "),yR=a("a"),koo=o("XLMRobertaTokenizer"),Soo=o(" or "),LR=a("a"),Roo=o("XLMRobertaTokenizerFast"),Boo=o(" (XLM-RoBERTa model)"),Poo=l(),Ns=a("li"),Iee=a("strong"),$oo=o("xlnet"),Ioo=o(" \u2014 "),xR=a("a"),qoo=o("XLNetTokenizer"),Noo=o(" or "),kR=a("a"),joo=o("XLNetTokenizerFast"),Doo=o(" (XLNet model)"),Goo=l(),qee=a("p"),Ooo=o("Examples:"),Voo=l(),f(G3.$$.fragment),Xoo=l(),ph=a("div"),f(O3.$$.fragment),zoo=l(),Nee=a("p"),Qoo=o("Register a new tokenizer in this mapping."),CRe=l(),Wi=a("h2"),_h=a("a"),jee=a("span"),f(V3.$$.fragment),Woo=l(),Dee=a("span"),Hoo=o("AutoFeatureExtractor"),wRe=l(),Ho=a("div"),f(X3.$$.fragment),Uoo=l(),z3=a("p"),Joo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),SR=a("a"),Yoo=o("AutoFeatureExtractor.from_pretrained()"),Koo=o(" class method."),Zoo=l(),Q3=a("p"),ero=o("This class cannot be instantiated directly using "),Gee=a("code"),oro=o("__init__()"),rro=o(" (throws an error)."),tro=l(),$e=a("div"),f(W3.$$.fragment),aro=l(),Oee=a("p"),nro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),sro=l(),Va=a("p"),lro=o("The feature extractor class to instantiate is selected based on the "),Vee=a("code"),iro=o("model_type"),dro=o(` property of the config object
(either passed as an argument or loaded from `),Xee=a("code"),cro=o("pretrained_model_name_or_path"),fro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zee=a("code"),mro=o("pretrained_model_name_or_path"),gro=o(":"),hro=l(),ee=a("ul"),uh=a("li"),Qee=a("strong"),pro=o("beit"),_ro=o(" \u2014 "),RR=a("a"),uro=o("BeitFeatureExtractor"),bro=o(" (BEiT model)"),Fro=l(),bh=a("li"),Wee=a("strong"),vro=o("clip"),Tro=o(" \u2014 "),BR=a("a"),Mro=o("CLIPFeatureExtractor"),Ero=o(" (CLIP model)"),Cro=l(),Fh=a("li"),Hee=a("strong"),wro=o("convnext"),Aro=o(" \u2014 "),PR=a("a"),yro=o("ConvNextFeatureExtractor"),Lro=o(" (ConvNext model)"),xro=l(),vh=a("li"),Uee=a("strong"),kro=o("deit"),Sro=o(" \u2014 "),$R=a("a"),Rro=o("DeiTFeatureExtractor"),Bro=o(" (DeiT model)"),Pro=l(),Th=a("li"),Jee=a("strong"),$ro=o("detr"),Iro=o(" \u2014 "),IR=a("a"),qro=o("DetrFeatureExtractor"),Nro=o(" (DETR model)"),jro=l(),Mh=a("li"),Yee=a("strong"),Dro=o("hubert"),Gro=o(" \u2014 "),qR=a("a"),Oro=o("Wav2Vec2FeatureExtractor"),Vro=o(" (Hubert model)"),Xro=l(),Eh=a("li"),Kee=a("strong"),zro=o("layoutlmv2"),Qro=o(" \u2014 "),NR=a("a"),Wro=o("LayoutLMv2FeatureExtractor"),Hro=o(" (LayoutLMv2 model)"),Uro=l(),Ch=a("li"),Zee=a("strong"),Jro=o("maskformer"),Yro=o(" \u2014 "),jR=a("a"),Kro=o("MaskFormerFeatureExtractor"),Zro=o(" (MaskFormer model)"),eto=l(),wh=a("li"),eoe=a("strong"),oto=o("perceiver"),rto=o(" \u2014 "),DR=a("a"),tto=o("PerceiverFeatureExtractor"),ato=o(" (Perceiver model)"),nto=l(),Ah=a("li"),ooe=a("strong"),sto=o("poolformer"),lto=o(" \u2014 "),GR=a("a"),ito=o("PoolFormerFeatureExtractor"),dto=o(" (PoolFormer model)"),cto=l(),yh=a("li"),roe=a("strong"),fto=o("regnet"),mto=o(" \u2014 "),OR=a("a"),gto=o("ConvNextFeatureExtractor"),hto=o(" (RegNet model)"),pto=l(),Lh=a("li"),toe=a("strong"),_to=o("resnet"),uto=o(" \u2014 "),VR=a("a"),bto=o("ConvNextFeatureExtractor"),Fto=o(" (ResNet model)"),vto=l(),xh=a("li"),aoe=a("strong"),Tto=o("segformer"),Mto=o(" \u2014 "),XR=a("a"),Eto=o("SegformerFeatureExtractor"),Cto=o(" (SegFormer model)"),wto=l(),kh=a("li"),noe=a("strong"),Ato=o("speech_to_text"),yto=o(" \u2014 "),zR=a("a"),Lto=o("Speech2TextFeatureExtractor"),xto=o(" (Speech2Text model)"),kto=l(),Sh=a("li"),soe=a("strong"),Sto=o("swin"),Rto=o(" \u2014 "),QR=a("a"),Bto=o("ViTFeatureExtractor"),Pto=o(" (Swin model)"),$to=l(),Rh=a("li"),loe=a("strong"),Ito=o("van"),qto=o(" \u2014 "),WR=a("a"),Nto=o("ConvNextFeatureExtractor"),jto=o(" (VAN model)"),Dto=l(),Bh=a("li"),ioe=a("strong"),Gto=o("vit"),Oto=o(" \u2014 "),HR=a("a"),Vto=o("ViTFeatureExtractor"),Xto=o(" (ViT model)"),zto=l(),Ph=a("li"),doe=a("strong"),Qto=o("vit_mae"),Wto=o(" \u2014 "),UR=a("a"),Hto=o("ViTFeatureExtractor"),Uto=o(" (ViTMAE model)"),Jto=l(),$h=a("li"),coe=a("strong"),Yto=o("wav2vec2"),Kto=o(" \u2014 "),JR=a("a"),Zto=o("Wav2Vec2FeatureExtractor"),eao=o(" (Wav2Vec2 model)"),oao=l(),f(Ih.$$.fragment),rao=l(),foe=a("p"),tao=o("Examples:"),aao=l(),f(H3.$$.fragment),nao=l(),qh=a("div"),f(U3.$$.fragment),sao=l(),moe=a("p"),lao=o("Register a new feature extractor for this class."),ARe=l(),Hi=a("h2"),Nh=a("a"),goe=a("span"),f(J3.$$.fragment),iao=l(),hoe=a("span"),dao=o("AutoProcessor"),yRe=l(),Uo=a("div"),f(Y3.$$.fragment),cao=l(),K3=a("p"),fao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),YR=a("a"),mao=o("AutoProcessor.from_pretrained()"),gao=o(" class method."),hao=l(),Z3=a("p"),pao=o("This class cannot be instantiated directly using "),poe=a("code"),_ao=o("__init__()"),uao=o(" (throws an error)."),bao=l(),Ie=a("div"),f(ew.$$.fragment),Fao=l(),_oe=a("p"),vao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Tao=l(),Ui=a("p"),Mao=o("The processor class to instantiate is selected based on the "),uoe=a("code"),Eao=o("model_type"),Cao=o(` property of the config object (either
passed as an argument or loaded from `),boe=a("code"),wao=o("pretrained_model_name_or_path"),Aao=o(" if possible):"),yao=l(),ke=a("ul"),jh=a("li"),Foe=a("strong"),Lao=o("clip"),xao=o(" \u2014 "),KR=a("a"),kao=o("CLIPProcessor"),Sao=o(" (CLIP model)"),Rao=l(),Dh=a("li"),voe=a("strong"),Bao=o("layoutlmv2"),Pao=o(" \u2014 "),ZR=a("a"),$ao=o("LayoutLMv2Processor"),Iao=o(" (LayoutLMv2 model)"),qao=l(),Gh=a("li"),Toe=a("strong"),Nao=o("layoutxlm"),jao=o(" \u2014 "),eB=a("a"),Dao=o("LayoutXLMProcessor"),Gao=o(" (LayoutXLM model)"),Oao=l(),Oh=a("li"),Moe=a("strong"),Vao=o("speech_to_text"),Xao=o(" \u2014 "),oB=a("a"),zao=o("Speech2TextProcessor"),Qao=o(" (Speech2Text model)"),Wao=l(),Vh=a("li"),Eoe=a("strong"),Hao=o("speech_to_text_2"),Uao=o(" \u2014 "),rB=a("a"),Jao=o("Speech2Text2Processor"),Yao=o(" (Speech2Text2 model)"),Kao=l(),Xh=a("li"),Coe=a("strong"),Zao=o("trocr"),eno=o(" \u2014 "),tB=a("a"),ono=o("TrOCRProcessor"),rno=o(" (TrOCR model)"),tno=l(),zh=a("li"),woe=a("strong"),ano=o("vision-text-dual-encoder"),nno=o(" \u2014 "),aB=a("a"),sno=o("VisionTextDualEncoderProcessor"),lno=o(" (VisionTextDualEncoder model)"),ino=l(),Qh=a("li"),Aoe=a("strong"),dno=o("wav2vec2"),cno=o(" \u2014 "),nB=a("a"),fno=o("Wav2Vec2Processor"),mno=o(" (Wav2Vec2 model)"),gno=l(),f(Wh.$$.fragment),hno=l(),yoe=a("p"),pno=o("Examples:"),_no=l(),f(ow.$$.fragment),uno=l(),Hh=a("div"),f(rw.$$.fragment),bno=l(),Loe=a("p"),Fno=o("Register a new processor for this class."),LRe=l(),Ji=a("h2"),Uh=a("a"),xoe=a("span"),f(tw.$$.fragment),vno=l(),koe=a("span"),Tno=o("AutoModel"),xRe=l(),Jo=a("div"),f(aw.$$.fragment),Mno=l(),Yi=a("p"),Eno=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sB=a("a"),Cno=o("from_pretrained()"),wno=o(" class method or the "),lB=a("a"),Ano=o("from_config()"),yno=o(` class
method.`),Lno=l(),nw=a("p"),xno=o("This class cannot be instantiated directly using "),Soe=a("code"),kno=o("__init__()"),Sno=o(" (throws an error)."),Rno=l(),Xr=a("div"),f(sw.$$.fragment),Bno=l(),Roe=a("p"),Pno=o("Instantiates one of the base model classes of the library from a configuration."),$no=l(),Ki=a("p"),Ino=o(`Note:
Loading a model from its configuration file does `),Boe=a("strong"),qno=o("not"),Nno=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iB=a("a"),jno=o("from_pretrained()"),Dno=o(" to load the model weights."),Gno=l(),Poe=a("p"),Ono=o("Examples:"),Vno=l(),f(lw.$$.fragment),Xno=l(),qe=a("div"),f(iw.$$.fragment),zno=l(),$oe=a("p"),Qno=o("Instantiate one of the base model classes of the library from a pretrained model."),Wno=l(),Xa=a("p"),Hno=o("The model class to instantiate is selected based on the "),Ioe=a("code"),Uno=o("model_type"),Jno=o(` property of the config object (either
passed as an argument or loaded from `),qoe=a("code"),Yno=o("pretrained_model_name_or_path"),Kno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Noe=a("code"),Zno=o("pretrained_model_name_or_path"),eso=o(":"),oso=l(),T=a("ul"),Jh=a("li"),joe=a("strong"),rso=o("albert"),tso=o(" \u2014 "),dB=a("a"),aso=o("AlbertModel"),nso=o(" (ALBERT model)"),sso=l(),Yh=a("li"),Doe=a("strong"),lso=o("bart"),iso=o(" \u2014 "),cB=a("a"),dso=o("BartModel"),cso=o(" (BART model)"),fso=l(),Kh=a("li"),Goe=a("strong"),mso=o("beit"),gso=o(" \u2014 "),fB=a("a"),hso=o("BeitModel"),pso=o(" (BEiT model)"),_so=l(),Zh=a("li"),Ooe=a("strong"),uso=o("bert"),bso=o(" \u2014 "),mB=a("a"),Fso=o("BertModel"),vso=o(" (BERT model)"),Tso=l(),ep=a("li"),Voe=a("strong"),Mso=o("bert-generation"),Eso=o(" \u2014 "),gB=a("a"),Cso=o("BertGenerationEncoder"),wso=o(" (Bert Generation model)"),Aso=l(),op=a("li"),Xoe=a("strong"),yso=o("big_bird"),Lso=o(" \u2014 "),hB=a("a"),xso=o("BigBirdModel"),kso=o(" (BigBird model)"),Sso=l(),rp=a("li"),zoe=a("strong"),Rso=o("bigbird_pegasus"),Bso=o(" \u2014 "),pB=a("a"),Pso=o("BigBirdPegasusModel"),$so=o(" (BigBirdPegasus model)"),Iso=l(),tp=a("li"),Qoe=a("strong"),qso=o("blenderbot"),Nso=o(" \u2014 "),_B=a("a"),jso=o("BlenderbotModel"),Dso=o(" (Blenderbot model)"),Gso=l(),ap=a("li"),Woe=a("strong"),Oso=o("blenderbot-small"),Vso=o(" \u2014 "),uB=a("a"),Xso=o("BlenderbotSmallModel"),zso=o(" (BlenderbotSmall model)"),Qso=l(),np=a("li"),Hoe=a("strong"),Wso=o("camembert"),Hso=o(" \u2014 "),bB=a("a"),Uso=o("CamembertModel"),Jso=o(" (CamemBERT model)"),Yso=l(),sp=a("li"),Uoe=a("strong"),Kso=o("canine"),Zso=o(" \u2014 "),FB=a("a"),elo=o("CanineModel"),olo=o(" (Canine model)"),rlo=l(),lp=a("li"),Joe=a("strong"),tlo=o("clip"),alo=o(" \u2014 "),vB=a("a"),nlo=o("CLIPModel"),slo=o(" (CLIP model)"),llo=l(),ip=a("li"),Yoe=a("strong"),ilo=o("convbert"),dlo=o(" \u2014 "),TB=a("a"),clo=o("ConvBertModel"),flo=o(" (ConvBERT model)"),mlo=l(),dp=a("li"),Koe=a("strong"),glo=o("convnext"),hlo=o(" \u2014 "),MB=a("a"),plo=o("ConvNextModel"),_lo=o(" (ConvNext model)"),ulo=l(),cp=a("li"),Zoe=a("strong"),blo=o("ctrl"),Flo=o(" \u2014 "),EB=a("a"),vlo=o("CTRLModel"),Tlo=o(" (CTRL model)"),Mlo=l(),fp=a("li"),ere=a("strong"),Elo=o("data2vec-audio"),Clo=o(" \u2014 "),CB=a("a"),wlo=o("Data2VecAudioModel"),Alo=o(" (Data2VecAudio model)"),ylo=l(),mp=a("li"),ore=a("strong"),Llo=o("data2vec-text"),xlo=o(" \u2014 "),wB=a("a"),klo=o("Data2VecTextModel"),Slo=o(" (Data2VecText model)"),Rlo=l(),gp=a("li"),rre=a("strong"),Blo=o("deberta"),Plo=o(" \u2014 "),AB=a("a"),$lo=o("DebertaModel"),Ilo=o(" (DeBERTa model)"),qlo=l(),hp=a("li"),tre=a("strong"),Nlo=o("deberta-v2"),jlo=o(" \u2014 "),yB=a("a"),Dlo=o("DebertaV2Model"),Glo=o(" (DeBERTa-v2 model)"),Olo=l(),pp=a("li"),are=a("strong"),Vlo=o("decision_transformer"),Xlo=o(" \u2014 "),LB=a("a"),zlo=o("DecisionTransformerModel"),Qlo=o(" (Decision Transformer model)"),Wlo=l(),_p=a("li"),nre=a("strong"),Hlo=o("deit"),Ulo=o(" \u2014 "),xB=a("a"),Jlo=o("DeiTModel"),Ylo=o(" (DeiT model)"),Klo=l(),up=a("li"),sre=a("strong"),Zlo=o("detr"),eio=o(" \u2014 "),kB=a("a"),oio=o("DetrModel"),rio=o(" (DETR model)"),tio=l(),bp=a("li"),lre=a("strong"),aio=o("distilbert"),nio=o(" \u2014 "),SB=a("a"),sio=o("DistilBertModel"),lio=o(" (DistilBERT model)"),iio=l(),Fp=a("li"),ire=a("strong"),dio=o("dpr"),cio=o(" \u2014 "),RB=a("a"),fio=o("DPRQuestionEncoder"),mio=o(" (DPR model)"),gio=l(),vp=a("li"),dre=a("strong"),hio=o("dpt"),pio=o(" \u2014 "),BB=a("a"),_io=o("DPTModel"),uio=o(" (DPT model)"),bio=l(),Tp=a("li"),cre=a("strong"),Fio=o("electra"),vio=o(" \u2014 "),PB=a("a"),Tio=o("ElectraModel"),Mio=o(" (ELECTRA model)"),Eio=l(),Mp=a("li"),fre=a("strong"),Cio=o("flaubert"),wio=o(" \u2014 "),$B=a("a"),Aio=o("FlaubertModel"),yio=o(" (FlauBERT model)"),Lio=l(),Ep=a("li"),mre=a("strong"),xio=o("fnet"),kio=o(" \u2014 "),IB=a("a"),Sio=o("FNetModel"),Rio=o(" (FNet model)"),Bio=l(),Cp=a("li"),gre=a("strong"),Pio=o("fsmt"),$io=o(" \u2014 "),qB=a("a"),Iio=o("FSMTModel"),qio=o(" (FairSeq Machine-Translation model)"),Nio=l(),js=a("li"),hre=a("strong"),jio=o("funnel"),Dio=o(" \u2014 "),NB=a("a"),Gio=o("FunnelModel"),Oio=o(" or "),jB=a("a"),Vio=o("FunnelBaseModel"),Xio=o(" (Funnel Transformer model)"),zio=l(),wp=a("li"),pre=a("strong"),Qio=o("glpn"),Wio=o(" \u2014 "),DB=a("a"),Hio=o("GLPNModel"),Uio=o(" (GLPN model)"),Jio=l(),Ap=a("li"),_re=a("strong"),Yio=o("gpt2"),Kio=o(" \u2014 "),GB=a("a"),Zio=o("GPT2Model"),edo=o(" (OpenAI GPT-2 model)"),odo=l(),yp=a("li"),ure=a("strong"),rdo=o("gpt_neo"),tdo=o(" \u2014 "),OB=a("a"),ado=o("GPTNeoModel"),ndo=o(" (GPT Neo model)"),sdo=l(),Lp=a("li"),bre=a("strong"),ldo=o("gptj"),ido=o(" \u2014 "),VB=a("a"),ddo=o("GPTJModel"),cdo=o(" (GPT-J model)"),fdo=l(),xp=a("li"),Fre=a("strong"),mdo=o("hubert"),gdo=o(" \u2014 "),XB=a("a"),hdo=o("HubertModel"),pdo=o(" (Hubert model)"),_do=l(),kp=a("li"),vre=a("strong"),udo=o("ibert"),bdo=o(" \u2014 "),zB=a("a"),Fdo=o("IBertModel"),vdo=o(" (I-BERT model)"),Tdo=l(),Sp=a("li"),Tre=a("strong"),Mdo=o("imagegpt"),Edo=o(" \u2014 "),QB=a("a"),Cdo=o("ImageGPTModel"),wdo=o(" (ImageGPT model)"),Ado=l(),Rp=a("li"),Mre=a("strong"),ydo=o("layoutlm"),Ldo=o(" \u2014 "),WB=a("a"),xdo=o("LayoutLMModel"),kdo=o(" (LayoutLM model)"),Sdo=l(),Bp=a("li"),Ere=a("strong"),Rdo=o("layoutlmv2"),Bdo=o(" \u2014 "),HB=a("a"),Pdo=o("LayoutLMv2Model"),$do=o(" (LayoutLMv2 model)"),Ido=l(),Pp=a("li"),Cre=a("strong"),qdo=o("led"),Ndo=o(" \u2014 "),UB=a("a"),jdo=o("LEDModel"),Ddo=o(" (LED model)"),Gdo=l(),$p=a("li"),wre=a("strong"),Odo=o("longformer"),Vdo=o(" \u2014 "),JB=a("a"),Xdo=o("LongformerModel"),zdo=o(" (Longformer model)"),Qdo=l(),Ip=a("li"),Are=a("strong"),Wdo=o("luke"),Hdo=o(" \u2014 "),YB=a("a"),Udo=o("LukeModel"),Jdo=o(" (LUKE model)"),Ydo=l(),qp=a("li"),yre=a("strong"),Kdo=o("lxmert"),Zdo=o(" \u2014 "),KB=a("a"),eco=o("LxmertModel"),oco=o(" (LXMERT model)"),rco=l(),Np=a("li"),Lre=a("strong"),tco=o("m2m_100"),aco=o(" \u2014 "),ZB=a("a"),nco=o("M2M100Model"),sco=o(" (M2M100 model)"),lco=l(),jp=a("li"),xre=a("strong"),ico=o("marian"),dco=o(" \u2014 "),eP=a("a"),cco=o("MarianModel"),fco=o(" (Marian model)"),mco=l(),Dp=a("li"),kre=a("strong"),gco=o("maskformer"),hco=o(" \u2014 "),oP=a("a"),pco=o("MaskFormerModel"),_co=o(" (MaskFormer model)"),uco=l(),Gp=a("li"),Sre=a("strong"),bco=o("mbart"),Fco=o(" \u2014 "),rP=a("a"),vco=o("MBartModel"),Tco=o(" (mBART model)"),Mco=l(),Op=a("li"),Rre=a("strong"),Eco=o("megatron-bert"),Cco=o(" \u2014 "),tP=a("a"),wco=o("MegatronBertModel"),Aco=o(" (MegatronBert model)"),yco=l(),Vp=a("li"),Bre=a("strong"),Lco=o("mobilebert"),xco=o(" \u2014 "),aP=a("a"),kco=o("MobileBertModel"),Sco=o(" (MobileBERT model)"),Rco=l(),Xp=a("li"),Pre=a("strong"),Bco=o("mpnet"),Pco=o(" \u2014 "),nP=a("a"),$co=o("MPNetModel"),Ico=o(" (MPNet model)"),qco=l(),zp=a("li"),$re=a("strong"),Nco=o("mt5"),jco=o(" \u2014 "),sP=a("a"),Dco=o("MT5Model"),Gco=o(" (mT5 model)"),Oco=l(),Qp=a("li"),Ire=a("strong"),Vco=o("nystromformer"),Xco=o(" \u2014 "),lP=a("a"),zco=o("NystromformerModel"),Qco=o(" (Nystromformer model)"),Wco=l(),Wp=a("li"),qre=a("strong"),Hco=o("openai-gpt"),Uco=o(" \u2014 "),iP=a("a"),Jco=o("OpenAIGPTModel"),Yco=o(" (OpenAI GPT model)"),Kco=l(),Hp=a("li"),Nre=a("strong"),Zco=o("pegasus"),efo=o(" \u2014 "),dP=a("a"),ofo=o("PegasusModel"),rfo=o(" (Pegasus model)"),tfo=l(),Up=a("li"),jre=a("strong"),afo=o("perceiver"),nfo=o(" \u2014 "),cP=a("a"),sfo=o("PerceiverModel"),lfo=o(" (Perceiver model)"),ifo=l(),Jp=a("li"),Dre=a("strong"),dfo=o("plbart"),cfo=o(" \u2014 "),fP=a("a"),ffo=o("PLBartModel"),mfo=o(" (PLBart model)"),gfo=l(),Yp=a("li"),Gre=a("strong"),hfo=o("poolformer"),pfo=o(" \u2014 "),mP=a("a"),_fo=o("PoolFormerModel"),ufo=o(" (PoolFormer model)"),bfo=l(),Kp=a("li"),Ore=a("strong"),Ffo=o("prophetnet"),vfo=o(" \u2014 "),gP=a("a"),Tfo=o("ProphetNetModel"),Mfo=o(" (ProphetNet model)"),Efo=l(),Zp=a("li"),Vre=a("strong"),Cfo=o("qdqbert"),wfo=o(" \u2014 "),hP=a("a"),Afo=o("QDQBertModel"),yfo=o(" (QDQBert model)"),Lfo=l(),e_=a("li"),Xre=a("strong"),xfo=o("reformer"),kfo=o(" \u2014 "),pP=a("a"),Sfo=o("ReformerModel"),Rfo=o(" (Reformer model)"),Bfo=l(),o_=a("li"),zre=a("strong"),Pfo=o("regnet"),$fo=o(" \u2014 "),_P=a("a"),Ifo=o("RegNetModel"),qfo=o(" (RegNet model)"),Nfo=l(),r_=a("li"),Qre=a("strong"),jfo=o("rembert"),Dfo=o(" \u2014 "),uP=a("a"),Gfo=o("RemBertModel"),Ofo=o(" (RemBERT model)"),Vfo=l(),t_=a("li"),Wre=a("strong"),Xfo=o("resnet"),zfo=o(" \u2014 "),bP=a("a"),Qfo=o("ResNetModel"),Wfo=o(" (ResNet model)"),Hfo=l(),a_=a("li"),Hre=a("strong"),Ufo=o("retribert"),Jfo=o(" \u2014 "),FP=a("a"),Yfo=o("RetriBertModel"),Kfo=o(" (RetriBERT model)"),Zfo=l(),n_=a("li"),Ure=a("strong"),emo=o("roberta"),omo=o(" \u2014 "),vP=a("a"),rmo=o("RobertaModel"),tmo=o(" (RoBERTa model)"),amo=l(),s_=a("li"),Jre=a("strong"),nmo=o("roformer"),smo=o(" \u2014 "),TP=a("a"),lmo=o("RoFormerModel"),imo=o(" (RoFormer model)"),dmo=l(),l_=a("li"),Yre=a("strong"),cmo=o("segformer"),fmo=o(" \u2014 "),MP=a("a"),mmo=o("SegformerModel"),gmo=o(" (SegFormer model)"),hmo=l(),i_=a("li"),Kre=a("strong"),pmo=o("sew"),_mo=o(" \u2014 "),EP=a("a"),umo=o("SEWModel"),bmo=o(" (SEW model)"),Fmo=l(),d_=a("li"),Zre=a("strong"),vmo=o("sew-d"),Tmo=o(" \u2014 "),CP=a("a"),Mmo=o("SEWDModel"),Emo=o(" (SEW-D model)"),Cmo=l(),c_=a("li"),ete=a("strong"),wmo=o("speech_to_text"),Amo=o(" \u2014 "),wP=a("a"),ymo=o("Speech2TextModel"),Lmo=o(" (Speech2Text model)"),xmo=l(),f_=a("li"),ote=a("strong"),kmo=o("splinter"),Smo=o(" \u2014 "),AP=a("a"),Rmo=o("SplinterModel"),Bmo=o(" (Splinter model)"),Pmo=l(),m_=a("li"),rte=a("strong"),$mo=o("squeezebert"),Imo=o(" \u2014 "),yP=a("a"),qmo=o("SqueezeBertModel"),Nmo=o(" (SqueezeBERT model)"),jmo=l(),g_=a("li"),tte=a("strong"),Dmo=o("swin"),Gmo=o(" \u2014 "),LP=a("a"),Omo=o("SwinModel"),Vmo=o(" (Swin model)"),Xmo=l(),h_=a("li"),ate=a("strong"),zmo=o("t5"),Qmo=o(" \u2014 "),xP=a("a"),Wmo=o("T5Model"),Hmo=o(" (T5 model)"),Umo=l(),p_=a("li"),nte=a("strong"),Jmo=o("tapas"),Ymo=o(" \u2014 "),kP=a("a"),Kmo=o("TapasModel"),Zmo=o(" (TAPAS model)"),ego=l(),__=a("li"),ste=a("strong"),ogo=o("transfo-xl"),rgo=o(" \u2014 "),SP=a("a"),tgo=o("TransfoXLModel"),ago=o(" (Transformer-XL model)"),ngo=l(),u_=a("li"),lte=a("strong"),sgo=o("unispeech"),lgo=o(" \u2014 "),RP=a("a"),igo=o("UniSpeechModel"),dgo=o(" (UniSpeech model)"),cgo=l(),b_=a("li"),ite=a("strong"),fgo=o("unispeech-sat"),mgo=o(" \u2014 "),BP=a("a"),ggo=o("UniSpeechSatModel"),hgo=o(" (UniSpeechSat model)"),pgo=l(),F_=a("li"),dte=a("strong"),_go=o("van"),ugo=o(" \u2014 "),PP=a("a"),bgo=o("VanModel"),Fgo=o(" (VAN model)"),vgo=l(),v_=a("li"),cte=a("strong"),Tgo=o("vilt"),Mgo=o(" \u2014 "),$P=a("a"),Ego=o("ViltModel"),Cgo=o(" (ViLT model)"),wgo=l(),T_=a("li"),fte=a("strong"),Ago=o("vision-text-dual-encoder"),ygo=o(" \u2014 "),IP=a("a"),Lgo=o("VisionTextDualEncoderModel"),xgo=o(" (VisionTextDualEncoder model)"),kgo=l(),M_=a("li"),mte=a("strong"),Sgo=o("visual_bert"),Rgo=o(" \u2014 "),qP=a("a"),Bgo=o("VisualBertModel"),Pgo=o(" (VisualBert model)"),$go=l(),E_=a("li"),gte=a("strong"),Igo=o("vit"),qgo=o(" \u2014 "),NP=a("a"),Ngo=o("ViTModel"),jgo=o(" (ViT model)"),Dgo=l(),C_=a("li"),hte=a("strong"),Ggo=o("vit_mae"),Ogo=o(" \u2014 "),jP=a("a"),Vgo=o("ViTMAEModel"),Xgo=o(" (ViTMAE model)"),zgo=l(),w_=a("li"),pte=a("strong"),Qgo=o("wav2vec2"),Wgo=o(" \u2014 "),DP=a("a"),Hgo=o("Wav2Vec2Model"),Ugo=o(" (Wav2Vec2 model)"),Jgo=l(),A_=a("li"),_te=a("strong"),Ygo=o("wavlm"),Kgo=o(" \u2014 "),GP=a("a"),Zgo=o("WavLMModel"),eho=o(" (WavLM model)"),oho=l(),y_=a("li"),ute=a("strong"),rho=o("xglm"),tho=o(" \u2014 "),OP=a("a"),aho=o("XGLMModel"),nho=o(" (XGLM model)"),sho=l(),L_=a("li"),bte=a("strong"),lho=o("xlm"),iho=o(" \u2014 "),VP=a("a"),dho=o("XLMModel"),cho=o(" (XLM model)"),fho=l(),x_=a("li"),Fte=a("strong"),mho=o("xlm-prophetnet"),gho=o(" \u2014 "),XP=a("a"),hho=o("XLMProphetNetModel"),pho=o(" (XLMProphetNet model)"),_ho=l(),k_=a("li"),vte=a("strong"),uho=o("xlm-roberta"),bho=o(" \u2014 "),zP=a("a"),Fho=o("XLMRobertaModel"),vho=o(" (XLM-RoBERTa model)"),Tho=l(),S_=a("li"),Tte=a("strong"),Mho=o("xlm-roberta-xl"),Eho=o(" \u2014 "),QP=a("a"),Cho=o("XLMRobertaXLModel"),who=o(" (XLM-RoBERTa-XL model)"),Aho=l(),R_=a("li"),Mte=a("strong"),yho=o("xlnet"),Lho=o(" \u2014 "),WP=a("a"),xho=o("XLNetModel"),kho=o(" (XLNet model)"),Sho=l(),B_=a("li"),Ete=a("strong"),Rho=o("yoso"),Bho=o(" \u2014 "),HP=a("a"),Pho=o("YosoModel"),$ho=o(" (YOSO model)"),Iho=l(),P_=a("p"),qho=o("The model is set in evaluation mode by default using "),Cte=a("code"),Nho=o("model.eval()"),jho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wte=a("code"),Dho=o("model.train()"),Gho=l(),Ate=a("p"),Oho=o("Examples:"),Vho=l(),f(dw.$$.fragment),kRe=l(),Zi=a("h2"),$_=a("a"),yte=a("span"),f(cw.$$.fragment),Xho=l(),Lte=a("span"),zho=o("AutoModelForPreTraining"),SRe=l(),Yo=a("div"),f(fw.$$.fragment),Qho=l(),ed=a("p"),Who=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UP=a("a"),Hho=o("from_pretrained()"),Uho=o(" class method or the "),JP=a("a"),Jho=o("from_config()"),Yho=o(` class
method.`),Kho=l(),mw=a("p"),Zho=o("This class cannot be instantiated directly using "),xte=a("code"),epo=o("__init__()"),opo=o(" (throws an error)."),rpo=l(),zr=a("div"),f(gw.$$.fragment),tpo=l(),kte=a("p"),apo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),npo=l(),od=a("p"),spo=o(`Note:
Loading a model from its configuration file does `),Ste=a("strong"),lpo=o("not"),ipo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YP=a("a"),dpo=o("from_pretrained()"),cpo=o(" to load the model weights."),fpo=l(),Rte=a("p"),mpo=o("Examples:"),gpo=l(),f(hw.$$.fragment),hpo=l(),Ne=a("div"),f(pw.$$.fragment),ppo=l(),Bte=a("p"),_po=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),upo=l(),za=a("p"),bpo=o("The model class to instantiate is selected based on the "),Pte=a("code"),Fpo=o("model_type"),vpo=o(` property of the config object (either
passed as an argument or loaded from `),$te=a("code"),Tpo=o("pretrained_model_name_or_path"),Mpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ite=a("code"),Epo=o("pretrained_model_name_or_path"),Cpo=o(":"),wpo=l(),S=a("ul"),I_=a("li"),qte=a("strong"),Apo=o("albert"),ypo=o(" \u2014 "),KP=a("a"),Lpo=o("AlbertForPreTraining"),xpo=o(" (ALBERT model)"),kpo=l(),q_=a("li"),Nte=a("strong"),Spo=o("bart"),Rpo=o(" \u2014 "),ZP=a("a"),Bpo=o("BartForConditionalGeneration"),Ppo=o(" (BART model)"),$po=l(),N_=a("li"),jte=a("strong"),Ipo=o("bert"),qpo=o(" \u2014 "),e$=a("a"),Npo=o("BertForPreTraining"),jpo=o(" (BERT model)"),Dpo=l(),j_=a("li"),Dte=a("strong"),Gpo=o("big_bird"),Opo=o(" \u2014 "),o$=a("a"),Vpo=o("BigBirdForPreTraining"),Xpo=o(" (BigBird model)"),zpo=l(),D_=a("li"),Gte=a("strong"),Qpo=o("camembert"),Wpo=o(" \u2014 "),r$=a("a"),Hpo=o("CamembertForMaskedLM"),Upo=o(" (CamemBERT model)"),Jpo=l(),G_=a("li"),Ote=a("strong"),Ypo=o("ctrl"),Kpo=o(" \u2014 "),t$=a("a"),Zpo=o("CTRLLMHeadModel"),e_o=o(" (CTRL model)"),o_o=l(),O_=a("li"),Vte=a("strong"),r_o=o("data2vec-text"),t_o=o(" \u2014 "),a$=a("a"),a_o=o("Data2VecTextForMaskedLM"),n_o=o(" (Data2VecText model)"),s_o=l(),V_=a("li"),Xte=a("strong"),l_o=o("deberta"),i_o=o(" \u2014 "),n$=a("a"),d_o=o("DebertaForMaskedLM"),c_o=o(" (DeBERTa model)"),f_o=l(),X_=a("li"),zte=a("strong"),m_o=o("deberta-v2"),g_o=o(" \u2014 "),s$=a("a"),h_o=o("DebertaV2ForMaskedLM"),p_o=o(" (DeBERTa-v2 model)"),__o=l(),z_=a("li"),Qte=a("strong"),u_o=o("distilbert"),b_o=o(" \u2014 "),l$=a("a"),F_o=o("DistilBertForMaskedLM"),v_o=o(" (DistilBERT model)"),T_o=l(),Q_=a("li"),Wte=a("strong"),M_o=o("electra"),E_o=o(" \u2014 "),i$=a("a"),C_o=o("ElectraForPreTraining"),w_o=o(" (ELECTRA model)"),A_o=l(),W_=a("li"),Hte=a("strong"),y_o=o("flaubert"),L_o=o(" \u2014 "),d$=a("a"),x_o=o("FlaubertWithLMHeadModel"),k_o=o(" (FlauBERT model)"),S_o=l(),H_=a("li"),Ute=a("strong"),R_o=o("fnet"),B_o=o(" \u2014 "),c$=a("a"),P_o=o("FNetForPreTraining"),$_o=o(" (FNet model)"),I_o=l(),U_=a("li"),Jte=a("strong"),q_o=o("fsmt"),N_o=o(" \u2014 "),f$=a("a"),j_o=o("FSMTForConditionalGeneration"),D_o=o(" (FairSeq Machine-Translation model)"),G_o=l(),J_=a("li"),Yte=a("strong"),O_o=o("funnel"),V_o=o(" \u2014 "),m$=a("a"),X_o=o("FunnelForPreTraining"),z_o=o(" (Funnel Transformer model)"),Q_o=l(),Y_=a("li"),Kte=a("strong"),W_o=o("gpt2"),H_o=o(" \u2014 "),g$=a("a"),U_o=o("GPT2LMHeadModel"),J_o=o(" (OpenAI GPT-2 model)"),Y_o=l(),K_=a("li"),Zte=a("strong"),K_o=o("ibert"),Z_o=o(" \u2014 "),h$=a("a"),euo=o("IBertForMaskedLM"),ouo=o(" (I-BERT model)"),ruo=l(),Z_=a("li"),eae=a("strong"),tuo=o("layoutlm"),auo=o(" \u2014 "),p$=a("a"),nuo=o("LayoutLMForMaskedLM"),suo=o(" (LayoutLM model)"),luo=l(),eu=a("li"),oae=a("strong"),iuo=o("longformer"),duo=o(" \u2014 "),_$=a("a"),cuo=o("LongformerForMaskedLM"),fuo=o(" (Longformer model)"),muo=l(),ou=a("li"),rae=a("strong"),guo=o("lxmert"),huo=o(" \u2014 "),u$=a("a"),puo=o("LxmertForPreTraining"),_uo=o(" (LXMERT model)"),uuo=l(),ru=a("li"),tae=a("strong"),buo=o("megatron-bert"),Fuo=o(" \u2014 "),b$=a("a"),vuo=o("MegatronBertForPreTraining"),Tuo=o(" (MegatronBert model)"),Muo=l(),tu=a("li"),aae=a("strong"),Euo=o("mobilebert"),Cuo=o(" \u2014 "),F$=a("a"),wuo=o("MobileBertForPreTraining"),Auo=o(" (MobileBERT model)"),yuo=l(),au=a("li"),nae=a("strong"),Luo=o("mpnet"),xuo=o(" \u2014 "),v$=a("a"),kuo=o("MPNetForMaskedLM"),Suo=o(" (MPNet model)"),Ruo=l(),nu=a("li"),sae=a("strong"),Buo=o("openai-gpt"),Puo=o(" \u2014 "),T$=a("a"),$uo=o("OpenAIGPTLMHeadModel"),Iuo=o(" (OpenAI GPT model)"),quo=l(),su=a("li"),lae=a("strong"),Nuo=o("retribert"),juo=o(" \u2014 "),M$=a("a"),Duo=o("RetriBertModel"),Guo=o(" (RetriBERT model)"),Ouo=l(),lu=a("li"),iae=a("strong"),Vuo=o("roberta"),Xuo=o(" \u2014 "),E$=a("a"),zuo=o("RobertaForMaskedLM"),Quo=o(" (RoBERTa model)"),Wuo=l(),iu=a("li"),dae=a("strong"),Huo=o("squeezebert"),Uuo=o(" \u2014 "),C$=a("a"),Juo=o("SqueezeBertForMaskedLM"),Yuo=o(" (SqueezeBERT model)"),Kuo=l(),du=a("li"),cae=a("strong"),Zuo=o("t5"),e2o=o(" \u2014 "),w$=a("a"),o2o=o("T5ForConditionalGeneration"),r2o=o(" (T5 model)"),t2o=l(),cu=a("li"),fae=a("strong"),a2o=o("tapas"),n2o=o(" \u2014 "),A$=a("a"),s2o=o("TapasForMaskedLM"),l2o=o(" (TAPAS model)"),i2o=l(),fu=a("li"),mae=a("strong"),d2o=o("transfo-xl"),c2o=o(" \u2014 "),y$=a("a"),f2o=o("TransfoXLLMHeadModel"),m2o=o(" (Transformer-XL model)"),g2o=l(),mu=a("li"),gae=a("strong"),h2o=o("unispeech"),p2o=o(" \u2014 "),L$=a("a"),_2o=o("UniSpeechForPreTraining"),u2o=o(" (UniSpeech model)"),b2o=l(),gu=a("li"),hae=a("strong"),F2o=o("unispeech-sat"),v2o=o(" \u2014 "),x$=a("a"),T2o=o("UniSpeechSatForPreTraining"),M2o=o(" (UniSpeechSat model)"),E2o=l(),hu=a("li"),pae=a("strong"),C2o=o("visual_bert"),w2o=o(" \u2014 "),k$=a("a"),A2o=o("VisualBertForPreTraining"),y2o=o(" (VisualBert model)"),L2o=l(),pu=a("li"),_ae=a("strong"),x2o=o("vit_mae"),k2o=o(" \u2014 "),S$=a("a"),S2o=o("ViTMAEForPreTraining"),R2o=o(" (ViTMAE model)"),B2o=l(),_u=a("li"),uae=a("strong"),P2o=o("wav2vec2"),$2o=o(" \u2014 "),R$=a("a"),I2o=o("Wav2Vec2ForPreTraining"),q2o=o(" (Wav2Vec2 model)"),N2o=l(),uu=a("li"),bae=a("strong"),j2o=o("xlm"),D2o=o(" \u2014 "),B$=a("a"),G2o=o("XLMWithLMHeadModel"),O2o=o(" (XLM model)"),V2o=l(),bu=a("li"),Fae=a("strong"),X2o=o("xlm-roberta"),z2o=o(" \u2014 "),P$=a("a"),Q2o=o("XLMRobertaForMaskedLM"),W2o=o(" (XLM-RoBERTa model)"),H2o=l(),Fu=a("li"),vae=a("strong"),U2o=o("xlm-roberta-xl"),J2o=o(" \u2014 "),$$=a("a"),Y2o=o("XLMRobertaXLForMaskedLM"),K2o=o(" (XLM-RoBERTa-XL model)"),Z2o=l(),vu=a("li"),Tae=a("strong"),e1o=o("xlnet"),o1o=o(" \u2014 "),I$=a("a"),r1o=o("XLNetLMHeadModel"),t1o=o(" (XLNet model)"),a1o=l(),Tu=a("p"),n1o=o("The model is set in evaluation mode by default using "),Mae=a("code"),s1o=o("model.eval()"),l1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eae=a("code"),i1o=o("model.train()"),d1o=l(),Cae=a("p"),c1o=o("Examples:"),f1o=l(),f(_w.$$.fragment),RRe=l(),rd=a("h2"),Mu=a("a"),wae=a("span"),f(uw.$$.fragment),m1o=l(),Aae=a("span"),g1o=o("AutoModelForCausalLM"),BRe=l(),Ko=a("div"),f(bw.$$.fragment),h1o=l(),td=a("p"),p1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),q$=a("a"),_1o=o("from_pretrained()"),u1o=o(" class method or the "),N$=a("a"),b1o=o("from_config()"),F1o=o(` class
method.`),v1o=l(),Fw=a("p"),T1o=o("This class cannot be instantiated directly using "),yae=a("code"),M1o=o("__init__()"),E1o=o(" (throws an error)."),C1o=l(),Qr=a("div"),f(vw.$$.fragment),w1o=l(),Lae=a("p"),A1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y1o=l(),ad=a("p"),L1o=o(`Note:
Loading a model from its configuration file does `),xae=a("strong"),x1o=o("not"),k1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),j$=a("a"),S1o=o("from_pretrained()"),R1o=o(" to load the model weights."),B1o=l(),kae=a("p"),P1o=o("Examples:"),$1o=l(),f(Tw.$$.fragment),I1o=l(),je=a("div"),f(Mw.$$.fragment),q1o=l(),Sae=a("p"),N1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),j1o=l(),Qa=a("p"),D1o=o("The model class to instantiate is selected based on the "),Rae=a("code"),G1o=o("model_type"),O1o=o(` property of the config object (either
passed as an argument or loaded from `),Bae=a("code"),V1o=o("pretrained_model_name_or_path"),X1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pae=a("code"),z1o=o("pretrained_model_name_or_path"),Q1o=o(":"),W1o=l(),$=a("ul"),Eu=a("li"),$ae=a("strong"),H1o=o("bart"),U1o=o(" \u2014 "),D$=a("a"),J1o=o("BartForCausalLM"),Y1o=o(" (BART model)"),K1o=l(),Cu=a("li"),Iae=a("strong"),Z1o=o("bert"),ebo=o(" \u2014 "),G$=a("a"),obo=o("BertLMHeadModel"),rbo=o(" (BERT model)"),tbo=l(),wu=a("li"),qae=a("strong"),abo=o("bert-generation"),nbo=o(" \u2014 "),O$=a("a"),sbo=o("BertGenerationDecoder"),lbo=o(" (Bert Generation model)"),ibo=l(),Au=a("li"),Nae=a("strong"),dbo=o("big_bird"),cbo=o(" \u2014 "),V$=a("a"),fbo=o("BigBirdForCausalLM"),mbo=o(" (BigBird model)"),gbo=l(),yu=a("li"),jae=a("strong"),hbo=o("bigbird_pegasus"),pbo=o(" \u2014 "),X$=a("a"),_bo=o("BigBirdPegasusForCausalLM"),ubo=o(" (BigBirdPegasus model)"),bbo=l(),Lu=a("li"),Dae=a("strong"),Fbo=o("blenderbot"),vbo=o(" \u2014 "),z$=a("a"),Tbo=o("BlenderbotForCausalLM"),Mbo=o(" (Blenderbot model)"),Ebo=l(),xu=a("li"),Gae=a("strong"),Cbo=o("blenderbot-small"),wbo=o(" \u2014 "),Q$=a("a"),Abo=o("BlenderbotSmallForCausalLM"),ybo=o(" (BlenderbotSmall model)"),Lbo=l(),ku=a("li"),Oae=a("strong"),xbo=o("camembert"),kbo=o(" \u2014 "),W$=a("a"),Sbo=o("CamembertForCausalLM"),Rbo=o(" (CamemBERT model)"),Bbo=l(),Su=a("li"),Vae=a("strong"),Pbo=o("ctrl"),$bo=o(" \u2014 "),H$=a("a"),Ibo=o("CTRLLMHeadModel"),qbo=o(" (CTRL model)"),Nbo=l(),Ru=a("li"),Xae=a("strong"),jbo=o("data2vec-text"),Dbo=o(" \u2014 "),U$=a("a"),Gbo=o("Data2VecTextForCausalLM"),Obo=o(" (Data2VecText model)"),Vbo=l(),Bu=a("li"),zae=a("strong"),Xbo=o("electra"),zbo=o(" \u2014 "),J$=a("a"),Qbo=o("ElectraForCausalLM"),Wbo=o(" (ELECTRA model)"),Hbo=l(),Pu=a("li"),Qae=a("strong"),Ubo=o("gpt2"),Jbo=o(" \u2014 "),Y$=a("a"),Ybo=o("GPT2LMHeadModel"),Kbo=o(" (OpenAI GPT-2 model)"),Zbo=l(),$u=a("li"),Wae=a("strong"),e5o=o("gpt_neo"),o5o=o(" \u2014 "),K$=a("a"),r5o=o("GPTNeoForCausalLM"),t5o=o(" (GPT Neo model)"),a5o=l(),Iu=a("li"),Hae=a("strong"),n5o=o("gptj"),s5o=o(" \u2014 "),Z$=a("a"),l5o=o("GPTJForCausalLM"),i5o=o(" (GPT-J model)"),d5o=l(),qu=a("li"),Uae=a("strong"),c5o=o("marian"),f5o=o(" \u2014 "),eI=a("a"),m5o=o("MarianForCausalLM"),g5o=o(" (Marian model)"),h5o=l(),Nu=a("li"),Jae=a("strong"),p5o=o("mbart"),_5o=o(" \u2014 "),oI=a("a"),u5o=o("MBartForCausalLM"),b5o=o(" (mBART model)"),F5o=l(),ju=a("li"),Yae=a("strong"),v5o=o("megatron-bert"),T5o=o(" \u2014 "),rI=a("a"),M5o=o("MegatronBertForCausalLM"),E5o=o(" (MegatronBert model)"),C5o=l(),Du=a("li"),Kae=a("strong"),w5o=o("openai-gpt"),A5o=o(" \u2014 "),tI=a("a"),y5o=o("OpenAIGPTLMHeadModel"),L5o=o(" (OpenAI GPT model)"),x5o=l(),Gu=a("li"),Zae=a("strong"),k5o=o("pegasus"),S5o=o(" \u2014 "),aI=a("a"),R5o=o("PegasusForCausalLM"),B5o=o(" (Pegasus model)"),P5o=l(),Ou=a("li"),ene=a("strong"),$5o=o("plbart"),I5o=o(" \u2014 "),nI=a("a"),q5o=o("PLBartForCausalLM"),N5o=o(" (PLBart model)"),j5o=l(),Vu=a("li"),one=a("strong"),D5o=o("prophetnet"),G5o=o(" \u2014 "),sI=a("a"),O5o=o("ProphetNetForCausalLM"),V5o=o(" (ProphetNet model)"),X5o=l(),Xu=a("li"),rne=a("strong"),z5o=o("qdqbert"),Q5o=o(" \u2014 "),lI=a("a"),W5o=o("QDQBertLMHeadModel"),H5o=o(" (QDQBert model)"),U5o=l(),zu=a("li"),tne=a("strong"),J5o=o("reformer"),Y5o=o(" \u2014 "),iI=a("a"),K5o=o("ReformerModelWithLMHead"),Z5o=o(" (Reformer model)"),eFo=l(),Qu=a("li"),ane=a("strong"),oFo=o("rembert"),rFo=o(" \u2014 "),dI=a("a"),tFo=o("RemBertForCausalLM"),aFo=o(" (RemBERT model)"),nFo=l(),Wu=a("li"),nne=a("strong"),sFo=o("roberta"),lFo=o(" \u2014 "),cI=a("a"),iFo=o("RobertaForCausalLM"),dFo=o(" (RoBERTa model)"),cFo=l(),Hu=a("li"),sne=a("strong"),fFo=o("roformer"),mFo=o(" \u2014 "),fI=a("a"),gFo=o("RoFormerForCausalLM"),hFo=o(" (RoFormer model)"),pFo=l(),Uu=a("li"),lne=a("strong"),_Fo=o("speech_to_text_2"),uFo=o(" \u2014 "),mI=a("a"),bFo=o("Speech2Text2ForCausalLM"),FFo=o(" (Speech2Text2 model)"),vFo=l(),Ju=a("li"),ine=a("strong"),TFo=o("transfo-xl"),MFo=o(" \u2014 "),gI=a("a"),EFo=o("TransfoXLLMHeadModel"),CFo=o(" (Transformer-XL model)"),wFo=l(),Yu=a("li"),dne=a("strong"),AFo=o("trocr"),yFo=o(" \u2014 "),hI=a("a"),LFo=o("TrOCRForCausalLM"),xFo=o(" (TrOCR model)"),kFo=l(),Ku=a("li"),cne=a("strong"),SFo=o("xglm"),RFo=o(" \u2014 "),pI=a("a"),BFo=o("XGLMForCausalLM"),PFo=o(" (XGLM model)"),$Fo=l(),Zu=a("li"),fne=a("strong"),IFo=o("xlm"),qFo=o(" \u2014 "),_I=a("a"),NFo=o("XLMWithLMHeadModel"),jFo=o(" (XLM model)"),DFo=l(),e2=a("li"),mne=a("strong"),GFo=o("xlm-prophetnet"),OFo=o(" \u2014 "),uI=a("a"),VFo=o("XLMProphetNetForCausalLM"),XFo=o(" (XLMProphetNet model)"),zFo=l(),o2=a("li"),gne=a("strong"),QFo=o("xlm-roberta"),WFo=o(" \u2014 "),bI=a("a"),HFo=o("XLMRobertaForCausalLM"),UFo=o(" (XLM-RoBERTa model)"),JFo=l(),r2=a("li"),hne=a("strong"),YFo=o("xlm-roberta-xl"),KFo=o(" \u2014 "),FI=a("a"),ZFo=o("XLMRobertaXLForCausalLM"),evo=o(" (XLM-RoBERTa-XL model)"),ovo=l(),t2=a("li"),pne=a("strong"),rvo=o("xlnet"),tvo=o(" \u2014 "),vI=a("a"),avo=o("XLNetLMHeadModel"),nvo=o(" (XLNet model)"),svo=l(),a2=a("p"),lvo=o("The model is set in evaluation mode by default using "),_ne=a("code"),ivo=o("model.eval()"),dvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),une=a("code"),cvo=o("model.train()"),fvo=l(),bne=a("p"),mvo=o("Examples:"),gvo=l(),f(Ew.$$.fragment),PRe=l(),nd=a("h2"),n2=a("a"),Fne=a("span"),f(Cw.$$.fragment),hvo=l(),vne=a("span"),pvo=o("AutoModelForMaskedLM"),$Re=l(),Zo=a("div"),f(ww.$$.fragment),_vo=l(),sd=a("p"),uvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TI=a("a"),bvo=o("from_pretrained()"),Fvo=o(" class method or the "),MI=a("a"),vvo=o("from_config()"),Tvo=o(` class
method.`),Mvo=l(),Aw=a("p"),Evo=o("This class cannot be instantiated directly using "),Tne=a("code"),Cvo=o("__init__()"),wvo=o(" (throws an error)."),Avo=l(),Wr=a("div"),f(yw.$$.fragment),yvo=l(),Mne=a("p"),Lvo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xvo=l(),ld=a("p"),kvo=o(`Note:
Loading a model from its configuration file does `),Ene=a("strong"),Svo=o("not"),Rvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EI=a("a"),Bvo=o("from_pretrained()"),Pvo=o(" to load the model weights."),$vo=l(),Cne=a("p"),Ivo=o("Examples:"),qvo=l(),f(Lw.$$.fragment),Nvo=l(),De=a("div"),f(xw.$$.fragment),jvo=l(),wne=a("p"),Dvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Gvo=l(),Wa=a("p"),Ovo=o("The model class to instantiate is selected based on the "),Ane=a("code"),Vvo=o("model_type"),Xvo=o(` property of the config object (either
passed as an argument or loaded from `),yne=a("code"),zvo=o("pretrained_model_name_or_path"),Qvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lne=a("code"),Wvo=o("pretrained_model_name_or_path"),Hvo=o(":"),Uvo=l(),I=a("ul"),s2=a("li"),xne=a("strong"),Jvo=o("albert"),Yvo=o(" \u2014 "),CI=a("a"),Kvo=o("AlbertForMaskedLM"),Zvo=o(" (ALBERT model)"),e6o=l(),l2=a("li"),kne=a("strong"),o6o=o("bart"),r6o=o(" \u2014 "),wI=a("a"),t6o=o("BartForConditionalGeneration"),a6o=o(" (BART model)"),n6o=l(),i2=a("li"),Sne=a("strong"),s6o=o("bert"),l6o=o(" \u2014 "),AI=a("a"),i6o=o("BertForMaskedLM"),d6o=o(" (BERT model)"),c6o=l(),d2=a("li"),Rne=a("strong"),f6o=o("big_bird"),m6o=o(" \u2014 "),yI=a("a"),g6o=o("BigBirdForMaskedLM"),h6o=o(" (BigBird model)"),p6o=l(),c2=a("li"),Bne=a("strong"),_6o=o("camembert"),u6o=o(" \u2014 "),LI=a("a"),b6o=o("CamembertForMaskedLM"),F6o=o(" (CamemBERT model)"),v6o=l(),f2=a("li"),Pne=a("strong"),T6o=o("convbert"),M6o=o(" \u2014 "),xI=a("a"),E6o=o("ConvBertForMaskedLM"),C6o=o(" (ConvBERT model)"),w6o=l(),m2=a("li"),$ne=a("strong"),A6o=o("data2vec-text"),y6o=o(" \u2014 "),kI=a("a"),L6o=o("Data2VecTextForMaskedLM"),x6o=o(" (Data2VecText model)"),k6o=l(),g2=a("li"),Ine=a("strong"),S6o=o("deberta"),R6o=o(" \u2014 "),SI=a("a"),B6o=o("DebertaForMaskedLM"),P6o=o(" (DeBERTa model)"),$6o=l(),h2=a("li"),qne=a("strong"),I6o=o("deberta-v2"),q6o=o(" \u2014 "),RI=a("a"),N6o=o("DebertaV2ForMaskedLM"),j6o=o(" (DeBERTa-v2 model)"),D6o=l(),p2=a("li"),Nne=a("strong"),G6o=o("distilbert"),O6o=o(" \u2014 "),BI=a("a"),V6o=o("DistilBertForMaskedLM"),X6o=o(" (DistilBERT model)"),z6o=l(),_2=a("li"),jne=a("strong"),Q6o=o("electra"),W6o=o(" \u2014 "),PI=a("a"),H6o=o("ElectraForMaskedLM"),U6o=o(" (ELECTRA model)"),J6o=l(),u2=a("li"),Dne=a("strong"),Y6o=o("flaubert"),K6o=o(" \u2014 "),$I=a("a"),Z6o=o("FlaubertWithLMHeadModel"),eTo=o(" (FlauBERT model)"),oTo=l(),b2=a("li"),Gne=a("strong"),rTo=o("fnet"),tTo=o(" \u2014 "),II=a("a"),aTo=o("FNetForMaskedLM"),nTo=o(" (FNet model)"),sTo=l(),F2=a("li"),One=a("strong"),lTo=o("funnel"),iTo=o(" \u2014 "),qI=a("a"),dTo=o("FunnelForMaskedLM"),cTo=o(" (Funnel Transformer model)"),fTo=l(),v2=a("li"),Vne=a("strong"),mTo=o("ibert"),gTo=o(" \u2014 "),NI=a("a"),hTo=o("IBertForMaskedLM"),pTo=o(" (I-BERT model)"),_To=l(),T2=a("li"),Xne=a("strong"),uTo=o("layoutlm"),bTo=o(" \u2014 "),jI=a("a"),FTo=o("LayoutLMForMaskedLM"),vTo=o(" (LayoutLM model)"),TTo=l(),M2=a("li"),zne=a("strong"),MTo=o("longformer"),ETo=o(" \u2014 "),DI=a("a"),CTo=o("LongformerForMaskedLM"),wTo=o(" (Longformer model)"),ATo=l(),E2=a("li"),Qne=a("strong"),yTo=o("mbart"),LTo=o(" \u2014 "),GI=a("a"),xTo=o("MBartForConditionalGeneration"),kTo=o(" (mBART model)"),STo=l(),C2=a("li"),Wne=a("strong"),RTo=o("megatron-bert"),BTo=o(" \u2014 "),OI=a("a"),PTo=o("MegatronBertForMaskedLM"),$To=o(" (MegatronBert model)"),ITo=l(),w2=a("li"),Hne=a("strong"),qTo=o("mobilebert"),NTo=o(" \u2014 "),VI=a("a"),jTo=o("MobileBertForMaskedLM"),DTo=o(" (MobileBERT model)"),GTo=l(),A2=a("li"),Une=a("strong"),OTo=o("mpnet"),VTo=o(" \u2014 "),XI=a("a"),XTo=o("MPNetForMaskedLM"),zTo=o(" (MPNet model)"),QTo=l(),y2=a("li"),Jne=a("strong"),WTo=o("nystromformer"),HTo=o(" \u2014 "),zI=a("a"),UTo=o("NystromformerForMaskedLM"),JTo=o(" (Nystromformer model)"),YTo=l(),L2=a("li"),Yne=a("strong"),KTo=o("perceiver"),ZTo=o(" \u2014 "),QI=a("a"),eMo=o("PerceiverForMaskedLM"),oMo=o(" (Perceiver model)"),rMo=l(),x2=a("li"),Kne=a("strong"),tMo=o("qdqbert"),aMo=o(" \u2014 "),WI=a("a"),nMo=o("QDQBertForMaskedLM"),sMo=o(" (QDQBert model)"),lMo=l(),k2=a("li"),Zne=a("strong"),iMo=o("reformer"),dMo=o(" \u2014 "),HI=a("a"),cMo=o("ReformerForMaskedLM"),fMo=o(" (Reformer model)"),mMo=l(),S2=a("li"),ese=a("strong"),gMo=o("rembert"),hMo=o(" \u2014 "),UI=a("a"),pMo=o("RemBertForMaskedLM"),_Mo=o(" (RemBERT model)"),uMo=l(),R2=a("li"),ose=a("strong"),bMo=o("roberta"),FMo=o(" \u2014 "),JI=a("a"),vMo=o("RobertaForMaskedLM"),TMo=o(" (RoBERTa model)"),MMo=l(),B2=a("li"),rse=a("strong"),EMo=o("roformer"),CMo=o(" \u2014 "),YI=a("a"),wMo=o("RoFormerForMaskedLM"),AMo=o(" (RoFormer model)"),yMo=l(),P2=a("li"),tse=a("strong"),LMo=o("squeezebert"),xMo=o(" \u2014 "),KI=a("a"),kMo=o("SqueezeBertForMaskedLM"),SMo=o(" (SqueezeBERT model)"),RMo=l(),$2=a("li"),ase=a("strong"),BMo=o("tapas"),PMo=o(" \u2014 "),ZI=a("a"),$Mo=o("TapasForMaskedLM"),IMo=o(" (TAPAS model)"),qMo=l(),I2=a("li"),nse=a("strong"),NMo=o("wav2vec2"),jMo=o(" \u2014 "),sse=a("code"),DMo=o("Wav2Vec2ForMaskedLM"),GMo=o(" (Wav2Vec2 model)"),OMo=l(),q2=a("li"),lse=a("strong"),VMo=o("xlm"),XMo=o(" \u2014 "),eq=a("a"),zMo=o("XLMWithLMHeadModel"),QMo=o(" (XLM model)"),WMo=l(),N2=a("li"),ise=a("strong"),HMo=o("xlm-roberta"),UMo=o(" \u2014 "),oq=a("a"),JMo=o("XLMRobertaForMaskedLM"),YMo=o(" (XLM-RoBERTa model)"),KMo=l(),j2=a("li"),dse=a("strong"),ZMo=o("xlm-roberta-xl"),e4o=o(" \u2014 "),rq=a("a"),o4o=o("XLMRobertaXLForMaskedLM"),r4o=o(" (XLM-RoBERTa-XL model)"),t4o=l(),D2=a("li"),cse=a("strong"),a4o=o("yoso"),n4o=o(" \u2014 "),tq=a("a"),s4o=o("YosoForMaskedLM"),l4o=o(" (YOSO model)"),i4o=l(),G2=a("p"),d4o=o("The model is set in evaluation mode by default using "),fse=a("code"),c4o=o("model.eval()"),f4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mse=a("code"),m4o=o("model.train()"),g4o=l(),gse=a("p"),h4o=o("Examples:"),p4o=l(),f(kw.$$.fragment),IRe=l(),id=a("h2"),O2=a("a"),hse=a("span"),f(Sw.$$.fragment),_4o=l(),pse=a("span"),u4o=o("AutoModelForSeq2SeqLM"),qRe=l(),er=a("div"),f(Rw.$$.fragment),b4o=l(),dd=a("p"),F4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aq=a("a"),v4o=o("from_pretrained()"),T4o=o(" class method or the "),nq=a("a"),M4o=o("from_config()"),E4o=o(` class
method.`),C4o=l(),Bw=a("p"),w4o=o("This class cannot be instantiated directly using "),_se=a("code"),A4o=o("__init__()"),y4o=o(" (throws an error)."),L4o=l(),Hr=a("div"),f(Pw.$$.fragment),x4o=l(),use=a("p"),k4o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),S4o=l(),cd=a("p"),R4o=o(`Note:
Loading a model from its configuration file does `),bse=a("strong"),B4o=o("not"),P4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sq=a("a"),$4o=o("from_pretrained()"),I4o=o(" to load the model weights."),q4o=l(),Fse=a("p"),N4o=o("Examples:"),j4o=l(),f($w.$$.fragment),D4o=l(),Ge=a("div"),f(Iw.$$.fragment),G4o=l(),vse=a("p"),O4o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V4o=l(),Ha=a("p"),X4o=o("The model class to instantiate is selected based on the "),Tse=a("code"),z4o=o("model_type"),Q4o=o(` property of the config object (either
passed as an argument or loaded from `),Mse=a("code"),W4o=o("pretrained_model_name_or_path"),H4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ese=a("code"),U4o=o("pretrained_model_name_or_path"),J4o=o(":"),Y4o=l(),ne=a("ul"),V2=a("li"),Cse=a("strong"),K4o=o("bart"),Z4o=o(" \u2014 "),lq=a("a"),eEo=o("BartForConditionalGeneration"),oEo=o(" (BART model)"),rEo=l(),X2=a("li"),wse=a("strong"),tEo=o("bigbird_pegasus"),aEo=o(" \u2014 "),iq=a("a"),nEo=o("BigBirdPegasusForConditionalGeneration"),sEo=o(" (BigBirdPegasus model)"),lEo=l(),z2=a("li"),Ase=a("strong"),iEo=o("blenderbot"),dEo=o(" \u2014 "),dq=a("a"),cEo=o("BlenderbotForConditionalGeneration"),fEo=o(" (Blenderbot model)"),mEo=l(),Q2=a("li"),yse=a("strong"),gEo=o("blenderbot-small"),hEo=o(" \u2014 "),cq=a("a"),pEo=o("BlenderbotSmallForConditionalGeneration"),_Eo=o(" (BlenderbotSmall model)"),uEo=l(),W2=a("li"),Lse=a("strong"),bEo=o("encoder-decoder"),FEo=o(" \u2014 "),fq=a("a"),vEo=o("EncoderDecoderModel"),TEo=o(" (Encoder decoder model)"),MEo=l(),H2=a("li"),xse=a("strong"),EEo=o("fsmt"),CEo=o(" \u2014 "),mq=a("a"),wEo=o("FSMTForConditionalGeneration"),AEo=o(" (FairSeq Machine-Translation model)"),yEo=l(),U2=a("li"),kse=a("strong"),LEo=o("led"),xEo=o(" \u2014 "),gq=a("a"),kEo=o("LEDForConditionalGeneration"),SEo=o(" (LED model)"),REo=l(),J2=a("li"),Sse=a("strong"),BEo=o("m2m_100"),PEo=o(" \u2014 "),hq=a("a"),$Eo=o("M2M100ForConditionalGeneration"),IEo=o(" (M2M100 model)"),qEo=l(),Y2=a("li"),Rse=a("strong"),NEo=o("marian"),jEo=o(" \u2014 "),pq=a("a"),DEo=o("MarianMTModel"),GEo=o(" (Marian model)"),OEo=l(),K2=a("li"),Bse=a("strong"),VEo=o("mbart"),XEo=o(" \u2014 "),_q=a("a"),zEo=o("MBartForConditionalGeneration"),QEo=o(" (mBART model)"),WEo=l(),Z2=a("li"),Pse=a("strong"),HEo=o("mt5"),UEo=o(" \u2014 "),uq=a("a"),JEo=o("MT5ForConditionalGeneration"),YEo=o(" (mT5 model)"),KEo=l(),e1=a("li"),$se=a("strong"),ZEo=o("pegasus"),eCo=o(" \u2014 "),bq=a("a"),oCo=o("PegasusForConditionalGeneration"),rCo=o(" (Pegasus model)"),tCo=l(),o1=a("li"),Ise=a("strong"),aCo=o("plbart"),nCo=o(" \u2014 "),Fq=a("a"),sCo=o("PLBartForConditionalGeneration"),lCo=o(" (PLBart model)"),iCo=l(),r1=a("li"),qse=a("strong"),dCo=o("prophetnet"),cCo=o(" \u2014 "),vq=a("a"),fCo=o("ProphetNetForConditionalGeneration"),mCo=o(" (ProphetNet model)"),gCo=l(),t1=a("li"),Nse=a("strong"),hCo=o("t5"),pCo=o(" \u2014 "),Tq=a("a"),_Co=o("T5ForConditionalGeneration"),uCo=o(" (T5 model)"),bCo=l(),a1=a("li"),jse=a("strong"),FCo=o("tapex"),vCo=o(" \u2014 "),Mq=a("a"),TCo=o("BartForConditionalGeneration"),MCo=o(" (TAPEX model)"),ECo=l(),n1=a("li"),Dse=a("strong"),CCo=o("xlm-prophetnet"),wCo=o(" \u2014 "),Eq=a("a"),ACo=o("XLMProphetNetForConditionalGeneration"),yCo=o(" (XLMProphetNet model)"),LCo=l(),s1=a("p"),xCo=o("The model is set in evaluation mode by default using "),Gse=a("code"),kCo=o("model.eval()"),SCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ose=a("code"),RCo=o("model.train()"),BCo=l(),Vse=a("p"),PCo=o("Examples:"),$Co=l(),f(qw.$$.fragment),NRe=l(),fd=a("h2"),l1=a("a"),Xse=a("span"),f(Nw.$$.fragment),ICo=l(),zse=a("span"),qCo=o("AutoModelForSequenceClassification"),jRe=l(),or=a("div"),f(jw.$$.fragment),NCo=l(),md=a("p"),jCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cq=a("a"),DCo=o("from_pretrained()"),GCo=o(" class method or the "),wq=a("a"),OCo=o("from_config()"),VCo=o(` class
method.`),XCo=l(),Dw=a("p"),zCo=o("This class cannot be instantiated directly using "),Qse=a("code"),QCo=o("__init__()"),WCo=o(" (throws an error)."),HCo=l(),Ur=a("div"),f(Gw.$$.fragment),UCo=l(),Wse=a("p"),JCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YCo=l(),gd=a("p"),KCo=o(`Note:
Loading a model from its configuration file does `),Hse=a("strong"),ZCo=o("not"),e3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aq=a("a"),o3o=o("from_pretrained()"),r3o=o(" to load the model weights."),t3o=l(),Use=a("p"),a3o=o("Examples:"),n3o=l(),f(Ow.$$.fragment),s3o=l(),Oe=a("div"),f(Vw.$$.fragment),l3o=l(),Jse=a("p"),i3o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d3o=l(),Ua=a("p"),c3o=o("The model class to instantiate is selected based on the "),Yse=a("code"),f3o=o("model_type"),m3o=o(` property of the config object (either
passed as an argument or loaded from `),Kse=a("code"),g3o=o("pretrained_model_name_or_path"),h3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zse=a("code"),p3o=o("pretrained_model_name_or_path"),_3o=o(":"),u3o=l(),y=a("ul"),i1=a("li"),ele=a("strong"),b3o=o("albert"),F3o=o(" \u2014 "),yq=a("a"),v3o=o("AlbertForSequenceClassification"),T3o=o(" (ALBERT model)"),M3o=l(),d1=a("li"),ole=a("strong"),E3o=o("bart"),C3o=o(" \u2014 "),Lq=a("a"),w3o=o("BartForSequenceClassification"),A3o=o(" (BART model)"),y3o=l(),c1=a("li"),rle=a("strong"),L3o=o("bert"),x3o=o(" \u2014 "),xq=a("a"),k3o=o("BertForSequenceClassification"),S3o=o(" (BERT model)"),R3o=l(),f1=a("li"),tle=a("strong"),B3o=o("big_bird"),P3o=o(" \u2014 "),kq=a("a"),$3o=o("BigBirdForSequenceClassification"),I3o=o(" (BigBird model)"),q3o=l(),m1=a("li"),ale=a("strong"),N3o=o("bigbird_pegasus"),j3o=o(" \u2014 "),Sq=a("a"),D3o=o("BigBirdPegasusForSequenceClassification"),G3o=o(" (BigBirdPegasus model)"),O3o=l(),g1=a("li"),nle=a("strong"),V3o=o("camembert"),X3o=o(" \u2014 "),Rq=a("a"),z3o=o("CamembertForSequenceClassification"),Q3o=o(" (CamemBERT model)"),W3o=l(),h1=a("li"),sle=a("strong"),H3o=o("canine"),U3o=o(" \u2014 "),Bq=a("a"),J3o=o("CanineForSequenceClassification"),Y3o=o(" (Canine model)"),K3o=l(),p1=a("li"),lle=a("strong"),Z3o=o("convbert"),ewo=o(" \u2014 "),Pq=a("a"),owo=o("ConvBertForSequenceClassification"),rwo=o(" (ConvBERT model)"),two=l(),_1=a("li"),ile=a("strong"),awo=o("ctrl"),nwo=o(" \u2014 "),$q=a("a"),swo=o("CTRLForSequenceClassification"),lwo=o(" (CTRL model)"),iwo=l(),u1=a("li"),dle=a("strong"),dwo=o("data2vec-text"),cwo=o(" \u2014 "),Iq=a("a"),fwo=o("Data2VecTextForSequenceClassification"),mwo=o(" (Data2VecText model)"),gwo=l(),b1=a("li"),cle=a("strong"),hwo=o("deberta"),pwo=o(" \u2014 "),qq=a("a"),_wo=o("DebertaForSequenceClassification"),uwo=o(" (DeBERTa model)"),bwo=l(),F1=a("li"),fle=a("strong"),Fwo=o("deberta-v2"),vwo=o(" \u2014 "),Nq=a("a"),Two=o("DebertaV2ForSequenceClassification"),Mwo=o(" (DeBERTa-v2 model)"),Ewo=l(),v1=a("li"),mle=a("strong"),Cwo=o("distilbert"),wwo=o(" \u2014 "),jq=a("a"),Awo=o("DistilBertForSequenceClassification"),ywo=o(" (DistilBERT model)"),Lwo=l(),T1=a("li"),gle=a("strong"),xwo=o("electra"),kwo=o(" \u2014 "),Dq=a("a"),Swo=o("ElectraForSequenceClassification"),Rwo=o(" (ELECTRA model)"),Bwo=l(),M1=a("li"),hle=a("strong"),Pwo=o("flaubert"),$wo=o(" \u2014 "),Gq=a("a"),Iwo=o("FlaubertForSequenceClassification"),qwo=o(" (FlauBERT model)"),Nwo=l(),E1=a("li"),ple=a("strong"),jwo=o("fnet"),Dwo=o(" \u2014 "),Oq=a("a"),Gwo=o("FNetForSequenceClassification"),Owo=o(" (FNet model)"),Vwo=l(),C1=a("li"),_le=a("strong"),Xwo=o("funnel"),zwo=o(" \u2014 "),Vq=a("a"),Qwo=o("FunnelForSequenceClassification"),Wwo=o(" (Funnel Transformer model)"),Hwo=l(),w1=a("li"),ule=a("strong"),Uwo=o("gpt2"),Jwo=o(" \u2014 "),Xq=a("a"),Ywo=o("GPT2ForSequenceClassification"),Kwo=o(" (OpenAI GPT-2 model)"),Zwo=l(),A1=a("li"),ble=a("strong"),eAo=o("gpt_neo"),oAo=o(" \u2014 "),zq=a("a"),rAo=o("GPTNeoForSequenceClassification"),tAo=o(" (GPT Neo model)"),aAo=l(),y1=a("li"),Fle=a("strong"),nAo=o("gptj"),sAo=o(" \u2014 "),Qq=a("a"),lAo=o("GPTJForSequenceClassification"),iAo=o(" (GPT-J model)"),dAo=l(),L1=a("li"),vle=a("strong"),cAo=o("ibert"),fAo=o(" \u2014 "),Wq=a("a"),mAo=o("IBertForSequenceClassification"),gAo=o(" (I-BERT model)"),hAo=l(),x1=a("li"),Tle=a("strong"),pAo=o("layoutlm"),_Ao=o(" \u2014 "),Hq=a("a"),uAo=o("LayoutLMForSequenceClassification"),bAo=o(" (LayoutLM model)"),FAo=l(),k1=a("li"),Mle=a("strong"),vAo=o("layoutlmv2"),TAo=o(" \u2014 "),Uq=a("a"),MAo=o("LayoutLMv2ForSequenceClassification"),EAo=o(" (LayoutLMv2 model)"),CAo=l(),S1=a("li"),Ele=a("strong"),wAo=o("led"),AAo=o(" \u2014 "),Jq=a("a"),yAo=o("LEDForSequenceClassification"),LAo=o(" (LED model)"),xAo=l(),R1=a("li"),Cle=a("strong"),kAo=o("longformer"),SAo=o(" \u2014 "),Yq=a("a"),RAo=o("LongformerForSequenceClassification"),BAo=o(" (Longformer model)"),PAo=l(),B1=a("li"),wle=a("strong"),$Ao=o("mbart"),IAo=o(" \u2014 "),Kq=a("a"),qAo=o("MBartForSequenceClassification"),NAo=o(" (mBART model)"),jAo=l(),P1=a("li"),Ale=a("strong"),DAo=o("megatron-bert"),GAo=o(" \u2014 "),Zq=a("a"),OAo=o("MegatronBertForSequenceClassification"),VAo=o(" (MegatronBert model)"),XAo=l(),$1=a("li"),yle=a("strong"),zAo=o("mobilebert"),QAo=o(" \u2014 "),eN=a("a"),WAo=o("MobileBertForSequenceClassification"),HAo=o(" (MobileBERT model)"),UAo=l(),I1=a("li"),Lle=a("strong"),JAo=o("mpnet"),YAo=o(" \u2014 "),oN=a("a"),KAo=o("MPNetForSequenceClassification"),ZAo=o(" (MPNet model)"),e0o=l(),q1=a("li"),xle=a("strong"),o0o=o("nystromformer"),r0o=o(" \u2014 "),rN=a("a"),t0o=o("NystromformerForSequenceClassification"),a0o=o(" (Nystromformer model)"),n0o=l(),N1=a("li"),kle=a("strong"),s0o=o("openai-gpt"),l0o=o(" \u2014 "),tN=a("a"),i0o=o("OpenAIGPTForSequenceClassification"),d0o=o(" (OpenAI GPT model)"),c0o=l(),j1=a("li"),Sle=a("strong"),f0o=o("perceiver"),m0o=o(" \u2014 "),aN=a("a"),g0o=o("PerceiverForSequenceClassification"),h0o=o(" (Perceiver model)"),p0o=l(),D1=a("li"),Rle=a("strong"),_0o=o("plbart"),u0o=o(" \u2014 "),nN=a("a"),b0o=o("PLBartForSequenceClassification"),F0o=o(" (PLBart model)"),v0o=l(),G1=a("li"),Ble=a("strong"),T0o=o("qdqbert"),M0o=o(" \u2014 "),sN=a("a"),E0o=o("QDQBertForSequenceClassification"),C0o=o(" (QDQBert model)"),w0o=l(),O1=a("li"),Ple=a("strong"),A0o=o("reformer"),y0o=o(" \u2014 "),lN=a("a"),L0o=o("ReformerForSequenceClassification"),x0o=o(" (Reformer model)"),k0o=l(),V1=a("li"),$le=a("strong"),S0o=o("rembert"),R0o=o(" \u2014 "),iN=a("a"),B0o=o("RemBertForSequenceClassification"),P0o=o(" (RemBERT model)"),$0o=l(),X1=a("li"),Ile=a("strong"),I0o=o("roberta"),q0o=o(" \u2014 "),dN=a("a"),N0o=o("RobertaForSequenceClassification"),j0o=o(" (RoBERTa model)"),D0o=l(),z1=a("li"),qle=a("strong"),G0o=o("roformer"),O0o=o(" \u2014 "),cN=a("a"),V0o=o("RoFormerForSequenceClassification"),X0o=o(" (RoFormer model)"),z0o=l(),Q1=a("li"),Nle=a("strong"),Q0o=o("squeezebert"),W0o=o(" \u2014 "),fN=a("a"),H0o=o("SqueezeBertForSequenceClassification"),U0o=o(" (SqueezeBERT model)"),J0o=l(),W1=a("li"),jle=a("strong"),Y0o=o("tapas"),K0o=o(" \u2014 "),mN=a("a"),Z0o=o("TapasForSequenceClassification"),eyo=o(" (TAPAS model)"),oyo=l(),H1=a("li"),Dle=a("strong"),ryo=o("tapex"),tyo=o(" \u2014 "),gN=a("a"),ayo=o("BartForSequenceClassification"),nyo=o(" (TAPEX model)"),syo=l(),U1=a("li"),Gle=a("strong"),lyo=o("transfo-xl"),iyo=o(" \u2014 "),hN=a("a"),dyo=o("TransfoXLForSequenceClassification"),cyo=o(" (Transformer-XL model)"),fyo=l(),J1=a("li"),Ole=a("strong"),myo=o("xlm"),gyo=o(" \u2014 "),pN=a("a"),hyo=o("XLMForSequenceClassification"),pyo=o(" (XLM model)"),_yo=l(),Y1=a("li"),Vle=a("strong"),uyo=o("xlm-roberta"),byo=o(" \u2014 "),_N=a("a"),Fyo=o("XLMRobertaForSequenceClassification"),vyo=o(" (XLM-RoBERTa model)"),Tyo=l(),K1=a("li"),Xle=a("strong"),Myo=o("xlm-roberta-xl"),Eyo=o(" \u2014 "),uN=a("a"),Cyo=o("XLMRobertaXLForSequenceClassification"),wyo=o(" (XLM-RoBERTa-XL model)"),Ayo=l(),Z1=a("li"),zle=a("strong"),yyo=o("xlnet"),Lyo=o(" \u2014 "),bN=a("a"),xyo=o("XLNetForSequenceClassification"),kyo=o(" (XLNet model)"),Syo=l(),eb=a("li"),Qle=a("strong"),Ryo=o("yoso"),Byo=o(" \u2014 "),FN=a("a"),Pyo=o("YosoForSequenceClassification"),$yo=o(" (YOSO model)"),Iyo=l(),ob=a("p"),qyo=o("The model is set in evaluation mode by default using "),Wle=a("code"),Nyo=o("model.eval()"),jyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=a("code"),Dyo=o("model.train()"),Gyo=l(),Ule=a("p"),Oyo=o("Examples:"),Vyo=l(),f(Xw.$$.fragment),DRe=l(),hd=a("h2"),rb=a("a"),Jle=a("span"),f(zw.$$.fragment),Xyo=l(),Yle=a("span"),zyo=o("AutoModelForMultipleChoice"),GRe=l(),rr=a("div"),f(Qw.$$.fragment),Qyo=l(),pd=a("p"),Wyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vN=a("a"),Hyo=o("from_pretrained()"),Uyo=o(" class method or the "),TN=a("a"),Jyo=o("from_config()"),Yyo=o(` class
method.`),Kyo=l(),Ww=a("p"),Zyo=o("This class cannot be instantiated directly using "),Kle=a("code"),eLo=o("__init__()"),oLo=o(" (throws an error)."),rLo=l(),Jr=a("div"),f(Hw.$$.fragment),tLo=l(),Zle=a("p"),aLo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nLo=l(),_d=a("p"),sLo=o(`Note:
Loading a model from its configuration file does `),eie=a("strong"),lLo=o("not"),iLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=a("a"),dLo=o("from_pretrained()"),cLo=o(" to load the model weights."),fLo=l(),oie=a("p"),mLo=o("Examples:"),gLo=l(),f(Uw.$$.fragment),hLo=l(),Ve=a("div"),f(Jw.$$.fragment),pLo=l(),rie=a("p"),_Lo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uLo=l(),Ja=a("p"),bLo=o("The model class to instantiate is selected based on the "),tie=a("code"),FLo=o("model_type"),vLo=o(` property of the config object (either
passed as an argument or loaded from `),aie=a("code"),TLo=o("pretrained_model_name_or_path"),MLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nie=a("code"),ELo=o("pretrained_model_name_or_path"),CLo=o(":"),wLo=l(),G=a("ul"),tb=a("li"),sie=a("strong"),ALo=o("albert"),yLo=o(" \u2014 "),EN=a("a"),LLo=o("AlbertForMultipleChoice"),xLo=o(" (ALBERT model)"),kLo=l(),ab=a("li"),lie=a("strong"),SLo=o("bert"),RLo=o(" \u2014 "),CN=a("a"),BLo=o("BertForMultipleChoice"),PLo=o(" (BERT model)"),$Lo=l(),nb=a("li"),iie=a("strong"),ILo=o("big_bird"),qLo=o(" \u2014 "),wN=a("a"),NLo=o("BigBirdForMultipleChoice"),jLo=o(" (BigBird model)"),DLo=l(),sb=a("li"),die=a("strong"),GLo=o("camembert"),OLo=o(" \u2014 "),AN=a("a"),VLo=o("CamembertForMultipleChoice"),XLo=o(" (CamemBERT model)"),zLo=l(),lb=a("li"),cie=a("strong"),QLo=o("canine"),WLo=o(" \u2014 "),yN=a("a"),HLo=o("CanineForMultipleChoice"),ULo=o(" (Canine model)"),JLo=l(),ib=a("li"),fie=a("strong"),YLo=o("convbert"),KLo=o(" \u2014 "),LN=a("a"),ZLo=o("ConvBertForMultipleChoice"),e8o=o(" (ConvBERT model)"),o8o=l(),db=a("li"),mie=a("strong"),r8o=o("data2vec-text"),t8o=o(" \u2014 "),xN=a("a"),a8o=o("Data2VecTextForMultipleChoice"),n8o=o(" (Data2VecText model)"),s8o=l(),cb=a("li"),gie=a("strong"),l8o=o("distilbert"),i8o=o(" \u2014 "),kN=a("a"),d8o=o("DistilBertForMultipleChoice"),c8o=o(" (DistilBERT model)"),f8o=l(),fb=a("li"),hie=a("strong"),m8o=o("electra"),g8o=o(" \u2014 "),SN=a("a"),h8o=o("ElectraForMultipleChoice"),p8o=o(" (ELECTRA model)"),_8o=l(),mb=a("li"),pie=a("strong"),u8o=o("flaubert"),b8o=o(" \u2014 "),RN=a("a"),F8o=o("FlaubertForMultipleChoice"),v8o=o(" (FlauBERT model)"),T8o=l(),gb=a("li"),_ie=a("strong"),M8o=o("fnet"),E8o=o(" \u2014 "),BN=a("a"),C8o=o("FNetForMultipleChoice"),w8o=o(" (FNet model)"),A8o=l(),hb=a("li"),uie=a("strong"),y8o=o("funnel"),L8o=o(" \u2014 "),PN=a("a"),x8o=o("FunnelForMultipleChoice"),k8o=o(" (Funnel Transformer model)"),S8o=l(),pb=a("li"),bie=a("strong"),R8o=o("ibert"),B8o=o(" \u2014 "),$N=a("a"),P8o=o("IBertForMultipleChoice"),$8o=o(" (I-BERT model)"),I8o=l(),_b=a("li"),Fie=a("strong"),q8o=o("longformer"),N8o=o(" \u2014 "),IN=a("a"),j8o=o("LongformerForMultipleChoice"),D8o=o(" (Longformer model)"),G8o=l(),ub=a("li"),vie=a("strong"),O8o=o("megatron-bert"),V8o=o(" \u2014 "),qN=a("a"),X8o=o("MegatronBertForMultipleChoice"),z8o=o(" (MegatronBert model)"),Q8o=l(),bb=a("li"),Tie=a("strong"),W8o=o("mobilebert"),H8o=o(" \u2014 "),NN=a("a"),U8o=o("MobileBertForMultipleChoice"),J8o=o(" (MobileBERT model)"),Y8o=l(),Fb=a("li"),Mie=a("strong"),K8o=o("mpnet"),Z8o=o(" \u2014 "),jN=a("a"),e7o=o("MPNetForMultipleChoice"),o7o=o(" (MPNet model)"),r7o=l(),vb=a("li"),Eie=a("strong"),t7o=o("nystromformer"),a7o=o(" \u2014 "),DN=a("a"),n7o=o("NystromformerForMultipleChoice"),s7o=o(" (Nystromformer model)"),l7o=l(),Tb=a("li"),Cie=a("strong"),i7o=o("qdqbert"),d7o=o(" \u2014 "),GN=a("a"),c7o=o("QDQBertForMultipleChoice"),f7o=o(" (QDQBert model)"),m7o=l(),Mb=a("li"),wie=a("strong"),g7o=o("rembert"),h7o=o(" \u2014 "),ON=a("a"),p7o=o("RemBertForMultipleChoice"),_7o=o(" (RemBERT model)"),u7o=l(),Eb=a("li"),Aie=a("strong"),b7o=o("roberta"),F7o=o(" \u2014 "),VN=a("a"),v7o=o("RobertaForMultipleChoice"),T7o=o(" (RoBERTa model)"),M7o=l(),Cb=a("li"),yie=a("strong"),E7o=o("roformer"),C7o=o(" \u2014 "),XN=a("a"),w7o=o("RoFormerForMultipleChoice"),A7o=o(" (RoFormer model)"),y7o=l(),wb=a("li"),Lie=a("strong"),L7o=o("squeezebert"),x7o=o(" \u2014 "),zN=a("a"),k7o=o("SqueezeBertForMultipleChoice"),S7o=o(" (SqueezeBERT model)"),R7o=l(),Ab=a("li"),xie=a("strong"),B7o=o("xlm"),P7o=o(" \u2014 "),QN=a("a"),$7o=o("XLMForMultipleChoice"),I7o=o(" (XLM model)"),q7o=l(),yb=a("li"),kie=a("strong"),N7o=o("xlm-roberta"),j7o=o(" \u2014 "),WN=a("a"),D7o=o("XLMRobertaForMultipleChoice"),G7o=o(" (XLM-RoBERTa model)"),O7o=l(),Lb=a("li"),Sie=a("strong"),V7o=o("xlm-roberta-xl"),X7o=o(" \u2014 "),HN=a("a"),z7o=o("XLMRobertaXLForMultipleChoice"),Q7o=o(" (XLM-RoBERTa-XL model)"),W7o=l(),xb=a("li"),Rie=a("strong"),H7o=o("xlnet"),U7o=o(" \u2014 "),UN=a("a"),J7o=o("XLNetForMultipleChoice"),Y7o=o(" (XLNet model)"),K7o=l(),kb=a("li"),Bie=a("strong"),Z7o=o("yoso"),e9o=o(" \u2014 "),JN=a("a"),o9o=o("YosoForMultipleChoice"),r9o=o(" (YOSO model)"),t9o=l(),Sb=a("p"),a9o=o("The model is set in evaluation mode by default using "),Pie=a("code"),n9o=o("model.eval()"),s9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ie=a("code"),l9o=o("model.train()"),i9o=l(),Iie=a("p"),d9o=o("Examples:"),c9o=l(),f(Yw.$$.fragment),ORe=l(),ud=a("h2"),Rb=a("a"),qie=a("span"),f(Kw.$$.fragment),f9o=l(),Nie=a("span"),m9o=o("AutoModelForNextSentencePrediction"),VRe=l(),tr=a("div"),f(Zw.$$.fragment),g9o=l(),bd=a("p"),h9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YN=a("a"),p9o=o("from_pretrained()"),_9o=o(" class method or the "),KN=a("a"),u9o=o("from_config()"),b9o=o(` class
method.`),F9o=l(),eA=a("p"),v9o=o("This class cannot be instantiated directly using "),jie=a("code"),T9o=o("__init__()"),M9o=o(" (throws an error)."),E9o=l(),Yr=a("div"),f(oA.$$.fragment),C9o=l(),Die=a("p"),w9o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),A9o=l(),Fd=a("p"),y9o=o(`Note:
Loading a model from its configuration file does `),Gie=a("strong"),L9o=o("not"),x9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZN=a("a"),k9o=o("from_pretrained()"),S9o=o(" to load the model weights."),R9o=l(),Oie=a("p"),B9o=o("Examples:"),P9o=l(),f(rA.$$.fragment),$9o=l(),Xe=a("div"),f(tA.$$.fragment),I9o=l(),Vie=a("p"),q9o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),N9o=l(),Ya=a("p"),j9o=o("The model class to instantiate is selected based on the "),Xie=a("code"),D9o=o("model_type"),G9o=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),O9o=o("pretrained_model_name_or_path"),V9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qie=a("code"),X9o=o("pretrained_model_name_or_path"),z9o=o(":"),Q9o=l(),da=a("ul"),Bb=a("li"),Wie=a("strong"),W9o=o("bert"),H9o=o(" \u2014 "),ej=a("a"),U9o=o("BertForNextSentencePrediction"),J9o=o(" (BERT model)"),Y9o=l(),Pb=a("li"),Hie=a("strong"),K9o=o("fnet"),Z9o=o(" \u2014 "),oj=a("a"),exo=o("FNetForNextSentencePrediction"),oxo=o(" (FNet model)"),rxo=l(),$b=a("li"),Uie=a("strong"),txo=o("megatron-bert"),axo=o(" \u2014 "),rj=a("a"),nxo=o("MegatronBertForNextSentencePrediction"),sxo=o(" (MegatronBert model)"),lxo=l(),Ib=a("li"),Jie=a("strong"),ixo=o("mobilebert"),dxo=o(" \u2014 "),tj=a("a"),cxo=o("MobileBertForNextSentencePrediction"),fxo=o(" (MobileBERT model)"),mxo=l(),qb=a("li"),Yie=a("strong"),gxo=o("qdqbert"),hxo=o(" \u2014 "),aj=a("a"),pxo=o("QDQBertForNextSentencePrediction"),_xo=o(" (QDQBert model)"),uxo=l(),Nb=a("p"),bxo=o("The model is set in evaluation mode by default using "),Kie=a("code"),Fxo=o("model.eval()"),vxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zie=a("code"),Txo=o("model.train()"),Mxo=l(),ede=a("p"),Exo=o("Examples:"),Cxo=l(),f(aA.$$.fragment),XRe=l(),vd=a("h2"),jb=a("a"),ode=a("span"),f(nA.$$.fragment),wxo=l(),rde=a("span"),Axo=o("AutoModelForTokenClassification"),zRe=l(),ar=a("div"),f(sA.$$.fragment),yxo=l(),Td=a("p"),Lxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nj=a("a"),xxo=o("from_pretrained()"),kxo=o(" class method or the "),sj=a("a"),Sxo=o("from_config()"),Rxo=o(` class
method.`),Bxo=l(),lA=a("p"),Pxo=o("This class cannot be instantiated directly using "),tde=a("code"),$xo=o("__init__()"),Ixo=o(" (throws an error)."),qxo=l(),Kr=a("div"),f(iA.$$.fragment),Nxo=l(),ade=a("p"),jxo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Dxo=l(),Md=a("p"),Gxo=o(`Note:
Loading a model from its configuration file does `),nde=a("strong"),Oxo=o("not"),Vxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=a("a"),Xxo=o("from_pretrained()"),zxo=o(" to load the model weights."),Qxo=l(),sde=a("p"),Wxo=o("Examples:"),Hxo=l(),f(dA.$$.fragment),Uxo=l(),ze=a("div"),f(cA.$$.fragment),Jxo=l(),lde=a("p"),Yxo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Kxo=l(),Ka=a("p"),Zxo=o("The model class to instantiate is selected based on the "),ide=a("code"),eko=o("model_type"),oko=o(` property of the config object (either
passed as an argument or loaded from `),dde=a("code"),rko=o("pretrained_model_name_or_path"),tko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=a("code"),ako=o("pretrained_model_name_or_path"),nko=o(":"),sko=l(),j=a("ul"),Db=a("li"),fde=a("strong"),lko=o("albert"),iko=o(" \u2014 "),ij=a("a"),dko=o("AlbertForTokenClassification"),cko=o(" (ALBERT model)"),fko=l(),Gb=a("li"),mde=a("strong"),mko=o("bert"),gko=o(" \u2014 "),dj=a("a"),hko=o("BertForTokenClassification"),pko=o(" (BERT model)"),_ko=l(),Ob=a("li"),gde=a("strong"),uko=o("big_bird"),bko=o(" \u2014 "),cj=a("a"),Fko=o("BigBirdForTokenClassification"),vko=o(" (BigBird model)"),Tko=l(),Vb=a("li"),hde=a("strong"),Mko=o("camembert"),Eko=o(" \u2014 "),fj=a("a"),Cko=o("CamembertForTokenClassification"),wko=o(" (CamemBERT model)"),Ako=l(),Xb=a("li"),pde=a("strong"),yko=o("canine"),Lko=o(" \u2014 "),mj=a("a"),xko=o("CanineForTokenClassification"),kko=o(" (Canine model)"),Sko=l(),zb=a("li"),_de=a("strong"),Rko=o("convbert"),Bko=o(" \u2014 "),gj=a("a"),Pko=o("ConvBertForTokenClassification"),$ko=o(" (ConvBERT model)"),Iko=l(),Qb=a("li"),ude=a("strong"),qko=o("data2vec-text"),Nko=o(" \u2014 "),hj=a("a"),jko=o("Data2VecTextForTokenClassification"),Dko=o(" (Data2VecText model)"),Gko=l(),Wb=a("li"),bde=a("strong"),Oko=o("deberta"),Vko=o(" \u2014 "),pj=a("a"),Xko=o("DebertaForTokenClassification"),zko=o(" (DeBERTa model)"),Qko=l(),Hb=a("li"),Fde=a("strong"),Wko=o("deberta-v2"),Hko=o(" \u2014 "),_j=a("a"),Uko=o("DebertaV2ForTokenClassification"),Jko=o(" (DeBERTa-v2 model)"),Yko=l(),Ub=a("li"),vde=a("strong"),Kko=o("distilbert"),Zko=o(" \u2014 "),uj=a("a"),eSo=o("DistilBertForTokenClassification"),oSo=o(" (DistilBERT model)"),rSo=l(),Jb=a("li"),Tde=a("strong"),tSo=o("electra"),aSo=o(" \u2014 "),bj=a("a"),nSo=o("ElectraForTokenClassification"),sSo=o(" (ELECTRA model)"),lSo=l(),Yb=a("li"),Mde=a("strong"),iSo=o("flaubert"),dSo=o(" \u2014 "),Fj=a("a"),cSo=o("FlaubertForTokenClassification"),fSo=o(" (FlauBERT model)"),mSo=l(),Kb=a("li"),Ede=a("strong"),gSo=o("fnet"),hSo=o(" \u2014 "),vj=a("a"),pSo=o("FNetForTokenClassification"),_So=o(" (FNet model)"),uSo=l(),Zb=a("li"),Cde=a("strong"),bSo=o("funnel"),FSo=o(" \u2014 "),Tj=a("a"),vSo=o("FunnelForTokenClassification"),TSo=o(" (Funnel Transformer model)"),MSo=l(),e5=a("li"),wde=a("strong"),ESo=o("gpt2"),CSo=o(" \u2014 "),Mj=a("a"),wSo=o("GPT2ForTokenClassification"),ASo=o(" (OpenAI GPT-2 model)"),ySo=l(),o5=a("li"),Ade=a("strong"),LSo=o("ibert"),xSo=o(" \u2014 "),Ej=a("a"),kSo=o("IBertForTokenClassification"),SSo=o(" (I-BERT model)"),RSo=l(),r5=a("li"),yde=a("strong"),BSo=o("layoutlm"),PSo=o(" \u2014 "),Cj=a("a"),$So=o("LayoutLMForTokenClassification"),ISo=o(" (LayoutLM model)"),qSo=l(),t5=a("li"),Lde=a("strong"),NSo=o("layoutlmv2"),jSo=o(" \u2014 "),wj=a("a"),DSo=o("LayoutLMv2ForTokenClassification"),GSo=o(" (LayoutLMv2 model)"),OSo=l(),a5=a("li"),xde=a("strong"),VSo=o("longformer"),XSo=o(" \u2014 "),Aj=a("a"),zSo=o("LongformerForTokenClassification"),QSo=o(" (Longformer model)"),WSo=l(),n5=a("li"),kde=a("strong"),HSo=o("megatron-bert"),USo=o(" \u2014 "),yj=a("a"),JSo=o("MegatronBertForTokenClassification"),YSo=o(" (MegatronBert model)"),KSo=l(),s5=a("li"),Sde=a("strong"),ZSo=o("mobilebert"),eRo=o(" \u2014 "),Lj=a("a"),oRo=o("MobileBertForTokenClassification"),rRo=o(" (MobileBERT model)"),tRo=l(),l5=a("li"),Rde=a("strong"),aRo=o("mpnet"),nRo=o(" \u2014 "),xj=a("a"),sRo=o("MPNetForTokenClassification"),lRo=o(" (MPNet model)"),iRo=l(),i5=a("li"),Bde=a("strong"),dRo=o("nystromformer"),cRo=o(" \u2014 "),kj=a("a"),fRo=o("NystromformerForTokenClassification"),mRo=o(" (Nystromformer model)"),gRo=l(),d5=a("li"),Pde=a("strong"),hRo=o("qdqbert"),pRo=o(" \u2014 "),Sj=a("a"),_Ro=o("QDQBertForTokenClassification"),uRo=o(" (QDQBert model)"),bRo=l(),c5=a("li"),$de=a("strong"),FRo=o("rembert"),vRo=o(" \u2014 "),Rj=a("a"),TRo=o("RemBertForTokenClassification"),MRo=o(" (RemBERT model)"),ERo=l(),f5=a("li"),Ide=a("strong"),CRo=o("roberta"),wRo=o(" \u2014 "),Bj=a("a"),ARo=o("RobertaForTokenClassification"),yRo=o(" (RoBERTa model)"),LRo=l(),m5=a("li"),qde=a("strong"),xRo=o("roformer"),kRo=o(" \u2014 "),Pj=a("a"),SRo=o("RoFormerForTokenClassification"),RRo=o(" (RoFormer model)"),BRo=l(),g5=a("li"),Nde=a("strong"),PRo=o("squeezebert"),$Ro=o(" \u2014 "),$j=a("a"),IRo=o("SqueezeBertForTokenClassification"),qRo=o(" (SqueezeBERT model)"),NRo=l(),h5=a("li"),jde=a("strong"),jRo=o("xlm"),DRo=o(" \u2014 "),Ij=a("a"),GRo=o("XLMForTokenClassification"),ORo=o(" (XLM model)"),VRo=l(),p5=a("li"),Dde=a("strong"),XRo=o("xlm-roberta"),zRo=o(" \u2014 "),qj=a("a"),QRo=o("XLMRobertaForTokenClassification"),WRo=o(" (XLM-RoBERTa model)"),HRo=l(),_5=a("li"),Gde=a("strong"),URo=o("xlm-roberta-xl"),JRo=o(" \u2014 "),Nj=a("a"),YRo=o("XLMRobertaXLForTokenClassification"),KRo=o(" (XLM-RoBERTa-XL model)"),ZRo=l(),u5=a("li"),Ode=a("strong"),eBo=o("xlnet"),oBo=o(" \u2014 "),jj=a("a"),rBo=o("XLNetForTokenClassification"),tBo=o(" (XLNet model)"),aBo=l(),b5=a("li"),Vde=a("strong"),nBo=o("yoso"),sBo=o(" \u2014 "),Dj=a("a"),lBo=o("YosoForTokenClassification"),iBo=o(" (YOSO model)"),dBo=l(),F5=a("p"),cBo=o("The model is set in evaluation mode by default using "),Xde=a("code"),fBo=o("model.eval()"),mBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=a("code"),gBo=o("model.train()"),hBo=l(),Qde=a("p"),pBo=o("Examples:"),_Bo=l(),f(fA.$$.fragment),QRe=l(),Ed=a("h2"),v5=a("a"),Wde=a("span"),f(mA.$$.fragment),uBo=l(),Hde=a("span"),bBo=o("AutoModelForQuestionAnswering"),WRe=l(),nr=a("div"),f(gA.$$.fragment),FBo=l(),Cd=a("p"),vBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Gj=a("a"),TBo=o("from_pretrained()"),MBo=o(" class method or the "),Oj=a("a"),EBo=o("from_config()"),CBo=o(` class
method.`),wBo=l(),hA=a("p"),ABo=o("This class cannot be instantiated directly using "),Ude=a("code"),yBo=o("__init__()"),LBo=o(" (throws an error)."),xBo=l(),Zr=a("div"),f(pA.$$.fragment),kBo=l(),Jde=a("p"),SBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RBo=l(),wd=a("p"),BBo=o(`Note:
Loading a model from its configuration file does `),Yde=a("strong"),PBo=o("not"),$Bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=a("a"),IBo=o("from_pretrained()"),qBo=o(" to load the model weights."),NBo=l(),Kde=a("p"),jBo=o("Examples:"),DBo=l(),f(_A.$$.fragment),GBo=l(),Qe=a("div"),f(uA.$$.fragment),OBo=l(),Zde=a("p"),VBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XBo=l(),Za=a("p"),zBo=o("The model class to instantiate is selected based on the "),ece=a("code"),QBo=o("model_type"),WBo=o(` property of the config object (either
passed as an argument or loaded from `),oce=a("code"),HBo=o("pretrained_model_name_or_path"),UBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=a("code"),JBo=o("pretrained_model_name_or_path"),YBo=o(":"),KBo=l(),R=a("ul"),T5=a("li"),tce=a("strong"),ZBo=o("albert"),ePo=o(" \u2014 "),Xj=a("a"),oPo=o("AlbertForQuestionAnswering"),rPo=o(" (ALBERT model)"),tPo=l(),M5=a("li"),ace=a("strong"),aPo=o("bart"),nPo=o(" \u2014 "),zj=a("a"),sPo=o("BartForQuestionAnswering"),lPo=o(" (BART model)"),iPo=l(),E5=a("li"),nce=a("strong"),dPo=o("bert"),cPo=o(" \u2014 "),Qj=a("a"),fPo=o("BertForQuestionAnswering"),mPo=o(" (BERT model)"),gPo=l(),C5=a("li"),sce=a("strong"),hPo=o("big_bird"),pPo=o(" \u2014 "),Wj=a("a"),_Po=o("BigBirdForQuestionAnswering"),uPo=o(" (BigBird model)"),bPo=l(),w5=a("li"),lce=a("strong"),FPo=o("bigbird_pegasus"),vPo=o(" \u2014 "),Hj=a("a"),TPo=o("BigBirdPegasusForQuestionAnswering"),MPo=o(" (BigBirdPegasus model)"),EPo=l(),A5=a("li"),ice=a("strong"),CPo=o("camembert"),wPo=o(" \u2014 "),Uj=a("a"),APo=o("CamembertForQuestionAnswering"),yPo=o(" (CamemBERT model)"),LPo=l(),y5=a("li"),dce=a("strong"),xPo=o("canine"),kPo=o(" \u2014 "),Jj=a("a"),SPo=o("CanineForQuestionAnswering"),RPo=o(" (Canine model)"),BPo=l(),L5=a("li"),cce=a("strong"),PPo=o("convbert"),$Po=o(" \u2014 "),Yj=a("a"),IPo=o("ConvBertForQuestionAnswering"),qPo=o(" (ConvBERT model)"),NPo=l(),x5=a("li"),fce=a("strong"),jPo=o("data2vec-text"),DPo=o(" \u2014 "),Kj=a("a"),GPo=o("Data2VecTextForQuestionAnswering"),OPo=o(" (Data2VecText model)"),VPo=l(),k5=a("li"),mce=a("strong"),XPo=o("deberta"),zPo=o(" \u2014 "),Zj=a("a"),QPo=o("DebertaForQuestionAnswering"),WPo=o(" (DeBERTa model)"),HPo=l(),S5=a("li"),gce=a("strong"),UPo=o("deberta-v2"),JPo=o(" \u2014 "),eD=a("a"),YPo=o("DebertaV2ForQuestionAnswering"),KPo=o(" (DeBERTa-v2 model)"),ZPo=l(),R5=a("li"),hce=a("strong"),e$o=o("distilbert"),o$o=o(" \u2014 "),oD=a("a"),r$o=o("DistilBertForQuestionAnswering"),t$o=o(" (DistilBERT model)"),a$o=l(),B5=a("li"),pce=a("strong"),n$o=o("electra"),s$o=o(" \u2014 "),rD=a("a"),l$o=o("ElectraForQuestionAnswering"),i$o=o(" (ELECTRA model)"),d$o=l(),P5=a("li"),_ce=a("strong"),c$o=o("flaubert"),f$o=o(" \u2014 "),tD=a("a"),m$o=o("FlaubertForQuestionAnsweringSimple"),g$o=o(" (FlauBERT model)"),h$o=l(),$5=a("li"),uce=a("strong"),p$o=o("fnet"),_$o=o(" \u2014 "),aD=a("a"),u$o=o("FNetForQuestionAnswering"),b$o=o(" (FNet model)"),F$o=l(),I5=a("li"),bce=a("strong"),v$o=o("funnel"),T$o=o(" \u2014 "),nD=a("a"),M$o=o("FunnelForQuestionAnswering"),E$o=o(" (Funnel Transformer model)"),C$o=l(),q5=a("li"),Fce=a("strong"),w$o=o("gptj"),A$o=o(" \u2014 "),sD=a("a"),y$o=o("GPTJForQuestionAnswering"),L$o=o(" (GPT-J model)"),x$o=l(),N5=a("li"),vce=a("strong"),k$o=o("ibert"),S$o=o(" \u2014 "),lD=a("a"),R$o=o("IBertForQuestionAnswering"),B$o=o(" (I-BERT model)"),P$o=l(),j5=a("li"),Tce=a("strong"),$$o=o("layoutlmv2"),I$o=o(" \u2014 "),iD=a("a"),q$o=o("LayoutLMv2ForQuestionAnswering"),N$o=o(" (LayoutLMv2 model)"),j$o=l(),D5=a("li"),Mce=a("strong"),D$o=o("led"),G$o=o(" \u2014 "),dD=a("a"),O$o=o("LEDForQuestionAnswering"),V$o=o(" (LED model)"),X$o=l(),G5=a("li"),Ece=a("strong"),z$o=o("longformer"),Q$o=o(" \u2014 "),cD=a("a"),W$o=o("LongformerForQuestionAnswering"),H$o=o(" (Longformer model)"),U$o=l(),O5=a("li"),Cce=a("strong"),J$o=o("lxmert"),Y$o=o(" \u2014 "),fD=a("a"),K$o=o("LxmertForQuestionAnswering"),Z$o=o(" (LXMERT model)"),eIo=l(),V5=a("li"),wce=a("strong"),oIo=o("mbart"),rIo=o(" \u2014 "),mD=a("a"),tIo=o("MBartForQuestionAnswering"),aIo=o(" (mBART model)"),nIo=l(),X5=a("li"),Ace=a("strong"),sIo=o("megatron-bert"),lIo=o(" \u2014 "),gD=a("a"),iIo=o("MegatronBertForQuestionAnswering"),dIo=o(" (MegatronBert model)"),cIo=l(),z5=a("li"),yce=a("strong"),fIo=o("mobilebert"),mIo=o(" \u2014 "),hD=a("a"),gIo=o("MobileBertForQuestionAnswering"),hIo=o(" (MobileBERT model)"),pIo=l(),Q5=a("li"),Lce=a("strong"),_Io=o("mpnet"),uIo=o(" \u2014 "),pD=a("a"),bIo=o("MPNetForQuestionAnswering"),FIo=o(" (MPNet model)"),vIo=l(),W5=a("li"),xce=a("strong"),TIo=o("nystromformer"),MIo=o(" \u2014 "),_D=a("a"),EIo=o("NystromformerForQuestionAnswering"),CIo=o(" (Nystromformer model)"),wIo=l(),H5=a("li"),kce=a("strong"),AIo=o("qdqbert"),yIo=o(" \u2014 "),uD=a("a"),LIo=o("QDQBertForQuestionAnswering"),xIo=o(" (QDQBert model)"),kIo=l(),U5=a("li"),Sce=a("strong"),SIo=o("reformer"),RIo=o(" \u2014 "),bD=a("a"),BIo=o("ReformerForQuestionAnswering"),PIo=o(" (Reformer model)"),$Io=l(),J5=a("li"),Rce=a("strong"),IIo=o("rembert"),qIo=o(" \u2014 "),FD=a("a"),NIo=o("RemBertForQuestionAnswering"),jIo=o(" (RemBERT model)"),DIo=l(),Y5=a("li"),Bce=a("strong"),GIo=o("roberta"),OIo=o(" \u2014 "),vD=a("a"),VIo=o("RobertaForQuestionAnswering"),XIo=o(" (RoBERTa model)"),zIo=l(),K5=a("li"),Pce=a("strong"),QIo=o("roformer"),WIo=o(" \u2014 "),TD=a("a"),HIo=o("RoFormerForQuestionAnswering"),UIo=o(" (RoFormer model)"),JIo=l(),Z5=a("li"),$ce=a("strong"),YIo=o("splinter"),KIo=o(" \u2014 "),MD=a("a"),ZIo=o("SplinterForQuestionAnswering"),eqo=o(" (Splinter model)"),oqo=l(),eF=a("li"),Ice=a("strong"),rqo=o("squeezebert"),tqo=o(" \u2014 "),ED=a("a"),aqo=o("SqueezeBertForQuestionAnswering"),nqo=o(" (SqueezeBERT model)"),sqo=l(),oF=a("li"),qce=a("strong"),lqo=o("xlm"),iqo=o(" \u2014 "),CD=a("a"),dqo=o("XLMForQuestionAnsweringSimple"),cqo=o(" (XLM model)"),fqo=l(),rF=a("li"),Nce=a("strong"),mqo=o("xlm-roberta"),gqo=o(" \u2014 "),wD=a("a"),hqo=o("XLMRobertaForQuestionAnswering"),pqo=o(" (XLM-RoBERTa model)"),_qo=l(),tF=a("li"),jce=a("strong"),uqo=o("xlm-roberta-xl"),bqo=o(" \u2014 "),AD=a("a"),Fqo=o("XLMRobertaXLForQuestionAnswering"),vqo=o(" (XLM-RoBERTa-XL model)"),Tqo=l(),aF=a("li"),Dce=a("strong"),Mqo=o("xlnet"),Eqo=o(" \u2014 "),yD=a("a"),Cqo=o("XLNetForQuestionAnsweringSimple"),wqo=o(" (XLNet model)"),Aqo=l(),nF=a("li"),Gce=a("strong"),yqo=o("yoso"),Lqo=o(" \u2014 "),LD=a("a"),xqo=o("YosoForQuestionAnswering"),kqo=o(" (YOSO model)"),Sqo=l(),sF=a("p"),Rqo=o("The model is set in evaluation mode by default using "),Oce=a("code"),Bqo=o("model.eval()"),Pqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vce=a("code"),$qo=o("model.train()"),Iqo=l(),Xce=a("p"),qqo=o("Examples:"),Nqo=l(),f(bA.$$.fragment),HRe=l(),Ad=a("h2"),lF=a("a"),zce=a("span"),f(FA.$$.fragment),jqo=l(),Qce=a("span"),Dqo=o("AutoModelForTableQuestionAnswering"),URe=l(),sr=a("div"),f(vA.$$.fragment),Gqo=l(),yd=a("p"),Oqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xD=a("a"),Vqo=o("from_pretrained()"),Xqo=o(" class method or the "),kD=a("a"),zqo=o("from_config()"),Qqo=o(` class
method.`),Wqo=l(),TA=a("p"),Hqo=o("This class cannot be instantiated directly using "),Wce=a("code"),Uqo=o("__init__()"),Jqo=o(" (throws an error)."),Yqo=l(),et=a("div"),f(MA.$$.fragment),Kqo=l(),Hce=a("p"),Zqo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),eNo=l(),Ld=a("p"),oNo=o(`Note:
Loading a model from its configuration file does `),Uce=a("strong"),rNo=o("not"),tNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=a("a"),aNo=o("from_pretrained()"),nNo=o(" to load the model weights."),sNo=l(),Jce=a("p"),lNo=o("Examples:"),iNo=l(),f(EA.$$.fragment),dNo=l(),We=a("div"),f(CA.$$.fragment),cNo=l(),Yce=a("p"),fNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mNo=l(),en=a("p"),gNo=o("The model class to instantiate is selected based on the "),Kce=a("code"),hNo=o("model_type"),pNo=o(` property of the config object (either
passed as an argument or loaded from `),Zce=a("code"),_No=o("pretrained_model_name_or_path"),uNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),efe=a("code"),bNo=o("pretrained_model_name_or_path"),FNo=o(":"),vNo=l(),ofe=a("ul"),iF=a("li"),rfe=a("strong"),TNo=o("tapas"),MNo=o(" \u2014 "),RD=a("a"),ENo=o("TapasForQuestionAnswering"),CNo=o(" (TAPAS model)"),wNo=l(),dF=a("p"),ANo=o("The model is set in evaluation mode by default using "),tfe=a("code"),yNo=o("model.eval()"),LNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),xNo=o("model.train()"),kNo=l(),nfe=a("p"),SNo=o("Examples:"),RNo=l(),f(wA.$$.fragment),JRe=l(),xd=a("h2"),cF=a("a"),sfe=a("span"),f(AA.$$.fragment),BNo=l(),lfe=a("span"),PNo=o("AutoModelForImageClassification"),YRe=l(),lr=a("div"),f(yA.$$.fragment),$No=l(),kd=a("p"),INo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BD=a("a"),qNo=o("from_pretrained()"),NNo=o(" class method or the "),PD=a("a"),jNo=o("from_config()"),DNo=o(` class
method.`),GNo=l(),LA=a("p"),ONo=o("This class cannot be instantiated directly using "),ife=a("code"),VNo=o("__init__()"),XNo=o(" (throws an error)."),zNo=l(),ot=a("div"),f(xA.$$.fragment),QNo=l(),dfe=a("p"),WNo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),HNo=l(),Sd=a("p"),UNo=o(`Note:
Loading a model from its configuration file does `),cfe=a("strong"),JNo=o("not"),YNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=a("a"),KNo=o("from_pretrained()"),ZNo=o(" to load the model weights."),ejo=l(),ffe=a("p"),ojo=o("Examples:"),rjo=l(),f(kA.$$.fragment),tjo=l(),He=a("div"),f(SA.$$.fragment),ajo=l(),mfe=a("p"),njo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sjo=l(),on=a("p"),ljo=o("The model class to instantiate is selected based on the "),gfe=a("code"),ijo=o("model_type"),djo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),cjo=o("pretrained_model_name_or_path"),fjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),mjo=o("pretrained_model_name_or_path"),gjo=o(":"),hjo=l(),ce=a("ul"),fF=a("li"),_fe=a("strong"),pjo=o("beit"),_jo=o(" \u2014 "),ID=a("a"),ujo=o("BeitForImageClassification"),bjo=o(" (BEiT model)"),Fjo=l(),mF=a("li"),ufe=a("strong"),vjo=o("convnext"),Tjo=o(" \u2014 "),qD=a("a"),Mjo=o("ConvNextForImageClassification"),Ejo=o(" (ConvNext model)"),Cjo=l(),Ds=a("li"),bfe=a("strong"),wjo=o("deit"),Ajo=o(" \u2014 "),ND=a("a"),yjo=o("DeiTForImageClassification"),Ljo=o(" or "),jD=a("a"),xjo=o("DeiTForImageClassificationWithTeacher"),kjo=o(" (DeiT model)"),Sjo=l(),gF=a("li"),Ffe=a("strong"),Rjo=o("imagegpt"),Bjo=o(" \u2014 "),DD=a("a"),Pjo=o("ImageGPTForImageClassification"),$jo=o(" (ImageGPT model)"),Ijo=l(),ma=a("li"),vfe=a("strong"),qjo=o("perceiver"),Njo=o(" \u2014 "),GD=a("a"),jjo=o("PerceiverForImageClassificationLearned"),Djo=o(" or "),OD=a("a"),Gjo=o("PerceiverForImageClassificationFourier"),Ojo=o(" or "),VD=a("a"),Vjo=o("PerceiverForImageClassificationConvProcessing"),Xjo=o(" (Perceiver model)"),zjo=l(),hF=a("li"),Tfe=a("strong"),Qjo=o("poolformer"),Wjo=o(" \u2014 "),XD=a("a"),Hjo=o("PoolFormerForImageClassification"),Ujo=o(" (PoolFormer model)"),Jjo=l(),pF=a("li"),Mfe=a("strong"),Yjo=o("regnet"),Kjo=o(" \u2014 "),zD=a("a"),Zjo=o("RegNetForImageClassification"),eDo=o(" (RegNet model)"),oDo=l(),_F=a("li"),Efe=a("strong"),rDo=o("resnet"),tDo=o(" \u2014 "),QD=a("a"),aDo=o("ResNetForImageClassification"),nDo=o(" (ResNet model)"),sDo=l(),uF=a("li"),Cfe=a("strong"),lDo=o("segformer"),iDo=o(" \u2014 "),WD=a("a"),dDo=o("SegformerForImageClassification"),cDo=o(" (SegFormer model)"),fDo=l(),bF=a("li"),wfe=a("strong"),mDo=o("swin"),gDo=o(" \u2014 "),HD=a("a"),hDo=o("SwinForImageClassification"),pDo=o(" (Swin model)"),_Do=l(),FF=a("li"),Afe=a("strong"),uDo=o("van"),bDo=o(" \u2014 "),UD=a("a"),FDo=o("VanForImageClassification"),vDo=o(" (VAN model)"),TDo=l(),vF=a("li"),yfe=a("strong"),MDo=o("vit"),EDo=o(" \u2014 "),JD=a("a"),CDo=o("ViTForImageClassification"),wDo=o(" (ViT model)"),ADo=l(),TF=a("p"),yDo=o("The model is set in evaluation mode by default using "),Lfe=a("code"),LDo=o("model.eval()"),xDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=a("code"),kDo=o("model.train()"),SDo=l(),kfe=a("p"),RDo=o("Examples:"),BDo=l(),f(RA.$$.fragment),KRe=l(),Rd=a("h2"),MF=a("a"),Sfe=a("span"),f(BA.$$.fragment),PDo=l(),Rfe=a("span"),$Do=o("AutoModelForVision2Seq"),ZRe=l(),ir=a("div"),f(PA.$$.fragment),IDo=l(),Bd=a("p"),qDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YD=a("a"),NDo=o("from_pretrained()"),jDo=o(" class method or the "),KD=a("a"),DDo=o("from_config()"),GDo=o(` class
method.`),ODo=l(),$A=a("p"),VDo=o("This class cannot be instantiated directly using "),Bfe=a("code"),XDo=o("__init__()"),zDo=o(" (throws an error)."),QDo=l(),rt=a("div"),f(IA.$$.fragment),WDo=l(),Pfe=a("p"),HDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UDo=l(),Pd=a("p"),JDo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),YDo=o("not"),KDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),ZDo=o("from_pretrained()"),eGo=o(" to load the model weights."),oGo=l(),Ife=a("p"),rGo=o("Examples:"),tGo=l(),f(qA.$$.fragment),aGo=l(),Ue=a("div"),f(NA.$$.fragment),nGo=l(),qfe=a("p"),sGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lGo=l(),rn=a("p"),iGo=o("The model class to instantiate is selected based on the "),Nfe=a("code"),dGo=o("model_type"),cGo=o(` property of the config object (either
passed as an argument or loaded from `),jfe=a("code"),fGo=o("pretrained_model_name_or_path"),mGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=a("code"),gGo=o("pretrained_model_name_or_path"),hGo=o(":"),pGo=l(),Gfe=a("ul"),EF=a("li"),Ofe=a("strong"),_Go=o("vision-encoder-decoder"),uGo=o(" \u2014 "),eG=a("a"),bGo=o("VisionEncoderDecoderModel"),FGo=o(" (Vision Encoder decoder model)"),vGo=l(),CF=a("p"),TGo=o("The model is set in evaluation mode by default using "),Vfe=a("code"),MGo=o("model.eval()"),EGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=a("code"),CGo=o("model.train()"),wGo=l(),zfe=a("p"),AGo=o("Examples:"),yGo=l(),f(jA.$$.fragment),eBe=l(),$d=a("h2"),wF=a("a"),Qfe=a("span"),f(DA.$$.fragment),LGo=l(),Wfe=a("span"),xGo=o("AutoModelForAudioClassification"),oBe=l(),dr=a("div"),f(GA.$$.fragment),kGo=l(),Id=a("p"),SGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oG=a("a"),RGo=o("from_pretrained()"),BGo=o(" class method or the "),rG=a("a"),PGo=o("from_config()"),$Go=o(` class
method.`),IGo=l(),OA=a("p"),qGo=o("This class cannot be instantiated directly using "),Hfe=a("code"),NGo=o("__init__()"),jGo=o(" (throws an error)."),DGo=l(),tt=a("div"),f(VA.$$.fragment),GGo=l(),Ufe=a("p"),OGo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),VGo=l(),qd=a("p"),XGo=o(`Note:
Loading a model from its configuration file does `),Jfe=a("strong"),zGo=o("not"),QGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),WGo=o("from_pretrained()"),HGo=o(" to load the model weights."),UGo=l(),Yfe=a("p"),JGo=o("Examples:"),YGo=l(),f(XA.$$.fragment),KGo=l(),Je=a("div"),f(zA.$$.fragment),ZGo=l(),Kfe=a("p"),eOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),oOo=l(),tn=a("p"),rOo=o("The model class to instantiate is selected based on the "),Zfe=a("code"),tOo=o("model_type"),aOo=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),nOo=o("pretrained_model_name_or_path"),sOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),lOo=o("pretrained_model_name_or_path"),iOo=o(":"),dOo=l(),Se=a("ul"),AF=a("li"),rme=a("strong"),cOo=o("data2vec-audio"),fOo=o(" \u2014 "),aG=a("a"),mOo=o("Data2VecAudioForSequenceClassification"),gOo=o(" (Data2VecAudio model)"),hOo=l(),yF=a("li"),tme=a("strong"),pOo=o("hubert"),_Oo=o(" \u2014 "),nG=a("a"),uOo=o("HubertForSequenceClassification"),bOo=o(" (Hubert model)"),FOo=l(),LF=a("li"),ame=a("strong"),vOo=o("sew"),TOo=o(" \u2014 "),sG=a("a"),MOo=o("SEWForSequenceClassification"),EOo=o(" (SEW model)"),COo=l(),xF=a("li"),nme=a("strong"),wOo=o("sew-d"),AOo=o(" \u2014 "),lG=a("a"),yOo=o("SEWDForSequenceClassification"),LOo=o(" (SEW-D model)"),xOo=l(),kF=a("li"),sme=a("strong"),kOo=o("unispeech"),SOo=o(" \u2014 "),iG=a("a"),ROo=o("UniSpeechForSequenceClassification"),BOo=o(" (UniSpeech model)"),POo=l(),SF=a("li"),lme=a("strong"),$Oo=o("unispeech-sat"),IOo=o(" \u2014 "),dG=a("a"),qOo=o("UniSpeechSatForSequenceClassification"),NOo=o(" (UniSpeechSat model)"),jOo=l(),RF=a("li"),ime=a("strong"),DOo=o("wav2vec2"),GOo=o(" \u2014 "),cG=a("a"),OOo=o("Wav2Vec2ForSequenceClassification"),VOo=o(" (Wav2Vec2 model)"),XOo=l(),BF=a("li"),dme=a("strong"),zOo=o("wavlm"),QOo=o(" \u2014 "),fG=a("a"),WOo=o("WavLMForSequenceClassification"),HOo=o(" (WavLM model)"),UOo=l(),PF=a("p"),JOo=o("The model is set in evaluation mode by default using "),cme=a("code"),YOo=o("model.eval()"),KOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),ZOo=o("model.train()"),eVo=l(),mme=a("p"),oVo=o("Examples:"),rVo=l(),f(QA.$$.fragment),rBe=l(),Nd=a("h2"),$F=a("a"),gme=a("span"),f(WA.$$.fragment),tVo=l(),hme=a("span"),aVo=o("AutoModelForAudioFrameClassification"),tBe=l(),cr=a("div"),f(HA.$$.fragment),nVo=l(),jd=a("p"),sVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mG=a("a"),lVo=o("from_pretrained()"),iVo=o(" class method or the "),gG=a("a"),dVo=o("from_config()"),cVo=o(` class
method.`),fVo=l(),UA=a("p"),mVo=o("This class cannot be instantiated directly using "),pme=a("code"),gVo=o("__init__()"),hVo=o(" (throws an error)."),pVo=l(),at=a("div"),f(JA.$$.fragment),_Vo=l(),_me=a("p"),uVo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),bVo=l(),Dd=a("p"),FVo=o(`Note:
Loading a model from its configuration file does `),ume=a("strong"),vVo=o("not"),TVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=a("a"),MVo=o("from_pretrained()"),EVo=o(" to load the model weights."),CVo=l(),bme=a("p"),wVo=o("Examples:"),AVo=l(),f(YA.$$.fragment),yVo=l(),Ye=a("div"),f(KA.$$.fragment),LVo=l(),Fme=a("p"),xVo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),kVo=l(),an=a("p"),SVo=o("The model class to instantiate is selected based on the "),vme=a("code"),RVo=o("model_type"),BVo=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),PVo=o("pretrained_model_name_or_path"),$Vo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),IVo=o("pretrained_model_name_or_path"),qVo=o(":"),NVo=l(),nn=a("ul"),IF=a("li"),Eme=a("strong"),jVo=o("data2vec-audio"),DVo=o(" \u2014 "),pG=a("a"),GVo=o("Data2VecAudioForAudioFrameClassification"),OVo=o(" (Data2VecAudio model)"),VVo=l(),qF=a("li"),Cme=a("strong"),XVo=o("unispeech-sat"),zVo=o(" \u2014 "),_G=a("a"),QVo=o("UniSpeechSatForAudioFrameClassification"),WVo=o(" (UniSpeechSat model)"),HVo=l(),NF=a("li"),wme=a("strong"),UVo=o("wav2vec2"),JVo=o(" \u2014 "),uG=a("a"),YVo=o("Wav2Vec2ForAudioFrameClassification"),KVo=o(" (Wav2Vec2 model)"),ZVo=l(),jF=a("li"),Ame=a("strong"),eXo=o("wavlm"),oXo=o(" \u2014 "),bG=a("a"),rXo=o("WavLMForAudioFrameClassification"),tXo=o(" (WavLM model)"),aXo=l(),DF=a("p"),nXo=o("The model is set in evaluation mode by default using "),yme=a("code"),sXo=o("model.eval()"),lXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),iXo=o("model.train()"),dXo=l(),xme=a("p"),cXo=o("Examples:"),fXo=l(),f(ZA.$$.fragment),aBe=l(),Gd=a("h2"),GF=a("a"),kme=a("span"),f(e0.$$.fragment),mXo=l(),Sme=a("span"),gXo=o("AutoModelForCTC"),nBe=l(),fr=a("div"),f(o0.$$.fragment),hXo=l(),Od=a("p"),pXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FG=a("a"),_Xo=o("from_pretrained()"),uXo=o(" class method or the "),vG=a("a"),bXo=o("from_config()"),FXo=o(` class
method.`),vXo=l(),r0=a("p"),TXo=o("This class cannot be instantiated directly using "),Rme=a("code"),MXo=o("__init__()"),EXo=o(" (throws an error)."),CXo=l(),nt=a("div"),f(t0.$$.fragment),wXo=l(),Bme=a("p"),AXo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),yXo=l(),Vd=a("p"),LXo=o(`Note:
Loading a model from its configuration file does `),Pme=a("strong"),xXo=o("not"),kXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),SXo=o("from_pretrained()"),RXo=o(" to load the model weights."),BXo=l(),$me=a("p"),PXo=o("Examples:"),$Xo=l(),f(a0.$$.fragment),IXo=l(),Ke=a("div"),f(n0.$$.fragment),qXo=l(),Ime=a("p"),NXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jXo=l(),sn=a("p"),DXo=o("The model class to instantiate is selected based on the "),qme=a("code"),GXo=o("model_type"),OXo=o(` property of the config object (either
passed as an argument or loaded from `),Nme=a("code"),VXo=o("pretrained_model_name_or_path"),XXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=a("code"),zXo=o("pretrained_model_name_or_path"),QXo=o(":"),WXo=l(),Re=a("ul"),OF=a("li"),Dme=a("strong"),HXo=o("data2vec-audio"),UXo=o(" \u2014 "),MG=a("a"),JXo=o("Data2VecAudioForCTC"),YXo=o(" (Data2VecAudio model)"),KXo=l(),VF=a("li"),Gme=a("strong"),ZXo=o("hubert"),ezo=o(" \u2014 "),EG=a("a"),ozo=o("HubertForCTC"),rzo=o(" (Hubert model)"),tzo=l(),XF=a("li"),Ome=a("strong"),azo=o("sew"),nzo=o(" \u2014 "),CG=a("a"),szo=o("SEWForCTC"),lzo=o(" (SEW model)"),izo=l(),zF=a("li"),Vme=a("strong"),dzo=o("sew-d"),czo=o(" \u2014 "),wG=a("a"),fzo=o("SEWDForCTC"),mzo=o(" (SEW-D model)"),gzo=l(),QF=a("li"),Xme=a("strong"),hzo=o("unispeech"),pzo=o(" \u2014 "),AG=a("a"),_zo=o("UniSpeechForCTC"),uzo=o(" (UniSpeech model)"),bzo=l(),WF=a("li"),zme=a("strong"),Fzo=o("unispeech-sat"),vzo=o(" \u2014 "),yG=a("a"),Tzo=o("UniSpeechSatForCTC"),Mzo=o(" (UniSpeechSat model)"),Ezo=l(),HF=a("li"),Qme=a("strong"),Czo=o("wav2vec2"),wzo=o(" \u2014 "),LG=a("a"),Azo=o("Wav2Vec2ForCTC"),yzo=o(" (Wav2Vec2 model)"),Lzo=l(),UF=a("li"),Wme=a("strong"),xzo=o("wavlm"),kzo=o(" \u2014 "),xG=a("a"),Szo=o("WavLMForCTC"),Rzo=o(" (WavLM model)"),Bzo=l(),JF=a("p"),Pzo=o("The model is set in evaluation mode by default using "),Hme=a("code"),$zo=o("model.eval()"),Izo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),qzo=o("model.train()"),Nzo=l(),Jme=a("p"),jzo=o("Examples:"),Dzo=l(),f(s0.$$.fragment),sBe=l(),Xd=a("h2"),YF=a("a"),Yme=a("span"),f(l0.$$.fragment),Gzo=l(),Kme=a("span"),Ozo=o("AutoModelForSpeechSeq2Seq"),lBe=l(),mr=a("div"),f(i0.$$.fragment),Vzo=l(),zd=a("p"),Xzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kG=a("a"),zzo=o("from_pretrained()"),Qzo=o(" class method or the "),SG=a("a"),Wzo=o("from_config()"),Hzo=o(` class
method.`),Uzo=l(),d0=a("p"),Jzo=o("This class cannot be instantiated directly using "),Zme=a("code"),Yzo=o("__init__()"),Kzo=o(" (throws an error)."),Zzo=l(),st=a("div"),f(c0.$$.fragment),eQo=l(),ege=a("p"),oQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rQo=l(),Qd=a("p"),tQo=o(`Note:
Loading a model from its configuration file does `),oge=a("strong"),aQo=o("not"),nQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=a("a"),sQo=o("from_pretrained()"),lQo=o(" to load the model weights."),iQo=l(),rge=a("p"),dQo=o("Examples:"),cQo=l(),f(f0.$$.fragment),fQo=l(),Ze=a("div"),f(m0.$$.fragment),mQo=l(),tge=a("p"),gQo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hQo=l(),ln=a("p"),pQo=o("The model class to instantiate is selected based on the "),age=a("code"),_Qo=o("model_type"),uQo=o(` property of the config object (either
passed as an argument or loaded from `),nge=a("code"),bQo=o("pretrained_model_name_or_path"),FQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=a("code"),vQo=o("pretrained_model_name_or_path"),TQo=o(":"),MQo=l(),g0=a("ul"),KF=a("li"),lge=a("strong"),EQo=o("speech-encoder-decoder"),CQo=o(" \u2014 "),BG=a("a"),wQo=o("SpeechEncoderDecoderModel"),AQo=o(" (Speech Encoder decoder model)"),yQo=l(),ZF=a("li"),ige=a("strong"),LQo=o("speech_to_text"),xQo=o(" \u2014 "),PG=a("a"),kQo=o("Speech2TextForConditionalGeneration"),SQo=o(" (Speech2Text model)"),RQo=l(),ev=a("p"),BQo=o("The model is set in evaluation mode by default using "),dge=a("code"),PQo=o("model.eval()"),$Qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cge=a("code"),IQo=o("model.train()"),qQo=l(),fge=a("p"),NQo=o("Examples:"),jQo=l(),f(h0.$$.fragment),iBe=l(),Wd=a("h2"),ov=a("a"),mge=a("span"),f(p0.$$.fragment),DQo=l(),gge=a("span"),GQo=o("AutoModelForAudioXVector"),dBe=l(),gr=a("div"),f(_0.$$.fragment),OQo=l(),Hd=a("p"),VQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$G=a("a"),XQo=o("from_pretrained()"),zQo=o(" class method or the "),IG=a("a"),QQo=o("from_config()"),WQo=o(` class
method.`),HQo=l(),u0=a("p"),UQo=o("This class cannot be instantiated directly using "),hge=a("code"),JQo=o("__init__()"),YQo=o(" (throws an error)."),KQo=l(),lt=a("div"),f(b0.$$.fragment),ZQo=l(),pge=a("p"),eWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),oWo=l(),Ud=a("p"),rWo=o(`Note:
Loading a model from its configuration file does `),_ge=a("strong"),tWo=o("not"),aWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=a("a"),nWo=o("from_pretrained()"),sWo=o(" to load the model weights."),lWo=l(),uge=a("p"),iWo=o("Examples:"),dWo=l(),f(F0.$$.fragment),cWo=l(),eo=a("div"),f(v0.$$.fragment),fWo=l(),bge=a("p"),mWo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gWo=l(),dn=a("p"),hWo=o("The model class to instantiate is selected based on the "),Fge=a("code"),pWo=o("model_type"),_Wo=o(` property of the config object (either
passed as an argument or loaded from `),vge=a("code"),uWo=o("pretrained_model_name_or_path"),bWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=a("code"),FWo=o("pretrained_model_name_or_path"),vWo=o(":"),TWo=l(),cn=a("ul"),rv=a("li"),Mge=a("strong"),MWo=o("data2vec-audio"),EWo=o(" \u2014 "),NG=a("a"),CWo=o("Data2VecAudioForXVector"),wWo=o(" (Data2VecAudio model)"),AWo=l(),tv=a("li"),Ege=a("strong"),yWo=o("unispeech-sat"),LWo=o(" \u2014 "),jG=a("a"),xWo=o("UniSpeechSatForXVector"),kWo=o(" (UniSpeechSat model)"),SWo=l(),av=a("li"),Cge=a("strong"),RWo=o("wav2vec2"),BWo=o(" \u2014 "),DG=a("a"),PWo=o("Wav2Vec2ForXVector"),$Wo=o(" (Wav2Vec2 model)"),IWo=l(),nv=a("li"),wge=a("strong"),qWo=o("wavlm"),NWo=o(" \u2014 "),GG=a("a"),jWo=o("WavLMForXVector"),DWo=o(" (WavLM model)"),GWo=l(),sv=a("p"),OWo=o("The model is set in evaluation mode by default using "),Age=a("code"),VWo=o("model.eval()"),XWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=a("code"),zWo=o("model.train()"),QWo=l(),Lge=a("p"),WWo=o("Examples:"),HWo=l(),f(T0.$$.fragment),cBe=l(),Jd=a("h2"),lv=a("a"),xge=a("span"),f(M0.$$.fragment),UWo=l(),kge=a("span"),JWo=o("AutoModelForMaskedImageModeling"),fBe=l(),hr=a("div"),f(E0.$$.fragment),YWo=l(),Yd=a("p"),KWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OG=a("a"),ZWo=o("from_pretrained()"),eHo=o(" class method or the "),VG=a("a"),oHo=o("from_config()"),rHo=o(` class
method.`),tHo=l(),C0=a("p"),aHo=o("This class cannot be instantiated directly using "),Sge=a("code"),nHo=o("__init__()"),sHo=o(" (throws an error)."),lHo=l(),it=a("div"),f(w0.$$.fragment),iHo=l(),Rge=a("p"),dHo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),cHo=l(),Kd=a("p"),fHo=o(`Note:
Loading a model from its configuration file does `),Bge=a("strong"),mHo=o("not"),gHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=a("a"),hHo=o("from_pretrained()"),pHo=o(" to load the model weights."),_Ho=l(),Pge=a("p"),uHo=o("Examples:"),bHo=l(),f(A0.$$.fragment),FHo=l(),oo=a("div"),f(y0.$$.fragment),vHo=l(),$ge=a("p"),THo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),MHo=l(),fn=a("p"),EHo=o("The model class to instantiate is selected based on the "),Ige=a("code"),CHo=o("model_type"),wHo=o(` property of the config object (either
passed as an argument or loaded from `),qge=a("code"),AHo=o("pretrained_model_name_or_path"),yHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=a("code"),LHo=o("pretrained_model_name_or_path"),xHo=o(":"),kHo=l(),Zd=a("ul"),iv=a("li"),jge=a("strong"),SHo=o("deit"),RHo=o(" \u2014 "),zG=a("a"),BHo=o("DeiTForMaskedImageModeling"),PHo=o(" (DeiT model)"),$Ho=l(),dv=a("li"),Dge=a("strong"),IHo=o("swin"),qHo=o(" \u2014 "),QG=a("a"),NHo=o("SwinForMaskedImageModeling"),jHo=o(" (Swin model)"),DHo=l(),cv=a("li"),Gge=a("strong"),GHo=o("vit"),OHo=o(" \u2014 "),WG=a("a"),VHo=o("ViTForMaskedImageModeling"),XHo=o(" (ViT model)"),zHo=l(),fv=a("p"),QHo=o("The model is set in evaluation mode by default using "),Oge=a("code"),WHo=o("model.eval()"),HHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=a("code"),UHo=o("model.train()"),JHo=l(),Xge=a("p"),YHo=o("Examples:"),KHo=l(),f(L0.$$.fragment),mBe=l(),ec=a("h2"),mv=a("a"),zge=a("span"),f(x0.$$.fragment),ZHo=l(),Qge=a("span"),eUo=o("AutoModelForObjectDetection"),gBe=l(),pr=a("div"),f(k0.$$.fragment),oUo=l(),oc=a("p"),rUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HG=a("a"),tUo=o("from_pretrained()"),aUo=o(" class method or the "),UG=a("a"),nUo=o("from_config()"),sUo=o(` class
method.`),lUo=l(),S0=a("p"),iUo=o("This class cannot be instantiated directly using "),Wge=a("code"),dUo=o("__init__()"),cUo=o(" (throws an error)."),fUo=l(),dt=a("div"),f(R0.$$.fragment),mUo=l(),Hge=a("p"),gUo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),hUo=l(),rc=a("p"),pUo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),_Uo=o("not"),uUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),bUo=o("from_pretrained()"),FUo=o(" to load the model weights."),vUo=l(),Jge=a("p"),TUo=o("Examples:"),MUo=l(),f(B0.$$.fragment),EUo=l(),ro=a("div"),f(P0.$$.fragment),CUo=l(),Yge=a("p"),wUo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),AUo=l(),mn=a("p"),yUo=o("The model class to instantiate is selected based on the "),Kge=a("code"),LUo=o("model_type"),xUo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),kUo=o("pretrained_model_name_or_path"),SUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),RUo=o("pretrained_model_name_or_path"),BUo=o(":"),PUo=l(),ohe=a("ul"),gv=a("li"),rhe=a("strong"),$Uo=o("detr"),IUo=o(" \u2014 "),YG=a("a"),qUo=o("DetrForObjectDetection"),NUo=o(" (DETR model)"),jUo=l(),hv=a("p"),DUo=o("The model is set in evaluation mode by default using "),the=a("code"),GUo=o("model.eval()"),OUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=a("code"),VUo=o("model.train()"),XUo=l(),nhe=a("p"),zUo=o("Examples:"),QUo=l(),f($0.$$.fragment),hBe=l(),tc=a("h2"),pv=a("a"),she=a("span"),f(I0.$$.fragment),WUo=l(),lhe=a("span"),HUo=o("AutoModelForImageSegmentation"),pBe=l(),_r=a("div"),f(q0.$$.fragment),UUo=l(),ac=a("p"),JUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),KG=a("a"),YUo=o("from_pretrained()"),KUo=o(" class method or the "),ZG=a("a"),ZUo=o("from_config()"),eJo=o(` class
method.`),oJo=l(),N0=a("p"),rJo=o("This class cannot be instantiated directly using "),ihe=a("code"),tJo=o("__init__()"),aJo=o(" (throws an error)."),nJo=l(),ct=a("div"),f(j0.$$.fragment),sJo=l(),dhe=a("p"),lJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),iJo=l(),nc=a("p"),dJo=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),cJo=o("not"),fJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),mJo=o("from_pretrained()"),gJo=o(" to load the model weights."),hJo=l(),fhe=a("p"),pJo=o("Examples:"),_Jo=l(),f(D0.$$.fragment),uJo=l(),to=a("div"),f(G0.$$.fragment),bJo=l(),mhe=a("p"),FJo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),vJo=l(),gn=a("p"),TJo=o("The model class to instantiate is selected based on the "),ghe=a("code"),MJo=o("model_type"),EJo=o(` property of the config object (either
passed as an argument or loaded from `),hhe=a("code"),CJo=o("pretrained_model_name_or_path"),wJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),AJo=o("pretrained_model_name_or_path"),yJo=o(":"),LJo=l(),_he=a("ul"),_v=a("li"),uhe=a("strong"),xJo=o("detr"),kJo=o(" \u2014 "),oO=a("a"),SJo=o("DetrForSegmentation"),RJo=o(" (DETR model)"),BJo=l(),uv=a("p"),PJo=o("The model is set in evaluation mode by default using "),bhe=a("code"),$Jo=o("model.eval()"),IJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=a("code"),qJo=o("model.train()"),NJo=l(),vhe=a("p"),jJo=o("Examples:"),DJo=l(),f(O0.$$.fragment),_Be=l(),sc=a("h2"),bv=a("a"),The=a("span"),f(V0.$$.fragment),GJo=l(),Mhe=a("span"),OJo=o("AutoModelForSemanticSegmentation"),uBe=l(),ur=a("div"),f(X0.$$.fragment),VJo=l(),lc=a("p"),XJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rO=a("a"),zJo=o("from_pretrained()"),QJo=o(" class method or the "),tO=a("a"),WJo=o("from_config()"),HJo=o(` class
method.`),UJo=l(),z0=a("p"),JJo=o("This class cannot be instantiated directly using "),Ehe=a("code"),YJo=o("__init__()"),KJo=o(" (throws an error)."),ZJo=l(),ft=a("div"),f(Q0.$$.fragment),eYo=l(),Che=a("p"),oYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),rYo=l(),ic=a("p"),tYo=o(`Note:
Loading a model from its configuration file does `),whe=a("strong"),aYo=o("not"),nYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),sYo=o("from_pretrained()"),lYo=o(" to load the model weights."),iYo=l(),Ahe=a("p"),dYo=o("Examples:"),cYo=l(),f(W0.$$.fragment),fYo=l(),ao=a("div"),f(H0.$$.fragment),mYo=l(),yhe=a("p"),gYo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),hYo=l(),hn=a("p"),pYo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),_Yo=o("model_type"),uYo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),bYo=o("pretrained_model_name_or_path"),FYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=a("code"),vYo=o("pretrained_model_name_or_path"),TYo=o(":"),MYo=l(),dc=a("ul"),Fv=a("li"),She=a("strong"),EYo=o("beit"),CYo=o(" \u2014 "),nO=a("a"),wYo=o("BeitForSemanticSegmentation"),AYo=o(" (BEiT model)"),yYo=l(),vv=a("li"),Rhe=a("strong"),LYo=o("dpt"),xYo=o(" \u2014 "),sO=a("a"),kYo=o("DPTForSemanticSegmentation"),SYo=o(" (DPT model)"),RYo=l(),Tv=a("li"),Bhe=a("strong"),BYo=o("segformer"),PYo=o(" \u2014 "),lO=a("a"),$Yo=o("SegformerForSemanticSegmentation"),IYo=o(" (SegFormer model)"),qYo=l(),Mv=a("p"),NYo=o("The model is set in evaluation mode by default using "),Phe=a("code"),jYo=o("model.eval()"),DYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=a("code"),GYo=o("model.train()"),OYo=l(),Ihe=a("p"),VYo=o("Examples:"),XYo=l(),f(U0.$$.fragment),bBe=l(),cc=a("h2"),Ev=a("a"),qhe=a("span"),f(J0.$$.fragment),zYo=l(),Nhe=a("span"),QYo=o("AutoModelForInstanceSegmentation"),FBe=l(),br=a("div"),f(Y0.$$.fragment),WYo=l(),fc=a("p"),HYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iO=a("a"),UYo=o("from_pretrained()"),JYo=o(" class method or the "),dO=a("a"),YYo=o("from_config()"),KYo=o(` class
method.`),ZYo=l(),K0=a("p"),eKo=o("This class cannot be instantiated directly using "),jhe=a("code"),oKo=o("__init__()"),rKo=o(" (throws an error)."),tKo=l(),mt=a("div"),f(Z0.$$.fragment),aKo=l(),Dhe=a("p"),nKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),sKo=l(),mc=a("p"),lKo=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),iKo=o("not"),dKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),cKo=o("from_pretrained()"),fKo=o(" to load the model weights."),mKo=l(),Ohe=a("p"),gKo=o("Examples:"),hKo=l(),f(ey.$$.fragment),pKo=l(),no=a("div"),f(oy.$$.fragment),_Ko=l(),Vhe=a("p"),uKo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),bKo=l(),pn=a("p"),FKo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),vKo=o("model_type"),TKo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),MKo=o("pretrained_model_name_or_path"),EKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),CKo=o("pretrained_model_name_or_path"),wKo=o(":"),AKo=l(),Whe=a("ul"),Cv=a("li"),Hhe=a("strong"),yKo=o("maskformer"),LKo=o(" \u2014 "),fO=a("a"),xKo=o("MaskFormerForInstanceSegmentation"),kKo=o(" (MaskFormer model)"),SKo=l(),wv=a("p"),RKo=o("The model is set in evaluation mode by default using "),Uhe=a("code"),BKo=o("model.eval()"),PKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jhe=a("code"),$Ko=o("model.train()"),IKo=l(),Yhe=a("p"),qKo=o("Examples:"),NKo=l(),f(ry.$$.fragment),vBe=l(),gc=a("h2"),Av=a("a"),Khe=a("span"),f(ty.$$.fragment),jKo=l(),Zhe=a("span"),DKo=o("TFAutoModel"),TBe=l(),Fr=a("div"),f(ay.$$.fragment),GKo=l(),hc=a("p"),OKo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mO=a("a"),VKo=o("from_pretrained()"),XKo=o(" class method or the "),gO=a("a"),zKo=o("from_config()"),QKo=o(` class
method.`),WKo=l(),ny=a("p"),HKo=o("This class cannot be instantiated directly using "),epe=a("code"),UKo=o("__init__()"),JKo=o(" (throws an error)."),YKo=l(),gt=a("div"),f(sy.$$.fragment),KKo=l(),ope=a("p"),ZKo=o("Instantiates one of the base model classes of the library from a configuration."),eZo=l(),pc=a("p"),oZo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),rZo=o("not"),tZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),aZo=o("from_pretrained()"),nZo=o(" to load the model weights."),sZo=l(),tpe=a("p"),lZo=o("Examples:"),iZo=l(),f(ly.$$.fragment),dZo=l(),ho=a("div"),f(iy.$$.fragment),cZo=l(),ape=a("p"),fZo=o("Instantiate one of the base model classes of the library from a pretrained model."),mZo=l(),_n=a("p"),gZo=o("The model class to instantiate is selected based on the "),npe=a("code"),hZo=o("model_type"),pZo=o(` property of the config object (either
passed as an argument or loaded from `),spe=a("code"),_Zo=o("pretrained_model_name_or_path"),uZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=a("code"),bZo=o("pretrained_model_name_or_path"),FZo=o(":"),vZo=l(),x=a("ul"),yv=a("li"),ipe=a("strong"),TZo=o("albert"),MZo=o(" \u2014 "),pO=a("a"),EZo=o("TFAlbertModel"),CZo=o(" (ALBERT model)"),wZo=l(),Lv=a("li"),dpe=a("strong"),AZo=o("bart"),yZo=o(" \u2014 "),_O=a("a"),LZo=o("TFBartModel"),xZo=o(" (BART model)"),kZo=l(),xv=a("li"),cpe=a("strong"),SZo=o("bert"),RZo=o(" \u2014 "),uO=a("a"),BZo=o("TFBertModel"),PZo=o(" (BERT model)"),$Zo=l(),kv=a("li"),fpe=a("strong"),IZo=o("blenderbot"),qZo=o(" \u2014 "),bO=a("a"),NZo=o("TFBlenderbotModel"),jZo=o(" (Blenderbot model)"),DZo=l(),Sv=a("li"),mpe=a("strong"),GZo=o("blenderbot-small"),OZo=o(" \u2014 "),FO=a("a"),VZo=o("TFBlenderbotSmallModel"),XZo=o(" (BlenderbotSmall model)"),zZo=l(),Rv=a("li"),gpe=a("strong"),QZo=o("camembert"),WZo=o(" \u2014 "),vO=a("a"),HZo=o("TFCamembertModel"),UZo=o(" (CamemBERT model)"),JZo=l(),Bv=a("li"),hpe=a("strong"),YZo=o("clip"),KZo=o(" \u2014 "),TO=a("a"),ZZo=o("TFCLIPModel"),eer=o(" (CLIP model)"),oer=l(),Pv=a("li"),ppe=a("strong"),rer=o("convbert"),ter=o(" \u2014 "),MO=a("a"),aer=o("TFConvBertModel"),ner=o(" (ConvBERT model)"),ser=l(),$v=a("li"),_pe=a("strong"),ler=o("convnext"),ier=o(" \u2014 "),EO=a("a"),der=o("TFConvNextModel"),cer=o(" (ConvNext model)"),fer=l(),Iv=a("li"),upe=a("strong"),mer=o("ctrl"),ger=o(" \u2014 "),CO=a("a"),her=o("TFCTRLModel"),per=o(" (CTRL model)"),_er=l(),qv=a("li"),bpe=a("strong"),uer=o("deberta"),ber=o(" \u2014 "),wO=a("a"),Fer=o("TFDebertaModel"),ver=o(" (DeBERTa model)"),Ter=l(),Nv=a("li"),Fpe=a("strong"),Mer=o("deberta-v2"),Eer=o(" \u2014 "),AO=a("a"),Cer=o("TFDebertaV2Model"),wer=o(" (DeBERTa-v2 model)"),Aer=l(),jv=a("li"),vpe=a("strong"),yer=o("distilbert"),Ler=o(" \u2014 "),yO=a("a"),xer=o("TFDistilBertModel"),ker=o(" (DistilBERT model)"),Ser=l(),Dv=a("li"),Tpe=a("strong"),Rer=o("dpr"),Ber=o(" \u2014 "),LO=a("a"),Per=o("TFDPRQuestionEncoder"),$er=o(" (DPR model)"),Ier=l(),Gv=a("li"),Mpe=a("strong"),qer=o("electra"),Ner=o(" \u2014 "),xO=a("a"),jer=o("TFElectraModel"),Der=o(" (ELECTRA model)"),Ger=l(),Ov=a("li"),Epe=a("strong"),Oer=o("flaubert"),Ver=o(" \u2014 "),kO=a("a"),Xer=o("TFFlaubertModel"),zer=o(" (FlauBERT model)"),Qer=l(),Gs=a("li"),Cpe=a("strong"),Wer=o("funnel"),Her=o(" \u2014 "),SO=a("a"),Uer=o("TFFunnelModel"),Jer=o(" or "),RO=a("a"),Yer=o("TFFunnelBaseModel"),Ker=o(" (Funnel Transformer model)"),Zer=l(),Vv=a("li"),wpe=a("strong"),eor=o("gpt2"),oor=o(" \u2014 "),BO=a("a"),ror=o("TFGPT2Model"),tor=o(" (OpenAI GPT-2 model)"),aor=l(),Xv=a("li"),Ape=a("strong"),nor=o("gptj"),sor=o(" \u2014 "),PO=a("a"),lor=o("TFGPTJModel"),ior=o(" (GPT-J model)"),dor=l(),zv=a("li"),ype=a("strong"),cor=o("hubert"),mor=o(" \u2014 "),$O=a("a"),gor=o("TFHubertModel"),hor=o(" (Hubert model)"),por=l(),Qv=a("li"),Lpe=a("strong"),_or=o("layoutlm"),uor=o(" \u2014 "),IO=a("a"),bor=o("TFLayoutLMModel"),For=o(" (LayoutLM model)"),vor=l(),Wv=a("li"),xpe=a("strong"),Tor=o("led"),Mor=o(" \u2014 "),qO=a("a"),Eor=o("TFLEDModel"),Cor=o(" (LED model)"),wor=l(),Hv=a("li"),kpe=a("strong"),Aor=o("longformer"),yor=o(" \u2014 "),NO=a("a"),Lor=o("TFLongformerModel"),xor=o(" (Longformer model)"),kor=l(),Uv=a("li"),Spe=a("strong"),Sor=o("lxmert"),Ror=o(" \u2014 "),jO=a("a"),Bor=o("TFLxmertModel"),Por=o(" (LXMERT model)"),$or=l(),Jv=a("li"),Rpe=a("strong"),Ior=o("marian"),qor=o(" \u2014 "),DO=a("a"),Nor=o("TFMarianModel"),jor=o(" (Marian model)"),Dor=l(),Yv=a("li"),Bpe=a("strong"),Gor=o("mbart"),Oor=o(" \u2014 "),GO=a("a"),Vor=o("TFMBartModel"),Xor=o(" (mBART model)"),zor=l(),Kv=a("li"),Ppe=a("strong"),Qor=o("mobilebert"),Wor=o(" \u2014 "),OO=a("a"),Hor=o("TFMobileBertModel"),Uor=o(" (MobileBERT model)"),Jor=l(),Zv=a("li"),$pe=a("strong"),Yor=o("mpnet"),Kor=o(" \u2014 "),VO=a("a"),Zor=o("TFMPNetModel"),err=o(" (MPNet model)"),orr=l(),e6=a("li"),Ipe=a("strong"),rrr=o("mt5"),trr=o(" \u2014 "),XO=a("a"),arr=o("TFMT5Model"),nrr=o(" (mT5 model)"),srr=l(),o6=a("li"),qpe=a("strong"),lrr=o("openai-gpt"),irr=o(" \u2014 "),zO=a("a"),drr=o("TFOpenAIGPTModel"),crr=o(" (OpenAI GPT model)"),frr=l(),r6=a("li"),Npe=a("strong"),mrr=o("pegasus"),grr=o(" \u2014 "),QO=a("a"),hrr=o("TFPegasusModel"),prr=o(" (Pegasus model)"),_rr=l(),t6=a("li"),jpe=a("strong"),urr=o("rembert"),brr=o(" \u2014 "),WO=a("a"),Frr=o("TFRemBertModel"),vrr=o(" (RemBERT model)"),Trr=l(),a6=a("li"),Dpe=a("strong"),Mrr=o("roberta"),Err=o(" \u2014 "),HO=a("a"),Crr=o("TFRobertaModel"),wrr=o(" (RoBERTa model)"),Arr=l(),n6=a("li"),Gpe=a("strong"),yrr=o("roformer"),Lrr=o(" \u2014 "),UO=a("a"),xrr=o("TFRoFormerModel"),krr=o(" (RoFormer model)"),Srr=l(),s6=a("li"),Ope=a("strong"),Rrr=o("speech_to_text"),Brr=o(" \u2014 "),JO=a("a"),Prr=o("TFSpeech2TextModel"),$rr=o(" (Speech2Text model)"),Irr=l(),l6=a("li"),Vpe=a("strong"),qrr=o("t5"),Nrr=o(" \u2014 "),YO=a("a"),jrr=o("TFT5Model"),Drr=o(" (T5 model)"),Grr=l(),i6=a("li"),Xpe=a("strong"),Orr=o("tapas"),Vrr=o(" \u2014 "),KO=a("a"),Xrr=o("TFTapasModel"),zrr=o(" (TAPAS model)"),Qrr=l(),d6=a("li"),zpe=a("strong"),Wrr=o("transfo-xl"),Hrr=o(" \u2014 "),ZO=a("a"),Urr=o("TFTransfoXLModel"),Jrr=o(" (Transformer-XL model)"),Yrr=l(),c6=a("li"),Qpe=a("strong"),Krr=o("vit"),Zrr=o(" \u2014 "),eV=a("a"),etr=o("TFViTModel"),otr=o(" (ViT model)"),rtr=l(),f6=a("li"),Wpe=a("strong"),ttr=o("vit_mae"),atr=o(" \u2014 "),oV=a("a"),ntr=o("TFViTMAEModel"),str=o(" (ViTMAE model)"),ltr=l(),m6=a("li"),Hpe=a("strong"),itr=o("wav2vec2"),dtr=o(" \u2014 "),rV=a("a"),ctr=o("TFWav2Vec2Model"),ftr=o(" (Wav2Vec2 model)"),mtr=l(),g6=a("li"),Upe=a("strong"),gtr=o("xlm"),htr=o(" \u2014 "),tV=a("a"),ptr=o("TFXLMModel"),_tr=o(" (XLM model)"),utr=l(),h6=a("li"),Jpe=a("strong"),btr=o("xlm-roberta"),Ftr=o(" \u2014 "),aV=a("a"),vtr=o("TFXLMRobertaModel"),Ttr=o(" (XLM-RoBERTa model)"),Mtr=l(),p6=a("li"),Ype=a("strong"),Etr=o("xlnet"),Ctr=o(" \u2014 "),nV=a("a"),wtr=o("TFXLNetModel"),Atr=o(" (XLNet model)"),ytr=l(),Kpe=a("p"),Ltr=o("Examples:"),xtr=l(),f(dy.$$.fragment),MBe=l(),_c=a("h2"),_6=a("a"),Zpe=a("span"),f(cy.$$.fragment),ktr=l(),e_e=a("span"),Str=o("TFAutoModelForPreTraining"),EBe=l(),vr=a("div"),f(fy.$$.fragment),Rtr=l(),uc=a("p"),Btr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sV=a("a"),Ptr=o("from_pretrained()"),$tr=o(" class method or the "),lV=a("a"),Itr=o("from_config()"),qtr=o(` class
method.`),Ntr=l(),my=a("p"),jtr=o("This class cannot be instantiated directly using "),o_e=a("code"),Dtr=o("__init__()"),Gtr=o(" (throws an error)."),Otr=l(),ht=a("div"),f(gy.$$.fragment),Vtr=l(),r_e=a("p"),Xtr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ztr=l(),bc=a("p"),Qtr=o(`Note:
Loading a model from its configuration file does `),t_e=a("strong"),Wtr=o("not"),Htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),Utr=o("from_pretrained()"),Jtr=o(" to load the model weights."),Ytr=l(),a_e=a("p"),Ktr=o("Examples:"),Ztr=l(),f(hy.$$.fragment),ear=l(),po=a("div"),f(py.$$.fragment),oar=l(),n_e=a("p"),rar=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tar=l(),un=a("p"),aar=o("The model class to instantiate is selected based on the "),s_e=a("code"),nar=o("model_type"),sar=o(` property of the config object (either
passed as an argument or loaded from `),l_e=a("code"),lar=o("pretrained_model_name_or_path"),iar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=a("code"),dar=o("pretrained_model_name_or_path"),car=o(":"),far=l(),H=a("ul"),u6=a("li"),d_e=a("strong"),mar=o("albert"),gar=o(" \u2014 "),dV=a("a"),har=o("TFAlbertForPreTraining"),par=o(" (ALBERT model)"),_ar=l(),b6=a("li"),c_e=a("strong"),uar=o("bart"),bar=o(" \u2014 "),cV=a("a"),Far=o("TFBartForConditionalGeneration"),Tar=o(" (BART model)"),Mar=l(),F6=a("li"),f_e=a("strong"),Ear=o("bert"),Car=o(" \u2014 "),fV=a("a"),war=o("TFBertForPreTraining"),Aar=o(" (BERT model)"),yar=l(),v6=a("li"),m_e=a("strong"),Lar=o("camembert"),xar=o(" \u2014 "),mV=a("a"),kar=o("TFCamembertForMaskedLM"),Sar=o(" (CamemBERT model)"),Rar=l(),T6=a("li"),g_e=a("strong"),Bar=o("ctrl"),Par=o(" \u2014 "),gV=a("a"),$ar=o("TFCTRLLMHeadModel"),Iar=o(" (CTRL model)"),qar=l(),M6=a("li"),h_e=a("strong"),Nar=o("distilbert"),jar=o(" \u2014 "),hV=a("a"),Dar=o("TFDistilBertForMaskedLM"),Gar=o(" (DistilBERT model)"),Oar=l(),E6=a("li"),p_e=a("strong"),Var=o("electra"),Xar=o(" \u2014 "),pV=a("a"),zar=o("TFElectraForPreTraining"),Qar=o(" (ELECTRA model)"),War=l(),C6=a("li"),__e=a("strong"),Har=o("flaubert"),Uar=o(" \u2014 "),_V=a("a"),Jar=o("TFFlaubertWithLMHeadModel"),Yar=o(" (FlauBERT model)"),Kar=l(),w6=a("li"),u_e=a("strong"),Zar=o("funnel"),enr=o(" \u2014 "),uV=a("a"),onr=o("TFFunnelForPreTraining"),rnr=o(" (Funnel Transformer model)"),tnr=l(),A6=a("li"),b_e=a("strong"),anr=o("gpt2"),nnr=o(" \u2014 "),bV=a("a"),snr=o("TFGPT2LMHeadModel"),lnr=o(" (OpenAI GPT-2 model)"),inr=l(),y6=a("li"),F_e=a("strong"),dnr=o("layoutlm"),cnr=o(" \u2014 "),FV=a("a"),fnr=o("TFLayoutLMForMaskedLM"),mnr=o(" (LayoutLM model)"),gnr=l(),L6=a("li"),v_e=a("strong"),hnr=o("lxmert"),pnr=o(" \u2014 "),vV=a("a"),_nr=o("TFLxmertForPreTraining"),unr=o(" (LXMERT model)"),bnr=l(),x6=a("li"),T_e=a("strong"),Fnr=o("mobilebert"),vnr=o(" \u2014 "),TV=a("a"),Tnr=o("TFMobileBertForPreTraining"),Mnr=o(" (MobileBERT model)"),Enr=l(),k6=a("li"),M_e=a("strong"),Cnr=o("mpnet"),wnr=o(" \u2014 "),MV=a("a"),Anr=o("TFMPNetForMaskedLM"),ynr=o(" (MPNet model)"),Lnr=l(),S6=a("li"),E_e=a("strong"),xnr=o("openai-gpt"),knr=o(" \u2014 "),EV=a("a"),Snr=o("TFOpenAIGPTLMHeadModel"),Rnr=o(" (OpenAI GPT model)"),Bnr=l(),R6=a("li"),C_e=a("strong"),Pnr=o("roberta"),$nr=o(" \u2014 "),CV=a("a"),Inr=o("TFRobertaForMaskedLM"),qnr=o(" (RoBERTa model)"),Nnr=l(),B6=a("li"),w_e=a("strong"),jnr=o("t5"),Dnr=o(" \u2014 "),wV=a("a"),Gnr=o("TFT5ForConditionalGeneration"),Onr=o(" (T5 model)"),Vnr=l(),P6=a("li"),A_e=a("strong"),Xnr=o("tapas"),znr=o(" \u2014 "),AV=a("a"),Qnr=o("TFTapasForMaskedLM"),Wnr=o(" (TAPAS model)"),Hnr=l(),$6=a("li"),y_e=a("strong"),Unr=o("transfo-xl"),Jnr=o(" \u2014 "),yV=a("a"),Ynr=o("TFTransfoXLLMHeadModel"),Knr=o(" (Transformer-XL model)"),Znr=l(),I6=a("li"),L_e=a("strong"),esr=o("vit_mae"),osr=o(" \u2014 "),LV=a("a"),rsr=o("TFViTMAEForPreTraining"),tsr=o(" (ViTMAE model)"),asr=l(),q6=a("li"),x_e=a("strong"),nsr=o("xlm"),ssr=o(" \u2014 "),xV=a("a"),lsr=o("TFXLMWithLMHeadModel"),isr=o(" (XLM model)"),dsr=l(),N6=a("li"),k_e=a("strong"),csr=o("xlm-roberta"),fsr=o(" \u2014 "),kV=a("a"),msr=o("TFXLMRobertaForMaskedLM"),gsr=o(" (XLM-RoBERTa model)"),hsr=l(),j6=a("li"),S_e=a("strong"),psr=o("xlnet"),_sr=o(" \u2014 "),SV=a("a"),usr=o("TFXLNetLMHeadModel"),bsr=o(" (XLNet model)"),Fsr=l(),R_e=a("p"),vsr=o("Examples:"),Tsr=l(),f(_y.$$.fragment),CBe=l(),Fc=a("h2"),D6=a("a"),B_e=a("span"),f(uy.$$.fragment),Msr=l(),P_e=a("span"),Esr=o("TFAutoModelForCausalLM"),wBe=l(),Tr=a("div"),f(by.$$.fragment),Csr=l(),vc=a("p"),wsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RV=a("a"),Asr=o("from_pretrained()"),ysr=o(" class method or the "),BV=a("a"),Lsr=o("from_config()"),xsr=o(` class
method.`),ksr=l(),Fy=a("p"),Ssr=o("This class cannot be instantiated directly using "),$_e=a("code"),Rsr=o("__init__()"),Bsr=o(" (throws an error)."),Psr=l(),pt=a("div"),f(vy.$$.fragment),$sr=l(),I_e=a("p"),Isr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qsr=l(),Tc=a("p"),Nsr=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),jsr=o("not"),Dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),Gsr=o("from_pretrained()"),Osr=o(" to load the model weights."),Vsr=l(),N_e=a("p"),Xsr=o("Examples:"),zsr=l(),f(Ty.$$.fragment),Qsr=l(),_o=a("div"),f(My.$$.fragment),Wsr=l(),j_e=a("p"),Hsr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Usr=l(),bn=a("p"),Jsr=o("The model class to instantiate is selected based on the "),D_e=a("code"),Ysr=o("model_type"),Ksr=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),Zsr=o("pretrained_model_name_or_path"),elr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),olr=o("pretrained_model_name_or_path"),rlr=o(":"),tlr=l(),fe=a("ul"),G6=a("li"),V_e=a("strong"),alr=o("bert"),nlr=o(" \u2014 "),$V=a("a"),slr=o("TFBertLMHeadModel"),llr=o(" (BERT model)"),ilr=l(),O6=a("li"),X_e=a("strong"),dlr=o("camembert"),clr=o(" \u2014 "),IV=a("a"),flr=o("TFCamembertForCausalLM"),mlr=o(" (CamemBERT model)"),glr=l(),V6=a("li"),z_e=a("strong"),hlr=o("ctrl"),plr=o(" \u2014 "),qV=a("a"),_lr=o("TFCTRLLMHeadModel"),ulr=o(" (CTRL model)"),blr=l(),X6=a("li"),Q_e=a("strong"),Flr=o("gpt2"),vlr=o(" \u2014 "),NV=a("a"),Tlr=o("TFGPT2LMHeadModel"),Mlr=o(" (OpenAI GPT-2 model)"),Elr=l(),z6=a("li"),W_e=a("strong"),Clr=o("gptj"),wlr=o(" \u2014 "),jV=a("a"),Alr=o("TFGPTJForCausalLM"),ylr=o(" (GPT-J model)"),Llr=l(),Q6=a("li"),H_e=a("strong"),xlr=o("openai-gpt"),klr=o(" \u2014 "),DV=a("a"),Slr=o("TFOpenAIGPTLMHeadModel"),Rlr=o(" (OpenAI GPT model)"),Blr=l(),W6=a("li"),U_e=a("strong"),Plr=o("rembert"),$lr=o(" \u2014 "),GV=a("a"),Ilr=o("TFRemBertForCausalLM"),qlr=o(" (RemBERT model)"),Nlr=l(),H6=a("li"),J_e=a("strong"),jlr=o("roberta"),Dlr=o(" \u2014 "),OV=a("a"),Glr=o("TFRobertaForCausalLM"),Olr=o(" (RoBERTa model)"),Vlr=l(),U6=a("li"),Y_e=a("strong"),Xlr=o("roformer"),zlr=o(" \u2014 "),VV=a("a"),Qlr=o("TFRoFormerForCausalLM"),Wlr=o(" (RoFormer model)"),Hlr=l(),J6=a("li"),K_e=a("strong"),Ulr=o("transfo-xl"),Jlr=o(" \u2014 "),XV=a("a"),Ylr=o("TFTransfoXLLMHeadModel"),Klr=o(" (Transformer-XL model)"),Zlr=l(),Y6=a("li"),Z_e=a("strong"),eir=o("xlm"),oir=o(" \u2014 "),zV=a("a"),rir=o("TFXLMWithLMHeadModel"),tir=o(" (XLM model)"),air=l(),K6=a("li"),eue=a("strong"),nir=o("xlnet"),sir=o(" \u2014 "),QV=a("a"),lir=o("TFXLNetLMHeadModel"),iir=o(" (XLNet model)"),dir=l(),oue=a("p"),cir=o("Examples:"),fir=l(),f(Ey.$$.fragment),ABe=l(),Mc=a("h2"),Z6=a("a"),rue=a("span"),f(Cy.$$.fragment),mir=l(),tue=a("span"),gir=o("TFAutoModelForImageClassification"),yBe=l(),Mr=a("div"),f(wy.$$.fragment),hir=l(),Ec=a("p"),pir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WV=a("a"),_ir=o("from_pretrained()"),uir=o(" class method or the "),HV=a("a"),bir=o("from_config()"),Fir=o(` class
method.`),vir=l(),Ay=a("p"),Tir=o("This class cannot be instantiated directly using "),aue=a("code"),Mir=o("__init__()"),Eir=o(" (throws an error)."),Cir=l(),_t=a("div"),f(yy.$$.fragment),wir=l(),nue=a("p"),Air=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yir=l(),Cc=a("p"),Lir=o(`Note:
Loading a model from its configuration file does `),sue=a("strong"),xir=o("not"),kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),Sir=o("from_pretrained()"),Rir=o(" to load the model weights."),Bir=l(),lue=a("p"),Pir=o("Examples:"),$ir=l(),f(Ly.$$.fragment),Iir=l(),uo=a("div"),f(xy.$$.fragment),qir=l(),iue=a("p"),Nir=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jir=l(),Fn=a("p"),Dir=o("The model class to instantiate is selected based on the "),due=a("code"),Gir=o("model_type"),Oir=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),Vir=o("pretrained_model_name_or_path"),Xir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),zir=o("pretrained_model_name_or_path"),Qir=o(":"),Wir=l(),ky=a("ul"),eT=a("li"),mue=a("strong"),Hir=o("convnext"),Uir=o(" \u2014 "),JV=a("a"),Jir=o("TFConvNextForImageClassification"),Yir=o(" (ConvNext model)"),Kir=l(),oT=a("li"),gue=a("strong"),Zir=o("vit"),edr=o(" \u2014 "),YV=a("a"),odr=o("TFViTForImageClassification"),rdr=o(" (ViT model)"),tdr=l(),hue=a("p"),adr=o("Examples:"),ndr=l(),f(Sy.$$.fragment),LBe=l(),wc=a("h2"),rT=a("a"),pue=a("span"),f(Ry.$$.fragment),sdr=l(),_ue=a("span"),ldr=o("TFAutoModelForMaskedLM"),xBe=l(),Er=a("div"),f(By.$$.fragment),idr=l(),Ac=a("p"),ddr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KV=a("a"),cdr=o("from_pretrained()"),fdr=o(" class method or the "),ZV=a("a"),mdr=o("from_config()"),gdr=o(` class
method.`),hdr=l(),Py=a("p"),pdr=o("This class cannot be instantiated directly using "),uue=a("code"),_dr=o("__init__()"),udr=o(" (throws an error)."),bdr=l(),ut=a("div"),f($y.$$.fragment),Fdr=l(),bue=a("p"),vdr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Tdr=l(),yc=a("p"),Mdr=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),Edr=o("not"),Cdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),wdr=o("from_pretrained()"),Adr=o(" to load the model weights."),ydr=l(),vue=a("p"),Ldr=o("Examples:"),xdr=l(),f(Iy.$$.fragment),kdr=l(),bo=a("div"),f(qy.$$.fragment),Sdr=l(),Tue=a("p"),Rdr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bdr=l(),vn=a("p"),Pdr=o("The model class to instantiate is selected based on the "),Mue=a("code"),$dr=o("model_type"),Idr=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),qdr=o("pretrained_model_name_or_path"),Ndr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),jdr=o("pretrained_model_name_or_path"),Ddr=o(":"),Gdr=l(),J=a("ul"),tT=a("li"),wue=a("strong"),Odr=o("albert"),Vdr=o(" \u2014 "),oX=a("a"),Xdr=o("TFAlbertForMaskedLM"),zdr=o(" (ALBERT model)"),Qdr=l(),aT=a("li"),Aue=a("strong"),Wdr=o("bert"),Hdr=o(" \u2014 "),rX=a("a"),Udr=o("TFBertForMaskedLM"),Jdr=o(" (BERT model)"),Ydr=l(),nT=a("li"),yue=a("strong"),Kdr=o("camembert"),Zdr=o(" \u2014 "),tX=a("a"),ecr=o("TFCamembertForMaskedLM"),ocr=o(" (CamemBERT model)"),rcr=l(),sT=a("li"),Lue=a("strong"),tcr=o("convbert"),acr=o(" \u2014 "),aX=a("a"),ncr=o("TFConvBertForMaskedLM"),scr=o(" (ConvBERT model)"),lcr=l(),lT=a("li"),xue=a("strong"),icr=o("deberta"),dcr=o(" \u2014 "),nX=a("a"),ccr=o("TFDebertaForMaskedLM"),fcr=o(" (DeBERTa model)"),mcr=l(),iT=a("li"),kue=a("strong"),gcr=o("deberta-v2"),hcr=o(" \u2014 "),sX=a("a"),pcr=o("TFDebertaV2ForMaskedLM"),_cr=o(" (DeBERTa-v2 model)"),ucr=l(),dT=a("li"),Sue=a("strong"),bcr=o("distilbert"),Fcr=o(" \u2014 "),lX=a("a"),vcr=o("TFDistilBertForMaskedLM"),Tcr=o(" (DistilBERT model)"),Mcr=l(),cT=a("li"),Rue=a("strong"),Ecr=o("electra"),Ccr=o(" \u2014 "),iX=a("a"),wcr=o("TFElectraForMaskedLM"),Acr=o(" (ELECTRA model)"),ycr=l(),fT=a("li"),Bue=a("strong"),Lcr=o("flaubert"),xcr=o(" \u2014 "),dX=a("a"),kcr=o("TFFlaubertWithLMHeadModel"),Scr=o(" (FlauBERT model)"),Rcr=l(),mT=a("li"),Pue=a("strong"),Bcr=o("funnel"),Pcr=o(" \u2014 "),cX=a("a"),$cr=o("TFFunnelForMaskedLM"),Icr=o(" (Funnel Transformer model)"),qcr=l(),gT=a("li"),$ue=a("strong"),Ncr=o("layoutlm"),jcr=o(" \u2014 "),fX=a("a"),Dcr=o("TFLayoutLMForMaskedLM"),Gcr=o(" (LayoutLM model)"),Ocr=l(),hT=a("li"),Iue=a("strong"),Vcr=o("longformer"),Xcr=o(" \u2014 "),mX=a("a"),zcr=o("TFLongformerForMaskedLM"),Qcr=o(" (Longformer model)"),Wcr=l(),pT=a("li"),que=a("strong"),Hcr=o("mobilebert"),Ucr=o(" \u2014 "),gX=a("a"),Jcr=o("TFMobileBertForMaskedLM"),Ycr=o(" (MobileBERT model)"),Kcr=l(),_T=a("li"),Nue=a("strong"),Zcr=o("mpnet"),efr=o(" \u2014 "),hX=a("a"),ofr=o("TFMPNetForMaskedLM"),rfr=o(" (MPNet model)"),tfr=l(),uT=a("li"),jue=a("strong"),afr=o("rembert"),nfr=o(" \u2014 "),pX=a("a"),sfr=o("TFRemBertForMaskedLM"),lfr=o(" (RemBERT model)"),ifr=l(),bT=a("li"),Due=a("strong"),dfr=o("roberta"),cfr=o(" \u2014 "),_X=a("a"),ffr=o("TFRobertaForMaskedLM"),mfr=o(" (RoBERTa model)"),gfr=l(),FT=a("li"),Gue=a("strong"),hfr=o("roformer"),pfr=o(" \u2014 "),uX=a("a"),_fr=o("TFRoFormerForMaskedLM"),ufr=o(" (RoFormer model)"),bfr=l(),vT=a("li"),Oue=a("strong"),Ffr=o("tapas"),vfr=o(" \u2014 "),bX=a("a"),Tfr=o("TFTapasForMaskedLM"),Mfr=o(" (TAPAS model)"),Efr=l(),TT=a("li"),Vue=a("strong"),Cfr=o("xlm"),wfr=o(" \u2014 "),FX=a("a"),Afr=o("TFXLMWithLMHeadModel"),yfr=o(" (XLM model)"),Lfr=l(),MT=a("li"),Xue=a("strong"),xfr=o("xlm-roberta"),kfr=o(" \u2014 "),vX=a("a"),Sfr=o("TFXLMRobertaForMaskedLM"),Rfr=o(" (XLM-RoBERTa model)"),Bfr=l(),zue=a("p"),Pfr=o("Examples:"),$fr=l(),f(Ny.$$.fragment),kBe=l(),Lc=a("h2"),ET=a("a"),Que=a("span"),f(jy.$$.fragment),Ifr=l(),Wue=a("span"),qfr=o("TFAutoModelForSeq2SeqLM"),SBe=l(),Cr=a("div"),f(Dy.$$.fragment),Nfr=l(),xc=a("p"),jfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TX=a("a"),Dfr=o("from_pretrained()"),Gfr=o(" class method or the "),MX=a("a"),Ofr=o("from_config()"),Vfr=o(` class
method.`),Xfr=l(),Gy=a("p"),zfr=o("This class cannot be instantiated directly using "),Hue=a("code"),Qfr=o("__init__()"),Wfr=o(" (throws an error)."),Hfr=l(),bt=a("div"),f(Oy.$$.fragment),Ufr=l(),Uue=a("p"),Jfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Yfr=l(),kc=a("p"),Kfr=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),Zfr=o("not"),emr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=a("a"),omr=o("from_pretrained()"),rmr=o(" to load the model weights."),tmr=l(),Yue=a("p"),amr=o("Examples:"),nmr=l(),f(Vy.$$.fragment),smr=l(),Fo=a("div"),f(Xy.$$.fragment),lmr=l(),Kue=a("p"),imr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dmr=l(),Tn=a("p"),cmr=o("The model class to instantiate is selected based on the "),Zue=a("code"),fmr=o("model_type"),mmr=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),gmr=o("pretrained_model_name_or_path"),hmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),pmr=o("pretrained_model_name_or_path"),_mr=o(":"),umr=l(),be=a("ul"),CT=a("li"),r2e=a("strong"),bmr=o("bart"),Fmr=o(" \u2014 "),CX=a("a"),vmr=o("TFBartForConditionalGeneration"),Tmr=o(" (BART model)"),Mmr=l(),wT=a("li"),t2e=a("strong"),Emr=o("blenderbot"),Cmr=o(" \u2014 "),wX=a("a"),wmr=o("TFBlenderbotForConditionalGeneration"),Amr=o(" (Blenderbot model)"),ymr=l(),AT=a("li"),a2e=a("strong"),Lmr=o("blenderbot-small"),xmr=o(" \u2014 "),AX=a("a"),kmr=o("TFBlenderbotSmallForConditionalGeneration"),Smr=o(" (BlenderbotSmall model)"),Rmr=l(),yT=a("li"),n2e=a("strong"),Bmr=o("encoder-decoder"),Pmr=o(" \u2014 "),yX=a("a"),$mr=o("TFEncoderDecoderModel"),Imr=o(" (Encoder decoder model)"),qmr=l(),LT=a("li"),s2e=a("strong"),Nmr=o("led"),jmr=o(" \u2014 "),LX=a("a"),Dmr=o("TFLEDForConditionalGeneration"),Gmr=o(" (LED model)"),Omr=l(),xT=a("li"),l2e=a("strong"),Vmr=o("marian"),Xmr=o(" \u2014 "),xX=a("a"),zmr=o("TFMarianMTModel"),Qmr=o(" (Marian model)"),Wmr=l(),kT=a("li"),i2e=a("strong"),Hmr=o("mbart"),Umr=o(" \u2014 "),kX=a("a"),Jmr=o("TFMBartForConditionalGeneration"),Ymr=o(" (mBART model)"),Kmr=l(),ST=a("li"),d2e=a("strong"),Zmr=o("mt5"),egr=o(" \u2014 "),SX=a("a"),ogr=o("TFMT5ForConditionalGeneration"),rgr=o(" (mT5 model)"),tgr=l(),RT=a("li"),c2e=a("strong"),agr=o("pegasus"),ngr=o(" \u2014 "),RX=a("a"),sgr=o("TFPegasusForConditionalGeneration"),lgr=o(" (Pegasus model)"),igr=l(),BT=a("li"),f2e=a("strong"),dgr=o("t5"),cgr=o(" \u2014 "),BX=a("a"),fgr=o("TFT5ForConditionalGeneration"),mgr=o(" (T5 model)"),ggr=l(),m2e=a("p"),hgr=o("Examples:"),pgr=l(),f(zy.$$.fragment),RBe=l(),Sc=a("h2"),PT=a("a"),g2e=a("span"),f(Qy.$$.fragment),_gr=l(),h2e=a("span"),ugr=o("TFAutoModelForSequenceClassification"),BBe=l(),wr=a("div"),f(Wy.$$.fragment),bgr=l(),Rc=a("p"),Fgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PX=a("a"),vgr=o("from_pretrained()"),Tgr=o(" class method or the "),$X=a("a"),Mgr=o("from_config()"),Egr=o(` class
method.`),Cgr=l(),Hy=a("p"),wgr=o("This class cannot be instantiated directly using "),p2e=a("code"),Agr=o("__init__()"),ygr=o(" (throws an error)."),Lgr=l(),Ft=a("div"),f(Uy.$$.fragment),xgr=l(),_2e=a("p"),kgr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sgr=l(),Bc=a("p"),Rgr=o(`Note:
Loading a model from its configuration file does `),u2e=a("strong"),Bgr=o("not"),Pgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),$gr=o("from_pretrained()"),Igr=o(" to load the model weights."),qgr=l(),b2e=a("p"),Ngr=o("Examples:"),jgr=l(),f(Jy.$$.fragment),Dgr=l(),vo=a("div"),f(Yy.$$.fragment),Ggr=l(),F2e=a("p"),Ogr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vgr=l(),Mn=a("p"),Xgr=o("The model class to instantiate is selected based on the "),v2e=a("code"),zgr=o("model_type"),Qgr=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),Wgr=o("pretrained_model_name_or_path"),Hgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=a("code"),Ugr=o("pretrained_model_name_or_path"),Jgr=o(":"),Ygr=l(),V=a("ul"),$T=a("li"),E2e=a("strong"),Kgr=o("albert"),Zgr=o(" \u2014 "),qX=a("a"),ehr=o("TFAlbertForSequenceClassification"),ohr=o(" (ALBERT model)"),rhr=l(),IT=a("li"),C2e=a("strong"),thr=o("bert"),ahr=o(" \u2014 "),NX=a("a"),nhr=o("TFBertForSequenceClassification"),shr=o(" (BERT model)"),lhr=l(),qT=a("li"),w2e=a("strong"),ihr=o("camembert"),dhr=o(" \u2014 "),jX=a("a"),chr=o("TFCamembertForSequenceClassification"),fhr=o(" (CamemBERT model)"),mhr=l(),NT=a("li"),A2e=a("strong"),ghr=o("convbert"),hhr=o(" \u2014 "),DX=a("a"),phr=o("TFConvBertForSequenceClassification"),_hr=o(" (ConvBERT model)"),uhr=l(),jT=a("li"),y2e=a("strong"),bhr=o("ctrl"),Fhr=o(" \u2014 "),GX=a("a"),vhr=o("TFCTRLForSequenceClassification"),Thr=o(" (CTRL model)"),Mhr=l(),DT=a("li"),L2e=a("strong"),Ehr=o("deberta"),Chr=o(" \u2014 "),OX=a("a"),whr=o("TFDebertaForSequenceClassification"),Ahr=o(" (DeBERTa model)"),yhr=l(),GT=a("li"),x2e=a("strong"),Lhr=o("deberta-v2"),xhr=o(" \u2014 "),VX=a("a"),khr=o("TFDebertaV2ForSequenceClassification"),Shr=o(" (DeBERTa-v2 model)"),Rhr=l(),OT=a("li"),k2e=a("strong"),Bhr=o("distilbert"),Phr=o(" \u2014 "),XX=a("a"),$hr=o("TFDistilBertForSequenceClassification"),Ihr=o(" (DistilBERT model)"),qhr=l(),VT=a("li"),S2e=a("strong"),Nhr=o("electra"),jhr=o(" \u2014 "),zX=a("a"),Dhr=o("TFElectraForSequenceClassification"),Ghr=o(" (ELECTRA model)"),Ohr=l(),XT=a("li"),R2e=a("strong"),Vhr=o("flaubert"),Xhr=o(" \u2014 "),QX=a("a"),zhr=o("TFFlaubertForSequenceClassification"),Qhr=o(" (FlauBERT model)"),Whr=l(),zT=a("li"),B2e=a("strong"),Hhr=o("funnel"),Uhr=o(" \u2014 "),WX=a("a"),Jhr=o("TFFunnelForSequenceClassification"),Yhr=o(" (Funnel Transformer model)"),Khr=l(),QT=a("li"),P2e=a("strong"),Zhr=o("gpt2"),epr=o(" \u2014 "),HX=a("a"),opr=o("TFGPT2ForSequenceClassification"),rpr=o(" (OpenAI GPT-2 model)"),tpr=l(),WT=a("li"),$2e=a("strong"),apr=o("gptj"),npr=o(" \u2014 "),UX=a("a"),spr=o("TFGPTJForSequenceClassification"),lpr=o(" (GPT-J model)"),ipr=l(),HT=a("li"),I2e=a("strong"),dpr=o("layoutlm"),cpr=o(" \u2014 "),JX=a("a"),fpr=o("TFLayoutLMForSequenceClassification"),mpr=o(" (LayoutLM model)"),gpr=l(),UT=a("li"),q2e=a("strong"),hpr=o("longformer"),ppr=o(" \u2014 "),YX=a("a"),_pr=o("TFLongformerForSequenceClassification"),upr=o(" (Longformer model)"),bpr=l(),JT=a("li"),N2e=a("strong"),Fpr=o("mobilebert"),vpr=o(" \u2014 "),KX=a("a"),Tpr=o("TFMobileBertForSequenceClassification"),Mpr=o(" (MobileBERT model)"),Epr=l(),YT=a("li"),j2e=a("strong"),Cpr=o("mpnet"),wpr=o(" \u2014 "),ZX=a("a"),Apr=o("TFMPNetForSequenceClassification"),ypr=o(" (MPNet model)"),Lpr=l(),KT=a("li"),D2e=a("strong"),xpr=o("openai-gpt"),kpr=o(" \u2014 "),ez=a("a"),Spr=o("TFOpenAIGPTForSequenceClassification"),Rpr=o(" (OpenAI GPT model)"),Bpr=l(),ZT=a("li"),G2e=a("strong"),Ppr=o("rembert"),$pr=o(" \u2014 "),oz=a("a"),Ipr=o("TFRemBertForSequenceClassification"),qpr=o(" (RemBERT model)"),Npr=l(),eM=a("li"),O2e=a("strong"),jpr=o("roberta"),Dpr=o(" \u2014 "),rz=a("a"),Gpr=o("TFRobertaForSequenceClassification"),Opr=o(" (RoBERTa model)"),Vpr=l(),oM=a("li"),V2e=a("strong"),Xpr=o("roformer"),zpr=o(" \u2014 "),tz=a("a"),Qpr=o("TFRoFormerForSequenceClassification"),Wpr=o(" (RoFormer model)"),Hpr=l(),rM=a("li"),X2e=a("strong"),Upr=o("tapas"),Jpr=o(" \u2014 "),az=a("a"),Ypr=o("TFTapasForSequenceClassification"),Kpr=o(" (TAPAS model)"),Zpr=l(),tM=a("li"),z2e=a("strong"),e_r=o("transfo-xl"),o_r=o(" \u2014 "),nz=a("a"),r_r=o("TFTransfoXLForSequenceClassification"),t_r=o(" (Transformer-XL model)"),a_r=l(),aM=a("li"),Q2e=a("strong"),n_r=o("xlm"),s_r=o(" \u2014 "),sz=a("a"),l_r=o("TFXLMForSequenceClassification"),i_r=o(" (XLM model)"),d_r=l(),nM=a("li"),W2e=a("strong"),c_r=o("xlm-roberta"),f_r=o(" \u2014 "),lz=a("a"),m_r=o("TFXLMRobertaForSequenceClassification"),g_r=o(" (XLM-RoBERTa model)"),h_r=l(),sM=a("li"),H2e=a("strong"),p_r=o("xlnet"),__r=o(" \u2014 "),iz=a("a"),u_r=o("TFXLNetForSequenceClassification"),b_r=o(" (XLNet model)"),F_r=l(),U2e=a("p"),v_r=o("Examples:"),T_r=l(),f(Ky.$$.fragment),PBe=l(),Pc=a("h2"),lM=a("a"),J2e=a("span"),f(Zy.$$.fragment),M_r=l(),Y2e=a("span"),E_r=o("TFAutoModelForMultipleChoice"),$Be=l(),Ar=a("div"),f(eL.$$.fragment),C_r=l(),$c=a("p"),w_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dz=a("a"),A_r=o("from_pretrained()"),y_r=o(" class method or the "),cz=a("a"),L_r=o("from_config()"),x_r=o(` class
method.`),k_r=l(),oL=a("p"),S_r=o("This class cannot be instantiated directly using "),K2e=a("code"),R_r=o("__init__()"),B_r=o(" (throws an error)."),P_r=l(),vt=a("div"),f(rL.$$.fragment),$_r=l(),Z2e=a("p"),I_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),q_r=l(),Ic=a("p"),N_r=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),j_r=o("not"),D_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),G_r=o("from_pretrained()"),O_r=o(" to load the model weights."),V_r=l(),o1e=a("p"),X_r=o("Examples:"),z_r=l(),f(tL.$$.fragment),Q_r=l(),To=a("div"),f(aL.$$.fragment),W_r=l(),r1e=a("p"),H_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),U_r=l(),En=a("p"),J_r=o("The model class to instantiate is selected based on the "),t1e=a("code"),Y_r=o("model_type"),K_r=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),Z_r=o("pretrained_model_name_or_path"),eur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),our=o("pretrained_model_name_or_path"),rur=o(":"),tur=l(),se=a("ul"),iM=a("li"),s1e=a("strong"),aur=o("albert"),nur=o(" \u2014 "),mz=a("a"),sur=o("TFAlbertForMultipleChoice"),lur=o(" (ALBERT model)"),iur=l(),dM=a("li"),l1e=a("strong"),dur=o("bert"),cur=o(" \u2014 "),gz=a("a"),fur=o("TFBertForMultipleChoice"),mur=o(" (BERT model)"),gur=l(),cM=a("li"),i1e=a("strong"),hur=o("camembert"),pur=o(" \u2014 "),hz=a("a"),_ur=o("TFCamembertForMultipleChoice"),uur=o(" (CamemBERT model)"),bur=l(),fM=a("li"),d1e=a("strong"),Fur=o("convbert"),vur=o(" \u2014 "),pz=a("a"),Tur=o("TFConvBertForMultipleChoice"),Mur=o(" (ConvBERT model)"),Eur=l(),mM=a("li"),c1e=a("strong"),Cur=o("distilbert"),wur=o(" \u2014 "),_z=a("a"),Aur=o("TFDistilBertForMultipleChoice"),yur=o(" (DistilBERT model)"),Lur=l(),gM=a("li"),f1e=a("strong"),xur=o("electra"),kur=o(" \u2014 "),uz=a("a"),Sur=o("TFElectraForMultipleChoice"),Rur=o(" (ELECTRA model)"),Bur=l(),hM=a("li"),m1e=a("strong"),Pur=o("flaubert"),$ur=o(" \u2014 "),bz=a("a"),Iur=o("TFFlaubertForMultipleChoice"),qur=o(" (FlauBERT model)"),Nur=l(),pM=a("li"),g1e=a("strong"),jur=o("funnel"),Dur=o(" \u2014 "),Fz=a("a"),Gur=o("TFFunnelForMultipleChoice"),Our=o(" (Funnel Transformer model)"),Vur=l(),_M=a("li"),h1e=a("strong"),Xur=o("longformer"),zur=o(" \u2014 "),vz=a("a"),Qur=o("TFLongformerForMultipleChoice"),Wur=o(" (Longformer model)"),Hur=l(),uM=a("li"),p1e=a("strong"),Uur=o("mobilebert"),Jur=o(" \u2014 "),Tz=a("a"),Yur=o("TFMobileBertForMultipleChoice"),Kur=o(" (MobileBERT model)"),Zur=l(),bM=a("li"),_1e=a("strong"),e2r=o("mpnet"),o2r=o(" \u2014 "),Mz=a("a"),r2r=o("TFMPNetForMultipleChoice"),t2r=o(" (MPNet model)"),a2r=l(),FM=a("li"),u1e=a("strong"),n2r=o("rembert"),s2r=o(" \u2014 "),Ez=a("a"),l2r=o("TFRemBertForMultipleChoice"),i2r=o(" (RemBERT model)"),d2r=l(),vM=a("li"),b1e=a("strong"),c2r=o("roberta"),f2r=o(" \u2014 "),Cz=a("a"),m2r=o("TFRobertaForMultipleChoice"),g2r=o(" (RoBERTa model)"),h2r=l(),TM=a("li"),F1e=a("strong"),p2r=o("roformer"),_2r=o(" \u2014 "),wz=a("a"),u2r=o("TFRoFormerForMultipleChoice"),b2r=o(" (RoFormer model)"),F2r=l(),MM=a("li"),v1e=a("strong"),v2r=o("xlm"),T2r=o(" \u2014 "),Az=a("a"),M2r=o("TFXLMForMultipleChoice"),E2r=o(" (XLM model)"),C2r=l(),EM=a("li"),T1e=a("strong"),w2r=o("xlm-roberta"),A2r=o(" \u2014 "),yz=a("a"),y2r=o("TFXLMRobertaForMultipleChoice"),L2r=o(" (XLM-RoBERTa model)"),x2r=l(),CM=a("li"),M1e=a("strong"),k2r=o("xlnet"),S2r=o(" \u2014 "),Lz=a("a"),R2r=o("TFXLNetForMultipleChoice"),B2r=o(" (XLNet model)"),P2r=l(),E1e=a("p"),$2r=o("Examples:"),I2r=l(),f(nL.$$.fragment),IBe=l(),qc=a("h2"),wM=a("a"),C1e=a("span"),f(sL.$$.fragment),q2r=l(),w1e=a("span"),N2r=o("TFAutoModelForTableQuestionAnswering"),qBe=l(),yr=a("div"),f(lL.$$.fragment),j2r=l(),Nc=a("p"),D2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xz=a("a"),G2r=o("from_pretrained()"),O2r=o(" class method or the "),kz=a("a"),V2r=o("from_config()"),X2r=o(` class
method.`),z2r=l(),iL=a("p"),Q2r=o("This class cannot be instantiated directly using "),A1e=a("code"),W2r=o("__init__()"),H2r=o(" (throws an error)."),U2r=l(),Tt=a("div"),f(dL.$$.fragment),J2r=l(),y1e=a("p"),Y2r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),K2r=l(),jc=a("p"),Z2r=o(`Note:
Loading a model from its configuration file does `),L1e=a("strong"),e1r=o("not"),o1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),r1r=o("from_pretrained()"),t1r=o(" to load the model weights."),a1r=l(),x1e=a("p"),n1r=o("Examples:"),s1r=l(),f(cL.$$.fragment),l1r=l(),Mo=a("div"),f(fL.$$.fragment),i1r=l(),k1e=a("p"),d1r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),c1r=l(),Cn=a("p"),f1r=o("The model class to instantiate is selected based on the "),S1e=a("code"),m1r=o("model_type"),g1r=o(` property of the config object (either
passed as an argument or loaded from `),R1e=a("code"),h1r=o("pretrained_model_name_or_path"),p1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=a("code"),_1r=o("pretrained_model_name_or_path"),u1r=o(":"),b1r=l(),P1e=a("ul"),AM=a("li"),$1e=a("strong"),F1r=o("tapas"),v1r=o(" \u2014 "),Rz=a("a"),T1r=o("TFTapasForQuestionAnswering"),M1r=o(" (TAPAS model)"),E1r=l(),I1e=a("p"),C1r=o("Examples:"),w1r=l(),f(mL.$$.fragment),NBe=l(),Dc=a("h2"),yM=a("a"),q1e=a("span"),f(gL.$$.fragment),A1r=l(),N1e=a("span"),y1r=o("TFAutoModelForTokenClassification"),jBe=l(),Lr=a("div"),f(hL.$$.fragment),L1r=l(),Gc=a("p"),x1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bz=a("a"),k1r=o("from_pretrained()"),S1r=o(" class method or the "),Pz=a("a"),R1r=o("from_config()"),B1r=o(` class
method.`),P1r=l(),pL=a("p"),$1r=o("This class cannot be instantiated directly using "),j1e=a("code"),I1r=o("__init__()"),q1r=o(" (throws an error)."),N1r=l(),Mt=a("div"),f(_L.$$.fragment),j1r=l(),D1e=a("p"),D1r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),G1r=l(),Oc=a("p"),O1r=o(`Note:
Loading a model from its configuration file does `),G1e=a("strong"),V1r=o("not"),X1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),z1r=o("from_pretrained()"),Q1r=o(" to load the model weights."),W1r=l(),O1e=a("p"),H1r=o("Examples:"),U1r=l(),f(uL.$$.fragment),J1r=l(),Eo=a("div"),f(bL.$$.fragment),Y1r=l(),V1e=a("p"),K1r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Z1r=l(),wn=a("p"),ebr=o("The model class to instantiate is selected based on the "),X1e=a("code"),obr=o("model_type"),rbr=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),tbr=o("pretrained_model_name_or_path"),abr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=a("code"),nbr=o("pretrained_model_name_or_path"),sbr=o(":"),lbr=l(),Y=a("ul"),LM=a("li"),W1e=a("strong"),ibr=o("albert"),dbr=o(" \u2014 "),Iz=a("a"),cbr=o("TFAlbertForTokenClassification"),fbr=o(" (ALBERT model)"),mbr=l(),xM=a("li"),H1e=a("strong"),gbr=o("bert"),hbr=o(" \u2014 "),qz=a("a"),pbr=o("TFBertForTokenClassification"),_br=o(" (BERT model)"),ubr=l(),kM=a("li"),U1e=a("strong"),bbr=o("camembert"),Fbr=o(" \u2014 "),Nz=a("a"),vbr=o("TFCamembertForTokenClassification"),Tbr=o(" (CamemBERT model)"),Mbr=l(),SM=a("li"),J1e=a("strong"),Ebr=o("convbert"),Cbr=o(" \u2014 "),jz=a("a"),wbr=o("TFConvBertForTokenClassification"),Abr=o(" (ConvBERT model)"),ybr=l(),RM=a("li"),Y1e=a("strong"),Lbr=o("deberta"),xbr=o(" \u2014 "),Dz=a("a"),kbr=o("TFDebertaForTokenClassification"),Sbr=o(" (DeBERTa model)"),Rbr=l(),BM=a("li"),K1e=a("strong"),Bbr=o("deberta-v2"),Pbr=o(" \u2014 "),Gz=a("a"),$br=o("TFDebertaV2ForTokenClassification"),Ibr=o(" (DeBERTa-v2 model)"),qbr=l(),PM=a("li"),Z1e=a("strong"),Nbr=o("distilbert"),jbr=o(" \u2014 "),Oz=a("a"),Dbr=o("TFDistilBertForTokenClassification"),Gbr=o(" (DistilBERT model)"),Obr=l(),$M=a("li"),ebe=a("strong"),Vbr=o("electra"),Xbr=o(" \u2014 "),Vz=a("a"),zbr=o("TFElectraForTokenClassification"),Qbr=o(" (ELECTRA model)"),Wbr=l(),IM=a("li"),obe=a("strong"),Hbr=o("flaubert"),Ubr=o(" \u2014 "),Xz=a("a"),Jbr=o("TFFlaubertForTokenClassification"),Ybr=o(" (FlauBERT model)"),Kbr=l(),qM=a("li"),rbe=a("strong"),Zbr=o("funnel"),e5r=o(" \u2014 "),zz=a("a"),o5r=o("TFFunnelForTokenClassification"),r5r=o(" (Funnel Transformer model)"),t5r=l(),NM=a("li"),tbe=a("strong"),a5r=o("layoutlm"),n5r=o(" \u2014 "),Qz=a("a"),s5r=o("TFLayoutLMForTokenClassification"),l5r=o(" (LayoutLM model)"),i5r=l(),jM=a("li"),abe=a("strong"),d5r=o("longformer"),c5r=o(" \u2014 "),Wz=a("a"),f5r=o("TFLongformerForTokenClassification"),m5r=o(" (Longformer model)"),g5r=l(),DM=a("li"),nbe=a("strong"),h5r=o("mobilebert"),p5r=o(" \u2014 "),Hz=a("a"),_5r=o("TFMobileBertForTokenClassification"),u5r=o(" (MobileBERT model)"),b5r=l(),GM=a("li"),sbe=a("strong"),F5r=o("mpnet"),v5r=o(" \u2014 "),Uz=a("a"),T5r=o("TFMPNetForTokenClassification"),M5r=o(" (MPNet model)"),E5r=l(),OM=a("li"),lbe=a("strong"),C5r=o("rembert"),w5r=o(" \u2014 "),Jz=a("a"),A5r=o("TFRemBertForTokenClassification"),y5r=o(" (RemBERT model)"),L5r=l(),VM=a("li"),ibe=a("strong"),x5r=o("roberta"),k5r=o(" \u2014 "),Yz=a("a"),S5r=o("TFRobertaForTokenClassification"),R5r=o(" (RoBERTa model)"),B5r=l(),XM=a("li"),dbe=a("strong"),P5r=o("roformer"),$5r=o(" \u2014 "),Kz=a("a"),I5r=o("TFRoFormerForTokenClassification"),q5r=o(" (RoFormer model)"),N5r=l(),zM=a("li"),cbe=a("strong"),j5r=o("xlm"),D5r=o(" \u2014 "),Zz=a("a"),G5r=o("TFXLMForTokenClassification"),O5r=o(" (XLM model)"),V5r=l(),QM=a("li"),fbe=a("strong"),X5r=o("xlm-roberta"),z5r=o(" \u2014 "),eQ=a("a"),Q5r=o("TFXLMRobertaForTokenClassification"),W5r=o(" (XLM-RoBERTa model)"),H5r=l(),WM=a("li"),mbe=a("strong"),U5r=o("xlnet"),J5r=o(" \u2014 "),oQ=a("a"),Y5r=o("TFXLNetForTokenClassification"),K5r=o(" (XLNet model)"),Z5r=l(),gbe=a("p"),eFr=o("Examples:"),oFr=l(),f(FL.$$.fragment),DBe=l(),Vc=a("h2"),HM=a("a"),hbe=a("span"),f(vL.$$.fragment),rFr=l(),pbe=a("span"),tFr=o("TFAutoModelForQuestionAnswering"),GBe=l(),xr=a("div"),f(TL.$$.fragment),aFr=l(),Xc=a("p"),nFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rQ=a("a"),sFr=o("from_pretrained()"),lFr=o(" class method or the "),tQ=a("a"),iFr=o("from_config()"),dFr=o(` class
method.`),cFr=l(),ML=a("p"),fFr=o("This class cannot be instantiated directly using "),_be=a("code"),mFr=o("__init__()"),gFr=o(" (throws an error)."),hFr=l(),Et=a("div"),f(EL.$$.fragment),pFr=l(),ube=a("p"),_Fr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uFr=l(),zc=a("p"),bFr=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),FFr=o("not"),vFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),TFr=o("from_pretrained()"),MFr=o(" to load the model weights."),EFr=l(),Fbe=a("p"),CFr=o("Examples:"),wFr=l(),f(CL.$$.fragment),AFr=l(),Co=a("div"),f(wL.$$.fragment),yFr=l(),vbe=a("p"),LFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xFr=l(),An=a("p"),kFr=o("The model class to instantiate is selected based on the "),Tbe=a("code"),SFr=o("model_type"),RFr=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),BFr=o("pretrained_model_name_or_path"),PFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),$Fr=o("pretrained_model_name_or_path"),IFr=o(":"),qFr=l(),K=a("ul"),UM=a("li"),Cbe=a("strong"),NFr=o("albert"),jFr=o(" \u2014 "),nQ=a("a"),DFr=o("TFAlbertForQuestionAnswering"),GFr=o(" (ALBERT model)"),OFr=l(),JM=a("li"),wbe=a("strong"),VFr=o("bert"),XFr=o(" \u2014 "),sQ=a("a"),zFr=o("TFBertForQuestionAnswering"),QFr=o(" (BERT model)"),WFr=l(),YM=a("li"),Abe=a("strong"),HFr=o("camembert"),UFr=o(" \u2014 "),lQ=a("a"),JFr=o("TFCamembertForQuestionAnswering"),YFr=o(" (CamemBERT model)"),KFr=l(),KM=a("li"),ybe=a("strong"),ZFr=o("convbert"),evr=o(" \u2014 "),iQ=a("a"),ovr=o("TFConvBertForQuestionAnswering"),rvr=o(" (ConvBERT model)"),tvr=l(),ZM=a("li"),Lbe=a("strong"),avr=o("deberta"),nvr=o(" \u2014 "),dQ=a("a"),svr=o("TFDebertaForQuestionAnswering"),lvr=o(" (DeBERTa model)"),ivr=l(),e4=a("li"),xbe=a("strong"),dvr=o("deberta-v2"),cvr=o(" \u2014 "),cQ=a("a"),fvr=o("TFDebertaV2ForQuestionAnswering"),mvr=o(" (DeBERTa-v2 model)"),gvr=l(),o4=a("li"),kbe=a("strong"),hvr=o("distilbert"),pvr=o(" \u2014 "),fQ=a("a"),_vr=o("TFDistilBertForQuestionAnswering"),uvr=o(" (DistilBERT model)"),bvr=l(),r4=a("li"),Sbe=a("strong"),Fvr=o("electra"),vvr=o(" \u2014 "),mQ=a("a"),Tvr=o("TFElectraForQuestionAnswering"),Mvr=o(" (ELECTRA model)"),Evr=l(),t4=a("li"),Rbe=a("strong"),Cvr=o("flaubert"),wvr=o(" \u2014 "),gQ=a("a"),Avr=o("TFFlaubertForQuestionAnsweringSimple"),yvr=o(" (FlauBERT model)"),Lvr=l(),a4=a("li"),Bbe=a("strong"),xvr=o("funnel"),kvr=o(" \u2014 "),hQ=a("a"),Svr=o("TFFunnelForQuestionAnswering"),Rvr=o(" (Funnel Transformer model)"),Bvr=l(),n4=a("li"),Pbe=a("strong"),Pvr=o("gptj"),$vr=o(" \u2014 "),pQ=a("a"),Ivr=o("TFGPTJForQuestionAnswering"),qvr=o(" (GPT-J model)"),Nvr=l(),s4=a("li"),$be=a("strong"),jvr=o("longformer"),Dvr=o(" \u2014 "),_Q=a("a"),Gvr=o("TFLongformerForQuestionAnswering"),Ovr=o(" (Longformer model)"),Vvr=l(),l4=a("li"),Ibe=a("strong"),Xvr=o("mobilebert"),zvr=o(" \u2014 "),uQ=a("a"),Qvr=o("TFMobileBertForQuestionAnswering"),Wvr=o(" (MobileBERT model)"),Hvr=l(),i4=a("li"),qbe=a("strong"),Uvr=o("mpnet"),Jvr=o(" \u2014 "),bQ=a("a"),Yvr=o("TFMPNetForQuestionAnswering"),Kvr=o(" (MPNet model)"),Zvr=l(),d4=a("li"),Nbe=a("strong"),e6r=o("rembert"),o6r=o(" \u2014 "),FQ=a("a"),r6r=o("TFRemBertForQuestionAnswering"),t6r=o(" (RemBERT model)"),a6r=l(),c4=a("li"),jbe=a("strong"),n6r=o("roberta"),s6r=o(" \u2014 "),vQ=a("a"),l6r=o("TFRobertaForQuestionAnswering"),i6r=o(" (RoBERTa model)"),d6r=l(),f4=a("li"),Dbe=a("strong"),c6r=o("roformer"),f6r=o(" \u2014 "),TQ=a("a"),m6r=o("TFRoFormerForQuestionAnswering"),g6r=o(" (RoFormer model)"),h6r=l(),m4=a("li"),Gbe=a("strong"),p6r=o("xlm"),_6r=o(" \u2014 "),MQ=a("a"),u6r=o("TFXLMForQuestionAnsweringSimple"),b6r=o(" (XLM model)"),F6r=l(),g4=a("li"),Obe=a("strong"),v6r=o("xlm-roberta"),T6r=o(" \u2014 "),EQ=a("a"),M6r=o("TFXLMRobertaForQuestionAnswering"),E6r=o(" (XLM-RoBERTa model)"),C6r=l(),h4=a("li"),Vbe=a("strong"),w6r=o("xlnet"),A6r=o(" \u2014 "),CQ=a("a"),y6r=o("TFXLNetForQuestionAnsweringSimple"),L6r=o(" (XLNet model)"),x6r=l(),Xbe=a("p"),k6r=o("Examples:"),S6r=l(),f(AL.$$.fragment),OBe=l(),Qc=a("h2"),p4=a("a"),zbe=a("span"),f(yL.$$.fragment),R6r=l(),Qbe=a("span"),B6r=o("TFAutoModelForVision2Seq"),VBe=l(),kr=a("div"),f(LL.$$.fragment),P6r=l(),Wc=a("p"),$6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wQ=a("a"),I6r=o("from_pretrained()"),q6r=o(" class method or the "),AQ=a("a"),N6r=o("from_config()"),j6r=o(` class
method.`),D6r=l(),xL=a("p"),G6r=o("This class cannot be instantiated directly using "),Wbe=a("code"),O6r=o("__init__()"),V6r=o(" (throws an error)."),X6r=l(),Ct=a("div"),f(kL.$$.fragment),z6r=l(),Hbe=a("p"),Q6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),W6r=l(),Hc=a("p"),H6r=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),U6r=o("not"),J6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),Y6r=o("from_pretrained()"),K6r=o(" to load the model weights."),Z6r=l(),Jbe=a("p"),eTr=o("Examples:"),oTr=l(),f(SL.$$.fragment),rTr=l(),wo=a("div"),f(RL.$$.fragment),tTr=l(),Ybe=a("p"),aTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nTr=l(),yn=a("p"),sTr=o("The model class to instantiate is selected based on the "),Kbe=a("code"),lTr=o("model_type"),iTr=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),dTr=o("pretrained_model_name_or_path"),cTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=a("code"),fTr=o("pretrained_model_name_or_path"),mTr=o(":"),gTr=l(),o5e=a("ul"),_4=a("li"),r5e=a("strong"),hTr=o("vision-encoder-decoder"),pTr=o(" \u2014 "),LQ=a("a"),_Tr=o("TFVisionEncoderDecoderModel"),uTr=o(" (Vision Encoder decoder model)"),bTr=l(),t5e=a("p"),FTr=o("Examples:"),vTr=l(),f(BL.$$.fragment),XBe=l(),Uc=a("h2"),u4=a("a"),a5e=a("span"),f(PL.$$.fragment),TTr=l(),n5e=a("span"),MTr=o("TFAutoModelForSpeechSeq2Seq"),zBe=l(),Sr=a("div"),f($L.$$.fragment),ETr=l(),Jc=a("p"),CTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xQ=a("a"),wTr=o("from_pretrained()"),ATr=o(" class method or the "),kQ=a("a"),yTr=o("from_config()"),LTr=o(` class
method.`),xTr=l(),IL=a("p"),kTr=o("This class cannot be instantiated directly using "),s5e=a("code"),STr=o("__init__()"),RTr=o(" (throws an error)."),BTr=l(),wt=a("div"),f(qL.$$.fragment),PTr=l(),l5e=a("p"),$Tr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ITr=l(),Yc=a("p"),qTr=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),NTr=o("not"),jTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),DTr=o("from_pretrained()"),GTr=o(" to load the model weights."),OTr=l(),d5e=a("p"),VTr=o("Examples:"),XTr=l(),f(NL.$$.fragment),zTr=l(),Ao=a("div"),f(jL.$$.fragment),QTr=l(),c5e=a("p"),WTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),HTr=l(),Ln=a("p"),UTr=o("The model class to instantiate is selected based on the "),f5e=a("code"),JTr=o("model_type"),YTr=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),KTr=o("pretrained_model_name_or_path"),ZTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=a("code"),eMr=o("pretrained_model_name_or_path"),oMr=o(":"),rMr=l(),h5e=a("ul"),b4=a("li"),p5e=a("strong"),tMr=o("speech_to_text"),aMr=o(" \u2014 "),RQ=a("a"),nMr=o("TFSpeech2TextForConditionalGeneration"),sMr=o(" (Speech2Text model)"),lMr=l(),_5e=a("p"),iMr=o("Examples:"),dMr=l(),f(DL.$$.fragment),QBe=l(),Kc=a("h2"),F4=a("a"),u5e=a("span"),f(GL.$$.fragment),cMr=l(),b5e=a("span"),fMr=o("FlaxAutoModel"),WBe=l(),Rr=a("div"),f(OL.$$.fragment),mMr=l(),Zc=a("p"),gMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BQ=a("a"),hMr=o("from_pretrained()"),pMr=o(" class method or the "),PQ=a("a"),_Mr=o("from_config()"),uMr=o(` class
method.`),bMr=l(),VL=a("p"),FMr=o("This class cannot be instantiated directly using "),F5e=a("code"),vMr=o("__init__()"),TMr=o(" (throws an error)."),MMr=l(),At=a("div"),f(XL.$$.fragment),EMr=l(),v5e=a("p"),CMr=o("Instantiates one of the base model classes of the library from a configuration."),wMr=l(),ef=a("p"),AMr=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),yMr=o("not"),LMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),xMr=o("from_pretrained()"),kMr=o(" to load the model weights."),SMr=l(),M5e=a("p"),RMr=o("Examples:"),BMr=l(),f(zL.$$.fragment),PMr=l(),yo=a("div"),f(QL.$$.fragment),$Mr=l(),E5e=a("p"),IMr=o("Instantiate one of the base model classes of the library from a pretrained model."),qMr=l(),xn=a("p"),NMr=o("The model class to instantiate is selected based on the "),C5e=a("code"),jMr=o("model_type"),DMr=o(` property of the config object (either
passed as an argument or loaded from `),w5e=a("code"),GMr=o("pretrained_model_name_or_path"),OMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=a("code"),VMr=o("pretrained_model_name_or_path"),XMr=o(":"),zMr=l(),z=a("ul"),v4=a("li"),y5e=a("strong"),QMr=o("albert"),WMr=o(" \u2014 "),IQ=a("a"),HMr=o("FlaxAlbertModel"),UMr=o(" (ALBERT model)"),JMr=l(),T4=a("li"),L5e=a("strong"),YMr=o("bart"),KMr=o(" \u2014 "),qQ=a("a"),ZMr=o("FlaxBartModel"),e4r=o(" (BART model)"),o4r=l(),M4=a("li"),x5e=a("strong"),r4r=o("beit"),t4r=o(" \u2014 "),NQ=a("a"),a4r=o("FlaxBeitModel"),n4r=o(" (BEiT model)"),s4r=l(),E4=a("li"),k5e=a("strong"),l4r=o("bert"),i4r=o(" \u2014 "),jQ=a("a"),d4r=o("FlaxBertModel"),c4r=o(" (BERT model)"),f4r=l(),C4=a("li"),S5e=a("strong"),m4r=o("big_bird"),g4r=o(" \u2014 "),DQ=a("a"),h4r=o("FlaxBigBirdModel"),p4r=o(" (BigBird model)"),_4r=l(),w4=a("li"),R5e=a("strong"),u4r=o("blenderbot"),b4r=o(" \u2014 "),GQ=a("a"),F4r=o("FlaxBlenderbotModel"),v4r=o(" (Blenderbot model)"),T4r=l(),A4=a("li"),B5e=a("strong"),M4r=o("blenderbot-small"),E4r=o(" \u2014 "),OQ=a("a"),C4r=o("FlaxBlenderbotSmallModel"),w4r=o(" (BlenderbotSmall model)"),A4r=l(),y4=a("li"),P5e=a("strong"),y4r=o("clip"),L4r=o(" \u2014 "),VQ=a("a"),x4r=o("FlaxCLIPModel"),k4r=o(" (CLIP model)"),S4r=l(),L4=a("li"),$5e=a("strong"),R4r=o("distilbert"),B4r=o(" \u2014 "),XQ=a("a"),P4r=o("FlaxDistilBertModel"),$4r=o(" (DistilBERT model)"),I4r=l(),x4=a("li"),I5e=a("strong"),q4r=o("electra"),N4r=o(" \u2014 "),zQ=a("a"),j4r=o("FlaxElectraModel"),D4r=o(" (ELECTRA model)"),G4r=l(),k4=a("li"),q5e=a("strong"),O4r=o("gpt2"),V4r=o(" \u2014 "),QQ=a("a"),X4r=o("FlaxGPT2Model"),z4r=o(" (OpenAI GPT-2 model)"),Q4r=l(),S4=a("li"),N5e=a("strong"),W4r=o("gpt_neo"),H4r=o(" \u2014 "),WQ=a("a"),U4r=o("FlaxGPTNeoModel"),J4r=o(" (GPT Neo model)"),Y4r=l(),R4=a("li"),j5e=a("strong"),K4r=o("gptj"),Z4r=o(" \u2014 "),HQ=a("a"),eEr=o("FlaxGPTJModel"),oEr=o(" (GPT-J model)"),rEr=l(),B4=a("li"),D5e=a("strong"),tEr=o("marian"),aEr=o(" \u2014 "),UQ=a("a"),nEr=o("FlaxMarianModel"),sEr=o(" (Marian model)"),lEr=l(),P4=a("li"),G5e=a("strong"),iEr=o("mbart"),dEr=o(" \u2014 "),JQ=a("a"),cEr=o("FlaxMBartModel"),fEr=o(" (mBART model)"),mEr=l(),$4=a("li"),O5e=a("strong"),gEr=o("mt5"),hEr=o(" \u2014 "),YQ=a("a"),pEr=o("FlaxMT5Model"),_Er=o(" (mT5 model)"),uEr=l(),I4=a("li"),V5e=a("strong"),bEr=o("pegasus"),FEr=o(" \u2014 "),KQ=a("a"),vEr=o("FlaxPegasusModel"),TEr=o(" (Pegasus model)"),MEr=l(),q4=a("li"),X5e=a("strong"),EEr=o("roberta"),CEr=o(" \u2014 "),ZQ=a("a"),wEr=o("FlaxRobertaModel"),AEr=o(" (RoBERTa model)"),yEr=l(),N4=a("li"),z5e=a("strong"),LEr=o("roformer"),xEr=o(" \u2014 "),eW=a("a"),kEr=o("FlaxRoFormerModel"),SEr=o(" (RoFormer model)"),REr=l(),j4=a("li"),Q5e=a("strong"),BEr=o("t5"),PEr=o(" \u2014 "),oW=a("a"),$Er=o("FlaxT5Model"),IEr=o(" (T5 model)"),qEr=l(),D4=a("li"),W5e=a("strong"),NEr=o("vision-text-dual-encoder"),jEr=o(" \u2014 "),rW=a("a"),DEr=o("FlaxVisionTextDualEncoderModel"),GEr=o(" (VisionTextDualEncoder model)"),OEr=l(),G4=a("li"),H5e=a("strong"),VEr=o("vit"),XEr=o(" \u2014 "),tW=a("a"),zEr=o("FlaxViTModel"),QEr=o(" (ViT model)"),WEr=l(),O4=a("li"),U5e=a("strong"),HEr=o("wav2vec2"),UEr=o(" \u2014 "),aW=a("a"),JEr=o("FlaxWav2Vec2Model"),YEr=o(" (Wav2Vec2 model)"),KEr=l(),V4=a("li"),J5e=a("strong"),ZEr=o("xglm"),eCr=o(" \u2014 "),nW=a("a"),oCr=o("FlaxXGLMModel"),rCr=o(" (XGLM model)"),tCr=l(),X4=a("li"),Y5e=a("strong"),aCr=o("xlm-roberta"),nCr=o(" \u2014 "),sW=a("a"),sCr=o("FlaxXLMRobertaModel"),lCr=o(" (XLM-RoBERTa model)"),iCr=l(),K5e=a("p"),dCr=o("Examples:"),cCr=l(),f(WL.$$.fragment),HBe=l(),of=a("h2"),z4=a("a"),Z5e=a("span"),f(HL.$$.fragment),fCr=l(),eFe=a("span"),mCr=o("FlaxAutoModelForCausalLM"),UBe=l(),Br=a("div"),f(UL.$$.fragment),gCr=l(),rf=a("p"),hCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lW=a("a"),pCr=o("from_pretrained()"),_Cr=o(" class method or the "),iW=a("a"),uCr=o("from_config()"),bCr=o(` class
method.`),FCr=l(),JL=a("p"),vCr=o("This class cannot be instantiated directly using "),oFe=a("code"),TCr=o("__init__()"),MCr=o(" (throws an error)."),ECr=l(),yt=a("div"),f(YL.$$.fragment),CCr=l(),rFe=a("p"),wCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ACr=l(),tf=a("p"),yCr=o(`Note:
Loading a model from its configuration file does `),tFe=a("strong"),LCr=o("not"),xCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),kCr=o("from_pretrained()"),SCr=o(" to load the model weights."),RCr=l(),aFe=a("p"),BCr=o("Examples:"),PCr=l(),f(KL.$$.fragment),$Cr=l(),Lo=a("div"),f(ZL.$$.fragment),ICr=l(),nFe=a("p"),qCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NCr=l(),kn=a("p"),jCr=o("The model class to instantiate is selected based on the "),sFe=a("code"),DCr=o("model_type"),GCr=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),OCr=o("pretrained_model_name_or_path"),VCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),XCr=o("pretrained_model_name_or_path"),zCr=o(":"),QCr=l(),ca=a("ul"),Q4=a("li"),dFe=a("strong"),WCr=o("bart"),HCr=o(" \u2014 "),cW=a("a"),UCr=o("FlaxBartForCausalLM"),JCr=o(" (BART model)"),YCr=l(),W4=a("li"),cFe=a("strong"),KCr=o("gpt2"),ZCr=o(" \u2014 "),fW=a("a"),e3r=o("FlaxGPT2LMHeadModel"),o3r=o(" (OpenAI GPT-2 model)"),r3r=l(),H4=a("li"),fFe=a("strong"),t3r=o("gpt_neo"),a3r=o(" \u2014 "),mW=a("a"),n3r=o("FlaxGPTNeoForCausalLM"),s3r=o(" (GPT Neo model)"),l3r=l(),U4=a("li"),mFe=a("strong"),i3r=o("gptj"),d3r=o(" \u2014 "),gW=a("a"),c3r=o("FlaxGPTJForCausalLM"),f3r=o(" (GPT-J model)"),m3r=l(),J4=a("li"),gFe=a("strong"),g3r=o("xglm"),h3r=o(" \u2014 "),hW=a("a"),p3r=o("FlaxXGLMForCausalLM"),_3r=o(" (XGLM model)"),u3r=l(),hFe=a("p"),b3r=o("Examples:"),F3r=l(),f(e8.$$.fragment),JBe=l(),af=a("h2"),Y4=a("a"),pFe=a("span"),f(o8.$$.fragment),v3r=l(),_Fe=a("span"),T3r=o("FlaxAutoModelForPreTraining"),YBe=l(),Pr=a("div"),f(r8.$$.fragment),M3r=l(),nf=a("p"),E3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pW=a("a"),C3r=o("from_pretrained()"),w3r=o(" class method or the "),_W=a("a"),A3r=o("from_config()"),y3r=o(` class
method.`),L3r=l(),t8=a("p"),x3r=o("This class cannot be instantiated directly using "),uFe=a("code"),k3r=o("__init__()"),S3r=o(" (throws an error)."),R3r=l(),Lt=a("div"),f(a8.$$.fragment),B3r=l(),bFe=a("p"),P3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$3r=l(),sf=a("p"),I3r=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),q3r=o("not"),N3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),j3r=o("from_pretrained()"),D3r=o(" to load the model weights."),G3r=l(),vFe=a("p"),O3r=o("Examples:"),V3r=l(),f(n8.$$.fragment),X3r=l(),xo=a("div"),f(s8.$$.fragment),z3r=l(),TFe=a("p"),Q3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),W3r=l(),Sn=a("p"),H3r=o("The model class to instantiate is selected based on the "),MFe=a("code"),U3r=o("model_type"),J3r=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),Y3r=o("pretrained_model_name_or_path"),K3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),Z3r=o("pretrained_model_name_or_path"),ewr=o(":"),owr=l(),me=a("ul"),K4=a("li"),wFe=a("strong"),rwr=o("albert"),twr=o(" \u2014 "),bW=a("a"),awr=o("FlaxAlbertForPreTraining"),nwr=o(" (ALBERT model)"),swr=l(),Z4=a("li"),AFe=a("strong"),lwr=o("bart"),iwr=o(" \u2014 "),FW=a("a"),dwr=o("FlaxBartForConditionalGeneration"),cwr=o(" (BART model)"),fwr=l(),eE=a("li"),yFe=a("strong"),mwr=o("bert"),gwr=o(" \u2014 "),vW=a("a"),hwr=o("FlaxBertForPreTraining"),pwr=o(" (BERT model)"),_wr=l(),oE=a("li"),LFe=a("strong"),uwr=o("big_bird"),bwr=o(" \u2014 "),TW=a("a"),Fwr=o("FlaxBigBirdForPreTraining"),vwr=o(" (BigBird model)"),Twr=l(),rE=a("li"),xFe=a("strong"),Mwr=o("electra"),Ewr=o(" \u2014 "),MW=a("a"),Cwr=o("FlaxElectraForPreTraining"),wwr=o(" (ELECTRA model)"),Awr=l(),tE=a("li"),kFe=a("strong"),ywr=o("mbart"),Lwr=o(" \u2014 "),EW=a("a"),xwr=o("FlaxMBartForConditionalGeneration"),kwr=o(" (mBART model)"),Swr=l(),aE=a("li"),SFe=a("strong"),Rwr=o("mt5"),Bwr=o(" \u2014 "),CW=a("a"),Pwr=o("FlaxMT5ForConditionalGeneration"),$wr=o(" (mT5 model)"),Iwr=l(),nE=a("li"),RFe=a("strong"),qwr=o("roberta"),Nwr=o(" \u2014 "),wW=a("a"),jwr=o("FlaxRobertaForMaskedLM"),Dwr=o(" (RoBERTa model)"),Gwr=l(),sE=a("li"),BFe=a("strong"),Owr=o("roformer"),Vwr=o(" \u2014 "),AW=a("a"),Xwr=o("FlaxRoFormerForMaskedLM"),zwr=o(" (RoFormer model)"),Qwr=l(),lE=a("li"),PFe=a("strong"),Wwr=o("t5"),Hwr=o(" \u2014 "),yW=a("a"),Uwr=o("FlaxT5ForConditionalGeneration"),Jwr=o(" (T5 model)"),Ywr=l(),iE=a("li"),$Fe=a("strong"),Kwr=o("wav2vec2"),Zwr=o(" \u2014 "),LW=a("a"),eAr=o("FlaxWav2Vec2ForPreTraining"),oAr=o(" (Wav2Vec2 model)"),rAr=l(),dE=a("li"),IFe=a("strong"),tAr=o("xlm-roberta"),aAr=o(" \u2014 "),xW=a("a"),nAr=o("FlaxXLMRobertaForMaskedLM"),sAr=o(" (XLM-RoBERTa model)"),lAr=l(),qFe=a("p"),iAr=o("Examples:"),dAr=l(),f(l8.$$.fragment),KBe=l(),lf=a("h2"),cE=a("a"),NFe=a("span"),f(i8.$$.fragment),cAr=l(),jFe=a("span"),fAr=o("FlaxAutoModelForMaskedLM"),ZBe=l(),$r=a("div"),f(d8.$$.fragment),mAr=l(),df=a("p"),gAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kW=a("a"),hAr=o("from_pretrained()"),pAr=o(" class method or the "),SW=a("a"),_Ar=o("from_config()"),uAr=o(` class
method.`),bAr=l(),c8=a("p"),FAr=o("This class cannot be instantiated directly using "),DFe=a("code"),vAr=o("__init__()"),TAr=o(" (throws an error)."),MAr=l(),xt=a("div"),f(f8.$$.fragment),EAr=l(),GFe=a("p"),CAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wAr=l(),cf=a("p"),AAr=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),yAr=o("not"),LAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),xAr=o("from_pretrained()"),kAr=o(" to load the model weights."),SAr=l(),VFe=a("p"),RAr=o("Examples:"),BAr=l(),f(m8.$$.fragment),PAr=l(),ko=a("div"),f(g8.$$.fragment),$Ar=l(),XFe=a("p"),IAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qAr=l(),Rn=a("p"),NAr=o("The model class to instantiate is selected based on the "),zFe=a("code"),jAr=o("model_type"),DAr=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),VAr=o("pretrained_model_name_or_path"),XAr=o(":"),zAr=l(),Fe=a("ul"),fE=a("li"),HFe=a("strong"),QAr=o("albert"),WAr=o(" \u2014 "),BW=a("a"),HAr=o("FlaxAlbertForMaskedLM"),UAr=o(" (ALBERT model)"),JAr=l(),mE=a("li"),UFe=a("strong"),YAr=o("bart"),KAr=o(" \u2014 "),PW=a("a"),ZAr=o("FlaxBartForConditionalGeneration"),e0r=o(" (BART model)"),o0r=l(),gE=a("li"),JFe=a("strong"),r0r=o("bert"),t0r=o(" \u2014 "),$W=a("a"),a0r=o("FlaxBertForMaskedLM"),n0r=o(" (BERT model)"),s0r=l(),hE=a("li"),YFe=a("strong"),l0r=o("big_bird"),i0r=o(" \u2014 "),IW=a("a"),d0r=o("FlaxBigBirdForMaskedLM"),c0r=o(" (BigBird model)"),f0r=l(),pE=a("li"),KFe=a("strong"),m0r=o("distilbert"),g0r=o(" \u2014 "),qW=a("a"),h0r=o("FlaxDistilBertForMaskedLM"),p0r=o(" (DistilBERT model)"),_0r=l(),_E=a("li"),ZFe=a("strong"),u0r=o("electra"),b0r=o(" \u2014 "),NW=a("a"),F0r=o("FlaxElectraForMaskedLM"),v0r=o(" (ELECTRA model)"),T0r=l(),uE=a("li"),eve=a("strong"),M0r=o("mbart"),E0r=o(" \u2014 "),jW=a("a"),C0r=o("FlaxMBartForConditionalGeneration"),w0r=o(" (mBART model)"),A0r=l(),bE=a("li"),ove=a("strong"),y0r=o("roberta"),L0r=o(" \u2014 "),DW=a("a"),x0r=o("FlaxRobertaForMaskedLM"),k0r=o(" (RoBERTa model)"),S0r=l(),FE=a("li"),rve=a("strong"),R0r=o("roformer"),B0r=o(" \u2014 "),GW=a("a"),P0r=o("FlaxRoFormerForMaskedLM"),$0r=o(" (RoFormer model)"),I0r=l(),vE=a("li"),tve=a("strong"),q0r=o("xlm-roberta"),N0r=o(" \u2014 "),OW=a("a"),j0r=o("FlaxXLMRobertaForMaskedLM"),D0r=o(" (XLM-RoBERTa model)"),G0r=l(),ave=a("p"),O0r=o("Examples:"),V0r=l(),f(h8.$$.fragment),ePe=l(),ff=a("h2"),TE=a("a"),nve=a("span"),f(p8.$$.fragment),X0r=l(),sve=a("span"),z0r=o("FlaxAutoModelForSeq2SeqLM"),oPe=l(),Ir=a("div"),f(_8.$$.fragment),Q0r=l(),mf=a("p"),W0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VW=a("a"),H0r=o("from_pretrained()"),U0r=o(" class method or the "),XW=a("a"),J0r=o("from_config()"),Y0r=o(` class
method.`),K0r=l(),u8=a("p"),Z0r=o("This class cannot be instantiated directly using "),lve=a("code"),eyr=o("__init__()"),oyr=o(" (throws an error)."),ryr=l(),kt=a("div"),f(b8.$$.fragment),tyr=l(),ive=a("p"),ayr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nyr=l(),gf=a("p"),syr=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),lyr=o("not"),iyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),dyr=o("from_pretrained()"),cyr=o(" to load the model weights."),fyr=l(),cve=a("p"),myr=o("Examples:"),gyr=l(),f(F8.$$.fragment),hyr=l(),So=a("div"),f(v8.$$.fragment),pyr=l(),fve=a("p"),_yr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uyr=l(),Bn=a("p"),byr=o("The model class to instantiate is selected based on the "),mve=a("code"),Fyr=o("model_type"),vyr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),Tyr=o("pretrained_model_name_or_path"),Myr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),Eyr=o("pretrained_model_name_or_path"),Cyr=o(":"),wyr=l(),Ee=a("ul"),ME=a("li"),pve=a("strong"),Ayr=o("bart"),yyr=o(" \u2014 "),QW=a("a"),Lyr=o("FlaxBartForConditionalGeneration"),xyr=o(" (BART model)"),kyr=l(),EE=a("li"),_ve=a("strong"),Syr=o("blenderbot"),Ryr=o(" \u2014 "),WW=a("a"),Byr=o("FlaxBlenderbotForConditionalGeneration"),Pyr=o(" (Blenderbot model)"),$yr=l(),CE=a("li"),uve=a("strong"),Iyr=o("blenderbot-small"),qyr=o(" \u2014 "),HW=a("a"),Nyr=o("FlaxBlenderbotSmallForConditionalGeneration"),jyr=o(" (BlenderbotSmall model)"),Dyr=l(),wE=a("li"),bve=a("strong"),Gyr=o("encoder-decoder"),Oyr=o(" \u2014 "),UW=a("a"),Vyr=o("FlaxEncoderDecoderModel"),Xyr=o(" (Encoder decoder model)"),zyr=l(),AE=a("li"),Fve=a("strong"),Qyr=o("marian"),Wyr=o(" \u2014 "),JW=a("a"),Hyr=o("FlaxMarianMTModel"),Uyr=o(" (Marian model)"),Jyr=l(),yE=a("li"),vve=a("strong"),Yyr=o("mbart"),Kyr=o(" \u2014 "),YW=a("a"),Zyr=o("FlaxMBartForConditionalGeneration"),eLr=o(" (mBART model)"),oLr=l(),LE=a("li"),Tve=a("strong"),rLr=o("mt5"),tLr=o(" \u2014 "),KW=a("a"),aLr=o("FlaxMT5ForConditionalGeneration"),nLr=o(" (mT5 model)"),sLr=l(),xE=a("li"),Mve=a("strong"),lLr=o("pegasus"),iLr=o(" \u2014 "),ZW=a("a"),dLr=o("FlaxPegasusForConditionalGeneration"),cLr=o(" (Pegasus model)"),fLr=l(),kE=a("li"),Eve=a("strong"),mLr=o("t5"),gLr=o(" \u2014 "),eH=a("a"),hLr=o("FlaxT5ForConditionalGeneration"),pLr=o(" (T5 model)"),_Lr=l(),Cve=a("p"),uLr=o("Examples:"),bLr=l(),f(T8.$$.fragment),rPe=l(),hf=a("h2"),SE=a("a"),wve=a("span"),f(M8.$$.fragment),FLr=l(),Ave=a("span"),vLr=o("FlaxAutoModelForSequenceClassification"),tPe=l(),qr=a("div"),f(E8.$$.fragment),TLr=l(),pf=a("p"),MLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oH=a("a"),ELr=o("from_pretrained()"),CLr=o(" class method or the "),rH=a("a"),wLr=o("from_config()"),ALr=o(` class
method.`),yLr=l(),C8=a("p"),LLr=o("This class cannot be instantiated directly using "),yve=a("code"),xLr=o("__init__()"),kLr=o(" (throws an error)."),SLr=l(),St=a("div"),f(w8.$$.fragment),RLr=l(),Lve=a("p"),BLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PLr=l(),_f=a("p"),$Lr=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),ILr=o("not"),qLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),NLr=o("from_pretrained()"),jLr=o(" to load the model weights."),DLr=l(),kve=a("p"),GLr=o("Examples:"),OLr=l(),f(A8.$$.fragment),VLr=l(),Ro=a("div"),f(y8.$$.fragment),XLr=l(),Sve=a("p"),zLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QLr=l(),Pn=a("p"),WLr=o("The model class to instantiate is selected based on the "),Rve=a("code"),HLr=o("model_type"),ULr=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=a("code"),KLr=o("pretrained_model_name_or_path"),ZLr=o(":"),e8r=l(),ve=a("ul"),RE=a("li"),$ve=a("strong"),o8r=o("albert"),r8r=o(" \u2014 "),aH=a("a"),t8r=o("FlaxAlbertForSequenceClassification"),a8r=o(" (ALBERT model)"),n8r=l(),BE=a("li"),Ive=a("strong"),s8r=o("bart"),l8r=o(" \u2014 "),nH=a("a"),i8r=o("FlaxBartForSequenceClassification"),d8r=o(" (BART model)"),c8r=l(),PE=a("li"),qve=a("strong"),f8r=o("bert"),m8r=o(" \u2014 "),sH=a("a"),g8r=o("FlaxBertForSequenceClassification"),h8r=o(" (BERT model)"),p8r=l(),$E=a("li"),Nve=a("strong"),_8r=o("big_bird"),u8r=o(" \u2014 "),lH=a("a"),b8r=o("FlaxBigBirdForSequenceClassification"),F8r=o(" (BigBird model)"),v8r=l(),IE=a("li"),jve=a("strong"),T8r=o("distilbert"),M8r=o(" \u2014 "),iH=a("a"),E8r=o("FlaxDistilBertForSequenceClassification"),C8r=o(" (DistilBERT model)"),w8r=l(),qE=a("li"),Dve=a("strong"),A8r=o("electra"),y8r=o(" \u2014 "),dH=a("a"),L8r=o("FlaxElectraForSequenceClassification"),x8r=o(" (ELECTRA model)"),k8r=l(),NE=a("li"),Gve=a("strong"),S8r=o("mbart"),R8r=o(" \u2014 "),cH=a("a"),B8r=o("FlaxMBartForSequenceClassification"),P8r=o(" (mBART model)"),$8r=l(),jE=a("li"),Ove=a("strong"),I8r=o("roberta"),q8r=o(" \u2014 "),fH=a("a"),N8r=o("FlaxRobertaForSequenceClassification"),j8r=o(" (RoBERTa model)"),D8r=l(),DE=a("li"),Vve=a("strong"),G8r=o("roformer"),O8r=o(" \u2014 "),mH=a("a"),V8r=o("FlaxRoFormerForSequenceClassification"),X8r=o(" (RoFormer model)"),z8r=l(),GE=a("li"),Xve=a("strong"),Q8r=o("xlm-roberta"),W8r=o(" \u2014 "),gH=a("a"),H8r=o("FlaxXLMRobertaForSequenceClassification"),U8r=o(" (XLM-RoBERTa model)"),J8r=l(),zve=a("p"),Y8r=o("Examples:"),K8r=l(),f(L8.$$.fragment),aPe=l(),uf=a("h2"),OE=a("a"),Qve=a("span"),f(x8.$$.fragment),Z8r=l(),Wve=a("span"),e7r=o("FlaxAutoModelForQuestionAnswering"),nPe=l(),Nr=a("div"),f(k8.$$.fragment),o7r=l(),bf=a("p"),r7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hH=a("a"),t7r=o("from_pretrained()"),a7r=o(" class method or the "),pH=a("a"),n7r=o("from_config()"),s7r=o(` class
method.`),l7r=l(),S8=a("p"),i7r=o("This class cannot be instantiated directly using "),Hve=a("code"),d7r=o("__init__()"),c7r=o(" (throws an error)."),f7r=l(),Rt=a("div"),f(R8.$$.fragment),m7r=l(),Uve=a("p"),g7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),h7r=l(),Ff=a("p"),p7r=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),_7r=o("not"),u7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),b7r=o("from_pretrained()"),F7r=o(" to load the model weights."),v7r=l(),Yve=a("p"),T7r=o("Examples:"),M7r=l(),f(B8.$$.fragment),E7r=l(),Bo=a("div"),f(P8.$$.fragment),C7r=l(),Kve=a("p"),w7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),A7r=l(),$n=a("p"),y7r=o("The model class to instantiate is selected based on the "),Zve=a("code"),L7r=o("model_type"),x7r=o(` property of the config object (either
passed as an argument or loaded from `),e6e=a("code"),k7r=o("pretrained_model_name_or_path"),S7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=a("code"),R7r=o("pretrained_model_name_or_path"),B7r=o(":"),P7r=l(),Te=a("ul"),VE=a("li"),r6e=a("strong"),$7r=o("albert"),I7r=o(" \u2014 "),uH=a("a"),q7r=o("FlaxAlbertForQuestionAnswering"),N7r=o(" (ALBERT model)"),j7r=l(),XE=a("li"),t6e=a("strong"),D7r=o("bart"),G7r=o(" \u2014 "),bH=a("a"),O7r=o("FlaxBartForQuestionAnswering"),V7r=o(" (BART model)"),X7r=l(),zE=a("li"),a6e=a("strong"),z7r=o("bert"),Q7r=o(" \u2014 "),FH=a("a"),W7r=o("FlaxBertForQuestionAnswering"),H7r=o(" (BERT model)"),U7r=l(),QE=a("li"),n6e=a("strong"),J7r=o("big_bird"),Y7r=o(" \u2014 "),vH=a("a"),K7r=o("FlaxBigBirdForQuestionAnswering"),Z7r=o(" (BigBird model)"),e9r=l(),WE=a("li"),s6e=a("strong"),o9r=o("distilbert"),r9r=o(" \u2014 "),TH=a("a"),t9r=o("FlaxDistilBertForQuestionAnswering"),a9r=o(" (DistilBERT model)"),n9r=l(),HE=a("li"),l6e=a("strong"),s9r=o("electra"),l9r=o(" \u2014 "),MH=a("a"),i9r=o("FlaxElectraForQuestionAnswering"),d9r=o(" (ELECTRA model)"),c9r=l(),UE=a("li"),i6e=a("strong"),f9r=o("mbart"),m9r=o(" \u2014 "),EH=a("a"),g9r=o("FlaxMBartForQuestionAnswering"),h9r=o(" (mBART model)"),p9r=l(),JE=a("li"),d6e=a("strong"),_9r=o("roberta"),u9r=o(" \u2014 "),CH=a("a"),b9r=o("FlaxRobertaForQuestionAnswering"),F9r=o(" (RoBERTa model)"),v9r=l(),YE=a("li"),c6e=a("strong"),T9r=o("roformer"),M9r=o(" \u2014 "),wH=a("a"),E9r=o("FlaxRoFormerForQuestionAnswering"),C9r=o(" (RoFormer model)"),w9r=l(),KE=a("li"),f6e=a("strong"),A9r=o("xlm-roberta"),y9r=o(" \u2014 "),AH=a("a"),L9r=o("FlaxXLMRobertaForQuestionAnswering"),x9r=o(" (XLM-RoBERTa model)"),k9r=l(),m6e=a("p"),S9r=o("Examples:"),R9r=l(),f($8.$$.fragment),sPe=l(),vf=a("h2"),ZE=a("a"),g6e=a("span"),f(I8.$$.fragment),B9r=l(),h6e=a("span"),P9r=o("FlaxAutoModelForTokenClassification"),lPe=l(),jr=a("div"),f(q8.$$.fragment),$9r=l(),Tf=a("p"),I9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yH=a("a"),q9r=o("from_pretrained()"),N9r=o(" class method or the "),LH=a("a"),j9r=o("from_config()"),D9r=o(` class
method.`),G9r=l(),N8=a("p"),O9r=o("This class cannot be instantiated directly using "),p6e=a("code"),V9r=o("__init__()"),X9r=o(" (throws an error)."),z9r=l(),Bt=a("div"),f(j8.$$.fragment),Q9r=l(),_6e=a("p"),W9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),H9r=l(),Mf=a("p"),U9r=o(`Note:
Loading a model from its configuration file does `),u6e=a("strong"),J9r=o("not"),Y9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),K9r=o("from_pretrained()"),Z9r=o(" to load the model weights."),exr=l(),b6e=a("p"),oxr=o("Examples:"),rxr=l(),f(D8.$$.fragment),txr=l(),Po=a("div"),f(G8.$$.fragment),axr=l(),F6e=a("p"),nxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sxr=l(),In=a("p"),lxr=o("The model class to instantiate is selected based on the "),v6e=a("code"),ixr=o("model_type"),dxr=o(` property of the config object (either
passed as an argument or loaded from `),T6e=a("code"),cxr=o("pretrained_model_name_or_path"),fxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=a("code"),mxr=o("pretrained_model_name_or_path"),gxr=o(":"),hxr=l(),Be=a("ul"),eC=a("li"),E6e=a("strong"),pxr=o("albert"),_xr=o(" \u2014 "),kH=a("a"),uxr=o("FlaxAlbertForTokenClassification"),bxr=o(" (ALBERT model)"),Fxr=l(),oC=a("li"),C6e=a("strong"),vxr=o("bert"),Txr=o(" \u2014 "),SH=a("a"),Mxr=o("FlaxBertForTokenClassification"),Exr=o(" (BERT model)"),Cxr=l(),rC=a("li"),w6e=a("strong"),wxr=o("big_bird"),Axr=o(" \u2014 "),RH=a("a"),yxr=o("FlaxBigBirdForTokenClassification"),Lxr=o(" (BigBird model)"),xxr=l(),tC=a("li"),A6e=a("strong"),kxr=o("distilbert"),Sxr=o(" \u2014 "),BH=a("a"),Rxr=o("FlaxDistilBertForTokenClassification"),Bxr=o(" (DistilBERT model)"),Pxr=l(),aC=a("li"),y6e=a("strong"),$xr=o("electra"),Ixr=o(" \u2014 "),PH=a("a"),qxr=o("FlaxElectraForTokenClassification"),Nxr=o(" (ELECTRA model)"),jxr=l(),nC=a("li"),L6e=a("strong"),Dxr=o("roberta"),Gxr=o(" \u2014 "),$H=a("a"),Oxr=o("FlaxRobertaForTokenClassification"),Vxr=o(" (RoBERTa model)"),Xxr=l(),sC=a("li"),x6e=a("strong"),zxr=o("roformer"),Qxr=o(" \u2014 "),IH=a("a"),Wxr=o("FlaxRoFormerForTokenClassification"),Hxr=o(" (RoFormer model)"),Uxr=l(),lC=a("li"),k6e=a("strong"),Jxr=o("xlm-roberta"),Yxr=o(" \u2014 "),qH=a("a"),Kxr=o("FlaxXLMRobertaForTokenClassification"),Zxr=o(" (XLM-RoBERTa model)"),ekr=l(),S6e=a("p"),okr=o("Examples:"),rkr=l(),f(O8.$$.fragment),iPe=l(),Ef=a("h2"),iC=a("a"),R6e=a("span"),f(V8.$$.fragment),tkr=l(),B6e=a("span"),akr=o("FlaxAutoModelForMultipleChoice"),dPe=l(),Dr=a("div"),f(X8.$$.fragment),nkr=l(),Cf=a("p"),skr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NH=a("a"),lkr=o("from_pretrained()"),ikr=o(" class method or the "),jH=a("a"),dkr=o("from_config()"),ckr=o(` class
method.`),fkr=l(),z8=a("p"),mkr=o("This class cannot be instantiated directly using "),P6e=a("code"),gkr=o("__init__()"),hkr=o(" (throws an error)."),pkr=l(),Pt=a("div"),f(Q8.$$.fragment),_kr=l(),$6e=a("p"),ukr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bkr=l(),wf=a("p"),Fkr=o(`Note:
Loading a model from its configuration file does `),I6e=a("strong"),vkr=o("not"),Tkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" to load the model weights."),Ckr=l(),q6e=a("p"),wkr=o("Examples:"),Akr=l(),f(W8.$$.fragment),ykr=l(),$o=a("div"),f(H8.$$.fragment),Lkr=l(),N6e=a("p"),xkr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kkr=l(),qn=a("p"),Skr=o("The model class to instantiate is selected based on the "),j6e=a("code"),Rkr=o("model_type"),Bkr=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),Pkr=o("pretrained_model_name_or_path"),$kr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=a("code"),Ikr=o("pretrained_model_name_or_path"),qkr=o(":"),Nkr=l(),Pe=a("ul"),dC=a("li"),O6e=a("strong"),jkr=o("albert"),Dkr=o(" \u2014 "),GH=a("a"),Gkr=o("FlaxAlbertForMultipleChoice"),Okr=o(" (ALBERT model)"),Vkr=l(),cC=a("li"),V6e=a("strong"),Xkr=o("bert"),zkr=o(" \u2014 "),OH=a("a"),Qkr=o("FlaxBertForMultipleChoice"),Wkr=o(" (BERT model)"),Hkr=l(),fC=a("li"),X6e=a("strong"),Ukr=o("big_bird"),Jkr=o(" \u2014 "),VH=a("a"),Ykr=o("FlaxBigBirdForMultipleChoice"),Kkr=o(" (BigBird model)"),Zkr=l(),mC=a("li"),z6e=a("strong"),eSr=o("distilbert"),oSr=o(" \u2014 "),XH=a("a"),rSr=o("FlaxDistilBertForMultipleChoice"),tSr=o(" (DistilBERT model)"),aSr=l(),gC=a("li"),Q6e=a("strong"),nSr=o("electra"),sSr=o(" \u2014 "),zH=a("a"),lSr=o("FlaxElectraForMultipleChoice"),iSr=o(" (ELECTRA model)"),dSr=l(),hC=a("li"),W6e=a("strong"),cSr=o("roberta"),fSr=o(" \u2014 "),QH=a("a"),mSr=o("FlaxRobertaForMultipleChoice"),gSr=o(" (RoBERTa model)"),hSr=l(),pC=a("li"),H6e=a("strong"),pSr=o("roformer"),_Sr=o(" \u2014 "),WH=a("a"),uSr=o("FlaxRoFormerForMultipleChoice"),bSr=o(" (RoFormer model)"),FSr=l(),_C=a("li"),U6e=a("strong"),vSr=o("xlm-roberta"),TSr=o(" \u2014 "),HH=a("a"),MSr=o("FlaxXLMRobertaForMultipleChoice"),ESr=o(" (XLM-RoBERTa model)"),CSr=l(),J6e=a("p"),wSr=o("Examples:"),ASr=l(),f(U8.$$.fragment),cPe=l(),Af=a("h2"),uC=a("a"),Y6e=a("span"),f(J8.$$.fragment),ySr=l(),K6e=a("span"),LSr=o("FlaxAutoModelForNextSentencePrediction"),fPe=l(),Gr=a("div"),f(Y8.$$.fragment),xSr=l(),yf=a("p"),kSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UH=a("a"),SSr=o("from_pretrained()"),RSr=o(" class method or the "),JH=a("a"),BSr=o("from_config()"),PSr=o(` class
method.`),$Sr=l(),K8=a("p"),ISr=o("This class cannot be instantiated directly using "),Z6e=a("code"),qSr=o("__init__()"),NSr=o(" (throws an error)."),jSr=l(),$t=a("div"),f(Z8.$$.fragment),DSr=l(),eTe=a("p"),GSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),OSr=l(),Lf=a("p"),VSr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),XSr=o("not"),zSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),QSr=o("from_pretrained()"),WSr=o(" to load the model weights."),HSr=l(),rTe=a("p"),USr=o("Examples:"),JSr=l(),f(e7.$$.fragment),YSr=l(),Io=a("div"),f(o7.$$.fragment),KSr=l(),tTe=a("p"),ZSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eRr=l(),Nn=a("p"),oRr=o("The model class to instantiate is selected based on the "),aTe=a("code"),rRr=o("model_type"),tRr=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),aRr=o("pretrained_model_name_or_path"),nRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),sRr=o("pretrained_model_name_or_path"),lRr=o(":"),iRr=l(),lTe=a("ul"),bC=a("li"),iTe=a("strong"),dRr=o("bert"),cRr=o(" \u2014 "),KH=a("a"),fRr=o("FlaxBertForNextSentencePrediction"),mRr=o(" (BERT model)"),gRr=l(),dTe=a("p"),hRr=o("Examples:"),pRr=l(),f(r7.$$.fragment),mPe=l(),xf=a("h2"),FC=a("a"),cTe=a("span"),f(t7.$$.fragment),_Rr=l(),fTe=a("span"),uRr=o("FlaxAutoModelForImageClassification"),gPe=l(),Or=a("div"),f(a7.$$.fragment),bRr=l(),kf=a("p"),FRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZH=a("a"),vRr=o("from_pretrained()"),TRr=o(" class method or the "),eU=a("a"),MRr=o("from_config()"),ERr=o(` class
method.`),CRr=l(),n7=a("p"),wRr=o("This class cannot be instantiated directly using "),mTe=a("code"),ARr=o("__init__()"),yRr=o(" (throws an error)."),LRr=l(),It=a("div"),f(s7.$$.fragment),xRr=l(),gTe=a("p"),kRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SRr=l(),Sf=a("p"),RRr=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),BRr=o("not"),PRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),$Rr=o("from_pretrained()"),IRr=o(" to load the model weights."),qRr=l(),pTe=a("p"),NRr=o("Examples:"),jRr=l(),f(l7.$$.fragment),DRr=l(),qo=a("div"),f(i7.$$.fragment),GRr=l(),_Te=a("p"),ORr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VRr=l(),jn=a("p"),XRr=o("The model class to instantiate is selected based on the "),uTe=a("code"),zRr=o("model_type"),QRr=o(` property of the config object (either
passed as an argument or loaded from `),bTe=a("code"),WRr=o("pretrained_model_name_or_path"),HRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),URr=o("pretrained_model_name_or_path"),JRr=o(":"),YRr=l(),d7=a("ul"),vC=a("li"),vTe=a("strong"),KRr=o("beit"),ZRr=o(" \u2014 "),rU=a("a"),eBr=o("FlaxBeitForImageClassification"),oBr=o(" (BEiT model)"),rBr=l(),TC=a("li"),TTe=a("strong"),tBr=o("vit"),aBr=o(" \u2014 "),tU=a("a"),nBr=o("FlaxViTForImageClassification"),sBr=o(" (ViT model)"),lBr=l(),MTe=a("p"),iBr=o("Examples:"),dBr=l(),f(c7.$$.fragment),hPe=l(),Rf=a("h2"),MC=a("a"),ETe=a("span"),f(f7.$$.fragment),cBr=l(),CTe=a("span"),fBr=o("FlaxAutoModelForVision2Seq"),pPe=l(),Vr=a("div"),f(m7.$$.fragment),mBr=l(),Bf=a("p"),gBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aU=a("a"),hBr=o("from_pretrained()"),pBr=o(" class method or the "),nU=a("a"),_Br=o("from_config()"),uBr=o(` class
method.`),bBr=l(),g7=a("p"),FBr=o("This class cannot be instantiated directly using "),wTe=a("code"),vBr=o("__init__()"),TBr=o(" (throws an error)."),MBr=l(),qt=a("div"),f(h7.$$.fragment),EBr=l(),ATe=a("p"),CBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wBr=l(),Pf=a("p"),ABr=o(`Note:
Loading a model from its configuration file does `),yTe=a("strong"),yBr=o("not"),LBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),xBr=o("from_pretrained()"),kBr=o(" to load the model weights."),SBr=l(),LTe=a("p"),RBr=o("Examples:"),BBr=l(),f(p7.$$.fragment),PBr=l(),No=a("div"),f(_7.$$.fragment),$Br=l(),xTe=a("p"),IBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qBr=l(),Dn=a("p"),NBr=o("The model class to instantiate is selected based on the "),kTe=a("code"),jBr=o("model_type"),DBr=o(` property of the config object (either
passed as an argument or loaded from `),STe=a("code"),GBr=o("pretrained_model_name_or_path"),OBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=a("code"),VBr=o("pretrained_model_name_or_path"),XBr=o(":"),zBr=l(),BTe=a("ul"),EC=a("li"),PTe=a("strong"),QBr=o("vision-encoder-decoder"),WBr=o(" \u2014 "),lU=a("a"),HBr=o("FlaxVisionEncoderDecoderModel"),UBr=o(" (Vision Encoder decoder model)"),JBr=l(),$Te=a("p"),YBr=o("Examples:"),KBr=l(),f(u7.$$.fragment),this.h()},l(c){const u=B3t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var b7=s(de);Ce=n(b7,"A",{id:!0,class:!0,href:!0});var ITe=s(Ce);lo=n(ITe,"SPAN",{});var qTe=s(lo);m(ge.$$.fragment,qTe),qTe.forEach(t),ITe.forEach(t),Me=i(b7),Xo=n(b7,"SPAN",{});var ePr=s(Xo);Ii=r(ePr,"Auto Classes"),ePr.forEach(t),b7.forEach(t),qf=i(c),fa=n(c,"P",{});var uPe=s(fa);qi=r(uPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(uPe,"CODE",{});var oPr=s(Ni);E3=r(oPr,"from_pretrained()"),oPr.forEach(t),Nf=r(uPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),uPe.forEach(t),xe=i(c),co=n(c,"P",{});var CC=s(co);ji=r(CC,"Instantiating one of "),Gn=n(CC,"A",{href:!0});var rPr=s(Gn);C3=r(rPr,"AutoConfig"),rPr.forEach(t),On=r(CC,", "),Vn=n(CC,"A",{href:!0});var tPr=s(Vn);w3=r(tPr,"AutoModel"),tPr.forEach(t),Di=r(CC,`, and
`),Xn=n(CC,"A",{href:!0});var aPr=s(Xn);A3=r(aPr,"AutoTokenizer"),aPr.forEach(t),Gi=r(CC," will directly create a class of the relevant architecture. For instance"),CC.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var bPe=s(ue);p9=r(bPe,"will create a model that is an instance of "),Oi=n(bPe,"A",{href:!0});var nPr=s(Oi);_9=r(nPr,"BertModel"),nPr.forEach(t),u9=r(bPe,"."),bPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var FPe=s(Ga);b9=r(FPe,"There is one class of "),Df=n(FPe,"CODE",{});var sPr=s(Df);F9=r(sPr,"AutoModel"),sPr.forEach(t),LIe=r(FPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),FPe.forEach(t),pRe=i(c),Vi=n(c,"H2",{class:!0});var vPe=s(Vi);Gf=n(vPe,"A",{id:!0,class:!0,href:!0});var lPr=s(Gf);oY=n(lPr,"SPAN",{});var iPr=s(oY);m(y3.$$.fragment,iPr),iPr.forEach(t),lPr.forEach(t),xIe=i(vPe),rY=n(vPe,"SPAN",{});var dPr=s(rY);kIe=r(dPr,"Extending the Auto Classes"),dPr.forEach(t),vPe.forEach(t),_Re=i(c),zn=n(c,"P",{});var iU=s(zn);SIe=r(iU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tY=n(iU,"CODE",{});var cPr=s(tY);RIe=r(cPr,"NewModel"),cPr.forEach(t),BIe=r(iU,", make sure you have a "),aY=n(iU,"CODE",{});var fPr=s(aY);PIe=r(fPr,"NewModelConfig"),fPr.forEach(t),$Ie=r(iU,` then you can add those to the auto
classes like this:`),iU.forEach(t),uRe=i(c),m(L3.$$.fragment,c),bRe=i(c),v9=n(c,"P",{});var mPr=s(v9);IIe=r(mPr,"You will then be able to use the auto classes like you would usually do!"),mPr.forEach(t),FRe=i(c),m(Of.$$.fragment,c),vRe=i(c),Xi=n(c,"H2",{class:!0});var TPe=s(Xi);Vf=n(TPe,"A",{id:!0,class:!0,href:!0});var gPr=s(Vf);nY=n(gPr,"SPAN",{});var hPr=s(nY);m(x3.$$.fragment,hPr),hPr.forEach(t),gPr.forEach(t),qIe=i(TPe),sY=n(TPe,"SPAN",{});var pPr=s(sY);NIe=r(pPr,"AutoConfig"),pPr.forEach(t),TPe.forEach(t),TRe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(k3.$$.fragment,Os),jIe=i(Os),S3=n(Os,"P",{});var MPe=s(S3);DIe=r(MPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),T9=n(MPe,"A",{href:!0});var _Pr=s(T9);GIe=r(_Pr,"from_pretrained()"),_Pr.forEach(t),OIe=r(MPe," class method."),MPe.forEach(t),VIe=i(Os),R3=n(Os,"P",{});var EPe=s(R3);XIe=r(EPe,"This class cannot be instantiated directly using "),lY=n(EPe,"CODE",{});var uPr=s(lY);zIe=r(uPr,"__init__()"),uPr.forEach(t),QIe=r(EPe," (throws an error)."),EPe.forEach(t),WIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(B3.$$.fragment,ga),HIe=i(ga),iY=n(ga,"P",{});var bPr=s(iY);UIe=r(bPr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),bPr.forEach(t),JIe=i(ga),zi=n(ga,"P",{});var dU=s(zi);YIe=r(dU,"The configuration class to instantiate is selected based on the "),dY=n(dU,"CODE",{});var FPr=s(dY);KIe=r(FPr,"model_type"),FPr.forEach(t),ZIe=r(dU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cY=n(dU,"CODE",{});var vPr=s(cY);eqe=r(vPr,"pretrained_model_name_or_path"),vPr.forEach(t),oqe=r(dU,":"),dU.forEach(t),rqe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var NTe=s(Xf);fY=n(NTe,"STRONG",{});var TPr=s(fY);tqe=r(TPr,"albert"),TPr.forEach(t),aqe=r(NTe," \u2014 "),M9=n(NTe,"A",{href:!0});var MPr=s(M9);nqe=r(MPr,"AlbertConfig"),MPr.forEach(t),sqe=r(NTe," (ALBERT model)"),NTe.forEach(t),lqe=i(v),zf=n(v,"LI",{});var jTe=s(zf);mY=n(jTe,"STRONG",{});var EPr=s(mY);iqe=r(EPr,"bart"),EPr.forEach(t),dqe=r(jTe," \u2014 "),E9=n(jTe,"A",{href:!0});var CPr=s(E9);cqe=r(CPr,"BartConfig"),CPr.forEach(t),fqe=r(jTe," (BART model)"),jTe.forEach(t),mqe=i(v),Qf=n(v,"LI",{});var DTe=s(Qf);gY=n(DTe,"STRONG",{});var wPr=s(gY);gqe=r(wPr,"beit"),wPr.forEach(t),hqe=r(DTe," \u2014 "),C9=n(DTe,"A",{href:!0});var APr=s(C9);pqe=r(APr,"BeitConfig"),APr.forEach(t),_qe=r(DTe," (BEiT model)"),DTe.forEach(t),uqe=i(v),Wf=n(v,"LI",{});var GTe=s(Wf);hY=n(GTe,"STRONG",{});var yPr=s(hY);bqe=r(yPr,"bert"),yPr.forEach(t),Fqe=r(GTe," \u2014 "),w9=n(GTe,"A",{href:!0});var LPr=s(w9);vqe=r(LPr,"BertConfig"),LPr.forEach(t),Tqe=r(GTe," (BERT model)"),GTe.forEach(t),Mqe=i(v),Hf=n(v,"LI",{});var OTe=s(Hf);pY=n(OTe,"STRONG",{});var xPr=s(pY);Eqe=r(xPr,"bert-generation"),xPr.forEach(t),Cqe=r(OTe," \u2014 "),A9=n(OTe,"A",{href:!0});var kPr=s(A9);wqe=r(kPr,"BertGenerationConfig"),kPr.forEach(t),Aqe=r(OTe," (Bert Generation model)"),OTe.forEach(t),yqe=i(v),Uf=n(v,"LI",{});var VTe=s(Uf);_Y=n(VTe,"STRONG",{});var SPr=s(_Y);Lqe=r(SPr,"big_bird"),SPr.forEach(t),xqe=r(VTe," \u2014 "),y9=n(VTe,"A",{href:!0});var RPr=s(y9);kqe=r(RPr,"BigBirdConfig"),RPr.forEach(t),Sqe=r(VTe," (BigBird model)"),VTe.forEach(t),Rqe=i(v),Jf=n(v,"LI",{});var XTe=s(Jf);uY=n(XTe,"STRONG",{});var BPr=s(uY);Bqe=r(BPr,"bigbird_pegasus"),BPr.forEach(t),Pqe=r(XTe," \u2014 "),L9=n(XTe,"A",{href:!0});var PPr=s(L9);$qe=r(PPr,"BigBirdPegasusConfig"),PPr.forEach(t),Iqe=r(XTe," (BigBirdPegasus model)"),XTe.forEach(t),qqe=i(v),Yf=n(v,"LI",{});var zTe=s(Yf);bY=n(zTe,"STRONG",{});var $Pr=s(bY);Nqe=r($Pr,"blenderbot"),$Pr.forEach(t),jqe=r(zTe," \u2014 "),x9=n(zTe,"A",{href:!0});var IPr=s(x9);Dqe=r(IPr,"BlenderbotConfig"),IPr.forEach(t),Gqe=r(zTe," (Blenderbot model)"),zTe.forEach(t),Oqe=i(v),Kf=n(v,"LI",{});var QTe=s(Kf);FY=n(QTe,"STRONG",{});var qPr=s(FY);Vqe=r(qPr,"blenderbot-small"),qPr.forEach(t),Xqe=r(QTe," \u2014 "),k9=n(QTe,"A",{href:!0});var NPr=s(k9);zqe=r(NPr,"BlenderbotSmallConfig"),NPr.forEach(t),Qqe=r(QTe," (BlenderbotSmall model)"),QTe.forEach(t),Wqe=i(v),Zf=n(v,"LI",{});var WTe=s(Zf);vY=n(WTe,"STRONG",{});var jPr=s(vY);Hqe=r(jPr,"camembert"),jPr.forEach(t),Uqe=r(WTe," \u2014 "),S9=n(WTe,"A",{href:!0});var DPr=s(S9);Jqe=r(DPr,"CamembertConfig"),DPr.forEach(t),Yqe=r(WTe," (CamemBERT model)"),WTe.forEach(t),Kqe=i(v),em=n(v,"LI",{});var HTe=s(em);TY=n(HTe,"STRONG",{});var GPr=s(TY);Zqe=r(GPr,"canine"),GPr.forEach(t),eNe=r(HTe," \u2014 "),R9=n(HTe,"A",{href:!0});var OPr=s(R9);oNe=r(OPr,"CanineConfig"),OPr.forEach(t),rNe=r(HTe," (Canine model)"),HTe.forEach(t),tNe=i(v),om=n(v,"LI",{});var UTe=s(om);MY=n(UTe,"STRONG",{});var VPr=s(MY);aNe=r(VPr,"clip"),VPr.forEach(t),nNe=r(UTe," \u2014 "),B9=n(UTe,"A",{href:!0});var XPr=s(B9);sNe=r(XPr,"CLIPConfig"),XPr.forEach(t),lNe=r(UTe," (CLIP model)"),UTe.forEach(t),iNe=i(v),rm=n(v,"LI",{});var JTe=s(rm);EY=n(JTe,"STRONG",{});var zPr=s(EY);dNe=r(zPr,"convbert"),zPr.forEach(t),cNe=r(JTe," \u2014 "),P9=n(JTe,"A",{href:!0});var QPr=s(P9);fNe=r(QPr,"ConvBertConfig"),QPr.forEach(t),mNe=r(JTe," (ConvBERT model)"),JTe.forEach(t),gNe=i(v),tm=n(v,"LI",{});var YTe=s(tm);CY=n(YTe,"STRONG",{});var WPr=s(CY);hNe=r(WPr,"convnext"),WPr.forEach(t),pNe=r(YTe," \u2014 "),$9=n(YTe,"A",{href:!0});var HPr=s($9);_Ne=r(HPr,"ConvNextConfig"),HPr.forEach(t),uNe=r(YTe," (ConvNext model)"),YTe.forEach(t),bNe=i(v),am=n(v,"LI",{});var KTe=s(am);wY=n(KTe,"STRONG",{});var UPr=s(wY);FNe=r(UPr,"ctrl"),UPr.forEach(t),vNe=r(KTe," \u2014 "),I9=n(KTe,"A",{href:!0});var JPr=s(I9);TNe=r(JPr,"CTRLConfig"),JPr.forEach(t),MNe=r(KTe," (CTRL model)"),KTe.forEach(t),ENe=i(v),nm=n(v,"LI",{});var ZTe=s(nm);AY=n(ZTe,"STRONG",{});var YPr=s(AY);CNe=r(YPr,"data2vec-audio"),YPr.forEach(t),wNe=r(ZTe," \u2014 "),q9=n(ZTe,"A",{href:!0});var KPr=s(q9);ANe=r(KPr,"Data2VecAudioConfig"),KPr.forEach(t),yNe=r(ZTe," (Data2VecAudio model)"),ZTe.forEach(t),LNe=i(v),sm=n(v,"LI",{});var eMe=s(sm);yY=n(eMe,"STRONG",{});var ZPr=s(yY);xNe=r(ZPr,"data2vec-text"),ZPr.forEach(t),kNe=r(eMe," \u2014 "),N9=n(eMe,"A",{href:!0});var e$r=s(N9);SNe=r(e$r,"Data2VecTextConfig"),e$r.forEach(t),RNe=r(eMe," (Data2VecText model)"),eMe.forEach(t),BNe=i(v),lm=n(v,"LI",{});var oMe=s(lm);LY=n(oMe,"STRONG",{});var o$r=s(LY);PNe=r(o$r,"deberta"),o$r.forEach(t),$Ne=r(oMe," \u2014 "),j9=n(oMe,"A",{href:!0});var r$r=s(j9);INe=r(r$r,"DebertaConfig"),r$r.forEach(t),qNe=r(oMe," (DeBERTa model)"),oMe.forEach(t),NNe=i(v),im=n(v,"LI",{});var rMe=s(im);xY=n(rMe,"STRONG",{});var t$r=s(xY);jNe=r(t$r,"deberta-v2"),t$r.forEach(t),DNe=r(rMe," \u2014 "),D9=n(rMe,"A",{href:!0});var a$r=s(D9);GNe=r(a$r,"DebertaV2Config"),a$r.forEach(t),ONe=r(rMe," (DeBERTa-v2 model)"),rMe.forEach(t),VNe=i(v),dm=n(v,"LI",{});var tMe=s(dm);kY=n(tMe,"STRONG",{});var n$r=s(kY);XNe=r(n$r,"decision_transformer"),n$r.forEach(t),zNe=r(tMe," \u2014 "),G9=n(tMe,"A",{href:!0});var s$r=s(G9);QNe=r(s$r,"DecisionTransformerConfig"),s$r.forEach(t),WNe=r(tMe," (Decision Transformer model)"),tMe.forEach(t),HNe=i(v),cm=n(v,"LI",{});var aMe=s(cm);SY=n(aMe,"STRONG",{});var l$r=s(SY);UNe=r(l$r,"deit"),l$r.forEach(t),JNe=r(aMe," \u2014 "),O9=n(aMe,"A",{href:!0});var i$r=s(O9);YNe=r(i$r,"DeiTConfig"),i$r.forEach(t),KNe=r(aMe," (DeiT model)"),aMe.forEach(t),ZNe=i(v),fm=n(v,"LI",{});var nMe=s(fm);RY=n(nMe,"STRONG",{});var d$r=s(RY);eje=r(d$r,"detr"),d$r.forEach(t),oje=r(nMe," \u2014 "),V9=n(nMe,"A",{href:!0});var c$r=s(V9);rje=r(c$r,"DetrConfig"),c$r.forEach(t),tje=r(nMe," (DETR model)"),nMe.forEach(t),aje=i(v),mm=n(v,"LI",{});var sMe=s(mm);BY=n(sMe,"STRONG",{});var f$r=s(BY);nje=r(f$r,"distilbert"),f$r.forEach(t),sje=r(sMe," \u2014 "),X9=n(sMe,"A",{href:!0});var m$r=s(X9);lje=r(m$r,"DistilBertConfig"),m$r.forEach(t),ije=r(sMe," (DistilBERT model)"),sMe.forEach(t),dje=i(v),gm=n(v,"LI",{});var lMe=s(gm);PY=n(lMe,"STRONG",{});var g$r=s(PY);cje=r(g$r,"dpr"),g$r.forEach(t),fje=r(lMe," \u2014 "),z9=n(lMe,"A",{href:!0});var h$r=s(z9);mje=r(h$r,"DPRConfig"),h$r.forEach(t),gje=r(lMe," (DPR model)"),lMe.forEach(t),hje=i(v),hm=n(v,"LI",{});var iMe=s(hm);$Y=n(iMe,"STRONG",{});var p$r=s($Y);pje=r(p$r,"dpt"),p$r.forEach(t),_je=r(iMe," \u2014 "),Q9=n(iMe,"A",{href:!0});var _$r=s(Q9);uje=r(_$r,"DPTConfig"),_$r.forEach(t),bje=r(iMe," (DPT model)"),iMe.forEach(t),Fje=i(v),pm=n(v,"LI",{});var dMe=s(pm);IY=n(dMe,"STRONG",{});var u$r=s(IY);vje=r(u$r,"electra"),u$r.forEach(t),Tje=r(dMe," \u2014 "),W9=n(dMe,"A",{href:!0});var b$r=s(W9);Mje=r(b$r,"ElectraConfig"),b$r.forEach(t),Eje=r(dMe," (ELECTRA model)"),dMe.forEach(t),Cje=i(v),_m=n(v,"LI",{});var cMe=s(_m);qY=n(cMe,"STRONG",{});var F$r=s(qY);wje=r(F$r,"encoder-decoder"),F$r.forEach(t),Aje=r(cMe," \u2014 "),H9=n(cMe,"A",{href:!0});var v$r=s(H9);yje=r(v$r,"EncoderDecoderConfig"),v$r.forEach(t),Lje=r(cMe," (Encoder decoder model)"),cMe.forEach(t),xje=i(v),um=n(v,"LI",{});var fMe=s(um);NY=n(fMe,"STRONG",{});var T$r=s(NY);kje=r(T$r,"flaubert"),T$r.forEach(t),Sje=r(fMe," \u2014 "),U9=n(fMe,"A",{href:!0});var M$r=s(U9);Rje=r(M$r,"FlaubertConfig"),M$r.forEach(t),Bje=r(fMe," (FlauBERT model)"),fMe.forEach(t),Pje=i(v),bm=n(v,"LI",{});var mMe=s(bm);jY=n(mMe,"STRONG",{});var E$r=s(jY);$je=r(E$r,"fnet"),E$r.forEach(t),Ije=r(mMe," \u2014 "),J9=n(mMe,"A",{href:!0});var C$r=s(J9);qje=r(C$r,"FNetConfig"),C$r.forEach(t),Nje=r(mMe," (FNet model)"),mMe.forEach(t),jje=i(v),Fm=n(v,"LI",{});var gMe=s(Fm);DY=n(gMe,"STRONG",{});var w$r=s(DY);Dje=r(w$r,"fsmt"),w$r.forEach(t),Gje=r(gMe," \u2014 "),Y9=n(gMe,"A",{href:!0});var A$r=s(Y9);Oje=r(A$r,"FSMTConfig"),A$r.forEach(t),Vje=r(gMe," (FairSeq Machine-Translation model)"),gMe.forEach(t),Xje=i(v),vm=n(v,"LI",{});var hMe=s(vm);GY=n(hMe,"STRONG",{});var y$r=s(GY);zje=r(y$r,"funnel"),y$r.forEach(t),Qje=r(hMe," \u2014 "),K9=n(hMe,"A",{href:!0});var L$r=s(K9);Wje=r(L$r,"FunnelConfig"),L$r.forEach(t),Hje=r(hMe," (Funnel Transformer model)"),hMe.forEach(t),Uje=i(v),Tm=n(v,"LI",{});var pMe=s(Tm);OY=n(pMe,"STRONG",{});var x$r=s(OY);Jje=r(x$r,"glpn"),x$r.forEach(t),Yje=r(pMe," \u2014 "),Z9=n(pMe,"A",{href:!0});var k$r=s(Z9);Kje=r(k$r,"GLPNConfig"),k$r.forEach(t),Zje=r(pMe," (GLPN model)"),pMe.forEach(t),eDe=i(v),Mm=n(v,"LI",{});var _Me=s(Mm);VY=n(_Me,"STRONG",{});var S$r=s(VY);oDe=r(S$r,"gpt2"),S$r.forEach(t),rDe=r(_Me," \u2014 "),ex=n(_Me,"A",{href:!0});var R$r=s(ex);tDe=r(R$r,"GPT2Config"),R$r.forEach(t),aDe=r(_Me," (OpenAI GPT-2 model)"),_Me.forEach(t),nDe=i(v),Em=n(v,"LI",{});var uMe=s(Em);XY=n(uMe,"STRONG",{});var B$r=s(XY);sDe=r(B$r,"gpt_neo"),B$r.forEach(t),lDe=r(uMe," \u2014 "),ox=n(uMe,"A",{href:!0});var P$r=s(ox);iDe=r(P$r,"GPTNeoConfig"),P$r.forEach(t),dDe=r(uMe," (GPT Neo model)"),uMe.forEach(t),cDe=i(v),Cm=n(v,"LI",{});var bMe=s(Cm);zY=n(bMe,"STRONG",{});var $$r=s(zY);fDe=r($$r,"gptj"),$$r.forEach(t),mDe=r(bMe," \u2014 "),rx=n(bMe,"A",{href:!0});var I$r=s(rx);gDe=r(I$r,"GPTJConfig"),I$r.forEach(t),hDe=r(bMe," (GPT-J model)"),bMe.forEach(t),pDe=i(v),wm=n(v,"LI",{});var FMe=s(wm);QY=n(FMe,"STRONG",{});var q$r=s(QY);_De=r(q$r,"hubert"),q$r.forEach(t),uDe=r(FMe," \u2014 "),tx=n(FMe,"A",{href:!0});var N$r=s(tx);bDe=r(N$r,"HubertConfig"),N$r.forEach(t),FDe=r(FMe," (Hubert model)"),FMe.forEach(t),vDe=i(v),Am=n(v,"LI",{});var vMe=s(Am);WY=n(vMe,"STRONG",{});var j$r=s(WY);TDe=r(j$r,"ibert"),j$r.forEach(t),MDe=r(vMe," \u2014 "),ax=n(vMe,"A",{href:!0});var D$r=s(ax);EDe=r(D$r,"IBertConfig"),D$r.forEach(t),CDe=r(vMe," (I-BERT model)"),vMe.forEach(t),wDe=i(v),ym=n(v,"LI",{});var TMe=s(ym);HY=n(TMe,"STRONG",{});var G$r=s(HY);ADe=r(G$r,"imagegpt"),G$r.forEach(t),yDe=r(TMe," \u2014 "),nx=n(TMe,"A",{href:!0});var O$r=s(nx);LDe=r(O$r,"ImageGPTConfig"),O$r.forEach(t),xDe=r(TMe," (ImageGPT model)"),TMe.forEach(t),kDe=i(v),Lm=n(v,"LI",{});var MMe=s(Lm);UY=n(MMe,"STRONG",{});var V$r=s(UY);SDe=r(V$r,"layoutlm"),V$r.forEach(t),RDe=r(MMe," \u2014 "),sx=n(MMe,"A",{href:!0});var X$r=s(sx);BDe=r(X$r,"LayoutLMConfig"),X$r.forEach(t),PDe=r(MMe," (LayoutLM model)"),MMe.forEach(t),$De=i(v),xm=n(v,"LI",{});var EMe=s(xm);JY=n(EMe,"STRONG",{});var z$r=s(JY);IDe=r(z$r,"layoutlmv2"),z$r.forEach(t),qDe=r(EMe," \u2014 "),lx=n(EMe,"A",{href:!0});var Q$r=s(lx);NDe=r(Q$r,"LayoutLMv2Config"),Q$r.forEach(t),jDe=r(EMe," (LayoutLMv2 model)"),EMe.forEach(t),DDe=i(v),km=n(v,"LI",{});var CMe=s(km);YY=n(CMe,"STRONG",{});var W$r=s(YY);GDe=r(W$r,"led"),W$r.forEach(t),ODe=r(CMe," \u2014 "),ix=n(CMe,"A",{href:!0});var H$r=s(ix);VDe=r(H$r,"LEDConfig"),H$r.forEach(t),XDe=r(CMe," (LED model)"),CMe.forEach(t),zDe=i(v),Sm=n(v,"LI",{});var wMe=s(Sm);KY=n(wMe,"STRONG",{});var U$r=s(KY);QDe=r(U$r,"longformer"),U$r.forEach(t),WDe=r(wMe," \u2014 "),dx=n(wMe,"A",{href:!0});var J$r=s(dx);HDe=r(J$r,"LongformerConfig"),J$r.forEach(t),UDe=r(wMe," (Longformer model)"),wMe.forEach(t),JDe=i(v),Rm=n(v,"LI",{});var AMe=s(Rm);ZY=n(AMe,"STRONG",{});var Y$r=s(ZY);YDe=r(Y$r,"luke"),Y$r.forEach(t),KDe=r(AMe," \u2014 "),cx=n(AMe,"A",{href:!0});var K$r=s(cx);ZDe=r(K$r,"LukeConfig"),K$r.forEach(t),eGe=r(AMe," (LUKE model)"),AMe.forEach(t),oGe=i(v),Bm=n(v,"LI",{});var yMe=s(Bm);eK=n(yMe,"STRONG",{});var Z$r=s(eK);rGe=r(Z$r,"lxmert"),Z$r.forEach(t),tGe=r(yMe," \u2014 "),fx=n(yMe,"A",{href:!0});var eIr=s(fx);aGe=r(eIr,"LxmertConfig"),eIr.forEach(t),nGe=r(yMe," (LXMERT model)"),yMe.forEach(t),sGe=i(v),Pm=n(v,"LI",{});var LMe=s(Pm);oK=n(LMe,"STRONG",{});var oIr=s(oK);lGe=r(oIr,"m2m_100"),oIr.forEach(t),iGe=r(LMe," \u2014 "),mx=n(LMe,"A",{href:!0});var rIr=s(mx);dGe=r(rIr,"M2M100Config"),rIr.forEach(t),cGe=r(LMe," (M2M100 model)"),LMe.forEach(t),fGe=i(v),$m=n(v,"LI",{});var xMe=s($m);rK=n(xMe,"STRONG",{});var tIr=s(rK);mGe=r(tIr,"marian"),tIr.forEach(t),gGe=r(xMe," \u2014 "),gx=n(xMe,"A",{href:!0});var aIr=s(gx);hGe=r(aIr,"MarianConfig"),aIr.forEach(t),pGe=r(xMe," (Marian model)"),xMe.forEach(t),_Ge=i(v),Im=n(v,"LI",{});var kMe=s(Im);tK=n(kMe,"STRONG",{});var nIr=s(tK);uGe=r(nIr,"maskformer"),nIr.forEach(t),bGe=r(kMe," \u2014 "),hx=n(kMe,"A",{href:!0});var sIr=s(hx);FGe=r(sIr,"MaskFormerConfig"),sIr.forEach(t),vGe=r(kMe," (MaskFormer model)"),kMe.forEach(t),TGe=i(v),qm=n(v,"LI",{});var SMe=s(qm);aK=n(SMe,"STRONG",{});var lIr=s(aK);MGe=r(lIr,"mbart"),lIr.forEach(t),EGe=r(SMe," \u2014 "),px=n(SMe,"A",{href:!0});var iIr=s(px);CGe=r(iIr,"MBartConfig"),iIr.forEach(t),wGe=r(SMe," (mBART model)"),SMe.forEach(t),AGe=i(v),Nm=n(v,"LI",{});var RMe=s(Nm);nK=n(RMe,"STRONG",{});var dIr=s(nK);yGe=r(dIr,"megatron-bert"),dIr.forEach(t),LGe=r(RMe," \u2014 "),_x=n(RMe,"A",{href:!0});var cIr=s(_x);xGe=r(cIr,"MegatronBertConfig"),cIr.forEach(t),kGe=r(RMe," (MegatronBert model)"),RMe.forEach(t),SGe=i(v),jm=n(v,"LI",{});var BMe=s(jm);sK=n(BMe,"STRONG",{});var fIr=s(sK);RGe=r(fIr,"mobilebert"),fIr.forEach(t),BGe=r(BMe," \u2014 "),ux=n(BMe,"A",{href:!0});var mIr=s(ux);PGe=r(mIr,"MobileBertConfig"),mIr.forEach(t),$Ge=r(BMe," (MobileBERT model)"),BMe.forEach(t),IGe=i(v),Dm=n(v,"LI",{});var PMe=s(Dm);lK=n(PMe,"STRONG",{});var gIr=s(lK);qGe=r(gIr,"mpnet"),gIr.forEach(t),NGe=r(PMe," \u2014 "),bx=n(PMe,"A",{href:!0});var hIr=s(bx);jGe=r(hIr,"MPNetConfig"),hIr.forEach(t),DGe=r(PMe," (MPNet model)"),PMe.forEach(t),GGe=i(v),Gm=n(v,"LI",{});var $Me=s(Gm);iK=n($Me,"STRONG",{});var pIr=s(iK);OGe=r(pIr,"mt5"),pIr.forEach(t),VGe=r($Me," \u2014 "),Fx=n($Me,"A",{href:!0});var _Ir=s(Fx);XGe=r(_Ir,"MT5Config"),_Ir.forEach(t),zGe=r($Me," (mT5 model)"),$Me.forEach(t),QGe=i(v),Om=n(v,"LI",{});var IMe=s(Om);dK=n(IMe,"STRONG",{});var uIr=s(dK);WGe=r(uIr,"nystromformer"),uIr.forEach(t),HGe=r(IMe," \u2014 "),vx=n(IMe,"A",{href:!0});var bIr=s(vx);UGe=r(bIr,"NystromformerConfig"),bIr.forEach(t),JGe=r(IMe," (Nystromformer model)"),IMe.forEach(t),YGe=i(v),Vm=n(v,"LI",{});var qMe=s(Vm);cK=n(qMe,"STRONG",{});var FIr=s(cK);KGe=r(FIr,"openai-gpt"),FIr.forEach(t),ZGe=r(qMe," \u2014 "),Tx=n(qMe,"A",{href:!0});var vIr=s(Tx);eOe=r(vIr,"OpenAIGPTConfig"),vIr.forEach(t),oOe=r(qMe," (OpenAI GPT model)"),qMe.forEach(t),rOe=i(v),Xm=n(v,"LI",{});var NMe=s(Xm);fK=n(NMe,"STRONG",{});var TIr=s(fK);tOe=r(TIr,"pegasus"),TIr.forEach(t),aOe=r(NMe," \u2014 "),Mx=n(NMe,"A",{href:!0});var MIr=s(Mx);nOe=r(MIr,"PegasusConfig"),MIr.forEach(t),sOe=r(NMe," (Pegasus model)"),NMe.forEach(t),lOe=i(v),zm=n(v,"LI",{});var jMe=s(zm);mK=n(jMe,"STRONG",{});var EIr=s(mK);iOe=r(EIr,"perceiver"),EIr.forEach(t),dOe=r(jMe," \u2014 "),Ex=n(jMe,"A",{href:!0});var CIr=s(Ex);cOe=r(CIr,"PerceiverConfig"),CIr.forEach(t),fOe=r(jMe," (Perceiver model)"),jMe.forEach(t),mOe=i(v),Qm=n(v,"LI",{});var DMe=s(Qm);gK=n(DMe,"STRONG",{});var wIr=s(gK);gOe=r(wIr,"plbart"),wIr.forEach(t),hOe=r(DMe," \u2014 "),Cx=n(DMe,"A",{href:!0});var AIr=s(Cx);pOe=r(AIr,"PLBartConfig"),AIr.forEach(t),_Oe=r(DMe," (PLBart model)"),DMe.forEach(t),uOe=i(v),Wm=n(v,"LI",{});var GMe=s(Wm);hK=n(GMe,"STRONG",{});var yIr=s(hK);bOe=r(yIr,"poolformer"),yIr.forEach(t),FOe=r(GMe," \u2014 "),wx=n(GMe,"A",{href:!0});var LIr=s(wx);vOe=r(LIr,"PoolFormerConfig"),LIr.forEach(t),TOe=r(GMe," (PoolFormer model)"),GMe.forEach(t),MOe=i(v),Hm=n(v,"LI",{});var OMe=s(Hm);pK=n(OMe,"STRONG",{});var xIr=s(pK);EOe=r(xIr,"prophetnet"),xIr.forEach(t),COe=r(OMe," \u2014 "),Ax=n(OMe,"A",{href:!0});var kIr=s(Ax);wOe=r(kIr,"ProphetNetConfig"),kIr.forEach(t),AOe=r(OMe," (ProphetNet model)"),OMe.forEach(t),yOe=i(v),Um=n(v,"LI",{});var VMe=s(Um);_K=n(VMe,"STRONG",{});var SIr=s(_K);LOe=r(SIr,"qdqbert"),SIr.forEach(t),xOe=r(VMe," \u2014 "),yx=n(VMe,"A",{href:!0});var RIr=s(yx);kOe=r(RIr,"QDQBertConfig"),RIr.forEach(t),SOe=r(VMe," (QDQBert model)"),VMe.forEach(t),ROe=i(v),Jm=n(v,"LI",{});var XMe=s(Jm);uK=n(XMe,"STRONG",{});var BIr=s(uK);BOe=r(BIr,"rag"),BIr.forEach(t),POe=r(XMe," \u2014 "),Lx=n(XMe,"A",{href:!0});var PIr=s(Lx);$Oe=r(PIr,"RagConfig"),PIr.forEach(t),IOe=r(XMe," (RAG model)"),XMe.forEach(t),qOe=i(v),Ym=n(v,"LI",{});var zMe=s(Ym);bK=n(zMe,"STRONG",{});var $Ir=s(bK);NOe=r($Ir,"realm"),$Ir.forEach(t),jOe=r(zMe," \u2014 "),xx=n(zMe,"A",{href:!0});var IIr=s(xx);DOe=r(IIr,"RealmConfig"),IIr.forEach(t),GOe=r(zMe," (Realm model)"),zMe.forEach(t),OOe=i(v),Km=n(v,"LI",{});var QMe=s(Km);FK=n(QMe,"STRONG",{});var qIr=s(FK);VOe=r(qIr,"reformer"),qIr.forEach(t),XOe=r(QMe," \u2014 "),kx=n(QMe,"A",{href:!0});var NIr=s(kx);zOe=r(NIr,"ReformerConfig"),NIr.forEach(t),QOe=r(QMe," (Reformer model)"),QMe.forEach(t),WOe=i(v),Zm=n(v,"LI",{});var WMe=s(Zm);vK=n(WMe,"STRONG",{});var jIr=s(vK);HOe=r(jIr,"regnet"),jIr.forEach(t),UOe=r(WMe," \u2014 "),Sx=n(WMe,"A",{href:!0});var DIr=s(Sx);JOe=r(DIr,"RegNetConfig"),DIr.forEach(t),YOe=r(WMe," (RegNet model)"),WMe.forEach(t),KOe=i(v),eg=n(v,"LI",{});var HMe=s(eg);TK=n(HMe,"STRONG",{});var GIr=s(TK);ZOe=r(GIr,"rembert"),GIr.forEach(t),eVe=r(HMe," \u2014 "),Rx=n(HMe,"A",{href:!0});var OIr=s(Rx);oVe=r(OIr,"RemBertConfig"),OIr.forEach(t),rVe=r(HMe," (RemBERT model)"),HMe.forEach(t),tVe=i(v),og=n(v,"LI",{});var UMe=s(og);MK=n(UMe,"STRONG",{});var VIr=s(MK);aVe=r(VIr,"resnet"),VIr.forEach(t),nVe=r(UMe," \u2014 "),Bx=n(UMe,"A",{href:!0});var XIr=s(Bx);sVe=r(XIr,"ResNetConfig"),XIr.forEach(t),lVe=r(UMe," (ResNet model)"),UMe.forEach(t),iVe=i(v),rg=n(v,"LI",{});var JMe=s(rg);EK=n(JMe,"STRONG",{});var zIr=s(EK);dVe=r(zIr,"retribert"),zIr.forEach(t),cVe=r(JMe," \u2014 "),Px=n(JMe,"A",{href:!0});var QIr=s(Px);fVe=r(QIr,"RetriBertConfig"),QIr.forEach(t),mVe=r(JMe," (RetriBERT model)"),JMe.forEach(t),gVe=i(v),tg=n(v,"LI",{});var YMe=s(tg);CK=n(YMe,"STRONG",{});var WIr=s(CK);hVe=r(WIr,"roberta"),WIr.forEach(t),pVe=r(YMe," \u2014 "),$x=n(YMe,"A",{href:!0});var HIr=s($x);_Ve=r(HIr,"RobertaConfig"),HIr.forEach(t),uVe=r(YMe," (RoBERTa model)"),YMe.forEach(t),bVe=i(v),ag=n(v,"LI",{});var KMe=s(ag);wK=n(KMe,"STRONG",{});var UIr=s(wK);FVe=r(UIr,"roformer"),UIr.forEach(t),vVe=r(KMe," \u2014 "),Ix=n(KMe,"A",{href:!0});var JIr=s(Ix);TVe=r(JIr,"RoFormerConfig"),JIr.forEach(t),MVe=r(KMe," (RoFormer model)"),KMe.forEach(t),EVe=i(v),ng=n(v,"LI",{});var ZMe=s(ng);AK=n(ZMe,"STRONG",{});var YIr=s(AK);CVe=r(YIr,"segformer"),YIr.forEach(t),wVe=r(ZMe," \u2014 "),qx=n(ZMe,"A",{href:!0});var KIr=s(qx);AVe=r(KIr,"SegformerConfig"),KIr.forEach(t),yVe=r(ZMe," (SegFormer model)"),ZMe.forEach(t),LVe=i(v),sg=n(v,"LI",{});var e4e=s(sg);yK=n(e4e,"STRONG",{});var ZIr=s(yK);xVe=r(ZIr,"sew"),ZIr.forEach(t),kVe=r(e4e," \u2014 "),Nx=n(e4e,"A",{href:!0});var eqr=s(Nx);SVe=r(eqr,"SEWConfig"),eqr.forEach(t),RVe=r(e4e," (SEW model)"),e4e.forEach(t),BVe=i(v),lg=n(v,"LI",{});var o4e=s(lg);LK=n(o4e,"STRONG",{});var oqr=s(LK);PVe=r(oqr,"sew-d"),oqr.forEach(t),$Ve=r(o4e," \u2014 "),jx=n(o4e,"A",{href:!0});var rqr=s(jx);IVe=r(rqr,"SEWDConfig"),rqr.forEach(t),qVe=r(o4e," (SEW-D model)"),o4e.forEach(t),NVe=i(v),ig=n(v,"LI",{});var r4e=s(ig);xK=n(r4e,"STRONG",{});var tqr=s(xK);jVe=r(tqr,"speech-encoder-decoder"),tqr.forEach(t),DVe=r(r4e," \u2014 "),Dx=n(r4e,"A",{href:!0});var aqr=s(Dx);GVe=r(aqr,"SpeechEncoderDecoderConfig"),aqr.forEach(t),OVe=r(r4e," (Speech Encoder decoder model)"),r4e.forEach(t),VVe=i(v),dg=n(v,"LI",{});var t4e=s(dg);kK=n(t4e,"STRONG",{});var nqr=s(kK);XVe=r(nqr,"speech_to_text"),nqr.forEach(t),zVe=r(t4e," \u2014 "),Gx=n(t4e,"A",{href:!0});var sqr=s(Gx);QVe=r(sqr,"Speech2TextConfig"),sqr.forEach(t),WVe=r(t4e," (Speech2Text model)"),t4e.forEach(t),HVe=i(v),cg=n(v,"LI",{});var a4e=s(cg);SK=n(a4e,"STRONG",{});var lqr=s(SK);UVe=r(lqr,"speech_to_text_2"),lqr.forEach(t),JVe=r(a4e," \u2014 "),Ox=n(a4e,"A",{href:!0});var iqr=s(Ox);YVe=r(iqr,"Speech2Text2Config"),iqr.forEach(t),KVe=r(a4e," (Speech2Text2 model)"),a4e.forEach(t),ZVe=i(v),fg=n(v,"LI",{});var n4e=s(fg);RK=n(n4e,"STRONG",{});var dqr=s(RK);eXe=r(dqr,"splinter"),dqr.forEach(t),oXe=r(n4e," \u2014 "),Vx=n(n4e,"A",{href:!0});var cqr=s(Vx);rXe=r(cqr,"SplinterConfig"),cqr.forEach(t),tXe=r(n4e," (Splinter model)"),n4e.forEach(t),aXe=i(v),mg=n(v,"LI",{});var s4e=s(mg);BK=n(s4e,"STRONG",{});var fqr=s(BK);nXe=r(fqr,"squeezebert"),fqr.forEach(t),sXe=r(s4e," \u2014 "),Xx=n(s4e,"A",{href:!0});var mqr=s(Xx);lXe=r(mqr,"SqueezeBertConfig"),mqr.forEach(t),iXe=r(s4e," (SqueezeBERT model)"),s4e.forEach(t),dXe=i(v),gg=n(v,"LI",{});var l4e=s(gg);PK=n(l4e,"STRONG",{});var gqr=s(PK);cXe=r(gqr,"swin"),gqr.forEach(t),fXe=r(l4e," \u2014 "),zx=n(l4e,"A",{href:!0});var hqr=s(zx);mXe=r(hqr,"SwinConfig"),hqr.forEach(t),gXe=r(l4e," (Swin model)"),l4e.forEach(t),hXe=i(v),hg=n(v,"LI",{});var i4e=s(hg);$K=n(i4e,"STRONG",{});var pqr=s($K);pXe=r(pqr,"t5"),pqr.forEach(t),_Xe=r(i4e," \u2014 "),Qx=n(i4e,"A",{href:!0});var _qr=s(Qx);uXe=r(_qr,"T5Config"),_qr.forEach(t),bXe=r(i4e," (T5 model)"),i4e.forEach(t),FXe=i(v),pg=n(v,"LI",{});var d4e=s(pg);IK=n(d4e,"STRONG",{});var uqr=s(IK);vXe=r(uqr,"tapas"),uqr.forEach(t),TXe=r(d4e," \u2014 "),Wx=n(d4e,"A",{href:!0});var bqr=s(Wx);MXe=r(bqr,"TapasConfig"),bqr.forEach(t),EXe=r(d4e," (TAPAS model)"),d4e.forEach(t),CXe=i(v),_g=n(v,"LI",{});var c4e=s(_g);qK=n(c4e,"STRONG",{});var Fqr=s(qK);wXe=r(Fqr,"tapex"),Fqr.forEach(t),AXe=r(c4e," \u2014 "),Hx=n(c4e,"A",{href:!0});var vqr=s(Hx);yXe=r(vqr,"BartConfig"),vqr.forEach(t),LXe=r(c4e," (TAPEX model)"),c4e.forEach(t),xXe=i(v),ug=n(v,"LI",{});var f4e=s(ug);NK=n(f4e,"STRONG",{});var Tqr=s(NK);kXe=r(Tqr,"transfo-xl"),Tqr.forEach(t),SXe=r(f4e," \u2014 "),Ux=n(f4e,"A",{href:!0});var Mqr=s(Ux);RXe=r(Mqr,"TransfoXLConfig"),Mqr.forEach(t),BXe=r(f4e," (Transformer-XL model)"),f4e.forEach(t),PXe=i(v),bg=n(v,"LI",{});var m4e=s(bg);jK=n(m4e,"STRONG",{});var Eqr=s(jK);$Xe=r(Eqr,"trocr"),Eqr.forEach(t),IXe=r(m4e," \u2014 "),Jx=n(m4e,"A",{href:!0});var Cqr=s(Jx);qXe=r(Cqr,"TrOCRConfig"),Cqr.forEach(t),NXe=r(m4e," (TrOCR model)"),m4e.forEach(t),jXe=i(v),Fg=n(v,"LI",{});var g4e=s(Fg);DK=n(g4e,"STRONG",{});var wqr=s(DK);DXe=r(wqr,"unispeech"),wqr.forEach(t),GXe=r(g4e," \u2014 "),Yx=n(g4e,"A",{href:!0});var Aqr=s(Yx);OXe=r(Aqr,"UniSpeechConfig"),Aqr.forEach(t),VXe=r(g4e," (UniSpeech model)"),g4e.forEach(t),XXe=i(v),vg=n(v,"LI",{});var h4e=s(vg);GK=n(h4e,"STRONG",{});var yqr=s(GK);zXe=r(yqr,"unispeech-sat"),yqr.forEach(t),QXe=r(h4e," \u2014 "),Kx=n(h4e,"A",{href:!0});var Lqr=s(Kx);WXe=r(Lqr,"UniSpeechSatConfig"),Lqr.forEach(t),HXe=r(h4e," (UniSpeechSat model)"),h4e.forEach(t),UXe=i(v),Tg=n(v,"LI",{});var p4e=s(Tg);OK=n(p4e,"STRONG",{});var xqr=s(OK);JXe=r(xqr,"van"),xqr.forEach(t),YXe=r(p4e," \u2014 "),Zx=n(p4e,"A",{href:!0});var kqr=s(Zx);KXe=r(kqr,"VanConfig"),kqr.forEach(t),ZXe=r(p4e," (VAN model)"),p4e.forEach(t),eze=i(v),Mg=n(v,"LI",{});var _4e=s(Mg);VK=n(_4e,"STRONG",{});var Sqr=s(VK);oze=r(Sqr,"vilt"),Sqr.forEach(t),rze=r(_4e," \u2014 "),ek=n(_4e,"A",{href:!0});var Rqr=s(ek);tze=r(Rqr,"ViltConfig"),Rqr.forEach(t),aze=r(_4e," (ViLT model)"),_4e.forEach(t),nze=i(v),Eg=n(v,"LI",{});var u4e=s(Eg);XK=n(u4e,"STRONG",{});var Bqr=s(XK);sze=r(Bqr,"vision-encoder-decoder"),Bqr.forEach(t),lze=r(u4e," \u2014 "),ok=n(u4e,"A",{href:!0});var Pqr=s(ok);ize=r(Pqr,"VisionEncoderDecoderConfig"),Pqr.forEach(t),dze=r(u4e," (Vision Encoder decoder model)"),u4e.forEach(t),cze=i(v),Cg=n(v,"LI",{});var b4e=s(Cg);zK=n(b4e,"STRONG",{});var $qr=s(zK);fze=r($qr,"vision-text-dual-encoder"),$qr.forEach(t),mze=r(b4e," \u2014 "),rk=n(b4e,"A",{href:!0});var Iqr=s(rk);gze=r(Iqr,"VisionTextDualEncoderConfig"),Iqr.forEach(t),hze=r(b4e," (VisionTextDualEncoder model)"),b4e.forEach(t),pze=i(v),wg=n(v,"LI",{});var F4e=s(wg);QK=n(F4e,"STRONG",{});var qqr=s(QK);_ze=r(qqr,"visual_bert"),qqr.forEach(t),uze=r(F4e," \u2014 "),tk=n(F4e,"A",{href:!0});var Nqr=s(tk);bze=r(Nqr,"VisualBertConfig"),Nqr.forEach(t),Fze=r(F4e," (VisualBert model)"),F4e.forEach(t),vze=i(v),Ag=n(v,"LI",{});var v4e=s(Ag);WK=n(v4e,"STRONG",{});var jqr=s(WK);Tze=r(jqr,"vit"),jqr.forEach(t),Mze=r(v4e," \u2014 "),ak=n(v4e,"A",{href:!0});var Dqr=s(ak);Eze=r(Dqr,"ViTConfig"),Dqr.forEach(t),Cze=r(v4e," (ViT model)"),v4e.forEach(t),wze=i(v),yg=n(v,"LI",{});var T4e=s(yg);HK=n(T4e,"STRONG",{});var Gqr=s(HK);Aze=r(Gqr,"vit_mae"),Gqr.forEach(t),yze=r(T4e," \u2014 "),nk=n(T4e,"A",{href:!0});var Oqr=s(nk);Lze=r(Oqr,"ViTMAEConfig"),Oqr.forEach(t),xze=r(T4e," (ViTMAE model)"),T4e.forEach(t),kze=i(v),Lg=n(v,"LI",{});var M4e=s(Lg);UK=n(M4e,"STRONG",{});var Vqr=s(UK);Sze=r(Vqr,"wav2vec2"),Vqr.forEach(t),Rze=r(M4e," \u2014 "),sk=n(M4e,"A",{href:!0});var Xqr=s(sk);Bze=r(Xqr,"Wav2Vec2Config"),Xqr.forEach(t),Pze=r(M4e," (Wav2Vec2 model)"),M4e.forEach(t),$ze=i(v),xg=n(v,"LI",{});var E4e=s(xg);JK=n(E4e,"STRONG",{});var zqr=s(JK);Ize=r(zqr,"wavlm"),zqr.forEach(t),qze=r(E4e," \u2014 "),lk=n(E4e,"A",{href:!0});var Qqr=s(lk);Nze=r(Qqr,"WavLMConfig"),Qqr.forEach(t),jze=r(E4e," (WavLM model)"),E4e.forEach(t),Dze=i(v),kg=n(v,"LI",{});var C4e=s(kg);YK=n(C4e,"STRONG",{});var Wqr=s(YK);Gze=r(Wqr,"xglm"),Wqr.forEach(t),Oze=r(C4e," \u2014 "),ik=n(C4e,"A",{href:!0});var Hqr=s(ik);Vze=r(Hqr,"XGLMConfig"),Hqr.forEach(t),Xze=r(C4e," (XGLM model)"),C4e.forEach(t),zze=i(v),Sg=n(v,"LI",{});var w4e=s(Sg);KK=n(w4e,"STRONG",{});var Uqr=s(KK);Qze=r(Uqr,"xlm"),Uqr.forEach(t),Wze=r(w4e," \u2014 "),dk=n(w4e,"A",{href:!0});var Jqr=s(dk);Hze=r(Jqr,"XLMConfig"),Jqr.forEach(t),Uze=r(w4e," (XLM model)"),w4e.forEach(t),Jze=i(v),Rg=n(v,"LI",{});var A4e=s(Rg);ZK=n(A4e,"STRONG",{});var Yqr=s(ZK);Yze=r(Yqr,"xlm-prophetnet"),Yqr.forEach(t),Kze=r(A4e," \u2014 "),ck=n(A4e,"A",{href:!0});var Kqr=s(ck);Zze=r(Kqr,"XLMProphetNetConfig"),Kqr.forEach(t),eQe=r(A4e," (XLMProphetNet model)"),A4e.forEach(t),oQe=i(v),Bg=n(v,"LI",{});var y4e=s(Bg);eZ=n(y4e,"STRONG",{});var Zqr=s(eZ);rQe=r(Zqr,"xlm-roberta"),Zqr.forEach(t),tQe=r(y4e," \u2014 "),fk=n(y4e,"A",{href:!0});var eNr=s(fk);aQe=r(eNr,"XLMRobertaConfig"),eNr.forEach(t),nQe=r(y4e," (XLM-RoBERTa model)"),y4e.forEach(t),sQe=i(v),Pg=n(v,"LI",{});var L4e=s(Pg);oZ=n(L4e,"STRONG",{});var oNr=s(oZ);lQe=r(oNr,"xlm-roberta-xl"),oNr.forEach(t),iQe=r(L4e," \u2014 "),mk=n(L4e,"A",{href:!0});var rNr=s(mk);dQe=r(rNr,"XLMRobertaXLConfig"),rNr.forEach(t),cQe=r(L4e," (XLM-RoBERTa-XL model)"),L4e.forEach(t),fQe=i(v),$g=n(v,"LI",{});var x4e=s($g);rZ=n(x4e,"STRONG",{});var tNr=s(rZ);mQe=r(tNr,"xlnet"),tNr.forEach(t),gQe=r(x4e," \u2014 "),gk=n(x4e,"A",{href:!0});var aNr=s(gk);hQe=r(aNr,"XLNetConfig"),aNr.forEach(t),pQe=r(x4e," (XLNet model)"),x4e.forEach(t),_Qe=i(v),Ig=n(v,"LI",{});var k4e=s(Ig);tZ=n(k4e,"STRONG",{});var nNr=s(tZ);uQe=r(nNr,"yoso"),nNr.forEach(t),bQe=r(k4e," \u2014 "),hk=n(k4e,"A",{href:!0});var sNr=s(hk);FQe=r(sNr,"YosoConfig"),sNr.forEach(t),vQe=r(k4e," (YOSO model)"),k4e.forEach(t),v.forEach(t),TQe=i(ga),aZ=n(ga,"P",{});var lNr=s(aZ);MQe=r(lNr,"Examples:"),lNr.forEach(t),EQe=i(ga),m(P3.$$.fragment,ga),ga.forEach(t),CQe=i(Os),qg=n(Os,"DIV",{class:!0});var CPe=s(qg);m($3.$$.fragment,CPe),wQe=i(CPe),nZ=n(CPe,"P",{});var iNr=s(nZ);AQe=r(iNr,"Register a new configuration for this class."),iNr.forEach(t),CPe.forEach(t),Os.forEach(t),MRe=i(c),Qi=n(c,"H2",{class:!0});var wPe=s(Qi);Ng=n(wPe,"A",{id:!0,class:!0,href:!0});var dNr=s(Ng);sZ=n(dNr,"SPAN",{});var cNr=s(sZ);m(I3.$$.fragment,cNr),cNr.forEach(t),dNr.forEach(t),yQe=i(wPe),lZ=n(wPe,"SPAN",{});var fNr=s(lZ);LQe=r(fNr,"AutoTokenizer"),fNr.forEach(t),wPe.forEach(t),ERe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(q3.$$.fragment,Vs),xQe=i(Vs),N3=n(Vs,"P",{});var APe=s(N3);kQe=r(APe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),pk=n(APe,"A",{href:!0});var mNr=s(pk);SQe=r(mNr,"AutoTokenizer.from_pretrained()"),mNr.forEach(t),RQe=r(APe," class method."),APe.forEach(t),BQe=i(Vs),j3=n(Vs,"P",{});var yPe=s(j3);PQe=r(yPe,"This class cannot be instantiated directly using "),iZ=n(yPe,"CODE",{});var gNr=s(iZ);$Qe=r(gNr,"__init__()"),gNr.forEach(t),IQe=r(yPe," (throws an error)."),yPe.forEach(t),qQe=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m(D3.$$.fragment,ha),NQe=i(ha),dZ=n(ha,"P",{});var hNr=s(dZ);jQe=r(hNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),hNr.forEach(t),DQe=i(ha),Oa=n(ha,"P",{});var wC=s(Oa);GQe=r(wC,"The tokenizer class to instantiate is selected based on the "),cZ=n(wC,"CODE",{});var pNr=s(cZ);OQe=r(pNr,"model_type"),pNr.forEach(t),VQe=r(wC,` property of the config object (either
passed as an argument or loaded from `),fZ=n(wC,"CODE",{});var _Nr=s(fZ);XQe=r(_Nr,"pretrained_model_name_or_path"),_Nr.forEach(t),zQe=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mZ=n(wC,"CODE",{});var uNr=s(mZ);QQe=r(uNr,"pretrained_model_name_or_path"),uNr.forEach(t),WQe=r(wC,":"),wC.forEach(t),HQe=i(ha),E=n(ha,"UL",{});var w=s(E);Qn=n(w,"LI",{});var F7=s(Qn);gZ=n(F7,"STRONG",{});var bNr=s(gZ);UQe=r(bNr,"albert"),bNr.forEach(t),JQe=r(F7," \u2014 "),_k=n(F7,"A",{href:!0});var FNr=s(_k);YQe=r(FNr,"AlbertTokenizer"),FNr.forEach(t),KQe=r(F7," or "),uk=n(F7,"A",{href:!0});var vNr=s(uk);ZQe=r(vNr,"AlbertTokenizerFast"),vNr.forEach(t),eWe=r(F7," (ALBERT model)"),F7.forEach(t),oWe=i(w),Wn=n(w,"LI",{});var v7=s(Wn);hZ=n(v7,"STRONG",{});var TNr=s(hZ);rWe=r(TNr,"bart"),TNr.forEach(t),tWe=r(v7," \u2014 "),bk=n(v7,"A",{href:!0});var MNr=s(bk);aWe=r(MNr,"BartTokenizer"),MNr.forEach(t),nWe=r(v7," or "),Fk=n(v7,"A",{href:!0});var ENr=s(Fk);sWe=r(ENr,"BartTokenizerFast"),ENr.forEach(t),lWe=r(v7," (BART model)"),v7.forEach(t),iWe=i(w),Hn=n(w,"LI",{});var T7=s(Hn);pZ=n(T7,"STRONG",{});var CNr=s(pZ);dWe=r(CNr,"barthez"),CNr.forEach(t),cWe=r(T7," \u2014 "),vk=n(T7,"A",{href:!0});var wNr=s(vk);fWe=r(wNr,"BarthezTokenizer"),wNr.forEach(t),mWe=r(T7," or "),Tk=n(T7,"A",{href:!0});var ANr=s(Tk);gWe=r(ANr,"BarthezTokenizerFast"),ANr.forEach(t),hWe=r(T7," (BARThez model)"),T7.forEach(t),pWe=i(w),jg=n(w,"LI",{});var S4e=s(jg);_Z=n(S4e,"STRONG",{});var yNr=s(_Z);_We=r(yNr,"bartpho"),yNr.forEach(t),uWe=r(S4e," \u2014 "),Mk=n(S4e,"A",{href:!0});var LNr=s(Mk);bWe=r(LNr,"BartphoTokenizer"),LNr.forEach(t),FWe=r(S4e," (BARTpho model)"),S4e.forEach(t),vWe=i(w),Un=n(w,"LI",{});var M7=s(Un);uZ=n(M7,"STRONG",{});var xNr=s(uZ);TWe=r(xNr,"bert"),xNr.forEach(t),MWe=r(M7," \u2014 "),Ek=n(M7,"A",{href:!0});var kNr=s(Ek);EWe=r(kNr,"BertTokenizer"),kNr.forEach(t),CWe=r(M7," or "),Ck=n(M7,"A",{href:!0});var SNr=s(Ck);wWe=r(SNr,"BertTokenizerFast"),SNr.forEach(t),AWe=r(M7," (BERT model)"),M7.forEach(t),yWe=i(w),Dg=n(w,"LI",{});var R4e=s(Dg);bZ=n(R4e,"STRONG",{});var RNr=s(bZ);LWe=r(RNr,"bert-generation"),RNr.forEach(t),xWe=r(R4e," \u2014 "),wk=n(R4e,"A",{href:!0});var BNr=s(wk);kWe=r(BNr,"BertGenerationTokenizer"),BNr.forEach(t),SWe=r(R4e," (Bert Generation model)"),R4e.forEach(t),RWe=i(w),Gg=n(w,"LI",{});var B4e=s(Gg);FZ=n(B4e,"STRONG",{});var PNr=s(FZ);BWe=r(PNr,"bert-japanese"),PNr.forEach(t),PWe=r(B4e," \u2014 "),Ak=n(B4e,"A",{href:!0});var $Nr=s(Ak);$We=r($Nr,"BertJapaneseTokenizer"),$Nr.forEach(t),IWe=r(B4e," (BertJapanese model)"),B4e.forEach(t),qWe=i(w),Og=n(w,"LI",{});var P4e=s(Og);vZ=n(P4e,"STRONG",{});var INr=s(vZ);NWe=r(INr,"bertweet"),INr.forEach(t),jWe=r(P4e," \u2014 "),yk=n(P4e,"A",{href:!0});var qNr=s(yk);DWe=r(qNr,"BertweetTokenizer"),qNr.forEach(t),GWe=r(P4e," (Bertweet model)"),P4e.forEach(t),OWe=i(w),Jn=n(w,"LI",{});var E7=s(Jn);TZ=n(E7,"STRONG",{});var NNr=s(TZ);VWe=r(NNr,"big_bird"),NNr.forEach(t),XWe=r(E7," \u2014 "),Lk=n(E7,"A",{href:!0});var jNr=s(Lk);zWe=r(jNr,"BigBirdTokenizer"),jNr.forEach(t),QWe=r(E7," or "),xk=n(E7,"A",{href:!0});var DNr=s(xk);WWe=r(DNr,"BigBirdTokenizerFast"),DNr.forEach(t),HWe=r(E7," (BigBird model)"),E7.forEach(t),UWe=i(w),Yn=n(w,"LI",{});var C7=s(Yn);MZ=n(C7,"STRONG",{});var GNr=s(MZ);JWe=r(GNr,"bigbird_pegasus"),GNr.forEach(t),YWe=r(C7," \u2014 "),kk=n(C7,"A",{href:!0});var ONr=s(kk);KWe=r(ONr,"PegasusTokenizer"),ONr.forEach(t),ZWe=r(C7," or "),Sk=n(C7,"A",{href:!0});var VNr=s(Sk);eHe=r(VNr,"PegasusTokenizerFast"),VNr.forEach(t),oHe=r(C7," (BigBirdPegasus model)"),C7.forEach(t),rHe=i(w),Kn=n(w,"LI",{});var w7=s(Kn);EZ=n(w7,"STRONG",{});var XNr=s(EZ);tHe=r(XNr,"blenderbot"),XNr.forEach(t),aHe=r(w7," \u2014 "),Rk=n(w7,"A",{href:!0});var zNr=s(Rk);nHe=r(zNr,"BlenderbotTokenizer"),zNr.forEach(t),sHe=r(w7," or "),Bk=n(w7,"A",{href:!0});var QNr=s(Bk);lHe=r(QNr,"BlenderbotTokenizerFast"),QNr.forEach(t),iHe=r(w7," (Blenderbot model)"),w7.forEach(t),dHe=i(w),Vg=n(w,"LI",{});var $4e=s(Vg);CZ=n($4e,"STRONG",{});var WNr=s(CZ);cHe=r(WNr,"blenderbot-small"),WNr.forEach(t),fHe=r($4e," \u2014 "),Pk=n($4e,"A",{href:!0});var HNr=s(Pk);mHe=r(HNr,"BlenderbotSmallTokenizer"),HNr.forEach(t),gHe=r($4e," (BlenderbotSmall model)"),$4e.forEach(t),hHe=i(w),Xg=n(w,"LI",{});var I4e=s(Xg);wZ=n(I4e,"STRONG",{});var UNr=s(wZ);pHe=r(UNr,"byt5"),UNr.forEach(t),_He=r(I4e," \u2014 "),$k=n(I4e,"A",{href:!0});var JNr=s($k);uHe=r(JNr,"ByT5Tokenizer"),JNr.forEach(t),bHe=r(I4e," (ByT5 model)"),I4e.forEach(t),FHe=i(w),Zn=n(w,"LI",{});var A7=s(Zn);AZ=n(A7,"STRONG",{});var YNr=s(AZ);vHe=r(YNr,"camembert"),YNr.forEach(t),THe=r(A7," \u2014 "),Ik=n(A7,"A",{href:!0});var KNr=s(Ik);MHe=r(KNr,"CamembertTokenizer"),KNr.forEach(t),EHe=r(A7," or "),qk=n(A7,"A",{href:!0});var ZNr=s(qk);CHe=r(ZNr,"CamembertTokenizerFast"),ZNr.forEach(t),wHe=r(A7," (CamemBERT model)"),A7.forEach(t),AHe=i(w),zg=n(w,"LI",{});var q4e=s(zg);yZ=n(q4e,"STRONG",{});var ejr=s(yZ);yHe=r(ejr,"canine"),ejr.forEach(t),LHe=r(q4e," \u2014 "),Nk=n(q4e,"A",{href:!0});var ojr=s(Nk);xHe=r(ojr,"CanineTokenizer"),ojr.forEach(t),kHe=r(q4e," (Canine model)"),q4e.forEach(t),SHe=i(w),es=n(w,"LI",{});var y7=s(es);LZ=n(y7,"STRONG",{});var rjr=s(LZ);RHe=r(rjr,"clip"),rjr.forEach(t),BHe=r(y7," \u2014 "),jk=n(y7,"A",{href:!0});var tjr=s(jk);PHe=r(tjr,"CLIPTokenizer"),tjr.forEach(t),$He=r(y7," or "),Dk=n(y7,"A",{href:!0});var ajr=s(Dk);IHe=r(ajr,"CLIPTokenizerFast"),ajr.forEach(t),qHe=r(y7," (CLIP model)"),y7.forEach(t),NHe=i(w),os=n(w,"LI",{});var L7=s(os);xZ=n(L7,"STRONG",{});var njr=s(xZ);jHe=r(njr,"convbert"),njr.forEach(t),DHe=r(L7," \u2014 "),Gk=n(L7,"A",{href:!0});var sjr=s(Gk);GHe=r(sjr,"ConvBertTokenizer"),sjr.forEach(t),OHe=r(L7," or "),Ok=n(L7,"A",{href:!0});var ljr=s(Ok);VHe=r(ljr,"ConvBertTokenizerFast"),ljr.forEach(t),XHe=r(L7," (ConvBERT model)"),L7.forEach(t),zHe=i(w),rs=n(w,"LI",{});var x7=s(rs);kZ=n(x7,"STRONG",{});var ijr=s(kZ);QHe=r(ijr,"cpm"),ijr.forEach(t),WHe=r(x7," \u2014 "),Vk=n(x7,"A",{href:!0});var djr=s(Vk);HHe=r(djr,"CpmTokenizer"),djr.forEach(t),UHe=r(x7," or "),SZ=n(x7,"CODE",{});var cjr=s(SZ);JHe=r(cjr,"CpmTokenizerFast"),cjr.forEach(t),YHe=r(x7," (CPM model)"),x7.forEach(t),KHe=i(w),Qg=n(w,"LI",{});var N4e=s(Qg);RZ=n(N4e,"STRONG",{});var fjr=s(RZ);ZHe=r(fjr,"ctrl"),fjr.forEach(t),eUe=r(N4e," \u2014 "),Xk=n(N4e,"A",{href:!0});var mjr=s(Xk);oUe=r(mjr,"CTRLTokenizer"),mjr.forEach(t),rUe=r(N4e," (CTRL model)"),N4e.forEach(t),tUe=i(w),ts=n(w,"LI",{});var k7=s(ts);BZ=n(k7,"STRONG",{});var gjr=s(BZ);aUe=r(gjr,"deberta"),gjr.forEach(t),nUe=r(k7," \u2014 "),zk=n(k7,"A",{href:!0});var hjr=s(zk);sUe=r(hjr,"DebertaTokenizer"),hjr.forEach(t),lUe=r(k7," or "),Qk=n(k7,"A",{href:!0});var pjr=s(Qk);iUe=r(pjr,"DebertaTokenizerFast"),pjr.forEach(t),dUe=r(k7," (DeBERTa model)"),k7.forEach(t),cUe=i(w),Wg=n(w,"LI",{});var j4e=s(Wg);PZ=n(j4e,"STRONG",{});var _jr=s(PZ);fUe=r(_jr,"deberta-v2"),_jr.forEach(t),mUe=r(j4e," \u2014 "),Wk=n(j4e,"A",{href:!0});var ujr=s(Wk);gUe=r(ujr,"DebertaV2Tokenizer"),ujr.forEach(t),hUe=r(j4e," (DeBERTa-v2 model)"),j4e.forEach(t),pUe=i(w),as=n(w,"LI",{});var S7=s(as);$Z=n(S7,"STRONG",{});var bjr=s($Z);_Ue=r(bjr,"distilbert"),bjr.forEach(t),uUe=r(S7," \u2014 "),Hk=n(S7,"A",{href:!0});var Fjr=s(Hk);bUe=r(Fjr,"DistilBertTokenizer"),Fjr.forEach(t),FUe=r(S7," or "),Uk=n(S7,"A",{href:!0});var vjr=s(Uk);vUe=r(vjr,"DistilBertTokenizerFast"),vjr.forEach(t),TUe=r(S7," (DistilBERT model)"),S7.forEach(t),MUe=i(w),ns=n(w,"LI",{});var R7=s(ns);IZ=n(R7,"STRONG",{});var Tjr=s(IZ);EUe=r(Tjr,"dpr"),Tjr.forEach(t),CUe=r(R7," \u2014 "),Jk=n(R7,"A",{href:!0});var Mjr=s(Jk);wUe=r(Mjr,"DPRQuestionEncoderTokenizer"),Mjr.forEach(t),AUe=r(R7," or "),Yk=n(R7,"A",{href:!0});var Ejr=s(Yk);yUe=r(Ejr,"DPRQuestionEncoderTokenizerFast"),Ejr.forEach(t),LUe=r(R7," (DPR model)"),R7.forEach(t),xUe=i(w),ss=n(w,"LI",{});var B7=s(ss);qZ=n(B7,"STRONG",{});var Cjr=s(qZ);kUe=r(Cjr,"electra"),Cjr.forEach(t),SUe=r(B7," \u2014 "),Kk=n(B7,"A",{href:!0});var wjr=s(Kk);RUe=r(wjr,"ElectraTokenizer"),wjr.forEach(t),BUe=r(B7," or "),Zk=n(B7,"A",{href:!0});var Ajr=s(Zk);PUe=r(Ajr,"ElectraTokenizerFast"),Ajr.forEach(t),$Ue=r(B7," (ELECTRA model)"),B7.forEach(t),IUe=i(w),Hg=n(w,"LI",{});var D4e=s(Hg);NZ=n(D4e,"STRONG",{});var yjr=s(NZ);qUe=r(yjr,"flaubert"),yjr.forEach(t),NUe=r(D4e," \u2014 "),eS=n(D4e,"A",{href:!0});var Ljr=s(eS);jUe=r(Ljr,"FlaubertTokenizer"),Ljr.forEach(t),DUe=r(D4e," (FlauBERT model)"),D4e.forEach(t),GUe=i(w),ls=n(w,"LI",{});var P7=s(ls);jZ=n(P7,"STRONG",{});var xjr=s(jZ);OUe=r(xjr,"fnet"),xjr.forEach(t),VUe=r(P7," \u2014 "),oS=n(P7,"A",{href:!0});var kjr=s(oS);XUe=r(kjr,"FNetTokenizer"),kjr.forEach(t),zUe=r(P7," or "),rS=n(P7,"A",{href:!0});var Sjr=s(rS);QUe=r(Sjr,"FNetTokenizerFast"),Sjr.forEach(t),WUe=r(P7," (FNet model)"),P7.forEach(t),HUe=i(w),Ug=n(w,"LI",{});var G4e=s(Ug);DZ=n(G4e,"STRONG",{});var Rjr=s(DZ);UUe=r(Rjr,"fsmt"),Rjr.forEach(t),JUe=r(G4e," \u2014 "),tS=n(G4e,"A",{href:!0});var Bjr=s(tS);YUe=r(Bjr,"FSMTTokenizer"),Bjr.forEach(t),KUe=r(G4e," (FairSeq Machine-Translation model)"),G4e.forEach(t),ZUe=i(w),is=n(w,"LI",{});var $7=s(is);GZ=n($7,"STRONG",{});var Pjr=s(GZ);eJe=r(Pjr,"funnel"),Pjr.forEach(t),oJe=r($7," \u2014 "),aS=n($7,"A",{href:!0});var $jr=s(aS);rJe=r($jr,"FunnelTokenizer"),$jr.forEach(t),tJe=r($7," or "),nS=n($7,"A",{href:!0});var Ijr=s(nS);aJe=r(Ijr,"FunnelTokenizerFast"),Ijr.forEach(t),nJe=r($7," (Funnel Transformer model)"),$7.forEach(t),sJe=i(w),ds=n(w,"LI",{});var I7=s(ds);OZ=n(I7,"STRONG",{});var qjr=s(OZ);lJe=r(qjr,"gpt2"),qjr.forEach(t),iJe=r(I7," \u2014 "),sS=n(I7,"A",{href:!0});var Njr=s(sS);dJe=r(Njr,"GPT2Tokenizer"),Njr.forEach(t),cJe=r(I7," or "),lS=n(I7,"A",{href:!0});var jjr=s(lS);fJe=r(jjr,"GPT2TokenizerFast"),jjr.forEach(t),mJe=r(I7," (OpenAI GPT-2 model)"),I7.forEach(t),gJe=i(w),cs=n(w,"LI",{});var q7=s(cs);VZ=n(q7,"STRONG",{});var Djr=s(VZ);hJe=r(Djr,"gpt_neo"),Djr.forEach(t),pJe=r(q7," \u2014 "),iS=n(q7,"A",{href:!0});var Gjr=s(iS);_Je=r(Gjr,"GPT2Tokenizer"),Gjr.forEach(t),uJe=r(q7," or "),dS=n(q7,"A",{href:!0});var Ojr=s(dS);bJe=r(Ojr,"GPT2TokenizerFast"),Ojr.forEach(t),FJe=r(q7," (GPT Neo model)"),q7.forEach(t),vJe=i(w),fs=n(w,"LI",{});var N7=s(fs);XZ=n(N7,"STRONG",{});var Vjr=s(XZ);TJe=r(Vjr,"herbert"),Vjr.forEach(t),MJe=r(N7," \u2014 "),cS=n(N7,"A",{href:!0});var Xjr=s(cS);EJe=r(Xjr,"HerbertTokenizer"),Xjr.forEach(t),CJe=r(N7," or "),fS=n(N7,"A",{href:!0});var zjr=s(fS);wJe=r(zjr,"HerbertTokenizerFast"),zjr.forEach(t),AJe=r(N7," (HerBERT model)"),N7.forEach(t),yJe=i(w),Jg=n(w,"LI",{});var O4e=s(Jg);zZ=n(O4e,"STRONG",{});var Qjr=s(zZ);LJe=r(Qjr,"hubert"),Qjr.forEach(t),xJe=r(O4e," \u2014 "),mS=n(O4e,"A",{href:!0});var Wjr=s(mS);kJe=r(Wjr,"Wav2Vec2CTCTokenizer"),Wjr.forEach(t),SJe=r(O4e," (Hubert model)"),O4e.forEach(t),RJe=i(w),ms=n(w,"LI",{});var j7=s(ms);QZ=n(j7,"STRONG",{});var Hjr=s(QZ);BJe=r(Hjr,"ibert"),Hjr.forEach(t),PJe=r(j7," \u2014 "),gS=n(j7,"A",{href:!0});var Ujr=s(gS);$Je=r(Ujr,"RobertaTokenizer"),Ujr.forEach(t),IJe=r(j7," or "),hS=n(j7,"A",{href:!0});var Jjr=s(hS);qJe=r(Jjr,"RobertaTokenizerFast"),Jjr.forEach(t),NJe=r(j7," (I-BERT model)"),j7.forEach(t),jJe=i(w),gs=n(w,"LI",{});var D7=s(gs);WZ=n(D7,"STRONG",{});var Yjr=s(WZ);DJe=r(Yjr,"layoutlm"),Yjr.forEach(t),GJe=r(D7," \u2014 "),pS=n(D7,"A",{href:!0});var Kjr=s(pS);OJe=r(Kjr,"LayoutLMTokenizer"),Kjr.forEach(t),VJe=r(D7," or "),_S=n(D7,"A",{href:!0});var Zjr=s(_S);XJe=r(Zjr,"LayoutLMTokenizerFast"),Zjr.forEach(t),zJe=r(D7," (LayoutLM model)"),D7.forEach(t),QJe=i(w),hs=n(w,"LI",{});var G7=s(hs);HZ=n(G7,"STRONG",{});var eDr=s(HZ);WJe=r(eDr,"layoutlmv2"),eDr.forEach(t),HJe=r(G7," \u2014 "),uS=n(G7,"A",{href:!0});var oDr=s(uS);UJe=r(oDr,"LayoutLMv2Tokenizer"),oDr.forEach(t),JJe=r(G7," or "),bS=n(G7,"A",{href:!0});var rDr=s(bS);YJe=r(rDr,"LayoutLMv2TokenizerFast"),rDr.forEach(t),KJe=r(G7," (LayoutLMv2 model)"),G7.forEach(t),ZJe=i(w),ps=n(w,"LI",{});var O7=s(ps);UZ=n(O7,"STRONG",{});var tDr=s(UZ);eYe=r(tDr,"layoutxlm"),tDr.forEach(t),oYe=r(O7," \u2014 "),FS=n(O7,"A",{href:!0});var aDr=s(FS);rYe=r(aDr,"LayoutXLMTokenizer"),aDr.forEach(t),tYe=r(O7," or "),vS=n(O7,"A",{href:!0});var nDr=s(vS);aYe=r(nDr,"LayoutXLMTokenizerFast"),nDr.forEach(t),nYe=r(O7," (LayoutXLM model)"),O7.forEach(t),sYe=i(w),_s=n(w,"LI",{});var V7=s(_s);JZ=n(V7,"STRONG",{});var sDr=s(JZ);lYe=r(sDr,"led"),sDr.forEach(t),iYe=r(V7," \u2014 "),TS=n(V7,"A",{href:!0});var lDr=s(TS);dYe=r(lDr,"LEDTokenizer"),lDr.forEach(t),cYe=r(V7," or "),MS=n(V7,"A",{href:!0});var iDr=s(MS);fYe=r(iDr,"LEDTokenizerFast"),iDr.forEach(t),mYe=r(V7," (LED model)"),V7.forEach(t),gYe=i(w),us=n(w,"LI",{});var X7=s(us);YZ=n(X7,"STRONG",{});var dDr=s(YZ);hYe=r(dDr,"longformer"),dDr.forEach(t),pYe=r(X7," \u2014 "),ES=n(X7,"A",{href:!0});var cDr=s(ES);_Ye=r(cDr,"LongformerTokenizer"),cDr.forEach(t),uYe=r(X7," or "),CS=n(X7,"A",{href:!0});var fDr=s(CS);bYe=r(fDr,"LongformerTokenizerFast"),fDr.forEach(t),FYe=r(X7," (Longformer model)"),X7.forEach(t),vYe=i(w),Yg=n(w,"LI",{});var V4e=s(Yg);KZ=n(V4e,"STRONG",{});var mDr=s(KZ);TYe=r(mDr,"luke"),mDr.forEach(t),MYe=r(V4e," \u2014 "),wS=n(V4e,"A",{href:!0});var gDr=s(wS);EYe=r(gDr,"LukeTokenizer"),gDr.forEach(t),CYe=r(V4e," (LUKE model)"),V4e.forEach(t),wYe=i(w),bs=n(w,"LI",{});var z7=s(bs);ZZ=n(z7,"STRONG",{});var hDr=s(ZZ);AYe=r(hDr,"lxmert"),hDr.forEach(t),yYe=r(z7," \u2014 "),AS=n(z7,"A",{href:!0});var pDr=s(AS);LYe=r(pDr,"LxmertTokenizer"),pDr.forEach(t),xYe=r(z7," or "),yS=n(z7,"A",{href:!0});var _Dr=s(yS);kYe=r(_Dr,"LxmertTokenizerFast"),_Dr.forEach(t),SYe=r(z7," (LXMERT model)"),z7.forEach(t),RYe=i(w),Kg=n(w,"LI",{});var X4e=s(Kg);eee=n(X4e,"STRONG",{});var uDr=s(eee);BYe=r(uDr,"m2m_100"),uDr.forEach(t),PYe=r(X4e," \u2014 "),LS=n(X4e,"A",{href:!0});var bDr=s(LS);$Ye=r(bDr,"M2M100Tokenizer"),bDr.forEach(t),IYe=r(X4e," (M2M100 model)"),X4e.forEach(t),qYe=i(w),Zg=n(w,"LI",{});var z4e=s(Zg);oee=n(z4e,"STRONG",{});var FDr=s(oee);NYe=r(FDr,"marian"),FDr.forEach(t),jYe=r(z4e," \u2014 "),xS=n(z4e,"A",{href:!0});var vDr=s(xS);DYe=r(vDr,"MarianTokenizer"),vDr.forEach(t),GYe=r(z4e," (Marian model)"),z4e.forEach(t),OYe=i(w),Fs=n(w,"LI",{});var Q7=s(Fs);ree=n(Q7,"STRONG",{});var TDr=s(ree);VYe=r(TDr,"mbart"),TDr.forEach(t),XYe=r(Q7," \u2014 "),kS=n(Q7,"A",{href:!0});var MDr=s(kS);zYe=r(MDr,"MBartTokenizer"),MDr.forEach(t),QYe=r(Q7," or "),SS=n(Q7,"A",{href:!0});var EDr=s(SS);WYe=r(EDr,"MBartTokenizerFast"),EDr.forEach(t),HYe=r(Q7," (mBART model)"),Q7.forEach(t),UYe=i(w),vs=n(w,"LI",{});var W7=s(vs);tee=n(W7,"STRONG",{});var CDr=s(tee);JYe=r(CDr,"mbart50"),CDr.forEach(t),YYe=r(W7," \u2014 "),RS=n(W7,"A",{href:!0});var wDr=s(RS);KYe=r(wDr,"MBart50Tokenizer"),wDr.forEach(t),ZYe=r(W7," or "),BS=n(W7,"A",{href:!0});var ADr=s(BS);eKe=r(ADr,"MBart50TokenizerFast"),ADr.forEach(t),oKe=r(W7," (mBART-50 model)"),W7.forEach(t),rKe=i(w),eh=n(w,"LI",{});var Q4e=s(eh);aee=n(Q4e,"STRONG",{});var yDr=s(aee);tKe=r(yDr,"mluke"),yDr.forEach(t),aKe=r(Q4e," \u2014 "),PS=n(Q4e,"A",{href:!0});var LDr=s(PS);nKe=r(LDr,"MLukeTokenizer"),LDr.forEach(t),sKe=r(Q4e," (mLUKE model)"),Q4e.forEach(t),lKe=i(w),Ts=n(w,"LI",{});var H7=s(Ts);nee=n(H7,"STRONG",{});var xDr=s(nee);iKe=r(xDr,"mobilebert"),xDr.forEach(t),dKe=r(H7," \u2014 "),$S=n(H7,"A",{href:!0});var kDr=s($S);cKe=r(kDr,"MobileBertTokenizer"),kDr.forEach(t),fKe=r(H7," or "),IS=n(H7,"A",{href:!0});var SDr=s(IS);mKe=r(SDr,"MobileBertTokenizerFast"),SDr.forEach(t),gKe=r(H7," (MobileBERT model)"),H7.forEach(t),hKe=i(w),Ms=n(w,"LI",{});var U7=s(Ms);see=n(U7,"STRONG",{});var RDr=s(see);pKe=r(RDr,"mpnet"),RDr.forEach(t),_Ke=r(U7," \u2014 "),qS=n(U7,"A",{href:!0});var BDr=s(qS);uKe=r(BDr,"MPNetTokenizer"),BDr.forEach(t),bKe=r(U7," or "),NS=n(U7,"A",{href:!0});var PDr=s(NS);FKe=r(PDr,"MPNetTokenizerFast"),PDr.forEach(t),vKe=r(U7," (MPNet model)"),U7.forEach(t),TKe=i(w),Es=n(w,"LI",{});var J7=s(Es);lee=n(J7,"STRONG",{});var $Dr=s(lee);MKe=r($Dr,"mt5"),$Dr.forEach(t),EKe=r(J7," \u2014 "),jS=n(J7,"A",{href:!0});var IDr=s(jS);CKe=r(IDr,"MT5Tokenizer"),IDr.forEach(t),wKe=r(J7," or "),DS=n(J7,"A",{href:!0});var qDr=s(DS);AKe=r(qDr,"MT5TokenizerFast"),qDr.forEach(t),yKe=r(J7," (mT5 model)"),J7.forEach(t),LKe=i(w),Cs=n(w,"LI",{});var Y7=s(Cs);iee=n(Y7,"STRONG",{});var NDr=s(iee);xKe=r(NDr,"openai-gpt"),NDr.forEach(t),kKe=r(Y7," \u2014 "),GS=n(Y7,"A",{href:!0});var jDr=s(GS);SKe=r(jDr,"OpenAIGPTTokenizer"),jDr.forEach(t),RKe=r(Y7," or "),OS=n(Y7,"A",{href:!0});var DDr=s(OS);BKe=r(DDr,"OpenAIGPTTokenizerFast"),DDr.forEach(t),PKe=r(Y7," (OpenAI GPT model)"),Y7.forEach(t),$Ke=i(w),ws=n(w,"LI",{});var K7=s(ws);dee=n(K7,"STRONG",{});var GDr=s(dee);IKe=r(GDr,"pegasus"),GDr.forEach(t),qKe=r(K7," \u2014 "),VS=n(K7,"A",{href:!0});var ODr=s(VS);NKe=r(ODr,"PegasusTokenizer"),ODr.forEach(t),jKe=r(K7," or "),XS=n(K7,"A",{href:!0});var VDr=s(XS);DKe=r(VDr,"PegasusTokenizerFast"),VDr.forEach(t),GKe=r(K7," (Pegasus model)"),K7.forEach(t),OKe=i(w),oh=n(w,"LI",{});var W4e=s(oh);cee=n(W4e,"STRONG",{});var XDr=s(cee);VKe=r(XDr,"perceiver"),XDr.forEach(t),XKe=r(W4e," \u2014 "),zS=n(W4e,"A",{href:!0});var zDr=s(zS);zKe=r(zDr,"PerceiverTokenizer"),zDr.forEach(t),QKe=r(W4e," (Perceiver model)"),W4e.forEach(t),WKe=i(w),rh=n(w,"LI",{});var H4e=s(rh);fee=n(H4e,"STRONG",{});var QDr=s(fee);HKe=r(QDr,"phobert"),QDr.forEach(t),UKe=r(H4e," \u2014 "),QS=n(H4e,"A",{href:!0});var WDr=s(QS);JKe=r(WDr,"PhobertTokenizer"),WDr.forEach(t),YKe=r(H4e," (PhoBERT model)"),H4e.forEach(t),KKe=i(w),th=n(w,"LI",{});var U4e=s(th);mee=n(U4e,"STRONG",{});var HDr=s(mee);ZKe=r(HDr,"plbart"),HDr.forEach(t),eZe=r(U4e," \u2014 "),WS=n(U4e,"A",{href:!0});var UDr=s(WS);oZe=r(UDr,"PLBartTokenizer"),UDr.forEach(t),rZe=r(U4e," (PLBart model)"),U4e.forEach(t),tZe=i(w),ah=n(w,"LI",{});var J4e=s(ah);gee=n(J4e,"STRONG",{});var JDr=s(gee);aZe=r(JDr,"prophetnet"),JDr.forEach(t),nZe=r(J4e," \u2014 "),HS=n(J4e,"A",{href:!0});var YDr=s(HS);sZe=r(YDr,"ProphetNetTokenizer"),YDr.forEach(t),lZe=r(J4e," (ProphetNet model)"),J4e.forEach(t),iZe=i(w),As=n(w,"LI",{});var Z7=s(As);hee=n(Z7,"STRONG",{});var KDr=s(hee);dZe=r(KDr,"qdqbert"),KDr.forEach(t),cZe=r(Z7," \u2014 "),US=n(Z7,"A",{href:!0});var ZDr=s(US);fZe=r(ZDr,"BertTokenizer"),ZDr.forEach(t),mZe=r(Z7," or "),JS=n(Z7,"A",{href:!0});var eGr=s(JS);gZe=r(eGr,"BertTokenizerFast"),eGr.forEach(t),hZe=r(Z7," (QDQBert model)"),Z7.forEach(t),pZe=i(w),nh=n(w,"LI",{});var Y4e=s(nh);pee=n(Y4e,"STRONG",{});var oGr=s(pee);_Ze=r(oGr,"rag"),oGr.forEach(t),uZe=r(Y4e," \u2014 "),YS=n(Y4e,"A",{href:!0});var rGr=s(YS);bZe=r(rGr,"RagTokenizer"),rGr.forEach(t),FZe=r(Y4e," (RAG model)"),Y4e.forEach(t),vZe=i(w),ys=n(w,"LI",{});var e9=s(ys);_ee=n(e9,"STRONG",{});var tGr=s(_ee);TZe=r(tGr,"realm"),tGr.forEach(t),MZe=r(e9," \u2014 "),KS=n(e9,"A",{href:!0});var aGr=s(KS);EZe=r(aGr,"RealmTokenizer"),aGr.forEach(t),CZe=r(e9," or "),ZS=n(e9,"A",{href:!0});var nGr=s(ZS);wZe=r(nGr,"RealmTokenizerFast"),nGr.forEach(t),AZe=r(e9," (Realm model)"),e9.forEach(t),yZe=i(w),Ls=n(w,"LI",{});var o9=s(Ls);uee=n(o9,"STRONG",{});var sGr=s(uee);LZe=r(sGr,"reformer"),sGr.forEach(t),xZe=r(o9," \u2014 "),eR=n(o9,"A",{href:!0});var lGr=s(eR);kZe=r(lGr,"ReformerTokenizer"),lGr.forEach(t),SZe=r(o9," or "),oR=n(o9,"A",{href:!0});var iGr=s(oR);RZe=r(iGr,"ReformerTokenizerFast"),iGr.forEach(t),BZe=r(o9," (Reformer model)"),o9.forEach(t),PZe=i(w),xs=n(w,"LI",{});var r9=s(xs);bee=n(r9,"STRONG",{});var dGr=s(bee);$Ze=r(dGr,"rembert"),dGr.forEach(t),IZe=r(r9," \u2014 "),rR=n(r9,"A",{href:!0});var cGr=s(rR);qZe=r(cGr,"RemBertTokenizer"),cGr.forEach(t),NZe=r(r9," or "),tR=n(r9,"A",{href:!0});var fGr=s(tR);jZe=r(fGr,"RemBertTokenizerFast"),fGr.forEach(t),DZe=r(r9," (RemBERT model)"),r9.forEach(t),GZe=i(w),ks=n(w,"LI",{});var t9=s(ks);Fee=n(t9,"STRONG",{});var mGr=s(Fee);OZe=r(mGr,"retribert"),mGr.forEach(t),VZe=r(t9," \u2014 "),aR=n(t9,"A",{href:!0});var gGr=s(aR);XZe=r(gGr,"RetriBertTokenizer"),gGr.forEach(t),zZe=r(t9," or "),nR=n(t9,"A",{href:!0});var hGr=s(nR);QZe=r(hGr,"RetriBertTokenizerFast"),hGr.forEach(t),WZe=r(t9," (RetriBERT model)"),t9.forEach(t),HZe=i(w),Ss=n(w,"LI",{});var a9=s(Ss);vee=n(a9,"STRONG",{});var pGr=s(vee);UZe=r(pGr,"roberta"),pGr.forEach(t),JZe=r(a9," \u2014 "),sR=n(a9,"A",{href:!0});var _Gr=s(sR);YZe=r(_Gr,"RobertaTokenizer"),_Gr.forEach(t),KZe=r(a9," or "),lR=n(a9,"A",{href:!0});var uGr=s(lR);ZZe=r(uGr,"RobertaTokenizerFast"),uGr.forEach(t),eeo=r(a9," (RoBERTa model)"),a9.forEach(t),oeo=i(w),Rs=n(w,"LI",{});var n9=s(Rs);Tee=n(n9,"STRONG",{});var bGr=s(Tee);reo=r(bGr,"roformer"),bGr.forEach(t),teo=r(n9," \u2014 "),iR=n(n9,"A",{href:!0});var FGr=s(iR);aeo=r(FGr,"RoFormerTokenizer"),FGr.forEach(t),neo=r(n9," or "),dR=n(n9,"A",{href:!0});var vGr=s(dR);seo=r(vGr,"RoFormerTokenizerFast"),vGr.forEach(t),leo=r(n9," (RoFormer model)"),n9.forEach(t),ieo=i(w),sh=n(w,"LI",{});var K4e=s(sh);Mee=n(K4e,"STRONG",{});var TGr=s(Mee);deo=r(TGr,"speech_to_text"),TGr.forEach(t),ceo=r(K4e," \u2014 "),cR=n(K4e,"A",{href:!0});var MGr=s(cR);feo=r(MGr,"Speech2TextTokenizer"),MGr.forEach(t),meo=r(K4e," (Speech2Text model)"),K4e.forEach(t),geo=i(w),lh=n(w,"LI",{});var Z4e=s(lh);Eee=n(Z4e,"STRONG",{});var EGr=s(Eee);heo=r(EGr,"speech_to_text_2"),EGr.forEach(t),peo=r(Z4e," \u2014 "),fR=n(Z4e,"A",{href:!0});var CGr=s(fR);_eo=r(CGr,"Speech2Text2Tokenizer"),CGr.forEach(t),ueo=r(Z4e," (Speech2Text2 model)"),Z4e.forEach(t),beo=i(w),Bs=n(w,"LI",{});var s9=s(Bs);Cee=n(s9,"STRONG",{});var wGr=s(Cee);Feo=r(wGr,"splinter"),wGr.forEach(t),veo=r(s9," \u2014 "),mR=n(s9,"A",{href:!0});var AGr=s(mR);Teo=r(AGr,"SplinterTokenizer"),AGr.forEach(t),Meo=r(s9," or "),gR=n(s9,"A",{href:!0});var yGr=s(gR);Eeo=r(yGr,"SplinterTokenizerFast"),yGr.forEach(t),Ceo=r(s9," (Splinter model)"),s9.forEach(t),weo=i(w),Ps=n(w,"LI",{});var l9=s(Ps);wee=n(l9,"STRONG",{});var LGr=s(wee);Aeo=r(LGr,"squeezebert"),LGr.forEach(t),yeo=r(l9," \u2014 "),hR=n(l9,"A",{href:!0});var xGr=s(hR);Leo=r(xGr,"SqueezeBertTokenizer"),xGr.forEach(t),xeo=r(l9," or "),pR=n(l9,"A",{href:!0});var kGr=s(pR);keo=r(kGr,"SqueezeBertTokenizerFast"),kGr.forEach(t),Seo=r(l9," (SqueezeBERT model)"),l9.forEach(t),Reo=i(w),$s=n(w,"LI",{});var i9=s($s);Aee=n(i9,"STRONG",{});var SGr=s(Aee);Beo=r(SGr,"t5"),SGr.forEach(t),Peo=r(i9," \u2014 "),_R=n(i9,"A",{href:!0});var RGr=s(_R);$eo=r(RGr,"T5Tokenizer"),RGr.forEach(t),Ieo=r(i9," or "),uR=n(i9,"A",{href:!0});var BGr=s(uR);qeo=r(BGr,"T5TokenizerFast"),BGr.forEach(t),Neo=r(i9," (T5 model)"),i9.forEach(t),jeo=i(w),ih=n(w,"LI",{});var eEe=s(ih);yee=n(eEe,"STRONG",{});var PGr=s(yee);Deo=r(PGr,"tapas"),PGr.forEach(t),Geo=r(eEe," \u2014 "),bR=n(eEe,"A",{href:!0});var $Gr=s(bR);Oeo=r($Gr,"TapasTokenizer"),$Gr.forEach(t),Veo=r(eEe," (TAPAS model)"),eEe.forEach(t),Xeo=i(w),dh=n(w,"LI",{});var oEe=s(dh);Lee=n(oEe,"STRONG",{});var IGr=s(Lee);zeo=r(IGr,"tapex"),IGr.forEach(t),Qeo=r(oEe," \u2014 "),FR=n(oEe,"A",{href:!0});var qGr=s(FR);Weo=r(qGr,"TapexTokenizer"),qGr.forEach(t),Heo=r(oEe," (TAPEX model)"),oEe.forEach(t),Ueo=i(w),ch=n(w,"LI",{});var rEe=s(ch);xee=n(rEe,"STRONG",{});var NGr=s(xee);Jeo=r(NGr,"transfo-xl"),NGr.forEach(t),Yeo=r(rEe," \u2014 "),vR=n(rEe,"A",{href:!0});var jGr=s(vR);Keo=r(jGr,"TransfoXLTokenizer"),jGr.forEach(t),Zeo=r(rEe," (Transformer-XL model)"),rEe.forEach(t),eoo=i(w),fh=n(w,"LI",{});var tEe=s(fh);kee=n(tEe,"STRONG",{});var DGr=s(kee);ooo=r(DGr,"wav2vec2"),DGr.forEach(t),roo=r(tEe," \u2014 "),TR=n(tEe,"A",{href:!0});var GGr=s(TR);too=r(GGr,"Wav2Vec2CTCTokenizer"),GGr.forEach(t),aoo=r(tEe," (Wav2Vec2 model)"),tEe.forEach(t),noo=i(w),mh=n(w,"LI",{});var aEe=s(mh);See=n(aEe,"STRONG",{});var OGr=s(See);soo=r(OGr,"wav2vec2_phoneme"),OGr.forEach(t),loo=r(aEe," \u2014 "),MR=n(aEe,"A",{href:!0});var VGr=s(MR);ioo=r(VGr,"Wav2Vec2PhonemeCTCTokenizer"),VGr.forEach(t),doo=r(aEe," (Wav2Vec2Phoneme model)"),aEe.forEach(t),coo=i(w),Is=n(w,"LI",{});var d9=s(Is);Ree=n(d9,"STRONG",{});var XGr=s(Ree);foo=r(XGr,"xglm"),XGr.forEach(t),moo=r(d9," \u2014 "),ER=n(d9,"A",{href:!0});var zGr=s(ER);goo=r(zGr,"XGLMTokenizer"),zGr.forEach(t),hoo=r(d9," or "),CR=n(d9,"A",{href:!0});var QGr=s(CR);poo=r(QGr,"XGLMTokenizerFast"),QGr.forEach(t),_oo=r(d9," (XGLM model)"),d9.forEach(t),uoo=i(w),gh=n(w,"LI",{});var nEe=s(gh);Bee=n(nEe,"STRONG",{});var WGr=s(Bee);boo=r(WGr,"xlm"),WGr.forEach(t),Foo=r(nEe," \u2014 "),wR=n(nEe,"A",{href:!0});var HGr=s(wR);voo=r(HGr,"XLMTokenizer"),HGr.forEach(t),Too=r(nEe," (XLM model)"),nEe.forEach(t),Moo=i(w),hh=n(w,"LI",{});var sEe=s(hh);Pee=n(sEe,"STRONG",{});var UGr=s(Pee);Eoo=r(UGr,"xlm-prophetnet"),UGr.forEach(t),Coo=r(sEe," \u2014 "),AR=n(sEe,"A",{href:!0});var JGr=s(AR);woo=r(JGr,"XLMProphetNetTokenizer"),JGr.forEach(t),Aoo=r(sEe," (XLMProphetNet model)"),sEe.forEach(t),yoo=i(w),qs=n(w,"LI",{});var c9=s(qs);$ee=n(c9,"STRONG",{});var YGr=s($ee);Loo=r(YGr,"xlm-roberta"),YGr.forEach(t),xoo=r(c9," \u2014 "),yR=n(c9,"A",{href:!0});var KGr=s(yR);koo=r(KGr,"XLMRobertaTokenizer"),KGr.forEach(t),Soo=r(c9," or "),LR=n(c9,"A",{href:!0});var ZGr=s(LR);Roo=r(ZGr,"XLMRobertaTokenizerFast"),ZGr.forEach(t),Boo=r(c9," (XLM-RoBERTa model)"),c9.forEach(t),Poo=i(w),Ns=n(w,"LI",{});var f9=s(Ns);Iee=n(f9,"STRONG",{});var eOr=s(Iee);$oo=r(eOr,"xlnet"),eOr.forEach(t),Ioo=r(f9," \u2014 "),xR=n(f9,"A",{href:!0});var oOr=s(xR);qoo=r(oOr,"XLNetTokenizer"),oOr.forEach(t),Noo=r(f9," or "),kR=n(f9,"A",{href:!0});var rOr=s(kR);joo=r(rOr,"XLNetTokenizerFast"),rOr.forEach(t),Doo=r(f9," (XLNet model)"),f9.forEach(t),w.forEach(t),Goo=i(ha),qee=n(ha,"P",{});var tOr=s(qee);Ooo=r(tOr,"Examples:"),tOr.forEach(t),Voo=i(ha),m(G3.$$.fragment,ha),ha.forEach(t),Xoo=i(Vs),ph=n(Vs,"DIV",{class:!0});var LPe=s(ph);m(O3.$$.fragment,LPe),zoo=i(LPe),Nee=n(LPe,"P",{});var aOr=s(Nee);Qoo=r(aOr,"Register a new tokenizer in this mapping."),aOr.forEach(t),LPe.forEach(t),Vs.forEach(t),CRe=i(c),Wi=n(c,"H2",{class:!0});var xPe=s(Wi);_h=n(xPe,"A",{id:!0,class:!0,href:!0});var nOr=s(_h);jee=n(nOr,"SPAN",{});var sOr=s(jee);m(V3.$$.fragment,sOr),sOr.forEach(t),nOr.forEach(t),Woo=i(xPe),Dee=n(xPe,"SPAN",{});var lOr=s(Dee);Hoo=r(lOr,"AutoFeatureExtractor"),lOr.forEach(t),xPe.forEach(t),wRe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(X3.$$.fragment,Xs),Uoo=i(Xs),z3=n(Xs,"P",{});var kPe=s(z3);Joo=r(kPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),SR=n(kPe,"A",{href:!0});var iOr=s(SR);Yoo=r(iOr,"AutoFeatureExtractor.from_pretrained()"),iOr.forEach(t),Koo=r(kPe," class method."),kPe.forEach(t),Zoo=i(Xs),Q3=n(Xs,"P",{});var SPe=s(Q3);ero=r(SPe,"This class cannot be instantiated directly using "),Gee=n(SPe,"CODE",{});var dOr=s(Gee);oro=r(dOr,"__init__()"),dOr.forEach(t),rro=r(SPe," (throws an error)."),SPe.forEach(t),tro=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(W3.$$.fragment,Nt),aro=i(Nt),Oee=n(Nt,"P",{});var cOr=s(Oee);nro=r(cOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),cOr.forEach(t),sro=i(Nt),Va=n(Nt,"P",{});var AC=s(Va);lro=r(AC,"The feature extractor class to instantiate is selected based on the "),Vee=n(AC,"CODE",{});var fOr=s(Vee);iro=r(fOr,"model_type"),fOr.forEach(t),dro=r(AC,` property of the config object
(either passed as an argument or loaded from `),Xee=n(AC,"CODE",{});var mOr=s(Xee);cro=r(mOr,"pretrained_model_name_or_path"),mOr.forEach(t),fro=r(AC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zee=n(AC,"CODE",{});var gOr=s(zee);mro=r(gOr,"pretrained_model_name_or_path"),gOr.forEach(t),gro=r(AC,":"),AC.forEach(t),hro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);uh=n(ae,"LI",{});var lEe=s(uh);Qee=n(lEe,"STRONG",{});var hOr=s(Qee);pro=r(hOr,"beit"),hOr.forEach(t),_ro=r(lEe," \u2014 "),RR=n(lEe,"A",{href:!0});var pOr=s(RR);uro=r(pOr,"BeitFeatureExtractor"),pOr.forEach(t),bro=r(lEe," (BEiT model)"),lEe.forEach(t),Fro=i(ae),bh=n(ae,"LI",{});var iEe=s(bh);Wee=n(iEe,"STRONG",{});var _Or=s(Wee);vro=r(_Or,"clip"),_Or.forEach(t),Tro=r(iEe," \u2014 "),BR=n(iEe,"A",{href:!0});var uOr=s(BR);Mro=r(uOr,"CLIPFeatureExtractor"),uOr.forEach(t),Ero=r(iEe," (CLIP model)"),iEe.forEach(t),Cro=i(ae),Fh=n(ae,"LI",{});var dEe=s(Fh);Hee=n(dEe,"STRONG",{});var bOr=s(Hee);wro=r(bOr,"convnext"),bOr.forEach(t),Aro=r(dEe," \u2014 "),PR=n(dEe,"A",{href:!0});var FOr=s(PR);yro=r(FOr,"ConvNextFeatureExtractor"),FOr.forEach(t),Lro=r(dEe," (ConvNext model)"),dEe.forEach(t),xro=i(ae),vh=n(ae,"LI",{});var cEe=s(vh);Uee=n(cEe,"STRONG",{});var vOr=s(Uee);kro=r(vOr,"deit"),vOr.forEach(t),Sro=r(cEe," \u2014 "),$R=n(cEe,"A",{href:!0});var TOr=s($R);Rro=r(TOr,"DeiTFeatureExtractor"),TOr.forEach(t),Bro=r(cEe," (DeiT model)"),cEe.forEach(t),Pro=i(ae),Th=n(ae,"LI",{});var fEe=s(Th);Jee=n(fEe,"STRONG",{});var MOr=s(Jee);$ro=r(MOr,"detr"),MOr.forEach(t),Iro=r(fEe," \u2014 "),IR=n(fEe,"A",{href:!0});var EOr=s(IR);qro=r(EOr,"DetrFeatureExtractor"),EOr.forEach(t),Nro=r(fEe," (DETR model)"),fEe.forEach(t),jro=i(ae),Mh=n(ae,"LI",{});var mEe=s(Mh);Yee=n(mEe,"STRONG",{});var COr=s(Yee);Dro=r(COr,"hubert"),COr.forEach(t),Gro=r(mEe," \u2014 "),qR=n(mEe,"A",{href:!0});var wOr=s(qR);Oro=r(wOr,"Wav2Vec2FeatureExtractor"),wOr.forEach(t),Vro=r(mEe," (Hubert model)"),mEe.forEach(t),Xro=i(ae),Eh=n(ae,"LI",{});var gEe=s(Eh);Kee=n(gEe,"STRONG",{});var AOr=s(Kee);zro=r(AOr,"layoutlmv2"),AOr.forEach(t),Qro=r(gEe," \u2014 "),NR=n(gEe,"A",{href:!0});var yOr=s(NR);Wro=r(yOr,"LayoutLMv2FeatureExtractor"),yOr.forEach(t),Hro=r(gEe," (LayoutLMv2 model)"),gEe.forEach(t),Uro=i(ae),Ch=n(ae,"LI",{});var hEe=s(Ch);Zee=n(hEe,"STRONG",{});var LOr=s(Zee);Jro=r(LOr,"maskformer"),LOr.forEach(t),Yro=r(hEe," \u2014 "),jR=n(hEe,"A",{href:!0});var xOr=s(jR);Kro=r(xOr,"MaskFormerFeatureExtractor"),xOr.forEach(t),Zro=r(hEe," (MaskFormer model)"),hEe.forEach(t),eto=i(ae),wh=n(ae,"LI",{});var pEe=s(wh);eoe=n(pEe,"STRONG",{});var kOr=s(eoe);oto=r(kOr,"perceiver"),kOr.forEach(t),rto=r(pEe," \u2014 "),DR=n(pEe,"A",{href:!0});var SOr=s(DR);tto=r(SOr,"PerceiverFeatureExtractor"),SOr.forEach(t),ato=r(pEe," (Perceiver model)"),pEe.forEach(t),nto=i(ae),Ah=n(ae,"LI",{});var _Ee=s(Ah);ooe=n(_Ee,"STRONG",{});var ROr=s(ooe);sto=r(ROr,"poolformer"),ROr.forEach(t),lto=r(_Ee," \u2014 "),GR=n(_Ee,"A",{href:!0});var BOr=s(GR);ito=r(BOr,"PoolFormerFeatureExtractor"),BOr.forEach(t),dto=r(_Ee," (PoolFormer model)"),_Ee.forEach(t),cto=i(ae),yh=n(ae,"LI",{});var uEe=s(yh);roe=n(uEe,"STRONG",{});var POr=s(roe);fto=r(POr,"regnet"),POr.forEach(t),mto=r(uEe," \u2014 "),OR=n(uEe,"A",{href:!0});var $Or=s(OR);gto=r($Or,"ConvNextFeatureExtractor"),$Or.forEach(t),hto=r(uEe," (RegNet model)"),uEe.forEach(t),pto=i(ae),Lh=n(ae,"LI",{});var bEe=s(Lh);toe=n(bEe,"STRONG",{});var IOr=s(toe);_to=r(IOr,"resnet"),IOr.forEach(t),uto=r(bEe," \u2014 "),VR=n(bEe,"A",{href:!0});var qOr=s(VR);bto=r(qOr,"ConvNextFeatureExtractor"),qOr.forEach(t),Fto=r(bEe," (ResNet model)"),bEe.forEach(t),vto=i(ae),xh=n(ae,"LI",{});var FEe=s(xh);aoe=n(FEe,"STRONG",{});var NOr=s(aoe);Tto=r(NOr,"segformer"),NOr.forEach(t),Mto=r(FEe," \u2014 "),XR=n(FEe,"A",{href:!0});var jOr=s(XR);Eto=r(jOr,"SegformerFeatureExtractor"),jOr.forEach(t),Cto=r(FEe," (SegFormer model)"),FEe.forEach(t),wto=i(ae),kh=n(ae,"LI",{});var vEe=s(kh);noe=n(vEe,"STRONG",{});var DOr=s(noe);Ato=r(DOr,"speech_to_text"),DOr.forEach(t),yto=r(vEe," \u2014 "),zR=n(vEe,"A",{href:!0});var GOr=s(zR);Lto=r(GOr,"Speech2TextFeatureExtractor"),GOr.forEach(t),xto=r(vEe," (Speech2Text model)"),vEe.forEach(t),kto=i(ae),Sh=n(ae,"LI",{});var TEe=s(Sh);soe=n(TEe,"STRONG",{});var OOr=s(soe);Sto=r(OOr,"swin"),OOr.forEach(t),Rto=r(TEe," \u2014 "),QR=n(TEe,"A",{href:!0});var VOr=s(QR);Bto=r(VOr,"ViTFeatureExtractor"),VOr.forEach(t),Pto=r(TEe," (Swin model)"),TEe.forEach(t),$to=i(ae),Rh=n(ae,"LI",{});var MEe=s(Rh);loe=n(MEe,"STRONG",{});var XOr=s(loe);Ito=r(XOr,"van"),XOr.forEach(t),qto=r(MEe," \u2014 "),WR=n(MEe,"A",{href:!0});var zOr=s(WR);Nto=r(zOr,"ConvNextFeatureExtractor"),zOr.forEach(t),jto=r(MEe," (VAN model)"),MEe.forEach(t),Dto=i(ae),Bh=n(ae,"LI",{});var EEe=s(Bh);ioe=n(EEe,"STRONG",{});var QOr=s(ioe);Gto=r(QOr,"vit"),QOr.forEach(t),Oto=r(EEe," \u2014 "),HR=n(EEe,"A",{href:!0});var WOr=s(HR);Vto=r(WOr,"ViTFeatureExtractor"),WOr.forEach(t),Xto=r(EEe," (ViT model)"),EEe.forEach(t),zto=i(ae),Ph=n(ae,"LI",{});var CEe=s(Ph);doe=n(CEe,"STRONG",{});var HOr=s(doe);Qto=r(HOr,"vit_mae"),HOr.forEach(t),Wto=r(CEe," \u2014 "),UR=n(CEe,"A",{href:!0});var UOr=s(UR);Hto=r(UOr,"ViTFeatureExtractor"),UOr.forEach(t),Uto=r(CEe," (ViTMAE model)"),CEe.forEach(t),Jto=i(ae),$h=n(ae,"LI",{});var wEe=s($h);coe=n(wEe,"STRONG",{});var JOr=s(coe);Yto=r(JOr,"wav2vec2"),JOr.forEach(t),Kto=r(wEe," \u2014 "),JR=n(wEe,"A",{href:!0});var YOr=s(JR);Zto=r(YOr,"Wav2Vec2FeatureExtractor"),YOr.forEach(t),eao=r(wEe," (Wav2Vec2 model)"),wEe.forEach(t),ae.forEach(t),oao=i(Nt),m(Ih.$$.fragment,Nt),rao=i(Nt),foe=n(Nt,"P",{});var KOr=s(foe);tao=r(KOr,"Examples:"),KOr.forEach(t),aao=i(Nt),m(H3.$$.fragment,Nt),Nt.forEach(t),nao=i(Xs),qh=n(Xs,"DIV",{class:!0});var RPe=s(qh);m(U3.$$.fragment,RPe),sao=i(RPe),moe=n(RPe,"P",{});var ZOr=s(moe);lao=r(ZOr,"Register a new feature extractor for this class."),ZOr.forEach(t),RPe.forEach(t),Xs.forEach(t),ARe=i(c),Hi=n(c,"H2",{class:!0});var BPe=s(Hi);Nh=n(BPe,"A",{id:!0,class:!0,href:!0});var eVr=s(Nh);goe=n(eVr,"SPAN",{});var oVr=s(goe);m(J3.$$.fragment,oVr),oVr.forEach(t),eVr.forEach(t),iao=i(BPe),hoe=n(BPe,"SPAN",{});var rVr=s(hoe);dao=r(rVr,"AutoProcessor"),rVr.forEach(t),BPe.forEach(t),yRe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(Y3.$$.fragment,zs),cao=i(zs),K3=n(zs,"P",{});var PPe=s(K3);fao=r(PPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),YR=n(PPe,"A",{href:!0});var tVr=s(YR);mao=r(tVr,"AutoProcessor.from_pretrained()"),tVr.forEach(t),gao=r(PPe," class method."),PPe.forEach(t),hao=i(zs),Z3=n(zs,"P",{});var $Pe=s(Z3);pao=r($Pe,"This class cannot be instantiated directly using "),poe=n($Pe,"CODE",{});var aVr=s(poe);_ao=r(aVr,"__init__()"),aVr.forEach(t),uao=r($Pe," (throws an error)."),$Pe.forEach(t),bao=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(ew.$$.fragment,jt),Fao=i(jt),_oe=n(jt,"P",{});var nVr=s(_oe);vao=r(nVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),nVr.forEach(t),Tao=i(jt),Ui=n(jt,"P",{});var cU=s(Ui);Mao=r(cU,"The processor class to instantiate is selected based on the "),uoe=n(cU,"CODE",{});var sVr=s(uoe);Eao=r(sVr,"model_type"),sVr.forEach(t),Cao=r(cU,` property of the config object (either
passed as an argument or loaded from `),boe=n(cU,"CODE",{});var lVr=s(boe);wao=r(lVr,"pretrained_model_name_or_path"),lVr.forEach(t),Aao=r(cU," if possible):"),cU.forEach(t),yao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);jh=n(jo,"LI",{});var AEe=s(jh);Foe=n(AEe,"STRONG",{});var iVr=s(Foe);Lao=r(iVr,"clip"),iVr.forEach(t),xao=r(AEe," \u2014 "),KR=n(AEe,"A",{href:!0});var dVr=s(KR);kao=r(dVr,"CLIPProcessor"),dVr.forEach(t),Sao=r(AEe," (CLIP model)"),AEe.forEach(t),Rao=i(jo),Dh=n(jo,"LI",{});var yEe=s(Dh);voe=n(yEe,"STRONG",{});var cVr=s(voe);Bao=r(cVr,"layoutlmv2"),cVr.forEach(t),Pao=r(yEe," \u2014 "),ZR=n(yEe,"A",{href:!0});var fVr=s(ZR);$ao=r(fVr,"LayoutLMv2Processor"),fVr.forEach(t),Iao=r(yEe," (LayoutLMv2 model)"),yEe.forEach(t),qao=i(jo),Gh=n(jo,"LI",{});var LEe=s(Gh);Toe=n(LEe,"STRONG",{});var mVr=s(Toe);Nao=r(mVr,"layoutxlm"),mVr.forEach(t),jao=r(LEe," \u2014 "),eB=n(LEe,"A",{href:!0});var gVr=s(eB);Dao=r(gVr,"LayoutXLMProcessor"),gVr.forEach(t),Gao=r(LEe," (LayoutXLM model)"),LEe.forEach(t),Oao=i(jo),Oh=n(jo,"LI",{});var xEe=s(Oh);Moe=n(xEe,"STRONG",{});var hVr=s(Moe);Vao=r(hVr,"speech_to_text"),hVr.forEach(t),Xao=r(xEe," \u2014 "),oB=n(xEe,"A",{href:!0});var pVr=s(oB);zao=r(pVr,"Speech2TextProcessor"),pVr.forEach(t),Qao=r(xEe," (Speech2Text model)"),xEe.forEach(t),Wao=i(jo),Vh=n(jo,"LI",{});var kEe=s(Vh);Eoe=n(kEe,"STRONG",{});var _Vr=s(Eoe);Hao=r(_Vr,"speech_to_text_2"),_Vr.forEach(t),Uao=r(kEe," \u2014 "),rB=n(kEe,"A",{href:!0});var uVr=s(rB);Jao=r(uVr,"Speech2Text2Processor"),uVr.forEach(t),Yao=r(kEe," (Speech2Text2 model)"),kEe.forEach(t),Kao=i(jo),Xh=n(jo,"LI",{});var SEe=s(Xh);Coe=n(SEe,"STRONG",{});var bVr=s(Coe);Zao=r(bVr,"trocr"),bVr.forEach(t),eno=r(SEe," \u2014 "),tB=n(SEe,"A",{href:!0});var FVr=s(tB);ono=r(FVr,"TrOCRProcessor"),FVr.forEach(t),rno=r(SEe," (TrOCR model)"),SEe.forEach(t),tno=i(jo),zh=n(jo,"LI",{});var REe=s(zh);woe=n(REe,"STRONG",{});var vVr=s(woe);ano=r(vVr,"vision-text-dual-encoder"),vVr.forEach(t),nno=r(REe," \u2014 "),aB=n(REe,"A",{href:!0});var TVr=s(aB);sno=r(TVr,"VisionTextDualEncoderProcessor"),TVr.forEach(t),lno=r(REe," (VisionTextDualEncoder model)"),REe.forEach(t),ino=i(jo),Qh=n(jo,"LI",{});var BEe=s(Qh);Aoe=n(BEe,"STRONG",{});var MVr=s(Aoe);dno=r(MVr,"wav2vec2"),MVr.forEach(t),cno=r(BEe," \u2014 "),nB=n(BEe,"A",{href:!0});var EVr=s(nB);fno=r(EVr,"Wav2Vec2Processor"),EVr.forEach(t),mno=r(BEe," (Wav2Vec2 model)"),BEe.forEach(t),jo.forEach(t),gno=i(jt),m(Wh.$$.fragment,jt),hno=i(jt),yoe=n(jt,"P",{});var CVr=s(yoe);pno=r(CVr,"Examples:"),CVr.forEach(t),_no=i(jt),m(ow.$$.fragment,jt),jt.forEach(t),uno=i(zs),Hh=n(zs,"DIV",{class:!0});var IPe=s(Hh);m(rw.$$.fragment,IPe),bno=i(IPe),Loe=n(IPe,"P",{});var wVr=s(Loe);Fno=r(wVr,"Register a new processor for this class."),wVr.forEach(t),IPe.forEach(t),zs.forEach(t),LRe=i(c),Ji=n(c,"H2",{class:!0});var qPe=s(Ji);Uh=n(qPe,"A",{id:!0,class:!0,href:!0});var AVr=s(Uh);xoe=n(AVr,"SPAN",{});var yVr=s(xoe);m(tw.$$.fragment,yVr),yVr.forEach(t),AVr.forEach(t),vno=i(qPe),koe=n(qPe,"SPAN",{});var LVr=s(koe);Tno=r(LVr,"AutoModel"),LVr.forEach(t),qPe.forEach(t),xRe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(aw.$$.fragment,Qs),Mno=i(Qs),Yi=n(Qs,"P",{});var fU=s(Yi);Eno=r(fU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sB=n(fU,"A",{href:!0});var xVr=s(sB);Cno=r(xVr,"from_pretrained()"),xVr.forEach(t),wno=r(fU," class method or the "),lB=n(fU,"A",{href:!0});var kVr=s(lB);Ano=r(kVr,"from_config()"),kVr.forEach(t),yno=r(fU,` class
method.`),fU.forEach(t),Lno=i(Qs),nw=n(Qs,"P",{});var NPe=s(nw);xno=r(NPe,"This class cannot be instantiated directly using "),Soe=n(NPe,"CODE",{});var SVr=s(Soe);kno=r(SVr,"__init__()"),SVr.forEach(t),Sno=r(NPe," (throws an error)."),NPe.forEach(t),Rno=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(sw.$$.fragment,Ws),Bno=i(Ws),Roe=n(Ws,"P",{});var RVr=s(Roe);Pno=r(RVr,"Instantiates one of the base model classes of the library from a configuration."),RVr.forEach(t),$no=i(Ws),Ki=n(Ws,"P",{});var mU=s(Ki);Ino=r(mU,`Note:
Loading a model from its configuration file does `),Boe=n(mU,"STRONG",{});var BVr=s(Boe);qno=r(BVr,"not"),BVr.forEach(t),Nno=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),iB=n(mU,"A",{href:!0});var PVr=s(iB);jno=r(PVr,"from_pretrained()"),PVr.forEach(t),Dno=r(mU," to load the model weights."),mU.forEach(t),Gno=i(Ws),Poe=n(Ws,"P",{});var $Vr=s(Poe);Ono=r($Vr,"Examples:"),$Vr.forEach(t),Vno=i(Ws),m(lw.$$.fragment,Ws),Ws.forEach(t),Xno=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(iw.$$.fragment,Dt),zno=i(Dt),$oe=n(Dt,"P",{});var IVr=s($oe);Qno=r(IVr,"Instantiate one of the base model classes of the library from a pretrained model."),IVr.forEach(t),Wno=i(Dt),Xa=n(Dt,"P",{});var yC=s(Xa);Hno=r(yC,"The model class to instantiate is selected based on the "),Ioe=n(yC,"CODE",{});var qVr=s(Ioe);Uno=r(qVr,"model_type"),qVr.forEach(t),Jno=r(yC,` property of the config object (either
passed as an argument or loaded from `),qoe=n(yC,"CODE",{});var NVr=s(qoe);Yno=r(NVr,"pretrained_model_name_or_path"),NVr.forEach(t),Kno=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Noe=n(yC,"CODE",{});var jVr=s(Noe);Zno=r(jVr,"pretrained_model_name_or_path"),jVr.forEach(t),eso=r(yC,":"),yC.forEach(t),oso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Jh=n(M,"LI",{});var PEe=s(Jh);joe=n(PEe,"STRONG",{});var DVr=s(joe);rso=r(DVr,"albert"),DVr.forEach(t),tso=r(PEe," \u2014 "),dB=n(PEe,"A",{href:!0});var GVr=s(dB);aso=r(GVr,"AlbertModel"),GVr.forEach(t),nso=r(PEe," (ALBERT model)"),PEe.forEach(t),sso=i(M),Yh=n(M,"LI",{});var $Ee=s(Yh);Doe=n($Ee,"STRONG",{});var OVr=s(Doe);lso=r(OVr,"bart"),OVr.forEach(t),iso=r($Ee," \u2014 "),cB=n($Ee,"A",{href:!0});var VVr=s(cB);dso=r(VVr,"BartModel"),VVr.forEach(t),cso=r($Ee," (BART model)"),$Ee.forEach(t),fso=i(M),Kh=n(M,"LI",{});var IEe=s(Kh);Goe=n(IEe,"STRONG",{});var XVr=s(Goe);mso=r(XVr,"beit"),XVr.forEach(t),gso=r(IEe," \u2014 "),fB=n(IEe,"A",{href:!0});var zVr=s(fB);hso=r(zVr,"BeitModel"),zVr.forEach(t),pso=r(IEe," (BEiT model)"),IEe.forEach(t),_so=i(M),Zh=n(M,"LI",{});var qEe=s(Zh);Ooe=n(qEe,"STRONG",{});var QVr=s(Ooe);uso=r(QVr,"bert"),QVr.forEach(t),bso=r(qEe," \u2014 "),mB=n(qEe,"A",{href:!0});var WVr=s(mB);Fso=r(WVr,"BertModel"),WVr.forEach(t),vso=r(qEe," (BERT model)"),qEe.forEach(t),Tso=i(M),ep=n(M,"LI",{});var NEe=s(ep);Voe=n(NEe,"STRONG",{});var HVr=s(Voe);Mso=r(HVr,"bert-generation"),HVr.forEach(t),Eso=r(NEe," \u2014 "),gB=n(NEe,"A",{href:!0});var UVr=s(gB);Cso=r(UVr,"BertGenerationEncoder"),UVr.forEach(t),wso=r(NEe," (Bert Generation model)"),NEe.forEach(t),Aso=i(M),op=n(M,"LI",{});var jEe=s(op);Xoe=n(jEe,"STRONG",{});var JVr=s(Xoe);yso=r(JVr,"big_bird"),JVr.forEach(t),Lso=r(jEe," \u2014 "),hB=n(jEe,"A",{href:!0});var YVr=s(hB);xso=r(YVr,"BigBirdModel"),YVr.forEach(t),kso=r(jEe," (BigBird model)"),jEe.forEach(t),Sso=i(M),rp=n(M,"LI",{});var DEe=s(rp);zoe=n(DEe,"STRONG",{});var KVr=s(zoe);Rso=r(KVr,"bigbird_pegasus"),KVr.forEach(t),Bso=r(DEe," \u2014 "),pB=n(DEe,"A",{href:!0});var ZVr=s(pB);Pso=r(ZVr,"BigBirdPegasusModel"),ZVr.forEach(t),$so=r(DEe," (BigBirdPegasus model)"),DEe.forEach(t),Iso=i(M),tp=n(M,"LI",{});var GEe=s(tp);Qoe=n(GEe,"STRONG",{});var eXr=s(Qoe);qso=r(eXr,"blenderbot"),eXr.forEach(t),Nso=r(GEe," \u2014 "),_B=n(GEe,"A",{href:!0});var oXr=s(_B);jso=r(oXr,"BlenderbotModel"),oXr.forEach(t),Dso=r(GEe," (Blenderbot model)"),GEe.forEach(t),Gso=i(M),ap=n(M,"LI",{});var OEe=s(ap);Woe=n(OEe,"STRONG",{});var rXr=s(Woe);Oso=r(rXr,"blenderbot-small"),rXr.forEach(t),Vso=r(OEe," \u2014 "),uB=n(OEe,"A",{href:!0});var tXr=s(uB);Xso=r(tXr,"BlenderbotSmallModel"),tXr.forEach(t),zso=r(OEe," (BlenderbotSmall model)"),OEe.forEach(t),Qso=i(M),np=n(M,"LI",{});var VEe=s(np);Hoe=n(VEe,"STRONG",{});var aXr=s(Hoe);Wso=r(aXr,"camembert"),aXr.forEach(t),Hso=r(VEe," \u2014 "),bB=n(VEe,"A",{href:!0});var nXr=s(bB);Uso=r(nXr,"CamembertModel"),nXr.forEach(t),Jso=r(VEe," (CamemBERT model)"),VEe.forEach(t),Yso=i(M),sp=n(M,"LI",{});var XEe=s(sp);Uoe=n(XEe,"STRONG",{});var sXr=s(Uoe);Kso=r(sXr,"canine"),sXr.forEach(t),Zso=r(XEe," \u2014 "),FB=n(XEe,"A",{href:!0});var lXr=s(FB);elo=r(lXr,"CanineModel"),lXr.forEach(t),olo=r(XEe," (Canine model)"),XEe.forEach(t),rlo=i(M),lp=n(M,"LI",{});var zEe=s(lp);Joe=n(zEe,"STRONG",{});var iXr=s(Joe);tlo=r(iXr,"clip"),iXr.forEach(t),alo=r(zEe," \u2014 "),vB=n(zEe,"A",{href:!0});var dXr=s(vB);nlo=r(dXr,"CLIPModel"),dXr.forEach(t),slo=r(zEe," (CLIP model)"),zEe.forEach(t),llo=i(M),ip=n(M,"LI",{});var QEe=s(ip);Yoe=n(QEe,"STRONG",{});var cXr=s(Yoe);ilo=r(cXr,"convbert"),cXr.forEach(t),dlo=r(QEe," \u2014 "),TB=n(QEe,"A",{href:!0});var fXr=s(TB);clo=r(fXr,"ConvBertModel"),fXr.forEach(t),flo=r(QEe," (ConvBERT model)"),QEe.forEach(t),mlo=i(M),dp=n(M,"LI",{});var WEe=s(dp);Koe=n(WEe,"STRONG",{});var mXr=s(Koe);glo=r(mXr,"convnext"),mXr.forEach(t),hlo=r(WEe," \u2014 "),MB=n(WEe,"A",{href:!0});var gXr=s(MB);plo=r(gXr,"ConvNextModel"),gXr.forEach(t),_lo=r(WEe," (ConvNext model)"),WEe.forEach(t),ulo=i(M),cp=n(M,"LI",{});var HEe=s(cp);Zoe=n(HEe,"STRONG",{});var hXr=s(Zoe);blo=r(hXr,"ctrl"),hXr.forEach(t),Flo=r(HEe," \u2014 "),EB=n(HEe,"A",{href:!0});var pXr=s(EB);vlo=r(pXr,"CTRLModel"),pXr.forEach(t),Tlo=r(HEe," (CTRL model)"),HEe.forEach(t),Mlo=i(M),fp=n(M,"LI",{});var UEe=s(fp);ere=n(UEe,"STRONG",{});var _Xr=s(ere);Elo=r(_Xr,"data2vec-audio"),_Xr.forEach(t),Clo=r(UEe," \u2014 "),CB=n(UEe,"A",{href:!0});var uXr=s(CB);wlo=r(uXr,"Data2VecAudioModel"),uXr.forEach(t),Alo=r(UEe," (Data2VecAudio model)"),UEe.forEach(t),ylo=i(M),mp=n(M,"LI",{});var JEe=s(mp);ore=n(JEe,"STRONG",{});var bXr=s(ore);Llo=r(bXr,"data2vec-text"),bXr.forEach(t),xlo=r(JEe," \u2014 "),wB=n(JEe,"A",{href:!0});var FXr=s(wB);klo=r(FXr,"Data2VecTextModel"),FXr.forEach(t),Slo=r(JEe," (Data2VecText model)"),JEe.forEach(t),Rlo=i(M),gp=n(M,"LI",{});var YEe=s(gp);rre=n(YEe,"STRONG",{});var vXr=s(rre);Blo=r(vXr,"deberta"),vXr.forEach(t),Plo=r(YEe," \u2014 "),AB=n(YEe,"A",{href:!0});var TXr=s(AB);$lo=r(TXr,"DebertaModel"),TXr.forEach(t),Ilo=r(YEe," (DeBERTa model)"),YEe.forEach(t),qlo=i(M),hp=n(M,"LI",{});var KEe=s(hp);tre=n(KEe,"STRONG",{});var MXr=s(tre);Nlo=r(MXr,"deberta-v2"),MXr.forEach(t),jlo=r(KEe," \u2014 "),yB=n(KEe,"A",{href:!0});var EXr=s(yB);Dlo=r(EXr,"DebertaV2Model"),EXr.forEach(t),Glo=r(KEe," (DeBERTa-v2 model)"),KEe.forEach(t),Olo=i(M),pp=n(M,"LI",{});var ZEe=s(pp);are=n(ZEe,"STRONG",{});var CXr=s(are);Vlo=r(CXr,"decision_transformer"),CXr.forEach(t),Xlo=r(ZEe," \u2014 "),LB=n(ZEe,"A",{href:!0});var wXr=s(LB);zlo=r(wXr,"DecisionTransformerModel"),wXr.forEach(t),Qlo=r(ZEe," (Decision Transformer model)"),ZEe.forEach(t),Wlo=i(M),_p=n(M,"LI",{});var eCe=s(_p);nre=n(eCe,"STRONG",{});var AXr=s(nre);Hlo=r(AXr,"deit"),AXr.forEach(t),Ulo=r(eCe," \u2014 "),xB=n(eCe,"A",{href:!0});var yXr=s(xB);Jlo=r(yXr,"DeiTModel"),yXr.forEach(t),Ylo=r(eCe," (DeiT model)"),eCe.forEach(t),Klo=i(M),up=n(M,"LI",{});var oCe=s(up);sre=n(oCe,"STRONG",{});var LXr=s(sre);Zlo=r(LXr,"detr"),LXr.forEach(t),eio=r(oCe," \u2014 "),kB=n(oCe,"A",{href:!0});var xXr=s(kB);oio=r(xXr,"DetrModel"),xXr.forEach(t),rio=r(oCe," (DETR model)"),oCe.forEach(t),tio=i(M),bp=n(M,"LI",{});var rCe=s(bp);lre=n(rCe,"STRONG",{});var kXr=s(lre);aio=r(kXr,"distilbert"),kXr.forEach(t),nio=r(rCe," \u2014 "),SB=n(rCe,"A",{href:!0});var SXr=s(SB);sio=r(SXr,"DistilBertModel"),SXr.forEach(t),lio=r(rCe," (DistilBERT model)"),rCe.forEach(t),iio=i(M),Fp=n(M,"LI",{});var tCe=s(Fp);ire=n(tCe,"STRONG",{});var RXr=s(ire);dio=r(RXr,"dpr"),RXr.forEach(t),cio=r(tCe," \u2014 "),RB=n(tCe,"A",{href:!0});var BXr=s(RB);fio=r(BXr,"DPRQuestionEncoder"),BXr.forEach(t),mio=r(tCe," (DPR model)"),tCe.forEach(t),gio=i(M),vp=n(M,"LI",{});var aCe=s(vp);dre=n(aCe,"STRONG",{});var PXr=s(dre);hio=r(PXr,"dpt"),PXr.forEach(t),pio=r(aCe," \u2014 "),BB=n(aCe,"A",{href:!0});var $Xr=s(BB);_io=r($Xr,"DPTModel"),$Xr.forEach(t),uio=r(aCe," (DPT model)"),aCe.forEach(t),bio=i(M),Tp=n(M,"LI",{});var nCe=s(Tp);cre=n(nCe,"STRONG",{});var IXr=s(cre);Fio=r(IXr,"electra"),IXr.forEach(t),vio=r(nCe," \u2014 "),PB=n(nCe,"A",{href:!0});var qXr=s(PB);Tio=r(qXr,"ElectraModel"),qXr.forEach(t),Mio=r(nCe," (ELECTRA model)"),nCe.forEach(t),Eio=i(M),Mp=n(M,"LI",{});var sCe=s(Mp);fre=n(sCe,"STRONG",{});var NXr=s(fre);Cio=r(NXr,"flaubert"),NXr.forEach(t),wio=r(sCe," \u2014 "),$B=n(sCe,"A",{href:!0});var jXr=s($B);Aio=r(jXr,"FlaubertModel"),jXr.forEach(t),yio=r(sCe," (FlauBERT model)"),sCe.forEach(t),Lio=i(M),Ep=n(M,"LI",{});var lCe=s(Ep);mre=n(lCe,"STRONG",{});var DXr=s(mre);xio=r(DXr,"fnet"),DXr.forEach(t),kio=r(lCe," \u2014 "),IB=n(lCe,"A",{href:!0});var GXr=s(IB);Sio=r(GXr,"FNetModel"),GXr.forEach(t),Rio=r(lCe," (FNet model)"),lCe.forEach(t),Bio=i(M),Cp=n(M,"LI",{});var iCe=s(Cp);gre=n(iCe,"STRONG",{});var OXr=s(gre);Pio=r(OXr,"fsmt"),OXr.forEach(t),$io=r(iCe," \u2014 "),qB=n(iCe,"A",{href:!0});var VXr=s(qB);Iio=r(VXr,"FSMTModel"),VXr.forEach(t),qio=r(iCe," (FairSeq Machine-Translation model)"),iCe.forEach(t),Nio=i(M),js=n(M,"LI",{});var m9=s(js);hre=n(m9,"STRONG",{});var XXr=s(hre);jio=r(XXr,"funnel"),XXr.forEach(t),Dio=r(m9," \u2014 "),NB=n(m9,"A",{href:!0});var zXr=s(NB);Gio=r(zXr,"FunnelModel"),zXr.forEach(t),Oio=r(m9," or "),jB=n(m9,"A",{href:!0});var QXr=s(jB);Vio=r(QXr,"FunnelBaseModel"),QXr.forEach(t),Xio=r(m9," (Funnel Transformer model)"),m9.forEach(t),zio=i(M),wp=n(M,"LI",{});var dCe=s(wp);pre=n(dCe,"STRONG",{});var WXr=s(pre);Qio=r(WXr,"glpn"),WXr.forEach(t),Wio=r(dCe," \u2014 "),DB=n(dCe,"A",{href:!0});var HXr=s(DB);Hio=r(HXr,"GLPNModel"),HXr.forEach(t),Uio=r(dCe," (GLPN model)"),dCe.forEach(t),Jio=i(M),Ap=n(M,"LI",{});var cCe=s(Ap);_re=n(cCe,"STRONG",{});var UXr=s(_re);Yio=r(UXr,"gpt2"),UXr.forEach(t),Kio=r(cCe," \u2014 "),GB=n(cCe,"A",{href:!0});var JXr=s(GB);Zio=r(JXr,"GPT2Model"),JXr.forEach(t),edo=r(cCe," (OpenAI GPT-2 model)"),cCe.forEach(t),odo=i(M),yp=n(M,"LI",{});var fCe=s(yp);ure=n(fCe,"STRONG",{});var YXr=s(ure);rdo=r(YXr,"gpt_neo"),YXr.forEach(t),tdo=r(fCe," \u2014 "),OB=n(fCe,"A",{href:!0});var KXr=s(OB);ado=r(KXr,"GPTNeoModel"),KXr.forEach(t),ndo=r(fCe," (GPT Neo model)"),fCe.forEach(t),sdo=i(M),Lp=n(M,"LI",{});var mCe=s(Lp);bre=n(mCe,"STRONG",{});var ZXr=s(bre);ldo=r(ZXr,"gptj"),ZXr.forEach(t),ido=r(mCe," \u2014 "),VB=n(mCe,"A",{href:!0});var ezr=s(VB);ddo=r(ezr,"GPTJModel"),ezr.forEach(t),cdo=r(mCe," (GPT-J model)"),mCe.forEach(t),fdo=i(M),xp=n(M,"LI",{});var gCe=s(xp);Fre=n(gCe,"STRONG",{});var ozr=s(Fre);mdo=r(ozr,"hubert"),ozr.forEach(t),gdo=r(gCe," \u2014 "),XB=n(gCe,"A",{href:!0});var rzr=s(XB);hdo=r(rzr,"HubertModel"),rzr.forEach(t),pdo=r(gCe," (Hubert model)"),gCe.forEach(t),_do=i(M),kp=n(M,"LI",{});var hCe=s(kp);vre=n(hCe,"STRONG",{});var tzr=s(vre);udo=r(tzr,"ibert"),tzr.forEach(t),bdo=r(hCe," \u2014 "),zB=n(hCe,"A",{href:!0});var azr=s(zB);Fdo=r(azr,"IBertModel"),azr.forEach(t),vdo=r(hCe," (I-BERT model)"),hCe.forEach(t),Tdo=i(M),Sp=n(M,"LI",{});var pCe=s(Sp);Tre=n(pCe,"STRONG",{});var nzr=s(Tre);Mdo=r(nzr,"imagegpt"),nzr.forEach(t),Edo=r(pCe," \u2014 "),QB=n(pCe,"A",{href:!0});var szr=s(QB);Cdo=r(szr,"ImageGPTModel"),szr.forEach(t),wdo=r(pCe," (ImageGPT model)"),pCe.forEach(t),Ado=i(M),Rp=n(M,"LI",{});var _Ce=s(Rp);Mre=n(_Ce,"STRONG",{});var lzr=s(Mre);ydo=r(lzr,"layoutlm"),lzr.forEach(t),Ldo=r(_Ce," \u2014 "),WB=n(_Ce,"A",{href:!0});var izr=s(WB);xdo=r(izr,"LayoutLMModel"),izr.forEach(t),kdo=r(_Ce," (LayoutLM model)"),_Ce.forEach(t),Sdo=i(M),Bp=n(M,"LI",{});var uCe=s(Bp);Ere=n(uCe,"STRONG",{});var dzr=s(Ere);Rdo=r(dzr,"layoutlmv2"),dzr.forEach(t),Bdo=r(uCe," \u2014 "),HB=n(uCe,"A",{href:!0});var czr=s(HB);Pdo=r(czr,"LayoutLMv2Model"),czr.forEach(t),$do=r(uCe," (LayoutLMv2 model)"),uCe.forEach(t),Ido=i(M),Pp=n(M,"LI",{});var bCe=s(Pp);Cre=n(bCe,"STRONG",{});var fzr=s(Cre);qdo=r(fzr,"led"),fzr.forEach(t),Ndo=r(bCe," \u2014 "),UB=n(bCe,"A",{href:!0});var mzr=s(UB);jdo=r(mzr,"LEDModel"),mzr.forEach(t),Ddo=r(bCe," (LED model)"),bCe.forEach(t),Gdo=i(M),$p=n(M,"LI",{});var FCe=s($p);wre=n(FCe,"STRONG",{});var gzr=s(wre);Odo=r(gzr,"longformer"),gzr.forEach(t),Vdo=r(FCe," \u2014 "),JB=n(FCe,"A",{href:!0});var hzr=s(JB);Xdo=r(hzr,"LongformerModel"),hzr.forEach(t),zdo=r(FCe," (Longformer model)"),FCe.forEach(t),Qdo=i(M),Ip=n(M,"LI",{});var vCe=s(Ip);Are=n(vCe,"STRONG",{});var pzr=s(Are);Wdo=r(pzr,"luke"),pzr.forEach(t),Hdo=r(vCe," \u2014 "),YB=n(vCe,"A",{href:!0});var _zr=s(YB);Udo=r(_zr,"LukeModel"),_zr.forEach(t),Jdo=r(vCe," (LUKE model)"),vCe.forEach(t),Ydo=i(M),qp=n(M,"LI",{});var TCe=s(qp);yre=n(TCe,"STRONG",{});var uzr=s(yre);Kdo=r(uzr,"lxmert"),uzr.forEach(t),Zdo=r(TCe," \u2014 "),KB=n(TCe,"A",{href:!0});var bzr=s(KB);eco=r(bzr,"LxmertModel"),bzr.forEach(t),oco=r(TCe," (LXMERT model)"),TCe.forEach(t),rco=i(M),Np=n(M,"LI",{});var MCe=s(Np);Lre=n(MCe,"STRONG",{});var Fzr=s(Lre);tco=r(Fzr,"m2m_100"),Fzr.forEach(t),aco=r(MCe," \u2014 "),ZB=n(MCe,"A",{href:!0});var vzr=s(ZB);nco=r(vzr,"M2M100Model"),vzr.forEach(t),sco=r(MCe," (M2M100 model)"),MCe.forEach(t),lco=i(M),jp=n(M,"LI",{});var ECe=s(jp);xre=n(ECe,"STRONG",{});var Tzr=s(xre);ico=r(Tzr,"marian"),Tzr.forEach(t),dco=r(ECe," \u2014 "),eP=n(ECe,"A",{href:!0});var Mzr=s(eP);cco=r(Mzr,"MarianModel"),Mzr.forEach(t),fco=r(ECe," (Marian model)"),ECe.forEach(t),mco=i(M),Dp=n(M,"LI",{});var CCe=s(Dp);kre=n(CCe,"STRONG",{});var Ezr=s(kre);gco=r(Ezr,"maskformer"),Ezr.forEach(t),hco=r(CCe," \u2014 "),oP=n(CCe,"A",{href:!0});var Czr=s(oP);pco=r(Czr,"MaskFormerModel"),Czr.forEach(t),_co=r(CCe," (MaskFormer model)"),CCe.forEach(t),uco=i(M),Gp=n(M,"LI",{});var wCe=s(Gp);Sre=n(wCe,"STRONG",{});var wzr=s(Sre);bco=r(wzr,"mbart"),wzr.forEach(t),Fco=r(wCe," \u2014 "),rP=n(wCe,"A",{href:!0});var Azr=s(rP);vco=r(Azr,"MBartModel"),Azr.forEach(t),Tco=r(wCe," (mBART model)"),wCe.forEach(t),Mco=i(M),Op=n(M,"LI",{});var ACe=s(Op);Rre=n(ACe,"STRONG",{});var yzr=s(Rre);Eco=r(yzr,"megatron-bert"),yzr.forEach(t),Cco=r(ACe," \u2014 "),tP=n(ACe,"A",{href:!0});var Lzr=s(tP);wco=r(Lzr,"MegatronBertModel"),Lzr.forEach(t),Aco=r(ACe," (MegatronBert model)"),ACe.forEach(t),yco=i(M),Vp=n(M,"LI",{});var yCe=s(Vp);Bre=n(yCe,"STRONG",{});var xzr=s(Bre);Lco=r(xzr,"mobilebert"),xzr.forEach(t),xco=r(yCe," \u2014 "),aP=n(yCe,"A",{href:!0});var kzr=s(aP);kco=r(kzr,"MobileBertModel"),kzr.forEach(t),Sco=r(yCe," (MobileBERT model)"),yCe.forEach(t),Rco=i(M),Xp=n(M,"LI",{});var LCe=s(Xp);Pre=n(LCe,"STRONG",{});var Szr=s(Pre);Bco=r(Szr,"mpnet"),Szr.forEach(t),Pco=r(LCe," \u2014 "),nP=n(LCe,"A",{href:!0});var Rzr=s(nP);$co=r(Rzr,"MPNetModel"),Rzr.forEach(t),Ico=r(LCe," (MPNet model)"),LCe.forEach(t),qco=i(M),zp=n(M,"LI",{});var xCe=s(zp);$re=n(xCe,"STRONG",{});var Bzr=s($re);Nco=r(Bzr,"mt5"),Bzr.forEach(t),jco=r(xCe," \u2014 "),sP=n(xCe,"A",{href:!0});var Pzr=s(sP);Dco=r(Pzr,"MT5Model"),Pzr.forEach(t),Gco=r(xCe," (mT5 model)"),xCe.forEach(t),Oco=i(M),Qp=n(M,"LI",{});var kCe=s(Qp);Ire=n(kCe,"STRONG",{});var $zr=s(Ire);Vco=r($zr,"nystromformer"),$zr.forEach(t),Xco=r(kCe," \u2014 "),lP=n(kCe,"A",{href:!0});var Izr=s(lP);zco=r(Izr,"NystromformerModel"),Izr.forEach(t),Qco=r(kCe," (Nystromformer model)"),kCe.forEach(t),Wco=i(M),Wp=n(M,"LI",{});var SCe=s(Wp);qre=n(SCe,"STRONG",{});var qzr=s(qre);Hco=r(qzr,"openai-gpt"),qzr.forEach(t),Uco=r(SCe," \u2014 "),iP=n(SCe,"A",{href:!0});var Nzr=s(iP);Jco=r(Nzr,"OpenAIGPTModel"),Nzr.forEach(t),Yco=r(SCe," (OpenAI GPT model)"),SCe.forEach(t),Kco=i(M),Hp=n(M,"LI",{});var RCe=s(Hp);Nre=n(RCe,"STRONG",{});var jzr=s(Nre);Zco=r(jzr,"pegasus"),jzr.forEach(t),efo=r(RCe," \u2014 "),dP=n(RCe,"A",{href:!0});var Dzr=s(dP);ofo=r(Dzr,"PegasusModel"),Dzr.forEach(t),rfo=r(RCe," (Pegasus model)"),RCe.forEach(t),tfo=i(M),Up=n(M,"LI",{});var BCe=s(Up);jre=n(BCe,"STRONG",{});var Gzr=s(jre);afo=r(Gzr,"perceiver"),Gzr.forEach(t),nfo=r(BCe," \u2014 "),cP=n(BCe,"A",{href:!0});var Ozr=s(cP);sfo=r(Ozr,"PerceiverModel"),Ozr.forEach(t),lfo=r(BCe," (Perceiver model)"),BCe.forEach(t),ifo=i(M),Jp=n(M,"LI",{});var PCe=s(Jp);Dre=n(PCe,"STRONG",{});var Vzr=s(Dre);dfo=r(Vzr,"plbart"),Vzr.forEach(t),cfo=r(PCe," \u2014 "),fP=n(PCe,"A",{href:!0});var Xzr=s(fP);ffo=r(Xzr,"PLBartModel"),Xzr.forEach(t),mfo=r(PCe," (PLBart model)"),PCe.forEach(t),gfo=i(M),Yp=n(M,"LI",{});var $Ce=s(Yp);Gre=n($Ce,"STRONG",{});var zzr=s(Gre);hfo=r(zzr,"poolformer"),zzr.forEach(t),pfo=r($Ce," \u2014 "),mP=n($Ce,"A",{href:!0});var Qzr=s(mP);_fo=r(Qzr,"PoolFormerModel"),Qzr.forEach(t),ufo=r($Ce," (PoolFormer model)"),$Ce.forEach(t),bfo=i(M),Kp=n(M,"LI",{});var ICe=s(Kp);Ore=n(ICe,"STRONG",{});var Wzr=s(Ore);Ffo=r(Wzr,"prophetnet"),Wzr.forEach(t),vfo=r(ICe," \u2014 "),gP=n(ICe,"A",{href:!0});var Hzr=s(gP);Tfo=r(Hzr,"ProphetNetModel"),Hzr.forEach(t),Mfo=r(ICe," (ProphetNet model)"),ICe.forEach(t),Efo=i(M),Zp=n(M,"LI",{});var qCe=s(Zp);Vre=n(qCe,"STRONG",{});var Uzr=s(Vre);Cfo=r(Uzr,"qdqbert"),Uzr.forEach(t),wfo=r(qCe," \u2014 "),hP=n(qCe,"A",{href:!0});var Jzr=s(hP);Afo=r(Jzr,"QDQBertModel"),Jzr.forEach(t),yfo=r(qCe," (QDQBert model)"),qCe.forEach(t),Lfo=i(M),e_=n(M,"LI",{});var NCe=s(e_);Xre=n(NCe,"STRONG",{});var Yzr=s(Xre);xfo=r(Yzr,"reformer"),Yzr.forEach(t),kfo=r(NCe," \u2014 "),pP=n(NCe,"A",{href:!0});var Kzr=s(pP);Sfo=r(Kzr,"ReformerModel"),Kzr.forEach(t),Rfo=r(NCe," (Reformer model)"),NCe.forEach(t),Bfo=i(M),o_=n(M,"LI",{});var jCe=s(o_);zre=n(jCe,"STRONG",{});var Zzr=s(zre);Pfo=r(Zzr,"regnet"),Zzr.forEach(t),$fo=r(jCe," \u2014 "),_P=n(jCe,"A",{href:!0});var eQr=s(_P);Ifo=r(eQr,"RegNetModel"),eQr.forEach(t),qfo=r(jCe," (RegNet model)"),jCe.forEach(t),Nfo=i(M),r_=n(M,"LI",{});var DCe=s(r_);Qre=n(DCe,"STRONG",{});var oQr=s(Qre);jfo=r(oQr,"rembert"),oQr.forEach(t),Dfo=r(DCe," \u2014 "),uP=n(DCe,"A",{href:!0});var rQr=s(uP);Gfo=r(rQr,"RemBertModel"),rQr.forEach(t),Ofo=r(DCe," (RemBERT model)"),DCe.forEach(t),Vfo=i(M),t_=n(M,"LI",{});var GCe=s(t_);Wre=n(GCe,"STRONG",{});var tQr=s(Wre);Xfo=r(tQr,"resnet"),tQr.forEach(t),zfo=r(GCe," \u2014 "),bP=n(GCe,"A",{href:!0});var aQr=s(bP);Qfo=r(aQr,"ResNetModel"),aQr.forEach(t),Wfo=r(GCe," (ResNet model)"),GCe.forEach(t),Hfo=i(M),a_=n(M,"LI",{});var OCe=s(a_);Hre=n(OCe,"STRONG",{});var nQr=s(Hre);Ufo=r(nQr,"retribert"),nQr.forEach(t),Jfo=r(OCe," \u2014 "),FP=n(OCe,"A",{href:!0});var sQr=s(FP);Yfo=r(sQr,"RetriBertModel"),sQr.forEach(t),Kfo=r(OCe," (RetriBERT model)"),OCe.forEach(t),Zfo=i(M),n_=n(M,"LI",{});var VCe=s(n_);Ure=n(VCe,"STRONG",{});var lQr=s(Ure);emo=r(lQr,"roberta"),lQr.forEach(t),omo=r(VCe," \u2014 "),vP=n(VCe,"A",{href:!0});var iQr=s(vP);rmo=r(iQr,"RobertaModel"),iQr.forEach(t),tmo=r(VCe," (RoBERTa model)"),VCe.forEach(t),amo=i(M),s_=n(M,"LI",{});var XCe=s(s_);Jre=n(XCe,"STRONG",{});var dQr=s(Jre);nmo=r(dQr,"roformer"),dQr.forEach(t),smo=r(XCe," \u2014 "),TP=n(XCe,"A",{href:!0});var cQr=s(TP);lmo=r(cQr,"RoFormerModel"),cQr.forEach(t),imo=r(XCe," (RoFormer model)"),XCe.forEach(t),dmo=i(M),l_=n(M,"LI",{});var zCe=s(l_);Yre=n(zCe,"STRONG",{});var fQr=s(Yre);cmo=r(fQr,"segformer"),fQr.forEach(t),fmo=r(zCe," \u2014 "),MP=n(zCe,"A",{href:!0});var mQr=s(MP);mmo=r(mQr,"SegformerModel"),mQr.forEach(t),gmo=r(zCe," (SegFormer model)"),zCe.forEach(t),hmo=i(M),i_=n(M,"LI",{});var QCe=s(i_);Kre=n(QCe,"STRONG",{});var gQr=s(Kre);pmo=r(gQr,"sew"),gQr.forEach(t),_mo=r(QCe," \u2014 "),EP=n(QCe,"A",{href:!0});var hQr=s(EP);umo=r(hQr,"SEWModel"),hQr.forEach(t),bmo=r(QCe," (SEW model)"),QCe.forEach(t),Fmo=i(M),d_=n(M,"LI",{});var WCe=s(d_);Zre=n(WCe,"STRONG",{});var pQr=s(Zre);vmo=r(pQr,"sew-d"),pQr.forEach(t),Tmo=r(WCe," \u2014 "),CP=n(WCe,"A",{href:!0});var _Qr=s(CP);Mmo=r(_Qr,"SEWDModel"),_Qr.forEach(t),Emo=r(WCe," (SEW-D model)"),WCe.forEach(t),Cmo=i(M),c_=n(M,"LI",{});var HCe=s(c_);ete=n(HCe,"STRONG",{});var uQr=s(ete);wmo=r(uQr,"speech_to_text"),uQr.forEach(t),Amo=r(HCe," \u2014 "),wP=n(HCe,"A",{href:!0});var bQr=s(wP);ymo=r(bQr,"Speech2TextModel"),bQr.forEach(t),Lmo=r(HCe," (Speech2Text model)"),HCe.forEach(t),xmo=i(M),f_=n(M,"LI",{});var UCe=s(f_);ote=n(UCe,"STRONG",{});var FQr=s(ote);kmo=r(FQr,"splinter"),FQr.forEach(t),Smo=r(UCe," \u2014 "),AP=n(UCe,"A",{href:!0});var vQr=s(AP);Rmo=r(vQr,"SplinterModel"),vQr.forEach(t),Bmo=r(UCe," (Splinter model)"),UCe.forEach(t),Pmo=i(M),m_=n(M,"LI",{});var JCe=s(m_);rte=n(JCe,"STRONG",{});var TQr=s(rte);$mo=r(TQr,"squeezebert"),TQr.forEach(t),Imo=r(JCe," \u2014 "),yP=n(JCe,"A",{href:!0});var MQr=s(yP);qmo=r(MQr,"SqueezeBertModel"),MQr.forEach(t),Nmo=r(JCe," (SqueezeBERT model)"),JCe.forEach(t),jmo=i(M),g_=n(M,"LI",{});var YCe=s(g_);tte=n(YCe,"STRONG",{});var EQr=s(tte);Dmo=r(EQr,"swin"),EQr.forEach(t),Gmo=r(YCe," \u2014 "),LP=n(YCe,"A",{href:!0});var CQr=s(LP);Omo=r(CQr,"SwinModel"),CQr.forEach(t),Vmo=r(YCe," (Swin model)"),YCe.forEach(t),Xmo=i(M),h_=n(M,"LI",{});var KCe=s(h_);ate=n(KCe,"STRONG",{});var wQr=s(ate);zmo=r(wQr,"t5"),wQr.forEach(t),Qmo=r(KCe," \u2014 "),xP=n(KCe,"A",{href:!0});var AQr=s(xP);Wmo=r(AQr,"T5Model"),AQr.forEach(t),Hmo=r(KCe," (T5 model)"),KCe.forEach(t),Umo=i(M),p_=n(M,"LI",{});var ZCe=s(p_);nte=n(ZCe,"STRONG",{});var yQr=s(nte);Jmo=r(yQr,"tapas"),yQr.forEach(t),Ymo=r(ZCe," \u2014 "),kP=n(ZCe,"A",{href:!0});var LQr=s(kP);Kmo=r(LQr,"TapasModel"),LQr.forEach(t),Zmo=r(ZCe," (TAPAS model)"),ZCe.forEach(t),ego=i(M),__=n(M,"LI",{});var e3e=s(__);ste=n(e3e,"STRONG",{});var xQr=s(ste);ogo=r(xQr,"transfo-xl"),xQr.forEach(t),rgo=r(e3e," \u2014 "),SP=n(e3e,"A",{href:!0});var kQr=s(SP);tgo=r(kQr,"TransfoXLModel"),kQr.forEach(t),ago=r(e3e," (Transformer-XL model)"),e3e.forEach(t),ngo=i(M),u_=n(M,"LI",{});var o3e=s(u_);lte=n(o3e,"STRONG",{});var SQr=s(lte);sgo=r(SQr,"unispeech"),SQr.forEach(t),lgo=r(o3e," \u2014 "),RP=n(o3e,"A",{href:!0});var RQr=s(RP);igo=r(RQr,"UniSpeechModel"),RQr.forEach(t),dgo=r(o3e," (UniSpeech model)"),o3e.forEach(t),cgo=i(M),b_=n(M,"LI",{});var r3e=s(b_);ite=n(r3e,"STRONG",{});var BQr=s(ite);fgo=r(BQr,"unispeech-sat"),BQr.forEach(t),mgo=r(r3e," \u2014 "),BP=n(r3e,"A",{href:!0});var PQr=s(BP);ggo=r(PQr,"UniSpeechSatModel"),PQr.forEach(t),hgo=r(r3e," (UniSpeechSat model)"),r3e.forEach(t),pgo=i(M),F_=n(M,"LI",{});var t3e=s(F_);dte=n(t3e,"STRONG",{});var $Qr=s(dte);_go=r($Qr,"van"),$Qr.forEach(t),ugo=r(t3e," \u2014 "),PP=n(t3e,"A",{href:!0});var IQr=s(PP);bgo=r(IQr,"VanModel"),IQr.forEach(t),Fgo=r(t3e," (VAN model)"),t3e.forEach(t),vgo=i(M),v_=n(M,"LI",{});var a3e=s(v_);cte=n(a3e,"STRONG",{});var qQr=s(cte);Tgo=r(qQr,"vilt"),qQr.forEach(t),Mgo=r(a3e," \u2014 "),$P=n(a3e,"A",{href:!0});var NQr=s($P);Ego=r(NQr,"ViltModel"),NQr.forEach(t),Cgo=r(a3e," (ViLT model)"),a3e.forEach(t),wgo=i(M),T_=n(M,"LI",{});var n3e=s(T_);fte=n(n3e,"STRONG",{});var jQr=s(fte);Ago=r(jQr,"vision-text-dual-encoder"),jQr.forEach(t),ygo=r(n3e," \u2014 "),IP=n(n3e,"A",{href:!0});var DQr=s(IP);Lgo=r(DQr,"VisionTextDualEncoderModel"),DQr.forEach(t),xgo=r(n3e," (VisionTextDualEncoder model)"),n3e.forEach(t),kgo=i(M),M_=n(M,"LI",{});var s3e=s(M_);mte=n(s3e,"STRONG",{});var GQr=s(mte);Sgo=r(GQr,"visual_bert"),GQr.forEach(t),Rgo=r(s3e," \u2014 "),qP=n(s3e,"A",{href:!0});var OQr=s(qP);Bgo=r(OQr,"VisualBertModel"),OQr.forEach(t),Pgo=r(s3e," (VisualBert model)"),s3e.forEach(t),$go=i(M),E_=n(M,"LI",{});var l3e=s(E_);gte=n(l3e,"STRONG",{});var VQr=s(gte);Igo=r(VQr,"vit"),VQr.forEach(t),qgo=r(l3e," \u2014 "),NP=n(l3e,"A",{href:!0});var XQr=s(NP);Ngo=r(XQr,"ViTModel"),XQr.forEach(t),jgo=r(l3e," (ViT model)"),l3e.forEach(t),Dgo=i(M),C_=n(M,"LI",{});var i3e=s(C_);hte=n(i3e,"STRONG",{});var zQr=s(hte);Ggo=r(zQr,"vit_mae"),zQr.forEach(t),Ogo=r(i3e," \u2014 "),jP=n(i3e,"A",{href:!0});var QQr=s(jP);Vgo=r(QQr,"ViTMAEModel"),QQr.forEach(t),Xgo=r(i3e," (ViTMAE model)"),i3e.forEach(t),zgo=i(M),w_=n(M,"LI",{});var d3e=s(w_);pte=n(d3e,"STRONG",{});var WQr=s(pte);Qgo=r(WQr,"wav2vec2"),WQr.forEach(t),Wgo=r(d3e," \u2014 "),DP=n(d3e,"A",{href:!0});var HQr=s(DP);Hgo=r(HQr,"Wav2Vec2Model"),HQr.forEach(t),Ugo=r(d3e," (Wav2Vec2 model)"),d3e.forEach(t),Jgo=i(M),A_=n(M,"LI",{});var c3e=s(A_);_te=n(c3e,"STRONG",{});var UQr=s(_te);Ygo=r(UQr,"wavlm"),UQr.forEach(t),Kgo=r(c3e," \u2014 "),GP=n(c3e,"A",{href:!0});var JQr=s(GP);Zgo=r(JQr,"WavLMModel"),JQr.forEach(t),eho=r(c3e," (WavLM model)"),c3e.forEach(t),oho=i(M),y_=n(M,"LI",{});var f3e=s(y_);ute=n(f3e,"STRONG",{});var YQr=s(ute);rho=r(YQr,"xglm"),YQr.forEach(t),tho=r(f3e," \u2014 "),OP=n(f3e,"A",{href:!0});var KQr=s(OP);aho=r(KQr,"XGLMModel"),KQr.forEach(t),nho=r(f3e," (XGLM model)"),f3e.forEach(t),sho=i(M),L_=n(M,"LI",{});var m3e=s(L_);bte=n(m3e,"STRONG",{});var ZQr=s(bte);lho=r(ZQr,"xlm"),ZQr.forEach(t),iho=r(m3e," \u2014 "),VP=n(m3e,"A",{href:!0});var eWr=s(VP);dho=r(eWr,"XLMModel"),eWr.forEach(t),cho=r(m3e," (XLM model)"),m3e.forEach(t),fho=i(M),x_=n(M,"LI",{});var g3e=s(x_);Fte=n(g3e,"STRONG",{});var oWr=s(Fte);mho=r(oWr,"xlm-prophetnet"),oWr.forEach(t),gho=r(g3e," \u2014 "),XP=n(g3e,"A",{href:!0});var rWr=s(XP);hho=r(rWr,"XLMProphetNetModel"),rWr.forEach(t),pho=r(g3e," (XLMProphetNet model)"),g3e.forEach(t),_ho=i(M),k_=n(M,"LI",{});var h3e=s(k_);vte=n(h3e,"STRONG",{});var tWr=s(vte);uho=r(tWr,"xlm-roberta"),tWr.forEach(t),bho=r(h3e," \u2014 "),zP=n(h3e,"A",{href:!0});var aWr=s(zP);Fho=r(aWr,"XLMRobertaModel"),aWr.forEach(t),vho=r(h3e," (XLM-RoBERTa model)"),h3e.forEach(t),Tho=i(M),S_=n(M,"LI",{});var p3e=s(S_);Tte=n(p3e,"STRONG",{});var nWr=s(Tte);Mho=r(nWr,"xlm-roberta-xl"),nWr.forEach(t),Eho=r(p3e," \u2014 "),QP=n(p3e,"A",{href:!0});var sWr=s(QP);Cho=r(sWr,"XLMRobertaXLModel"),sWr.forEach(t),who=r(p3e," (XLM-RoBERTa-XL model)"),p3e.forEach(t),Aho=i(M),R_=n(M,"LI",{});var _3e=s(R_);Mte=n(_3e,"STRONG",{});var lWr=s(Mte);yho=r(lWr,"xlnet"),lWr.forEach(t),Lho=r(_3e," \u2014 "),WP=n(_3e,"A",{href:!0});var iWr=s(WP);xho=r(iWr,"XLNetModel"),iWr.forEach(t),kho=r(_3e," (XLNet model)"),_3e.forEach(t),Sho=i(M),B_=n(M,"LI",{});var u3e=s(B_);Ete=n(u3e,"STRONG",{});var dWr=s(Ete);Rho=r(dWr,"yoso"),dWr.forEach(t),Bho=r(u3e," \u2014 "),HP=n(u3e,"A",{href:!0});var cWr=s(HP);Pho=r(cWr,"YosoModel"),cWr.forEach(t),$ho=r(u3e," (YOSO model)"),u3e.forEach(t),M.forEach(t),Iho=i(Dt),P_=n(Dt,"P",{});var b3e=s(P_);qho=r(b3e,"The model is set in evaluation mode by default using "),Cte=n(b3e,"CODE",{});var fWr=s(Cte);Nho=r(fWr,"model.eval()"),fWr.forEach(t),jho=r(b3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wte=n(b3e,"CODE",{});var mWr=s(wte);Dho=r(mWr,"model.train()"),mWr.forEach(t),b3e.forEach(t),Gho=i(Dt),Ate=n(Dt,"P",{});var gWr=s(Ate);Oho=r(gWr,"Examples:"),gWr.forEach(t),Vho=i(Dt),m(dw.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),kRe=i(c),Zi=n(c,"H2",{class:!0});var jPe=s(Zi);$_=n(jPe,"A",{id:!0,class:!0,href:!0});var hWr=s($_);yte=n(hWr,"SPAN",{});var pWr=s(yte);m(cw.$$.fragment,pWr),pWr.forEach(t),hWr.forEach(t),Xho=i(jPe),Lte=n(jPe,"SPAN",{});var _Wr=s(Lte);zho=r(_Wr,"AutoModelForPreTraining"),_Wr.forEach(t),jPe.forEach(t),SRe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(fw.$$.fragment,Hs),Qho=i(Hs),ed=n(Hs,"P",{});var gU=s(ed);Who=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UP=n(gU,"A",{href:!0});var uWr=s(UP);Hho=r(uWr,"from_pretrained()"),uWr.forEach(t),Uho=r(gU," class method or the "),JP=n(gU,"A",{href:!0});var bWr=s(JP);Jho=r(bWr,"from_config()"),bWr.forEach(t),Yho=r(gU,` class
method.`),gU.forEach(t),Kho=i(Hs),mw=n(Hs,"P",{});var DPe=s(mw);Zho=r(DPe,"This class cannot be instantiated directly using "),xte=n(DPe,"CODE",{});var FWr=s(xte);epo=r(FWr,"__init__()"),FWr.forEach(t),opo=r(DPe," (throws an error)."),DPe.forEach(t),rpo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(gw.$$.fragment,Us),tpo=i(Us),kte=n(Us,"P",{});var vWr=s(kte);apo=r(vWr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vWr.forEach(t),npo=i(Us),od=n(Us,"P",{});var hU=s(od);spo=r(hU,`Note:
Loading a model from its configuration file does `),Ste=n(hU,"STRONG",{});var TWr=s(Ste);lpo=r(TWr,"not"),TWr.forEach(t),ipo=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),YP=n(hU,"A",{href:!0});var MWr=s(YP);dpo=r(MWr,"from_pretrained()"),MWr.forEach(t),cpo=r(hU," to load the model weights."),hU.forEach(t),fpo=i(Us),Rte=n(Us,"P",{});var EWr=s(Rte);mpo=r(EWr,"Examples:"),EWr.forEach(t),gpo=i(Us),m(hw.$$.fragment,Us),Us.forEach(t),hpo=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(pw.$$.fragment,Gt),ppo=i(Gt),Bte=n(Gt,"P",{});var CWr=s(Bte);_po=r(CWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),CWr.forEach(t),upo=i(Gt),za=n(Gt,"P",{});var LC=s(za);bpo=r(LC,"The model class to instantiate is selected based on the "),Pte=n(LC,"CODE",{});var wWr=s(Pte);Fpo=r(wWr,"model_type"),wWr.forEach(t),vpo=r(LC,` property of the config object (either
passed as an argument or loaded from `),$te=n(LC,"CODE",{});var AWr=s($te);Tpo=r(AWr,"pretrained_model_name_or_path"),AWr.forEach(t),Mpo=r(LC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ite=n(LC,"CODE",{});var yWr=s(Ite);Epo=r(yWr,"pretrained_model_name_or_path"),yWr.forEach(t),Cpo=r(LC,":"),LC.forEach(t),wpo=i(Gt),S=n(Gt,"UL",{});var B=s(S);I_=n(B,"LI",{});var F3e=s(I_);qte=n(F3e,"STRONG",{});var LWr=s(qte);Apo=r(LWr,"albert"),LWr.forEach(t),ypo=r(F3e," \u2014 "),KP=n(F3e,"A",{href:!0});var xWr=s(KP);Lpo=r(xWr,"AlbertForPreTraining"),xWr.forEach(t),xpo=r(F3e," (ALBERT model)"),F3e.forEach(t),kpo=i(B),q_=n(B,"LI",{});var v3e=s(q_);Nte=n(v3e,"STRONG",{});var kWr=s(Nte);Spo=r(kWr,"bart"),kWr.forEach(t),Rpo=r(v3e," \u2014 "),ZP=n(v3e,"A",{href:!0});var SWr=s(ZP);Bpo=r(SWr,"BartForConditionalGeneration"),SWr.forEach(t),Ppo=r(v3e," (BART model)"),v3e.forEach(t),$po=i(B),N_=n(B,"LI",{});var T3e=s(N_);jte=n(T3e,"STRONG",{});var RWr=s(jte);Ipo=r(RWr,"bert"),RWr.forEach(t),qpo=r(T3e," \u2014 "),e$=n(T3e,"A",{href:!0});var BWr=s(e$);Npo=r(BWr,"BertForPreTraining"),BWr.forEach(t),jpo=r(T3e," (BERT model)"),T3e.forEach(t),Dpo=i(B),j_=n(B,"LI",{});var M3e=s(j_);Dte=n(M3e,"STRONG",{});var PWr=s(Dte);Gpo=r(PWr,"big_bird"),PWr.forEach(t),Opo=r(M3e," \u2014 "),o$=n(M3e,"A",{href:!0});var $Wr=s(o$);Vpo=r($Wr,"BigBirdForPreTraining"),$Wr.forEach(t),Xpo=r(M3e," (BigBird model)"),M3e.forEach(t),zpo=i(B),D_=n(B,"LI",{});var E3e=s(D_);Gte=n(E3e,"STRONG",{});var IWr=s(Gte);Qpo=r(IWr,"camembert"),IWr.forEach(t),Wpo=r(E3e," \u2014 "),r$=n(E3e,"A",{href:!0});var qWr=s(r$);Hpo=r(qWr,"CamembertForMaskedLM"),qWr.forEach(t),Upo=r(E3e," (CamemBERT model)"),E3e.forEach(t),Jpo=i(B),G_=n(B,"LI",{});var C3e=s(G_);Ote=n(C3e,"STRONG",{});var NWr=s(Ote);Ypo=r(NWr,"ctrl"),NWr.forEach(t),Kpo=r(C3e," \u2014 "),t$=n(C3e,"A",{href:!0});var jWr=s(t$);Zpo=r(jWr,"CTRLLMHeadModel"),jWr.forEach(t),e_o=r(C3e," (CTRL model)"),C3e.forEach(t),o_o=i(B),O_=n(B,"LI",{});var w3e=s(O_);Vte=n(w3e,"STRONG",{});var DWr=s(Vte);r_o=r(DWr,"data2vec-text"),DWr.forEach(t),t_o=r(w3e," \u2014 "),a$=n(w3e,"A",{href:!0});var GWr=s(a$);a_o=r(GWr,"Data2VecTextForMaskedLM"),GWr.forEach(t),n_o=r(w3e," (Data2VecText model)"),w3e.forEach(t),s_o=i(B),V_=n(B,"LI",{});var A3e=s(V_);Xte=n(A3e,"STRONG",{});var OWr=s(Xte);l_o=r(OWr,"deberta"),OWr.forEach(t),i_o=r(A3e," \u2014 "),n$=n(A3e,"A",{href:!0});var VWr=s(n$);d_o=r(VWr,"DebertaForMaskedLM"),VWr.forEach(t),c_o=r(A3e," (DeBERTa model)"),A3e.forEach(t),f_o=i(B),X_=n(B,"LI",{});var y3e=s(X_);zte=n(y3e,"STRONG",{});var XWr=s(zte);m_o=r(XWr,"deberta-v2"),XWr.forEach(t),g_o=r(y3e," \u2014 "),s$=n(y3e,"A",{href:!0});var zWr=s(s$);h_o=r(zWr,"DebertaV2ForMaskedLM"),zWr.forEach(t),p_o=r(y3e," (DeBERTa-v2 model)"),y3e.forEach(t),__o=i(B),z_=n(B,"LI",{});var L3e=s(z_);Qte=n(L3e,"STRONG",{});var QWr=s(Qte);u_o=r(QWr,"distilbert"),QWr.forEach(t),b_o=r(L3e," \u2014 "),l$=n(L3e,"A",{href:!0});var WWr=s(l$);F_o=r(WWr,"DistilBertForMaskedLM"),WWr.forEach(t),v_o=r(L3e," (DistilBERT model)"),L3e.forEach(t),T_o=i(B),Q_=n(B,"LI",{});var x3e=s(Q_);Wte=n(x3e,"STRONG",{});var HWr=s(Wte);M_o=r(HWr,"electra"),HWr.forEach(t),E_o=r(x3e," \u2014 "),i$=n(x3e,"A",{href:!0});var UWr=s(i$);C_o=r(UWr,"ElectraForPreTraining"),UWr.forEach(t),w_o=r(x3e," (ELECTRA model)"),x3e.forEach(t),A_o=i(B),W_=n(B,"LI",{});var k3e=s(W_);Hte=n(k3e,"STRONG",{});var JWr=s(Hte);y_o=r(JWr,"flaubert"),JWr.forEach(t),L_o=r(k3e," \u2014 "),d$=n(k3e,"A",{href:!0});var YWr=s(d$);x_o=r(YWr,"FlaubertWithLMHeadModel"),YWr.forEach(t),k_o=r(k3e," (FlauBERT model)"),k3e.forEach(t),S_o=i(B),H_=n(B,"LI",{});var S3e=s(H_);Ute=n(S3e,"STRONG",{});var KWr=s(Ute);R_o=r(KWr,"fnet"),KWr.forEach(t),B_o=r(S3e," \u2014 "),c$=n(S3e,"A",{href:!0});var ZWr=s(c$);P_o=r(ZWr,"FNetForPreTraining"),ZWr.forEach(t),$_o=r(S3e," (FNet model)"),S3e.forEach(t),I_o=i(B),U_=n(B,"LI",{});var R3e=s(U_);Jte=n(R3e,"STRONG",{});var eHr=s(Jte);q_o=r(eHr,"fsmt"),eHr.forEach(t),N_o=r(R3e," \u2014 "),f$=n(R3e,"A",{href:!0});var oHr=s(f$);j_o=r(oHr,"FSMTForConditionalGeneration"),oHr.forEach(t),D_o=r(R3e," (FairSeq Machine-Translation model)"),R3e.forEach(t),G_o=i(B),J_=n(B,"LI",{});var B3e=s(J_);Yte=n(B3e,"STRONG",{});var rHr=s(Yte);O_o=r(rHr,"funnel"),rHr.forEach(t),V_o=r(B3e," \u2014 "),m$=n(B3e,"A",{href:!0});var tHr=s(m$);X_o=r(tHr,"FunnelForPreTraining"),tHr.forEach(t),z_o=r(B3e," (Funnel Transformer model)"),B3e.forEach(t),Q_o=i(B),Y_=n(B,"LI",{});var P3e=s(Y_);Kte=n(P3e,"STRONG",{});var aHr=s(Kte);W_o=r(aHr,"gpt2"),aHr.forEach(t),H_o=r(P3e," \u2014 "),g$=n(P3e,"A",{href:!0});var nHr=s(g$);U_o=r(nHr,"GPT2LMHeadModel"),nHr.forEach(t),J_o=r(P3e," (OpenAI GPT-2 model)"),P3e.forEach(t),Y_o=i(B),K_=n(B,"LI",{});var $3e=s(K_);Zte=n($3e,"STRONG",{});var sHr=s(Zte);K_o=r(sHr,"ibert"),sHr.forEach(t),Z_o=r($3e," \u2014 "),h$=n($3e,"A",{href:!0});var lHr=s(h$);euo=r(lHr,"IBertForMaskedLM"),lHr.forEach(t),ouo=r($3e," (I-BERT model)"),$3e.forEach(t),ruo=i(B),Z_=n(B,"LI",{});var I3e=s(Z_);eae=n(I3e,"STRONG",{});var iHr=s(eae);tuo=r(iHr,"layoutlm"),iHr.forEach(t),auo=r(I3e," \u2014 "),p$=n(I3e,"A",{href:!0});var dHr=s(p$);nuo=r(dHr,"LayoutLMForMaskedLM"),dHr.forEach(t),suo=r(I3e," (LayoutLM model)"),I3e.forEach(t),luo=i(B),eu=n(B,"LI",{});var q3e=s(eu);oae=n(q3e,"STRONG",{});var cHr=s(oae);iuo=r(cHr,"longformer"),cHr.forEach(t),duo=r(q3e," \u2014 "),_$=n(q3e,"A",{href:!0});var fHr=s(_$);cuo=r(fHr,"LongformerForMaskedLM"),fHr.forEach(t),fuo=r(q3e," (Longformer model)"),q3e.forEach(t),muo=i(B),ou=n(B,"LI",{});var N3e=s(ou);rae=n(N3e,"STRONG",{});var mHr=s(rae);guo=r(mHr,"lxmert"),mHr.forEach(t),huo=r(N3e," \u2014 "),u$=n(N3e,"A",{href:!0});var gHr=s(u$);puo=r(gHr,"LxmertForPreTraining"),gHr.forEach(t),_uo=r(N3e," (LXMERT model)"),N3e.forEach(t),uuo=i(B),ru=n(B,"LI",{});var j3e=s(ru);tae=n(j3e,"STRONG",{});var hHr=s(tae);buo=r(hHr,"megatron-bert"),hHr.forEach(t),Fuo=r(j3e," \u2014 "),b$=n(j3e,"A",{href:!0});var pHr=s(b$);vuo=r(pHr,"MegatronBertForPreTraining"),pHr.forEach(t),Tuo=r(j3e," (MegatronBert model)"),j3e.forEach(t),Muo=i(B),tu=n(B,"LI",{});var D3e=s(tu);aae=n(D3e,"STRONG",{});var _Hr=s(aae);Euo=r(_Hr,"mobilebert"),_Hr.forEach(t),Cuo=r(D3e," \u2014 "),F$=n(D3e,"A",{href:!0});var uHr=s(F$);wuo=r(uHr,"MobileBertForPreTraining"),uHr.forEach(t),Auo=r(D3e," (MobileBERT model)"),D3e.forEach(t),yuo=i(B),au=n(B,"LI",{});var G3e=s(au);nae=n(G3e,"STRONG",{});var bHr=s(nae);Luo=r(bHr,"mpnet"),bHr.forEach(t),xuo=r(G3e," \u2014 "),v$=n(G3e,"A",{href:!0});var FHr=s(v$);kuo=r(FHr,"MPNetForMaskedLM"),FHr.forEach(t),Suo=r(G3e," (MPNet model)"),G3e.forEach(t),Ruo=i(B),nu=n(B,"LI",{});var O3e=s(nu);sae=n(O3e,"STRONG",{});var vHr=s(sae);Buo=r(vHr,"openai-gpt"),vHr.forEach(t),Puo=r(O3e," \u2014 "),T$=n(O3e,"A",{href:!0});var THr=s(T$);$uo=r(THr,"OpenAIGPTLMHeadModel"),THr.forEach(t),Iuo=r(O3e," (OpenAI GPT model)"),O3e.forEach(t),quo=i(B),su=n(B,"LI",{});var V3e=s(su);lae=n(V3e,"STRONG",{});var MHr=s(lae);Nuo=r(MHr,"retribert"),MHr.forEach(t),juo=r(V3e," \u2014 "),M$=n(V3e,"A",{href:!0});var EHr=s(M$);Duo=r(EHr,"RetriBertModel"),EHr.forEach(t),Guo=r(V3e," (RetriBERT model)"),V3e.forEach(t),Ouo=i(B),lu=n(B,"LI",{});var X3e=s(lu);iae=n(X3e,"STRONG",{});var CHr=s(iae);Vuo=r(CHr,"roberta"),CHr.forEach(t),Xuo=r(X3e," \u2014 "),E$=n(X3e,"A",{href:!0});var wHr=s(E$);zuo=r(wHr,"RobertaForMaskedLM"),wHr.forEach(t),Quo=r(X3e," (RoBERTa model)"),X3e.forEach(t),Wuo=i(B),iu=n(B,"LI",{});var z3e=s(iu);dae=n(z3e,"STRONG",{});var AHr=s(dae);Huo=r(AHr,"squeezebert"),AHr.forEach(t),Uuo=r(z3e," \u2014 "),C$=n(z3e,"A",{href:!0});var yHr=s(C$);Juo=r(yHr,"SqueezeBertForMaskedLM"),yHr.forEach(t),Yuo=r(z3e," (SqueezeBERT model)"),z3e.forEach(t),Kuo=i(B),du=n(B,"LI",{});var Q3e=s(du);cae=n(Q3e,"STRONG",{});var LHr=s(cae);Zuo=r(LHr,"t5"),LHr.forEach(t),e2o=r(Q3e," \u2014 "),w$=n(Q3e,"A",{href:!0});var xHr=s(w$);o2o=r(xHr,"T5ForConditionalGeneration"),xHr.forEach(t),r2o=r(Q3e," (T5 model)"),Q3e.forEach(t),t2o=i(B),cu=n(B,"LI",{});var W3e=s(cu);fae=n(W3e,"STRONG",{});var kHr=s(fae);a2o=r(kHr,"tapas"),kHr.forEach(t),n2o=r(W3e," \u2014 "),A$=n(W3e,"A",{href:!0});var SHr=s(A$);s2o=r(SHr,"TapasForMaskedLM"),SHr.forEach(t),l2o=r(W3e," (TAPAS model)"),W3e.forEach(t),i2o=i(B),fu=n(B,"LI",{});var H3e=s(fu);mae=n(H3e,"STRONG",{});var RHr=s(mae);d2o=r(RHr,"transfo-xl"),RHr.forEach(t),c2o=r(H3e," \u2014 "),y$=n(H3e,"A",{href:!0});var BHr=s(y$);f2o=r(BHr,"TransfoXLLMHeadModel"),BHr.forEach(t),m2o=r(H3e," (Transformer-XL model)"),H3e.forEach(t),g2o=i(B),mu=n(B,"LI",{});var U3e=s(mu);gae=n(U3e,"STRONG",{});var PHr=s(gae);h2o=r(PHr,"unispeech"),PHr.forEach(t),p2o=r(U3e," \u2014 "),L$=n(U3e,"A",{href:!0});var $Hr=s(L$);_2o=r($Hr,"UniSpeechForPreTraining"),$Hr.forEach(t),u2o=r(U3e," (UniSpeech model)"),U3e.forEach(t),b2o=i(B),gu=n(B,"LI",{});var J3e=s(gu);hae=n(J3e,"STRONG",{});var IHr=s(hae);F2o=r(IHr,"unispeech-sat"),IHr.forEach(t),v2o=r(J3e," \u2014 "),x$=n(J3e,"A",{href:!0});var qHr=s(x$);T2o=r(qHr,"UniSpeechSatForPreTraining"),qHr.forEach(t),M2o=r(J3e," (UniSpeechSat model)"),J3e.forEach(t),E2o=i(B),hu=n(B,"LI",{});var Y3e=s(hu);pae=n(Y3e,"STRONG",{});var NHr=s(pae);C2o=r(NHr,"visual_bert"),NHr.forEach(t),w2o=r(Y3e," \u2014 "),k$=n(Y3e,"A",{href:!0});var jHr=s(k$);A2o=r(jHr,"VisualBertForPreTraining"),jHr.forEach(t),y2o=r(Y3e," (VisualBert model)"),Y3e.forEach(t),L2o=i(B),pu=n(B,"LI",{});var K3e=s(pu);_ae=n(K3e,"STRONG",{});var DHr=s(_ae);x2o=r(DHr,"vit_mae"),DHr.forEach(t),k2o=r(K3e," \u2014 "),S$=n(K3e,"A",{href:!0});var GHr=s(S$);S2o=r(GHr,"ViTMAEForPreTraining"),GHr.forEach(t),R2o=r(K3e," (ViTMAE model)"),K3e.forEach(t),B2o=i(B),_u=n(B,"LI",{});var Z3e=s(_u);uae=n(Z3e,"STRONG",{});var OHr=s(uae);P2o=r(OHr,"wav2vec2"),OHr.forEach(t),$2o=r(Z3e," \u2014 "),R$=n(Z3e,"A",{href:!0});var VHr=s(R$);I2o=r(VHr,"Wav2Vec2ForPreTraining"),VHr.forEach(t),q2o=r(Z3e," (Wav2Vec2 model)"),Z3e.forEach(t),N2o=i(B),uu=n(B,"LI",{});var ewe=s(uu);bae=n(ewe,"STRONG",{});var XHr=s(bae);j2o=r(XHr,"xlm"),XHr.forEach(t),D2o=r(ewe," \u2014 "),B$=n(ewe,"A",{href:!0});var zHr=s(B$);G2o=r(zHr,"XLMWithLMHeadModel"),zHr.forEach(t),O2o=r(ewe," (XLM model)"),ewe.forEach(t),V2o=i(B),bu=n(B,"LI",{});var owe=s(bu);Fae=n(owe,"STRONG",{});var QHr=s(Fae);X2o=r(QHr,"xlm-roberta"),QHr.forEach(t),z2o=r(owe," \u2014 "),P$=n(owe,"A",{href:!0});var WHr=s(P$);Q2o=r(WHr,"XLMRobertaForMaskedLM"),WHr.forEach(t),W2o=r(owe," (XLM-RoBERTa model)"),owe.forEach(t),H2o=i(B),Fu=n(B,"LI",{});var rwe=s(Fu);vae=n(rwe,"STRONG",{});var HHr=s(vae);U2o=r(HHr,"xlm-roberta-xl"),HHr.forEach(t),J2o=r(rwe," \u2014 "),$$=n(rwe,"A",{href:!0});var UHr=s($$);Y2o=r(UHr,"XLMRobertaXLForMaskedLM"),UHr.forEach(t),K2o=r(rwe," (XLM-RoBERTa-XL model)"),rwe.forEach(t),Z2o=i(B),vu=n(B,"LI",{});var twe=s(vu);Tae=n(twe,"STRONG",{});var JHr=s(Tae);e1o=r(JHr,"xlnet"),JHr.forEach(t),o1o=r(twe," \u2014 "),I$=n(twe,"A",{href:!0});var YHr=s(I$);r1o=r(YHr,"XLNetLMHeadModel"),YHr.forEach(t),t1o=r(twe," (XLNet model)"),twe.forEach(t),B.forEach(t),a1o=i(Gt),Tu=n(Gt,"P",{});var awe=s(Tu);n1o=r(awe,"The model is set in evaluation mode by default using "),Mae=n(awe,"CODE",{});var KHr=s(Mae);s1o=r(KHr,"model.eval()"),KHr.forEach(t),l1o=r(awe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eae=n(awe,"CODE",{});var ZHr=s(Eae);i1o=r(ZHr,"model.train()"),ZHr.forEach(t),awe.forEach(t),d1o=i(Gt),Cae=n(Gt,"P",{});var eUr=s(Cae);c1o=r(eUr,"Examples:"),eUr.forEach(t),f1o=i(Gt),m(_w.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),RRe=i(c),rd=n(c,"H2",{class:!0});var GPe=s(rd);Mu=n(GPe,"A",{id:!0,class:!0,href:!0});var oUr=s(Mu);wae=n(oUr,"SPAN",{});var rUr=s(wae);m(uw.$$.fragment,rUr),rUr.forEach(t),oUr.forEach(t),m1o=i(GPe),Aae=n(GPe,"SPAN",{});var tUr=s(Aae);g1o=r(tUr,"AutoModelForCausalLM"),tUr.forEach(t),GPe.forEach(t),BRe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(bw.$$.fragment,Js),h1o=i(Js),td=n(Js,"P",{});var pU=s(td);p1o=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),q$=n(pU,"A",{href:!0});var aUr=s(q$);_1o=r(aUr,"from_pretrained()"),aUr.forEach(t),u1o=r(pU," class method or the "),N$=n(pU,"A",{href:!0});var nUr=s(N$);b1o=r(nUr,"from_config()"),nUr.forEach(t),F1o=r(pU,` class
method.`),pU.forEach(t),v1o=i(Js),Fw=n(Js,"P",{});var OPe=s(Fw);T1o=r(OPe,"This class cannot be instantiated directly using "),yae=n(OPe,"CODE",{});var sUr=s(yae);M1o=r(sUr,"__init__()"),sUr.forEach(t),E1o=r(OPe," (throws an error)."),OPe.forEach(t),C1o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(vw.$$.fragment,Ys),w1o=i(Ys),Lae=n(Ys,"P",{});var lUr=s(Lae);A1o=r(lUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lUr.forEach(t),y1o=i(Ys),ad=n(Ys,"P",{});var _U=s(ad);L1o=r(_U,`Note:
Loading a model from its configuration file does `),xae=n(_U,"STRONG",{});var iUr=s(xae);x1o=r(iUr,"not"),iUr.forEach(t),k1o=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),j$=n(_U,"A",{href:!0});var dUr=s(j$);S1o=r(dUr,"from_pretrained()"),dUr.forEach(t),R1o=r(_U," to load the model weights."),_U.forEach(t),B1o=i(Ys),kae=n(Ys,"P",{});var cUr=s(kae);P1o=r(cUr,"Examples:"),cUr.forEach(t),$1o=i(Ys),m(Tw.$$.fragment,Ys),Ys.forEach(t),I1o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(Mw.$$.fragment,Ot),q1o=i(Ot),Sae=n(Ot,"P",{});var fUr=s(Sae);N1o=r(fUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fUr.forEach(t),j1o=i(Ot),Qa=n(Ot,"P",{});var xC=s(Qa);D1o=r(xC,"The model class to instantiate is selected based on the "),Rae=n(xC,"CODE",{});var mUr=s(Rae);G1o=r(mUr,"model_type"),mUr.forEach(t),O1o=r(xC,` property of the config object (either
passed as an argument or loaded from `),Bae=n(xC,"CODE",{});var gUr=s(Bae);V1o=r(gUr,"pretrained_model_name_or_path"),gUr.forEach(t),X1o=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pae=n(xC,"CODE",{});var hUr=s(Pae);z1o=r(hUr,"pretrained_model_name_or_path"),hUr.forEach(t),Q1o=r(xC,":"),xC.forEach(t),W1o=i(Ot),$=n(Ot,"UL",{});var q=s($);Eu=n(q,"LI",{});var nwe=s(Eu);$ae=n(nwe,"STRONG",{});var pUr=s($ae);H1o=r(pUr,"bart"),pUr.forEach(t),U1o=r(nwe," \u2014 "),D$=n(nwe,"A",{href:!0});var _Ur=s(D$);J1o=r(_Ur,"BartForCausalLM"),_Ur.forEach(t),Y1o=r(nwe," (BART model)"),nwe.forEach(t),K1o=i(q),Cu=n(q,"LI",{});var swe=s(Cu);Iae=n(swe,"STRONG",{});var uUr=s(Iae);Z1o=r(uUr,"bert"),uUr.forEach(t),ebo=r(swe," \u2014 "),G$=n(swe,"A",{href:!0});var bUr=s(G$);obo=r(bUr,"BertLMHeadModel"),bUr.forEach(t),rbo=r(swe," (BERT model)"),swe.forEach(t),tbo=i(q),wu=n(q,"LI",{});var lwe=s(wu);qae=n(lwe,"STRONG",{});var FUr=s(qae);abo=r(FUr,"bert-generation"),FUr.forEach(t),nbo=r(lwe," \u2014 "),O$=n(lwe,"A",{href:!0});var vUr=s(O$);sbo=r(vUr,"BertGenerationDecoder"),vUr.forEach(t),lbo=r(lwe," (Bert Generation model)"),lwe.forEach(t),ibo=i(q),Au=n(q,"LI",{});var iwe=s(Au);Nae=n(iwe,"STRONG",{});var TUr=s(Nae);dbo=r(TUr,"big_bird"),TUr.forEach(t),cbo=r(iwe," \u2014 "),V$=n(iwe,"A",{href:!0});var MUr=s(V$);fbo=r(MUr,"BigBirdForCausalLM"),MUr.forEach(t),mbo=r(iwe," (BigBird model)"),iwe.forEach(t),gbo=i(q),yu=n(q,"LI",{});var dwe=s(yu);jae=n(dwe,"STRONG",{});var EUr=s(jae);hbo=r(EUr,"bigbird_pegasus"),EUr.forEach(t),pbo=r(dwe," \u2014 "),X$=n(dwe,"A",{href:!0});var CUr=s(X$);_bo=r(CUr,"BigBirdPegasusForCausalLM"),CUr.forEach(t),ubo=r(dwe," (BigBirdPegasus model)"),dwe.forEach(t),bbo=i(q),Lu=n(q,"LI",{});var cwe=s(Lu);Dae=n(cwe,"STRONG",{});var wUr=s(Dae);Fbo=r(wUr,"blenderbot"),wUr.forEach(t),vbo=r(cwe," \u2014 "),z$=n(cwe,"A",{href:!0});var AUr=s(z$);Tbo=r(AUr,"BlenderbotForCausalLM"),AUr.forEach(t),Mbo=r(cwe," (Blenderbot model)"),cwe.forEach(t),Ebo=i(q),xu=n(q,"LI",{});var fwe=s(xu);Gae=n(fwe,"STRONG",{});var yUr=s(Gae);Cbo=r(yUr,"blenderbot-small"),yUr.forEach(t),wbo=r(fwe," \u2014 "),Q$=n(fwe,"A",{href:!0});var LUr=s(Q$);Abo=r(LUr,"BlenderbotSmallForCausalLM"),LUr.forEach(t),ybo=r(fwe," (BlenderbotSmall model)"),fwe.forEach(t),Lbo=i(q),ku=n(q,"LI",{});var mwe=s(ku);Oae=n(mwe,"STRONG",{});var xUr=s(Oae);xbo=r(xUr,"camembert"),xUr.forEach(t),kbo=r(mwe," \u2014 "),W$=n(mwe,"A",{href:!0});var kUr=s(W$);Sbo=r(kUr,"CamembertForCausalLM"),kUr.forEach(t),Rbo=r(mwe," (CamemBERT model)"),mwe.forEach(t),Bbo=i(q),Su=n(q,"LI",{});var gwe=s(Su);Vae=n(gwe,"STRONG",{});var SUr=s(Vae);Pbo=r(SUr,"ctrl"),SUr.forEach(t),$bo=r(gwe," \u2014 "),H$=n(gwe,"A",{href:!0});var RUr=s(H$);Ibo=r(RUr,"CTRLLMHeadModel"),RUr.forEach(t),qbo=r(gwe," (CTRL model)"),gwe.forEach(t),Nbo=i(q),Ru=n(q,"LI",{});var hwe=s(Ru);Xae=n(hwe,"STRONG",{});var BUr=s(Xae);jbo=r(BUr,"data2vec-text"),BUr.forEach(t),Dbo=r(hwe," \u2014 "),U$=n(hwe,"A",{href:!0});var PUr=s(U$);Gbo=r(PUr,"Data2VecTextForCausalLM"),PUr.forEach(t),Obo=r(hwe," (Data2VecText model)"),hwe.forEach(t),Vbo=i(q),Bu=n(q,"LI",{});var pwe=s(Bu);zae=n(pwe,"STRONG",{});var $Ur=s(zae);Xbo=r($Ur,"electra"),$Ur.forEach(t),zbo=r(pwe," \u2014 "),J$=n(pwe,"A",{href:!0});var IUr=s(J$);Qbo=r(IUr,"ElectraForCausalLM"),IUr.forEach(t),Wbo=r(pwe," (ELECTRA model)"),pwe.forEach(t),Hbo=i(q),Pu=n(q,"LI",{});var _we=s(Pu);Qae=n(_we,"STRONG",{});var qUr=s(Qae);Ubo=r(qUr,"gpt2"),qUr.forEach(t),Jbo=r(_we," \u2014 "),Y$=n(_we,"A",{href:!0});var NUr=s(Y$);Ybo=r(NUr,"GPT2LMHeadModel"),NUr.forEach(t),Kbo=r(_we," (OpenAI GPT-2 model)"),_we.forEach(t),Zbo=i(q),$u=n(q,"LI",{});var uwe=s($u);Wae=n(uwe,"STRONG",{});var jUr=s(Wae);e5o=r(jUr,"gpt_neo"),jUr.forEach(t),o5o=r(uwe," \u2014 "),K$=n(uwe,"A",{href:!0});var DUr=s(K$);r5o=r(DUr,"GPTNeoForCausalLM"),DUr.forEach(t),t5o=r(uwe," (GPT Neo model)"),uwe.forEach(t),a5o=i(q),Iu=n(q,"LI",{});var bwe=s(Iu);Hae=n(bwe,"STRONG",{});var GUr=s(Hae);n5o=r(GUr,"gptj"),GUr.forEach(t),s5o=r(bwe," \u2014 "),Z$=n(bwe,"A",{href:!0});var OUr=s(Z$);l5o=r(OUr,"GPTJForCausalLM"),OUr.forEach(t),i5o=r(bwe," (GPT-J model)"),bwe.forEach(t),d5o=i(q),qu=n(q,"LI",{});var Fwe=s(qu);Uae=n(Fwe,"STRONG",{});var VUr=s(Uae);c5o=r(VUr,"marian"),VUr.forEach(t),f5o=r(Fwe," \u2014 "),eI=n(Fwe,"A",{href:!0});var XUr=s(eI);m5o=r(XUr,"MarianForCausalLM"),XUr.forEach(t),g5o=r(Fwe," (Marian model)"),Fwe.forEach(t),h5o=i(q),Nu=n(q,"LI",{});var vwe=s(Nu);Jae=n(vwe,"STRONG",{});var zUr=s(Jae);p5o=r(zUr,"mbart"),zUr.forEach(t),_5o=r(vwe," \u2014 "),oI=n(vwe,"A",{href:!0});var QUr=s(oI);u5o=r(QUr,"MBartForCausalLM"),QUr.forEach(t),b5o=r(vwe," (mBART model)"),vwe.forEach(t),F5o=i(q),ju=n(q,"LI",{});var Twe=s(ju);Yae=n(Twe,"STRONG",{});var WUr=s(Yae);v5o=r(WUr,"megatron-bert"),WUr.forEach(t),T5o=r(Twe," \u2014 "),rI=n(Twe,"A",{href:!0});var HUr=s(rI);M5o=r(HUr,"MegatronBertForCausalLM"),HUr.forEach(t),E5o=r(Twe," (MegatronBert model)"),Twe.forEach(t),C5o=i(q),Du=n(q,"LI",{});var Mwe=s(Du);Kae=n(Mwe,"STRONG",{});var UUr=s(Kae);w5o=r(UUr,"openai-gpt"),UUr.forEach(t),A5o=r(Mwe," \u2014 "),tI=n(Mwe,"A",{href:!0});var JUr=s(tI);y5o=r(JUr,"OpenAIGPTLMHeadModel"),JUr.forEach(t),L5o=r(Mwe," (OpenAI GPT model)"),Mwe.forEach(t),x5o=i(q),Gu=n(q,"LI",{});var Ewe=s(Gu);Zae=n(Ewe,"STRONG",{});var YUr=s(Zae);k5o=r(YUr,"pegasus"),YUr.forEach(t),S5o=r(Ewe," \u2014 "),aI=n(Ewe,"A",{href:!0});var KUr=s(aI);R5o=r(KUr,"PegasusForCausalLM"),KUr.forEach(t),B5o=r(Ewe," (Pegasus model)"),Ewe.forEach(t),P5o=i(q),Ou=n(q,"LI",{});var Cwe=s(Ou);ene=n(Cwe,"STRONG",{});var ZUr=s(ene);$5o=r(ZUr,"plbart"),ZUr.forEach(t),I5o=r(Cwe," \u2014 "),nI=n(Cwe,"A",{href:!0});var eJr=s(nI);q5o=r(eJr,"PLBartForCausalLM"),eJr.forEach(t),N5o=r(Cwe," (PLBart model)"),Cwe.forEach(t),j5o=i(q),Vu=n(q,"LI",{});var wwe=s(Vu);one=n(wwe,"STRONG",{});var oJr=s(one);D5o=r(oJr,"prophetnet"),oJr.forEach(t),G5o=r(wwe," \u2014 "),sI=n(wwe,"A",{href:!0});var rJr=s(sI);O5o=r(rJr,"ProphetNetForCausalLM"),rJr.forEach(t),V5o=r(wwe," (ProphetNet model)"),wwe.forEach(t),X5o=i(q),Xu=n(q,"LI",{});var Awe=s(Xu);rne=n(Awe,"STRONG",{});var tJr=s(rne);z5o=r(tJr,"qdqbert"),tJr.forEach(t),Q5o=r(Awe," \u2014 "),lI=n(Awe,"A",{href:!0});var aJr=s(lI);W5o=r(aJr,"QDQBertLMHeadModel"),aJr.forEach(t),H5o=r(Awe," (QDQBert model)"),Awe.forEach(t),U5o=i(q),zu=n(q,"LI",{});var ywe=s(zu);tne=n(ywe,"STRONG",{});var nJr=s(tne);J5o=r(nJr,"reformer"),nJr.forEach(t),Y5o=r(ywe," \u2014 "),iI=n(ywe,"A",{href:!0});var sJr=s(iI);K5o=r(sJr,"ReformerModelWithLMHead"),sJr.forEach(t),Z5o=r(ywe," (Reformer model)"),ywe.forEach(t),eFo=i(q),Qu=n(q,"LI",{});var Lwe=s(Qu);ane=n(Lwe,"STRONG",{});var lJr=s(ane);oFo=r(lJr,"rembert"),lJr.forEach(t),rFo=r(Lwe," \u2014 "),dI=n(Lwe,"A",{href:!0});var iJr=s(dI);tFo=r(iJr,"RemBertForCausalLM"),iJr.forEach(t),aFo=r(Lwe," (RemBERT model)"),Lwe.forEach(t),nFo=i(q),Wu=n(q,"LI",{});var xwe=s(Wu);nne=n(xwe,"STRONG",{});var dJr=s(nne);sFo=r(dJr,"roberta"),dJr.forEach(t),lFo=r(xwe," \u2014 "),cI=n(xwe,"A",{href:!0});var cJr=s(cI);iFo=r(cJr,"RobertaForCausalLM"),cJr.forEach(t),dFo=r(xwe," (RoBERTa model)"),xwe.forEach(t),cFo=i(q),Hu=n(q,"LI",{});var kwe=s(Hu);sne=n(kwe,"STRONG",{});var fJr=s(sne);fFo=r(fJr,"roformer"),fJr.forEach(t),mFo=r(kwe," \u2014 "),fI=n(kwe,"A",{href:!0});var mJr=s(fI);gFo=r(mJr,"RoFormerForCausalLM"),mJr.forEach(t),hFo=r(kwe," (RoFormer model)"),kwe.forEach(t),pFo=i(q),Uu=n(q,"LI",{});var Swe=s(Uu);lne=n(Swe,"STRONG",{});var gJr=s(lne);_Fo=r(gJr,"speech_to_text_2"),gJr.forEach(t),uFo=r(Swe," \u2014 "),mI=n(Swe,"A",{href:!0});var hJr=s(mI);bFo=r(hJr,"Speech2Text2ForCausalLM"),hJr.forEach(t),FFo=r(Swe," (Speech2Text2 model)"),Swe.forEach(t),vFo=i(q),Ju=n(q,"LI",{});var Rwe=s(Ju);ine=n(Rwe,"STRONG",{});var pJr=s(ine);TFo=r(pJr,"transfo-xl"),pJr.forEach(t),MFo=r(Rwe," \u2014 "),gI=n(Rwe,"A",{href:!0});var _Jr=s(gI);EFo=r(_Jr,"TransfoXLLMHeadModel"),_Jr.forEach(t),CFo=r(Rwe," (Transformer-XL model)"),Rwe.forEach(t),wFo=i(q),Yu=n(q,"LI",{});var Bwe=s(Yu);dne=n(Bwe,"STRONG",{});var uJr=s(dne);AFo=r(uJr,"trocr"),uJr.forEach(t),yFo=r(Bwe," \u2014 "),hI=n(Bwe,"A",{href:!0});var bJr=s(hI);LFo=r(bJr,"TrOCRForCausalLM"),bJr.forEach(t),xFo=r(Bwe," (TrOCR model)"),Bwe.forEach(t),kFo=i(q),Ku=n(q,"LI",{});var Pwe=s(Ku);cne=n(Pwe,"STRONG",{});var FJr=s(cne);SFo=r(FJr,"xglm"),FJr.forEach(t),RFo=r(Pwe," \u2014 "),pI=n(Pwe,"A",{href:!0});var vJr=s(pI);BFo=r(vJr,"XGLMForCausalLM"),vJr.forEach(t),PFo=r(Pwe," (XGLM model)"),Pwe.forEach(t),$Fo=i(q),Zu=n(q,"LI",{});var $we=s(Zu);fne=n($we,"STRONG",{});var TJr=s(fne);IFo=r(TJr,"xlm"),TJr.forEach(t),qFo=r($we," \u2014 "),_I=n($we,"A",{href:!0});var MJr=s(_I);NFo=r(MJr,"XLMWithLMHeadModel"),MJr.forEach(t),jFo=r($we," (XLM model)"),$we.forEach(t),DFo=i(q),e2=n(q,"LI",{});var Iwe=s(e2);mne=n(Iwe,"STRONG",{});var EJr=s(mne);GFo=r(EJr,"xlm-prophetnet"),EJr.forEach(t),OFo=r(Iwe," \u2014 "),uI=n(Iwe,"A",{href:!0});var CJr=s(uI);VFo=r(CJr,"XLMProphetNetForCausalLM"),CJr.forEach(t),XFo=r(Iwe," (XLMProphetNet model)"),Iwe.forEach(t),zFo=i(q),o2=n(q,"LI",{});var qwe=s(o2);gne=n(qwe,"STRONG",{});var wJr=s(gne);QFo=r(wJr,"xlm-roberta"),wJr.forEach(t),WFo=r(qwe," \u2014 "),bI=n(qwe,"A",{href:!0});var AJr=s(bI);HFo=r(AJr,"XLMRobertaForCausalLM"),AJr.forEach(t),UFo=r(qwe," (XLM-RoBERTa model)"),qwe.forEach(t),JFo=i(q),r2=n(q,"LI",{});var Nwe=s(r2);hne=n(Nwe,"STRONG",{});var yJr=s(hne);YFo=r(yJr,"xlm-roberta-xl"),yJr.forEach(t),KFo=r(Nwe," \u2014 "),FI=n(Nwe,"A",{href:!0});var LJr=s(FI);ZFo=r(LJr,"XLMRobertaXLForCausalLM"),LJr.forEach(t),evo=r(Nwe," (XLM-RoBERTa-XL model)"),Nwe.forEach(t),ovo=i(q),t2=n(q,"LI",{});var jwe=s(t2);pne=n(jwe,"STRONG",{});var xJr=s(pne);rvo=r(xJr,"xlnet"),xJr.forEach(t),tvo=r(jwe," \u2014 "),vI=n(jwe,"A",{href:!0});var kJr=s(vI);avo=r(kJr,"XLNetLMHeadModel"),kJr.forEach(t),nvo=r(jwe," (XLNet model)"),jwe.forEach(t),q.forEach(t),svo=i(Ot),a2=n(Ot,"P",{});var Dwe=s(a2);lvo=r(Dwe,"The model is set in evaluation mode by default using "),_ne=n(Dwe,"CODE",{});var SJr=s(_ne);ivo=r(SJr,"model.eval()"),SJr.forEach(t),dvo=r(Dwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),une=n(Dwe,"CODE",{});var RJr=s(une);cvo=r(RJr,"model.train()"),RJr.forEach(t),Dwe.forEach(t),fvo=i(Ot),bne=n(Ot,"P",{});var BJr=s(bne);mvo=r(BJr,"Examples:"),BJr.forEach(t),gvo=i(Ot),m(Ew.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),PRe=i(c),nd=n(c,"H2",{class:!0});var VPe=s(nd);n2=n(VPe,"A",{id:!0,class:!0,href:!0});var PJr=s(n2);Fne=n(PJr,"SPAN",{});var $Jr=s(Fne);m(Cw.$$.fragment,$Jr),$Jr.forEach(t),PJr.forEach(t),hvo=i(VPe),vne=n(VPe,"SPAN",{});var IJr=s(vne);pvo=r(IJr,"AutoModelForMaskedLM"),IJr.forEach(t),VPe.forEach(t),$Re=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(ww.$$.fragment,Ks),_vo=i(Ks),sd=n(Ks,"P",{});var uU=s(sd);uvo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TI=n(uU,"A",{href:!0});var qJr=s(TI);bvo=r(qJr,"from_pretrained()"),qJr.forEach(t),Fvo=r(uU," class method or the "),MI=n(uU,"A",{href:!0});var NJr=s(MI);vvo=r(NJr,"from_config()"),NJr.forEach(t),Tvo=r(uU,` class
method.`),uU.forEach(t),Mvo=i(Ks),Aw=n(Ks,"P",{});var XPe=s(Aw);Evo=r(XPe,"This class cannot be instantiated directly using "),Tne=n(XPe,"CODE",{});var jJr=s(Tne);Cvo=r(jJr,"__init__()"),jJr.forEach(t),wvo=r(XPe," (throws an error)."),XPe.forEach(t),Avo=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(yw.$$.fragment,Zs),yvo=i(Zs),Mne=n(Zs,"P",{});var DJr=s(Mne);Lvo=r(DJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),DJr.forEach(t),xvo=i(Zs),ld=n(Zs,"P",{});var bU=s(ld);kvo=r(bU,`Note:
Loading a model from its configuration file does `),Ene=n(bU,"STRONG",{});var GJr=s(Ene);Svo=r(GJr,"not"),GJr.forEach(t),Rvo=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),EI=n(bU,"A",{href:!0});var OJr=s(EI);Bvo=r(OJr,"from_pretrained()"),OJr.forEach(t),Pvo=r(bU," to load the model weights."),bU.forEach(t),$vo=i(Zs),Cne=n(Zs,"P",{});var VJr=s(Cne);Ivo=r(VJr,"Examples:"),VJr.forEach(t),qvo=i(Zs),m(Lw.$$.fragment,Zs),Zs.forEach(t),Nvo=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(xw.$$.fragment,Vt),jvo=i(Vt),wne=n(Vt,"P",{});var XJr=s(wne);Dvo=r(XJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XJr.forEach(t),Gvo=i(Vt),Wa=n(Vt,"P",{});var kC=s(Wa);Ovo=r(kC,"The model class to instantiate is selected based on the "),Ane=n(kC,"CODE",{});var zJr=s(Ane);Vvo=r(zJr,"model_type"),zJr.forEach(t),Xvo=r(kC,` property of the config object (either
passed as an argument or loaded from `),yne=n(kC,"CODE",{});var QJr=s(yne);zvo=r(QJr,"pretrained_model_name_or_path"),QJr.forEach(t),Qvo=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lne=n(kC,"CODE",{});var WJr=s(Lne);Wvo=r(WJr,"pretrained_model_name_or_path"),WJr.forEach(t),Hvo=r(kC,":"),kC.forEach(t),Uvo=i(Vt),I=n(Vt,"UL",{});var N=s(I);s2=n(N,"LI",{});var Gwe=s(s2);xne=n(Gwe,"STRONG",{});var HJr=s(xne);Jvo=r(HJr,"albert"),HJr.forEach(t),Yvo=r(Gwe," \u2014 "),CI=n(Gwe,"A",{href:!0});var UJr=s(CI);Kvo=r(UJr,"AlbertForMaskedLM"),UJr.forEach(t),Zvo=r(Gwe," (ALBERT model)"),Gwe.forEach(t),e6o=i(N),l2=n(N,"LI",{});var Owe=s(l2);kne=n(Owe,"STRONG",{});var JJr=s(kne);o6o=r(JJr,"bart"),JJr.forEach(t),r6o=r(Owe," \u2014 "),wI=n(Owe,"A",{href:!0});var YJr=s(wI);t6o=r(YJr,"BartForConditionalGeneration"),YJr.forEach(t),a6o=r(Owe," (BART model)"),Owe.forEach(t),n6o=i(N),i2=n(N,"LI",{});var Vwe=s(i2);Sne=n(Vwe,"STRONG",{});var KJr=s(Sne);s6o=r(KJr,"bert"),KJr.forEach(t),l6o=r(Vwe," \u2014 "),AI=n(Vwe,"A",{href:!0});var ZJr=s(AI);i6o=r(ZJr,"BertForMaskedLM"),ZJr.forEach(t),d6o=r(Vwe," (BERT model)"),Vwe.forEach(t),c6o=i(N),d2=n(N,"LI",{});var Xwe=s(d2);Rne=n(Xwe,"STRONG",{});var eYr=s(Rne);f6o=r(eYr,"big_bird"),eYr.forEach(t),m6o=r(Xwe," \u2014 "),yI=n(Xwe,"A",{href:!0});var oYr=s(yI);g6o=r(oYr,"BigBirdForMaskedLM"),oYr.forEach(t),h6o=r(Xwe," (BigBird model)"),Xwe.forEach(t),p6o=i(N),c2=n(N,"LI",{});var zwe=s(c2);Bne=n(zwe,"STRONG",{});var rYr=s(Bne);_6o=r(rYr,"camembert"),rYr.forEach(t),u6o=r(zwe," \u2014 "),LI=n(zwe,"A",{href:!0});var tYr=s(LI);b6o=r(tYr,"CamembertForMaskedLM"),tYr.forEach(t),F6o=r(zwe," (CamemBERT model)"),zwe.forEach(t),v6o=i(N),f2=n(N,"LI",{});var Qwe=s(f2);Pne=n(Qwe,"STRONG",{});var aYr=s(Pne);T6o=r(aYr,"convbert"),aYr.forEach(t),M6o=r(Qwe," \u2014 "),xI=n(Qwe,"A",{href:!0});var nYr=s(xI);E6o=r(nYr,"ConvBertForMaskedLM"),nYr.forEach(t),C6o=r(Qwe," (ConvBERT model)"),Qwe.forEach(t),w6o=i(N),m2=n(N,"LI",{});var Wwe=s(m2);$ne=n(Wwe,"STRONG",{});var sYr=s($ne);A6o=r(sYr,"data2vec-text"),sYr.forEach(t),y6o=r(Wwe," \u2014 "),kI=n(Wwe,"A",{href:!0});var lYr=s(kI);L6o=r(lYr,"Data2VecTextForMaskedLM"),lYr.forEach(t),x6o=r(Wwe," (Data2VecText model)"),Wwe.forEach(t),k6o=i(N),g2=n(N,"LI",{});var Hwe=s(g2);Ine=n(Hwe,"STRONG",{});var iYr=s(Ine);S6o=r(iYr,"deberta"),iYr.forEach(t),R6o=r(Hwe," \u2014 "),SI=n(Hwe,"A",{href:!0});var dYr=s(SI);B6o=r(dYr,"DebertaForMaskedLM"),dYr.forEach(t),P6o=r(Hwe," (DeBERTa model)"),Hwe.forEach(t),$6o=i(N),h2=n(N,"LI",{});var Uwe=s(h2);qne=n(Uwe,"STRONG",{});var cYr=s(qne);I6o=r(cYr,"deberta-v2"),cYr.forEach(t),q6o=r(Uwe," \u2014 "),RI=n(Uwe,"A",{href:!0});var fYr=s(RI);N6o=r(fYr,"DebertaV2ForMaskedLM"),fYr.forEach(t),j6o=r(Uwe," (DeBERTa-v2 model)"),Uwe.forEach(t),D6o=i(N),p2=n(N,"LI",{});var Jwe=s(p2);Nne=n(Jwe,"STRONG",{});var mYr=s(Nne);G6o=r(mYr,"distilbert"),mYr.forEach(t),O6o=r(Jwe," \u2014 "),BI=n(Jwe,"A",{href:!0});var gYr=s(BI);V6o=r(gYr,"DistilBertForMaskedLM"),gYr.forEach(t),X6o=r(Jwe," (DistilBERT model)"),Jwe.forEach(t),z6o=i(N),_2=n(N,"LI",{});var Ywe=s(_2);jne=n(Ywe,"STRONG",{});var hYr=s(jne);Q6o=r(hYr,"electra"),hYr.forEach(t),W6o=r(Ywe," \u2014 "),PI=n(Ywe,"A",{href:!0});var pYr=s(PI);H6o=r(pYr,"ElectraForMaskedLM"),pYr.forEach(t),U6o=r(Ywe," (ELECTRA model)"),Ywe.forEach(t),J6o=i(N),u2=n(N,"LI",{});var Kwe=s(u2);Dne=n(Kwe,"STRONG",{});var _Yr=s(Dne);Y6o=r(_Yr,"flaubert"),_Yr.forEach(t),K6o=r(Kwe," \u2014 "),$I=n(Kwe,"A",{href:!0});var uYr=s($I);Z6o=r(uYr,"FlaubertWithLMHeadModel"),uYr.forEach(t),eTo=r(Kwe," (FlauBERT model)"),Kwe.forEach(t),oTo=i(N),b2=n(N,"LI",{});var Zwe=s(b2);Gne=n(Zwe,"STRONG",{});var bYr=s(Gne);rTo=r(bYr,"fnet"),bYr.forEach(t),tTo=r(Zwe," \u2014 "),II=n(Zwe,"A",{href:!0});var FYr=s(II);aTo=r(FYr,"FNetForMaskedLM"),FYr.forEach(t),nTo=r(Zwe," (FNet model)"),Zwe.forEach(t),sTo=i(N),F2=n(N,"LI",{});var eAe=s(F2);One=n(eAe,"STRONG",{});var vYr=s(One);lTo=r(vYr,"funnel"),vYr.forEach(t),iTo=r(eAe," \u2014 "),qI=n(eAe,"A",{href:!0});var TYr=s(qI);dTo=r(TYr,"FunnelForMaskedLM"),TYr.forEach(t),cTo=r(eAe," (Funnel Transformer model)"),eAe.forEach(t),fTo=i(N),v2=n(N,"LI",{});var oAe=s(v2);Vne=n(oAe,"STRONG",{});var MYr=s(Vne);mTo=r(MYr,"ibert"),MYr.forEach(t),gTo=r(oAe," \u2014 "),NI=n(oAe,"A",{href:!0});var EYr=s(NI);hTo=r(EYr,"IBertForMaskedLM"),EYr.forEach(t),pTo=r(oAe," (I-BERT model)"),oAe.forEach(t),_To=i(N),T2=n(N,"LI",{});var rAe=s(T2);Xne=n(rAe,"STRONG",{});var CYr=s(Xne);uTo=r(CYr,"layoutlm"),CYr.forEach(t),bTo=r(rAe," \u2014 "),jI=n(rAe,"A",{href:!0});var wYr=s(jI);FTo=r(wYr,"LayoutLMForMaskedLM"),wYr.forEach(t),vTo=r(rAe," (LayoutLM model)"),rAe.forEach(t),TTo=i(N),M2=n(N,"LI",{});var tAe=s(M2);zne=n(tAe,"STRONG",{});var AYr=s(zne);MTo=r(AYr,"longformer"),AYr.forEach(t),ETo=r(tAe," \u2014 "),DI=n(tAe,"A",{href:!0});var yYr=s(DI);CTo=r(yYr,"LongformerForMaskedLM"),yYr.forEach(t),wTo=r(tAe," (Longformer model)"),tAe.forEach(t),ATo=i(N),E2=n(N,"LI",{});var aAe=s(E2);Qne=n(aAe,"STRONG",{});var LYr=s(Qne);yTo=r(LYr,"mbart"),LYr.forEach(t),LTo=r(aAe," \u2014 "),GI=n(aAe,"A",{href:!0});var xYr=s(GI);xTo=r(xYr,"MBartForConditionalGeneration"),xYr.forEach(t),kTo=r(aAe," (mBART model)"),aAe.forEach(t),STo=i(N),C2=n(N,"LI",{});var nAe=s(C2);Wne=n(nAe,"STRONG",{});var kYr=s(Wne);RTo=r(kYr,"megatron-bert"),kYr.forEach(t),BTo=r(nAe," \u2014 "),OI=n(nAe,"A",{href:!0});var SYr=s(OI);PTo=r(SYr,"MegatronBertForMaskedLM"),SYr.forEach(t),$To=r(nAe," (MegatronBert model)"),nAe.forEach(t),ITo=i(N),w2=n(N,"LI",{});var sAe=s(w2);Hne=n(sAe,"STRONG",{});var RYr=s(Hne);qTo=r(RYr,"mobilebert"),RYr.forEach(t),NTo=r(sAe," \u2014 "),VI=n(sAe,"A",{href:!0});var BYr=s(VI);jTo=r(BYr,"MobileBertForMaskedLM"),BYr.forEach(t),DTo=r(sAe," (MobileBERT model)"),sAe.forEach(t),GTo=i(N),A2=n(N,"LI",{});var lAe=s(A2);Une=n(lAe,"STRONG",{});var PYr=s(Une);OTo=r(PYr,"mpnet"),PYr.forEach(t),VTo=r(lAe," \u2014 "),XI=n(lAe,"A",{href:!0});var $Yr=s(XI);XTo=r($Yr,"MPNetForMaskedLM"),$Yr.forEach(t),zTo=r(lAe," (MPNet model)"),lAe.forEach(t),QTo=i(N),y2=n(N,"LI",{});var iAe=s(y2);Jne=n(iAe,"STRONG",{});var IYr=s(Jne);WTo=r(IYr,"nystromformer"),IYr.forEach(t),HTo=r(iAe," \u2014 "),zI=n(iAe,"A",{href:!0});var qYr=s(zI);UTo=r(qYr,"NystromformerForMaskedLM"),qYr.forEach(t),JTo=r(iAe," (Nystromformer model)"),iAe.forEach(t),YTo=i(N),L2=n(N,"LI",{});var dAe=s(L2);Yne=n(dAe,"STRONG",{});var NYr=s(Yne);KTo=r(NYr,"perceiver"),NYr.forEach(t),ZTo=r(dAe," \u2014 "),QI=n(dAe,"A",{href:!0});var jYr=s(QI);eMo=r(jYr,"PerceiverForMaskedLM"),jYr.forEach(t),oMo=r(dAe," (Perceiver model)"),dAe.forEach(t),rMo=i(N),x2=n(N,"LI",{});var cAe=s(x2);Kne=n(cAe,"STRONG",{});var DYr=s(Kne);tMo=r(DYr,"qdqbert"),DYr.forEach(t),aMo=r(cAe," \u2014 "),WI=n(cAe,"A",{href:!0});var GYr=s(WI);nMo=r(GYr,"QDQBertForMaskedLM"),GYr.forEach(t),sMo=r(cAe," (QDQBert model)"),cAe.forEach(t),lMo=i(N),k2=n(N,"LI",{});var fAe=s(k2);Zne=n(fAe,"STRONG",{});var OYr=s(Zne);iMo=r(OYr,"reformer"),OYr.forEach(t),dMo=r(fAe," \u2014 "),HI=n(fAe,"A",{href:!0});var VYr=s(HI);cMo=r(VYr,"ReformerForMaskedLM"),VYr.forEach(t),fMo=r(fAe," (Reformer model)"),fAe.forEach(t),mMo=i(N),S2=n(N,"LI",{});var mAe=s(S2);ese=n(mAe,"STRONG",{});var XYr=s(ese);gMo=r(XYr,"rembert"),XYr.forEach(t),hMo=r(mAe," \u2014 "),UI=n(mAe,"A",{href:!0});var zYr=s(UI);pMo=r(zYr,"RemBertForMaskedLM"),zYr.forEach(t),_Mo=r(mAe," (RemBERT model)"),mAe.forEach(t),uMo=i(N),R2=n(N,"LI",{});var gAe=s(R2);ose=n(gAe,"STRONG",{});var QYr=s(ose);bMo=r(QYr,"roberta"),QYr.forEach(t),FMo=r(gAe," \u2014 "),JI=n(gAe,"A",{href:!0});var WYr=s(JI);vMo=r(WYr,"RobertaForMaskedLM"),WYr.forEach(t),TMo=r(gAe," (RoBERTa model)"),gAe.forEach(t),MMo=i(N),B2=n(N,"LI",{});var hAe=s(B2);rse=n(hAe,"STRONG",{});var HYr=s(rse);EMo=r(HYr,"roformer"),HYr.forEach(t),CMo=r(hAe," \u2014 "),YI=n(hAe,"A",{href:!0});var UYr=s(YI);wMo=r(UYr,"RoFormerForMaskedLM"),UYr.forEach(t),AMo=r(hAe," (RoFormer model)"),hAe.forEach(t),yMo=i(N),P2=n(N,"LI",{});var pAe=s(P2);tse=n(pAe,"STRONG",{});var JYr=s(tse);LMo=r(JYr,"squeezebert"),JYr.forEach(t),xMo=r(pAe," \u2014 "),KI=n(pAe,"A",{href:!0});var YYr=s(KI);kMo=r(YYr,"SqueezeBertForMaskedLM"),YYr.forEach(t),SMo=r(pAe," (SqueezeBERT model)"),pAe.forEach(t),RMo=i(N),$2=n(N,"LI",{});var _Ae=s($2);ase=n(_Ae,"STRONG",{});var KYr=s(ase);BMo=r(KYr,"tapas"),KYr.forEach(t),PMo=r(_Ae," \u2014 "),ZI=n(_Ae,"A",{href:!0});var ZYr=s(ZI);$Mo=r(ZYr,"TapasForMaskedLM"),ZYr.forEach(t),IMo=r(_Ae," (TAPAS model)"),_Ae.forEach(t),qMo=i(N),I2=n(N,"LI",{});var uAe=s(I2);nse=n(uAe,"STRONG",{});var eKr=s(nse);NMo=r(eKr,"wav2vec2"),eKr.forEach(t),jMo=r(uAe," \u2014 "),sse=n(uAe,"CODE",{});var oKr=s(sse);DMo=r(oKr,"Wav2Vec2ForMaskedLM"),oKr.forEach(t),GMo=r(uAe," (Wav2Vec2 model)"),uAe.forEach(t),OMo=i(N),q2=n(N,"LI",{});var bAe=s(q2);lse=n(bAe,"STRONG",{});var rKr=s(lse);VMo=r(rKr,"xlm"),rKr.forEach(t),XMo=r(bAe," \u2014 "),eq=n(bAe,"A",{href:!0});var tKr=s(eq);zMo=r(tKr,"XLMWithLMHeadModel"),tKr.forEach(t),QMo=r(bAe," (XLM model)"),bAe.forEach(t),WMo=i(N),N2=n(N,"LI",{});var FAe=s(N2);ise=n(FAe,"STRONG",{});var aKr=s(ise);HMo=r(aKr,"xlm-roberta"),aKr.forEach(t),UMo=r(FAe," \u2014 "),oq=n(FAe,"A",{href:!0});var nKr=s(oq);JMo=r(nKr,"XLMRobertaForMaskedLM"),nKr.forEach(t),YMo=r(FAe," (XLM-RoBERTa model)"),FAe.forEach(t),KMo=i(N),j2=n(N,"LI",{});var vAe=s(j2);dse=n(vAe,"STRONG",{});var sKr=s(dse);ZMo=r(sKr,"xlm-roberta-xl"),sKr.forEach(t),e4o=r(vAe," \u2014 "),rq=n(vAe,"A",{href:!0});var lKr=s(rq);o4o=r(lKr,"XLMRobertaXLForMaskedLM"),lKr.forEach(t),r4o=r(vAe," (XLM-RoBERTa-XL model)"),vAe.forEach(t),t4o=i(N),D2=n(N,"LI",{});var TAe=s(D2);cse=n(TAe,"STRONG",{});var iKr=s(cse);a4o=r(iKr,"yoso"),iKr.forEach(t),n4o=r(TAe," \u2014 "),tq=n(TAe,"A",{href:!0});var dKr=s(tq);s4o=r(dKr,"YosoForMaskedLM"),dKr.forEach(t),l4o=r(TAe," (YOSO model)"),TAe.forEach(t),N.forEach(t),i4o=i(Vt),G2=n(Vt,"P",{});var MAe=s(G2);d4o=r(MAe,"The model is set in evaluation mode by default using "),fse=n(MAe,"CODE",{});var cKr=s(fse);c4o=r(cKr,"model.eval()"),cKr.forEach(t),f4o=r(MAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mse=n(MAe,"CODE",{});var fKr=s(mse);m4o=r(fKr,"model.train()"),fKr.forEach(t),MAe.forEach(t),g4o=i(Vt),gse=n(Vt,"P",{});var mKr=s(gse);h4o=r(mKr,"Examples:"),mKr.forEach(t),p4o=i(Vt),m(kw.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),IRe=i(c),id=n(c,"H2",{class:!0});var zPe=s(id);O2=n(zPe,"A",{id:!0,class:!0,href:!0});var gKr=s(O2);hse=n(gKr,"SPAN",{});var hKr=s(hse);m(Sw.$$.fragment,hKr),hKr.forEach(t),gKr.forEach(t),_4o=i(zPe),pse=n(zPe,"SPAN",{});var pKr=s(pse);u4o=r(pKr,"AutoModelForSeq2SeqLM"),pKr.forEach(t),zPe.forEach(t),qRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(Rw.$$.fragment,el),b4o=i(el),dd=n(el,"P",{});var FU=s(dd);F4o=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aq=n(FU,"A",{href:!0});var _Kr=s(aq);v4o=r(_Kr,"from_pretrained()"),_Kr.forEach(t),T4o=r(FU," class method or the "),nq=n(FU,"A",{href:!0});var uKr=s(nq);M4o=r(uKr,"from_config()"),uKr.forEach(t),E4o=r(FU,` class
method.`),FU.forEach(t),C4o=i(el),Bw=n(el,"P",{});var QPe=s(Bw);w4o=r(QPe,"This class cannot be instantiated directly using "),_se=n(QPe,"CODE",{});var bKr=s(_se);A4o=r(bKr,"__init__()"),bKr.forEach(t),y4o=r(QPe," (throws an error)."),QPe.forEach(t),L4o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(Pw.$$.fragment,ol),x4o=i(ol),use=n(ol,"P",{});var FKr=s(use);k4o=r(FKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FKr.forEach(t),S4o=i(ol),cd=n(ol,"P",{});var vU=s(cd);R4o=r(vU,`Note:
Loading a model from its configuration file does `),bse=n(vU,"STRONG",{});var vKr=s(bse);B4o=r(vKr,"not"),vKr.forEach(t),P4o=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),sq=n(vU,"A",{href:!0});var TKr=s(sq);$4o=r(TKr,"from_pretrained()"),TKr.forEach(t),I4o=r(vU," to load the model weights."),vU.forEach(t),q4o=i(ol),Fse=n(ol,"P",{});var MKr=s(Fse);N4o=r(MKr,"Examples:"),MKr.forEach(t),j4o=i(ol),m($w.$$.fragment,ol),ol.forEach(t),D4o=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(Iw.$$.fragment,Xt),G4o=i(Xt),vse=n(Xt,"P",{});var EKr=s(vse);O4o=r(EKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EKr.forEach(t),V4o=i(Xt),Ha=n(Xt,"P",{});var SC=s(Ha);X4o=r(SC,"The model class to instantiate is selected based on the "),Tse=n(SC,"CODE",{});var CKr=s(Tse);z4o=r(CKr,"model_type"),CKr.forEach(t),Q4o=r(SC,` property of the config object (either
passed as an argument or loaded from `),Mse=n(SC,"CODE",{});var wKr=s(Mse);W4o=r(wKr,"pretrained_model_name_or_path"),wKr.forEach(t),H4o=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ese=n(SC,"CODE",{});var AKr=s(Ese);U4o=r(AKr,"pretrained_model_name_or_path"),AKr.forEach(t),J4o=r(SC,":"),SC.forEach(t),Y4o=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);V2=n(le,"LI",{});var EAe=s(V2);Cse=n(EAe,"STRONG",{});var yKr=s(Cse);K4o=r(yKr,"bart"),yKr.forEach(t),Z4o=r(EAe," \u2014 "),lq=n(EAe,"A",{href:!0});var LKr=s(lq);eEo=r(LKr,"BartForConditionalGeneration"),LKr.forEach(t),oEo=r(EAe," (BART model)"),EAe.forEach(t),rEo=i(le),X2=n(le,"LI",{});var CAe=s(X2);wse=n(CAe,"STRONG",{});var xKr=s(wse);tEo=r(xKr,"bigbird_pegasus"),xKr.forEach(t),aEo=r(CAe," \u2014 "),iq=n(CAe,"A",{href:!0});var kKr=s(iq);nEo=r(kKr,"BigBirdPegasusForConditionalGeneration"),kKr.forEach(t),sEo=r(CAe," (BigBirdPegasus model)"),CAe.forEach(t),lEo=i(le),z2=n(le,"LI",{});var wAe=s(z2);Ase=n(wAe,"STRONG",{});var SKr=s(Ase);iEo=r(SKr,"blenderbot"),SKr.forEach(t),dEo=r(wAe," \u2014 "),dq=n(wAe,"A",{href:!0});var RKr=s(dq);cEo=r(RKr,"BlenderbotForConditionalGeneration"),RKr.forEach(t),fEo=r(wAe," (Blenderbot model)"),wAe.forEach(t),mEo=i(le),Q2=n(le,"LI",{});var AAe=s(Q2);yse=n(AAe,"STRONG",{});var BKr=s(yse);gEo=r(BKr,"blenderbot-small"),BKr.forEach(t),hEo=r(AAe," \u2014 "),cq=n(AAe,"A",{href:!0});var PKr=s(cq);pEo=r(PKr,"BlenderbotSmallForConditionalGeneration"),PKr.forEach(t),_Eo=r(AAe," (BlenderbotSmall model)"),AAe.forEach(t),uEo=i(le),W2=n(le,"LI",{});var yAe=s(W2);Lse=n(yAe,"STRONG",{});var $Kr=s(Lse);bEo=r($Kr,"encoder-decoder"),$Kr.forEach(t),FEo=r(yAe," \u2014 "),fq=n(yAe,"A",{href:!0});var IKr=s(fq);vEo=r(IKr,"EncoderDecoderModel"),IKr.forEach(t),TEo=r(yAe," (Encoder decoder model)"),yAe.forEach(t),MEo=i(le),H2=n(le,"LI",{});var LAe=s(H2);xse=n(LAe,"STRONG",{});var qKr=s(xse);EEo=r(qKr,"fsmt"),qKr.forEach(t),CEo=r(LAe," \u2014 "),mq=n(LAe,"A",{href:!0});var NKr=s(mq);wEo=r(NKr,"FSMTForConditionalGeneration"),NKr.forEach(t),AEo=r(LAe," (FairSeq Machine-Translation model)"),LAe.forEach(t),yEo=i(le),U2=n(le,"LI",{});var xAe=s(U2);kse=n(xAe,"STRONG",{});var jKr=s(kse);LEo=r(jKr,"led"),jKr.forEach(t),xEo=r(xAe," \u2014 "),gq=n(xAe,"A",{href:!0});var DKr=s(gq);kEo=r(DKr,"LEDForConditionalGeneration"),DKr.forEach(t),SEo=r(xAe," (LED model)"),xAe.forEach(t),REo=i(le),J2=n(le,"LI",{});var kAe=s(J2);Sse=n(kAe,"STRONG",{});var GKr=s(Sse);BEo=r(GKr,"m2m_100"),GKr.forEach(t),PEo=r(kAe," \u2014 "),hq=n(kAe,"A",{href:!0});var OKr=s(hq);$Eo=r(OKr,"M2M100ForConditionalGeneration"),OKr.forEach(t),IEo=r(kAe," (M2M100 model)"),kAe.forEach(t),qEo=i(le),Y2=n(le,"LI",{});var SAe=s(Y2);Rse=n(SAe,"STRONG",{});var VKr=s(Rse);NEo=r(VKr,"marian"),VKr.forEach(t),jEo=r(SAe," \u2014 "),pq=n(SAe,"A",{href:!0});var XKr=s(pq);DEo=r(XKr,"MarianMTModel"),XKr.forEach(t),GEo=r(SAe," (Marian model)"),SAe.forEach(t),OEo=i(le),K2=n(le,"LI",{});var RAe=s(K2);Bse=n(RAe,"STRONG",{});var zKr=s(Bse);VEo=r(zKr,"mbart"),zKr.forEach(t),XEo=r(RAe," \u2014 "),_q=n(RAe,"A",{href:!0});var QKr=s(_q);zEo=r(QKr,"MBartForConditionalGeneration"),QKr.forEach(t),QEo=r(RAe," (mBART model)"),RAe.forEach(t),WEo=i(le),Z2=n(le,"LI",{});var BAe=s(Z2);Pse=n(BAe,"STRONG",{});var WKr=s(Pse);HEo=r(WKr,"mt5"),WKr.forEach(t),UEo=r(BAe," \u2014 "),uq=n(BAe,"A",{href:!0});var HKr=s(uq);JEo=r(HKr,"MT5ForConditionalGeneration"),HKr.forEach(t),YEo=r(BAe," (mT5 model)"),BAe.forEach(t),KEo=i(le),e1=n(le,"LI",{});var PAe=s(e1);$se=n(PAe,"STRONG",{});var UKr=s($se);ZEo=r(UKr,"pegasus"),UKr.forEach(t),eCo=r(PAe," \u2014 "),bq=n(PAe,"A",{href:!0});var JKr=s(bq);oCo=r(JKr,"PegasusForConditionalGeneration"),JKr.forEach(t),rCo=r(PAe," (Pegasus model)"),PAe.forEach(t),tCo=i(le),o1=n(le,"LI",{});var $Ae=s(o1);Ise=n($Ae,"STRONG",{});var YKr=s(Ise);aCo=r(YKr,"plbart"),YKr.forEach(t),nCo=r($Ae," \u2014 "),Fq=n($Ae,"A",{href:!0});var KKr=s(Fq);sCo=r(KKr,"PLBartForConditionalGeneration"),KKr.forEach(t),lCo=r($Ae," (PLBart model)"),$Ae.forEach(t),iCo=i(le),r1=n(le,"LI",{});var IAe=s(r1);qse=n(IAe,"STRONG",{});var ZKr=s(qse);dCo=r(ZKr,"prophetnet"),ZKr.forEach(t),cCo=r(IAe," \u2014 "),vq=n(IAe,"A",{href:!0});var eZr=s(vq);fCo=r(eZr,"ProphetNetForConditionalGeneration"),eZr.forEach(t),mCo=r(IAe," (ProphetNet model)"),IAe.forEach(t),gCo=i(le),t1=n(le,"LI",{});var qAe=s(t1);Nse=n(qAe,"STRONG",{});var oZr=s(Nse);hCo=r(oZr,"t5"),oZr.forEach(t),pCo=r(qAe," \u2014 "),Tq=n(qAe,"A",{href:!0});var rZr=s(Tq);_Co=r(rZr,"T5ForConditionalGeneration"),rZr.forEach(t),uCo=r(qAe," (T5 model)"),qAe.forEach(t),bCo=i(le),a1=n(le,"LI",{});var NAe=s(a1);jse=n(NAe,"STRONG",{});var tZr=s(jse);FCo=r(tZr,"tapex"),tZr.forEach(t),vCo=r(NAe," \u2014 "),Mq=n(NAe,"A",{href:!0});var aZr=s(Mq);TCo=r(aZr,"BartForConditionalGeneration"),aZr.forEach(t),MCo=r(NAe," (TAPEX model)"),NAe.forEach(t),ECo=i(le),n1=n(le,"LI",{});var jAe=s(n1);Dse=n(jAe,"STRONG",{});var nZr=s(Dse);CCo=r(nZr,"xlm-prophetnet"),nZr.forEach(t),wCo=r(jAe," \u2014 "),Eq=n(jAe,"A",{href:!0});var sZr=s(Eq);ACo=r(sZr,"XLMProphetNetForConditionalGeneration"),sZr.forEach(t),yCo=r(jAe," (XLMProphetNet model)"),jAe.forEach(t),le.forEach(t),LCo=i(Xt),s1=n(Xt,"P",{});var DAe=s(s1);xCo=r(DAe,"The model is set in evaluation mode by default using "),Gse=n(DAe,"CODE",{});var lZr=s(Gse);kCo=r(lZr,"model.eval()"),lZr.forEach(t),SCo=r(DAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ose=n(DAe,"CODE",{});var iZr=s(Ose);RCo=r(iZr,"model.train()"),iZr.forEach(t),DAe.forEach(t),BCo=i(Xt),Vse=n(Xt,"P",{});var dZr=s(Vse);PCo=r(dZr,"Examples:"),dZr.forEach(t),$Co=i(Xt),m(qw.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),NRe=i(c),fd=n(c,"H2",{class:!0});var WPe=s(fd);l1=n(WPe,"A",{id:!0,class:!0,href:!0});var cZr=s(l1);Xse=n(cZr,"SPAN",{});var fZr=s(Xse);m(Nw.$$.fragment,fZr),fZr.forEach(t),cZr.forEach(t),ICo=i(WPe),zse=n(WPe,"SPAN",{});var mZr=s(zse);qCo=r(mZr,"AutoModelForSequenceClassification"),mZr.forEach(t),WPe.forEach(t),jRe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(jw.$$.fragment,rl),NCo=i(rl),md=n(rl,"P",{});var TU=s(md);jCo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cq=n(TU,"A",{href:!0});var gZr=s(Cq);DCo=r(gZr,"from_pretrained()"),gZr.forEach(t),GCo=r(TU," class method or the "),wq=n(TU,"A",{href:!0});var hZr=s(wq);OCo=r(hZr,"from_config()"),hZr.forEach(t),VCo=r(TU,` class
method.`),TU.forEach(t),XCo=i(rl),Dw=n(rl,"P",{});var HPe=s(Dw);zCo=r(HPe,"This class cannot be instantiated directly using "),Qse=n(HPe,"CODE",{});var pZr=s(Qse);QCo=r(pZr,"__init__()"),pZr.forEach(t),WCo=r(HPe," (throws an error)."),HPe.forEach(t),HCo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(Gw.$$.fragment,tl),UCo=i(tl),Wse=n(tl,"P",{});var _Zr=s(Wse);JCo=r(_Zr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Zr.forEach(t),YCo=i(tl),gd=n(tl,"P",{});var MU=s(gd);KCo=r(MU,`Note:
Loading a model from its configuration file does `),Hse=n(MU,"STRONG",{});var uZr=s(Hse);ZCo=r(uZr,"not"),uZr.forEach(t),e3o=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aq=n(MU,"A",{href:!0});var bZr=s(Aq);o3o=r(bZr,"from_pretrained()"),bZr.forEach(t),r3o=r(MU," to load the model weights."),MU.forEach(t),t3o=i(tl),Use=n(tl,"P",{});var FZr=s(Use);a3o=r(FZr,"Examples:"),FZr.forEach(t),n3o=i(tl),m(Ow.$$.fragment,tl),tl.forEach(t),s3o=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(Vw.$$.fragment,zt),l3o=i(zt),Jse=n(zt,"P",{});var vZr=s(Jse);i3o=r(vZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vZr.forEach(t),d3o=i(zt),Ua=n(zt,"P",{});var RC=s(Ua);c3o=r(RC,"The model class to instantiate is selected based on the "),Yse=n(RC,"CODE",{});var TZr=s(Yse);f3o=r(TZr,"model_type"),TZr.forEach(t),m3o=r(RC,` property of the config object (either
passed as an argument or loaded from `),Kse=n(RC,"CODE",{});var MZr=s(Kse);g3o=r(MZr,"pretrained_model_name_or_path"),MZr.forEach(t),h3o=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zse=n(RC,"CODE",{});var EZr=s(Zse);p3o=r(EZr,"pretrained_model_name_or_path"),EZr.forEach(t),_3o=r(RC,":"),RC.forEach(t),u3o=i(zt),y=n(zt,"UL",{});var L=s(y);i1=n(L,"LI",{});var GAe=s(i1);ele=n(GAe,"STRONG",{});var CZr=s(ele);b3o=r(CZr,"albert"),CZr.forEach(t),F3o=r(GAe," \u2014 "),yq=n(GAe,"A",{href:!0});var wZr=s(yq);v3o=r(wZr,"AlbertForSequenceClassification"),wZr.forEach(t),T3o=r(GAe," (ALBERT model)"),GAe.forEach(t),M3o=i(L),d1=n(L,"LI",{});var OAe=s(d1);ole=n(OAe,"STRONG",{});var AZr=s(ole);E3o=r(AZr,"bart"),AZr.forEach(t),C3o=r(OAe," \u2014 "),Lq=n(OAe,"A",{href:!0});var yZr=s(Lq);w3o=r(yZr,"BartForSequenceClassification"),yZr.forEach(t),A3o=r(OAe," (BART model)"),OAe.forEach(t),y3o=i(L),c1=n(L,"LI",{});var VAe=s(c1);rle=n(VAe,"STRONG",{});var LZr=s(rle);L3o=r(LZr,"bert"),LZr.forEach(t),x3o=r(VAe," \u2014 "),xq=n(VAe,"A",{href:!0});var xZr=s(xq);k3o=r(xZr,"BertForSequenceClassification"),xZr.forEach(t),S3o=r(VAe," (BERT model)"),VAe.forEach(t),R3o=i(L),f1=n(L,"LI",{});var XAe=s(f1);tle=n(XAe,"STRONG",{});var kZr=s(tle);B3o=r(kZr,"big_bird"),kZr.forEach(t),P3o=r(XAe," \u2014 "),kq=n(XAe,"A",{href:!0});var SZr=s(kq);$3o=r(SZr,"BigBirdForSequenceClassification"),SZr.forEach(t),I3o=r(XAe," (BigBird model)"),XAe.forEach(t),q3o=i(L),m1=n(L,"LI",{});var zAe=s(m1);ale=n(zAe,"STRONG",{});var RZr=s(ale);N3o=r(RZr,"bigbird_pegasus"),RZr.forEach(t),j3o=r(zAe," \u2014 "),Sq=n(zAe,"A",{href:!0});var BZr=s(Sq);D3o=r(BZr,"BigBirdPegasusForSequenceClassification"),BZr.forEach(t),G3o=r(zAe," (BigBirdPegasus model)"),zAe.forEach(t),O3o=i(L),g1=n(L,"LI",{});var QAe=s(g1);nle=n(QAe,"STRONG",{});var PZr=s(nle);V3o=r(PZr,"camembert"),PZr.forEach(t),X3o=r(QAe," \u2014 "),Rq=n(QAe,"A",{href:!0});var $Zr=s(Rq);z3o=r($Zr,"CamembertForSequenceClassification"),$Zr.forEach(t),Q3o=r(QAe," (CamemBERT model)"),QAe.forEach(t),W3o=i(L),h1=n(L,"LI",{});var WAe=s(h1);sle=n(WAe,"STRONG",{});var IZr=s(sle);H3o=r(IZr,"canine"),IZr.forEach(t),U3o=r(WAe," \u2014 "),Bq=n(WAe,"A",{href:!0});var qZr=s(Bq);J3o=r(qZr,"CanineForSequenceClassification"),qZr.forEach(t),Y3o=r(WAe," (Canine model)"),WAe.forEach(t),K3o=i(L),p1=n(L,"LI",{});var HAe=s(p1);lle=n(HAe,"STRONG",{});var NZr=s(lle);Z3o=r(NZr,"convbert"),NZr.forEach(t),ewo=r(HAe," \u2014 "),Pq=n(HAe,"A",{href:!0});var jZr=s(Pq);owo=r(jZr,"ConvBertForSequenceClassification"),jZr.forEach(t),rwo=r(HAe," (ConvBERT model)"),HAe.forEach(t),two=i(L),_1=n(L,"LI",{});var UAe=s(_1);ile=n(UAe,"STRONG",{});var DZr=s(ile);awo=r(DZr,"ctrl"),DZr.forEach(t),nwo=r(UAe," \u2014 "),$q=n(UAe,"A",{href:!0});var GZr=s($q);swo=r(GZr,"CTRLForSequenceClassification"),GZr.forEach(t),lwo=r(UAe," (CTRL model)"),UAe.forEach(t),iwo=i(L),u1=n(L,"LI",{});var JAe=s(u1);dle=n(JAe,"STRONG",{});var OZr=s(dle);dwo=r(OZr,"data2vec-text"),OZr.forEach(t),cwo=r(JAe," \u2014 "),Iq=n(JAe,"A",{href:!0});var VZr=s(Iq);fwo=r(VZr,"Data2VecTextForSequenceClassification"),VZr.forEach(t),mwo=r(JAe," (Data2VecText model)"),JAe.forEach(t),gwo=i(L),b1=n(L,"LI",{});var YAe=s(b1);cle=n(YAe,"STRONG",{});var XZr=s(cle);hwo=r(XZr,"deberta"),XZr.forEach(t),pwo=r(YAe," \u2014 "),qq=n(YAe,"A",{href:!0});var zZr=s(qq);_wo=r(zZr,"DebertaForSequenceClassification"),zZr.forEach(t),uwo=r(YAe," (DeBERTa model)"),YAe.forEach(t),bwo=i(L),F1=n(L,"LI",{});var KAe=s(F1);fle=n(KAe,"STRONG",{});var QZr=s(fle);Fwo=r(QZr,"deberta-v2"),QZr.forEach(t),vwo=r(KAe," \u2014 "),Nq=n(KAe,"A",{href:!0});var WZr=s(Nq);Two=r(WZr,"DebertaV2ForSequenceClassification"),WZr.forEach(t),Mwo=r(KAe," (DeBERTa-v2 model)"),KAe.forEach(t),Ewo=i(L),v1=n(L,"LI",{});var ZAe=s(v1);mle=n(ZAe,"STRONG",{});var HZr=s(mle);Cwo=r(HZr,"distilbert"),HZr.forEach(t),wwo=r(ZAe," \u2014 "),jq=n(ZAe,"A",{href:!0});var UZr=s(jq);Awo=r(UZr,"DistilBertForSequenceClassification"),UZr.forEach(t),ywo=r(ZAe," (DistilBERT model)"),ZAe.forEach(t),Lwo=i(L),T1=n(L,"LI",{});var e0e=s(T1);gle=n(e0e,"STRONG",{});var JZr=s(gle);xwo=r(JZr,"electra"),JZr.forEach(t),kwo=r(e0e," \u2014 "),Dq=n(e0e,"A",{href:!0});var YZr=s(Dq);Swo=r(YZr,"ElectraForSequenceClassification"),YZr.forEach(t),Rwo=r(e0e," (ELECTRA model)"),e0e.forEach(t),Bwo=i(L),M1=n(L,"LI",{});var o0e=s(M1);hle=n(o0e,"STRONG",{});var KZr=s(hle);Pwo=r(KZr,"flaubert"),KZr.forEach(t),$wo=r(o0e," \u2014 "),Gq=n(o0e,"A",{href:!0});var ZZr=s(Gq);Iwo=r(ZZr,"FlaubertForSequenceClassification"),ZZr.forEach(t),qwo=r(o0e," (FlauBERT model)"),o0e.forEach(t),Nwo=i(L),E1=n(L,"LI",{});var r0e=s(E1);ple=n(r0e,"STRONG",{});var eet=s(ple);jwo=r(eet,"fnet"),eet.forEach(t),Dwo=r(r0e," \u2014 "),Oq=n(r0e,"A",{href:!0});var oet=s(Oq);Gwo=r(oet,"FNetForSequenceClassification"),oet.forEach(t),Owo=r(r0e," (FNet model)"),r0e.forEach(t),Vwo=i(L),C1=n(L,"LI",{});var t0e=s(C1);_le=n(t0e,"STRONG",{});var ret=s(_le);Xwo=r(ret,"funnel"),ret.forEach(t),zwo=r(t0e," \u2014 "),Vq=n(t0e,"A",{href:!0});var tet=s(Vq);Qwo=r(tet,"FunnelForSequenceClassification"),tet.forEach(t),Wwo=r(t0e," (Funnel Transformer model)"),t0e.forEach(t),Hwo=i(L),w1=n(L,"LI",{});var a0e=s(w1);ule=n(a0e,"STRONG",{});var aet=s(ule);Uwo=r(aet,"gpt2"),aet.forEach(t),Jwo=r(a0e," \u2014 "),Xq=n(a0e,"A",{href:!0});var net=s(Xq);Ywo=r(net,"GPT2ForSequenceClassification"),net.forEach(t),Kwo=r(a0e," (OpenAI GPT-2 model)"),a0e.forEach(t),Zwo=i(L),A1=n(L,"LI",{});var n0e=s(A1);ble=n(n0e,"STRONG",{});var set=s(ble);eAo=r(set,"gpt_neo"),set.forEach(t),oAo=r(n0e," \u2014 "),zq=n(n0e,"A",{href:!0});var iet=s(zq);rAo=r(iet,"GPTNeoForSequenceClassification"),iet.forEach(t),tAo=r(n0e," (GPT Neo model)"),n0e.forEach(t),aAo=i(L),y1=n(L,"LI",{});var s0e=s(y1);Fle=n(s0e,"STRONG",{});var det=s(Fle);nAo=r(det,"gptj"),det.forEach(t),sAo=r(s0e," \u2014 "),Qq=n(s0e,"A",{href:!0});var cet=s(Qq);lAo=r(cet,"GPTJForSequenceClassification"),cet.forEach(t),iAo=r(s0e," (GPT-J model)"),s0e.forEach(t),dAo=i(L),L1=n(L,"LI",{});var l0e=s(L1);vle=n(l0e,"STRONG",{});var fet=s(vle);cAo=r(fet,"ibert"),fet.forEach(t),fAo=r(l0e," \u2014 "),Wq=n(l0e,"A",{href:!0});var met=s(Wq);mAo=r(met,"IBertForSequenceClassification"),met.forEach(t),gAo=r(l0e," (I-BERT model)"),l0e.forEach(t),hAo=i(L),x1=n(L,"LI",{});var i0e=s(x1);Tle=n(i0e,"STRONG",{});var get=s(Tle);pAo=r(get,"layoutlm"),get.forEach(t),_Ao=r(i0e," \u2014 "),Hq=n(i0e,"A",{href:!0});var het=s(Hq);uAo=r(het,"LayoutLMForSequenceClassification"),het.forEach(t),bAo=r(i0e," (LayoutLM model)"),i0e.forEach(t),FAo=i(L),k1=n(L,"LI",{});var d0e=s(k1);Mle=n(d0e,"STRONG",{});var pet=s(Mle);vAo=r(pet,"layoutlmv2"),pet.forEach(t),TAo=r(d0e," \u2014 "),Uq=n(d0e,"A",{href:!0});var _et=s(Uq);MAo=r(_et,"LayoutLMv2ForSequenceClassification"),_et.forEach(t),EAo=r(d0e," (LayoutLMv2 model)"),d0e.forEach(t),CAo=i(L),S1=n(L,"LI",{});var c0e=s(S1);Ele=n(c0e,"STRONG",{});var uet=s(Ele);wAo=r(uet,"led"),uet.forEach(t),AAo=r(c0e," \u2014 "),Jq=n(c0e,"A",{href:!0});var bet=s(Jq);yAo=r(bet,"LEDForSequenceClassification"),bet.forEach(t),LAo=r(c0e," (LED model)"),c0e.forEach(t),xAo=i(L),R1=n(L,"LI",{});var f0e=s(R1);Cle=n(f0e,"STRONG",{});var Fet=s(Cle);kAo=r(Fet,"longformer"),Fet.forEach(t),SAo=r(f0e," \u2014 "),Yq=n(f0e,"A",{href:!0});var vet=s(Yq);RAo=r(vet,"LongformerForSequenceClassification"),vet.forEach(t),BAo=r(f0e," (Longformer model)"),f0e.forEach(t),PAo=i(L),B1=n(L,"LI",{});var m0e=s(B1);wle=n(m0e,"STRONG",{});var Tet=s(wle);$Ao=r(Tet,"mbart"),Tet.forEach(t),IAo=r(m0e," \u2014 "),Kq=n(m0e,"A",{href:!0});var Met=s(Kq);qAo=r(Met,"MBartForSequenceClassification"),Met.forEach(t),NAo=r(m0e," (mBART model)"),m0e.forEach(t),jAo=i(L),P1=n(L,"LI",{});var g0e=s(P1);Ale=n(g0e,"STRONG",{});var Eet=s(Ale);DAo=r(Eet,"megatron-bert"),Eet.forEach(t),GAo=r(g0e," \u2014 "),Zq=n(g0e,"A",{href:!0});var Cet=s(Zq);OAo=r(Cet,"MegatronBertForSequenceClassification"),Cet.forEach(t),VAo=r(g0e," (MegatronBert model)"),g0e.forEach(t),XAo=i(L),$1=n(L,"LI",{});var h0e=s($1);yle=n(h0e,"STRONG",{});var wet=s(yle);zAo=r(wet,"mobilebert"),wet.forEach(t),QAo=r(h0e," \u2014 "),eN=n(h0e,"A",{href:!0});var Aet=s(eN);WAo=r(Aet,"MobileBertForSequenceClassification"),Aet.forEach(t),HAo=r(h0e," (MobileBERT model)"),h0e.forEach(t),UAo=i(L),I1=n(L,"LI",{});var p0e=s(I1);Lle=n(p0e,"STRONG",{});var yet=s(Lle);JAo=r(yet,"mpnet"),yet.forEach(t),YAo=r(p0e," \u2014 "),oN=n(p0e,"A",{href:!0});var Let=s(oN);KAo=r(Let,"MPNetForSequenceClassification"),Let.forEach(t),ZAo=r(p0e," (MPNet model)"),p0e.forEach(t),e0o=i(L),q1=n(L,"LI",{});var _0e=s(q1);xle=n(_0e,"STRONG",{});var xet=s(xle);o0o=r(xet,"nystromformer"),xet.forEach(t),r0o=r(_0e," \u2014 "),rN=n(_0e,"A",{href:!0});var ket=s(rN);t0o=r(ket,"NystromformerForSequenceClassification"),ket.forEach(t),a0o=r(_0e," (Nystromformer model)"),_0e.forEach(t),n0o=i(L),N1=n(L,"LI",{});var u0e=s(N1);kle=n(u0e,"STRONG",{});var Set=s(kle);s0o=r(Set,"openai-gpt"),Set.forEach(t),l0o=r(u0e," \u2014 "),tN=n(u0e,"A",{href:!0});var Ret=s(tN);i0o=r(Ret,"OpenAIGPTForSequenceClassification"),Ret.forEach(t),d0o=r(u0e," (OpenAI GPT model)"),u0e.forEach(t),c0o=i(L),j1=n(L,"LI",{});var b0e=s(j1);Sle=n(b0e,"STRONG",{});var Bet=s(Sle);f0o=r(Bet,"perceiver"),Bet.forEach(t),m0o=r(b0e," \u2014 "),aN=n(b0e,"A",{href:!0});var Pet=s(aN);g0o=r(Pet,"PerceiverForSequenceClassification"),Pet.forEach(t),h0o=r(b0e," (Perceiver model)"),b0e.forEach(t),p0o=i(L),D1=n(L,"LI",{});var F0e=s(D1);Rle=n(F0e,"STRONG",{});var $et=s(Rle);_0o=r($et,"plbart"),$et.forEach(t),u0o=r(F0e," \u2014 "),nN=n(F0e,"A",{href:!0});var Iet=s(nN);b0o=r(Iet,"PLBartForSequenceClassification"),Iet.forEach(t),F0o=r(F0e," (PLBart model)"),F0e.forEach(t),v0o=i(L),G1=n(L,"LI",{});var v0e=s(G1);Ble=n(v0e,"STRONG",{});var qet=s(Ble);T0o=r(qet,"qdqbert"),qet.forEach(t),M0o=r(v0e," \u2014 "),sN=n(v0e,"A",{href:!0});var Net=s(sN);E0o=r(Net,"QDQBertForSequenceClassification"),Net.forEach(t),C0o=r(v0e," (QDQBert model)"),v0e.forEach(t),w0o=i(L),O1=n(L,"LI",{});var T0e=s(O1);Ple=n(T0e,"STRONG",{});var jet=s(Ple);A0o=r(jet,"reformer"),jet.forEach(t),y0o=r(T0e," \u2014 "),lN=n(T0e,"A",{href:!0});var Det=s(lN);L0o=r(Det,"ReformerForSequenceClassification"),Det.forEach(t),x0o=r(T0e," (Reformer model)"),T0e.forEach(t),k0o=i(L),V1=n(L,"LI",{});var M0e=s(V1);$le=n(M0e,"STRONG",{});var Get=s($le);S0o=r(Get,"rembert"),Get.forEach(t),R0o=r(M0e," \u2014 "),iN=n(M0e,"A",{href:!0});var Oet=s(iN);B0o=r(Oet,"RemBertForSequenceClassification"),Oet.forEach(t),P0o=r(M0e," (RemBERT model)"),M0e.forEach(t),$0o=i(L),X1=n(L,"LI",{});var E0e=s(X1);Ile=n(E0e,"STRONG",{});var Vet=s(Ile);I0o=r(Vet,"roberta"),Vet.forEach(t),q0o=r(E0e," \u2014 "),dN=n(E0e,"A",{href:!0});var Xet=s(dN);N0o=r(Xet,"RobertaForSequenceClassification"),Xet.forEach(t),j0o=r(E0e," (RoBERTa model)"),E0e.forEach(t),D0o=i(L),z1=n(L,"LI",{});var C0e=s(z1);qle=n(C0e,"STRONG",{});var zet=s(qle);G0o=r(zet,"roformer"),zet.forEach(t),O0o=r(C0e," \u2014 "),cN=n(C0e,"A",{href:!0});var Qet=s(cN);V0o=r(Qet,"RoFormerForSequenceClassification"),Qet.forEach(t),X0o=r(C0e," (RoFormer model)"),C0e.forEach(t),z0o=i(L),Q1=n(L,"LI",{});var w0e=s(Q1);Nle=n(w0e,"STRONG",{});var Wet=s(Nle);Q0o=r(Wet,"squeezebert"),Wet.forEach(t),W0o=r(w0e," \u2014 "),fN=n(w0e,"A",{href:!0});var Het=s(fN);H0o=r(Het,"SqueezeBertForSequenceClassification"),Het.forEach(t),U0o=r(w0e," (SqueezeBERT model)"),w0e.forEach(t),J0o=i(L),W1=n(L,"LI",{});var A0e=s(W1);jle=n(A0e,"STRONG",{});var Uet=s(jle);Y0o=r(Uet,"tapas"),Uet.forEach(t),K0o=r(A0e," \u2014 "),mN=n(A0e,"A",{href:!0});var Jet=s(mN);Z0o=r(Jet,"TapasForSequenceClassification"),Jet.forEach(t),eyo=r(A0e," (TAPAS model)"),A0e.forEach(t),oyo=i(L),H1=n(L,"LI",{});var y0e=s(H1);Dle=n(y0e,"STRONG",{});var Yet=s(Dle);ryo=r(Yet,"tapex"),Yet.forEach(t),tyo=r(y0e," \u2014 "),gN=n(y0e,"A",{href:!0});var Ket=s(gN);ayo=r(Ket,"BartForSequenceClassification"),Ket.forEach(t),nyo=r(y0e," (TAPEX model)"),y0e.forEach(t),syo=i(L),U1=n(L,"LI",{});var L0e=s(U1);Gle=n(L0e,"STRONG",{});var Zet=s(Gle);lyo=r(Zet,"transfo-xl"),Zet.forEach(t),iyo=r(L0e," \u2014 "),hN=n(L0e,"A",{href:!0});var eot=s(hN);dyo=r(eot,"TransfoXLForSequenceClassification"),eot.forEach(t),cyo=r(L0e," (Transformer-XL model)"),L0e.forEach(t),fyo=i(L),J1=n(L,"LI",{});var x0e=s(J1);Ole=n(x0e,"STRONG",{});var oot=s(Ole);myo=r(oot,"xlm"),oot.forEach(t),gyo=r(x0e," \u2014 "),pN=n(x0e,"A",{href:!0});var rot=s(pN);hyo=r(rot,"XLMForSequenceClassification"),rot.forEach(t),pyo=r(x0e," (XLM model)"),x0e.forEach(t),_yo=i(L),Y1=n(L,"LI",{});var k0e=s(Y1);Vle=n(k0e,"STRONG",{});var tot=s(Vle);uyo=r(tot,"xlm-roberta"),tot.forEach(t),byo=r(k0e," \u2014 "),_N=n(k0e,"A",{href:!0});var aot=s(_N);Fyo=r(aot,"XLMRobertaForSequenceClassification"),aot.forEach(t),vyo=r(k0e," (XLM-RoBERTa model)"),k0e.forEach(t),Tyo=i(L),K1=n(L,"LI",{});var S0e=s(K1);Xle=n(S0e,"STRONG",{});var not=s(Xle);Myo=r(not,"xlm-roberta-xl"),not.forEach(t),Eyo=r(S0e," \u2014 "),uN=n(S0e,"A",{href:!0});var sot=s(uN);Cyo=r(sot,"XLMRobertaXLForSequenceClassification"),sot.forEach(t),wyo=r(S0e," (XLM-RoBERTa-XL model)"),S0e.forEach(t),Ayo=i(L),Z1=n(L,"LI",{});var R0e=s(Z1);zle=n(R0e,"STRONG",{});var lot=s(zle);yyo=r(lot,"xlnet"),lot.forEach(t),Lyo=r(R0e," \u2014 "),bN=n(R0e,"A",{href:!0});var iot=s(bN);xyo=r(iot,"XLNetForSequenceClassification"),iot.forEach(t),kyo=r(R0e," (XLNet model)"),R0e.forEach(t),Syo=i(L),eb=n(L,"LI",{});var B0e=s(eb);Qle=n(B0e,"STRONG",{});var dot=s(Qle);Ryo=r(dot,"yoso"),dot.forEach(t),Byo=r(B0e," \u2014 "),FN=n(B0e,"A",{href:!0});var cot=s(FN);Pyo=r(cot,"YosoForSequenceClassification"),cot.forEach(t),$yo=r(B0e," (YOSO model)"),B0e.forEach(t),L.forEach(t),Iyo=i(zt),ob=n(zt,"P",{});var P0e=s(ob);qyo=r(P0e,"The model is set in evaluation mode by default using "),Wle=n(P0e,"CODE",{});var fot=s(Wle);Nyo=r(fot,"model.eval()"),fot.forEach(t),jyo=r(P0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=n(P0e,"CODE",{});var mot=s(Hle);Dyo=r(mot,"model.train()"),mot.forEach(t),P0e.forEach(t),Gyo=i(zt),Ule=n(zt,"P",{});var got=s(Ule);Oyo=r(got,"Examples:"),got.forEach(t),Vyo=i(zt),m(Xw.$$.fragment,zt),zt.forEach(t),rl.forEach(t),DRe=i(c),hd=n(c,"H2",{class:!0});var UPe=s(hd);rb=n(UPe,"A",{id:!0,class:!0,href:!0});var hot=s(rb);Jle=n(hot,"SPAN",{});var pot=s(Jle);m(zw.$$.fragment,pot),pot.forEach(t),hot.forEach(t),Xyo=i(UPe),Yle=n(UPe,"SPAN",{});var _ot=s(Yle);zyo=r(_ot,"AutoModelForMultipleChoice"),_ot.forEach(t),UPe.forEach(t),GRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(Qw.$$.fragment,al),Qyo=i(al),pd=n(al,"P",{});var EU=s(pd);Wyo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vN=n(EU,"A",{href:!0});var uot=s(vN);Hyo=r(uot,"from_pretrained()"),uot.forEach(t),Uyo=r(EU," class method or the "),TN=n(EU,"A",{href:!0});var bot=s(TN);Jyo=r(bot,"from_config()"),bot.forEach(t),Yyo=r(EU,` class
method.`),EU.forEach(t),Kyo=i(al),Ww=n(al,"P",{});var JPe=s(Ww);Zyo=r(JPe,"This class cannot be instantiated directly using "),Kle=n(JPe,"CODE",{});var Fot=s(Kle);eLo=r(Fot,"__init__()"),Fot.forEach(t),oLo=r(JPe," (throws an error)."),JPe.forEach(t),rLo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(Hw.$$.fragment,nl),tLo=i(nl),Zle=n(nl,"P",{});var vot=s(Zle);aLo=r(vot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vot.forEach(t),nLo=i(nl),_d=n(nl,"P",{});var CU=s(_d);sLo=r(CU,`Note:
Loading a model from its configuration file does `),eie=n(CU,"STRONG",{});var Tot=s(eie);lLo=r(Tot,"not"),Tot.forEach(t),iLo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=n(CU,"A",{href:!0});var Mot=s(MN);dLo=r(Mot,"from_pretrained()"),Mot.forEach(t),cLo=r(CU," to load the model weights."),CU.forEach(t),fLo=i(nl),oie=n(nl,"P",{});var Eot=s(oie);mLo=r(Eot,"Examples:"),Eot.forEach(t),gLo=i(nl),m(Uw.$$.fragment,nl),nl.forEach(t),hLo=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(Jw.$$.fragment,Qt),pLo=i(Qt),rie=n(Qt,"P",{});var Cot=s(rie);_Lo=r(Cot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cot.forEach(t),uLo=i(Qt),Ja=n(Qt,"P",{});var BC=s(Ja);bLo=r(BC,"The model class to instantiate is selected based on the "),tie=n(BC,"CODE",{});var wot=s(tie);FLo=r(wot,"model_type"),wot.forEach(t),vLo=r(BC,` property of the config object (either
passed as an argument or loaded from `),aie=n(BC,"CODE",{});var Aot=s(aie);TLo=r(Aot,"pretrained_model_name_or_path"),Aot.forEach(t),MLo=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nie=n(BC,"CODE",{});var yot=s(nie);ELo=r(yot,"pretrained_model_name_or_path"),yot.forEach(t),CLo=r(BC,":"),BC.forEach(t),wLo=i(Qt),G=n(Qt,"UL",{});var O=s(G);tb=n(O,"LI",{});var $0e=s(tb);sie=n($0e,"STRONG",{});var Lot=s(sie);ALo=r(Lot,"albert"),Lot.forEach(t),yLo=r($0e," \u2014 "),EN=n($0e,"A",{href:!0});var xot=s(EN);LLo=r(xot,"AlbertForMultipleChoice"),xot.forEach(t),xLo=r($0e," (ALBERT model)"),$0e.forEach(t),kLo=i(O),ab=n(O,"LI",{});var I0e=s(ab);lie=n(I0e,"STRONG",{});var kot=s(lie);SLo=r(kot,"bert"),kot.forEach(t),RLo=r(I0e," \u2014 "),CN=n(I0e,"A",{href:!0});var Sot=s(CN);BLo=r(Sot,"BertForMultipleChoice"),Sot.forEach(t),PLo=r(I0e," (BERT model)"),I0e.forEach(t),$Lo=i(O),nb=n(O,"LI",{});var q0e=s(nb);iie=n(q0e,"STRONG",{});var Rot=s(iie);ILo=r(Rot,"big_bird"),Rot.forEach(t),qLo=r(q0e," \u2014 "),wN=n(q0e,"A",{href:!0});var Bot=s(wN);NLo=r(Bot,"BigBirdForMultipleChoice"),Bot.forEach(t),jLo=r(q0e," (BigBird model)"),q0e.forEach(t),DLo=i(O),sb=n(O,"LI",{});var N0e=s(sb);die=n(N0e,"STRONG",{});var Pot=s(die);GLo=r(Pot,"camembert"),Pot.forEach(t),OLo=r(N0e," \u2014 "),AN=n(N0e,"A",{href:!0});var $ot=s(AN);VLo=r($ot,"CamembertForMultipleChoice"),$ot.forEach(t),XLo=r(N0e," (CamemBERT model)"),N0e.forEach(t),zLo=i(O),lb=n(O,"LI",{});var j0e=s(lb);cie=n(j0e,"STRONG",{});var Iot=s(cie);QLo=r(Iot,"canine"),Iot.forEach(t),WLo=r(j0e," \u2014 "),yN=n(j0e,"A",{href:!0});var qot=s(yN);HLo=r(qot,"CanineForMultipleChoice"),qot.forEach(t),ULo=r(j0e," (Canine model)"),j0e.forEach(t),JLo=i(O),ib=n(O,"LI",{});var D0e=s(ib);fie=n(D0e,"STRONG",{});var Not=s(fie);YLo=r(Not,"convbert"),Not.forEach(t),KLo=r(D0e," \u2014 "),LN=n(D0e,"A",{href:!0});var jot=s(LN);ZLo=r(jot,"ConvBertForMultipleChoice"),jot.forEach(t),e8o=r(D0e," (ConvBERT model)"),D0e.forEach(t),o8o=i(O),db=n(O,"LI",{});var G0e=s(db);mie=n(G0e,"STRONG",{});var Dot=s(mie);r8o=r(Dot,"data2vec-text"),Dot.forEach(t),t8o=r(G0e," \u2014 "),xN=n(G0e,"A",{href:!0});var Got=s(xN);a8o=r(Got,"Data2VecTextForMultipleChoice"),Got.forEach(t),n8o=r(G0e," (Data2VecText model)"),G0e.forEach(t),s8o=i(O),cb=n(O,"LI",{});var O0e=s(cb);gie=n(O0e,"STRONG",{});var Oot=s(gie);l8o=r(Oot,"distilbert"),Oot.forEach(t),i8o=r(O0e," \u2014 "),kN=n(O0e,"A",{href:!0});var Vot=s(kN);d8o=r(Vot,"DistilBertForMultipleChoice"),Vot.forEach(t),c8o=r(O0e," (DistilBERT model)"),O0e.forEach(t),f8o=i(O),fb=n(O,"LI",{});var V0e=s(fb);hie=n(V0e,"STRONG",{});var Xot=s(hie);m8o=r(Xot,"electra"),Xot.forEach(t),g8o=r(V0e," \u2014 "),SN=n(V0e,"A",{href:!0});var zot=s(SN);h8o=r(zot,"ElectraForMultipleChoice"),zot.forEach(t),p8o=r(V0e," (ELECTRA model)"),V0e.forEach(t),_8o=i(O),mb=n(O,"LI",{});var X0e=s(mb);pie=n(X0e,"STRONG",{});var Qot=s(pie);u8o=r(Qot,"flaubert"),Qot.forEach(t),b8o=r(X0e," \u2014 "),RN=n(X0e,"A",{href:!0});var Wot=s(RN);F8o=r(Wot,"FlaubertForMultipleChoice"),Wot.forEach(t),v8o=r(X0e," (FlauBERT model)"),X0e.forEach(t),T8o=i(O),gb=n(O,"LI",{});var z0e=s(gb);_ie=n(z0e,"STRONG",{});var Hot=s(_ie);M8o=r(Hot,"fnet"),Hot.forEach(t),E8o=r(z0e," \u2014 "),BN=n(z0e,"A",{href:!0});var Uot=s(BN);C8o=r(Uot,"FNetForMultipleChoice"),Uot.forEach(t),w8o=r(z0e," (FNet model)"),z0e.forEach(t),A8o=i(O),hb=n(O,"LI",{});var Q0e=s(hb);uie=n(Q0e,"STRONG",{});var Jot=s(uie);y8o=r(Jot,"funnel"),Jot.forEach(t),L8o=r(Q0e," \u2014 "),PN=n(Q0e,"A",{href:!0});var Yot=s(PN);x8o=r(Yot,"FunnelForMultipleChoice"),Yot.forEach(t),k8o=r(Q0e," (Funnel Transformer model)"),Q0e.forEach(t),S8o=i(O),pb=n(O,"LI",{});var W0e=s(pb);bie=n(W0e,"STRONG",{});var Kot=s(bie);R8o=r(Kot,"ibert"),Kot.forEach(t),B8o=r(W0e," \u2014 "),$N=n(W0e,"A",{href:!0});var Zot=s($N);P8o=r(Zot,"IBertForMultipleChoice"),Zot.forEach(t),$8o=r(W0e," (I-BERT model)"),W0e.forEach(t),I8o=i(O),_b=n(O,"LI",{});var H0e=s(_b);Fie=n(H0e,"STRONG",{});var ert=s(Fie);q8o=r(ert,"longformer"),ert.forEach(t),N8o=r(H0e," \u2014 "),IN=n(H0e,"A",{href:!0});var ort=s(IN);j8o=r(ort,"LongformerForMultipleChoice"),ort.forEach(t),D8o=r(H0e," (Longformer model)"),H0e.forEach(t),G8o=i(O),ub=n(O,"LI",{});var U0e=s(ub);vie=n(U0e,"STRONG",{});var rrt=s(vie);O8o=r(rrt,"megatron-bert"),rrt.forEach(t),V8o=r(U0e," \u2014 "),qN=n(U0e,"A",{href:!0});var trt=s(qN);X8o=r(trt,"MegatronBertForMultipleChoice"),trt.forEach(t),z8o=r(U0e," (MegatronBert model)"),U0e.forEach(t),Q8o=i(O),bb=n(O,"LI",{});var J0e=s(bb);Tie=n(J0e,"STRONG",{});var art=s(Tie);W8o=r(art,"mobilebert"),art.forEach(t),H8o=r(J0e," \u2014 "),NN=n(J0e,"A",{href:!0});var nrt=s(NN);U8o=r(nrt,"MobileBertForMultipleChoice"),nrt.forEach(t),J8o=r(J0e," (MobileBERT model)"),J0e.forEach(t),Y8o=i(O),Fb=n(O,"LI",{});var Y0e=s(Fb);Mie=n(Y0e,"STRONG",{});var srt=s(Mie);K8o=r(srt,"mpnet"),srt.forEach(t),Z8o=r(Y0e," \u2014 "),jN=n(Y0e,"A",{href:!0});var lrt=s(jN);e7o=r(lrt,"MPNetForMultipleChoice"),lrt.forEach(t),o7o=r(Y0e," (MPNet model)"),Y0e.forEach(t),r7o=i(O),vb=n(O,"LI",{});var K0e=s(vb);Eie=n(K0e,"STRONG",{});var irt=s(Eie);t7o=r(irt,"nystromformer"),irt.forEach(t),a7o=r(K0e," \u2014 "),DN=n(K0e,"A",{href:!0});var drt=s(DN);n7o=r(drt,"NystromformerForMultipleChoice"),drt.forEach(t),s7o=r(K0e," (Nystromformer model)"),K0e.forEach(t),l7o=i(O),Tb=n(O,"LI",{});var Z0e=s(Tb);Cie=n(Z0e,"STRONG",{});var crt=s(Cie);i7o=r(crt,"qdqbert"),crt.forEach(t),d7o=r(Z0e," \u2014 "),GN=n(Z0e,"A",{href:!0});var frt=s(GN);c7o=r(frt,"QDQBertForMultipleChoice"),frt.forEach(t),f7o=r(Z0e," (QDQBert model)"),Z0e.forEach(t),m7o=i(O),Mb=n(O,"LI",{});var eye=s(Mb);wie=n(eye,"STRONG",{});var mrt=s(wie);g7o=r(mrt,"rembert"),mrt.forEach(t),h7o=r(eye," \u2014 "),ON=n(eye,"A",{href:!0});var grt=s(ON);p7o=r(grt,"RemBertForMultipleChoice"),grt.forEach(t),_7o=r(eye," (RemBERT model)"),eye.forEach(t),u7o=i(O),Eb=n(O,"LI",{});var oye=s(Eb);Aie=n(oye,"STRONG",{});var hrt=s(Aie);b7o=r(hrt,"roberta"),hrt.forEach(t),F7o=r(oye," \u2014 "),VN=n(oye,"A",{href:!0});var prt=s(VN);v7o=r(prt,"RobertaForMultipleChoice"),prt.forEach(t),T7o=r(oye," (RoBERTa model)"),oye.forEach(t),M7o=i(O),Cb=n(O,"LI",{});var rye=s(Cb);yie=n(rye,"STRONG",{});var _rt=s(yie);E7o=r(_rt,"roformer"),_rt.forEach(t),C7o=r(rye," \u2014 "),XN=n(rye,"A",{href:!0});var urt=s(XN);w7o=r(urt,"RoFormerForMultipleChoice"),urt.forEach(t),A7o=r(rye," (RoFormer model)"),rye.forEach(t),y7o=i(O),wb=n(O,"LI",{});var tye=s(wb);Lie=n(tye,"STRONG",{});var brt=s(Lie);L7o=r(brt,"squeezebert"),brt.forEach(t),x7o=r(tye," \u2014 "),zN=n(tye,"A",{href:!0});var Frt=s(zN);k7o=r(Frt,"SqueezeBertForMultipleChoice"),Frt.forEach(t),S7o=r(tye," (SqueezeBERT model)"),tye.forEach(t),R7o=i(O),Ab=n(O,"LI",{});var aye=s(Ab);xie=n(aye,"STRONG",{});var vrt=s(xie);B7o=r(vrt,"xlm"),vrt.forEach(t),P7o=r(aye," \u2014 "),QN=n(aye,"A",{href:!0});var Trt=s(QN);$7o=r(Trt,"XLMForMultipleChoice"),Trt.forEach(t),I7o=r(aye," (XLM model)"),aye.forEach(t),q7o=i(O),yb=n(O,"LI",{});var nye=s(yb);kie=n(nye,"STRONG",{});var Mrt=s(kie);N7o=r(Mrt,"xlm-roberta"),Mrt.forEach(t),j7o=r(nye," \u2014 "),WN=n(nye,"A",{href:!0});var Ert=s(WN);D7o=r(Ert,"XLMRobertaForMultipleChoice"),Ert.forEach(t),G7o=r(nye," (XLM-RoBERTa model)"),nye.forEach(t),O7o=i(O),Lb=n(O,"LI",{});var sye=s(Lb);Sie=n(sye,"STRONG",{});var Crt=s(Sie);V7o=r(Crt,"xlm-roberta-xl"),Crt.forEach(t),X7o=r(sye," \u2014 "),HN=n(sye,"A",{href:!0});var wrt=s(HN);z7o=r(wrt,"XLMRobertaXLForMultipleChoice"),wrt.forEach(t),Q7o=r(sye," (XLM-RoBERTa-XL model)"),sye.forEach(t),W7o=i(O),xb=n(O,"LI",{});var lye=s(xb);Rie=n(lye,"STRONG",{});var Art=s(Rie);H7o=r(Art,"xlnet"),Art.forEach(t),U7o=r(lye," \u2014 "),UN=n(lye,"A",{href:!0});var yrt=s(UN);J7o=r(yrt,"XLNetForMultipleChoice"),yrt.forEach(t),Y7o=r(lye," (XLNet model)"),lye.forEach(t),K7o=i(O),kb=n(O,"LI",{});var iye=s(kb);Bie=n(iye,"STRONG",{});var Lrt=s(Bie);Z7o=r(Lrt,"yoso"),Lrt.forEach(t),e9o=r(iye," \u2014 "),JN=n(iye,"A",{href:!0});var xrt=s(JN);o9o=r(xrt,"YosoForMultipleChoice"),xrt.forEach(t),r9o=r(iye," (YOSO model)"),iye.forEach(t),O.forEach(t),t9o=i(Qt),Sb=n(Qt,"P",{});var dye=s(Sb);a9o=r(dye,"The model is set in evaluation mode by default using "),Pie=n(dye,"CODE",{});var krt=s(Pie);n9o=r(krt,"model.eval()"),krt.forEach(t),s9o=r(dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ie=n(dye,"CODE",{});var Srt=s($ie);l9o=r(Srt,"model.train()"),Srt.forEach(t),dye.forEach(t),i9o=i(Qt),Iie=n(Qt,"P",{});var Rrt=s(Iie);d9o=r(Rrt,"Examples:"),Rrt.forEach(t),c9o=i(Qt),m(Yw.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),ORe=i(c),ud=n(c,"H2",{class:!0});var YPe=s(ud);Rb=n(YPe,"A",{id:!0,class:!0,href:!0});var Brt=s(Rb);qie=n(Brt,"SPAN",{});var Prt=s(qie);m(Kw.$$.fragment,Prt),Prt.forEach(t),Brt.forEach(t),f9o=i(YPe),Nie=n(YPe,"SPAN",{});var $rt=s(Nie);m9o=r($rt,"AutoModelForNextSentencePrediction"),$rt.forEach(t),YPe.forEach(t),VRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(Zw.$$.fragment,sl),g9o=i(sl),bd=n(sl,"P",{});var wU=s(bd);h9o=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YN=n(wU,"A",{href:!0});var Irt=s(YN);p9o=r(Irt,"from_pretrained()"),Irt.forEach(t),_9o=r(wU," class method or the "),KN=n(wU,"A",{href:!0});var qrt=s(KN);u9o=r(qrt,"from_config()"),qrt.forEach(t),b9o=r(wU,` class
method.`),wU.forEach(t),F9o=i(sl),eA=n(sl,"P",{});var KPe=s(eA);v9o=r(KPe,"This class cannot be instantiated directly using "),jie=n(KPe,"CODE",{});var Nrt=s(jie);T9o=r(Nrt,"__init__()"),Nrt.forEach(t),M9o=r(KPe," (throws an error)."),KPe.forEach(t),E9o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(oA.$$.fragment,ll),C9o=i(ll),Die=n(ll,"P",{});var jrt=s(Die);w9o=r(jrt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jrt.forEach(t),A9o=i(ll),Fd=n(ll,"P",{});var AU=s(Fd);y9o=r(AU,`Note:
Loading a model from its configuration file does `),Gie=n(AU,"STRONG",{});var Drt=s(Gie);L9o=r(Drt,"not"),Drt.forEach(t),x9o=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZN=n(AU,"A",{href:!0});var Grt=s(ZN);k9o=r(Grt,"from_pretrained()"),Grt.forEach(t),S9o=r(AU," to load the model weights."),AU.forEach(t),R9o=i(ll),Oie=n(ll,"P",{});var Ort=s(Oie);B9o=r(Ort,"Examples:"),Ort.forEach(t),P9o=i(ll),m(rA.$$.fragment,ll),ll.forEach(t),$9o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(tA.$$.fragment,Wt),I9o=i(Wt),Vie=n(Wt,"P",{});var Vrt=s(Vie);q9o=r(Vrt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vrt.forEach(t),N9o=i(Wt),Ya=n(Wt,"P",{});var PC=s(Ya);j9o=r(PC,"The model class to instantiate is selected based on the "),Xie=n(PC,"CODE",{});var Xrt=s(Xie);D9o=r(Xrt,"model_type"),Xrt.forEach(t),G9o=r(PC,` property of the config object (either
passed as an argument or loaded from `),zie=n(PC,"CODE",{});var zrt=s(zie);O9o=r(zrt,"pretrained_model_name_or_path"),zrt.forEach(t),V9o=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qie=n(PC,"CODE",{});var Qrt=s(Qie);X9o=r(Qrt,"pretrained_model_name_or_path"),Qrt.forEach(t),z9o=r(PC,":"),PC.forEach(t),Q9o=i(Wt),da=n(Wt,"UL",{});var il=s(da);Bb=n(il,"LI",{});var cye=s(Bb);Wie=n(cye,"STRONG",{});var Wrt=s(Wie);W9o=r(Wrt,"bert"),Wrt.forEach(t),H9o=r(cye," \u2014 "),ej=n(cye,"A",{href:!0});var Hrt=s(ej);U9o=r(Hrt,"BertForNextSentencePrediction"),Hrt.forEach(t),J9o=r(cye," (BERT model)"),cye.forEach(t),Y9o=i(il),Pb=n(il,"LI",{});var fye=s(Pb);Hie=n(fye,"STRONG",{});var Urt=s(Hie);K9o=r(Urt,"fnet"),Urt.forEach(t),Z9o=r(fye," \u2014 "),oj=n(fye,"A",{href:!0});var Jrt=s(oj);exo=r(Jrt,"FNetForNextSentencePrediction"),Jrt.forEach(t),oxo=r(fye," (FNet model)"),fye.forEach(t),rxo=i(il),$b=n(il,"LI",{});var mye=s($b);Uie=n(mye,"STRONG",{});var Yrt=s(Uie);txo=r(Yrt,"megatron-bert"),Yrt.forEach(t),axo=r(mye," \u2014 "),rj=n(mye,"A",{href:!0});var Krt=s(rj);nxo=r(Krt,"MegatronBertForNextSentencePrediction"),Krt.forEach(t),sxo=r(mye," (MegatronBert model)"),mye.forEach(t),lxo=i(il),Ib=n(il,"LI",{});var gye=s(Ib);Jie=n(gye,"STRONG",{});var Zrt=s(Jie);ixo=r(Zrt,"mobilebert"),Zrt.forEach(t),dxo=r(gye," \u2014 "),tj=n(gye,"A",{href:!0});var ett=s(tj);cxo=r(ett,"MobileBertForNextSentencePrediction"),ett.forEach(t),fxo=r(gye," (MobileBERT model)"),gye.forEach(t),mxo=i(il),qb=n(il,"LI",{});var hye=s(qb);Yie=n(hye,"STRONG",{});var ott=s(Yie);gxo=r(ott,"qdqbert"),ott.forEach(t),hxo=r(hye," \u2014 "),aj=n(hye,"A",{href:!0});var rtt=s(aj);pxo=r(rtt,"QDQBertForNextSentencePrediction"),rtt.forEach(t),_xo=r(hye," (QDQBert model)"),hye.forEach(t),il.forEach(t),uxo=i(Wt),Nb=n(Wt,"P",{});var pye=s(Nb);bxo=r(pye,"The model is set in evaluation mode by default using "),Kie=n(pye,"CODE",{});var ttt=s(Kie);Fxo=r(ttt,"model.eval()"),ttt.forEach(t),vxo=r(pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zie=n(pye,"CODE",{});var att=s(Zie);Txo=r(att,"model.train()"),att.forEach(t),pye.forEach(t),Mxo=i(Wt),ede=n(Wt,"P",{});var ntt=s(ede);Exo=r(ntt,"Examples:"),ntt.forEach(t),Cxo=i(Wt),m(aA.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),XRe=i(c),vd=n(c,"H2",{class:!0});var ZPe=s(vd);jb=n(ZPe,"A",{id:!0,class:!0,href:!0});var stt=s(jb);ode=n(stt,"SPAN",{});var ltt=s(ode);m(nA.$$.fragment,ltt),ltt.forEach(t),stt.forEach(t),wxo=i(ZPe),rde=n(ZPe,"SPAN",{});var itt=s(rde);Axo=r(itt,"AutoModelForTokenClassification"),itt.forEach(t),ZPe.forEach(t),zRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(sA.$$.fragment,dl),yxo=i(dl),Td=n(dl,"P",{});var yU=s(Td);Lxo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nj=n(yU,"A",{href:!0});var dtt=s(nj);xxo=r(dtt,"from_pretrained()"),dtt.forEach(t),kxo=r(yU," class method or the "),sj=n(yU,"A",{href:!0});var ctt=s(sj);Sxo=r(ctt,"from_config()"),ctt.forEach(t),Rxo=r(yU,` class
method.`),yU.forEach(t),Bxo=i(dl),lA=n(dl,"P",{});var e$e=s(lA);Pxo=r(e$e,"This class cannot be instantiated directly using "),tde=n(e$e,"CODE",{});var ftt=s(tde);$xo=r(ftt,"__init__()"),ftt.forEach(t),Ixo=r(e$e," (throws an error)."),e$e.forEach(t),qxo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(iA.$$.fragment,cl),Nxo=i(cl),ade=n(cl,"P",{});var mtt=s(ade);jxo=r(mtt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mtt.forEach(t),Dxo=i(cl),Md=n(cl,"P",{});var LU=s(Md);Gxo=r(LU,`Note:
Loading a model from its configuration file does `),nde=n(LU,"STRONG",{});var gtt=s(nde);Oxo=r(gtt,"not"),gtt.forEach(t),Vxo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=n(LU,"A",{href:!0});var htt=s(lj);Xxo=r(htt,"from_pretrained()"),htt.forEach(t),zxo=r(LU," to load the model weights."),LU.forEach(t),Qxo=i(cl),sde=n(cl,"P",{});var ptt=s(sde);Wxo=r(ptt,"Examples:"),ptt.forEach(t),Hxo=i(cl),m(dA.$$.fragment,cl),cl.forEach(t),Uxo=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(cA.$$.fragment,Ht),Jxo=i(Ht),lde=n(Ht,"P",{});var _tt=s(lde);Yxo=r(_tt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_tt.forEach(t),Kxo=i(Ht),Ka=n(Ht,"P",{});var $C=s(Ka);Zxo=r($C,"The model class to instantiate is selected based on the "),ide=n($C,"CODE",{});var utt=s(ide);eko=r(utt,"model_type"),utt.forEach(t),oko=r($C,` property of the config object (either
passed as an argument or loaded from `),dde=n($C,"CODE",{});var btt=s(dde);rko=r(btt,"pretrained_model_name_or_path"),btt.forEach(t),tko=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=n($C,"CODE",{});var Ftt=s(cde);ako=r(Ftt,"pretrained_model_name_or_path"),Ftt.forEach(t),nko=r($C,":"),$C.forEach(t),sko=i(Ht),j=n(Ht,"UL",{});var D=s(j);Db=n(D,"LI",{});var _ye=s(Db);fde=n(_ye,"STRONG",{});var vtt=s(fde);lko=r(vtt,"albert"),vtt.forEach(t),iko=r(_ye," \u2014 "),ij=n(_ye,"A",{href:!0});var Ttt=s(ij);dko=r(Ttt,"AlbertForTokenClassification"),Ttt.forEach(t),cko=r(_ye," (ALBERT model)"),_ye.forEach(t),fko=i(D),Gb=n(D,"LI",{});var uye=s(Gb);mde=n(uye,"STRONG",{});var Mtt=s(mde);mko=r(Mtt,"bert"),Mtt.forEach(t),gko=r(uye," \u2014 "),dj=n(uye,"A",{href:!0});var Ett=s(dj);hko=r(Ett,"BertForTokenClassification"),Ett.forEach(t),pko=r(uye," (BERT model)"),uye.forEach(t),_ko=i(D),Ob=n(D,"LI",{});var bye=s(Ob);gde=n(bye,"STRONG",{});var Ctt=s(gde);uko=r(Ctt,"big_bird"),Ctt.forEach(t),bko=r(bye," \u2014 "),cj=n(bye,"A",{href:!0});var wtt=s(cj);Fko=r(wtt,"BigBirdForTokenClassification"),wtt.forEach(t),vko=r(bye," (BigBird model)"),bye.forEach(t),Tko=i(D),Vb=n(D,"LI",{});var Fye=s(Vb);hde=n(Fye,"STRONG",{});var Att=s(hde);Mko=r(Att,"camembert"),Att.forEach(t),Eko=r(Fye," \u2014 "),fj=n(Fye,"A",{href:!0});var ytt=s(fj);Cko=r(ytt,"CamembertForTokenClassification"),ytt.forEach(t),wko=r(Fye," (CamemBERT model)"),Fye.forEach(t),Ako=i(D),Xb=n(D,"LI",{});var vye=s(Xb);pde=n(vye,"STRONG",{});var Ltt=s(pde);yko=r(Ltt,"canine"),Ltt.forEach(t),Lko=r(vye," \u2014 "),mj=n(vye,"A",{href:!0});var xtt=s(mj);xko=r(xtt,"CanineForTokenClassification"),xtt.forEach(t),kko=r(vye," (Canine model)"),vye.forEach(t),Sko=i(D),zb=n(D,"LI",{});var Tye=s(zb);_de=n(Tye,"STRONG",{});var ktt=s(_de);Rko=r(ktt,"convbert"),ktt.forEach(t),Bko=r(Tye," \u2014 "),gj=n(Tye,"A",{href:!0});var Stt=s(gj);Pko=r(Stt,"ConvBertForTokenClassification"),Stt.forEach(t),$ko=r(Tye," (ConvBERT model)"),Tye.forEach(t),Iko=i(D),Qb=n(D,"LI",{});var Mye=s(Qb);ude=n(Mye,"STRONG",{});var Rtt=s(ude);qko=r(Rtt,"data2vec-text"),Rtt.forEach(t),Nko=r(Mye," \u2014 "),hj=n(Mye,"A",{href:!0});var Btt=s(hj);jko=r(Btt,"Data2VecTextForTokenClassification"),Btt.forEach(t),Dko=r(Mye," (Data2VecText model)"),Mye.forEach(t),Gko=i(D),Wb=n(D,"LI",{});var Eye=s(Wb);bde=n(Eye,"STRONG",{});var Ptt=s(bde);Oko=r(Ptt,"deberta"),Ptt.forEach(t),Vko=r(Eye," \u2014 "),pj=n(Eye,"A",{href:!0});var $tt=s(pj);Xko=r($tt,"DebertaForTokenClassification"),$tt.forEach(t),zko=r(Eye," (DeBERTa model)"),Eye.forEach(t),Qko=i(D),Hb=n(D,"LI",{});var Cye=s(Hb);Fde=n(Cye,"STRONG",{});var Itt=s(Fde);Wko=r(Itt,"deberta-v2"),Itt.forEach(t),Hko=r(Cye," \u2014 "),_j=n(Cye,"A",{href:!0});var qtt=s(_j);Uko=r(qtt,"DebertaV2ForTokenClassification"),qtt.forEach(t),Jko=r(Cye," (DeBERTa-v2 model)"),Cye.forEach(t),Yko=i(D),Ub=n(D,"LI",{});var wye=s(Ub);vde=n(wye,"STRONG",{});var Ntt=s(vde);Kko=r(Ntt,"distilbert"),Ntt.forEach(t),Zko=r(wye," \u2014 "),uj=n(wye,"A",{href:!0});var jtt=s(uj);eSo=r(jtt,"DistilBertForTokenClassification"),jtt.forEach(t),oSo=r(wye," (DistilBERT model)"),wye.forEach(t),rSo=i(D),Jb=n(D,"LI",{});var Aye=s(Jb);Tde=n(Aye,"STRONG",{});var Dtt=s(Tde);tSo=r(Dtt,"electra"),Dtt.forEach(t),aSo=r(Aye," \u2014 "),bj=n(Aye,"A",{href:!0});var Gtt=s(bj);nSo=r(Gtt,"ElectraForTokenClassification"),Gtt.forEach(t),sSo=r(Aye," (ELECTRA model)"),Aye.forEach(t),lSo=i(D),Yb=n(D,"LI",{});var yye=s(Yb);Mde=n(yye,"STRONG",{});var Ott=s(Mde);iSo=r(Ott,"flaubert"),Ott.forEach(t),dSo=r(yye," \u2014 "),Fj=n(yye,"A",{href:!0});var Vtt=s(Fj);cSo=r(Vtt,"FlaubertForTokenClassification"),Vtt.forEach(t),fSo=r(yye," (FlauBERT model)"),yye.forEach(t),mSo=i(D),Kb=n(D,"LI",{});var Lye=s(Kb);Ede=n(Lye,"STRONG",{});var Xtt=s(Ede);gSo=r(Xtt,"fnet"),Xtt.forEach(t),hSo=r(Lye," \u2014 "),vj=n(Lye,"A",{href:!0});var ztt=s(vj);pSo=r(ztt,"FNetForTokenClassification"),ztt.forEach(t),_So=r(Lye," (FNet model)"),Lye.forEach(t),uSo=i(D),Zb=n(D,"LI",{});var xye=s(Zb);Cde=n(xye,"STRONG",{});var Qtt=s(Cde);bSo=r(Qtt,"funnel"),Qtt.forEach(t),FSo=r(xye," \u2014 "),Tj=n(xye,"A",{href:!0});var Wtt=s(Tj);vSo=r(Wtt,"FunnelForTokenClassification"),Wtt.forEach(t),TSo=r(xye," (Funnel Transformer model)"),xye.forEach(t),MSo=i(D),e5=n(D,"LI",{});var kye=s(e5);wde=n(kye,"STRONG",{});var Htt=s(wde);ESo=r(Htt,"gpt2"),Htt.forEach(t),CSo=r(kye," \u2014 "),Mj=n(kye,"A",{href:!0});var Utt=s(Mj);wSo=r(Utt,"GPT2ForTokenClassification"),Utt.forEach(t),ASo=r(kye," (OpenAI GPT-2 model)"),kye.forEach(t),ySo=i(D),o5=n(D,"LI",{});var Sye=s(o5);Ade=n(Sye,"STRONG",{});var Jtt=s(Ade);LSo=r(Jtt,"ibert"),Jtt.forEach(t),xSo=r(Sye," \u2014 "),Ej=n(Sye,"A",{href:!0});var Ytt=s(Ej);kSo=r(Ytt,"IBertForTokenClassification"),Ytt.forEach(t),SSo=r(Sye," (I-BERT model)"),Sye.forEach(t),RSo=i(D),r5=n(D,"LI",{});var Rye=s(r5);yde=n(Rye,"STRONG",{});var Ktt=s(yde);BSo=r(Ktt,"layoutlm"),Ktt.forEach(t),PSo=r(Rye," \u2014 "),Cj=n(Rye,"A",{href:!0});var Ztt=s(Cj);$So=r(Ztt,"LayoutLMForTokenClassification"),Ztt.forEach(t),ISo=r(Rye," (LayoutLM model)"),Rye.forEach(t),qSo=i(D),t5=n(D,"LI",{});var Bye=s(t5);Lde=n(Bye,"STRONG",{});var eat=s(Lde);NSo=r(eat,"layoutlmv2"),eat.forEach(t),jSo=r(Bye," \u2014 "),wj=n(Bye,"A",{href:!0});var oat=s(wj);DSo=r(oat,"LayoutLMv2ForTokenClassification"),oat.forEach(t),GSo=r(Bye," (LayoutLMv2 model)"),Bye.forEach(t),OSo=i(D),a5=n(D,"LI",{});var Pye=s(a5);xde=n(Pye,"STRONG",{});var rat=s(xde);VSo=r(rat,"longformer"),rat.forEach(t),XSo=r(Pye," \u2014 "),Aj=n(Pye,"A",{href:!0});var tat=s(Aj);zSo=r(tat,"LongformerForTokenClassification"),tat.forEach(t),QSo=r(Pye," (Longformer model)"),Pye.forEach(t),WSo=i(D),n5=n(D,"LI",{});var $ye=s(n5);kde=n($ye,"STRONG",{});var aat=s(kde);HSo=r(aat,"megatron-bert"),aat.forEach(t),USo=r($ye," \u2014 "),yj=n($ye,"A",{href:!0});var nat=s(yj);JSo=r(nat,"MegatronBertForTokenClassification"),nat.forEach(t),YSo=r($ye," (MegatronBert model)"),$ye.forEach(t),KSo=i(D),s5=n(D,"LI",{});var Iye=s(s5);Sde=n(Iye,"STRONG",{});var sat=s(Sde);ZSo=r(sat,"mobilebert"),sat.forEach(t),eRo=r(Iye," \u2014 "),Lj=n(Iye,"A",{href:!0});var lat=s(Lj);oRo=r(lat,"MobileBertForTokenClassification"),lat.forEach(t),rRo=r(Iye," (MobileBERT model)"),Iye.forEach(t),tRo=i(D),l5=n(D,"LI",{});var qye=s(l5);Rde=n(qye,"STRONG",{});var iat=s(Rde);aRo=r(iat,"mpnet"),iat.forEach(t),nRo=r(qye," \u2014 "),xj=n(qye,"A",{href:!0});var dat=s(xj);sRo=r(dat,"MPNetForTokenClassification"),dat.forEach(t),lRo=r(qye," (MPNet model)"),qye.forEach(t),iRo=i(D),i5=n(D,"LI",{});var Nye=s(i5);Bde=n(Nye,"STRONG",{});var cat=s(Bde);dRo=r(cat,"nystromformer"),cat.forEach(t),cRo=r(Nye," \u2014 "),kj=n(Nye,"A",{href:!0});var fat=s(kj);fRo=r(fat,"NystromformerForTokenClassification"),fat.forEach(t),mRo=r(Nye," (Nystromformer model)"),Nye.forEach(t),gRo=i(D),d5=n(D,"LI",{});var jye=s(d5);Pde=n(jye,"STRONG",{});var mat=s(Pde);hRo=r(mat,"qdqbert"),mat.forEach(t),pRo=r(jye," \u2014 "),Sj=n(jye,"A",{href:!0});var gat=s(Sj);_Ro=r(gat,"QDQBertForTokenClassification"),gat.forEach(t),uRo=r(jye," (QDQBert model)"),jye.forEach(t),bRo=i(D),c5=n(D,"LI",{});var Dye=s(c5);$de=n(Dye,"STRONG",{});var hat=s($de);FRo=r(hat,"rembert"),hat.forEach(t),vRo=r(Dye," \u2014 "),Rj=n(Dye,"A",{href:!0});var pat=s(Rj);TRo=r(pat,"RemBertForTokenClassification"),pat.forEach(t),MRo=r(Dye," (RemBERT model)"),Dye.forEach(t),ERo=i(D),f5=n(D,"LI",{});var Gye=s(f5);Ide=n(Gye,"STRONG",{});var _at=s(Ide);CRo=r(_at,"roberta"),_at.forEach(t),wRo=r(Gye," \u2014 "),Bj=n(Gye,"A",{href:!0});var uat=s(Bj);ARo=r(uat,"RobertaForTokenClassification"),uat.forEach(t),yRo=r(Gye," (RoBERTa model)"),Gye.forEach(t),LRo=i(D),m5=n(D,"LI",{});var Oye=s(m5);qde=n(Oye,"STRONG",{});var bat=s(qde);xRo=r(bat,"roformer"),bat.forEach(t),kRo=r(Oye," \u2014 "),Pj=n(Oye,"A",{href:!0});var Fat=s(Pj);SRo=r(Fat,"RoFormerForTokenClassification"),Fat.forEach(t),RRo=r(Oye," (RoFormer model)"),Oye.forEach(t),BRo=i(D),g5=n(D,"LI",{});var Vye=s(g5);Nde=n(Vye,"STRONG",{});var vat=s(Nde);PRo=r(vat,"squeezebert"),vat.forEach(t),$Ro=r(Vye," \u2014 "),$j=n(Vye,"A",{href:!0});var Tat=s($j);IRo=r(Tat,"SqueezeBertForTokenClassification"),Tat.forEach(t),qRo=r(Vye," (SqueezeBERT model)"),Vye.forEach(t),NRo=i(D),h5=n(D,"LI",{});var Xye=s(h5);jde=n(Xye,"STRONG",{});var Mat=s(jde);jRo=r(Mat,"xlm"),Mat.forEach(t),DRo=r(Xye," \u2014 "),Ij=n(Xye,"A",{href:!0});var Eat=s(Ij);GRo=r(Eat,"XLMForTokenClassification"),Eat.forEach(t),ORo=r(Xye," (XLM model)"),Xye.forEach(t),VRo=i(D),p5=n(D,"LI",{});var zye=s(p5);Dde=n(zye,"STRONG",{});var Cat=s(Dde);XRo=r(Cat,"xlm-roberta"),Cat.forEach(t),zRo=r(zye," \u2014 "),qj=n(zye,"A",{href:!0});var wat=s(qj);QRo=r(wat,"XLMRobertaForTokenClassification"),wat.forEach(t),WRo=r(zye," (XLM-RoBERTa model)"),zye.forEach(t),HRo=i(D),_5=n(D,"LI",{});var Qye=s(_5);Gde=n(Qye,"STRONG",{});var Aat=s(Gde);URo=r(Aat,"xlm-roberta-xl"),Aat.forEach(t),JRo=r(Qye," \u2014 "),Nj=n(Qye,"A",{href:!0});var yat=s(Nj);YRo=r(yat,"XLMRobertaXLForTokenClassification"),yat.forEach(t),KRo=r(Qye," (XLM-RoBERTa-XL model)"),Qye.forEach(t),ZRo=i(D),u5=n(D,"LI",{});var Wye=s(u5);Ode=n(Wye,"STRONG",{});var Lat=s(Ode);eBo=r(Lat,"xlnet"),Lat.forEach(t),oBo=r(Wye," \u2014 "),jj=n(Wye,"A",{href:!0});var xat=s(jj);rBo=r(xat,"XLNetForTokenClassification"),xat.forEach(t),tBo=r(Wye," (XLNet model)"),Wye.forEach(t),aBo=i(D),b5=n(D,"LI",{});var Hye=s(b5);Vde=n(Hye,"STRONG",{});var kat=s(Vde);nBo=r(kat,"yoso"),kat.forEach(t),sBo=r(Hye," \u2014 "),Dj=n(Hye,"A",{href:!0});var Sat=s(Dj);lBo=r(Sat,"YosoForTokenClassification"),Sat.forEach(t),iBo=r(Hye," (YOSO model)"),Hye.forEach(t),D.forEach(t),dBo=i(Ht),F5=n(Ht,"P",{});var Uye=s(F5);cBo=r(Uye,"The model is set in evaluation mode by default using "),Xde=n(Uye,"CODE",{});var Rat=s(Xde);fBo=r(Rat,"model.eval()"),Rat.forEach(t),mBo=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=n(Uye,"CODE",{});var Bat=s(zde);gBo=r(Bat,"model.train()"),Bat.forEach(t),Uye.forEach(t),hBo=i(Ht),Qde=n(Ht,"P",{});var Pat=s(Qde);pBo=r(Pat,"Examples:"),Pat.forEach(t),_Bo=i(Ht),m(fA.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),QRe=i(c),Ed=n(c,"H2",{class:!0});var o$e=s(Ed);v5=n(o$e,"A",{id:!0,class:!0,href:!0});var $at=s(v5);Wde=n($at,"SPAN",{});var Iat=s(Wde);m(mA.$$.fragment,Iat),Iat.forEach(t),$at.forEach(t),uBo=i(o$e),Hde=n(o$e,"SPAN",{});var qat=s(Hde);bBo=r(qat,"AutoModelForQuestionAnswering"),qat.forEach(t),o$e.forEach(t),WRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(gA.$$.fragment,fl),FBo=i(fl),Cd=n(fl,"P",{});var xU=s(Cd);vBo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Gj=n(xU,"A",{href:!0});var Nat=s(Gj);TBo=r(Nat,"from_pretrained()"),Nat.forEach(t),MBo=r(xU," class method or the "),Oj=n(xU,"A",{href:!0});var jat=s(Oj);EBo=r(jat,"from_config()"),jat.forEach(t),CBo=r(xU,` class
method.`),xU.forEach(t),wBo=i(fl),hA=n(fl,"P",{});var r$e=s(hA);ABo=r(r$e,"This class cannot be instantiated directly using "),Ude=n(r$e,"CODE",{});var Dat=s(Ude);yBo=r(Dat,"__init__()"),Dat.forEach(t),LBo=r(r$e," (throws an error)."),r$e.forEach(t),xBo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(pA.$$.fragment,ml),kBo=i(ml),Jde=n(ml,"P",{});var Gat=s(Jde);SBo=r(Gat,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gat.forEach(t),RBo=i(ml),wd=n(ml,"P",{});var kU=s(wd);BBo=r(kU,`Note:
Loading a model from its configuration file does `),Yde=n(kU,"STRONG",{});var Oat=s(Yde);PBo=r(Oat,"not"),Oat.forEach(t),$Bo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=n(kU,"A",{href:!0});var Vat=s(Vj);IBo=r(Vat,"from_pretrained()"),Vat.forEach(t),qBo=r(kU," to load the model weights."),kU.forEach(t),NBo=i(ml),Kde=n(ml,"P",{});var Xat=s(Kde);jBo=r(Xat,"Examples:"),Xat.forEach(t),DBo=i(ml),m(_A.$$.fragment,ml),ml.forEach(t),GBo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(uA.$$.fragment,Ut),OBo=i(Ut),Zde=n(Ut,"P",{});var zat=s(Zde);VBo=r(zat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zat.forEach(t),XBo=i(Ut),Za=n(Ut,"P",{});var IC=s(Za);zBo=r(IC,"The model class to instantiate is selected based on the "),ece=n(IC,"CODE",{});var Qat=s(ece);QBo=r(Qat,"model_type"),Qat.forEach(t),WBo=r(IC,` property of the config object (either
passed as an argument or loaded from `),oce=n(IC,"CODE",{});var Wat=s(oce);HBo=r(Wat,"pretrained_model_name_or_path"),Wat.forEach(t),UBo=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=n(IC,"CODE",{});var Hat=s(rce);JBo=r(Hat,"pretrained_model_name_or_path"),Hat.forEach(t),YBo=r(IC,":"),IC.forEach(t),KBo=i(Ut),R=n(Ut,"UL",{});var P=s(R);T5=n(P,"LI",{});var Jye=s(T5);tce=n(Jye,"STRONG",{});var Uat=s(tce);ZBo=r(Uat,"albert"),Uat.forEach(t),ePo=r(Jye," \u2014 "),Xj=n(Jye,"A",{href:!0});var Jat=s(Xj);oPo=r(Jat,"AlbertForQuestionAnswering"),Jat.forEach(t),rPo=r(Jye," (ALBERT model)"),Jye.forEach(t),tPo=i(P),M5=n(P,"LI",{});var Yye=s(M5);ace=n(Yye,"STRONG",{});var Yat=s(ace);aPo=r(Yat,"bart"),Yat.forEach(t),nPo=r(Yye," \u2014 "),zj=n(Yye,"A",{href:!0});var Kat=s(zj);sPo=r(Kat,"BartForQuestionAnswering"),Kat.forEach(t),lPo=r(Yye," (BART model)"),Yye.forEach(t),iPo=i(P),E5=n(P,"LI",{});var Kye=s(E5);nce=n(Kye,"STRONG",{});var Zat=s(nce);dPo=r(Zat,"bert"),Zat.forEach(t),cPo=r(Kye," \u2014 "),Qj=n(Kye,"A",{href:!0});var ent=s(Qj);fPo=r(ent,"BertForQuestionAnswering"),ent.forEach(t),mPo=r(Kye," (BERT model)"),Kye.forEach(t),gPo=i(P),C5=n(P,"LI",{});var Zye=s(C5);sce=n(Zye,"STRONG",{});var ont=s(sce);hPo=r(ont,"big_bird"),ont.forEach(t),pPo=r(Zye," \u2014 "),Wj=n(Zye,"A",{href:!0});var rnt=s(Wj);_Po=r(rnt,"BigBirdForQuestionAnswering"),rnt.forEach(t),uPo=r(Zye," (BigBird model)"),Zye.forEach(t),bPo=i(P),w5=n(P,"LI",{});var eLe=s(w5);lce=n(eLe,"STRONG",{});var tnt=s(lce);FPo=r(tnt,"bigbird_pegasus"),tnt.forEach(t),vPo=r(eLe," \u2014 "),Hj=n(eLe,"A",{href:!0});var ant=s(Hj);TPo=r(ant,"BigBirdPegasusForQuestionAnswering"),ant.forEach(t),MPo=r(eLe," (BigBirdPegasus model)"),eLe.forEach(t),EPo=i(P),A5=n(P,"LI",{});var oLe=s(A5);ice=n(oLe,"STRONG",{});var nnt=s(ice);CPo=r(nnt,"camembert"),nnt.forEach(t),wPo=r(oLe," \u2014 "),Uj=n(oLe,"A",{href:!0});var snt=s(Uj);APo=r(snt,"CamembertForQuestionAnswering"),snt.forEach(t),yPo=r(oLe," (CamemBERT model)"),oLe.forEach(t),LPo=i(P),y5=n(P,"LI",{});var rLe=s(y5);dce=n(rLe,"STRONG",{});var lnt=s(dce);xPo=r(lnt,"canine"),lnt.forEach(t),kPo=r(rLe," \u2014 "),Jj=n(rLe,"A",{href:!0});var int=s(Jj);SPo=r(int,"CanineForQuestionAnswering"),int.forEach(t),RPo=r(rLe," (Canine model)"),rLe.forEach(t),BPo=i(P),L5=n(P,"LI",{});var tLe=s(L5);cce=n(tLe,"STRONG",{});var dnt=s(cce);PPo=r(dnt,"convbert"),dnt.forEach(t),$Po=r(tLe," \u2014 "),Yj=n(tLe,"A",{href:!0});var cnt=s(Yj);IPo=r(cnt,"ConvBertForQuestionAnswering"),cnt.forEach(t),qPo=r(tLe," (ConvBERT model)"),tLe.forEach(t),NPo=i(P),x5=n(P,"LI",{});var aLe=s(x5);fce=n(aLe,"STRONG",{});var fnt=s(fce);jPo=r(fnt,"data2vec-text"),fnt.forEach(t),DPo=r(aLe," \u2014 "),Kj=n(aLe,"A",{href:!0});var mnt=s(Kj);GPo=r(mnt,"Data2VecTextForQuestionAnswering"),mnt.forEach(t),OPo=r(aLe," (Data2VecText model)"),aLe.forEach(t),VPo=i(P),k5=n(P,"LI",{});var nLe=s(k5);mce=n(nLe,"STRONG",{});var gnt=s(mce);XPo=r(gnt,"deberta"),gnt.forEach(t),zPo=r(nLe," \u2014 "),Zj=n(nLe,"A",{href:!0});var hnt=s(Zj);QPo=r(hnt,"DebertaForQuestionAnswering"),hnt.forEach(t),WPo=r(nLe," (DeBERTa model)"),nLe.forEach(t),HPo=i(P),S5=n(P,"LI",{});var sLe=s(S5);gce=n(sLe,"STRONG",{});var pnt=s(gce);UPo=r(pnt,"deberta-v2"),pnt.forEach(t),JPo=r(sLe," \u2014 "),eD=n(sLe,"A",{href:!0});var _nt=s(eD);YPo=r(_nt,"DebertaV2ForQuestionAnswering"),_nt.forEach(t),KPo=r(sLe," (DeBERTa-v2 model)"),sLe.forEach(t),ZPo=i(P),R5=n(P,"LI",{});var lLe=s(R5);hce=n(lLe,"STRONG",{});var unt=s(hce);e$o=r(unt,"distilbert"),unt.forEach(t),o$o=r(lLe," \u2014 "),oD=n(lLe,"A",{href:!0});var bnt=s(oD);r$o=r(bnt,"DistilBertForQuestionAnswering"),bnt.forEach(t),t$o=r(lLe," (DistilBERT model)"),lLe.forEach(t),a$o=i(P),B5=n(P,"LI",{});var iLe=s(B5);pce=n(iLe,"STRONG",{});var Fnt=s(pce);n$o=r(Fnt,"electra"),Fnt.forEach(t),s$o=r(iLe," \u2014 "),rD=n(iLe,"A",{href:!0});var vnt=s(rD);l$o=r(vnt,"ElectraForQuestionAnswering"),vnt.forEach(t),i$o=r(iLe," (ELECTRA model)"),iLe.forEach(t),d$o=i(P),P5=n(P,"LI",{});var dLe=s(P5);_ce=n(dLe,"STRONG",{});var Tnt=s(_ce);c$o=r(Tnt,"flaubert"),Tnt.forEach(t),f$o=r(dLe," \u2014 "),tD=n(dLe,"A",{href:!0});var Mnt=s(tD);m$o=r(Mnt,"FlaubertForQuestionAnsweringSimple"),Mnt.forEach(t),g$o=r(dLe," (FlauBERT model)"),dLe.forEach(t),h$o=i(P),$5=n(P,"LI",{});var cLe=s($5);uce=n(cLe,"STRONG",{});var Ent=s(uce);p$o=r(Ent,"fnet"),Ent.forEach(t),_$o=r(cLe," \u2014 "),aD=n(cLe,"A",{href:!0});var Cnt=s(aD);u$o=r(Cnt,"FNetForQuestionAnswering"),Cnt.forEach(t),b$o=r(cLe," (FNet model)"),cLe.forEach(t),F$o=i(P),I5=n(P,"LI",{});var fLe=s(I5);bce=n(fLe,"STRONG",{});var wnt=s(bce);v$o=r(wnt,"funnel"),wnt.forEach(t),T$o=r(fLe," \u2014 "),nD=n(fLe,"A",{href:!0});var Ant=s(nD);M$o=r(Ant,"FunnelForQuestionAnswering"),Ant.forEach(t),E$o=r(fLe," (Funnel Transformer model)"),fLe.forEach(t),C$o=i(P),q5=n(P,"LI",{});var mLe=s(q5);Fce=n(mLe,"STRONG",{});var ynt=s(Fce);w$o=r(ynt,"gptj"),ynt.forEach(t),A$o=r(mLe," \u2014 "),sD=n(mLe,"A",{href:!0});var Lnt=s(sD);y$o=r(Lnt,"GPTJForQuestionAnswering"),Lnt.forEach(t),L$o=r(mLe," (GPT-J model)"),mLe.forEach(t),x$o=i(P),N5=n(P,"LI",{});var gLe=s(N5);vce=n(gLe,"STRONG",{});var xnt=s(vce);k$o=r(xnt,"ibert"),xnt.forEach(t),S$o=r(gLe," \u2014 "),lD=n(gLe,"A",{href:!0});var knt=s(lD);R$o=r(knt,"IBertForQuestionAnswering"),knt.forEach(t),B$o=r(gLe," (I-BERT model)"),gLe.forEach(t),P$o=i(P),j5=n(P,"LI",{});var hLe=s(j5);Tce=n(hLe,"STRONG",{});var Snt=s(Tce);$$o=r(Snt,"layoutlmv2"),Snt.forEach(t),I$o=r(hLe," \u2014 "),iD=n(hLe,"A",{href:!0});var Rnt=s(iD);q$o=r(Rnt,"LayoutLMv2ForQuestionAnswering"),Rnt.forEach(t),N$o=r(hLe," (LayoutLMv2 model)"),hLe.forEach(t),j$o=i(P),D5=n(P,"LI",{});var pLe=s(D5);Mce=n(pLe,"STRONG",{});var Bnt=s(Mce);D$o=r(Bnt,"led"),Bnt.forEach(t),G$o=r(pLe," \u2014 "),dD=n(pLe,"A",{href:!0});var Pnt=s(dD);O$o=r(Pnt,"LEDForQuestionAnswering"),Pnt.forEach(t),V$o=r(pLe," (LED model)"),pLe.forEach(t),X$o=i(P),G5=n(P,"LI",{});var _Le=s(G5);Ece=n(_Le,"STRONG",{});var $nt=s(Ece);z$o=r($nt,"longformer"),$nt.forEach(t),Q$o=r(_Le," \u2014 "),cD=n(_Le,"A",{href:!0});var Int=s(cD);W$o=r(Int,"LongformerForQuestionAnswering"),Int.forEach(t),H$o=r(_Le," (Longformer model)"),_Le.forEach(t),U$o=i(P),O5=n(P,"LI",{});var uLe=s(O5);Cce=n(uLe,"STRONG",{});var qnt=s(Cce);J$o=r(qnt,"lxmert"),qnt.forEach(t),Y$o=r(uLe," \u2014 "),fD=n(uLe,"A",{href:!0});var Nnt=s(fD);K$o=r(Nnt,"LxmertForQuestionAnswering"),Nnt.forEach(t),Z$o=r(uLe," (LXMERT model)"),uLe.forEach(t),eIo=i(P),V5=n(P,"LI",{});var bLe=s(V5);wce=n(bLe,"STRONG",{});var jnt=s(wce);oIo=r(jnt,"mbart"),jnt.forEach(t),rIo=r(bLe," \u2014 "),mD=n(bLe,"A",{href:!0});var Dnt=s(mD);tIo=r(Dnt,"MBartForQuestionAnswering"),Dnt.forEach(t),aIo=r(bLe," (mBART model)"),bLe.forEach(t),nIo=i(P),X5=n(P,"LI",{});var FLe=s(X5);Ace=n(FLe,"STRONG",{});var Gnt=s(Ace);sIo=r(Gnt,"megatron-bert"),Gnt.forEach(t),lIo=r(FLe," \u2014 "),gD=n(FLe,"A",{href:!0});var Ont=s(gD);iIo=r(Ont,"MegatronBertForQuestionAnswering"),Ont.forEach(t),dIo=r(FLe," (MegatronBert model)"),FLe.forEach(t),cIo=i(P),z5=n(P,"LI",{});var vLe=s(z5);yce=n(vLe,"STRONG",{});var Vnt=s(yce);fIo=r(Vnt,"mobilebert"),Vnt.forEach(t),mIo=r(vLe," \u2014 "),hD=n(vLe,"A",{href:!0});var Xnt=s(hD);gIo=r(Xnt,"MobileBertForQuestionAnswering"),Xnt.forEach(t),hIo=r(vLe," (MobileBERT model)"),vLe.forEach(t),pIo=i(P),Q5=n(P,"LI",{});var TLe=s(Q5);Lce=n(TLe,"STRONG",{});var znt=s(Lce);_Io=r(znt,"mpnet"),znt.forEach(t),uIo=r(TLe," \u2014 "),pD=n(TLe,"A",{href:!0});var Qnt=s(pD);bIo=r(Qnt,"MPNetForQuestionAnswering"),Qnt.forEach(t),FIo=r(TLe," (MPNet model)"),TLe.forEach(t),vIo=i(P),W5=n(P,"LI",{});var MLe=s(W5);xce=n(MLe,"STRONG",{});var Wnt=s(xce);TIo=r(Wnt,"nystromformer"),Wnt.forEach(t),MIo=r(MLe," \u2014 "),_D=n(MLe,"A",{href:!0});var Hnt=s(_D);EIo=r(Hnt,"NystromformerForQuestionAnswering"),Hnt.forEach(t),CIo=r(MLe," (Nystromformer model)"),MLe.forEach(t),wIo=i(P),H5=n(P,"LI",{});var ELe=s(H5);kce=n(ELe,"STRONG",{});var Unt=s(kce);AIo=r(Unt,"qdqbert"),Unt.forEach(t),yIo=r(ELe," \u2014 "),uD=n(ELe,"A",{href:!0});var Jnt=s(uD);LIo=r(Jnt,"QDQBertForQuestionAnswering"),Jnt.forEach(t),xIo=r(ELe," (QDQBert model)"),ELe.forEach(t),kIo=i(P),U5=n(P,"LI",{});var CLe=s(U5);Sce=n(CLe,"STRONG",{});var Ynt=s(Sce);SIo=r(Ynt,"reformer"),Ynt.forEach(t),RIo=r(CLe," \u2014 "),bD=n(CLe,"A",{href:!0});var Knt=s(bD);BIo=r(Knt,"ReformerForQuestionAnswering"),Knt.forEach(t),PIo=r(CLe," (Reformer model)"),CLe.forEach(t),$Io=i(P),J5=n(P,"LI",{});var wLe=s(J5);Rce=n(wLe,"STRONG",{});var Znt=s(Rce);IIo=r(Znt,"rembert"),Znt.forEach(t),qIo=r(wLe," \u2014 "),FD=n(wLe,"A",{href:!0});var est=s(FD);NIo=r(est,"RemBertForQuestionAnswering"),est.forEach(t),jIo=r(wLe," (RemBERT model)"),wLe.forEach(t),DIo=i(P),Y5=n(P,"LI",{});var ALe=s(Y5);Bce=n(ALe,"STRONG",{});var ost=s(Bce);GIo=r(ost,"roberta"),ost.forEach(t),OIo=r(ALe," \u2014 "),vD=n(ALe,"A",{href:!0});var rst=s(vD);VIo=r(rst,"RobertaForQuestionAnswering"),rst.forEach(t),XIo=r(ALe," (RoBERTa model)"),ALe.forEach(t),zIo=i(P),K5=n(P,"LI",{});var yLe=s(K5);Pce=n(yLe,"STRONG",{});var tst=s(Pce);QIo=r(tst,"roformer"),tst.forEach(t),WIo=r(yLe," \u2014 "),TD=n(yLe,"A",{href:!0});var ast=s(TD);HIo=r(ast,"RoFormerForQuestionAnswering"),ast.forEach(t),UIo=r(yLe," (RoFormer model)"),yLe.forEach(t),JIo=i(P),Z5=n(P,"LI",{});var LLe=s(Z5);$ce=n(LLe,"STRONG",{});var nst=s($ce);YIo=r(nst,"splinter"),nst.forEach(t),KIo=r(LLe," \u2014 "),MD=n(LLe,"A",{href:!0});var sst=s(MD);ZIo=r(sst,"SplinterForQuestionAnswering"),sst.forEach(t),eqo=r(LLe," (Splinter model)"),LLe.forEach(t),oqo=i(P),eF=n(P,"LI",{});var xLe=s(eF);Ice=n(xLe,"STRONG",{});var lst=s(Ice);rqo=r(lst,"squeezebert"),lst.forEach(t),tqo=r(xLe," \u2014 "),ED=n(xLe,"A",{href:!0});var ist=s(ED);aqo=r(ist,"SqueezeBertForQuestionAnswering"),ist.forEach(t),nqo=r(xLe," (SqueezeBERT model)"),xLe.forEach(t),sqo=i(P),oF=n(P,"LI",{});var kLe=s(oF);qce=n(kLe,"STRONG",{});var dst=s(qce);lqo=r(dst,"xlm"),dst.forEach(t),iqo=r(kLe," \u2014 "),CD=n(kLe,"A",{href:!0});var cst=s(CD);dqo=r(cst,"XLMForQuestionAnsweringSimple"),cst.forEach(t),cqo=r(kLe," (XLM model)"),kLe.forEach(t),fqo=i(P),rF=n(P,"LI",{});var SLe=s(rF);Nce=n(SLe,"STRONG",{});var fst=s(Nce);mqo=r(fst,"xlm-roberta"),fst.forEach(t),gqo=r(SLe," \u2014 "),wD=n(SLe,"A",{href:!0});var mst=s(wD);hqo=r(mst,"XLMRobertaForQuestionAnswering"),mst.forEach(t),pqo=r(SLe," (XLM-RoBERTa model)"),SLe.forEach(t),_qo=i(P),tF=n(P,"LI",{});var RLe=s(tF);jce=n(RLe,"STRONG",{});var gst=s(jce);uqo=r(gst,"xlm-roberta-xl"),gst.forEach(t),bqo=r(RLe," \u2014 "),AD=n(RLe,"A",{href:!0});var hst=s(AD);Fqo=r(hst,"XLMRobertaXLForQuestionAnswering"),hst.forEach(t),vqo=r(RLe," (XLM-RoBERTa-XL model)"),RLe.forEach(t),Tqo=i(P),aF=n(P,"LI",{});var BLe=s(aF);Dce=n(BLe,"STRONG",{});var pst=s(Dce);Mqo=r(pst,"xlnet"),pst.forEach(t),Eqo=r(BLe," \u2014 "),yD=n(BLe,"A",{href:!0});var _st=s(yD);Cqo=r(_st,"XLNetForQuestionAnsweringSimple"),_st.forEach(t),wqo=r(BLe," (XLNet model)"),BLe.forEach(t),Aqo=i(P),nF=n(P,"LI",{});var PLe=s(nF);Gce=n(PLe,"STRONG",{});var ust=s(Gce);yqo=r(ust,"yoso"),ust.forEach(t),Lqo=r(PLe," \u2014 "),LD=n(PLe,"A",{href:!0});var bst=s(LD);xqo=r(bst,"YosoForQuestionAnswering"),bst.forEach(t),kqo=r(PLe," (YOSO model)"),PLe.forEach(t),P.forEach(t),Sqo=i(Ut),sF=n(Ut,"P",{});var $Le=s(sF);Rqo=r($Le,"The model is set in evaluation mode by default using "),Oce=n($Le,"CODE",{});var Fst=s(Oce);Bqo=r(Fst,"model.eval()"),Fst.forEach(t),Pqo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vce=n($Le,"CODE",{});var vst=s(Vce);$qo=r(vst,"model.train()"),vst.forEach(t),$Le.forEach(t),Iqo=i(Ut),Xce=n(Ut,"P",{});var Tst=s(Xce);qqo=r(Tst,"Examples:"),Tst.forEach(t),Nqo=i(Ut),m(bA.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),HRe=i(c),Ad=n(c,"H2",{class:!0});var t$e=s(Ad);lF=n(t$e,"A",{id:!0,class:!0,href:!0});var Mst=s(lF);zce=n(Mst,"SPAN",{});var Est=s(zce);m(FA.$$.fragment,Est),Est.forEach(t),Mst.forEach(t),jqo=i(t$e),Qce=n(t$e,"SPAN",{});var Cst=s(Qce);Dqo=r(Cst,"AutoModelForTableQuestionAnswering"),Cst.forEach(t),t$e.forEach(t),URe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(vA.$$.fragment,gl),Gqo=i(gl),yd=n(gl,"P",{});var SU=s(yd);Oqo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xD=n(SU,"A",{href:!0});var wst=s(xD);Vqo=r(wst,"from_pretrained()"),wst.forEach(t),Xqo=r(SU," class method or the "),kD=n(SU,"A",{href:!0});var Ast=s(kD);zqo=r(Ast,"from_config()"),Ast.forEach(t),Qqo=r(SU,` class
method.`),SU.forEach(t),Wqo=i(gl),TA=n(gl,"P",{});var a$e=s(TA);Hqo=r(a$e,"This class cannot be instantiated directly using "),Wce=n(a$e,"CODE",{});var yst=s(Wce);Uqo=r(yst,"__init__()"),yst.forEach(t),Jqo=r(a$e," (throws an error)."),a$e.forEach(t),Yqo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(MA.$$.fragment,hl),Kqo=i(hl),Hce=n(hl,"P",{});var Lst=s(Hce);Zqo=r(Lst,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lst.forEach(t),eNo=i(hl),Ld=n(hl,"P",{});var RU=s(Ld);oNo=r(RU,`Note:
Loading a model from its configuration file does `),Uce=n(RU,"STRONG",{});var xst=s(Uce);rNo=r(xst,"not"),xst.forEach(t),tNo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=n(RU,"A",{href:!0});var kst=s(SD);aNo=r(kst,"from_pretrained()"),kst.forEach(t),nNo=r(RU," to load the model weights."),RU.forEach(t),sNo=i(hl),Jce=n(hl,"P",{});var Sst=s(Jce);lNo=r(Sst,"Examples:"),Sst.forEach(t),iNo=i(hl),m(EA.$$.fragment,hl),hl.forEach(t),dNo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(CA.$$.fragment,Jt),cNo=i(Jt),Yce=n(Jt,"P",{});var Rst=s(Yce);fNo=r(Rst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Rst.forEach(t),mNo=i(Jt),en=n(Jt,"P",{});var qC=s(en);gNo=r(qC,"The model class to instantiate is selected based on the "),Kce=n(qC,"CODE",{});var Bst=s(Kce);hNo=r(Bst,"model_type"),Bst.forEach(t),pNo=r(qC,` property of the config object (either
passed as an argument or loaded from `),Zce=n(qC,"CODE",{});var Pst=s(Zce);_No=r(Pst,"pretrained_model_name_or_path"),Pst.forEach(t),uNo=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),efe=n(qC,"CODE",{});var $st=s(efe);bNo=r($st,"pretrained_model_name_or_path"),$st.forEach(t),FNo=r(qC,":"),qC.forEach(t),vNo=i(Jt),ofe=n(Jt,"UL",{});var Ist=s(ofe);iF=n(Ist,"LI",{});var ILe=s(iF);rfe=n(ILe,"STRONG",{});var qst=s(rfe);TNo=r(qst,"tapas"),qst.forEach(t),MNo=r(ILe," \u2014 "),RD=n(ILe,"A",{href:!0});var Nst=s(RD);ENo=r(Nst,"TapasForQuestionAnswering"),Nst.forEach(t),CNo=r(ILe," (TAPAS model)"),ILe.forEach(t),Ist.forEach(t),wNo=i(Jt),dF=n(Jt,"P",{});var qLe=s(dF);ANo=r(qLe,"The model is set in evaluation mode by default using "),tfe=n(qLe,"CODE",{});var jst=s(tfe);yNo=r(jst,"model.eval()"),jst.forEach(t),LNo=r(qLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(qLe,"CODE",{});var Dst=s(afe);xNo=r(Dst,"model.train()"),Dst.forEach(t),qLe.forEach(t),kNo=i(Jt),nfe=n(Jt,"P",{});var Gst=s(nfe);SNo=r(Gst,"Examples:"),Gst.forEach(t),RNo=i(Jt),m(wA.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),JRe=i(c),xd=n(c,"H2",{class:!0});var n$e=s(xd);cF=n(n$e,"A",{id:!0,class:!0,href:!0});var Ost=s(cF);sfe=n(Ost,"SPAN",{});var Vst=s(sfe);m(AA.$$.fragment,Vst),Vst.forEach(t),Ost.forEach(t),BNo=i(n$e),lfe=n(n$e,"SPAN",{});var Xst=s(lfe);PNo=r(Xst,"AutoModelForImageClassification"),Xst.forEach(t),n$e.forEach(t),YRe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(yA.$$.fragment,pl),$No=i(pl),kd=n(pl,"P",{});var BU=s(kd);INo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BD=n(BU,"A",{href:!0});var zst=s(BD);qNo=r(zst,"from_pretrained()"),zst.forEach(t),NNo=r(BU," class method or the "),PD=n(BU,"A",{href:!0});var Qst=s(PD);jNo=r(Qst,"from_config()"),Qst.forEach(t),DNo=r(BU,` class
method.`),BU.forEach(t),GNo=i(pl),LA=n(pl,"P",{});var s$e=s(LA);ONo=r(s$e,"This class cannot be instantiated directly using "),ife=n(s$e,"CODE",{});var Wst=s(ife);VNo=r(Wst,"__init__()"),Wst.forEach(t),XNo=r(s$e," (throws an error)."),s$e.forEach(t),zNo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(xA.$$.fragment,_l),QNo=i(_l),dfe=n(_l,"P",{});var Hst=s(dfe);WNo=r(Hst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hst.forEach(t),HNo=i(_l),Sd=n(_l,"P",{});var PU=s(Sd);UNo=r(PU,`Note:
Loading a model from its configuration file does `),cfe=n(PU,"STRONG",{});var Ust=s(cfe);JNo=r(Ust,"not"),Ust.forEach(t),YNo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=n(PU,"A",{href:!0});var Jst=s($D);KNo=r(Jst,"from_pretrained()"),Jst.forEach(t),ZNo=r(PU," to load the model weights."),PU.forEach(t),ejo=i(_l),ffe=n(_l,"P",{});var Yst=s(ffe);ojo=r(Yst,"Examples:"),Yst.forEach(t),rjo=i(_l),m(kA.$$.fragment,_l),_l.forEach(t),tjo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(SA.$$.fragment,Yt),ajo=i(Yt),mfe=n(Yt,"P",{});var Kst=s(mfe);njo=r(Kst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kst.forEach(t),sjo=i(Yt),on=n(Yt,"P",{});var NC=s(on);ljo=r(NC,"The model class to instantiate is selected based on the "),gfe=n(NC,"CODE",{});var Zst=s(gfe);ijo=r(Zst,"model_type"),Zst.forEach(t),djo=r(NC,` property of the config object (either
passed as an argument or loaded from `),hfe=n(NC,"CODE",{});var elt=s(hfe);cjo=r(elt,"pretrained_model_name_or_path"),elt.forEach(t),fjo=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(NC,"CODE",{});var olt=s(pfe);mjo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),gjo=r(NC,":"),NC.forEach(t),hjo=i(Yt),ce=n(Yt,"UL",{});var he=s(ce);fF=n(he,"LI",{});var NLe=s(fF);_fe=n(NLe,"STRONG",{});var rlt=s(_fe);pjo=r(rlt,"beit"),rlt.forEach(t),_jo=r(NLe," \u2014 "),ID=n(NLe,"A",{href:!0});var tlt=s(ID);ujo=r(tlt,"BeitForImageClassification"),tlt.forEach(t),bjo=r(NLe," (BEiT model)"),NLe.forEach(t),Fjo=i(he),mF=n(he,"LI",{});var jLe=s(mF);ufe=n(jLe,"STRONG",{});var alt=s(ufe);vjo=r(alt,"convnext"),alt.forEach(t),Tjo=r(jLe," \u2014 "),qD=n(jLe,"A",{href:!0});var nlt=s(qD);Mjo=r(nlt,"ConvNextForImageClassification"),nlt.forEach(t),Ejo=r(jLe," (ConvNext model)"),jLe.forEach(t),Cjo=i(he),Ds=n(he,"LI",{});var g9=s(Ds);bfe=n(g9,"STRONG",{});var slt=s(bfe);wjo=r(slt,"deit"),slt.forEach(t),Ajo=r(g9," \u2014 "),ND=n(g9,"A",{href:!0});var llt=s(ND);yjo=r(llt,"DeiTForImageClassification"),llt.forEach(t),Ljo=r(g9," or "),jD=n(g9,"A",{href:!0});var ilt=s(jD);xjo=r(ilt,"DeiTForImageClassificationWithTeacher"),ilt.forEach(t),kjo=r(g9," (DeiT model)"),g9.forEach(t),Sjo=i(he),gF=n(he,"LI",{});var DLe=s(gF);Ffe=n(DLe,"STRONG",{});var dlt=s(Ffe);Rjo=r(dlt,"imagegpt"),dlt.forEach(t),Bjo=r(DLe," \u2014 "),DD=n(DLe,"A",{href:!0});var clt=s(DD);Pjo=r(clt,"ImageGPTForImageClassification"),clt.forEach(t),$jo=r(DLe," (ImageGPT model)"),DLe.forEach(t),Ijo=i(he),ma=n(he,"LI",{});var $f=s(ma);vfe=n($f,"STRONG",{});var flt=s(vfe);qjo=r(flt,"perceiver"),flt.forEach(t),Njo=r($f," \u2014 "),GD=n($f,"A",{href:!0});var mlt=s(GD);jjo=r(mlt,"PerceiverForImageClassificationLearned"),mlt.forEach(t),Djo=r($f," or "),OD=n($f,"A",{href:!0});var glt=s(OD);Gjo=r(glt,"PerceiverForImageClassificationFourier"),glt.forEach(t),Ojo=r($f," or "),VD=n($f,"A",{href:!0});var hlt=s(VD);Vjo=r(hlt,"PerceiverForImageClassificationConvProcessing"),hlt.forEach(t),Xjo=r($f," (Perceiver model)"),$f.forEach(t),zjo=i(he),hF=n(he,"LI",{});var GLe=s(hF);Tfe=n(GLe,"STRONG",{});var plt=s(Tfe);Qjo=r(plt,"poolformer"),plt.forEach(t),Wjo=r(GLe," \u2014 "),XD=n(GLe,"A",{href:!0});var _lt=s(XD);Hjo=r(_lt,"PoolFormerForImageClassification"),_lt.forEach(t),Ujo=r(GLe," (PoolFormer model)"),GLe.forEach(t),Jjo=i(he),pF=n(he,"LI",{});var OLe=s(pF);Mfe=n(OLe,"STRONG",{});var ult=s(Mfe);Yjo=r(ult,"regnet"),ult.forEach(t),Kjo=r(OLe," \u2014 "),zD=n(OLe,"A",{href:!0});var blt=s(zD);Zjo=r(blt,"RegNetForImageClassification"),blt.forEach(t),eDo=r(OLe," (RegNet model)"),OLe.forEach(t),oDo=i(he),_F=n(he,"LI",{});var VLe=s(_F);Efe=n(VLe,"STRONG",{});var Flt=s(Efe);rDo=r(Flt,"resnet"),Flt.forEach(t),tDo=r(VLe," \u2014 "),QD=n(VLe,"A",{href:!0});var vlt=s(QD);aDo=r(vlt,"ResNetForImageClassification"),vlt.forEach(t),nDo=r(VLe," (ResNet model)"),VLe.forEach(t),sDo=i(he),uF=n(he,"LI",{});var XLe=s(uF);Cfe=n(XLe,"STRONG",{});var Tlt=s(Cfe);lDo=r(Tlt,"segformer"),Tlt.forEach(t),iDo=r(XLe," \u2014 "),WD=n(XLe,"A",{href:!0});var Mlt=s(WD);dDo=r(Mlt,"SegformerForImageClassification"),Mlt.forEach(t),cDo=r(XLe," (SegFormer model)"),XLe.forEach(t),fDo=i(he),bF=n(he,"LI",{});var zLe=s(bF);wfe=n(zLe,"STRONG",{});var Elt=s(wfe);mDo=r(Elt,"swin"),Elt.forEach(t),gDo=r(zLe," \u2014 "),HD=n(zLe,"A",{href:!0});var Clt=s(HD);hDo=r(Clt,"SwinForImageClassification"),Clt.forEach(t),pDo=r(zLe," (Swin model)"),zLe.forEach(t),_Do=i(he),FF=n(he,"LI",{});var QLe=s(FF);Afe=n(QLe,"STRONG",{});var wlt=s(Afe);uDo=r(wlt,"van"),wlt.forEach(t),bDo=r(QLe," \u2014 "),UD=n(QLe,"A",{href:!0});var Alt=s(UD);FDo=r(Alt,"VanForImageClassification"),Alt.forEach(t),vDo=r(QLe," (VAN model)"),QLe.forEach(t),TDo=i(he),vF=n(he,"LI",{});var WLe=s(vF);yfe=n(WLe,"STRONG",{});var ylt=s(yfe);MDo=r(ylt,"vit"),ylt.forEach(t),EDo=r(WLe," \u2014 "),JD=n(WLe,"A",{href:!0});var Llt=s(JD);CDo=r(Llt,"ViTForImageClassification"),Llt.forEach(t),wDo=r(WLe," (ViT model)"),WLe.forEach(t),he.forEach(t),ADo=i(Yt),TF=n(Yt,"P",{});var HLe=s(TF);yDo=r(HLe,"The model is set in evaluation mode by default using "),Lfe=n(HLe,"CODE",{});var xlt=s(Lfe);LDo=r(xlt,"model.eval()"),xlt.forEach(t),xDo=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=n(HLe,"CODE",{});var klt=s(xfe);kDo=r(klt,"model.train()"),klt.forEach(t),HLe.forEach(t),SDo=i(Yt),kfe=n(Yt,"P",{});var Slt=s(kfe);RDo=r(Slt,"Examples:"),Slt.forEach(t),BDo=i(Yt),m(RA.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),KRe=i(c),Rd=n(c,"H2",{class:!0});var l$e=s(Rd);MF=n(l$e,"A",{id:!0,class:!0,href:!0});var Rlt=s(MF);Sfe=n(Rlt,"SPAN",{});var Blt=s(Sfe);m(BA.$$.fragment,Blt),Blt.forEach(t),Rlt.forEach(t),PDo=i(l$e),Rfe=n(l$e,"SPAN",{});var Plt=s(Rfe);$Do=r(Plt,"AutoModelForVision2Seq"),Plt.forEach(t),l$e.forEach(t),ZRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(PA.$$.fragment,ul),IDo=i(ul),Bd=n(ul,"P",{});var $U=s(Bd);qDo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YD=n($U,"A",{href:!0});var $lt=s(YD);NDo=r($lt,"from_pretrained()"),$lt.forEach(t),jDo=r($U," class method or the "),KD=n($U,"A",{href:!0});var Ilt=s(KD);DDo=r(Ilt,"from_config()"),Ilt.forEach(t),GDo=r($U,` class
method.`),$U.forEach(t),ODo=i(ul),$A=n(ul,"P",{});var i$e=s($A);VDo=r(i$e,"This class cannot be instantiated directly using "),Bfe=n(i$e,"CODE",{});var qlt=s(Bfe);XDo=r(qlt,"__init__()"),qlt.forEach(t),zDo=r(i$e," (throws an error)."),i$e.forEach(t),QDo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(IA.$$.fragment,bl),WDo=i(bl),Pfe=n(bl,"P",{});var Nlt=s(Pfe);HDo=r(Nlt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Nlt.forEach(t),UDo=i(bl),Pd=n(bl,"P",{});var IU=s(Pd);JDo=r(IU,`Note:
Loading a model from its configuration file does `),$fe=n(IU,"STRONG",{});var jlt=s($fe);YDo=r(jlt,"not"),jlt.forEach(t),KDo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(IU,"A",{href:!0});var Dlt=s(ZD);ZDo=r(Dlt,"from_pretrained()"),Dlt.forEach(t),eGo=r(IU," to load the model weights."),IU.forEach(t),oGo=i(bl),Ife=n(bl,"P",{});var Glt=s(Ife);rGo=r(Glt,"Examples:"),Glt.forEach(t),tGo=i(bl),m(qA.$$.fragment,bl),bl.forEach(t),aGo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(NA.$$.fragment,Kt),nGo=i(Kt),qfe=n(Kt,"P",{});var Olt=s(qfe);sGo=r(Olt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Olt.forEach(t),lGo=i(Kt),rn=n(Kt,"P",{});var jC=s(rn);iGo=r(jC,"The model class to instantiate is selected based on the "),Nfe=n(jC,"CODE",{});var Vlt=s(Nfe);dGo=r(Vlt,"model_type"),Vlt.forEach(t),cGo=r(jC,` property of the config object (either
passed as an argument or loaded from `),jfe=n(jC,"CODE",{});var Xlt=s(jfe);fGo=r(Xlt,"pretrained_model_name_or_path"),Xlt.forEach(t),mGo=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=n(jC,"CODE",{});var zlt=s(Dfe);gGo=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),hGo=r(jC,":"),jC.forEach(t),pGo=i(Kt),Gfe=n(Kt,"UL",{});var Qlt=s(Gfe);EF=n(Qlt,"LI",{});var ULe=s(EF);Ofe=n(ULe,"STRONG",{});var Wlt=s(Ofe);_Go=r(Wlt,"vision-encoder-decoder"),Wlt.forEach(t),uGo=r(ULe," \u2014 "),eG=n(ULe,"A",{href:!0});var Hlt=s(eG);bGo=r(Hlt,"VisionEncoderDecoderModel"),Hlt.forEach(t),FGo=r(ULe," (Vision Encoder decoder model)"),ULe.forEach(t),Qlt.forEach(t),vGo=i(Kt),CF=n(Kt,"P",{});var JLe=s(CF);TGo=r(JLe,"The model is set in evaluation mode by default using "),Vfe=n(JLe,"CODE",{});var Ult=s(Vfe);MGo=r(Ult,"model.eval()"),Ult.forEach(t),EGo=r(JLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=n(JLe,"CODE",{});var Jlt=s(Xfe);CGo=r(Jlt,"model.train()"),Jlt.forEach(t),JLe.forEach(t),wGo=i(Kt),zfe=n(Kt,"P",{});var Ylt=s(zfe);AGo=r(Ylt,"Examples:"),Ylt.forEach(t),yGo=i(Kt),m(jA.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),eBe=i(c),$d=n(c,"H2",{class:!0});var d$e=s($d);wF=n(d$e,"A",{id:!0,class:!0,href:!0});var Klt=s(wF);Qfe=n(Klt,"SPAN",{});var Zlt=s(Qfe);m(DA.$$.fragment,Zlt),Zlt.forEach(t),Klt.forEach(t),LGo=i(d$e),Wfe=n(d$e,"SPAN",{});var eit=s(Wfe);xGo=r(eit,"AutoModelForAudioClassification"),eit.forEach(t),d$e.forEach(t),oBe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(GA.$$.fragment,Fl),kGo=i(Fl),Id=n(Fl,"P",{});var qU=s(Id);SGo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oG=n(qU,"A",{href:!0});var oit=s(oG);RGo=r(oit,"from_pretrained()"),oit.forEach(t),BGo=r(qU," class method or the "),rG=n(qU,"A",{href:!0});var rit=s(rG);PGo=r(rit,"from_config()"),rit.forEach(t),$Go=r(qU,` class
method.`),qU.forEach(t),IGo=i(Fl),OA=n(Fl,"P",{});var c$e=s(OA);qGo=r(c$e,"This class cannot be instantiated directly using "),Hfe=n(c$e,"CODE",{});var tit=s(Hfe);NGo=r(tit,"__init__()"),tit.forEach(t),jGo=r(c$e," (throws an error)."),c$e.forEach(t),DGo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(VA.$$.fragment,vl),GGo=i(vl),Ufe=n(vl,"P",{});var ait=s(Ufe);OGo=r(ait,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ait.forEach(t),VGo=i(vl),qd=n(vl,"P",{});var NU=s(qd);XGo=r(NU,`Note:
Loading a model from its configuration file does `),Jfe=n(NU,"STRONG",{});var nit=s(Jfe);zGo=r(nit,"not"),nit.forEach(t),QGo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(NU,"A",{href:!0});var sit=s(tG);WGo=r(sit,"from_pretrained()"),sit.forEach(t),HGo=r(NU," to load the model weights."),NU.forEach(t),UGo=i(vl),Yfe=n(vl,"P",{});var lit=s(Yfe);JGo=r(lit,"Examples:"),lit.forEach(t),YGo=i(vl),m(XA.$$.fragment,vl),vl.forEach(t),KGo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(zA.$$.fragment,Zt),ZGo=i(Zt),Kfe=n(Zt,"P",{});var iit=s(Kfe);eOo=r(iit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),iit.forEach(t),oOo=i(Zt),tn=n(Zt,"P",{});var DC=s(tn);rOo=r(DC,"The model class to instantiate is selected based on the "),Zfe=n(DC,"CODE",{});var dit=s(Zfe);tOo=r(dit,"model_type"),dit.forEach(t),aOo=r(DC,` property of the config object (either
passed as an argument or loaded from `),eme=n(DC,"CODE",{});var cit=s(eme);nOo=r(cit,"pretrained_model_name_or_path"),cit.forEach(t),sOo=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=n(DC,"CODE",{});var fit=s(ome);lOo=r(fit,"pretrained_model_name_or_path"),fit.forEach(t),iOo=r(DC,":"),DC.forEach(t),dOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);AF=n(Do,"LI",{});var YLe=s(AF);rme=n(YLe,"STRONG",{});var mit=s(rme);cOo=r(mit,"data2vec-audio"),mit.forEach(t),fOo=r(YLe," \u2014 "),aG=n(YLe,"A",{href:!0});var git=s(aG);mOo=r(git,"Data2VecAudioForSequenceClassification"),git.forEach(t),gOo=r(YLe," (Data2VecAudio model)"),YLe.forEach(t),hOo=i(Do),yF=n(Do,"LI",{});var KLe=s(yF);tme=n(KLe,"STRONG",{});var hit=s(tme);pOo=r(hit,"hubert"),hit.forEach(t),_Oo=r(KLe," \u2014 "),nG=n(KLe,"A",{href:!0});var pit=s(nG);uOo=r(pit,"HubertForSequenceClassification"),pit.forEach(t),bOo=r(KLe," (Hubert model)"),KLe.forEach(t),FOo=i(Do),LF=n(Do,"LI",{});var ZLe=s(LF);ame=n(ZLe,"STRONG",{});var _it=s(ame);vOo=r(_it,"sew"),_it.forEach(t),TOo=r(ZLe," \u2014 "),sG=n(ZLe,"A",{href:!0});var uit=s(sG);MOo=r(uit,"SEWForSequenceClassification"),uit.forEach(t),EOo=r(ZLe," (SEW model)"),ZLe.forEach(t),COo=i(Do),xF=n(Do,"LI",{});var e8e=s(xF);nme=n(e8e,"STRONG",{});var bit=s(nme);wOo=r(bit,"sew-d"),bit.forEach(t),AOo=r(e8e," \u2014 "),lG=n(e8e,"A",{href:!0});var Fit=s(lG);yOo=r(Fit,"SEWDForSequenceClassification"),Fit.forEach(t),LOo=r(e8e," (SEW-D model)"),e8e.forEach(t),xOo=i(Do),kF=n(Do,"LI",{});var o8e=s(kF);sme=n(o8e,"STRONG",{});var vit=s(sme);kOo=r(vit,"unispeech"),vit.forEach(t),SOo=r(o8e," \u2014 "),iG=n(o8e,"A",{href:!0});var Tit=s(iG);ROo=r(Tit,"UniSpeechForSequenceClassification"),Tit.forEach(t),BOo=r(o8e," (UniSpeech model)"),o8e.forEach(t),POo=i(Do),SF=n(Do,"LI",{});var r8e=s(SF);lme=n(r8e,"STRONG",{});var Mit=s(lme);$Oo=r(Mit,"unispeech-sat"),Mit.forEach(t),IOo=r(r8e," \u2014 "),dG=n(r8e,"A",{href:!0});var Eit=s(dG);qOo=r(Eit,"UniSpeechSatForSequenceClassification"),Eit.forEach(t),NOo=r(r8e," (UniSpeechSat model)"),r8e.forEach(t),jOo=i(Do),RF=n(Do,"LI",{});var t8e=s(RF);ime=n(t8e,"STRONG",{});var Cit=s(ime);DOo=r(Cit,"wav2vec2"),Cit.forEach(t),GOo=r(t8e," \u2014 "),cG=n(t8e,"A",{href:!0});var wit=s(cG);OOo=r(wit,"Wav2Vec2ForSequenceClassification"),wit.forEach(t),VOo=r(t8e," (Wav2Vec2 model)"),t8e.forEach(t),XOo=i(Do),BF=n(Do,"LI",{});var a8e=s(BF);dme=n(a8e,"STRONG",{});var Ait=s(dme);zOo=r(Ait,"wavlm"),Ait.forEach(t),QOo=r(a8e," \u2014 "),fG=n(a8e,"A",{href:!0});var yit=s(fG);WOo=r(yit,"WavLMForSequenceClassification"),yit.forEach(t),HOo=r(a8e," (WavLM model)"),a8e.forEach(t),Do.forEach(t),UOo=i(Zt),PF=n(Zt,"P",{});var n8e=s(PF);JOo=r(n8e,"The model is set in evaluation mode by default using "),cme=n(n8e,"CODE",{});var Lit=s(cme);YOo=r(Lit,"model.eval()"),Lit.forEach(t),KOo=r(n8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(n8e,"CODE",{});var xit=s(fme);ZOo=r(xit,"model.train()"),xit.forEach(t),n8e.forEach(t),eVo=i(Zt),mme=n(Zt,"P",{});var kit=s(mme);oVo=r(kit,"Examples:"),kit.forEach(t),rVo=i(Zt),m(QA.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),rBe=i(c),Nd=n(c,"H2",{class:!0});var f$e=s(Nd);$F=n(f$e,"A",{id:!0,class:!0,href:!0});var Sit=s($F);gme=n(Sit,"SPAN",{});var Rit=s(gme);m(WA.$$.fragment,Rit),Rit.forEach(t),Sit.forEach(t),tVo=i(f$e),hme=n(f$e,"SPAN",{});var Bit=s(hme);aVo=r(Bit,"AutoModelForAudioFrameClassification"),Bit.forEach(t),f$e.forEach(t),tBe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(HA.$$.fragment,Tl),nVo=i(Tl),jd=n(Tl,"P",{});var jU=s(jd);sVo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mG=n(jU,"A",{href:!0});var Pit=s(mG);lVo=r(Pit,"from_pretrained()"),Pit.forEach(t),iVo=r(jU," class method or the "),gG=n(jU,"A",{href:!0});var $it=s(gG);dVo=r($it,"from_config()"),$it.forEach(t),cVo=r(jU,` class
method.`),jU.forEach(t),fVo=i(Tl),UA=n(Tl,"P",{});var m$e=s(UA);mVo=r(m$e,"This class cannot be instantiated directly using "),pme=n(m$e,"CODE",{});var Iit=s(pme);gVo=r(Iit,"__init__()"),Iit.forEach(t),hVo=r(m$e," (throws an error)."),m$e.forEach(t),pVo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(JA.$$.fragment,Ml),_Vo=i(Ml),_me=n(Ml,"P",{});var qit=s(_me);uVo=r(qit,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qit.forEach(t),bVo=i(Ml),Dd=n(Ml,"P",{});var DU=s(Dd);FVo=r(DU,`Note:
Loading a model from its configuration file does `),ume=n(DU,"STRONG",{});var Nit=s(ume);vVo=r(Nit,"not"),Nit.forEach(t),TVo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=n(DU,"A",{href:!0});var jit=s(hG);MVo=r(jit,"from_pretrained()"),jit.forEach(t),EVo=r(DU," to load the model weights."),DU.forEach(t),CVo=i(Ml),bme=n(Ml,"P",{});var Dit=s(bme);wVo=r(Dit,"Examples:"),Dit.forEach(t),AVo=i(Ml),m(YA.$$.fragment,Ml),Ml.forEach(t),yVo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(KA.$$.fragment,ea),LVo=i(ea),Fme=n(ea,"P",{});var Git=s(Fme);xVo=r(Git,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Git.forEach(t),kVo=i(ea),an=n(ea,"P",{});var GC=s(an);SVo=r(GC,"The model class to instantiate is selected based on the "),vme=n(GC,"CODE",{});var Oit=s(vme);RVo=r(Oit,"model_type"),Oit.forEach(t),BVo=r(GC,` property of the config object (either
passed as an argument or loaded from `),Tme=n(GC,"CODE",{});var Vit=s(Tme);PVo=r(Vit,"pretrained_model_name_or_path"),Vit.forEach(t),$Vo=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(GC,"CODE",{});var Xit=s(Mme);IVo=r(Xit,"pretrained_model_name_or_path"),Xit.forEach(t),qVo=r(GC,":"),GC.forEach(t),NVo=i(ea),nn=n(ea,"UL",{});var OC=s(nn);IF=n(OC,"LI",{});var s8e=s(IF);Eme=n(s8e,"STRONG",{});var zit=s(Eme);jVo=r(zit,"data2vec-audio"),zit.forEach(t),DVo=r(s8e," \u2014 "),pG=n(s8e,"A",{href:!0});var Qit=s(pG);GVo=r(Qit,"Data2VecAudioForAudioFrameClassification"),Qit.forEach(t),OVo=r(s8e," (Data2VecAudio model)"),s8e.forEach(t),VVo=i(OC),qF=n(OC,"LI",{});var l8e=s(qF);Cme=n(l8e,"STRONG",{});var Wit=s(Cme);XVo=r(Wit,"unispeech-sat"),Wit.forEach(t),zVo=r(l8e," \u2014 "),_G=n(l8e,"A",{href:!0});var Hit=s(_G);QVo=r(Hit,"UniSpeechSatForAudioFrameClassification"),Hit.forEach(t),WVo=r(l8e," (UniSpeechSat model)"),l8e.forEach(t),HVo=i(OC),NF=n(OC,"LI",{});var i8e=s(NF);wme=n(i8e,"STRONG",{});var Uit=s(wme);UVo=r(Uit,"wav2vec2"),Uit.forEach(t),JVo=r(i8e," \u2014 "),uG=n(i8e,"A",{href:!0});var Jit=s(uG);YVo=r(Jit,"Wav2Vec2ForAudioFrameClassification"),Jit.forEach(t),KVo=r(i8e," (Wav2Vec2 model)"),i8e.forEach(t),ZVo=i(OC),jF=n(OC,"LI",{});var d8e=s(jF);Ame=n(d8e,"STRONG",{});var Yit=s(Ame);eXo=r(Yit,"wavlm"),Yit.forEach(t),oXo=r(d8e," \u2014 "),bG=n(d8e,"A",{href:!0});var Kit=s(bG);rXo=r(Kit,"WavLMForAudioFrameClassification"),Kit.forEach(t),tXo=r(d8e," (WavLM model)"),d8e.forEach(t),OC.forEach(t),aXo=i(ea),DF=n(ea,"P",{});var c8e=s(DF);nXo=r(c8e,"The model is set in evaluation mode by default using "),yme=n(c8e,"CODE",{});var Zit=s(yme);sXo=r(Zit,"model.eval()"),Zit.forEach(t),lXo=r(c8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n(c8e,"CODE",{});var edt=s(Lme);iXo=r(edt,"model.train()"),edt.forEach(t),c8e.forEach(t),dXo=i(ea),xme=n(ea,"P",{});var odt=s(xme);cXo=r(odt,"Examples:"),odt.forEach(t),fXo=i(ea),m(ZA.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),aBe=i(c),Gd=n(c,"H2",{class:!0});var g$e=s(Gd);GF=n(g$e,"A",{id:!0,class:!0,href:!0});var rdt=s(GF);kme=n(rdt,"SPAN",{});var tdt=s(kme);m(e0.$$.fragment,tdt),tdt.forEach(t),rdt.forEach(t),mXo=i(g$e),Sme=n(g$e,"SPAN",{});var adt=s(Sme);gXo=r(adt,"AutoModelForCTC"),adt.forEach(t),g$e.forEach(t),nBe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(o0.$$.fragment,El),hXo=i(El),Od=n(El,"P",{});var GU=s(Od);pXo=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FG=n(GU,"A",{href:!0});var ndt=s(FG);_Xo=r(ndt,"from_pretrained()"),ndt.forEach(t),uXo=r(GU," class method or the "),vG=n(GU,"A",{href:!0});var sdt=s(vG);bXo=r(sdt,"from_config()"),sdt.forEach(t),FXo=r(GU,` class
method.`),GU.forEach(t),vXo=i(El),r0=n(El,"P",{});var h$e=s(r0);TXo=r(h$e,"This class cannot be instantiated directly using "),Rme=n(h$e,"CODE",{});var ldt=s(Rme);MXo=r(ldt,"__init__()"),ldt.forEach(t),EXo=r(h$e," (throws an error)."),h$e.forEach(t),CXo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(t0.$$.fragment,Cl),wXo=i(Cl),Bme=n(Cl,"P",{});var idt=s(Bme);AXo=r(idt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),idt.forEach(t),yXo=i(Cl),Vd=n(Cl,"P",{});var OU=s(Vd);LXo=r(OU,`Note:
Loading a model from its configuration file does `),Pme=n(OU,"STRONG",{});var ddt=s(Pme);xXo=r(ddt,"not"),ddt.forEach(t),kXo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(OU,"A",{href:!0});var cdt=s(TG);SXo=r(cdt,"from_pretrained()"),cdt.forEach(t),RXo=r(OU," to load the model weights."),OU.forEach(t),BXo=i(Cl),$me=n(Cl,"P",{});var fdt=s($me);PXo=r(fdt,"Examples:"),fdt.forEach(t),$Xo=i(Cl),m(a0.$$.fragment,Cl),Cl.forEach(t),IXo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(n0.$$.fragment,oa),qXo=i(oa),Ime=n(oa,"P",{});var mdt=s(Ime);NXo=r(mdt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),mdt.forEach(t),jXo=i(oa),sn=n(oa,"P",{});var VC=s(sn);DXo=r(VC,"The model class to instantiate is selected based on the "),qme=n(VC,"CODE",{});var gdt=s(qme);GXo=r(gdt,"model_type"),gdt.forEach(t),OXo=r(VC,` property of the config object (either
passed as an argument or loaded from `),Nme=n(VC,"CODE",{});var hdt=s(Nme);VXo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),XXo=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=n(VC,"CODE",{});var pdt=s(jme);zXo=r(pdt,"pretrained_model_name_or_path"),pdt.forEach(t),QXo=r(VC,":"),VC.forEach(t),WXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);OF=n(Go,"LI",{});var f8e=s(OF);Dme=n(f8e,"STRONG",{});var _dt=s(Dme);HXo=r(_dt,"data2vec-audio"),_dt.forEach(t),UXo=r(f8e," \u2014 "),MG=n(f8e,"A",{href:!0});var udt=s(MG);JXo=r(udt,"Data2VecAudioForCTC"),udt.forEach(t),YXo=r(f8e," (Data2VecAudio model)"),f8e.forEach(t),KXo=i(Go),VF=n(Go,"LI",{});var m8e=s(VF);Gme=n(m8e,"STRONG",{});var bdt=s(Gme);ZXo=r(bdt,"hubert"),bdt.forEach(t),ezo=r(m8e," \u2014 "),EG=n(m8e,"A",{href:!0});var Fdt=s(EG);ozo=r(Fdt,"HubertForCTC"),Fdt.forEach(t),rzo=r(m8e," (Hubert model)"),m8e.forEach(t),tzo=i(Go),XF=n(Go,"LI",{});var g8e=s(XF);Ome=n(g8e,"STRONG",{});var vdt=s(Ome);azo=r(vdt,"sew"),vdt.forEach(t),nzo=r(g8e," \u2014 "),CG=n(g8e,"A",{href:!0});var Tdt=s(CG);szo=r(Tdt,"SEWForCTC"),Tdt.forEach(t),lzo=r(g8e," (SEW model)"),g8e.forEach(t),izo=i(Go),zF=n(Go,"LI",{});var h8e=s(zF);Vme=n(h8e,"STRONG",{});var Mdt=s(Vme);dzo=r(Mdt,"sew-d"),Mdt.forEach(t),czo=r(h8e," \u2014 "),wG=n(h8e,"A",{href:!0});var Edt=s(wG);fzo=r(Edt,"SEWDForCTC"),Edt.forEach(t),mzo=r(h8e," (SEW-D model)"),h8e.forEach(t),gzo=i(Go),QF=n(Go,"LI",{});var p8e=s(QF);Xme=n(p8e,"STRONG",{});var Cdt=s(Xme);hzo=r(Cdt,"unispeech"),Cdt.forEach(t),pzo=r(p8e," \u2014 "),AG=n(p8e,"A",{href:!0});var wdt=s(AG);_zo=r(wdt,"UniSpeechForCTC"),wdt.forEach(t),uzo=r(p8e," (UniSpeech model)"),p8e.forEach(t),bzo=i(Go),WF=n(Go,"LI",{});var _8e=s(WF);zme=n(_8e,"STRONG",{});var Adt=s(zme);Fzo=r(Adt,"unispeech-sat"),Adt.forEach(t),vzo=r(_8e," \u2014 "),yG=n(_8e,"A",{href:!0});var ydt=s(yG);Tzo=r(ydt,"UniSpeechSatForCTC"),ydt.forEach(t),Mzo=r(_8e," (UniSpeechSat model)"),_8e.forEach(t),Ezo=i(Go),HF=n(Go,"LI",{});var u8e=s(HF);Qme=n(u8e,"STRONG",{});var Ldt=s(Qme);Czo=r(Ldt,"wav2vec2"),Ldt.forEach(t),wzo=r(u8e," \u2014 "),LG=n(u8e,"A",{href:!0});var xdt=s(LG);Azo=r(xdt,"Wav2Vec2ForCTC"),xdt.forEach(t),yzo=r(u8e," (Wav2Vec2 model)"),u8e.forEach(t),Lzo=i(Go),UF=n(Go,"LI",{});var b8e=s(UF);Wme=n(b8e,"STRONG",{});var kdt=s(Wme);xzo=r(kdt,"wavlm"),kdt.forEach(t),kzo=r(b8e," \u2014 "),xG=n(b8e,"A",{href:!0});var Sdt=s(xG);Szo=r(Sdt,"WavLMForCTC"),Sdt.forEach(t),Rzo=r(b8e," (WavLM model)"),b8e.forEach(t),Go.forEach(t),Bzo=i(oa),JF=n(oa,"P",{});var F8e=s(JF);Pzo=r(F8e,"The model is set in evaluation mode by default using "),Hme=n(F8e,"CODE",{});var Rdt=s(Hme);$zo=r(Rdt,"model.eval()"),Rdt.forEach(t),Izo=r(F8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(F8e,"CODE",{});var Bdt=s(Ume);qzo=r(Bdt,"model.train()"),Bdt.forEach(t),F8e.forEach(t),Nzo=i(oa),Jme=n(oa,"P",{});var Pdt=s(Jme);jzo=r(Pdt,"Examples:"),Pdt.forEach(t),Dzo=i(oa),m(s0.$$.fragment,oa),oa.forEach(t),El.forEach(t),sBe=i(c),Xd=n(c,"H2",{class:!0});var p$e=s(Xd);YF=n(p$e,"A",{id:!0,class:!0,href:!0});var $dt=s(YF);Yme=n($dt,"SPAN",{});var Idt=s(Yme);m(l0.$$.fragment,Idt),Idt.forEach(t),$dt.forEach(t),Gzo=i(p$e),Kme=n(p$e,"SPAN",{});var qdt=s(Kme);Ozo=r(qdt,"AutoModelForSpeechSeq2Seq"),qdt.forEach(t),p$e.forEach(t),lBe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(i0.$$.fragment,wl),Vzo=i(wl),zd=n(wl,"P",{});var VU=s(zd);Xzo=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kG=n(VU,"A",{href:!0});var Ndt=s(kG);zzo=r(Ndt,"from_pretrained()"),Ndt.forEach(t),Qzo=r(VU," class method or the "),SG=n(VU,"A",{href:!0});var jdt=s(SG);Wzo=r(jdt,"from_config()"),jdt.forEach(t),Hzo=r(VU,` class
method.`),VU.forEach(t),Uzo=i(wl),d0=n(wl,"P",{});var _$e=s(d0);Jzo=r(_$e,"This class cannot be instantiated directly using "),Zme=n(_$e,"CODE",{});var Ddt=s(Zme);Yzo=r(Ddt,"__init__()"),Ddt.forEach(t),Kzo=r(_$e," (throws an error)."),_$e.forEach(t),Zzo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(c0.$$.fragment,Al),eQo=i(Al),ege=n(Al,"P",{});var Gdt=s(ege);oQo=r(Gdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Gdt.forEach(t),rQo=i(Al),Qd=n(Al,"P",{});var XU=s(Qd);tQo=r(XU,`Note:
Loading a model from its configuration file does `),oge=n(XU,"STRONG",{});var Odt=s(oge);aQo=r(Odt,"not"),Odt.forEach(t),nQo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=n(XU,"A",{href:!0});var Vdt=s(RG);sQo=r(Vdt,"from_pretrained()"),Vdt.forEach(t),lQo=r(XU," to load the model weights."),XU.forEach(t),iQo=i(Al),rge=n(Al,"P",{});var Xdt=s(rge);dQo=r(Xdt,"Examples:"),Xdt.forEach(t),cQo=i(Al),m(f0.$$.fragment,Al),Al.forEach(t),fQo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(m0.$$.fragment,ra),mQo=i(ra),tge=n(ra,"P",{});var zdt=s(tge);gQo=r(zdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zdt.forEach(t),hQo=i(ra),ln=n(ra,"P",{});var XC=s(ln);pQo=r(XC,"The model class to instantiate is selected based on the "),age=n(XC,"CODE",{});var Qdt=s(age);_Qo=r(Qdt,"model_type"),Qdt.forEach(t),uQo=r(XC,` property of the config object (either
passed as an argument or loaded from `),nge=n(XC,"CODE",{});var Wdt=s(nge);bQo=r(Wdt,"pretrained_model_name_or_path"),Wdt.forEach(t),FQo=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=n(XC,"CODE",{});var Hdt=s(sge);vQo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),TQo=r(XC,":"),XC.forEach(t),MQo=i(ra),g0=n(ra,"UL",{});var u$e=s(g0);KF=n(u$e,"LI",{});var v8e=s(KF);lge=n(v8e,"STRONG",{});var Udt=s(lge);EQo=r(Udt,"speech-encoder-decoder"),Udt.forEach(t),CQo=r(v8e," \u2014 "),BG=n(v8e,"A",{href:!0});var Jdt=s(BG);wQo=r(Jdt,"SpeechEncoderDecoderModel"),Jdt.forEach(t),AQo=r(v8e," (Speech Encoder decoder model)"),v8e.forEach(t),yQo=i(u$e),ZF=n(u$e,"LI",{});var T8e=s(ZF);ige=n(T8e,"STRONG",{});var Ydt=s(ige);LQo=r(Ydt,"speech_to_text"),Ydt.forEach(t),xQo=r(T8e," \u2014 "),PG=n(T8e,"A",{href:!0});var Kdt=s(PG);kQo=r(Kdt,"Speech2TextForConditionalGeneration"),Kdt.forEach(t),SQo=r(T8e," (Speech2Text model)"),T8e.forEach(t),u$e.forEach(t),RQo=i(ra),ev=n(ra,"P",{});var M8e=s(ev);BQo=r(M8e,"The model is set in evaluation mode by default using "),dge=n(M8e,"CODE",{});var Zdt=s(dge);PQo=r(Zdt,"model.eval()"),Zdt.forEach(t),$Qo=r(M8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cge=n(M8e,"CODE",{});var ect=s(cge);IQo=r(ect,"model.train()"),ect.forEach(t),M8e.forEach(t),qQo=i(ra),fge=n(ra,"P",{});var oct=s(fge);NQo=r(oct,"Examples:"),oct.forEach(t),jQo=i(ra),m(h0.$$.fragment,ra),ra.forEach(t),wl.forEach(t),iBe=i(c),Wd=n(c,"H2",{class:!0});var b$e=s(Wd);ov=n(b$e,"A",{id:!0,class:!0,href:!0});var rct=s(ov);mge=n(rct,"SPAN",{});var tct=s(mge);m(p0.$$.fragment,tct),tct.forEach(t),rct.forEach(t),DQo=i(b$e),gge=n(b$e,"SPAN",{});var act=s(gge);GQo=r(act,"AutoModelForAudioXVector"),act.forEach(t),b$e.forEach(t),dBe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(_0.$$.fragment,yl),OQo=i(yl),Hd=n(yl,"P",{});var zU=s(Hd);VQo=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$G=n(zU,"A",{href:!0});var nct=s($G);XQo=r(nct,"from_pretrained()"),nct.forEach(t),zQo=r(zU," class method or the "),IG=n(zU,"A",{href:!0});var sct=s(IG);QQo=r(sct,"from_config()"),sct.forEach(t),WQo=r(zU,` class
method.`),zU.forEach(t),HQo=i(yl),u0=n(yl,"P",{});var F$e=s(u0);UQo=r(F$e,"This class cannot be instantiated directly using "),hge=n(F$e,"CODE",{});var lct=s(hge);JQo=r(lct,"__init__()"),lct.forEach(t),YQo=r(F$e," (throws an error)."),F$e.forEach(t),KQo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(b0.$$.fragment,Ll),ZQo=i(Ll),pge=n(Ll,"P",{});var ict=s(pge);eWo=r(ict,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ict.forEach(t),oWo=i(Ll),Ud=n(Ll,"P",{});var QU=s(Ud);rWo=r(QU,`Note:
Loading a model from its configuration file does `),_ge=n(QU,"STRONG",{});var dct=s(_ge);tWo=r(dct,"not"),dct.forEach(t),aWo=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=n(QU,"A",{href:!0});var cct=s(qG);nWo=r(cct,"from_pretrained()"),cct.forEach(t),sWo=r(QU," to load the model weights."),QU.forEach(t),lWo=i(Ll),uge=n(Ll,"P",{});var fct=s(uge);iWo=r(fct,"Examples:"),fct.forEach(t),dWo=i(Ll),m(F0.$$.fragment,Ll),Ll.forEach(t),cWo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(v0.$$.fragment,ta),fWo=i(ta),bge=n(ta,"P",{});var mct=s(bge);mWo=r(mct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),mct.forEach(t),gWo=i(ta),dn=n(ta,"P",{});var zC=s(dn);hWo=r(zC,"The model class to instantiate is selected based on the "),Fge=n(zC,"CODE",{});var gct=s(Fge);pWo=r(gct,"model_type"),gct.forEach(t),_Wo=r(zC,` property of the config object (either
passed as an argument or loaded from `),vge=n(zC,"CODE",{});var hct=s(vge);uWo=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),bWo=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=n(zC,"CODE",{});var pct=s(Tge);FWo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),vWo=r(zC,":"),zC.forEach(t),TWo=i(ta),cn=n(ta,"UL",{});var QC=s(cn);rv=n(QC,"LI",{});var E8e=s(rv);Mge=n(E8e,"STRONG",{});var _ct=s(Mge);MWo=r(_ct,"data2vec-audio"),_ct.forEach(t),EWo=r(E8e," \u2014 "),NG=n(E8e,"A",{href:!0});var uct=s(NG);CWo=r(uct,"Data2VecAudioForXVector"),uct.forEach(t),wWo=r(E8e," (Data2VecAudio model)"),E8e.forEach(t),AWo=i(QC),tv=n(QC,"LI",{});var C8e=s(tv);Ege=n(C8e,"STRONG",{});var bct=s(Ege);yWo=r(bct,"unispeech-sat"),bct.forEach(t),LWo=r(C8e," \u2014 "),jG=n(C8e,"A",{href:!0});var Fct=s(jG);xWo=r(Fct,"UniSpeechSatForXVector"),Fct.forEach(t),kWo=r(C8e," (UniSpeechSat model)"),C8e.forEach(t),SWo=i(QC),av=n(QC,"LI",{});var w8e=s(av);Cge=n(w8e,"STRONG",{});var vct=s(Cge);RWo=r(vct,"wav2vec2"),vct.forEach(t),BWo=r(w8e," \u2014 "),DG=n(w8e,"A",{href:!0});var Tct=s(DG);PWo=r(Tct,"Wav2Vec2ForXVector"),Tct.forEach(t),$Wo=r(w8e," (Wav2Vec2 model)"),w8e.forEach(t),IWo=i(QC),nv=n(QC,"LI",{});var A8e=s(nv);wge=n(A8e,"STRONG",{});var Mct=s(wge);qWo=r(Mct,"wavlm"),Mct.forEach(t),NWo=r(A8e," \u2014 "),GG=n(A8e,"A",{href:!0});var Ect=s(GG);jWo=r(Ect,"WavLMForXVector"),Ect.forEach(t),DWo=r(A8e," (WavLM model)"),A8e.forEach(t),QC.forEach(t),GWo=i(ta),sv=n(ta,"P",{});var y8e=s(sv);OWo=r(y8e,"The model is set in evaluation mode by default using "),Age=n(y8e,"CODE",{});var Cct=s(Age);VWo=r(Cct,"model.eval()"),Cct.forEach(t),XWo=r(y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=n(y8e,"CODE",{});var wct=s(yge);zWo=r(wct,"model.train()"),wct.forEach(t),y8e.forEach(t),QWo=i(ta),Lge=n(ta,"P",{});var Act=s(Lge);WWo=r(Act,"Examples:"),Act.forEach(t),HWo=i(ta),m(T0.$$.fragment,ta),ta.forEach(t),yl.forEach(t),cBe=i(c),Jd=n(c,"H2",{class:!0});var v$e=s(Jd);lv=n(v$e,"A",{id:!0,class:!0,href:!0});var yct=s(lv);xge=n(yct,"SPAN",{});var Lct=s(xge);m(M0.$$.fragment,Lct),Lct.forEach(t),yct.forEach(t),UWo=i(v$e),kge=n(v$e,"SPAN",{});var xct=s(kge);JWo=r(xct,"AutoModelForMaskedImageModeling"),xct.forEach(t),v$e.forEach(t),fBe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(E0.$$.fragment,xl),YWo=i(xl),Yd=n(xl,"P",{});var WU=s(Yd);KWo=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OG=n(WU,"A",{href:!0});var kct=s(OG);ZWo=r(kct,"from_pretrained()"),kct.forEach(t),eHo=r(WU," class method or the "),VG=n(WU,"A",{href:!0});var Sct=s(VG);oHo=r(Sct,"from_config()"),Sct.forEach(t),rHo=r(WU,` class
method.`),WU.forEach(t),tHo=i(xl),C0=n(xl,"P",{});var T$e=s(C0);aHo=r(T$e,"This class cannot be instantiated directly using "),Sge=n(T$e,"CODE",{});var Rct=s(Sge);nHo=r(Rct,"__init__()"),Rct.forEach(t),sHo=r(T$e," (throws an error)."),T$e.forEach(t),lHo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(w0.$$.fragment,kl),iHo=i(kl),Rge=n(kl,"P",{});var Bct=s(Rge);dHo=r(Bct,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Bct.forEach(t),cHo=i(kl),Kd=n(kl,"P",{});var HU=s(Kd);fHo=r(HU,`Note:
Loading a model from its configuration file does `),Bge=n(HU,"STRONG",{});var Pct=s(Bge);mHo=r(Pct,"not"),Pct.forEach(t),gHo=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=n(HU,"A",{href:!0});var $ct=s(XG);hHo=r($ct,"from_pretrained()"),$ct.forEach(t),pHo=r(HU," to load the model weights."),HU.forEach(t),_Ho=i(kl),Pge=n(kl,"P",{});var Ict=s(Pge);uHo=r(Ict,"Examples:"),Ict.forEach(t),bHo=i(kl),m(A0.$$.fragment,kl),kl.forEach(t),FHo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(y0.$$.fragment,aa),vHo=i(aa),$ge=n(aa,"P",{});var qct=s($ge);THo=r(qct,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),qct.forEach(t),MHo=i(aa),fn=n(aa,"P",{});var WC=s(fn);EHo=r(WC,"The model class to instantiate is selected based on the "),Ige=n(WC,"CODE",{});var Nct=s(Ige);CHo=r(Nct,"model_type"),Nct.forEach(t),wHo=r(WC,` property of the config object (either
passed as an argument or loaded from `),qge=n(WC,"CODE",{});var jct=s(qge);AHo=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),yHo=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=n(WC,"CODE",{});var Dct=s(Nge);LHo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),xHo=r(WC,":"),WC.forEach(t),kHo=i(aa),Zd=n(aa,"UL",{});var UU=s(Zd);iv=n(UU,"LI",{});var L8e=s(iv);jge=n(L8e,"STRONG",{});var Gct=s(jge);SHo=r(Gct,"deit"),Gct.forEach(t),RHo=r(L8e," \u2014 "),zG=n(L8e,"A",{href:!0});var Oct=s(zG);BHo=r(Oct,"DeiTForMaskedImageModeling"),Oct.forEach(t),PHo=r(L8e," (DeiT model)"),L8e.forEach(t),$Ho=i(UU),dv=n(UU,"LI",{});var x8e=s(dv);Dge=n(x8e,"STRONG",{});var Vct=s(Dge);IHo=r(Vct,"swin"),Vct.forEach(t),qHo=r(x8e," \u2014 "),QG=n(x8e,"A",{href:!0});var Xct=s(QG);NHo=r(Xct,"SwinForMaskedImageModeling"),Xct.forEach(t),jHo=r(x8e," (Swin model)"),x8e.forEach(t),DHo=i(UU),cv=n(UU,"LI",{});var k8e=s(cv);Gge=n(k8e,"STRONG",{});var zct=s(Gge);GHo=r(zct,"vit"),zct.forEach(t),OHo=r(k8e," \u2014 "),WG=n(k8e,"A",{href:!0});var Qct=s(WG);VHo=r(Qct,"ViTForMaskedImageModeling"),Qct.forEach(t),XHo=r(k8e," (ViT model)"),k8e.forEach(t),UU.forEach(t),zHo=i(aa),fv=n(aa,"P",{});var S8e=s(fv);QHo=r(S8e,"The model is set in evaluation mode by default using "),Oge=n(S8e,"CODE",{});var Wct=s(Oge);WHo=r(Wct,"model.eval()"),Wct.forEach(t),HHo=r(S8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=n(S8e,"CODE",{});var Hct=s(Vge);UHo=r(Hct,"model.train()"),Hct.forEach(t),S8e.forEach(t),JHo=i(aa),Xge=n(aa,"P",{});var Uct=s(Xge);YHo=r(Uct,"Examples:"),Uct.forEach(t),KHo=i(aa),m(L0.$$.fragment,aa),aa.forEach(t),xl.forEach(t),mBe=i(c),ec=n(c,"H2",{class:!0});var M$e=s(ec);mv=n(M$e,"A",{id:!0,class:!0,href:!0});var Jct=s(mv);zge=n(Jct,"SPAN",{});var Yct=s(zge);m(x0.$$.fragment,Yct),Yct.forEach(t),Jct.forEach(t),ZHo=i(M$e),Qge=n(M$e,"SPAN",{});var Kct=s(Qge);eUo=r(Kct,"AutoModelForObjectDetection"),Kct.forEach(t),M$e.forEach(t),gBe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(k0.$$.fragment,Sl),oUo=i(Sl),oc=n(Sl,"P",{});var JU=s(oc);rUo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HG=n(JU,"A",{href:!0});var Zct=s(HG);tUo=r(Zct,"from_pretrained()"),Zct.forEach(t),aUo=r(JU," class method or the "),UG=n(JU,"A",{href:!0});var eft=s(UG);nUo=r(eft,"from_config()"),eft.forEach(t),sUo=r(JU,` class
method.`),JU.forEach(t),lUo=i(Sl),S0=n(Sl,"P",{});var E$e=s(S0);iUo=r(E$e,"This class cannot be instantiated directly using "),Wge=n(E$e,"CODE",{});var oft=s(Wge);dUo=r(oft,"__init__()"),oft.forEach(t),cUo=r(E$e," (throws an error)."),E$e.forEach(t),fUo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(R0.$$.fragment,Rl),mUo=i(Rl),Hge=n(Rl,"P",{});var rft=s(Hge);gUo=r(rft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rft.forEach(t),hUo=i(Rl),rc=n(Rl,"P",{});var YU=s(rc);pUo=r(YU,`Note:
Loading a model from its configuration file does `),Uge=n(YU,"STRONG",{});var tft=s(Uge);_Uo=r(tft,"not"),tft.forEach(t),uUo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(YU,"A",{href:!0});var aft=s(JG);bUo=r(aft,"from_pretrained()"),aft.forEach(t),FUo=r(YU," to load the model weights."),YU.forEach(t),vUo=i(Rl),Jge=n(Rl,"P",{});var nft=s(Jge);TUo=r(nft,"Examples:"),nft.forEach(t),MUo=i(Rl),m(B0.$$.fragment,Rl),Rl.forEach(t),EUo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(P0.$$.fragment,na),CUo=i(na),Yge=n(na,"P",{});var sft=s(Yge);wUo=r(sft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),sft.forEach(t),AUo=i(na),mn=n(na,"P",{});var HC=s(mn);yUo=r(HC,"The model class to instantiate is selected based on the "),Kge=n(HC,"CODE",{});var lft=s(Kge);LUo=r(lft,"model_type"),lft.forEach(t),xUo=r(HC,` property of the config object (either
passed as an argument or loaded from `),Zge=n(HC,"CODE",{});var ift=s(Zge);kUo=r(ift,"pretrained_model_name_or_path"),ift.forEach(t),SUo=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(HC,"CODE",{});var dft=s(ehe);RUo=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),BUo=r(HC,":"),HC.forEach(t),PUo=i(na),ohe=n(na,"UL",{});var cft=s(ohe);gv=n(cft,"LI",{});var R8e=s(gv);rhe=n(R8e,"STRONG",{});var fft=s(rhe);$Uo=r(fft,"detr"),fft.forEach(t),IUo=r(R8e," \u2014 "),YG=n(R8e,"A",{href:!0});var mft=s(YG);qUo=r(mft,"DetrForObjectDetection"),mft.forEach(t),NUo=r(R8e," (DETR model)"),R8e.forEach(t),cft.forEach(t),jUo=i(na),hv=n(na,"P",{});var B8e=s(hv);DUo=r(B8e,"The model is set in evaluation mode by default using "),the=n(B8e,"CODE",{});var gft=s(the);GUo=r(gft,"model.eval()"),gft.forEach(t),OUo=r(B8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=n(B8e,"CODE",{});var hft=s(ahe);VUo=r(hft,"model.train()"),hft.forEach(t),B8e.forEach(t),XUo=i(na),nhe=n(na,"P",{});var pft=s(nhe);zUo=r(pft,"Examples:"),pft.forEach(t),QUo=i(na),m($0.$$.fragment,na),na.forEach(t),Sl.forEach(t),hBe=i(c),tc=n(c,"H2",{class:!0});var C$e=s(tc);pv=n(C$e,"A",{id:!0,class:!0,href:!0});var _ft=s(pv);she=n(_ft,"SPAN",{});var uft=s(she);m(I0.$$.fragment,uft),uft.forEach(t),_ft.forEach(t),WUo=i(C$e),lhe=n(C$e,"SPAN",{});var bft=s(lhe);HUo=r(bft,"AutoModelForImageSegmentation"),bft.forEach(t),C$e.forEach(t),pBe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(q0.$$.fragment,Bl),UUo=i(Bl),ac=n(Bl,"P",{});var KU=s(ac);JUo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),KG=n(KU,"A",{href:!0});var Fft=s(KG);YUo=r(Fft,"from_pretrained()"),Fft.forEach(t),KUo=r(KU," class method or the "),ZG=n(KU,"A",{href:!0});var vft=s(ZG);ZUo=r(vft,"from_config()"),vft.forEach(t),eJo=r(KU,` class
method.`),KU.forEach(t),oJo=i(Bl),N0=n(Bl,"P",{});var w$e=s(N0);rJo=r(w$e,"This class cannot be instantiated directly using "),ihe=n(w$e,"CODE",{});var Tft=s(ihe);tJo=r(Tft,"__init__()"),Tft.forEach(t),aJo=r(w$e," (throws an error)."),w$e.forEach(t),nJo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(j0.$$.fragment,Pl),sJo=i(Pl),dhe=n(Pl,"P",{});var Mft=s(dhe);lJo=r(Mft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Mft.forEach(t),iJo=i(Pl),nc=n(Pl,"P",{});var ZU=s(nc);dJo=r(ZU,`Note:
Loading a model from its configuration file does `),che=n(ZU,"STRONG",{});var Eft=s(che);cJo=r(Eft,"not"),Eft.forEach(t),fJo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(ZU,"A",{href:!0});var Cft=s(eO);mJo=r(Cft,"from_pretrained()"),Cft.forEach(t),gJo=r(ZU," to load the model weights."),ZU.forEach(t),hJo=i(Pl),fhe=n(Pl,"P",{});var wft=s(fhe);pJo=r(wft,"Examples:"),wft.forEach(t),_Jo=i(Pl),m(D0.$$.fragment,Pl),Pl.forEach(t),uJo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(G0.$$.fragment,sa),bJo=i(sa),mhe=n(sa,"P",{});var Aft=s(mhe);FJo=r(Aft,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Aft.forEach(t),vJo=i(sa),gn=n(sa,"P",{});var UC=s(gn);TJo=r(UC,"The model class to instantiate is selected based on the "),ghe=n(UC,"CODE",{});var yft=s(ghe);MJo=r(yft,"model_type"),yft.forEach(t),EJo=r(UC,` property of the config object (either
passed as an argument or loaded from `),hhe=n(UC,"CODE",{});var Lft=s(hhe);CJo=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),wJo=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(UC,"CODE",{});var xft=s(phe);AJo=r(xft,"pretrained_model_name_or_path"),xft.forEach(t),yJo=r(UC,":"),UC.forEach(t),LJo=i(sa),_he=n(sa,"UL",{});var kft=s(_he);_v=n(kft,"LI",{});var P8e=s(_v);uhe=n(P8e,"STRONG",{});var Sft=s(uhe);xJo=r(Sft,"detr"),Sft.forEach(t),kJo=r(P8e," \u2014 "),oO=n(P8e,"A",{href:!0});var Rft=s(oO);SJo=r(Rft,"DetrForSegmentation"),Rft.forEach(t),RJo=r(P8e," (DETR model)"),P8e.forEach(t),kft.forEach(t),BJo=i(sa),uv=n(sa,"P",{});var $8e=s(uv);PJo=r($8e,"The model is set in evaluation mode by default using "),bhe=n($8e,"CODE",{});var Bft=s(bhe);$Jo=r(Bft,"model.eval()"),Bft.forEach(t),IJo=r($8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=n($8e,"CODE",{});var Pft=s(Fhe);qJo=r(Pft,"model.train()"),Pft.forEach(t),$8e.forEach(t),NJo=i(sa),vhe=n(sa,"P",{});var $ft=s(vhe);jJo=r($ft,"Examples:"),$ft.forEach(t),DJo=i(sa),m(O0.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),_Be=i(c),sc=n(c,"H2",{class:!0});var A$e=s(sc);bv=n(A$e,"A",{id:!0,class:!0,href:!0});var Ift=s(bv);The=n(Ift,"SPAN",{});var qft=s(The);m(V0.$$.fragment,qft),qft.forEach(t),Ift.forEach(t),GJo=i(A$e),Mhe=n(A$e,"SPAN",{});var Nft=s(Mhe);OJo=r(Nft,"AutoModelForSemanticSegmentation"),Nft.forEach(t),A$e.forEach(t),uBe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(X0.$$.fragment,$l),VJo=i($l),lc=n($l,"P",{});var eJ=s(lc);XJo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rO=n(eJ,"A",{href:!0});var jft=s(rO);zJo=r(jft,"from_pretrained()"),jft.forEach(t),QJo=r(eJ," class method or the "),tO=n(eJ,"A",{href:!0});var Dft=s(tO);WJo=r(Dft,"from_config()"),Dft.forEach(t),HJo=r(eJ,` class
method.`),eJ.forEach(t),UJo=i($l),z0=n($l,"P",{});var y$e=s(z0);JJo=r(y$e,"This class cannot be instantiated directly using "),Ehe=n(y$e,"CODE",{});var Gft=s(Ehe);YJo=r(Gft,"__init__()"),Gft.forEach(t),KJo=r(y$e," (throws an error)."),y$e.forEach(t),ZJo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(Q0.$$.fragment,Il),eYo=i(Il),Che=n(Il,"P",{});var Oft=s(Che);oYo=r(Oft,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Oft.forEach(t),rYo=i(Il),ic=n(Il,"P",{});var oJ=s(ic);tYo=r(oJ,`Note:
Loading a model from its configuration file does `),whe=n(oJ,"STRONG",{});var Vft=s(whe);aYo=r(Vft,"not"),Vft.forEach(t),nYo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(oJ,"A",{href:!0});var Xft=s(aO);sYo=r(Xft,"from_pretrained()"),Xft.forEach(t),lYo=r(oJ," to load the model weights."),oJ.forEach(t),iYo=i(Il),Ahe=n(Il,"P",{});var zft=s(Ahe);dYo=r(zft,"Examples:"),zft.forEach(t),cYo=i(Il),m(W0.$$.fragment,Il),Il.forEach(t),fYo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(H0.$$.fragment,la),mYo=i(la),yhe=n(la,"P",{});var Qft=s(yhe);gYo=r(Qft,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Qft.forEach(t),hYo=i(la),hn=n(la,"P",{});var JC=s(hn);pYo=r(JC,"The model class to instantiate is selected based on the "),Lhe=n(JC,"CODE",{});var Wft=s(Lhe);_Yo=r(Wft,"model_type"),Wft.forEach(t),uYo=r(JC,` property of the config object (either
passed as an argument or loaded from `),xhe=n(JC,"CODE",{});var Hft=s(xhe);bYo=r(Hft,"pretrained_model_name_or_path"),Hft.forEach(t),FYo=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=n(JC,"CODE",{});var Uft=s(khe);vYo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),TYo=r(JC,":"),JC.forEach(t),MYo=i(la),dc=n(la,"UL",{});var rJ=s(dc);Fv=n(rJ,"LI",{});var I8e=s(Fv);She=n(I8e,"STRONG",{});var Jft=s(She);EYo=r(Jft,"beit"),Jft.forEach(t),CYo=r(I8e," \u2014 "),nO=n(I8e,"A",{href:!0});var Yft=s(nO);wYo=r(Yft,"BeitForSemanticSegmentation"),Yft.forEach(t),AYo=r(I8e," (BEiT model)"),I8e.forEach(t),yYo=i(rJ),vv=n(rJ,"LI",{});var q8e=s(vv);Rhe=n(q8e,"STRONG",{});var Kft=s(Rhe);LYo=r(Kft,"dpt"),Kft.forEach(t),xYo=r(q8e," \u2014 "),sO=n(q8e,"A",{href:!0});var Zft=s(sO);kYo=r(Zft,"DPTForSemanticSegmentation"),Zft.forEach(t),SYo=r(q8e," (DPT model)"),q8e.forEach(t),RYo=i(rJ),Tv=n(rJ,"LI",{});var N8e=s(Tv);Bhe=n(N8e,"STRONG",{});var emt=s(Bhe);BYo=r(emt,"segformer"),emt.forEach(t),PYo=r(N8e," \u2014 "),lO=n(N8e,"A",{href:!0});var omt=s(lO);$Yo=r(omt,"SegformerForSemanticSegmentation"),omt.forEach(t),IYo=r(N8e," (SegFormer model)"),N8e.forEach(t),rJ.forEach(t),qYo=i(la),Mv=n(la,"P",{});var j8e=s(Mv);NYo=r(j8e,"The model is set in evaluation mode by default using "),Phe=n(j8e,"CODE",{});var rmt=s(Phe);jYo=r(rmt,"model.eval()"),rmt.forEach(t),DYo=r(j8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=n(j8e,"CODE",{});var tmt=s($he);GYo=r(tmt,"model.train()"),tmt.forEach(t),j8e.forEach(t),OYo=i(la),Ihe=n(la,"P",{});var amt=s(Ihe);VYo=r(amt,"Examples:"),amt.forEach(t),XYo=i(la),m(U0.$$.fragment,la),la.forEach(t),$l.forEach(t),bBe=i(c),cc=n(c,"H2",{class:!0});var L$e=s(cc);Ev=n(L$e,"A",{id:!0,class:!0,href:!0});var nmt=s(Ev);qhe=n(nmt,"SPAN",{});var smt=s(qhe);m(J0.$$.fragment,smt),smt.forEach(t),nmt.forEach(t),zYo=i(L$e),Nhe=n(L$e,"SPAN",{});var lmt=s(Nhe);QYo=r(lmt,"AutoModelForInstanceSegmentation"),lmt.forEach(t),L$e.forEach(t),FBe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(Y0.$$.fragment,ql),WYo=i(ql),fc=n(ql,"P",{});var tJ=s(fc);HYo=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iO=n(tJ,"A",{href:!0});var imt=s(iO);UYo=r(imt,"from_pretrained()"),imt.forEach(t),JYo=r(tJ," class method or the "),dO=n(tJ,"A",{href:!0});var dmt=s(dO);YYo=r(dmt,"from_config()"),dmt.forEach(t),KYo=r(tJ,` class
method.`),tJ.forEach(t),ZYo=i(ql),K0=n(ql,"P",{});var x$e=s(K0);eKo=r(x$e,"This class cannot be instantiated directly using "),jhe=n(x$e,"CODE",{});var cmt=s(jhe);oKo=r(cmt,"__init__()"),cmt.forEach(t),rKo=r(x$e," (throws an error)."),x$e.forEach(t),tKo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(Z0.$$.fragment,Nl),aKo=i(Nl),Dhe=n(Nl,"P",{});var fmt=s(Dhe);nKo=r(fmt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fmt.forEach(t),sKo=i(Nl),mc=n(Nl,"P",{});var aJ=s(mc);lKo=r(aJ,`Note:
Loading a model from its configuration file does `),Ghe=n(aJ,"STRONG",{});var mmt=s(Ghe);iKo=r(mmt,"not"),mmt.forEach(t),dKo=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(aJ,"A",{href:!0});var gmt=s(cO);cKo=r(gmt,"from_pretrained()"),gmt.forEach(t),fKo=r(aJ," to load the model weights."),aJ.forEach(t),mKo=i(Nl),Ohe=n(Nl,"P",{});var hmt=s(Ohe);gKo=r(hmt,"Examples:"),hmt.forEach(t),hKo=i(Nl),m(ey.$$.fragment,Nl),Nl.forEach(t),pKo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(oy.$$.fragment,ia),_Ko=i(ia),Vhe=n(ia,"P",{});var pmt=s(Vhe);uKo=r(pmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),pmt.forEach(t),bKo=i(ia),pn=n(ia,"P",{});var YC=s(pn);FKo=r(YC,"The model class to instantiate is selected based on the "),Xhe=n(YC,"CODE",{});var _mt=s(Xhe);vKo=r(_mt,"model_type"),_mt.forEach(t),TKo=r(YC,` property of the config object (either
passed as an argument or loaded from `),zhe=n(YC,"CODE",{});var umt=s(zhe);MKo=r(umt,"pretrained_model_name_or_path"),umt.forEach(t),EKo=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(YC,"CODE",{});var bmt=s(Qhe);CKo=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),wKo=r(YC,":"),YC.forEach(t),AKo=i(ia),Whe=n(ia,"UL",{});var Fmt=s(Whe);Cv=n(Fmt,"LI",{});var D8e=s(Cv);Hhe=n(D8e,"STRONG",{});var vmt=s(Hhe);yKo=r(vmt,"maskformer"),vmt.forEach(t),LKo=r(D8e," \u2014 "),fO=n(D8e,"A",{href:!0});var Tmt=s(fO);xKo=r(Tmt,"MaskFormerForInstanceSegmentation"),Tmt.forEach(t),kKo=r(D8e," (MaskFormer model)"),D8e.forEach(t),Fmt.forEach(t),SKo=i(ia),wv=n(ia,"P",{});var G8e=s(wv);RKo=r(G8e,"The model is set in evaluation mode by default using "),Uhe=n(G8e,"CODE",{});var Mmt=s(Uhe);BKo=r(Mmt,"model.eval()"),Mmt.forEach(t),PKo=r(G8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jhe=n(G8e,"CODE",{});var Emt=s(Jhe);$Ko=r(Emt,"model.train()"),Emt.forEach(t),G8e.forEach(t),IKo=i(ia),Yhe=n(ia,"P",{});var Cmt=s(Yhe);qKo=r(Cmt,"Examples:"),Cmt.forEach(t),NKo=i(ia),m(ry.$$.fragment,ia),ia.forEach(t),ql.forEach(t),vBe=i(c),gc=n(c,"H2",{class:!0});var k$e=s(gc);Av=n(k$e,"A",{id:!0,class:!0,href:!0});var wmt=s(Av);Khe=n(wmt,"SPAN",{});var Amt=s(Khe);m(ty.$$.fragment,Amt),Amt.forEach(t),wmt.forEach(t),jKo=i(k$e),Zhe=n(k$e,"SPAN",{});var ymt=s(Zhe);DKo=r(ymt,"TFAutoModel"),ymt.forEach(t),k$e.forEach(t),TBe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(ay.$$.fragment,jl),GKo=i(jl),hc=n(jl,"P",{});var nJ=s(hc);OKo=r(nJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mO=n(nJ,"A",{href:!0});var Lmt=s(mO);VKo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),XKo=r(nJ," class method or the "),gO=n(nJ,"A",{href:!0});var xmt=s(gO);zKo=r(xmt,"from_config()"),xmt.forEach(t),QKo=r(nJ,` class
method.`),nJ.forEach(t),WKo=i(jl),ny=n(jl,"P",{});var S$e=s(ny);HKo=r(S$e,"This class cannot be instantiated directly using "),epe=n(S$e,"CODE",{});var kmt=s(epe);UKo=r(kmt,"__init__()"),kmt.forEach(t),JKo=r(S$e," (throws an error)."),S$e.forEach(t),YKo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(sy.$$.fragment,Dl),KKo=i(Dl),ope=n(Dl,"P",{});var Smt=s(ope);ZKo=r(Smt,"Instantiates one of the base model classes of the library from a configuration."),Smt.forEach(t),eZo=i(Dl),pc=n(Dl,"P",{});var sJ=s(pc);oZo=r(sJ,`Note:
Loading a model from its configuration file does `),rpe=n(sJ,"STRONG",{});var Rmt=s(rpe);rZo=r(Rmt,"not"),Rmt.forEach(t),tZo=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(sJ,"A",{href:!0});var Bmt=s(hO);aZo=r(Bmt,"from_pretrained()"),Bmt.forEach(t),nZo=r(sJ," to load the model weights."),sJ.forEach(t),sZo=i(Dl),tpe=n(Dl,"P",{});var Pmt=s(tpe);lZo=r(Pmt,"Examples:"),Pmt.forEach(t),iZo=i(Dl),m(ly.$$.fragment,Dl),Dl.forEach(t),dZo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(iy.$$.fragment,pa),cZo=i(pa),ape=n(pa,"P",{});var $mt=s(ape);fZo=r($mt,"Instantiate one of the base model classes of the library from a pretrained model."),$mt.forEach(t),mZo=i(pa),_n=n(pa,"P",{});var KC=s(_n);gZo=r(KC,"The model class to instantiate is selected based on the "),npe=n(KC,"CODE",{});var Imt=s(npe);hZo=r(Imt,"model_type"),Imt.forEach(t),pZo=r(KC,` property of the config object (either
passed as an argument or loaded from `),spe=n(KC,"CODE",{});var qmt=s(spe);_Zo=r(qmt,"pretrained_model_name_or_path"),qmt.forEach(t),uZo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=n(KC,"CODE",{});var Nmt=s(lpe);bZo=r(Nmt,"pretrained_model_name_or_path"),Nmt.forEach(t),FZo=r(KC,":"),KC.forEach(t),vZo=i(pa),x=n(pa,"UL",{});var k=s(x);yv=n(k,"LI",{});var O8e=s(yv);ipe=n(O8e,"STRONG",{});var jmt=s(ipe);TZo=r(jmt,"albert"),jmt.forEach(t),MZo=r(O8e," \u2014 "),pO=n(O8e,"A",{href:!0});var Dmt=s(pO);EZo=r(Dmt,"TFAlbertModel"),Dmt.forEach(t),CZo=r(O8e," (ALBERT model)"),O8e.forEach(t),wZo=i(k),Lv=n(k,"LI",{});var V8e=s(Lv);dpe=n(V8e,"STRONG",{});var Gmt=s(dpe);AZo=r(Gmt,"bart"),Gmt.forEach(t),yZo=r(V8e," \u2014 "),_O=n(V8e,"A",{href:!0});var Omt=s(_O);LZo=r(Omt,"TFBartModel"),Omt.forEach(t),xZo=r(V8e," (BART model)"),V8e.forEach(t),kZo=i(k),xv=n(k,"LI",{});var X8e=s(xv);cpe=n(X8e,"STRONG",{});var Vmt=s(cpe);SZo=r(Vmt,"bert"),Vmt.forEach(t),RZo=r(X8e," \u2014 "),uO=n(X8e,"A",{href:!0});var Xmt=s(uO);BZo=r(Xmt,"TFBertModel"),Xmt.forEach(t),PZo=r(X8e," (BERT model)"),X8e.forEach(t),$Zo=i(k),kv=n(k,"LI",{});var z8e=s(kv);fpe=n(z8e,"STRONG",{});var zmt=s(fpe);IZo=r(zmt,"blenderbot"),zmt.forEach(t),qZo=r(z8e," \u2014 "),bO=n(z8e,"A",{href:!0});var Qmt=s(bO);NZo=r(Qmt,"TFBlenderbotModel"),Qmt.forEach(t),jZo=r(z8e," (Blenderbot model)"),z8e.forEach(t),DZo=i(k),Sv=n(k,"LI",{});var Q8e=s(Sv);mpe=n(Q8e,"STRONG",{});var Wmt=s(mpe);GZo=r(Wmt,"blenderbot-small"),Wmt.forEach(t),OZo=r(Q8e," \u2014 "),FO=n(Q8e,"A",{href:!0});var Hmt=s(FO);VZo=r(Hmt,"TFBlenderbotSmallModel"),Hmt.forEach(t),XZo=r(Q8e," (BlenderbotSmall model)"),Q8e.forEach(t),zZo=i(k),Rv=n(k,"LI",{});var W8e=s(Rv);gpe=n(W8e,"STRONG",{});var Umt=s(gpe);QZo=r(Umt,"camembert"),Umt.forEach(t),WZo=r(W8e," \u2014 "),vO=n(W8e,"A",{href:!0});var Jmt=s(vO);HZo=r(Jmt,"TFCamembertModel"),Jmt.forEach(t),UZo=r(W8e," (CamemBERT model)"),W8e.forEach(t),JZo=i(k),Bv=n(k,"LI",{});var H8e=s(Bv);hpe=n(H8e,"STRONG",{});var Ymt=s(hpe);YZo=r(Ymt,"clip"),Ymt.forEach(t),KZo=r(H8e," \u2014 "),TO=n(H8e,"A",{href:!0});var Kmt=s(TO);ZZo=r(Kmt,"TFCLIPModel"),Kmt.forEach(t),eer=r(H8e," (CLIP model)"),H8e.forEach(t),oer=i(k),Pv=n(k,"LI",{});var U8e=s(Pv);ppe=n(U8e,"STRONG",{});var Zmt=s(ppe);rer=r(Zmt,"convbert"),Zmt.forEach(t),ter=r(U8e," \u2014 "),MO=n(U8e,"A",{href:!0});var egt=s(MO);aer=r(egt,"TFConvBertModel"),egt.forEach(t),ner=r(U8e," (ConvBERT model)"),U8e.forEach(t),ser=i(k),$v=n(k,"LI",{});var J8e=s($v);_pe=n(J8e,"STRONG",{});var ogt=s(_pe);ler=r(ogt,"convnext"),ogt.forEach(t),ier=r(J8e," \u2014 "),EO=n(J8e,"A",{href:!0});var rgt=s(EO);der=r(rgt,"TFConvNextModel"),rgt.forEach(t),cer=r(J8e," (ConvNext model)"),J8e.forEach(t),fer=i(k),Iv=n(k,"LI",{});var Y8e=s(Iv);upe=n(Y8e,"STRONG",{});var tgt=s(upe);mer=r(tgt,"ctrl"),tgt.forEach(t),ger=r(Y8e," \u2014 "),CO=n(Y8e,"A",{href:!0});var agt=s(CO);her=r(agt,"TFCTRLModel"),agt.forEach(t),per=r(Y8e," (CTRL model)"),Y8e.forEach(t),_er=i(k),qv=n(k,"LI",{});var K8e=s(qv);bpe=n(K8e,"STRONG",{});var ngt=s(bpe);uer=r(ngt,"deberta"),ngt.forEach(t),ber=r(K8e," \u2014 "),wO=n(K8e,"A",{href:!0});var sgt=s(wO);Fer=r(sgt,"TFDebertaModel"),sgt.forEach(t),ver=r(K8e," (DeBERTa model)"),K8e.forEach(t),Ter=i(k),Nv=n(k,"LI",{});var Z8e=s(Nv);Fpe=n(Z8e,"STRONG",{});var lgt=s(Fpe);Mer=r(lgt,"deberta-v2"),lgt.forEach(t),Eer=r(Z8e," \u2014 "),AO=n(Z8e,"A",{href:!0});var igt=s(AO);Cer=r(igt,"TFDebertaV2Model"),igt.forEach(t),wer=r(Z8e," (DeBERTa-v2 model)"),Z8e.forEach(t),Aer=i(k),jv=n(k,"LI",{});var e7e=s(jv);vpe=n(e7e,"STRONG",{});var dgt=s(vpe);yer=r(dgt,"distilbert"),dgt.forEach(t),Ler=r(e7e," \u2014 "),yO=n(e7e,"A",{href:!0});var cgt=s(yO);xer=r(cgt,"TFDistilBertModel"),cgt.forEach(t),ker=r(e7e," (DistilBERT model)"),e7e.forEach(t),Ser=i(k),Dv=n(k,"LI",{});var o7e=s(Dv);Tpe=n(o7e,"STRONG",{});var fgt=s(Tpe);Rer=r(fgt,"dpr"),fgt.forEach(t),Ber=r(o7e," \u2014 "),LO=n(o7e,"A",{href:!0});var mgt=s(LO);Per=r(mgt,"TFDPRQuestionEncoder"),mgt.forEach(t),$er=r(o7e," (DPR model)"),o7e.forEach(t),Ier=i(k),Gv=n(k,"LI",{});var r7e=s(Gv);Mpe=n(r7e,"STRONG",{});var ggt=s(Mpe);qer=r(ggt,"electra"),ggt.forEach(t),Ner=r(r7e," \u2014 "),xO=n(r7e,"A",{href:!0});var hgt=s(xO);jer=r(hgt,"TFElectraModel"),hgt.forEach(t),Der=r(r7e," (ELECTRA model)"),r7e.forEach(t),Ger=i(k),Ov=n(k,"LI",{});var t7e=s(Ov);Epe=n(t7e,"STRONG",{});var pgt=s(Epe);Oer=r(pgt,"flaubert"),pgt.forEach(t),Ver=r(t7e," \u2014 "),kO=n(t7e,"A",{href:!0});var _gt=s(kO);Xer=r(_gt,"TFFlaubertModel"),_gt.forEach(t),zer=r(t7e," (FlauBERT model)"),t7e.forEach(t),Qer=i(k),Gs=n(k,"LI",{});var h9=s(Gs);Cpe=n(h9,"STRONG",{});var ugt=s(Cpe);Wer=r(ugt,"funnel"),ugt.forEach(t),Her=r(h9," \u2014 "),SO=n(h9,"A",{href:!0});var bgt=s(SO);Uer=r(bgt,"TFFunnelModel"),bgt.forEach(t),Jer=r(h9," or "),RO=n(h9,"A",{href:!0});var Fgt=s(RO);Yer=r(Fgt,"TFFunnelBaseModel"),Fgt.forEach(t),Ker=r(h9," (Funnel Transformer model)"),h9.forEach(t),Zer=i(k),Vv=n(k,"LI",{});var a7e=s(Vv);wpe=n(a7e,"STRONG",{});var vgt=s(wpe);eor=r(vgt,"gpt2"),vgt.forEach(t),oor=r(a7e," \u2014 "),BO=n(a7e,"A",{href:!0});var Tgt=s(BO);ror=r(Tgt,"TFGPT2Model"),Tgt.forEach(t),tor=r(a7e," (OpenAI GPT-2 model)"),a7e.forEach(t),aor=i(k),Xv=n(k,"LI",{});var n7e=s(Xv);Ape=n(n7e,"STRONG",{});var Mgt=s(Ape);nor=r(Mgt,"gptj"),Mgt.forEach(t),sor=r(n7e," \u2014 "),PO=n(n7e,"A",{href:!0});var Egt=s(PO);lor=r(Egt,"TFGPTJModel"),Egt.forEach(t),ior=r(n7e," (GPT-J model)"),n7e.forEach(t),dor=i(k),zv=n(k,"LI",{});var s7e=s(zv);ype=n(s7e,"STRONG",{});var Cgt=s(ype);cor=r(Cgt,"hubert"),Cgt.forEach(t),mor=r(s7e," \u2014 "),$O=n(s7e,"A",{href:!0});var wgt=s($O);gor=r(wgt,"TFHubertModel"),wgt.forEach(t),hor=r(s7e," (Hubert model)"),s7e.forEach(t),por=i(k),Qv=n(k,"LI",{});var l7e=s(Qv);Lpe=n(l7e,"STRONG",{});var Agt=s(Lpe);_or=r(Agt,"layoutlm"),Agt.forEach(t),uor=r(l7e," \u2014 "),IO=n(l7e,"A",{href:!0});var ygt=s(IO);bor=r(ygt,"TFLayoutLMModel"),ygt.forEach(t),For=r(l7e," (LayoutLM model)"),l7e.forEach(t),vor=i(k),Wv=n(k,"LI",{});var i7e=s(Wv);xpe=n(i7e,"STRONG",{});var Lgt=s(xpe);Tor=r(Lgt,"led"),Lgt.forEach(t),Mor=r(i7e," \u2014 "),qO=n(i7e,"A",{href:!0});var xgt=s(qO);Eor=r(xgt,"TFLEDModel"),xgt.forEach(t),Cor=r(i7e," (LED model)"),i7e.forEach(t),wor=i(k),Hv=n(k,"LI",{});var d7e=s(Hv);kpe=n(d7e,"STRONG",{});var kgt=s(kpe);Aor=r(kgt,"longformer"),kgt.forEach(t),yor=r(d7e," \u2014 "),NO=n(d7e,"A",{href:!0});var Sgt=s(NO);Lor=r(Sgt,"TFLongformerModel"),Sgt.forEach(t),xor=r(d7e," (Longformer model)"),d7e.forEach(t),kor=i(k),Uv=n(k,"LI",{});var c7e=s(Uv);Spe=n(c7e,"STRONG",{});var Rgt=s(Spe);Sor=r(Rgt,"lxmert"),Rgt.forEach(t),Ror=r(c7e," \u2014 "),jO=n(c7e,"A",{href:!0});var Bgt=s(jO);Bor=r(Bgt,"TFLxmertModel"),Bgt.forEach(t),Por=r(c7e," (LXMERT model)"),c7e.forEach(t),$or=i(k),Jv=n(k,"LI",{});var f7e=s(Jv);Rpe=n(f7e,"STRONG",{});var Pgt=s(Rpe);Ior=r(Pgt,"marian"),Pgt.forEach(t),qor=r(f7e," \u2014 "),DO=n(f7e,"A",{href:!0});var $gt=s(DO);Nor=r($gt,"TFMarianModel"),$gt.forEach(t),jor=r(f7e," (Marian model)"),f7e.forEach(t),Dor=i(k),Yv=n(k,"LI",{});var m7e=s(Yv);Bpe=n(m7e,"STRONG",{});var Igt=s(Bpe);Gor=r(Igt,"mbart"),Igt.forEach(t),Oor=r(m7e," \u2014 "),GO=n(m7e,"A",{href:!0});var qgt=s(GO);Vor=r(qgt,"TFMBartModel"),qgt.forEach(t),Xor=r(m7e," (mBART model)"),m7e.forEach(t),zor=i(k),Kv=n(k,"LI",{});var g7e=s(Kv);Ppe=n(g7e,"STRONG",{});var Ngt=s(Ppe);Qor=r(Ngt,"mobilebert"),Ngt.forEach(t),Wor=r(g7e," \u2014 "),OO=n(g7e,"A",{href:!0});var jgt=s(OO);Hor=r(jgt,"TFMobileBertModel"),jgt.forEach(t),Uor=r(g7e," (MobileBERT model)"),g7e.forEach(t),Jor=i(k),Zv=n(k,"LI",{});var h7e=s(Zv);$pe=n(h7e,"STRONG",{});var Dgt=s($pe);Yor=r(Dgt,"mpnet"),Dgt.forEach(t),Kor=r(h7e," \u2014 "),VO=n(h7e,"A",{href:!0});var Ggt=s(VO);Zor=r(Ggt,"TFMPNetModel"),Ggt.forEach(t),err=r(h7e," (MPNet model)"),h7e.forEach(t),orr=i(k),e6=n(k,"LI",{});var p7e=s(e6);Ipe=n(p7e,"STRONG",{});var Ogt=s(Ipe);rrr=r(Ogt,"mt5"),Ogt.forEach(t),trr=r(p7e," \u2014 "),XO=n(p7e,"A",{href:!0});var Vgt=s(XO);arr=r(Vgt,"TFMT5Model"),Vgt.forEach(t),nrr=r(p7e," (mT5 model)"),p7e.forEach(t),srr=i(k),o6=n(k,"LI",{});var _7e=s(o6);qpe=n(_7e,"STRONG",{});var Xgt=s(qpe);lrr=r(Xgt,"openai-gpt"),Xgt.forEach(t),irr=r(_7e," \u2014 "),zO=n(_7e,"A",{href:!0});var zgt=s(zO);drr=r(zgt,"TFOpenAIGPTModel"),zgt.forEach(t),crr=r(_7e," (OpenAI GPT model)"),_7e.forEach(t),frr=i(k),r6=n(k,"LI",{});var u7e=s(r6);Npe=n(u7e,"STRONG",{});var Qgt=s(Npe);mrr=r(Qgt,"pegasus"),Qgt.forEach(t),grr=r(u7e," \u2014 "),QO=n(u7e,"A",{href:!0});var Wgt=s(QO);hrr=r(Wgt,"TFPegasusModel"),Wgt.forEach(t),prr=r(u7e," (Pegasus model)"),u7e.forEach(t),_rr=i(k),t6=n(k,"LI",{});var b7e=s(t6);jpe=n(b7e,"STRONG",{});var Hgt=s(jpe);urr=r(Hgt,"rembert"),Hgt.forEach(t),brr=r(b7e," \u2014 "),WO=n(b7e,"A",{href:!0});var Ugt=s(WO);Frr=r(Ugt,"TFRemBertModel"),Ugt.forEach(t),vrr=r(b7e," (RemBERT model)"),b7e.forEach(t),Trr=i(k),a6=n(k,"LI",{});var F7e=s(a6);Dpe=n(F7e,"STRONG",{});var Jgt=s(Dpe);Mrr=r(Jgt,"roberta"),Jgt.forEach(t),Err=r(F7e," \u2014 "),HO=n(F7e,"A",{href:!0});var Ygt=s(HO);Crr=r(Ygt,"TFRobertaModel"),Ygt.forEach(t),wrr=r(F7e," (RoBERTa model)"),F7e.forEach(t),Arr=i(k),n6=n(k,"LI",{});var v7e=s(n6);Gpe=n(v7e,"STRONG",{});var Kgt=s(Gpe);yrr=r(Kgt,"roformer"),Kgt.forEach(t),Lrr=r(v7e," \u2014 "),UO=n(v7e,"A",{href:!0});var Zgt=s(UO);xrr=r(Zgt,"TFRoFormerModel"),Zgt.forEach(t),krr=r(v7e," (RoFormer model)"),v7e.forEach(t),Srr=i(k),s6=n(k,"LI",{});var T7e=s(s6);Ope=n(T7e,"STRONG",{});var eht=s(Ope);Rrr=r(eht,"speech_to_text"),eht.forEach(t),Brr=r(T7e," \u2014 "),JO=n(T7e,"A",{href:!0});var oht=s(JO);Prr=r(oht,"TFSpeech2TextModel"),oht.forEach(t),$rr=r(T7e," (Speech2Text model)"),T7e.forEach(t),Irr=i(k),l6=n(k,"LI",{});var M7e=s(l6);Vpe=n(M7e,"STRONG",{});var rht=s(Vpe);qrr=r(rht,"t5"),rht.forEach(t),Nrr=r(M7e," \u2014 "),YO=n(M7e,"A",{href:!0});var tht=s(YO);jrr=r(tht,"TFT5Model"),tht.forEach(t),Drr=r(M7e," (T5 model)"),M7e.forEach(t),Grr=i(k),i6=n(k,"LI",{});var E7e=s(i6);Xpe=n(E7e,"STRONG",{});var aht=s(Xpe);Orr=r(aht,"tapas"),aht.forEach(t),Vrr=r(E7e," \u2014 "),KO=n(E7e,"A",{href:!0});var nht=s(KO);Xrr=r(nht,"TFTapasModel"),nht.forEach(t),zrr=r(E7e," (TAPAS model)"),E7e.forEach(t),Qrr=i(k),d6=n(k,"LI",{});var C7e=s(d6);zpe=n(C7e,"STRONG",{});var sht=s(zpe);Wrr=r(sht,"transfo-xl"),sht.forEach(t),Hrr=r(C7e," \u2014 "),ZO=n(C7e,"A",{href:!0});var lht=s(ZO);Urr=r(lht,"TFTransfoXLModel"),lht.forEach(t),Jrr=r(C7e," (Transformer-XL model)"),C7e.forEach(t),Yrr=i(k),c6=n(k,"LI",{});var w7e=s(c6);Qpe=n(w7e,"STRONG",{});var iht=s(Qpe);Krr=r(iht,"vit"),iht.forEach(t),Zrr=r(w7e," \u2014 "),eV=n(w7e,"A",{href:!0});var dht=s(eV);etr=r(dht,"TFViTModel"),dht.forEach(t),otr=r(w7e," (ViT model)"),w7e.forEach(t),rtr=i(k),f6=n(k,"LI",{});var A7e=s(f6);Wpe=n(A7e,"STRONG",{});var cht=s(Wpe);ttr=r(cht,"vit_mae"),cht.forEach(t),atr=r(A7e," \u2014 "),oV=n(A7e,"A",{href:!0});var fht=s(oV);ntr=r(fht,"TFViTMAEModel"),fht.forEach(t),str=r(A7e," (ViTMAE model)"),A7e.forEach(t),ltr=i(k),m6=n(k,"LI",{});var y7e=s(m6);Hpe=n(y7e,"STRONG",{});var mht=s(Hpe);itr=r(mht,"wav2vec2"),mht.forEach(t),dtr=r(y7e," \u2014 "),rV=n(y7e,"A",{href:!0});var ght=s(rV);ctr=r(ght,"TFWav2Vec2Model"),ght.forEach(t),ftr=r(y7e," (Wav2Vec2 model)"),y7e.forEach(t),mtr=i(k),g6=n(k,"LI",{});var L7e=s(g6);Upe=n(L7e,"STRONG",{});var hht=s(Upe);gtr=r(hht,"xlm"),hht.forEach(t),htr=r(L7e," \u2014 "),tV=n(L7e,"A",{href:!0});var pht=s(tV);ptr=r(pht,"TFXLMModel"),pht.forEach(t),_tr=r(L7e," (XLM model)"),L7e.forEach(t),utr=i(k),h6=n(k,"LI",{});var x7e=s(h6);Jpe=n(x7e,"STRONG",{});var _ht=s(Jpe);btr=r(_ht,"xlm-roberta"),_ht.forEach(t),Ftr=r(x7e," \u2014 "),aV=n(x7e,"A",{href:!0});var uht=s(aV);vtr=r(uht,"TFXLMRobertaModel"),uht.forEach(t),Ttr=r(x7e," (XLM-RoBERTa model)"),x7e.forEach(t),Mtr=i(k),p6=n(k,"LI",{});var k7e=s(p6);Ype=n(k7e,"STRONG",{});var bht=s(Ype);Etr=r(bht,"xlnet"),bht.forEach(t),Ctr=r(k7e," \u2014 "),nV=n(k7e,"A",{href:!0});var Fht=s(nV);wtr=r(Fht,"TFXLNetModel"),Fht.forEach(t),Atr=r(k7e," (XLNet model)"),k7e.forEach(t),k.forEach(t),ytr=i(pa),Kpe=n(pa,"P",{});var vht=s(Kpe);Ltr=r(vht,"Examples:"),vht.forEach(t),xtr=i(pa),m(dy.$$.fragment,pa),pa.forEach(t),jl.forEach(t),MBe=i(c),_c=n(c,"H2",{class:!0});var R$e=s(_c);_6=n(R$e,"A",{id:!0,class:!0,href:!0});var Tht=s(_6);Zpe=n(Tht,"SPAN",{});var Mht=s(Zpe);m(cy.$$.fragment,Mht),Mht.forEach(t),Tht.forEach(t),ktr=i(R$e),e_e=n(R$e,"SPAN",{});var Eht=s(e_e);Str=r(Eht,"TFAutoModelForPreTraining"),Eht.forEach(t),R$e.forEach(t),EBe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(fy.$$.fragment,Gl),Rtr=i(Gl),uc=n(Gl,"P",{});var lJ=s(uc);Btr=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sV=n(lJ,"A",{href:!0});var Cht=s(sV);Ptr=r(Cht,"from_pretrained()"),Cht.forEach(t),$tr=r(lJ," class method or the "),lV=n(lJ,"A",{href:!0});var wht=s(lV);Itr=r(wht,"from_config()"),wht.forEach(t),qtr=r(lJ,` class
method.`),lJ.forEach(t),Ntr=i(Gl),my=n(Gl,"P",{});var B$e=s(my);jtr=r(B$e,"This class cannot be instantiated directly using "),o_e=n(B$e,"CODE",{});var Aht=s(o_e);Dtr=r(Aht,"__init__()"),Aht.forEach(t),Gtr=r(B$e," (throws an error)."),B$e.forEach(t),Otr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(gy.$$.fragment,Ol),Vtr=i(Ol),r_e=n(Ol,"P",{});var yht=s(r_e);Xtr=r(yht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yht.forEach(t),ztr=i(Ol),bc=n(Ol,"P",{});var iJ=s(bc);Qtr=r(iJ,`Note:
Loading a model from its configuration file does `),t_e=n(iJ,"STRONG",{});var Lht=s(t_e);Wtr=r(Lht,"not"),Lht.forEach(t),Htr=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(iJ,"A",{href:!0});var xht=s(iV);Utr=r(xht,"from_pretrained()"),xht.forEach(t),Jtr=r(iJ," to load the model weights."),iJ.forEach(t),Ytr=i(Ol),a_e=n(Ol,"P",{});var kht=s(a_e);Ktr=r(kht,"Examples:"),kht.forEach(t),Ztr=i(Ol),m(hy.$$.fragment,Ol),Ol.forEach(t),ear=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(py.$$.fragment,_a),oar=i(_a),n_e=n(_a,"P",{});var Sht=s(n_e);rar=r(Sht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Sht.forEach(t),tar=i(_a),un=n(_a,"P",{});var ZC=s(un);aar=r(ZC,"The model class to instantiate is selected based on the "),s_e=n(ZC,"CODE",{});var Rht=s(s_e);nar=r(Rht,"model_type"),Rht.forEach(t),sar=r(ZC,` property of the config object (either
passed as an argument or loaded from `),l_e=n(ZC,"CODE",{});var Bht=s(l_e);lar=r(Bht,"pretrained_model_name_or_path"),Bht.forEach(t),iar=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=n(ZC,"CODE",{});var Pht=s(i_e);dar=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),car=r(ZC,":"),ZC.forEach(t),far=i(_a),H=n(_a,"UL",{});var U=s(H);u6=n(U,"LI",{});var S7e=s(u6);d_e=n(S7e,"STRONG",{});var $ht=s(d_e);mar=r($ht,"albert"),$ht.forEach(t),gar=r(S7e," \u2014 "),dV=n(S7e,"A",{href:!0});var Iht=s(dV);har=r(Iht,"TFAlbertForPreTraining"),Iht.forEach(t),par=r(S7e," (ALBERT model)"),S7e.forEach(t),_ar=i(U),b6=n(U,"LI",{});var R7e=s(b6);c_e=n(R7e,"STRONG",{});var qht=s(c_e);uar=r(qht,"bart"),qht.forEach(t),bar=r(R7e," \u2014 "),cV=n(R7e,"A",{href:!0});var Nht=s(cV);Far=r(Nht,"TFBartForConditionalGeneration"),Nht.forEach(t),Tar=r(R7e," (BART model)"),R7e.forEach(t),Mar=i(U),F6=n(U,"LI",{});var B7e=s(F6);f_e=n(B7e,"STRONG",{});var jht=s(f_e);Ear=r(jht,"bert"),jht.forEach(t),Car=r(B7e," \u2014 "),fV=n(B7e,"A",{href:!0});var Dht=s(fV);war=r(Dht,"TFBertForPreTraining"),Dht.forEach(t),Aar=r(B7e," (BERT model)"),B7e.forEach(t),yar=i(U),v6=n(U,"LI",{});var P7e=s(v6);m_e=n(P7e,"STRONG",{});var Ght=s(m_e);Lar=r(Ght,"camembert"),Ght.forEach(t),xar=r(P7e," \u2014 "),mV=n(P7e,"A",{href:!0});var Oht=s(mV);kar=r(Oht,"TFCamembertForMaskedLM"),Oht.forEach(t),Sar=r(P7e," (CamemBERT model)"),P7e.forEach(t),Rar=i(U),T6=n(U,"LI",{});var $7e=s(T6);g_e=n($7e,"STRONG",{});var Vht=s(g_e);Bar=r(Vht,"ctrl"),Vht.forEach(t),Par=r($7e," \u2014 "),gV=n($7e,"A",{href:!0});var Xht=s(gV);$ar=r(Xht,"TFCTRLLMHeadModel"),Xht.forEach(t),Iar=r($7e," (CTRL model)"),$7e.forEach(t),qar=i(U),M6=n(U,"LI",{});var I7e=s(M6);h_e=n(I7e,"STRONG",{});var zht=s(h_e);Nar=r(zht,"distilbert"),zht.forEach(t),jar=r(I7e," \u2014 "),hV=n(I7e,"A",{href:!0});var Qht=s(hV);Dar=r(Qht,"TFDistilBertForMaskedLM"),Qht.forEach(t),Gar=r(I7e," (DistilBERT model)"),I7e.forEach(t),Oar=i(U),E6=n(U,"LI",{});var q7e=s(E6);p_e=n(q7e,"STRONG",{});var Wht=s(p_e);Var=r(Wht,"electra"),Wht.forEach(t),Xar=r(q7e," \u2014 "),pV=n(q7e,"A",{href:!0});var Hht=s(pV);zar=r(Hht,"TFElectraForPreTraining"),Hht.forEach(t),Qar=r(q7e," (ELECTRA model)"),q7e.forEach(t),War=i(U),C6=n(U,"LI",{});var N7e=s(C6);__e=n(N7e,"STRONG",{});var Uht=s(__e);Har=r(Uht,"flaubert"),Uht.forEach(t),Uar=r(N7e," \u2014 "),_V=n(N7e,"A",{href:!0});var Jht=s(_V);Jar=r(Jht,"TFFlaubertWithLMHeadModel"),Jht.forEach(t),Yar=r(N7e," (FlauBERT model)"),N7e.forEach(t),Kar=i(U),w6=n(U,"LI",{});var j7e=s(w6);u_e=n(j7e,"STRONG",{});var Yht=s(u_e);Zar=r(Yht,"funnel"),Yht.forEach(t),enr=r(j7e," \u2014 "),uV=n(j7e,"A",{href:!0});var Kht=s(uV);onr=r(Kht,"TFFunnelForPreTraining"),Kht.forEach(t),rnr=r(j7e," (Funnel Transformer model)"),j7e.forEach(t),tnr=i(U),A6=n(U,"LI",{});var D7e=s(A6);b_e=n(D7e,"STRONG",{});var Zht=s(b_e);anr=r(Zht,"gpt2"),Zht.forEach(t),nnr=r(D7e," \u2014 "),bV=n(D7e,"A",{href:!0});var ept=s(bV);snr=r(ept,"TFGPT2LMHeadModel"),ept.forEach(t),lnr=r(D7e," (OpenAI GPT-2 model)"),D7e.forEach(t),inr=i(U),y6=n(U,"LI",{});var G7e=s(y6);F_e=n(G7e,"STRONG",{});var opt=s(F_e);dnr=r(opt,"layoutlm"),opt.forEach(t),cnr=r(G7e," \u2014 "),FV=n(G7e,"A",{href:!0});var rpt=s(FV);fnr=r(rpt,"TFLayoutLMForMaskedLM"),rpt.forEach(t),mnr=r(G7e," (LayoutLM model)"),G7e.forEach(t),gnr=i(U),L6=n(U,"LI",{});var O7e=s(L6);v_e=n(O7e,"STRONG",{});var tpt=s(v_e);hnr=r(tpt,"lxmert"),tpt.forEach(t),pnr=r(O7e," \u2014 "),vV=n(O7e,"A",{href:!0});var apt=s(vV);_nr=r(apt,"TFLxmertForPreTraining"),apt.forEach(t),unr=r(O7e," (LXMERT model)"),O7e.forEach(t),bnr=i(U),x6=n(U,"LI",{});var V7e=s(x6);T_e=n(V7e,"STRONG",{});var npt=s(T_e);Fnr=r(npt,"mobilebert"),npt.forEach(t),vnr=r(V7e," \u2014 "),TV=n(V7e,"A",{href:!0});var spt=s(TV);Tnr=r(spt,"TFMobileBertForPreTraining"),spt.forEach(t),Mnr=r(V7e," (MobileBERT model)"),V7e.forEach(t),Enr=i(U),k6=n(U,"LI",{});var X7e=s(k6);M_e=n(X7e,"STRONG",{});var lpt=s(M_e);Cnr=r(lpt,"mpnet"),lpt.forEach(t),wnr=r(X7e," \u2014 "),MV=n(X7e,"A",{href:!0});var ipt=s(MV);Anr=r(ipt,"TFMPNetForMaskedLM"),ipt.forEach(t),ynr=r(X7e," (MPNet model)"),X7e.forEach(t),Lnr=i(U),S6=n(U,"LI",{});var z7e=s(S6);E_e=n(z7e,"STRONG",{});var dpt=s(E_e);xnr=r(dpt,"openai-gpt"),dpt.forEach(t),knr=r(z7e," \u2014 "),EV=n(z7e,"A",{href:!0});var cpt=s(EV);Snr=r(cpt,"TFOpenAIGPTLMHeadModel"),cpt.forEach(t),Rnr=r(z7e," (OpenAI GPT model)"),z7e.forEach(t),Bnr=i(U),R6=n(U,"LI",{});var Q7e=s(R6);C_e=n(Q7e,"STRONG",{});var fpt=s(C_e);Pnr=r(fpt,"roberta"),fpt.forEach(t),$nr=r(Q7e," \u2014 "),CV=n(Q7e,"A",{href:!0});var mpt=s(CV);Inr=r(mpt,"TFRobertaForMaskedLM"),mpt.forEach(t),qnr=r(Q7e," (RoBERTa model)"),Q7e.forEach(t),Nnr=i(U),B6=n(U,"LI",{});var W7e=s(B6);w_e=n(W7e,"STRONG",{});var gpt=s(w_e);jnr=r(gpt,"t5"),gpt.forEach(t),Dnr=r(W7e," \u2014 "),wV=n(W7e,"A",{href:!0});var hpt=s(wV);Gnr=r(hpt,"TFT5ForConditionalGeneration"),hpt.forEach(t),Onr=r(W7e," (T5 model)"),W7e.forEach(t),Vnr=i(U),P6=n(U,"LI",{});var H7e=s(P6);A_e=n(H7e,"STRONG",{});var ppt=s(A_e);Xnr=r(ppt,"tapas"),ppt.forEach(t),znr=r(H7e," \u2014 "),AV=n(H7e,"A",{href:!0});var _pt=s(AV);Qnr=r(_pt,"TFTapasForMaskedLM"),_pt.forEach(t),Wnr=r(H7e," (TAPAS model)"),H7e.forEach(t),Hnr=i(U),$6=n(U,"LI",{});var U7e=s($6);y_e=n(U7e,"STRONG",{});var upt=s(y_e);Unr=r(upt,"transfo-xl"),upt.forEach(t),Jnr=r(U7e," \u2014 "),yV=n(U7e,"A",{href:!0});var bpt=s(yV);Ynr=r(bpt,"TFTransfoXLLMHeadModel"),bpt.forEach(t),Knr=r(U7e," (Transformer-XL model)"),U7e.forEach(t),Znr=i(U),I6=n(U,"LI",{});var J7e=s(I6);L_e=n(J7e,"STRONG",{});var Fpt=s(L_e);esr=r(Fpt,"vit_mae"),Fpt.forEach(t),osr=r(J7e," \u2014 "),LV=n(J7e,"A",{href:!0});var vpt=s(LV);rsr=r(vpt,"TFViTMAEForPreTraining"),vpt.forEach(t),tsr=r(J7e," (ViTMAE model)"),J7e.forEach(t),asr=i(U),q6=n(U,"LI",{});var Y7e=s(q6);x_e=n(Y7e,"STRONG",{});var Tpt=s(x_e);nsr=r(Tpt,"xlm"),Tpt.forEach(t),ssr=r(Y7e," \u2014 "),xV=n(Y7e,"A",{href:!0});var Mpt=s(xV);lsr=r(Mpt,"TFXLMWithLMHeadModel"),Mpt.forEach(t),isr=r(Y7e," (XLM model)"),Y7e.forEach(t),dsr=i(U),N6=n(U,"LI",{});var K7e=s(N6);k_e=n(K7e,"STRONG",{});var Ept=s(k_e);csr=r(Ept,"xlm-roberta"),Ept.forEach(t),fsr=r(K7e," \u2014 "),kV=n(K7e,"A",{href:!0});var Cpt=s(kV);msr=r(Cpt,"TFXLMRobertaForMaskedLM"),Cpt.forEach(t),gsr=r(K7e," (XLM-RoBERTa model)"),K7e.forEach(t),hsr=i(U),j6=n(U,"LI",{});var Z7e=s(j6);S_e=n(Z7e,"STRONG",{});var wpt=s(S_e);psr=r(wpt,"xlnet"),wpt.forEach(t),_sr=r(Z7e," \u2014 "),SV=n(Z7e,"A",{href:!0});var Apt=s(SV);usr=r(Apt,"TFXLNetLMHeadModel"),Apt.forEach(t),bsr=r(Z7e," (XLNet model)"),Z7e.forEach(t),U.forEach(t),Fsr=i(_a),R_e=n(_a,"P",{});var ypt=s(R_e);vsr=r(ypt,"Examples:"),ypt.forEach(t),Tsr=i(_a),m(_y.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),CBe=i(c),Fc=n(c,"H2",{class:!0});var P$e=s(Fc);D6=n(P$e,"A",{id:!0,class:!0,href:!0});var Lpt=s(D6);B_e=n(Lpt,"SPAN",{});var xpt=s(B_e);m(uy.$$.fragment,xpt),xpt.forEach(t),Lpt.forEach(t),Msr=i(P$e),P_e=n(P$e,"SPAN",{});var kpt=s(P_e);Esr=r(kpt,"TFAutoModelForCausalLM"),kpt.forEach(t),P$e.forEach(t),wBe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(by.$$.fragment,Vl),Csr=i(Vl),vc=n(Vl,"P",{});var dJ=s(vc);wsr=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RV=n(dJ,"A",{href:!0});var Spt=s(RV);Asr=r(Spt,"from_pretrained()"),Spt.forEach(t),ysr=r(dJ," class method or the "),BV=n(dJ,"A",{href:!0});var Rpt=s(BV);Lsr=r(Rpt,"from_config()"),Rpt.forEach(t),xsr=r(dJ,` class
method.`),dJ.forEach(t),ksr=i(Vl),Fy=n(Vl,"P",{});var $$e=s(Fy);Ssr=r($$e,"This class cannot be instantiated directly using "),$_e=n($$e,"CODE",{});var Bpt=s($_e);Rsr=r(Bpt,"__init__()"),Bpt.forEach(t),Bsr=r($$e," (throws an error)."),$$e.forEach(t),Psr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(vy.$$.fragment,Xl),$sr=i(Xl),I_e=n(Xl,"P",{});var Ppt=s(I_e);Isr=r(Ppt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ppt.forEach(t),qsr=i(Xl),Tc=n(Xl,"P",{});var cJ=s(Tc);Nsr=r(cJ,`Note:
Loading a model from its configuration file does `),q_e=n(cJ,"STRONG",{});var $pt=s(q_e);jsr=r($pt,"not"),$pt.forEach(t),Dsr=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(cJ,"A",{href:!0});var Ipt=s(PV);Gsr=r(Ipt,"from_pretrained()"),Ipt.forEach(t),Osr=r(cJ," to load the model weights."),cJ.forEach(t),Vsr=i(Xl),N_e=n(Xl,"P",{});var qpt=s(N_e);Xsr=r(qpt,"Examples:"),qpt.forEach(t),zsr=i(Xl),m(Ty.$$.fragment,Xl),Xl.forEach(t),Qsr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(My.$$.fragment,ua),Wsr=i(ua),j_e=n(ua,"P",{});var Npt=s(j_e);Hsr=r(Npt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Npt.forEach(t),Usr=i(ua),bn=n(ua,"P",{});var e3=s(bn);Jsr=r(e3,"The model class to instantiate is selected based on the "),D_e=n(e3,"CODE",{});var jpt=s(D_e);Ysr=r(jpt,"model_type"),jpt.forEach(t),Ksr=r(e3,` property of the config object (either
passed as an argument or loaded from `),G_e=n(e3,"CODE",{});var Dpt=s(G_e);Zsr=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),elr=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(e3,"CODE",{});var Gpt=s(O_e);olr=r(Gpt,"pretrained_model_name_or_path"),Gpt.forEach(t),rlr=r(e3,":"),e3.forEach(t),tlr=i(ua),fe=n(ua,"UL",{});var pe=s(fe);G6=n(pe,"LI",{});var e9e=s(G6);V_e=n(e9e,"STRONG",{});var Opt=s(V_e);alr=r(Opt,"bert"),Opt.forEach(t),nlr=r(e9e," \u2014 "),$V=n(e9e,"A",{href:!0});var Vpt=s($V);slr=r(Vpt,"TFBertLMHeadModel"),Vpt.forEach(t),llr=r(e9e," (BERT model)"),e9e.forEach(t),ilr=i(pe),O6=n(pe,"LI",{});var o9e=s(O6);X_e=n(o9e,"STRONG",{});var Xpt=s(X_e);dlr=r(Xpt,"camembert"),Xpt.forEach(t),clr=r(o9e," \u2014 "),IV=n(o9e,"A",{href:!0});var zpt=s(IV);flr=r(zpt,"TFCamembertForCausalLM"),zpt.forEach(t),mlr=r(o9e," (CamemBERT model)"),o9e.forEach(t),glr=i(pe),V6=n(pe,"LI",{});var r9e=s(V6);z_e=n(r9e,"STRONG",{});var Qpt=s(z_e);hlr=r(Qpt,"ctrl"),Qpt.forEach(t),plr=r(r9e," \u2014 "),qV=n(r9e,"A",{href:!0});var Wpt=s(qV);_lr=r(Wpt,"TFCTRLLMHeadModel"),Wpt.forEach(t),ulr=r(r9e," (CTRL model)"),r9e.forEach(t),blr=i(pe),X6=n(pe,"LI",{});var t9e=s(X6);Q_e=n(t9e,"STRONG",{});var Hpt=s(Q_e);Flr=r(Hpt,"gpt2"),Hpt.forEach(t),vlr=r(t9e," \u2014 "),NV=n(t9e,"A",{href:!0});var Upt=s(NV);Tlr=r(Upt,"TFGPT2LMHeadModel"),Upt.forEach(t),Mlr=r(t9e," (OpenAI GPT-2 model)"),t9e.forEach(t),Elr=i(pe),z6=n(pe,"LI",{});var a9e=s(z6);W_e=n(a9e,"STRONG",{});var Jpt=s(W_e);Clr=r(Jpt,"gptj"),Jpt.forEach(t),wlr=r(a9e," \u2014 "),jV=n(a9e,"A",{href:!0});var Ypt=s(jV);Alr=r(Ypt,"TFGPTJForCausalLM"),Ypt.forEach(t),ylr=r(a9e," (GPT-J model)"),a9e.forEach(t),Llr=i(pe),Q6=n(pe,"LI",{});var n9e=s(Q6);H_e=n(n9e,"STRONG",{});var Kpt=s(H_e);xlr=r(Kpt,"openai-gpt"),Kpt.forEach(t),klr=r(n9e," \u2014 "),DV=n(n9e,"A",{href:!0});var Zpt=s(DV);Slr=r(Zpt,"TFOpenAIGPTLMHeadModel"),Zpt.forEach(t),Rlr=r(n9e," (OpenAI GPT model)"),n9e.forEach(t),Blr=i(pe),W6=n(pe,"LI",{});var s9e=s(W6);U_e=n(s9e,"STRONG",{});var e_t=s(U_e);Plr=r(e_t,"rembert"),e_t.forEach(t),$lr=r(s9e," \u2014 "),GV=n(s9e,"A",{href:!0});var o_t=s(GV);Ilr=r(o_t,"TFRemBertForCausalLM"),o_t.forEach(t),qlr=r(s9e," (RemBERT model)"),s9e.forEach(t),Nlr=i(pe),H6=n(pe,"LI",{});var l9e=s(H6);J_e=n(l9e,"STRONG",{});var r_t=s(J_e);jlr=r(r_t,"roberta"),r_t.forEach(t),Dlr=r(l9e," \u2014 "),OV=n(l9e,"A",{href:!0});var t_t=s(OV);Glr=r(t_t,"TFRobertaForCausalLM"),t_t.forEach(t),Olr=r(l9e," (RoBERTa model)"),l9e.forEach(t),Vlr=i(pe),U6=n(pe,"LI",{});var i9e=s(U6);Y_e=n(i9e,"STRONG",{});var a_t=s(Y_e);Xlr=r(a_t,"roformer"),a_t.forEach(t),zlr=r(i9e," \u2014 "),VV=n(i9e,"A",{href:!0});var n_t=s(VV);Qlr=r(n_t,"TFRoFormerForCausalLM"),n_t.forEach(t),Wlr=r(i9e," (RoFormer model)"),i9e.forEach(t),Hlr=i(pe),J6=n(pe,"LI",{});var d9e=s(J6);K_e=n(d9e,"STRONG",{});var s_t=s(K_e);Ulr=r(s_t,"transfo-xl"),s_t.forEach(t),Jlr=r(d9e," \u2014 "),XV=n(d9e,"A",{href:!0});var l_t=s(XV);Ylr=r(l_t,"TFTransfoXLLMHeadModel"),l_t.forEach(t),Klr=r(d9e," (Transformer-XL model)"),d9e.forEach(t),Zlr=i(pe),Y6=n(pe,"LI",{});var c9e=s(Y6);Z_e=n(c9e,"STRONG",{});var i_t=s(Z_e);eir=r(i_t,"xlm"),i_t.forEach(t),oir=r(c9e," \u2014 "),zV=n(c9e,"A",{href:!0});var d_t=s(zV);rir=r(d_t,"TFXLMWithLMHeadModel"),d_t.forEach(t),tir=r(c9e," (XLM model)"),c9e.forEach(t),air=i(pe),K6=n(pe,"LI",{});var f9e=s(K6);eue=n(f9e,"STRONG",{});var c_t=s(eue);nir=r(c_t,"xlnet"),c_t.forEach(t),sir=r(f9e," \u2014 "),QV=n(f9e,"A",{href:!0});var f_t=s(QV);lir=r(f_t,"TFXLNetLMHeadModel"),f_t.forEach(t),iir=r(f9e," (XLNet model)"),f9e.forEach(t),pe.forEach(t),dir=i(ua),oue=n(ua,"P",{});var m_t=s(oue);cir=r(m_t,"Examples:"),m_t.forEach(t),fir=i(ua),m(Ey.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),ABe=i(c),Mc=n(c,"H2",{class:!0});var I$e=s(Mc);Z6=n(I$e,"A",{id:!0,class:!0,href:!0});var g_t=s(Z6);rue=n(g_t,"SPAN",{});var h_t=s(rue);m(Cy.$$.fragment,h_t),h_t.forEach(t),g_t.forEach(t),mir=i(I$e),tue=n(I$e,"SPAN",{});var p_t=s(tue);gir=r(p_t,"TFAutoModelForImageClassification"),p_t.forEach(t),I$e.forEach(t),yBe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(wy.$$.fragment,zl),hir=i(zl),Ec=n(zl,"P",{});var fJ=s(Ec);pir=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WV=n(fJ,"A",{href:!0});var __t=s(WV);_ir=r(__t,"from_pretrained()"),__t.forEach(t),uir=r(fJ," class method or the "),HV=n(fJ,"A",{href:!0});var u_t=s(HV);bir=r(u_t,"from_config()"),u_t.forEach(t),Fir=r(fJ,` class
method.`),fJ.forEach(t),vir=i(zl),Ay=n(zl,"P",{});var q$e=s(Ay);Tir=r(q$e,"This class cannot be instantiated directly using "),aue=n(q$e,"CODE",{});var b_t=s(aue);Mir=r(b_t,"__init__()"),b_t.forEach(t),Eir=r(q$e," (throws an error)."),q$e.forEach(t),Cir=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(yy.$$.fragment,Ql),wir=i(Ql),nue=n(Ql,"P",{});var F_t=s(nue);Air=r(F_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),F_t.forEach(t),yir=i(Ql),Cc=n(Ql,"P",{});var mJ=s(Cc);Lir=r(mJ,`Note:
Loading a model from its configuration file does `),sue=n(mJ,"STRONG",{});var v_t=s(sue);xir=r(v_t,"not"),v_t.forEach(t),kir=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(mJ,"A",{href:!0});var T_t=s(UV);Sir=r(T_t,"from_pretrained()"),T_t.forEach(t),Rir=r(mJ," to load the model weights."),mJ.forEach(t),Bir=i(Ql),lue=n(Ql,"P",{});var M_t=s(lue);Pir=r(M_t,"Examples:"),M_t.forEach(t),$ir=i(Ql),m(Ly.$$.fragment,Ql),Ql.forEach(t),Iir=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(xy.$$.fragment,ba),qir=i(ba),iue=n(ba,"P",{});var E_t=s(iue);Nir=r(E_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E_t.forEach(t),jir=i(ba),Fn=n(ba,"P",{});var o3=s(Fn);Dir=r(o3,"The model class to instantiate is selected based on the "),due=n(o3,"CODE",{});var C_t=s(due);Gir=r(C_t,"model_type"),C_t.forEach(t),Oir=r(o3,` property of the config object (either
passed as an argument or loaded from `),cue=n(o3,"CODE",{});var w_t=s(cue);Vir=r(w_t,"pretrained_model_name_or_path"),w_t.forEach(t),Xir=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(o3,"CODE",{});var A_t=s(fue);zir=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),Qir=r(o3,":"),o3.forEach(t),Wir=i(ba),ky=n(ba,"UL",{});var N$e=s(ky);eT=n(N$e,"LI",{});var m9e=s(eT);mue=n(m9e,"STRONG",{});var y_t=s(mue);Hir=r(y_t,"convnext"),y_t.forEach(t),Uir=r(m9e," \u2014 "),JV=n(m9e,"A",{href:!0});var L_t=s(JV);Jir=r(L_t,"TFConvNextForImageClassification"),L_t.forEach(t),Yir=r(m9e," (ConvNext model)"),m9e.forEach(t),Kir=i(N$e),oT=n(N$e,"LI",{});var g9e=s(oT);gue=n(g9e,"STRONG",{});var x_t=s(gue);Zir=r(x_t,"vit"),x_t.forEach(t),edr=r(g9e," \u2014 "),YV=n(g9e,"A",{href:!0});var k_t=s(YV);odr=r(k_t,"TFViTForImageClassification"),k_t.forEach(t),rdr=r(g9e," (ViT model)"),g9e.forEach(t),N$e.forEach(t),tdr=i(ba),hue=n(ba,"P",{});var S_t=s(hue);adr=r(S_t,"Examples:"),S_t.forEach(t),ndr=i(ba),m(Sy.$$.fragment,ba),ba.forEach(t),zl.forEach(t),LBe=i(c),wc=n(c,"H2",{class:!0});var j$e=s(wc);rT=n(j$e,"A",{id:!0,class:!0,href:!0});var R_t=s(rT);pue=n(R_t,"SPAN",{});var B_t=s(pue);m(Ry.$$.fragment,B_t),B_t.forEach(t),R_t.forEach(t),sdr=i(j$e),_ue=n(j$e,"SPAN",{});var P_t=s(_ue);ldr=r(P_t,"TFAutoModelForMaskedLM"),P_t.forEach(t),j$e.forEach(t),xBe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(By.$$.fragment,Wl),idr=i(Wl),Ac=n(Wl,"P",{});var gJ=s(Ac);ddr=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KV=n(gJ,"A",{href:!0});var $_t=s(KV);cdr=r($_t,"from_pretrained()"),$_t.forEach(t),fdr=r(gJ," class method or the "),ZV=n(gJ,"A",{href:!0});var I_t=s(ZV);mdr=r(I_t,"from_config()"),I_t.forEach(t),gdr=r(gJ,` class
method.`),gJ.forEach(t),hdr=i(Wl),Py=n(Wl,"P",{});var D$e=s(Py);pdr=r(D$e,"This class cannot be instantiated directly using "),uue=n(D$e,"CODE",{});var q_t=s(uue);_dr=r(q_t,"__init__()"),q_t.forEach(t),udr=r(D$e," (throws an error)."),D$e.forEach(t),bdr=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m($y.$$.fragment,Hl),Fdr=i(Hl),bue=n(Hl,"P",{});var N_t=s(bue);vdr=r(N_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),N_t.forEach(t),Tdr=i(Hl),yc=n(Hl,"P",{});var hJ=s(yc);Mdr=r(hJ,`Note:
Loading a model from its configuration file does `),Fue=n(hJ,"STRONG",{});var j_t=s(Fue);Edr=r(j_t,"not"),j_t.forEach(t),Cdr=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(hJ,"A",{href:!0});var D_t=s(eX);wdr=r(D_t,"from_pretrained()"),D_t.forEach(t),Adr=r(hJ," to load the model weights."),hJ.forEach(t),ydr=i(Hl),vue=n(Hl,"P",{});var G_t=s(vue);Ldr=r(G_t,"Examples:"),G_t.forEach(t),xdr=i(Hl),m(Iy.$$.fragment,Hl),Hl.forEach(t),kdr=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(qy.$$.fragment,Fa),Sdr=i(Fa),Tue=n(Fa,"P",{});var O_t=s(Tue);Rdr=r(O_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),O_t.forEach(t),Bdr=i(Fa),vn=n(Fa,"P",{});var r3=s(vn);Pdr=r(r3,"The model class to instantiate is selected based on the "),Mue=n(r3,"CODE",{});var V_t=s(Mue);$dr=r(V_t,"model_type"),V_t.forEach(t),Idr=r(r3,` property of the config object (either
passed as an argument or loaded from `),Eue=n(r3,"CODE",{});var X_t=s(Eue);qdr=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),Ndr=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(r3,"CODE",{});var z_t=s(Cue);jdr=r(z_t,"pretrained_model_name_or_path"),z_t.forEach(t),Ddr=r(r3,":"),r3.forEach(t),Gdr=i(Fa),J=n(Fa,"UL",{});var oe=s(J);tT=n(oe,"LI",{});var h9e=s(tT);wue=n(h9e,"STRONG",{});var Q_t=s(wue);Odr=r(Q_t,"albert"),Q_t.forEach(t),Vdr=r(h9e," \u2014 "),oX=n(h9e,"A",{href:!0});var W_t=s(oX);Xdr=r(W_t,"TFAlbertForMaskedLM"),W_t.forEach(t),zdr=r(h9e," (ALBERT model)"),h9e.forEach(t),Qdr=i(oe),aT=n(oe,"LI",{});var p9e=s(aT);Aue=n(p9e,"STRONG",{});var H_t=s(Aue);Wdr=r(H_t,"bert"),H_t.forEach(t),Hdr=r(p9e," \u2014 "),rX=n(p9e,"A",{href:!0});var U_t=s(rX);Udr=r(U_t,"TFBertForMaskedLM"),U_t.forEach(t),Jdr=r(p9e," (BERT model)"),p9e.forEach(t),Ydr=i(oe),nT=n(oe,"LI",{});var _9e=s(nT);yue=n(_9e,"STRONG",{});var J_t=s(yue);Kdr=r(J_t,"camembert"),J_t.forEach(t),Zdr=r(_9e," \u2014 "),tX=n(_9e,"A",{href:!0});var Y_t=s(tX);ecr=r(Y_t,"TFCamembertForMaskedLM"),Y_t.forEach(t),ocr=r(_9e," (CamemBERT model)"),_9e.forEach(t),rcr=i(oe),sT=n(oe,"LI",{});var u9e=s(sT);Lue=n(u9e,"STRONG",{});var K_t=s(Lue);tcr=r(K_t,"convbert"),K_t.forEach(t),acr=r(u9e," \u2014 "),aX=n(u9e,"A",{href:!0});var Z_t=s(aX);ncr=r(Z_t,"TFConvBertForMaskedLM"),Z_t.forEach(t),scr=r(u9e," (ConvBERT model)"),u9e.forEach(t),lcr=i(oe),lT=n(oe,"LI",{});var b9e=s(lT);xue=n(b9e,"STRONG",{});var eut=s(xue);icr=r(eut,"deberta"),eut.forEach(t),dcr=r(b9e," \u2014 "),nX=n(b9e,"A",{href:!0});var out=s(nX);ccr=r(out,"TFDebertaForMaskedLM"),out.forEach(t),fcr=r(b9e," (DeBERTa model)"),b9e.forEach(t),mcr=i(oe),iT=n(oe,"LI",{});var F9e=s(iT);kue=n(F9e,"STRONG",{});var rut=s(kue);gcr=r(rut,"deberta-v2"),rut.forEach(t),hcr=r(F9e," \u2014 "),sX=n(F9e,"A",{href:!0});var tut=s(sX);pcr=r(tut,"TFDebertaV2ForMaskedLM"),tut.forEach(t),_cr=r(F9e," (DeBERTa-v2 model)"),F9e.forEach(t),ucr=i(oe),dT=n(oe,"LI",{});var v9e=s(dT);Sue=n(v9e,"STRONG",{});var aut=s(Sue);bcr=r(aut,"distilbert"),aut.forEach(t),Fcr=r(v9e," \u2014 "),lX=n(v9e,"A",{href:!0});var nut=s(lX);vcr=r(nut,"TFDistilBertForMaskedLM"),nut.forEach(t),Tcr=r(v9e," (DistilBERT model)"),v9e.forEach(t),Mcr=i(oe),cT=n(oe,"LI",{});var T9e=s(cT);Rue=n(T9e,"STRONG",{});var sut=s(Rue);Ecr=r(sut,"electra"),sut.forEach(t),Ccr=r(T9e," \u2014 "),iX=n(T9e,"A",{href:!0});var lut=s(iX);wcr=r(lut,"TFElectraForMaskedLM"),lut.forEach(t),Acr=r(T9e," (ELECTRA model)"),T9e.forEach(t),ycr=i(oe),fT=n(oe,"LI",{});var M9e=s(fT);Bue=n(M9e,"STRONG",{});var iut=s(Bue);Lcr=r(iut,"flaubert"),iut.forEach(t),xcr=r(M9e," \u2014 "),dX=n(M9e,"A",{href:!0});var dut=s(dX);kcr=r(dut,"TFFlaubertWithLMHeadModel"),dut.forEach(t),Scr=r(M9e," (FlauBERT model)"),M9e.forEach(t),Rcr=i(oe),mT=n(oe,"LI",{});var E9e=s(mT);Pue=n(E9e,"STRONG",{});var cut=s(Pue);Bcr=r(cut,"funnel"),cut.forEach(t),Pcr=r(E9e," \u2014 "),cX=n(E9e,"A",{href:!0});var fut=s(cX);$cr=r(fut,"TFFunnelForMaskedLM"),fut.forEach(t),Icr=r(E9e," (Funnel Transformer model)"),E9e.forEach(t),qcr=i(oe),gT=n(oe,"LI",{});var C9e=s(gT);$ue=n(C9e,"STRONG",{});var mut=s($ue);Ncr=r(mut,"layoutlm"),mut.forEach(t),jcr=r(C9e," \u2014 "),fX=n(C9e,"A",{href:!0});var gut=s(fX);Dcr=r(gut,"TFLayoutLMForMaskedLM"),gut.forEach(t),Gcr=r(C9e," (LayoutLM model)"),C9e.forEach(t),Ocr=i(oe),hT=n(oe,"LI",{});var w9e=s(hT);Iue=n(w9e,"STRONG",{});var hut=s(Iue);Vcr=r(hut,"longformer"),hut.forEach(t),Xcr=r(w9e," \u2014 "),mX=n(w9e,"A",{href:!0});var put=s(mX);zcr=r(put,"TFLongformerForMaskedLM"),put.forEach(t),Qcr=r(w9e," (Longformer model)"),w9e.forEach(t),Wcr=i(oe),pT=n(oe,"LI",{});var A9e=s(pT);que=n(A9e,"STRONG",{});var _ut=s(que);Hcr=r(_ut,"mobilebert"),_ut.forEach(t),Ucr=r(A9e," \u2014 "),gX=n(A9e,"A",{href:!0});var uut=s(gX);Jcr=r(uut,"TFMobileBertForMaskedLM"),uut.forEach(t),Ycr=r(A9e," (MobileBERT model)"),A9e.forEach(t),Kcr=i(oe),_T=n(oe,"LI",{});var y9e=s(_T);Nue=n(y9e,"STRONG",{});var but=s(Nue);Zcr=r(but,"mpnet"),but.forEach(t),efr=r(y9e," \u2014 "),hX=n(y9e,"A",{href:!0});var Fut=s(hX);ofr=r(Fut,"TFMPNetForMaskedLM"),Fut.forEach(t),rfr=r(y9e," (MPNet model)"),y9e.forEach(t),tfr=i(oe),uT=n(oe,"LI",{});var L9e=s(uT);jue=n(L9e,"STRONG",{});var vut=s(jue);afr=r(vut,"rembert"),vut.forEach(t),nfr=r(L9e," \u2014 "),pX=n(L9e,"A",{href:!0});var Tut=s(pX);sfr=r(Tut,"TFRemBertForMaskedLM"),Tut.forEach(t),lfr=r(L9e," (RemBERT model)"),L9e.forEach(t),ifr=i(oe),bT=n(oe,"LI",{});var x9e=s(bT);Due=n(x9e,"STRONG",{});var Mut=s(Due);dfr=r(Mut,"roberta"),Mut.forEach(t),cfr=r(x9e," \u2014 "),_X=n(x9e,"A",{href:!0});var Eut=s(_X);ffr=r(Eut,"TFRobertaForMaskedLM"),Eut.forEach(t),mfr=r(x9e," (RoBERTa model)"),x9e.forEach(t),gfr=i(oe),FT=n(oe,"LI",{});var k9e=s(FT);Gue=n(k9e,"STRONG",{});var Cut=s(Gue);hfr=r(Cut,"roformer"),Cut.forEach(t),pfr=r(k9e," \u2014 "),uX=n(k9e,"A",{href:!0});var wut=s(uX);_fr=r(wut,"TFRoFormerForMaskedLM"),wut.forEach(t),ufr=r(k9e," (RoFormer model)"),k9e.forEach(t),bfr=i(oe),vT=n(oe,"LI",{});var S9e=s(vT);Oue=n(S9e,"STRONG",{});var Aut=s(Oue);Ffr=r(Aut,"tapas"),Aut.forEach(t),vfr=r(S9e," \u2014 "),bX=n(S9e,"A",{href:!0});var yut=s(bX);Tfr=r(yut,"TFTapasForMaskedLM"),yut.forEach(t),Mfr=r(S9e," (TAPAS model)"),S9e.forEach(t),Efr=i(oe),TT=n(oe,"LI",{});var R9e=s(TT);Vue=n(R9e,"STRONG",{});var Lut=s(Vue);Cfr=r(Lut,"xlm"),Lut.forEach(t),wfr=r(R9e," \u2014 "),FX=n(R9e,"A",{href:!0});var xut=s(FX);Afr=r(xut,"TFXLMWithLMHeadModel"),xut.forEach(t),yfr=r(R9e," (XLM model)"),R9e.forEach(t),Lfr=i(oe),MT=n(oe,"LI",{});var B9e=s(MT);Xue=n(B9e,"STRONG",{});var kut=s(Xue);xfr=r(kut,"xlm-roberta"),kut.forEach(t),kfr=r(B9e," \u2014 "),vX=n(B9e,"A",{href:!0});var Sut=s(vX);Sfr=r(Sut,"TFXLMRobertaForMaskedLM"),Sut.forEach(t),Rfr=r(B9e," (XLM-RoBERTa model)"),B9e.forEach(t),oe.forEach(t),Bfr=i(Fa),zue=n(Fa,"P",{});var Rut=s(zue);Pfr=r(Rut,"Examples:"),Rut.forEach(t),$fr=i(Fa),m(Ny.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),kBe=i(c),Lc=n(c,"H2",{class:!0});var G$e=s(Lc);ET=n(G$e,"A",{id:!0,class:!0,href:!0});var But=s(ET);Que=n(But,"SPAN",{});var Put=s(Que);m(jy.$$.fragment,Put),Put.forEach(t),But.forEach(t),Ifr=i(G$e),Wue=n(G$e,"SPAN",{});var $ut=s(Wue);qfr=r($ut,"TFAutoModelForSeq2SeqLM"),$ut.forEach(t),G$e.forEach(t),SBe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(Dy.$$.fragment,Ul),Nfr=i(Ul),xc=n(Ul,"P",{});var pJ=s(xc);jfr=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TX=n(pJ,"A",{href:!0});var Iut=s(TX);Dfr=r(Iut,"from_pretrained()"),Iut.forEach(t),Gfr=r(pJ," class method or the "),MX=n(pJ,"A",{href:!0});var qut=s(MX);Ofr=r(qut,"from_config()"),qut.forEach(t),Vfr=r(pJ,` class
method.`),pJ.forEach(t),Xfr=i(Ul),Gy=n(Ul,"P",{});var O$e=s(Gy);zfr=r(O$e,"This class cannot be instantiated directly using "),Hue=n(O$e,"CODE",{});var Nut=s(Hue);Qfr=r(Nut,"__init__()"),Nut.forEach(t),Wfr=r(O$e," (throws an error)."),O$e.forEach(t),Hfr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(Oy.$$.fragment,Jl),Ufr=i(Jl),Uue=n(Jl,"P",{});var jut=s(Uue);Jfr=r(jut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jut.forEach(t),Yfr=i(Jl),kc=n(Jl,"P",{});var _J=s(kc);Kfr=r(_J,`Note:
Loading a model from its configuration file does `),Jue=n(_J,"STRONG",{});var Dut=s(Jue);Zfr=r(Dut,"not"),Dut.forEach(t),emr=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=n(_J,"A",{href:!0});var Gut=s(EX);omr=r(Gut,"from_pretrained()"),Gut.forEach(t),rmr=r(_J," to load the model weights."),_J.forEach(t),tmr=i(Jl),Yue=n(Jl,"P",{});var Out=s(Yue);amr=r(Out,"Examples:"),Out.forEach(t),nmr=i(Jl),m(Vy.$$.fragment,Jl),Jl.forEach(t),smr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m(Xy.$$.fragment,va),lmr=i(va),Kue=n(va,"P",{});var Vut=s(Kue);imr=r(Vut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vut.forEach(t),dmr=i(va),Tn=n(va,"P",{});var t3=s(Tn);cmr=r(t3,"The model class to instantiate is selected based on the "),Zue=n(t3,"CODE",{});var Xut=s(Zue);fmr=r(Xut,"model_type"),Xut.forEach(t),mmr=r(t3,` property of the config object (either
passed as an argument or loaded from `),e2e=n(t3,"CODE",{});var zut=s(e2e);gmr=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),hmr=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(t3,"CODE",{});var Qut=s(o2e);pmr=r(Qut,"pretrained_model_name_or_path"),Qut.forEach(t),_mr=r(t3,":"),t3.forEach(t),umr=i(va),be=n(va,"UL",{});var we=s(be);CT=n(we,"LI",{});var P9e=s(CT);r2e=n(P9e,"STRONG",{});var Wut=s(r2e);bmr=r(Wut,"bart"),Wut.forEach(t),Fmr=r(P9e," \u2014 "),CX=n(P9e,"A",{href:!0});var Hut=s(CX);vmr=r(Hut,"TFBartForConditionalGeneration"),Hut.forEach(t),Tmr=r(P9e," (BART model)"),P9e.forEach(t),Mmr=i(we),wT=n(we,"LI",{});var $9e=s(wT);t2e=n($9e,"STRONG",{});var Uut=s(t2e);Emr=r(Uut,"blenderbot"),Uut.forEach(t),Cmr=r($9e," \u2014 "),wX=n($9e,"A",{href:!0});var Jut=s(wX);wmr=r(Jut,"TFBlenderbotForConditionalGeneration"),Jut.forEach(t),Amr=r($9e," (Blenderbot model)"),$9e.forEach(t),ymr=i(we),AT=n(we,"LI",{});var I9e=s(AT);a2e=n(I9e,"STRONG",{});var Yut=s(a2e);Lmr=r(Yut,"blenderbot-small"),Yut.forEach(t),xmr=r(I9e," \u2014 "),AX=n(I9e,"A",{href:!0});var Kut=s(AX);kmr=r(Kut,"TFBlenderbotSmallForConditionalGeneration"),Kut.forEach(t),Smr=r(I9e," (BlenderbotSmall model)"),I9e.forEach(t),Rmr=i(we),yT=n(we,"LI",{});var q9e=s(yT);n2e=n(q9e,"STRONG",{});var Zut=s(n2e);Bmr=r(Zut,"encoder-decoder"),Zut.forEach(t),Pmr=r(q9e," \u2014 "),yX=n(q9e,"A",{href:!0});var e2t=s(yX);$mr=r(e2t,"TFEncoderDecoderModel"),e2t.forEach(t),Imr=r(q9e," (Encoder decoder model)"),q9e.forEach(t),qmr=i(we),LT=n(we,"LI",{});var N9e=s(LT);s2e=n(N9e,"STRONG",{});var o2t=s(s2e);Nmr=r(o2t,"led"),o2t.forEach(t),jmr=r(N9e," \u2014 "),LX=n(N9e,"A",{href:!0});var r2t=s(LX);Dmr=r(r2t,"TFLEDForConditionalGeneration"),r2t.forEach(t),Gmr=r(N9e," (LED model)"),N9e.forEach(t),Omr=i(we),xT=n(we,"LI",{});var j9e=s(xT);l2e=n(j9e,"STRONG",{});var t2t=s(l2e);Vmr=r(t2t,"marian"),t2t.forEach(t),Xmr=r(j9e," \u2014 "),xX=n(j9e,"A",{href:!0});var a2t=s(xX);zmr=r(a2t,"TFMarianMTModel"),a2t.forEach(t),Qmr=r(j9e," (Marian model)"),j9e.forEach(t),Wmr=i(we),kT=n(we,"LI",{});var D9e=s(kT);i2e=n(D9e,"STRONG",{});var n2t=s(i2e);Hmr=r(n2t,"mbart"),n2t.forEach(t),Umr=r(D9e," \u2014 "),kX=n(D9e,"A",{href:!0});var s2t=s(kX);Jmr=r(s2t,"TFMBartForConditionalGeneration"),s2t.forEach(t),Ymr=r(D9e," (mBART model)"),D9e.forEach(t),Kmr=i(we),ST=n(we,"LI",{});var G9e=s(ST);d2e=n(G9e,"STRONG",{});var l2t=s(d2e);Zmr=r(l2t,"mt5"),l2t.forEach(t),egr=r(G9e," \u2014 "),SX=n(G9e,"A",{href:!0});var i2t=s(SX);ogr=r(i2t,"TFMT5ForConditionalGeneration"),i2t.forEach(t),rgr=r(G9e," (mT5 model)"),G9e.forEach(t),tgr=i(we),RT=n(we,"LI",{});var O9e=s(RT);c2e=n(O9e,"STRONG",{});var d2t=s(c2e);agr=r(d2t,"pegasus"),d2t.forEach(t),ngr=r(O9e," \u2014 "),RX=n(O9e,"A",{href:!0});var c2t=s(RX);sgr=r(c2t,"TFPegasusForConditionalGeneration"),c2t.forEach(t),lgr=r(O9e," (Pegasus model)"),O9e.forEach(t),igr=i(we),BT=n(we,"LI",{});var V9e=s(BT);f2e=n(V9e,"STRONG",{});var f2t=s(f2e);dgr=r(f2t,"t5"),f2t.forEach(t),cgr=r(V9e," \u2014 "),BX=n(V9e,"A",{href:!0});var m2t=s(BX);fgr=r(m2t,"TFT5ForConditionalGeneration"),m2t.forEach(t),mgr=r(V9e," (T5 model)"),V9e.forEach(t),we.forEach(t),ggr=i(va),m2e=n(va,"P",{});var g2t=s(m2e);hgr=r(g2t,"Examples:"),g2t.forEach(t),pgr=i(va),m(zy.$$.fragment,va),va.forEach(t),Ul.forEach(t),RBe=i(c),Sc=n(c,"H2",{class:!0});var V$e=s(Sc);PT=n(V$e,"A",{id:!0,class:!0,href:!0});var h2t=s(PT);g2e=n(h2t,"SPAN",{});var p2t=s(g2e);m(Qy.$$.fragment,p2t),p2t.forEach(t),h2t.forEach(t),_gr=i(V$e),h2e=n(V$e,"SPAN",{});var _2t=s(h2e);ugr=r(_2t,"TFAutoModelForSequenceClassification"),_2t.forEach(t),V$e.forEach(t),BBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(Wy.$$.fragment,Yl),bgr=i(Yl),Rc=n(Yl,"P",{});var uJ=s(Rc);Fgr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PX=n(uJ,"A",{href:!0});var u2t=s(PX);vgr=r(u2t,"from_pretrained()"),u2t.forEach(t),Tgr=r(uJ," class method or the "),$X=n(uJ,"A",{href:!0});var b2t=s($X);Mgr=r(b2t,"from_config()"),b2t.forEach(t),Egr=r(uJ,` class
method.`),uJ.forEach(t),Cgr=i(Yl),Hy=n(Yl,"P",{});var X$e=s(Hy);wgr=r(X$e,"This class cannot be instantiated directly using "),p2e=n(X$e,"CODE",{});var F2t=s(p2e);Agr=r(F2t,"__init__()"),F2t.forEach(t),ygr=r(X$e," (throws an error)."),X$e.forEach(t),Lgr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(Uy.$$.fragment,Kl),xgr=i(Kl),_2e=n(Kl,"P",{});var v2t=s(_2e);kgr=r(v2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),v2t.forEach(t),Sgr=i(Kl),Bc=n(Kl,"P",{});var bJ=s(Bc);Rgr=r(bJ,`Note:
Loading a model from its configuration file does `),u2e=n(bJ,"STRONG",{});var T2t=s(u2e);Bgr=r(T2t,"not"),T2t.forEach(t),Pgr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(bJ,"A",{href:!0});var M2t=s(IX);$gr=r(M2t,"from_pretrained()"),M2t.forEach(t),Igr=r(bJ," to load the model weights."),bJ.forEach(t),qgr=i(Kl),b2e=n(Kl,"P",{});var E2t=s(b2e);Ngr=r(E2t,"Examples:"),E2t.forEach(t),jgr=i(Kl),m(Jy.$$.fragment,Kl),Kl.forEach(t),Dgr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(Yy.$$.fragment,Ta),Ggr=i(Ta),F2e=n(Ta,"P",{});var C2t=s(F2e);Ogr=r(C2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C2t.forEach(t),Vgr=i(Ta),Mn=n(Ta,"P",{});var a3=s(Mn);Xgr=r(a3,"The model class to instantiate is selected based on the "),v2e=n(a3,"CODE",{});var w2t=s(v2e);zgr=r(w2t,"model_type"),w2t.forEach(t),Qgr=r(a3,` property of the config object (either
passed as an argument or loaded from `),T2e=n(a3,"CODE",{});var A2t=s(T2e);Wgr=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),Hgr=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=n(a3,"CODE",{});var y2t=s(M2e);Ugr=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),Jgr=r(a3,":"),a3.forEach(t),Ygr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);$T=n(Q,"LI",{});var X9e=s($T);E2e=n(X9e,"STRONG",{});var L2t=s(E2e);Kgr=r(L2t,"albert"),L2t.forEach(t),Zgr=r(X9e," \u2014 "),qX=n(X9e,"A",{href:!0});var x2t=s(qX);ehr=r(x2t,"TFAlbertForSequenceClassification"),x2t.forEach(t),ohr=r(X9e," (ALBERT model)"),X9e.forEach(t),rhr=i(Q),IT=n(Q,"LI",{});var z9e=s(IT);C2e=n(z9e,"STRONG",{});var k2t=s(C2e);thr=r(k2t,"bert"),k2t.forEach(t),ahr=r(z9e," \u2014 "),NX=n(z9e,"A",{href:!0});var S2t=s(NX);nhr=r(S2t,"TFBertForSequenceClassification"),S2t.forEach(t),shr=r(z9e," (BERT model)"),z9e.forEach(t),lhr=i(Q),qT=n(Q,"LI",{});var Q9e=s(qT);w2e=n(Q9e,"STRONG",{});var R2t=s(w2e);ihr=r(R2t,"camembert"),R2t.forEach(t),dhr=r(Q9e," \u2014 "),jX=n(Q9e,"A",{href:!0});var B2t=s(jX);chr=r(B2t,"TFCamembertForSequenceClassification"),B2t.forEach(t),fhr=r(Q9e," (CamemBERT model)"),Q9e.forEach(t),mhr=i(Q),NT=n(Q,"LI",{});var W9e=s(NT);A2e=n(W9e,"STRONG",{});var P2t=s(A2e);ghr=r(P2t,"convbert"),P2t.forEach(t),hhr=r(W9e," \u2014 "),DX=n(W9e,"A",{href:!0});var $2t=s(DX);phr=r($2t,"TFConvBertForSequenceClassification"),$2t.forEach(t),_hr=r(W9e," (ConvBERT model)"),W9e.forEach(t),uhr=i(Q),jT=n(Q,"LI",{});var H9e=s(jT);y2e=n(H9e,"STRONG",{});var I2t=s(y2e);bhr=r(I2t,"ctrl"),I2t.forEach(t),Fhr=r(H9e," \u2014 "),GX=n(H9e,"A",{href:!0});var q2t=s(GX);vhr=r(q2t,"TFCTRLForSequenceClassification"),q2t.forEach(t),Thr=r(H9e," (CTRL model)"),H9e.forEach(t),Mhr=i(Q),DT=n(Q,"LI",{});var U9e=s(DT);L2e=n(U9e,"STRONG",{});var N2t=s(L2e);Ehr=r(N2t,"deberta"),N2t.forEach(t),Chr=r(U9e," \u2014 "),OX=n(U9e,"A",{href:!0});var j2t=s(OX);whr=r(j2t,"TFDebertaForSequenceClassification"),j2t.forEach(t),Ahr=r(U9e," (DeBERTa model)"),U9e.forEach(t),yhr=i(Q),GT=n(Q,"LI",{});var J9e=s(GT);x2e=n(J9e,"STRONG",{});var D2t=s(x2e);Lhr=r(D2t,"deberta-v2"),D2t.forEach(t),xhr=r(J9e," \u2014 "),VX=n(J9e,"A",{href:!0});var G2t=s(VX);khr=r(G2t,"TFDebertaV2ForSequenceClassification"),G2t.forEach(t),Shr=r(J9e," (DeBERTa-v2 model)"),J9e.forEach(t),Rhr=i(Q),OT=n(Q,"LI",{});var Y9e=s(OT);k2e=n(Y9e,"STRONG",{});var O2t=s(k2e);Bhr=r(O2t,"distilbert"),O2t.forEach(t),Phr=r(Y9e," \u2014 "),XX=n(Y9e,"A",{href:!0});var V2t=s(XX);$hr=r(V2t,"TFDistilBertForSequenceClassification"),V2t.forEach(t),Ihr=r(Y9e," (DistilBERT model)"),Y9e.forEach(t),qhr=i(Q),VT=n(Q,"LI",{});var K9e=s(VT);S2e=n(K9e,"STRONG",{});var X2t=s(S2e);Nhr=r(X2t,"electra"),X2t.forEach(t),jhr=r(K9e," \u2014 "),zX=n(K9e,"A",{href:!0});var z2t=s(zX);Dhr=r(z2t,"TFElectraForSequenceClassification"),z2t.forEach(t),Ghr=r(K9e," (ELECTRA model)"),K9e.forEach(t),Ohr=i(Q),XT=n(Q,"LI",{});var Z9e=s(XT);R2e=n(Z9e,"STRONG",{});var Q2t=s(R2e);Vhr=r(Q2t,"flaubert"),Q2t.forEach(t),Xhr=r(Z9e," \u2014 "),QX=n(Z9e,"A",{href:!0});var W2t=s(QX);zhr=r(W2t,"TFFlaubertForSequenceClassification"),W2t.forEach(t),Qhr=r(Z9e," (FlauBERT model)"),Z9e.forEach(t),Whr=i(Q),zT=n(Q,"LI",{});var exe=s(zT);B2e=n(exe,"STRONG",{});var H2t=s(B2e);Hhr=r(H2t,"funnel"),H2t.forEach(t),Uhr=r(exe," \u2014 "),WX=n(exe,"A",{href:!0});var U2t=s(WX);Jhr=r(U2t,"TFFunnelForSequenceClassification"),U2t.forEach(t),Yhr=r(exe," (Funnel Transformer model)"),exe.forEach(t),Khr=i(Q),QT=n(Q,"LI",{});var oxe=s(QT);P2e=n(oxe,"STRONG",{});var J2t=s(P2e);Zhr=r(J2t,"gpt2"),J2t.forEach(t),epr=r(oxe," \u2014 "),HX=n(oxe,"A",{href:!0});var Y2t=s(HX);opr=r(Y2t,"TFGPT2ForSequenceClassification"),Y2t.forEach(t),rpr=r(oxe," (OpenAI GPT-2 model)"),oxe.forEach(t),tpr=i(Q),WT=n(Q,"LI",{});var rxe=s(WT);$2e=n(rxe,"STRONG",{});var K2t=s($2e);apr=r(K2t,"gptj"),K2t.forEach(t),npr=r(rxe," \u2014 "),UX=n(rxe,"A",{href:!0});var Z2t=s(UX);spr=r(Z2t,"TFGPTJForSequenceClassification"),Z2t.forEach(t),lpr=r(rxe," (GPT-J model)"),rxe.forEach(t),ipr=i(Q),HT=n(Q,"LI",{});var txe=s(HT);I2e=n(txe,"STRONG",{});var e1t=s(I2e);dpr=r(e1t,"layoutlm"),e1t.forEach(t),cpr=r(txe," \u2014 "),JX=n(txe,"A",{href:!0});var o1t=s(JX);fpr=r(o1t,"TFLayoutLMForSequenceClassification"),o1t.forEach(t),mpr=r(txe," (LayoutLM model)"),txe.forEach(t),gpr=i(Q),UT=n(Q,"LI",{});var axe=s(UT);q2e=n(axe,"STRONG",{});var r1t=s(q2e);hpr=r(r1t,"longformer"),r1t.forEach(t),ppr=r(axe," \u2014 "),YX=n(axe,"A",{href:!0});var t1t=s(YX);_pr=r(t1t,"TFLongformerForSequenceClassification"),t1t.forEach(t),upr=r(axe," (Longformer model)"),axe.forEach(t),bpr=i(Q),JT=n(Q,"LI",{});var nxe=s(JT);N2e=n(nxe,"STRONG",{});var a1t=s(N2e);Fpr=r(a1t,"mobilebert"),a1t.forEach(t),vpr=r(nxe," \u2014 "),KX=n(nxe,"A",{href:!0});var n1t=s(KX);Tpr=r(n1t,"TFMobileBertForSequenceClassification"),n1t.forEach(t),Mpr=r(nxe," (MobileBERT model)"),nxe.forEach(t),Epr=i(Q),YT=n(Q,"LI",{});var sxe=s(YT);j2e=n(sxe,"STRONG",{});var s1t=s(j2e);Cpr=r(s1t,"mpnet"),s1t.forEach(t),wpr=r(sxe," \u2014 "),ZX=n(sxe,"A",{href:!0});var l1t=s(ZX);Apr=r(l1t,"TFMPNetForSequenceClassification"),l1t.forEach(t),ypr=r(sxe," (MPNet model)"),sxe.forEach(t),Lpr=i(Q),KT=n(Q,"LI",{});var lxe=s(KT);D2e=n(lxe,"STRONG",{});var i1t=s(D2e);xpr=r(i1t,"openai-gpt"),i1t.forEach(t),kpr=r(lxe," \u2014 "),ez=n(lxe,"A",{href:!0});var d1t=s(ez);Spr=r(d1t,"TFOpenAIGPTForSequenceClassification"),d1t.forEach(t),Rpr=r(lxe," (OpenAI GPT model)"),lxe.forEach(t),Bpr=i(Q),ZT=n(Q,"LI",{});var ixe=s(ZT);G2e=n(ixe,"STRONG",{});var c1t=s(G2e);Ppr=r(c1t,"rembert"),c1t.forEach(t),$pr=r(ixe," \u2014 "),oz=n(ixe,"A",{href:!0});var f1t=s(oz);Ipr=r(f1t,"TFRemBertForSequenceClassification"),f1t.forEach(t),qpr=r(ixe," (RemBERT model)"),ixe.forEach(t),Npr=i(Q),eM=n(Q,"LI",{});var dxe=s(eM);O2e=n(dxe,"STRONG",{});var m1t=s(O2e);jpr=r(m1t,"roberta"),m1t.forEach(t),Dpr=r(dxe," \u2014 "),rz=n(dxe,"A",{href:!0});var g1t=s(rz);Gpr=r(g1t,"TFRobertaForSequenceClassification"),g1t.forEach(t),Opr=r(dxe," (RoBERTa model)"),dxe.forEach(t),Vpr=i(Q),oM=n(Q,"LI",{});var cxe=s(oM);V2e=n(cxe,"STRONG",{});var h1t=s(V2e);Xpr=r(h1t,"roformer"),h1t.forEach(t),zpr=r(cxe," \u2014 "),tz=n(cxe,"A",{href:!0});var p1t=s(tz);Qpr=r(p1t,"TFRoFormerForSequenceClassification"),p1t.forEach(t),Wpr=r(cxe," (RoFormer model)"),cxe.forEach(t),Hpr=i(Q),rM=n(Q,"LI",{});var fxe=s(rM);X2e=n(fxe,"STRONG",{});var _1t=s(X2e);Upr=r(_1t,"tapas"),_1t.forEach(t),Jpr=r(fxe," \u2014 "),az=n(fxe,"A",{href:!0});var u1t=s(az);Ypr=r(u1t,"TFTapasForSequenceClassification"),u1t.forEach(t),Kpr=r(fxe," (TAPAS model)"),fxe.forEach(t),Zpr=i(Q),tM=n(Q,"LI",{});var mxe=s(tM);z2e=n(mxe,"STRONG",{});var b1t=s(z2e);e_r=r(b1t,"transfo-xl"),b1t.forEach(t),o_r=r(mxe," \u2014 "),nz=n(mxe,"A",{href:!0});var F1t=s(nz);r_r=r(F1t,"TFTransfoXLForSequenceClassification"),F1t.forEach(t),t_r=r(mxe," (Transformer-XL model)"),mxe.forEach(t),a_r=i(Q),aM=n(Q,"LI",{});var gxe=s(aM);Q2e=n(gxe,"STRONG",{});var v1t=s(Q2e);n_r=r(v1t,"xlm"),v1t.forEach(t),s_r=r(gxe," \u2014 "),sz=n(gxe,"A",{href:!0});var T1t=s(sz);l_r=r(T1t,"TFXLMForSequenceClassification"),T1t.forEach(t),i_r=r(gxe," (XLM model)"),gxe.forEach(t),d_r=i(Q),nM=n(Q,"LI",{});var hxe=s(nM);W2e=n(hxe,"STRONG",{});var M1t=s(W2e);c_r=r(M1t,"xlm-roberta"),M1t.forEach(t),f_r=r(hxe," \u2014 "),lz=n(hxe,"A",{href:!0});var E1t=s(lz);m_r=r(E1t,"TFXLMRobertaForSequenceClassification"),E1t.forEach(t),g_r=r(hxe," (XLM-RoBERTa model)"),hxe.forEach(t),h_r=i(Q),sM=n(Q,"LI",{});var pxe=s(sM);H2e=n(pxe,"STRONG",{});var C1t=s(H2e);p_r=r(C1t,"xlnet"),C1t.forEach(t),__r=r(pxe," \u2014 "),iz=n(pxe,"A",{href:!0});var w1t=s(iz);u_r=r(w1t,"TFXLNetForSequenceClassification"),w1t.forEach(t),b_r=r(pxe," (XLNet model)"),pxe.forEach(t),Q.forEach(t),F_r=i(Ta),U2e=n(Ta,"P",{});var A1t=s(U2e);v_r=r(A1t,"Examples:"),A1t.forEach(t),T_r=i(Ta),m(Ky.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),PBe=i(c),Pc=n(c,"H2",{class:!0});var z$e=s(Pc);lM=n(z$e,"A",{id:!0,class:!0,href:!0});var y1t=s(lM);J2e=n(y1t,"SPAN",{});var L1t=s(J2e);m(Zy.$$.fragment,L1t),L1t.forEach(t),y1t.forEach(t),M_r=i(z$e),Y2e=n(z$e,"SPAN",{});var x1t=s(Y2e);E_r=r(x1t,"TFAutoModelForMultipleChoice"),x1t.forEach(t),z$e.forEach(t),$Be=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(eL.$$.fragment,Zl),C_r=i(Zl),$c=n(Zl,"P",{});var FJ=s($c);w_r=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dz=n(FJ,"A",{href:!0});var k1t=s(dz);A_r=r(k1t,"from_pretrained()"),k1t.forEach(t),y_r=r(FJ," class method or the "),cz=n(FJ,"A",{href:!0});var S1t=s(cz);L_r=r(S1t,"from_config()"),S1t.forEach(t),x_r=r(FJ,` class
method.`),FJ.forEach(t),k_r=i(Zl),oL=n(Zl,"P",{});var Q$e=s(oL);S_r=r(Q$e,"This class cannot be instantiated directly using "),K2e=n(Q$e,"CODE",{});var R1t=s(K2e);R_r=r(R1t,"__init__()"),R1t.forEach(t),B_r=r(Q$e," (throws an error)."),Q$e.forEach(t),P_r=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(rL.$$.fragment,ei),$_r=i(ei),Z2e=n(ei,"P",{});var B1t=s(Z2e);I_r=r(B1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),B1t.forEach(t),q_r=i(ei),Ic=n(ei,"P",{});var vJ=s(Ic);N_r=r(vJ,`Note:
Loading a model from its configuration file does `),e1e=n(vJ,"STRONG",{});var P1t=s(e1e);j_r=r(P1t,"not"),P1t.forEach(t),D_r=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(vJ,"A",{href:!0});var $1t=s(fz);G_r=r($1t,"from_pretrained()"),$1t.forEach(t),O_r=r(vJ," to load the model weights."),vJ.forEach(t),V_r=i(ei),o1e=n(ei,"P",{});var I1t=s(o1e);X_r=r(I1t,"Examples:"),I1t.forEach(t),z_r=i(ei),m(tL.$$.fragment,ei),ei.forEach(t),Q_r=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(aL.$$.fragment,Ma),W_r=i(Ma),r1e=n(Ma,"P",{});var q1t=s(r1e);H_r=r(q1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),q1t.forEach(t),U_r=i(Ma),En=n(Ma,"P",{});var n3=s(En);J_r=r(n3,"The model class to instantiate is selected based on the "),t1e=n(n3,"CODE",{});var N1t=s(t1e);Y_r=r(N1t,"model_type"),N1t.forEach(t),K_r=r(n3,` property of the config object (either
passed as an argument or loaded from `),a1e=n(n3,"CODE",{});var j1t=s(a1e);Z_r=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),eur=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(n3,"CODE",{});var D1t=s(n1e);our=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),rur=r(n3,":"),n3.forEach(t),tur=i(Ma),se=n(Ma,"UL",{});var ie=s(se);iM=n(ie,"LI",{});var _xe=s(iM);s1e=n(_xe,"STRONG",{});var G1t=s(s1e);aur=r(G1t,"albert"),G1t.forEach(t),nur=r(_xe," \u2014 "),mz=n(_xe,"A",{href:!0});var O1t=s(mz);sur=r(O1t,"TFAlbertForMultipleChoice"),O1t.forEach(t),lur=r(_xe," (ALBERT model)"),_xe.forEach(t),iur=i(ie),dM=n(ie,"LI",{});var uxe=s(dM);l1e=n(uxe,"STRONG",{});var V1t=s(l1e);dur=r(V1t,"bert"),V1t.forEach(t),cur=r(uxe," \u2014 "),gz=n(uxe,"A",{href:!0});var X1t=s(gz);fur=r(X1t,"TFBertForMultipleChoice"),X1t.forEach(t),mur=r(uxe," (BERT model)"),uxe.forEach(t),gur=i(ie),cM=n(ie,"LI",{});var bxe=s(cM);i1e=n(bxe,"STRONG",{});var z1t=s(i1e);hur=r(z1t,"camembert"),z1t.forEach(t),pur=r(bxe," \u2014 "),hz=n(bxe,"A",{href:!0});var Q1t=s(hz);_ur=r(Q1t,"TFCamembertForMultipleChoice"),Q1t.forEach(t),uur=r(bxe," (CamemBERT model)"),bxe.forEach(t),bur=i(ie),fM=n(ie,"LI",{});var Fxe=s(fM);d1e=n(Fxe,"STRONG",{});var W1t=s(d1e);Fur=r(W1t,"convbert"),W1t.forEach(t),vur=r(Fxe," \u2014 "),pz=n(Fxe,"A",{href:!0});var H1t=s(pz);Tur=r(H1t,"TFConvBertForMultipleChoice"),H1t.forEach(t),Mur=r(Fxe," (ConvBERT model)"),Fxe.forEach(t),Eur=i(ie),mM=n(ie,"LI",{});var vxe=s(mM);c1e=n(vxe,"STRONG",{});var U1t=s(c1e);Cur=r(U1t,"distilbert"),U1t.forEach(t),wur=r(vxe," \u2014 "),_z=n(vxe,"A",{href:!0});var J1t=s(_z);Aur=r(J1t,"TFDistilBertForMultipleChoice"),J1t.forEach(t),yur=r(vxe," (DistilBERT model)"),vxe.forEach(t),Lur=i(ie),gM=n(ie,"LI",{});var Txe=s(gM);f1e=n(Txe,"STRONG",{});var Y1t=s(f1e);xur=r(Y1t,"electra"),Y1t.forEach(t),kur=r(Txe," \u2014 "),uz=n(Txe,"A",{href:!0});var K1t=s(uz);Sur=r(K1t,"TFElectraForMultipleChoice"),K1t.forEach(t),Rur=r(Txe," (ELECTRA model)"),Txe.forEach(t),Bur=i(ie),hM=n(ie,"LI",{});var Mxe=s(hM);m1e=n(Mxe,"STRONG",{});var Z1t=s(m1e);Pur=r(Z1t,"flaubert"),Z1t.forEach(t),$ur=r(Mxe," \u2014 "),bz=n(Mxe,"A",{href:!0});var ebt=s(bz);Iur=r(ebt,"TFFlaubertForMultipleChoice"),ebt.forEach(t),qur=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),Nur=i(ie),pM=n(ie,"LI",{});var Exe=s(pM);g1e=n(Exe,"STRONG",{});var obt=s(g1e);jur=r(obt,"funnel"),obt.forEach(t),Dur=r(Exe," \u2014 "),Fz=n(Exe,"A",{href:!0});var rbt=s(Fz);Gur=r(rbt,"TFFunnelForMultipleChoice"),rbt.forEach(t),Our=r(Exe," (Funnel Transformer model)"),Exe.forEach(t),Vur=i(ie),_M=n(ie,"LI",{});var Cxe=s(_M);h1e=n(Cxe,"STRONG",{});var tbt=s(h1e);Xur=r(tbt,"longformer"),tbt.forEach(t),zur=r(Cxe," \u2014 "),vz=n(Cxe,"A",{href:!0});var abt=s(vz);Qur=r(abt,"TFLongformerForMultipleChoice"),abt.forEach(t),Wur=r(Cxe," (Longformer model)"),Cxe.forEach(t),Hur=i(ie),uM=n(ie,"LI",{});var wxe=s(uM);p1e=n(wxe,"STRONG",{});var nbt=s(p1e);Uur=r(nbt,"mobilebert"),nbt.forEach(t),Jur=r(wxe," \u2014 "),Tz=n(wxe,"A",{href:!0});var sbt=s(Tz);Yur=r(sbt,"TFMobileBertForMultipleChoice"),sbt.forEach(t),Kur=r(wxe," (MobileBERT model)"),wxe.forEach(t),Zur=i(ie),bM=n(ie,"LI",{});var Axe=s(bM);_1e=n(Axe,"STRONG",{});var lbt=s(_1e);e2r=r(lbt,"mpnet"),lbt.forEach(t),o2r=r(Axe," \u2014 "),Mz=n(Axe,"A",{href:!0});var ibt=s(Mz);r2r=r(ibt,"TFMPNetForMultipleChoice"),ibt.forEach(t),t2r=r(Axe," (MPNet model)"),Axe.forEach(t),a2r=i(ie),FM=n(ie,"LI",{});var yxe=s(FM);u1e=n(yxe,"STRONG",{});var dbt=s(u1e);n2r=r(dbt,"rembert"),dbt.forEach(t),s2r=r(yxe," \u2014 "),Ez=n(yxe,"A",{href:!0});var cbt=s(Ez);l2r=r(cbt,"TFRemBertForMultipleChoice"),cbt.forEach(t),i2r=r(yxe," (RemBERT model)"),yxe.forEach(t),d2r=i(ie),vM=n(ie,"LI",{});var Lxe=s(vM);b1e=n(Lxe,"STRONG",{});var fbt=s(b1e);c2r=r(fbt,"roberta"),fbt.forEach(t),f2r=r(Lxe," \u2014 "),Cz=n(Lxe,"A",{href:!0});var mbt=s(Cz);m2r=r(mbt,"TFRobertaForMultipleChoice"),mbt.forEach(t),g2r=r(Lxe," (RoBERTa model)"),Lxe.forEach(t),h2r=i(ie),TM=n(ie,"LI",{});var xxe=s(TM);F1e=n(xxe,"STRONG",{});var gbt=s(F1e);p2r=r(gbt,"roformer"),gbt.forEach(t),_2r=r(xxe," \u2014 "),wz=n(xxe,"A",{href:!0});var hbt=s(wz);u2r=r(hbt,"TFRoFormerForMultipleChoice"),hbt.forEach(t),b2r=r(xxe," (RoFormer model)"),xxe.forEach(t),F2r=i(ie),MM=n(ie,"LI",{});var kxe=s(MM);v1e=n(kxe,"STRONG",{});var pbt=s(v1e);v2r=r(pbt,"xlm"),pbt.forEach(t),T2r=r(kxe," \u2014 "),Az=n(kxe,"A",{href:!0});var _bt=s(Az);M2r=r(_bt,"TFXLMForMultipleChoice"),_bt.forEach(t),E2r=r(kxe," (XLM model)"),kxe.forEach(t),C2r=i(ie),EM=n(ie,"LI",{});var Sxe=s(EM);T1e=n(Sxe,"STRONG",{});var ubt=s(T1e);w2r=r(ubt,"xlm-roberta"),ubt.forEach(t),A2r=r(Sxe," \u2014 "),yz=n(Sxe,"A",{href:!0});var bbt=s(yz);y2r=r(bbt,"TFXLMRobertaForMultipleChoice"),bbt.forEach(t),L2r=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),x2r=i(ie),CM=n(ie,"LI",{});var Rxe=s(CM);M1e=n(Rxe,"STRONG",{});var Fbt=s(M1e);k2r=r(Fbt,"xlnet"),Fbt.forEach(t),S2r=r(Rxe," \u2014 "),Lz=n(Rxe,"A",{href:!0});var vbt=s(Lz);R2r=r(vbt,"TFXLNetForMultipleChoice"),vbt.forEach(t),B2r=r(Rxe," (XLNet model)"),Rxe.forEach(t),ie.forEach(t),P2r=i(Ma),E1e=n(Ma,"P",{});var Tbt=s(E1e);$2r=r(Tbt,"Examples:"),Tbt.forEach(t),I2r=i(Ma),m(nL.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),IBe=i(c),qc=n(c,"H2",{class:!0});var W$e=s(qc);wM=n(W$e,"A",{id:!0,class:!0,href:!0});var Mbt=s(wM);C1e=n(Mbt,"SPAN",{});var Ebt=s(C1e);m(sL.$$.fragment,Ebt),Ebt.forEach(t),Mbt.forEach(t),q2r=i(W$e),w1e=n(W$e,"SPAN",{});var Cbt=s(w1e);N2r=r(Cbt,"TFAutoModelForTableQuestionAnswering"),Cbt.forEach(t),W$e.forEach(t),qBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(lL.$$.fragment,oi),j2r=i(oi),Nc=n(oi,"P",{});var TJ=s(Nc);D2r=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xz=n(TJ,"A",{href:!0});var wbt=s(xz);G2r=r(wbt,"from_pretrained()"),wbt.forEach(t),O2r=r(TJ," class method or the "),kz=n(TJ,"A",{href:!0});var Abt=s(kz);V2r=r(Abt,"from_config()"),Abt.forEach(t),X2r=r(TJ,` class
method.`),TJ.forEach(t),z2r=i(oi),iL=n(oi,"P",{});var H$e=s(iL);Q2r=r(H$e,"This class cannot be instantiated directly using "),A1e=n(H$e,"CODE",{});var ybt=s(A1e);W2r=r(ybt,"__init__()"),ybt.forEach(t),H2r=r(H$e," (throws an error)."),H$e.forEach(t),U2r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(dL.$$.fragment,ri),J2r=i(ri),y1e=n(ri,"P",{});var Lbt=s(y1e);Y2r=r(Lbt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lbt.forEach(t),K2r=i(ri),jc=n(ri,"P",{});var MJ=s(jc);Z2r=r(MJ,`Note:
Loading a model from its configuration file does `),L1e=n(MJ,"STRONG",{});var xbt=s(L1e);e1r=r(xbt,"not"),xbt.forEach(t),o1r=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(MJ,"A",{href:!0});var kbt=s(Sz);r1r=r(kbt,"from_pretrained()"),kbt.forEach(t),t1r=r(MJ," to load the model weights."),MJ.forEach(t),a1r=i(ri),x1e=n(ri,"P",{});var Sbt=s(x1e);n1r=r(Sbt,"Examples:"),Sbt.forEach(t),s1r=i(ri),m(cL.$$.fragment,ri),ri.forEach(t),l1r=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(fL.$$.fragment,Ea),i1r=i(Ea),k1e=n(Ea,"P",{});var Rbt=s(k1e);d1r=r(Rbt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Rbt.forEach(t),c1r=i(Ea),Cn=n(Ea,"P",{});var s3=s(Cn);f1r=r(s3,"The model class to instantiate is selected based on the "),S1e=n(s3,"CODE",{});var Bbt=s(S1e);m1r=r(Bbt,"model_type"),Bbt.forEach(t),g1r=r(s3,` property of the config object (either
passed as an argument or loaded from `),R1e=n(s3,"CODE",{});var Pbt=s(R1e);h1r=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),p1r=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=n(s3,"CODE",{});var $bt=s(B1e);_1r=r($bt,"pretrained_model_name_or_path"),$bt.forEach(t),u1r=r(s3,":"),s3.forEach(t),b1r=i(Ea),P1e=n(Ea,"UL",{});var Ibt=s(P1e);AM=n(Ibt,"LI",{});var Bxe=s(AM);$1e=n(Bxe,"STRONG",{});var qbt=s($1e);F1r=r(qbt,"tapas"),qbt.forEach(t),v1r=r(Bxe," \u2014 "),Rz=n(Bxe,"A",{href:!0});var Nbt=s(Rz);T1r=r(Nbt,"TFTapasForQuestionAnswering"),Nbt.forEach(t),M1r=r(Bxe," (TAPAS model)"),Bxe.forEach(t),Ibt.forEach(t),E1r=i(Ea),I1e=n(Ea,"P",{});var jbt=s(I1e);C1r=r(jbt,"Examples:"),jbt.forEach(t),w1r=i(Ea),m(mL.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),NBe=i(c),Dc=n(c,"H2",{class:!0});var U$e=s(Dc);yM=n(U$e,"A",{id:!0,class:!0,href:!0});var Dbt=s(yM);q1e=n(Dbt,"SPAN",{});var Gbt=s(q1e);m(gL.$$.fragment,Gbt),Gbt.forEach(t),Dbt.forEach(t),A1r=i(U$e),N1e=n(U$e,"SPAN",{});var Obt=s(N1e);y1r=r(Obt,"TFAutoModelForTokenClassification"),Obt.forEach(t),U$e.forEach(t),jBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(hL.$$.fragment,ti),L1r=i(ti),Gc=n(ti,"P",{});var EJ=s(Gc);x1r=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bz=n(EJ,"A",{href:!0});var Vbt=s(Bz);k1r=r(Vbt,"from_pretrained()"),Vbt.forEach(t),S1r=r(EJ," class method or the "),Pz=n(EJ,"A",{href:!0});var Xbt=s(Pz);R1r=r(Xbt,"from_config()"),Xbt.forEach(t),B1r=r(EJ,` class
method.`),EJ.forEach(t),P1r=i(ti),pL=n(ti,"P",{});var J$e=s(pL);$1r=r(J$e,"This class cannot be instantiated directly using "),j1e=n(J$e,"CODE",{});var zbt=s(j1e);I1r=r(zbt,"__init__()"),zbt.forEach(t),q1r=r(J$e," (throws an error)."),J$e.forEach(t),N1r=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(_L.$$.fragment,ai),j1r=i(ai),D1e=n(ai,"P",{});var Qbt=s(D1e);D1r=r(Qbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Qbt.forEach(t),G1r=i(ai),Oc=n(ai,"P",{});var CJ=s(Oc);O1r=r(CJ,`Note:
Loading a model from its configuration file does `),G1e=n(CJ,"STRONG",{});var Wbt=s(G1e);V1r=r(Wbt,"not"),Wbt.forEach(t),X1r=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(CJ,"A",{href:!0});var Hbt=s($z);z1r=r(Hbt,"from_pretrained()"),Hbt.forEach(t),Q1r=r(CJ," to load the model weights."),CJ.forEach(t),W1r=i(ai),O1e=n(ai,"P",{});var Ubt=s(O1e);H1r=r(Ubt,"Examples:"),Ubt.forEach(t),U1r=i(ai),m(uL.$$.fragment,ai),ai.forEach(t),J1r=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(bL.$$.fragment,Ca),Y1r=i(Ca),V1e=n(Ca,"P",{});var Jbt=s(V1e);K1r=r(Jbt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Jbt.forEach(t),Z1r=i(Ca),wn=n(Ca,"P",{});var l3=s(wn);ebr=r(l3,"The model class to instantiate is selected based on the "),X1e=n(l3,"CODE",{});var Ybt=s(X1e);obr=r(Ybt,"model_type"),Ybt.forEach(t),rbr=r(l3,` property of the config object (either
passed as an argument or loaded from `),z1e=n(l3,"CODE",{});var Kbt=s(z1e);tbr=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),abr=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=n(l3,"CODE",{});var Zbt=s(Q1e);nbr=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),sbr=r(l3,":"),l3.forEach(t),lbr=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);LM=n(re,"LI",{});var Pxe=s(LM);W1e=n(Pxe,"STRONG",{});var e5t=s(W1e);ibr=r(e5t,"albert"),e5t.forEach(t),dbr=r(Pxe," \u2014 "),Iz=n(Pxe,"A",{href:!0});var o5t=s(Iz);cbr=r(o5t,"TFAlbertForTokenClassification"),o5t.forEach(t),fbr=r(Pxe," (ALBERT model)"),Pxe.forEach(t),mbr=i(re),xM=n(re,"LI",{});var $xe=s(xM);H1e=n($xe,"STRONG",{});var r5t=s(H1e);gbr=r(r5t,"bert"),r5t.forEach(t),hbr=r($xe," \u2014 "),qz=n($xe,"A",{href:!0});var t5t=s(qz);pbr=r(t5t,"TFBertForTokenClassification"),t5t.forEach(t),_br=r($xe," (BERT model)"),$xe.forEach(t),ubr=i(re),kM=n(re,"LI",{});var Ixe=s(kM);U1e=n(Ixe,"STRONG",{});var a5t=s(U1e);bbr=r(a5t,"camembert"),a5t.forEach(t),Fbr=r(Ixe," \u2014 "),Nz=n(Ixe,"A",{href:!0});var n5t=s(Nz);vbr=r(n5t,"TFCamembertForTokenClassification"),n5t.forEach(t),Tbr=r(Ixe," (CamemBERT model)"),Ixe.forEach(t),Mbr=i(re),SM=n(re,"LI",{});var qxe=s(SM);J1e=n(qxe,"STRONG",{});var s5t=s(J1e);Ebr=r(s5t,"convbert"),s5t.forEach(t),Cbr=r(qxe," \u2014 "),jz=n(qxe,"A",{href:!0});var l5t=s(jz);wbr=r(l5t,"TFConvBertForTokenClassification"),l5t.forEach(t),Abr=r(qxe," (ConvBERT model)"),qxe.forEach(t),ybr=i(re),RM=n(re,"LI",{});var Nxe=s(RM);Y1e=n(Nxe,"STRONG",{});var i5t=s(Y1e);Lbr=r(i5t,"deberta"),i5t.forEach(t),xbr=r(Nxe," \u2014 "),Dz=n(Nxe,"A",{href:!0});var d5t=s(Dz);kbr=r(d5t,"TFDebertaForTokenClassification"),d5t.forEach(t),Sbr=r(Nxe," (DeBERTa model)"),Nxe.forEach(t),Rbr=i(re),BM=n(re,"LI",{});var jxe=s(BM);K1e=n(jxe,"STRONG",{});var c5t=s(K1e);Bbr=r(c5t,"deberta-v2"),c5t.forEach(t),Pbr=r(jxe," \u2014 "),Gz=n(jxe,"A",{href:!0});var f5t=s(Gz);$br=r(f5t,"TFDebertaV2ForTokenClassification"),f5t.forEach(t),Ibr=r(jxe," (DeBERTa-v2 model)"),jxe.forEach(t),qbr=i(re),PM=n(re,"LI",{});var Dxe=s(PM);Z1e=n(Dxe,"STRONG",{});var m5t=s(Z1e);Nbr=r(m5t,"distilbert"),m5t.forEach(t),jbr=r(Dxe," \u2014 "),Oz=n(Dxe,"A",{href:!0});var g5t=s(Oz);Dbr=r(g5t,"TFDistilBertForTokenClassification"),g5t.forEach(t),Gbr=r(Dxe," (DistilBERT model)"),Dxe.forEach(t),Obr=i(re),$M=n(re,"LI",{});var Gxe=s($M);ebe=n(Gxe,"STRONG",{});var h5t=s(ebe);Vbr=r(h5t,"electra"),h5t.forEach(t),Xbr=r(Gxe," \u2014 "),Vz=n(Gxe,"A",{href:!0});var p5t=s(Vz);zbr=r(p5t,"TFElectraForTokenClassification"),p5t.forEach(t),Qbr=r(Gxe," (ELECTRA model)"),Gxe.forEach(t),Wbr=i(re),IM=n(re,"LI",{});var Oxe=s(IM);obe=n(Oxe,"STRONG",{});var _5t=s(obe);Hbr=r(_5t,"flaubert"),_5t.forEach(t),Ubr=r(Oxe," \u2014 "),Xz=n(Oxe,"A",{href:!0});var u5t=s(Xz);Jbr=r(u5t,"TFFlaubertForTokenClassification"),u5t.forEach(t),Ybr=r(Oxe," (FlauBERT model)"),Oxe.forEach(t),Kbr=i(re),qM=n(re,"LI",{});var Vxe=s(qM);rbe=n(Vxe,"STRONG",{});var b5t=s(rbe);Zbr=r(b5t,"funnel"),b5t.forEach(t),e5r=r(Vxe," \u2014 "),zz=n(Vxe,"A",{href:!0});var F5t=s(zz);o5r=r(F5t,"TFFunnelForTokenClassification"),F5t.forEach(t),r5r=r(Vxe," (Funnel Transformer model)"),Vxe.forEach(t),t5r=i(re),NM=n(re,"LI",{});var Xxe=s(NM);tbe=n(Xxe,"STRONG",{});var v5t=s(tbe);a5r=r(v5t,"layoutlm"),v5t.forEach(t),n5r=r(Xxe," \u2014 "),Qz=n(Xxe,"A",{href:!0});var T5t=s(Qz);s5r=r(T5t,"TFLayoutLMForTokenClassification"),T5t.forEach(t),l5r=r(Xxe," (LayoutLM model)"),Xxe.forEach(t),i5r=i(re),jM=n(re,"LI",{});var zxe=s(jM);abe=n(zxe,"STRONG",{});var M5t=s(abe);d5r=r(M5t,"longformer"),M5t.forEach(t),c5r=r(zxe," \u2014 "),Wz=n(zxe,"A",{href:!0});var E5t=s(Wz);f5r=r(E5t,"TFLongformerForTokenClassification"),E5t.forEach(t),m5r=r(zxe," (Longformer model)"),zxe.forEach(t),g5r=i(re),DM=n(re,"LI",{});var Qxe=s(DM);nbe=n(Qxe,"STRONG",{});var C5t=s(nbe);h5r=r(C5t,"mobilebert"),C5t.forEach(t),p5r=r(Qxe," \u2014 "),Hz=n(Qxe,"A",{href:!0});var w5t=s(Hz);_5r=r(w5t,"TFMobileBertForTokenClassification"),w5t.forEach(t),u5r=r(Qxe," (MobileBERT model)"),Qxe.forEach(t),b5r=i(re),GM=n(re,"LI",{});var Wxe=s(GM);sbe=n(Wxe,"STRONG",{});var A5t=s(sbe);F5r=r(A5t,"mpnet"),A5t.forEach(t),v5r=r(Wxe," \u2014 "),Uz=n(Wxe,"A",{href:!0});var y5t=s(Uz);T5r=r(y5t,"TFMPNetForTokenClassification"),y5t.forEach(t),M5r=r(Wxe," (MPNet model)"),Wxe.forEach(t),E5r=i(re),OM=n(re,"LI",{});var Hxe=s(OM);lbe=n(Hxe,"STRONG",{});var L5t=s(lbe);C5r=r(L5t,"rembert"),L5t.forEach(t),w5r=r(Hxe," \u2014 "),Jz=n(Hxe,"A",{href:!0});var x5t=s(Jz);A5r=r(x5t,"TFRemBertForTokenClassification"),x5t.forEach(t),y5r=r(Hxe," (RemBERT model)"),Hxe.forEach(t),L5r=i(re),VM=n(re,"LI",{});var Uxe=s(VM);ibe=n(Uxe,"STRONG",{});var k5t=s(ibe);x5r=r(k5t,"roberta"),k5t.forEach(t),k5r=r(Uxe," \u2014 "),Yz=n(Uxe,"A",{href:!0});var S5t=s(Yz);S5r=r(S5t,"TFRobertaForTokenClassification"),S5t.forEach(t),R5r=r(Uxe," (RoBERTa model)"),Uxe.forEach(t),B5r=i(re),XM=n(re,"LI",{});var Jxe=s(XM);dbe=n(Jxe,"STRONG",{});var R5t=s(dbe);P5r=r(R5t,"roformer"),R5t.forEach(t),$5r=r(Jxe," \u2014 "),Kz=n(Jxe,"A",{href:!0});var B5t=s(Kz);I5r=r(B5t,"TFRoFormerForTokenClassification"),B5t.forEach(t),q5r=r(Jxe," (RoFormer model)"),Jxe.forEach(t),N5r=i(re),zM=n(re,"LI",{});var Yxe=s(zM);cbe=n(Yxe,"STRONG",{});var P5t=s(cbe);j5r=r(P5t,"xlm"),P5t.forEach(t),D5r=r(Yxe," \u2014 "),Zz=n(Yxe,"A",{href:!0});var $5t=s(Zz);G5r=r($5t,"TFXLMForTokenClassification"),$5t.forEach(t),O5r=r(Yxe," (XLM model)"),Yxe.forEach(t),V5r=i(re),QM=n(re,"LI",{});var Kxe=s(QM);fbe=n(Kxe,"STRONG",{});var I5t=s(fbe);X5r=r(I5t,"xlm-roberta"),I5t.forEach(t),z5r=r(Kxe," \u2014 "),eQ=n(Kxe,"A",{href:!0});var q5t=s(eQ);Q5r=r(q5t,"TFXLMRobertaForTokenClassification"),q5t.forEach(t),W5r=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),H5r=i(re),WM=n(re,"LI",{});var Zxe=s(WM);mbe=n(Zxe,"STRONG",{});var N5t=s(mbe);U5r=r(N5t,"xlnet"),N5t.forEach(t),J5r=r(Zxe," \u2014 "),oQ=n(Zxe,"A",{href:!0});var j5t=s(oQ);Y5r=r(j5t,"TFXLNetForTokenClassification"),j5t.forEach(t),K5r=r(Zxe," (XLNet model)"),Zxe.forEach(t),re.forEach(t),Z5r=i(Ca),gbe=n(Ca,"P",{});var D5t=s(gbe);eFr=r(D5t,"Examples:"),D5t.forEach(t),oFr=i(Ca),m(FL.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),DBe=i(c),Vc=n(c,"H2",{class:!0});var Y$e=s(Vc);HM=n(Y$e,"A",{id:!0,class:!0,href:!0});var G5t=s(HM);hbe=n(G5t,"SPAN",{});var O5t=s(hbe);m(vL.$$.fragment,O5t),O5t.forEach(t),G5t.forEach(t),rFr=i(Y$e),pbe=n(Y$e,"SPAN",{});var V5t=s(pbe);tFr=r(V5t,"TFAutoModelForQuestionAnswering"),V5t.forEach(t),Y$e.forEach(t),GBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(TL.$$.fragment,ni),aFr=i(ni),Xc=n(ni,"P",{});var wJ=s(Xc);nFr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rQ=n(wJ,"A",{href:!0});var X5t=s(rQ);sFr=r(X5t,"from_pretrained()"),X5t.forEach(t),lFr=r(wJ," class method or the "),tQ=n(wJ,"A",{href:!0});var z5t=s(tQ);iFr=r(z5t,"from_config()"),z5t.forEach(t),dFr=r(wJ,` class
method.`),wJ.forEach(t),cFr=i(ni),ML=n(ni,"P",{});var K$e=s(ML);fFr=r(K$e,"This class cannot be instantiated directly using "),_be=n(K$e,"CODE",{});var Q5t=s(_be);mFr=r(Q5t,"__init__()"),Q5t.forEach(t),gFr=r(K$e," (throws an error)."),K$e.forEach(t),hFr=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(EL.$$.fragment,si),pFr=i(si),ube=n(si,"P",{});var W5t=s(ube);_Fr=r(W5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),W5t.forEach(t),uFr=i(si),zc=n(si,"P",{});var AJ=s(zc);bFr=r(AJ,`Note:
Loading a model from its configuration file does `),bbe=n(AJ,"STRONG",{});var H5t=s(bbe);FFr=r(H5t,"not"),H5t.forEach(t),vFr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(AJ,"A",{href:!0});var U5t=s(aQ);TFr=r(U5t,"from_pretrained()"),U5t.forEach(t),MFr=r(AJ," to load the model weights."),AJ.forEach(t),EFr=i(si),Fbe=n(si,"P",{});var J5t=s(Fbe);CFr=r(J5t,"Examples:"),J5t.forEach(t),wFr=i(si),m(CL.$$.fragment,si),si.forEach(t),AFr=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(wL.$$.fragment,wa),yFr=i(wa),vbe=n(wa,"P",{});var Y5t=s(vbe);LFr=r(Y5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Y5t.forEach(t),xFr=i(wa),An=n(wa,"P",{});var i3=s(An);kFr=r(i3,"The model class to instantiate is selected based on the "),Tbe=n(i3,"CODE",{});var K5t=s(Tbe);SFr=r(K5t,"model_type"),K5t.forEach(t),RFr=r(i3,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(i3,"CODE",{});var Z5t=s(Mbe);BFr=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),PFr=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(i3,"CODE",{});var eFt=s(Ebe);$Fr=r(eFt,"pretrained_model_name_or_path"),eFt.forEach(t),IFr=r(i3,":"),i3.forEach(t),qFr=i(wa),K=n(wa,"UL",{});var te=s(K);UM=n(te,"LI",{});var eke=s(UM);Cbe=n(eke,"STRONG",{});var oFt=s(Cbe);NFr=r(oFt,"albert"),oFt.forEach(t),jFr=r(eke," \u2014 "),nQ=n(eke,"A",{href:!0});var rFt=s(nQ);DFr=r(rFt,"TFAlbertForQuestionAnswering"),rFt.forEach(t),GFr=r(eke," (ALBERT model)"),eke.forEach(t),OFr=i(te),JM=n(te,"LI",{});var oke=s(JM);wbe=n(oke,"STRONG",{});var tFt=s(wbe);VFr=r(tFt,"bert"),tFt.forEach(t),XFr=r(oke," \u2014 "),sQ=n(oke,"A",{href:!0});var aFt=s(sQ);zFr=r(aFt,"TFBertForQuestionAnswering"),aFt.forEach(t),QFr=r(oke," (BERT model)"),oke.forEach(t),WFr=i(te),YM=n(te,"LI",{});var rke=s(YM);Abe=n(rke,"STRONG",{});var nFt=s(Abe);HFr=r(nFt,"camembert"),nFt.forEach(t),UFr=r(rke," \u2014 "),lQ=n(rke,"A",{href:!0});var sFt=s(lQ);JFr=r(sFt,"TFCamembertForQuestionAnswering"),sFt.forEach(t),YFr=r(rke," (CamemBERT model)"),rke.forEach(t),KFr=i(te),KM=n(te,"LI",{});var tke=s(KM);ybe=n(tke,"STRONG",{});var lFt=s(ybe);ZFr=r(lFt,"convbert"),lFt.forEach(t),evr=r(tke," \u2014 "),iQ=n(tke,"A",{href:!0});var iFt=s(iQ);ovr=r(iFt,"TFConvBertForQuestionAnswering"),iFt.forEach(t),rvr=r(tke," (ConvBERT model)"),tke.forEach(t),tvr=i(te),ZM=n(te,"LI",{});var ake=s(ZM);Lbe=n(ake,"STRONG",{});var dFt=s(Lbe);avr=r(dFt,"deberta"),dFt.forEach(t),nvr=r(ake," \u2014 "),dQ=n(ake,"A",{href:!0});var cFt=s(dQ);svr=r(cFt,"TFDebertaForQuestionAnswering"),cFt.forEach(t),lvr=r(ake," (DeBERTa model)"),ake.forEach(t),ivr=i(te),e4=n(te,"LI",{});var nke=s(e4);xbe=n(nke,"STRONG",{});var fFt=s(xbe);dvr=r(fFt,"deberta-v2"),fFt.forEach(t),cvr=r(nke," \u2014 "),cQ=n(nke,"A",{href:!0});var mFt=s(cQ);fvr=r(mFt,"TFDebertaV2ForQuestionAnswering"),mFt.forEach(t),mvr=r(nke," (DeBERTa-v2 model)"),nke.forEach(t),gvr=i(te),o4=n(te,"LI",{});var ske=s(o4);kbe=n(ske,"STRONG",{});var gFt=s(kbe);hvr=r(gFt,"distilbert"),gFt.forEach(t),pvr=r(ske," \u2014 "),fQ=n(ske,"A",{href:!0});var hFt=s(fQ);_vr=r(hFt,"TFDistilBertForQuestionAnswering"),hFt.forEach(t),uvr=r(ske," (DistilBERT model)"),ske.forEach(t),bvr=i(te),r4=n(te,"LI",{});var lke=s(r4);Sbe=n(lke,"STRONG",{});var pFt=s(Sbe);Fvr=r(pFt,"electra"),pFt.forEach(t),vvr=r(lke," \u2014 "),mQ=n(lke,"A",{href:!0});var _Ft=s(mQ);Tvr=r(_Ft,"TFElectraForQuestionAnswering"),_Ft.forEach(t),Mvr=r(lke," (ELECTRA model)"),lke.forEach(t),Evr=i(te),t4=n(te,"LI",{});var ike=s(t4);Rbe=n(ike,"STRONG",{});var uFt=s(Rbe);Cvr=r(uFt,"flaubert"),uFt.forEach(t),wvr=r(ike," \u2014 "),gQ=n(ike,"A",{href:!0});var bFt=s(gQ);Avr=r(bFt,"TFFlaubertForQuestionAnsweringSimple"),bFt.forEach(t),yvr=r(ike," (FlauBERT model)"),ike.forEach(t),Lvr=i(te),a4=n(te,"LI",{});var dke=s(a4);Bbe=n(dke,"STRONG",{});var FFt=s(Bbe);xvr=r(FFt,"funnel"),FFt.forEach(t),kvr=r(dke," \u2014 "),hQ=n(dke,"A",{href:!0});var vFt=s(hQ);Svr=r(vFt,"TFFunnelForQuestionAnswering"),vFt.forEach(t),Rvr=r(dke," (Funnel Transformer model)"),dke.forEach(t),Bvr=i(te),n4=n(te,"LI",{});var cke=s(n4);Pbe=n(cke,"STRONG",{});var TFt=s(Pbe);Pvr=r(TFt,"gptj"),TFt.forEach(t),$vr=r(cke," \u2014 "),pQ=n(cke,"A",{href:!0});var MFt=s(pQ);Ivr=r(MFt,"TFGPTJForQuestionAnswering"),MFt.forEach(t),qvr=r(cke," (GPT-J model)"),cke.forEach(t),Nvr=i(te),s4=n(te,"LI",{});var fke=s(s4);$be=n(fke,"STRONG",{});var EFt=s($be);jvr=r(EFt,"longformer"),EFt.forEach(t),Dvr=r(fke," \u2014 "),_Q=n(fke,"A",{href:!0});var CFt=s(_Q);Gvr=r(CFt,"TFLongformerForQuestionAnswering"),CFt.forEach(t),Ovr=r(fke," (Longformer model)"),fke.forEach(t),Vvr=i(te),l4=n(te,"LI",{});var mke=s(l4);Ibe=n(mke,"STRONG",{});var wFt=s(Ibe);Xvr=r(wFt,"mobilebert"),wFt.forEach(t),zvr=r(mke," \u2014 "),uQ=n(mke,"A",{href:!0});var AFt=s(uQ);Qvr=r(AFt,"TFMobileBertForQuestionAnswering"),AFt.forEach(t),Wvr=r(mke," (MobileBERT model)"),mke.forEach(t),Hvr=i(te),i4=n(te,"LI",{});var gke=s(i4);qbe=n(gke,"STRONG",{});var yFt=s(qbe);Uvr=r(yFt,"mpnet"),yFt.forEach(t),Jvr=r(gke," \u2014 "),bQ=n(gke,"A",{href:!0});var LFt=s(bQ);Yvr=r(LFt,"TFMPNetForQuestionAnswering"),LFt.forEach(t),Kvr=r(gke," (MPNet model)"),gke.forEach(t),Zvr=i(te),d4=n(te,"LI",{});var hke=s(d4);Nbe=n(hke,"STRONG",{});var xFt=s(Nbe);e6r=r(xFt,"rembert"),xFt.forEach(t),o6r=r(hke," \u2014 "),FQ=n(hke,"A",{href:!0});var kFt=s(FQ);r6r=r(kFt,"TFRemBertForQuestionAnswering"),kFt.forEach(t),t6r=r(hke," (RemBERT model)"),hke.forEach(t),a6r=i(te),c4=n(te,"LI",{});var pke=s(c4);jbe=n(pke,"STRONG",{});var SFt=s(jbe);n6r=r(SFt,"roberta"),SFt.forEach(t),s6r=r(pke," \u2014 "),vQ=n(pke,"A",{href:!0});var RFt=s(vQ);l6r=r(RFt,"TFRobertaForQuestionAnswering"),RFt.forEach(t),i6r=r(pke," (RoBERTa model)"),pke.forEach(t),d6r=i(te),f4=n(te,"LI",{});var _ke=s(f4);Dbe=n(_ke,"STRONG",{});var BFt=s(Dbe);c6r=r(BFt,"roformer"),BFt.forEach(t),f6r=r(_ke," \u2014 "),TQ=n(_ke,"A",{href:!0});var PFt=s(TQ);m6r=r(PFt,"TFRoFormerForQuestionAnswering"),PFt.forEach(t),g6r=r(_ke," (RoFormer model)"),_ke.forEach(t),h6r=i(te),m4=n(te,"LI",{});var uke=s(m4);Gbe=n(uke,"STRONG",{});var $Ft=s(Gbe);p6r=r($Ft,"xlm"),$Ft.forEach(t),_6r=r(uke," \u2014 "),MQ=n(uke,"A",{href:!0});var IFt=s(MQ);u6r=r(IFt,"TFXLMForQuestionAnsweringSimple"),IFt.forEach(t),b6r=r(uke," (XLM model)"),uke.forEach(t),F6r=i(te),g4=n(te,"LI",{});var bke=s(g4);Obe=n(bke,"STRONG",{});var qFt=s(Obe);v6r=r(qFt,"xlm-roberta"),qFt.forEach(t),T6r=r(bke," \u2014 "),EQ=n(bke,"A",{href:!0});var NFt=s(EQ);M6r=r(NFt,"TFXLMRobertaForQuestionAnswering"),NFt.forEach(t),E6r=r(bke," (XLM-RoBERTa model)"),bke.forEach(t),C6r=i(te),h4=n(te,"LI",{});var Fke=s(h4);Vbe=n(Fke,"STRONG",{});var jFt=s(Vbe);w6r=r(jFt,"xlnet"),jFt.forEach(t),A6r=r(Fke," \u2014 "),CQ=n(Fke,"A",{href:!0});var DFt=s(CQ);y6r=r(DFt,"TFXLNetForQuestionAnsweringSimple"),DFt.forEach(t),L6r=r(Fke," (XLNet model)"),Fke.forEach(t),te.forEach(t),x6r=i(wa),Xbe=n(wa,"P",{});var GFt=s(Xbe);k6r=r(GFt,"Examples:"),GFt.forEach(t),S6r=i(wa),m(AL.$$.fragment,wa),wa.forEach(t),ni.forEach(t),OBe=i(c),Qc=n(c,"H2",{class:!0});var Z$e=s(Qc);p4=n(Z$e,"A",{id:!0,class:!0,href:!0});var OFt=s(p4);zbe=n(OFt,"SPAN",{});var VFt=s(zbe);m(yL.$$.fragment,VFt),VFt.forEach(t),OFt.forEach(t),R6r=i(Z$e),Qbe=n(Z$e,"SPAN",{});var XFt=s(Qbe);B6r=r(XFt,"TFAutoModelForVision2Seq"),XFt.forEach(t),Z$e.forEach(t),VBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(LL.$$.fragment,li),P6r=i(li),Wc=n(li,"P",{});var yJ=s(Wc);$6r=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wQ=n(yJ,"A",{href:!0});var zFt=s(wQ);I6r=r(zFt,"from_pretrained()"),zFt.forEach(t),q6r=r(yJ," class method or the "),AQ=n(yJ,"A",{href:!0});var QFt=s(AQ);N6r=r(QFt,"from_config()"),QFt.forEach(t),j6r=r(yJ,` class
method.`),yJ.forEach(t),D6r=i(li),xL=n(li,"P",{});var eIe=s(xL);G6r=r(eIe,"This class cannot be instantiated directly using "),Wbe=n(eIe,"CODE",{});var WFt=s(Wbe);O6r=r(WFt,"__init__()"),WFt.forEach(t),V6r=r(eIe," (throws an error)."),eIe.forEach(t),X6r=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(kL.$$.fragment,ii),z6r=i(ii),Hbe=n(ii,"P",{});var HFt=s(Hbe);Q6r=r(HFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HFt.forEach(t),W6r=i(ii),Hc=n(ii,"P",{});var LJ=s(Hc);H6r=r(LJ,`Note:
Loading a model from its configuration file does `),Ube=n(LJ,"STRONG",{});var UFt=s(Ube);U6r=r(UFt,"not"),UFt.forEach(t),J6r=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(LJ,"A",{href:!0});var JFt=s(yQ);Y6r=r(JFt,"from_pretrained()"),JFt.forEach(t),K6r=r(LJ," to load the model weights."),LJ.forEach(t),Z6r=i(ii),Jbe=n(ii,"P",{});var YFt=s(Jbe);eTr=r(YFt,"Examples:"),YFt.forEach(t),oTr=i(ii),m(SL.$$.fragment,ii),ii.forEach(t),rTr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(RL.$$.fragment,Aa),tTr=i(Aa),Ybe=n(Aa,"P",{});var KFt=s(Ybe);aTr=r(KFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KFt.forEach(t),nTr=i(Aa),yn=n(Aa,"P",{});var d3=s(yn);sTr=r(d3,"The model class to instantiate is selected based on the "),Kbe=n(d3,"CODE",{});var ZFt=s(Kbe);lTr=r(ZFt,"model_type"),ZFt.forEach(t),iTr=r(d3,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(d3,"CODE",{});var evt=s(Zbe);dTr=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),cTr=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=n(d3,"CODE",{});var ovt=s(e5e);fTr=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),mTr=r(d3,":"),d3.forEach(t),gTr=i(Aa),o5e=n(Aa,"UL",{});var rvt=s(o5e);_4=n(rvt,"LI",{});var vke=s(_4);r5e=n(vke,"STRONG",{});var tvt=s(r5e);hTr=r(tvt,"vision-encoder-decoder"),tvt.forEach(t),pTr=r(vke," \u2014 "),LQ=n(vke,"A",{href:!0});var avt=s(LQ);_Tr=r(avt,"TFVisionEncoderDecoderModel"),avt.forEach(t),uTr=r(vke," (Vision Encoder decoder model)"),vke.forEach(t),rvt.forEach(t),bTr=i(Aa),t5e=n(Aa,"P",{});var nvt=s(t5e);FTr=r(nvt,"Examples:"),nvt.forEach(t),vTr=i(Aa),m(BL.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),XBe=i(c),Uc=n(c,"H2",{class:!0});var oIe=s(Uc);u4=n(oIe,"A",{id:!0,class:!0,href:!0});var svt=s(u4);a5e=n(svt,"SPAN",{});var lvt=s(a5e);m(PL.$$.fragment,lvt),lvt.forEach(t),svt.forEach(t),TTr=i(oIe),n5e=n(oIe,"SPAN",{});var ivt=s(n5e);MTr=r(ivt,"TFAutoModelForSpeechSeq2Seq"),ivt.forEach(t),oIe.forEach(t),zBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m($L.$$.fragment,di),ETr=i(di),Jc=n(di,"P",{});var xJ=s(Jc);CTr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xQ=n(xJ,"A",{href:!0});var dvt=s(xQ);wTr=r(dvt,"from_pretrained()"),dvt.forEach(t),ATr=r(xJ," class method or the "),kQ=n(xJ,"A",{href:!0});var cvt=s(kQ);yTr=r(cvt,"from_config()"),cvt.forEach(t),LTr=r(xJ,` class
method.`),xJ.forEach(t),xTr=i(di),IL=n(di,"P",{});var rIe=s(IL);kTr=r(rIe,"This class cannot be instantiated directly using "),s5e=n(rIe,"CODE",{});var fvt=s(s5e);STr=r(fvt,"__init__()"),fvt.forEach(t),RTr=r(rIe," (throws an error)."),rIe.forEach(t),BTr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(qL.$$.fragment,ci),PTr=i(ci),l5e=n(ci,"P",{});var mvt=s(l5e);$Tr=r(mvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mvt.forEach(t),ITr=i(ci),Yc=n(ci,"P",{});var kJ=s(Yc);qTr=r(kJ,`Note:
Loading a model from its configuration file does `),i5e=n(kJ,"STRONG",{});var gvt=s(i5e);NTr=r(gvt,"not"),gvt.forEach(t),jTr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(kJ,"A",{href:!0});var hvt=s(SQ);DTr=r(hvt,"from_pretrained()"),hvt.forEach(t),GTr=r(kJ," to load the model weights."),kJ.forEach(t),OTr=i(ci),d5e=n(ci,"P",{});var pvt=s(d5e);VTr=r(pvt,"Examples:"),pvt.forEach(t),XTr=i(ci),m(NL.$$.fragment,ci),ci.forEach(t),zTr=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(jL.$$.fragment,ya),QTr=i(ya),c5e=n(ya,"P",{});var _vt=s(c5e);WTr=r(_vt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_vt.forEach(t),HTr=i(ya),Ln=n(ya,"P",{});var c3=s(Ln);UTr=r(c3,"The model class to instantiate is selected based on the "),f5e=n(c3,"CODE",{});var uvt=s(f5e);JTr=r(uvt,"model_type"),uvt.forEach(t),YTr=r(c3,` property of the config object (either
passed as an argument or loaded from `),m5e=n(c3,"CODE",{});var bvt=s(m5e);KTr=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),ZTr=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=n(c3,"CODE",{});var Fvt=s(g5e);eMr=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),oMr=r(c3,":"),c3.forEach(t),rMr=i(ya),h5e=n(ya,"UL",{});var vvt=s(h5e);b4=n(vvt,"LI",{});var Tke=s(b4);p5e=n(Tke,"STRONG",{});var Tvt=s(p5e);tMr=r(Tvt,"speech_to_text"),Tvt.forEach(t),aMr=r(Tke," \u2014 "),RQ=n(Tke,"A",{href:!0});var Mvt=s(RQ);nMr=r(Mvt,"TFSpeech2TextForConditionalGeneration"),Mvt.forEach(t),sMr=r(Tke," (Speech2Text model)"),Tke.forEach(t),vvt.forEach(t),lMr=i(ya),_5e=n(ya,"P",{});var Evt=s(_5e);iMr=r(Evt,"Examples:"),Evt.forEach(t),dMr=i(ya),m(DL.$$.fragment,ya),ya.forEach(t),di.forEach(t),QBe=i(c),Kc=n(c,"H2",{class:!0});var tIe=s(Kc);F4=n(tIe,"A",{id:!0,class:!0,href:!0});var Cvt=s(F4);u5e=n(Cvt,"SPAN",{});var wvt=s(u5e);m(GL.$$.fragment,wvt),wvt.forEach(t),Cvt.forEach(t),cMr=i(tIe),b5e=n(tIe,"SPAN",{});var Avt=s(b5e);fMr=r(Avt,"FlaxAutoModel"),Avt.forEach(t),tIe.forEach(t),WBe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(OL.$$.fragment,fi),mMr=i(fi),Zc=n(fi,"P",{});var SJ=s(Zc);gMr=r(SJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BQ=n(SJ,"A",{href:!0});var yvt=s(BQ);hMr=r(yvt,"from_pretrained()"),yvt.forEach(t),pMr=r(SJ," class method or the "),PQ=n(SJ,"A",{href:!0});var Lvt=s(PQ);_Mr=r(Lvt,"from_config()"),Lvt.forEach(t),uMr=r(SJ,` class
method.`),SJ.forEach(t),bMr=i(fi),VL=n(fi,"P",{});var aIe=s(VL);FMr=r(aIe,"This class cannot be instantiated directly using "),F5e=n(aIe,"CODE",{});var xvt=s(F5e);vMr=r(xvt,"__init__()"),xvt.forEach(t),TMr=r(aIe," (throws an error)."),aIe.forEach(t),MMr=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(XL.$$.fragment,mi),EMr=i(mi),v5e=n(mi,"P",{});var kvt=s(v5e);CMr=r(kvt,"Instantiates one of the base model classes of the library from a configuration."),kvt.forEach(t),wMr=i(mi),ef=n(mi,"P",{});var RJ=s(ef);AMr=r(RJ,`Note:
Loading a model from its configuration file does `),T5e=n(RJ,"STRONG",{});var Svt=s(T5e);yMr=r(Svt,"not"),Svt.forEach(t),LMr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(RJ,"A",{href:!0});var Rvt=s($Q);xMr=r(Rvt,"from_pretrained()"),Rvt.forEach(t),kMr=r(RJ," to load the model weights."),RJ.forEach(t),SMr=i(mi),M5e=n(mi,"P",{});var Bvt=s(M5e);RMr=r(Bvt,"Examples:"),Bvt.forEach(t),BMr=i(mi),m(zL.$$.fragment,mi),mi.forEach(t),PMr=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(QL.$$.fragment,La),$Mr=i(La),E5e=n(La,"P",{});var Pvt=s(E5e);IMr=r(Pvt,"Instantiate one of the base model classes of the library from a pretrained model."),Pvt.forEach(t),qMr=i(La),xn=n(La,"P",{});var f3=s(xn);NMr=r(f3,"The model class to instantiate is selected based on the "),C5e=n(f3,"CODE",{});var $vt=s(C5e);jMr=r($vt,"model_type"),$vt.forEach(t),DMr=r(f3,` property of the config object (either
passed as an argument or loaded from `),w5e=n(f3,"CODE",{});var Ivt=s(w5e);GMr=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),OMr=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=n(f3,"CODE",{});var qvt=s(A5e);VMr=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),XMr=r(f3,":"),f3.forEach(t),zMr=i(La),z=n(La,"UL",{});var W=s(z);v4=n(W,"LI",{});var Mke=s(v4);y5e=n(Mke,"STRONG",{});var Nvt=s(y5e);QMr=r(Nvt,"albert"),Nvt.forEach(t),WMr=r(Mke," \u2014 "),IQ=n(Mke,"A",{href:!0});var jvt=s(IQ);HMr=r(jvt,"FlaxAlbertModel"),jvt.forEach(t),UMr=r(Mke," (ALBERT model)"),Mke.forEach(t),JMr=i(W),T4=n(W,"LI",{});var Eke=s(T4);L5e=n(Eke,"STRONG",{});var Dvt=s(L5e);YMr=r(Dvt,"bart"),Dvt.forEach(t),KMr=r(Eke," \u2014 "),qQ=n(Eke,"A",{href:!0});var Gvt=s(qQ);ZMr=r(Gvt,"FlaxBartModel"),Gvt.forEach(t),e4r=r(Eke," (BART model)"),Eke.forEach(t),o4r=i(W),M4=n(W,"LI",{});var Cke=s(M4);x5e=n(Cke,"STRONG",{});var Ovt=s(x5e);r4r=r(Ovt,"beit"),Ovt.forEach(t),t4r=r(Cke," \u2014 "),NQ=n(Cke,"A",{href:!0});var Vvt=s(NQ);a4r=r(Vvt,"FlaxBeitModel"),Vvt.forEach(t),n4r=r(Cke," (BEiT model)"),Cke.forEach(t),s4r=i(W),E4=n(W,"LI",{});var wke=s(E4);k5e=n(wke,"STRONG",{});var Xvt=s(k5e);l4r=r(Xvt,"bert"),Xvt.forEach(t),i4r=r(wke," \u2014 "),jQ=n(wke,"A",{href:!0});var zvt=s(jQ);d4r=r(zvt,"FlaxBertModel"),zvt.forEach(t),c4r=r(wke," (BERT model)"),wke.forEach(t),f4r=i(W),C4=n(W,"LI",{});var Ake=s(C4);S5e=n(Ake,"STRONG",{});var Qvt=s(S5e);m4r=r(Qvt,"big_bird"),Qvt.forEach(t),g4r=r(Ake," \u2014 "),DQ=n(Ake,"A",{href:!0});var Wvt=s(DQ);h4r=r(Wvt,"FlaxBigBirdModel"),Wvt.forEach(t),p4r=r(Ake," (BigBird model)"),Ake.forEach(t),_4r=i(W),w4=n(W,"LI",{});var yke=s(w4);R5e=n(yke,"STRONG",{});var Hvt=s(R5e);u4r=r(Hvt,"blenderbot"),Hvt.forEach(t),b4r=r(yke," \u2014 "),GQ=n(yke,"A",{href:!0});var Uvt=s(GQ);F4r=r(Uvt,"FlaxBlenderbotModel"),Uvt.forEach(t),v4r=r(yke," (Blenderbot model)"),yke.forEach(t),T4r=i(W),A4=n(W,"LI",{});var Lke=s(A4);B5e=n(Lke,"STRONG",{});var Jvt=s(B5e);M4r=r(Jvt,"blenderbot-small"),Jvt.forEach(t),E4r=r(Lke," \u2014 "),OQ=n(Lke,"A",{href:!0});var Yvt=s(OQ);C4r=r(Yvt,"FlaxBlenderbotSmallModel"),Yvt.forEach(t),w4r=r(Lke," (BlenderbotSmall model)"),Lke.forEach(t),A4r=i(W),y4=n(W,"LI",{});var xke=s(y4);P5e=n(xke,"STRONG",{});var Kvt=s(P5e);y4r=r(Kvt,"clip"),Kvt.forEach(t),L4r=r(xke," \u2014 "),VQ=n(xke,"A",{href:!0});var Zvt=s(VQ);x4r=r(Zvt,"FlaxCLIPModel"),Zvt.forEach(t),k4r=r(xke," (CLIP model)"),xke.forEach(t),S4r=i(W),L4=n(W,"LI",{});var kke=s(L4);$5e=n(kke,"STRONG",{});var e6t=s($5e);R4r=r(e6t,"distilbert"),e6t.forEach(t),B4r=r(kke," \u2014 "),XQ=n(kke,"A",{href:!0});var o6t=s(XQ);P4r=r(o6t,"FlaxDistilBertModel"),o6t.forEach(t),$4r=r(kke," (DistilBERT model)"),kke.forEach(t),I4r=i(W),x4=n(W,"LI",{});var Ske=s(x4);I5e=n(Ske,"STRONG",{});var r6t=s(I5e);q4r=r(r6t,"electra"),r6t.forEach(t),N4r=r(Ske," \u2014 "),zQ=n(Ske,"A",{href:!0});var t6t=s(zQ);j4r=r(t6t,"FlaxElectraModel"),t6t.forEach(t),D4r=r(Ske," (ELECTRA model)"),Ske.forEach(t),G4r=i(W),k4=n(W,"LI",{});var Rke=s(k4);q5e=n(Rke,"STRONG",{});var a6t=s(q5e);O4r=r(a6t,"gpt2"),a6t.forEach(t),V4r=r(Rke," \u2014 "),QQ=n(Rke,"A",{href:!0});var n6t=s(QQ);X4r=r(n6t,"FlaxGPT2Model"),n6t.forEach(t),z4r=r(Rke," (OpenAI GPT-2 model)"),Rke.forEach(t),Q4r=i(W),S4=n(W,"LI",{});var Bke=s(S4);N5e=n(Bke,"STRONG",{});var s6t=s(N5e);W4r=r(s6t,"gpt_neo"),s6t.forEach(t),H4r=r(Bke," \u2014 "),WQ=n(Bke,"A",{href:!0});var l6t=s(WQ);U4r=r(l6t,"FlaxGPTNeoModel"),l6t.forEach(t),J4r=r(Bke," (GPT Neo model)"),Bke.forEach(t),Y4r=i(W),R4=n(W,"LI",{});var Pke=s(R4);j5e=n(Pke,"STRONG",{});var i6t=s(j5e);K4r=r(i6t,"gptj"),i6t.forEach(t),Z4r=r(Pke," \u2014 "),HQ=n(Pke,"A",{href:!0});var d6t=s(HQ);eEr=r(d6t,"FlaxGPTJModel"),d6t.forEach(t),oEr=r(Pke," (GPT-J model)"),Pke.forEach(t),rEr=i(W),B4=n(W,"LI",{});var $ke=s(B4);D5e=n($ke,"STRONG",{});var c6t=s(D5e);tEr=r(c6t,"marian"),c6t.forEach(t),aEr=r($ke," \u2014 "),UQ=n($ke,"A",{href:!0});var f6t=s(UQ);nEr=r(f6t,"FlaxMarianModel"),f6t.forEach(t),sEr=r($ke," (Marian model)"),$ke.forEach(t),lEr=i(W),P4=n(W,"LI",{});var Ike=s(P4);G5e=n(Ike,"STRONG",{});var m6t=s(G5e);iEr=r(m6t,"mbart"),m6t.forEach(t),dEr=r(Ike," \u2014 "),JQ=n(Ike,"A",{href:!0});var g6t=s(JQ);cEr=r(g6t,"FlaxMBartModel"),g6t.forEach(t),fEr=r(Ike," (mBART model)"),Ike.forEach(t),mEr=i(W),$4=n(W,"LI",{});var qke=s($4);O5e=n(qke,"STRONG",{});var h6t=s(O5e);gEr=r(h6t,"mt5"),h6t.forEach(t),hEr=r(qke," \u2014 "),YQ=n(qke,"A",{href:!0});var p6t=s(YQ);pEr=r(p6t,"FlaxMT5Model"),p6t.forEach(t),_Er=r(qke," (mT5 model)"),qke.forEach(t),uEr=i(W),I4=n(W,"LI",{});var Nke=s(I4);V5e=n(Nke,"STRONG",{});var _6t=s(V5e);bEr=r(_6t,"pegasus"),_6t.forEach(t),FEr=r(Nke," \u2014 "),KQ=n(Nke,"A",{href:!0});var u6t=s(KQ);vEr=r(u6t,"FlaxPegasusModel"),u6t.forEach(t),TEr=r(Nke," (Pegasus model)"),Nke.forEach(t),MEr=i(W),q4=n(W,"LI",{});var jke=s(q4);X5e=n(jke,"STRONG",{});var b6t=s(X5e);EEr=r(b6t,"roberta"),b6t.forEach(t),CEr=r(jke," \u2014 "),ZQ=n(jke,"A",{href:!0});var F6t=s(ZQ);wEr=r(F6t,"FlaxRobertaModel"),F6t.forEach(t),AEr=r(jke," (RoBERTa model)"),jke.forEach(t),yEr=i(W),N4=n(W,"LI",{});var Dke=s(N4);z5e=n(Dke,"STRONG",{});var v6t=s(z5e);LEr=r(v6t,"roformer"),v6t.forEach(t),xEr=r(Dke," \u2014 "),eW=n(Dke,"A",{href:!0});var T6t=s(eW);kEr=r(T6t,"FlaxRoFormerModel"),T6t.forEach(t),SEr=r(Dke," (RoFormer model)"),Dke.forEach(t),REr=i(W),j4=n(W,"LI",{});var Gke=s(j4);Q5e=n(Gke,"STRONG",{});var M6t=s(Q5e);BEr=r(M6t,"t5"),M6t.forEach(t),PEr=r(Gke," \u2014 "),oW=n(Gke,"A",{href:!0});var E6t=s(oW);$Er=r(E6t,"FlaxT5Model"),E6t.forEach(t),IEr=r(Gke," (T5 model)"),Gke.forEach(t),qEr=i(W),D4=n(W,"LI",{});var Oke=s(D4);W5e=n(Oke,"STRONG",{});var C6t=s(W5e);NEr=r(C6t,"vision-text-dual-encoder"),C6t.forEach(t),jEr=r(Oke," \u2014 "),rW=n(Oke,"A",{href:!0});var w6t=s(rW);DEr=r(w6t,"FlaxVisionTextDualEncoderModel"),w6t.forEach(t),GEr=r(Oke," (VisionTextDualEncoder model)"),Oke.forEach(t),OEr=i(W),G4=n(W,"LI",{});var Vke=s(G4);H5e=n(Vke,"STRONG",{});var A6t=s(H5e);VEr=r(A6t,"vit"),A6t.forEach(t),XEr=r(Vke," \u2014 "),tW=n(Vke,"A",{href:!0});var y6t=s(tW);zEr=r(y6t,"FlaxViTModel"),y6t.forEach(t),QEr=r(Vke," (ViT model)"),Vke.forEach(t),WEr=i(W),O4=n(W,"LI",{});var Xke=s(O4);U5e=n(Xke,"STRONG",{});var L6t=s(U5e);HEr=r(L6t,"wav2vec2"),L6t.forEach(t),UEr=r(Xke," \u2014 "),aW=n(Xke,"A",{href:!0});var x6t=s(aW);JEr=r(x6t,"FlaxWav2Vec2Model"),x6t.forEach(t),YEr=r(Xke," (Wav2Vec2 model)"),Xke.forEach(t),KEr=i(W),V4=n(W,"LI",{});var zke=s(V4);J5e=n(zke,"STRONG",{});var k6t=s(J5e);ZEr=r(k6t,"xglm"),k6t.forEach(t),eCr=r(zke," \u2014 "),nW=n(zke,"A",{href:!0});var S6t=s(nW);oCr=r(S6t,"FlaxXGLMModel"),S6t.forEach(t),rCr=r(zke," (XGLM model)"),zke.forEach(t),tCr=i(W),X4=n(W,"LI",{});var Qke=s(X4);Y5e=n(Qke,"STRONG",{});var R6t=s(Y5e);aCr=r(R6t,"xlm-roberta"),R6t.forEach(t),nCr=r(Qke," \u2014 "),sW=n(Qke,"A",{href:!0});var B6t=s(sW);sCr=r(B6t,"FlaxXLMRobertaModel"),B6t.forEach(t),lCr=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),W.forEach(t),iCr=i(La),K5e=n(La,"P",{});var P6t=s(K5e);dCr=r(P6t,"Examples:"),P6t.forEach(t),cCr=i(La),m(WL.$$.fragment,La),La.forEach(t),fi.forEach(t),HBe=i(c),of=n(c,"H2",{class:!0});var nIe=s(of);z4=n(nIe,"A",{id:!0,class:!0,href:!0});var $6t=s(z4);Z5e=n($6t,"SPAN",{});var I6t=s(Z5e);m(HL.$$.fragment,I6t),I6t.forEach(t),$6t.forEach(t),fCr=i(nIe),eFe=n(nIe,"SPAN",{});var q6t=s(eFe);mCr=r(q6t,"FlaxAutoModelForCausalLM"),q6t.forEach(t),nIe.forEach(t),UBe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(UL.$$.fragment,gi),gCr=i(gi),rf=n(gi,"P",{});var BJ=s(rf);hCr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lW=n(BJ,"A",{href:!0});var N6t=s(lW);pCr=r(N6t,"from_pretrained()"),N6t.forEach(t),_Cr=r(BJ," class method or the "),iW=n(BJ,"A",{href:!0});var j6t=s(iW);uCr=r(j6t,"from_config()"),j6t.forEach(t),bCr=r(BJ,` class
method.`),BJ.forEach(t),FCr=i(gi),JL=n(gi,"P",{});var sIe=s(JL);vCr=r(sIe,"This class cannot be instantiated directly using "),oFe=n(sIe,"CODE",{});var D6t=s(oFe);TCr=r(D6t,"__init__()"),D6t.forEach(t),MCr=r(sIe," (throws an error)."),sIe.forEach(t),ECr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(YL.$$.fragment,hi),CCr=i(hi),rFe=n(hi,"P",{});var G6t=s(rFe);wCr=r(G6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),G6t.forEach(t),ACr=i(hi),tf=n(hi,"P",{});var PJ=s(tf);yCr=r(PJ,`Note:
Loading a model from its configuration file does `),tFe=n(PJ,"STRONG",{});var O6t=s(tFe);LCr=r(O6t,"not"),O6t.forEach(t),xCr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(PJ,"A",{href:!0});var V6t=s(dW);kCr=r(V6t,"from_pretrained()"),V6t.forEach(t),SCr=r(PJ," to load the model weights."),PJ.forEach(t),RCr=i(hi),aFe=n(hi,"P",{});var X6t=s(aFe);BCr=r(X6t,"Examples:"),X6t.forEach(t),PCr=i(hi),m(KL.$$.fragment,hi),hi.forEach(t),$Cr=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(ZL.$$.fragment,xa),ICr=i(xa),nFe=n(xa,"P",{});var z6t=s(nFe);qCr=r(z6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),z6t.forEach(t),NCr=i(xa),kn=n(xa,"P",{});var m3=s(kn);jCr=r(m3,"The model class to instantiate is selected based on the "),sFe=n(m3,"CODE",{});var Q6t=s(sFe);DCr=r(Q6t,"model_type"),Q6t.forEach(t),GCr=r(m3,` property of the config object (either
passed as an argument or loaded from `),lFe=n(m3,"CODE",{});var W6t=s(lFe);OCr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),VCr=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(m3,"CODE",{});var H6t=s(iFe);XCr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),zCr=r(m3,":"),m3.forEach(t),QCr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);Q4=n(pi,"LI",{});var Wke=s(Q4);dFe=n(Wke,"STRONG",{});var U6t=s(dFe);WCr=r(U6t,"bart"),U6t.forEach(t),HCr=r(Wke," \u2014 "),cW=n(Wke,"A",{href:!0});var J6t=s(cW);UCr=r(J6t,"FlaxBartForCausalLM"),J6t.forEach(t),JCr=r(Wke," (BART model)"),Wke.forEach(t),YCr=i(pi),W4=n(pi,"LI",{});var Hke=s(W4);cFe=n(Hke,"STRONG",{});var Y6t=s(cFe);KCr=r(Y6t,"gpt2"),Y6t.forEach(t),ZCr=r(Hke," \u2014 "),fW=n(Hke,"A",{href:!0});var K6t=s(fW);e3r=r(K6t,"FlaxGPT2LMHeadModel"),K6t.forEach(t),o3r=r(Hke," (OpenAI GPT-2 model)"),Hke.forEach(t),r3r=i(pi),H4=n(pi,"LI",{});var Uke=s(H4);fFe=n(Uke,"STRONG",{});var Z6t=s(fFe);t3r=r(Z6t,"gpt_neo"),Z6t.forEach(t),a3r=r(Uke," \u2014 "),mW=n(Uke,"A",{href:!0});var eTt=s(mW);n3r=r(eTt,"FlaxGPTNeoForCausalLM"),eTt.forEach(t),s3r=r(Uke," (GPT Neo model)"),Uke.forEach(t),l3r=i(pi),U4=n(pi,"LI",{});var Jke=s(U4);mFe=n(Jke,"STRONG",{});var oTt=s(mFe);i3r=r(oTt,"gptj"),oTt.forEach(t),d3r=r(Jke," \u2014 "),gW=n(Jke,"A",{href:!0});var rTt=s(gW);c3r=r(rTt,"FlaxGPTJForCausalLM"),rTt.forEach(t),f3r=r(Jke," (GPT-J model)"),Jke.forEach(t),m3r=i(pi),J4=n(pi,"LI",{});var Yke=s(J4);gFe=n(Yke,"STRONG",{});var tTt=s(gFe);g3r=r(tTt,"xglm"),tTt.forEach(t),h3r=r(Yke," \u2014 "),hW=n(Yke,"A",{href:!0});var aTt=s(hW);p3r=r(aTt,"FlaxXGLMForCausalLM"),aTt.forEach(t),_3r=r(Yke," (XGLM model)"),Yke.forEach(t),pi.forEach(t),u3r=i(xa),hFe=n(xa,"P",{});var nTt=s(hFe);b3r=r(nTt,"Examples:"),nTt.forEach(t),F3r=i(xa),m(e8.$$.fragment,xa),xa.forEach(t),gi.forEach(t),JBe=i(c),af=n(c,"H2",{class:!0});var lIe=s(af);Y4=n(lIe,"A",{id:!0,class:!0,href:!0});var sTt=s(Y4);pFe=n(sTt,"SPAN",{});var lTt=s(pFe);m(o8.$$.fragment,lTt),lTt.forEach(t),sTt.forEach(t),v3r=i(lIe),_Fe=n(lIe,"SPAN",{});var iTt=s(_Fe);T3r=r(iTt,"FlaxAutoModelForPreTraining"),iTt.forEach(t),lIe.forEach(t),YBe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(r8.$$.fragment,_i),M3r=i(_i),nf=n(_i,"P",{});var $J=s(nf);E3r=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pW=n($J,"A",{href:!0});var dTt=s(pW);C3r=r(dTt,"from_pretrained()"),dTt.forEach(t),w3r=r($J," class method or the "),_W=n($J,"A",{href:!0});var cTt=s(_W);A3r=r(cTt,"from_config()"),cTt.forEach(t),y3r=r($J,` class
method.`),$J.forEach(t),L3r=i(_i),t8=n(_i,"P",{});var iIe=s(t8);x3r=r(iIe,"This class cannot be instantiated directly using "),uFe=n(iIe,"CODE",{});var fTt=s(uFe);k3r=r(fTt,"__init__()"),fTt.forEach(t),S3r=r(iIe," (throws an error)."),iIe.forEach(t),R3r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(a8.$$.fragment,ui),B3r=i(ui),bFe=n(ui,"P",{});var mTt=s(bFe);P3r=r(mTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mTt.forEach(t),$3r=i(ui),sf=n(ui,"P",{});var IJ=s(sf);I3r=r(IJ,`Note:
Loading a model from its configuration file does `),FFe=n(IJ,"STRONG",{});var gTt=s(FFe);q3r=r(gTt,"not"),gTt.forEach(t),N3r=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(IJ,"A",{href:!0});var hTt=s(uW);j3r=r(hTt,"from_pretrained()"),hTt.forEach(t),D3r=r(IJ," to load the model weights."),IJ.forEach(t),G3r=i(ui),vFe=n(ui,"P",{});var pTt=s(vFe);O3r=r(pTt,"Examples:"),pTt.forEach(t),V3r=i(ui),m(n8.$$.fragment,ui),ui.forEach(t),X3r=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(s8.$$.fragment,ka),z3r=i(ka),TFe=n(ka,"P",{});var _Tt=s(TFe);Q3r=r(_Tt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_Tt.forEach(t),W3r=i(ka),Sn=n(ka,"P",{});var g3=s(Sn);H3r=r(g3,"The model class to instantiate is selected based on the "),MFe=n(g3,"CODE",{});var uTt=s(MFe);U3r=r(uTt,"model_type"),uTt.forEach(t),J3r=r(g3,` property of the config object (either
passed as an argument or loaded from `),EFe=n(g3,"CODE",{});var bTt=s(EFe);Y3r=r(bTt,"pretrained_model_name_or_path"),bTt.forEach(t),K3r=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(g3,"CODE",{});var FTt=s(CFe);Z3r=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),ewr=r(g3,":"),g3.forEach(t),owr=i(ka),me=n(ka,"UL",{});var _e=s(me);K4=n(_e,"LI",{});var Kke=s(K4);wFe=n(Kke,"STRONG",{});var vTt=s(wFe);rwr=r(vTt,"albert"),vTt.forEach(t),twr=r(Kke," \u2014 "),bW=n(Kke,"A",{href:!0});var TTt=s(bW);awr=r(TTt,"FlaxAlbertForPreTraining"),TTt.forEach(t),nwr=r(Kke," (ALBERT model)"),Kke.forEach(t),swr=i(_e),Z4=n(_e,"LI",{});var Zke=s(Z4);AFe=n(Zke,"STRONG",{});var MTt=s(AFe);lwr=r(MTt,"bart"),MTt.forEach(t),iwr=r(Zke," \u2014 "),FW=n(Zke,"A",{href:!0});var ETt=s(FW);dwr=r(ETt,"FlaxBartForConditionalGeneration"),ETt.forEach(t),cwr=r(Zke," (BART model)"),Zke.forEach(t),fwr=i(_e),eE=n(_e,"LI",{});var eSe=s(eE);yFe=n(eSe,"STRONG",{});var CTt=s(yFe);mwr=r(CTt,"bert"),CTt.forEach(t),gwr=r(eSe," \u2014 "),vW=n(eSe,"A",{href:!0});var wTt=s(vW);hwr=r(wTt,"FlaxBertForPreTraining"),wTt.forEach(t),pwr=r(eSe," (BERT model)"),eSe.forEach(t),_wr=i(_e),oE=n(_e,"LI",{});var oSe=s(oE);LFe=n(oSe,"STRONG",{});var ATt=s(LFe);uwr=r(ATt,"big_bird"),ATt.forEach(t),bwr=r(oSe," \u2014 "),TW=n(oSe,"A",{href:!0});var yTt=s(TW);Fwr=r(yTt,"FlaxBigBirdForPreTraining"),yTt.forEach(t),vwr=r(oSe," (BigBird model)"),oSe.forEach(t),Twr=i(_e),rE=n(_e,"LI",{});var rSe=s(rE);xFe=n(rSe,"STRONG",{});var LTt=s(xFe);Mwr=r(LTt,"electra"),LTt.forEach(t),Ewr=r(rSe," \u2014 "),MW=n(rSe,"A",{href:!0});var xTt=s(MW);Cwr=r(xTt,"FlaxElectraForPreTraining"),xTt.forEach(t),wwr=r(rSe," (ELECTRA model)"),rSe.forEach(t),Awr=i(_e),tE=n(_e,"LI",{});var tSe=s(tE);kFe=n(tSe,"STRONG",{});var kTt=s(kFe);ywr=r(kTt,"mbart"),kTt.forEach(t),Lwr=r(tSe," \u2014 "),EW=n(tSe,"A",{href:!0});var STt=s(EW);xwr=r(STt,"FlaxMBartForConditionalGeneration"),STt.forEach(t),kwr=r(tSe," (mBART model)"),tSe.forEach(t),Swr=i(_e),aE=n(_e,"LI",{});var aSe=s(aE);SFe=n(aSe,"STRONG",{});var RTt=s(SFe);Rwr=r(RTt,"mt5"),RTt.forEach(t),Bwr=r(aSe," \u2014 "),CW=n(aSe,"A",{href:!0});var BTt=s(CW);Pwr=r(BTt,"FlaxMT5ForConditionalGeneration"),BTt.forEach(t),$wr=r(aSe," (mT5 model)"),aSe.forEach(t),Iwr=i(_e),nE=n(_e,"LI",{});var nSe=s(nE);RFe=n(nSe,"STRONG",{});var PTt=s(RFe);qwr=r(PTt,"roberta"),PTt.forEach(t),Nwr=r(nSe," \u2014 "),wW=n(nSe,"A",{href:!0});var $Tt=s(wW);jwr=r($Tt,"FlaxRobertaForMaskedLM"),$Tt.forEach(t),Dwr=r(nSe," (RoBERTa model)"),nSe.forEach(t),Gwr=i(_e),sE=n(_e,"LI",{});var sSe=s(sE);BFe=n(sSe,"STRONG",{});var ITt=s(BFe);Owr=r(ITt,"roformer"),ITt.forEach(t),Vwr=r(sSe," \u2014 "),AW=n(sSe,"A",{href:!0});var qTt=s(AW);Xwr=r(qTt,"FlaxRoFormerForMaskedLM"),qTt.forEach(t),zwr=r(sSe," (RoFormer model)"),sSe.forEach(t),Qwr=i(_e),lE=n(_e,"LI",{});var lSe=s(lE);PFe=n(lSe,"STRONG",{});var NTt=s(PFe);Wwr=r(NTt,"t5"),NTt.forEach(t),Hwr=r(lSe," \u2014 "),yW=n(lSe,"A",{href:!0});var jTt=s(yW);Uwr=r(jTt,"FlaxT5ForConditionalGeneration"),jTt.forEach(t),Jwr=r(lSe," (T5 model)"),lSe.forEach(t),Ywr=i(_e),iE=n(_e,"LI",{});var iSe=s(iE);$Fe=n(iSe,"STRONG",{});var DTt=s($Fe);Kwr=r(DTt,"wav2vec2"),DTt.forEach(t),Zwr=r(iSe," \u2014 "),LW=n(iSe,"A",{href:!0});var GTt=s(LW);eAr=r(GTt,"FlaxWav2Vec2ForPreTraining"),GTt.forEach(t),oAr=r(iSe," (Wav2Vec2 model)"),iSe.forEach(t),rAr=i(_e),dE=n(_e,"LI",{});var dSe=s(dE);IFe=n(dSe,"STRONG",{});var OTt=s(IFe);tAr=r(OTt,"xlm-roberta"),OTt.forEach(t),aAr=r(dSe," \u2014 "),xW=n(dSe,"A",{href:!0});var VTt=s(xW);nAr=r(VTt,"FlaxXLMRobertaForMaskedLM"),VTt.forEach(t),sAr=r(dSe," (XLM-RoBERTa model)"),dSe.forEach(t),_e.forEach(t),lAr=i(ka),qFe=n(ka,"P",{});var XTt=s(qFe);iAr=r(XTt,"Examples:"),XTt.forEach(t),dAr=i(ka),m(l8.$$.fragment,ka),ka.forEach(t),_i.forEach(t),KBe=i(c),lf=n(c,"H2",{class:!0});var dIe=s(lf);cE=n(dIe,"A",{id:!0,class:!0,href:!0});var zTt=s(cE);NFe=n(zTt,"SPAN",{});var QTt=s(NFe);m(i8.$$.fragment,QTt),QTt.forEach(t),zTt.forEach(t),cAr=i(dIe),jFe=n(dIe,"SPAN",{});var WTt=s(jFe);fAr=r(WTt,"FlaxAutoModelForMaskedLM"),WTt.forEach(t),dIe.forEach(t),ZBe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(d8.$$.fragment,bi),mAr=i(bi),df=n(bi,"P",{});var qJ=s(df);gAr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kW=n(qJ,"A",{href:!0});var HTt=s(kW);hAr=r(HTt,"from_pretrained()"),HTt.forEach(t),pAr=r(qJ," class method or the "),SW=n(qJ,"A",{href:!0});var UTt=s(SW);_Ar=r(UTt,"from_config()"),UTt.forEach(t),uAr=r(qJ,` class
method.`),qJ.forEach(t),bAr=i(bi),c8=n(bi,"P",{});var cIe=s(c8);FAr=r(cIe,"This class cannot be instantiated directly using "),DFe=n(cIe,"CODE",{});var JTt=s(DFe);vAr=r(JTt,"__init__()"),JTt.forEach(t),TAr=r(cIe," (throws an error)."),cIe.forEach(t),MAr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(f8.$$.fragment,Fi),EAr=i(Fi),GFe=n(Fi,"P",{});var YTt=s(GFe);CAr=r(YTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YTt.forEach(t),wAr=i(Fi),cf=n(Fi,"P",{});var NJ=s(cf);AAr=r(NJ,`Note:
Loading a model from its configuration file does `),OFe=n(NJ,"STRONG",{});var KTt=s(OFe);yAr=r(KTt,"not"),KTt.forEach(t),LAr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(NJ,"A",{href:!0});var ZTt=s(RW);xAr=r(ZTt,"from_pretrained()"),ZTt.forEach(t),kAr=r(NJ," to load the model weights."),NJ.forEach(t),SAr=i(Fi),VFe=n(Fi,"P",{});var eMt=s(VFe);RAr=r(eMt,"Examples:"),eMt.forEach(t),BAr=i(Fi),m(m8.$$.fragment,Fi),Fi.forEach(t),PAr=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(g8.$$.fragment,Sa),$Ar=i(Sa),XFe=n(Sa,"P",{});var oMt=s(XFe);IAr=r(oMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oMt.forEach(t),qAr=i(Sa),Rn=n(Sa,"P",{});var h3=s(Rn);NAr=r(h3,"The model class to instantiate is selected based on the "),zFe=n(h3,"CODE",{});var rMt=s(zFe);jAr=r(rMt,"model_type"),rMt.forEach(t),DAr=r(h3,` property of the config object (either
passed as an argument or loaded from `),QFe=n(h3,"CODE",{});var tMt=s(QFe);GAr=r(tMt,"pretrained_model_name_or_path"),tMt.forEach(t),OAr=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(h3,"CODE",{});var aMt=s(WFe);VAr=r(aMt,"pretrained_model_name_or_path"),aMt.forEach(t),XAr=r(h3,":"),h3.forEach(t),zAr=i(Sa),Fe=n(Sa,"UL",{});var Ae=s(Fe);fE=n(Ae,"LI",{});var cSe=s(fE);HFe=n(cSe,"STRONG",{});var nMt=s(HFe);QAr=r(nMt,"albert"),nMt.forEach(t),WAr=r(cSe," \u2014 "),BW=n(cSe,"A",{href:!0});var sMt=s(BW);HAr=r(sMt,"FlaxAlbertForMaskedLM"),sMt.forEach(t),UAr=r(cSe," (ALBERT model)"),cSe.forEach(t),JAr=i(Ae),mE=n(Ae,"LI",{});var fSe=s(mE);UFe=n(fSe,"STRONG",{});var lMt=s(UFe);YAr=r(lMt,"bart"),lMt.forEach(t),KAr=r(fSe," \u2014 "),PW=n(fSe,"A",{href:!0});var iMt=s(PW);ZAr=r(iMt,"FlaxBartForConditionalGeneration"),iMt.forEach(t),e0r=r(fSe," (BART model)"),fSe.forEach(t),o0r=i(Ae),gE=n(Ae,"LI",{});var mSe=s(gE);JFe=n(mSe,"STRONG",{});var dMt=s(JFe);r0r=r(dMt,"bert"),dMt.forEach(t),t0r=r(mSe," \u2014 "),$W=n(mSe,"A",{href:!0});var cMt=s($W);a0r=r(cMt,"FlaxBertForMaskedLM"),cMt.forEach(t),n0r=r(mSe," (BERT model)"),mSe.forEach(t),s0r=i(Ae),hE=n(Ae,"LI",{});var gSe=s(hE);YFe=n(gSe,"STRONG",{});var fMt=s(YFe);l0r=r(fMt,"big_bird"),fMt.forEach(t),i0r=r(gSe," \u2014 "),IW=n(gSe,"A",{href:!0});var mMt=s(IW);d0r=r(mMt,"FlaxBigBirdForMaskedLM"),mMt.forEach(t),c0r=r(gSe," (BigBird model)"),gSe.forEach(t),f0r=i(Ae),pE=n(Ae,"LI",{});var hSe=s(pE);KFe=n(hSe,"STRONG",{});var gMt=s(KFe);m0r=r(gMt,"distilbert"),gMt.forEach(t),g0r=r(hSe," \u2014 "),qW=n(hSe,"A",{href:!0});var hMt=s(qW);h0r=r(hMt,"FlaxDistilBertForMaskedLM"),hMt.forEach(t),p0r=r(hSe," (DistilBERT model)"),hSe.forEach(t),_0r=i(Ae),_E=n(Ae,"LI",{});var pSe=s(_E);ZFe=n(pSe,"STRONG",{});var pMt=s(ZFe);u0r=r(pMt,"electra"),pMt.forEach(t),b0r=r(pSe," \u2014 "),NW=n(pSe,"A",{href:!0});var _Mt=s(NW);F0r=r(_Mt,"FlaxElectraForMaskedLM"),_Mt.forEach(t),v0r=r(pSe," (ELECTRA model)"),pSe.forEach(t),T0r=i(Ae),uE=n(Ae,"LI",{});var _Se=s(uE);eve=n(_Se,"STRONG",{});var uMt=s(eve);M0r=r(uMt,"mbart"),uMt.forEach(t),E0r=r(_Se," \u2014 "),jW=n(_Se,"A",{href:!0});var bMt=s(jW);C0r=r(bMt,"FlaxMBartForConditionalGeneration"),bMt.forEach(t),w0r=r(_Se," (mBART model)"),_Se.forEach(t),A0r=i(Ae),bE=n(Ae,"LI",{});var uSe=s(bE);ove=n(uSe,"STRONG",{});var FMt=s(ove);y0r=r(FMt,"roberta"),FMt.forEach(t),L0r=r(uSe," \u2014 "),DW=n(uSe,"A",{href:!0});var vMt=s(DW);x0r=r(vMt,"FlaxRobertaForMaskedLM"),vMt.forEach(t),k0r=r(uSe," (RoBERTa model)"),uSe.forEach(t),S0r=i(Ae),FE=n(Ae,"LI",{});var bSe=s(FE);rve=n(bSe,"STRONG",{});var TMt=s(rve);R0r=r(TMt,"roformer"),TMt.forEach(t),B0r=r(bSe," \u2014 "),GW=n(bSe,"A",{href:!0});var MMt=s(GW);P0r=r(MMt,"FlaxRoFormerForMaskedLM"),MMt.forEach(t),$0r=r(bSe," (RoFormer model)"),bSe.forEach(t),I0r=i(Ae),vE=n(Ae,"LI",{});var FSe=s(vE);tve=n(FSe,"STRONG",{});var EMt=s(tve);q0r=r(EMt,"xlm-roberta"),EMt.forEach(t),N0r=r(FSe," \u2014 "),OW=n(FSe,"A",{href:!0});var CMt=s(OW);j0r=r(CMt,"FlaxXLMRobertaForMaskedLM"),CMt.forEach(t),D0r=r(FSe," (XLM-RoBERTa model)"),FSe.forEach(t),Ae.forEach(t),G0r=i(Sa),ave=n(Sa,"P",{});var wMt=s(ave);O0r=r(wMt,"Examples:"),wMt.forEach(t),V0r=i(Sa),m(h8.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),ePe=i(c),ff=n(c,"H2",{class:!0});var fIe=s(ff);TE=n(fIe,"A",{id:!0,class:!0,href:!0});var AMt=s(TE);nve=n(AMt,"SPAN",{});var yMt=s(nve);m(p8.$$.fragment,yMt),yMt.forEach(t),AMt.forEach(t),X0r=i(fIe),sve=n(fIe,"SPAN",{});var LMt=s(sve);z0r=r(LMt,"FlaxAutoModelForSeq2SeqLM"),LMt.forEach(t),fIe.forEach(t),oPe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(_8.$$.fragment,vi),Q0r=i(vi),mf=n(vi,"P",{});var jJ=s(mf);W0r=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VW=n(jJ,"A",{href:!0});var xMt=s(VW);H0r=r(xMt,"from_pretrained()"),xMt.forEach(t),U0r=r(jJ," class method or the "),XW=n(jJ,"A",{href:!0});var kMt=s(XW);J0r=r(kMt,"from_config()"),kMt.forEach(t),Y0r=r(jJ,` class
method.`),jJ.forEach(t),K0r=i(vi),u8=n(vi,"P",{});var mIe=s(u8);Z0r=r(mIe,"This class cannot be instantiated directly using "),lve=n(mIe,"CODE",{});var SMt=s(lve);eyr=r(SMt,"__init__()"),SMt.forEach(t),oyr=r(mIe," (throws an error)."),mIe.forEach(t),ryr=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(b8.$$.fragment,Ti),tyr=i(Ti),ive=n(Ti,"P",{});var RMt=s(ive);ayr=r(RMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RMt.forEach(t),nyr=i(Ti),gf=n(Ti,"P",{});var DJ=s(gf);syr=r(DJ,`Note:
Loading a model from its configuration file does `),dve=n(DJ,"STRONG",{});var BMt=s(dve);lyr=r(BMt,"not"),BMt.forEach(t),iyr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(DJ,"A",{href:!0});var PMt=s(zW);dyr=r(PMt,"from_pretrained()"),PMt.forEach(t),cyr=r(DJ," to load the model weights."),DJ.forEach(t),fyr=i(Ti),cve=n(Ti,"P",{});var $Mt=s(cve);myr=r($Mt,"Examples:"),$Mt.forEach(t),gyr=i(Ti),m(F8.$$.fragment,Ti),Ti.forEach(t),hyr=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(v8.$$.fragment,Ra),pyr=i(Ra),fve=n(Ra,"P",{});var IMt=s(fve);_yr=r(IMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),IMt.forEach(t),uyr=i(Ra),Bn=n(Ra,"P",{});var p3=s(Bn);byr=r(p3,"The model class to instantiate is selected based on the "),mve=n(p3,"CODE",{});var qMt=s(mve);Fyr=r(qMt,"model_type"),qMt.forEach(t),vyr=r(p3,` property of the config object (either
passed as an argument or loaded from `),gve=n(p3,"CODE",{});var NMt=s(gve);Tyr=r(NMt,"pretrained_model_name_or_path"),NMt.forEach(t),Myr=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(p3,"CODE",{});var jMt=s(hve);Eyr=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),Cyr=r(p3,":"),p3.forEach(t),wyr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);ME=n(so,"LI",{});var vSe=s(ME);pve=n(vSe,"STRONG",{});var DMt=s(pve);Ayr=r(DMt,"bart"),DMt.forEach(t),yyr=r(vSe," \u2014 "),QW=n(vSe,"A",{href:!0});var GMt=s(QW);Lyr=r(GMt,"FlaxBartForConditionalGeneration"),GMt.forEach(t),xyr=r(vSe," (BART model)"),vSe.forEach(t),kyr=i(so),EE=n(so,"LI",{});var TSe=s(EE);_ve=n(TSe,"STRONG",{});var OMt=s(_ve);Syr=r(OMt,"blenderbot"),OMt.forEach(t),Ryr=r(TSe," \u2014 "),WW=n(TSe,"A",{href:!0});var VMt=s(WW);Byr=r(VMt,"FlaxBlenderbotForConditionalGeneration"),VMt.forEach(t),Pyr=r(TSe," (Blenderbot model)"),TSe.forEach(t),$yr=i(so),CE=n(so,"LI",{});var MSe=s(CE);uve=n(MSe,"STRONG",{});var XMt=s(uve);Iyr=r(XMt,"blenderbot-small"),XMt.forEach(t),qyr=r(MSe," \u2014 "),HW=n(MSe,"A",{href:!0});var zMt=s(HW);Nyr=r(zMt,"FlaxBlenderbotSmallForConditionalGeneration"),zMt.forEach(t),jyr=r(MSe," (BlenderbotSmall model)"),MSe.forEach(t),Dyr=i(so),wE=n(so,"LI",{});var ESe=s(wE);bve=n(ESe,"STRONG",{});var QMt=s(bve);Gyr=r(QMt,"encoder-decoder"),QMt.forEach(t),Oyr=r(ESe," \u2014 "),UW=n(ESe,"A",{href:!0});var WMt=s(UW);Vyr=r(WMt,"FlaxEncoderDecoderModel"),WMt.forEach(t),Xyr=r(ESe," (Encoder decoder model)"),ESe.forEach(t),zyr=i(so),AE=n(so,"LI",{});var CSe=s(AE);Fve=n(CSe,"STRONG",{});var HMt=s(Fve);Qyr=r(HMt,"marian"),HMt.forEach(t),Wyr=r(CSe," \u2014 "),JW=n(CSe,"A",{href:!0});var UMt=s(JW);Hyr=r(UMt,"FlaxMarianMTModel"),UMt.forEach(t),Uyr=r(CSe," (Marian model)"),CSe.forEach(t),Jyr=i(so),yE=n(so,"LI",{});var wSe=s(yE);vve=n(wSe,"STRONG",{});var JMt=s(vve);Yyr=r(JMt,"mbart"),JMt.forEach(t),Kyr=r(wSe," \u2014 "),YW=n(wSe,"A",{href:!0});var YMt=s(YW);Zyr=r(YMt,"FlaxMBartForConditionalGeneration"),YMt.forEach(t),eLr=r(wSe," (mBART model)"),wSe.forEach(t),oLr=i(so),LE=n(so,"LI",{});var ASe=s(LE);Tve=n(ASe,"STRONG",{});var KMt=s(Tve);rLr=r(KMt,"mt5"),KMt.forEach(t),tLr=r(ASe," \u2014 "),KW=n(ASe,"A",{href:!0});var ZMt=s(KW);aLr=r(ZMt,"FlaxMT5ForConditionalGeneration"),ZMt.forEach(t),nLr=r(ASe," (mT5 model)"),ASe.forEach(t),sLr=i(so),xE=n(so,"LI",{});var ySe=s(xE);Mve=n(ySe,"STRONG",{});var e4t=s(Mve);lLr=r(e4t,"pegasus"),e4t.forEach(t),iLr=r(ySe," \u2014 "),ZW=n(ySe,"A",{href:!0});var o4t=s(ZW);dLr=r(o4t,"FlaxPegasusForConditionalGeneration"),o4t.forEach(t),cLr=r(ySe," (Pegasus model)"),ySe.forEach(t),fLr=i(so),kE=n(so,"LI",{});var LSe=s(kE);Eve=n(LSe,"STRONG",{});var r4t=s(Eve);mLr=r(r4t,"t5"),r4t.forEach(t),gLr=r(LSe," \u2014 "),eH=n(LSe,"A",{href:!0});var t4t=s(eH);hLr=r(t4t,"FlaxT5ForConditionalGeneration"),t4t.forEach(t),pLr=r(LSe," (T5 model)"),LSe.forEach(t),so.forEach(t),_Lr=i(Ra),Cve=n(Ra,"P",{});var a4t=s(Cve);uLr=r(a4t,"Examples:"),a4t.forEach(t),bLr=i(Ra),m(T8.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),rPe=i(c),hf=n(c,"H2",{class:!0});var gIe=s(hf);SE=n(gIe,"A",{id:!0,class:!0,href:!0});var n4t=s(SE);wve=n(n4t,"SPAN",{});var s4t=s(wve);m(M8.$$.fragment,s4t),s4t.forEach(t),n4t.forEach(t),FLr=i(gIe),Ave=n(gIe,"SPAN",{});var l4t=s(Ave);vLr=r(l4t,"FlaxAutoModelForSequenceClassification"),l4t.forEach(t),gIe.forEach(t),tPe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(E8.$$.fragment,Mi),TLr=i(Mi),pf=n(Mi,"P",{});var GJ=s(pf);MLr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oH=n(GJ,"A",{href:!0});var i4t=s(oH);ELr=r(i4t,"from_pretrained()"),i4t.forEach(t),CLr=r(GJ," class method or the "),rH=n(GJ,"A",{href:!0});var d4t=s(rH);wLr=r(d4t,"from_config()"),d4t.forEach(t),ALr=r(GJ,` class
method.`),GJ.forEach(t),yLr=i(Mi),C8=n(Mi,"P",{});var hIe=s(C8);LLr=r(hIe,"This class cannot be instantiated directly using "),yve=n(hIe,"CODE",{});var c4t=s(yve);xLr=r(c4t,"__init__()"),c4t.forEach(t),kLr=r(hIe," (throws an error)."),hIe.forEach(t),SLr=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(w8.$$.fragment,Ei),RLr=i(Ei),Lve=n(Ei,"P",{});var f4t=s(Lve);BLr=r(f4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),f4t.forEach(t),PLr=i(Ei),_f=n(Ei,"P",{});var OJ=s(_f);$Lr=r(OJ,`Note:
Loading a model from its configuration file does `),xve=n(OJ,"STRONG",{});var m4t=s(xve);ILr=r(m4t,"not"),m4t.forEach(t),qLr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(OJ,"A",{href:!0});var g4t=s(tH);NLr=r(g4t,"from_pretrained()"),g4t.forEach(t),jLr=r(OJ," to load the model weights."),OJ.forEach(t),DLr=i(Ei),kve=n(Ei,"P",{});var h4t=s(kve);GLr=r(h4t,"Examples:"),h4t.forEach(t),OLr=i(Ei),m(A8.$$.fragment,Ei),Ei.forEach(t),VLr=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(y8.$$.fragment,Ba),XLr=i(Ba),Sve=n(Ba,"P",{});var p4t=s(Sve);zLr=r(p4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),p4t.forEach(t),QLr=i(Ba),Pn=n(Ba,"P",{});var _3=s(Pn);WLr=r(_3,"The model class to instantiate is selected based on the "),Rve=n(_3,"CODE",{});var _4t=s(Rve);HLr=r(_4t,"model_type"),_4t.forEach(t),ULr=r(_3,` property of the config object (either
passed as an argument or loaded from `),Bve=n(_3,"CODE",{});var u4t=s(Bve);JLr=r(u4t,"pretrained_model_name_or_path"),u4t.forEach(t),YLr=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=n(_3,"CODE",{});var b4t=s(Pve);KLr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),ZLr=r(_3,":"),_3.forEach(t),e8r=i(Ba),ve=n(Ba,"UL",{});var ye=s(ve);RE=n(ye,"LI",{});var xSe=s(RE);$ve=n(xSe,"STRONG",{});var F4t=s($ve);o8r=r(F4t,"albert"),F4t.forEach(t),r8r=r(xSe," \u2014 "),aH=n(xSe,"A",{href:!0});var v4t=s(aH);t8r=r(v4t,"FlaxAlbertForSequenceClassification"),v4t.forEach(t),a8r=r(xSe," (ALBERT model)"),xSe.forEach(t),n8r=i(ye),BE=n(ye,"LI",{});var kSe=s(BE);Ive=n(kSe,"STRONG",{});var T4t=s(Ive);s8r=r(T4t,"bart"),T4t.forEach(t),l8r=r(kSe," \u2014 "),nH=n(kSe,"A",{href:!0});var M4t=s(nH);i8r=r(M4t,"FlaxBartForSequenceClassification"),M4t.forEach(t),d8r=r(kSe," (BART model)"),kSe.forEach(t),c8r=i(ye),PE=n(ye,"LI",{});var SSe=s(PE);qve=n(SSe,"STRONG",{});var E4t=s(qve);f8r=r(E4t,"bert"),E4t.forEach(t),m8r=r(SSe," \u2014 "),sH=n(SSe,"A",{href:!0});var C4t=s(sH);g8r=r(C4t,"FlaxBertForSequenceClassification"),C4t.forEach(t),h8r=r(SSe," (BERT model)"),SSe.forEach(t),p8r=i(ye),$E=n(ye,"LI",{});var RSe=s($E);Nve=n(RSe,"STRONG",{});var w4t=s(Nve);_8r=r(w4t,"big_bird"),w4t.forEach(t),u8r=r(RSe," \u2014 "),lH=n(RSe,"A",{href:!0});var A4t=s(lH);b8r=r(A4t,"FlaxBigBirdForSequenceClassification"),A4t.forEach(t),F8r=r(RSe," (BigBird model)"),RSe.forEach(t),v8r=i(ye),IE=n(ye,"LI",{});var BSe=s(IE);jve=n(BSe,"STRONG",{});var y4t=s(jve);T8r=r(y4t,"distilbert"),y4t.forEach(t),M8r=r(BSe," \u2014 "),iH=n(BSe,"A",{href:!0});var L4t=s(iH);E8r=r(L4t,"FlaxDistilBertForSequenceClassification"),L4t.forEach(t),C8r=r(BSe," (DistilBERT model)"),BSe.forEach(t),w8r=i(ye),qE=n(ye,"LI",{});var PSe=s(qE);Dve=n(PSe,"STRONG",{});var x4t=s(Dve);A8r=r(x4t,"electra"),x4t.forEach(t),y8r=r(PSe," \u2014 "),dH=n(PSe,"A",{href:!0});var k4t=s(dH);L8r=r(k4t,"FlaxElectraForSequenceClassification"),k4t.forEach(t),x8r=r(PSe," (ELECTRA model)"),PSe.forEach(t),k8r=i(ye),NE=n(ye,"LI",{});var $Se=s(NE);Gve=n($Se,"STRONG",{});var S4t=s(Gve);S8r=r(S4t,"mbart"),S4t.forEach(t),R8r=r($Se," \u2014 "),cH=n($Se,"A",{href:!0});var R4t=s(cH);B8r=r(R4t,"FlaxMBartForSequenceClassification"),R4t.forEach(t),P8r=r($Se," (mBART model)"),$Se.forEach(t),$8r=i(ye),jE=n(ye,"LI",{});var ISe=s(jE);Ove=n(ISe,"STRONG",{});var B4t=s(Ove);I8r=r(B4t,"roberta"),B4t.forEach(t),q8r=r(ISe," \u2014 "),fH=n(ISe,"A",{href:!0});var P4t=s(fH);N8r=r(P4t,"FlaxRobertaForSequenceClassification"),P4t.forEach(t),j8r=r(ISe," (RoBERTa model)"),ISe.forEach(t),D8r=i(ye),DE=n(ye,"LI",{});var qSe=s(DE);Vve=n(qSe,"STRONG",{});var $4t=s(Vve);G8r=r($4t,"roformer"),$4t.forEach(t),O8r=r(qSe," \u2014 "),mH=n(qSe,"A",{href:!0});var I4t=s(mH);V8r=r(I4t,"FlaxRoFormerForSequenceClassification"),I4t.forEach(t),X8r=r(qSe," (RoFormer model)"),qSe.forEach(t),z8r=i(ye),GE=n(ye,"LI",{});var NSe=s(GE);Xve=n(NSe,"STRONG",{});var q4t=s(Xve);Q8r=r(q4t,"xlm-roberta"),q4t.forEach(t),W8r=r(NSe," \u2014 "),gH=n(NSe,"A",{href:!0});var N4t=s(gH);H8r=r(N4t,"FlaxXLMRobertaForSequenceClassification"),N4t.forEach(t),U8r=r(NSe," (XLM-RoBERTa model)"),NSe.forEach(t),ye.forEach(t),J8r=i(Ba),zve=n(Ba,"P",{});var j4t=s(zve);Y8r=r(j4t,"Examples:"),j4t.forEach(t),K8r=i(Ba),m(L8.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),aPe=i(c),uf=n(c,"H2",{class:!0});var pIe=s(uf);OE=n(pIe,"A",{id:!0,class:!0,href:!0});var D4t=s(OE);Qve=n(D4t,"SPAN",{});var G4t=s(Qve);m(x8.$$.fragment,G4t),G4t.forEach(t),D4t.forEach(t),Z8r=i(pIe),Wve=n(pIe,"SPAN",{});var O4t=s(Wve);e7r=r(O4t,"FlaxAutoModelForQuestionAnswering"),O4t.forEach(t),pIe.forEach(t),nPe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(k8.$$.fragment,Ci),o7r=i(Ci),bf=n(Ci,"P",{});var VJ=s(bf);r7r=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hH=n(VJ,"A",{href:!0});var V4t=s(hH);t7r=r(V4t,"from_pretrained()"),V4t.forEach(t),a7r=r(VJ," class method or the "),pH=n(VJ,"A",{href:!0});var X4t=s(pH);n7r=r(X4t,"from_config()"),X4t.forEach(t),s7r=r(VJ,` class
method.`),VJ.forEach(t),l7r=i(Ci),S8=n(Ci,"P",{});var _Ie=s(S8);i7r=r(_Ie,"This class cannot be instantiated directly using "),Hve=n(_Ie,"CODE",{});var z4t=s(Hve);d7r=r(z4t,"__init__()"),z4t.forEach(t),c7r=r(_Ie," (throws an error)."),_Ie.forEach(t),f7r=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(R8.$$.fragment,wi),m7r=i(wi),Uve=n(wi,"P",{});var Q4t=s(Uve);g7r=r(Q4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Q4t.forEach(t),h7r=i(wi),Ff=n(wi,"P",{});var XJ=s(Ff);p7r=r(XJ,`Note:
Loading a model from its configuration file does `),Jve=n(XJ,"STRONG",{});var W4t=s(Jve);_7r=r(W4t,"not"),W4t.forEach(t),u7r=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(XJ,"A",{href:!0});var H4t=s(_H);b7r=r(H4t,"from_pretrained()"),H4t.forEach(t),F7r=r(XJ," to load the model weights."),XJ.forEach(t),v7r=i(wi),Yve=n(wi,"P",{});var U4t=s(Yve);T7r=r(U4t,"Examples:"),U4t.forEach(t),M7r=i(wi),m(B8.$$.fragment,wi),wi.forEach(t),E7r=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(P8.$$.fragment,Pa),C7r=i(Pa),Kve=n(Pa,"P",{});var J4t=s(Kve);w7r=r(J4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),J4t.forEach(t),A7r=i(Pa),$n=n(Pa,"P",{});var u3=s($n);y7r=r(u3,"The model class to instantiate is selected based on the "),Zve=n(u3,"CODE",{});var Y4t=s(Zve);L7r=r(Y4t,"model_type"),Y4t.forEach(t),x7r=r(u3,` property of the config object (either
passed as an argument or loaded from `),e6e=n(u3,"CODE",{});var K4t=s(e6e);k7r=r(K4t,"pretrained_model_name_or_path"),K4t.forEach(t),S7r=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=n(u3,"CODE",{});var Z4t=s(o6e);R7r=r(Z4t,"pretrained_model_name_or_path"),Z4t.forEach(t),B7r=r(u3,":"),u3.forEach(t),P7r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);VE=n(Le,"LI",{});var jSe=s(VE);r6e=n(jSe,"STRONG",{});var eEt=s(r6e);$7r=r(eEt,"albert"),eEt.forEach(t),I7r=r(jSe," \u2014 "),uH=n(jSe,"A",{href:!0});var oEt=s(uH);q7r=r(oEt,"FlaxAlbertForQuestionAnswering"),oEt.forEach(t),N7r=r(jSe," (ALBERT model)"),jSe.forEach(t),j7r=i(Le),XE=n(Le,"LI",{});var DSe=s(XE);t6e=n(DSe,"STRONG",{});var rEt=s(t6e);D7r=r(rEt,"bart"),rEt.forEach(t),G7r=r(DSe," \u2014 "),bH=n(DSe,"A",{href:!0});var tEt=s(bH);O7r=r(tEt,"FlaxBartForQuestionAnswering"),tEt.forEach(t),V7r=r(DSe," (BART model)"),DSe.forEach(t),X7r=i(Le),zE=n(Le,"LI",{});var GSe=s(zE);a6e=n(GSe,"STRONG",{});var aEt=s(a6e);z7r=r(aEt,"bert"),aEt.forEach(t),Q7r=r(GSe," \u2014 "),FH=n(GSe,"A",{href:!0});var nEt=s(FH);W7r=r(nEt,"FlaxBertForQuestionAnswering"),nEt.forEach(t),H7r=r(GSe," (BERT model)"),GSe.forEach(t),U7r=i(Le),QE=n(Le,"LI",{});var OSe=s(QE);n6e=n(OSe,"STRONG",{});var sEt=s(n6e);J7r=r(sEt,"big_bird"),sEt.forEach(t),Y7r=r(OSe," \u2014 "),vH=n(OSe,"A",{href:!0});var lEt=s(vH);K7r=r(lEt,"FlaxBigBirdForQuestionAnswering"),lEt.forEach(t),Z7r=r(OSe," (BigBird model)"),OSe.forEach(t),e9r=i(Le),WE=n(Le,"LI",{});var VSe=s(WE);s6e=n(VSe,"STRONG",{});var iEt=s(s6e);o9r=r(iEt,"distilbert"),iEt.forEach(t),r9r=r(VSe," \u2014 "),TH=n(VSe,"A",{href:!0});var dEt=s(TH);t9r=r(dEt,"FlaxDistilBertForQuestionAnswering"),dEt.forEach(t),a9r=r(VSe," (DistilBERT model)"),VSe.forEach(t),n9r=i(Le),HE=n(Le,"LI",{});var XSe=s(HE);l6e=n(XSe,"STRONG",{});var cEt=s(l6e);s9r=r(cEt,"electra"),cEt.forEach(t),l9r=r(XSe," \u2014 "),MH=n(XSe,"A",{href:!0});var fEt=s(MH);i9r=r(fEt,"FlaxElectraForQuestionAnswering"),fEt.forEach(t),d9r=r(XSe," (ELECTRA model)"),XSe.forEach(t),c9r=i(Le),UE=n(Le,"LI",{});var zSe=s(UE);i6e=n(zSe,"STRONG",{});var mEt=s(i6e);f9r=r(mEt,"mbart"),mEt.forEach(t),m9r=r(zSe," \u2014 "),EH=n(zSe,"A",{href:!0});var gEt=s(EH);g9r=r(gEt,"FlaxMBartForQuestionAnswering"),gEt.forEach(t),h9r=r(zSe," (mBART model)"),zSe.forEach(t),p9r=i(Le),JE=n(Le,"LI",{});var QSe=s(JE);d6e=n(QSe,"STRONG",{});var hEt=s(d6e);_9r=r(hEt,"roberta"),hEt.forEach(t),u9r=r(QSe," \u2014 "),CH=n(QSe,"A",{href:!0});var pEt=s(CH);b9r=r(pEt,"FlaxRobertaForQuestionAnswering"),pEt.forEach(t),F9r=r(QSe," (RoBERTa model)"),QSe.forEach(t),v9r=i(Le),YE=n(Le,"LI",{});var WSe=s(YE);c6e=n(WSe,"STRONG",{});var _Et=s(c6e);T9r=r(_Et,"roformer"),_Et.forEach(t),M9r=r(WSe," \u2014 "),wH=n(WSe,"A",{href:!0});var uEt=s(wH);E9r=r(uEt,"FlaxRoFormerForQuestionAnswering"),uEt.forEach(t),C9r=r(WSe," (RoFormer model)"),WSe.forEach(t),w9r=i(Le),KE=n(Le,"LI",{});var HSe=s(KE);f6e=n(HSe,"STRONG",{});var bEt=s(f6e);A9r=r(bEt,"xlm-roberta"),bEt.forEach(t),y9r=r(HSe," \u2014 "),AH=n(HSe,"A",{href:!0});var FEt=s(AH);L9r=r(FEt,"FlaxXLMRobertaForQuestionAnswering"),FEt.forEach(t),x9r=r(HSe," (XLM-RoBERTa model)"),HSe.forEach(t),Le.forEach(t),k9r=i(Pa),m6e=n(Pa,"P",{});var vEt=s(m6e);S9r=r(vEt,"Examples:"),vEt.forEach(t),R9r=i(Pa),m($8.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),sPe=i(c),vf=n(c,"H2",{class:!0});var uIe=s(vf);ZE=n(uIe,"A",{id:!0,class:!0,href:!0});var TEt=s(ZE);g6e=n(TEt,"SPAN",{});var MEt=s(g6e);m(I8.$$.fragment,MEt),MEt.forEach(t),TEt.forEach(t),B9r=i(uIe),h6e=n(uIe,"SPAN",{});var EEt=s(h6e);P9r=r(EEt,"FlaxAutoModelForTokenClassification"),EEt.forEach(t),uIe.forEach(t),lPe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(q8.$$.fragment,Ai),$9r=i(Ai),Tf=n(Ai,"P",{});var zJ=s(Tf);I9r=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yH=n(zJ,"A",{href:!0});var CEt=s(yH);q9r=r(CEt,"from_pretrained()"),CEt.forEach(t),N9r=r(zJ," class method or the "),LH=n(zJ,"A",{href:!0});var wEt=s(LH);j9r=r(wEt,"from_config()"),wEt.forEach(t),D9r=r(zJ,` class
method.`),zJ.forEach(t),G9r=i(Ai),N8=n(Ai,"P",{});var bIe=s(N8);O9r=r(bIe,"This class cannot be instantiated directly using "),p6e=n(bIe,"CODE",{});var AEt=s(p6e);V9r=r(AEt,"__init__()"),AEt.forEach(t),X9r=r(bIe," (throws an error)."),bIe.forEach(t),z9r=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(j8.$$.fragment,yi),Q9r=i(yi),_6e=n(yi,"P",{});var yEt=s(_6e);W9r=r(yEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yEt.forEach(t),H9r=i(yi),Mf=n(yi,"P",{});var QJ=s(Mf);U9r=r(QJ,`Note:
Loading a model from its configuration file does `),u6e=n(QJ,"STRONG",{});var LEt=s(u6e);J9r=r(LEt,"not"),LEt.forEach(t),Y9r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(QJ,"A",{href:!0});var xEt=s(xH);K9r=r(xEt,"from_pretrained()"),xEt.forEach(t),Z9r=r(QJ," to load the model weights."),QJ.forEach(t),exr=i(yi),b6e=n(yi,"P",{});var kEt=s(b6e);oxr=r(kEt,"Examples:"),kEt.forEach(t),rxr=i(yi),m(D8.$$.fragment,yi),yi.forEach(t),txr=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(G8.$$.fragment,$a),axr=i($a),F6e=n($a,"P",{});var SEt=s(F6e);nxr=r(SEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SEt.forEach(t),sxr=i($a),In=n($a,"P",{});var b3=s(In);lxr=r(b3,"The model class to instantiate is selected based on the "),v6e=n(b3,"CODE",{});var REt=s(v6e);ixr=r(REt,"model_type"),REt.forEach(t),dxr=r(b3,` property of the config object (either
passed as an argument or loaded from `),T6e=n(b3,"CODE",{});var BEt=s(T6e);cxr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),fxr=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=n(b3,"CODE",{});var PEt=s(M6e);mxr=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),gxr=r(b3,":"),b3.forEach(t),hxr=i($a),Be=n($a,"UL",{});var Oo=s(Be);eC=n(Oo,"LI",{});var USe=s(eC);E6e=n(USe,"STRONG",{});var $Et=s(E6e);pxr=r($Et,"albert"),$Et.forEach(t),_xr=r(USe," \u2014 "),kH=n(USe,"A",{href:!0});var IEt=s(kH);uxr=r(IEt,"FlaxAlbertForTokenClassification"),IEt.forEach(t),bxr=r(USe," (ALBERT model)"),USe.forEach(t),Fxr=i(Oo),oC=n(Oo,"LI",{});var JSe=s(oC);C6e=n(JSe,"STRONG",{});var qEt=s(C6e);vxr=r(qEt,"bert"),qEt.forEach(t),Txr=r(JSe," \u2014 "),SH=n(JSe,"A",{href:!0});var NEt=s(SH);Mxr=r(NEt,"FlaxBertForTokenClassification"),NEt.forEach(t),Exr=r(JSe," (BERT model)"),JSe.forEach(t),Cxr=i(Oo),rC=n(Oo,"LI",{});var YSe=s(rC);w6e=n(YSe,"STRONG",{});var jEt=s(w6e);wxr=r(jEt,"big_bird"),jEt.forEach(t),Axr=r(YSe," \u2014 "),RH=n(YSe,"A",{href:!0});var DEt=s(RH);yxr=r(DEt,"FlaxBigBirdForTokenClassification"),DEt.forEach(t),Lxr=r(YSe," (BigBird model)"),YSe.forEach(t),xxr=i(Oo),tC=n(Oo,"LI",{});var KSe=s(tC);A6e=n(KSe,"STRONG",{});var GEt=s(A6e);kxr=r(GEt,"distilbert"),GEt.forEach(t),Sxr=r(KSe," \u2014 "),BH=n(KSe,"A",{href:!0});var OEt=s(BH);Rxr=r(OEt,"FlaxDistilBertForTokenClassification"),OEt.forEach(t),Bxr=r(KSe," (DistilBERT model)"),KSe.forEach(t),Pxr=i(Oo),aC=n(Oo,"LI",{});var ZSe=s(aC);y6e=n(ZSe,"STRONG",{});var VEt=s(y6e);$xr=r(VEt,"electra"),VEt.forEach(t),Ixr=r(ZSe," \u2014 "),PH=n(ZSe,"A",{href:!0});var XEt=s(PH);qxr=r(XEt,"FlaxElectraForTokenClassification"),XEt.forEach(t),Nxr=r(ZSe," (ELECTRA model)"),ZSe.forEach(t),jxr=i(Oo),nC=n(Oo,"LI",{});var eRe=s(nC);L6e=n(eRe,"STRONG",{});var zEt=s(L6e);Dxr=r(zEt,"roberta"),zEt.forEach(t),Gxr=r(eRe," \u2014 "),$H=n(eRe,"A",{href:!0});var QEt=s($H);Oxr=r(QEt,"FlaxRobertaForTokenClassification"),QEt.forEach(t),Vxr=r(eRe," (RoBERTa model)"),eRe.forEach(t),Xxr=i(Oo),sC=n(Oo,"LI",{});var oRe=s(sC);x6e=n(oRe,"STRONG",{});var WEt=s(x6e);zxr=r(WEt,"roformer"),WEt.forEach(t),Qxr=r(oRe," \u2014 "),IH=n(oRe,"A",{href:!0});var HEt=s(IH);Wxr=r(HEt,"FlaxRoFormerForTokenClassification"),HEt.forEach(t),Hxr=r(oRe," (RoFormer model)"),oRe.forEach(t),Uxr=i(Oo),lC=n(Oo,"LI",{});var rRe=s(lC);k6e=n(rRe,"STRONG",{});var UEt=s(k6e);Jxr=r(UEt,"xlm-roberta"),UEt.forEach(t),Yxr=r(rRe," \u2014 "),qH=n(rRe,"A",{href:!0});var JEt=s(qH);Kxr=r(JEt,"FlaxXLMRobertaForTokenClassification"),JEt.forEach(t),Zxr=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),Oo.forEach(t),ekr=i($a),S6e=n($a,"P",{});var YEt=s(S6e);okr=r(YEt,"Examples:"),YEt.forEach(t),rkr=i($a),m(O8.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),iPe=i(c),Ef=n(c,"H2",{class:!0});var FIe=s(Ef);iC=n(FIe,"A",{id:!0,class:!0,href:!0});var KEt=s(iC);R6e=n(KEt,"SPAN",{});var ZEt=s(R6e);m(V8.$$.fragment,ZEt),ZEt.forEach(t),KEt.forEach(t),tkr=i(FIe),B6e=n(FIe,"SPAN",{});var eCt=s(B6e);akr=r(eCt,"FlaxAutoModelForMultipleChoice"),eCt.forEach(t),FIe.forEach(t),dPe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(X8.$$.fragment,Li),nkr=i(Li),Cf=n(Li,"P",{});var WJ=s(Cf);skr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NH=n(WJ,"A",{href:!0});var oCt=s(NH);lkr=r(oCt,"from_pretrained()"),oCt.forEach(t),ikr=r(WJ," class method or the "),jH=n(WJ,"A",{href:!0});var rCt=s(jH);dkr=r(rCt,"from_config()"),rCt.forEach(t),ckr=r(WJ,` class
method.`),WJ.forEach(t),fkr=i(Li),z8=n(Li,"P",{});var vIe=s(z8);mkr=r(vIe,"This class cannot be instantiated directly using "),P6e=n(vIe,"CODE",{});var tCt=s(P6e);gkr=r(tCt,"__init__()"),tCt.forEach(t),hkr=r(vIe," (throws an error)."),vIe.forEach(t),pkr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(Q8.$$.fragment,xi),_kr=i(xi),$6e=n(xi,"P",{});var aCt=s($6e);ukr=r(aCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),aCt.forEach(t),bkr=i(xi),wf=n(xi,"P",{});var HJ=s(wf);Fkr=r(HJ,`Note:
Loading a model from its configuration file does `),I6e=n(HJ,"STRONG",{});var nCt=s(I6e);vkr=r(nCt,"not"),nCt.forEach(t),Tkr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(HJ,"A",{href:!0});var sCt=s(DH);Mkr=r(sCt,"from_pretrained()"),sCt.forEach(t),Ekr=r(HJ," to load the model weights."),HJ.forEach(t),Ckr=i(xi),q6e=n(xi,"P",{});var lCt=s(q6e);wkr=r(lCt,"Examples:"),lCt.forEach(t),Akr=i(xi),m(W8.$$.fragment,xi),xi.forEach(t),ykr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(H8.$$.fragment,Ia),Lkr=i(Ia),N6e=n(Ia,"P",{});var iCt=s(N6e);xkr=r(iCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iCt.forEach(t),kkr=i(Ia),qn=n(Ia,"P",{});var F3=s(qn);Skr=r(F3,"The model class to instantiate is selected based on the "),j6e=n(F3,"CODE",{});var dCt=s(j6e);Rkr=r(dCt,"model_type"),dCt.forEach(t),Bkr=r(F3,` property of the config object (either
passed as an argument or loaded from `),D6e=n(F3,"CODE",{});var cCt=s(D6e);Pkr=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),$kr=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=n(F3,"CODE",{});var fCt=s(G6e);Ikr=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),qkr=r(F3,":"),F3.forEach(t),Nkr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);dC=n(Vo,"LI",{});var tRe=s(dC);O6e=n(tRe,"STRONG",{});var mCt=s(O6e);jkr=r(mCt,"albert"),mCt.forEach(t),Dkr=r(tRe," \u2014 "),GH=n(tRe,"A",{href:!0});var gCt=s(GH);Gkr=r(gCt,"FlaxAlbertForMultipleChoice"),gCt.forEach(t),Okr=r(tRe," (ALBERT model)"),tRe.forEach(t),Vkr=i(Vo),cC=n(Vo,"LI",{});var aRe=s(cC);V6e=n(aRe,"STRONG",{});var hCt=s(V6e);Xkr=r(hCt,"bert"),hCt.forEach(t),zkr=r(aRe," \u2014 "),OH=n(aRe,"A",{href:!0});var pCt=s(OH);Qkr=r(pCt,"FlaxBertForMultipleChoice"),pCt.forEach(t),Wkr=r(aRe," (BERT model)"),aRe.forEach(t),Hkr=i(Vo),fC=n(Vo,"LI",{});var nRe=s(fC);X6e=n(nRe,"STRONG",{});var _Ct=s(X6e);Ukr=r(_Ct,"big_bird"),_Ct.forEach(t),Jkr=r(nRe," \u2014 "),VH=n(nRe,"A",{href:!0});var uCt=s(VH);Ykr=r(uCt,"FlaxBigBirdForMultipleChoice"),uCt.forEach(t),Kkr=r(nRe," (BigBird model)"),nRe.forEach(t),Zkr=i(Vo),mC=n(Vo,"LI",{});var sRe=s(mC);z6e=n(sRe,"STRONG",{});var bCt=s(z6e);eSr=r(bCt,"distilbert"),bCt.forEach(t),oSr=r(sRe," \u2014 "),XH=n(sRe,"A",{href:!0});var FCt=s(XH);rSr=r(FCt,"FlaxDistilBertForMultipleChoice"),FCt.forEach(t),tSr=r(sRe," (DistilBERT model)"),sRe.forEach(t),aSr=i(Vo),gC=n(Vo,"LI",{});var lRe=s(gC);Q6e=n(lRe,"STRONG",{});var vCt=s(Q6e);nSr=r(vCt,"electra"),vCt.forEach(t),sSr=r(lRe," \u2014 "),zH=n(lRe,"A",{href:!0});var TCt=s(zH);lSr=r(TCt,"FlaxElectraForMultipleChoice"),TCt.forEach(t),iSr=r(lRe," (ELECTRA model)"),lRe.forEach(t),dSr=i(Vo),hC=n(Vo,"LI",{});var iRe=s(hC);W6e=n(iRe,"STRONG",{});var MCt=s(W6e);cSr=r(MCt,"roberta"),MCt.forEach(t),fSr=r(iRe," \u2014 "),QH=n(iRe,"A",{href:!0});var ECt=s(QH);mSr=r(ECt,"FlaxRobertaForMultipleChoice"),ECt.forEach(t),gSr=r(iRe," (RoBERTa model)"),iRe.forEach(t),hSr=i(Vo),pC=n(Vo,"LI",{});var dRe=s(pC);H6e=n(dRe,"STRONG",{});var CCt=s(H6e);pSr=r(CCt,"roformer"),CCt.forEach(t),_Sr=r(dRe," \u2014 "),WH=n(dRe,"A",{href:!0});var wCt=s(WH);uSr=r(wCt,"FlaxRoFormerForMultipleChoice"),wCt.forEach(t),bSr=r(dRe," (RoFormer model)"),dRe.forEach(t),FSr=i(Vo),_C=n(Vo,"LI",{});var cRe=s(_C);U6e=n(cRe,"STRONG",{});var ACt=s(U6e);vSr=r(ACt,"xlm-roberta"),ACt.forEach(t),TSr=r(cRe," \u2014 "),HH=n(cRe,"A",{href:!0});var yCt=s(HH);MSr=r(yCt,"FlaxXLMRobertaForMultipleChoice"),yCt.forEach(t),ESr=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),Vo.forEach(t),CSr=i(Ia),J6e=n(Ia,"P",{});var LCt=s(J6e);wSr=r(LCt,"Examples:"),LCt.forEach(t),ASr=i(Ia),m(U8.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),cPe=i(c),Af=n(c,"H2",{class:!0});var TIe=s(Af);uC=n(TIe,"A",{id:!0,class:!0,href:!0});var xCt=s(uC);Y6e=n(xCt,"SPAN",{});var kCt=s(Y6e);m(J8.$$.fragment,kCt),kCt.forEach(t),xCt.forEach(t),ySr=i(TIe),K6e=n(TIe,"SPAN",{});var SCt=s(K6e);LSr=r(SCt,"FlaxAutoModelForNextSentencePrediction"),SCt.forEach(t),TIe.forEach(t),fPe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(Y8.$$.fragment,ki),xSr=i(ki),yf=n(ki,"P",{});var UJ=s(yf);kSr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UH=n(UJ,"A",{href:!0});var RCt=s(UH);SSr=r(RCt,"from_pretrained()"),RCt.forEach(t),RSr=r(UJ," class method or the "),JH=n(UJ,"A",{href:!0});var BCt=s(JH);BSr=r(BCt,"from_config()"),BCt.forEach(t),PSr=r(UJ,` class
method.`),UJ.forEach(t),$Sr=i(ki),K8=n(ki,"P",{});var MIe=s(K8);ISr=r(MIe,"This class cannot be instantiated directly using "),Z6e=n(MIe,"CODE",{});var PCt=s(Z6e);qSr=r(PCt,"__init__()"),PCt.forEach(t),NSr=r(MIe," (throws an error)."),MIe.forEach(t),jSr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(Z8.$$.fragment,Si),DSr=i(Si),eTe=n(Si,"P",{});var $Ct=s(eTe);GSr=r($Ct,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Ct.forEach(t),OSr=i(Si),Lf=n(Si,"P",{});var JJ=s(Lf);VSr=r(JJ,`Note:
Loading a model from its configuration file does `),oTe=n(JJ,"STRONG",{});var ICt=s(oTe);XSr=r(ICt,"not"),ICt.forEach(t),zSr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(JJ,"A",{href:!0});var qCt=s(YH);QSr=r(qCt,"from_pretrained()"),qCt.forEach(t),WSr=r(JJ," to load the model weights."),JJ.forEach(t),HSr=i(Si),rTe=n(Si,"P",{});var NCt=s(rTe);USr=r(NCt,"Examples:"),NCt.forEach(t),JSr=i(Si),m(e7.$$.fragment,Si),Si.forEach(t),YSr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(o7.$$.fragment,qa),KSr=i(qa),tTe=n(qa,"P",{});var jCt=s(tTe);ZSr=r(jCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jCt.forEach(t),eRr=i(qa),Nn=n(qa,"P",{});var v3=s(Nn);oRr=r(v3,"The model class to instantiate is selected based on the "),aTe=n(v3,"CODE",{});var DCt=s(aTe);rRr=r(DCt,"model_type"),DCt.forEach(t),tRr=r(v3,` property of the config object (either
passed as an argument or loaded from `),nTe=n(v3,"CODE",{});var GCt=s(nTe);aRr=r(GCt,"pretrained_model_name_or_path"),GCt.forEach(t),nRr=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(v3,"CODE",{});var OCt=s(sTe);sRr=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),lRr=r(v3,":"),v3.forEach(t),iRr=i(qa),lTe=n(qa,"UL",{});var VCt=s(lTe);bC=n(VCt,"LI",{});var fRe=s(bC);iTe=n(fRe,"STRONG",{});var XCt=s(iTe);dRr=r(XCt,"bert"),XCt.forEach(t),cRr=r(fRe," \u2014 "),KH=n(fRe,"A",{href:!0});var zCt=s(KH);fRr=r(zCt,"FlaxBertForNextSentencePrediction"),zCt.forEach(t),mRr=r(fRe," (BERT model)"),fRe.forEach(t),VCt.forEach(t),gRr=i(qa),dTe=n(qa,"P",{});var QCt=s(dTe);hRr=r(QCt,"Examples:"),QCt.forEach(t),pRr=i(qa),m(r7.$$.fragment,qa),qa.forEach(t),ki.forEach(t),mPe=i(c),xf=n(c,"H2",{class:!0});var EIe=s(xf);FC=n(EIe,"A",{id:!0,class:!0,href:!0});var WCt=s(FC);cTe=n(WCt,"SPAN",{});var HCt=s(cTe);m(t7.$$.fragment,HCt),HCt.forEach(t),WCt.forEach(t),_Rr=i(EIe),fTe=n(EIe,"SPAN",{});var UCt=s(fTe);uRr=r(UCt,"FlaxAutoModelForImageClassification"),UCt.forEach(t),EIe.forEach(t),gPe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(a7.$$.fragment,Ri),bRr=i(Ri),kf=n(Ri,"P",{});var YJ=s(kf);FRr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZH=n(YJ,"A",{href:!0});var JCt=s(ZH);vRr=r(JCt,"from_pretrained()"),JCt.forEach(t),TRr=r(YJ," class method or the "),eU=n(YJ,"A",{href:!0});var YCt=s(eU);MRr=r(YCt,"from_config()"),YCt.forEach(t),ERr=r(YJ,` class
method.`),YJ.forEach(t),CRr=i(Ri),n7=n(Ri,"P",{});var CIe=s(n7);wRr=r(CIe,"This class cannot be instantiated directly using "),mTe=n(CIe,"CODE",{});var KCt=s(mTe);ARr=r(KCt,"__init__()"),KCt.forEach(t),yRr=r(CIe," (throws an error)."),CIe.forEach(t),LRr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(s7.$$.fragment,Bi),xRr=i(Bi),gTe=n(Bi,"P",{});var ZCt=s(gTe);kRr=r(ZCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZCt.forEach(t),SRr=i(Bi),Sf=n(Bi,"P",{});var KJ=s(Sf);RRr=r(KJ,`Note:
Loading a model from its configuration file does `),hTe=n(KJ,"STRONG",{});var e3t=s(hTe);BRr=r(e3t,"not"),e3t.forEach(t),PRr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(KJ,"A",{href:!0});var o3t=s(oU);$Rr=r(o3t,"from_pretrained()"),o3t.forEach(t),IRr=r(KJ," to load the model weights."),KJ.forEach(t),qRr=i(Bi),pTe=n(Bi,"P",{});var r3t=s(pTe);NRr=r(r3t,"Examples:"),r3t.forEach(t),jRr=i(Bi),m(l7.$$.fragment,Bi),Bi.forEach(t),DRr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(i7.$$.fragment,Na),GRr=i(Na),_Te=n(Na,"P",{});var t3t=s(_Te);ORr=r(t3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),t3t.forEach(t),VRr=i(Na),jn=n(Na,"P",{});var T3=s(jn);XRr=r(T3,"The model class to instantiate is selected based on the "),uTe=n(T3,"CODE",{});var a3t=s(uTe);zRr=r(a3t,"model_type"),a3t.forEach(t),QRr=r(T3,` property of the config object (either
passed as an argument or loaded from `),bTe=n(T3,"CODE",{});var n3t=s(bTe);WRr=r(n3t,"pretrained_model_name_or_path"),n3t.forEach(t),HRr=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(T3,"CODE",{});var s3t=s(FTe);URr=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),JRr=r(T3,":"),T3.forEach(t),YRr=i(Na),d7=n(Na,"UL",{});var wIe=s(d7);vC=n(wIe,"LI",{});var mRe=s(vC);vTe=n(mRe,"STRONG",{});var l3t=s(vTe);KRr=r(l3t,"beit"),l3t.forEach(t),ZRr=r(mRe," \u2014 "),rU=n(mRe,"A",{href:!0});var i3t=s(rU);eBr=r(i3t,"FlaxBeitForImageClassification"),i3t.forEach(t),oBr=r(mRe," (BEiT model)"),mRe.forEach(t),rBr=i(wIe),TC=n(wIe,"LI",{});var gRe=s(TC);TTe=n(gRe,"STRONG",{});var d3t=s(TTe);tBr=r(d3t,"vit"),d3t.forEach(t),aBr=r(gRe," \u2014 "),tU=n(gRe,"A",{href:!0});var c3t=s(tU);nBr=r(c3t,"FlaxViTForImageClassification"),c3t.forEach(t),sBr=r(gRe," (ViT model)"),gRe.forEach(t),wIe.forEach(t),lBr=i(Na),MTe=n(Na,"P",{});var f3t=s(MTe);iBr=r(f3t,"Examples:"),f3t.forEach(t),dBr=i(Na),m(c7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),hPe=i(c),Rf=n(c,"H2",{class:!0});var AIe=s(Rf);MC=n(AIe,"A",{id:!0,class:!0,href:!0});var m3t=s(MC);ETe=n(m3t,"SPAN",{});var g3t=s(ETe);m(f7.$$.fragment,g3t),g3t.forEach(t),m3t.forEach(t),cBr=i(AIe),CTe=n(AIe,"SPAN",{});var h3t=s(CTe);fBr=r(h3t,"FlaxAutoModelForVision2Seq"),h3t.forEach(t),AIe.forEach(t),pPe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(m7.$$.fragment,Pi),mBr=i(Pi),Bf=n(Pi,"P",{});var ZJ=s(Bf);gBr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aU=n(ZJ,"A",{href:!0});var p3t=s(aU);hBr=r(p3t,"from_pretrained()"),p3t.forEach(t),pBr=r(ZJ," class method or the "),nU=n(ZJ,"A",{href:!0});var _3t=s(nU);_Br=r(_3t,"from_config()"),_3t.forEach(t),uBr=r(ZJ,` class
method.`),ZJ.forEach(t),bBr=i(Pi),g7=n(Pi,"P",{});var yIe=s(g7);FBr=r(yIe,"This class cannot be instantiated directly using "),wTe=n(yIe,"CODE",{});var u3t=s(wTe);vBr=r(u3t,"__init__()"),u3t.forEach(t),TBr=r(yIe," (throws an error)."),yIe.forEach(t),MBr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(h7.$$.fragment,$i),EBr=i($i),ATe=n($i,"P",{});var b3t=s(ATe);CBr=r(b3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),b3t.forEach(t),wBr=i($i),Pf=n($i,"P",{});var eY=s(Pf);ABr=r(eY,`Note:
Loading a model from its configuration file does `),yTe=n(eY,"STRONG",{});var F3t=s(yTe);yBr=r(F3t,"not"),F3t.forEach(t),LBr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(eY,"A",{href:!0});var v3t=s(sU);xBr=r(v3t,"from_pretrained()"),v3t.forEach(t),kBr=r(eY," to load the model weights."),eY.forEach(t),SBr=i($i),LTe=n($i,"P",{});var T3t=s(LTe);RBr=r(T3t,"Examples:"),T3t.forEach(t),BBr=i($i),m(p7.$$.fragment,$i),$i.forEach(t),PBr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(_7.$$.fragment,ja),$Br=i(ja),xTe=n(ja,"P",{});var M3t=s(xTe);IBr=r(M3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),M3t.forEach(t),qBr=i(ja),Dn=n(ja,"P",{});var M3=s(Dn);NBr=r(M3,"The model class to instantiate is selected based on the "),kTe=n(M3,"CODE",{});var E3t=s(kTe);jBr=r(E3t,"model_type"),E3t.forEach(t),DBr=r(M3,` property of the config object (either
passed as an argument or loaded from `),STe=n(M3,"CODE",{});var C3t=s(STe);GBr=r(C3t,"pretrained_model_name_or_path"),C3t.forEach(t),OBr=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=n(M3,"CODE",{});var w3t=s(RTe);VBr=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),XBr=r(M3,":"),M3.forEach(t),zBr=i(ja),BTe=n(ja,"UL",{});var A3t=s(BTe);EC=n(A3t,"LI",{});var hRe=s(EC);PTe=n(hRe,"STRONG",{});var y3t=s(PTe);QBr=r(y3t,"vision-encoder-decoder"),y3t.forEach(t),WBr=r(hRe," \u2014 "),lU=n(hRe,"A",{href:!0});var L3t=s(lU);HBr=r(L3t,"FlaxVisionEncoderDecoderModel"),L3t.forEach(t),UBr=r(hRe," (Vision Encoder decoder model)"),hRe.forEach(t),A3t.forEach(t),JBr=i(ja),$Te=n(ja,"P",{});var x3t=s($Te);YBr=r(x3t,"Examples:"),x3t.forEach(t),KBr=i(ja),m(u7.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(j3t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(T9,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(M9,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertConfig"),d(E9,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig"),d(C9,"href","/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitConfig"),d(w9,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertConfig"),d(A9,"href","/docs/transformers/pr_15622/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(y9,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdConfig"),d(L9,"href","/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(x9,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(k9,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(S9,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertConfig"),d(R9,"href","/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineConfig"),d(B9,"href","/docs/transformers/pr_15622/en/model_doc/clip#transformers.CLIPConfig"),d(P9,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertConfig"),d($9,"href","/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextConfig"),d(I9,"href","/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLConfig"),d(q9,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(N9,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(j9,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaConfig"),d(D9,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(G9,"href","/docs/transformers/pr_15622/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(O9,"href","/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTConfig"),d(V9,"href","/docs/transformers/pr_15622/en/model_doc/detr#transformers.DetrConfig"),d(X9,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertConfig"),d(z9,"href","/docs/transformers/pr_15622/en/model_doc/dpr#transformers.DPRConfig"),d(Q9,"href","/docs/transformers/pr_15622/en/model_doc/dpt#transformers.DPTConfig"),d(W9,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraConfig"),d(H9,"href","/docs/transformers/pr_15622/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(U9,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertConfig"),d(J9,"href","/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetConfig"),d(Y9,"href","/docs/transformers/pr_15622/en/model_doc/fsmt#transformers.FSMTConfig"),d(K9,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelConfig"),d(Z9,"href","/docs/transformers/pr_15622/en/model_doc/glpn#transformers.GLPNConfig"),d(ex,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Config"),d(ox,"href","/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(rx,"href","/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJConfig"),d(tx,"href","/docs/transformers/pr_15622/en/model_doc/hubert#transformers.HubertConfig"),d(ax,"href","/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertConfig"),d(nx,"href","/docs/transformers/pr_15622/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(sx,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(lx,"href","/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(ix,"href","/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDConfig"),d(dx,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerConfig"),d(cx,"href","/docs/transformers/pr_15622/en/model_doc/luke#transformers.LukeConfig"),d(fx,"href","/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertConfig"),d(mx,"href","/docs/transformers/pr_15622/en/model_doc/m2m_100#transformers.M2M100Config"),d(gx,"href","/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianConfig"),d(hx,"href","/docs/transformers/pr_15622/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(px,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartConfig"),d(_x,"href","/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(ux,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(bx,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetConfig"),d(Fx,"href","/docs/transformers/pr_15622/en/model_doc/mt5#transformers.MT5Config"),d(vx,"href","/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Tx,"href","/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Mx,"href","/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusConfig"),d(Ex,"href","/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Cx,"href","/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartConfig"),d(wx,"href","/docs/transformers/pr_15622/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Ax,"href","/docs/transformers/pr_15622/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(yx,"href","/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Lx,"href","/docs/transformers/pr_15622/en/model_doc/rag#transformers.RagConfig"),d(xx,"href","/docs/transformers/pr_15622/en/model_doc/realm#transformers.RealmConfig"),d(kx,"href","/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerConfig"),d(Sx,"href","/docs/transformers/pr_15622/en/model_doc/regnet#transformers.RegNetConfig"),d(Rx,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertConfig"),d(Bx,"href","/docs/transformers/pr_15622/en/model_doc/resnet#transformers.ResNetConfig"),d(Px,"href","/docs/transformers/pr_15622/en/model_doc/retribert#transformers.RetriBertConfig"),d($x,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaConfig"),d(Ix,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerConfig"),d(qx,"href","/docs/transformers/pr_15622/en/model_doc/segformer#transformers.SegformerConfig"),d(Nx,"href","/docs/transformers/pr_15622/en/model_doc/sew#transformers.SEWConfig"),d(jx,"href","/docs/transformers/pr_15622/en/model_doc/sew-d#transformers.SEWDConfig"),d(Dx,"href","/docs/transformers/pr_15622/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Gx,"href","/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Ox,"href","/docs/transformers/pr_15622/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Vx,"href","/docs/transformers/pr_15622/en/model_doc/splinter#transformers.SplinterConfig"),d(Xx,"href","/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(zx,"href","/docs/transformers/pr_15622/en/model_doc/swin#transformers.SwinConfig"),d(Qx,"href","/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5Config"),d(Wx,"href","/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasConfig"),d(Hx,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartConfig"),d(Ux,"href","/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Jx,"href","/docs/transformers/pr_15622/en/model_doc/trocr#transformers.TrOCRConfig"),d(Yx,"href","/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(Kx,"href","/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Zx,"href","/docs/transformers/pr_15622/en/model_doc/van#transformers.VanConfig"),d(ek,"href","/docs/transformers/pr_15622/en/model_doc/vilt#transformers.ViltConfig"),d(ok,"href","/docs/transformers/pr_15622/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(rk,"href","/docs/transformers/pr_15622/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(tk,"href","/docs/transformers/pr_15622/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(ak,"href","/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTConfig"),d(nk,"href","/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(sk,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(lk,"href","/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMConfig"),d(ik,"href","/docs/transformers/pr_15622/en/model_doc/xglm#transformers.XGLMConfig"),d(dk,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMConfig"),d(ck,"href","/docs/transformers/pr_15622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(fk,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(mk,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(gk,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetConfig"),d(hk,"href","/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(qg,"class","docstring"),d(Qo,"class","docstring"),d(Ng,"id","transformers.AutoTokenizer"),d(Ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ng,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(pk,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(_k,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertTokenizer"),d(uk,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(bk,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartTokenizer"),d(Fk,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartTokenizerFast"),d(vk,"href","/docs/transformers/pr_15622/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Tk,"href","/docs/transformers/pr_15622/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Mk,"href","/docs/transformers/pr_15622/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Ek,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertTokenizer"),d(Ck,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertTokenizerFast"),d(wk,"href","/docs/transformers/pr_15622/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Ak,"href","/docs/transformers/pr_15622/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(yk,"href","/docs/transformers/pr_15622/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Lk,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(xk,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(kk,"href","/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Sk,"href","/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Rk,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Bk,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Pk,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d($k,"href","/docs/transformers/pr_15622/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Ik,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertTokenizer"),d(qk,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Nk,"href","/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineTokenizer"),d(jk,"href","/docs/transformers/pr_15622/en/model_doc/clip#transformers.CLIPTokenizer"),d(Dk,"href","/docs/transformers/pr_15622/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Gk,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Ok,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Vk,"href","/docs/transformers/pr_15622/en/model_doc/cpm#transformers.CpmTokenizer"),d(Xk,"href","/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(zk,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Qk,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Wk,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Hk,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Uk,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Jk,"href","/docs/transformers/pr_15622/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Yk,"href","/docs/transformers/pr_15622/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Kk,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraTokenizer"),d(Zk,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(eS,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(oS,"href","/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetTokenizer"),d(rS,"href","/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(tS,"href","/docs/transformers/pr_15622/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(aS,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelTokenizer"),d(nS,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(sS,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(lS,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(iS,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(dS,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(cS,"href","/docs/transformers/pr_15622/en/model_doc/herbert#transformers.HerbertTokenizer"),d(fS,"href","/docs/transformers/pr_15622/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(mS,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(gS,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaTokenizer"),d(hS,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(pS,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(_S,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(uS,"href","/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(bS,"href","/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(FS,"href","/docs/transformers/pr_15622/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(vS,"href","/docs/transformers/pr_15622/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(TS,"href","/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDTokenizer"),d(MS,"href","/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDTokenizerFast"),d(ES,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerTokenizer"),d(CS,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(wS,"href","/docs/transformers/pr_15622/en/model_doc/luke#transformers.LukeTokenizer"),d(AS,"href","/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(yS,"href","/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(LS,"href","/docs/transformers/pr_15622/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(xS,"href","/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianTokenizer"),d(kS,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartTokenizer"),d(SS,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(RS,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(BS,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(PS,"href","/docs/transformers/pr_15622/en/model_doc/mluke#transformers.MLukeTokenizer"),d($S,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(IS,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(qS,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(NS,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(jS,"href","/docs/transformers/pr_15622/en/model_doc/mt5#transformers.T5Tokenizer"),d(DS,"href","/docs/transformers/pr_15622/en/model_doc/mt5#transformers.T5TokenizerFast"),d(GS,"href","/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(OS,"href","/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(VS,"href","/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(XS,"href","/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(zS,"href","/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(QS,"href","/docs/transformers/pr_15622/en/model_doc/phobert#transformers.PhobertTokenizer"),d(WS,"href","/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartTokenizer"),d(HS,"href","/docs/transformers/pr_15622/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(US,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertTokenizer"),d(JS,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertTokenizerFast"),d(YS,"href","/docs/transformers/pr_15622/en/model_doc/rag#transformers.RagTokenizer"),d(KS,"href","/docs/transformers/pr_15622/en/model_doc/realm#transformers.RealmTokenizer"),d(ZS,"href","/docs/transformers/pr_15622/en/model_doc/realm#transformers.RealmTokenizerFast"),d(eR,"href","/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerTokenizer"),d(oR,"href","/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(rR,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertTokenizer"),d(tR,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(aR,"href","/docs/transformers/pr_15622/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(nR,"href","/docs/transformers/pr_15622/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(sR,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaTokenizer"),d(lR,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(iR,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(dR,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(cR,"href","/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(fR,"href","/docs/transformers/pr_15622/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(mR,"href","/docs/transformers/pr_15622/en/model_doc/splinter#transformers.SplinterTokenizer"),d(gR,"href","/docs/transformers/pr_15622/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(hR,"href","/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(pR,"href","/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(_R,"href","/docs/transformers/pr_15622/en/model_doc/mt5#transformers.T5Tokenizer"),d(uR,"href","/docs/transformers/pr_15622/en/model_doc/mt5#transformers.T5TokenizerFast"),d(bR,"href","/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasTokenizer"),d(FR,"href","/docs/transformers/pr_15622/en/model_doc/tapex#transformers.TapexTokenizer"),d(vR,"href","/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(TR,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(MR,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(ER,"href","/docs/transformers/pr_15622/en/model_doc/xglm#transformers.XGLMTokenizer"),d(CR,"href","/docs/transformers/pr_15622/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(wR,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMTokenizer"),d(AR,"href","/docs/transformers/pr_15622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(yR,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(LR,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(xR,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(kR,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(ph,"class","docstring"),d(Wo,"class","docstring"),d(_h,"id","transformers.AutoFeatureExtractor"),d(_h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_h,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(SR,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(RR,"href","/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(BR,"href","/docs/transformers/pr_15622/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(PR,"href","/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d($R,"href","/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(IR,"href","/docs/transformers/pr_15622/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(qR,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(NR,"href","/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(jR,"href","/docs/transformers/pr_15622/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(DR,"href","/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(GR,"href","/docs/transformers/pr_15622/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(OR,"href","/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(VR,"href","/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(XR,"href","/docs/transformers/pr_15622/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(zR,"href","/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(QR,"href","/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(WR,"href","/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(HR,"href","/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(UR,"href","/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(JR,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(qh,"class","docstring"),d(Ho,"class","docstring"),d(Nh,"id","transformers.AutoProcessor"),d(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(YR,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(KR,"href","/docs/transformers/pr_15622/en/model_doc/clip#transformers.CLIPProcessor"),d(ZR,"href","/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(eB,"href","/docs/transformers/pr_15622/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(oB,"href","/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(rB,"href","/docs/transformers/pr_15622/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(tB,"href","/docs/transformers/pr_15622/en/model_doc/trocr#transformers.TrOCRProcessor"),d(aB,"href","/docs/transformers/pr_15622/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(nB,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Hh,"class","docstring"),d(Uo,"class","docstring"),d(Uh,"id","transformers.AutoModel"),d(Uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(sB,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lB,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iB,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(dB,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertModel"),d(cB,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartModel"),d(fB,"href","/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitModel"),d(mB,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertModel"),d(gB,"href","/docs/transformers/pr_15622/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(hB,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdModel"),d(pB,"href","/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(_B,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(uB,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(bB,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertModel"),d(FB,"href","/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineModel"),d(vB,"href","/docs/transformers/pr_15622/en/model_doc/clip#transformers.CLIPModel"),d(TB,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertModel"),d(MB,"href","/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextModel"),d(EB,"href","/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLModel"),d(CB,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(wB,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(AB,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaModel"),d(yB,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(LB,"href","/docs/transformers/pr_15622/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(xB,"href","/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTModel"),d(kB,"href","/docs/transformers/pr_15622/en/model_doc/detr#transformers.DetrModel"),d(SB,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertModel"),d(RB,"href","/docs/transformers/pr_15622/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(BB,"href","/docs/transformers/pr_15622/en/model_doc/dpt#transformers.DPTModel"),d(PB,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraModel"),d($B,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertModel"),d(IB,"href","/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetModel"),d(qB,"href","/docs/transformers/pr_15622/en/model_doc/fsmt#transformers.FSMTModel"),d(NB,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelModel"),d(jB,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelBaseModel"),d(DB,"href","/docs/transformers/pr_15622/en/model_doc/glpn#transformers.GLPNModel"),d(GB,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2Model"),d(OB,"href","/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(VB,"href","/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJModel"),d(XB,"href","/docs/transformers/pr_15622/en/model_doc/hubert#transformers.HubertModel"),d(zB,"href","/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertModel"),d(QB,"href","/docs/transformers/pr_15622/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(WB,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(HB,"href","/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(UB,"href","/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDModel"),d(JB,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerModel"),d(YB,"href","/docs/transformers/pr_15622/en/model_doc/luke#transformers.LukeModel"),d(KB,"href","/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertModel"),d(ZB,"href","/docs/transformers/pr_15622/en/model_doc/m2m_100#transformers.M2M100Model"),d(eP,"href","/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianModel"),d(oP,"href","/docs/transformers/pr_15622/en/model_doc/maskformer#transformers.MaskFormerModel"),d(rP,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartModel"),d(tP,"href","/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(aP,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertModel"),d(nP,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetModel"),d(sP,"href","/docs/transformers/pr_15622/en/model_doc/mt5#transformers.MT5Model"),d(lP,"href","/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerModel"),d(iP,"href","/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(dP,"href","/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusModel"),d(cP,"href","/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverModel"),d(fP,"href","/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartModel"),d(mP,"href","/docs/transformers/pr_15622/en/model_doc/poolformer#transformers.PoolFormerModel"),d(gP,"href","/docs/transformers/pr_15622/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(hP,"href","/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertModel"),d(pP,"href","/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerModel"),d(_P,"href","/docs/transformers/pr_15622/en/model_doc/regnet#transformers.RegNetModel"),d(uP,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertModel"),d(bP,"href","/docs/transformers/pr_15622/en/model_doc/resnet#transformers.ResNetModel"),d(FP,"href","/docs/transformers/pr_15622/en/model_doc/retribert#transformers.RetriBertModel"),d(vP,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaModel"),d(TP,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerModel"),d(MP,"href","/docs/transformers/pr_15622/en/model_doc/segformer#transformers.SegformerModel"),d(EP,"href","/docs/transformers/pr_15622/en/model_doc/sew#transformers.SEWModel"),d(CP,"href","/docs/transformers/pr_15622/en/model_doc/sew-d#transformers.SEWDModel"),d(wP,"href","/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(AP,"href","/docs/transformers/pr_15622/en/model_doc/splinter#transformers.SplinterModel"),d(yP,"href","/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(LP,"href","/docs/transformers/pr_15622/en/model_doc/swin#transformers.SwinModel"),d(xP,"href","/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5Model"),d(kP,"href","/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasModel"),d(SP,"href","/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(RP,"href","/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechModel"),d(BP,"href","/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(PP,"href","/docs/transformers/pr_15622/en/model_doc/van#transformers.VanModel"),d($P,"href","/docs/transformers/pr_15622/en/model_doc/vilt#transformers.ViltModel"),d(IP,"href","/docs/transformers/pr_15622/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(qP,"href","/docs/transformers/pr_15622/en/model_doc/visual_bert#transformers.VisualBertModel"),d(NP,"href","/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTModel"),d(jP,"href","/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(DP,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(GP,"href","/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMModel"),d(OP,"href","/docs/transformers/pr_15622/en/model_doc/xglm#transformers.XGLMModel"),d(VP,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMModel"),d(XP,"href","/docs/transformers/pr_15622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(zP,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(QP,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(WP,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetModel"),d(HP,"href","/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d($_,"id","transformers.AutoModelForPreTraining"),d($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(UP,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JP,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YP,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(KP,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertForPreTraining"),d(ZP,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(e$,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForPreTraining"),d(o$,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(r$,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(t$,"href","/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(a$,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(n$,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(s$,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(l$,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(i$,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForPreTraining"),d(d$,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(c$,"href","/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForPreTraining"),d(f$,"href","/docs/transformers/pr_15622/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(m$,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(g$,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(h$,"href","/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(p$,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(_$,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(u$,"href","/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(b$,"href","/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(F$,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(v$,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(T$,"href","/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(M$,"href","/docs/transformers/pr_15622/en/model_doc/retribert#transformers.RetriBertModel"),d(E$,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(C$,"href","/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(w$,"href","/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(A$,"href","/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(y$,"href","/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(L$,"href","/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(x$,"href","/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(k$,"href","/docs/transformers/pr_15622/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(S$,"href","/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(R$,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(B$,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(P$,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d($$,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(I$,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(Mu,"id","transformers.AutoModelForCausalLM"),d(Mu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(q$,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(N$,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(j$,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(D$,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForCausalLM"),d(G$,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertLMHeadModel"),d(O$,"href","/docs/transformers/pr_15622/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(V$,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(X$,"href","/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(z$,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(Q$,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(W$,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(H$,"href","/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(U$,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(J$,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForCausalLM"),d(Y$,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(K$,"href","/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(Z$,"href","/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(eI,"href","/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianForCausalLM"),d(oI,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartForCausalLM"),d(rI,"href","/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(tI,"href","/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(aI,"href","/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(nI,"href","/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(sI,"href","/docs/transformers/pr_15622/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(lI,"href","/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(iI,"href","/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(dI,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(cI,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(fI,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(mI,"href","/docs/transformers/pr_15622/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(gI,"href","/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(hI,"href","/docs/transformers/pr_15622/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(pI,"href","/docs/transformers/pr_15622/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(_I,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(uI,"href","/docs/transformers/pr_15622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(bI,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(FI,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(vI,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(n2,"id","transformers.AutoModelForMaskedLM"),d(n2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n2,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(TI,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MI,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EI,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(CI,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(wI,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(AI,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForMaskedLM"),d(yI,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(LI,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(xI,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(kI,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(SI,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(RI,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(BI,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(PI,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForMaskedLM"),d($I,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(II,"href","/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(qI,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(NI,"href","/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(jI,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(DI,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(GI,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(OI,"href","/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(VI,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(XI,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(zI,"href","/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(QI,"href","/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(WI,"href","/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(HI,"href","/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(UI,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(JI,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(YI,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(KI,"href","/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(ZI,"href","/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(eq,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(oq,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(rq,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(tq,"href","/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(O2,"id","transformers.AutoModelForSeq2SeqLM"),d(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O2,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(aq,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nq,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sq,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(lq,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(iq,"href","/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(dq,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(cq,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_15622/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(mq,"href","/docs/transformers/pr_15622/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(gq,"href","/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(hq,"href","/docs/transformers/pr_15622/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(pq,"href","/docs/transformers/pr_15622/en/model_doc/marian#transformers.MarianMTModel"),d(_q,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(uq,"href","/docs/transformers/pr_15622/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(bq,"href","/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Fq,"href","/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(vq,"href","/docs/transformers/pr_15622/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_15622/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_15622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(l1,"id","transformers.AutoModelForSequenceClassification"),d(l1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l1,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Cq,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wq,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Aq,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(yq,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Lq,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForSequenceClassification"),d(xq,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForSequenceClassification"),d(kq,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d($q,"href","/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(qq,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(jq,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(zq,"href","/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(eN,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(oN,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(rN,"href","/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(tN,"href","/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(aN,"href","/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(nN,"href","/docs/transformers/pr_15622/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(sN,"href","/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(lN,"href","/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(iN,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(dN,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(cN,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(fN,"href","/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(mN,"href","/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(gN,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForSequenceClassification"),d(hN,"href","/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(pN,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(_N,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(uN,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(bN,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(FN,"href","/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(rb,"id","transformers.AutoModelForMultipleChoice"),d(rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rb,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(vN,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TN,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MN,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(EN,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(CN,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForMultipleChoice"),d(wN,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(AN,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(yN,"href","/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(LN,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(kN,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(RN,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(PN,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d($N,"href","/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(IN,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(qN,"href","/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(DN,"href","/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(GN,"href","/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(VN,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(XN,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(zN,"href","/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(WN,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(HN,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(UN,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(JN,"href","/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(Rb,"id","transformers.AutoModelForNextSentencePrediction"),d(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(YN,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KN,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZN,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(ej,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(oj,"href","/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(rj,"href","/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(tj,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(aj,"href","/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(jb,"id","transformers.AutoModelForTokenClassification"),d(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jb,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(nj,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sj,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lj,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(ij,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(dj,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForTokenClassification"),d(cj,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(fj,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(mj,"href","/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineForTokenClassification"),d(gj,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(hj,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(pj,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(_j,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(uj,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(bj,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Fj,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(vj,"href","/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Tj,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Mj,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Ej,"href","/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Cj,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(wj,"href","/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Aj,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(yj,"href","/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Lj,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(xj,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(kj,"href","/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Sj,"href","/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Rj,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Bj,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Pj,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d($j,"href","/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Ij,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(qj,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Nj,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(jj,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Dj,"href","/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(v5,"id","transformers.AutoModelForQuestionAnswering"),d(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v5,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Gj,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Oj,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Vj,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(Xj,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(zj,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_15622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_15622/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(aD,"href","/docs/transformers/pr_15622/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_15622/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_15622/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_15622/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_15622/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_15622/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_15622/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_15622/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_15622/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_15622/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_15622/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(wD,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(LD,"href","/docs/transformers/pr_15622/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(lF,"id","transformers.AutoModelForTableQuestionAnswering"),d(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lF,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(xD,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kD,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SD,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(RD,"href","/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(cF,"id","transformers.AutoModelForImageClassification"),d(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cF,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(BD,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PD,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($D,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(ID,"href","/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitForImageClassification"),d(qD,"href","/docs/transformers/pr_15622/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(ND,"href","/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTForImageClassification"),d(jD,"href","/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(DD,"href","/docs/transformers/pr_15622/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(GD,"href","/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(OD,"href","/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(VD,"href","/docs/transformers/pr_15622/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(XD,"href","/docs/transformers/pr_15622/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(zD,"href","/docs/transformers/pr_15622/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(QD,"href","/docs/transformers/pr_15622/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(WD,"href","/docs/transformers/pr_15622/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(HD,"href","/docs/transformers/pr_15622/en/model_doc/swin#transformers.SwinForImageClassification"),d(UD,"href","/docs/transformers/pr_15622/en/model_doc/van#transformers.VanForImageClassification"),d(JD,"href","/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(MF,"id","transformers.AutoModelForVision2Seq"),d(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MF,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(YD,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KD,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZD,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(eG,"href","/docs/transformers/pr_15622/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(wF,"id","transformers.AutoModelForAudioClassification"),d(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wF,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(oG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(aG,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(nG,"href","/docs/transformers/pr_15622/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(sG,"href","/docs/transformers/pr_15622/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(lG,"href","/docs/transformers/pr_15622/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(iG,"href","/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(dG,"href","/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(cG,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(fG,"href","/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d($F,"id","transformers.AutoModelForAudioFrameClassification"),d($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($F,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(mG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(pG,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(_G,"href","/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(uG,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(bG,"href","/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(GF,"id","transformers.AutoModelForCTC"),d(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GF,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(FG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(MG,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(EG,"href","/docs/transformers/pr_15622/en/model_doc/hubert#transformers.HubertForCTC"),d(CG,"href","/docs/transformers/pr_15622/en/model_doc/sew#transformers.SEWForCTC"),d(wG,"href","/docs/transformers/pr_15622/en/model_doc/sew-d#transformers.SEWDForCTC"),d(AG,"href","/docs/transformers/pr_15622/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(yG,"href","/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(LG,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(xG,"href","/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(YF,"id","transformers.AutoModelForSpeechSeq2Seq"),d(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YF,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(kG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(BG,"href","/docs/transformers/pr_15622/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(PG,"href","/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(ov,"id","transformers.AutoModelForAudioXVector"),d(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ov,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d($G,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(NG,"href","/docs/transformers/pr_15622/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(jG,"href","/docs/transformers/pr_15622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(DG,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(GG,"href","/docs/transformers/pr_15622/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(lv,"id","transformers.AutoModelForMaskedImageModeling"),d(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(OG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(zG,"href","/docs/transformers/pr_15622/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(QG,"href","/docs/transformers/pr_15622/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(WG,"href","/docs/transformers/pr_15622/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(mv,"id","transformers.AutoModelForObjectDetection"),d(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mv,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(HG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(YG,"href","/docs/transformers/pr_15622/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(pv,"id","transformers.AutoModelForImageSegmentation"),d(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pv,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(KG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZG,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eO,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(oO,"href","/docs/transformers/pr_15622/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(bv,"id","transformers.AutoModelForSemanticSegmentation"),d(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bv,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(rO,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(nO,"href","/docs/transformers/pr_15622/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(sO,"href","/docs/transformers/pr_15622/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(lO,"href","/docs/transformers/pr_15622/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(Ev,"id","transformers.AutoModelForInstanceSegmentation"),d(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ev,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(iO,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dO,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cO,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(fO,"href","/docs/transformers/pr_15622/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(Av,"id","transformers.TFAutoModel"),d(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Av,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(mO,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gO,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hO,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(pO,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertModel"),d(_O,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.TFBartModel"),d(uO,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertModel"),d(bO,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(FO,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(vO,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertModel"),d(TO,"href","/docs/transformers/pr_15622/en/model_doc/clip#transformers.TFCLIPModel"),d(MO,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.TFConvBertModel"),d(EO,"href","/docs/transformers/pr_15622/en/model_doc/convnext#transformers.TFConvNextModel"),d(CO,"href","/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.TFCTRLModel"),d(wO,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.TFDebertaModel"),d(AO,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(yO,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(LO,"href","/docs/transformers/pr_15622/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(xO,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraModel"),d(kO,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(SO,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelModel"),d(RO,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(BO,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.TFGPT2Model"),d(PO,"href","/docs/transformers/pr_15622/en/model_doc/gptj#transformers.TFGPTJModel"),d($O,"href","/docs/transformers/pr_15622/en/model_doc/hubert#transformers.TFHubertModel"),d(IO,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(qO,"href","/docs/transformers/pr_15622/en/model_doc/led#transformers.TFLEDModel"),d(NO,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.TFLongformerModel"),d(jO,"href","/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.TFLxmertModel"),d(DO,"href","/docs/transformers/pr_15622/en/model_doc/marian#transformers.TFMarianModel"),d(GO,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.TFMBartModel"),d(OO,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(VO,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetModel"),d(XO,"href","/docs/transformers/pr_15622/en/model_doc/mt5#transformers.TFMT5Model"),d(zO,"href","/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(QO,"href","/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.TFPegasusModel"),d(WO,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertModel"),d(HO,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaModel"),d(UO,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerModel"),d(JO,"href","/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(YO,"href","/docs/transformers/pr_15622/en/model_doc/t5#transformers.TFT5Model"),d(KO,"href","/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TFTapasModel"),d(ZO,"href","/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(eV,"href","/docs/transformers/pr_15622/en/model_doc/vit#transformers.TFViTModel"),d(oV,"href","/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(rV,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(tV,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMModel"),d(aV,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(nV,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(_6,"id","transformers.TFAutoModelForPreTraining"),d(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_6,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(sV,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lV,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iV,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(dV,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(cV,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(fV,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertForPreTraining"),d(mV,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(gV,"href","/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(hV,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(pV,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(_V,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(uV,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(bV,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(FV,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(vV,"href","/docs/transformers/pr_15622/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(TV,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(MV,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(EV,"href","/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(CV,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(wV,"href","/docs/transformers/pr_15622/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(AV,"href","/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(yV,"href","/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(LV,"href","/docs/transformers/pr_15622/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(xV,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(kV,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(SV,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d(D6,"id","transformers.TFAutoModelForCausalLM"),d(D6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D6,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(RV,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BV,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PV,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d($V,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(IV,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(qV,"href","/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(NV,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(jV,"href","/docs/transformers/pr_15622/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(DV,"href","/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(GV,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(OV,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(VV,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(XV,"href","/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(zV,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(QV,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(Z6,"id","transformers.TFAutoModelForImageClassification"),d(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z6,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(WV,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HV,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UV,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(JV,"href","/docs/transformers/pr_15622/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(YV,"href","/docs/transformers/pr_15622/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(rT,"id","transformers.TFAutoModelForMaskedLM"),d(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rT,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(KV,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZV,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eX,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(oX,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(rX,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(tX,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(aX,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(nX,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(sX,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(lX,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(iX,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(dX,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(cX,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(fX,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(mX,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(gX,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(hX,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(pX,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(_X,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(uX,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(bX,"href","/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(FX,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(vX,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(ET,"id","transformers.TFAutoModelForSeq2SeqLM"),d(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ET,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(TX,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MX,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EX,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(CX,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(wX,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(AX,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(yX,"href","/docs/transformers/pr_15622/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(LX,"href","/docs/transformers/pr_15622/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(xX,"href","/docs/transformers/pr_15622/en/model_doc/marian#transformers.TFMarianMTModel"),d(kX,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_15622/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(RX,"href","/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_15622/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(PT,"id","transformers.TFAutoModelForSequenceClassification"),d(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PT,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(PX,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($X,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IX,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(qX,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(NX,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(jX,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(DX,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(GX,"href","/docs/transformers/pr_15622/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(OX,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(VX,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(XX,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(zX,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(QX,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(WX,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(HX,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(UX,"href","/docs/transformers/pr_15622/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(JX,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(YX,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(KX,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(ez,"href","/docs/transformers/pr_15622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(oz,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(rz,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(tz,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(az,"href","/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(nz,"href","/docs/transformers/pr_15622/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(sz,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(lz,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(iz,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(lM,"id","transformers.TFAutoModelForMultipleChoice"),d(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lM,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(dz,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cz,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fz,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(mz,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(gz,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(hz,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(pz,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(_z,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(uz,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(bz,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(vz,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(wz,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Az,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(yz,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(wM,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(xz,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kz,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Sz,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(Rz,"href","/docs/transformers/pr_15622/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(yM,"id","transformers.TFAutoModelForTokenClassification"),d(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yM,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Bz,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pz,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($z,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(Iz,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(qz,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Nz,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(jz,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Dz,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Gz,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Oz,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Vz,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Xz,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(zz,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Qz,"href","/docs/transformers/pr_15622/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Wz,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Hz,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Uz,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(Jz,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(Yz,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Kz,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(Zz,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(eQ,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(oQ,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(HM,"id","transformers.TFAutoModelForQuestionAnswering"),d(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HM,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(rQ,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tQ,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aQ,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(nQ,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_15622/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_15622/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_15622/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_15622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_15622/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(hQ,"href","/docs/transformers/pr_15622/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_15622/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_15622/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_15622/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_15622/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_15622/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_15622/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(EQ,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_15622/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(p4,"id","transformers.TFAutoModelForVision2Seq"),d(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p4,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(wQ,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AQ,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yQ,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(LQ,"href","/docs/transformers/pr_15622/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(u4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(xQ,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kQ,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SQ,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(RQ,"href","/docs/transformers/pr_15622/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(F4,"id","transformers.FlaxAutoModel"),d(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F4,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(BQ,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PQ,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($Q,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(IQ,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertModel"),d(qQ,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartModel"),d(NQ,"href","/docs/transformers/pr_15622/en/model_doc/beit#transformers.FlaxBeitModel"),d(jQ,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertModel"),d(DQ,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(GQ,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(OQ,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(VQ,"href","/docs/transformers/pr_15622/en/model_doc/clip#transformers.FlaxCLIPModel"),d(XQ,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(zQ,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraModel"),d(QQ,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(WQ,"href","/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(HQ,"href","/docs/transformers/pr_15622/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(UQ,"href","/docs/transformers/pr_15622/en/model_doc/marian#transformers.FlaxMarianModel"),d(JQ,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.FlaxMBartModel"),d(YQ,"href","/docs/transformers/pr_15622/en/model_doc/mt5#transformers.FlaxMT5Model"),d(KQ,"href","/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(ZQ,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(eW,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(oW,"href","/docs/transformers/pr_15622/en/model_doc/t5#transformers.FlaxT5Model"),d(rW,"href","/docs/transformers/pr_15622/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(tW,"href","/docs/transformers/pr_15622/en/model_doc/vit#transformers.FlaxViTModel"),d(aW,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(nW,"href","/docs/transformers/pr_15622/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(sW,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(z4,"id","transformers.FlaxAutoModelForCausalLM"),d(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z4,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(lW,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iW,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dW,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(cW,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(fW,"href","/docs/transformers/pr_15622/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(mW,"href","/docs/transformers/pr_15622/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(gW,"href","/docs/transformers/pr_15622/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(hW,"href","/docs/transformers/pr_15622/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(Y4,"id","transformers.FlaxAutoModelForPreTraining"),d(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y4,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(pW,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_W,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uW,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(bW,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(FW,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(vW,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(TW,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(MW,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(EW,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(CW,"href","/docs/transformers/pr_15622/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(wW,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(AW,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(yW,"href","/docs/transformers/pr_15622/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(LW,"href","/docs/transformers/pr_15622/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(xW,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(cE,"id","transformers.FlaxAutoModelForMaskedLM"),d(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cE,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(kW,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SW,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RW,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(BW,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(PW,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d($W,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(IW,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(qW,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(NW,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(jW,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(DW,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(GW,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(OW,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(TE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(VW,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XW,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zW,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(QW,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(WW,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(HW,"href","/docs/transformers/pr_15622/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(UW,"href","/docs/transformers/pr_15622/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(JW,"href","/docs/transformers/pr_15622/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(YW,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(KW,"href","/docs/transformers/pr_15622/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(ZW,"href","/docs/transformers/pr_15622/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(eH,"href","/docs/transformers/pr_15622/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(SE,"id","transformers.FlaxAutoModelForSequenceClassification"),d(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SE,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(oH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(aH,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(nH,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(sH,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(lH,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(iH,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(dH,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(cH,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(fH,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(mH,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(gH,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(OE,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(hH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_H,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(uH,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(bH,"href","/docs/transformers/pr_15622/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(FH,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(vH,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(TH,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(MH,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(EH,"href","/docs/transformers/pr_15622/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(CH,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(wH,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(AH,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(ZE,"id","transformers.FlaxAutoModelForTokenClassification"),d(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(yH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(kH,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(SH,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(RH,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(BH,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(PH,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d($H,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(IH,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(qH,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(iC,"id","transformers.FlaxAutoModelForMultipleChoice"),d(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iC,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(NH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(GH,"href","/docs/transformers/pr_15622/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(OH,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(VH,"href","/docs/transformers/pr_15622/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(XH,"href","/docs/transformers/pr_15622/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(zH,"href","/docs/transformers/pr_15622/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(QH,"href","/docs/transformers/pr_15622/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(WH,"href","/docs/transformers/pr_15622/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(HH,"href","/docs/transformers/pr_15622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(uC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(UH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(KH,"href","/docs/transformers/pr_15622/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(FC,"id","transformers.FlaxAutoModelForImageClassification"),d(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FC,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(ZH,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eU,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oU,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(rU,"href","/docs/transformers/pr_15622/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(tU,"href","/docs/transformers/pr_15622/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(MC,"id","transformers.FlaxAutoModelForVision2Seq"),d(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MC,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(aU,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nU,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sU,"href","/docs/transformers/pr_15622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(lU,"href","/docs/transformers/pr_15622/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(ge,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,E3),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,C3),e(co,On),e(co,Vn),e(Vn,w3),e(co,Di),e(co,Xn),e(Xn,A3),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,p9),e(ue,Oi),e(Oi,_9),e(ue,u9),b(c,zo,u),b(c,Ga,u),e(Ga,b9),e(Ga,Df),e(Df,F9),e(Ga,LIe),b(c,pRe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,oY),g(y3,oY,null),e(Vi,xIe),e(Vi,rY),e(rY,kIe),b(c,_Re,u),b(c,zn,u),e(zn,SIe),e(zn,tY),e(tY,RIe),e(zn,BIe),e(zn,aY),e(aY,PIe),e(zn,$Ie),b(c,uRe,u),g(L3,c,u),b(c,bRe,u),b(c,v9,u),e(v9,IIe),b(c,FRe,u),g(Of,c,u),b(c,vRe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,nY),g(x3,nY,null),e(Xi,qIe),e(Xi,sY),e(sY,NIe),b(c,TRe,u),b(c,Qo,u),g(k3,Qo,null),e(Qo,jIe),e(Qo,S3),e(S3,DIe),e(S3,T9),e(T9,GIe),e(S3,OIe),e(Qo,VIe),e(Qo,R3),e(R3,XIe),e(R3,lY),e(lY,zIe),e(R3,QIe),e(Qo,WIe),e(Qo,mo),g(B3,mo,null),e(mo,HIe),e(mo,iY),e(iY,UIe),e(mo,JIe),e(mo,zi),e(zi,YIe),e(zi,dY),e(dY,KIe),e(zi,ZIe),e(zi,cY),e(cY,eqe),e(zi,oqe),e(mo,rqe),e(mo,F),e(F,Xf),e(Xf,fY),e(fY,tqe),e(Xf,aqe),e(Xf,M9),e(M9,nqe),e(Xf,sqe),e(F,lqe),e(F,zf),e(zf,mY),e(mY,iqe),e(zf,dqe),e(zf,E9),e(E9,cqe),e(zf,fqe),e(F,mqe),e(F,Qf),e(Qf,gY),e(gY,gqe),e(Qf,hqe),e(Qf,C9),e(C9,pqe),e(Qf,_qe),e(F,uqe),e(F,Wf),e(Wf,hY),e(hY,bqe),e(Wf,Fqe),e(Wf,w9),e(w9,vqe),e(Wf,Tqe),e(F,Mqe),e(F,Hf),e(Hf,pY),e(pY,Eqe),e(Hf,Cqe),e(Hf,A9),e(A9,wqe),e(Hf,Aqe),e(F,yqe),e(F,Uf),e(Uf,_Y),e(_Y,Lqe),e(Uf,xqe),e(Uf,y9),e(y9,kqe),e(Uf,Sqe),e(F,Rqe),e(F,Jf),e(Jf,uY),e(uY,Bqe),e(Jf,Pqe),e(Jf,L9),e(L9,$qe),e(Jf,Iqe),e(F,qqe),e(F,Yf),e(Yf,bY),e(bY,Nqe),e(Yf,jqe),e(Yf,x9),e(x9,Dqe),e(Yf,Gqe),e(F,Oqe),e(F,Kf),e(Kf,FY),e(FY,Vqe),e(Kf,Xqe),e(Kf,k9),e(k9,zqe),e(Kf,Qqe),e(F,Wqe),e(F,Zf),e(Zf,vY),e(vY,Hqe),e(Zf,Uqe),e(Zf,S9),e(S9,Jqe),e(Zf,Yqe),e(F,Kqe),e(F,em),e(em,TY),e(TY,Zqe),e(em,eNe),e(em,R9),e(R9,oNe),e(em,rNe),e(F,tNe),e(F,om),e(om,MY),e(MY,aNe),e(om,nNe),e(om,B9),e(B9,sNe),e(om,lNe),e(F,iNe),e(F,rm),e(rm,EY),e(EY,dNe),e(rm,cNe),e(rm,P9),e(P9,fNe),e(rm,mNe),e(F,gNe),e(F,tm),e(tm,CY),e(CY,hNe),e(tm,pNe),e(tm,$9),e($9,_Ne),e(tm,uNe),e(F,bNe),e(F,am),e(am,wY),e(wY,FNe),e(am,vNe),e(am,I9),e(I9,TNe),e(am,MNe),e(F,ENe),e(F,nm),e(nm,AY),e(AY,CNe),e(nm,wNe),e(nm,q9),e(q9,ANe),e(nm,yNe),e(F,LNe),e(F,sm),e(sm,yY),e(yY,xNe),e(sm,kNe),e(sm,N9),e(N9,SNe),e(sm,RNe),e(F,BNe),e(F,lm),e(lm,LY),e(LY,PNe),e(lm,$Ne),e(lm,j9),e(j9,INe),e(lm,qNe),e(F,NNe),e(F,im),e(im,xY),e(xY,jNe),e(im,DNe),e(im,D9),e(D9,GNe),e(im,ONe),e(F,VNe),e(F,dm),e(dm,kY),e(kY,XNe),e(dm,zNe),e(dm,G9),e(G9,QNe),e(dm,WNe),e(F,HNe),e(F,cm),e(cm,SY),e(SY,UNe),e(cm,JNe),e(cm,O9),e(O9,YNe),e(cm,KNe),e(F,ZNe),e(F,fm),e(fm,RY),e(RY,eje),e(fm,oje),e(fm,V9),e(V9,rje),e(fm,tje),e(F,aje),e(F,mm),e(mm,BY),e(BY,nje),e(mm,sje),e(mm,X9),e(X9,lje),e(mm,ije),e(F,dje),e(F,gm),e(gm,PY),e(PY,cje),e(gm,fje),e(gm,z9),e(z9,mje),e(gm,gje),e(F,hje),e(F,hm),e(hm,$Y),e($Y,pje),e(hm,_je),e(hm,Q9),e(Q9,uje),e(hm,bje),e(F,Fje),e(F,pm),e(pm,IY),e(IY,vje),e(pm,Tje),e(pm,W9),e(W9,Mje),e(pm,Eje),e(F,Cje),e(F,_m),e(_m,qY),e(qY,wje),e(_m,Aje),e(_m,H9),e(H9,yje),e(_m,Lje),e(F,xje),e(F,um),e(um,NY),e(NY,kje),e(um,Sje),e(um,U9),e(U9,Rje),e(um,Bje),e(F,Pje),e(F,bm),e(bm,jY),e(jY,$je),e(bm,Ije),e(bm,J9),e(J9,qje),e(bm,Nje),e(F,jje),e(F,Fm),e(Fm,DY),e(DY,Dje),e(Fm,Gje),e(Fm,Y9),e(Y9,Oje),e(Fm,Vje),e(F,Xje),e(F,vm),e(vm,GY),e(GY,zje),e(vm,Qje),e(vm,K9),e(K9,Wje),e(vm,Hje),e(F,Uje),e(F,Tm),e(Tm,OY),e(OY,Jje),e(Tm,Yje),e(Tm,Z9),e(Z9,Kje),e(Tm,Zje),e(F,eDe),e(F,Mm),e(Mm,VY),e(VY,oDe),e(Mm,rDe),e(Mm,ex),e(ex,tDe),e(Mm,aDe),e(F,nDe),e(F,Em),e(Em,XY),e(XY,sDe),e(Em,lDe),e(Em,ox),e(ox,iDe),e(Em,dDe),e(F,cDe),e(F,Cm),e(Cm,zY),e(zY,fDe),e(Cm,mDe),e(Cm,rx),e(rx,gDe),e(Cm,hDe),e(F,pDe),e(F,wm),e(wm,QY),e(QY,_De),e(wm,uDe),e(wm,tx),e(tx,bDe),e(wm,FDe),e(F,vDe),e(F,Am),e(Am,WY),e(WY,TDe),e(Am,MDe),e(Am,ax),e(ax,EDe),e(Am,CDe),e(F,wDe),e(F,ym),e(ym,HY),e(HY,ADe),e(ym,yDe),e(ym,nx),e(nx,LDe),e(ym,xDe),e(F,kDe),e(F,Lm),e(Lm,UY),e(UY,SDe),e(Lm,RDe),e(Lm,sx),e(sx,BDe),e(Lm,PDe),e(F,$De),e(F,xm),e(xm,JY),e(JY,IDe),e(xm,qDe),e(xm,lx),e(lx,NDe),e(xm,jDe),e(F,DDe),e(F,km),e(km,YY),e(YY,GDe),e(km,ODe),e(km,ix),e(ix,VDe),e(km,XDe),e(F,zDe),e(F,Sm),e(Sm,KY),e(KY,QDe),e(Sm,WDe),e(Sm,dx),e(dx,HDe),e(Sm,UDe),e(F,JDe),e(F,Rm),e(Rm,ZY),e(ZY,YDe),e(Rm,KDe),e(Rm,cx),e(cx,ZDe),e(Rm,eGe),e(F,oGe),e(F,Bm),e(Bm,eK),e(eK,rGe),e(Bm,tGe),e(Bm,fx),e(fx,aGe),e(Bm,nGe),e(F,sGe),e(F,Pm),e(Pm,oK),e(oK,lGe),e(Pm,iGe),e(Pm,mx),e(mx,dGe),e(Pm,cGe),e(F,fGe),e(F,$m),e($m,rK),e(rK,mGe),e($m,gGe),e($m,gx),e(gx,hGe),e($m,pGe),e(F,_Ge),e(F,Im),e(Im,tK),e(tK,uGe),e(Im,bGe),e(Im,hx),e(hx,FGe),e(Im,vGe),e(F,TGe),e(F,qm),e(qm,aK),e(aK,MGe),e(qm,EGe),e(qm,px),e(px,CGe),e(qm,wGe),e(F,AGe),e(F,Nm),e(Nm,nK),e(nK,yGe),e(Nm,LGe),e(Nm,_x),e(_x,xGe),e(Nm,kGe),e(F,SGe),e(F,jm),e(jm,sK),e(sK,RGe),e(jm,BGe),e(jm,ux),e(ux,PGe),e(jm,$Ge),e(F,IGe),e(F,Dm),e(Dm,lK),e(lK,qGe),e(Dm,NGe),e(Dm,bx),e(bx,jGe),e(Dm,DGe),e(F,GGe),e(F,Gm),e(Gm,iK),e(iK,OGe),e(Gm,VGe),e(Gm,Fx),e(Fx,XGe),e(Gm,zGe),e(F,QGe),e(F,Om),e(Om,dK),e(dK,WGe),e(Om,HGe),e(Om,vx),e(vx,UGe),e(Om,JGe),e(F,YGe),e(F,Vm),e(Vm,cK),e(cK,KGe),e(Vm,ZGe),e(Vm,Tx),e(Tx,eOe),e(Vm,oOe),e(F,rOe),e(F,Xm),e(Xm,fK),e(fK,tOe),e(Xm,aOe),e(Xm,Mx),e(Mx,nOe),e(Xm,sOe),e(F,lOe),e(F,zm),e(zm,mK),e(mK,iOe),e(zm,dOe),e(zm,Ex),e(Ex,cOe),e(zm,fOe),e(F,mOe),e(F,Qm),e(Qm,gK),e(gK,gOe),e(Qm,hOe),e(Qm,Cx),e(Cx,pOe),e(Qm,_Oe),e(F,uOe),e(F,Wm),e(Wm,hK),e(hK,bOe),e(Wm,FOe),e(Wm,wx),e(wx,vOe),e(Wm,TOe),e(F,MOe),e(F,Hm),e(Hm,pK),e(pK,EOe),e(Hm,COe),e(Hm,Ax),e(Ax,wOe),e(Hm,AOe),e(F,yOe),e(F,Um),e(Um,_K),e(_K,LOe),e(Um,xOe),e(Um,yx),e(yx,kOe),e(Um,SOe),e(F,ROe),e(F,Jm),e(Jm,uK),e(uK,BOe),e(Jm,POe),e(Jm,Lx),e(Lx,$Oe),e(Jm,IOe),e(F,qOe),e(F,Ym),e(Ym,bK),e(bK,NOe),e(Ym,jOe),e(Ym,xx),e(xx,DOe),e(Ym,GOe),e(F,OOe),e(F,Km),e(Km,FK),e(FK,VOe),e(Km,XOe),e(Km,kx),e(kx,zOe),e(Km,QOe),e(F,WOe),e(F,Zm),e(Zm,vK),e(vK,HOe),e(Zm,UOe),e(Zm,Sx),e(Sx,JOe),e(Zm,YOe),e(F,KOe),e(F,eg),e(eg,TK),e(TK,ZOe),e(eg,eVe),e(eg,Rx),e(Rx,oVe),e(eg,rVe),e(F,tVe),e(F,og),e(og,MK),e(MK,aVe),e(og,nVe),e(og,Bx),e(Bx,sVe),e(og,lVe),e(F,iVe),e(F,rg),e(rg,EK),e(EK,dVe),e(rg,cVe),e(rg,Px),e(Px,fVe),e(rg,mVe),e(F,gVe),e(F,tg),e(tg,CK),e(CK,hVe),e(tg,pVe),e(tg,$x),e($x,_Ve),e(tg,uVe),e(F,bVe),e(F,ag),e(ag,wK),e(wK,FVe),e(ag,vVe),e(ag,Ix),e(Ix,TVe),e(ag,MVe),e(F,EVe),e(F,ng),e(ng,AK),e(AK,CVe),e(ng,wVe),e(ng,qx),e(qx,AVe),e(ng,yVe),e(F,LVe),e(F,sg),e(sg,yK),e(yK,xVe),e(sg,kVe),e(sg,Nx),e(Nx,SVe),e(sg,RVe),e(F,BVe),e(F,lg),e(lg,LK),e(LK,PVe),e(lg,$Ve),e(lg,jx),e(jx,IVe),e(lg,qVe),e(F,NVe),e(F,ig),e(ig,xK),e(xK,jVe),e(ig,DVe),e(ig,Dx),e(Dx,GVe),e(ig,OVe),e(F,VVe),e(F,dg),e(dg,kK),e(kK,XVe),e(dg,zVe),e(dg,Gx),e(Gx,QVe),e(dg,WVe),e(F,HVe),e(F,cg),e(cg,SK),e(SK,UVe),e(cg,JVe),e(cg,Ox),e(Ox,YVe),e(cg,KVe),e(F,ZVe),e(F,fg),e(fg,RK),e(RK,eXe),e(fg,oXe),e(fg,Vx),e(Vx,rXe),e(fg,tXe),e(F,aXe),e(F,mg),e(mg,BK),e(BK,nXe),e(mg,sXe),e(mg,Xx),e(Xx,lXe),e(mg,iXe),e(F,dXe),e(F,gg),e(gg,PK),e(PK,cXe),e(gg,fXe),e(gg,zx),e(zx,mXe),e(gg,gXe),e(F,hXe),e(F,hg),e(hg,$K),e($K,pXe),e(hg,_Xe),e(hg,Qx),e(Qx,uXe),e(hg,bXe),e(F,FXe),e(F,pg),e(pg,IK),e(IK,vXe),e(pg,TXe),e(pg,Wx),e(Wx,MXe),e(pg,EXe),e(F,CXe),e(F,_g),e(_g,qK),e(qK,wXe),e(_g,AXe),e(_g,Hx),e(Hx,yXe),e(_g,LXe),e(F,xXe),e(F,ug),e(ug,NK),e(NK,kXe),e(ug,SXe),e(ug,Ux),e(Ux,RXe),e(ug,BXe),e(F,PXe),e(F,bg),e(bg,jK),e(jK,$Xe),e(bg,IXe),e(bg,Jx),e(Jx,qXe),e(bg,NXe),e(F,jXe),e(F,Fg),e(Fg,DK),e(DK,DXe),e(Fg,GXe),e(Fg,Yx),e(Yx,OXe),e(Fg,VXe),e(F,XXe),e(F,vg),e(vg,GK),e(GK,zXe),e(vg,QXe),e(vg,Kx),e(Kx,WXe),e(vg,HXe),e(F,UXe),e(F,Tg),e(Tg,OK),e(OK,JXe),e(Tg,YXe),e(Tg,Zx),e(Zx,KXe),e(Tg,ZXe),e(F,eze),e(F,Mg),e(Mg,VK),e(VK,oze),e(Mg,rze),e(Mg,ek),e(ek,tze),e(Mg,aze),e(F,nze),e(F,Eg),e(Eg,XK),e(XK,sze),e(Eg,lze),e(Eg,ok),e(ok,ize),e(Eg,dze),e(F,cze),e(F,Cg),e(Cg,zK),e(zK,fze),e(Cg,mze),e(Cg,rk),e(rk,gze),e(Cg,hze),e(F,pze),e(F,wg),e(wg,QK),e(QK,_ze),e(wg,uze),e(wg,tk),e(tk,bze),e(wg,Fze),e(F,vze),e(F,Ag),e(Ag,WK),e(WK,Tze),e(Ag,Mze),e(Ag,ak),e(ak,Eze),e(Ag,Cze),e(F,wze),e(F,yg),e(yg,HK),e(HK,Aze),e(yg,yze),e(yg,nk),e(nk,Lze),e(yg,xze),e(F,kze),e(F,Lg),e(Lg,UK),e(UK,Sze),e(Lg,Rze),e(Lg,sk),e(sk,Bze),e(Lg,Pze),e(F,$ze),e(F,xg),e(xg,JK),e(JK,Ize),e(xg,qze),e(xg,lk),e(lk,Nze),e(xg,jze),e(F,Dze),e(F,kg),e(kg,YK),e(YK,Gze),e(kg,Oze),e(kg,ik),e(ik,Vze),e(kg,Xze),e(F,zze),e(F,Sg),e(Sg,KK),e(KK,Qze),e(Sg,Wze),e(Sg,dk),e(dk,Hze),e(Sg,Uze),e(F,Jze),e(F,Rg),e(Rg,ZK),e(ZK,Yze),e(Rg,Kze),e(Rg,ck),e(ck,Zze),e(Rg,eQe),e(F,oQe),e(F,Bg),e(Bg,eZ),e(eZ,rQe),e(Bg,tQe),e(Bg,fk),e(fk,aQe),e(Bg,nQe),e(F,sQe),e(F,Pg),e(Pg,oZ),e(oZ,lQe),e(Pg,iQe),e(Pg,mk),e(mk,dQe),e(Pg,cQe),e(F,fQe),e(F,$g),e($g,rZ),e(rZ,mQe),e($g,gQe),e($g,gk),e(gk,hQe),e($g,pQe),e(F,_Qe),e(F,Ig),e(Ig,tZ),e(tZ,uQe),e(Ig,bQe),e(Ig,hk),e(hk,FQe),e(Ig,vQe),e(mo,TQe),e(mo,aZ),e(aZ,MQe),e(mo,EQe),g(P3,mo,null),e(Qo,CQe),e(Qo,qg),g($3,qg,null),e(qg,wQe),e(qg,nZ),e(nZ,AQe),b(c,MRe,u),b(c,Qi,u),e(Qi,Ng),e(Ng,sZ),g(I3,sZ,null),e(Qi,yQe),e(Qi,lZ),e(lZ,LQe),b(c,ERe,u),b(c,Wo,u),g(q3,Wo,null),e(Wo,xQe),e(Wo,N3),e(N3,kQe),e(N3,pk),e(pk,SQe),e(N3,RQe),e(Wo,BQe),e(Wo,j3),e(j3,PQe),e(j3,iZ),e(iZ,$Qe),e(j3,IQe),e(Wo,qQe),e(Wo,go),g(D3,go,null),e(go,NQe),e(go,dZ),e(dZ,jQe),e(go,DQe),e(go,Oa),e(Oa,GQe),e(Oa,cZ),e(cZ,OQe),e(Oa,VQe),e(Oa,fZ),e(fZ,XQe),e(Oa,zQe),e(Oa,mZ),e(mZ,QQe),e(Oa,WQe),e(go,HQe),e(go,E),e(E,Qn),e(Qn,gZ),e(gZ,UQe),e(Qn,JQe),e(Qn,_k),e(_k,YQe),e(Qn,KQe),e(Qn,uk),e(uk,ZQe),e(Qn,eWe),e(E,oWe),e(E,Wn),e(Wn,hZ),e(hZ,rWe),e(Wn,tWe),e(Wn,bk),e(bk,aWe),e(Wn,nWe),e(Wn,Fk),e(Fk,sWe),e(Wn,lWe),e(E,iWe),e(E,Hn),e(Hn,pZ),e(pZ,dWe),e(Hn,cWe),e(Hn,vk),e(vk,fWe),e(Hn,mWe),e(Hn,Tk),e(Tk,gWe),e(Hn,hWe),e(E,pWe),e(E,jg),e(jg,_Z),e(_Z,_We),e(jg,uWe),e(jg,Mk),e(Mk,bWe),e(jg,FWe),e(E,vWe),e(E,Un),e(Un,uZ),e(uZ,TWe),e(Un,MWe),e(Un,Ek),e(Ek,EWe),e(Un,CWe),e(Un,Ck),e(Ck,wWe),e(Un,AWe),e(E,yWe),e(E,Dg),e(Dg,bZ),e(bZ,LWe),e(Dg,xWe),e(Dg,wk),e(wk,kWe),e(Dg,SWe),e(E,RWe),e(E,Gg),e(Gg,FZ),e(FZ,BWe),e(Gg,PWe),e(Gg,Ak),e(Ak,$We),e(Gg,IWe),e(E,qWe),e(E,Og),e(Og,vZ),e(vZ,NWe),e(Og,jWe),e(Og,yk),e(yk,DWe),e(Og,GWe),e(E,OWe),e(E,Jn),e(Jn,TZ),e(TZ,VWe),e(Jn,XWe),e(Jn,Lk),e(Lk,zWe),e(Jn,QWe),e(Jn,xk),e(xk,WWe),e(Jn,HWe),e(E,UWe),e(E,Yn),e(Yn,MZ),e(MZ,JWe),e(Yn,YWe),e(Yn,kk),e(kk,KWe),e(Yn,ZWe),e(Yn,Sk),e(Sk,eHe),e(Yn,oHe),e(E,rHe),e(E,Kn),e(Kn,EZ),e(EZ,tHe),e(Kn,aHe),e(Kn,Rk),e(Rk,nHe),e(Kn,sHe),e(Kn,Bk),e(Bk,lHe),e(Kn,iHe),e(E,dHe),e(E,Vg),e(Vg,CZ),e(CZ,cHe),e(Vg,fHe),e(Vg,Pk),e(Pk,mHe),e(Vg,gHe),e(E,hHe),e(E,Xg),e(Xg,wZ),e(wZ,pHe),e(Xg,_He),e(Xg,$k),e($k,uHe),e(Xg,bHe),e(E,FHe),e(E,Zn),e(Zn,AZ),e(AZ,vHe),e(Zn,THe),e(Zn,Ik),e(Ik,MHe),e(Zn,EHe),e(Zn,qk),e(qk,CHe),e(Zn,wHe),e(E,AHe),e(E,zg),e(zg,yZ),e(yZ,yHe),e(zg,LHe),e(zg,Nk),e(Nk,xHe),e(zg,kHe),e(E,SHe),e(E,es),e(es,LZ),e(LZ,RHe),e(es,BHe),e(es,jk),e(jk,PHe),e(es,$He),e(es,Dk),e(Dk,IHe),e(es,qHe),e(E,NHe),e(E,os),e(os,xZ),e(xZ,jHe),e(os,DHe),e(os,Gk),e(Gk,GHe),e(os,OHe),e(os,Ok),e(Ok,VHe),e(os,XHe),e(E,zHe),e(E,rs),e(rs,kZ),e(kZ,QHe),e(rs,WHe),e(rs,Vk),e(Vk,HHe),e(rs,UHe),e(rs,SZ),e(SZ,JHe),e(rs,YHe),e(E,KHe),e(E,Qg),e(Qg,RZ),e(RZ,ZHe),e(Qg,eUe),e(Qg,Xk),e(Xk,oUe),e(Qg,rUe),e(E,tUe),e(E,ts),e(ts,BZ),e(BZ,aUe),e(ts,nUe),e(ts,zk),e(zk,sUe),e(ts,lUe),e(ts,Qk),e(Qk,iUe),e(ts,dUe),e(E,cUe),e(E,Wg),e(Wg,PZ),e(PZ,fUe),e(Wg,mUe),e(Wg,Wk),e(Wk,gUe),e(Wg,hUe),e(E,pUe),e(E,as),e(as,$Z),e($Z,_Ue),e(as,uUe),e(as,Hk),e(Hk,bUe),e(as,FUe),e(as,Uk),e(Uk,vUe),e(as,TUe),e(E,MUe),e(E,ns),e(ns,IZ),e(IZ,EUe),e(ns,CUe),e(ns,Jk),e(Jk,wUe),e(ns,AUe),e(ns,Yk),e(Yk,yUe),e(ns,LUe),e(E,xUe),e(E,ss),e(ss,qZ),e(qZ,kUe),e(ss,SUe),e(ss,Kk),e(Kk,RUe),e(ss,BUe),e(ss,Zk),e(Zk,PUe),e(ss,$Ue),e(E,IUe),e(E,Hg),e(Hg,NZ),e(NZ,qUe),e(Hg,NUe),e(Hg,eS),e(eS,jUe),e(Hg,DUe),e(E,GUe),e(E,ls),e(ls,jZ),e(jZ,OUe),e(ls,VUe),e(ls,oS),e(oS,XUe),e(ls,zUe),e(ls,rS),e(rS,QUe),e(ls,WUe),e(E,HUe),e(E,Ug),e(Ug,DZ),e(DZ,UUe),e(Ug,JUe),e(Ug,tS),e(tS,YUe),e(Ug,KUe),e(E,ZUe),e(E,is),e(is,GZ),e(GZ,eJe),e(is,oJe),e(is,aS),e(aS,rJe),e(is,tJe),e(is,nS),e(nS,aJe),e(is,nJe),e(E,sJe),e(E,ds),e(ds,OZ),e(OZ,lJe),e(ds,iJe),e(ds,sS),e(sS,dJe),e(ds,cJe),e(ds,lS),e(lS,fJe),e(ds,mJe),e(E,gJe),e(E,cs),e(cs,VZ),e(VZ,hJe),e(cs,pJe),e(cs,iS),e(iS,_Je),e(cs,uJe),e(cs,dS),e(dS,bJe),e(cs,FJe),e(E,vJe),e(E,fs),e(fs,XZ),e(XZ,TJe),e(fs,MJe),e(fs,cS),e(cS,EJe),e(fs,CJe),e(fs,fS),e(fS,wJe),e(fs,AJe),e(E,yJe),e(E,Jg),e(Jg,zZ),e(zZ,LJe),e(Jg,xJe),e(Jg,mS),e(mS,kJe),e(Jg,SJe),e(E,RJe),e(E,ms),e(ms,QZ),e(QZ,BJe),e(ms,PJe),e(ms,gS),e(gS,$Je),e(ms,IJe),e(ms,hS),e(hS,qJe),e(ms,NJe),e(E,jJe),e(E,gs),e(gs,WZ),e(WZ,DJe),e(gs,GJe),e(gs,pS),e(pS,OJe),e(gs,VJe),e(gs,_S),e(_S,XJe),e(gs,zJe),e(E,QJe),e(E,hs),e(hs,HZ),e(HZ,WJe),e(hs,HJe),e(hs,uS),e(uS,UJe),e(hs,JJe),e(hs,bS),e(bS,YJe),e(hs,KJe),e(E,ZJe),e(E,ps),e(ps,UZ),e(UZ,eYe),e(ps,oYe),e(ps,FS),e(FS,rYe),e(ps,tYe),e(ps,vS),e(vS,aYe),e(ps,nYe),e(E,sYe),e(E,_s),e(_s,JZ),e(JZ,lYe),e(_s,iYe),e(_s,TS),e(TS,dYe),e(_s,cYe),e(_s,MS),e(MS,fYe),e(_s,mYe),e(E,gYe),e(E,us),e(us,YZ),e(YZ,hYe),e(us,pYe),e(us,ES),e(ES,_Ye),e(us,uYe),e(us,CS),e(CS,bYe),e(us,FYe),e(E,vYe),e(E,Yg),e(Yg,KZ),e(KZ,TYe),e(Yg,MYe),e(Yg,wS),e(wS,EYe),e(Yg,CYe),e(E,wYe),e(E,bs),e(bs,ZZ),e(ZZ,AYe),e(bs,yYe),e(bs,AS),e(AS,LYe),e(bs,xYe),e(bs,yS),e(yS,kYe),e(bs,SYe),e(E,RYe),e(E,Kg),e(Kg,eee),e(eee,BYe),e(Kg,PYe),e(Kg,LS),e(LS,$Ye),e(Kg,IYe),e(E,qYe),e(E,Zg),e(Zg,oee),e(oee,NYe),e(Zg,jYe),e(Zg,xS),e(xS,DYe),e(Zg,GYe),e(E,OYe),e(E,Fs),e(Fs,ree),e(ree,VYe),e(Fs,XYe),e(Fs,kS),e(kS,zYe),e(Fs,QYe),e(Fs,SS),e(SS,WYe),e(Fs,HYe),e(E,UYe),e(E,vs),e(vs,tee),e(tee,JYe),e(vs,YYe),e(vs,RS),e(RS,KYe),e(vs,ZYe),e(vs,BS),e(BS,eKe),e(vs,oKe),e(E,rKe),e(E,eh),e(eh,aee),e(aee,tKe),e(eh,aKe),e(eh,PS),e(PS,nKe),e(eh,sKe),e(E,lKe),e(E,Ts),e(Ts,nee),e(nee,iKe),e(Ts,dKe),e(Ts,$S),e($S,cKe),e(Ts,fKe),e(Ts,IS),e(IS,mKe),e(Ts,gKe),e(E,hKe),e(E,Ms),e(Ms,see),e(see,pKe),e(Ms,_Ke),e(Ms,qS),e(qS,uKe),e(Ms,bKe),e(Ms,NS),e(NS,FKe),e(Ms,vKe),e(E,TKe),e(E,Es),e(Es,lee),e(lee,MKe),e(Es,EKe),e(Es,jS),e(jS,CKe),e(Es,wKe),e(Es,DS),e(DS,AKe),e(Es,yKe),e(E,LKe),e(E,Cs),e(Cs,iee),e(iee,xKe),e(Cs,kKe),e(Cs,GS),e(GS,SKe),e(Cs,RKe),e(Cs,OS),e(OS,BKe),e(Cs,PKe),e(E,$Ke),e(E,ws),e(ws,dee),e(dee,IKe),e(ws,qKe),e(ws,VS),e(VS,NKe),e(ws,jKe),e(ws,XS),e(XS,DKe),e(ws,GKe),e(E,OKe),e(E,oh),e(oh,cee),e(cee,VKe),e(oh,XKe),e(oh,zS),e(zS,zKe),e(oh,QKe),e(E,WKe),e(E,rh),e(rh,fee),e(fee,HKe),e(rh,UKe),e(rh,QS),e(QS,JKe),e(rh,YKe),e(E,KKe),e(E,th),e(th,mee),e(mee,ZKe),e(th,eZe),e(th,WS),e(WS,oZe),e(th,rZe),e(E,tZe),e(E,ah),e(ah,gee),e(gee,aZe),e(ah,nZe),e(ah,HS),e(HS,sZe),e(ah,lZe),e(E,iZe),e(E,As),e(As,hee),e(hee,dZe),e(As,cZe),e(As,US),e(US,fZe),e(As,mZe),e(As,JS),e(JS,gZe),e(As,hZe),e(E,pZe),e(E,nh),e(nh,pee),e(pee,_Ze),e(nh,uZe),e(nh,YS),e(YS,bZe),e(nh,FZe),e(E,vZe),e(E,ys),e(ys,_ee),e(_ee,TZe),e(ys,MZe),e(ys,KS),e(KS,EZe),e(ys,CZe),e(ys,ZS),e(ZS,wZe),e(ys,AZe),e(E,yZe),e(E,Ls),e(Ls,uee),e(uee,LZe),e(Ls,xZe),e(Ls,eR),e(eR,kZe),e(Ls,SZe),e(Ls,oR),e(oR,RZe),e(Ls,BZe),e(E,PZe),e(E,xs),e(xs,bee),e(bee,$Ze),e(xs,IZe),e(xs,rR),e(rR,qZe),e(xs,NZe),e(xs,tR),e(tR,jZe),e(xs,DZe),e(E,GZe),e(E,ks),e(ks,Fee),e(Fee,OZe),e(ks,VZe),e(ks,aR),e(aR,XZe),e(ks,zZe),e(ks,nR),e(nR,QZe),e(ks,WZe),e(E,HZe),e(E,Ss),e(Ss,vee),e(vee,UZe),e(Ss,JZe),e(Ss,sR),e(sR,YZe),e(Ss,KZe),e(Ss,lR),e(lR,ZZe),e(Ss,eeo),e(E,oeo),e(E,Rs),e(Rs,Tee),e(Tee,reo),e(Rs,teo),e(Rs,iR),e(iR,aeo),e(Rs,neo),e(Rs,dR),e(dR,seo),e(Rs,leo),e(E,ieo),e(E,sh),e(sh,Mee),e(Mee,deo),e(sh,ceo),e(sh,cR),e(cR,feo),e(sh,meo),e(E,geo),e(E,lh),e(lh,Eee),e(Eee,heo),e(lh,peo),e(lh,fR),e(fR,_eo),e(lh,ueo),e(E,beo),e(E,Bs),e(Bs,Cee),e(Cee,Feo),e(Bs,veo),e(Bs,mR),e(mR,Teo),e(Bs,Meo),e(Bs,gR),e(gR,Eeo),e(Bs,Ceo),e(E,weo),e(E,Ps),e(Ps,wee),e(wee,Aeo),e(Ps,yeo),e(Ps,hR),e(hR,Leo),e(Ps,xeo),e(Ps,pR),e(pR,keo),e(Ps,Seo),e(E,Reo),e(E,$s),e($s,Aee),e(Aee,Beo),e($s,Peo),e($s,_R),e(_R,$eo),e($s,Ieo),e($s,uR),e(uR,qeo),e($s,Neo),e(E,jeo),e(E,ih),e(ih,yee),e(yee,Deo),e(ih,Geo),e(ih,bR),e(bR,Oeo),e(ih,Veo),e(E,Xeo),e(E,dh),e(dh,Lee),e(Lee,zeo),e(dh,Qeo),e(dh,FR),e(FR,Weo),e(dh,Heo),e(E,Ueo),e(E,ch),e(ch,xee),e(xee,Jeo),e(ch,Yeo),e(ch,vR),e(vR,Keo),e(ch,Zeo),e(E,eoo),e(E,fh),e(fh,kee),e(kee,ooo),e(fh,roo),e(fh,TR),e(TR,too),e(fh,aoo),e(E,noo),e(E,mh),e(mh,See),e(See,soo),e(mh,loo),e(mh,MR),e(MR,ioo),e(mh,doo),e(E,coo),e(E,Is),e(Is,Ree),e(Ree,foo),e(Is,moo),e(Is,ER),e(ER,goo),e(Is,hoo),e(Is,CR),e(CR,poo),e(Is,_oo),e(E,uoo),e(E,gh),e(gh,Bee),e(Bee,boo),e(gh,Foo),e(gh,wR),e(wR,voo),e(gh,Too),e(E,Moo),e(E,hh),e(hh,Pee),e(Pee,Eoo),e(hh,Coo),e(hh,AR),e(AR,woo),e(hh,Aoo),e(E,yoo),e(E,qs),e(qs,$ee),e($ee,Loo),e(qs,xoo),e(qs,yR),e(yR,koo),e(qs,Soo),e(qs,LR),e(LR,Roo),e(qs,Boo),e(E,Poo),e(E,Ns),e(Ns,Iee),e(Iee,$oo),e(Ns,Ioo),e(Ns,xR),e(xR,qoo),e(Ns,Noo),e(Ns,kR),e(kR,joo),e(Ns,Doo),e(go,Goo),e(go,qee),e(qee,Ooo),e(go,Voo),g(G3,go,null),e(Wo,Xoo),e(Wo,ph),g(O3,ph,null),e(ph,zoo),e(ph,Nee),e(Nee,Qoo),b(c,CRe,u),b(c,Wi,u),e(Wi,_h),e(_h,jee),g(V3,jee,null),e(Wi,Woo),e(Wi,Dee),e(Dee,Hoo),b(c,wRe,u),b(c,Ho,u),g(X3,Ho,null),e(Ho,Uoo),e(Ho,z3),e(z3,Joo),e(z3,SR),e(SR,Yoo),e(z3,Koo),e(Ho,Zoo),e(Ho,Q3),e(Q3,ero),e(Q3,Gee),e(Gee,oro),e(Q3,rro),e(Ho,tro),e(Ho,$e),g(W3,$e,null),e($e,aro),e($e,Oee),e(Oee,nro),e($e,sro),e($e,Va),e(Va,lro),e(Va,Vee),e(Vee,iro),e(Va,dro),e(Va,Xee),e(Xee,cro),e(Va,fro),e(Va,zee),e(zee,mro),e(Va,gro),e($e,hro),e($e,ee),e(ee,uh),e(uh,Qee),e(Qee,pro),e(uh,_ro),e(uh,RR),e(RR,uro),e(uh,bro),e(ee,Fro),e(ee,bh),e(bh,Wee),e(Wee,vro),e(bh,Tro),e(bh,BR),e(BR,Mro),e(bh,Ero),e(ee,Cro),e(ee,Fh),e(Fh,Hee),e(Hee,wro),e(Fh,Aro),e(Fh,PR),e(PR,yro),e(Fh,Lro),e(ee,xro),e(ee,vh),e(vh,Uee),e(Uee,kro),e(vh,Sro),e(vh,$R),e($R,Rro),e(vh,Bro),e(ee,Pro),e(ee,Th),e(Th,Jee),e(Jee,$ro),e(Th,Iro),e(Th,IR),e(IR,qro),e(Th,Nro),e(ee,jro),e(ee,Mh),e(Mh,Yee),e(Yee,Dro),e(Mh,Gro),e(Mh,qR),e(qR,Oro),e(Mh,Vro),e(ee,Xro),e(ee,Eh),e(Eh,Kee),e(Kee,zro),e(Eh,Qro),e(Eh,NR),e(NR,Wro),e(Eh,Hro),e(ee,Uro),e(ee,Ch),e(Ch,Zee),e(Zee,Jro),e(Ch,Yro),e(Ch,jR),e(jR,Kro),e(Ch,Zro),e(ee,eto),e(ee,wh),e(wh,eoe),e(eoe,oto),e(wh,rto),e(wh,DR),e(DR,tto),e(wh,ato),e(ee,nto),e(ee,Ah),e(Ah,ooe),e(ooe,sto),e(Ah,lto),e(Ah,GR),e(GR,ito),e(Ah,dto),e(ee,cto),e(ee,yh),e(yh,roe),e(roe,fto),e(yh,mto),e(yh,OR),e(OR,gto),e(yh,hto),e(ee,pto),e(ee,Lh),e(Lh,toe),e(toe,_to),e(Lh,uto),e(Lh,VR),e(VR,bto),e(Lh,Fto),e(ee,vto),e(ee,xh),e(xh,aoe),e(aoe,Tto),e(xh,Mto),e(xh,XR),e(XR,Eto),e(xh,Cto),e(ee,wto),e(ee,kh),e(kh,noe),e(noe,Ato),e(kh,yto),e(kh,zR),e(zR,Lto),e(kh,xto),e(ee,kto),e(ee,Sh),e(Sh,soe),e(soe,Sto),e(Sh,Rto),e(Sh,QR),e(QR,Bto),e(Sh,Pto),e(ee,$to),e(ee,Rh),e(Rh,loe),e(loe,Ito),e(Rh,qto),e(Rh,WR),e(WR,Nto),e(Rh,jto),e(ee,Dto),e(ee,Bh),e(Bh,ioe),e(ioe,Gto),e(Bh,Oto),e(Bh,HR),e(HR,Vto),e(Bh,Xto),e(ee,zto),e(ee,Ph),e(Ph,doe),e(doe,Qto),e(Ph,Wto),e(Ph,UR),e(UR,Hto),e(Ph,Uto),e(ee,Jto),e(ee,$h),e($h,coe),e(coe,Yto),e($h,Kto),e($h,JR),e(JR,Zto),e($h,eao),e($e,oao),g(Ih,$e,null),e($e,rao),e($e,foe),e(foe,tao),e($e,aao),g(H3,$e,null),e(Ho,nao),e(Ho,qh),g(U3,qh,null),e(qh,sao),e(qh,moe),e(moe,lao),b(c,ARe,u),b(c,Hi,u),e(Hi,Nh),e(Nh,goe),g(J3,goe,null),e(Hi,iao),e(Hi,hoe),e(hoe,dao),b(c,yRe,u),b(c,Uo,u),g(Y3,Uo,null),e(Uo,cao),e(Uo,K3),e(K3,fao),e(K3,YR),e(YR,mao),e(K3,gao),e(Uo,hao),e(Uo,Z3),e(Z3,pao),e(Z3,poe),e(poe,_ao),e(Z3,uao),e(Uo,bao),e(Uo,Ie),g(ew,Ie,null),e(Ie,Fao),e(Ie,_oe),e(_oe,vao),e(Ie,Tao),e(Ie,Ui),e(Ui,Mao),e(Ui,uoe),e(uoe,Eao),e(Ui,Cao),e(Ui,boe),e(boe,wao),e(Ui,Aao),e(Ie,yao),e(Ie,ke),e(ke,jh),e(jh,Foe),e(Foe,Lao),e(jh,xao),e(jh,KR),e(KR,kao),e(jh,Sao),e(ke,Rao),e(ke,Dh),e(Dh,voe),e(voe,Bao),e(Dh,Pao),e(Dh,ZR),e(ZR,$ao),e(Dh,Iao),e(ke,qao),e(ke,Gh),e(Gh,Toe),e(Toe,Nao),e(Gh,jao),e(Gh,eB),e(eB,Dao),e(Gh,Gao),e(ke,Oao),e(ke,Oh),e(Oh,Moe),e(Moe,Vao),e(Oh,Xao),e(Oh,oB),e(oB,zao),e(Oh,Qao),e(ke,Wao),e(ke,Vh),e(Vh,Eoe),e(Eoe,Hao),e(Vh,Uao),e(Vh,rB),e(rB,Jao),e(Vh,Yao),e(ke,Kao),e(ke,Xh),e(Xh,Coe),e(Coe,Zao),e(Xh,eno),e(Xh,tB),e(tB,ono),e(Xh,rno),e(ke,tno),e(ke,zh),e(zh,woe),e(woe,ano),e(zh,nno),e(zh,aB),e(aB,sno),e(zh,lno),e(ke,ino),e(ke,Qh),e(Qh,Aoe),e(Aoe,dno),e(Qh,cno),e(Qh,nB),e(nB,fno),e(Qh,mno),e(Ie,gno),g(Wh,Ie,null),e(Ie,hno),e(Ie,yoe),e(yoe,pno),e(Ie,_no),g(ow,Ie,null),e(Uo,uno),e(Uo,Hh),g(rw,Hh,null),e(Hh,bno),e(Hh,Loe),e(Loe,Fno),b(c,LRe,u),b(c,Ji,u),e(Ji,Uh),e(Uh,xoe),g(tw,xoe,null),e(Ji,vno),e(Ji,koe),e(koe,Tno),b(c,xRe,u),b(c,Jo,u),g(aw,Jo,null),e(Jo,Mno),e(Jo,Yi),e(Yi,Eno),e(Yi,sB),e(sB,Cno),e(Yi,wno),e(Yi,lB),e(lB,Ano),e(Yi,yno),e(Jo,Lno),e(Jo,nw),e(nw,xno),e(nw,Soe),e(Soe,kno),e(nw,Sno),e(Jo,Rno),e(Jo,Xr),g(sw,Xr,null),e(Xr,Bno),e(Xr,Roe),e(Roe,Pno),e(Xr,$no),e(Xr,Ki),e(Ki,Ino),e(Ki,Boe),e(Boe,qno),e(Ki,Nno),e(Ki,iB),e(iB,jno),e(Ki,Dno),e(Xr,Gno),e(Xr,Poe),e(Poe,Ono),e(Xr,Vno),g(lw,Xr,null),e(Jo,Xno),e(Jo,qe),g(iw,qe,null),e(qe,zno),e(qe,$oe),e($oe,Qno),e(qe,Wno),e(qe,Xa),e(Xa,Hno),e(Xa,Ioe),e(Ioe,Uno),e(Xa,Jno),e(Xa,qoe),e(qoe,Yno),e(Xa,Kno),e(Xa,Noe),e(Noe,Zno),e(Xa,eso),e(qe,oso),e(qe,T),e(T,Jh),e(Jh,joe),e(joe,rso),e(Jh,tso),e(Jh,dB),e(dB,aso),e(Jh,nso),e(T,sso),e(T,Yh),e(Yh,Doe),e(Doe,lso),e(Yh,iso),e(Yh,cB),e(cB,dso),e(Yh,cso),e(T,fso),e(T,Kh),e(Kh,Goe),e(Goe,mso),e(Kh,gso),e(Kh,fB),e(fB,hso),e(Kh,pso),e(T,_so),e(T,Zh),e(Zh,Ooe),e(Ooe,uso),e(Zh,bso),e(Zh,mB),e(mB,Fso),e(Zh,vso),e(T,Tso),e(T,ep),e(ep,Voe),e(Voe,Mso),e(ep,Eso),e(ep,gB),e(gB,Cso),e(ep,wso),e(T,Aso),e(T,op),e(op,Xoe),e(Xoe,yso),e(op,Lso),e(op,hB),e(hB,xso),e(op,kso),e(T,Sso),e(T,rp),e(rp,zoe),e(zoe,Rso),e(rp,Bso),e(rp,pB),e(pB,Pso),e(rp,$so),e(T,Iso),e(T,tp),e(tp,Qoe),e(Qoe,qso),e(tp,Nso),e(tp,_B),e(_B,jso),e(tp,Dso),e(T,Gso),e(T,ap),e(ap,Woe),e(Woe,Oso),e(ap,Vso),e(ap,uB),e(uB,Xso),e(ap,zso),e(T,Qso),e(T,np),e(np,Hoe),e(Hoe,Wso),e(np,Hso),e(np,bB),e(bB,Uso),e(np,Jso),e(T,Yso),e(T,sp),e(sp,Uoe),e(Uoe,Kso),e(sp,Zso),e(sp,FB),e(FB,elo),e(sp,olo),e(T,rlo),e(T,lp),e(lp,Joe),e(Joe,tlo),e(lp,alo),e(lp,vB),e(vB,nlo),e(lp,slo),e(T,llo),e(T,ip),e(ip,Yoe),e(Yoe,ilo),e(ip,dlo),e(ip,TB),e(TB,clo),e(ip,flo),e(T,mlo),e(T,dp),e(dp,Koe),e(Koe,glo),e(dp,hlo),e(dp,MB),e(MB,plo),e(dp,_lo),e(T,ulo),e(T,cp),e(cp,Zoe),e(Zoe,blo),e(cp,Flo),e(cp,EB),e(EB,vlo),e(cp,Tlo),e(T,Mlo),e(T,fp),e(fp,ere),e(ere,Elo),e(fp,Clo),e(fp,CB),e(CB,wlo),e(fp,Alo),e(T,ylo),e(T,mp),e(mp,ore),e(ore,Llo),e(mp,xlo),e(mp,wB),e(wB,klo),e(mp,Slo),e(T,Rlo),e(T,gp),e(gp,rre),e(rre,Blo),e(gp,Plo),e(gp,AB),e(AB,$lo),e(gp,Ilo),e(T,qlo),e(T,hp),e(hp,tre),e(tre,Nlo),e(hp,jlo),e(hp,yB),e(yB,Dlo),e(hp,Glo),e(T,Olo),e(T,pp),e(pp,are),e(are,Vlo),e(pp,Xlo),e(pp,LB),e(LB,zlo),e(pp,Qlo),e(T,Wlo),e(T,_p),e(_p,nre),e(nre,Hlo),e(_p,Ulo),e(_p,xB),e(xB,Jlo),e(_p,Ylo),e(T,Klo),e(T,up),e(up,sre),e(sre,Zlo),e(up,eio),e(up,kB),e(kB,oio),e(up,rio),e(T,tio),e(T,bp),e(bp,lre),e(lre,aio),e(bp,nio),e(bp,SB),e(SB,sio),e(bp,lio),e(T,iio),e(T,Fp),e(Fp,ire),e(ire,dio),e(Fp,cio),e(Fp,RB),e(RB,fio),e(Fp,mio),e(T,gio),e(T,vp),e(vp,dre),e(dre,hio),e(vp,pio),e(vp,BB),e(BB,_io),e(vp,uio),e(T,bio),e(T,Tp),e(Tp,cre),e(cre,Fio),e(Tp,vio),e(Tp,PB),e(PB,Tio),e(Tp,Mio),e(T,Eio),e(T,Mp),e(Mp,fre),e(fre,Cio),e(Mp,wio),e(Mp,$B),e($B,Aio),e(Mp,yio),e(T,Lio),e(T,Ep),e(Ep,mre),e(mre,xio),e(Ep,kio),e(Ep,IB),e(IB,Sio),e(Ep,Rio),e(T,Bio),e(T,Cp),e(Cp,gre),e(gre,Pio),e(Cp,$io),e(Cp,qB),e(qB,Iio),e(Cp,qio),e(T,Nio),e(T,js),e(js,hre),e(hre,jio),e(js,Dio),e(js,NB),e(NB,Gio),e(js,Oio),e(js,jB),e(jB,Vio),e(js,Xio),e(T,zio),e(T,wp),e(wp,pre),e(pre,Qio),e(wp,Wio),e(wp,DB),e(DB,Hio),e(wp,Uio),e(T,Jio),e(T,Ap),e(Ap,_re),e(_re,Yio),e(Ap,Kio),e(Ap,GB),e(GB,Zio),e(Ap,edo),e(T,odo),e(T,yp),e(yp,ure),e(ure,rdo),e(yp,tdo),e(yp,OB),e(OB,ado),e(yp,ndo),e(T,sdo),e(T,Lp),e(Lp,bre),e(bre,ldo),e(Lp,ido),e(Lp,VB),e(VB,ddo),e(Lp,cdo),e(T,fdo),e(T,xp),e(xp,Fre),e(Fre,mdo),e(xp,gdo),e(xp,XB),e(XB,hdo),e(xp,pdo),e(T,_do),e(T,kp),e(kp,vre),e(vre,udo),e(kp,bdo),e(kp,zB),e(zB,Fdo),e(kp,vdo),e(T,Tdo),e(T,Sp),e(Sp,Tre),e(Tre,Mdo),e(Sp,Edo),e(Sp,QB),e(QB,Cdo),e(Sp,wdo),e(T,Ado),e(T,Rp),e(Rp,Mre),e(Mre,ydo),e(Rp,Ldo),e(Rp,WB),e(WB,xdo),e(Rp,kdo),e(T,Sdo),e(T,Bp),e(Bp,Ere),e(Ere,Rdo),e(Bp,Bdo),e(Bp,HB),e(HB,Pdo),e(Bp,$do),e(T,Ido),e(T,Pp),e(Pp,Cre),e(Cre,qdo),e(Pp,Ndo),e(Pp,UB),e(UB,jdo),e(Pp,Ddo),e(T,Gdo),e(T,$p),e($p,wre),e(wre,Odo),e($p,Vdo),e($p,JB),e(JB,Xdo),e($p,zdo),e(T,Qdo),e(T,Ip),e(Ip,Are),e(Are,Wdo),e(Ip,Hdo),e(Ip,YB),e(YB,Udo),e(Ip,Jdo),e(T,Ydo),e(T,qp),e(qp,yre),e(yre,Kdo),e(qp,Zdo),e(qp,KB),e(KB,eco),e(qp,oco),e(T,rco),e(T,Np),e(Np,Lre),e(Lre,tco),e(Np,aco),e(Np,ZB),e(ZB,nco),e(Np,sco),e(T,lco),e(T,jp),e(jp,xre),e(xre,ico),e(jp,dco),e(jp,eP),e(eP,cco),e(jp,fco),e(T,mco),e(T,Dp),e(Dp,kre),e(kre,gco),e(Dp,hco),e(Dp,oP),e(oP,pco),e(Dp,_co),e(T,uco),e(T,Gp),e(Gp,Sre),e(Sre,bco),e(Gp,Fco),e(Gp,rP),e(rP,vco),e(Gp,Tco),e(T,Mco),e(T,Op),e(Op,Rre),e(Rre,Eco),e(Op,Cco),e(Op,tP),e(tP,wco),e(Op,Aco),e(T,yco),e(T,Vp),e(Vp,Bre),e(Bre,Lco),e(Vp,xco),e(Vp,aP),e(aP,kco),e(Vp,Sco),e(T,Rco),e(T,Xp),e(Xp,Pre),e(Pre,Bco),e(Xp,Pco),e(Xp,nP),e(nP,$co),e(Xp,Ico),e(T,qco),e(T,zp),e(zp,$re),e($re,Nco),e(zp,jco),e(zp,sP),e(sP,Dco),e(zp,Gco),e(T,Oco),e(T,Qp),e(Qp,Ire),e(Ire,Vco),e(Qp,Xco),e(Qp,lP),e(lP,zco),e(Qp,Qco),e(T,Wco),e(T,Wp),e(Wp,qre),e(qre,Hco),e(Wp,Uco),e(Wp,iP),e(iP,Jco),e(Wp,Yco),e(T,Kco),e(T,Hp),e(Hp,Nre),e(Nre,Zco),e(Hp,efo),e(Hp,dP),e(dP,ofo),e(Hp,rfo),e(T,tfo),e(T,Up),e(Up,jre),e(jre,afo),e(Up,nfo),e(Up,cP),e(cP,sfo),e(Up,lfo),e(T,ifo),e(T,Jp),e(Jp,Dre),e(Dre,dfo),e(Jp,cfo),e(Jp,fP),e(fP,ffo),e(Jp,mfo),e(T,gfo),e(T,Yp),e(Yp,Gre),e(Gre,hfo),e(Yp,pfo),e(Yp,mP),e(mP,_fo),e(Yp,ufo),e(T,bfo),e(T,Kp),e(Kp,Ore),e(Ore,Ffo),e(Kp,vfo),e(Kp,gP),e(gP,Tfo),e(Kp,Mfo),e(T,Efo),e(T,Zp),e(Zp,Vre),e(Vre,Cfo),e(Zp,wfo),e(Zp,hP),e(hP,Afo),e(Zp,yfo),e(T,Lfo),e(T,e_),e(e_,Xre),e(Xre,xfo),e(e_,kfo),e(e_,pP),e(pP,Sfo),e(e_,Rfo),e(T,Bfo),e(T,o_),e(o_,zre),e(zre,Pfo),e(o_,$fo),e(o_,_P),e(_P,Ifo),e(o_,qfo),e(T,Nfo),e(T,r_),e(r_,Qre),e(Qre,jfo),e(r_,Dfo),e(r_,uP),e(uP,Gfo),e(r_,Ofo),e(T,Vfo),e(T,t_),e(t_,Wre),e(Wre,Xfo),e(t_,zfo),e(t_,bP),e(bP,Qfo),e(t_,Wfo),e(T,Hfo),e(T,a_),e(a_,Hre),e(Hre,Ufo),e(a_,Jfo),e(a_,FP),e(FP,Yfo),e(a_,Kfo),e(T,Zfo),e(T,n_),e(n_,Ure),e(Ure,emo),e(n_,omo),e(n_,vP),e(vP,rmo),e(n_,tmo),e(T,amo),e(T,s_),e(s_,Jre),e(Jre,nmo),e(s_,smo),e(s_,TP),e(TP,lmo),e(s_,imo),e(T,dmo),e(T,l_),e(l_,Yre),e(Yre,cmo),e(l_,fmo),e(l_,MP),e(MP,mmo),e(l_,gmo),e(T,hmo),e(T,i_),e(i_,Kre),e(Kre,pmo),e(i_,_mo),e(i_,EP),e(EP,umo),e(i_,bmo),e(T,Fmo),e(T,d_),e(d_,Zre),e(Zre,vmo),e(d_,Tmo),e(d_,CP),e(CP,Mmo),e(d_,Emo),e(T,Cmo),e(T,c_),e(c_,ete),e(ete,wmo),e(c_,Amo),e(c_,wP),e(wP,ymo),e(c_,Lmo),e(T,xmo),e(T,f_),e(f_,ote),e(ote,kmo),e(f_,Smo),e(f_,AP),e(AP,Rmo),e(f_,Bmo),e(T,Pmo),e(T,m_),e(m_,rte),e(rte,$mo),e(m_,Imo),e(m_,yP),e(yP,qmo),e(m_,Nmo),e(T,jmo),e(T,g_),e(g_,tte),e(tte,Dmo),e(g_,Gmo),e(g_,LP),e(LP,Omo),e(g_,Vmo),e(T,Xmo),e(T,h_),e(h_,ate),e(ate,zmo),e(h_,Qmo),e(h_,xP),e(xP,Wmo),e(h_,Hmo),e(T,Umo),e(T,p_),e(p_,nte),e(nte,Jmo),e(p_,Ymo),e(p_,kP),e(kP,Kmo),e(p_,Zmo),e(T,ego),e(T,__),e(__,ste),e(ste,ogo),e(__,rgo),e(__,SP),e(SP,tgo),e(__,ago),e(T,ngo),e(T,u_),e(u_,lte),e(lte,sgo),e(u_,lgo),e(u_,RP),e(RP,igo),e(u_,dgo),e(T,cgo),e(T,b_),e(b_,ite),e(ite,fgo),e(b_,mgo),e(b_,BP),e(BP,ggo),e(b_,hgo),e(T,pgo),e(T,F_),e(F_,dte),e(dte,_go),e(F_,ugo),e(F_,PP),e(PP,bgo),e(F_,Fgo),e(T,vgo),e(T,v_),e(v_,cte),e(cte,Tgo),e(v_,Mgo),e(v_,$P),e($P,Ego),e(v_,Cgo),e(T,wgo),e(T,T_),e(T_,fte),e(fte,Ago),e(T_,ygo),e(T_,IP),e(IP,Lgo),e(T_,xgo),e(T,kgo),e(T,M_),e(M_,mte),e(mte,Sgo),e(M_,Rgo),e(M_,qP),e(qP,Bgo),e(M_,Pgo),e(T,$go),e(T,E_),e(E_,gte),e(gte,Igo),e(E_,qgo),e(E_,NP),e(NP,Ngo),e(E_,jgo),e(T,Dgo),e(T,C_),e(C_,hte),e(hte,Ggo),e(C_,Ogo),e(C_,jP),e(jP,Vgo),e(C_,Xgo),e(T,zgo),e(T,w_),e(w_,pte),e(pte,Qgo),e(w_,Wgo),e(w_,DP),e(DP,Hgo),e(w_,Ugo),e(T,Jgo),e(T,A_),e(A_,_te),e(_te,Ygo),e(A_,Kgo),e(A_,GP),e(GP,Zgo),e(A_,eho),e(T,oho),e(T,y_),e(y_,ute),e(ute,rho),e(y_,tho),e(y_,OP),e(OP,aho),e(y_,nho),e(T,sho),e(T,L_),e(L_,bte),e(bte,lho),e(L_,iho),e(L_,VP),e(VP,dho),e(L_,cho),e(T,fho),e(T,x_),e(x_,Fte),e(Fte,mho),e(x_,gho),e(x_,XP),e(XP,hho),e(x_,pho),e(T,_ho),e(T,k_),e(k_,vte),e(vte,uho),e(k_,bho),e(k_,zP),e(zP,Fho),e(k_,vho),e(T,Tho),e(T,S_),e(S_,Tte),e(Tte,Mho),e(S_,Eho),e(S_,QP),e(QP,Cho),e(S_,who),e(T,Aho),e(T,R_),e(R_,Mte),e(Mte,yho),e(R_,Lho),e(R_,WP),e(WP,xho),e(R_,kho),e(T,Sho),e(T,B_),e(B_,Ete),e(Ete,Rho),e(B_,Bho),e(B_,HP),e(HP,Pho),e(B_,$ho),e(qe,Iho),e(qe,P_),e(P_,qho),e(P_,Cte),e(Cte,Nho),e(P_,jho),e(P_,wte),e(wte,Dho),e(qe,Gho),e(qe,Ate),e(Ate,Oho),e(qe,Vho),g(dw,qe,null),b(c,kRe,u),b(c,Zi,u),e(Zi,$_),e($_,yte),g(cw,yte,null),e(Zi,Xho),e(Zi,Lte),e(Lte,zho),b(c,SRe,u),b(c,Yo,u),g(fw,Yo,null),e(Yo,Qho),e(Yo,ed),e(ed,Who),e(ed,UP),e(UP,Hho),e(ed,Uho),e(ed,JP),e(JP,Jho),e(ed,Yho),e(Yo,Kho),e(Yo,mw),e(mw,Zho),e(mw,xte),e(xte,epo),e(mw,opo),e(Yo,rpo),e(Yo,zr),g(gw,zr,null),e(zr,tpo),e(zr,kte),e(kte,apo),e(zr,npo),e(zr,od),e(od,spo),e(od,Ste),e(Ste,lpo),e(od,ipo),e(od,YP),e(YP,dpo),e(od,cpo),e(zr,fpo),e(zr,Rte),e(Rte,mpo),e(zr,gpo),g(hw,zr,null),e(Yo,hpo),e(Yo,Ne),g(pw,Ne,null),e(Ne,ppo),e(Ne,Bte),e(Bte,_po),e(Ne,upo),e(Ne,za),e(za,bpo),e(za,Pte),e(Pte,Fpo),e(za,vpo),e(za,$te),e($te,Tpo),e(za,Mpo),e(za,Ite),e(Ite,Epo),e(za,Cpo),e(Ne,wpo),e(Ne,S),e(S,I_),e(I_,qte),e(qte,Apo),e(I_,ypo),e(I_,KP),e(KP,Lpo),e(I_,xpo),e(S,kpo),e(S,q_),e(q_,Nte),e(Nte,Spo),e(q_,Rpo),e(q_,ZP),e(ZP,Bpo),e(q_,Ppo),e(S,$po),e(S,N_),e(N_,jte),e(jte,Ipo),e(N_,qpo),e(N_,e$),e(e$,Npo),e(N_,jpo),e(S,Dpo),e(S,j_),e(j_,Dte),e(Dte,Gpo),e(j_,Opo),e(j_,o$),e(o$,Vpo),e(j_,Xpo),e(S,zpo),e(S,D_),e(D_,Gte),e(Gte,Qpo),e(D_,Wpo),e(D_,r$),e(r$,Hpo),e(D_,Upo),e(S,Jpo),e(S,G_),e(G_,Ote),e(Ote,Ypo),e(G_,Kpo),e(G_,t$),e(t$,Zpo),e(G_,e_o),e(S,o_o),e(S,O_),e(O_,Vte),e(Vte,r_o),e(O_,t_o),e(O_,a$),e(a$,a_o),e(O_,n_o),e(S,s_o),e(S,V_),e(V_,Xte),e(Xte,l_o),e(V_,i_o),e(V_,n$),e(n$,d_o),e(V_,c_o),e(S,f_o),e(S,X_),e(X_,zte),e(zte,m_o),e(X_,g_o),e(X_,s$),e(s$,h_o),e(X_,p_o),e(S,__o),e(S,z_),e(z_,Qte),e(Qte,u_o),e(z_,b_o),e(z_,l$),e(l$,F_o),e(z_,v_o),e(S,T_o),e(S,Q_),e(Q_,Wte),e(Wte,M_o),e(Q_,E_o),e(Q_,i$),e(i$,C_o),e(Q_,w_o),e(S,A_o),e(S,W_),e(W_,Hte),e(Hte,y_o),e(W_,L_o),e(W_,d$),e(d$,x_o),e(W_,k_o),e(S,S_o),e(S,H_),e(H_,Ute),e(Ute,R_o),e(H_,B_o),e(H_,c$),e(c$,P_o),e(H_,$_o),e(S,I_o),e(S,U_),e(U_,Jte),e(Jte,q_o),e(U_,N_o),e(U_,f$),e(f$,j_o),e(U_,D_o),e(S,G_o),e(S,J_),e(J_,Yte),e(Yte,O_o),e(J_,V_o),e(J_,m$),e(m$,X_o),e(J_,z_o),e(S,Q_o),e(S,Y_),e(Y_,Kte),e(Kte,W_o),e(Y_,H_o),e(Y_,g$),e(g$,U_o),e(Y_,J_o),e(S,Y_o),e(S,K_),e(K_,Zte),e(Zte,K_o),e(K_,Z_o),e(K_,h$),e(h$,euo),e(K_,ouo),e(S,ruo),e(S,Z_),e(Z_,eae),e(eae,tuo),e(Z_,auo),e(Z_,p$),e(p$,nuo),e(Z_,suo),e(S,luo),e(S,eu),e(eu,oae),e(oae,iuo),e(eu,duo),e(eu,_$),e(_$,cuo),e(eu,fuo),e(S,muo),e(S,ou),e(ou,rae),e(rae,guo),e(ou,huo),e(ou,u$),e(u$,puo),e(ou,_uo),e(S,uuo),e(S,ru),e(ru,tae),e(tae,buo),e(ru,Fuo),e(ru,b$),e(b$,vuo),e(ru,Tuo),e(S,Muo),e(S,tu),e(tu,aae),e(aae,Euo),e(tu,Cuo),e(tu,F$),e(F$,wuo),e(tu,Auo),e(S,yuo),e(S,au),e(au,nae),e(nae,Luo),e(au,xuo),e(au,v$),e(v$,kuo),e(au,Suo),e(S,Ruo),e(S,nu),e(nu,sae),e(sae,Buo),e(nu,Puo),e(nu,T$),e(T$,$uo),e(nu,Iuo),e(S,quo),e(S,su),e(su,lae),e(lae,Nuo),e(su,juo),e(su,M$),e(M$,Duo),e(su,Guo),e(S,Ouo),e(S,lu),e(lu,iae),e(iae,Vuo),e(lu,Xuo),e(lu,E$),e(E$,zuo),e(lu,Quo),e(S,Wuo),e(S,iu),e(iu,dae),e(dae,Huo),e(iu,Uuo),e(iu,C$),e(C$,Juo),e(iu,Yuo),e(S,Kuo),e(S,du),e(du,cae),e(cae,Zuo),e(du,e2o),e(du,w$),e(w$,o2o),e(du,r2o),e(S,t2o),e(S,cu),e(cu,fae),e(fae,a2o),e(cu,n2o),e(cu,A$),e(A$,s2o),e(cu,l2o),e(S,i2o),e(S,fu),e(fu,mae),e(mae,d2o),e(fu,c2o),e(fu,y$),e(y$,f2o),e(fu,m2o),e(S,g2o),e(S,mu),e(mu,gae),e(gae,h2o),e(mu,p2o),e(mu,L$),e(L$,_2o),e(mu,u2o),e(S,b2o),e(S,gu),e(gu,hae),e(hae,F2o),e(gu,v2o),e(gu,x$),e(x$,T2o),e(gu,M2o),e(S,E2o),e(S,hu),e(hu,pae),e(pae,C2o),e(hu,w2o),e(hu,k$),e(k$,A2o),e(hu,y2o),e(S,L2o),e(S,pu),e(pu,_ae),e(_ae,x2o),e(pu,k2o),e(pu,S$),e(S$,S2o),e(pu,R2o),e(S,B2o),e(S,_u),e(_u,uae),e(uae,P2o),e(_u,$2o),e(_u,R$),e(R$,I2o),e(_u,q2o),e(S,N2o),e(S,uu),e(uu,bae),e(bae,j2o),e(uu,D2o),e(uu,B$),e(B$,G2o),e(uu,O2o),e(S,V2o),e(S,bu),e(bu,Fae),e(Fae,X2o),e(bu,z2o),e(bu,P$),e(P$,Q2o),e(bu,W2o),e(S,H2o),e(S,Fu),e(Fu,vae),e(vae,U2o),e(Fu,J2o),e(Fu,$$),e($$,Y2o),e(Fu,K2o),e(S,Z2o),e(S,vu),e(vu,Tae),e(Tae,e1o),e(vu,o1o),e(vu,I$),e(I$,r1o),e(vu,t1o),e(Ne,a1o),e(Ne,Tu),e(Tu,n1o),e(Tu,Mae),e(Mae,s1o),e(Tu,l1o),e(Tu,Eae),e(Eae,i1o),e(Ne,d1o),e(Ne,Cae),e(Cae,c1o),e(Ne,f1o),g(_w,Ne,null),b(c,RRe,u),b(c,rd,u),e(rd,Mu),e(Mu,wae),g(uw,wae,null),e(rd,m1o),e(rd,Aae),e(Aae,g1o),b(c,BRe,u),b(c,Ko,u),g(bw,Ko,null),e(Ko,h1o),e(Ko,td),e(td,p1o),e(td,q$),e(q$,_1o),e(td,u1o),e(td,N$),e(N$,b1o),e(td,F1o),e(Ko,v1o),e(Ko,Fw),e(Fw,T1o),e(Fw,yae),e(yae,M1o),e(Fw,E1o),e(Ko,C1o),e(Ko,Qr),g(vw,Qr,null),e(Qr,w1o),e(Qr,Lae),e(Lae,A1o),e(Qr,y1o),e(Qr,ad),e(ad,L1o),e(ad,xae),e(xae,x1o),e(ad,k1o),e(ad,j$),e(j$,S1o),e(ad,R1o),e(Qr,B1o),e(Qr,kae),e(kae,P1o),e(Qr,$1o),g(Tw,Qr,null),e(Ko,I1o),e(Ko,je),g(Mw,je,null),e(je,q1o),e(je,Sae),e(Sae,N1o),e(je,j1o),e(je,Qa),e(Qa,D1o),e(Qa,Rae),e(Rae,G1o),e(Qa,O1o),e(Qa,Bae),e(Bae,V1o),e(Qa,X1o),e(Qa,Pae),e(Pae,z1o),e(Qa,Q1o),e(je,W1o),e(je,$),e($,Eu),e(Eu,$ae),e($ae,H1o),e(Eu,U1o),e(Eu,D$),e(D$,J1o),e(Eu,Y1o),e($,K1o),e($,Cu),e(Cu,Iae),e(Iae,Z1o),e(Cu,ebo),e(Cu,G$),e(G$,obo),e(Cu,rbo),e($,tbo),e($,wu),e(wu,qae),e(qae,abo),e(wu,nbo),e(wu,O$),e(O$,sbo),e(wu,lbo),e($,ibo),e($,Au),e(Au,Nae),e(Nae,dbo),e(Au,cbo),e(Au,V$),e(V$,fbo),e(Au,mbo),e($,gbo),e($,yu),e(yu,jae),e(jae,hbo),e(yu,pbo),e(yu,X$),e(X$,_bo),e(yu,ubo),e($,bbo),e($,Lu),e(Lu,Dae),e(Dae,Fbo),e(Lu,vbo),e(Lu,z$),e(z$,Tbo),e(Lu,Mbo),e($,Ebo),e($,xu),e(xu,Gae),e(Gae,Cbo),e(xu,wbo),e(xu,Q$),e(Q$,Abo),e(xu,ybo),e($,Lbo),e($,ku),e(ku,Oae),e(Oae,xbo),e(ku,kbo),e(ku,W$),e(W$,Sbo),e(ku,Rbo),e($,Bbo),e($,Su),e(Su,Vae),e(Vae,Pbo),e(Su,$bo),e(Su,H$),e(H$,Ibo),e(Su,qbo),e($,Nbo),e($,Ru),e(Ru,Xae),e(Xae,jbo),e(Ru,Dbo),e(Ru,U$),e(U$,Gbo),e(Ru,Obo),e($,Vbo),e($,Bu),e(Bu,zae),e(zae,Xbo),e(Bu,zbo),e(Bu,J$),e(J$,Qbo),e(Bu,Wbo),e($,Hbo),e($,Pu),e(Pu,Qae),e(Qae,Ubo),e(Pu,Jbo),e(Pu,Y$),e(Y$,Ybo),e(Pu,Kbo),e($,Zbo),e($,$u),e($u,Wae),e(Wae,e5o),e($u,o5o),e($u,K$),e(K$,r5o),e($u,t5o),e($,a5o),e($,Iu),e(Iu,Hae),e(Hae,n5o),e(Iu,s5o),e(Iu,Z$),e(Z$,l5o),e(Iu,i5o),e($,d5o),e($,qu),e(qu,Uae),e(Uae,c5o),e(qu,f5o),e(qu,eI),e(eI,m5o),e(qu,g5o),e($,h5o),e($,Nu),e(Nu,Jae),e(Jae,p5o),e(Nu,_5o),e(Nu,oI),e(oI,u5o),e(Nu,b5o),e($,F5o),e($,ju),e(ju,Yae),e(Yae,v5o),e(ju,T5o),e(ju,rI),e(rI,M5o),e(ju,E5o),e($,C5o),e($,Du),e(Du,Kae),e(Kae,w5o),e(Du,A5o),e(Du,tI),e(tI,y5o),e(Du,L5o),e($,x5o),e($,Gu),e(Gu,Zae),e(Zae,k5o),e(Gu,S5o),e(Gu,aI),e(aI,R5o),e(Gu,B5o),e($,P5o),e($,Ou),e(Ou,ene),e(ene,$5o),e(Ou,I5o),e(Ou,nI),e(nI,q5o),e(Ou,N5o),e($,j5o),e($,Vu),e(Vu,one),e(one,D5o),e(Vu,G5o),e(Vu,sI),e(sI,O5o),e(Vu,V5o),e($,X5o),e($,Xu),e(Xu,rne),e(rne,z5o),e(Xu,Q5o),e(Xu,lI),e(lI,W5o),e(Xu,H5o),e($,U5o),e($,zu),e(zu,tne),e(tne,J5o),e(zu,Y5o),e(zu,iI),e(iI,K5o),e(zu,Z5o),e($,eFo),e($,Qu),e(Qu,ane),e(ane,oFo),e(Qu,rFo),e(Qu,dI),e(dI,tFo),e(Qu,aFo),e($,nFo),e($,Wu),e(Wu,nne),e(nne,sFo),e(Wu,lFo),e(Wu,cI),e(cI,iFo),e(Wu,dFo),e($,cFo),e($,Hu),e(Hu,sne),e(sne,fFo),e(Hu,mFo),e(Hu,fI),e(fI,gFo),e(Hu,hFo),e($,pFo),e($,Uu),e(Uu,lne),e(lne,_Fo),e(Uu,uFo),e(Uu,mI),e(mI,bFo),e(Uu,FFo),e($,vFo),e($,Ju),e(Ju,ine),e(ine,TFo),e(Ju,MFo),e(Ju,gI),e(gI,EFo),e(Ju,CFo),e($,wFo),e($,Yu),e(Yu,dne),e(dne,AFo),e(Yu,yFo),e(Yu,hI),e(hI,LFo),e(Yu,xFo),e($,kFo),e($,Ku),e(Ku,cne),e(cne,SFo),e(Ku,RFo),e(Ku,pI),e(pI,BFo),e(Ku,PFo),e($,$Fo),e($,Zu),e(Zu,fne),e(fne,IFo),e(Zu,qFo),e(Zu,_I),e(_I,NFo),e(Zu,jFo),e($,DFo),e($,e2),e(e2,mne),e(mne,GFo),e(e2,OFo),e(e2,uI),e(uI,VFo),e(e2,XFo),e($,zFo),e($,o2),e(o2,gne),e(gne,QFo),e(o2,WFo),e(o2,bI),e(bI,HFo),e(o2,UFo),e($,JFo),e($,r2),e(r2,hne),e(hne,YFo),e(r2,KFo),e(r2,FI),e(FI,ZFo),e(r2,evo),e($,ovo),e($,t2),e(t2,pne),e(pne,rvo),e(t2,tvo),e(t2,vI),e(vI,avo),e(t2,nvo),e(je,svo),e(je,a2),e(a2,lvo),e(a2,_ne),e(_ne,ivo),e(a2,dvo),e(a2,une),e(une,cvo),e(je,fvo),e(je,bne),e(bne,mvo),e(je,gvo),g(Ew,je,null),b(c,PRe,u),b(c,nd,u),e(nd,n2),e(n2,Fne),g(Cw,Fne,null),e(nd,hvo),e(nd,vne),e(vne,pvo),b(c,$Re,u),b(c,Zo,u),g(ww,Zo,null),e(Zo,_vo),e(Zo,sd),e(sd,uvo),e(sd,TI),e(TI,bvo),e(sd,Fvo),e(sd,MI),e(MI,vvo),e(sd,Tvo),e(Zo,Mvo),e(Zo,Aw),e(Aw,Evo),e(Aw,Tne),e(Tne,Cvo),e(Aw,wvo),e(Zo,Avo),e(Zo,Wr),g(yw,Wr,null),e(Wr,yvo),e(Wr,Mne),e(Mne,Lvo),e(Wr,xvo),e(Wr,ld),e(ld,kvo),e(ld,Ene),e(Ene,Svo),e(ld,Rvo),e(ld,EI),e(EI,Bvo),e(ld,Pvo),e(Wr,$vo),e(Wr,Cne),e(Cne,Ivo),e(Wr,qvo),g(Lw,Wr,null),e(Zo,Nvo),e(Zo,De),g(xw,De,null),e(De,jvo),e(De,wne),e(wne,Dvo),e(De,Gvo),e(De,Wa),e(Wa,Ovo),e(Wa,Ane),e(Ane,Vvo),e(Wa,Xvo),e(Wa,yne),e(yne,zvo),e(Wa,Qvo),e(Wa,Lne),e(Lne,Wvo),e(Wa,Hvo),e(De,Uvo),e(De,I),e(I,s2),e(s2,xne),e(xne,Jvo),e(s2,Yvo),e(s2,CI),e(CI,Kvo),e(s2,Zvo),e(I,e6o),e(I,l2),e(l2,kne),e(kne,o6o),e(l2,r6o),e(l2,wI),e(wI,t6o),e(l2,a6o),e(I,n6o),e(I,i2),e(i2,Sne),e(Sne,s6o),e(i2,l6o),e(i2,AI),e(AI,i6o),e(i2,d6o),e(I,c6o),e(I,d2),e(d2,Rne),e(Rne,f6o),e(d2,m6o),e(d2,yI),e(yI,g6o),e(d2,h6o),e(I,p6o),e(I,c2),e(c2,Bne),e(Bne,_6o),e(c2,u6o),e(c2,LI),e(LI,b6o),e(c2,F6o),e(I,v6o),e(I,f2),e(f2,Pne),e(Pne,T6o),e(f2,M6o),e(f2,xI),e(xI,E6o),e(f2,C6o),e(I,w6o),e(I,m2),e(m2,$ne),e($ne,A6o),e(m2,y6o),e(m2,kI),e(kI,L6o),e(m2,x6o),e(I,k6o),e(I,g2),e(g2,Ine),e(Ine,S6o),e(g2,R6o),e(g2,SI),e(SI,B6o),e(g2,P6o),e(I,$6o),e(I,h2),e(h2,qne),e(qne,I6o),e(h2,q6o),e(h2,RI),e(RI,N6o),e(h2,j6o),e(I,D6o),e(I,p2),e(p2,Nne),e(Nne,G6o),e(p2,O6o),e(p2,BI),e(BI,V6o),e(p2,X6o),e(I,z6o),e(I,_2),e(_2,jne),e(jne,Q6o),e(_2,W6o),e(_2,PI),e(PI,H6o),e(_2,U6o),e(I,J6o),e(I,u2),e(u2,Dne),e(Dne,Y6o),e(u2,K6o),e(u2,$I),e($I,Z6o),e(u2,eTo),e(I,oTo),e(I,b2),e(b2,Gne),e(Gne,rTo),e(b2,tTo),e(b2,II),e(II,aTo),e(b2,nTo),e(I,sTo),e(I,F2),e(F2,One),e(One,lTo),e(F2,iTo),e(F2,qI),e(qI,dTo),e(F2,cTo),e(I,fTo),e(I,v2),e(v2,Vne),e(Vne,mTo),e(v2,gTo),e(v2,NI),e(NI,hTo),e(v2,pTo),e(I,_To),e(I,T2),e(T2,Xne),e(Xne,uTo),e(T2,bTo),e(T2,jI),e(jI,FTo),e(T2,vTo),e(I,TTo),e(I,M2),e(M2,zne),e(zne,MTo),e(M2,ETo),e(M2,DI),e(DI,CTo),e(M2,wTo),e(I,ATo),e(I,E2),e(E2,Qne),e(Qne,yTo),e(E2,LTo),e(E2,GI),e(GI,xTo),e(E2,kTo),e(I,STo),e(I,C2),e(C2,Wne),e(Wne,RTo),e(C2,BTo),e(C2,OI),e(OI,PTo),e(C2,$To),e(I,ITo),e(I,w2),e(w2,Hne),e(Hne,qTo),e(w2,NTo),e(w2,VI),e(VI,jTo),e(w2,DTo),e(I,GTo),e(I,A2),e(A2,Une),e(Une,OTo),e(A2,VTo),e(A2,XI),e(XI,XTo),e(A2,zTo),e(I,QTo),e(I,y2),e(y2,Jne),e(Jne,WTo),e(y2,HTo),e(y2,zI),e(zI,UTo),e(y2,JTo),e(I,YTo),e(I,L2),e(L2,Yne),e(Yne,KTo),e(L2,ZTo),e(L2,QI),e(QI,eMo),e(L2,oMo),e(I,rMo),e(I,x2),e(x2,Kne),e(Kne,tMo),e(x2,aMo),e(x2,WI),e(WI,nMo),e(x2,sMo),e(I,lMo),e(I,k2),e(k2,Zne),e(Zne,iMo),e(k2,dMo),e(k2,HI),e(HI,cMo),e(k2,fMo),e(I,mMo),e(I,S2),e(S2,ese),e(ese,gMo),e(S2,hMo),e(S2,UI),e(UI,pMo),e(S2,_Mo),e(I,uMo),e(I,R2),e(R2,ose),e(ose,bMo),e(R2,FMo),e(R2,JI),e(JI,vMo),e(R2,TMo),e(I,MMo),e(I,B2),e(B2,rse),e(rse,EMo),e(B2,CMo),e(B2,YI),e(YI,wMo),e(B2,AMo),e(I,yMo),e(I,P2),e(P2,tse),e(tse,LMo),e(P2,xMo),e(P2,KI),e(KI,kMo),e(P2,SMo),e(I,RMo),e(I,$2),e($2,ase),e(ase,BMo),e($2,PMo),e($2,ZI),e(ZI,$Mo),e($2,IMo),e(I,qMo),e(I,I2),e(I2,nse),e(nse,NMo),e(I2,jMo),e(I2,sse),e(sse,DMo),e(I2,GMo),e(I,OMo),e(I,q2),e(q2,lse),e(lse,VMo),e(q2,XMo),e(q2,eq),e(eq,zMo),e(q2,QMo),e(I,WMo),e(I,N2),e(N2,ise),e(ise,HMo),e(N2,UMo),e(N2,oq),e(oq,JMo),e(N2,YMo),e(I,KMo),e(I,j2),e(j2,dse),e(dse,ZMo),e(j2,e4o),e(j2,rq),e(rq,o4o),e(j2,r4o),e(I,t4o),e(I,D2),e(D2,cse),e(cse,a4o),e(D2,n4o),e(D2,tq),e(tq,s4o),e(D2,l4o),e(De,i4o),e(De,G2),e(G2,d4o),e(G2,fse),e(fse,c4o),e(G2,f4o),e(G2,mse),e(mse,m4o),e(De,g4o),e(De,gse),e(gse,h4o),e(De,p4o),g(kw,De,null),b(c,IRe,u),b(c,id,u),e(id,O2),e(O2,hse),g(Sw,hse,null),e(id,_4o),e(id,pse),e(pse,u4o),b(c,qRe,u),b(c,er,u),g(Rw,er,null),e(er,b4o),e(er,dd),e(dd,F4o),e(dd,aq),e(aq,v4o),e(dd,T4o),e(dd,nq),e(nq,M4o),e(dd,E4o),e(er,C4o),e(er,Bw),e(Bw,w4o),e(Bw,_se),e(_se,A4o),e(Bw,y4o),e(er,L4o),e(er,Hr),g(Pw,Hr,null),e(Hr,x4o),e(Hr,use),e(use,k4o),e(Hr,S4o),e(Hr,cd),e(cd,R4o),e(cd,bse),e(bse,B4o),e(cd,P4o),e(cd,sq),e(sq,$4o),e(cd,I4o),e(Hr,q4o),e(Hr,Fse),e(Fse,N4o),e(Hr,j4o),g($w,Hr,null),e(er,D4o),e(er,Ge),g(Iw,Ge,null),e(Ge,G4o),e(Ge,vse),e(vse,O4o),e(Ge,V4o),e(Ge,Ha),e(Ha,X4o),e(Ha,Tse),e(Tse,z4o),e(Ha,Q4o),e(Ha,Mse),e(Mse,W4o),e(Ha,H4o),e(Ha,Ese),e(Ese,U4o),e(Ha,J4o),e(Ge,Y4o),e(Ge,ne),e(ne,V2),e(V2,Cse),e(Cse,K4o),e(V2,Z4o),e(V2,lq),e(lq,eEo),e(V2,oEo),e(ne,rEo),e(ne,X2),e(X2,wse),e(wse,tEo),e(X2,aEo),e(X2,iq),e(iq,nEo),e(X2,sEo),e(ne,lEo),e(ne,z2),e(z2,Ase),e(Ase,iEo),e(z2,dEo),e(z2,dq),e(dq,cEo),e(z2,fEo),e(ne,mEo),e(ne,Q2),e(Q2,yse),e(yse,gEo),e(Q2,hEo),e(Q2,cq),e(cq,pEo),e(Q2,_Eo),e(ne,uEo),e(ne,W2),e(W2,Lse),e(Lse,bEo),e(W2,FEo),e(W2,fq),e(fq,vEo),e(W2,TEo),e(ne,MEo),e(ne,H2),e(H2,xse),e(xse,EEo),e(H2,CEo),e(H2,mq),e(mq,wEo),e(H2,AEo),e(ne,yEo),e(ne,U2),e(U2,kse),e(kse,LEo),e(U2,xEo),e(U2,gq),e(gq,kEo),e(U2,SEo),e(ne,REo),e(ne,J2),e(J2,Sse),e(Sse,BEo),e(J2,PEo),e(J2,hq),e(hq,$Eo),e(J2,IEo),e(ne,qEo),e(ne,Y2),e(Y2,Rse),e(Rse,NEo),e(Y2,jEo),e(Y2,pq),e(pq,DEo),e(Y2,GEo),e(ne,OEo),e(ne,K2),e(K2,Bse),e(Bse,VEo),e(K2,XEo),e(K2,_q),e(_q,zEo),e(K2,QEo),e(ne,WEo),e(ne,Z2),e(Z2,Pse),e(Pse,HEo),e(Z2,UEo),e(Z2,uq),e(uq,JEo),e(Z2,YEo),e(ne,KEo),e(ne,e1),e(e1,$se),e($se,ZEo),e(e1,eCo),e(e1,bq),e(bq,oCo),e(e1,rCo),e(ne,tCo),e(ne,o1),e(o1,Ise),e(Ise,aCo),e(o1,nCo),e(o1,Fq),e(Fq,sCo),e(o1,lCo),e(ne,iCo),e(ne,r1),e(r1,qse),e(qse,dCo),e(r1,cCo),e(r1,vq),e(vq,fCo),e(r1,mCo),e(ne,gCo),e(ne,t1),e(t1,Nse),e(Nse,hCo),e(t1,pCo),e(t1,Tq),e(Tq,_Co),e(t1,uCo),e(ne,bCo),e(ne,a1),e(a1,jse),e(jse,FCo),e(a1,vCo),e(a1,Mq),e(Mq,TCo),e(a1,MCo),e(ne,ECo),e(ne,n1),e(n1,Dse),e(Dse,CCo),e(n1,wCo),e(n1,Eq),e(Eq,ACo),e(n1,yCo),e(Ge,LCo),e(Ge,s1),e(s1,xCo),e(s1,Gse),e(Gse,kCo),e(s1,SCo),e(s1,Ose),e(Ose,RCo),e(Ge,BCo),e(Ge,Vse),e(Vse,PCo),e(Ge,$Co),g(qw,Ge,null),b(c,NRe,u),b(c,fd,u),e(fd,l1),e(l1,Xse),g(Nw,Xse,null),e(fd,ICo),e(fd,zse),e(zse,qCo),b(c,jRe,u),b(c,or,u),g(jw,or,null),e(or,NCo),e(or,md),e(md,jCo),e(md,Cq),e(Cq,DCo),e(md,GCo),e(md,wq),e(wq,OCo),e(md,VCo),e(or,XCo),e(or,Dw),e(Dw,zCo),e(Dw,Qse),e(Qse,QCo),e(Dw,WCo),e(or,HCo),e(or,Ur),g(Gw,Ur,null),e(Ur,UCo),e(Ur,Wse),e(Wse,JCo),e(Ur,YCo),e(Ur,gd),e(gd,KCo),e(gd,Hse),e(Hse,ZCo),e(gd,e3o),e(gd,Aq),e(Aq,o3o),e(gd,r3o),e(Ur,t3o),e(Ur,Use),e(Use,a3o),e(Ur,n3o),g(Ow,Ur,null),e(or,s3o),e(or,Oe),g(Vw,Oe,null),e(Oe,l3o),e(Oe,Jse),e(Jse,i3o),e(Oe,d3o),e(Oe,Ua),e(Ua,c3o),e(Ua,Yse),e(Yse,f3o),e(Ua,m3o),e(Ua,Kse),e(Kse,g3o),e(Ua,h3o),e(Ua,Zse),e(Zse,p3o),e(Ua,_3o),e(Oe,u3o),e(Oe,y),e(y,i1),e(i1,ele),e(ele,b3o),e(i1,F3o),e(i1,yq),e(yq,v3o),e(i1,T3o),e(y,M3o),e(y,d1),e(d1,ole),e(ole,E3o),e(d1,C3o),e(d1,Lq),e(Lq,w3o),e(d1,A3o),e(y,y3o),e(y,c1),e(c1,rle),e(rle,L3o),e(c1,x3o),e(c1,xq),e(xq,k3o),e(c1,S3o),e(y,R3o),e(y,f1),e(f1,tle),e(tle,B3o),e(f1,P3o),e(f1,kq),e(kq,$3o),e(f1,I3o),e(y,q3o),e(y,m1),e(m1,ale),e(ale,N3o),e(m1,j3o),e(m1,Sq),e(Sq,D3o),e(m1,G3o),e(y,O3o),e(y,g1),e(g1,nle),e(nle,V3o),e(g1,X3o),e(g1,Rq),e(Rq,z3o),e(g1,Q3o),e(y,W3o),e(y,h1),e(h1,sle),e(sle,H3o),e(h1,U3o),e(h1,Bq),e(Bq,J3o),e(h1,Y3o),e(y,K3o),e(y,p1),e(p1,lle),e(lle,Z3o),e(p1,ewo),e(p1,Pq),e(Pq,owo),e(p1,rwo),e(y,two),e(y,_1),e(_1,ile),e(ile,awo),e(_1,nwo),e(_1,$q),e($q,swo),e(_1,lwo),e(y,iwo),e(y,u1),e(u1,dle),e(dle,dwo),e(u1,cwo),e(u1,Iq),e(Iq,fwo),e(u1,mwo),e(y,gwo),e(y,b1),e(b1,cle),e(cle,hwo),e(b1,pwo),e(b1,qq),e(qq,_wo),e(b1,uwo),e(y,bwo),e(y,F1),e(F1,fle),e(fle,Fwo),e(F1,vwo),e(F1,Nq),e(Nq,Two),e(F1,Mwo),e(y,Ewo),e(y,v1),e(v1,mle),e(mle,Cwo),e(v1,wwo),e(v1,jq),e(jq,Awo),e(v1,ywo),e(y,Lwo),e(y,T1),e(T1,gle),e(gle,xwo),e(T1,kwo),e(T1,Dq),e(Dq,Swo),e(T1,Rwo),e(y,Bwo),e(y,M1),e(M1,hle),e(hle,Pwo),e(M1,$wo),e(M1,Gq),e(Gq,Iwo),e(M1,qwo),e(y,Nwo),e(y,E1),e(E1,ple),e(ple,jwo),e(E1,Dwo),e(E1,Oq),e(Oq,Gwo),e(E1,Owo),e(y,Vwo),e(y,C1),e(C1,_le),e(_le,Xwo),e(C1,zwo),e(C1,Vq),e(Vq,Qwo),e(C1,Wwo),e(y,Hwo),e(y,w1),e(w1,ule),e(ule,Uwo),e(w1,Jwo),e(w1,Xq),e(Xq,Ywo),e(w1,Kwo),e(y,Zwo),e(y,A1),e(A1,ble),e(ble,eAo),e(A1,oAo),e(A1,zq),e(zq,rAo),e(A1,tAo),e(y,aAo),e(y,y1),e(y1,Fle),e(Fle,nAo),e(y1,sAo),e(y1,Qq),e(Qq,lAo),e(y1,iAo),e(y,dAo),e(y,L1),e(L1,vle),e(vle,cAo),e(L1,fAo),e(L1,Wq),e(Wq,mAo),e(L1,gAo),e(y,hAo),e(y,x1),e(x1,Tle),e(Tle,pAo),e(x1,_Ao),e(x1,Hq),e(Hq,uAo),e(x1,bAo),e(y,FAo),e(y,k1),e(k1,Mle),e(Mle,vAo),e(k1,TAo),e(k1,Uq),e(Uq,MAo),e(k1,EAo),e(y,CAo),e(y,S1),e(S1,Ele),e(Ele,wAo),e(S1,AAo),e(S1,Jq),e(Jq,yAo),e(S1,LAo),e(y,xAo),e(y,R1),e(R1,Cle),e(Cle,kAo),e(R1,SAo),e(R1,Yq),e(Yq,RAo),e(R1,BAo),e(y,PAo),e(y,B1),e(B1,wle),e(wle,$Ao),e(B1,IAo),e(B1,Kq),e(Kq,qAo),e(B1,NAo),e(y,jAo),e(y,P1),e(P1,Ale),e(Ale,DAo),e(P1,GAo),e(P1,Zq),e(Zq,OAo),e(P1,VAo),e(y,XAo),e(y,$1),e($1,yle),e(yle,zAo),e($1,QAo),e($1,eN),e(eN,WAo),e($1,HAo),e(y,UAo),e(y,I1),e(I1,Lle),e(Lle,JAo),e(I1,YAo),e(I1,oN),e(oN,KAo),e(I1,ZAo),e(y,e0o),e(y,q1),e(q1,xle),e(xle,o0o),e(q1,r0o),e(q1,rN),e(rN,t0o),e(q1,a0o),e(y,n0o),e(y,N1),e(N1,kle),e(kle,s0o),e(N1,l0o),e(N1,tN),e(tN,i0o),e(N1,d0o),e(y,c0o),e(y,j1),e(j1,Sle),e(Sle,f0o),e(j1,m0o),e(j1,aN),e(aN,g0o),e(j1,h0o),e(y,p0o),e(y,D1),e(D1,Rle),e(Rle,_0o),e(D1,u0o),e(D1,nN),e(nN,b0o),e(D1,F0o),e(y,v0o),e(y,G1),e(G1,Ble),e(Ble,T0o),e(G1,M0o),e(G1,sN),e(sN,E0o),e(G1,C0o),e(y,w0o),e(y,O1),e(O1,Ple),e(Ple,A0o),e(O1,y0o),e(O1,lN),e(lN,L0o),e(O1,x0o),e(y,k0o),e(y,V1),e(V1,$le),e($le,S0o),e(V1,R0o),e(V1,iN),e(iN,B0o),e(V1,P0o),e(y,$0o),e(y,X1),e(X1,Ile),e(Ile,I0o),e(X1,q0o),e(X1,dN),e(dN,N0o),e(X1,j0o),e(y,D0o),e(y,z1),e(z1,qle),e(qle,G0o),e(z1,O0o),e(z1,cN),e(cN,V0o),e(z1,X0o),e(y,z0o),e(y,Q1),e(Q1,Nle),e(Nle,Q0o),e(Q1,W0o),e(Q1,fN),e(fN,H0o),e(Q1,U0o),e(y,J0o),e(y,W1),e(W1,jle),e(jle,Y0o),e(W1,K0o),e(W1,mN),e(mN,Z0o),e(W1,eyo),e(y,oyo),e(y,H1),e(H1,Dle),e(Dle,ryo),e(H1,tyo),e(H1,gN),e(gN,ayo),e(H1,nyo),e(y,syo),e(y,U1),e(U1,Gle),e(Gle,lyo),e(U1,iyo),e(U1,hN),e(hN,dyo),e(U1,cyo),e(y,fyo),e(y,J1),e(J1,Ole),e(Ole,myo),e(J1,gyo),e(J1,pN),e(pN,hyo),e(J1,pyo),e(y,_yo),e(y,Y1),e(Y1,Vle),e(Vle,uyo),e(Y1,byo),e(Y1,_N),e(_N,Fyo),e(Y1,vyo),e(y,Tyo),e(y,K1),e(K1,Xle),e(Xle,Myo),e(K1,Eyo),e(K1,uN),e(uN,Cyo),e(K1,wyo),e(y,Ayo),e(y,Z1),e(Z1,zle),e(zle,yyo),e(Z1,Lyo),e(Z1,bN),e(bN,xyo),e(Z1,kyo),e(y,Syo),e(y,eb),e(eb,Qle),e(Qle,Ryo),e(eb,Byo),e(eb,FN),e(FN,Pyo),e(eb,$yo),e(Oe,Iyo),e(Oe,ob),e(ob,qyo),e(ob,Wle),e(Wle,Nyo),e(ob,jyo),e(ob,Hle),e(Hle,Dyo),e(Oe,Gyo),e(Oe,Ule),e(Ule,Oyo),e(Oe,Vyo),g(Xw,Oe,null),b(c,DRe,u),b(c,hd,u),e(hd,rb),e(rb,Jle),g(zw,Jle,null),e(hd,Xyo),e(hd,Yle),e(Yle,zyo),b(c,GRe,u),b(c,rr,u),g(Qw,rr,null),e(rr,Qyo),e(rr,pd),e(pd,Wyo),e(pd,vN),e(vN,Hyo),e(pd,Uyo),e(pd,TN),e(TN,Jyo),e(pd,Yyo),e(rr,Kyo),e(rr,Ww),e(Ww,Zyo),e(Ww,Kle),e(Kle,eLo),e(Ww,oLo),e(rr,rLo),e(rr,Jr),g(Hw,Jr,null),e(Jr,tLo),e(Jr,Zle),e(Zle,aLo),e(Jr,nLo),e(Jr,_d),e(_d,sLo),e(_d,eie),e(eie,lLo),e(_d,iLo),e(_d,MN),e(MN,dLo),e(_d,cLo),e(Jr,fLo),e(Jr,oie),e(oie,mLo),e(Jr,gLo),g(Uw,Jr,null),e(rr,hLo),e(rr,Ve),g(Jw,Ve,null),e(Ve,pLo),e(Ve,rie),e(rie,_Lo),e(Ve,uLo),e(Ve,Ja),e(Ja,bLo),e(Ja,tie),e(tie,FLo),e(Ja,vLo),e(Ja,aie),e(aie,TLo),e(Ja,MLo),e(Ja,nie),e(nie,ELo),e(Ja,CLo),e(Ve,wLo),e(Ve,G),e(G,tb),e(tb,sie),e(sie,ALo),e(tb,yLo),e(tb,EN),e(EN,LLo),e(tb,xLo),e(G,kLo),e(G,ab),e(ab,lie),e(lie,SLo),e(ab,RLo),e(ab,CN),e(CN,BLo),e(ab,PLo),e(G,$Lo),e(G,nb),e(nb,iie),e(iie,ILo),e(nb,qLo),e(nb,wN),e(wN,NLo),e(nb,jLo),e(G,DLo),e(G,sb),e(sb,die),e(die,GLo),e(sb,OLo),e(sb,AN),e(AN,VLo),e(sb,XLo),e(G,zLo),e(G,lb),e(lb,cie),e(cie,QLo),e(lb,WLo),e(lb,yN),e(yN,HLo),e(lb,ULo),e(G,JLo),e(G,ib),e(ib,fie),e(fie,YLo),e(ib,KLo),e(ib,LN),e(LN,ZLo),e(ib,e8o),e(G,o8o),e(G,db),e(db,mie),e(mie,r8o),e(db,t8o),e(db,xN),e(xN,a8o),e(db,n8o),e(G,s8o),e(G,cb),e(cb,gie),e(gie,l8o),e(cb,i8o),e(cb,kN),e(kN,d8o),e(cb,c8o),e(G,f8o),e(G,fb),e(fb,hie),e(hie,m8o),e(fb,g8o),e(fb,SN),e(SN,h8o),e(fb,p8o),e(G,_8o),e(G,mb),e(mb,pie),e(pie,u8o),e(mb,b8o),e(mb,RN),e(RN,F8o),e(mb,v8o),e(G,T8o),e(G,gb),e(gb,_ie),e(_ie,M8o),e(gb,E8o),e(gb,BN),e(BN,C8o),e(gb,w8o),e(G,A8o),e(G,hb),e(hb,uie),e(uie,y8o),e(hb,L8o),e(hb,PN),e(PN,x8o),e(hb,k8o),e(G,S8o),e(G,pb),e(pb,bie),e(bie,R8o),e(pb,B8o),e(pb,$N),e($N,P8o),e(pb,$8o),e(G,I8o),e(G,_b),e(_b,Fie),e(Fie,q8o),e(_b,N8o),e(_b,IN),e(IN,j8o),e(_b,D8o),e(G,G8o),e(G,ub),e(ub,vie),e(vie,O8o),e(ub,V8o),e(ub,qN),e(qN,X8o),e(ub,z8o),e(G,Q8o),e(G,bb),e(bb,Tie),e(Tie,W8o),e(bb,H8o),e(bb,NN),e(NN,U8o),e(bb,J8o),e(G,Y8o),e(G,Fb),e(Fb,Mie),e(Mie,K8o),e(Fb,Z8o),e(Fb,jN),e(jN,e7o),e(Fb,o7o),e(G,r7o),e(G,vb),e(vb,Eie),e(Eie,t7o),e(vb,a7o),e(vb,DN),e(DN,n7o),e(vb,s7o),e(G,l7o),e(G,Tb),e(Tb,Cie),e(Cie,i7o),e(Tb,d7o),e(Tb,GN),e(GN,c7o),e(Tb,f7o),e(G,m7o),e(G,Mb),e(Mb,wie),e(wie,g7o),e(Mb,h7o),e(Mb,ON),e(ON,p7o),e(Mb,_7o),e(G,u7o),e(G,Eb),e(Eb,Aie),e(Aie,b7o),e(Eb,F7o),e(Eb,VN),e(VN,v7o),e(Eb,T7o),e(G,M7o),e(G,Cb),e(Cb,yie),e(yie,E7o),e(Cb,C7o),e(Cb,XN),e(XN,w7o),e(Cb,A7o),e(G,y7o),e(G,wb),e(wb,Lie),e(Lie,L7o),e(wb,x7o),e(wb,zN),e(zN,k7o),e(wb,S7o),e(G,R7o),e(G,Ab),e(Ab,xie),e(xie,B7o),e(Ab,P7o),e(Ab,QN),e(QN,$7o),e(Ab,I7o),e(G,q7o),e(G,yb),e(yb,kie),e(kie,N7o),e(yb,j7o),e(yb,WN),e(WN,D7o),e(yb,G7o),e(G,O7o),e(G,Lb),e(Lb,Sie),e(Sie,V7o),e(Lb,X7o),e(Lb,HN),e(HN,z7o),e(Lb,Q7o),e(G,W7o),e(G,xb),e(xb,Rie),e(Rie,H7o),e(xb,U7o),e(xb,UN),e(UN,J7o),e(xb,Y7o),e(G,K7o),e(G,kb),e(kb,Bie),e(Bie,Z7o),e(kb,e9o),e(kb,JN),e(JN,o9o),e(kb,r9o),e(Ve,t9o),e(Ve,Sb),e(Sb,a9o),e(Sb,Pie),e(Pie,n9o),e(Sb,s9o),e(Sb,$ie),e($ie,l9o),e(Ve,i9o),e(Ve,Iie),e(Iie,d9o),e(Ve,c9o),g(Yw,Ve,null),b(c,ORe,u),b(c,ud,u),e(ud,Rb),e(Rb,qie),g(Kw,qie,null),e(ud,f9o),e(ud,Nie),e(Nie,m9o),b(c,VRe,u),b(c,tr,u),g(Zw,tr,null),e(tr,g9o),e(tr,bd),e(bd,h9o),e(bd,YN),e(YN,p9o),e(bd,_9o),e(bd,KN),e(KN,u9o),e(bd,b9o),e(tr,F9o),e(tr,eA),e(eA,v9o),e(eA,jie),e(jie,T9o),e(eA,M9o),e(tr,E9o),e(tr,Yr),g(oA,Yr,null),e(Yr,C9o),e(Yr,Die),e(Die,w9o),e(Yr,A9o),e(Yr,Fd),e(Fd,y9o),e(Fd,Gie),e(Gie,L9o),e(Fd,x9o),e(Fd,ZN),e(ZN,k9o),e(Fd,S9o),e(Yr,R9o),e(Yr,Oie),e(Oie,B9o),e(Yr,P9o),g(rA,Yr,null),e(tr,$9o),e(tr,Xe),g(tA,Xe,null),e(Xe,I9o),e(Xe,Vie),e(Vie,q9o),e(Xe,N9o),e(Xe,Ya),e(Ya,j9o),e(Ya,Xie),e(Xie,D9o),e(Ya,G9o),e(Ya,zie),e(zie,O9o),e(Ya,V9o),e(Ya,Qie),e(Qie,X9o),e(Ya,z9o),e(Xe,Q9o),e(Xe,da),e(da,Bb),e(Bb,Wie),e(Wie,W9o),e(Bb,H9o),e(Bb,ej),e(ej,U9o),e(Bb,J9o),e(da,Y9o),e(da,Pb),e(Pb,Hie),e(Hie,K9o),e(Pb,Z9o),e(Pb,oj),e(oj,exo),e(Pb,oxo),e(da,rxo),e(da,$b),e($b,Uie),e(Uie,txo),e($b,axo),e($b,rj),e(rj,nxo),e($b,sxo),e(da,lxo),e(da,Ib),e(Ib,Jie),e(Jie,ixo),e(Ib,dxo),e(Ib,tj),e(tj,cxo),e(Ib,fxo),e(da,mxo),e(da,qb),e(qb,Yie),e(Yie,gxo),e(qb,hxo),e(qb,aj),e(aj,pxo),e(qb,_xo),e(Xe,uxo),e(Xe,Nb),e(Nb,bxo),e(Nb,Kie),e(Kie,Fxo),e(Nb,vxo),e(Nb,Zie),e(Zie,Txo),e(Xe,Mxo),e(Xe,ede),e(ede,Exo),e(Xe,Cxo),g(aA,Xe,null),b(c,XRe,u),b(c,vd,u),e(vd,jb),e(jb,ode),g(nA,ode,null),e(vd,wxo),e(vd,rde),e(rde,Axo),b(c,zRe,u),b(c,ar,u),g(sA,ar,null),e(ar,yxo),e(ar,Td),e(Td,Lxo),e(Td,nj),e(nj,xxo),e(Td,kxo),e(Td,sj),e(sj,Sxo),e(Td,Rxo),e(ar,Bxo),e(ar,lA),e(lA,Pxo),e(lA,tde),e(tde,$xo),e(lA,Ixo),e(ar,qxo),e(ar,Kr),g(iA,Kr,null),e(Kr,Nxo),e(Kr,ade),e(ade,jxo),e(Kr,Dxo),e(Kr,Md),e(Md,Gxo),e(Md,nde),e(nde,Oxo),e(Md,Vxo),e(Md,lj),e(lj,Xxo),e(Md,zxo),e(Kr,Qxo),e(Kr,sde),e(sde,Wxo),e(Kr,Hxo),g(dA,Kr,null),e(ar,Uxo),e(ar,ze),g(cA,ze,null),e(ze,Jxo),e(ze,lde),e(lde,Yxo),e(ze,Kxo),e(ze,Ka),e(Ka,Zxo),e(Ka,ide),e(ide,eko),e(Ka,oko),e(Ka,dde),e(dde,rko),e(Ka,tko),e(Ka,cde),e(cde,ako),e(Ka,nko),e(ze,sko),e(ze,j),e(j,Db),e(Db,fde),e(fde,lko),e(Db,iko),e(Db,ij),e(ij,dko),e(Db,cko),e(j,fko),e(j,Gb),e(Gb,mde),e(mde,mko),e(Gb,gko),e(Gb,dj),e(dj,hko),e(Gb,pko),e(j,_ko),e(j,Ob),e(Ob,gde),e(gde,uko),e(Ob,bko),e(Ob,cj),e(cj,Fko),e(Ob,vko),e(j,Tko),e(j,Vb),e(Vb,hde),e(hde,Mko),e(Vb,Eko),e(Vb,fj),e(fj,Cko),e(Vb,wko),e(j,Ako),e(j,Xb),e(Xb,pde),e(pde,yko),e(Xb,Lko),e(Xb,mj),e(mj,xko),e(Xb,kko),e(j,Sko),e(j,zb),e(zb,_de),e(_de,Rko),e(zb,Bko),e(zb,gj),e(gj,Pko),e(zb,$ko),e(j,Iko),e(j,Qb),e(Qb,ude),e(ude,qko),e(Qb,Nko),e(Qb,hj),e(hj,jko),e(Qb,Dko),e(j,Gko),e(j,Wb),e(Wb,bde),e(bde,Oko),e(Wb,Vko),e(Wb,pj),e(pj,Xko),e(Wb,zko),e(j,Qko),e(j,Hb),e(Hb,Fde),e(Fde,Wko),e(Hb,Hko),e(Hb,_j),e(_j,Uko),e(Hb,Jko),e(j,Yko),e(j,Ub),e(Ub,vde),e(vde,Kko),e(Ub,Zko),e(Ub,uj),e(uj,eSo),e(Ub,oSo),e(j,rSo),e(j,Jb),e(Jb,Tde),e(Tde,tSo),e(Jb,aSo),e(Jb,bj),e(bj,nSo),e(Jb,sSo),e(j,lSo),e(j,Yb),e(Yb,Mde),e(Mde,iSo),e(Yb,dSo),e(Yb,Fj),e(Fj,cSo),e(Yb,fSo),e(j,mSo),e(j,Kb),e(Kb,Ede),e(Ede,gSo),e(Kb,hSo),e(Kb,vj),e(vj,pSo),e(Kb,_So),e(j,uSo),e(j,Zb),e(Zb,Cde),e(Cde,bSo),e(Zb,FSo),e(Zb,Tj),e(Tj,vSo),e(Zb,TSo),e(j,MSo),e(j,e5),e(e5,wde),e(wde,ESo),e(e5,CSo),e(e5,Mj),e(Mj,wSo),e(e5,ASo),e(j,ySo),e(j,o5),e(o5,Ade),e(Ade,LSo),e(o5,xSo),e(o5,Ej),e(Ej,kSo),e(o5,SSo),e(j,RSo),e(j,r5),e(r5,yde),e(yde,BSo),e(r5,PSo),e(r5,Cj),e(Cj,$So),e(r5,ISo),e(j,qSo),e(j,t5),e(t5,Lde),e(Lde,NSo),e(t5,jSo),e(t5,wj),e(wj,DSo),e(t5,GSo),e(j,OSo),e(j,a5),e(a5,xde),e(xde,VSo),e(a5,XSo),e(a5,Aj),e(Aj,zSo),e(a5,QSo),e(j,WSo),e(j,n5),e(n5,kde),e(kde,HSo),e(n5,USo),e(n5,yj),e(yj,JSo),e(n5,YSo),e(j,KSo),e(j,s5),e(s5,Sde),e(Sde,ZSo),e(s5,eRo),e(s5,Lj),e(Lj,oRo),e(s5,rRo),e(j,tRo),e(j,l5),e(l5,Rde),e(Rde,aRo),e(l5,nRo),e(l5,xj),e(xj,sRo),e(l5,lRo),e(j,iRo),e(j,i5),e(i5,Bde),e(Bde,dRo),e(i5,cRo),e(i5,kj),e(kj,fRo),e(i5,mRo),e(j,gRo),e(j,d5),e(d5,Pde),e(Pde,hRo),e(d5,pRo),e(d5,Sj),e(Sj,_Ro),e(d5,uRo),e(j,bRo),e(j,c5),e(c5,$de),e($de,FRo),e(c5,vRo),e(c5,Rj),e(Rj,TRo),e(c5,MRo),e(j,ERo),e(j,f5),e(f5,Ide),e(Ide,CRo),e(f5,wRo),e(f5,Bj),e(Bj,ARo),e(f5,yRo),e(j,LRo),e(j,m5),e(m5,qde),e(qde,xRo),e(m5,kRo),e(m5,Pj),e(Pj,SRo),e(m5,RRo),e(j,BRo),e(j,g5),e(g5,Nde),e(Nde,PRo),e(g5,$Ro),e(g5,$j),e($j,IRo),e(g5,qRo),e(j,NRo),e(j,h5),e(h5,jde),e(jde,jRo),e(h5,DRo),e(h5,Ij),e(Ij,GRo),e(h5,ORo),e(j,VRo),e(j,p5),e(p5,Dde),e(Dde,XRo),e(p5,zRo),e(p5,qj),e(qj,QRo),e(p5,WRo),e(j,HRo),e(j,_5),e(_5,Gde),e(Gde,URo),e(_5,JRo),e(_5,Nj),e(Nj,YRo),e(_5,KRo),e(j,ZRo),e(j,u5),e(u5,Ode),e(Ode,eBo),e(u5,oBo),e(u5,jj),e(jj,rBo),e(u5,tBo),e(j,aBo),e(j,b5),e(b5,Vde),e(Vde,nBo),e(b5,sBo),e(b5,Dj),e(Dj,lBo),e(b5,iBo),e(ze,dBo),e(ze,F5),e(F5,cBo),e(F5,Xde),e(Xde,fBo),e(F5,mBo),e(F5,zde),e(zde,gBo),e(ze,hBo),e(ze,Qde),e(Qde,pBo),e(ze,_Bo),g(fA,ze,null),b(c,QRe,u),b(c,Ed,u),e(Ed,v5),e(v5,Wde),g(mA,Wde,null),e(Ed,uBo),e(Ed,Hde),e(Hde,bBo),b(c,WRe,u),b(c,nr,u),g(gA,nr,null),e(nr,FBo),e(nr,Cd),e(Cd,vBo),e(Cd,Gj),e(Gj,TBo),e(Cd,MBo),e(Cd,Oj),e(Oj,EBo),e(Cd,CBo),e(nr,wBo),e(nr,hA),e(hA,ABo),e(hA,Ude),e(Ude,yBo),e(hA,LBo),e(nr,xBo),e(nr,Zr),g(pA,Zr,null),e(Zr,kBo),e(Zr,Jde),e(Jde,SBo),e(Zr,RBo),e(Zr,wd),e(wd,BBo),e(wd,Yde),e(Yde,PBo),e(wd,$Bo),e(wd,Vj),e(Vj,IBo),e(wd,qBo),e(Zr,NBo),e(Zr,Kde),e(Kde,jBo),e(Zr,DBo),g(_A,Zr,null),e(nr,GBo),e(nr,Qe),g(uA,Qe,null),e(Qe,OBo),e(Qe,Zde),e(Zde,VBo),e(Qe,XBo),e(Qe,Za),e(Za,zBo),e(Za,ece),e(ece,QBo),e(Za,WBo),e(Za,oce),e(oce,HBo),e(Za,UBo),e(Za,rce),e(rce,JBo),e(Za,YBo),e(Qe,KBo),e(Qe,R),e(R,T5),e(T5,tce),e(tce,ZBo),e(T5,ePo),e(T5,Xj),e(Xj,oPo),e(T5,rPo),e(R,tPo),e(R,M5),e(M5,ace),e(ace,aPo),e(M5,nPo),e(M5,zj),e(zj,sPo),e(M5,lPo),e(R,iPo),e(R,E5),e(E5,nce),e(nce,dPo),e(E5,cPo),e(E5,Qj),e(Qj,fPo),e(E5,mPo),e(R,gPo),e(R,C5),e(C5,sce),e(sce,hPo),e(C5,pPo),e(C5,Wj),e(Wj,_Po),e(C5,uPo),e(R,bPo),e(R,w5),e(w5,lce),e(lce,FPo),e(w5,vPo),e(w5,Hj),e(Hj,TPo),e(w5,MPo),e(R,EPo),e(R,A5),e(A5,ice),e(ice,CPo),e(A5,wPo),e(A5,Uj),e(Uj,APo),e(A5,yPo),e(R,LPo),e(R,y5),e(y5,dce),e(dce,xPo),e(y5,kPo),e(y5,Jj),e(Jj,SPo),e(y5,RPo),e(R,BPo),e(R,L5),e(L5,cce),e(cce,PPo),e(L5,$Po),e(L5,Yj),e(Yj,IPo),e(L5,qPo),e(R,NPo),e(R,x5),e(x5,fce),e(fce,jPo),e(x5,DPo),e(x5,Kj),e(Kj,GPo),e(x5,OPo),e(R,VPo),e(R,k5),e(k5,mce),e(mce,XPo),e(k5,zPo),e(k5,Zj),e(Zj,QPo),e(k5,WPo),e(R,HPo),e(R,S5),e(S5,gce),e(gce,UPo),e(S5,JPo),e(S5,eD),e(eD,YPo),e(S5,KPo),e(R,ZPo),e(R,R5),e(R5,hce),e(hce,e$o),e(R5,o$o),e(R5,oD),e(oD,r$o),e(R5,t$o),e(R,a$o),e(R,B5),e(B5,pce),e(pce,n$o),e(B5,s$o),e(B5,rD),e(rD,l$o),e(B5,i$o),e(R,d$o),e(R,P5),e(P5,_ce),e(_ce,c$o),e(P5,f$o),e(P5,tD),e(tD,m$o),e(P5,g$o),e(R,h$o),e(R,$5),e($5,uce),e(uce,p$o),e($5,_$o),e($5,aD),e(aD,u$o),e($5,b$o),e(R,F$o),e(R,I5),e(I5,bce),e(bce,v$o),e(I5,T$o),e(I5,nD),e(nD,M$o),e(I5,E$o),e(R,C$o),e(R,q5),e(q5,Fce),e(Fce,w$o),e(q5,A$o),e(q5,sD),e(sD,y$o),e(q5,L$o),e(R,x$o),e(R,N5),e(N5,vce),e(vce,k$o),e(N5,S$o),e(N5,lD),e(lD,R$o),e(N5,B$o),e(R,P$o),e(R,j5),e(j5,Tce),e(Tce,$$o),e(j5,I$o),e(j5,iD),e(iD,q$o),e(j5,N$o),e(R,j$o),e(R,D5),e(D5,Mce),e(Mce,D$o),e(D5,G$o),e(D5,dD),e(dD,O$o),e(D5,V$o),e(R,X$o),e(R,G5),e(G5,Ece),e(Ece,z$o),e(G5,Q$o),e(G5,cD),e(cD,W$o),e(G5,H$o),e(R,U$o),e(R,O5),e(O5,Cce),e(Cce,J$o),e(O5,Y$o),e(O5,fD),e(fD,K$o),e(O5,Z$o),e(R,eIo),e(R,V5),e(V5,wce),e(wce,oIo),e(V5,rIo),e(V5,mD),e(mD,tIo),e(V5,aIo),e(R,nIo),e(R,X5),e(X5,Ace),e(Ace,sIo),e(X5,lIo),e(X5,gD),e(gD,iIo),e(X5,dIo),e(R,cIo),e(R,z5),e(z5,yce),e(yce,fIo),e(z5,mIo),e(z5,hD),e(hD,gIo),e(z5,hIo),e(R,pIo),e(R,Q5),e(Q5,Lce),e(Lce,_Io),e(Q5,uIo),e(Q5,pD),e(pD,bIo),e(Q5,FIo),e(R,vIo),e(R,W5),e(W5,xce),e(xce,TIo),e(W5,MIo),e(W5,_D),e(_D,EIo),e(W5,CIo),e(R,wIo),e(R,H5),e(H5,kce),e(kce,AIo),e(H5,yIo),e(H5,uD),e(uD,LIo),e(H5,xIo),e(R,kIo),e(R,U5),e(U5,Sce),e(Sce,SIo),e(U5,RIo),e(U5,bD),e(bD,BIo),e(U5,PIo),e(R,$Io),e(R,J5),e(J5,Rce),e(Rce,IIo),e(J5,qIo),e(J5,FD),e(FD,NIo),e(J5,jIo),e(R,DIo),e(R,Y5),e(Y5,Bce),e(Bce,GIo),e(Y5,OIo),e(Y5,vD),e(vD,VIo),e(Y5,XIo),e(R,zIo),e(R,K5),e(K5,Pce),e(Pce,QIo),e(K5,WIo),e(K5,TD),e(TD,HIo),e(K5,UIo),e(R,JIo),e(R,Z5),e(Z5,$ce),e($ce,YIo),e(Z5,KIo),e(Z5,MD),e(MD,ZIo),e(Z5,eqo),e(R,oqo),e(R,eF),e(eF,Ice),e(Ice,rqo),e(eF,tqo),e(eF,ED),e(ED,aqo),e(eF,nqo),e(R,sqo),e(R,oF),e(oF,qce),e(qce,lqo),e(oF,iqo),e(oF,CD),e(CD,dqo),e(oF,cqo),e(R,fqo),e(R,rF),e(rF,Nce),e(Nce,mqo),e(rF,gqo),e(rF,wD),e(wD,hqo),e(rF,pqo),e(R,_qo),e(R,tF),e(tF,jce),e(jce,uqo),e(tF,bqo),e(tF,AD),e(AD,Fqo),e(tF,vqo),e(R,Tqo),e(R,aF),e(aF,Dce),e(Dce,Mqo),e(aF,Eqo),e(aF,yD),e(yD,Cqo),e(aF,wqo),e(R,Aqo),e(R,nF),e(nF,Gce),e(Gce,yqo),e(nF,Lqo),e(nF,LD),e(LD,xqo),e(nF,kqo),e(Qe,Sqo),e(Qe,sF),e(sF,Rqo),e(sF,Oce),e(Oce,Bqo),e(sF,Pqo),e(sF,Vce),e(Vce,$qo),e(Qe,Iqo),e(Qe,Xce),e(Xce,qqo),e(Qe,Nqo),g(bA,Qe,null),b(c,HRe,u),b(c,Ad,u),e(Ad,lF),e(lF,zce),g(FA,zce,null),e(Ad,jqo),e(Ad,Qce),e(Qce,Dqo),b(c,URe,u),b(c,sr,u),g(vA,sr,null),e(sr,Gqo),e(sr,yd),e(yd,Oqo),e(yd,xD),e(xD,Vqo),e(yd,Xqo),e(yd,kD),e(kD,zqo),e(yd,Qqo),e(sr,Wqo),e(sr,TA),e(TA,Hqo),e(TA,Wce),e(Wce,Uqo),e(TA,Jqo),e(sr,Yqo),e(sr,et),g(MA,et,null),e(et,Kqo),e(et,Hce),e(Hce,Zqo),e(et,eNo),e(et,Ld),e(Ld,oNo),e(Ld,Uce),e(Uce,rNo),e(Ld,tNo),e(Ld,SD),e(SD,aNo),e(Ld,nNo),e(et,sNo),e(et,Jce),e(Jce,lNo),e(et,iNo),g(EA,et,null),e(sr,dNo),e(sr,We),g(CA,We,null),e(We,cNo),e(We,Yce),e(Yce,fNo),e(We,mNo),e(We,en),e(en,gNo),e(en,Kce),e(Kce,hNo),e(en,pNo),e(en,Zce),e(Zce,_No),e(en,uNo),e(en,efe),e(efe,bNo),e(en,FNo),e(We,vNo),e(We,ofe),e(ofe,iF),e(iF,rfe),e(rfe,TNo),e(iF,MNo),e(iF,RD),e(RD,ENo),e(iF,CNo),e(We,wNo),e(We,dF),e(dF,ANo),e(dF,tfe),e(tfe,yNo),e(dF,LNo),e(dF,afe),e(afe,xNo),e(We,kNo),e(We,nfe),e(nfe,SNo),e(We,RNo),g(wA,We,null),b(c,JRe,u),b(c,xd,u),e(xd,cF),e(cF,sfe),g(AA,sfe,null),e(xd,BNo),e(xd,lfe),e(lfe,PNo),b(c,YRe,u),b(c,lr,u),g(yA,lr,null),e(lr,$No),e(lr,kd),e(kd,INo),e(kd,BD),e(BD,qNo),e(kd,NNo),e(kd,PD),e(PD,jNo),e(kd,DNo),e(lr,GNo),e(lr,LA),e(LA,ONo),e(LA,ife),e(ife,VNo),e(LA,XNo),e(lr,zNo),e(lr,ot),g(xA,ot,null),e(ot,QNo),e(ot,dfe),e(dfe,WNo),e(ot,HNo),e(ot,Sd),e(Sd,UNo),e(Sd,cfe),e(cfe,JNo),e(Sd,YNo),e(Sd,$D),e($D,KNo),e(Sd,ZNo),e(ot,ejo),e(ot,ffe),e(ffe,ojo),e(ot,rjo),g(kA,ot,null),e(lr,tjo),e(lr,He),g(SA,He,null),e(He,ajo),e(He,mfe),e(mfe,njo),e(He,sjo),e(He,on),e(on,ljo),e(on,gfe),e(gfe,ijo),e(on,djo),e(on,hfe),e(hfe,cjo),e(on,fjo),e(on,pfe),e(pfe,mjo),e(on,gjo),e(He,hjo),e(He,ce),e(ce,fF),e(fF,_fe),e(_fe,pjo),e(fF,_jo),e(fF,ID),e(ID,ujo),e(fF,bjo),e(ce,Fjo),e(ce,mF),e(mF,ufe),e(ufe,vjo),e(mF,Tjo),e(mF,qD),e(qD,Mjo),e(mF,Ejo),e(ce,Cjo),e(ce,Ds),e(Ds,bfe),e(bfe,wjo),e(Ds,Ajo),e(Ds,ND),e(ND,yjo),e(Ds,Ljo),e(Ds,jD),e(jD,xjo),e(Ds,kjo),e(ce,Sjo),e(ce,gF),e(gF,Ffe),e(Ffe,Rjo),e(gF,Bjo),e(gF,DD),e(DD,Pjo),e(gF,$jo),e(ce,Ijo),e(ce,ma),e(ma,vfe),e(vfe,qjo),e(ma,Njo),e(ma,GD),e(GD,jjo),e(ma,Djo),e(ma,OD),e(OD,Gjo),e(ma,Ojo),e(ma,VD),e(VD,Vjo),e(ma,Xjo),e(ce,zjo),e(ce,hF),e(hF,Tfe),e(Tfe,Qjo),e(hF,Wjo),e(hF,XD),e(XD,Hjo),e(hF,Ujo),e(ce,Jjo),e(ce,pF),e(pF,Mfe),e(Mfe,Yjo),e(pF,Kjo),e(pF,zD),e(zD,Zjo),e(pF,eDo),e(ce,oDo),e(ce,_F),e(_F,Efe),e(Efe,rDo),e(_F,tDo),e(_F,QD),e(QD,aDo),e(_F,nDo),e(ce,sDo),e(ce,uF),e(uF,Cfe),e(Cfe,lDo),e(uF,iDo),e(uF,WD),e(WD,dDo),e(uF,cDo),e(ce,fDo),e(ce,bF),e(bF,wfe),e(wfe,mDo),e(bF,gDo),e(bF,HD),e(HD,hDo),e(bF,pDo),e(ce,_Do),e(ce,FF),e(FF,Afe),e(Afe,uDo),e(FF,bDo),e(FF,UD),e(UD,FDo),e(FF,vDo),e(ce,TDo),e(ce,vF),e(vF,yfe),e(yfe,MDo),e(vF,EDo),e(vF,JD),e(JD,CDo),e(vF,wDo),e(He,ADo),e(He,TF),e(TF,yDo),e(TF,Lfe),e(Lfe,LDo),e(TF,xDo),e(TF,xfe),e(xfe,kDo),e(He,SDo),e(He,kfe),e(kfe,RDo),e(He,BDo),g(RA,He,null),b(c,KRe,u),b(c,Rd,u),e(Rd,MF),e(MF,Sfe),g(BA,Sfe,null),e(Rd,PDo),e(Rd,Rfe),e(Rfe,$Do),b(c,ZRe,u),b(c,ir,u),g(PA,ir,null),e(ir,IDo),e(ir,Bd),e(Bd,qDo),e(Bd,YD),e(YD,NDo),e(Bd,jDo),e(Bd,KD),e(KD,DDo),e(Bd,GDo),e(ir,ODo),e(ir,$A),e($A,VDo),e($A,Bfe),e(Bfe,XDo),e($A,zDo),e(ir,QDo),e(ir,rt),g(IA,rt,null),e(rt,WDo),e(rt,Pfe),e(Pfe,HDo),e(rt,UDo),e(rt,Pd),e(Pd,JDo),e(Pd,$fe),e($fe,YDo),e(Pd,KDo),e(Pd,ZD),e(ZD,ZDo),e(Pd,eGo),e(rt,oGo),e(rt,Ife),e(Ife,rGo),e(rt,tGo),g(qA,rt,null),e(ir,aGo),e(ir,Ue),g(NA,Ue,null),e(Ue,nGo),e(Ue,qfe),e(qfe,sGo),e(Ue,lGo),e(Ue,rn),e(rn,iGo),e(rn,Nfe),e(Nfe,dGo),e(rn,cGo),e(rn,jfe),e(jfe,fGo),e(rn,mGo),e(rn,Dfe),e(Dfe,gGo),e(rn,hGo),e(Ue,pGo),e(Ue,Gfe),e(Gfe,EF),e(EF,Ofe),e(Ofe,_Go),e(EF,uGo),e(EF,eG),e(eG,bGo),e(EF,FGo),e(Ue,vGo),e(Ue,CF),e(CF,TGo),e(CF,Vfe),e(Vfe,MGo),e(CF,EGo),e(CF,Xfe),e(Xfe,CGo),e(Ue,wGo),e(Ue,zfe),e(zfe,AGo),e(Ue,yGo),g(jA,Ue,null),b(c,eBe,u),b(c,$d,u),e($d,wF),e(wF,Qfe),g(DA,Qfe,null),e($d,LGo),e($d,Wfe),e(Wfe,xGo),b(c,oBe,u),b(c,dr,u),g(GA,dr,null),e(dr,kGo),e(dr,Id),e(Id,SGo),e(Id,oG),e(oG,RGo),e(Id,BGo),e(Id,rG),e(rG,PGo),e(Id,$Go),e(dr,IGo),e(dr,OA),e(OA,qGo),e(OA,Hfe),e(Hfe,NGo),e(OA,jGo),e(dr,DGo),e(dr,tt),g(VA,tt,null),e(tt,GGo),e(tt,Ufe),e(Ufe,OGo),e(tt,VGo),e(tt,qd),e(qd,XGo),e(qd,Jfe),e(Jfe,zGo),e(qd,QGo),e(qd,tG),e(tG,WGo),e(qd,HGo),e(tt,UGo),e(tt,Yfe),e(Yfe,JGo),e(tt,YGo),g(XA,tt,null),e(dr,KGo),e(dr,Je),g(zA,Je,null),e(Je,ZGo),e(Je,Kfe),e(Kfe,eOo),e(Je,oOo),e(Je,tn),e(tn,rOo),e(tn,Zfe),e(Zfe,tOo),e(tn,aOo),e(tn,eme),e(eme,nOo),e(tn,sOo),e(tn,ome),e(ome,lOo),e(tn,iOo),e(Je,dOo),e(Je,Se),e(Se,AF),e(AF,rme),e(rme,cOo),e(AF,fOo),e(AF,aG),e(aG,mOo),e(AF,gOo),e(Se,hOo),e(Se,yF),e(yF,tme),e(tme,pOo),e(yF,_Oo),e(yF,nG),e(nG,uOo),e(yF,bOo),e(Se,FOo),e(Se,LF),e(LF,ame),e(ame,vOo),e(LF,TOo),e(LF,sG),e(sG,MOo),e(LF,EOo),e(Se,COo),e(Se,xF),e(xF,nme),e(nme,wOo),e(xF,AOo),e(xF,lG),e(lG,yOo),e(xF,LOo),e(Se,xOo),e(Se,kF),e(kF,sme),e(sme,kOo),e(kF,SOo),e(kF,iG),e(iG,ROo),e(kF,BOo),e(Se,POo),e(Se,SF),e(SF,lme),e(lme,$Oo),e(SF,IOo),e(SF,dG),e(dG,qOo),e(SF,NOo),e(Se,jOo),e(Se,RF),e(RF,ime),e(ime,DOo),e(RF,GOo),e(RF,cG),e(cG,OOo),e(RF,VOo),e(Se,XOo),e(Se,BF),e(BF,dme),e(dme,zOo),e(BF,QOo),e(BF,fG),e(fG,WOo),e(BF,HOo),e(Je,UOo),e(Je,PF),e(PF,JOo),e(PF,cme),e(cme,YOo),e(PF,KOo),e(PF,fme),e(fme,ZOo),e(Je,eVo),e(Je,mme),e(mme,oVo),e(Je,rVo),g(QA,Je,null),b(c,rBe,u),b(c,Nd,u),e(Nd,$F),e($F,gme),g(WA,gme,null),e(Nd,tVo),e(Nd,hme),e(hme,aVo),b(c,tBe,u),b(c,cr,u),g(HA,cr,null),e(cr,nVo),e(cr,jd),e(jd,sVo),e(jd,mG),e(mG,lVo),e(jd,iVo),e(jd,gG),e(gG,dVo),e(jd,cVo),e(cr,fVo),e(cr,UA),e(UA,mVo),e(UA,pme),e(pme,gVo),e(UA,hVo),e(cr,pVo),e(cr,at),g(JA,at,null),e(at,_Vo),e(at,_me),e(_me,uVo),e(at,bVo),e(at,Dd),e(Dd,FVo),e(Dd,ume),e(ume,vVo),e(Dd,TVo),e(Dd,hG),e(hG,MVo),e(Dd,EVo),e(at,CVo),e(at,bme),e(bme,wVo),e(at,AVo),g(YA,at,null),e(cr,yVo),e(cr,Ye),g(KA,Ye,null),e(Ye,LVo),e(Ye,Fme),e(Fme,xVo),e(Ye,kVo),e(Ye,an),e(an,SVo),e(an,vme),e(vme,RVo),e(an,BVo),e(an,Tme),e(Tme,PVo),e(an,$Vo),e(an,Mme),e(Mme,IVo),e(an,qVo),e(Ye,NVo),e(Ye,nn),e(nn,IF),e(IF,Eme),e(Eme,jVo),e(IF,DVo),e(IF,pG),e(pG,GVo),e(IF,OVo),e(nn,VVo),e(nn,qF),e(qF,Cme),e(Cme,XVo),e(qF,zVo),e(qF,_G),e(_G,QVo),e(qF,WVo),e(nn,HVo),e(nn,NF),e(NF,wme),e(wme,UVo),e(NF,JVo),e(NF,uG),e(uG,YVo),e(NF,KVo),e(nn,ZVo),e(nn,jF),e(jF,Ame),e(Ame,eXo),e(jF,oXo),e(jF,bG),e(bG,rXo),e(jF,tXo),e(Ye,aXo),e(Ye,DF),e(DF,nXo),e(DF,yme),e(yme,sXo),e(DF,lXo),e(DF,Lme),e(Lme,iXo),e(Ye,dXo),e(Ye,xme),e(xme,cXo),e(Ye,fXo),g(ZA,Ye,null),b(c,aBe,u),b(c,Gd,u),e(Gd,GF),e(GF,kme),g(e0,kme,null),e(Gd,mXo),e(Gd,Sme),e(Sme,gXo),b(c,nBe,u),b(c,fr,u),g(o0,fr,null),e(fr,hXo),e(fr,Od),e(Od,pXo),e(Od,FG),e(FG,_Xo),e(Od,uXo),e(Od,vG),e(vG,bXo),e(Od,FXo),e(fr,vXo),e(fr,r0),e(r0,TXo),e(r0,Rme),e(Rme,MXo),e(r0,EXo),e(fr,CXo),e(fr,nt),g(t0,nt,null),e(nt,wXo),e(nt,Bme),e(Bme,AXo),e(nt,yXo),e(nt,Vd),e(Vd,LXo),e(Vd,Pme),e(Pme,xXo),e(Vd,kXo),e(Vd,TG),e(TG,SXo),e(Vd,RXo),e(nt,BXo),e(nt,$me),e($me,PXo),e(nt,$Xo),g(a0,nt,null),e(fr,IXo),e(fr,Ke),g(n0,Ke,null),e(Ke,qXo),e(Ke,Ime),e(Ime,NXo),e(Ke,jXo),e(Ke,sn),e(sn,DXo),e(sn,qme),e(qme,GXo),e(sn,OXo),e(sn,Nme),e(Nme,VXo),e(sn,XXo),e(sn,jme),e(jme,zXo),e(sn,QXo),e(Ke,WXo),e(Ke,Re),e(Re,OF),e(OF,Dme),e(Dme,HXo),e(OF,UXo),e(OF,MG),e(MG,JXo),e(OF,YXo),e(Re,KXo),e(Re,VF),e(VF,Gme),e(Gme,ZXo),e(VF,ezo),e(VF,EG),e(EG,ozo),e(VF,rzo),e(Re,tzo),e(Re,XF),e(XF,Ome),e(Ome,azo),e(XF,nzo),e(XF,CG),e(CG,szo),e(XF,lzo),e(Re,izo),e(Re,zF),e(zF,Vme),e(Vme,dzo),e(zF,czo),e(zF,wG),e(wG,fzo),e(zF,mzo),e(Re,gzo),e(Re,QF),e(QF,Xme),e(Xme,hzo),e(QF,pzo),e(QF,AG),e(AG,_zo),e(QF,uzo),e(Re,bzo),e(Re,WF),e(WF,zme),e(zme,Fzo),e(WF,vzo),e(WF,yG),e(yG,Tzo),e(WF,Mzo),e(Re,Ezo),e(Re,HF),e(HF,Qme),e(Qme,Czo),e(HF,wzo),e(HF,LG),e(LG,Azo),e(HF,yzo),e(Re,Lzo),e(Re,UF),e(UF,Wme),e(Wme,xzo),e(UF,kzo),e(UF,xG),e(xG,Szo),e(UF,Rzo),e(Ke,Bzo),e(Ke,JF),e(JF,Pzo),e(JF,Hme),e(Hme,$zo),e(JF,Izo),e(JF,Ume),e(Ume,qzo),e(Ke,Nzo),e(Ke,Jme),e(Jme,jzo),e(Ke,Dzo),g(s0,Ke,null),b(c,sBe,u),b(c,Xd,u),e(Xd,YF),e(YF,Yme),g(l0,Yme,null),e(Xd,Gzo),e(Xd,Kme),e(Kme,Ozo),b(c,lBe,u),b(c,mr,u),g(i0,mr,null),e(mr,Vzo),e(mr,zd),e(zd,Xzo),e(zd,kG),e(kG,zzo),e(zd,Qzo),e(zd,SG),e(SG,Wzo),e(zd,Hzo),e(mr,Uzo),e(mr,d0),e(d0,Jzo),e(d0,Zme),e(Zme,Yzo),e(d0,Kzo),e(mr,Zzo),e(mr,st),g(c0,st,null),e(st,eQo),e(st,ege),e(ege,oQo),e(st,rQo),e(st,Qd),e(Qd,tQo),e(Qd,oge),e(oge,aQo),e(Qd,nQo),e(Qd,RG),e(RG,sQo),e(Qd,lQo),e(st,iQo),e(st,rge),e(rge,dQo),e(st,cQo),g(f0,st,null),e(mr,fQo),e(mr,Ze),g(m0,Ze,null),e(Ze,mQo),e(Ze,tge),e(tge,gQo),e(Ze,hQo),e(Ze,ln),e(ln,pQo),e(ln,age),e(age,_Qo),e(ln,uQo),e(ln,nge),e(nge,bQo),e(ln,FQo),e(ln,sge),e(sge,vQo),e(ln,TQo),e(Ze,MQo),e(Ze,g0),e(g0,KF),e(KF,lge),e(lge,EQo),e(KF,CQo),e(KF,BG),e(BG,wQo),e(KF,AQo),e(g0,yQo),e(g0,ZF),e(ZF,ige),e(ige,LQo),e(ZF,xQo),e(ZF,PG),e(PG,kQo),e(ZF,SQo),e(Ze,RQo),e(Ze,ev),e(ev,BQo),e(ev,dge),e(dge,PQo),e(ev,$Qo),e(ev,cge),e(cge,IQo),e(Ze,qQo),e(Ze,fge),e(fge,NQo),e(Ze,jQo),g(h0,Ze,null),b(c,iBe,u),b(c,Wd,u),e(Wd,ov),e(ov,mge),g(p0,mge,null),e(Wd,DQo),e(Wd,gge),e(gge,GQo),b(c,dBe,u),b(c,gr,u),g(_0,gr,null),e(gr,OQo),e(gr,Hd),e(Hd,VQo),e(Hd,$G),e($G,XQo),e(Hd,zQo),e(Hd,IG),e(IG,QQo),e(Hd,WQo),e(gr,HQo),e(gr,u0),e(u0,UQo),e(u0,hge),e(hge,JQo),e(u0,YQo),e(gr,KQo),e(gr,lt),g(b0,lt,null),e(lt,ZQo),e(lt,pge),e(pge,eWo),e(lt,oWo),e(lt,Ud),e(Ud,rWo),e(Ud,_ge),e(_ge,tWo),e(Ud,aWo),e(Ud,qG),e(qG,nWo),e(Ud,sWo),e(lt,lWo),e(lt,uge),e(uge,iWo),e(lt,dWo),g(F0,lt,null),e(gr,cWo),e(gr,eo),g(v0,eo,null),e(eo,fWo),e(eo,bge),e(bge,mWo),e(eo,gWo),e(eo,dn),e(dn,hWo),e(dn,Fge),e(Fge,pWo),e(dn,_Wo),e(dn,vge),e(vge,uWo),e(dn,bWo),e(dn,Tge),e(Tge,FWo),e(dn,vWo),e(eo,TWo),e(eo,cn),e(cn,rv),e(rv,Mge),e(Mge,MWo),e(rv,EWo),e(rv,NG),e(NG,CWo),e(rv,wWo),e(cn,AWo),e(cn,tv),e(tv,Ege),e(Ege,yWo),e(tv,LWo),e(tv,jG),e(jG,xWo),e(tv,kWo),e(cn,SWo),e(cn,av),e(av,Cge),e(Cge,RWo),e(av,BWo),e(av,DG),e(DG,PWo),e(av,$Wo),e(cn,IWo),e(cn,nv),e(nv,wge),e(wge,qWo),e(nv,NWo),e(nv,GG),e(GG,jWo),e(nv,DWo),e(eo,GWo),e(eo,sv),e(sv,OWo),e(sv,Age),e(Age,VWo),e(sv,XWo),e(sv,yge),e(yge,zWo),e(eo,QWo),e(eo,Lge),e(Lge,WWo),e(eo,HWo),g(T0,eo,null),b(c,cBe,u),b(c,Jd,u),e(Jd,lv),e(lv,xge),g(M0,xge,null),e(Jd,UWo),e(Jd,kge),e(kge,JWo),b(c,fBe,u),b(c,hr,u),g(E0,hr,null),e(hr,YWo),e(hr,Yd),e(Yd,KWo),e(Yd,OG),e(OG,ZWo),e(Yd,eHo),e(Yd,VG),e(VG,oHo),e(Yd,rHo),e(hr,tHo),e(hr,C0),e(C0,aHo),e(C0,Sge),e(Sge,nHo),e(C0,sHo),e(hr,lHo),e(hr,it),g(w0,it,null),e(it,iHo),e(it,Rge),e(Rge,dHo),e(it,cHo),e(it,Kd),e(Kd,fHo),e(Kd,Bge),e(Bge,mHo),e(Kd,gHo),e(Kd,XG),e(XG,hHo),e(Kd,pHo),e(it,_Ho),e(it,Pge),e(Pge,uHo),e(it,bHo),g(A0,it,null),e(hr,FHo),e(hr,oo),g(y0,oo,null),e(oo,vHo),e(oo,$ge),e($ge,THo),e(oo,MHo),e(oo,fn),e(fn,EHo),e(fn,Ige),e(Ige,CHo),e(fn,wHo),e(fn,qge),e(qge,AHo),e(fn,yHo),e(fn,Nge),e(Nge,LHo),e(fn,xHo),e(oo,kHo),e(oo,Zd),e(Zd,iv),e(iv,jge),e(jge,SHo),e(iv,RHo),e(iv,zG),e(zG,BHo),e(iv,PHo),e(Zd,$Ho),e(Zd,dv),e(dv,Dge),e(Dge,IHo),e(dv,qHo),e(dv,QG),e(QG,NHo),e(dv,jHo),e(Zd,DHo),e(Zd,cv),e(cv,Gge),e(Gge,GHo),e(cv,OHo),e(cv,WG),e(WG,VHo),e(cv,XHo),e(oo,zHo),e(oo,fv),e(fv,QHo),e(fv,Oge),e(Oge,WHo),e(fv,HHo),e(fv,Vge),e(Vge,UHo),e(oo,JHo),e(oo,Xge),e(Xge,YHo),e(oo,KHo),g(L0,oo,null),b(c,mBe,u),b(c,ec,u),e(ec,mv),e(mv,zge),g(x0,zge,null),e(ec,ZHo),e(ec,Qge),e(Qge,eUo),b(c,gBe,u),b(c,pr,u),g(k0,pr,null),e(pr,oUo),e(pr,oc),e(oc,rUo),e(oc,HG),e(HG,tUo),e(oc,aUo),e(oc,UG),e(UG,nUo),e(oc,sUo),e(pr,lUo),e(pr,S0),e(S0,iUo),e(S0,Wge),e(Wge,dUo),e(S0,cUo),e(pr,fUo),e(pr,dt),g(R0,dt,null),e(dt,mUo),e(dt,Hge),e(Hge,gUo),e(dt,hUo),e(dt,rc),e(rc,pUo),e(rc,Uge),e(Uge,_Uo),e(rc,uUo),e(rc,JG),e(JG,bUo),e(rc,FUo),e(dt,vUo),e(dt,Jge),e(Jge,TUo),e(dt,MUo),g(B0,dt,null),e(pr,EUo),e(pr,ro),g(P0,ro,null),e(ro,CUo),e(ro,Yge),e(Yge,wUo),e(ro,AUo),e(ro,mn),e(mn,yUo),e(mn,Kge),e(Kge,LUo),e(mn,xUo),e(mn,Zge),e(Zge,kUo),e(mn,SUo),e(mn,ehe),e(ehe,RUo),e(mn,BUo),e(ro,PUo),e(ro,ohe),e(ohe,gv),e(gv,rhe),e(rhe,$Uo),e(gv,IUo),e(gv,YG),e(YG,qUo),e(gv,NUo),e(ro,jUo),e(ro,hv),e(hv,DUo),e(hv,the),e(the,GUo),e(hv,OUo),e(hv,ahe),e(ahe,VUo),e(ro,XUo),e(ro,nhe),e(nhe,zUo),e(ro,QUo),g($0,ro,null),b(c,hBe,u),b(c,tc,u),e(tc,pv),e(pv,she),g(I0,she,null),e(tc,WUo),e(tc,lhe),e(lhe,HUo),b(c,pBe,u),b(c,_r,u),g(q0,_r,null),e(_r,UUo),e(_r,ac),e(ac,JUo),e(ac,KG),e(KG,YUo),e(ac,KUo),e(ac,ZG),e(ZG,ZUo),e(ac,eJo),e(_r,oJo),e(_r,N0),e(N0,rJo),e(N0,ihe),e(ihe,tJo),e(N0,aJo),e(_r,nJo),e(_r,ct),g(j0,ct,null),e(ct,sJo),e(ct,dhe),e(dhe,lJo),e(ct,iJo),e(ct,nc),e(nc,dJo),e(nc,che),e(che,cJo),e(nc,fJo),e(nc,eO),e(eO,mJo),e(nc,gJo),e(ct,hJo),e(ct,fhe),e(fhe,pJo),e(ct,_Jo),g(D0,ct,null),e(_r,uJo),e(_r,to),g(G0,to,null),e(to,bJo),e(to,mhe),e(mhe,FJo),e(to,vJo),e(to,gn),e(gn,TJo),e(gn,ghe),e(ghe,MJo),e(gn,EJo),e(gn,hhe),e(hhe,CJo),e(gn,wJo),e(gn,phe),e(phe,AJo),e(gn,yJo),e(to,LJo),e(to,_he),e(_he,_v),e(_v,uhe),e(uhe,xJo),e(_v,kJo),e(_v,oO),e(oO,SJo),e(_v,RJo),e(to,BJo),e(to,uv),e(uv,PJo),e(uv,bhe),e(bhe,$Jo),e(uv,IJo),e(uv,Fhe),e(Fhe,qJo),e(to,NJo),e(to,vhe),e(vhe,jJo),e(to,DJo),g(O0,to,null),b(c,_Be,u),b(c,sc,u),e(sc,bv),e(bv,The),g(V0,The,null),e(sc,GJo),e(sc,Mhe),e(Mhe,OJo),b(c,uBe,u),b(c,ur,u),g(X0,ur,null),e(ur,VJo),e(ur,lc),e(lc,XJo),e(lc,rO),e(rO,zJo),e(lc,QJo),e(lc,tO),e(tO,WJo),e(lc,HJo),e(ur,UJo),e(ur,z0),e(z0,JJo),e(z0,Ehe),e(Ehe,YJo),e(z0,KJo),e(ur,ZJo),e(ur,ft),g(Q0,ft,null),e(ft,eYo),e(ft,Che),e(Che,oYo),e(ft,rYo),e(ft,ic),e(ic,tYo),e(ic,whe),e(whe,aYo),e(ic,nYo),e(ic,aO),e(aO,sYo),e(ic,lYo),e(ft,iYo),e(ft,Ahe),e(Ahe,dYo),e(ft,cYo),g(W0,ft,null),e(ur,fYo),e(ur,ao),g(H0,ao,null),e(ao,mYo),e(ao,yhe),e(yhe,gYo),e(ao,hYo),e(ao,hn),e(hn,pYo),e(hn,Lhe),e(Lhe,_Yo),e(hn,uYo),e(hn,xhe),e(xhe,bYo),e(hn,FYo),e(hn,khe),e(khe,vYo),e(hn,TYo),e(ao,MYo),e(ao,dc),e(dc,Fv),e(Fv,She),e(She,EYo),e(Fv,CYo),e(Fv,nO),e(nO,wYo),e(Fv,AYo),e(dc,yYo),e(dc,vv),e(vv,Rhe),e(Rhe,LYo),e(vv,xYo),e(vv,sO),e(sO,kYo),e(vv,SYo),e(dc,RYo),e(dc,Tv),e(Tv,Bhe),e(Bhe,BYo),e(Tv,PYo),e(Tv,lO),e(lO,$Yo),e(Tv,IYo),e(ao,qYo),e(ao,Mv),e(Mv,NYo),e(Mv,Phe),e(Phe,jYo),e(Mv,DYo),e(Mv,$he),e($he,GYo),e(ao,OYo),e(ao,Ihe),e(Ihe,VYo),e(ao,XYo),g(U0,ao,null),b(c,bBe,u),b(c,cc,u),e(cc,Ev),e(Ev,qhe),g(J0,qhe,null),e(cc,zYo),e(cc,Nhe),e(Nhe,QYo),b(c,FBe,u),b(c,br,u),g(Y0,br,null),e(br,WYo),e(br,fc),e(fc,HYo),e(fc,iO),e(iO,UYo),e(fc,JYo),e(fc,dO),e(dO,YYo),e(fc,KYo),e(br,ZYo),e(br,K0),e(K0,eKo),e(K0,jhe),e(jhe,oKo),e(K0,rKo),e(br,tKo),e(br,mt),g(Z0,mt,null),e(mt,aKo),e(mt,Dhe),e(Dhe,nKo),e(mt,sKo),e(mt,mc),e(mc,lKo),e(mc,Ghe),e(Ghe,iKo),e(mc,dKo),e(mc,cO),e(cO,cKo),e(mc,fKo),e(mt,mKo),e(mt,Ohe),e(Ohe,gKo),e(mt,hKo),g(ey,mt,null),e(br,pKo),e(br,no),g(oy,no,null),e(no,_Ko),e(no,Vhe),e(Vhe,uKo),e(no,bKo),e(no,pn),e(pn,FKo),e(pn,Xhe),e(Xhe,vKo),e(pn,TKo),e(pn,zhe),e(zhe,MKo),e(pn,EKo),e(pn,Qhe),e(Qhe,CKo),e(pn,wKo),e(no,AKo),e(no,Whe),e(Whe,Cv),e(Cv,Hhe),e(Hhe,yKo),e(Cv,LKo),e(Cv,fO),e(fO,xKo),e(Cv,kKo),e(no,SKo),e(no,wv),e(wv,RKo),e(wv,Uhe),e(Uhe,BKo),e(wv,PKo),e(wv,Jhe),e(Jhe,$Ko),e(no,IKo),e(no,Yhe),e(Yhe,qKo),e(no,NKo),g(ry,no,null),b(c,vBe,u),b(c,gc,u),e(gc,Av),e(Av,Khe),g(ty,Khe,null),e(gc,jKo),e(gc,Zhe),e(Zhe,DKo),b(c,TBe,u),b(c,Fr,u),g(ay,Fr,null),e(Fr,GKo),e(Fr,hc),e(hc,OKo),e(hc,mO),e(mO,VKo),e(hc,XKo),e(hc,gO),e(gO,zKo),e(hc,QKo),e(Fr,WKo),e(Fr,ny),e(ny,HKo),e(ny,epe),e(epe,UKo),e(ny,JKo),e(Fr,YKo),e(Fr,gt),g(sy,gt,null),e(gt,KKo),e(gt,ope),e(ope,ZKo),e(gt,eZo),e(gt,pc),e(pc,oZo),e(pc,rpe),e(rpe,rZo),e(pc,tZo),e(pc,hO),e(hO,aZo),e(pc,nZo),e(gt,sZo),e(gt,tpe),e(tpe,lZo),e(gt,iZo),g(ly,gt,null),e(Fr,dZo),e(Fr,ho),g(iy,ho,null),e(ho,cZo),e(ho,ape),e(ape,fZo),e(ho,mZo),e(ho,_n),e(_n,gZo),e(_n,npe),e(npe,hZo),e(_n,pZo),e(_n,spe),e(spe,_Zo),e(_n,uZo),e(_n,lpe),e(lpe,bZo),e(_n,FZo),e(ho,vZo),e(ho,x),e(x,yv),e(yv,ipe),e(ipe,TZo),e(yv,MZo),e(yv,pO),e(pO,EZo),e(yv,CZo),e(x,wZo),e(x,Lv),e(Lv,dpe),e(dpe,AZo),e(Lv,yZo),e(Lv,_O),e(_O,LZo),e(Lv,xZo),e(x,kZo),e(x,xv),e(xv,cpe),e(cpe,SZo),e(xv,RZo),e(xv,uO),e(uO,BZo),e(xv,PZo),e(x,$Zo),e(x,kv),e(kv,fpe),e(fpe,IZo),e(kv,qZo),e(kv,bO),e(bO,NZo),e(kv,jZo),e(x,DZo),e(x,Sv),e(Sv,mpe),e(mpe,GZo),e(Sv,OZo),e(Sv,FO),e(FO,VZo),e(Sv,XZo),e(x,zZo),e(x,Rv),e(Rv,gpe),e(gpe,QZo),e(Rv,WZo),e(Rv,vO),e(vO,HZo),e(Rv,UZo),e(x,JZo),e(x,Bv),e(Bv,hpe),e(hpe,YZo),e(Bv,KZo),e(Bv,TO),e(TO,ZZo),e(Bv,eer),e(x,oer),e(x,Pv),e(Pv,ppe),e(ppe,rer),e(Pv,ter),e(Pv,MO),e(MO,aer),e(Pv,ner),e(x,ser),e(x,$v),e($v,_pe),e(_pe,ler),e($v,ier),e($v,EO),e(EO,der),e($v,cer),e(x,fer),e(x,Iv),e(Iv,upe),e(upe,mer),e(Iv,ger),e(Iv,CO),e(CO,her),e(Iv,per),e(x,_er),e(x,qv),e(qv,bpe),e(bpe,uer),e(qv,ber),e(qv,wO),e(wO,Fer),e(qv,ver),e(x,Ter),e(x,Nv),e(Nv,Fpe),e(Fpe,Mer),e(Nv,Eer),e(Nv,AO),e(AO,Cer),e(Nv,wer),e(x,Aer),e(x,jv),e(jv,vpe),e(vpe,yer),e(jv,Ler),e(jv,yO),e(yO,xer),e(jv,ker),e(x,Ser),e(x,Dv),e(Dv,Tpe),e(Tpe,Rer),e(Dv,Ber),e(Dv,LO),e(LO,Per),e(Dv,$er),e(x,Ier),e(x,Gv),e(Gv,Mpe),e(Mpe,qer),e(Gv,Ner),e(Gv,xO),e(xO,jer),e(Gv,Der),e(x,Ger),e(x,Ov),e(Ov,Epe),e(Epe,Oer),e(Ov,Ver),e(Ov,kO),e(kO,Xer),e(Ov,zer),e(x,Qer),e(x,Gs),e(Gs,Cpe),e(Cpe,Wer),e(Gs,Her),e(Gs,SO),e(SO,Uer),e(Gs,Jer),e(Gs,RO),e(RO,Yer),e(Gs,Ker),e(x,Zer),e(x,Vv),e(Vv,wpe),e(wpe,eor),e(Vv,oor),e(Vv,BO),e(BO,ror),e(Vv,tor),e(x,aor),e(x,Xv),e(Xv,Ape),e(Ape,nor),e(Xv,sor),e(Xv,PO),e(PO,lor),e(Xv,ior),e(x,dor),e(x,zv),e(zv,ype),e(ype,cor),e(zv,mor),e(zv,$O),e($O,gor),e(zv,hor),e(x,por),e(x,Qv),e(Qv,Lpe),e(Lpe,_or),e(Qv,uor),e(Qv,IO),e(IO,bor),e(Qv,For),e(x,vor),e(x,Wv),e(Wv,xpe),e(xpe,Tor),e(Wv,Mor),e(Wv,qO),e(qO,Eor),e(Wv,Cor),e(x,wor),e(x,Hv),e(Hv,kpe),e(kpe,Aor),e(Hv,yor),e(Hv,NO),e(NO,Lor),e(Hv,xor),e(x,kor),e(x,Uv),e(Uv,Spe),e(Spe,Sor),e(Uv,Ror),e(Uv,jO),e(jO,Bor),e(Uv,Por),e(x,$or),e(x,Jv),e(Jv,Rpe),e(Rpe,Ior),e(Jv,qor),e(Jv,DO),e(DO,Nor),e(Jv,jor),e(x,Dor),e(x,Yv),e(Yv,Bpe),e(Bpe,Gor),e(Yv,Oor),e(Yv,GO),e(GO,Vor),e(Yv,Xor),e(x,zor),e(x,Kv),e(Kv,Ppe),e(Ppe,Qor),e(Kv,Wor),e(Kv,OO),e(OO,Hor),e(Kv,Uor),e(x,Jor),e(x,Zv),e(Zv,$pe),e($pe,Yor),e(Zv,Kor),e(Zv,VO),e(VO,Zor),e(Zv,err),e(x,orr),e(x,e6),e(e6,Ipe),e(Ipe,rrr),e(e6,trr),e(e6,XO),e(XO,arr),e(e6,nrr),e(x,srr),e(x,o6),e(o6,qpe),e(qpe,lrr),e(o6,irr),e(o6,zO),e(zO,drr),e(o6,crr),e(x,frr),e(x,r6),e(r6,Npe),e(Npe,mrr),e(r6,grr),e(r6,QO),e(QO,hrr),e(r6,prr),e(x,_rr),e(x,t6),e(t6,jpe),e(jpe,urr),e(t6,brr),e(t6,WO),e(WO,Frr),e(t6,vrr),e(x,Trr),e(x,a6),e(a6,Dpe),e(Dpe,Mrr),e(a6,Err),e(a6,HO),e(HO,Crr),e(a6,wrr),e(x,Arr),e(x,n6),e(n6,Gpe),e(Gpe,yrr),e(n6,Lrr),e(n6,UO),e(UO,xrr),e(n6,krr),e(x,Srr),e(x,s6),e(s6,Ope),e(Ope,Rrr),e(s6,Brr),e(s6,JO),e(JO,Prr),e(s6,$rr),e(x,Irr),e(x,l6),e(l6,Vpe),e(Vpe,qrr),e(l6,Nrr),e(l6,YO),e(YO,jrr),e(l6,Drr),e(x,Grr),e(x,i6),e(i6,Xpe),e(Xpe,Orr),e(i6,Vrr),e(i6,KO),e(KO,Xrr),e(i6,zrr),e(x,Qrr),e(x,d6),e(d6,zpe),e(zpe,Wrr),e(d6,Hrr),e(d6,ZO),e(ZO,Urr),e(d6,Jrr),e(x,Yrr),e(x,c6),e(c6,Qpe),e(Qpe,Krr),e(c6,Zrr),e(c6,eV),e(eV,etr),e(c6,otr),e(x,rtr),e(x,f6),e(f6,Wpe),e(Wpe,ttr),e(f6,atr),e(f6,oV),e(oV,ntr),e(f6,str),e(x,ltr),e(x,m6),e(m6,Hpe),e(Hpe,itr),e(m6,dtr),e(m6,rV),e(rV,ctr),e(m6,ftr),e(x,mtr),e(x,g6),e(g6,Upe),e(Upe,gtr),e(g6,htr),e(g6,tV),e(tV,ptr),e(g6,_tr),e(x,utr),e(x,h6),e(h6,Jpe),e(Jpe,btr),e(h6,Ftr),e(h6,aV),e(aV,vtr),e(h6,Ttr),e(x,Mtr),e(x,p6),e(p6,Ype),e(Ype,Etr),e(p6,Ctr),e(p6,nV),e(nV,wtr),e(p6,Atr),e(ho,ytr),e(ho,Kpe),e(Kpe,Ltr),e(ho,xtr),g(dy,ho,null),b(c,MBe,u),b(c,_c,u),e(_c,_6),e(_6,Zpe),g(cy,Zpe,null),e(_c,ktr),e(_c,e_e),e(e_e,Str),b(c,EBe,u),b(c,vr,u),g(fy,vr,null),e(vr,Rtr),e(vr,uc),e(uc,Btr),e(uc,sV),e(sV,Ptr),e(uc,$tr),e(uc,lV),e(lV,Itr),e(uc,qtr),e(vr,Ntr),e(vr,my),e(my,jtr),e(my,o_e),e(o_e,Dtr),e(my,Gtr),e(vr,Otr),e(vr,ht),g(gy,ht,null),e(ht,Vtr),e(ht,r_e),e(r_e,Xtr),e(ht,ztr),e(ht,bc),e(bc,Qtr),e(bc,t_e),e(t_e,Wtr),e(bc,Htr),e(bc,iV),e(iV,Utr),e(bc,Jtr),e(ht,Ytr),e(ht,a_e),e(a_e,Ktr),e(ht,Ztr),g(hy,ht,null),e(vr,ear),e(vr,po),g(py,po,null),e(po,oar),e(po,n_e),e(n_e,rar),e(po,tar),e(po,un),e(un,aar),e(un,s_e),e(s_e,nar),e(un,sar),e(un,l_e),e(l_e,lar),e(un,iar),e(un,i_e),e(i_e,dar),e(un,car),e(po,far),e(po,H),e(H,u6),e(u6,d_e),e(d_e,mar),e(u6,gar),e(u6,dV),e(dV,har),e(u6,par),e(H,_ar),e(H,b6),e(b6,c_e),e(c_e,uar),e(b6,bar),e(b6,cV),e(cV,Far),e(b6,Tar),e(H,Mar),e(H,F6),e(F6,f_e),e(f_e,Ear),e(F6,Car),e(F6,fV),e(fV,war),e(F6,Aar),e(H,yar),e(H,v6),e(v6,m_e),e(m_e,Lar),e(v6,xar),e(v6,mV),e(mV,kar),e(v6,Sar),e(H,Rar),e(H,T6),e(T6,g_e),e(g_e,Bar),e(T6,Par),e(T6,gV),e(gV,$ar),e(T6,Iar),e(H,qar),e(H,M6),e(M6,h_e),e(h_e,Nar),e(M6,jar),e(M6,hV),e(hV,Dar),e(M6,Gar),e(H,Oar),e(H,E6),e(E6,p_e),e(p_e,Var),e(E6,Xar),e(E6,pV),e(pV,zar),e(E6,Qar),e(H,War),e(H,C6),e(C6,__e),e(__e,Har),e(C6,Uar),e(C6,_V),e(_V,Jar),e(C6,Yar),e(H,Kar),e(H,w6),e(w6,u_e),e(u_e,Zar),e(w6,enr),e(w6,uV),e(uV,onr),e(w6,rnr),e(H,tnr),e(H,A6),e(A6,b_e),e(b_e,anr),e(A6,nnr),e(A6,bV),e(bV,snr),e(A6,lnr),e(H,inr),e(H,y6),e(y6,F_e),e(F_e,dnr),e(y6,cnr),e(y6,FV),e(FV,fnr),e(y6,mnr),e(H,gnr),e(H,L6),e(L6,v_e),e(v_e,hnr),e(L6,pnr),e(L6,vV),e(vV,_nr),e(L6,unr),e(H,bnr),e(H,x6),e(x6,T_e),e(T_e,Fnr),e(x6,vnr),e(x6,TV),e(TV,Tnr),e(x6,Mnr),e(H,Enr),e(H,k6),e(k6,M_e),e(M_e,Cnr),e(k6,wnr),e(k6,MV),e(MV,Anr),e(k6,ynr),e(H,Lnr),e(H,S6),e(S6,E_e),e(E_e,xnr),e(S6,knr),e(S6,EV),e(EV,Snr),e(S6,Rnr),e(H,Bnr),e(H,R6),e(R6,C_e),e(C_e,Pnr),e(R6,$nr),e(R6,CV),e(CV,Inr),e(R6,qnr),e(H,Nnr),e(H,B6),e(B6,w_e),e(w_e,jnr),e(B6,Dnr),e(B6,wV),e(wV,Gnr),e(B6,Onr),e(H,Vnr),e(H,P6),e(P6,A_e),e(A_e,Xnr),e(P6,znr),e(P6,AV),e(AV,Qnr),e(P6,Wnr),e(H,Hnr),e(H,$6),e($6,y_e),e(y_e,Unr),e($6,Jnr),e($6,yV),e(yV,Ynr),e($6,Knr),e(H,Znr),e(H,I6),e(I6,L_e),e(L_e,esr),e(I6,osr),e(I6,LV),e(LV,rsr),e(I6,tsr),e(H,asr),e(H,q6),e(q6,x_e),e(x_e,nsr),e(q6,ssr),e(q6,xV),e(xV,lsr),e(q6,isr),e(H,dsr),e(H,N6),e(N6,k_e),e(k_e,csr),e(N6,fsr),e(N6,kV),e(kV,msr),e(N6,gsr),e(H,hsr),e(H,j6),e(j6,S_e),e(S_e,psr),e(j6,_sr),e(j6,SV),e(SV,usr),e(j6,bsr),e(po,Fsr),e(po,R_e),e(R_e,vsr),e(po,Tsr),g(_y,po,null),b(c,CBe,u),b(c,Fc,u),e(Fc,D6),e(D6,B_e),g(uy,B_e,null),e(Fc,Msr),e(Fc,P_e),e(P_e,Esr),b(c,wBe,u),b(c,Tr,u),g(by,Tr,null),e(Tr,Csr),e(Tr,vc),e(vc,wsr),e(vc,RV),e(RV,Asr),e(vc,ysr),e(vc,BV),e(BV,Lsr),e(vc,xsr),e(Tr,ksr),e(Tr,Fy),e(Fy,Ssr),e(Fy,$_e),e($_e,Rsr),e(Fy,Bsr),e(Tr,Psr),e(Tr,pt),g(vy,pt,null),e(pt,$sr),e(pt,I_e),e(I_e,Isr),e(pt,qsr),e(pt,Tc),e(Tc,Nsr),e(Tc,q_e),e(q_e,jsr),e(Tc,Dsr),e(Tc,PV),e(PV,Gsr),e(Tc,Osr),e(pt,Vsr),e(pt,N_e),e(N_e,Xsr),e(pt,zsr),g(Ty,pt,null),e(Tr,Qsr),e(Tr,_o),g(My,_o,null),e(_o,Wsr),e(_o,j_e),e(j_e,Hsr),e(_o,Usr),e(_o,bn),e(bn,Jsr),e(bn,D_e),e(D_e,Ysr),e(bn,Ksr),e(bn,G_e),e(G_e,Zsr),e(bn,elr),e(bn,O_e),e(O_e,olr),e(bn,rlr),e(_o,tlr),e(_o,fe),e(fe,G6),e(G6,V_e),e(V_e,alr),e(G6,nlr),e(G6,$V),e($V,slr),e(G6,llr),e(fe,ilr),e(fe,O6),e(O6,X_e),e(X_e,dlr),e(O6,clr),e(O6,IV),e(IV,flr),e(O6,mlr),e(fe,glr),e(fe,V6),e(V6,z_e),e(z_e,hlr),e(V6,plr),e(V6,qV),e(qV,_lr),e(V6,ulr),e(fe,blr),e(fe,X6),e(X6,Q_e),e(Q_e,Flr),e(X6,vlr),e(X6,NV),e(NV,Tlr),e(X6,Mlr),e(fe,Elr),e(fe,z6),e(z6,W_e),e(W_e,Clr),e(z6,wlr),e(z6,jV),e(jV,Alr),e(z6,ylr),e(fe,Llr),e(fe,Q6),e(Q6,H_e),e(H_e,xlr),e(Q6,klr),e(Q6,DV),e(DV,Slr),e(Q6,Rlr),e(fe,Blr),e(fe,W6),e(W6,U_e),e(U_e,Plr),e(W6,$lr),e(W6,GV),e(GV,Ilr),e(W6,qlr),e(fe,Nlr),e(fe,H6),e(H6,J_e),e(J_e,jlr),e(H6,Dlr),e(H6,OV),e(OV,Glr),e(H6,Olr),e(fe,Vlr),e(fe,U6),e(U6,Y_e),e(Y_e,Xlr),e(U6,zlr),e(U6,VV),e(VV,Qlr),e(U6,Wlr),e(fe,Hlr),e(fe,J6),e(J6,K_e),e(K_e,Ulr),e(J6,Jlr),e(J6,XV),e(XV,Ylr),e(J6,Klr),e(fe,Zlr),e(fe,Y6),e(Y6,Z_e),e(Z_e,eir),e(Y6,oir),e(Y6,zV),e(zV,rir),e(Y6,tir),e(fe,air),e(fe,K6),e(K6,eue),e(eue,nir),e(K6,sir),e(K6,QV),e(QV,lir),e(K6,iir),e(_o,dir),e(_o,oue),e(oue,cir),e(_o,fir),g(Ey,_o,null),b(c,ABe,u),b(c,Mc,u),e(Mc,Z6),e(Z6,rue),g(Cy,rue,null),e(Mc,mir),e(Mc,tue),e(tue,gir),b(c,yBe,u),b(c,Mr,u),g(wy,Mr,null),e(Mr,hir),e(Mr,Ec),e(Ec,pir),e(Ec,WV),e(WV,_ir),e(Ec,uir),e(Ec,HV),e(HV,bir),e(Ec,Fir),e(Mr,vir),e(Mr,Ay),e(Ay,Tir),e(Ay,aue),e(aue,Mir),e(Ay,Eir),e(Mr,Cir),e(Mr,_t),g(yy,_t,null),e(_t,wir),e(_t,nue),e(nue,Air),e(_t,yir),e(_t,Cc),e(Cc,Lir),e(Cc,sue),e(sue,xir),e(Cc,kir),e(Cc,UV),e(UV,Sir),e(Cc,Rir),e(_t,Bir),e(_t,lue),e(lue,Pir),e(_t,$ir),g(Ly,_t,null),e(Mr,Iir),e(Mr,uo),g(xy,uo,null),e(uo,qir),e(uo,iue),e(iue,Nir),e(uo,jir),e(uo,Fn),e(Fn,Dir),e(Fn,due),e(due,Gir),e(Fn,Oir),e(Fn,cue),e(cue,Vir),e(Fn,Xir),e(Fn,fue),e(fue,zir),e(Fn,Qir),e(uo,Wir),e(uo,ky),e(ky,eT),e(eT,mue),e(mue,Hir),e(eT,Uir),e(eT,JV),e(JV,Jir),e(eT,Yir),e(ky,Kir),e(ky,oT),e(oT,gue),e(gue,Zir),e(oT,edr),e(oT,YV),e(YV,odr),e(oT,rdr),e(uo,tdr),e(uo,hue),e(hue,adr),e(uo,ndr),g(Sy,uo,null),b(c,LBe,u),b(c,wc,u),e(wc,rT),e(rT,pue),g(Ry,pue,null),e(wc,sdr),e(wc,_ue),e(_ue,ldr),b(c,xBe,u),b(c,Er,u),g(By,Er,null),e(Er,idr),e(Er,Ac),e(Ac,ddr),e(Ac,KV),e(KV,cdr),e(Ac,fdr),e(Ac,ZV),e(ZV,mdr),e(Ac,gdr),e(Er,hdr),e(Er,Py),e(Py,pdr),e(Py,uue),e(uue,_dr),e(Py,udr),e(Er,bdr),e(Er,ut),g($y,ut,null),e(ut,Fdr),e(ut,bue),e(bue,vdr),e(ut,Tdr),e(ut,yc),e(yc,Mdr),e(yc,Fue),e(Fue,Edr),e(yc,Cdr),e(yc,eX),e(eX,wdr),e(yc,Adr),e(ut,ydr),e(ut,vue),e(vue,Ldr),e(ut,xdr),g(Iy,ut,null),e(Er,kdr),e(Er,bo),g(qy,bo,null),e(bo,Sdr),e(bo,Tue),e(Tue,Rdr),e(bo,Bdr),e(bo,vn),e(vn,Pdr),e(vn,Mue),e(Mue,$dr),e(vn,Idr),e(vn,Eue),e(Eue,qdr),e(vn,Ndr),e(vn,Cue),e(Cue,jdr),e(vn,Ddr),e(bo,Gdr),e(bo,J),e(J,tT),e(tT,wue),e(wue,Odr),e(tT,Vdr),e(tT,oX),e(oX,Xdr),e(tT,zdr),e(J,Qdr),e(J,aT),e(aT,Aue),e(Aue,Wdr),e(aT,Hdr),e(aT,rX),e(rX,Udr),e(aT,Jdr),e(J,Ydr),e(J,nT),e(nT,yue),e(yue,Kdr),e(nT,Zdr),e(nT,tX),e(tX,ecr),e(nT,ocr),e(J,rcr),e(J,sT),e(sT,Lue),e(Lue,tcr),e(sT,acr),e(sT,aX),e(aX,ncr),e(sT,scr),e(J,lcr),e(J,lT),e(lT,xue),e(xue,icr),e(lT,dcr),e(lT,nX),e(nX,ccr),e(lT,fcr),e(J,mcr),e(J,iT),e(iT,kue),e(kue,gcr),e(iT,hcr),e(iT,sX),e(sX,pcr),e(iT,_cr),e(J,ucr),e(J,dT),e(dT,Sue),e(Sue,bcr),e(dT,Fcr),e(dT,lX),e(lX,vcr),e(dT,Tcr),e(J,Mcr),e(J,cT),e(cT,Rue),e(Rue,Ecr),e(cT,Ccr),e(cT,iX),e(iX,wcr),e(cT,Acr),e(J,ycr),e(J,fT),e(fT,Bue),e(Bue,Lcr),e(fT,xcr),e(fT,dX),e(dX,kcr),e(fT,Scr),e(J,Rcr),e(J,mT),e(mT,Pue),e(Pue,Bcr),e(mT,Pcr),e(mT,cX),e(cX,$cr),e(mT,Icr),e(J,qcr),e(J,gT),e(gT,$ue),e($ue,Ncr),e(gT,jcr),e(gT,fX),e(fX,Dcr),e(gT,Gcr),e(J,Ocr),e(J,hT),e(hT,Iue),e(Iue,Vcr),e(hT,Xcr),e(hT,mX),e(mX,zcr),e(hT,Qcr),e(J,Wcr),e(J,pT),e(pT,que),e(que,Hcr),e(pT,Ucr),e(pT,gX),e(gX,Jcr),e(pT,Ycr),e(J,Kcr),e(J,_T),e(_T,Nue),e(Nue,Zcr),e(_T,efr),e(_T,hX),e(hX,ofr),e(_T,rfr),e(J,tfr),e(J,uT),e(uT,jue),e(jue,afr),e(uT,nfr),e(uT,pX),e(pX,sfr),e(uT,lfr),e(J,ifr),e(J,bT),e(bT,Due),e(Due,dfr),e(bT,cfr),e(bT,_X),e(_X,ffr),e(bT,mfr),e(J,gfr),e(J,FT),e(FT,Gue),e(Gue,hfr),e(FT,pfr),e(FT,uX),e(uX,_fr),e(FT,ufr),e(J,bfr),e(J,vT),e(vT,Oue),e(Oue,Ffr),e(vT,vfr),e(vT,bX),e(bX,Tfr),e(vT,Mfr),e(J,Efr),e(J,TT),e(TT,Vue),e(Vue,Cfr),e(TT,wfr),e(TT,FX),e(FX,Afr),e(TT,yfr),e(J,Lfr),e(J,MT),e(MT,Xue),e(Xue,xfr),e(MT,kfr),e(MT,vX),e(vX,Sfr),e(MT,Rfr),e(bo,Bfr),e(bo,zue),e(zue,Pfr),e(bo,$fr),g(Ny,bo,null),b(c,kBe,u),b(c,Lc,u),e(Lc,ET),e(ET,Que),g(jy,Que,null),e(Lc,Ifr),e(Lc,Wue),e(Wue,qfr),b(c,SBe,u),b(c,Cr,u),g(Dy,Cr,null),e(Cr,Nfr),e(Cr,xc),e(xc,jfr),e(xc,TX),e(TX,Dfr),e(xc,Gfr),e(xc,MX),e(MX,Ofr),e(xc,Vfr),e(Cr,Xfr),e(Cr,Gy),e(Gy,zfr),e(Gy,Hue),e(Hue,Qfr),e(Gy,Wfr),e(Cr,Hfr),e(Cr,bt),g(Oy,bt,null),e(bt,Ufr),e(bt,Uue),e(Uue,Jfr),e(bt,Yfr),e(bt,kc),e(kc,Kfr),e(kc,Jue),e(Jue,Zfr),e(kc,emr),e(kc,EX),e(EX,omr),e(kc,rmr),e(bt,tmr),e(bt,Yue),e(Yue,amr),e(bt,nmr),g(Vy,bt,null),e(Cr,smr),e(Cr,Fo),g(Xy,Fo,null),e(Fo,lmr),e(Fo,Kue),e(Kue,imr),e(Fo,dmr),e(Fo,Tn),e(Tn,cmr),e(Tn,Zue),e(Zue,fmr),e(Tn,mmr),e(Tn,e2e),e(e2e,gmr),e(Tn,hmr),e(Tn,o2e),e(o2e,pmr),e(Tn,_mr),e(Fo,umr),e(Fo,be),e(be,CT),e(CT,r2e),e(r2e,bmr),e(CT,Fmr),e(CT,CX),e(CX,vmr),e(CT,Tmr),e(be,Mmr),e(be,wT),e(wT,t2e),e(t2e,Emr),e(wT,Cmr),e(wT,wX),e(wX,wmr),e(wT,Amr),e(be,ymr),e(be,AT),e(AT,a2e),e(a2e,Lmr),e(AT,xmr),e(AT,AX),e(AX,kmr),e(AT,Smr),e(be,Rmr),e(be,yT),e(yT,n2e),e(n2e,Bmr),e(yT,Pmr),e(yT,yX),e(yX,$mr),e(yT,Imr),e(be,qmr),e(be,LT),e(LT,s2e),e(s2e,Nmr),e(LT,jmr),e(LT,LX),e(LX,Dmr),e(LT,Gmr),e(be,Omr),e(be,xT),e(xT,l2e),e(l2e,Vmr),e(xT,Xmr),e(xT,xX),e(xX,zmr),e(xT,Qmr),e(be,Wmr),e(be,kT),e(kT,i2e),e(i2e,Hmr),e(kT,Umr),e(kT,kX),e(kX,Jmr),e(kT,Ymr),e(be,Kmr),e(be,ST),e(ST,d2e),e(d2e,Zmr),e(ST,egr),e(ST,SX),e(SX,ogr),e(ST,rgr),e(be,tgr),e(be,RT),e(RT,c2e),e(c2e,agr),e(RT,ngr),e(RT,RX),e(RX,sgr),e(RT,lgr),e(be,igr),e(be,BT),e(BT,f2e),e(f2e,dgr),e(BT,cgr),e(BT,BX),e(BX,fgr),e(BT,mgr),e(Fo,ggr),e(Fo,m2e),e(m2e,hgr),e(Fo,pgr),g(zy,Fo,null),b(c,RBe,u),b(c,Sc,u),e(Sc,PT),e(PT,g2e),g(Qy,g2e,null),e(Sc,_gr),e(Sc,h2e),e(h2e,ugr),b(c,BBe,u),b(c,wr,u),g(Wy,wr,null),e(wr,bgr),e(wr,Rc),e(Rc,Fgr),e(Rc,PX),e(PX,vgr),e(Rc,Tgr),e(Rc,$X),e($X,Mgr),e(Rc,Egr),e(wr,Cgr),e(wr,Hy),e(Hy,wgr),e(Hy,p2e),e(p2e,Agr),e(Hy,ygr),e(wr,Lgr),e(wr,Ft),g(Uy,Ft,null),e(Ft,xgr),e(Ft,_2e),e(_2e,kgr),e(Ft,Sgr),e(Ft,Bc),e(Bc,Rgr),e(Bc,u2e),e(u2e,Bgr),e(Bc,Pgr),e(Bc,IX),e(IX,$gr),e(Bc,Igr),e(Ft,qgr),e(Ft,b2e),e(b2e,Ngr),e(Ft,jgr),g(Jy,Ft,null),e(wr,Dgr),e(wr,vo),g(Yy,vo,null),e(vo,Ggr),e(vo,F2e),e(F2e,Ogr),e(vo,Vgr),e(vo,Mn),e(Mn,Xgr),e(Mn,v2e),e(v2e,zgr),e(Mn,Qgr),e(Mn,T2e),e(T2e,Wgr),e(Mn,Hgr),e(Mn,M2e),e(M2e,Ugr),e(Mn,Jgr),e(vo,Ygr),e(vo,V),e(V,$T),e($T,E2e),e(E2e,Kgr),e($T,Zgr),e($T,qX),e(qX,ehr),e($T,ohr),e(V,rhr),e(V,IT),e(IT,C2e),e(C2e,thr),e(IT,ahr),e(IT,NX),e(NX,nhr),e(IT,shr),e(V,lhr),e(V,qT),e(qT,w2e),e(w2e,ihr),e(qT,dhr),e(qT,jX),e(jX,chr),e(qT,fhr),e(V,mhr),e(V,NT),e(NT,A2e),e(A2e,ghr),e(NT,hhr),e(NT,DX),e(DX,phr),e(NT,_hr),e(V,uhr),e(V,jT),e(jT,y2e),e(y2e,bhr),e(jT,Fhr),e(jT,GX),e(GX,vhr),e(jT,Thr),e(V,Mhr),e(V,DT),e(DT,L2e),e(L2e,Ehr),e(DT,Chr),e(DT,OX),e(OX,whr),e(DT,Ahr),e(V,yhr),e(V,GT),e(GT,x2e),e(x2e,Lhr),e(GT,xhr),e(GT,VX),e(VX,khr),e(GT,Shr),e(V,Rhr),e(V,OT),e(OT,k2e),e(k2e,Bhr),e(OT,Phr),e(OT,XX),e(XX,$hr),e(OT,Ihr),e(V,qhr),e(V,VT),e(VT,S2e),e(S2e,Nhr),e(VT,jhr),e(VT,zX),e(zX,Dhr),e(VT,Ghr),e(V,Ohr),e(V,XT),e(XT,R2e),e(R2e,Vhr),e(XT,Xhr),e(XT,QX),e(QX,zhr),e(XT,Qhr),e(V,Whr),e(V,zT),e(zT,B2e),e(B2e,Hhr),e(zT,Uhr),e(zT,WX),e(WX,Jhr),e(zT,Yhr),e(V,Khr),e(V,QT),e(QT,P2e),e(P2e,Zhr),e(QT,epr),e(QT,HX),e(HX,opr),e(QT,rpr),e(V,tpr),e(V,WT),e(WT,$2e),e($2e,apr),e(WT,npr),e(WT,UX),e(UX,spr),e(WT,lpr),e(V,ipr),e(V,HT),e(HT,I2e),e(I2e,dpr),e(HT,cpr),e(HT,JX),e(JX,fpr),e(HT,mpr),e(V,gpr),e(V,UT),e(UT,q2e),e(q2e,hpr),e(UT,ppr),e(UT,YX),e(YX,_pr),e(UT,upr),e(V,bpr),e(V,JT),e(JT,N2e),e(N2e,Fpr),e(JT,vpr),e(JT,KX),e(KX,Tpr),e(JT,Mpr),e(V,Epr),e(V,YT),e(YT,j2e),e(j2e,Cpr),e(YT,wpr),e(YT,ZX),e(ZX,Apr),e(YT,ypr),e(V,Lpr),e(V,KT),e(KT,D2e),e(D2e,xpr),e(KT,kpr),e(KT,ez),e(ez,Spr),e(KT,Rpr),e(V,Bpr),e(V,ZT),e(ZT,G2e),e(G2e,Ppr),e(ZT,$pr),e(ZT,oz),e(oz,Ipr),e(ZT,qpr),e(V,Npr),e(V,eM),e(eM,O2e),e(O2e,jpr),e(eM,Dpr),e(eM,rz),e(rz,Gpr),e(eM,Opr),e(V,Vpr),e(V,oM),e(oM,V2e),e(V2e,Xpr),e(oM,zpr),e(oM,tz),e(tz,Qpr),e(oM,Wpr),e(V,Hpr),e(V,rM),e(rM,X2e),e(X2e,Upr),e(rM,Jpr),e(rM,az),e(az,Ypr),e(rM,Kpr),e(V,Zpr),e(V,tM),e(tM,z2e),e(z2e,e_r),e(tM,o_r),e(tM,nz),e(nz,r_r),e(tM,t_r),e(V,a_r),e(V,aM),e(aM,Q2e),e(Q2e,n_r),e(aM,s_r),e(aM,sz),e(sz,l_r),e(aM,i_r),e(V,d_r),e(V,nM),e(nM,W2e),e(W2e,c_r),e(nM,f_r),e(nM,lz),e(lz,m_r),e(nM,g_r),e(V,h_r),e(V,sM),e(sM,H2e),e(H2e,p_r),e(sM,__r),e(sM,iz),e(iz,u_r),e(sM,b_r),e(vo,F_r),e(vo,U2e),e(U2e,v_r),e(vo,T_r),g(Ky,vo,null),b(c,PBe,u),b(c,Pc,u),e(Pc,lM),e(lM,J2e),g(Zy,J2e,null),e(Pc,M_r),e(Pc,Y2e),e(Y2e,E_r),b(c,$Be,u),b(c,Ar,u),g(eL,Ar,null),e(Ar,C_r),e(Ar,$c),e($c,w_r),e($c,dz),e(dz,A_r),e($c,y_r),e($c,cz),e(cz,L_r),e($c,x_r),e(Ar,k_r),e(Ar,oL),e(oL,S_r),e(oL,K2e),e(K2e,R_r),e(oL,B_r),e(Ar,P_r),e(Ar,vt),g(rL,vt,null),e(vt,$_r),e(vt,Z2e),e(Z2e,I_r),e(vt,q_r),e(vt,Ic),e(Ic,N_r),e(Ic,e1e),e(e1e,j_r),e(Ic,D_r),e(Ic,fz),e(fz,G_r),e(Ic,O_r),e(vt,V_r),e(vt,o1e),e(o1e,X_r),e(vt,z_r),g(tL,vt,null),e(Ar,Q_r),e(Ar,To),g(aL,To,null),e(To,W_r),e(To,r1e),e(r1e,H_r),e(To,U_r),e(To,En),e(En,J_r),e(En,t1e),e(t1e,Y_r),e(En,K_r),e(En,a1e),e(a1e,Z_r),e(En,eur),e(En,n1e),e(n1e,our),e(En,rur),e(To,tur),e(To,se),e(se,iM),e(iM,s1e),e(s1e,aur),e(iM,nur),e(iM,mz),e(mz,sur),e(iM,lur),e(se,iur),e(se,dM),e(dM,l1e),e(l1e,dur),e(dM,cur),e(dM,gz),e(gz,fur),e(dM,mur),e(se,gur),e(se,cM),e(cM,i1e),e(i1e,hur),e(cM,pur),e(cM,hz),e(hz,_ur),e(cM,uur),e(se,bur),e(se,fM),e(fM,d1e),e(d1e,Fur),e(fM,vur),e(fM,pz),e(pz,Tur),e(fM,Mur),e(se,Eur),e(se,mM),e(mM,c1e),e(c1e,Cur),e(mM,wur),e(mM,_z),e(_z,Aur),e(mM,yur),e(se,Lur),e(se,gM),e(gM,f1e),e(f1e,xur),e(gM,kur),e(gM,uz),e(uz,Sur),e(gM,Rur),e(se,Bur),e(se,hM),e(hM,m1e),e(m1e,Pur),e(hM,$ur),e(hM,bz),e(bz,Iur),e(hM,qur),e(se,Nur),e(se,pM),e(pM,g1e),e(g1e,jur),e(pM,Dur),e(pM,Fz),e(Fz,Gur),e(pM,Our),e(se,Vur),e(se,_M),e(_M,h1e),e(h1e,Xur),e(_M,zur),e(_M,vz),e(vz,Qur),e(_M,Wur),e(se,Hur),e(se,uM),e(uM,p1e),e(p1e,Uur),e(uM,Jur),e(uM,Tz),e(Tz,Yur),e(uM,Kur),e(se,Zur),e(se,bM),e(bM,_1e),e(_1e,e2r),e(bM,o2r),e(bM,Mz),e(Mz,r2r),e(bM,t2r),e(se,a2r),e(se,FM),e(FM,u1e),e(u1e,n2r),e(FM,s2r),e(FM,Ez),e(Ez,l2r),e(FM,i2r),e(se,d2r),e(se,vM),e(vM,b1e),e(b1e,c2r),e(vM,f2r),e(vM,Cz),e(Cz,m2r),e(vM,g2r),e(se,h2r),e(se,TM),e(TM,F1e),e(F1e,p2r),e(TM,_2r),e(TM,wz),e(wz,u2r),e(TM,b2r),e(se,F2r),e(se,MM),e(MM,v1e),e(v1e,v2r),e(MM,T2r),e(MM,Az),e(Az,M2r),e(MM,E2r),e(se,C2r),e(se,EM),e(EM,T1e),e(T1e,w2r),e(EM,A2r),e(EM,yz),e(yz,y2r),e(EM,L2r),e(se,x2r),e(se,CM),e(CM,M1e),e(M1e,k2r),e(CM,S2r),e(CM,Lz),e(Lz,R2r),e(CM,B2r),e(To,P2r),e(To,E1e),e(E1e,$2r),e(To,I2r),g(nL,To,null),b(c,IBe,u),b(c,qc,u),e(qc,wM),e(wM,C1e),g(sL,C1e,null),e(qc,q2r),e(qc,w1e),e(w1e,N2r),b(c,qBe,u),b(c,yr,u),g(lL,yr,null),e(yr,j2r),e(yr,Nc),e(Nc,D2r),e(Nc,xz),e(xz,G2r),e(Nc,O2r),e(Nc,kz),e(kz,V2r),e(Nc,X2r),e(yr,z2r),e(yr,iL),e(iL,Q2r),e(iL,A1e),e(A1e,W2r),e(iL,H2r),e(yr,U2r),e(yr,Tt),g(dL,Tt,null),e(Tt,J2r),e(Tt,y1e),e(y1e,Y2r),e(Tt,K2r),e(Tt,jc),e(jc,Z2r),e(jc,L1e),e(L1e,e1r),e(jc,o1r),e(jc,Sz),e(Sz,r1r),e(jc,t1r),e(Tt,a1r),e(Tt,x1e),e(x1e,n1r),e(Tt,s1r),g(cL,Tt,null),e(yr,l1r),e(yr,Mo),g(fL,Mo,null),e(Mo,i1r),e(Mo,k1e),e(k1e,d1r),e(Mo,c1r),e(Mo,Cn),e(Cn,f1r),e(Cn,S1e),e(S1e,m1r),e(Cn,g1r),e(Cn,R1e),e(R1e,h1r),e(Cn,p1r),e(Cn,B1e),e(B1e,_1r),e(Cn,u1r),e(Mo,b1r),e(Mo,P1e),e(P1e,AM),e(AM,$1e),e($1e,F1r),e(AM,v1r),e(AM,Rz),e(Rz,T1r),e(AM,M1r),e(Mo,E1r),e(Mo,I1e),e(I1e,C1r),e(Mo,w1r),g(mL,Mo,null),b(c,NBe,u),b(c,Dc,u),e(Dc,yM),e(yM,q1e),g(gL,q1e,null),e(Dc,A1r),e(Dc,N1e),e(N1e,y1r),b(c,jBe,u),b(c,Lr,u),g(hL,Lr,null),e(Lr,L1r),e(Lr,Gc),e(Gc,x1r),e(Gc,Bz),e(Bz,k1r),e(Gc,S1r),e(Gc,Pz),e(Pz,R1r),e(Gc,B1r),e(Lr,P1r),e(Lr,pL),e(pL,$1r),e(pL,j1e),e(j1e,I1r),e(pL,q1r),e(Lr,N1r),e(Lr,Mt),g(_L,Mt,null),e(Mt,j1r),e(Mt,D1e),e(D1e,D1r),e(Mt,G1r),e(Mt,Oc),e(Oc,O1r),e(Oc,G1e),e(G1e,V1r),e(Oc,X1r),e(Oc,$z),e($z,z1r),e(Oc,Q1r),e(Mt,W1r),e(Mt,O1e),e(O1e,H1r),e(Mt,U1r),g(uL,Mt,null),e(Lr,J1r),e(Lr,Eo),g(bL,Eo,null),e(Eo,Y1r),e(Eo,V1e),e(V1e,K1r),e(Eo,Z1r),e(Eo,wn),e(wn,ebr),e(wn,X1e),e(X1e,obr),e(wn,rbr),e(wn,z1e),e(z1e,tbr),e(wn,abr),e(wn,Q1e),e(Q1e,nbr),e(wn,sbr),e(Eo,lbr),e(Eo,Y),e(Y,LM),e(LM,W1e),e(W1e,ibr),e(LM,dbr),e(LM,Iz),e(Iz,cbr),e(LM,fbr),e(Y,mbr),e(Y,xM),e(xM,H1e),e(H1e,gbr),e(xM,hbr),e(xM,qz),e(qz,pbr),e(xM,_br),e(Y,ubr),e(Y,kM),e(kM,U1e),e(U1e,bbr),e(kM,Fbr),e(kM,Nz),e(Nz,vbr),e(kM,Tbr),e(Y,Mbr),e(Y,SM),e(SM,J1e),e(J1e,Ebr),e(SM,Cbr),e(SM,jz),e(jz,wbr),e(SM,Abr),e(Y,ybr),e(Y,RM),e(RM,Y1e),e(Y1e,Lbr),e(RM,xbr),e(RM,Dz),e(Dz,kbr),e(RM,Sbr),e(Y,Rbr),e(Y,BM),e(BM,K1e),e(K1e,Bbr),e(BM,Pbr),e(BM,Gz),e(Gz,$br),e(BM,Ibr),e(Y,qbr),e(Y,PM),e(PM,Z1e),e(Z1e,Nbr),e(PM,jbr),e(PM,Oz),e(Oz,Dbr),e(PM,Gbr),e(Y,Obr),e(Y,$M),e($M,ebe),e(ebe,Vbr),e($M,Xbr),e($M,Vz),e(Vz,zbr),e($M,Qbr),e(Y,Wbr),e(Y,IM),e(IM,obe),e(obe,Hbr),e(IM,Ubr),e(IM,Xz),e(Xz,Jbr),e(IM,Ybr),e(Y,Kbr),e(Y,qM),e(qM,rbe),e(rbe,Zbr),e(qM,e5r),e(qM,zz),e(zz,o5r),e(qM,r5r),e(Y,t5r),e(Y,NM),e(NM,tbe),e(tbe,a5r),e(NM,n5r),e(NM,Qz),e(Qz,s5r),e(NM,l5r),e(Y,i5r),e(Y,jM),e(jM,abe),e(abe,d5r),e(jM,c5r),e(jM,Wz),e(Wz,f5r),e(jM,m5r),e(Y,g5r),e(Y,DM),e(DM,nbe),e(nbe,h5r),e(DM,p5r),e(DM,Hz),e(Hz,_5r),e(DM,u5r),e(Y,b5r),e(Y,GM),e(GM,sbe),e(sbe,F5r),e(GM,v5r),e(GM,Uz),e(Uz,T5r),e(GM,M5r),e(Y,E5r),e(Y,OM),e(OM,lbe),e(lbe,C5r),e(OM,w5r),e(OM,Jz),e(Jz,A5r),e(OM,y5r),e(Y,L5r),e(Y,VM),e(VM,ibe),e(ibe,x5r),e(VM,k5r),e(VM,Yz),e(Yz,S5r),e(VM,R5r),e(Y,B5r),e(Y,XM),e(XM,dbe),e(dbe,P5r),e(XM,$5r),e(XM,Kz),e(Kz,I5r),e(XM,q5r),e(Y,N5r),e(Y,zM),e(zM,cbe),e(cbe,j5r),e(zM,D5r),e(zM,Zz),e(Zz,G5r),e(zM,O5r),e(Y,V5r),e(Y,QM),e(QM,fbe),e(fbe,X5r),e(QM,z5r),e(QM,eQ),e(eQ,Q5r),e(QM,W5r),e(Y,H5r),e(Y,WM),e(WM,mbe),e(mbe,U5r),e(WM,J5r),e(WM,oQ),e(oQ,Y5r),e(WM,K5r),e(Eo,Z5r),e(Eo,gbe),e(gbe,eFr),e(Eo,oFr),g(FL,Eo,null),b(c,DBe,u),b(c,Vc,u),e(Vc,HM),e(HM,hbe),g(vL,hbe,null),e(Vc,rFr),e(Vc,pbe),e(pbe,tFr),b(c,GBe,u),b(c,xr,u),g(TL,xr,null),e(xr,aFr),e(xr,Xc),e(Xc,nFr),e(Xc,rQ),e(rQ,sFr),e(Xc,lFr),e(Xc,tQ),e(tQ,iFr),e(Xc,dFr),e(xr,cFr),e(xr,ML),e(ML,fFr),e(ML,_be),e(_be,mFr),e(ML,gFr),e(xr,hFr),e(xr,Et),g(EL,Et,null),e(Et,pFr),e(Et,ube),e(ube,_Fr),e(Et,uFr),e(Et,zc),e(zc,bFr),e(zc,bbe),e(bbe,FFr),e(zc,vFr),e(zc,aQ),e(aQ,TFr),e(zc,MFr),e(Et,EFr),e(Et,Fbe),e(Fbe,CFr),e(Et,wFr),g(CL,Et,null),e(xr,AFr),e(xr,Co),g(wL,Co,null),e(Co,yFr),e(Co,vbe),e(vbe,LFr),e(Co,xFr),e(Co,An),e(An,kFr),e(An,Tbe),e(Tbe,SFr),e(An,RFr),e(An,Mbe),e(Mbe,BFr),e(An,PFr),e(An,Ebe),e(Ebe,$Fr),e(An,IFr),e(Co,qFr),e(Co,K),e(K,UM),e(UM,Cbe),e(Cbe,NFr),e(UM,jFr),e(UM,nQ),e(nQ,DFr),e(UM,GFr),e(K,OFr),e(K,JM),e(JM,wbe),e(wbe,VFr),e(JM,XFr),e(JM,sQ),e(sQ,zFr),e(JM,QFr),e(K,WFr),e(K,YM),e(YM,Abe),e(Abe,HFr),e(YM,UFr),e(YM,lQ),e(lQ,JFr),e(YM,YFr),e(K,KFr),e(K,KM),e(KM,ybe),e(ybe,ZFr),e(KM,evr),e(KM,iQ),e(iQ,ovr),e(KM,rvr),e(K,tvr),e(K,ZM),e(ZM,Lbe),e(Lbe,avr),e(ZM,nvr),e(ZM,dQ),e(dQ,svr),e(ZM,lvr),e(K,ivr),e(K,e4),e(e4,xbe),e(xbe,dvr),e(e4,cvr),e(e4,cQ),e(cQ,fvr),e(e4,mvr),e(K,gvr),e(K,o4),e(o4,kbe),e(kbe,hvr),e(o4,pvr),e(o4,fQ),e(fQ,_vr),e(o4,uvr),e(K,bvr),e(K,r4),e(r4,Sbe),e(Sbe,Fvr),e(r4,vvr),e(r4,mQ),e(mQ,Tvr),e(r4,Mvr),e(K,Evr),e(K,t4),e(t4,Rbe),e(Rbe,Cvr),e(t4,wvr),e(t4,gQ),e(gQ,Avr),e(t4,yvr),e(K,Lvr),e(K,a4),e(a4,Bbe),e(Bbe,xvr),e(a4,kvr),e(a4,hQ),e(hQ,Svr),e(a4,Rvr),e(K,Bvr),e(K,n4),e(n4,Pbe),e(Pbe,Pvr),e(n4,$vr),e(n4,pQ),e(pQ,Ivr),e(n4,qvr),e(K,Nvr),e(K,s4),e(s4,$be),e($be,jvr),e(s4,Dvr),e(s4,_Q),e(_Q,Gvr),e(s4,Ovr),e(K,Vvr),e(K,l4),e(l4,Ibe),e(Ibe,Xvr),e(l4,zvr),e(l4,uQ),e(uQ,Qvr),e(l4,Wvr),e(K,Hvr),e(K,i4),e(i4,qbe),e(qbe,Uvr),e(i4,Jvr),e(i4,bQ),e(bQ,Yvr),e(i4,Kvr),e(K,Zvr),e(K,d4),e(d4,Nbe),e(Nbe,e6r),e(d4,o6r),e(d4,FQ),e(FQ,r6r),e(d4,t6r),e(K,a6r),e(K,c4),e(c4,jbe),e(jbe,n6r),e(c4,s6r),e(c4,vQ),e(vQ,l6r),e(c4,i6r),e(K,d6r),e(K,f4),e(f4,Dbe),e(Dbe,c6r),e(f4,f6r),e(f4,TQ),e(TQ,m6r),e(f4,g6r),e(K,h6r),e(K,m4),e(m4,Gbe),e(Gbe,p6r),e(m4,_6r),e(m4,MQ),e(MQ,u6r),e(m4,b6r),e(K,F6r),e(K,g4),e(g4,Obe),e(Obe,v6r),e(g4,T6r),e(g4,EQ),e(EQ,M6r),e(g4,E6r),e(K,C6r),e(K,h4),e(h4,Vbe),e(Vbe,w6r),e(h4,A6r),e(h4,CQ),e(CQ,y6r),e(h4,L6r),e(Co,x6r),e(Co,Xbe),e(Xbe,k6r),e(Co,S6r),g(AL,Co,null),b(c,OBe,u),b(c,Qc,u),e(Qc,p4),e(p4,zbe),g(yL,zbe,null),e(Qc,R6r),e(Qc,Qbe),e(Qbe,B6r),b(c,VBe,u),b(c,kr,u),g(LL,kr,null),e(kr,P6r),e(kr,Wc),e(Wc,$6r),e(Wc,wQ),e(wQ,I6r),e(Wc,q6r),e(Wc,AQ),e(AQ,N6r),e(Wc,j6r),e(kr,D6r),e(kr,xL),e(xL,G6r),e(xL,Wbe),e(Wbe,O6r),e(xL,V6r),e(kr,X6r),e(kr,Ct),g(kL,Ct,null),e(Ct,z6r),e(Ct,Hbe),e(Hbe,Q6r),e(Ct,W6r),e(Ct,Hc),e(Hc,H6r),e(Hc,Ube),e(Ube,U6r),e(Hc,J6r),e(Hc,yQ),e(yQ,Y6r),e(Hc,K6r),e(Ct,Z6r),e(Ct,Jbe),e(Jbe,eTr),e(Ct,oTr),g(SL,Ct,null),e(kr,rTr),e(kr,wo),g(RL,wo,null),e(wo,tTr),e(wo,Ybe),e(Ybe,aTr),e(wo,nTr),e(wo,yn),e(yn,sTr),e(yn,Kbe),e(Kbe,lTr),e(yn,iTr),e(yn,Zbe),e(Zbe,dTr),e(yn,cTr),e(yn,e5e),e(e5e,fTr),e(yn,mTr),e(wo,gTr),e(wo,o5e),e(o5e,_4),e(_4,r5e),e(r5e,hTr),e(_4,pTr),e(_4,LQ),e(LQ,_Tr),e(_4,uTr),e(wo,bTr),e(wo,t5e),e(t5e,FTr),e(wo,vTr),g(BL,wo,null),b(c,XBe,u),b(c,Uc,u),e(Uc,u4),e(u4,a5e),g(PL,a5e,null),e(Uc,TTr),e(Uc,n5e),e(n5e,MTr),b(c,zBe,u),b(c,Sr,u),g($L,Sr,null),e(Sr,ETr),e(Sr,Jc),e(Jc,CTr),e(Jc,xQ),e(xQ,wTr),e(Jc,ATr),e(Jc,kQ),e(kQ,yTr),e(Jc,LTr),e(Sr,xTr),e(Sr,IL),e(IL,kTr),e(IL,s5e),e(s5e,STr),e(IL,RTr),e(Sr,BTr),e(Sr,wt),g(qL,wt,null),e(wt,PTr),e(wt,l5e),e(l5e,$Tr),e(wt,ITr),e(wt,Yc),e(Yc,qTr),e(Yc,i5e),e(i5e,NTr),e(Yc,jTr),e(Yc,SQ),e(SQ,DTr),e(Yc,GTr),e(wt,OTr),e(wt,d5e),e(d5e,VTr),e(wt,XTr),g(NL,wt,null),e(Sr,zTr),e(Sr,Ao),g(jL,Ao,null),e(Ao,QTr),e(Ao,c5e),e(c5e,WTr),e(Ao,HTr),e(Ao,Ln),e(Ln,UTr),e(Ln,f5e),e(f5e,JTr),e(Ln,YTr),e(Ln,m5e),e(m5e,KTr),e(Ln,ZTr),e(Ln,g5e),e(g5e,eMr),e(Ln,oMr),e(Ao,rMr),e(Ao,h5e),e(h5e,b4),e(b4,p5e),e(p5e,tMr),e(b4,aMr),e(b4,RQ),e(RQ,nMr),e(b4,sMr),e(Ao,lMr),e(Ao,_5e),e(_5e,iMr),e(Ao,dMr),g(DL,Ao,null),b(c,QBe,u),b(c,Kc,u),e(Kc,F4),e(F4,u5e),g(GL,u5e,null),e(Kc,cMr),e(Kc,b5e),e(b5e,fMr),b(c,WBe,u),b(c,Rr,u),g(OL,Rr,null),e(Rr,mMr),e(Rr,Zc),e(Zc,gMr),e(Zc,BQ),e(BQ,hMr),e(Zc,pMr),e(Zc,PQ),e(PQ,_Mr),e(Zc,uMr),e(Rr,bMr),e(Rr,VL),e(VL,FMr),e(VL,F5e),e(F5e,vMr),e(VL,TMr),e(Rr,MMr),e(Rr,At),g(XL,At,null),e(At,EMr),e(At,v5e),e(v5e,CMr),e(At,wMr),e(At,ef),e(ef,AMr),e(ef,T5e),e(T5e,yMr),e(ef,LMr),e(ef,$Q),e($Q,xMr),e(ef,kMr),e(At,SMr),e(At,M5e),e(M5e,RMr),e(At,BMr),g(zL,At,null),e(Rr,PMr),e(Rr,yo),g(QL,yo,null),e(yo,$Mr),e(yo,E5e),e(E5e,IMr),e(yo,qMr),e(yo,xn),e(xn,NMr),e(xn,C5e),e(C5e,jMr),e(xn,DMr),e(xn,w5e),e(w5e,GMr),e(xn,OMr),e(xn,A5e),e(A5e,VMr),e(xn,XMr),e(yo,zMr),e(yo,z),e(z,v4),e(v4,y5e),e(y5e,QMr),e(v4,WMr),e(v4,IQ),e(IQ,HMr),e(v4,UMr),e(z,JMr),e(z,T4),e(T4,L5e),e(L5e,YMr),e(T4,KMr),e(T4,qQ),e(qQ,ZMr),e(T4,e4r),e(z,o4r),e(z,M4),e(M4,x5e),e(x5e,r4r),e(M4,t4r),e(M4,NQ),e(NQ,a4r),e(M4,n4r),e(z,s4r),e(z,E4),e(E4,k5e),e(k5e,l4r),e(E4,i4r),e(E4,jQ),e(jQ,d4r),e(E4,c4r),e(z,f4r),e(z,C4),e(C4,S5e),e(S5e,m4r),e(C4,g4r),e(C4,DQ),e(DQ,h4r),e(C4,p4r),e(z,_4r),e(z,w4),e(w4,R5e),e(R5e,u4r),e(w4,b4r),e(w4,GQ),e(GQ,F4r),e(w4,v4r),e(z,T4r),e(z,A4),e(A4,B5e),e(B5e,M4r),e(A4,E4r),e(A4,OQ),e(OQ,C4r),e(A4,w4r),e(z,A4r),e(z,y4),e(y4,P5e),e(P5e,y4r),e(y4,L4r),e(y4,VQ),e(VQ,x4r),e(y4,k4r),e(z,S4r),e(z,L4),e(L4,$5e),e($5e,R4r),e(L4,B4r),e(L4,XQ),e(XQ,P4r),e(L4,$4r),e(z,I4r),e(z,x4),e(x4,I5e),e(I5e,q4r),e(x4,N4r),e(x4,zQ),e(zQ,j4r),e(x4,D4r),e(z,G4r),e(z,k4),e(k4,q5e),e(q5e,O4r),e(k4,V4r),e(k4,QQ),e(QQ,X4r),e(k4,z4r),e(z,Q4r),e(z,S4),e(S4,N5e),e(N5e,W4r),e(S4,H4r),e(S4,WQ),e(WQ,U4r),e(S4,J4r),e(z,Y4r),e(z,R4),e(R4,j5e),e(j5e,K4r),e(R4,Z4r),e(R4,HQ),e(HQ,eEr),e(R4,oEr),e(z,rEr),e(z,B4),e(B4,D5e),e(D5e,tEr),e(B4,aEr),e(B4,UQ),e(UQ,nEr),e(B4,sEr),e(z,lEr),e(z,P4),e(P4,G5e),e(G5e,iEr),e(P4,dEr),e(P4,JQ),e(JQ,cEr),e(P4,fEr),e(z,mEr),e(z,$4),e($4,O5e),e(O5e,gEr),e($4,hEr),e($4,YQ),e(YQ,pEr),e($4,_Er),e(z,uEr),e(z,I4),e(I4,V5e),e(V5e,bEr),e(I4,FEr),e(I4,KQ),e(KQ,vEr),e(I4,TEr),e(z,MEr),e(z,q4),e(q4,X5e),e(X5e,EEr),e(q4,CEr),e(q4,ZQ),e(ZQ,wEr),e(q4,AEr),e(z,yEr),e(z,N4),e(N4,z5e),e(z5e,LEr),e(N4,xEr),e(N4,eW),e(eW,kEr),e(N4,SEr),e(z,REr),e(z,j4),e(j4,Q5e),e(Q5e,BEr),e(j4,PEr),e(j4,oW),e(oW,$Er),e(j4,IEr),e(z,qEr),e(z,D4),e(D4,W5e),e(W5e,NEr),e(D4,jEr),e(D4,rW),e(rW,DEr),e(D4,GEr),e(z,OEr),e(z,G4),e(G4,H5e),e(H5e,VEr),e(G4,XEr),e(G4,tW),e(tW,zEr),e(G4,QEr),e(z,WEr),e(z,O4),e(O4,U5e),e(U5e,HEr),e(O4,UEr),e(O4,aW),e(aW,JEr),e(O4,YEr),e(z,KEr),e(z,V4),e(V4,J5e),e(J5e,ZEr),e(V4,eCr),e(V4,nW),e(nW,oCr),e(V4,rCr),e(z,tCr),e(z,X4),e(X4,Y5e),e(Y5e,aCr),e(X4,nCr),e(X4,sW),e(sW,sCr),e(X4,lCr),e(yo,iCr),e(yo,K5e),e(K5e,dCr),e(yo,cCr),g(WL,yo,null),b(c,HBe,u),b(c,of,u),e(of,z4),e(z4,Z5e),g(HL,Z5e,null),e(of,fCr),e(of,eFe),e(eFe,mCr),b(c,UBe,u),b(c,Br,u),g(UL,Br,null),e(Br,gCr),e(Br,rf),e(rf,hCr),e(rf,lW),e(lW,pCr),e(rf,_Cr),e(rf,iW),e(iW,uCr),e(rf,bCr),e(Br,FCr),e(Br,JL),e(JL,vCr),e(JL,oFe),e(oFe,TCr),e(JL,MCr),e(Br,ECr),e(Br,yt),g(YL,yt,null),e(yt,CCr),e(yt,rFe),e(rFe,wCr),e(yt,ACr),e(yt,tf),e(tf,yCr),e(tf,tFe),e(tFe,LCr),e(tf,xCr),e(tf,dW),e(dW,kCr),e(tf,SCr),e(yt,RCr),e(yt,aFe),e(aFe,BCr),e(yt,PCr),g(KL,yt,null),e(Br,$Cr),e(Br,Lo),g(ZL,Lo,null),e(Lo,ICr),e(Lo,nFe),e(nFe,qCr),e(Lo,NCr),e(Lo,kn),e(kn,jCr),e(kn,sFe),e(sFe,DCr),e(kn,GCr),e(kn,lFe),e(lFe,OCr),e(kn,VCr),e(kn,iFe),e(iFe,XCr),e(kn,zCr),e(Lo,QCr),e(Lo,ca),e(ca,Q4),e(Q4,dFe),e(dFe,WCr),e(Q4,HCr),e(Q4,cW),e(cW,UCr),e(Q4,JCr),e(ca,YCr),e(ca,W4),e(W4,cFe),e(cFe,KCr),e(W4,ZCr),e(W4,fW),e(fW,e3r),e(W4,o3r),e(ca,r3r),e(ca,H4),e(H4,fFe),e(fFe,t3r),e(H4,a3r),e(H4,mW),e(mW,n3r),e(H4,s3r),e(ca,l3r),e(ca,U4),e(U4,mFe),e(mFe,i3r),e(U4,d3r),e(U4,gW),e(gW,c3r),e(U4,f3r),e(ca,m3r),e(ca,J4),e(J4,gFe),e(gFe,g3r),e(J4,h3r),e(J4,hW),e(hW,p3r),e(J4,_3r),e(Lo,u3r),e(Lo,hFe),e(hFe,b3r),e(Lo,F3r),g(e8,Lo,null),b(c,JBe,u),b(c,af,u),e(af,Y4),e(Y4,pFe),g(o8,pFe,null),e(af,v3r),e(af,_Fe),e(_Fe,T3r),b(c,YBe,u),b(c,Pr,u),g(r8,Pr,null),e(Pr,M3r),e(Pr,nf),e(nf,E3r),e(nf,pW),e(pW,C3r),e(nf,w3r),e(nf,_W),e(_W,A3r),e(nf,y3r),e(Pr,L3r),e(Pr,t8),e(t8,x3r),e(t8,uFe),e(uFe,k3r),e(t8,S3r),e(Pr,R3r),e(Pr,Lt),g(a8,Lt,null),e(Lt,B3r),e(Lt,bFe),e(bFe,P3r),e(Lt,$3r),e(Lt,sf),e(sf,I3r),e(sf,FFe),e(FFe,q3r),e(sf,N3r),e(sf,uW),e(uW,j3r),e(sf,D3r),e(Lt,G3r),e(Lt,vFe),e(vFe,O3r),e(Lt,V3r),g(n8,Lt,null),e(Pr,X3r),e(Pr,xo),g(s8,xo,null),e(xo,z3r),e(xo,TFe),e(TFe,Q3r),e(xo,W3r),e(xo,Sn),e(Sn,H3r),e(Sn,MFe),e(MFe,U3r),e(Sn,J3r),e(Sn,EFe),e(EFe,Y3r),e(Sn,K3r),e(Sn,CFe),e(CFe,Z3r),e(Sn,ewr),e(xo,owr),e(xo,me),e(me,K4),e(K4,wFe),e(wFe,rwr),e(K4,twr),e(K4,bW),e(bW,awr),e(K4,nwr),e(me,swr),e(me,Z4),e(Z4,AFe),e(AFe,lwr),e(Z4,iwr),e(Z4,FW),e(FW,dwr),e(Z4,cwr),e(me,fwr),e(me,eE),e(eE,yFe),e(yFe,mwr),e(eE,gwr),e(eE,vW),e(vW,hwr),e(eE,pwr),e(me,_wr),e(me,oE),e(oE,LFe),e(LFe,uwr),e(oE,bwr),e(oE,TW),e(TW,Fwr),e(oE,vwr),e(me,Twr),e(me,rE),e(rE,xFe),e(xFe,Mwr),e(rE,Ewr),e(rE,MW),e(MW,Cwr),e(rE,wwr),e(me,Awr),e(me,tE),e(tE,kFe),e(kFe,ywr),e(tE,Lwr),e(tE,EW),e(EW,xwr),e(tE,kwr),e(me,Swr),e(me,aE),e(aE,SFe),e(SFe,Rwr),e(aE,Bwr),e(aE,CW),e(CW,Pwr),e(aE,$wr),e(me,Iwr),e(me,nE),e(nE,RFe),e(RFe,qwr),e(nE,Nwr),e(nE,wW),e(wW,jwr),e(nE,Dwr),e(me,Gwr),e(me,sE),e(sE,BFe),e(BFe,Owr),e(sE,Vwr),e(sE,AW),e(AW,Xwr),e(sE,zwr),e(me,Qwr),e(me,lE),e(lE,PFe),e(PFe,Wwr),e(lE,Hwr),e(lE,yW),e(yW,Uwr),e(lE,Jwr),e(me,Ywr),e(me,iE),e(iE,$Fe),e($Fe,Kwr),e(iE,Zwr),e(iE,LW),e(LW,eAr),e(iE,oAr),e(me,rAr),e(me,dE),e(dE,IFe),e(IFe,tAr),e(dE,aAr),e(dE,xW),e(xW,nAr),e(dE,sAr),e(xo,lAr),e(xo,qFe),e(qFe,iAr),e(xo,dAr),g(l8,xo,null),b(c,KBe,u),b(c,lf,u),e(lf,cE),e(cE,NFe),g(i8,NFe,null),e(lf,cAr),e(lf,jFe),e(jFe,fAr),b(c,ZBe,u),b(c,$r,u),g(d8,$r,null),e($r,mAr),e($r,df),e(df,gAr),e(df,kW),e(kW,hAr),e(df,pAr),e(df,SW),e(SW,_Ar),e(df,uAr),e($r,bAr),e($r,c8),e(c8,FAr),e(c8,DFe),e(DFe,vAr),e(c8,TAr),e($r,MAr),e($r,xt),g(f8,xt,null),e(xt,EAr),e(xt,GFe),e(GFe,CAr),e(xt,wAr),e(xt,cf),e(cf,AAr),e(cf,OFe),e(OFe,yAr),e(cf,LAr),e(cf,RW),e(RW,xAr),e(cf,kAr),e(xt,SAr),e(xt,VFe),e(VFe,RAr),e(xt,BAr),g(m8,xt,null),e($r,PAr),e($r,ko),g(g8,ko,null),e(ko,$Ar),e(ko,XFe),e(XFe,IAr),e(ko,qAr),e(ko,Rn),e(Rn,NAr),e(Rn,zFe),e(zFe,jAr),e(Rn,DAr),e(Rn,QFe),e(QFe,GAr),e(Rn,OAr),e(Rn,WFe),e(WFe,VAr),e(Rn,XAr),e(ko,zAr),e(ko,Fe),e(Fe,fE),e(fE,HFe),e(HFe,QAr),e(fE,WAr),e(fE,BW),e(BW,HAr),e(fE,UAr),e(Fe,JAr),e(Fe,mE),e(mE,UFe),e(UFe,YAr),e(mE,KAr),e(mE,PW),e(PW,ZAr),e(mE,e0r),e(Fe,o0r),e(Fe,gE),e(gE,JFe),e(JFe,r0r),e(gE,t0r),e(gE,$W),e($W,a0r),e(gE,n0r),e(Fe,s0r),e(Fe,hE),e(hE,YFe),e(YFe,l0r),e(hE,i0r),e(hE,IW),e(IW,d0r),e(hE,c0r),e(Fe,f0r),e(Fe,pE),e(pE,KFe),e(KFe,m0r),e(pE,g0r),e(pE,qW),e(qW,h0r),e(pE,p0r),e(Fe,_0r),e(Fe,_E),e(_E,ZFe),e(ZFe,u0r),e(_E,b0r),e(_E,NW),e(NW,F0r),e(_E,v0r),e(Fe,T0r),e(Fe,uE),e(uE,eve),e(eve,M0r),e(uE,E0r),e(uE,jW),e(jW,C0r),e(uE,w0r),e(Fe,A0r),e(Fe,bE),e(bE,ove),e(ove,y0r),e(bE,L0r),e(bE,DW),e(DW,x0r),e(bE,k0r),e(Fe,S0r),e(Fe,FE),e(FE,rve),e(rve,R0r),e(FE,B0r),e(FE,GW),e(GW,P0r),e(FE,$0r),e(Fe,I0r),e(Fe,vE),e(vE,tve),e(tve,q0r),e(vE,N0r),e(vE,OW),e(OW,j0r),e(vE,D0r),e(ko,G0r),e(ko,ave),e(ave,O0r),e(ko,V0r),g(h8,ko,null),b(c,ePe,u),b(c,ff,u),e(ff,TE),e(TE,nve),g(p8,nve,null),e(ff,X0r),e(ff,sve),e(sve,z0r),b(c,oPe,u),b(c,Ir,u),g(_8,Ir,null),e(Ir,Q0r),e(Ir,mf),e(mf,W0r),e(mf,VW),e(VW,H0r),e(mf,U0r),e(mf,XW),e(XW,J0r),e(mf,Y0r),e(Ir,K0r),e(Ir,u8),e(u8,Z0r),e(u8,lve),e(lve,eyr),e(u8,oyr),e(Ir,ryr),e(Ir,kt),g(b8,kt,null),e(kt,tyr),e(kt,ive),e(ive,ayr),e(kt,nyr),e(kt,gf),e(gf,syr),e(gf,dve),e(dve,lyr),e(gf,iyr),e(gf,zW),e(zW,dyr),e(gf,cyr),e(kt,fyr),e(kt,cve),e(cve,myr),e(kt,gyr),g(F8,kt,null),e(Ir,hyr),e(Ir,So),g(v8,So,null),e(So,pyr),e(So,fve),e(fve,_yr),e(So,uyr),e(So,Bn),e(Bn,byr),e(Bn,mve),e(mve,Fyr),e(Bn,vyr),e(Bn,gve),e(gve,Tyr),e(Bn,Myr),e(Bn,hve),e(hve,Eyr),e(Bn,Cyr),e(So,wyr),e(So,Ee),e(Ee,ME),e(ME,pve),e(pve,Ayr),e(ME,yyr),e(ME,QW),e(QW,Lyr),e(ME,xyr),e(Ee,kyr),e(Ee,EE),e(EE,_ve),e(_ve,Syr),e(EE,Ryr),e(EE,WW),e(WW,Byr),e(EE,Pyr),e(Ee,$yr),e(Ee,CE),e(CE,uve),e(uve,Iyr),e(CE,qyr),e(CE,HW),e(HW,Nyr),e(CE,jyr),e(Ee,Dyr),e(Ee,wE),e(wE,bve),e(bve,Gyr),e(wE,Oyr),e(wE,UW),e(UW,Vyr),e(wE,Xyr),e(Ee,zyr),e(Ee,AE),e(AE,Fve),e(Fve,Qyr),e(AE,Wyr),e(AE,JW),e(JW,Hyr),e(AE,Uyr),e(Ee,Jyr),e(Ee,yE),e(yE,vve),e(vve,Yyr),e(yE,Kyr),e(yE,YW),e(YW,Zyr),e(yE,eLr),e(Ee,oLr),e(Ee,LE),e(LE,Tve),e(Tve,rLr),e(LE,tLr),e(LE,KW),e(KW,aLr),e(LE,nLr),e(Ee,sLr),e(Ee,xE),e(xE,Mve),e(Mve,lLr),e(xE,iLr),e(xE,ZW),e(ZW,dLr),e(xE,cLr),e(Ee,fLr),e(Ee,kE),e(kE,Eve),e(Eve,mLr),e(kE,gLr),e(kE,eH),e(eH,hLr),e(kE,pLr),e(So,_Lr),e(So,Cve),e(Cve,uLr),e(So,bLr),g(T8,So,null),b(c,rPe,u),b(c,hf,u),e(hf,SE),e(SE,wve),g(M8,wve,null),e(hf,FLr),e(hf,Ave),e(Ave,vLr),b(c,tPe,u),b(c,qr,u),g(E8,qr,null),e(qr,TLr),e(qr,pf),e(pf,MLr),e(pf,oH),e(oH,ELr),e(pf,CLr),e(pf,rH),e(rH,wLr),e(pf,ALr),e(qr,yLr),e(qr,C8),e(C8,LLr),e(C8,yve),e(yve,xLr),e(C8,kLr),e(qr,SLr),e(qr,St),g(w8,St,null),e(St,RLr),e(St,Lve),e(Lve,BLr),e(St,PLr),e(St,_f),e(_f,$Lr),e(_f,xve),e(xve,ILr),e(_f,qLr),e(_f,tH),e(tH,NLr),e(_f,jLr),e(St,DLr),e(St,kve),e(kve,GLr),e(St,OLr),g(A8,St,null),e(qr,VLr),e(qr,Ro),g(y8,Ro,null),e(Ro,XLr),e(Ro,Sve),e(Sve,zLr),e(Ro,QLr),e(Ro,Pn),e(Pn,WLr),e(Pn,Rve),e(Rve,HLr),e(Pn,ULr),e(Pn,Bve),e(Bve,JLr),e(Pn,YLr),e(Pn,Pve),e(Pve,KLr),e(Pn,ZLr),e(Ro,e8r),e(Ro,ve),e(ve,RE),e(RE,$ve),e($ve,o8r),e(RE,r8r),e(RE,aH),e(aH,t8r),e(RE,a8r),e(ve,n8r),e(ve,BE),e(BE,Ive),e(Ive,s8r),e(BE,l8r),e(BE,nH),e(nH,i8r),e(BE,d8r),e(ve,c8r),e(ve,PE),e(PE,qve),e(qve,f8r),e(PE,m8r),e(PE,sH),e(sH,g8r),e(PE,h8r),e(ve,p8r),e(ve,$E),e($E,Nve),e(Nve,_8r),e($E,u8r),e($E,lH),e(lH,b8r),e($E,F8r),e(ve,v8r),e(ve,IE),e(IE,jve),e(jve,T8r),e(IE,M8r),e(IE,iH),e(iH,E8r),e(IE,C8r),e(ve,w8r),e(ve,qE),e(qE,Dve),e(Dve,A8r),e(qE,y8r),e(qE,dH),e(dH,L8r),e(qE,x8r),e(ve,k8r),e(ve,NE),e(NE,Gve),e(Gve,S8r),e(NE,R8r),e(NE,cH),e(cH,B8r),e(NE,P8r),e(ve,$8r),e(ve,jE),e(jE,Ove),e(Ove,I8r),e(jE,q8r),e(jE,fH),e(fH,N8r),e(jE,j8r),e(ve,D8r),e(ve,DE),e(DE,Vve),e(Vve,G8r),e(DE,O8r),e(DE,mH),e(mH,V8r),e(DE,X8r),e(ve,z8r),e(ve,GE),e(GE,Xve),e(Xve,Q8r),e(GE,W8r),e(GE,gH),e(gH,H8r),e(GE,U8r),e(Ro,J8r),e(Ro,zve),e(zve,Y8r),e(Ro,K8r),g(L8,Ro,null),b(c,aPe,u),b(c,uf,u),e(uf,OE),e(OE,Qve),g(x8,Qve,null),e(uf,Z8r),e(uf,Wve),e(Wve,e7r),b(c,nPe,u),b(c,Nr,u),g(k8,Nr,null),e(Nr,o7r),e(Nr,bf),e(bf,r7r),e(bf,hH),e(hH,t7r),e(bf,a7r),e(bf,pH),e(pH,n7r),e(bf,s7r),e(Nr,l7r),e(Nr,S8),e(S8,i7r),e(S8,Hve),e(Hve,d7r),e(S8,c7r),e(Nr,f7r),e(Nr,Rt),g(R8,Rt,null),e(Rt,m7r),e(Rt,Uve),e(Uve,g7r),e(Rt,h7r),e(Rt,Ff),e(Ff,p7r),e(Ff,Jve),e(Jve,_7r),e(Ff,u7r),e(Ff,_H),e(_H,b7r),e(Ff,F7r),e(Rt,v7r),e(Rt,Yve),e(Yve,T7r),e(Rt,M7r),g(B8,Rt,null),e(Nr,E7r),e(Nr,Bo),g(P8,Bo,null),e(Bo,C7r),e(Bo,Kve),e(Kve,w7r),e(Bo,A7r),e(Bo,$n),e($n,y7r),e($n,Zve),e(Zve,L7r),e($n,x7r),e($n,e6e),e(e6e,k7r),e($n,S7r),e($n,o6e),e(o6e,R7r),e($n,B7r),e(Bo,P7r),e(Bo,Te),e(Te,VE),e(VE,r6e),e(r6e,$7r),e(VE,I7r),e(VE,uH),e(uH,q7r),e(VE,N7r),e(Te,j7r),e(Te,XE),e(XE,t6e),e(t6e,D7r),e(XE,G7r),e(XE,bH),e(bH,O7r),e(XE,V7r),e(Te,X7r),e(Te,zE),e(zE,a6e),e(a6e,z7r),e(zE,Q7r),e(zE,FH),e(FH,W7r),e(zE,H7r),e(Te,U7r),e(Te,QE),e(QE,n6e),e(n6e,J7r),e(QE,Y7r),e(QE,vH),e(vH,K7r),e(QE,Z7r),e(Te,e9r),e(Te,WE),e(WE,s6e),e(s6e,o9r),e(WE,r9r),e(WE,TH),e(TH,t9r),e(WE,a9r),e(Te,n9r),e(Te,HE),e(HE,l6e),e(l6e,s9r),e(HE,l9r),e(HE,MH),e(MH,i9r),e(HE,d9r),e(Te,c9r),e(Te,UE),e(UE,i6e),e(i6e,f9r),e(UE,m9r),e(UE,EH),e(EH,g9r),e(UE,h9r),e(Te,p9r),e(Te,JE),e(JE,d6e),e(d6e,_9r),e(JE,u9r),e(JE,CH),e(CH,b9r),e(JE,F9r),e(Te,v9r),e(Te,YE),e(YE,c6e),e(c6e,T9r),e(YE,M9r),e(YE,wH),e(wH,E9r),e(YE,C9r),e(Te,w9r),e(Te,KE),e(KE,f6e),e(f6e,A9r),e(KE,y9r),e(KE,AH),e(AH,L9r),e(KE,x9r),e(Bo,k9r),e(Bo,m6e),e(m6e,S9r),e(Bo,R9r),g($8,Bo,null),b(c,sPe,u),b(c,vf,u),e(vf,ZE),e(ZE,g6e),g(I8,g6e,null),e(vf,B9r),e(vf,h6e),e(h6e,P9r),b(c,lPe,u),b(c,jr,u),g(q8,jr,null),e(jr,$9r),e(jr,Tf),e(Tf,I9r),e(Tf,yH),e(yH,q9r),e(Tf,N9r),e(Tf,LH),e(LH,j9r),e(Tf,D9r),e(jr,G9r),e(jr,N8),e(N8,O9r),e(N8,p6e),e(p6e,V9r),e(N8,X9r),e(jr,z9r),e(jr,Bt),g(j8,Bt,null),e(Bt,Q9r),e(Bt,_6e),e(_6e,W9r),e(Bt,H9r),e(Bt,Mf),e(Mf,U9r),e(Mf,u6e),e(u6e,J9r),e(Mf,Y9r),e(Mf,xH),e(xH,K9r),e(Mf,Z9r),e(Bt,exr),e(Bt,b6e),e(b6e,oxr),e(Bt,rxr),g(D8,Bt,null),e(jr,txr),e(jr,Po),g(G8,Po,null),e(Po,axr),e(Po,F6e),e(F6e,nxr),e(Po,sxr),e(Po,In),e(In,lxr),e(In,v6e),e(v6e,ixr),e(In,dxr),e(In,T6e),e(T6e,cxr),e(In,fxr),e(In,M6e),e(M6e,mxr),e(In,gxr),e(Po,hxr),e(Po,Be),e(Be,eC),e(eC,E6e),e(E6e,pxr),e(eC,_xr),e(eC,kH),e(kH,uxr),e(eC,bxr),e(Be,Fxr),e(Be,oC),e(oC,C6e),e(C6e,vxr),e(oC,Txr),e(oC,SH),e(SH,Mxr),e(oC,Exr),e(Be,Cxr),e(Be,rC),e(rC,w6e),e(w6e,wxr),e(rC,Axr),e(rC,RH),e(RH,yxr),e(rC,Lxr),e(Be,xxr),e(Be,tC),e(tC,A6e),e(A6e,kxr),e(tC,Sxr),e(tC,BH),e(BH,Rxr),e(tC,Bxr),e(Be,Pxr),e(Be,aC),e(aC,y6e),e(y6e,$xr),e(aC,Ixr),e(aC,PH),e(PH,qxr),e(aC,Nxr),e(Be,jxr),e(Be,nC),e(nC,L6e),e(L6e,Dxr),e(nC,Gxr),e(nC,$H),e($H,Oxr),e(nC,Vxr),e(Be,Xxr),e(Be,sC),e(sC,x6e),e(x6e,zxr),e(sC,Qxr),e(sC,IH),e(IH,Wxr),e(sC,Hxr),e(Be,Uxr),e(Be,lC),e(lC,k6e),e(k6e,Jxr),e(lC,Yxr),e(lC,qH),e(qH,Kxr),e(lC,Zxr),e(Po,ekr),e(Po,S6e),e(S6e,okr),e(Po,rkr),g(O8,Po,null),b(c,iPe,u),b(c,Ef,u),e(Ef,iC),e(iC,R6e),g(V8,R6e,null),e(Ef,tkr),e(Ef,B6e),e(B6e,akr),b(c,dPe,u),b(c,Dr,u),g(X8,Dr,null),e(Dr,nkr),e(Dr,Cf),e(Cf,skr),e(Cf,NH),e(NH,lkr),e(Cf,ikr),e(Cf,jH),e(jH,dkr),e(Cf,ckr),e(Dr,fkr),e(Dr,z8),e(z8,mkr),e(z8,P6e),e(P6e,gkr),e(z8,hkr),e(Dr,pkr),e(Dr,Pt),g(Q8,Pt,null),e(Pt,_kr),e(Pt,$6e),e($6e,ukr),e(Pt,bkr),e(Pt,wf),e(wf,Fkr),e(wf,I6e),e(I6e,vkr),e(wf,Tkr),e(wf,DH),e(DH,Mkr),e(wf,Ekr),e(Pt,Ckr),e(Pt,q6e),e(q6e,wkr),e(Pt,Akr),g(W8,Pt,null),e(Dr,ykr),e(Dr,$o),g(H8,$o,null),e($o,Lkr),e($o,N6e),e(N6e,xkr),e($o,kkr),e($o,qn),e(qn,Skr),e(qn,j6e),e(j6e,Rkr),e(qn,Bkr),e(qn,D6e),e(D6e,Pkr),e(qn,$kr),e(qn,G6e),e(G6e,Ikr),e(qn,qkr),e($o,Nkr),e($o,Pe),e(Pe,dC),e(dC,O6e),e(O6e,jkr),e(dC,Dkr),e(dC,GH),e(GH,Gkr),e(dC,Okr),e(Pe,Vkr),e(Pe,cC),e(cC,V6e),e(V6e,Xkr),e(cC,zkr),e(cC,OH),e(OH,Qkr),e(cC,Wkr),e(Pe,Hkr),e(Pe,fC),e(fC,X6e),e(X6e,Ukr),e(fC,Jkr),e(fC,VH),e(VH,Ykr),e(fC,Kkr),e(Pe,Zkr),e(Pe,mC),e(mC,z6e),e(z6e,eSr),e(mC,oSr),e(mC,XH),e(XH,rSr),e(mC,tSr),e(Pe,aSr),e(Pe,gC),e(gC,Q6e),e(Q6e,nSr),e(gC,sSr),e(gC,zH),e(zH,lSr),e(gC,iSr),e(Pe,dSr),e(Pe,hC),e(hC,W6e),e(W6e,cSr),e(hC,fSr),e(hC,QH),e(QH,mSr),e(hC,gSr),e(Pe,hSr),e(Pe,pC),e(pC,H6e),e(H6e,pSr),e(pC,_Sr),e(pC,WH),e(WH,uSr),e(pC,bSr),e(Pe,FSr),e(Pe,_C),e(_C,U6e),e(U6e,vSr),e(_C,TSr),e(_C,HH),e(HH,MSr),e(_C,ESr),e($o,CSr),e($o,J6e),e(J6e,wSr),e($o,ASr),g(U8,$o,null),b(c,cPe,u),b(c,Af,u),e(Af,uC),e(uC,Y6e),g(J8,Y6e,null),e(Af,ySr),e(Af,K6e),e(K6e,LSr),b(c,fPe,u),b(c,Gr,u),g(Y8,Gr,null),e(Gr,xSr),e(Gr,yf),e(yf,kSr),e(yf,UH),e(UH,SSr),e(yf,RSr),e(yf,JH),e(JH,BSr),e(yf,PSr),e(Gr,$Sr),e(Gr,K8),e(K8,ISr),e(K8,Z6e),e(Z6e,qSr),e(K8,NSr),e(Gr,jSr),e(Gr,$t),g(Z8,$t,null),e($t,DSr),e($t,eTe),e(eTe,GSr),e($t,OSr),e($t,Lf),e(Lf,VSr),e(Lf,oTe),e(oTe,XSr),e(Lf,zSr),e(Lf,YH),e(YH,QSr),e(Lf,WSr),e($t,HSr),e($t,rTe),e(rTe,USr),e($t,JSr),g(e7,$t,null),e(Gr,YSr),e(Gr,Io),g(o7,Io,null),e(Io,KSr),e(Io,tTe),e(tTe,ZSr),e(Io,eRr),e(Io,Nn),e(Nn,oRr),e(Nn,aTe),e(aTe,rRr),e(Nn,tRr),e(Nn,nTe),e(nTe,aRr),e(Nn,nRr),e(Nn,sTe),e(sTe,sRr),e(Nn,lRr),e(Io,iRr),e(Io,lTe),e(lTe,bC),e(bC,iTe),e(iTe,dRr),e(bC,cRr),e(bC,KH),e(KH,fRr),e(bC,mRr),e(Io,gRr),e(Io,dTe),e(dTe,hRr),e(Io,pRr),g(r7,Io,null),b(c,mPe,u),b(c,xf,u),e(xf,FC),e(FC,cTe),g(t7,cTe,null),e(xf,_Rr),e(xf,fTe),e(fTe,uRr),b(c,gPe,u),b(c,Or,u),g(a7,Or,null),e(Or,bRr),e(Or,kf),e(kf,FRr),e(kf,ZH),e(ZH,vRr),e(kf,TRr),e(kf,eU),e(eU,MRr),e(kf,ERr),e(Or,CRr),e(Or,n7),e(n7,wRr),e(n7,mTe),e(mTe,ARr),e(n7,yRr),e(Or,LRr),e(Or,It),g(s7,It,null),e(It,xRr),e(It,gTe),e(gTe,kRr),e(It,SRr),e(It,Sf),e(Sf,RRr),e(Sf,hTe),e(hTe,BRr),e(Sf,PRr),e(Sf,oU),e(oU,$Rr),e(Sf,IRr),e(It,qRr),e(It,pTe),e(pTe,NRr),e(It,jRr),g(l7,It,null),e(Or,DRr),e(Or,qo),g(i7,qo,null),e(qo,GRr),e(qo,_Te),e(_Te,ORr),e(qo,VRr),e(qo,jn),e(jn,XRr),e(jn,uTe),e(uTe,zRr),e(jn,QRr),e(jn,bTe),e(bTe,WRr),e(jn,HRr),e(jn,FTe),e(FTe,URr),e(jn,JRr),e(qo,YRr),e(qo,d7),e(d7,vC),e(vC,vTe),e(vTe,KRr),e(vC,ZRr),e(vC,rU),e(rU,eBr),e(vC,oBr),e(d7,rBr),e(d7,TC),e(TC,TTe),e(TTe,tBr),e(TC,aBr),e(TC,tU),e(tU,nBr),e(TC,sBr),e(qo,lBr),e(qo,MTe),e(MTe,iBr),e(qo,dBr),g(c7,qo,null),b(c,hPe,u),b(c,Rf,u),e(Rf,MC),e(MC,ETe),g(f7,ETe,null),e(Rf,cBr),e(Rf,CTe),e(CTe,fBr),b(c,pPe,u),b(c,Vr,u),g(m7,Vr,null),e(Vr,mBr),e(Vr,Bf),e(Bf,gBr),e(Bf,aU),e(aU,hBr),e(Bf,pBr),e(Bf,nU),e(nU,_Br),e(Bf,uBr),e(Vr,bBr),e(Vr,g7),e(g7,FBr),e(g7,wTe),e(wTe,vBr),e(g7,TBr),e(Vr,MBr),e(Vr,qt),g(h7,qt,null),e(qt,EBr),e(qt,ATe),e(ATe,CBr),e(qt,wBr),e(qt,Pf),e(Pf,ABr),e(Pf,yTe),e(yTe,yBr),e(Pf,LBr),e(Pf,sU),e(sU,xBr),e(Pf,kBr),e(qt,SBr),e(qt,LTe),e(LTe,RBr),e(qt,BBr),g(p7,qt,null),e(Vr,PBr),e(Vr,No),g(_7,No,null),e(No,$Br),e(No,xTe),e(xTe,IBr),e(No,qBr),e(No,Dn),e(Dn,NBr),e(Dn,kTe),e(kTe,jBr),e(Dn,DBr),e(Dn,STe),e(STe,GBr),e(Dn,OBr),e(Dn,RTe),e(RTe,VBr),e(Dn,XBr),e(No,zBr),e(No,BTe),e(BTe,EC),e(EC,PTe),e(PTe,QBr),e(EC,WBr),e(EC,lU),e(lU,HBr),e(EC,UBr),e(No,JBr),e(No,$Te),e($Te,YBr),e(No,KBr),g(u7,No,null),_Pe=!0},p(c,[u]){const b7={};u&2&&(b7.$$scope={dirty:u,ctx:c}),Of.$set(b7);const ITe={};u&2&&(ITe.$$scope={dirty:u,ctx:c}),Ih.$set(ITe);const qTe={};u&2&&(qTe.$$scope={dirty:u,ctx:c}),Wh.$set(qTe)},i(c){_Pe||(h(ge.$$.fragment,c),h(Da.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(Of.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(B3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(q3.$$.fragment,c),h(D3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(W3.$$.fragment,c),h(Ih.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(ew.$$.fragment,c),h(Wh.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),h(g8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(b8.$$.fragment,c),h(F8.$$.fragment,c),h(v8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(w8.$$.fragment,c),h(A8.$$.fragment,c),h(y8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(R8.$$.fragment,c),h(B8.$$.fragment,c),h(P8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(j8.$$.fragment,c),h(D8.$$.fragment,c),h(G8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(Q8.$$.fragment,c),h(W8.$$.fragment,c),h(H8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(Z8.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(c7.$$.fragment,c),h(f7.$$.fragment,c),h(m7.$$.fragment,c),h(h7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(u7.$$.fragment,c),_Pe=!0)},o(c){p(ge.$$.fragment,c),p(Da.$$.fragment,c),p(y3.$$.fragment,c),p(L3.$$.fragment,c),p(Of.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(B3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(q3.$$.fragment,c),p(D3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(W3.$$.fragment,c),p(Ih.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(ew.$$.fragment,c),p(Wh.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),p(g8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(b8.$$.fragment,c),p(F8.$$.fragment,c),p(v8.$$.fragment,c),p(T8.$$.fragment,c),p(M8.$$.fragment,c),p(E8.$$.fragment,c),p(w8.$$.fragment,c),p(A8.$$.fragment,c),p(y8.$$.fragment,c),p(L8.$$.fragment,c),p(x8.$$.fragment,c),p(k8.$$.fragment,c),p(R8.$$.fragment,c),p(B8.$$.fragment,c),p(P8.$$.fragment,c),p($8.$$.fragment,c),p(I8.$$.fragment,c),p(q8.$$.fragment,c),p(j8.$$.fragment,c),p(D8.$$.fragment,c),p(G8.$$.fragment,c),p(O8.$$.fragment,c),p(V8.$$.fragment,c),p(X8.$$.fragment,c),p(Q8.$$.fragment,c),p(W8.$$.fragment,c),p(H8.$$.fragment,c),p(U8.$$.fragment,c),p(J8.$$.fragment,c),p(Y8.$$.fragment,c),p(Z8.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(t7.$$.fragment,c),p(a7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(c7.$$.fragment,c),p(f7.$$.fragment,c),p(m7.$$.fragment,c),p(h7.$$.fragment,c),p(p7.$$.fragment,c),p(_7.$$.fragment,c),p(u7.$$.fragment,c),_Pe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(ge),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(pRe),c&&t(Vi),_(y3),c&&t(_Re),c&&t(zn),c&&t(uRe),_(L3,c),c&&t(bRe),c&&t(v9),c&&t(FRe),_(Of,c),c&&t(vRe),c&&t(Xi),_(x3),c&&t(TRe),c&&t(Qo),_(k3),_(B3),_(P3),_($3),c&&t(MRe),c&&t(Qi),_(I3),c&&t(ERe),c&&t(Wo),_(q3),_(D3),_(G3),_(O3),c&&t(CRe),c&&t(Wi),_(V3),c&&t(wRe),c&&t(Ho),_(X3),_(W3),_(Ih),_(H3),_(U3),c&&t(ARe),c&&t(Hi),_(J3),c&&t(yRe),c&&t(Uo),_(Y3),_(ew),_(Wh),_(ow),_(rw),c&&t(LRe),c&&t(Ji),_(tw),c&&t(xRe),c&&t(Jo),_(aw),_(sw),_(lw),_(iw),_(dw),c&&t(kRe),c&&t(Zi),_(cw),c&&t(SRe),c&&t(Yo),_(fw),_(gw),_(hw),_(pw),_(_w),c&&t(RRe),c&&t(rd),_(uw),c&&t(BRe),c&&t(Ko),_(bw),_(vw),_(Tw),_(Mw),_(Ew),c&&t(PRe),c&&t(nd),_(Cw),c&&t($Re),c&&t(Zo),_(ww),_(yw),_(Lw),_(xw),_(kw),c&&t(IRe),c&&t(id),_(Sw),c&&t(qRe),c&&t(er),_(Rw),_(Pw),_($w),_(Iw),_(qw),c&&t(NRe),c&&t(fd),_(Nw),c&&t(jRe),c&&t(or),_(jw),_(Gw),_(Ow),_(Vw),_(Xw),c&&t(DRe),c&&t(hd),_(zw),c&&t(GRe),c&&t(rr),_(Qw),_(Hw),_(Uw),_(Jw),_(Yw),c&&t(ORe),c&&t(ud),_(Kw),c&&t(VRe),c&&t(tr),_(Zw),_(oA),_(rA),_(tA),_(aA),c&&t(XRe),c&&t(vd),_(nA),c&&t(zRe),c&&t(ar),_(sA),_(iA),_(dA),_(cA),_(fA),c&&t(QRe),c&&t(Ed),_(mA),c&&t(WRe),c&&t(nr),_(gA),_(pA),_(_A),_(uA),_(bA),c&&t(HRe),c&&t(Ad),_(FA),c&&t(URe),c&&t(sr),_(vA),_(MA),_(EA),_(CA),_(wA),c&&t(JRe),c&&t(xd),_(AA),c&&t(YRe),c&&t(lr),_(yA),_(xA),_(kA),_(SA),_(RA),c&&t(KRe),c&&t(Rd),_(BA),c&&t(ZRe),c&&t(ir),_(PA),_(IA),_(qA),_(NA),_(jA),c&&t(eBe),c&&t($d),_(DA),c&&t(oBe),c&&t(dr),_(GA),_(VA),_(XA),_(zA),_(QA),c&&t(rBe),c&&t(Nd),_(WA),c&&t(tBe),c&&t(cr),_(HA),_(JA),_(YA),_(KA),_(ZA),c&&t(aBe),c&&t(Gd),_(e0),c&&t(nBe),c&&t(fr),_(o0),_(t0),_(a0),_(n0),_(s0),c&&t(sBe),c&&t(Xd),_(l0),c&&t(lBe),c&&t(mr),_(i0),_(c0),_(f0),_(m0),_(h0),c&&t(iBe),c&&t(Wd),_(p0),c&&t(dBe),c&&t(gr),_(_0),_(b0),_(F0),_(v0),_(T0),c&&t(cBe),c&&t(Jd),_(M0),c&&t(fBe),c&&t(hr),_(E0),_(w0),_(A0),_(y0),_(L0),c&&t(mBe),c&&t(ec),_(x0),c&&t(gBe),c&&t(pr),_(k0),_(R0),_(B0),_(P0),_($0),c&&t(hBe),c&&t(tc),_(I0),c&&t(pBe),c&&t(_r),_(q0),_(j0),_(D0),_(G0),_(O0),c&&t(_Be),c&&t(sc),_(V0),c&&t(uBe),c&&t(ur),_(X0),_(Q0),_(W0),_(H0),_(U0),c&&t(bBe),c&&t(cc),_(J0),c&&t(FBe),c&&t(br),_(Y0),_(Z0),_(ey),_(oy),_(ry),c&&t(vBe),c&&t(gc),_(ty),c&&t(TBe),c&&t(Fr),_(ay),_(sy),_(ly),_(iy),_(dy),c&&t(MBe),c&&t(_c),_(cy),c&&t(EBe),c&&t(vr),_(fy),_(gy),_(hy),_(py),_(_y),c&&t(CBe),c&&t(Fc),_(uy),c&&t(wBe),c&&t(Tr),_(by),_(vy),_(Ty),_(My),_(Ey),c&&t(ABe),c&&t(Mc),_(Cy),c&&t(yBe),c&&t(Mr),_(wy),_(yy),_(Ly),_(xy),_(Sy),c&&t(LBe),c&&t(wc),_(Ry),c&&t(xBe),c&&t(Er),_(By),_($y),_(Iy),_(qy),_(Ny),c&&t(kBe),c&&t(Lc),_(jy),c&&t(SBe),c&&t(Cr),_(Dy),_(Oy),_(Vy),_(Xy),_(zy),c&&t(RBe),c&&t(Sc),_(Qy),c&&t(BBe),c&&t(wr),_(Wy),_(Uy),_(Jy),_(Yy),_(Ky),c&&t(PBe),c&&t(Pc),_(Zy),c&&t($Be),c&&t(Ar),_(eL),_(rL),_(tL),_(aL),_(nL),c&&t(IBe),c&&t(qc),_(sL),c&&t(qBe),c&&t(yr),_(lL),_(dL),_(cL),_(fL),_(mL),c&&t(NBe),c&&t(Dc),_(gL),c&&t(jBe),c&&t(Lr),_(hL),_(_L),_(uL),_(bL),_(FL),c&&t(DBe),c&&t(Vc),_(vL),c&&t(GBe),c&&t(xr),_(TL),_(EL),_(CL),_(wL),_(AL),c&&t(OBe),c&&t(Qc),_(yL),c&&t(VBe),c&&t(kr),_(LL),_(kL),_(SL),_(RL),_(BL),c&&t(XBe),c&&t(Uc),_(PL),c&&t(zBe),c&&t(Sr),_($L),_(qL),_(NL),_(jL),_(DL),c&&t(QBe),c&&t(Kc),_(GL),c&&t(WBe),c&&t(Rr),_(OL),_(XL),_(zL),_(QL),_(WL),c&&t(HBe),c&&t(of),_(HL),c&&t(UBe),c&&t(Br),_(UL),_(YL),_(KL),_(ZL),_(e8),c&&t(JBe),c&&t(af),_(o8),c&&t(YBe),c&&t(Pr),_(r8),_(a8),_(n8),_(s8),_(l8),c&&t(KBe),c&&t(lf),_(i8),c&&t(ZBe),c&&t($r),_(d8),_(f8),_(m8),_(g8),_(h8),c&&t(ePe),c&&t(ff),_(p8),c&&t(oPe),c&&t(Ir),_(_8),_(b8),_(F8),_(v8),_(T8),c&&t(rPe),c&&t(hf),_(M8),c&&t(tPe),c&&t(qr),_(E8),_(w8),_(A8),_(y8),_(L8),c&&t(aPe),c&&t(uf),_(x8),c&&t(nPe),c&&t(Nr),_(k8),_(R8),_(B8),_(P8),_($8),c&&t(sPe),c&&t(vf),_(I8),c&&t(lPe),c&&t(jr),_(q8),_(j8),_(D8),_(G8),_(O8),c&&t(iPe),c&&t(Ef),_(V8),c&&t(dPe),c&&t(Dr),_(X8),_(Q8),_(W8),_(H8),_(U8),c&&t(cPe),c&&t(Af),_(J8),c&&t(fPe),c&&t(Gr),_(Y8),_(Z8),_(e7),_(o7),_(r7),c&&t(mPe),c&&t(xf),_(t7),c&&t(gPe),c&&t(Or),_(a7),_(s7),_(l7),_(i7),_(c7),c&&t(hPe),c&&t(Rf),_(f7),c&&t(pPe),c&&t(Vr),_(m7),_(h7),_(p7),_(_7),_(u7)}}}const j3t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function D3t(If){return P3t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Q3t extends k3t{constructor(Z){super();S3t(this,Z,D3t,N3t,R3t,{})}}export{Q3t as default,j3t as metadata};
