import{S as hMt,i as pMt,s as uMt,e as a,k as l,w as F,t as o,M as _Mt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as bMt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as ORr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function vMt(A){let g,v,p,m,u,d,h,Fo,ri,of,Yr,ti,ai,f3,rf,Ie,Oe,ni,Mn,m3,En,Cn,g3,si,wn,h3,li,tf,ba;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Fo=o(`, make sure its
`),ri=a("code"),of=o("model_type"),Yr=o(" attribute is set to the same key you use when registering the config (here "),ti=a("code"),ai=o('"new-model"'),f3=o(")."),rf=l(),Ie=a("p"),Oe=o("Likewise, if your "),ni=a("code"),Mn=o("NewModel"),m3=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),g3=o(`, make sure its
`),si=a("code"),wn=o("config_class"),h3=o(` attribute is set to the same class you use when registering the model (here
`),li=a("code"),tf=o("NewModelConfig"),ba=o(")."),this.h()},l(Ve){g=n(Ve,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Ax=s(p);m=r(Ax,"NewModelConfig"),Ax.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ii=s(d);h=r(ii,"PretrainedConfig"),ii.forEach(t),Fo=r(Ae,`, make sure its
`),ri=n(Ae,"CODE",{});var yx=s(ri);of=r(yx,"model_type"),yx.forEach(t),Yr=r(Ae," attribute is set to the same key you use when registering the config (here "),ti=n(Ae,"CODE",{});var Lx=s(ti);ai=r(Lx,'"new-model"'),Lx.forEach(t),f3=r(Ae,")."),Ae.forEach(t),rf=i(Ve),Ie=n(Ve,"P",{});var To=s(Ie);Oe=r(To,"Likewise, if your "),ni=n(To,"CODE",{});var va=s(ni);Mn=r(va,"NewModel"),va.forEach(t),m3=r(To," is a subclass of "),En=n(To,"A",{href:!0});var xx=s(En);Cn=r(xx,"PreTrainedModel"),xx.forEach(t),g3=r(To,`, make sure its
`),si=n(To,"CODE",{});var af=s(si);wn=r(af,"config_class"),af.forEach(t),h3=r(To,` attribute is set to the same class you use when registering the model (here
`),li=n(To,"CODE",{});var $x=s(li);tf=r($x,"NewModelConfig"),$x.forEach(t),ba=r(To,")."),To.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel")},m(Ve,Ae){b(Ve,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Fo),e(g,ri),e(ri,of),e(g,Yr),e(g,ti),e(ti,ai),e(g,f3),b(Ve,rf,Ae),b(Ve,Ie,Ae),e(Ie,Oe),e(Ie,ni),e(ni,Mn),e(Ie,m3),e(Ie,En),e(En,Cn),e(Ie,g3),e(Ie,si),e(si,wn),e(Ie,h3),e(Ie,li),e(li,tf),e(Ie,ba)},d(Ve){Ve&&t(g),Ve&&t(rf),Ve&&t(Ie)}}}function FMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MMt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function EMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CMt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function wMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Mt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hEt(A){let g,v,p,m,u,d,h,Fo,ri,of,Yr,ti,ai,f3,rf,Ie,Oe,ni,Mn,m3,En,Cn,g3,si,wn,h3,li,tf,ba,Ve,Ae,Ax,ii,yx,Lx,To,va,xx,af,$x,qqe,kRe,di,nf,NK,p3,Nqe,jK,jqe,SRe,An,Dqe,DK,Gqe,Oqe,GK,Vqe,Xqe,RRe,u3,BRe,kx,zqe,PRe,sf,IRe,ci,lf,OK,_3,Qqe,VK,Wqe,qRe,Mo,b3,Hqe,v3,Uqe,Sx,Jqe,Yqe,Kqe,F3,Zqe,XK,eNe,oNe,rNe,Fr,T3,tNe,zK,aNe,nNe,fi,sNe,QK,lNe,iNe,WK,dNe,cNe,fNe,y,df,HK,mNe,gNe,Rx,hNe,pNe,uNe,cf,UK,_Ne,bNe,Bx,vNe,FNe,TNe,ff,JK,MNe,ENe,Px,CNe,wNe,ANe,mf,YK,yNe,LNe,Ix,xNe,$Ne,kNe,gf,KK,SNe,RNe,qx,BNe,PNe,INe,hf,ZK,qNe,NNe,Nx,jNe,DNe,GNe,pf,eZ,ONe,VNe,jx,XNe,zNe,QNe,uf,oZ,WNe,HNe,Dx,UNe,JNe,YNe,_f,rZ,KNe,ZNe,Gx,eje,oje,rje,bf,tZ,tje,aje,Ox,nje,sje,lje,vf,aZ,ije,dje,Vx,cje,fje,mje,Ff,nZ,gje,hje,Xx,pje,uje,_je,Tf,sZ,bje,vje,zx,Fje,Tje,Mje,Mf,lZ,Eje,Cje,Qx,wje,Aje,yje,Ef,iZ,Lje,xje,Wx,$je,kje,Sje,Cf,dZ,Rje,Bje,Hx,Pje,Ije,qje,wf,cZ,Nje,jje,Ux,Dje,Gje,Oje,Af,fZ,Vje,Xje,Jx,zje,Qje,Wje,yf,mZ,Hje,Uje,Yx,Jje,Yje,Kje,Lf,gZ,Zje,eDe,Kx,oDe,rDe,tDe,xf,hZ,aDe,nDe,Zx,sDe,lDe,iDe,$f,pZ,dDe,cDe,e$,fDe,mDe,gDe,kf,uZ,hDe,pDe,o$,uDe,_De,bDe,Sf,_Z,vDe,FDe,r$,TDe,MDe,EDe,Rf,bZ,CDe,wDe,t$,ADe,yDe,LDe,Bf,vZ,xDe,$De,a$,kDe,SDe,RDe,Pf,FZ,BDe,PDe,n$,IDe,qDe,NDe,If,TZ,jDe,DDe,s$,GDe,ODe,VDe,qf,MZ,XDe,zDe,l$,QDe,WDe,HDe,Nf,EZ,UDe,JDe,i$,YDe,KDe,ZDe,jf,CZ,eGe,oGe,d$,rGe,tGe,aGe,Df,wZ,nGe,sGe,c$,lGe,iGe,dGe,Gf,AZ,cGe,fGe,f$,mGe,gGe,hGe,Of,yZ,pGe,uGe,m$,_Ge,bGe,vGe,Vf,LZ,FGe,TGe,g$,MGe,EGe,CGe,Xf,xZ,wGe,AGe,h$,yGe,LGe,xGe,zf,$Z,$Ge,kGe,p$,SGe,RGe,BGe,Qf,kZ,PGe,IGe,u$,qGe,NGe,jGe,Wf,SZ,DGe,GGe,_$,OGe,VGe,XGe,Hf,RZ,zGe,QGe,b$,WGe,HGe,UGe,Uf,BZ,JGe,YGe,v$,KGe,ZGe,eOe,Jf,PZ,oOe,rOe,F$,tOe,aOe,nOe,Yf,IZ,sOe,lOe,T$,iOe,dOe,cOe,Kf,qZ,fOe,mOe,M$,gOe,hOe,pOe,Zf,NZ,uOe,_Oe,E$,bOe,vOe,FOe,em,jZ,TOe,MOe,C$,EOe,COe,wOe,om,DZ,AOe,yOe,w$,LOe,xOe,$Oe,rm,GZ,kOe,SOe,A$,ROe,BOe,POe,tm,OZ,IOe,qOe,y$,NOe,jOe,DOe,am,VZ,GOe,OOe,L$,VOe,XOe,zOe,nm,XZ,QOe,WOe,x$,HOe,UOe,JOe,sm,zZ,YOe,KOe,$$,ZOe,eVe,oVe,lm,QZ,rVe,tVe,k$,aVe,nVe,sVe,im,WZ,lVe,iVe,S$,dVe,cVe,fVe,dm,HZ,mVe,gVe,R$,hVe,pVe,uVe,cm,UZ,_Ve,bVe,B$,vVe,FVe,TVe,fm,JZ,MVe,EVe,P$,CVe,wVe,AVe,mm,YZ,yVe,LVe,I$,xVe,$Ve,kVe,gm,KZ,SVe,RVe,q$,BVe,PVe,IVe,hm,ZZ,qVe,NVe,N$,jVe,DVe,GVe,pm,eee,OVe,VVe,j$,XVe,zVe,QVe,um,oee,WVe,HVe,D$,UVe,JVe,YVe,_m,ree,KVe,ZVe,G$,eXe,oXe,rXe,bm,tee,tXe,aXe,O$,nXe,sXe,lXe,vm,aee,iXe,dXe,V$,cXe,fXe,mXe,Fm,nee,gXe,hXe,X$,pXe,uXe,_Xe,Tm,see,bXe,vXe,z$,FXe,TXe,MXe,Mm,lee,EXe,CXe,Q$,wXe,AXe,yXe,Em,iee,LXe,xXe,W$,$Xe,kXe,SXe,Cm,dee,RXe,BXe,H$,PXe,IXe,qXe,wm,cee,NXe,jXe,U$,DXe,GXe,OXe,Am,fee,VXe,XXe,J$,zXe,QXe,WXe,ym,mee,HXe,UXe,Y$,JXe,YXe,KXe,Lm,gee,ZXe,eze,K$,oze,rze,tze,xm,hee,aze,nze,Z$,sze,lze,ize,$m,pee,dze,cze,ek,fze,mze,gze,km,uee,hze,pze,ok,uze,_ze,bze,Sm,_ee,vze,Fze,rk,Tze,Mze,Eze,Rm,bee,Cze,wze,tk,Aze,yze,Lze,Bm,vee,xze,$ze,ak,kze,Sze,Rze,Pm,Fee,Bze,Pze,nk,Ize,qze,Nze,Im,Tee,jze,Dze,sk,Gze,Oze,Vze,qm,Mee,Xze,zze,lk,Qze,Wze,Hze,Nm,Eee,Uze,Jze,ik,Yze,Kze,Zze,jm,Cee,eQe,oQe,dk,rQe,tQe,aQe,Dm,wee,nQe,sQe,ck,lQe,iQe,dQe,Gm,Aee,cQe,fQe,fk,mQe,gQe,hQe,Om,yee,pQe,uQe,mk,_Qe,bQe,vQe,Vm,Lee,FQe,TQe,gk,MQe,EQe,CQe,Xm,xee,wQe,AQe,hk,yQe,LQe,xQe,zm,$ee,$Qe,kQe,pk,SQe,RQe,BQe,Qm,kee,PQe,IQe,uk,qQe,NQe,jQe,Wm,See,DQe,GQe,_k,OQe,VQe,XQe,Hm,Ree,zQe,QQe,bk,WQe,HQe,UQe,Um,Bee,JQe,YQe,vk,KQe,ZQe,eWe,Jm,Pee,oWe,rWe,Fk,tWe,aWe,nWe,Ym,Iee,sWe,lWe,Tk,iWe,dWe,cWe,Km,qee,fWe,mWe,Mk,gWe,hWe,pWe,Zm,Nee,uWe,_We,Ek,bWe,vWe,FWe,eg,jee,TWe,MWe,Ck,EWe,CWe,wWe,og,Dee,AWe,yWe,wk,LWe,xWe,$We,rg,Gee,kWe,SWe,Ak,RWe,BWe,PWe,tg,IWe,ag,M3,qWe,Oee,NWe,NRe,mi,ng,Vee,E3,jWe,Xee,DWe,jRe,Eo,C3,GWe,w3,OWe,yk,VWe,XWe,zWe,A3,QWe,zee,WWe,HWe,UWe,Tr,y3,JWe,Qee,YWe,KWe,Fa,ZWe,Wee,eHe,oHe,Hee,rHe,tHe,Uee,aHe,nHe,sHe,k,yn,Jee,lHe,iHe,Lk,dHe,cHe,xk,fHe,mHe,gHe,Ln,Yee,hHe,pHe,$k,uHe,_He,kk,bHe,vHe,FHe,xn,Kee,THe,MHe,Sk,EHe,CHe,Rk,wHe,AHe,yHe,sg,Zee,LHe,xHe,Bk,$He,kHe,SHe,$n,eoe,RHe,BHe,Pk,PHe,IHe,Ik,qHe,NHe,jHe,lg,ooe,DHe,GHe,qk,OHe,VHe,XHe,ig,roe,zHe,QHe,Nk,WHe,HHe,UHe,dg,toe,JHe,YHe,jk,KHe,ZHe,eUe,kn,aoe,oUe,rUe,Dk,tUe,aUe,Gk,nUe,sUe,lUe,Sn,noe,iUe,dUe,Ok,cUe,fUe,Vk,mUe,gUe,hUe,Rn,soe,pUe,uUe,Xk,_Ue,bUe,zk,vUe,FUe,TUe,cg,loe,MUe,EUe,Qk,CUe,wUe,AUe,fg,ioe,yUe,LUe,Wk,xUe,$Ue,kUe,Bn,doe,SUe,RUe,Hk,BUe,PUe,Uk,IUe,qUe,NUe,mg,coe,jUe,DUe,Jk,GUe,OUe,VUe,Pn,foe,XUe,zUe,Yk,QUe,WUe,Kk,HUe,UUe,JUe,In,moe,YUe,KUe,Zk,ZUe,eJe,eS,oJe,rJe,tJe,qn,goe,aJe,nJe,oS,sJe,lJe,hoe,iJe,dJe,cJe,gg,poe,fJe,mJe,rS,gJe,hJe,pJe,Nn,uoe,uJe,_Je,tS,bJe,vJe,aS,FJe,TJe,MJe,jn,_oe,EJe,CJe,nS,wJe,AJe,sS,yJe,LJe,xJe,Dn,boe,$Je,kJe,lS,SJe,RJe,iS,BJe,PJe,IJe,Gn,voe,qJe,NJe,dS,jJe,DJe,cS,GJe,OJe,VJe,On,Foe,XJe,zJe,fS,QJe,WJe,mS,HJe,UJe,JJe,Vn,Toe,YJe,KJe,gS,ZJe,eYe,hS,oYe,rYe,tYe,hg,Moe,aYe,nYe,pS,sYe,lYe,iYe,Xn,Eoe,dYe,cYe,uS,fYe,mYe,_S,gYe,hYe,pYe,pg,Coe,uYe,_Ye,bS,bYe,vYe,FYe,zn,woe,TYe,MYe,vS,EYe,CYe,FS,wYe,AYe,yYe,Qn,Aoe,LYe,xYe,TS,$Ye,kYe,MS,SYe,RYe,BYe,Wn,yoe,PYe,IYe,ES,qYe,NYe,CS,jYe,DYe,GYe,Hn,Loe,OYe,VYe,wS,XYe,zYe,AS,QYe,WYe,HYe,Un,xoe,UYe,JYe,yS,YYe,KYe,LS,ZYe,eKe,oKe,ug,$oe,rKe,tKe,xS,aKe,nKe,sKe,Jn,koe,lKe,iKe,$S,dKe,cKe,kS,fKe,mKe,gKe,Yn,Soe,hKe,pKe,SS,uKe,_Ke,RS,bKe,vKe,FKe,Kn,Roe,TKe,MKe,BS,EKe,CKe,PS,wKe,AKe,yKe,Zn,Boe,LKe,xKe,IS,$Ke,kKe,qS,SKe,RKe,BKe,es,Poe,PKe,IKe,NS,qKe,NKe,jS,jKe,DKe,GKe,os,Ioe,OKe,VKe,DS,XKe,zKe,GS,QKe,WKe,HKe,_g,qoe,UKe,JKe,OS,YKe,KKe,ZKe,rs,Noe,eZe,oZe,VS,rZe,tZe,XS,aZe,nZe,sZe,bg,joe,lZe,iZe,zS,dZe,cZe,fZe,vg,Doe,mZe,gZe,QS,hZe,pZe,uZe,ts,Goe,_Ze,bZe,WS,vZe,FZe,HS,TZe,MZe,EZe,as,Ooe,CZe,wZe,US,AZe,yZe,JS,LZe,xZe,$Ze,ns,Voe,kZe,SZe,YS,RZe,BZe,KS,PZe,IZe,qZe,Fg,Xoe,NZe,jZe,ZS,DZe,GZe,OZe,ss,zoe,VZe,XZe,eR,zZe,QZe,oR,WZe,HZe,UZe,ls,Qoe,JZe,YZe,rR,KZe,ZZe,tR,eeo,oeo,reo,is,Woe,teo,aeo,aR,neo,seo,nR,leo,ieo,deo,ds,Hoe,ceo,feo,sR,meo,geo,lR,heo,peo,ueo,cs,Uoe,_eo,beo,iR,veo,Feo,dR,Teo,Meo,Eeo,fs,Joe,Ceo,weo,cR,Aeo,yeo,fR,Leo,xeo,$eo,Tg,Yoe,keo,Seo,mR,Reo,Beo,Peo,Mg,Koe,Ieo,qeo,gR,Neo,jeo,Deo,Eg,Zoe,Geo,Oeo,hR,Veo,Xeo,zeo,Cg,ere,Qeo,Weo,pR,Heo,Ueo,Jeo,ms,ore,Yeo,Keo,uR,Zeo,eoo,_R,ooo,roo,too,wg,rre,aoo,noo,bR,soo,loo,ioo,gs,tre,doo,coo,vR,foo,moo,FR,goo,hoo,poo,hs,are,uoo,_oo,TR,boo,voo,MR,Foo,Too,Moo,ps,nre,Eoo,Coo,ER,woo,Aoo,CR,yoo,Loo,xoo,us,sre,$oo,koo,wR,Soo,Roo,AR,Boo,Poo,Ioo,_s,lre,qoo,Noo,yR,joo,Doo,LR,Goo,Ooo,Voo,bs,ire,Xoo,zoo,xR,Qoo,Woo,$R,Hoo,Uoo,Joo,Ag,dre,Yoo,Koo,kR,Zoo,ero,oro,yg,cre,rro,tro,SR,aro,nro,sro,vs,fre,lro,iro,RR,dro,cro,BR,fro,mro,gro,Fs,mre,hro,pro,PR,uro,_ro,IR,bro,vro,Fro,Ts,gre,Tro,Mro,qR,Ero,Cro,NR,wro,Aro,yro,Lg,hre,Lro,xro,jR,$ro,kro,Sro,xg,pre,Rro,Bro,DR,Pro,Iro,qro,$g,ure,Nro,jro,GR,Dro,Gro,Oro,Ms,_re,Vro,Xro,OR,zro,Qro,VR,Wro,Hro,Uro,kg,bre,Jro,Yro,XR,Kro,Zro,eto,Sg,vre,oto,rto,zR,tto,ato,nto,Es,Fre,sto,lto,QR,ito,dto,WR,cto,fto,mto,Rg,Tre,gto,hto,HR,pto,uto,_to,Bg,Mre,bto,vto,UR,Fto,Tto,Mto,Cs,Ere,Eto,Cto,JR,wto,Ato,YR,yto,Lto,xto,ws,Cre,$to,kto,KR,Sto,Rto,ZR,Bto,Pto,Ito,As,wre,qto,Nto,eB,jto,Dto,oB,Gto,Oto,Vto,ys,Are,Xto,zto,rB,Qto,Wto,tB,Hto,Uto,Jto,Pg,Yto,Ig,L3,Kto,yre,Zto,DRe,gi,qg,Lre,x3,eao,xre,oao,GRe,Co,$3,rao,k3,tao,aB,aao,nao,sao,S3,lao,$re,iao,dao,cao,Xe,R3,fao,kre,mao,gao,Ta,hao,Sre,pao,uao,Rre,_ao,bao,Bre,vao,Fao,Tao,ae,Ng,Pre,Mao,Eao,nB,Cao,wao,Aao,jg,Ire,yao,Lao,sB,xao,$ao,kao,Dg,qre,Sao,Rao,lB,Bao,Pao,Iao,Gg,Nre,qao,Nao,iB,jao,Dao,Gao,Og,jre,Oao,Vao,dB,Xao,zao,Qao,Vg,Dre,Wao,Hao,cB,Uao,Jao,Yao,Xg,Gre,Kao,Zao,fB,eno,ono,rno,zg,Ore,tno,ano,mB,nno,sno,lno,Qg,Vre,ino,dno,gB,cno,fno,mno,Wg,Xre,gno,hno,hB,pno,uno,_no,Hg,zre,bno,vno,pB,Fno,Tno,Mno,Ug,Qre,Eno,Cno,uB,wno,Ano,yno,Jg,Wre,Lno,xno,_B,$no,kno,Sno,Yg,Hre,Rno,Bno,bB,Pno,Ino,qno,Kg,Ure,Nno,jno,vB,Dno,Gno,Ono,Zg,Jre,Vno,Xno,FB,zno,Qno,Wno,eh,Yre,Hno,Uno,TB,Jno,Yno,Kno,oh,Kre,Zno,eso,MB,oso,rso,tso,rh,Zre,aso,nso,EB,sso,lso,iso,th,ete,dso,cso,CB,fso,mso,gso,ah,ote,hso,pso,wB,uso,_so,bso,nh,rte,vso,Fso,AB,Tso,Mso,Eso,sh,tte,Cso,wso,yB,Aso,yso,Lso,lh,xso,ih,$so,dh,B3,kso,ate,Sso,ORe,hi,ch,nte,P3,Rso,ste,Bso,VRe,wo,I3,Pso,q3,Iso,LB,qso,Nso,jso,N3,Dso,lte,Gso,Oso,Vso,ze,j3,Xso,ite,zso,Qso,pi,Wso,dte,Hso,Uso,cte,Jso,Yso,Kso,be,fh,fte,Zso,elo,xB,olo,rlo,tlo,mh,mte,alo,nlo,$B,slo,llo,ilo,gh,gte,dlo,clo,kB,flo,mlo,glo,hh,hte,hlo,plo,SB,ulo,_lo,blo,ph,pte,vlo,Flo,RB,Tlo,Mlo,Elo,uh,ute,Clo,wlo,BB,Alo,ylo,Llo,_h,_te,xlo,$lo,PB,klo,Slo,Rlo,bh,bte,Blo,Plo,IB,Ilo,qlo,Nlo,vh,vte,jlo,Dlo,qB,Glo,Olo,Vlo,Fh,Fte,Xlo,zlo,NB,Qlo,Wlo,Hlo,Th,Tte,Ulo,Jlo,jB,Ylo,Klo,Zlo,Mh,Mte,eio,oio,DB,rio,tio,aio,Eh,Ete,nio,sio,GB,lio,iio,dio,Ch,Cte,cio,fio,OB,mio,gio,hio,wh,pio,Ah,uio,yh,D3,_io,wte,bio,XRe,ui,Lh,Ate,G3,vio,yte,Fio,zRe,Ao,O3,Tio,_i,Mio,VB,Eio,Cio,XB,wio,Aio,yio,V3,Lio,Lte,xio,$io,kio,Kr,X3,Sio,xte,Rio,Bio,bi,Pio,$te,Iio,qio,zB,Nio,jio,Dio,xh,Gio,Qe,z3,Oio,kte,Vio,Xio,Ma,zio,Ste,Qio,Wio,Rte,Hio,Uio,Bte,Jio,Yio,Kio,x,$h,Pte,Zio,edo,QB,odo,rdo,tdo,kh,Ite,ado,ndo,WB,sdo,ldo,ido,Sh,qte,ddo,cdo,HB,fdo,mdo,gdo,Rh,Nte,hdo,pdo,UB,udo,_do,bdo,Bh,jte,vdo,Fdo,JB,Tdo,Mdo,Edo,Ph,Dte,Cdo,wdo,YB,Ado,ydo,Ldo,Ih,Gte,xdo,$do,KB,kdo,Sdo,Rdo,qh,Ote,Bdo,Pdo,ZB,Ido,qdo,Ndo,Nh,Vte,jdo,Ddo,eP,Gdo,Odo,Vdo,jh,Xte,Xdo,zdo,oP,Qdo,Wdo,Hdo,Dh,zte,Udo,Jdo,rP,Ydo,Kdo,Zdo,Gh,Qte,eco,oco,tP,rco,tco,aco,Oh,Wte,nco,sco,aP,lco,ico,dco,Vh,Hte,cco,fco,nP,mco,gco,hco,Xh,Ute,pco,uco,sP,_co,bco,vco,zh,Jte,Fco,Tco,lP,Mco,Eco,Cco,Qh,Yte,wco,Aco,iP,yco,Lco,xco,Wh,Kte,$co,kco,dP,Sco,Rco,Bco,Hh,Zte,Pco,Ico,cP,qco,Nco,jco,Uh,eae,Dco,Gco,fP,Oco,Vco,Xco,Jh,oae,zco,Qco,mP,Wco,Hco,Uco,Yh,rae,Jco,Yco,gP,Kco,Zco,efo,Kh,tae,ofo,rfo,hP,tfo,afo,nfo,Zh,aae,sfo,lfo,pP,ifo,dfo,cfo,ep,nae,ffo,mfo,uP,gfo,hfo,pfo,op,sae,ufo,_fo,_P,bfo,vfo,Ffo,rp,lae,Tfo,Mfo,bP,Efo,Cfo,wfo,tp,iae,Afo,yfo,vP,Lfo,xfo,$fo,ap,dae,kfo,Sfo,FP,Rfo,Bfo,Pfo,np,cae,Ifo,qfo,TP,Nfo,jfo,Dfo,Ls,fae,Gfo,Ofo,MP,Vfo,Xfo,EP,zfo,Qfo,Wfo,sp,mae,Hfo,Ufo,CP,Jfo,Yfo,Kfo,lp,gae,Zfo,emo,wP,omo,rmo,tmo,ip,hae,amo,nmo,AP,smo,lmo,imo,dp,pae,dmo,cmo,yP,fmo,mmo,gmo,cp,uae,hmo,pmo,LP,umo,_mo,bmo,fp,_ae,vmo,Fmo,xP,Tmo,Mmo,Emo,mp,bae,Cmo,wmo,$P,Amo,ymo,Lmo,gp,vae,xmo,$mo,kP,kmo,Smo,Rmo,hp,Fae,Bmo,Pmo,SP,Imo,qmo,Nmo,pp,Tae,jmo,Dmo,RP,Gmo,Omo,Vmo,up,Mae,Xmo,zmo,BP,Qmo,Wmo,Hmo,_p,Eae,Umo,Jmo,PP,Ymo,Kmo,Zmo,bp,Cae,ego,ogo,IP,rgo,tgo,ago,vp,wae,ngo,sgo,qP,lgo,igo,dgo,Fp,Aae,cgo,fgo,NP,mgo,ggo,hgo,Tp,yae,pgo,ugo,jP,_go,bgo,vgo,Mp,Lae,Fgo,Tgo,DP,Mgo,Ego,Cgo,Ep,xae,wgo,Ago,GP,ygo,Lgo,xgo,Cp,$ae,$go,kgo,OP,Sgo,Rgo,Bgo,wp,kae,Pgo,Igo,VP,qgo,Ngo,jgo,Ap,Sae,Dgo,Ggo,XP,Ogo,Vgo,Xgo,yp,Rae,zgo,Qgo,zP,Wgo,Hgo,Ugo,Lp,Bae,Jgo,Ygo,QP,Kgo,Zgo,eho,xp,Pae,oho,rho,WP,tho,aho,nho,$p,Iae,sho,lho,HP,iho,dho,cho,kp,qae,fho,mho,UP,gho,hho,pho,Sp,Nae,uho,_ho,JP,bho,vho,Fho,Rp,jae,Tho,Mho,YP,Eho,Cho,who,Bp,Dae,Aho,yho,KP,Lho,xho,$ho,Pp,Gae,kho,Sho,ZP,Rho,Bho,Pho,Ip,Oae,Iho,qho,eI,Nho,jho,Dho,qp,Vae,Gho,Oho,oI,Vho,Xho,zho,Np,Xae,Qho,Who,rI,Hho,Uho,Jho,jp,zae,Yho,Kho,tI,Zho,epo,opo,Dp,Qae,rpo,tpo,aI,apo,npo,spo,Gp,Wae,lpo,ipo,nI,dpo,cpo,fpo,Op,Hae,mpo,gpo,sI,hpo,ppo,upo,Vp,Uae,_po,bpo,lI,vpo,Fpo,Tpo,Xp,Jae,Mpo,Epo,iI,Cpo,wpo,Apo,zp,Yae,ypo,Lpo,dI,xpo,$po,kpo,Qp,Kae,Spo,Rpo,cI,Bpo,Ppo,Ipo,Wp,Zae,qpo,Npo,fI,jpo,Dpo,Gpo,Hp,ene,Opo,Vpo,mI,Xpo,zpo,Qpo,Up,one,Wpo,Hpo,gI,Upo,Jpo,Ypo,Jp,rne,Kpo,Zpo,hI,euo,ouo,ruo,Yp,tne,tuo,auo,pI,nuo,suo,luo,Kp,ane,iuo,duo,uI,cuo,fuo,muo,Zp,nne,guo,huo,_I,puo,uuo,_uo,eu,sne,buo,vuo,bI,Fuo,Tuo,Muo,ou,lne,Euo,Cuo,vI,wuo,Auo,yuo,ru,ine,Luo,xuo,FI,$uo,kuo,Suo,tu,dne,Ruo,Buo,TI,Puo,Iuo,quo,au,cne,Nuo,juo,MI,Duo,Guo,Ouo,nu,fne,Vuo,Xuo,EI,zuo,Quo,Wuo,su,mne,Huo,Uuo,CI,Juo,Yuo,Kuo,lu,gne,Zuo,e_o,wI,o_o,r_o,t_o,iu,hne,a_o,n_o,AI,s_o,l_o,i_o,du,pne,d_o,c_o,yI,f_o,m_o,g_o,cu,une,h_o,p_o,LI,u_o,__o,b_o,fu,_ne,v_o,F_o,xI,T_o,M_o,E_o,mu,bne,C_o,w_o,$I,A_o,y_o,L_o,gu,vne,x_o,$_o,kI,k_o,S_o,R_o,hu,Fne,B_o,P_o,SI,I_o,q_o,N_o,pu,j_o,Tne,D_o,G_o,Mne,O_o,V_o,uu,QRe,vi,_u,Ene,Q3,X_o,Cne,z_o,WRe,yo,W3,Q_o,Fi,W_o,RI,H_o,U_o,BI,J_o,Y_o,K_o,H3,Z_o,wne,e1o,o1o,r1o,Zr,U3,t1o,Ane,a1o,n1o,Ti,s1o,yne,l1o,i1o,PI,d1o,c1o,f1o,bu,m1o,We,J3,g1o,Lne,h1o,p1o,Ea,u1o,xne,_1o,b1o,$ne,v1o,F1o,kne,T1o,M1o,E1o,G,vu,Sne,C1o,w1o,II,A1o,y1o,L1o,Fu,Rne,x1o,$1o,qI,k1o,S1o,R1o,Tu,Bne,B1o,P1o,NI,I1o,q1o,N1o,Mu,Pne,j1o,D1o,jI,G1o,O1o,V1o,Eu,Ine,X1o,z1o,DI,Q1o,W1o,H1o,Cu,qne,U1o,J1o,GI,Y1o,K1o,Z1o,wu,Nne,ebo,obo,OI,rbo,tbo,abo,Au,jne,nbo,sbo,VI,lbo,ibo,dbo,yu,Dne,cbo,fbo,XI,mbo,gbo,hbo,Lu,Gne,pbo,ubo,zI,_bo,bbo,vbo,xu,One,Fbo,Tbo,QI,Mbo,Ebo,Cbo,$u,Vne,wbo,Abo,WI,ybo,Lbo,xbo,ku,Xne,$bo,kbo,HI,Sbo,Rbo,Bbo,Su,zne,Pbo,Ibo,UI,qbo,Nbo,jbo,Ru,Qne,Dbo,Gbo,JI,Obo,Vbo,Xbo,Bu,Wne,zbo,Qbo,YI,Wbo,Hbo,Ubo,Pu,Hne,Jbo,Ybo,KI,Kbo,Zbo,e2o,Iu,Une,o2o,r2o,ZI,t2o,a2o,n2o,qu,Jne,s2o,l2o,eq,i2o,d2o,c2o,Nu,Yne,f2o,m2o,oq,g2o,h2o,p2o,ju,Kne,u2o,_2o,rq,b2o,v2o,F2o,Du,Zne,T2o,M2o,tq,E2o,C2o,w2o,Gu,ese,A2o,y2o,aq,L2o,x2o,$2o,Ou,ose,k2o,S2o,nq,R2o,B2o,P2o,Vu,rse,I2o,q2o,sq,N2o,j2o,D2o,Xu,tse,G2o,O2o,lq,V2o,X2o,z2o,zu,ase,Q2o,W2o,iq,H2o,U2o,J2o,Qu,nse,Y2o,K2o,dq,Z2o,evo,ovo,Wu,sse,rvo,tvo,cq,avo,nvo,svo,Hu,lse,lvo,ivo,fq,dvo,cvo,fvo,Uu,ise,mvo,gvo,mq,hvo,pvo,uvo,Ju,dse,_vo,bvo,gq,vvo,Fvo,Tvo,Yu,cse,Mvo,Evo,hq,Cvo,wvo,Avo,Ku,fse,yvo,Lvo,pq,xvo,$vo,kvo,Zu,mse,Svo,Rvo,uq,Bvo,Pvo,Ivo,e_,gse,qvo,Nvo,_q,jvo,Dvo,Gvo,o_,hse,Ovo,Vvo,bq,Xvo,zvo,Qvo,r_,pse,Wvo,Hvo,vq,Uvo,Jvo,Yvo,t_,use,Kvo,Zvo,Fq,eFo,oFo,rFo,a_,tFo,_se,aFo,nFo,bse,sFo,lFo,n_,HRe,Mi,s_,vse,Y3,iFo,Fse,dFo,URe,Lo,K3,cFo,Ei,fFo,Tq,mFo,gFo,Mq,hFo,pFo,uFo,Z3,_Fo,Tse,bFo,vFo,FFo,et,ew,TFo,Mse,MFo,EFo,Ci,CFo,Ese,wFo,AFo,Eq,yFo,LFo,xFo,l_,$Fo,He,ow,kFo,Cse,SFo,RFo,Ca,BFo,wse,PFo,IFo,Ase,qFo,NFo,yse,jFo,DFo,GFo,z,i_,Lse,OFo,VFo,Cq,XFo,zFo,QFo,d_,xse,WFo,HFo,wq,UFo,JFo,YFo,c_,$se,KFo,ZFo,Aq,e0o,o0o,r0o,f_,kse,t0o,a0o,yq,n0o,s0o,l0o,m_,Sse,i0o,d0o,Lq,c0o,f0o,m0o,g_,Rse,g0o,h0o,xq,p0o,u0o,_0o,h_,Bse,b0o,v0o,$q,F0o,T0o,M0o,p_,Pse,E0o,C0o,kq,w0o,A0o,y0o,u_,Ise,L0o,x0o,Sq,$0o,k0o,S0o,__,qse,R0o,B0o,Rq,P0o,I0o,q0o,b_,Nse,N0o,j0o,Bq,D0o,G0o,O0o,v_,jse,V0o,X0o,Pq,z0o,Q0o,W0o,F_,Dse,H0o,U0o,Iq,J0o,Y0o,K0o,T_,Gse,Z0o,e6o,qq,o6o,r6o,t6o,M_,Ose,a6o,n6o,Nq,s6o,l6o,i6o,E_,Vse,d6o,c6o,jq,f6o,m6o,g6o,C_,Xse,h6o,p6o,Dq,u6o,_6o,b6o,w_,zse,v6o,F6o,Gq,T6o,M6o,E6o,A_,Qse,C6o,w6o,Oq,A6o,y6o,L6o,y_,Wse,x6o,$6o,Vq,k6o,S6o,R6o,L_,Hse,B6o,P6o,Xq,I6o,q6o,N6o,x_,Use,j6o,D6o,zq,G6o,O6o,V6o,$_,Jse,X6o,z6o,Qq,Q6o,W6o,H6o,k_,Yse,U6o,J6o,Wq,Y6o,K6o,Z6o,S_,Kse,eTo,oTo,Hq,rTo,tTo,aTo,R_,Zse,nTo,sTo,Uq,lTo,iTo,dTo,B_,ele,cTo,fTo,Jq,mTo,gTo,hTo,P_,ole,pTo,uTo,Yq,_To,bTo,vTo,I_,rle,FTo,TTo,Kq,MTo,ETo,CTo,q_,tle,wTo,ATo,Zq,yTo,LTo,xTo,N_,ale,$To,kTo,eN,STo,RTo,BTo,j_,nle,PTo,ITo,oN,qTo,NTo,jTo,D_,sle,DTo,GTo,rN,OTo,VTo,XTo,G_,lle,zTo,QTo,tN,WTo,HTo,UTo,O_,ile,JTo,YTo,aN,KTo,ZTo,e8o,V_,o8o,dle,r8o,t8o,cle,a8o,n8o,X_,JRe,wi,z_,fle,rw,s8o,mle,l8o,YRe,xo,tw,i8o,Ai,d8o,nN,c8o,f8o,sN,m8o,g8o,h8o,aw,p8o,gle,u8o,_8o,b8o,ot,nw,v8o,hle,F8o,T8o,yi,M8o,ple,E8o,C8o,lN,w8o,A8o,y8o,Q_,L8o,Ue,sw,x8o,ule,$8o,k8o,wa,S8o,_le,R8o,B8o,ble,P8o,I8o,vle,q8o,N8o,j8o,Q,W_,Fle,D8o,G8o,iN,O8o,V8o,X8o,H_,Tle,z8o,Q8o,dN,W8o,H8o,U8o,U_,Mle,J8o,Y8o,cN,K8o,Z8o,e9o,J_,Ele,o9o,r9o,fN,t9o,a9o,n9o,Y_,Cle,s9o,l9o,mN,i9o,d9o,c9o,K_,wle,f9o,m9o,gN,g9o,h9o,p9o,Z_,Ale,u9o,_9o,hN,b9o,v9o,F9o,e1,yle,T9o,M9o,pN,E9o,C9o,w9o,o1,Lle,A9o,y9o,uN,L9o,x9o,$9o,r1,xle,k9o,S9o,_N,R9o,B9o,P9o,t1,$le,I9o,q9o,bN,N9o,j9o,D9o,a1,kle,G9o,O9o,vN,V9o,X9o,z9o,n1,Sle,Q9o,W9o,FN,H9o,U9o,J9o,s1,Rle,Y9o,K9o,TN,Z9o,eMo,oMo,l1,Ble,rMo,tMo,MN,aMo,nMo,sMo,i1,Ple,lMo,iMo,EN,dMo,cMo,fMo,d1,Ile,mMo,gMo,CN,hMo,pMo,uMo,c1,qle,_Mo,bMo,wN,vMo,FMo,TMo,f1,Nle,MMo,EMo,AN,CMo,wMo,AMo,m1,jle,yMo,LMo,yN,xMo,$Mo,kMo,g1,Dle,SMo,RMo,LN,BMo,PMo,IMo,h1,Gle,qMo,NMo,xN,jMo,DMo,GMo,p1,Ole,OMo,VMo,$N,XMo,zMo,QMo,u1,Vle,WMo,HMo,kN,UMo,JMo,YMo,_1,Xle,KMo,ZMo,SN,e4o,o4o,r4o,b1,zle,t4o,a4o,RN,n4o,s4o,l4o,v1,Qle,i4o,d4o,BN,c4o,f4o,m4o,F1,Wle,g4o,h4o,PN,p4o,u4o,_4o,T1,Hle,b4o,v4o,IN,F4o,T4o,M4o,M1,Ule,E4o,C4o,qN,w4o,A4o,y4o,E1,Jle,L4o,x4o,Yle,$4o,k4o,S4o,C1,Kle,R4o,B4o,NN,P4o,I4o,q4o,w1,Zle,N4o,j4o,jN,D4o,G4o,O4o,A1,eie,V4o,X4o,DN,z4o,Q4o,W4o,y1,oie,H4o,U4o,GN,J4o,Y4o,K4o,L1,Z4o,rie,eEo,oEo,tie,rEo,tEo,x1,KRe,Li,$1,aie,lw,aEo,nie,nEo,ZRe,$o,iw,sEo,xi,lEo,ON,iEo,dEo,VN,cEo,fEo,mEo,dw,gEo,sie,hEo,pEo,uEo,rt,cw,_Eo,lie,bEo,vEo,$i,FEo,iie,TEo,MEo,XN,EEo,CEo,wEo,k1,AEo,Je,fw,yEo,die,LEo,xEo,Aa,$Eo,cie,kEo,SEo,fie,REo,BEo,mie,PEo,IEo,qEo,he,S1,gie,NEo,jEo,zN,DEo,GEo,OEo,R1,hie,VEo,XEo,QN,zEo,QEo,WEo,B1,pie,HEo,UEo,WN,JEo,YEo,KEo,P1,uie,ZEo,e5o,HN,o5o,r5o,t5o,I1,_ie,a5o,n5o,UN,s5o,l5o,i5o,q1,bie,d5o,c5o,JN,f5o,m5o,g5o,N1,vie,h5o,p5o,YN,u5o,_5o,b5o,j1,Fie,v5o,F5o,KN,T5o,M5o,E5o,D1,Tie,C5o,w5o,ZN,A5o,y5o,L5o,G1,Mie,x5o,$5o,ej,k5o,S5o,R5o,O1,Eie,B5o,P5o,oj,I5o,q5o,N5o,V1,Cie,j5o,D5o,rj,G5o,O5o,V5o,X1,wie,X5o,z5o,tj,Q5o,W5o,H5o,z1,Aie,U5o,J5o,aj,Y5o,K5o,Z5o,Q1,yie,eCo,oCo,nj,rCo,tCo,aCo,W1,Lie,nCo,sCo,sj,lCo,iCo,dCo,H1,xie,cCo,fCo,lj,mCo,gCo,hCo,U1,pCo,$ie,uCo,_Co,kie,bCo,vCo,J1,eBe,ki,Y1,Sie,mw,FCo,Rie,TCo,oBe,ko,gw,MCo,Si,ECo,ij,CCo,wCo,dj,ACo,yCo,LCo,hw,xCo,Bie,$Co,kCo,SCo,tt,pw,RCo,Pie,BCo,PCo,Ri,ICo,Iie,qCo,NCo,cj,jCo,DCo,GCo,K1,OCo,Ye,uw,VCo,qie,XCo,zCo,ya,QCo,Nie,WCo,HCo,jie,UCo,JCo,Die,YCo,KCo,ZCo,q,Z1,Gie,e3o,o3o,fj,r3o,t3o,a3o,eb,Oie,n3o,s3o,mj,l3o,i3o,d3o,ob,Vie,c3o,f3o,gj,m3o,g3o,h3o,rb,Xie,p3o,u3o,hj,_3o,b3o,v3o,tb,zie,F3o,T3o,pj,M3o,E3o,C3o,ab,Qie,w3o,A3o,uj,y3o,L3o,x3o,nb,Wie,$3o,k3o,_j,S3o,R3o,B3o,sb,Hie,P3o,I3o,bj,q3o,N3o,j3o,lb,Uie,D3o,G3o,vj,O3o,V3o,X3o,ib,Jie,z3o,Q3o,Fj,W3o,H3o,U3o,db,Yie,J3o,Y3o,Tj,K3o,Z3o,ewo,cb,Kie,owo,rwo,Mj,two,awo,nwo,fb,Zie,swo,lwo,Ej,iwo,dwo,cwo,mb,ede,fwo,mwo,Cj,gwo,hwo,pwo,gb,ode,uwo,_wo,wj,bwo,vwo,Fwo,hb,rde,Two,Mwo,Aj,Ewo,Cwo,wwo,pb,tde,Awo,ywo,yj,Lwo,xwo,$wo,ub,ade,kwo,Swo,Lj,Rwo,Bwo,Pwo,_b,nde,Iwo,qwo,xj,Nwo,jwo,Dwo,bb,sde,Gwo,Owo,$j,Vwo,Xwo,zwo,vb,lde,Qwo,Wwo,kj,Hwo,Uwo,Jwo,Fb,ide,Ywo,Kwo,Sj,Zwo,eAo,oAo,Tb,dde,rAo,tAo,Rj,aAo,nAo,sAo,Mb,cde,lAo,iAo,Bj,dAo,cAo,fAo,Eb,fde,mAo,gAo,Pj,hAo,pAo,uAo,Cb,mde,_Ao,bAo,Ij,vAo,FAo,TAo,wb,gde,MAo,EAo,qj,CAo,wAo,AAo,Ab,hde,yAo,LAo,Nj,xAo,$Ao,kAo,yb,pde,SAo,RAo,jj,BAo,PAo,IAo,Lb,ude,qAo,NAo,Dj,jAo,DAo,GAo,xb,_de,OAo,VAo,Gj,XAo,zAo,QAo,$b,bde,WAo,HAo,Oj,UAo,JAo,YAo,kb,vde,KAo,ZAo,Vj,eyo,oyo,ryo,Sb,Fde,tyo,ayo,Xj,nyo,syo,lyo,Rb,Tde,iyo,dyo,zj,cyo,fyo,myo,Bb,Mde,gyo,hyo,Qj,pyo,uyo,_yo,Pb,Ede,byo,vyo,Wj,Fyo,Tyo,Myo,Ib,Cde,Eyo,Cyo,Hj,wyo,Ayo,yyo,qb,wde,Lyo,xyo,Uj,$yo,kyo,Syo,Nb,Ade,Ryo,Byo,Jj,Pyo,Iyo,qyo,jb,yde,Nyo,jyo,Yj,Dyo,Gyo,Oyo,Db,Lde,Vyo,Xyo,Kj,zyo,Qyo,Wyo,Gb,xde,Hyo,Uyo,Zj,Jyo,Yyo,Kyo,Ob,$de,Zyo,eLo,eD,oLo,rLo,tLo,Vb,kde,aLo,nLo,oD,sLo,lLo,iLo,Xb,Sde,dLo,cLo,rD,fLo,mLo,gLo,zb,Rde,hLo,pLo,tD,uLo,_Lo,bLo,Qb,vLo,Bde,FLo,TLo,Pde,MLo,ELo,Wb,rBe,Bi,Hb,Ide,_w,CLo,qde,wLo,tBe,So,bw,ALo,Pi,yLo,aD,LLo,xLo,nD,$Lo,kLo,SLo,vw,RLo,Nde,BLo,PLo,ILo,at,Fw,qLo,jde,NLo,jLo,Ii,DLo,Dde,GLo,OLo,sD,VLo,XLo,zLo,Ub,QLo,Ke,Tw,WLo,Gde,HLo,ULo,La,JLo,Ode,YLo,KLo,Vde,ZLo,e7o,Xde,o7o,r7o,t7o,Y,Jb,zde,a7o,n7o,lD,s7o,l7o,i7o,Yb,Qde,d7o,c7o,iD,f7o,m7o,g7o,Kb,Wde,h7o,p7o,dD,u7o,_7o,b7o,Zb,Hde,v7o,F7o,cD,T7o,M7o,E7o,e2,Ude,C7o,w7o,fD,A7o,y7o,L7o,o2,Jde,x7o,$7o,mD,k7o,S7o,R7o,r2,Yde,B7o,P7o,gD,I7o,q7o,N7o,t2,Kde,j7o,D7o,hD,G7o,O7o,V7o,a2,Zde,X7o,z7o,pD,Q7o,W7o,H7o,n2,ece,U7o,J7o,uD,Y7o,K7o,Z7o,s2,oce,exo,oxo,_D,rxo,txo,axo,l2,rce,nxo,sxo,bD,lxo,ixo,dxo,i2,tce,cxo,fxo,vD,mxo,gxo,hxo,d2,ace,pxo,uxo,FD,_xo,bxo,vxo,c2,nce,Fxo,Txo,TD,Mxo,Exo,Cxo,f2,sce,wxo,Axo,MD,yxo,Lxo,xxo,m2,lce,$xo,kxo,ED,Sxo,Rxo,Bxo,g2,ice,Pxo,Ixo,CD,qxo,Nxo,jxo,h2,dce,Dxo,Gxo,wD,Oxo,Vxo,Xxo,p2,cce,zxo,Qxo,AD,Wxo,Hxo,Uxo,u2,fce,Jxo,Yxo,yD,Kxo,Zxo,e$o,_2,mce,o$o,r$o,LD,t$o,a$o,n$o,b2,gce,s$o,l$o,xD,i$o,d$o,c$o,v2,hce,f$o,m$o,$D,g$o,h$o,p$o,F2,pce,u$o,_$o,kD,b$o,v$o,F$o,T2,uce,T$o,M$o,SD,E$o,C$o,w$o,M2,_ce,A$o,y$o,RD,L$o,x$o,$$o,E2,bce,k$o,S$o,BD,R$o,B$o,P$o,C2,I$o,vce,q$o,N$o,Fce,j$o,D$o,w2,aBe,qi,A2,Tce,Mw,G$o,Mce,O$o,nBe,Ro,Ew,V$o,Ni,X$o,PD,z$o,Q$o,ID,W$o,H$o,U$o,Cw,J$o,Ece,Y$o,K$o,Z$o,nt,ww,eko,Cce,oko,rko,ji,tko,wce,ako,nko,qD,sko,lko,iko,y2,dko,Ze,Aw,cko,Ace,fko,mko,xa,gko,yce,hko,pko,Lce,uko,_ko,xce,bko,vko,Fko,Wr,L2,$ce,Tko,Mko,ND,Eko,Cko,wko,x2,kce,Ako,yko,jD,Lko,xko,$ko,$2,Sce,kko,Sko,DD,Rko,Bko,Pko,k2,Rce,Iko,qko,GD,Nko,jko,Dko,S2,Bce,Gko,Oko,OD,Vko,Xko,zko,R2,Qko,Pce,Wko,Hko,Ice,Uko,Jko,B2,sBe,Di,P2,qce,yw,Yko,Nce,Kko,lBe,Bo,Lw,Zko,Gi,eSo,VD,oSo,rSo,XD,tSo,aSo,nSo,xw,sSo,jce,lSo,iSo,dSo,st,$w,cSo,Dce,fSo,mSo,Oi,gSo,Gce,hSo,pSo,zD,uSo,_So,bSo,I2,vSo,eo,kw,FSo,Oce,TSo,MSo,$a,ESo,Vce,CSo,wSo,Xce,ASo,ySo,zce,LSo,xSo,$So,U,q2,Qce,kSo,SSo,QD,RSo,BSo,PSo,N2,Wce,ISo,qSo,WD,NSo,jSo,DSo,j2,Hce,GSo,OSo,HD,VSo,XSo,zSo,D2,Uce,QSo,WSo,UD,HSo,USo,JSo,G2,Jce,YSo,KSo,JD,ZSo,eRo,oRo,O2,Yce,rRo,tRo,YD,aRo,nRo,sRo,V2,Kce,lRo,iRo,KD,dRo,cRo,fRo,X2,Zce,mRo,gRo,ZD,hRo,pRo,uRo,z2,efe,_Ro,bRo,eG,vRo,FRo,TRo,Q2,ofe,MRo,ERo,oG,CRo,wRo,ARo,W2,rfe,yRo,LRo,rG,xRo,$Ro,kRo,H2,tfe,SRo,RRo,tG,BRo,PRo,IRo,U2,afe,qRo,NRo,aG,jRo,DRo,GRo,J2,nfe,ORo,VRo,nG,XRo,zRo,QRo,Y2,sfe,WRo,HRo,sG,URo,JRo,YRo,K2,lfe,KRo,ZRo,lG,eBo,oBo,rBo,Z2,ife,tBo,aBo,iG,nBo,sBo,lBo,ev,dfe,iBo,dBo,dG,cBo,fBo,mBo,ov,cfe,gBo,hBo,cG,pBo,uBo,_Bo,rv,ffe,bBo,vBo,fG,FBo,TBo,MBo,tv,mfe,EBo,CBo,mG,wBo,ABo,yBo,av,gfe,LBo,xBo,gG,$Bo,kBo,SBo,nv,hfe,RBo,BBo,hG,PBo,IBo,qBo,sv,pfe,NBo,jBo,pG,DBo,GBo,OBo,lv,ufe,VBo,XBo,uG,zBo,QBo,WBo,iv,_fe,HBo,UBo,_G,JBo,YBo,KBo,dv,bfe,ZBo,ePo,bG,oPo,rPo,tPo,cv,vfe,aPo,nPo,vG,sPo,lPo,iPo,fv,Ffe,dPo,cPo,FG,fPo,mPo,gPo,mv,Tfe,hPo,pPo,TG,uPo,_Po,bPo,gv,Mfe,vPo,FPo,MG,TPo,MPo,EPo,hv,Efe,CPo,wPo,EG,APo,yPo,LPo,pv,Cfe,xPo,$Po,CG,kPo,SPo,RPo,uv,BPo,wfe,PPo,IPo,Afe,qPo,NPo,_v,iBe,Vi,bv,yfe,Sw,jPo,Lfe,DPo,dBe,Po,Rw,GPo,Xi,OPo,wG,VPo,XPo,AG,zPo,QPo,WPo,Bw,HPo,xfe,UPo,JPo,YPo,lt,Pw,KPo,$fe,ZPo,eIo,zi,oIo,kfe,rIo,tIo,yG,aIo,nIo,sIo,vv,lIo,oo,Iw,iIo,Sfe,dIo,cIo,ka,fIo,Rfe,mIo,gIo,Bfe,hIo,pIo,Pfe,uIo,_Io,bIo,O,Fv,Ife,vIo,FIo,LG,TIo,MIo,EIo,Tv,qfe,CIo,wIo,xG,AIo,yIo,LIo,Mv,Nfe,xIo,$Io,$G,kIo,SIo,RIo,Ev,jfe,BIo,PIo,kG,IIo,qIo,NIo,Cv,Dfe,jIo,DIo,SG,GIo,OIo,VIo,wv,Gfe,XIo,zIo,RG,QIo,WIo,HIo,Av,Ofe,UIo,JIo,BG,YIo,KIo,ZIo,yv,Vfe,eqo,oqo,PG,rqo,tqo,aqo,Lv,Xfe,nqo,sqo,IG,lqo,iqo,dqo,xv,zfe,cqo,fqo,qG,mqo,gqo,hqo,$v,Qfe,pqo,uqo,NG,_qo,bqo,vqo,kv,Wfe,Fqo,Tqo,jG,Mqo,Eqo,Cqo,Sv,Hfe,wqo,Aqo,DG,yqo,Lqo,xqo,Rv,Ufe,$qo,kqo,GG,Sqo,Rqo,Bqo,Bv,Jfe,Pqo,Iqo,OG,qqo,Nqo,jqo,Pv,Yfe,Dqo,Gqo,VG,Oqo,Vqo,Xqo,Iv,Kfe,zqo,Qqo,XG,Wqo,Hqo,Uqo,qv,Zfe,Jqo,Yqo,zG,Kqo,Zqo,eNo,Nv,eme,oNo,rNo,QG,tNo,aNo,nNo,jv,ome,sNo,lNo,WG,iNo,dNo,cNo,Dv,rme,fNo,mNo,HG,gNo,hNo,pNo,Gv,tme,uNo,_No,UG,bNo,vNo,FNo,Ov,ame,TNo,MNo,JG,ENo,CNo,wNo,Vv,nme,ANo,yNo,YG,LNo,xNo,$No,Xv,sme,kNo,SNo,KG,RNo,BNo,PNo,zv,lme,INo,qNo,ZG,NNo,jNo,DNo,Qv,ime,GNo,ONo,eO,VNo,XNo,zNo,Wv,dme,QNo,WNo,oO,HNo,UNo,JNo,Hv,cme,YNo,KNo,rO,ZNo,ejo,ojo,Uv,fme,rjo,tjo,tO,ajo,njo,sjo,Jv,mme,ljo,ijo,aO,djo,cjo,fjo,Yv,gme,mjo,gjo,nO,hjo,pjo,ujo,Kv,hme,_jo,bjo,sO,vjo,Fjo,Tjo,Zv,pme,Mjo,Ejo,lO,Cjo,wjo,Ajo,eF,ume,yjo,Ljo,iO,xjo,$jo,kjo,oF,_me,Sjo,Rjo,dO,Bjo,Pjo,Ijo,rF,bme,qjo,Njo,cO,jjo,Djo,Gjo,tF,vme,Ojo,Vjo,fO,Xjo,zjo,Qjo,aF,Fme,Wjo,Hjo,mO,Ujo,Jjo,Yjo,nF,Kjo,Tme,Zjo,eDo,Mme,oDo,rDo,sF,cBe,Qi,lF,Eme,qw,tDo,Cme,aDo,fBe,Io,Nw,nDo,Wi,sDo,gO,lDo,iDo,hO,dDo,cDo,fDo,jw,mDo,wme,gDo,hDo,pDo,it,Dw,uDo,Ame,_Do,bDo,Hi,vDo,yme,FDo,TDo,pO,MDo,EDo,CDo,iF,wDo,ro,Gw,ADo,Lme,yDo,LDo,Sa,xDo,xme,$Do,kDo,$me,SDo,RDo,kme,BDo,PDo,IDo,Sme,dF,Rme,qDo,NDo,uO,jDo,DDo,GDo,cF,ODo,Bme,VDo,XDo,Pme,zDo,QDo,fF,mBe,Ui,mF,Ime,Ow,WDo,qme,HDo,gBe,qo,Vw,UDo,Ji,JDo,_O,YDo,KDo,bO,ZDo,eGo,oGo,Xw,rGo,Nme,tGo,aGo,nGo,dt,zw,sGo,jme,lGo,iGo,Yi,dGo,Dme,cGo,fGo,vO,mGo,gGo,hGo,gF,pGo,to,Qw,uGo,Gme,_Go,bGo,Ra,vGo,Ome,FGo,TGo,Vme,MGo,EGo,Xme,CGo,wGo,AGo,ve,hF,zme,yGo,LGo,FO,xGo,$Go,kGo,pF,Qme,SGo,RGo,TO,BGo,PGo,IGo,uF,Wme,qGo,NGo,MO,jGo,DGo,GGo,xs,Hme,OGo,VGo,EO,XGo,zGo,CO,QGo,WGo,HGo,_F,Ume,UGo,JGo,wO,YGo,KGo,ZGo,ct,Jme,eOo,oOo,AO,rOo,tOo,yO,aOo,nOo,LO,sOo,lOo,iOo,bF,Yme,dOo,cOo,xO,fOo,mOo,gOo,vF,Kme,hOo,pOo,$O,uOo,_Oo,bOo,FF,Zme,vOo,FOo,kO,TOo,MOo,EOo,TF,ege,COo,wOo,SO,AOo,yOo,LOo,MF,oge,xOo,$Oo,RO,kOo,SOo,ROo,EF,rge,BOo,POo,BO,IOo,qOo,NOo,CF,tge,jOo,DOo,PO,GOo,OOo,VOo,wF,XOo,age,zOo,QOo,nge,WOo,HOo,AF,hBe,Ki,yF,sge,Ww,UOo,lge,JOo,pBe,No,Hw,YOo,Zi,KOo,IO,ZOo,eVo,qO,oVo,rVo,tVo,Uw,aVo,ige,nVo,sVo,lVo,ft,Jw,iVo,dge,dVo,cVo,ed,fVo,cge,mVo,gVo,NO,hVo,pVo,uVo,LF,_Vo,ao,Yw,bVo,fge,vVo,FVo,Ba,TVo,mge,MVo,EVo,gge,CVo,wVo,hge,AVo,yVo,LVo,pge,xF,uge,xVo,$Vo,jO,kVo,SVo,RVo,$F,BVo,_ge,PVo,IVo,bge,qVo,NVo,kF,uBe,od,SF,vge,Kw,jVo,Fge,DVo,_Be,jo,Zw,GVo,rd,OVo,DO,VVo,XVo,GO,zVo,QVo,WVo,eA,HVo,Tge,UVo,JVo,YVo,mt,oA,KVo,Mge,ZVo,eXo,td,oXo,Ege,rXo,tXo,OO,aXo,nXo,sXo,RF,lXo,no,rA,iXo,Cge,dXo,cXo,Pa,fXo,wge,mXo,gXo,Age,hXo,pXo,yge,uXo,_Xo,bXo,qe,BF,Lge,vXo,FXo,VO,TXo,MXo,EXo,PF,xge,CXo,wXo,XO,AXo,yXo,LXo,IF,$ge,xXo,$Xo,zO,kXo,SXo,RXo,qF,kge,BXo,PXo,QO,IXo,qXo,NXo,NF,Sge,jXo,DXo,WO,GXo,OXo,VXo,jF,Rge,XXo,zXo,HO,QXo,WXo,HXo,DF,Bge,UXo,JXo,UO,YXo,KXo,ZXo,GF,Pge,ezo,ozo,JO,rzo,tzo,azo,OF,nzo,Ige,szo,lzo,qge,izo,dzo,VF,bBe,ad,XF,Nge,tA,czo,jge,fzo,vBe,Do,aA,mzo,nd,gzo,YO,hzo,pzo,KO,uzo,_zo,bzo,nA,vzo,Dge,Fzo,Tzo,Mzo,gt,sA,Ezo,Gge,Czo,wzo,sd,Azo,Oge,yzo,Lzo,ZO,xzo,$zo,kzo,zF,Szo,so,lA,Rzo,Vge,Bzo,Pzo,Ia,Izo,Xge,qzo,Nzo,zge,jzo,Dzo,Qge,Gzo,Ozo,Vzo,qa,QF,Wge,Xzo,zzo,eV,Qzo,Wzo,Hzo,WF,Hge,Uzo,Jzo,oV,Yzo,Kzo,Zzo,HF,Uge,eQo,oQo,rV,rQo,tQo,aQo,UF,Jge,nQo,sQo,tV,lQo,iQo,dQo,JF,cQo,Yge,fQo,mQo,Kge,gQo,hQo,YF,FBe,ld,KF,Zge,iA,pQo,ehe,uQo,TBe,Go,dA,_Qo,id,bQo,aV,vQo,FQo,nV,TQo,MQo,EQo,cA,CQo,ohe,wQo,AQo,yQo,ht,fA,LQo,rhe,xQo,$Qo,dd,kQo,the,SQo,RQo,sV,BQo,PQo,IQo,ZF,qQo,lo,mA,NQo,ahe,jQo,DQo,Na,GQo,nhe,OQo,VQo,she,XQo,zQo,lhe,QQo,WQo,HQo,Ne,e0,ihe,UQo,JQo,lV,YQo,KQo,ZQo,o0,dhe,eWo,oWo,iV,rWo,tWo,aWo,r0,che,nWo,sWo,dV,lWo,iWo,dWo,t0,fhe,cWo,fWo,cV,mWo,gWo,hWo,a0,mhe,pWo,uWo,fV,_Wo,bWo,vWo,n0,ghe,FWo,TWo,mV,MWo,EWo,CWo,s0,hhe,wWo,AWo,gV,yWo,LWo,xWo,l0,phe,$Wo,kWo,hV,SWo,RWo,BWo,i0,PWo,uhe,IWo,qWo,_he,NWo,jWo,d0,MBe,cd,c0,bhe,gA,DWo,vhe,GWo,EBe,Oo,hA,OWo,fd,VWo,pV,XWo,zWo,uV,QWo,WWo,HWo,pA,UWo,Fhe,JWo,YWo,KWo,pt,uA,ZWo,The,eHo,oHo,md,rHo,Mhe,tHo,aHo,_V,nHo,sHo,lHo,f0,iHo,io,_A,dHo,Ehe,cHo,fHo,ja,mHo,Che,gHo,hHo,whe,pHo,uHo,Ahe,_Ho,bHo,vHo,bA,m0,yhe,FHo,THo,bV,MHo,EHo,CHo,g0,Lhe,wHo,AHo,vV,yHo,LHo,xHo,h0,$Ho,xhe,kHo,SHo,$he,RHo,BHo,p0,CBe,gd,u0,khe,vA,PHo,She,IHo,wBe,Vo,FA,qHo,hd,NHo,FV,jHo,DHo,TV,GHo,OHo,VHo,TA,XHo,Rhe,zHo,QHo,WHo,ut,MA,HHo,Bhe,UHo,JHo,pd,YHo,Phe,KHo,ZHo,MV,eUo,oUo,rUo,_0,tUo,co,EA,aUo,Ihe,nUo,sUo,Da,lUo,qhe,iUo,dUo,Nhe,cUo,fUo,jhe,mUo,gUo,hUo,Ga,b0,Dhe,pUo,uUo,EV,_Uo,bUo,vUo,v0,Ghe,FUo,TUo,CV,MUo,EUo,CUo,F0,Ohe,wUo,AUo,wV,yUo,LUo,xUo,T0,Vhe,$Uo,kUo,AV,SUo,RUo,BUo,M0,PUo,Xhe,IUo,qUo,zhe,NUo,jUo,E0,ABe,ud,C0,Qhe,CA,DUo,Whe,GUo,yBe,Xo,wA,OUo,_d,VUo,yV,XUo,zUo,LV,QUo,WUo,HUo,AA,UUo,Hhe,JUo,YUo,KUo,_t,yA,ZUo,Uhe,eJo,oJo,bd,rJo,Jhe,tJo,aJo,xV,nJo,sJo,lJo,w0,iJo,fo,LA,dJo,Yhe,cJo,fJo,Oa,mJo,Khe,gJo,hJo,Zhe,pJo,uJo,epe,_Jo,bJo,vJo,Va,A0,ope,FJo,TJo,$V,MJo,EJo,CJo,y0,rpe,wJo,AJo,kV,yJo,LJo,xJo,L0,tpe,$Jo,kJo,SV,SJo,RJo,BJo,x0,ape,PJo,IJo,RV,qJo,NJo,jJo,$0,DJo,npe,GJo,OJo,spe,VJo,XJo,k0,LBe,vd,S0,lpe,xA,zJo,ipe,QJo,xBe,zo,$A,WJo,Fd,HJo,BV,UJo,JJo,PV,YJo,KJo,ZJo,kA,eYo,dpe,oYo,rYo,tYo,bt,SA,aYo,cpe,nYo,sYo,Td,lYo,fpe,iYo,dYo,IV,cYo,fYo,mYo,R0,gYo,mo,RA,hYo,mpe,pYo,uYo,Xa,_Yo,gpe,bYo,vYo,hpe,FYo,TYo,ppe,MYo,EYo,CYo,upe,B0,_pe,wYo,AYo,qV,yYo,LYo,xYo,P0,$Yo,bpe,kYo,SYo,vpe,RYo,BYo,I0,$Be,Md,q0,Fpe,BA,PYo,Tpe,IYo,kBe,Qo,PA,qYo,Ed,NYo,NV,jYo,DYo,jV,GYo,OYo,VYo,IA,XYo,Mpe,zYo,QYo,WYo,vt,qA,HYo,Epe,UYo,JYo,Cd,YYo,Cpe,KYo,ZYo,DV,eKo,oKo,rKo,N0,tKo,go,NA,aKo,wpe,nKo,sKo,za,lKo,Ape,iKo,dKo,ype,cKo,fKo,Lpe,mKo,gKo,hKo,xpe,j0,$pe,pKo,uKo,GV,_Ko,bKo,vKo,D0,FKo,kpe,TKo,MKo,Spe,EKo,CKo,G0,SBe,wd,O0,Rpe,jA,wKo,Bpe,AKo,RBe,Wo,DA,yKo,Ad,LKo,OV,xKo,$Ko,VV,kKo,SKo,RKo,GA,BKo,Ppe,PKo,IKo,qKo,Ft,OA,NKo,Ipe,jKo,DKo,yd,GKo,qpe,OKo,VKo,XV,XKo,zKo,QKo,V0,WKo,ho,VA,HKo,Npe,UKo,JKo,Qa,YKo,jpe,KKo,ZKo,Dpe,eZo,oZo,Gpe,rZo,tZo,aZo,Wa,X0,Ope,nZo,sZo,zV,lZo,iZo,dZo,z0,Vpe,cZo,fZo,QV,mZo,gZo,hZo,Q0,Xpe,pZo,uZo,WV,_Zo,bZo,vZo,W0,zpe,FZo,TZo,HV,MZo,EZo,CZo,H0,wZo,Qpe,AZo,yZo,Wpe,LZo,xZo,U0,BBe,Ld,J0,Hpe,XA,$Zo,Upe,kZo,PBe,Ho,zA,SZo,xd,RZo,UV,BZo,PZo,JV,IZo,qZo,NZo,QA,jZo,Jpe,DZo,GZo,OZo,Tt,WA,VZo,Ype,XZo,zZo,$d,QZo,Kpe,WZo,HZo,YV,UZo,JZo,YZo,Y0,KZo,po,HA,ZZo,Zpe,eer,oer,Ha,rer,eue,ter,aer,oue,ner,ser,rue,ler,ier,der,tue,K0,aue,cer,fer,KV,mer,ger,her,Z0,per,nue,uer,_er,sue,ber,ver,e6,IBe,kd,o6,lue,UA,Fer,iue,Ter,qBe,Uo,JA,Mer,Sd,Eer,ZV,Cer,wer,eX,Aer,yer,Ler,YA,xer,due,$er,ker,Ser,Mt,KA,Rer,cue,Ber,Per,Rd,Ier,fue,qer,Ner,oX,jer,Der,Ger,r6,Oer,Mr,ZA,Ver,mue,Xer,zer,Ua,Qer,gue,Wer,Her,hue,Uer,Jer,pue,Yer,Ker,Zer,j,t6,uue,eor,oor,rX,ror,tor,aor,a6,_ue,nor,sor,tX,lor,ior,dor,n6,bue,cor,mor,aX,gor,hor,por,s6,vue,uor,_or,nX,bor,vor,For,l6,Fue,Tor,Mor,sX,Eor,Cor,wor,i6,Tue,Aor,yor,lX,Lor,xor,$or,d6,Mue,kor,Sor,iX,Ror,Bor,Por,c6,Eue,Ior,qor,dX,Nor,jor,Dor,f6,Cue,Gor,Oor,cX,Vor,Xor,zor,m6,wue,Qor,Wor,fX,Hor,Uor,Jor,g6,Aue,Yor,Kor,mX,Zor,err,orr,h6,yue,rrr,trr,gX,arr,nrr,srr,p6,Lue,lrr,irr,hX,drr,crr,frr,u6,xue,mrr,grr,pX,hrr,prr,urr,_6,$ue,_rr,brr,uX,vrr,Frr,Trr,b6,kue,Mrr,Err,_X,Crr,wrr,Arr,$s,Sue,yrr,Lrr,bX,xrr,$rr,vX,krr,Srr,Rrr,v6,Rue,Brr,Prr,FX,Irr,qrr,Nrr,F6,Bue,jrr,Drr,TX,Grr,Orr,Vrr,T6,Pue,Xrr,zrr,MX,Qrr,Wrr,Hrr,M6,Iue,Urr,Jrr,EX,Yrr,Krr,Zrr,E6,que,etr,otr,CX,rtr,ttr,atr,C6,Nue,ntr,str,wX,ltr,itr,dtr,w6,jue,ctr,ftr,AX,mtr,gtr,htr,A6,Due,ptr,utr,yX,_tr,btr,vtr,y6,Gue,Ftr,Ttr,LX,Mtr,Etr,Ctr,L6,Oue,wtr,Atr,xX,ytr,Ltr,xtr,x6,Vue,$tr,ktr,$X,Str,Rtr,Btr,$6,Xue,Ptr,Itr,kX,qtr,Ntr,jtr,k6,zue,Dtr,Gtr,SX,Otr,Vtr,Xtr,S6,Que,ztr,Qtr,RX,Wtr,Htr,Utr,R6,Wue,Jtr,Ytr,BX,Ktr,Ztr,ear,B6,Hue,oar,rar,PX,tar,aar,nar,P6,Uue,sar,lar,IX,iar,dar,car,I6,Jue,far,mar,qX,gar,har,par,q6,Yue,uar,_ar,NX,bar,Far,Tar,N6,Kue,Mar,Ear,jX,Car,war,Aar,j6,Zue,yar,Lar,DX,xar,$ar,kar,D6,e_e,Sar,Rar,GX,Bar,Par,Iar,G6,o_e,qar,Nar,OX,jar,Dar,Gar,O6,r_e,Oar,Var,VX,Xar,zar,Qar,V6,t_e,War,Har,XX,Uar,Jar,Yar,X6,a_e,Kar,Zar,zX,enr,onr,rnr,z6,n_e,tnr,anr,QX,nnr,snr,lnr,Q6,NBe,Bd,W6,s_e,ey,inr,l_e,dnr,jBe,Jo,oy,cnr,Pd,fnr,WX,mnr,gnr,HX,hnr,pnr,unr,ry,_nr,i_e,bnr,vnr,Fnr,Et,ty,Tnr,d_e,Mnr,Enr,Id,Cnr,c_e,wnr,Anr,UX,ynr,Lnr,xnr,H6,$nr,Er,ay,knr,f_e,Snr,Rnr,Ja,Bnr,m_e,Pnr,Inr,g_e,qnr,Nnr,h_e,jnr,Dnr,Gnr,ne,U6,p_e,Onr,Vnr,JX,Xnr,znr,Qnr,J6,u_e,Wnr,Hnr,YX,Unr,Jnr,Ynr,Y6,__e,Knr,Znr,KX,esr,osr,rsr,K6,b_e,tsr,asr,ZX,nsr,ssr,lsr,Z6,v_e,isr,dsr,ez,csr,fsr,msr,eT,F_e,gsr,hsr,oz,psr,usr,_sr,oT,T_e,bsr,vsr,rz,Fsr,Tsr,Msr,rT,M_e,Esr,Csr,tz,wsr,Asr,ysr,tT,E_e,Lsr,xsr,az,$sr,ksr,Ssr,aT,C_e,Rsr,Bsr,nz,Psr,Isr,qsr,nT,w_e,Nsr,jsr,sz,Dsr,Gsr,Osr,sT,A_e,Vsr,Xsr,lz,zsr,Qsr,Wsr,lT,y_e,Hsr,Usr,iz,Jsr,Ysr,Ksr,iT,L_e,Zsr,elr,dz,olr,rlr,tlr,dT,x_e,alr,nlr,cz,slr,llr,ilr,cT,$_e,dlr,clr,fz,flr,mlr,glr,fT,k_e,hlr,plr,mz,ulr,_lr,blr,mT,S_e,vlr,Flr,gz,Tlr,Mlr,Elr,gT,R_e,Clr,wlr,hz,Alr,ylr,Llr,hT,B_e,xlr,$lr,pz,klr,Slr,Rlr,pT,P_e,Blr,Plr,uz,Ilr,qlr,Nlr,uT,I_e,jlr,Dlr,_z,Glr,Olr,Vlr,_T,q_e,Xlr,zlr,bz,Qlr,Wlr,Hlr,bT,DBe,qd,vT,N_e,ny,Ulr,j_e,Jlr,GBe,Yo,sy,Ylr,Nd,Klr,vz,Zlr,eir,Fz,oir,rir,tir,ly,air,D_e,nir,sir,lir,Ct,iy,iir,G_e,dir,cir,jd,fir,O_e,mir,gir,Tz,hir,pir,uir,FT,_ir,Cr,dy,bir,V_e,vir,Fir,Ya,Tir,X_e,Mir,Eir,z_e,Cir,wir,Q_e,Air,yir,Lir,Te,TT,W_e,xir,$ir,Mz,kir,Sir,Rir,MT,H_e,Bir,Pir,Ez,Iir,qir,Nir,ET,U_e,jir,Dir,Cz,Gir,Oir,Vir,CT,J_e,Xir,zir,wz,Qir,Wir,Hir,wT,Y_e,Uir,Jir,Az,Yir,Kir,Zir,AT,K_e,edr,odr,yz,rdr,tdr,adr,yT,Z_e,ndr,sdr,Lz,ldr,idr,ddr,LT,e1e,cdr,fdr,xz,mdr,gdr,hdr,xT,o1e,pdr,udr,$z,_dr,bdr,vdr,$T,r1e,Fdr,Tdr,kz,Mdr,Edr,Cdr,kT,t1e,wdr,Adr,Sz,ydr,Ldr,xdr,ST,a1e,$dr,kdr,Rz,Sdr,Rdr,Bdr,RT,OBe,Dd,BT,n1e,cy,Pdr,s1e,Idr,VBe,Ko,fy,qdr,Gd,Ndr,Bz,jdr,Ddr,Pz,Gdr,Odr,Vdr,my,Xdr,l1e,zdr,Qdr,Wdr,wt,gy,Hdr,i1e,Udr,Jdr,Od,Ydr,d1e,Kdr,Zdr,Iz,ecr,ocr,rcr,PT,tcr,wr,hy,acr,c1e,ncr,scr,Ka,lcr,f1e,icr,dcr,m1e,ccr,fcr,g1e,mcr,gcr,hcr,py,IT,h1e,pcr,ucr,qz,_cr,bcr,vcr,qT,p1e,Fcr,Tcr,Nz,Mcr,Ecr,Ccr,NT,XBe,Vd,jT,u1e,uy,wcr,_1e,Acr,zBe,Zo,_y,ycr,Xd,Lcr,jz,xcr,$cr,Dz,kcr,Scr,Rcr,by,Bcr,b1e,Pcr,Icr,qcr,At,vy,Ncr,v1e,jcr,Dcr,zd,Gcr,F1e,Ocr,Vcr,Gz,Xcr,zcr,Qcr,DT,Wcr,Ar,Fy,Hcr,T1e,Ucr,Jcr,Za,Ycr,M1e,Kcr,Zcr,E1e,efr,ofr,C1e,rfr,tfr,afr,ie,GT,w1e,nfr,sfr,Oz,lfr,ifr,dfr,OT,A1e,cfr,ffr,Vz,mfr,gfr,hfr,VT,y1e,pfr,ufr,Xz,_fr,bfr,vfr,XT,L1e,Ffr,Tfr,zz,Mfr,Efr,Cfr,zT,x1e,wfr,Afr,Qz,yfr,Lfr,xfr,QT,$1e,$fr,kfr,Wz,Sfr,Rfr,Bfr,WT,k1e,Pfr,Ifr,Hz,qfr,Nfr,jfr,HT,S1e,Dfr,Gfr,Uz,Ofr,Vfr,Xfr,UT,R1e,zfr,Qfr,Jz,Wfr,Hfr,Ufr,JT,B1e,Jfr,Yfr,Yz,Kfr,Zfr,emr,YT,P1e,omr,rmr,Kz,tmr,amr,nmr,KT,I1e,smr,lmr,Zz,imr,dmr,cmr,ZT,q1e,fmr,mmr,eQ,gmr,hmr,pmr,e8,N1e,umr,_mr,oQ,bmr,vmr,Fmr,o8,j1e,Tmr,Mmr,rQ,Emr,Cmr,wmr,r8,D1e,Amr,ymr,tQ,Lmr,xmr,$mr,t8,G1e,kmr,Smr,aQ,Rmr,Bmr,Pmr,a8,O1e,Imr,qmr,nQ,Nmr,jmr,Dmr,n8,V1e,Gmr,Omr,sQ,Vmr,Xmr,zmr,s8,X1e,Qmr,Wmr,lQ,Hmr,Umr,Jmr,l8,QBe,Qd,i8,z1e,Ty,Ymr,Q1e,Kmr,WBe,er,My,Zmr,Wd,egr,iQ,ogr,rgr,dQ,tgr,agr,ngr,Ey,sgr,W1e,lgr,igr,dgr,yt,Cy,cgr,H1e,fgr,mgr,Hd,ggr,U1e,hgr,pgr,cQ,ugr,_gr,bgr,d8,vgr,yr,wy,Fgr,J1e,Tgr,Mgr,en,Egr,Y1e,Cgr,wgr,K1e,Agr,ygr,Z1e,Lgr,xgr,$gr,ye,c8,ebe,kgr,Sgr,fQ,Rgr,Bgr,Pgr,f8,obe,Igr,qgr,mQ,Ngr,jgr,Dgr,m8,rbe,Ggr,Ogr,gQ,Vgr,Xgr,zgr,g8,tbe,Qgr,Wgr,hQ,Hgr,Ugr,Jgr,h8,abe,Ygr,Kgr,pQ,Zgr,ehr,ohr,p8,nbe,rhr,thr,uQ,ahr,nhr,shr,u8,sbe,lhr,ihr,_Q,dhr,chr,fhr,_8,lbe,mhr,ghr,bQ,hhr,phr,uhr,b8,ibe,_hr,bhr,vQ,vhr,Fhr,Thr,v8,dbe,Mhr,Ehr,FQ,Chr,whr,Ahr,F8,HBe,Ud,T8,cbe,Ay,yhr,fbe,Lhr,UBe,or,yy,xhr,Jd,$hr,TQ,khr,Shr,MQ,Rhr,Bhr,Phr,Ly,Ihr,mbe,qhr,Nhr,jhr,Lt,xy,Dhr,gbe,Ghr,Ohr,Yd,Vhr,hbe,Xhr,zhr,EQ,Qhr,Whr,Hhr,M8,Uhr,Lr,$y,Jhr,pbe,Yhr,Khr,on,Zhr,ube,epr,opr,_be,rpr,tpr,bbe,apr,npr,spr,Z,E8,vbe,lpr,ipr,CQ,dpr,cpr,fpr,C8,Fbe,mpr,gpr,wQ,hpr,ppr,upr,w8,Tbe,_pr,bpr,AQ,vpr,Fpr,Tpr,A8,Mbe,Mpr,Epr,yQ,Cpr,wpr,Apr,y8,Ebe,ypr,Lpr,LQ,xpr,$pr,kpr,L8,Cbe,Spr,Rpr,xQ,Bpr,Ppr,Ipr,x8,wbe,qpr,Npr,$Q,jpr,Dpr,Gpr,$8,Abe,Opr,Vpr,kQ,Xpr,zpr,Qpr,k8,ybe,Wpr,Hpr,SQ,Upr,Jpr,Ypr,S8,Lbe,Kpr,Zpr,RQ,eur,our,rur,R8,xbe,tur,aur,BQ,nur,sur,lur,B8,$be,iur,dur,PQ,cur,fur,mur,P8,kbe,gur,hur,IQ,pur,uur,_ur,I8,Sbe,bur,vur,qQ,Fur,Tur,Mur,q8,Rbe,Eur,Cur,NQ,wur,Aur,yur,N8,Bbe,Lur,xur,jQ,$ur,kur,Sur,j8,Pbe,Rur,Bur,DQ,Pur,Iur,qur,D8,Ibe,Nur,jur,GQ,Dur,Gur,Our,G8,qbe,Vur,Xur,OQ,zur,Qur,Wur,O8,Nbe,Hur,Uur,VQ,Jur,Yur,Kur,V8,jbe,Zur,e_r,XQ,o_r,r_r,t_r,X8,Dbe,a_r,n_r,zQ,s_r,l_r,i_r,z8,Gbe,d_r,c_r,QQ,f_r,m_r,g_r,Q8,Obe,h_r,p_r,WQ,u_r,__r,b_r,W8,Vbe,v_r,F_r,HQ,T_r,M_r,E_r,H8,Xbe,C_r,w_r,UQ,A_r,y_r,L_r,U8,JBe,Kd,J8,zbe,ky,x_r,Qbe,$_r,YBe,rr,Sy,k_r,Zd,S_r,JQ,R_r,B_r,YQ,P_r,I_r,q_r,Ry,N_r,Wbe,j_r,D_r,G_r,xt,By,O_r,Hbe,V_r,X_r,ec,z_r,Ube,Q_r,W_r,KQ,H_r,U_r,J_r,Y8,Y_r,xr,Py,K_r,Jbe,Z_r,e1r,rn,o1r,Ybe,r1r,t1r,Kbe,a1r,n1r,Zbe,s1r,l1r,i1r,pe,K8,e2e,d1r,c1r,ZQ,f1r,m1r,g1r,Z8,o2e,h1r,p1r,eW,u1r,_1r,b1r,e9,r2e,v1r,F1r,oW,T1r,M1r,E1r,o9,t2e,C1r,w1r,rW,A1r,y1r,L1r,r9,a2e,x1r,$1r,tW,k1r,S1r,R1r,t9,n2e,B1r,P1r,aW,I1r,q1r,N1r,a9,s2e,j1r,D1r,nW,G1r,O1r,V1r,n9,l2e,X1r,z1r,sW,Q1r,W1r,H1r,s9,i2e,U1r,J1r,lW,Y1r,K1r,Z1r,l9,d2e,ebr,obr,iW,rbr,tbr,abr,i9,c2e,nbr,sbr,dW,lbr,ibr,dbr,d9,f2e,cbr,fbr,cW,mbr,gbr,hbr,c9,m2e,pbr,ubr,fW,_br,bbr,vbr,f9,g2e,Fbr,Tbr,mW,Mbr,Ebr,Cbr,m9,h2e,wbr,Abr,gW,ybr,Lbr,xbr,g9,p2e,$br,kbr,hW,Sbr,Rbr,Bbr,h9,u2e,Pbr,Ibr,pW,qbr,Nbr,jbr,p9,KBe,oc,u9,_2e,Iy,Dbr,b2e,Gbr,ZBe,tr,qy,Obr,rc,Vbr,uW,Xbr,zbr,_W,Qbr,Wbr,Hbr,Ny,Ubr,v2e,Jbr,Ybr,Kbr,$t,jy,Zbr,F2e,e2r,o2r,tc,r2r,T2e,t2r,a2r,bW,n2r,s2r,l2r,_9,i2r,$r,Dy,d2r,M2e,c2r,f2r,tn,m2r,E2e,g2r,h2r,C2e,p2r,u2r,w2e,_2r,b2r,v2r,A2e,b9,y2e,F2r,T2r,vW,M2r,E2r,C2r,v9,ePe,ac,F9,L2e,Gy,w2r,x2e,A2r,oPe,ar,Oy,y2r,nc,L2r,FW,x2r,$2r,TW,k2r,S2r,R2r,Vy,B2r,$2e,P2r,I2r,q2r,kt,Xy,N2r,k2e,j2r,D2r,sc,G2r,S2e,O2r,V2r,MW,X2r,z2r,Q2r,T9,W2r,kr,zy,H2r,R2e,U2r,J2r,an,Y2r,B2e,K2r,Z2r,P2e,evr,ovr,I2e,rvr,tvr,avr,de,M9,q2e,nvr,svr,EW,lvr,ivr,dvr,E9,N2e,cvr,fvr,CW,mvr,gvr,hvr,C9,j2e,pvr,uvr,wW,_vr,bvr,vvr,w9,D2e,Fvr,Tvr,AW,Mvr,Evr,Cvr,A9,G2e,wvr,Avr,yW,yvr,Lvr,xvr,y9,O2e,$vr,kvr,LW,Svr,Rvr,Bvr,L9,V2e,Pvr,Ivr,xW,qvr,Nvr,jvr,x9,X2e,Dvr,Gvr,$W,Ovr,Vvr,Xvr,$9,z2e,zvr,Qvr,kW,Wvr,Hvr,Uvr,k9,Q2e,Jvr,Yvr,SW,Kvr,Zvr,eFr,S9,W2e,oFr,rFr,RW,tFr,aFr,nFr,R9,H2e,sFr,lFr,BW,iFr,dFr,cFr,B9,U2e,fFr,mFr,PW,gFr,hFr,pFr,P9,J2e,uFr,_Fr,IW,bFr,vFr,FFr,I9,Y2e,TFr,MFr,qW,EFr,CFr,wFr,q9,K2e,AFr,yFr,NW,LFr,xFr,$Fr,N9,Z2e,kFr,SFr,jW,RFr,BFr,PFr,j9,eve,IFr,qFr,DW,NFr,jFr,DFr,D9,ove,GFr,OFr,GW,VFr,XFr,zFr,G9,rve,QFr,WFr,OW,HFr,UFr,JFr,O9,rPe,lc,V9,tve,Qy,YFr,ave,KFr,tPe,nr,Wy,ZFr,ic,e0r,VW,o0r,r0r,XW,t0r,a0r,n0r,Hy,s0r,nve,l0r,i0r,d0r,St,Uy,c0r,sve,f0r,m0r,dc,g0r,lve,h0r,p0r,zW,u0r,_0r,b0r,X9,v0r,Sr,Jy,F0r,ive,T0r,M0r,nn,E0r,dve,C0r,w0r,cve,A0r,y0r,fve,L0r,x0r,$0r,ce,z9,mve,k0r,S0r,QW,R0r,B0r,P0r,Q9,gve,I0r,q0r,WW,N0r,j0r,D0r,W9,hve,G0r,O0r,HW,V0r,X0r,z0r,H9,pve,Q0r,W0r,UW,H0r,U0r,J0r,U9,uve,Y0r,K0r,JW,Z0r,e6r,o6r,J9,_ve,r6r,t6r,YW,a6r,n6r,s6r,Y9,bve,l6r,i6r,KW,d6r,c6r,f6r,K9,vve,m6r,g6r,ZW,h6r,p6r,u6r,Z9,Fve,_6r,b6r,eH,v6r,F6r,T6r,eM,Tve,M6r,E6r,oH,C6r,w6r,A6r,oM,Mve,y6r,L6r,rH,x6r,$6r,k6r,rM,Eve,S6r,R6r,tH,B6r,P6r,I6r,tM,Cve,q6r,N6r,aH,j6r,D6r,G6r,aM,wve,O6r,V6r,nH,X6r,z6r,Q6r,nM,Ave,W6r,H6r,sH,U6r,J6r,Y6r,sM,yve,K6r,Z6r,lH,eTr,oTr,rTr,lM,Lve,tTr,aTr,iH,nTr,sTr,lTr,iM,xve,iTr,dTr,dH,cTr,fTr,mTr,dM,$ve,gTr,hTr,cH,pTr,uTr,_Tr,cM,kve,bTr,vTr,fH,FTr,TTr,MTr,fM,aPe,cc,mM,Sve,Yy,ETr,Rve,CTr,nPe,sr,Ky,wTr,fc,ATr,mH,yTr,LTr,gH,xTr,$Tr,kTr,Zy,STr,Bve,RTr,BTr,PTr,Rt,eL,ITr,Pve,qTr,NTr,mc,jTr,Ive,DTr,GTr,hH,OTr,VTr,XTr,gM,zTr,Rr,oL,QTr,qve,WTr,HTr,sn,UTr,Nve,JTr,YTr,jve,KTr,ZTr,Dve,e8r,o8r,r8r,Gve,hM,Ove,t8r,a8r,pH,n8r,s8r,l8r,pM,sPe,gc,uM,Vve,rL,i8r,Xve,d8r,lPe,lr,tL,c8r,hc,f8r,uH,m8r,g8r,_H,h8r,p8r,u8r,aL,_8r,zve,b8r,v8r,F8r,Bt,nL,T8r,Qve,M8r,E8r,pc,C8r,Wve,w8r,A8r,bH,y8r,L8r,x8r,_M,$8r,Br,sL,k8r,Hve,S8r,R8r,ln,B8r,Uve,P8r,I8r,Jve,q8r,N8r,Yve,j8r,D8r,G8r,Kve,bM,Zve,O8r,V8r,vH,X8r,z8r,Q8r,vM,iPe,uc,FM,eFe,lL,W8r,oFe,H8r,dPe,ir,iL,U8r,_c,J8r,FH,Y8r,K8r,TH,Z8r,e9r,o9r,dL,r9r,rFe,t9r,a9r,n9r,Pt,cL,s9r,tFe,l9r,i9r,bc,d9r,aFe,c9r,f9r,MH,m9r,g9r,h9r,TM,p9r,Pr,fL,u9r,nFe,_9r,b9r,dn,v9r,sFe,F9r,T9r,lFe,M9r,E9r,iFe,C9r,w9r,A9r,oe,MM,dFe,y9r,L9r,EH,x9r,$9r,k9r,EM,cFe,S9r,R9r,CH,B9r,P9r,I9r,CM,fFe,q9r,N9r,wH,j9r,D9r,G9r,wM,mFe,O9r,V9r,AH,X9r,z9r,Q9r,AM,gFe,W9r,H9r,yH,U9r,J9r,Y9r,yM,hFe,K9r,Z9r,LH,eMr,oMr,rMr,LM,pFe,tMr,aMr,xH,nMr,sMr,lMr,xM,uFe,iMr,dMr,$H,cMr,fMr,mMr,$M,_Fe,gMr,hMr,kH,pMr,uMr,_Mr,kM,bFe,bMr,vMr,SH,FMr,TMr,MMr,SM,vFe,EMr,CMr,RH,wMr,AMr,yMr,RM,FFe,LMr,xMr,BH,$Mr,kMr,SMr,BM,TFe,RMr,BMr,PH,PMr,IMr,qMr,PM,MFe,NMr,jMr,IH,DMr,GMr,OMr,IM,EFe,VMr,XMr,qH,zMr,QMr,WMr,qM,CFe,HMr,UMr,NH,JMr,YMr,KMr,NM,wFe,ZMr,e4r,jH,o4r,r4r,t4r,jM,AFe,a4r,n4r,DH,s4r,l4r,i4r,DM,yFe,d4r,c4r,GH,f4r,m4r,g4r,GM,LFe,h4r,p4r,OH,u4r,_4r,b4r,OM,xFe,v4r,F4r,VH,T4r,M4r,E4r,VM,$Fe,C4r,w4r,XH,A4r,y4r,L4r,XM,kFe,x4r,$4r,zH,k4r,S4r,R4r,zM,SFe,B4r,P4r,QH,I4r,q4r,N4r,QM,RFe,j4r,D4r,WH,G4r,O4r,V4r,WM,cPe,vc,HM,BFe,mL,X4r,PFe,z4r,fPe,dr,gL,Q4r,Fc,W4r,HH,H4r,U4r,UH,J4r,Y4r,K4r,hL,Z4r,IFe,eEr,oEr,rEr,It,pL,tEr,qFe,aEr,nEr,Tc,sEr,NFe,lEr,iEr,JH,dEr,cEr,fEr,UM,mEr,Ir,uL,gEr,jFe,hEr,pEr,cn,uEr,DFe,_Er,bEr,GFe,vEr,FEr,OFe,TEr,MEr,EEr,Hr,JM,VFe,CEr,wEr,YH,AEr,yEr,LEr,YM,XFe,xEr,$Er,KH,kEr,SEr,REr,KM,zFe,BEr,PEr,ZH,IEr,qEr,NEr,ZM,QFe,jEr,DEr,eU,GEr,OEr,VEr,e4,WFe,XEr,zEr,oU,QEr,WEr,HEr,o4,mPe,Mc,r4,HFe,_L,UEr,UFe,JEr,gPe,cr,bL,YEr,Ec,KEr,rU,ZEr,e5r,tU,o5r,r5r,t5r,vL,a5r,JFe,n5r,s5r,l5r,qt,FL,i5r,YFe,d5r,c5r,Cc,f5r,KFe,m5r,g5r,aU,h5r,p5r,u5r,t4,_5r,qr,TL,b5r,ZFe,v5r,F5r,fn,T5r,e0e,M5r,E5r,o0e,C5r,w5r,r0e,A5r,y5r,L5r,Me,a4,t0e,x5r,$5r,nU,k5r,S5r,R5r,n4,a0e,B5r,P5r,sU,I5r,q5r,N5r,s4,n0e,j5r,D5r,lU,G5r,O5r,V5r,l4,s0e,X5r,z5r,iU,Q5r,W5r,H5r,i4,l0e,U5r,J5r,dU,Y5r,K5r,Z5r,d4,i0e,eCr,oCr,cU,rCr,tCr,aCr,c4,d0e,nCr,sCr,fU,lCr,iCr,dCr,f4,c0e,cCr,fCr,mU,mCr,gCr,hCr,m4,f0e,pCr,uCr,gU,_Cr,bCr,vCr,g4,m0e,FCr,TCr,hU,MCr,ECr,CCr,h4,g0e,wCr,ACr,pU,yCr,LCr,xCr,p4,h0e,$Cr,kCr,uU,SCr,RCr,BCr,u4,hPe,wc,_4,p0e,ML,PCr,u0e,ICr,pPe,fr,EL,qCr,Ac,NCr,_U,jCr,DCr,bU,GCr,OCr,VCr,CL,XCr,_0e,zCr,QCr,WCr,Nt,wL,HCr,b0e,UCr,JCr,yc,YCr,v0e,KCr,ZCr,vU,e3r,o3r,r3r,b4,t3r,Nr,AL,a3r,F0e,n3r,s3r,mn,l3r,T0e,i3r,d3r,M0e,c3r,f3r,E0e,m3r,g3r,h3r,Le,v4,C0e,p3r,u3r,FU,_3r,b3r,v3r,F4,w0e,F3r,T3r,TU,M3r,E3r,C3r,T4,A0e,w3r,A3r,MU,y3r,L3r,x3r,M4,y0e,$3r,k3r,EU,S3r,R3r,B3r,E4,L0e,P3r,I3r,CU,q3r,N3r,j3r,C4,x0e,D3r,G3r,wU,O3r,V3r,X3r,w4,$0e,z3r,Q3r,AU,W3r,H3r,U3r,A4,k0e,J3r,Y3r,yU,K3r,Z3r,ewr,y4,S0e,owr,rwr,LU,twr,awr,nwr,L4,R0e,swr,lwr,xU,iwr,dwr,cwr,x4,uPe,Lc,$4,B0e,yL,fwr,P0e,mwr,_Pe,mr,LL,gwr,xc,hwr,$U,pwr,uwr,kU,_wr,bwr,vwr,xL,Fwr,I0e,Twr,Mwr,Ewr,jt,$L,Cwr,q0e,wwr,Awr,$c,ywr,N0e,Lwr,xwr,SU,$wr,kwr,Swr,k4,Rwr,jr,kL,Bwr,j0e,Pwr,Iwr,gn,qwr,D0e,Nwr,jwr,G0e,Dwr,Gwr,O0e,Owr,Vwr,Xwr,ke,S4,V0e,zwr,Qwr,RU,Wwr,Hwr,Uwr,R4,X0e,Jwr,Ywr,BU,Kwr,Zwr,eAr,B4,z0e,oAr,rAr,PU,tAr,aAr,nAr,P4,Q0e,sAr,lAr,IU,iAr,dAr,cAr,I4,W0e,fAr,mAr,qU,gAr,hAr,pAr,q4,H0e,uAr,_Ar,NU,bAr,vAr,FAr,N4,U0e,TAr,MAr,jU,EAr,CAr,wAr,j4,J0e,AAr,yAr,DU,LAr,xAr,$Ar,D4,Y0e,kAr,SAr,GU,RAr,BAr,PAr,G4,bPe,kc,O4,K0e,SL,IAr,Z0e,qAr,vPe,gr,RL,NAr,Sc,jAr,OU,DAr,GAr,VU,OAr,VAr,XAr,BL,zAr,e6e,QAr,WAr,HAr,Dt,PL,UAr,o6e,JAr,YAr,Rc,KAr,r6e,ZAr,eyr,XU,oyr,ryr,tyr,V4,ayr,Dr,IL,nyr,t6e,syr,lyr,hn,iyr,a6e,dyr,cyr,n6e,fyr,myr,s6e,gyr,hyr,pyr,xe,X4,l6e,uyr,_yr,zU,byr,vyr,Fyr,z4,i6e,Tyr,Myr,QU,Eyr,Cyr,wyr,Q4,d6e,Ayr,yyr,WU,Lyr,xyr,$yr,W4,c6e,kyr,Syr,HU,Ryr,Byr,Pyr,H4,f6e,Iyr,qyr,UU,Nyr,jyr,Dyr,U4,m6e,Gyr,Oyr,JU,Vyr,Xyr,zyr,J4,g6e,Qyr,Wyr,YU,Hyr,Uyr,Jyr,Y4,h6e,Yyr,Kyr,KU,Zyr,eLr,oLr,K4,p6e,rLr,tLr,ZU,aLr,nLr,sLr,Z4,u6e,lLr,iLr,eJ,dLr,cLr,fLr,eE,FPe,Bc,oE,_6e,qL,mLr,b6e,gLr,TPe,hr,NL,hLr,Pc,pLr,oJ,uLr,_Lr,rJ,bLr,vLr,FLr,jL,TLr,v6e,MLr,ELr,CLr,Gt,DL,wLr,F6e,ALr,yLr,Ic,LLr,T6e,xLr,$Lr,tJ,kLr,SLr,RLr,rE,BLr,Gr,GL,PLr,M6e,ILr,qLr,pn,NLr,E6e,jLr,DLr,C6e,GLr,OLr,w6e,VLr,XLr,zLr,$e,tE,A6e,QLr,WLr,aJ,HLr,ULr,JLr,aE,y6e,YLr,KLr,nJ,ZLr,e7r,o7r,nE,L6e,r7r,t7r,sJ,a7r,n7r,s7r,sE,x6e,l7r,i7r,lJ,d7r,c7r,f7r,lE,$6e,m7r,g7r,iJ,h7r,p7r,u7r,iE,k6e,_7r,b7r,dJ,v7r,F7r,T7r,dE,S6e,M7r,E7r,cJ,C7r,w7r,A7r,cE,R6e,y7r,L7r,fJ,x7r,$7r,k7r,fE,B6e,S7r,R7r,mJ,B7r,P7r,I7r,mE,P6e,q7r,N7r,gJ,j7r,D7r,G7r,gE,MPe,qc,hE,I6e,OL,O7r,q6e,V7r,EPe,pr,VL,X7r,Nc,z7r,hJ,Q7r,W7r,pJ,H7r,U7r,J7r,XL,Y7r,N6e,K7r,Z7r,exr,Ot,zL,oxr,j6e,rxr,txr,jc,axr,D6e,nxr,sxr,uJ,lxr,ixr,dxr,pE,cxr,Or,QL,fxr,G6e,mxr,gxr,un,hxr,O6e,pxr,uxr,V6e,_xr,bxr,X6e,vxr,Fxr,Txr,je,uE,z6e,Mxr,Exr,_J,Cxr,wxr,Axr,_E,Q6e,yxr,Lxr,bJ,xxr,$xr,kxr,bE,W6e,Sxr,Rxr,vJ,Bxr,Pxr,Ixr,vE,H6e,qxr,Nxr,FJ,jxr,Dxr,Gxr,FE,U6e,Oxr,Vxr,TJ,Xxr,zxr,Qxr,TE,J6e,Wxr,Hxr,MJ,Uxr,Jxr,Yxr,ME,Y6e,Kxr,Zxr,EJ,e$r,o$r,r$r,EE,K6e,t$r,a$r,CJ,n$r,s$r,l$r,CE,CPe,Dc,wE,Z6e,WL,i$r,eTe,d$r,wPe,ur,HL,c$r,Gc,f$r,wJ,m$r,g$r,AJ,h$r,p$r,u$r,UL,_$r,oTe,b$r,v$r,F$r,Vt,JL,T$r,rTe,M$r,E$r,Oc,C$r,tTe,w$r,A$r,yJ,y$r,L$r,x$r,AE,$$r,Vr,YL,k$r,aTe,S$r,R$r,_n,B$r,nTe,P$r,I$r,sTe,q$r,N$r,lTe,j$r,D$r,G$r,De,yE,iTe,O$r,V$r,LJ,X$r,z$r,Q$r,LE,dTe,W$r,H$r,xJ,U$r,J$r,Y$r,xE,cTe,K$r,Z$r,$J,ekr,okr,rkr,$E,fTe,tkr,akr,kJ,nkr,skr,lkr,kE,mTe,ikr,dkr,SJ,ckr,fkr,mkr,SE,gTe,gkr,hkr,RJ,pkr,ukr,_kr,RE,hTe,bkr,vkr,BJ,Fkr,Tkr,Mkr,BE,pTe,Ekr,Ckr,PJ,wkr,Akr,ykr,PE,APe,Vc,IE,uTe,KL,Lkr,_Te,xkr,yPe,_r,ZL,$kr,Xc,kkr,IJ,Skr,Rkr,qJ,Bkr,Pkr,Ikr,e7,qkr,bTe,Nkr,jkr,Dkr,Xt,o7,Gkr,vTe,Okr,Vkr,zc,Xkr,FTe,zkr,Qkr,NJ,Wkr,Hkr,Ukr,qE,Jkr,Xr,r7,Ykr,TTe,Kkr,Zkr,bn,eSr,MTe,oSr,rSr,ETe,tSr,aSr,CTe,nSr,sSr,lSr,wTe,NE,ATe,iSr,dSr,jJ,cSr,fSr,mSr,jE,LPe,Qc,DE,yTe,t7,gSr,LTe,hSr,xPe,br,a7,pSr,Wc,uSr,DJ,_Sr,bSr,GJ,vSr,FSr,TSr,n7,MSr,xTe,ESr,CSr,wSr,zt,s7,ASr,$Te,ySr,LSr,Hc,xSr,kTe,$Sr,kSr,OJ,SSr,RSr,BSr,GE,PSr,zr,l7,ISr,STe,qSr,NSr,vn,jSr,RTe,DSr,GSr,BTe,OSr,VSr,PTe,XSr,zSr,QSr,i7,OE,ITe,WSr,HSr,VJ,USr,JSr,YSr,VE,qTe,KSr,ZSr,XJ,eRr,oRr,rRr,XE,$Pe,Uc,zE,NTe,d7,tRr,jTe,aRr,kPe,vr,c7,nRr,Jc,sRr,zJ,lRr,iRr,QJ,dRr,cRr,fRr,f7,mRr,DTe,gRr,hRr,pRr,Qt,m7,uRr,GTe,_Rr,bRr,Yc,vRr,OTe,FRr,TRr,WJ,MRr,ERr,CRr,QE,wRr,Qr,g7,ARr,VTe,yRr,LRr,Fn,xRr,XTe,$Rr,kRr,zTe,SRr,RRr,QTe,BRr,PRr,IRr,WTe,WE,HTe,qRr,NRr,HJ,jRr,DRr,GRr,HE,SPe;return d=new ee({}),ba=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),p3=new ee({}),u3=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sf=new ORr({props:{warning:!0,$$slots:{default:[vMt]},$$scope:{ctx:A}}}),_3=new ee({}),b3=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/configuration_auto.py#L560"}}),T3=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/configuration_auto.py#L583"}}),tg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[FMt]},$$scope:{ctx:A}}}),M3=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/configuration_auto.py#L705"}}),E3=new ee({}),C3=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/tokenization_auto.py#L377"}}),y3=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16980/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/tokenization_auto.py#L391"}}),Pg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[TMt]},$$scope:{ctx:A}}}),L3=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/tokenization_auto.py#L587"}}),x3=new ee({}),$3=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/feature_extraction_auto.py#L176"}}),R3=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16980/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),lh=new ORr({props:{$$slots:{default:[MMt]},$$scope:{ctx:A}}}),ih=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[EMt]},$$scope:{ctx:A}}}),B3=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/feature_extraction_auto.py#L317"}}),P3=new ee({}),I3=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/processing_auto.py#L76"}}),j3=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/processing_auto.py#L90"}}),wh=new ORr({props:{$$slots:{default:[CMt]},$$scope:{ctx:A}}}),Ah=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[wMt]},$$scope:{ctx:A}}}),D3=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/processing_auto.py#L243"}}),G3=new ee({}),O3=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L715"}}),X3=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),xh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[AMt]},$$scope:{ctx:A}}}),z3=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),uu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[yMt]},$$scope:{ctx:A}}}),Q3=new ee({}),W3=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L722"}}),U3=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),bu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[LMt]},$$scope:{ctx:A}}}),J3=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),n_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[xMt]},$$scope:{ctx:A}}}),Y3=new ee({}),K3=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L737"}}),ew=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),l_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[$Mt]},$$scope:{ctx:A}}}),ow=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kMt]},$$scope:{ctx:A}}}),rw=new ee({}),tw=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L744"}}),nw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),Q_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[SMt]},$$scope:{ctx:A}}}),sw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RMt]},$$scope:{ctx:A}}}),lw=new ee({}),iw=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L751"}}),cw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[BMt]},$$scope:{ctx:A}}}),fw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[PMt]},$$scope:{ctx:A}}}),mw=new ee({}),gw=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L760"}}),pw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[IMt]},$$scope:{ctx:A}}}),uw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),Wb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[qMt]},$$scope:{ctx:A}}}),_w=new ee({}),bw=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L794"}}),Fw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),Ub=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[NMt]},$$scope:{ctx:A}}}),Tw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),w2=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jMt]},$$scope:{ctx:A}}}),Mw=new ee({}),Ew=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L801"}}),ww=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[DMt]},$$scope:{ctx:A}}}),Aw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),B2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[GMt]},$$scope:{ctx:A}}}),yw=new ee({}),Lw=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L787"}}),$w=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),I2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[OMt]},$$scope:{ctx:A}}}),kw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),_v=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[VMt]},$$scope:{ctx:A}}}),Sw=new ee({}),Rw=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L769"}}),Pw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),vv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[XMt]},$$scope:{ctx:A}}}),Iw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zMt]},$$scope:{ctx:A}}}),qw=new ee({}),Nw=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L776"}}),Dw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[QMt]},$$scope:{ctx:A}}}),Gw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),fF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[WMt]},$$scope:{ctx:A}}}),Ow=new ee({}),Vw=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L810"}}),zw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),gF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[HMt]},$$scope:{ctx:A}}}),Qw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[UMt]},$$scope:{ctx:A}}}),Ww=new ee({}),Hw=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L849"}}),Jw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[JMt]},$$scope:{ctx:A}}}),Yw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[YMt]},$$scope:{ctx:A}}}),Kw=new ee({}),Zw=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L856"}}),oA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[KMt]},$$scope:{ctx:A}}}),rA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[ZMt]},$$scope:{ctx:A}}}),tA=new ee({}),aA=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L879"}}),sA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[e4t]},$$scope:{ctx:A}}}),lA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),YF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[o4t]},$$scope:{ctx:A}}}),iA=new ee({}),dA=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L863"}}),fA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),ZF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[r4t]},$$scope:{ctx:A}}}),mA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[t4t]},$$scope:{ctx:A}}}),gA=new ee({}),hA=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L870"}}),uA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[a4t]},$$scope:{ctx:A}}}),_A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),p0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[n4t]},$$scope:{ctx:A}}}),vA=new ee({}),FA=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L888"}}),MA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[s4t]},$$scope:{ctx:A}}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[l4t]},$$scope:{ctx:A}}}),CA=new ee({}),wA=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L895"}}),yA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitForMaskedImageModeling">BeitForMaskedImageModeling</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[i4t]},$$scope:{ctx:A}}}),LA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[d4t]},$$scope:{ctx:A}}}),xA=new ee({}),$A=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L842"}}),SA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[c4t]},$$scope:{ctx:A}}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[f4t]},$$scope:{ctx:A}}}),BA=new ee({}),PA=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L817"}}),qA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[m4t]},$$scope:{ctx:A}}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[g4t]},$$scope:{ctx:A}}}),jA=new ee({}),DA=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L824"}}),OA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[h4t]},$$scope:{ctx:A}}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[p4t]},$$scope:{ctx:A}}}),XA=new ee({}),zA=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_auto.py#L833"}}),WA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[u4t]},$$scope:{ctx:A}}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),e6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[_4t]},$$scope:{ctx:A}}}),UA=new ee({}),JA=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),KA=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),r6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[b4t]},$$scope:{ctx:A}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),Q6=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[v4t]},$$scope:{ctx:A}}}),ey=new ee({}),oy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),ty=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),H6=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[F4t]},$$scope:{ctx:A}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[T4t]},$$scope:{ctx:A}}}),ny=new ee({}),sy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),iy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[M4t]},$$scope:{ctx:A}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[E4t]},$$scope:{ctx:A}}}),cy=new ee({}),fy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),gy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[C4t]},$$scope:{ctx:A}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[w4t]},$$scope:{ctx:A}}}),uy=new ee({}),_y=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),vy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[A4t]},$$scope:{ctx:A}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),l8=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[y4t]},$$scope:{ctx:A}}}),Ty=new ee({}),My=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),d8=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[L4t]},$$scope:{ctx:A}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),F8=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[x4t]},$$scope:{ctx:A}}}),Ay=new ee({}),yy=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),xy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),M8=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[$4t]},$$scope:{ctx:A}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),U8=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[k4t]},$$scope:{ctx:A}}}),ky=new ee({}),Sy=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),By=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),Y8=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[S4t]},$$scope:{ctx:A}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),p9=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[R4t]},$$scope:{ctx:A}}}),Iy=new ee({}),qy=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),jy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),_9=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[B4t]},$$scope:{ctx:A}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),v9=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[P4t]},$$scope:{ctx:A}}}),Gy=new ee({}),Oy=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),T9=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[I4t]},$$scope:{ctx:A}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),O9=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[q4t]},$$scope:{ctx:A}}}),Qy=new ee({}),Wy=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),X9=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[N4t]},$$scope:{ctx:A}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[j4t]},$$scope:{ctx:A}}}),Yy=new ee({}),Ky=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),eL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),gM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[D4t]},$$scope:{ctx:A}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[G4t]},$$scope:{ctx:A}}}),rL=new ee({}),tL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),nL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[O4t]},$$scope:{ctx:A}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[V4t]},$$scope:{ctx:A}}}),lL=new ee({}),iL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),cL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[X4t]},$$scope:{ctx:A}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),WM=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[z4t]},$$scope:{ctx:A}}}),mL=new ee({}),gL=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),pL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Q4t]},$$scope:{ctx:A}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[W4t]},$$scope:{ctx:A}}}),_L=new ee({}),bL=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),FL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[H4t]},$$scope:{ctx:A}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),u4=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[U4t]},$$scope:{ctx:A}}}),ML=new ee({}),EL=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),wL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),b4=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[J4t]},$$scope:{ctx:A}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Y4t]},$$scope:{ctx:A}}}),yL=new ee({}),LL=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),$L=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[K4t]},$$scope:{ctx:A}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Z4t]},$$scope:{ctx:A}}}),SL=new ee({}),RL=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),PL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[eEt]},$$scope:{ctx:A}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[oEt]},$$scope:{ctx:A}}}),qL=new ee({}),NL=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),DL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[rEt]},$$scope:{ctx:A}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[tEt]},$$scope:{ctx:A}}}),OL=new ee({}),VL=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),zL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[aEt]},$$scope:{ctx:A}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),CE=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[nEt]},$$scope:{ctx:A}}}),WL=new ee({}),HL=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),JL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),AE=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[sEt]},$$scope:{ctx:A}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),PE=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[lEt]},$$scope:{ctx:A}}}),KL=new ee({}),ZL=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),o7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),qE=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[iEt]},$$scope:{ctx:A}}}),r7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[dEt]},$$scope:{ctx:A}}}),t7=new ee({}),a7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),s7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[cEt]},$$scope:{ctx:A}}}),l7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[fEt]},$$scope:{ctx:A}}}),d7=new ee({}),c7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),m7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16980/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16980/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[mEt]},$$scope:{ctx:A}}}),g7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16980/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16980/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16980/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[gEt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Fo=a("span"),ri=o("Auto Classes"),of=l(),Yr=a("p"),ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=a("code"),f3=o("from_pretrained()"),rf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ie=l(),Oe=a("p"),ni=o("Instantiating one of "),Mn=a("a"),m3=o("AutoConfig"),En=o(", "),Cn=a("a"),g3=o("AutoModel"),si=o(`, and
`),wn=a("a"),h3=o("AutoTokenizer"),li=o(" will directly create a class of the relevant architecture. For instance"),tf=l(),F(ba.$$.fragment),Ve=l(),Ae=a("p"),Ax=o("will create a model that is an instance of "),ii=a("a"),yx=o("BertModel"),Lx=o("."),To=l(),va=a("p"),xx=o("There is one class of "),af=a("code"),$x=o("AutoModel"),qqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kRe=l(),di=a("h2"),nf=a("a"),NK=a("span"),F(p3.$$.fragment),Nqe=l(),jK=a("span"),jqe=o("Extending the Auto Classes"),SRe=l(),An=a("p"),Dqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),DK=a("code"),Gqe=o("NewModel"),Oqe=o(", make sure you have a "),GK=a("code"),Vqe=o("NewModelConfig"),Xqe=o(` then you can add those to the auto
classes like this:`),RRe=l(),F(u3.$$.fragment),BRe=l(),kx=a("p"),zqe=o("You will then be able to use the auto classes like you would usually do!"),PRe=l(),F(sf.$$.fragment),IRe=l(),ci=a("h2"),lf=a("a"),OK=a("span"),F(_3.$$.fragment),Qqe=l(),VK=a("span"),Wqe=o("AutoConfig"),qRe=l(),Mo=a("div"),F(b3.$$.fragment),Hqe=l(),v3=a("p"),Uqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Sx=a("a"),Jqe=o("from_pretrained()"),Yqe=o(" class method."),Kqe=l(),F3=a("p"),Zqe=o("This class cannot be instantiated directly using "),XK=a("code"),eNe=o("__init__()"),oNe=o(" (throws an error)."),rNe=l(),Fr=a("div"),F(T3.$$.fragment),tNe=l(),zK=a("p"),aNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),nNe=l(),fi=a("p"),sNe=o("The configuration class to instantiate is selected based on the "),QK=a("code"),lNe=o("model_type"),iNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),WK=a("code"),dNe=o("pretrained_model_name_or_path"),cNe=o(":"),fNe=l(),y=a("ul"),df=a("li"),HK=a("strong"),mNe=o("albert"),gNe=o(" \u2014 "),Rx=a("a"),hNe=o("AlbertConfig"),pNe=o(" (ALBERT model)"),uNe=l(),cf=a("li"),UK=a("strong"),_Ne=o("bart"),bNe=o(" \u2014 "),Bx=a("a"),vNe=o("BartConfig"),FNe=o(" (BART model)"),TNe=l(),ff=a("li"),JK=a("strong"),MNe=o("beit"),ENe=o(" \u2014 "),Px=a("a"),CNe=o("BeitConfig"),wNe=o(" (BEiT model)"),ANe=l(),mf=a("li"),YK=a("strong"),yNe=o("bert"),LNe=o(" \u2014 "),Ix=a("a"),xNe=o("BertConfig"),$Ne=o(" (BERT model)"),kNe=l(),gf=a("li"),KK=a("strong"),SNe=o("bert-generation"),RNe=o(" \u2014 "),qx=a("a"),BNe=o("BertGenerationConfig"),PNe=o(" (Bert Generation model)"),INe=l(),hf=a("li"),ZK=a("strong"),qNe=o("big_bird"),NNe=o(" \u2014 "),Nx=a("a"),jNe=o("BigBirdConfig"),DNe=o(" (BigBird model)"),GNe=l(),pf=a("li"),eZ=a("strong"),ONe=o("bigbird_pegasus"),VNe=o(" \u2014 "),jx=a("a"),XNe=o("BigBirdPegasusConfig"),zNe=o(" (BigBirdPegasus model)"),QNe=l(),uf=a("li"),oZ=a("strong"),WNe=o("blenderbot"),HNe=o(" \u2014 "),Dx=a("a"),UNe=o("BlenderbotConfig"),JNe=o(" (Blenderbot model)"),YNe=l(),_f=a("li"),rZ=a("strong"),KNe=o("blenderbot-small"),ZNe=o(" \u2014 "),Gx=a("a"),eje=o("BlenderbotSmallConfig"),oje=o(" (BlenderbotSmall model)"),rje=l(),bf=a("li"),tZ=a("strong"),tje=o("camembert"),aje=o(" \u2014 "),Ox=a("a"),nje=o("CamembertConfig"),sje=o(" (CamemBERT model)"),lje=l(),vf=a("li"),aZ=a("strong"),ije=o("canine"),dje=o(" \u2014 "),Vx=a("a"),cje=o("CanineConfig"),fje=o(" (Canine model)"),mje=l(),Ff=a("li"),nZ=a("strong"),gje=o("clip"),hje=o(" \u2014 "),Xx=a("a"),pje=o("CLIPConfig"),uje=o(" (CLIP model)"),_je=l(),Tf=a("li"),sZ=a("strong"),bje=o("convbert"),vje=o(" \u2014 "),zx=a("a"),Fje=o("ConvBertConfig"),Tje=o(" (ConvBERT model)"),Mje=l(),Mf=a("li"),lZ=a("strong"),Eje=o("convnext"),Cje=o(" \u2014 "),Qx=a("a"),wje=o("ConvNextConfig"),Aje=o(" (ConvNext model)"),yje=l(),Ef=a("li"),iZ=a("strong"),Lje=o("ctrl"),xje=o(" \u2014 "),Wx=a("a"),$je=o("CTRLConfig"),kje=o(" (CTRL model)"),Sje=l(),Cf=a("li"),dZ=a("strong"),Rje=o("data2vec-audio"),Bje=o(" \u2014 "),Hx=a("a"),Pje=o("Data2VecAudioConfig"),Ije=o(" (Data2VecAudio model)"),qje=l(),wf=a("li"),cZ=a("strong"),Nje=o("data2vec-text"),jje=o(" \u2014 "),Ux=a("a"),Dje=o("Data2VecTextConfig"),Gje=o(" (Data2VecText model)"),Oje=l(),Af=a("li"),fZ=a("strong"),Vje=o("data2vec-vision"),Xje=o(" \u2014 "),Jx=a("a"),zje=o("Data2VecVisionConfig"),Qje=o(" (Data2VecVision model)"),Wje=l(),yf=a("li"),mZ=a("strong"),Hje=o("deberta"),Uje=o(" \u2014 "),Yx=a("a"),Jje=o("DebertaConfig"),Yje=o(" (DeBERTa model)"),Kje=l(),Lf=a("li"),gZ=a("strong"),Zje=o("deberta-v2"),eDe=o(" \u2014 "),Kx=a("a"),oDe=o("DebertaV2Config"),rDe=o(" (DeBERTa-v2 model)"),tDe=l(),xf=a("li"),hZ=a("strong"),aDe=o("decision_transformer"),nDe=o(" \u2014 "),Zx=a("a"),sDe=o("DecisionTransformerConfig"),lDe=o(" (Decision Transformer model)"),iDe=l(),$f=a("li"),pZ=a("strong"),dDe=o("deit"),cDe=o(" \u2014 "),e$=a("a"),fDe=o("DeiTConfig"),mDe=o(" (DeiT model)"),gDe=l(),kf=a("li"),uZ=a("strong"),hDe=o("detr"),pDe=o(" \u2014 "),o$=a("a"),uDe=o("DetrConfig"),_De=o(" (DETR model)"),bDe=l(),Sf=a("li"),_Z=a("strong"),vDe=o("distilbert"),FDe=o(" \u2014 "),r$=a("a"),TDe=o("DistilBertConfig"),MDe=o(" (DistilBERT model)"),EDe=l(),Rf=a("li"),bZ=a("strong"),CDe=o("dpr"),wDe=o(" \u2014 "),t$=a("a"),ADe=o("DPRConfig"),yDe=o(" (DPR model)"),LDe=l(),Bf=a("li"),vZ=a("strong"),xDe=o("dpt"),$De=o(" \u2014 "),a$=a("a"),kDe=o("DPTConfig"),SDe=o(" (DPT model)"),RDe=l(),Pf=a("li"),FZ=a("strong"),BDe=o("electra"),PDe=o(" \u2014 "),n$=a("a"),IDe=o("ElectraConfig"),qDe=o(" (ELECTRA model)"),NDe=l(),If=a("li"),TZ=a("strong"),jDe=o("encoder-decoder"),DDe=o(" \u2014 "),s$=a("a"),GDe=o("EncoderDecoderConfig"),ODe=o(" (Encoder decoder model)"),VDe=l(),qf=a("li"),MZ=a("strong"),XDe=o("flaubert"),zDe=o(" \u2014 "),l$=a("a"),QDe=o("FlaubertConfig"),WDe=o(" (FlauBERT model)"),HDe=l(),Nf=a("li"),EZ=a("strong"),UDe=o("fnet"),JDe=o(" \u2014 "),i$=a("a"),YDe=o("FNetConfig"),KDe=o(" (FNet model)"),ZDe=l(),jf=a("li"),CZ=a("strong"),eGe=o("fsmt"),oGe=o(" \u2014 "),d$=a("a"),rGe=o("FSMTConfig"),tGe=o(" (FairSeq Machine-Translation model)"),aGe=l(),Df=a("li"),wZ=a("strong"),nGe=o("funnel"),sGe=o(" \u2014 "),c$=a("a"),lGe=o("FunnelConfig"),iGe=o(" (Funnel Transformer model)"),dGe=l(),Gf=a("li"),AZ=a("strong"),cGe=o("glpn"),fGe=o(" \u2014 "),f$=a("a"),mGe=o("GLPNConfig"),gGe=o(" (GLPN model)"),hGe=l(),Of=a("li"),yZ=a("strong"),pGe=o("gpt2"),uGe=o(" \u2014 "),m$=a("a"),_Ge=o("GPT2Config"),bGe=o(" (OpenAI GPT-2 model)"),vGe=l(),Vf=a("li"),LZ=a("strong"),FGe=o("gpt_neo"),TGe=o(" \u2014 "),g$=a("a"),MGe=o("GPTNeoConfig"),EGe=o(" (GPT Neo model)"),CGe=l(),Xf=a("li"),xZ=a("strong"),wGe=o("gptj"),AGe=o(" \u2014 "),h$=a("a"),yGe=o("GPTJConfig"),LGe=o(" (GPT-J model)"),xGe=l(),zf=a("li"),$Z=a("strong"),$Ge=o("hubert"),kGe=o(" \u2014 "),p$=a("a"),SGe=o("HubertConfig"),RGe=o(" (Hubert model)"),BGe=l(),Qf=a("li"),kZ=a("strong"),PGe=o("ibert"),IGe=o(" \u2014 "),u$=a("a"),qGe=o("IBertConfig"),NGe=o(" (I-BERT model)"),jGe=l(),Wf=a("li"),SZ=a("strong"),DGe=o("imagegpt"),GGe=o(" \u2014 "),_$=a("a"),OGe=o("ImageGPTConfig"),VGe=o(" (ImageGPT model)"),XGe=l(),Hf=a("li"),RZ=a("strong"),zGe=o("layoutlm"),QGe=o(" \u2014 "),b$=a("a"),WGe=o("LayoutLMConfig"),HGe=o(" (LayoutLM model)"),UGe=l(),Uf=a("li"),BZ=a("strong"),JGe=o("layoutlmv2"),YGe=o(" \u2014 "),v$=a("a"),KGe=o("LayoutLMv2Config"),ZGe=o(" (LayoutLMv2 model)"),eOe=l(),Jf=a("li"),PZ=a("strong"),oOe=o("led"),rOe=o(" \u2014 "),F$=a("a"),tOe=o("LEDConfig"),aOe=o(" (LED model)"),nOe=l(),Yf=a("li"),IZ=a("strong"),sOe=o("longformer"),lOe=o(" \u2014 "),T$=a("a"),iOe=o("LongformerConfig"),dOe=o(" (Longformer model)"),cOe=l(),Kf=a("li"),qZ=a("strong"),fOe=o("luke"),mOe=o(" \u2014 "),M$=a("a"),gOe=o("LukeConfig"),hOe=o(" (LUKE model)"),pOe=l(),Zf=a("li"),NZ=a("strong"),uOe=o("lxmert"),_Oe=o(" \u2014 "),E$=a("a"),bOe=o("LxmertConfig"),vOe=o(" (LXMERT model)"),FOe=l(),em=a("li"),jZ=a("strong"),TOe=o("m2m_100"),MOe=o(" \u2014 "),C$=a("a"),EOe=o("M2M100Config"),COe=o(" (M2M100 model)"),wOe=l(),om=a("li"),DZ=a("strong"),AOe=o("marian"),yOe=o(" \u2014 "),w$=a("a"),LOe=o("MarianConfig"),xOe=o(" (Marian model)"),$Oe=l(),rm=a("li"),GZ=a("strong"),kOe=o("maskformer"),SOe=o(" \u2014 "),A$=a("a"),ROe=o("MaskFormerConfig"),BOe=o(" (MaskFormer model)"),POe=l(),tm=a("li"),OZ=a("strong"),IOe=o("mbart"),qOe=o(" \u2014 "),y$=a("a"),NOe=o("MBartConfig"),jOe=o(" (mBART model)"),DOe=l(),am=a("li"),VZ=a("strong"),GOe=o("megatron-bert"),OOe=o(" \u2014 "),L$=a("a"),VOe=o("MegatronBertConfig"),XOe=o(" (MegatronBert model)"),zOe=l(),nm=a("li"),XZ=a("strong"),QOe=o("mobilebert"),WOe=o(" \u2014 "),x$=a("a"),HOe=o("MobileBertConfig"),UOe=o(" (MobileBERT model)"),JOe=l(),sm=a("li"),zZ=a("strong"),YOe=o("mpnet"),KOe=o(" \u2014 "),$$=a("a"),ZOe=o("MPNetConfig"),eVe=o(" (MPNet model)"),oVe=l(),lm=a("li"),QZ=a("strong"),rVe=o("mt5"),tVe=o(" \u2014 "),k$=a("a"),aVe=o("MT5Config"),nVe=o(" (mT5 model)"),sVe=l(),im=a("li"),WZ=a("strong"),lVe=o("nystromformer"),iVe=o(" \u2014 "),S$=a("a"),dVe=o("NystromformerConfig"),cVe=o(" (Nystromformer model)"),fVe=l(),dm=a("li"),HZ=a("strong"),mVe=o("openai-gpt"),gVe=o(" \u2014 "),R$=a("a"),hVe=o("OpenAIGPTConfig"),pVe=o(" (OpenAI GPT model)"),uVe=l(),cm=a("li"),UZ=a("strong"),_Ve=o("pegasus"),bVe=o(" \u2014 "),B$=a("a"),vVe=o("PegasusConfig"),FVe=o(" (Pegasus model)"),TVe=l(),fm=a("li"),JZ=a("strong"),MVe=o("perceiver"),EVe=o(" \u2014 "),P$=a("a"),CVe=o("PerceiverConfig"),wVe=o(" (Perceiver model)"),AVe=l(),mm=a("li"),YZ=a("strong"),yVe=o("plbart"),LVe=o(" \u2014 "),I$=a("a"),xVe=o("PLBartConfig"),$Ve=o(" (PLBart model)"),kVe=l(),gm=a("li"),KZ=a("strong"),SVe=o("poolformer"),RVe=o(" \u2014 "),q$=a("a"),BVe=o("PoolFormerConfig"),PVe=o(" (PoolFormer model)"),IVe=l(),hm=a("li"),ZZ=a("strong"),qVe=o("prophetnet"),NVe=o(" \u2014 "),N$=a("a"),jVe=o("ProphetNetConfig"),DVe=o(" (ProphetNet model)"),GVe=l(),pm=a("li"),eee=a("strong"),OVe=o("qdqbert"),VVe=o(" \u2014 "),j$=a("a"),XVe=o("QDQBertConfig"),zVe=o(" (QDQBert model)"),QVe=l(),um=a("li"),oee=a("strong"),WVe=o("rag"),HVe=o(" \u2014 "),D$=a("a"),UVe=o("RagConfig"),JVe=o(" (RAG model)"),YVe=l(),_m=a("li"),ree=a("strong"),KVe=o("realm"),ZVe=o(" \u2014 "),G$=a("a"),eXe=o("RealmConfig"),oXe=o(" (Realm model)"),rXe=l(),bm=a("li"),tee=a("strong"),tXe=o("reformer"),aXe=o(" \u2014 "),O$=a("a"),nXe=o("ReformerConfig"),sXe=o(" (Reformer model)"),lXe=l(),vm=a("li"),aee=a("strong"),iXe=o("regnet"),dXe=o(" \u2014 "),V$=a("a"),cXe=o("RegNetConfig"),fXe=o(" (RegNet model)"),mXe=l(),Fm=a("li"),nee=a("strong"),gXe=o("rembert"),hXe=o(" \u2014 "),X$=a("a"),pXe=o("RemBertConfig"),uXe=o(" (RemBERT model)"),_Xe=l(),Tm=a("li"),see=a("strong"),bXe=o("resnet"),vXe=o(" \u2014 "),z$=a("a"),FXe=o("ResNetConfig"),TXe=o(" (ResNet model)"),MXe=l(),Mm=a("li"),lee=a("strong"),EXe=o("retribert"),CXe=o(" \u2014 "),Q$=a("a"),wXe=o("RetriBertConfig"),AXe=o(" (RetriBERT model)"),yXe=l(),Em=a("li"),iee=a("strong"),LXe=o("roberta"),xXe=o(" \u2014 "),W$=a("a"),$Xe=o("RobertaConfig"),kXe=o(" (RoBERTa model)"),SXe=l(),Cm=a("li"),dee=a("strong"),RXe=o("roformer"),BXe=o(" \u2014 "),H$=a("a"),PXe=o("RoFormerConfig"),IXe=o(" (RoFormer model)"),qXe=l(),wm=a("li"),cee=a("strong"),NXe=o("segformer"),jXe=o(" \u2014 "),U$=a("a"),DXe=o("SegformerConfig"),GXe=o(" (SegFormer model)"),OXe=l(),Am=a("li"),fee=a("strong"),VXe=o("sew"),XXe=o(" \u2014 "),J$=a("a"),zXe=o("SEWConfig"),QXe=o(" (SEW model)"),WXe=l(),ym=a("li"),mee=a("strong"),HXe=o("sew-d"),UXe=o(" \u2014 "),Y$=a("a"),JXe=o("SEWDConfig"),YXe=o(" (SEW-D model)"),KXe=l(),Lm=a("li"),gee=a("strong"),ZXe=o("speech-encoder-decoder"),eze=o(" \u2014 "),K$=a("a"),oze=o("SpeechEncoderDecoderConfig"),rze=o(" (Speech Encoder decoder model)"),tze=l(),xm=a("li"),hee=a("strong"),aze=o("speech_to_text"),nze=o(" \u2014 "),Z$=a("a"),sze=o("Speech2TextConfig"),lze=o(" (Speech2Text model)"),ize=l(),$m=a("li"),pee=a("strong"),dze=o("speech_to_text_2"),cze=o(" \u2014 "),ek=a("a"),fze=o("Speech2Text2Config"),mze=o(" (Speech2Text2 model)"),gze=l(),km=a("li"),uee=a("strong"),hze=o("splinter"),pze=o(" \u2014 "),ok=a("a"),uze=o("SplinterConfig"),_ze=o(" (Splinter model)"),bze=l(),Sm=a("li"),_ee=a("strong"),vze=o("squeezebert"),Fze=o(" \u2014 "),rk=a("a"),Tze=o("SqueezeBertConfig"),Mze=o(" (SqueezeBERT model)"),Eze=l(),Rm=a("li"),bee=a("strong"),Cze=o("swin"),wze=o(" \u2014 "),tk=a("a"),Aze=o("SwinConfig"),yze=o(" (Swin model)"),Lze=l(),Bm=a("li"),vee=a("strong"),xze=o("t5"),$ze=o(" \u2014 "),ak=a("a"),kze=o("T5Config"),Sze=o(" (T5 model)"),Rze=l(),Pm=a("li"),Fee=a("strong"),Bze=o("tapas"),Pze=o(" \u2014 "),nk=a("a"),Ize=o("TapasConfig"),qze=o(" (TAPAS model)"),Nze=l(),Im=a("li"),Tee=a("strong"),jze=o("tapex"),Dze=o(" \u2014 "),sk=a("a"),Gze=o("BartConfig"),Oze=o(" (TAPEX model)"),Vze=l(),qm=a("li"),Mee=a("strong"),Xze=o("transfo-xl"),zze=o(" \u2014 "),lk=a("a"),Qze=o("TransfoXLConfig"),Wze=o(" (Transformer-XL model)"),Hze=l(),Nm=a("li"),Eee=a("strong"),Uze=o("trocr"),Jze=o(" \u2014 "),ik=a("a"),Yze=o("TrOCRConfig"),Kze=o(" (TrOCR model)"),Zze=l(),jm=a("li"),Cee=a("strong"),eQe=o("unispeech"),oQe=o(" \u2014 "),dk=a("a"),rQe=o("UniSpeechConfig"),tQe=o(" (UniSpeech model)"),aQe=l(),Dm=a("li"),wee=a("strong"),nQe=o("unispeech-sat"),sQe=o(" \u2014 "),ck=a("a"),lQe=o("UniSpeechSatConfig"),iQe=o(" (UniSpeechSat model)"),dQe=l(),Gm=a("li"),Aee=a("strong"),cQe=o("van"),fQe=o(" \u2014 "),fk=a("a"),mQe=o("VanConfig"),gQe=o(" (VAN model)"),hQe=l(),Om=a("li"),yee=a("strong"),pQe=o("vilt"),uQe=o(" \u2014 "),mk=a("a"),_Qe=o("ViltConfig"),bQe=o(" (ViLT model)"),vQe=l(),Vm=a("li"),Lee=a("strong"),FQe=o("vision-encoder-decoder"),TQe=o(" \u2014 "),gk=a("a"),MQe=o("VisionEncoderDecoderConfig"),EQe=o(" (Vision Encoder decoder model)"),CQe=l(),Xm=a("li"),xee=a("strong"),wQe=o("vision-text-dual-encoder"),AQe=o(" \u2014 "),hk=a("a"),yQe=o("VisionTextDualEncoderConfig"),LQe=o(" (VisionTextDualEncoder model)"),xQe=l(),zm=a("li"),$ee=a("strong"),$Qe=o("visual_bert"),kQe=o(" \u2014 "),pk=a("a"),SQe=o("VisualBertConfig"),RQe=o(" (VisualBert model)"),BQe=l(),Qm=a("li"),kee=a("strong"),PQe=o("vit"),IQe=o(" \u2014 "),uk=a("a"),qQe=o("ViTConfig"),NQe=o(" (ViT model)"),jQe=l(),Wm=a("li"),See=a("strong"),DQe=o("vit_mae"),GQe=o(" \u2014 "),_k=a("a"),OQe=o("ViTMAEConfig"),VQe=o(" (ViTMAE model)"),XQe=l(),Hm=a("li"),Ree=a("strong"),zQe=o("wav2vec2"),QQe=o(" \u2014 "),bk=a("a"),WQe=o("Wav2Vec2Config"),HQe=o(" (Wav2Vec2 model)"),UQe=l(),Um=a("li"),Bee=a("strong"),JQe=o("wavlm"),YQe=o(" \u2014 "),vk=a("a"),KQe=o("WavLMConfig"),ZQe=o(" (WavLM model)"),eWe=l(),Jm=a("li"),Pee=a("strong"),oWe=o("xglm"),rWe=o(" \u2014 "),Fk=a("a"),tWe=o("XGLMConfig"),aWe=o(" (XGLM model)"),nWe=l(),Ym=a("li"),Iee=a("strong"),sWe=o("xlm"),lWe=o(" \u2014 "),Tk=a("a"),iWe=o("XLMConfig"),dWe=o(" (XLM model)"),cWe=l(),Km=a("li"),qee=a("strong"),fWe=o("xlm-prophetnet"),mWe=o(" \u2014 "),Mk=a("a"),gWe=o("XLMProphetNetConfig"),hWe=o(" (XLMProphetNet model)"),pWe=l(),Zm=a("li"),Nee=a("strong"),uWe=o("xlm-roberta"),_We=o(" \u2014 "),Ek=a("a"),bWe=o("XLMRobertaConfig"),vWe=o(" (XLM-RoBERTa model)"),FWe=l(),eg=a("li"),jee=a("strong"),TWe=o("xlm-roberta-xl"),MWe=o(" \u2014 "),Ck=a("a"),EWe=o("XLMRobertaXLConfig"),CWe=o(" (XLM-RoBERTa-XL model)"),wWe=l(),og=a("li"),Dee=a("strong"),AWe=o("xlnet"),yWe=o(" \u2014 "),wk=a("a"),LWe=o("XLNetConfig"),xWe=o(" (XLNet model)"),$We=l(),rg=a("li"),Gee=a("strong"),kWe=o("yoso"),SWe=o(" \u2014 "),Ak=a("a"),RWe=o("YosoConfig"),BWe=o(" (YOSO model)"),PWe=l(),F(tg.$$.fragment),IWe=l(),ag=a("div"),F(M3.$$.fragment),qWe=l(),Oee=a("p"),NWe=o("Register a new configuration for this class."),NRe=l(),mi=a("h2"),ng=a("a"),Vee=a("span"),F(E3.$$.fragment),jWe=l(),Xee=a("span"),DWe=o("AutoTokenizer"),jRe=l(),Eo=a("div"),F(C3.$$.fragment),GWe=l(),w3=a("p"),OWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yk=a("a"),VWe=o("AutoTokenizer.from_pretrained()"),XWe=o(" class method."),zWe=l(),A3=a("p"),QWe=o("This class cannot be instantiated directly using "),zee=a("code"),WWe=o("__init__()"),HWe=o(" (throws an error)."),UWe=l(),Tr=a("div"),F(y3.$$.fragment),JWe=l(),Qee=a("p"),YWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),KWe=l(),Fa=a("p"),ZWe=o("The tokenizer class to instantiate is selected based on the "),Wee=a("code"),eHe=o("model_type"),oHe=o(` property of the config object (either
passed as an argument or loaded from `),Hee=a("code"),rHe=o("pretrained_model_name_or_path"),tHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uee=a("code"),aHe=o("pretrained_model_name_or_path"),nHe=o(":"),sHe=l(),k=a("ul"),yn=a("li"),Jee=a("strong"),lHe=o("albert"),iHe=o(" \u2014 "),Lk=a("a"),dHe=o("AlbertTokenizer"),cHe=o(" or "),xk=a("a"),fHe=o("AlbertTokenizerFast"),mHe=o(" (ALBERT model)"),gHe=l(),Ln=a("li"),Yee=a("strong"),hHe=o("bart"),pHe=o(" \u2014 "),$k=a("a"),uHe=o("BartTokenizer"),_He=o(" or "),kk=a("a"),bHe=o("BartTokenizerFast"),vHe=o(" (BART model)"),FHe=l(),xn=a("li"),Kee=a("strong"),THe=o("barthez"),MHe=o(" \u2014 "),Sk=a("a"),EHe=o("BarthezTokenizer"),CHe=o(" or "),Rk=a("a"),wHe=o("BarthezTokenizerFast"),AHe=o(" (BARThez model)"),yHe=l(),sg=a("li"),Zee=a("strong"),LHe=o("bartpho"),xHe=o(" \u2014 "),Bk=a("a"),$He=o("BartphoTokenizer"),kHe=o(" (BARTpho model)"),SHe=l(),$n=a("li"),eoe=a("strong"),RHe=o("bert"),BHe=o(" \u2014 "),Pk=a("a"),PHe=o("BertTokenizer"),IHe=o(" or "),Ik=a("a"),qHe=o("BertTokenizerFast"),NHe=o(" (BERT model)"),jHe=l(),lg=a("li"),ooe=a("strong"),DHe=o("bert-generation"),GHe=o(" \u2014 "),qk=a("a"),OHe=o("BertGenerationTokenizer"),VHe=o(" (Bert Generation model)"),XHe=l(),ig=a("li"),roe=a("strong"),zHe=o("bert-japanese"),QHe=o(" \u2014 "),Nk=a("a"),WHe=o("BertJapaneseTokenizer"),HHe=o(" (BertJapanese model)"),UHe=l(),dg=a("li"),toe=a("strong"),JHe=o("bertweet"),YHe=o(" \u2014 "),jk=a("a"),KHe=o("BertweetTokenizer"),ZHe=o(" (Bertweet model)"),eUe=l(),kn=a("li"),aoe=a("strong"),oUe=o("big_bird"),rUe=o(" \u2014 "),Dk=a("a"),tUe=o("BigBirdTokenizer"),aUe=o(" or "),Gk=a("a"),nUe=o("BigBirdTokenizerFast"),sUe=o(" (BigBird model)"),lUe=l(),Sn=a("li"),noe=a("strong"),iUe=o("bigbird_pegasus"),dUe=o(" \u2014 "),Ok=a("a"),cUe=o("PegasusTokenizer"),fUe=o(" or "),Vk=a("a"),mUe=o("PegasusTokenizerFast"),gUe=o(" (BigBirdPegasus model)"),hUe=l(),Rn=a("li"),soe=a("strong"),pUe=o("blenderbot"),uUe=o(" \u2014 "),Xk=a("a"),_Ue=o("BlenderbotTokenizer"),bUe=o(" or "),zk=a("a"),vUe=o("BlenderbotTokenizerFast"),FUe=o(" (Blenderbot model)"),TUe=l(),cg=a("li"),loe=a("strong"),MUe=o("blenderbot-small"),EUe=o(" \u2014 "),Qk=a("a"),CUe=o("BlenderbotSmallTokenizer"),wUe=o(" (BlenderbotSmall model)"),AUe=l(),fg=a("li"),ioe=a("strong"),yUe=o("byt5"),LUe=o(" \u2014 "),Wk=a("a"),xUe=o("ByT5Tokenizer"),$Ue=o(" (ByT5 model)"),kUe=l(),Bn=a("li"),doe=a("strong"),SUe=o("camembert"),RUe=o(" \u2014 "),Hk=a("a"),BUe=o("CamembertTokenizer"),PUe=o(" or "),Uk=a("a"),IUe=o("CamembertTokenizerFast"),qUe=o(" (CamemBERT model)"),NUe=l(),mg=a("li"),coe=a("strong"),jUe=o("canine"),DUe=o(" \u2014 "),Jk=a("a"),GUe=o("CanineTokenizer"),OUe=o(" (Canine model)"),VUe=l(),Pn=a("li"),foe=a("strong"),XUe=o("clip"),zUe=o(" \u2014 "),Yk=a("a"),QUe=o("CLIPTokenizer"),WUe=o(" or "),Kk=a("a"),HUe=o("CLIPTokenizerFast"),UUe=o(" (CLIP model)"),JUe=l(),In=a("li"),moe=a("strong"),YUe=o("convbert"),KUe=o(" \u2014 "),Zk=a("a"),ZUe=o("ConvBertTokenizer"),eJe=o(" or "),eS=a("a"),oJe=o("ConvBertTokenizerFast"),rJe=o(" (ConvBERT model)"),tJe=l(),qn=a("li"),goe=a("strong"),aJe=o("cpm"),nJe=o(" \u2014 "),oS=a("a"),sJe=o("CpmTokenizer"),lJe=o(" or "),hoe=a("code"),iJe=o("CpmTokenizerFast"),dJe=o(" (CPM model)"),cJe=l(),gg=a("li"),poe=a("strong"),fJe=o("ctrl"),mJe=o(" \u2014 "),rS=a("a"),gJe=o("CTRLTokenizer"),hJe=o(" (CTRL model)"),pJe=l(),Nn=a("li"),uoe=a("strong"),uJe=o("data2vec-text"),_Je=o(" \u2014 "),tS=a("a"),bJe=o("RobertaTokenizer"),vJe=o(" or "),aS=a("a"),FJe=o("RobertaTokenizerFast"),TJe=o(" (Data2VecText model)"),MJe=l(),jn=a("li"),_oe=a("strong"),EJe=o("deberta"),CJe=o(" \u2014 "),nS=a("a"),wJe=o("DebertaTokenizer"),AJe=o(" or "),sS=a("a"),yJe=o("DebertaTokenizerFast"),LJe=o(" (DeBERTa model)"),xJe=l(),Dn=a("li"),boe=a("strong"),$Je=o("deberta-v2"),kJe=o(" \u2014 "),lS=a("a"),SJe=o("DebertaV2Tokenizer"),RJe=o(" or "),iS=a("a"),BJe=o("DebertaV2TokenizerFast"),PJe=o(" (DeBERTa-v2 model)"),IJe=l(),Gn=a("li"),voe=a("strong"),qJe=o("distilbert"),NJe=o(" \u2014 "),dS=a("a"),jJe=o("DistilBertTokenizer"),DJe=o(" or "),cS=a("a"),GJe=o("DistilBertTokenizerFast"),OJe=o(" (DistilBERT model)"),VJe=l(),On=a("li"),Foe=a("strong"),XJe=o("dpr"),zJe=o(" \u2014 "),fS=a("a"),QJe=o("DPRQuestionEncoderTokenizer"),WJe=o(" or "),mS=a("a"),HJe=o("DPRQuestionEncoderTokenizerFast"),UJe=o(" (DPR model)"),JJe=l(),Vn=a("li"),Toe=a("strong"),YJe=o("electra"),KJe=o(" \u2014 "),gS=a("a"),ZJe=o("ElectraTokenizer"),eYe=o(" or "),hS=a("a"),oYe=o("ElectraTokenizerFast"),rYe=o(" (ELECTRA model)"),tYe=l(),hg=a("li"),Moe=a("strong"),aYe=o("flaubert"),nYe=o(" \u2014 "),pS=a("a"),sYe=o("FlaubertTokenizer"),lYe=o(" (FlauBERT model)"),iYe=l(),Xn=a("li"),Eoe=a("strong"),dYe=o("fnet"),cYe=o(" \u2014 "),uS=a("a"),fYe=o("FNetTokenizer"),mYe=o(" or "),_S=a("a"),gYe=o("FNetTokenizerFast"),hYe=o(" (FNet model)"),pYe=l(),pg=a("li"),Coe=a("strong"),uYe=o("fsmt"),_Ye=o(" \u2014 "),bS=a("a"),bYe=o("FSMTTokenizer"),vYe=o(" (FairSeq Machine-Translation model)"),FYe=l(),zn=a("li"),woe=a("strong"),TYe=o("funnel"),MYe=o(" \u2014 "),vS=a("a"),EYe=o("FunnelTokenizer"),CYe=o(" or "),FS=a("a"),wYe=o("FunnelTokenizerFast"),AYe=o(" (Funnel Transformer model)"),yYe=l(),Qn=a("li"),Aoe=a("strong"),LYe=o("gpt2"),xYe=o(" \u2014 "),TS=a("a"),$Ye=o("GPT2Tokenizer"),kYe=o(" or "),MS=a("a"),SYe=o("GPT2TokenizerFast"),RYe=o(" (OpenAI GPT-2 model)"),BYe=l(),Wn=a("li"),yoe=a("strong"),PYe=o("gpt_neo"),IYe=o(" \u2014 "),ES=a("a"),qYe=o("GPT2Tokenizer"),NYe=o(" or "),CS=a("a"),jYe=o("GPT2TokenizerFast"),DYe=o(" (GPT Neo model)"),GYe=l(),Hn=a("li"),Loe=a("strong"),OYe=o("gptj"),VYe=o(" \u2014 "),wS=a("a"),XYe=o("GPT2Tokenizer"),zYe=o(" or "),AS=a("a"),QYe=o("GPT2TokenizerFast"),WYe=o(" (GPT-J model)"),HYe=l(),Un=a("li"),xoe=a("strong"),UYe=o("herbert"),JYe=o(" \u2014 "),yS=a("a"),YYe=o("HerbertTokenizer"),KYe=o(" or "),LS=a("a"),ZYe=o("HerbertTokenizerFast"),eKe=o(" (HerBERT model)"),oKe=l(),ug=a("li"),$oe=a("strong"),rKe=o("hubert"),tKe=o(" \u2014 "),xS=a("a"),aKe=o("Wav2Vec2CTCTokenizer"),nKe=o(" (Hubert model)"),sKe=l(),Jn=a("li"),koe=a("strong"),lKe=o("ibert"),iKe=o(" \u2014 "),$S=a("a"),dKe=o("RobertaTokenizer"),cKe=o(" or "),kS=a("a"),fKe=o("RobertaTokenizerFast"),mKe=o(" (I-BERT model)"),gKe=l(),Yn=a("li"),Soe=a("strong"),hKe=o("layoutlm"),pKe=o(" \u2014 "),SS=a("a"),uKe=o("LayoutLMTokenizer"),_Ke=o(" or "),RS=a("a"),bKe=o("LayoutLMTokenizerFast"),vKe=o(" (LayoutLM model)"),FKe=l(),Kn=a("li"),Roe=a("strong"),TKe=o("layoutlmv2"),MKe=o(" \u2014 "),BS=a("a"),EKe=o("LayoutLMv2Tokenizer"),CKe=o(" or "),PS=a("a"),wKe=o("LayoutLMv2TokenizerFast"),AKe=o(" (LayoutLMv2 model)"),yKe=l(),Zn=a("li"),Boe=a("strong"),LKe=o("layoutxlm"),xKe=o(" \u2014 "),IS=a("a"),$Ke=o("LayoutXLMTokenizer"),kKe=o(" or "),qS=a("a"),SKe=o("LayoutXLMTokenizerFast"),RKe=o(" (LayoutXLM model)"),BKe=l(),es=a("li"),Poe=a("strong"),PKe=o("led"),IKe=o(" \u2014 "),NS=a("a"),qKe=o("LEDTokenizer"),NKe=o(" or "),jS=a("a"),jKe=o("LEDTokenizerFast"),DKe=o(" (LED model)"),GKe=l(),os=a("li"),Ioe=a("strong"),OKe=o("longformer"),VKe=o(" \u2014 "),DS=a("a"),XKe=o("LongformerTokenizer"),zKe=o(" or "),GS=a("a"),QKe=o("LongformerTokenizerFast"),WKe=o(" (Longformer model)"),HKe=l(),_g=a("li"),qoe=a("strong"),UKe=o("luke"),JKe=o(" \u2014 "),OS=a("a"),YKe=o("LukeTokenizer"),KKe=o(" (LUKE model)"),ZKe=l(),rs=a("li"),Noe=a("strong"),eZe=o("lxmert"),oZe=o(" \u2014 "),VS=a("a"),rZe=o("LxmertTokenizer"),tZe=o(" or "),XS=a("a"),aZe=o("LxmertTokenizerFast"),nZe=o(" (LXMERT model)"),sZe=l(),bg=a("li"),joe=a("strong"),lZe=o("m2m_100"),iZe=o(" \u2014 "),zS=a("a"),dZe=o("M2M100Tokenizer"),cZe=o(" (M2M100 model)"),fZe=l(),vg=a("li"),Doe=a("strong"),mZe=o("marian"),gZe=o(" \u2014 "),QS=a("a"),hZe=o("MarianTokenizer"),pZe=o(" (Marian model)"),uZe=l(),ts=a("li"),Goe=a("strong"),_Ze=o("mbart"),bZe=o(" \u2014 "),WS=a("a"),vZe=o("MBartTokenizer"),FZe=o(" or "),HS=a("a"),TZe=o("MBartTokenizerFast"),MZe=o(" (mBART model)"),EZe=l(),as=a("li"),Ooe=a("strong"),CZe=o("mbart50"),wZe=o(" \u2014 "),US=a("a"),AZe=o("MBart50Tokenizer"),yZe=o(" or "),JS=a("a"),LZe=o("MBart50TokenizerFast"),xZe=o(" (mBART-50 model)"),$Ze=l(),ns=a("li"),Voe=a("strong"),kZe=o("megatron-bert"),SZe=o(" \u2014 "),YS=a("a"),RZe=o("BertTokenizer"),BZe=o(" or "),KS=a("a"),PZe=o("BertTokenizerFast"),IZe=o(" (MegatronBert model)"),qZe=l(),Fg=a("li"),Xoe=a("strong"),NZe=o("mluke"),jZe=o(" \u2014 "),ZS=a("a"),DZe=o("MLukeTokenizer"),GZe=o(" (mLUKE model)"),OZe=l(),ss=a("li"),zoe=a("strong"),VZe=o("mobilebert"),XZe=o(" \u2014 "),eR=a("a"),zZe=o("MobileBertTokenizer"),QZe=o(" or "),oR=a("a"),WZe=o("MobileBertTokenizerFast"),HZe=o(" (MobileBERT model)"),UZe=l(),ls=a("li"),Qoe=a("strong"),JZe=o("mpnet"),YZe=o(" \u2014 "),rR=a("a"),KZe=o("MPNetTokenizer"),ZZe=o(" or "),tR=a("a"),eeo=o("MPNetTokenizerFast"),oeo=o(" (MPNet model)"),reo=l(),is=a("li"),Woe=a("strong"),teo=o("mt5"),aeo=o(" \u2014 "),aR=a("a"),neo=o("MT5Tokenizer"),seo=o(" or "),nR=a("a"),leo=o("MT5TokenizerFast"),ieo=o(" (mT5 model)"),deo=l(),ds=a("li"),Hoe=a("strong"),ceo=o("nystromformer"),feo=o(" \u2014 "),sR=a("a"),meo=o("AlbertTokenizer"),geo=o(" or "),lR=a("a"),heo=o("AlbertTokenizerFast"),peo=o(" (Nystromformer model)"),ueo=l(),cs=a("li"),Uoe=a("strong"),_eo=o("openai-gpt"),beo=o(" \u2014 "),iR=a("a"),veo=o("OpenAIGPTTokenizer"),Feo=o(" or "),dR=a("a"),Teo=o("OpenAIGPTTokenizerFast"),Meo=o(" (OpenAI GPT model)"),Eeo=l(),fs=a("li"),Joe=a("strong"),Ceo=o("pegasus"),weo=o(" \u2014 "),cR=a("a"),Aeo=o("PegasusTokenizer"),yeo=o(" or "),fR=a("a"),Leo=o("PegasusTokenizerFast"),xeo=o(" (Pegasus model)"),$eo=l(),Tg=a("li"),Yoe=a("strong"),keo=o("perceiver"),Seo=o(" \u2014 "),mR=a("a"),Reo=o("PerceiverTokenizer"),Beo=o(" (Perceiver model)"),Peo=l(),Mg=a("li"),Koe=a("strong"),Ieo=o("phobert"),qeo=o(" \u2014 "),gR=a("a"),Neo=o("PhobertTokenizer"),jeo=o(" (PhoBERT model)"),Deo=l(),Eg=a("li"),Zoe=a("strong"),Geo=o("plbart"),Oeo=o(" \u2014 "),hR=a("a"),Veo=o("PLBartTokenizer"),Xeo=o(" (PLBart model)"),zeo=l(),Cg=a("li"),ere=a("strong"),Qeo=o("prophetnet"),Weo=o(" \u2014 "),pR=a("a"),Heo=o("ProphetNetTokenizer"),Ueo=o(" (ProphetNet model)"),Jeo=l(),ms=a("li"),ore=a("strong"),Yeo=o("qdqbert"),Keo=o(" \u2014 "),uR=a("a"),Zeo=o("BertTokenizer"),eoo=o(" or "),_R=a("a"),ooo=o("BertTokenizerFast"),roo=o(" (QDQBert model)"),too=l(),wg=a("li"),rre=a("strong"),aoo=o("rag"),noo=o(" \u2014 "),bR=a("a"),soo=o("RagTokenizer"),loo=o(" (RAG model)"),ioo=l(),gs=a("li"),tre=a("strong"),doo=o("realm"),coo=o(" \u2014 "),vR=a("a"),foo=o("RealmTokenizer"),moo=o(" or "),FR=a("a"),goo=o("RealmTokenizerFast"),hoo=o(" (Realm model)"),poo=l(),hs=a("li"),are=a("strong"),uoo=o("reformer"),_oo=o(" \u2014 "),TR=a("a"),boo=o("ReformerTokenizer"),voo=o(" or "),MR=a("a"),Foo=o("ReformerTokenizerFast"),Too=o(" (Reformer model)"),Moo=l(),ps=a("li"),nre=a("strong"),Eoo=o("rembert"),Coo=o(" \u2014 "),ER=a("a"),woo=o("RemBertTokenizer"),Aoo=o(" or "),CR=a("a"),yoo=o("RemBertTokenizerFast"),Loo=o(" (RemBERT model)"),xoo=l(),us=a("li"),sre=a("strong"),$oo=o("retribert"),koo=o(" \u2014 "),wR=a("a"),Soo=o("RetriBertTokenizer"),Roo=o(" or "),AR=a("a"),Boo=o("RetriBertTokenizerFast"),Poo=o(" (RetriBERT model)"),Ioo=l(),_s=a("li"),lre=a("strong"),qoo=o("roberta"),Noo=o(" \u2014 "),yR=a("a"),joo=o("RobertaTokenizer"),Doo=o(" or "),LR=a("a"),Goo=o("RobertaTokenizerFast"),Ooo=o(" (RoBERTa model)"),Voo=l(),bs=a("li"),ire=a("strong"),Xoo=o("roformer"),zoo=o(" \u2014 "),xR=a("a"),Qoo=o("RoFormerTokenizer"),Woo=o(" or "),$R=a("a"),Hoo=o("RoFormerTokenizerFast"),Uoo=o(" (RoFormer model)"),Joo=l(),Ag=a("li"),dre=a("strong"),Yoo=o("speech_to_text"),Koo=o(" \u2014 "),kR=a("a"),Zoo=o("Speech2TextTokenizer"),ero=o(" (Speech2Text model)"),oro=l(),yg=a("li"),cre=a("strong"),rro=o("speech_to_text_2"),tro=o(" \u2014 "),SR=a("a"),aro=o("Speech2Text2Tokenizer"),nro=o(" (Speech2Text2 model)"),sro=l(),vs=a("li"),fre=a("strong"),lro=o("splinter"),iro=o(" \u2014 "),RR=a("a"),dro=o("SplinterTokenizer"),cro=o(" or "),BR=a("a"),fro=o("SplinterTokenizerFast"),mro=o(" (Splinter model)"),gro=l(),Fs=a("li"),mre=a("strong"),hro=o("squeezebert"),pro=o(" \u2014 "),PR=a("a"),uro=o("SqueezeBertTokenizer"),_ro=o(" or "),IR=a("a"),bro=o("SqueezeBertTokenizerFast"),vro=o(" (SqueezeBERT model)"),Fro=l(),Ts=a("li"),gre=a("strong"),Tro=o("t5"),Mro=o(" \u2014 "),qR=a("a"),Ero=o("T5Tokenizer"),Cro=o(" or "),NR=a("a"),wro=o("T5TokenizerFast"),Aro=o(" (T5 model)"),yro=l(),Lg=a("li"),hre=a("strong"),Lro=o("tapas"),xro=o(" \u2014 "),jR=a("a"),$ro=o("TapasTokenizer"),kro=o(" (TAPAS model)"),Sro=l(),xg=a("li"),pre=a("strong"),Rro=o("tapex"),Bro=o(" \u2014 "),DR=a("a"),Pro=o("TapexTokenizer"),Iro=o(" (TAPEX model)"),qro=l(),$g=a("li"),ure=a("strong"),Nro=o("transfo-xl"),jro=o(" \u2014 "),GR=a("a"),Dro=o("TransfoXLTokenizer"),Gro=o(" (Transformer-XL model)"),Oro=l(),Ms=a("li"),_re=a("strong"),Vro=o("visual_bert"),Xro=o(" \u2014 "),OR=a("a"),zro=o("BertTokenizer"),Qro=o(" or "),VR=a("a"),Wro=o("BertTokenizerFast"),Hro=o(" (VisualBert model)"),Uro=l(),kg=a("li"),bre=a("strong"),Jro=o("wav2vec2"),Yro=o(" \u2014 "),XR=a("a"),Kro=o("Wav2Vec2CTCTokenizer"),Zro=o(" (Wav2Vec2 model)"),eto=l(),Sg=a("li"),vre=a("strong"),oto=o("wav2vec2_phoneme"),rto=o(" \u2014 "),zR=a("a"),tto=o("Wav2Vec2PhonemeCTCTokenizer"),ato=o(" (Wav2Vec2Phoneme model)"),nto=l(),Es=a("li"),Fre=a("strong"),sto=o("xglm"),lto=o(" \u2014 "),QR=a("a"),ito=o("XGLMTokenizer"),dto=o(" or "),WR=a("a"),cto=o("XGLMTokenizerFast"),fto=o(" (XGLM model)"),mto=l(),Rg=a("li"),Tre=a("strong"),gto=o("xlm"),hto=o(" \u2014 "),HR=a("a"),pto=o("XLMTokenizer"),uto=o(" (XLM model)"),_to=l(),Bg=a("li"),Mre=a("strong"),bto=o("xlm-prophetnet"),vto=o(" \u2014 "),UR=a("a"),Fto=o("XLMProphetNetTokenizer"),Tto=o(" (XLMProphetNet model)"),Mto=l(),Cs=a("li"),Ere=a("strong"),Eto=o("xlm-roberta"),Cto=o(" \u2014 "),JR=a("a"),wto=o("XLMRobertaTokenizer"),Ato=o(" or "),YR=a("a"),yto=o("XLMRobertaTokenizerFast"),Lto=o(" (XLM-RoBERTa model)"),xto=l(),ws=a("li"),Cre=a("strong"),$to=o("xlm-roberta-xl"),kto=o(" \u2014 "),KR=a("a"),Sto=o("RobertaTokenizer"),Rto=o(" or "),ZR=a("a"),Bto=o("RobertaTokenizerFast"),Pto=o(" (XLM-RoBERTa-XL model)"),Ito=l(),As=a("li"),wre=a("strong"),qto=o("xlnet"),Nto=o(" \u2014 "),eB=a("a"),jto=o("XLNetTokenizer"),Dto=o(" or "),oB=a("a"),Gto=o("XLNetTokenizerFast"),Oto=o(" (XLNet model)"),Vto=l(),ys=a("li"),Are=a("strong"),Xto=o("yoso"),zto=o(" \u2014 "),rB=a("a"),Qto=o("AlbertTokenizer"),Wto=o(" or "),tB=a("a"),Hto=o("AlbertTokenizerFast"),Uto=o(" (YOSO model)"),Jto=l(),F(Pg.$$.fragment),Yto=l(),Ig=a("div"),F(L3.$$.fragment),Kto=l(),yre=a("p"),Zto=o("Register a new tokenizer in this mapping."),DRe=l(),gi=a("h2"),qg=a("a"),Lre=a("span"),F(x3.$$.fragment),eao=l(),xre=a("span"),oao=o("AutoFeatureExtractor"),GRe=l(),Co=a("div"),F($3.$$.fragment),rao=l(),k3=a("p"),tao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aB=a("a"),aao=o("AutoFeatureExtractor.from_pretrained()"),nao=o(" class method."),sao=l(),S3=a("p"),lao=o("This class cannot be instantiated directly using "),$re=a("code"),iao=o("__init__()"),dao=o(" (throws an error)."),cao=l(),Xe=a("div"),F(R3.$$.fragment),fao=l(),kre=a("p"),mao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),gao=l(),Ta=a("p"),hao=o("The feature extractor class to instantiate is selected based on the "),Sre=a("code"),pao=o("model_type"),uao=o(` property of the config object
(either passed as an argument or loaded from `),Rre=a("code"),_ao=o("pretrained_model_name_or_path"),bao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bre=a("code"),vao=o("pretrained_model_name_or_path"),Fao=o(":"),Tao=l(),ae=a("ul"),Ng=a("li"),Pre=a("strong"),Mao=o("beit"),Eao=o(" \u2014 "),nB=a("a"),Cao=o("BeitFeatureExtractor"),wao=o(" (BEiT model)"),Aao=l(),jg=a("li"),Ire=a("strong"),yao=o("clip"),Lao=o(" \u2014 "),sB=a("a"),xao=o("CLIPFeatureExtractor"),$ao=o(" (CLIP model)"),kao=l(),Dg=a("li"),qre=a("strong"),Sao=o("convnext"),Rao=o(" \u2014 "),lB=a("a"),Bao=o("ConvNextFeatureExtractor"),Pao=o(" (ConvNext model)"),Iao=l(),Gg=a("li"),Nre=a("strong"),qao=o("data2vec-audio"),Nao=o(" \u2014 "),iB=a("a"),jao=o("Wav2Vec2FeatureExtractor"),Dao=o(" (Data2VecAudio model)"),Gao=l(),Og=a("li"),jre=a("strong"),Oao=o("data2vec-vision"),Vao=o(" \u2014 "),dB=a("a"),Xao=o("BeitFeatureExtractor"),zao=o(" (Data2VecVision model)"),Qao=l(),Vg=a("li"),Dre=a("strong"),Wao=o("deit"),Hao=o(" \u2014 "),cB=a("a"),Uao=o("DeiTFeatureExtractor"),Jao=o(" (DeiT model)"),Yao=l(),Xg=a("li"),Gre=a("strong"),Kao=o("detr"),Zao=o(" \u2014 "),fB=a("a"),eno=o("DetrFeatureExtractor"),ono=o(" (DETR model)"),rno=l(),zg=a("li"),Ore=a("strong"),tno=o("dpt"),ano=o(" \u2014 "),mB=a("a"),nno=o("DPTFeatureExtractor"),sno=o(" (DPT model)"),lno=l(),Qg=a("li"),Vre=a("strong"),ino=o("glpn"),dno=o(" \u2014 "),gB=a("a"),cno=o("GLPNFeatureExtractor"),fno=o(" (GLPN model)"),mno=l(),Wg=a("li"),Xre=a("strong"),gno=o("hubert"),hno=o(" \u2014 "),hB=a("a"),pno=o("Wav2Vec2FeatureExtractor"),uno=o(" (Hubert model)"),_no=l(),Hg=a("li"),zre=a("strong"),bno=o("layoutlmv2"),vno=o(" \u2014 "),pB=a("a"),Fno=o("LayoutLMv2FeatureExtractor"),Tno=o(" (LayoutLMv2 model)"),Mno=l(),Ug=a("li"),Qre=a("strong"),Eno=o("maskformer"),Cno=o(" \u2014 "),uB=a("a"),wno=o("MaskFormerFeatureExtractor"),Ano=o(" (MaskFormer model)"),yno=l(),Jg=a("li"),Wre=a("strong"),Lno=o("perceiver"),xno=o(" \u2014 "),_B=a("a"),$no=o("PerceiverFeatureExtractor"),kno=o(" (Perceiver model)"),Sno=l(),Yg=a("li"),Hre=a("strong"),Rno=o("poolformer"),Bno=o(" \u2014 "),bB=a("a"),Pno=o("PoolFormerFeatureExtractor"),Ino=o(" (PoolFormer model)"),qno=l(),Kg=a("li"),Ure=a("strong"),Nno=o("regnet"),jno=o(" \u2014 "),vB=a("a"),Dno=o("ConvNextFeatureExtractor"),Gno=o(" (RegNet model)"),Ono=l(),Zg=a("li"),Jre=a("strong"),Vno=o("resnet"),Xno=o(" \u2014 "),FB=a("a"),zno=o("ConvNextFeatureExtractor"),Qno=o(" (ResNet model)"),Wno=l(),eh=a("li"),Yre=a("strong"),Hno=o("segformer"),Uno=o(" \u2014 "),TB=a("a"),Jno=o("SegformerFeatureExtractor"),Yno=o(" (SegFormer model)"),Kno=l(),oh=a("li"),Kre=a("strong"),Zno=o("speech_to_text"),eso=o(" \u2014 "),MB=a("a"),oso=o("Speech2TextFeatureExtractor"),rso=o(" (Speech2Text model)"),tso=l(),rh=a("li"),Zre=a("strong"),aso=o("swin"),nso=o(" \u2014 "),EB=a("a"),sso=o("ViTFeatureExtractor"),lso=o(" (Swin model)"),iso=l(),th=a("li"),ete=a("strong"),dso=o("van"),cso=o(" \u2014 "),CB=a("a"),fso=o("ConvNextFeatureExtractor"),mso=o(" (VAN model)"),gso=l(),ah=a("li"),ote=a("strong"),hso=o("vit"),pso=o(" \u2014 "),wB=a("a"),uso=o("ViTFeatureExtractor"),_so=o(" (ViT model)"),bso=l(),nh=a("li"),rte=a("strong"),vso=o("vit_mae"),Fso=o(" \u2014 "),AB=a("a"),Tso=o("ViTFeatureExtractor"),Mso=o(" (ViTMAE model)"),Eso=l(),sh=a("li"),tte=a("strong"),Cso=o("wav2vec2"),wso=o(" \u2014 "),yB=a("a"),Aso=o("Wav2Vec2FeatureExtractor"),yso=o(" (Wav2Vec2 model)"),Lso=l(),F(lh.$$.fragment),xso=l(),F(ih.$$.fragment),$so=l(),dh=a("div"),F(B3.$$.fragment),kso=l(),ate=a("p"),Sso=o("Register a new feature extractor for this class."),ORe=l(),hi=a("h2"),ch=a("a"),nte=a("span"),F(P3.$$.fragment),Rso=l(),ste=a("span"),Bso=o("AutoProcessor"),VRe=l(),wo=a("div"),F(I3.$$.fragment),Pso=l(),q3=a("p"),Iso=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),LB=a("a"),qso=o("AutoProcessor.from_pretrained()"),Nso=o(" class method."),jso=l(),N3=a("p"),Dso=o("This class cannot be instantiated directly using "),lte=a("code"),Gso=o("__init__()"),Oso=o(" (throws an error)."),Vso=l(),ze=a("div"),F(j3.$$.fragment),Xso=l(),ite=a("p"),zso=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Qso=l(),pi=a("p"),Wso=o("The processor class to instantiate is selected based on the "),dte=a("code"),Hso=o("model_type"),Uso=o(` property of the config object (either
passed as an argument or loaded from `),cte=a("code"),Jso=o("pretrained_model_name_or_path"),Yso=o(" if possible):"),Kso=l(),be=a("ul"),fh=a("li"),fte=a("strong"),Zso=o("clip"),elo=o(" \u2014 "),xB=a("a"),olo=o("CLIPProcessor"),rlo=o(" (CLIP model)"),tlo=l(),mh=a("li"),mte=a("strong"),alo=o("layoutlmv2"),nlo=o(" \u2014 "),$B=a("a"),slo=o("LayoutLMv2Processor"),llo=o(" (LayoutLMv2 model)"),ilo=l(),gh=a("li"),gte=a("strong"),dlo=o("layoutxlm"),clo=o(" \u2014 "),kB=a("a"),flo=o("LayoutXLMProcessor"),mlo=o(" (LayoutXLM model)"),glo=l(),hh=a("li"),hte=a("strong"),hlo=o("sew"),plo=o(" \u2014 "),SB=a("a"),ulo=o("Wav2Vec2Processor"),_lo=o(" (SEW model)"),blo=l(),ph=a("li"),pte=a("strong"),vlo=o("sew-d"),Flo=o(" \u2014 "),RB=a("a"),Tlo=o("Wav2Vec2Processor"),Mlo=o(" (SEW-D model)"),Elo=l(),uh=a("li"),ute=a("strong"),Clo=o("speech_to_text"),wlo=o(" \u2014 "),BB=a("a"),Alo=o("Speech2TextProcessor"),ylo=o(" (Speech2Text model)"),Llo=l(),_h=a("li"),_te=a("strong"),xlo=o("speech_to_text_2"),$lo=o(" \u2014 "),PB=a("a"),klo=o("Speech2Text2Processor"),Slo=o(" (Speech2Text2 model)"),Rlo=l(),bh=a("li"),bte=a("strong"),Blo=o("trocr"),Plo=o(" \u2014 "),IB=a("a"),Ilo=o("TrOCRProcessor"),qlo=o(" (TrOCR model)"),Nlo=l(),vh=a("li"),vte=a("strong"),jlo=o("unispeech"),Dlo=o(" \u2014 "),qB=a("a"),Glo=o("Wav2Vec2Processor"),Olo=o(" (UniSpeech model)"),Vlo=l(),Fh=a("li"),Fte=a("strong"),Xlo=o("unispeech-sat"),zlo=o(" \u2014 "),NB=a("a"),Qlo=o("Wav2Vec2Processor"),Wlo=o(" (UniSpeechSat model)"),Hlo=l(),Th=a("li"),Tte=a("strong"),Ulo=o("vilt"),Jlo=o(" \u2014 "),jB=a("a"),Ylo=o("ViltProcessor"),Klo=o(" (ViLT model)"),Zlo=l(),Mh=a("li"),Mte=a("strong"),eio=o("vision-text-dual-encoder"),oio=o(" \u2014 "),DB=a("a"),rio=o("VisionTextDualEncoderProcessor"),tio=o(" (VisionTextDualEncoder model)"),aio=l(),Eh=a("li"),Ete=a("strong"),nio=o("wav2vec2"),sio=o(" \u2014 "),GB=a("a"),lio=o("Wav2Vec2Processor"),iio=o(" (Wav2Vec2 model)"),dio=l(),Ch=a("li"),Cte=a("strong"),cio=o("wavlm"),fio=o(" \u2014 "),OB=a("a"),mio=o("Wav2Vec2Processor"),gio=o(" (WavLM model)"),hio=l(),F(wh.$$.fragment),pio=l(),F(Ah.$$.fragment),uio=l(),yh=a("div"),F(D3.$$.fragment),_io=l(),wte=a("p"),bio=o("Register a new processor for this class."),XRe=l(),ui=a("h2"),Lh=a("a"),Ate=a("span"),F(G3.$$.fragment),vio=l(),yte=a("span"),Fio=o("AutoModel"),zRe=l(),Ao=a("div"),F(O3.$$.fragment),Tio=l(),_i=a("p"),Mio=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VB=a("a"),Eio=o("from_pretrained()"),Cio=o(" class method or the "),XB=a("a"),wio=o("from_config()"),Aio=o(` class
method.`),yio=l(),V3=a("p"),Lio=o("This class cannot be instantiated directly using "),Lte=a("code"),xio=o("__init__()"),$io=o(" (throws an error)."),kio=l(),Kr=a("div"),F(X3.$$.fragment),Sio=l(),xte=a("p"),Rio=o("Instantiates one of the base model classes of the library from a configuration."),Bio=l(),bi=a("p"),Pio=o(`Note:
Loading a model from its configuration file does `),$te=a("strong"),Iio=o("not"),qio=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zB=a("a"),Nio=o("from_pretrained()"),jio=o(" to load the model weights."),Dio=l(),F(xh.$$.fragment),Gio=l(),Qe=a("div"),F(z3.$$.fragment),Oio=l(),kte=a("p"),Vio=o("Instantiate one of the base model classes of the library from a pretrained model."),Xio=l(),Ma=a("p"),zio=o("The model class to instantiate is selected based on the "),Ste=a("code"),Qio=o("model_type"),Wio=o(` property of the config object (either
passed as an argument or loaded from `),Rte=a("code"),Hio=o("pretrained_model_name_or_path"),Uio=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=a("code"),Jio=o("pretrained_model_name_or_path"),Yio=o(":"),Kio=l(),x=a("ul"),$h=a("li"),Pte=a("strong"),Zio=o("albert"),edo=o(" \u2014 "),QB=a("a"),odo=o("AlbertModel"),rdo=o(" (ALBERT model)"),tdo=l(),kh=a("li"),Ite=a("strong"),ado=o("bart"),ndo=o(" \u2014 "),WB=a("a"),sdo=o("BartModel"),ldo=o(" (BART model)"),ido=l(),Sh=a("li"),qte=a("strong"),ddo=o("beit"),cdo=o(" \u2014 "),HB=a("a"),fdo=o("BeitModel"),mdo=o(" (BEiT model)"),gdo=l(),Rh=a("li"),Nte=a("strong"),hdo=o("bert"),pdo=o(" \u2014 "),UB=a("a"),udo=o("BertModel"),_do=o(" (BERT model)"),bdo=l(),Bh=a("li"),jte=a("strong"),vdo=o("bert-generation"),Fdo=o(" \u2014 "),JB=a("a"),Tdo=o("BertGenerationEncoder"),Mdo=o(" (Bert Generation model)"),Edo=l(),Ph=a("li"),Dte=a("strong"),Cdo=o("big_bird"),wdo=o(" \u2014 "),YB=a("a"),Ado=o("BigBirdModel"),ydo=o(" (BigBird model)"),Ldo=l(),Ih=a("li"),Gte=a("strong"),xdo=o("bigbird_pegasus"),$do=o(" \u2014 "),KB=a("a"),kdo=o("BigBirdPegasusModel"),Sdo=o(" (BigBirdPegasus model)"),Rdo=l(),qh=a("li"),Ote=a("strong"),Bdo=o("blenderbot"),Pdo=o(" \u2014 "),ZB=a("a"),Ido=o("BlenderbotModel"),qdo=o(" (Blenderbot model)"),Ndo=l(),Nh=a("li"),Vte=a("strong"),jdo=o("blenderbot-small"),Ddo=o(" \u2014 "),eP=a("a"),Gdo=o("BlenderbotSmallModel"),Odo=o(" (BlenderbotSmall model)"),Vdo=l(),jh=a("li"),Xte=a("strong"),Xdo=o("camembert"),zdo=o(" \u2014 "),oP=a("a"),Qdo=o("CamembertModel"),Wdo=o(" (CamemBERT model)"),Hdo=l(),Dh=a("li"),zte=a("strong"),Udo=o("canine"),Jdo=o(" \u2014 "),rP=a("a"),Ydo=o("CanineModel"),Kdo=o(" (Canine model)"),Zdo=l(),Gh=a("li"),Qte=a("strong"),eco=o("clip"),oco=o(" \u2014 "),tP=a("a"),rco=o("CLIPModel"),tco=o(" (CLIP model)"),aco=l(),Oh=a("li"),Wte=a("strong"),nco=o("convbert"),sco=o(" \u2014 "),aP=a("a"),lco=o("ConvBertModel"),ico=o(" (ConvBERT model)"),dco=l(),Vh=a("li"),Hte=a("strong"),cco=o("convnext"),fco=o(" \u2014 "),nP=a("a"),mco=o("ConvNextModel"),gco=o(" (ConvNext model)"),hco=l(),Xh=a("li"),Ute=a("strong"),pco=o("ctrl"),uco=o(" \u2014 "),sP=a("a"),_co=o("CTRLModel"),bco=o(" (CTRL model)"),vco=l(),zh=a("li"),Jte=a("strong"),Fco=o("data2vec-audio"),Tco=o(" \u2014 "),lP=a("a"),Mco=o("Data2VecAudioModel"),Eco=o(" (Data2VecAudio model)"),Cco=l(),Qh=a("li"),Yte=a("strong"),wco=o("data2vec-text"),Aco=o(" \u2014 "),iP=a("a"),yco=o("Data2VecTextModel"),Lco=o(" (Data2VecText model)"),xco=l(),Wh=a("li"),Kte=a("strong"),$co=o("data2vec-vision"),kco=o(" \u2014 "),dP=a("a"),Sco=o("Data2VecVisionModel"),Rco=o(" (Data2VecVision model)"),Bco=l(),Hh=a("li"),Zte=a("strong"),Pco=o("deberta"),Ico=o(" \u2014 "),cP=a("a"),qco=o("DebertaModel"),Nco=o(" (DeBERTa model)"),jco=l(),Uh=a("li"),eae=a("strong"),Dco=o("deberta-v2"),Gco=o(" \u2014 "),fP=a("a"),Oco=o("DebertaV2Model"),Vco=o(" (DeBERTa-v2 model)"),Xco=l(),Jh=a("li"),oae=a("strong"),zco=o("decision_transformer"),Qco=o(" \u2014 "),mP=a("a"),Wco=o("DecisionTransformerModel"),Hco=o(" (Decision Transformer model)"),Uco=l(),Yh=a("li"),rae=a("strong"),Jco=o("deit"),Yco=o(" \u2014 "),gP=a("a"),Kco=o("DeiTModel"),Zco=o(" (DeiT model)"),efo=l(),Kh=a("li"),tae=a("strong"),ofo=o("detr"),rfo=o(" \u2014 "),hP=a("a"),tfo=o("DetrModel"),afo=o(" (DETR model)"),nfo=l(),Zh=a("li"),aae=a("strong"),sfo=o("distilbert"),lfo=o(" \u2014 "),pP=a("a"),ifo=o("DistilBertModel"),dfo=o(" (DistilBERT model)"),cfo=l(),ep=a("li"),nae=a("strong"),ffo=o("dpr"),mfo=o(" \u2014 "),uP=a("a"),gfo=o("DPRQuestionEncoder"),hfo=o(" (DPR model)"),pfo=l(),op=a("li"),sae=a("strong"),ufo=o("dpt"),_fo=o(" \u2014 "),_P=a("a"),bfo=o("DPTModel"),vfo=o(" (DPT model)"),Ffo=l(),rp=a("li"),lae=a("strong"),Tfo=o("electra"),Mfo=o(" \u2014 "),bP=a("a"),Efo=o("ElectraModel"),Cfo=o(" (ELECTRA model)"),wfo=l(),tp=a("li"),iae=a("strong"),Afo=o("flaubert"),yfo=o(" \u2014 "),vP=a("a"),Lfo=o("FlaubertModel"),xfo=o(" (FlauBERT model)"),$fo=l(),ap=a("li"),dae=a("strong"),kfo=o("fnet"),Sfo=o(" \u2014 "),FP=a("a"),Rfo=o("FNetModel"),Bfo=o(" (FNet model)"),Pfo=l(),np=a("li"),cae=a("strong"),Ifo=o("fsmt"),qfo=o(" \u2014 "),TP=a("a"),Nfo=o("FSMTModel"),jfo=o(" (FairSeq Machine-Translation model)"),Dfo=l(),Ls=a("li"),fae=a("strong"),Gfo=o("funnel"),Ofo=o(" \u2014 "),MP=a("a"),Vfo=o("FunnelModel"),Xfo=o(" or "),EP=a("a"),zfo=o("FunnelBaseModel"),Qfo=o(" (Funnel Transformer model)"),Wfo=l(),sp=a("li"),mae=a("strong"),Hfo=o("glpn"),Ufo=o(" \u2014 "),CP=a("a"),Jfo=o("GLPNModel"),Yfo=o(" (GLPN model)"),Kfo=l(),lp=a("li"),gae=a("strong"),Zfo=o("gpt2"),emo=o(" \u2014 "),wP=a("a"),omo=o("GPT2Model"),rmo=o(" (OpenAI GPT-2 model)"),tmo=l(),ip=a("li"),hae=a("strong"),amo=o("gpt_neo"),nmo=o(" \u2014 "),AP=a("a"),smo=o("GPTNeoModel"),lmo=o(" (GPT Neo model)"),imo=l(),dp=a("li"),pae=a("strong"),dmo=o("gptj"),cmo=o(" \u2014 "),yP=a("a"),fmo=o("GPTJModel"),mmo=o(" (GPT-J model)"),gmo=l(),cp=a("li"),uae=a("strong"),hmo=o("hubert"),pmo=o(" \u2014 "),LP=a("a"),umo=o("HubertModel"),_mo=o(" (Hubert model)"),bmo=l(),fp=a("li"),_ae=a("strong"),vmo=o("ibert"),Fmo=o(" \u2014 "),xP=a("a"),Tmo=o("IBertModel"),Mmo=o(" (I-BERT model)"),Emo=l(),mp=a("li"),bae=a("strong"),Cmo=o("imagegpt"),wmo=o(" \u2014 "),$P=a("a"),Amo=o("ImageGPTModel"),ymo=o(" (ImageGPT model)"),Lmo=l(),gp=a("li"),vae=a("strong"),xmo=o("layoutlm"),$mo=o(" \u2014 "),kP=a("a"),kmo=o("LayoutLMModel"),Smo=o(" (LayoutLM model)"),Rmo=l(),hp=a("li"),Fae=a("strong"),Bmo=o("layoutlmv2"),Pmo=o(" \u2014 "),SP=a("a"),Imo=o("LayoutLMv2Model"),qmo=o(" (LayoutLMv2 model)"),Nmo=l(),pp=a("li"),Tae=a("strong"),jmo=o("led"),Dmo=o(" \u2014 "),RP=a("a"),Gmo=o("LEDModel"),Omo=o(" (LED model)"),Vmo=l(),up=a("li"),Mae=a("strong"),Xmo=o("longformer"),zmo=o(" \u2014 "),BP=a("a"),Qmo=o("LongformerModel"),Wmo=o(" (Longformer model)"),Hmo=l(),_p=a("li"),Eae=a("strong"),Umo=o("luke"),Jmo=o(" \u2014 "),PP=a("a"),Ymo=o("LukeModel"),Kmo=o(" (LUKE model)"),Zmo=l(),bp=a("li"),Cae=a("strong"),ego=o("lxmert"),ogo=o(" \u2014 "),IP=a("a"),rgo=o("LxmertModel"),tgo=o(" (LXMERT model)"),ago=l(),vp=a("li"),wae=a("strong"),ngo=o("m2m_100"),sgo=o(" \u2014 "),qP=a("a"),lgo=o("M2M100Model"),igo=o(" (M2M100 model)"),dgo=l(),Fp=a("li"),Aae=a("strong"),cgo=o("marian"),fgo=o(" \u2014 "),NP=a("a"),mgo=o("MarianModel"),ggo=o(" (Marian model)"),hgo=l(),Tp=a("li"),yae=a("strong"),pgo=o("maskformer"),ugo=o(" \u2014 "),jP=a("a"),_go=o("MaskFormerModel"),bgo=o(" (MaskFormer model)"),vgo=l(),Mp=a("li"),Lae=a("strong"),Fgo=o("mbart"),Tgo=o(" \u2014 "),DP=a("a"),Mgo=o("MBartModel"),Ego=o(" (mBART model)"),Cgo=l(),Ep=a("li"),xae=a("strong"),wgo=o("megatron-bert"),Ago=o(" \u2014 "),GP=a("a"),ygo=o("MegatronBertModel"),Lgo=o(" (MegatronBert model)"),xgo=l(),Cp=a("li"),$ae=a("strong"),$go=o("mobilebert"),kgo=o(" \u2014 "),OP=a("a"),Sgo=o("MobileBertModel"),Rgo=o(" (MobileBERT model)"),Bgo=l(),wp=a("li"),kae=a("strong"),Pgo=o("mpnet"),Igo=o(" \u2014 "),VP=a("a"),qgo=o("MPNetModel"),Ngo=o(" (MPNet model)"),jgo=l(),Ap=a("li"),Sae=a("strong"),Dgo=o("mt5"),Ggo=o(" \u2014 "),XP=a("a"),Ogo=o("MT5Model"),Vgo=o(" (mT5 model)"),Xgo=l(),yp=a("li"),Rae=a("strong"),zgo=o("nystromformer"),Qgo=o(" \u2014 "),zP=a("a"),Wgo=o("NystromformerModel"),Hgo=o(" (Nystromformer model)"),Ugo=l(),Lp=a("li"),Bae=a("strong"),Jgo=o("openai-gpt"),Ygo=o(" \u2014 "),QP=a("a"),Kgo=o("OpenAIGPTModel"),Zgo=o(" (OpenAI GPT model)"),eho=l(),xp=a("li"),Pae=a("strong"),oho=o("pegasus"),rho=o(" \u2014 "),WP=a("a"),tho=o("PegasusModel"),aho=o(" (Pegasus model)"),nho=l(),$p=a("li"),Iae=a("strong"),sho=o("perceiver"),lho=o(" \u2014 "),HP=a("a"),iho=o("PerceiverModel"),dho=o(" (Perceiver model)"),cho=l(),kp=a("li"),qae=a("strong"),fho=o("plbart"),mho=o(" \u2014 "),UP=a("a"),gho=o("PLBartModel"),hho=o(" (PLBart model)"),pho=l(),Sp=a("li"),Nae=a("strong"),uho=o("poolformer"),_ho=o(" \u2014 "),JP=a("a"),bho=o("PoolFormerModel"),vho=o(" (PoolFormer model)"),Fho=l(),Rp=a("li"),jae=a("strong"),Tho=o("prophetnet"),Mho=o(" \u2014 "),YP=a("a"),Eho=o("ProphetNetModel"),Cho=o(" (ProphetNet model)"),who=l(),Bp=a("li"),Dae=a("strong"),Aho=o("qdqbert"),yho=o(" \u2014 "),KP=a("a"),Lho=o("QDQBertModel"),xho=o(" (QDQBert model)"),$ho=l(),Pp=a("li"),Gae=a("strong"),kho=o("reformer"),Sho=o(" \u2014 "),ZP=a("a"),Rho=o("ReformerModel"),Bho=o(" (Reformer model)"),Pho=l(),Ip=a("li"),Oae=a("strong"),Iho=o("regnet"),qho=o(" \u2014 "),eI=a("a"),Nho=o("RegNetModel"),jho=o(" (RegNet model)"),Dho=l(),qp=a("li"),Vae=a("strong"),Gho=o("rembert"),Oho=o(" \u2014 "),oI=a("a"),Vho=o("RemBertModel"),Xho=o(" (RemBERT model)"),zho=l(),Np=a("li"),Xae=a("strong"),Qho=o("resnet"),Who=o(" \u2014 "),rI=a("a"),Hho=o("ResNetModel"),Uho=o(" (ResNet model)"),Jho=l(),jp=a("li"),zae=a("strong"),Yho=o("retribert"),Kho=o(" \u2014 "),tI=a("a"),Zho=o("RetriBertModel"),epo=o(" (RetriBERT model)"),opo=l(),Dp=a("li"),Qae=a("strong"),rpo=o("roberta"),tpo=o(" \u2014 "),aI=a("a"),apo=o("RobertaModel"),npo=o(" (RoBERTa model)"),spo=l(),Gp=a("li"),Wae=a("strong"),lpo=o("roformer"),ipo=o(" \u2014 "),nI=a("a"),dpo=o("RoFormerModel"),cpo=o(" (RoFormer model)"),fpo=l(),Op=a("li"),Hae=a("strong"),mpo=o("segformer"),gpo=o(" \u2014 "),sI=a("a"),hpo=o("SegformerModel"),ppo=o(" (SegFormer model)"),upo=l(),Vp=a("li"),Uae=a("strong"),_po=o("sew"),bpo=o(" \u2014 "),lI=a("a"),vpo=o("SEWModel"),Fpo=o(" (SEW model)"),Tpo=l(),Xp=a("li"),Jae=a("strong"),Mpo=o("sew-d"),Epo=o(" \u2014 "),iI=a("a"),Cpo=o("SEWDModel"),wpo=o(" (SEW-D model)"),Apo=l(),zp=a("li"),Yae=a("strong"),ypo=o("speech_to_text"),Lpo=o(" \u2014 "),dI=a("a"),xpo=o("Speech2TextModel"),$po=o(" (Speech2Text model)"),kpo=l(),Qp=a("li"),Kae=a("strong"),Spo=o("splinter"),Rpo=o(" \u2014 "),cI=a("a"),Bpo=o("SplinterModel"),Ppo=o(" (Splinter model)"),Ipo=l(),Wp=a("li"),Zae=a("strong"),qpo=o("squeezebert"),Npo=o(" \u2014 "),fI=a("a"),jpo=o("SqueezeBertModel"),Dpo=o(" (SqueezeBERT model)"),Gpo=l(),Hp=a("li"),ene=a("strong"),Opo=o("swin"),Vpo=o(" \u2014 "),mI=a("a"),Xpo=o("SwinModel"),zpo=o(" (Swin model)"),Qpo=l(),Up=a("li"),one=a("strong"),Wpo=o("t5"),Hpo=o(" \u2014 "),gI=a("a"),Upo=o("T5Model"),Jpo=o(" (T5 model)"),Ypo=l(),Jp=a("li"),rne=a("strong"),Kpo=o("tapas"),Zpo=o(" \u2014 "),hI=a("a"),euo=o("TapasModel"),ouo=o(" (TAPAS model)"),ruo=l(),Yp=a("li"),tne=a("strong"),tuo=o("transfo-xl"),auo=o(" \u2014 "),pI=a("a"),nuo=o("TransfoXLModel"),suo=o(" (Transformer-XL model)"),luo=l(),Kp=a("li"),ane=a("strong"),iuo=o("unispeech"),duo=o(" \u2014 "),uI=a("a"),cuo=o("UniSpeechModel"),fuo=o(" (UniSpeech model)"),muo=l(),Zp=a("li"),nne=a("strong"),guo=o("unispeech-sat"),huo=o(" \u2014 "),_I=a("a"),puo=o("UniSpeechSatModel"),uuo=o(" (UniSpeechSat model)"),_uo=l(),eu=a("li"),sne=a("strong"),buo=o("van"),vuo=o(" \u2014 "),bI=a("a"),Fuo=o("VanModel"),Tuo=o(" (VAN model)"),Muo=l(),ou=a("li"),lne=a("strong"),Euo=o("vilt"),Cuo=o(" \u2014 "),vI=a("a"),wuo=o("ViltModel"),Auo=o(" (ViLT model)"),yuo=l(),ru=a("li"),ine=a("strong"),Luo=o("vision-text-dual-encoder"),xuo=o(" \u2014 "),FI=a("a"),$uo=o("VisionTextDualEncoderModel"),kuo=o(" (VisionTextDualEncoder model)"),Suo=l(),tu=a("li"),dne=a("strong"),Ruo=o("visual_bert"),Buo=o(" \u2014 "),TI=a("a"),Puo=o("VisualBertModel"),Iuo=o(" (VisualBert model)"),quo=l(),au=a("li"),cne=a("strong"),Nuo=o("vit"),juo=o(" \u2014 "),MI=a("a"),Duo=o("ViTModel"),Guo=o(" (ViT model)"),Ouo=l(),nu=a("li"),fne=a("strong"),Vuo=o("vit_mae"),Xuo=o(" \u2014 "),EI=a("a"),zuo=o("ViTMAEModel"),Quo=o(" (ViTMAE model)"),Wuo=l(),su=a("li"),mne=a("strong"),Huo=o("wav2vec2"),Uuo=o(" \u2014 "),CI=a("a"),Juo=o("Wav2Vec2Model"),Yuo=o(" (Wav2Vec2 model)"),Kuo=l(),lu=a("li"),gne=a("strong"),Zuo=o("wavlm"),e_o=o(" \u2014 "),wI=a("a"),o_o=o("WavLMModel"),r_o=o(" (WavLM model)"),t_o=l(),iu=a("li"),hne=a("strong"),a_o=o("xglm"),n_o=o(" \u2014 "),AI=a("a"),s_o=o("XGLMModel"),l_o=o(" (XGLM model)"),i_o=l(),du=a("li"),pne=a("strong"),d_o=o("xlm"),c_o=o(" \u2014 "),yI=a("a"),f_o=o("XLMModel"),m_o=o(" (XLM model)"),g_o=l(),cu=a("li"),une=a("strong"),h_o=o("xlm-prophetnet"),p_o=o(" \u2014 "),LI=a("a"),u_o=o("XLMProphetNetModel"),__o=o(" (XLMProphetNet model)"),b_o=l(),fu=a("li"),_ne=a("strong"),v_o=o("xlm-roberta"),F_o=o(" \u2014 "),xI=a("a"),T_o=o("XLMRobertaModel"),M_o=o(" (XLM-RoBERTa model)"),E_o=l(),mu=a("li"),bne=a("strong"),C_o=o("xlm-roberta-xl"),w_o=o(" \u2014 "),$I=a("a"),A_o=o("XLMRobertaXLModel"),y_o=o(" (XLM-RoBERTa-XL model)"),L_o=l(),gu=a("li"),vne=a("strong"),x_o=o("xlnet"),$_o=o(" \u2014 "),kI=a("a"),k_o=o("XLNetModel"),S_o=o(" (XLNet model)"),R_o=l(),hu=a("li"),Fne=a("strong"),B_o=o("yoso"),P_o=o(" \u2014 "),SI=a("a"),I_o=o("YosoModel"),q_o=o(" (YOSO model)"),N_o=l(),pu=a("p"),j_o=o("The model is set in evaluation mode by default using "),Tne=a("code"),D_o=o("model.eval()"),G_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=a("code"),O_o=o("model.train()"),V_o=l(),F(uu.$$.fragment),QRe=l(),vi=a("h2"),_u=a("a"),Ene=a("span"),F(Q3.$$.fragment),X_o=l(),Cne=a("span"),z_o=o("AutoModelForPreTraining"),WRe=l(),yo=a("div"),F(W3.$$.fragment),Q_o=l(),Fi=a("p"),W_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RI=a("a"),H_o=o("from_pretrained()"),U_o=o(" class method or the "),BI=a("a"),J_o=o("from_config()"),Y_o=o(` class
method.`),K_o=l(),H3=a("p"),Z_o=o("This class cannot be instantiated directly using "),wne=a("code"),e1o=o("__init__()"),o1o=o(" (throws an error)."),r1o=l(),Zr=a("div"),F(U3.$$.fragment),t1o=l(),Ane=a("p"),a1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),n1o=l(),Ti=a("p"),s1o=o(`Note:
Loading a model from its configuration file does `),yne=a("strong"),l1o=o("not"),i1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PI=a("a"),d1o=o("from_pretrained()"),c1o=o(" to load the model weights."),f1o=l(),F(bu.$$.fragment),m1o=l(),We=a("div"),F(J3.$$.fragment),g1o=l(),Lne=a("p"),h1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p1o=l(),Ea=a("p"),u1o=o("The model class to instantiate is selected based on the "),xne=a("code"),_1o=o("model_type"),b1o=o(` property of the config object (either
passed as an argument or loaded from `),$ne=a("code"),v1o=o("pretrained_model_name_or_path"),F1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=a("code"),T1o=o("pretrained_model_name_or_path"),M1o=o(":"),E1o=l(),G=a("ul"),vu=a("li"),Sne=a("strong"),C1o=o("albert"),w1o=o(" \u2014 "),II=a("a"),A1o=o("AlbertForPreTraining"),y1o=o(" (ALBERT model)"),L1o=l(),Fu=a("li"),Rne=a("strong"),x1o=o("bart"),$1o=o(" \u2014 "),qI=a("a"),k1o=o("BartForConditionalGeneration"),S1o=o(" (BART model)"),R1o=l(),Tu=a("li"),Bne=a("strong"),B1o=o("bert"),P1o=o(" \u2014 "),NI=a("a"),I1o=o("BertForPreTraining"),q1o=o(" (BERT model)"),N1o=l(),Mu=a("li"),Pne=a("strong"),j1o=o("big_bird"),D1o=o(" \u2014 "),jI=a("a"),G1o=o("BigBirdForPreTraining"),O1o=o(" (BigBird model)"),V1o=l(),Eu=a("li"),Ine=a("strong"),X1o=o("camembert"),z1o=o(" \u2014 "),DI=a("a"),Q1o=o("CamembertForMaskedLM"),W1o=o(" (CamemBERT model)"),H1o=l(),Cu=a("li"),qne=a("strong"),U1o=o("ctrl"),J1o=o(" \u2014 "),GI=a("a"),Y1o=o("CTRLLMHeadModel"),K1o=o(" (CTRL model)"),Z1o=l(),wu=a("li"),Nne=a("strong"),ebo=o("data2vec-text"),obo=o(" \u2014 "),OI=a("a"),rbo=o("Data2VecTextForMaskedLM"),tbo=o(" (Data2VecText model)"),abo=l(),Au=a("li"),jne=a("strong"),nbo=o("deberta"),sbo=o(" \u2014 "),VI=a("a"),lbo=o("DebertaForMaskedLM"),ibo=o(" (DeBERTa model)"),dbo=l(),yu=a("li"),Dne=a("strong"),cbo=o("deberta-v2"),fbo=o(" \u2014 "),XI=a("a"),mbo=o("DebertaV2ForMaskedLM"),gbo=o(" (DeBERTa-v2 model)"),hbo=l(),Lu=a("li"),Gne=a("strong"),pbo=o("distilbert"),ubo=o(" \u2014 "),zI=a("a"),_bo=o("DistilBertForMaskedLM"),bbo=o(" (DistilBERT model)"),vbo=l(),xu=a("li"),One=a("strong"),Fbo=o("electra"),Tbo=o(" \u2014 "),QI=a("a"),Mbo=o("ElectraForPreTraining"),Ebo=o(" (ELECTRA model)"),Cbo=l(),$u=a("li"),Vne=a("strong"),wbo=o("flaubert"),Abo=o(" \u2014 "),WI=a("a"),ybo=o("FlaubertWithLMHeadModel"),Lbo=o(" (FlauBERT model)"),xbo=l(),ku=a("li"),Xne=a("strong"),$bo=o("fnet"),kbo=o(" \u2014 "),HI=a("a"),Sbo=o("FNetForPreTraining"),Rbo=o(" (FNet model)"),Bbo=l(),Su=a("li"),zne=a("strong"),Pbo=o("fsmt"),Ibo=o(" \u2014 "),UI=a("a"),qbo=o("FSMTForConditionalGeneration"),Nbo=o(" (FairSeq Machine-Translation model)"),jbo=l(),Ru=a("li"),Qne=a("strong"),Dbo=o("funnel"),Gbo=o(" \u2014 "),JI=a("a"),Obo=o("FunnelForPreTraining"),Vbo=o(" (Funnel Transformer model)"),Xbo=l(),Bu=a("li"),Wne=a("strong"),zbo=o("gpt2"),Qbo=o(" \u2014 "),YI=a("a"),Wbo=o("GPT2LMHeadModel"),Hbo=o(" (OpenAI GPT-2 model)"),Ubo=l(),Pu=a("li"),Hne=a("strong"),Jbo=o("ibert"),Ybo=o(" \u2014 "),KI=a("a"),Kbo=o("IBertForMaskedLM"),Zbo=o(" (I-BERT model)"),e2o=l(),Iu=a("li"),Une=a("strong"),o2o=o("layoutlm"),r2o=o(" \u2014 "),ZI=a("a"),t2o=o("LayoutLMForMaskedLM"),a2o=o(" (LayoutLM model)"),n2o=l(),qu=a("li"),Jne=a("strong"),s2o=o("longformer"),l2o=o(" \u2014 "),eq=a("a"),i2o=o("LongformerForMaskedLM"),d2o=o(" (Longformer model)"),c2o=l(),Nu=a("li"),Yne=a("strong"),f2o=o("lxmert"),m2o=o(" \u2014 "),oq=a("a"),g2o=o("LxmertForPreTraining"),h2o=o(" (LXMERT model)"),p2o=l(),ju=a("li"),Kne=a("strong"),u2o=o("megatron-bert"),_2o=o(" \u2014 "),rq=a("a"),b2o=o("MegatronBertForPreTraining"),v2o=o(" (MegatronBert model)"),F2o=l(),Du=a("li"),Zne=a("strong"),T2o=o("mobilebert"),M2o=o(" \u2014 "),tq=a("a"),E2o=o("MobileBertForPreTraining"),C2o=o(" (MobileBERT model)"),w2o=l(),Gu=a("li"),ese=a("strong"),A2o=o("mpnet"),y2o=o(" \u2014 "),aq=a("a"),L2o=o("MPNetForMaskedLM"),x2o=o(" (MPNet model)"),$2o=l(),Ou=a("li"),ose=a("strong"),k2o=o("openai-gpt"),S2o=o(" \u2014 "),nq=a("a"),R2o=o("OpenAIGPTLMHeadModel"),B2o=o(" (OpenAI GPT model)"),P2o=l(),Vu=a("li"),rse=a("strong"),I2o=o("retribert"),q2o=o(" \u2014 "),sq=a("a"),N2o=o("RetriBertModel"),j2o=o(" (RetriBERT model)"),D2o=l(),Xu=a("li"),tse=a("strong"),G2o=o("roberta"),O2o=o(" \u2014 "),lq=a("a"),V2o=o("RobertaForMaskedLM"),X2o=o(" (RoBERTa model)"),z2o=l(),zu=a("li"),ase=a("strong"),Q2o=o("squeezebert"),W2o=o(" \u2014 "),iq=a("a"),H2o=o("SqueezeBertForMaskedLM"),U2o=o(" (SqueezeBERT model)"),J2o=l(),Qu=a("li"),nse=a("strong"),Y2o=o("t5"),K2o=o(" \u2014 "),dq=a("a"),Z2o=o("T5ForConditionalGeneration"),evo=o(" (T5 model)"),ovo=l(),Wu=a("li"),sse=a("strong"),rvo=o("tapas"),tvo=o(" \u2014 "),cq=a("a"),avo=o("TapasForMaskedLM"),nvo=o(" (TAPAS model)"),svo=l(),Hu=a("li"),lse=a("strong"),lvo=o("transfo-xl"),ivo=o(" \u2014 "),fq=a("a"),dvo=o("TransfoXLLMHeadModel"),cvo=o(" (Transformer-XL model)"),fvo=l(),Uu=a("li"),ise=a("strong"),mvo=o("unispeech"),gvo=o(" \u2014 "),mq=a("a"),hvo=o("UniSpeechForPreTraining"),pvo=o(" (UniSpeech model)"),uvo=l(),Ju=a("li"),dse=a("strong"),_vo=o("unispeech-sat"),bvo=o(" \u2014 "),gq=a("a"),vvo=o("UniSpeechSatForPreTraining"),Fvo=o(" (UniSpeechSat model)"),Tvo=l(),Yu=a("li"),cse=a("strong"),Mvo=o("visual_bert"),Evo=o(" \u2014 "),hq=a("a"),Cvo=o("VisualBertForPreTraining"),wvo=o(" (VisualBert model)"),Avo=l(),Ku=a("li"),fse=a("strong"),yvo=o("vit_mae"),Lvo=o(" \u2014 "),pq=a("a"),xvo=o("ViTMAEForPreTraining"),$vo=o(" (ViTMAE model)"),kvo=l(),Zu=a("li"),mse=a("strong"),Svo=o("wav2vec2"),Rvo=o(" \u2014 "),uq=a("a"),Bvo=o("Wav2Vec2ForPreTraining"),Pvo=o(" (Wav2Vec2 model)"),Ivo=l(),e_=a("li"),gse=a("strong"),qvo=o("xlm"),Nvo=o(" \u2014 "),_q=a("a"),jvo=o("XLMWithLMHeadModel"),Dvo=o(" (XLM model)"),Gvo=l(),o_=a("li"),hse=a("strong"),Ovo=o("xlm-roberta"),Vvo=o(" \u2014 "),bq=a("a"),Xvo=o("XLMRobertaForMaskedLM"),zvo=o(" (XLM-RoBERTa model)"),Qvo=l(),r_=a("li"),pse=a("strong"),Wvo=o("xlm-roberta-xl"),Hvo=o(" \u2014 "),vq=a("a"),Uvo=o("XLMRobertaXLForMaskedLM"),Jvo=o(" (XLM-RoBERTa-XL model)"),Yvo=l(),t_=a("li"),use=a("strong"),Kvo=o("xlnet"),Zvo=o(" \u2014 "),Fq=a("a"),eFo=o("XLNetLMHeadModel"),oFo=o(" (XLNet model)"),rFo=l(),a_=a("p"),tFo=o("The model is set in evaluation mode by default using "),_se=a("code"),aFo=o("model.eval()"),nFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bse=a("code"),sFo=o("model.train()"),lFo=l(),F(n_.$$.fragment),HRe=l(),Mi=a("h2"),s_=a("a"),vse=a("span"),F(Y3.$$.fragment),iFo=l(),Fse=a("span"),dFo=o("AutoModelForCausalLM"),URe=l(),Lo=a("div"),F(K3.$$.fragment),cFo=l(),Ei=a("p"),fFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Tq=a("a"),mFo=o("from_pretrained()"),gFo=o(" class method or the "),Mq=a("a"),hFo=o("from_config()"),pFo=o(` class
method.`),uFo=l(),Z3=a("p"),_Fo=o("This class cannot be instantiated directly using "),Tse=a("code"),bFo=o("__init__()"),vFo=o(" (throws an error)."),FFo=l(),et=a("div"),F(ew.$$.fragment),TFo=l(),Mse=a("p"),MFo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EFo=l(),Ci=a("p"),CFo=o(`Note:
Loading a model from its configuration file does `),Ese=a("strong"),wFo=o("not"),AFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eq=a("a"),yFo=o("from_pretrained()"),LFo=o(" to load the model weights."),xFo=l(),F(l_.$$.fragment),$Fo=l(),He=a("div"),F(ow.$$.fragment),kFo=l(),Cse=a("p"),SFo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),RFo=l(),Ca=a("p"),BFo=o("The model class to instantiate is selected based on the "),wse=a("code"),PFo=o("model_type"),IFo=o(` property of the config object (either
passed as an argument or loaded from `),Ase=a("code"),qFo=o("pretrained_model_name_or_path"),NFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=a("code"),jFo=o("pretrained_model_name_or_path"),DFo=o(":"),GFo=l(),z=a("ul"),i_=a("li"),Lse=a("strong"),OFo=o("bart"),VFo=o(" \u2014 "),Cq=a("a"),XFo=o("BartForCausalLM"),zFo=o(" (BART model)"),QFo=l(),d_=a("li"),xse=a("strong"),WFo=o("bert"),HFo=o(" \u2014 "),wq=a("a"),UFo=o("BertLMHeadModel"),JFo=o(" (BERT model)"),YFo=l(),c_=a("li"),$se=a("strong"),KFo=o("bert-generation"),ZFo=o(" \u2014 "),Aq=a("a"),e0o=o("BertGenerationDecoder"),o0o=o(" (Bert Generation model)"),r0o=l(),f_=a("li"),kse=a("strong"),t0o=o("big_bird"),a0o=o(" \u2014 "),yq=a("a"),n0o=o("BigBirdForCausalLM"),s0o=o(" (BigBird model)"),l0o=l(),m_=a("li"),Sse=a("strong"),i0o=o("bigbird_pegasus"),d0o=o(" \u2014 "),Lq=a("a"),c0o=o("BigBirdPegasusForCausalLM"),f0o=o(" (BigBirdPegasus model)"),m0o=l(),g_=a("li"),Rse=a("strong"),g0o=o("blenderbot"),h0o=o(" \u2014 "),xq=a("a"),p0o=o("BlenderbotForCausalLM"),u0o=o(" (Blenderbot model)"),_0o=l(),h_=a("li"),Bse=a("strong"),b0o=o("blenderbot-small"),v0o=o(" \u2014 "),$q=a("a"),F0o=o("BlenderbotSmallForCausalLM"),T0o=o(" (BlenderbotSmall model)"),M0o=l(),p_=a("li"),Pse=a("strong"),E0o=o("camembert"),C0o=o(" \u2014 "),kq=a("a"),w0o=o("CamembertForCausalLM"),A0o=o(" (CamemBERT model)"),y0o=l(),u_=a("li"),Ise=a("strong"),L0o=o("ctrl"),x0o=o(" \u2014 "),Sq=a("a"),$0o=o("CTRLLMHeadModel"),k0o=o(" (CTRL model)"),S0o=l(),__=a("li"),qse=a("strong"),R0o=o("data2vec-text"),B0o=o(" \u2014 "),Rq=a("a"),P0o=o("Data2VecTextForCausalLM"),I0o=o(" (Data2VecText model)"),q0o=l(),b_=a("li"),Nse=a("strong"),N0o=o("electra"),j0o=o(" \u2014 "),Bq=a("a"),D0o=o("ElectraForCausalLM"),G0o=o(" (ELECTRA model)"),O0o=l(),v_=a("li"),jse=a("strong"),V0o=o("gpt2"),X0o=o(" \u2014 "),Pq=a("a"),z0o=o("GPT2LMHeadModel"),Q0o=o(" (OpenAI GPT-2 model)"),W0o=l(),F_=a("li"),Dse=a("strong"),H0o=o("gpt_neo"),U0o=o(" \u2014 "),Iq=a("a"),J0o=o("GPTNeoForCausalLM"),Y0o=o(" (GPT Neo model)"),K0o=l(),T_=a("li"),Gse=a("strong"),Z0o=o("gptj"),e6o=o(" \u2014 "),qq=a("a"),o6o=o("GPTJForCausalLM"),r6o=o(" (GPT-J model)"),t6o=l(),M_=a("li"),Ose=a("strong"),a6o=o("marian"),n6o=o(" \u2014 "),Nq=a("a"),s6o=o("MarianForCausalLM"),l6o=o(" (Marian model)"),i6o=l(),E_=a("li"),Vse=a("strong"),d6o=o("mbart"),c6o=o(" \u2014 "),jq=a("a"),f6o=o("MBartForCausalLM"),m6o=o(" (mBART model)"),g6o=l(),C_=a("li"),Xse=a("strong"),h6o=o("megatron-bert"),p6o=o(" \u2014 "),Dq=a("a"),u6o=o("MegatronBertForCausalLM"),_6o=o(" (MegatronBert model)"),b6o=l(),w_=a("li"),zse=a("strong"),v6o=o("openai-gpt"),F6o=o(" \u2014 "),Gq=a("a"),T6o=o("OpenAIGPTLMHeadModel"),M6o=o(" (OpenAI GPT model)"),E6o=l(),A_=a("li"),Qse=a("strong"),C6o=o("pegasus"),w6o=o(" \u2014 "),Oq=a("a"),A6o=o("PegasusForCausalLM"),y6o=o(" (Pegasus model)"),L6o=l(),y_=a("li"),Wse=a("strong"),x6o=o("plbart"),$6o=o(" \u2014 "),Vq=a("a"),k6o=o("PLBartForCausalLM"),S6o=o(" (PLBart model)"),R6o=l(),L_=a("li"),Hse=a("strong"),B6o=o("prophetnet"),P6o=o(" \u2014 "),Xq=a("a"),I6o=o("ProphetNetForCausalLM"),q6o=o(" (ProphetNet model)"),N6o=l(),x_=a("li"),Use=a("strong"),j6o=o("qdqbert"),D6o=o(" \u2014 "),zq=a("a"),G6o=o("QDQBertLMHeadModel"),O6o=o(" (QDQBert model)"),V6o=l(),$_=a("li"),Jse=a("strong"),X6o=o("reformer"),z6o=o(" \u2014 "),Qq=a("a"),Q6o=o("ReformerModelWithLMHead"),W6o=o(" (Reformer model)"),H6o=l(),k_=a("li"),Yse=a("strong"),U6o=o("rembert"),J6o=o(" \u2014 "),Wq=a("a"),Y6o=o("RemBertForCausalLM"),K6o=o(" (RemBERT model)"),Z6o=l(),S_=a("li"),Kse=a("strong"),eTo=o("roberta"),oTo=o(" \u2014 "),Hq=a("a"),rTo=o("RobertaForCausalLM"),tTo=o(" (RoBERTa model)"),aTo=l(),R_=a("li"),Zse=a("strong"),nTo=o("roformer"),sTo=o(" \u2014 "),Uq=a("a"),lTo=o("RoFormerForCausalLM"),iTo=o(" (RoFormer model)"),dTo=l(),B_=a("li"),ele=a("strong"),cTo=o("speech_to_text_2"),fTo=o(" \u2014 "),Jq=a("a"),mTo=o("Speech2Text2ForCausalLM"),gTo=o(" (Speech2Text2 model)"),hTo=l(),P_=a("li"),ole=a("strong"),pTo=o("transfo-xl"),uTo=o(" \u2014 "),Yq=a("a"),_To=o("TransfoXLLMHeadModel"),bTo=o(" (Transformer-XL model)"),vTo=l(),I_=a("li"),rle=a("strong"),FTo=o("trocr"),TTo=o(" \u2014 "),Kq=a("a"),MTo=o("TrOCRForCausalLM"),ETo=o(" (TrOCR model)"),CTo=l(),q_=a("li"),tle=a("strong"),wTo=o("xglm"),ATo=o(" \u2014 "),Zq=a("a"),yTo=o("XGLMForCausalLM"),LTo=o(" (XGLM model)"),xTo=l(),N_=a("li"),ale=a("strong"),$To=o("xlm"),kTo=o(" \u2014 "),eN=a("a"),STo=o("XLMWithLMHeadModel"),RTo=o(" (XLM model)"),BTo=l(),j_=a("li"),nle=a("strong"),PTo=o("xlm-prophetnet"),ITo=o(" \u2014 "),oN=a("a"),qTo=o("XLMProphetNetForCausalLM"),NTo=o(" (XLMProphetNet model)"),jTo=l(),D_=a("li"),sle=a("strong"),DTo=o("xlm-roberta"),GTo=o(" \u2014 "),rN=a("a"),OTo=o("XLMRobertaForCausalLM"),VTo=o(" (XLM-RoBERTa model)"),XTo=l(),G_=a("li"),lle=a("strong"),zTo=o("xlm-roberta-xl"),QTo=o(" \u2014 "),tN=a("a"),WTo=o("XLMRobertaXLForCausalLM"),HTo=o(" (XLM-RoBERTa-XL model)"),UTo=l(),O_=a("li"),ile=a("strong"),JTo=o("xlnet"),YTo=o(" \u2014 "),aN=a("a"),KTo=o("XLNetLMHeadModel"),ZTo=o(" (XLNet model)"),e8o=l(),V_=a("p"),o8o=o("The model is set in evaluation mode by default using "),dle=a("code"),r8o=o("model.eval()"),t8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cle=a("code"),a8o=o("model.train()"),n8o=l(),F(X_.$$.fragment),JRe=l(),wi=a("h2"),z_=a("a"),fle=a("span"),F(rw.$$.fragment),s8o=l(),mle=a("span"),l8o=o("AutoModelForMaskedLM"),YRe=l(),xo=a("div"),F(tw.$$.fragment),i8o=l(),Ai=a("p"),d8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nN=a("a"),c8o=o("from_pretrained()"),f8o=o(" class method or the "),sN=a("a"),m8o=o("from_config()"),g8o=o(` class
method.`),h8o=l(),aw=a("p"),p8o=o("This class cannot be instantiated directly using "),gle=a("code"),u8o=o("__init__()"),_8o=o(" (throws an error)."),b8o=l(),ot=a("div"),F(nw.$$.fragment),v8o=l(),hle=a("p"),F8o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),T8o=l(),yi=a("p"),M8o=o(`Note:
Loading a model from its configuration file does `),ple=a("strong"),E8o=o("not"),C8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=a("a"),w8o=o("from_pretrained()"),A8o=o(" to load the model weights."),y8o=l(),F(Q_.$$.fragment),L8o=l(),Ue=a("div"),F(sw.$$.fragment),x8o=l(),ule=a("p"),$8o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k8o=l(),wa=a("p"),S8o=o("The model class to instantiate is selected based on the "),_le=a("code"),R8o=o("model_type"),B8o=o(` property of the config object (either
passed as an argument or loaded from `),ble=a("code"),P8o=o("pretrained_model_name_or_path"),I8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vle=a("code"),q8o=o("pretrained_model_name_or_path"),N8o=o(":"),j8o=l(),Q=a("ul"),W_=a("li"),Fle=a("strong"),D8o=o("albert"),G8o=o(" \u2014 "),iN=a("a"),O8o=o("AlbertForMaskedLM"),V8o=o(" (ALBERT model)"),X8o=l(),H_=a("li"),Tle=a("strong"),z8o=o("bart"),Q8o=o(" \u2014 "),dN=a("a"),W8o=o("BartForConditionalGeneration"),H8o=o(" (BART model)"),U8o=l(),U_=a("li"),Mle=a("strong"),J8o=o("bert"),Y8o=o(" \u2014 "),cN=a("a"),K8o=o("BertForMaskedLM"),Z8o=o(" (BERT model)"),e9o=l(),J_=a("li"),Ele=a("strong"),o9o=o("big_bird"),r9o=o(" \u2014 "),fN=a("a"),t9o=o("BigBirdForMaskedLM"),a9o=o(" (BigBird model)"),n9o=l(),Y_=a("li"),Cle=a("strong"),s9o=o("camembert"),l9o=o(" \u2014 "),mN=a("a"),i9o=o("CamembertForMaskedLM"),d9o=o(" (CamemBERT model)"),c9o=l(),K_=a("li"),wle=a("strong"),f9o=o("convbert"),m9o=o(" \u2014 "),gN=a("a"),g9o=o("ConvBertForMaskedLM"),h9o=o(" (ConvBERT model)"),p9o=l(),Z_=a("li"),Ale=a("strong"),u9o=o("data2vec-text"),_9o=o(" \u2014 "),hN=a("a"),b9o=o("Data2VecTextForMaskedLM"),v9o=o(" (Data2VecText model)"),F9o=l(),e1=a("li"),yle=a("strong"),T9o=o("deberta"),M9o=o(" \u2014 "),pN=a("a"),E9o=o("DebertaForMaskedLM"),C9o=o(" (DeBERTa model)"),w9o=l(),o1=a("li"),Lle=a("strong"),A9o=o("deberta-v2"),y9o=o(" \u2014 "),uN=a("a"),L9o=o("DebertaV2ForMaskedLM"),x9o=o(" (DeBERTa-v2 model)"),$9o=l(),r1=a("li"),xle=a("strong"),k9o=o("distilbert"),S9o=o(" \u2014 "),_N=a("a"),R9o=o("DistilBertForMaskedLM"),B9o=o(" (DistilBERT model)"),P9o=l(),t1=a("li"),$le=a("strong"),I9o=o("electra"),q9o=o(" \u2014 "),bN=a("a"),N9o=o("ElectraForMaskedLM"),j9o=o(" (ELECTRA model)"),D9o=l(),a1=a("li"),kle=a("strong"),G9o=o("flaubert"),O9o=o(" \u2014 "),vN=a("a"),V9o=o("FlaubertWithLMHeadModel"),X9o=o(" (FlauBERT model)"),z9o=l(),n1=a("li"),Sle=a("strong"),Q9o=o("fnet"),W9o=o(" \u2014 "),FN=a("a"),H9o=o("FNetForMaskedLM"),U9o=o(" (FNet model)"),J9o=l(),s1=a("li"),Rle=a("strong"),Y9o=o("funnel"),K9o=o(" \u2014 "),TN=a("a"),Z9o=o("FunnelForMaskedLM"),eMo=o(" (Funnel Transformer model)"),oMo=l(),l1=a("li"),Ble=a("strong"),rMo=o("ibert"),tMo=o(" \u2014 "),MN=a("a"),aMo=o("IBertForMaskedLM"),nMo=o(" (I-BERT model)"),sMo=l(),i1=a("li"),Ple=a("strong"),lMo=o("layoutlm"),iMo=o(" \u2014 "),EN=a("a"),dMo=o("LayoutLMForMaskedLM"),cMo=o(" (LayoutLM model)"),fMo=l(),d1=a("li"),Ile=a("strong"),mMo=o("longformer"),gMo=o(" \u2014 "),CN=a("a"),hMo=o("LongformerForMaskedLM"),pMo=o(" (Longformer model)"),uMo=l(),c1=a("li"),qle=a("strong"),_Mo=o("mbart"),bMo=o(" \u2014 "),wN=a("a"),vMo=o("MBartForConditionalGeneration"),FMo=o(" (mBART model)"),TMo=l(),f1=a("li"),Nle=a("strong"),MMo=o("megatron-bert"),EMo=o(" \u2014 "),AN=a("a"),CMo=o("MegatronBertForMaskedLM"),wMo=o(" (MegatronBert model)"),AMo=l(),m1=a("li"),jle=a("strong"),yMo=o("mobilebert"),LMo=o(" \u2014 "),yN=a("a"),xMo=o("MobileBertForMaskedLM"),$Mo=o(" (MobileBERT model)"),kMo=l(),g1=a("li"),Dle=a("strong"),SMo=o("mpnet"),RMo=o(" \u2014 "),LN=a("a"),BMo=o("MPNetForMaskedLM"),PMo=o(" (MPNet model)"),IMo=l(),h1=a("li"),Gle=a("strong"),qMo=o("nystromformer"),NMo=o(" \u2014 "),xN=a("a"),jMo=o("NystromformerForMaskedLM"),DMo=o(" (Nystromformer model)"),GMo=l(),p1=a("li"),Ole=a("strong"),OMo=o("perceiver"),VMo=o(" \u2014 "),$N=a("a"),XMo=o("PerceiverForMaskedLM"),zMo=o(" (Perceiver model)"),QMo=l(),u1=a("li"),Vle=a("strong"),WMo=o("qdqbert"),HMo=o(" \u2014 "),kN=a("a"),UMo=o("QDQBertForMaskedLM"),JMo=o(" (QDQBert model)"),YMo=l(),_1=a("li"),Xle=a("strong"),KMo=o("reformer"),ZMo=o(" \u2014 "),SN=a("a"),e4o=o("ReformerForMaskedLM"),o4o=o(" (Reformer model)"),r4o=l(),b1=a("li"),zle=a("strong"),t4o=o("rembert"),a4o=o(" \u2014 "),RN=a("a"),n4o=o("RemBertForMaskedLM"),s4o=o(" (RemBERT model)"),l4o=l(),v1=a("li"),Qle=a("strong"),i4o=o("roberta"),d4o=o(" \u2014 "),BN=a("a"),c4o=o("RobertaForMaskedLM"),f4o=o(" (RoBERTa model)"),m4o=l(),F1=a("li"),Wle=a("strong"),g4o=o("roformer"),h4o=o(" \u2014 "),PN=a("a"),p4o=o("RoFormerForMaskedLM"),u4o=o(" (RoFormer model)"),_4o=l(),T1=a("li"),Hle=a("strong"),b4o=o("squeezebert"),v4o=o(" \u2014 "),IN=a("a"),F4o=o("SqueezeBertForMaskedLM"),T4o=o(" (SqueezeBERT model)"),M4o=l(),M1=a("li"),Ule=a("strong"),E4o=o("tapas"),C4o=o(" \u2014 "),qN=a("a"),w4o=o("TapasForMaskedLM"),A4o=o(" (TAPAS model)"),y4o=l(),E1=a("li"),Jle=a("strong"),L4o=o("wav2vec2"),x4o=o(" \u2014 "),Yle=a("code"),$4o=o("Wav2Vec2ForMaskedLM"),k4o=o(" (Wav2Vec2 model)"),S4o=l(),C1=a("li"),Kle=a("strong"),R4o=o("xlm"),B4o=o(" \u2014 "),NN=a("a"),P4o=o("XLMWithLMHeadModel"),I4o=o(" (XLM model)"),q4o=l(),w1=a("li"),Zle=a("strong"),N4o=o("xlm-roberta"),j4o=o(" \u2014 "),jN=a("a"),D4o=o("XLMRobertaForMaskedLM"),G4o=o(" (XLM-RoBERTa model)"),O4o=l(),A1=a("li"),eie=a("strong"),V4o=o("xlm-roberta-xl"),X4o=o(" \u2014 "),DN=a("a"),z4o=o("XLMRobertaXLForMaskedLM"),Q4o=o(" (XLM-RoBERTa-XL model)"),W4o=l(),y1=a("li"),oie=a("strong"),H4o=o("yoso"),U4o=o(" \u2014 "),GN=a("a"),J4o=o("YosoForMaskedLM"),Y4o=o(" (YOSO model)"),K4o=l(),L1=a("p"),Z4o=o("The model is set in evaluation mode by default using "),rie=a("code"),eEo=o("model.eval()"),oEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tie=a("code"),rEo=o("model.train()"),tEo=l(),F(x1.$$.fragment),KRe=l(),Li=a("h2"),$1=a("a"),aie=a("span"),F(lw.$$.fragment),aEo=l(),nie=a("span"),nEo=o("AutoModelForSeq2SeqLM"),ZRe=l(),$o=a("div"),F(iw.$$.fragment),sEo=l(),xi=a("p"),lEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ON=a("a"),iEo=o("from_pretrained()"),dEo=o(" class method or the "),VN=a("a"),cEo=o("from_config()"),fEo=o(` class
method.`),mEo=l(),dw=a("p"),gEo=o("This class cannot be instantiated directly using "),sie=a("code"),hEo=o("__init__()"),pEo=o(" (throws an error)."),uEo=l(),rt=a("div"),F(cw.$$.fragment),_Eo=l(),lie=a("p"),bEo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vEo=l(),$i=a("p"),FEo=o(`Note:
Loading a model from its configuration file does `),iie=a("strong"),TEo=o("not"),MEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=a("a"),EEo=o("from_pretrained()"),CEo=o(" to load the model weights."),wEo=l(),F(k1.$$.fragment),AEo=l(),Je=a("div"),F(fw.$$.fragment),yEo=l(),die=a("p"),LEo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xEo=l(),Aa=a("p"),$Eo=o("The model class to instantiate is selected based on the "),cie=a("code"),kEo=o("model_type"),SEo=o(` property of the config object (either
passed as an argument or loaded from `),fie=a("code"),REo=o("pretrained_model_name_or_path"),BEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mie=a("code"),PEo=o("pretrained_model_name_or_path"),IEo=o(":"),qEo=l(),he=a("ul"),S1=a("li"),gie=a("strong"),NEo=o("bart"),jEo=o(" \u2014 "),zN=a("a"),DEo=o("BartForConditionalGeneration"),GEo=o(" (BART model)"),OEo=l(),R1=a("li"),hie=a("strong"),VEo=o("bigbird_pegasus"),XEo=o(" \u2014 "),QN=a("a"),zEo=o("BigBirdPegasusForConditionalGeneration"),QEo=o(" (BigBirdPegasus model)"),WEo=l(),B1=a("li"),pie=a("strong"),HEo=o("blenderbot"),UEo=o(" \u2014 "),WN=a("a"),JEo=o("BlenderbotForConditionalGeneration"),YEo=o(" (Blenderbot model)"),KEo=l(),P1=a("li"),uie=a("strong"),ZEo=o("blenderbot-small"),e5o=o(" \u2014 "),HN=a("a"),o5o=o("BlenderbotSmallForConditionalGeneration"),r5o=o(" (BlenderbotSmall model)"),t5o=l(),I1=a("li"),_ie=a("strong"),a5o=o("encoder-decoder"),n5o=o(" \u2014 "),UN=a("a"),s5o=o("EncoderDecoderModel"),l5o=o(" (Encoder decoder model)"),i5o=l(),q1=a("li"),bie=a("strong"),d5o=o("fsmt"),c5o=o(" \u2014 "),JN=a("a"),f5o=o("FSMTForConditionalGeneration"),m5o=o(" (FairSeq Machine-Translation model)"),g5o=l(),N1=a("li"),vie=a("strong"),h5o=o("led"),p5o=o(" \u2014 "),YN=a("a"),u5o=o("LEDForConditionalGeneration"),_5o=o(" (LED model)"),b5o=l(),j1=a("li"),Fie=a("strong"),v5o=o("m2m_100"),F5o=o(" \u2014 "),KN=a("a"),T5o=o("M2M100ForConditionalGeneration"),M5o=o(" (M2M100 model)"),E5o=l(),D1=a("li"),Tie=a("strong"),C5o=o("marian"),w5o=o(" \u2014 "),ZN=a("a"),A5o=o("MarianMTModel"),y5o=o(" (Marian model)"),L5o=l(),G1=a("li"),Mie=a("strong"),x5o=o("mbart"),$5o=o(" \u2014 "),ej=a("a"),k5o=o("MBartForConditionalGeneration"),S5o=o(" (mBART model)"),R5o=l(),O1=a("li"),Eie=a("strong"),B5o=o("mt5"),P5o=o(" \u2014 "),oj=a("a"),I5o=o("MT5ForConditionalGeneration"),q5o=o(" (mT5 model)"),N5o=l(),V1=a("li"),Cie=a("strong"),j5o=o("pegasus"),D5o=o(" \u2014 "),rj=a("a"),G5o=o("PegasusForConditionalGeneration"),O5o=o(" (Pegasus model)"),V5o=l(),X1=a("li"),wie=a("strong"),X5o=o("plbart"),z5o=o(" \u2014 "),tj=a("a"),Q5o=o("PLBartForConditionalGeneration"),W5o=o(" (PLBart model)"),H5o=l(),z1=a("li"),Aie=a("strong"),U5o=o("prophetnet"),J5o=o(" \u2014 "),aj=a("a"),Y5o=o("ProphetNetForConditionalGeneration"),K5o=o(" (ProphetNet model)"),Z5o=l(),Q1=a("li"),yie=a("strong"),eCo=o("t5"),oCo=o(" \u2014 "),nj=a("a"),rCo=o("T5ForConditionalGeneration"),tCo=o(" (T5 model)"),aCo=l(),W1=a("li"),Lie=a("strong"),nCo=o("tapex"),sCo=o(" \u2014 "),sj=a("a"),lCo=o("BartForConditionalGeneration"),iCo=o(" (TAPEX model)"),dCo=l(),H1=a("li"),xie=a("strong"),cCo=o("xlm-prophetnet"),fCo=o(" \u2014 "),lj=a("a"),mCo=o("XLMProphetNetForConditionalGeneration"),gCo=o(" (XLMProphetNet model)"),hCo=l(),U1=a("p"),pCo=o("The model is set in evaluation mode by default using "),$ie=a("code"),uCo=o("model.eval()"),_Co=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=a("code"),bCo=o("model.train()"),vCo=l(),F(J1.$$.fragment),eBe=l(),ki=a("h2"),Y1=a("a"),Sie=a("span"),F(mw.$$.fragment),FCo=l(),Rie=a("span"),TCo=o("AutoModelForSequenceClassification"),oBe=l(),ko=a("div"),F(gw.$$.fragment),MCo=l(),Si=a("p"),ECo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ij=a("a"),CCo=o("from_pretrained()"),wCo=o(" class method or the "),dj=a("a"),ACo=o("from_config()"),yCo=o(` class
method.`),LCo=l(),hw=a("p"),xCo=o("This class cannot be instantiated directly using "),Bie=a("code"),$Co=o("__init__()"),kCo=o(" (throws an error)."),SCo=l(),tt=a("div"),F(pw.$$.fragment),RCo=l(),Pie=a("p"),BCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PCo=l(),Ri=a("p"),ICo=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),qCo=o("not"),NCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=a("a"),jCo=o("from_pretrained()"),DCo=o(" to load the model weights."),GCo=l(),F(K1.$$.fragment),OCo=l(),Ye=a("div"),F(uw.$$.fragment),VCo=l(),qie=a("p"),XCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zCo=l(),ya=a("p"),QCo=o("The model class to instantiate is selected based on the "),Nie=a("code"),WCo=o("model_type"),HCo=o(` property of the config object (either
passed as an argument or loaded from `),jie=a("code"),UCo=o("pretrained_model_name_or_path"),JCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),YCo=o("pretrained_model_name_or_path"),KCo=o(":"),ZCo=l(),q=a("ul"),Z1=a("li"),Gie=a("strong"),e3o=o("albert"),o3o=o(" \u2014 "),fj=a("a"),r3o=o("AlbertForSequenceClassification"),t3o=o(" (ALBERT model)"),a3o=l(),eb=a("li"),Oie=a("strong"),n3o=o("bart"),s3o=o(" \u2014 "),mj=a("a"),l3o=o("BartForSequenceClassification"),i3o=o(" (BART model)"),d3o=l(),ob=a("li"),Vie=a("strong"),c3o=o("bert"),f3o=o(" \u2014 "),gj=a("a"),m3o=o("BertForSequenceClassification"),g3o=o(" (BERT model)"),h3o=l(),rb=a("li"),Xie=a("strong"),p3o=o("big_bird"),u3o=o(" \u2014 "),hj=a("a"),_3o=o("BigBirdForSequenceClassification"),b3o=o(" (BigBird model)"),v3o=l(),tb=a("li"),zie=a("strong"),F3o=o("bigbird_pegasus"),T3o=o(" \u2014 "),pj=a("a"),M3o=o("BigBirdPegasusForSequenceClassification"),E3o=o(" (BigBirdPegasus model)"),C3o=l(),ab=a("li"),Qie=a("strong"),w3o=o("camembert"),A3o=o(" \u2014 "),uj=a("a"),y3o=o("CamembertForSequenceClassification"),L3o=o(" (CamemBERT model)"),x3o=l(),nb=a("li"),Wie=a("strong"),$3o=o("canine"),k3o=o(" \u2014 "),_j=a("a"),S3o=o("CanineForSequenceClassification"),R3o=o(" (Canine model)"),B3o=l(),sb=a("li"),Hie=a("strong"),P3o=o("convbert"),I3o=o(" \u2014 "),bj=a("a"),q3o=o("ConvBertForSequenceClassification"),N3o=o(" (ConvBERT model)"),j3o=l(),lb=a("li"),Uie=a("strong"),D3o=o("ctrl"),G3o=o(" \u2014 "),vj=a("a"),O3o=o("CTRLForSequenceClassification"),V3o=o(" (CTRL model)"),X3o=l(),ib=a("li"),Jie=a("strong"),z3o=o("data2vec-text"),Q3o=o(" \u2014 "),Fj=a("a"),W3o=o("Data2VecTextForSequenceClassification"),H3o=o(" (Data2VecText model)"),U3o=l(),db=a("li"),Yie=a("strong"),J3o=o("deberta"),Y3o=o(" \u2014 "),Tj=a("a"),K3o=o("DebertaForSequenceClassification"),Z3o=o(" (DeBERTa model)"),ewo=l(),cb=a("li"),Kie=a("strong"),owo=o("deberta-v2"),rwo=o(" \u2014 "),Mj=a("a"),two=o("DebertaV2ForSequenceClassification"),awo=o(" (DeBERTa-v2 model)"),nwo=l(),fb=a("li"),Zie=a("strong"),swo=o("distilbert"),lwo=o(" \u2014 "),Ej=a("a"),iwo=o("DistilBertForSequenceClassification"),dwo=o(" (DistilBERT model)"),cwo=l(),mb=a("li"),ede=a("strong"),fwo=o("electra"),mwo=o(" \u2014 "),Cj=a("a"),gwo=o("ElectraForSequenceClassification"),hwo=o(" (ELECTRA model)"),pwo=l(),gb=a("li"),ode=a("strong"),uwo=o("flaubert"),_wo=o(" \u2014 "),wj=a("a"),bwo=o("FlaubertForSequenceClassification"),vwo=o(" (FlauBERT model)"),Fwo=l(),hb=a("li"),rde=a("strong"),Two=o("fnet"),Mwo=o(" \u2014 "),Aj=a("a"),Ewo=o("FNetForSequenceClassification"),Cwo=o(" (FNet model)"),wwo=l(),pb=a("li"),tde=a("strong"),Awo=o("funnel"),ywo=o(" \u2014 "),yj=a("a"),Lwo=o("FunnelForSequenceClassification"),xwo=o(" (Funnel Transformer model)"),$wo=l(),ub=a("li"),ade=a("strong"),kwo=o("gpt2"),Swo=o(" \u2014 "),Lj=a("a"),Rwo=o("GPT2ForSequenceClassification"),Bwo=o(" (OpenAI GPT-2 model)"),Pwo=l(),_b=a("li"),nde=a("strong"),Iwo=o("gpt_neo"),qwo=o(" \u2014 "),xj=a("a"),Nwo=o("GPTNeoForSequenceClassification"),jwo=o(" (GPT Neo model)"),Dwo=l(),bb=a("li"),sde=a("strong"),Gwo=o("gptj"),Owo=o(" \u2014 "),$j=a("a"),Vwo=o("GPTJForSequenceClassification"),Xwo=o(" (GPT-J model)"),zwo=l(),vb=a("li"),lde=a("strong"),Qwo=o("ibert"),Wwo=o(" \u2014 "),kj=a("a"),Hwo=o("IBertForSequenceClassification"),Uwo=o(" (I-BERT model)"),Jwo=l(),Fb=a("li"),ide=a("strong"),Ywo=o("layoutlm"),Kwo=o(" \u2014 "),Sj=a("a"),Zwo=o("LayoutLMForSequenceClassification"),eAo=o(" (LayoutLM model)"),oAo=l(),Tb=a("li"),dde=a("strong"),rAo=o("layoutlmv2"),tAo=o(" \u2014 "),Rj=a("a"),aAo=o("LayoutLMv2ForSequenceClassification"),nAo=o(" (LayoutLMv2 model)"),sAo=l(),Mb=a("li"),cde=a("strong"),lAo=o("led"),iAo=o(" \u2014 "),Bj=a("a"),dAo=o("LEDForSequenceClassification"),cAo=o(" (LED model)"),fAo=l(),Eb=a("li"),fde=a("strong"),mAo=o("longformer"),gAo=o(" \u2014 "),Pj=a("a"),hAo=o("LongformerForSequenceClassification"),pAo=o(" (Longformer model)"),uAo=l(),Cb=a("li"),mde=a("strong"),_Ao=o("mbart"),bAo=o(" \u2014 "),Ij=a("a"),vAo=o("MBartForSequenceClassification"),FAo=o(" (mBART model)"),TAo=l(),wb=a("li"),gde=a("strong"),MAo=o("megatron-bert"),EAo=o(" \u2014 "),qj=a("a"),CAo=o("MegatronBertForSequenceClassification"),wAo=o(" (MegatronBert model)"),AAo=l(),Ab=a("li"),hde=a("strong"),yAo=o("mobilebert"),LAo=o(" \u2014 "),Nj=a("a"),xAo=o("MobileBertForSequenceClassification"),$Ao=o(" (MobileBERT model)"),kAo=l(),yb=a("li"),pde=a("strong"),SAo=o("mpnet"),RAo=o(" \u2014 "),jj=a("a"),BAo=o("MPNetForSequenceClassification"),PAo=o(" (MPNet model)"),IAo=l(),Lb=a("li"),ude=a("strong"),qAo=o("nystromformer"),NAo=o(" \u2014 "),Dj=a("a"),jAo=o("NystromformerForSequenceClassification"),DAo=o(" (Nystromformer model)"),GAo=l(),xb=a("li"),_de=a("strong"),OAo=o("openai-gpt"),VAo=o(" \u2014 "),Gj=a("a"),XAo=o("OpenAIGPTForSequenceClassification"),zAo=o(" (OpenAI GPT model)"),QAo=l(),$b=a("li"),bde=a("strong"),WAo=o("perceiver"),HAo=o(" \u2014 "),Oj=a("a"),UAo=o("PerceiverForSequenceClassification"),JAo=o(" (Perceiver model)"),YAo=l(),kb=a("li"),vde=a("strong"),KAo=o("plbart"),ZAo=o(" \u2014 "),Vj=a("a"),eyo=o("PLBartForSequenceClassification"),oyo=o(" (PLBart model)"),ryo=l(),Sb=a("li"),Fde=a("strong"),tyo=o("qdqbert"),ayo=o(" \u2014 "),Xj=a("a"),nyo=o("QDQBertForSequenceClassification"),syo=o(" (QDQBert model)"),lyo=l(),Rb=a("li"),Tde=a("strong"),iyo=o("reformer"),dyo=o(" \u2014 "),zj=a("a"),cyo=o("ReformerForSequenceClassification"),fyo=o(" (Reformer model)"),myo=l(),Bb=a("li"),Mde=a("strong"),gyo=o("rembert"),hyo=o(" \u2014 "),Qj=a("a"),pyo=o("RemBertForSequenceClassification"),uyo=o(" (RemBERT model)"),_yo=l(),Pb=a("li"),Ede=a("strong"),byo=o("roberta"),vyo=o(" \u2014 "),Wj=a("a"),Fyo=o("RobertaForSequenceClassification"),Tyo=o(" (RoBERTa model)"),Myo=l(),Ib=a("li"),Cde=a("strong"),Eyo=o("roformer"),Cyo=o(" \u2014 "),Hj=a("a"),wyo=o("RoFormerForSequenceClassification"),Ayo=o(" (RoFormer model)"),yyo=l(),qb=a("li"),wde=a("strong"),Lyo=o("squeezebert"),xyo=o(" \u2014 "),Uj=a("a"),$yo=o("SqueezeBertForSequenceClassification"),kyo=o(" (SqueezeBERT model)"),Syo=l(),Nb=a("li"),Ade=a("strong"),Ryo=o("tapas"),Byo=o(" \u2014 "),Jj=a("a"),Pyo=o("TapasForSequenceClassification"),Iyo=o(" (TAPAS model)"),qyo=l(),jb=a("li"),yde=a("strong"),Nyo=o("tapex"),jyo=o(" \u2014 "),Yj=a("a"),Dyo=o("BartForSequenceClassification"),Gyo=o(" (TAPEX model)"),Oyo=l(),Db=a("li"),Lde=a("strong"),Vyo=o("transfo-xl"),Xyo=o(" \u2014 "),Kj=a("a"),zyo=o("TransfoXLForSequenceClassification"),Qyo=o(" (Transformer-XL model)"),Wyo=l(),Gb=a("li"),xde=a("strong"),Hyo=o("xlm"),Uyo=o(" \u2014 "),Zj=a("a"),Jyo=o("XLMForSequenceClassification"),Yyo=o(" (XLM model)"),Kyo=l(),Ob=a("li"),$de=a("strong"),Zyo=o("xlm-roberta"),eLo=o(" \u2014 "),eD=a("a"),oLo=o("XLMRobertaForSequenceClassification"),rLo=o(" (XLM-RoBERTa model)"),tLo=l(),Vb=a("li"),kde=a("strong"),aLo=o("xlm-roberta-xl"),nLo=o(" \u2014 "),oD=a("a"),sLo=o("XLMRobertaXLForSequenceClassification"),lLo=o(" (XLM-RoBERTa-XL model)"),iLo=l(),Xb=a("li"),Sde=a("strong"),dLo=o("xlnet"),cLo=o(" \u2014 "),rD=a("a"),fLo=o("XLNetForSequenceClassification"),mLo=o(" (XLNet model)"),gLo=l(),zb=a("li"),Rde=a("strong"),hLo=o("yoso"),pLo=o(" \u2014 "),tD=a("a"),uLo=o("YosoForSequenceClassification"),_Lo=o(" (YOSO model)"),bLo=l(),Qb=a("p"),vLo=o("The model is set in evaluation mode by default using "),Bde=a("code"),FLo=o("model.eval()"),TLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),MLo=o("model.train()"),ELo=l(),F(Wb.$$.fragment),rBe=l(),Bi=a("h2"),Hb=a("a"),Ide=a("span"),F(_w.$$.fragment),CLo=l(),qde=a("span"),wLo=o("AutoModelForMultipleChoice"),tBe=l(),So=a("div"),F(bw.$$.fragment),ALo=l(),Pi=a("p"),yLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aD=a("a"),LLo=o("from_pretrained()"),xLo=o(" class method or the "),nD=a("a"),$Lo=o("from_config()"),kLo=o(` class
method.`),SLo=l(),vw=a("p"),RLo=o("This class cannot be instantiated directly using "),Nde=a("code"),BLo=o("__init__()"),PLo=o(" (throws an error)."),ILo=l(),at=a("div"),F(Fw.$$.fragment),qLo=l(),jde=a("p"),NLo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jLo=l(),Ii=a("p"),DLo=o(`Note:
Loading a model from its configuration file does `),Dde=a("strong"),GLo=o("not"),OLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=a("a"),VLo=o("from_pretrained()"),XLo=o(" to load the model weights."),zLo=l(),F(Ub.$$.fragment),QLo=l(),Ke=a("div"),F(Tw.$$.fragment),WLo=l(),Gde=a("p"),HLo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ULo=l(),La=a("p"),JLo=o("The model class to instantiate is selected based on the "),Ode=a("code"),YLo=o("model_type"),KLo=o(` property of the config object (either
passed as an argument or loaded from `),Vde=a("code"),ZLo=o("pretrained_model_name_or_path"),e7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=a("code"),o7o=o("pretrained_model_name_or_path"),r7o=o(":"),t7o=l(),Y=a("ul"),Jb=a("li"),zde=a("strong"),a7o=o("albert"),n7o=o(" \u2014 "),lD=a("a"),s7o=o("AlbertForMultipleChoice"),l7o=o(" (ALBERT model)"),i7o=l(),Yb=a("li"),Qde=a("strong"),d7o=o("bert"),c7o=o(" \u2014 "),iD=a("a"),f7o=o("BertForMultipleChoice"),m7o=o(" (BERT model)"),g7o=l(),Kb=a("li"),Wde=a("strong"),h7o=o("big_bird"),p7o=o(" \u2014 "),dD=a("a"),u7o=o("BigBirdForMultipleChoice"),_7o=o(" (BigBird model)"),b7o=l(),Zb=a("li"),Hde=a("strong"),v7o=o("camembert"),F7o=o(" \u2014 "),cD=a("a"),T7o=o("CamembertForMultipleChoice"),M7o=o(" (CamemBERT model)"),E7o=l(),e2=a("li"),Ude=a("strong"),C7o=o("canine"),w7o=o(" \u2014 "),fD=a("a"),A7o=o("CanineForMultipleChoice"),y7o=o(" (Canine model)"),L7o=l(),o2=a("li"),Jde=a("strong"),x7o=o("convbert"),$7o=o(" \u2014 "),mD=a("a"),k7o=o("ConvBertForMultipleChoice"),S7o=o(" (ConvBERT model)"),R7o=l(),r2=a("li"),Yde=a("strong"),B7o=o("data2vec-text"),P7o=o(" \u2014 "),gD=a("a"),I7o=o("Data2VecTextForMultipleChoice"),q7o=o(" (Data2VecText model)"),N7o=l(),t2=a("li"),Kde=a("strong"),j7o=o("distilbert"),D7o=o(" \u2014 "),hD=a("a"),G7o=o("DistilBertForMultipleChoice"),O7o=o(" (DistilBERT model)"),V7o=l(),a2=a("li"),Zde=a("strong"),X7o=o("electra"),z7o=o(" \u2014 "),pD=a("a"),Q7o=o("ElectraForMultipleChoice"),W7o=o(" (ELECTRA model)"),H7o=l(),n2=a("li"),ece=a("strong"),U7o=o("flaubert"),J7o=o(" \u2014 "),uD=a("a"),Y7o=o("FlaubertForMultipleChoice"),K7o=o(" (FlauBERT model)"),Z7o=l(),s2=a("li"),oce=a("strong"),exo=o("fnet"),oxo=o(" \u2014 "),_D=a("a"),rxo=o("FNetForMultipleChoice"),txo=o(" (FNet model)"),axo=l(),l2=a("li"),rce=a("strong"),nxo=o("funnel"),sxo=o(" \u2014 "),bD=a("a"),lxo=o("FunnelForMultipleChoice"),ixo=o(" (Funnel Transformer model)"),dxo=l(),i2=a("li"),tce=a("strong"),cxo=o("ibert"),fxo=o(" \u2014 "),vD=a("a"),mxo=o("IBertForMultipleChoice"),gxo=o(" (I-BERT model)"),hxo=l(),d2=a("li"),ace=a("strong"),pxo=o("longformer"),uxo=o(" \u2014 "),FD=a("a"),_xo=o("LongformerForMultipleChoice"),bxo=o(" (Longformer model)"),vxo=l(),c2=a("li"),nce=a("strong"),Fxo=o("megatron-bert"),Txo=o(" \u2014 "),TD=a("a"),Mxo=o("MegatronBertForMultipleChoice"),Exo=o(" (MegatronBert model)"),Cxo=l(),f2=a("li"),sce=a("strong"),wxo=o("mobilebert"),Axo=o(" \u2014 "),MD=a("a"),yxo=o("MobileBertForMultipleChoice"),Lxo=o(" (MobileBERT model)"),xxo=l(),m2=a("li"),lce=a("strong"),$xo=o("mpnet"),kxo=o(" \u2014 "),ED=a("a"),Sxo=o("MPNetForMultipleChoice"),Rxo=o(" (MPNet model)"),Bxo=l(),g2=a("li"),ice=a("strong"),Pxo=o("nystromformer"),Ixo=o(" \u2014 "),CD=a("a"),qxo=o("NystromformerForMultipleChoice"),Nxo=o(" (Nystromformer model)"),jxo=l(),h2=a("li"),dce=a("strong"),Dxo=o("qdqbert"),Gxo=o(" \u2014 "),wD=a("a"),Oxo=o("QDQBertForMultipleChoice"),Vxo=o(" (QDQBert model)"),Xxo=l(),p2=a("li"),cce=a("strong"),zxo=o("rembert"),Qxo=o(" \u2014 "),AD=a("a"),Wxo=o("RemBertForMultipleChoice"),Hxo=o(" (RemBERT model)"),Uxo=l(),u2=a("li"),fce=a("strong"),Jxo=o("roberta"),Yxo=o(" \u2014 "),yD=a("a"),Kxo=o("RobertaForMultipleChoice"),Zxo=o(" (RoBERTa model)"),e$o=l(),_2=a("li"),mce=a("strong"),o$o=o("roformer"),r$o=o(" \u2014 "),LD=a("a"),t$o=o("RoFormerForMultipleChoice"),a$o=o(" (RoFormer model)"),n$o=l(),b2=a("li"),gce=a("strong"),s$o=o("squeezebert"),l$o=o(" \u2014 "),xD=a("a"),i$o=o("SqueezeBertForMultipleChoice"),d$o=o(" (SqueezeBERT model)"),c$o=l(),v2=a("li"),hce=a("strong"),f$o=o("xlm"),m$o=o(" \u2014 "),$D=a("a"),g$o=o("XLMForMultipleChoice"),h$o=o(" (XLM model)"),p$o=l(),F2=a("li"),pce=a("strong"),u$o=o("xlm-roberta"),_$o=o(" \u2014 "),kD=a("a"),b$o=o("XLMRobertaForMultipleChoice"),v$o=o(" (XLM-RoBERTa model)"),F$o=l(),T2=a("li"),uce=a("strong"),T$o=o("xlm-roberta-xl"),M$o=o(" \u2014 "),SD=a("a"),E$o=o("XLMRobertaXLForMultipleChoice"),C$o=o(" (XLM-RoBERTa-XL model)"),w$o=l(),M2=a("li"),_ce=a("strong"),A$o=o("xlnet"),y$o=o(" \u2014 "),RD=a("a"),L$o=o("XLNetForMultipleChoice"),x$o=o(" (XLNet model)"),$$o=l(),E2=a("li"),bce=a("strong"),k$o=o("yoso"),S$o=o(" \u2014 "),BD=a("a"),R$o=o("YosoForMultipleChoice"),B$o=o(" (YOSO model)"),P$o=l(),C2=a("p"),I$o=o("The model is set in evaluation mode by default using "),vce=a("code"),q$o=o("model.eval()"),N$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=a("code"),j$o=o("model.train()"),D$o=l(),F(w2.$$.fragment),aBe=l(),qi=a("h2"),A2=a("a"),Tce=a("span"),F(Mw.$$.fragment),G$o=l(),Mce=a("span"),O$o=o("AutoModelForNextSentencePrediction"),nBe=l(),Ro=a("div"),F(Ew.$$.fragment),V$o=l(),Ni=a("p"),X$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PD=a("a"),z$o=o("from_pretrained()"),Q$o=o(" class method or the "),ID=a("a"),W$o=o("from_config()"),H$o=o(` class
method.`),U$o=l(),Cw=a("p"),J$o=o("This class cannot be instantiated directly using "),Ece=a("code"),Y$o=o("__init__()"),K$o=o(" (throws an error)."),Z$o=l(),nt=a("div"),F(ww.$$.fragment),eko=l(),Cce=a("p"),oko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rko=l(),ji=a("p"),tko=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),ako=o("not"),nko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),sko=o("from_pretrained()"),lko=o(" to load the model weights."),iko=l(),F(y2.$$.fragment),dko=l(),Ze=a("div"),F(Aw.$$.fragment),cko=l(),Ace=a("p"),fko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mko=l(),xa=a("p"),gko=o("The model class to instantiate is selected based on the "),yce=a("code"),hko=o("model_type"),pko=o(` property of the config object (either
passed as an argument or loaded from `),Lce=a("code"),uko=o("pretrained_model_name_or_path"),_ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),bko=o("pretrained_model_name_or_path"),vko=o(":"),Fko=l(),Wr=a("ul"),L2=a("li"),$ce=a("strong"),Tko=o("bert"),Mko=o(" \u2014 "),ND=a("a"),Eko=o("BertForNextSentencePrediction"),Cko=o(" (BERT model)"),wko=l(),x2=a("li"),kce=a("strong"),Ako=o("fnet"),yko=o(" \u2014 "),jD=a("a"),Lko=o("FNetForNextSentencePrediction"),xko=o(" (FNet model)"),$ko=l(),$2=a("li"),Sce=a("strong"),kko=o("megatron-bert"),Sko=o(" \u2014 "),DD=a("a"),Rko=o("MegatronBertForNextSentencePrediction"),Bko=o(" (MegatronBert model)"),Pko=l(),k2=a("li"),Rce=a("strong"),Iko=o("mobilebert"),qko=o(" \u2014 "),GD=a("a"),Nko=o("MobileBertForNextSentencePrediction"),jko=o(" (MobileBERT model)"),Dko=l(),S2=a("li"),Bce=a("strong"),Gko=o("qdqbert"),Oko=o(" \u2014 "),OD=a("a"),Vko=o("QDQBertForNextSentencePrediction"),Xko=o(" (QDQBert model)"),zko=l(),R2=a("p"),Qko=o("The model is set in evaluation mode by default using "),Pce=a("code"),Wko=o("model.eval()"),Hko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=a("code"),Uko=o("model.train()"),Jko=l(),F(B2.$$.fragment),sBe=l(),Di=a("h2"),P2=a("a"),qce=a("span"),F(yw.$$.fragment),Yko=l(),Nce=a("span"),Kko=o("AutoModelForTokenClassification"),lBe=l(),Bo=a("div"),F(Lw.$$.fragment),Zko=l(),Gi=a("p"),eSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VD=a("a"),oSo=o("from_pretrained()"),rSo=o(" class method or the "),XD=a("a"),tSo=o("from_config()"),aSo=o(` class
method.`),nSo=l(),xw=a("p"),sSo=o("This class cannot be instantiated directly using "),jce=a("code"),lSo=o("__init__()"),iSo=o(" (throws an error)."),dSo=l(),st=a("div"),F($w.$$.fragment),cSo=l(),Dce=a("p"),fSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mSo=l(),Oi=a("p"),gSo=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),hSo=o("not"),pSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),uSo=o("from_pretrained()"),_So=o(" to load the model weights."),bSo=l(),F(I2.$$.fragment),vSo=l(),eo=a("div"),F(kw.$$.fragment),FSo=l(),Oce=a("p"),TSo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MSo=l(),$a=a("p"),ESo=o("The model class to instantiate is selected based on the "),Vce=a("code"),CSo=o("model_type"),wSo=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),ASo=o("pretrained_model_name_or_path"),ySo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),LSo=o("pretrained_model_name_or_path"),xSo=o(":"),$So=l(),U=a("ul"),q2=a("li"),Qce=a("strong"),kSo=o("albert"),SSo=o(" \u2014 "),QD=a("a"),RSo=o("AlbertForTokenClassification"),BSo=o(" (ALBERT model)"),PSo=l(),N2=a("li"),Wce=a("strong"),ISo=o("bert"),qSo=o(" \u2014 "),WD=a("a"),NSo=o("BertForTokenClassification"),jSo=o(" (BERT model)"),DSo=l(),j2=a("li"),Hce=a("strong"),GSo=o("big_bird"),OSo=o(" \u2014 "),HD=a("a"),VSo=o("BigBirdForTokenClassification"),XSo=o(" (BigBird model)"),zSo=l(),D2=a("li"),Uce=a("strong"),QSo=o("camembert"),WSo=o(" \u2014 "),UD=a("a"),HSo=o("CamembertForTokenClassification"),USo=o(" (CamemBERT model)"),JSo=l(),G2=a("li"),Jce=a("strong"),YSo=o("canine"),KSo=o(" \u2014 "),JD=a("a"),ZSo=o("CanineForTokenClassification"),eRo=o(" (Canine model)"),oRo=l(),O2=a("li"),Yce=a("strong"),rRo=o("convbert"),tRo=o(" \u2014 "),YD=a("a"),aRo=o("ConvBertForTokenClassification"),nRo=o(" (ConvBERT model)"),sRo=l(),V2=a("li"),Kce=a("strong"),lRo=o("data2vec-text"),iRo=o(" \u2014 "),KD=a("a"),dRo=o("Data2VecTextForTokenClassification"),cRo=o(" (Data2VecText model)"),fRo=l(),X2=a("li"),Zce=a("strong"),mRo=o("deberta"),gRo=o(" \u2014 "),ZD=a("a"),hRo=o("DebertaForTokenClassification"),pRo=o(" (DeBERTa model)"),uRo=l(),z2=a("li"),efe=a("strong"),_Ro=o("deberta-v2"),bRo=o(" \u2014 "),eG=a("a"),vRo=o("DebertaV2ForTokenClassification"),FRo=o(" (DeBERTa-v2 model)"),TRo=l(),Q2=a("li"),ofe=a("strong"),MRo=o("distilbert"),ERo=o(" \u2014 "),oG=a("a"),CRo=o("DistilBertForTokenClassification"),wRo=o(" (DistilBERT model)"),ARo=l(),W2=a("li"),rfe=a("strong"),yRo=o("electra"),LRo=o(" \u2014 "),rG=a("a"),xRo=o("ElectraForTokenClassification"),$Ro=o(" (ELECTRA model)"),kRo=l(),H2=a("li"),tfe=a("strong"),SRo=o("flaubert"),RRo=o(" \u2014 "),tG=a("a"),BRo=o("FlaubertForTokenClassification"),PRo=o(" (FlauBERT model)"),IRo=l(),U2=a("li"),afe=a("strong"),qRo=o("fnet"),NRo=o(" \u2014 "),aG=a("a"),jRo=o("FNetForTokenClassification"),DRo=o(" (FNet model)"),GRo=l(),J2=a("li"),nfe=a("strong"),ORo=o("funnel"),VRo=o(" \u2014 "),nG=a("a"),XRo=o("FunnelForTokenClassification"),zRo=o(" (Funnel Transformer model)"),QRo=l(),Y2=a("li"),sfe=a("strong"),WRo=o("gpt2"),HRo=o(" \u2014 "),sG=a("a"),URo=o("GPT2ForTokenClassification"),JRo=o(" (OpenAI GPT-2 model)"),YRo=l(),K2=a("li"),lfe=a("strong"),KRo=o("ibert"),ZRo=o(" \u2014 "),lG=a("a"),eBo=o("IBertForTokenClassification"),oBo=o(" (I-BERT model)"),rBo=l(),Z2=a("li"),ife=a("strong"),tBo=o("layoutlm"),aBo=o(" \u2014 "),iG=a("a"),nBo=o("LayoutLMForTokenClassification"),sBo=o(" (LayoutLM model)"),lBo=l(),ev=a("li"),dfe=a("strong"),iBo=o("layoutlmv2"),dBo=o(" \u2014 "),dG=a("a"),cBo=o("LayoutLMv2ForTokenClassification"),fBo=o(" (LayoutLMv2 model)"),mBo=l(),ov=a("li"),cfe=a("strong"),gBo=o("longformer"),hBo=o(" \u2014 "),cG=a("a"),pBo=o("LongformerForTokenClassification"),uBo=o(" (Longformer model)"),_Bo=l(),rv=a("li"),ffe=a("strong"),bBo=o("megatron-bert"),vBo=o(" \u2014 "),fG=a("a"),FBo=o("MegatronBertForTokenClassification"),TBo=o(" (MegatronBert model)"),MBo=l(),tv=a("li"),mfe=a("strong"),EBo=o("mobilebert"),CBo=o(" \u2014 "),mG=a("a"),wBo=o("MobileBertForTokenClassification"),ABo=o(" (MobileBERT model)"),yBo=l(),av=a("li"),gfe=a("strong"),LBo=o("mpnet"),xBo=o(" \u2014 "),gG=a("a"),$Bo=o("MPNetForTokenClassification"),kBo=o(" (MPNet model)"),SBo=l(),nv=a("li"),hfe=a("strong"),RBo=o("nystromformer"),BBo=o(" \u2014 "),hG=a("a"),PBo=o("NystromformerForTokenClassification"),IBo=o(" (Nystromformer model)"),qBo=l(),sv=a("li"),pfe=a("strong"),NBo=o("qdqbert"),jBo=o(" \u2014 "),pG=a("a"),DBo=o("QDQBertForTokenClassification"),GBo=o(" (QDQBert model)"),OBo=l(),lv=a("li"),ufe=a("strong"),VBo=o("rembert"),XBo=o(" \u2014 "),uG=a("a"),zBo=o("RemBertForTokenClassification"),QBo=o(" (RemBERT model)"),WBo=l(),iv=a("li"),_fe=a("strong"),HBo=o("roberta"),UBo=o(" \u2014 "),_G=a("a"),JBo=o("RobertaForTokenClassification"),YBo=o(" (RoBERTa model)"),KBo=l(),dv=a("li"),bfe=a("strong"),ZBo=o("roformer"),ePo=o(" \u2014 "),bG=a("a"),oPo=o("RoFormerForTokenClassification"),rPo=o(" (RoFormer model)"),tPo=l(),cv=a("li"),vfe=a("strong"),aPo=o("squeezebert"),nPo=o(" \u2014 "),vG=a("a"),sPo=o("SqueezeBertForTokenClassification"),lPo=o(" (SqueezeBERT model)"),iPo=l(),fv=a("li"),Ffe=a("strong"),dPo=o("xlm"),cPo=o(" \u2014 "),FG=a("a"),fPo=o("XLMForTokenClassification"),mPo=o(" (XLM model)"),gPo=l(),mv=a("li"),Tfe=a("strong"),hPo=o("xlm-roberta"),pPo=o(" \u2014 "),TG=a("a"),uPo=o("XLMRobertaForTokenClassification"),_Po=o(" (XLM-RoBERTa model)"),bPo=l(),gv=a("li"),Mfe=a("strong"),vPo=o("xlm-roberta-xl"),FPo=o(" \u2014 "),MG=a("a"),TPo=o("XLMRobertaXLForTokenClassification"),MPo=o(" (XLM-RoBERTa-XL model)"),EPo=l(),hv=a("li"),Efe=a("strong"),CPo=o("xlnet"),wPo=o(" \u2014 "),EG=a("a"),APo=o("XLNetForTokenClassification"),yPo=o(" (XLNet model)"),LPo=l(),pv=a("li"),Cfe=a("strong"),xPo=o("yoso"),$Po=o(" \u2014 "),CG=a("a"),kPo=o("YosoForTokenClassification"),SPo=o(" (YOSO model)"),RPo=l(),uv=a("p"),BPo=o("The model is set in evaluation mode by default using "),wfe=a("code"),PPo=o("model.eval()"),IPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=a("code"),qPo=o("model.train()"),NPo=l(),F(_v.$$.fragment),iBe=l(),Vi=a("h2"),bv=a("a"),yfe=a("span"),F(Sw.$$.fragment),jPo=l(),Lfe=a("span"),DPo=o("AutoModelForQuestionAnswering"),dBe=l(),Po=a("div"),F(Rw.$$.fragment),GPo=l(),Xi=a("p"),OPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wG=a("a"),VPo=o("from_pretrained()"),XPo=o(" class method or the "),AG=a("a"),zPo=o("from_config()"),QPo=o(` class
method.`),WPo=l(),Bw=a("p"),HPo=o("This class cannot be instantiated directly using "),xfe=a("code"),UPo=o("__init__()"),JPo=o(" (throws an error)."),YPo=l(),lt=a("div"),F(Pw.$$.fragment),KPo=l(),$fe=a("p"),ZPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eIo=l(),zi=a("p"),oIo=o(`Note:
Loading a model from its configuration file does `),kfe=a("strong"),rIo=o("not"),tIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=a("a"),aIo=o("from_pretrained()"),nIo=o(" to load the model weights."),sIo=l(),F(vv.$$.fragment),lIo=l(),oo=a("div"),F(Iw.$$.fragment),iIo=l(),Sfe=a("p"),dIo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cIo=l(),ka=a("p"),fIo=o("The model class to instantiate is selected based on the "),Rfe=a("code"),mIo=o("model_type"),gIo=o(` property of the config object (either
passed as an argument or loaded from `),Bfe=a("code"),hIo=o("pretrained_model_name_or_path"),pIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=a("code"),uIo=o("pretrained_model_name_or_path"),_Io=o(":"),bIo=l(),O=a("ul"),Fv=a("li"),Ife=a("strong"),vIo=o("albert"),FIo=o(" \u2014 "),LG=a("a"),TIo=o("AlbertForQuestionAnswering"),MIo=o(" (ALBERT model)"),EIo=l(),Tv=a("li"),qfe=a("strong"),CIo=o("bart"),wIo=o(" \u2014 "),xG=a("a"),AIo=o("BartForQuestionAnswering"),yIo=o(" (BART model)"),LIo=l(),Mv=a("li"),Nfe=a("strong"),xIo=o("bert"),$Io=o(" \u2014 "),$G=a("a"),kIo=o("BertForQuestionAnswering"),SIo=o(" (BERT model)"),RIo=l(),Ev=a("li"),jfe=a("strong"),BIo=o("big_bird"),PIo=o(" \u2014 "),kG=a("a"),IIo=o("BigBirdForQuestionAnswering"),qIo=o(" (BigBird model)"),NIo=l(),Cv=a("li"),Dfe=a("strong"),jIo=o("bigbird_pegasus"),DIo=o(" \u2014 "),SG=a("a"),GIo=o("BigBirdPegasusForQuestionAnswering"),OIo=o(" (BigBirdPegasus model)"),VIo=l(),wv=a("li"),Gfe=a("strong"),XIo=o("camembert"),zIo=o(" \u2014 "),RG=a("a"),QIo=o("CamembertForQuestionAnswering"),WIo=o(" (CamemBERT model)"),HIo=l(),Av=a("li"),Ofe=a("strong"),UIo=o("canine"),JIo=o(" \u2014 "),BG=a("a"),YIo=o("CanineForQuestionAnswering"),KIo=o(" (Canine model)"),ZIo=l(),yv=a("li"),Vfe=a("strong"),eqo=o("convbert"),oqo=o(" \u2014 "),PG=a("a"),rqo=o("ConvBertForQuestionAnswering"),tqo=o(" (ConvBERT model)"),aqo=l(),Lv=a("li"),Xfe=a("strong"),nqo=o("data2vec-text"),sqo=o(" \u2014 "),IG=a("a"),lqo=o("Data2VecTextForQuestionAnswering"),iqo=o(" (Data2VecText model)"),dqo=l(),xv=a("li"),zfe=a("strong"),cqo=o("deberta"),fqo=o(" \u2014 "),qG=a("a"),mqo=o("DebertaForQuestionAnswering"),gqo=o(" (DeBERTa model)"),hqo=l(),$v=a("li"),Qfe=a("strong"),pqo=o("deberta-v2"),uqo=o(" \u2014 "),NG=a("a"),_qo=o("DebertaV2ForQuestionAnswering"),bqo=o(" (DeBERTa-v2 model)"),vqo=l(),kv=a("li"),Wfe=a("strong"),Fqo=o("distilbert"),Tqo=o(" \u2014 "),jG=a("a"),Mqo=o("DistilBertForQuestionAnswering"),Eqo=o(" (DistilBERT model)"),Cqo=l(),Sv=a("li"),Hfe=a("strong"),wqo=o("electra"),Aqo=o(" \u2014 "),DG=a("a"),yqo=o("ElectraForQuestionAnswering"),Lqo=o(" (ELECTRA model)"),xqo=l(),Rv=a("li"),Ufe=a("strong"),$qo=o("flaubert"),kqo=o(" \u2014 "),GG=a("a"),Sqo=o("FlaubertForQuestionAnsweringSimple"),Rqo=o(" (FlauBERT model)"),Bqo=l(),Bv=a("li"),Jfe=a("strong"),Pqo=o("fnet"),Iqo=o(" \u2014 "),OG=a("a"),qqo=o("FNetForQuestionAnswering"),Nqo=o(" (FNet model)"),jqo=l(),Pv=a("li"),Yfe=a("strong"),Dqo=o("funnel"),Gqo=o(" \u2014 "),VG=a("a"),Oqo=o("FunnelForQuestionAnswering"),Vqo=o(" (Funnel Transformer model)"),Xqo=l(),Iv=a("li"),Kfe=a("strong"),zqo=o("gptj"),Qqo=o(" \u2014 "),XG=a("a"),Wqo=o("GPTJForQuestionAnswering"),Hqo=o(" (GPT-J model)"),Uqo=l(),qv=a("li"),Zfe=a("strong"),Jqo=o("ibert"),Yqo=o(" \u2014 "),zG=a("a"),Kqo=o("IBertForQuestionAnswering"),Zqo=o(" (I-BERT model)"),eNo=l(),Nv=a("li"),eme=a("strong"),oNo=o("layoutlmv2"),rNo=o(" \u2014 "),QG=a("a"),tNo=o("LayoutLMv2ForQuestionAnswering"),aNo=o(" (LayoutLMv2 model)"),nNo=l(),jv=a("li"),ome=a("strong"),sNo=o("led"),lNo=o(" \u2014 "),WG=a("a"),iNo=o("LEDForQuestionAnswering"),dNo=o(" (LED model)"),cNo=l(),Dv=a("li"),rme=a("strong"),fNo=o("longformer"),mNo=o(" \u2014 "),HG=a("a"),gNo=o("LongformerForQuestionAnswering"),hNo=o(" (Longformer model)"),pNo=l(),Gv=a("li"),tme=a("strong"),uNo=o("lxmert"),_No=o(" \u2014 "),UG=a("a"),bNo=o("LxmertForQuestionAnswering"),vNo=o(" (LXMERT model)"),FNo=l(),Ov=a("li"),ame=a("strong"),TNo=o("mbart"),MNo=o(" \u2014 "),JG=a("a"),ENo=o("MBartForQuestionAnswering"),CNo=o(" (mBART model)"),wNo=l(),Vv=a("li"),nme=a("strong"),ANo=o("megatron-bert"),yNo=o(" \u2014 "),YG=a("a"),LNo=o("MegatronBertForQuestionAnswering"),xNo=o(" (MegatronBert model)"),$No=l(),Xv=a("li"),sme=a("strong"),kNo=o("mobilebert"),SNo=o(" \u2014 "),KG=a("a"),RNo=o("MobileBertForQuestionAnswering"),BNo=o(" (MobileBERT model)"),PNo=l(),zv=a("li"),lme=a("strong"),INo=o("mpnet"),qNo=o(" \u2014 "),ZG=a("a"),NNo=o("MPNetForQuestionAnswering"),jNo=o(" (MPNet model)"),DNo=l(),Qv=a("li"),ime=a("strong"),GNo=o("nystromformer"),ONo=o(" \u2014 "),eO=a("a"),VNo=o("NystromformerForQuestionAnswering"),XNo=o(" (Nystromformer model)"),zNo=l(),Wv=a("li"),dme=a("strong"),QNo=o("qdqbert"),WNo=o(" \u2014 "),oO=a("a"),HNo=o("QDQBertForQuestionAnswering"),UNo=o(" (QDQBert model)"),JNo=l(),Hv=a("li"),cme=a("strong"),YNo=o("reformer"),KNo=o(" \u2014 "),rO=a("a"),ZNo=o("ReformerForQuestionAnswering"),ejo=o(" (Reformer model)"),ojo=l(),Uv=a("li"),fme=a("strong"),rjo=o("rembert"),tjo=o(" \u2014 "),tO=a("a"),ajo=o("RemBertForQuestionAnswering"),njo=o(" (RemBERT model)"),sjo=l(),Jv=a("li"),mme=a("strong"),ljo=o("roberta"),ijo=o(" \u2014 "),aO=a("a"),djo=o("RobertaForQuestionAnswering"),cjo=o(" (RoBERTa model)"),fjo=l(),Yv=a("li"),gme=a("strong"),mjo=o("roformer"),gjo=o(" \u2014 "),nO=a("a"),hjo=o("RoFormerForQuestionAnswering"),pjo=o(" (RoFormer model)"),ujo=l(),Kv=a("li"),hme=a("strong"),_jo=o("splinter"),bjo=o(" \u2014 "),sO=a("a"),vjo=o("SplinterForQuestionAnswering"),Fjo=o(" (Splinter model)"),Tjo=l(),Zv=a("li"),pme=a("strong"),Mjo=o("squeezebert"),Ejo=o(" \u2014 "),lO=a("a"),Cjo=o("SqueezeBertForQuestionAnswering"),wjo=o(" (SqueezeBERT model)"),Ajo=l(),eF=a("li"),ume=a("strong"),yjo=o("xlm"),Ljo=o(" \u2014 "),iO=a("a"),xjo=o("XLMForQuestionAnsweringSimple"),$jo=o(" (XLM model)"),kjo=l(),oF=a("li"),_me=a("strong"),Sjo=o("xlm-roberta"),Rjo=o(" \u2014 "),dO=a("a"),Bjo=o("XLMRobertaForQuestionAnswering"),Pjo=o(" (XLM-RoBERTa model)"),Ijo=l(),rF=a("li"),bme=a("strong"),qjo=o("xlm-roberta-xl"),Njo=o(" \u2014 "),cO=a("a"),jjo=o("XLMRobertaXLForQuestionAnswering"),Djo=o(" (XLM-RoBERTa-XL model)"),Gjo=l(),tF=a("li"),vme=a("strong"),Ojo=o("xlnet"),Vjo=o(" \u2014 "),fO=a("a"),Xjo=o("XLNetForQuestionAnsweringSimple"),zjo=o(" (XLNet model)"),Qjo=l(),aF=a("li"),Fme=a("strong"),Wjo=o("yoso"),Hjo=o(" \u2014 "),mO=a("a"),Ujo=o("YosoForQuestionAnswering"),Jjo=o(" (YOSO model)"),Yjo=l(),nF=a("p"),Kjo=o("The model is set in evaluation mode by default using "),Tme=a("code"),Zjo=o("model.eval()"),eDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=a("code"),oDo=o("model.train()"),rDo=l(),F(sF.$$.fragment),cBe=l(),Qi=a("h2"),lF=a("a"),Eme=a("span"),F(qw.$$.fragment),tDo=l(),Cme=a("span"),aDo=o("AutoModelForTableQuestionAnswering"),fBe=l(),Io=a("div"),F(Nw.$$.fragment),nDo=l(),Wi=a("p"),sDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gO=a("a"),lDo=o("from_pretrained()"),iDo=o(" class method or the "),hO=a("a"),dDo=o("from_config()"),cDo=o(` class
method.`),fDo=l(),jw=a("p"),mDo=o("This class cannot be instantiated directly using "),wme=a("code"),gDo=o("__init__()"),hDo=o(" (throws an error)."),pDo=l(),it=a("div"),F(Dw.$$.fragment),uDo=l(),Ame=a("p"),_Do=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),bDo=l(),Hi=a("p"),vDo=o(`Note:
Loading a model from its configuration file does `),yme=a("strong"),FDo=o("not"),TDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=a("a"),MDo=o("from_pretrained()"),EDo=o(" to load the model weights."),CDo=l(),F(iF.$$.fragment),wDo=l(),ro=a("div"),F(Gw.$$.fragment),ADo=l(),Lme=a("p"),yDo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),LDo=l(),Sa=a("p"),xDo=o("The model class to instantiate is selected based on the "),xme=a("code"),$Do=o("model_type"),kDo=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),SDo=o("pretrained_model_name_or_path"),RDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=a("code"),BDo=o("pretrained_model_name_or_path"),PDo=o(":"),IDo=l(),Sme=a("ul"),dF=a("li"),Rme=a("strong"),qDo=o("tapas"),NDo=o(" \u2014 "),uO=a("a"),jDo=o("TapasForQuestionAnswering"),DDo=o(" (TAPAS model)"),GDo=l(),cF=a("p"),ODo=o("The model is set in evaluation mode by default using "),Bme=a("code"),VDo=o("model.eval()"),XDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=a("code"),zDo=o("model.train()"),QDo=l(),F(fF.$$.fragment),mBe=l(),Ui=a("h2"),mF=a("a"),Ime=a("span"),F(Ow.$$.fragment),WDo=l(),qme=a("span"),HDo=o("AutoModelForImageClassification"),gBe=l(),qo=a("div"),F(Vw.$$.fragment),UDo=l(),Ji=a("p"),JDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_O=a("a"),YDo=o("from_pretrained()"),KDo=o(" class method or the "),bO=a("a"),ZDo=o("from_config()"),eGo=o(` class
method.`),oGo=l(),Xw=a("p"),rGo=o("This class cannot be instantiated directly using "),Nme=a("code"),tGo=o("__init__()"),aGo=o(" (throws an error)."),nGo=l(),dt=a("div"),F(zw.$$.fragment),sGo=l(),jme=a("p"),lGo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iGo=l(),Yi=a("p"),dGo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),cGo=o("not"),fGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=a("a"),mGo=o("from_pretrained()"),gGo=o(" to load the model weights."),hGo=l(),F(gF.$$.fragment),pGo=l(),to=a("div"),F(Qw.$$.fragment),uGo=l(),Gme=a("p"),_Go=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bGo=l(),Ra=a("p"),vGo=o("The model class to instantiate is selected based on the "),Ome=a("code"),FGo=o("model_type"),TGo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),MGo=o("pretrained_model_name_or_path"),EGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=a("code"),CGo=o("pretrained_model_name_or_path"),wGo=o(":"),AGo=l(),ve=a("ul"),hF=a("li"),zme=a("strong"),yGo=o("beit"),LGo=o(" \u2014 "),FO=a("a"),xGo=o("BeitForImageClassification"),$Go=o(" (BEiT model)"),kGo=l(),pF=a("li"),Qme=a("strong"),SGo=o("convnext"),RGo=o(" \u2014 "),TO=a("a"),BGo=o("ConvNextForImageClassification"),PGo=o(" (ConvNext model)"),IGo=l(),uF=a("li"),Wme=a("strong"),qGo=o("data2vec-vision"),NGo=o(" \u2014 "),MO=a("a"),jGo=o("Data2VecVisionForImageClassification"),DGo=o(" (Data2VecVision model)"),GGo=l(),xs=a("li"),Hme=a("strong"),OGo=o("deit"),VGo=o(" \u2014 "),EO=a("a"),XGo=o("DeiTForImageClassification"),zGo=o(" or "),CO=a("a"),QGo=o("DeiTForImageClassificationWithTeacher"),WGo=o(" (DeiT model)"),HGo=l(),_F=a("li"),Ume=a("strong"),UGo=o("imagegpt"),JGo=o(" \u2014 "),wO=a("a"),YGo=o("ImageGPTForImageClassification"),KGo=o(" (ImageGPT model)"),ZGo=l(),ct=a("li"),Jme=a("strong"),eOo=o("perceiver"),oOo=o(" \u2014 "),AO=a("a"),rOo=o("PerceiverForImageClassificationLearned"),tOo=o(" or "),yO=a("a"),aOo=o("PerceiverForImageClassificationFourier"),nOo=o(" or "),LO=a("a"),sOo=o("PerceiverForImageClassificationConvProcessing"),lOo=o(" (Perceiver model)"),iOo=l(),bF=a("li"),Yme=a("strong"),dOo=o("poolformer"),cOo=o(" \u2014 "),xO=a("a"),fOo=o("PoolFormerForImageClassification"),mOo=o(" (PoolFormer model)"),gOo=l(),vF=a("li"),Kme=a("strong"),hOo=o("regnet"),pOo=o(" \u2014 "),$O=a("a"),uOo=o("RegNetForImageClassification"),_Oo=o(" (RegNet model)"),bOo=l(),FF=a("li"),Zme=a("strong"),vOo=o("resnet"),FOo=o(" \u2014 "),kO=a("a"),TOo=o("ResNetForImageClassification"),MOo=o(" (ResNet model)"),EOo=l(),TF=a("li"),ege=a("strong"),COo=o("segformer"),wOo=o(" \u2014 "),SO=a("a"),AOo=o("SegformerForImageClassification"),yOo=o(" (SegFormer model)"),LOo=l(),MF=a("li"),oge=a("strong"),xOo=o("swin"),$Oo=o(" \u2014 "),RO=a("a"),kOo=o("SwinForImageClassification"),SOo=o(" (Swin model)"),ROo=l(),EF=a("li"),rge=a("strong"),BOo=o("van"),POo=o(" \u2014 "),BO=a("a"),IOo=o("VanForImageClassification"),qOo=o(" (VAN model)"),NOo=l(),CF=a("li"),tge=a("strong"),jOo=o("vit"),DOo=o(" \u2014 "),PO=a("a"),GOo=o("ViTForImageClassification"),OOo=o(" (ViT model)"),VOo=l(),wF=a("p"),XOo=o("The model is set in evaluation mode by default using "),age=a("code"),zOo=o("model.eval()"),QOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),WOo=o("model.train()"),HOo=l(),F(AF.$$.fragment),hBe=l(),Ki=a("h2"),yF=a("a"),sge=a("span"),F(Ww.$$.fragment),UOo=l(),lge=a("span"),JOo=o("AutoModelForVision2Seq"),pBe=l(),No=a("div"),F(Hw.$$.fragment),YOo=l(),Zi=a("p"),KOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IO=a("a"),ZOo=o("from_pretrained()"),eVo=o(" class method or the "),qO=a("a"),oVo=o("from_config()"),rVo=o(` class
method.`),tVo=l(),Uw=a("p"),aVo=o("This class cannot be instantiated directly using "),ige=a("code"),nVo=o("__init__()"),sVo=o(" (throws an error)."),lVo=l(),ft=a("div"),F(Jw.$$.fragment),iVo=l(),dge=a("p"),dVo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cVo=l(),ed=a("p"),fVo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),mVo=o("not"),gVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),hVo=o("from_pretrained()"),pVo=o(" to load the model weights."),uVo=l(),F(LF.$$.fragment),_Vo=l(),ao=a("div"),F(Yw.$$.fragment),bVo=l(),fge=a("p"),vVo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FVo=l(),Ba=a("p"),TVo=o("The model class to instantiate is selected based on the "),mge=a("code"),MVo=o("model_type"),EVo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),CVo=o("pretrained_model_name_or_path"),wVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),AVo=o("pretrained_model_name_or_path"),yVo=o(":"),LVo=l(),pge=a("ul"),xF=a("li"),uge=a("strong"),xVo=o("vision-encoder-decoder"),$Vo=o(" \u2014 "),jO=a("a"),kVo=o("VisionEncoderDecoderModel"),SVo=o(" (Vision Encoder decoder model)"),RVo=l(),$F=a("p"),BVo=o("The model is set in evaluation mode by default using "),_ge=a("code"),PVo=o("model.eval()"),IVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),qVo=o("model.train()"),NVo=l(),F(kF.$$.fragment),uBe=l(),od=a("h2"),SF=a("a"),vge=a("span"),F(Kw.$$.fragment),jVo=l(),Fge=a("span"),DVo=o("AutoModelForAudioClassification"),_Be=l(),jo=a("div"),F(Zw.$$.fragment),GVo=l(),rd=a("p"),OVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),DO=a("a"),VVo=o("from_pretrained()"),XVo=o(" class method or the "),GO=a("a"),zVo=o("from_config()"),QVo=o(` class
method.`),WVo=l(),eA=a("p"),HVo=o("This class cannot be instantiated directly using "),Tge=a("code"),UVo=o("__init__()"),JVo=o(" (throws an error)."),YVo=l(),mt=a("div"),F(oA.$$.fragment),KVo=l(),Mge=a("p"),ZVo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),eXo=l(),td=a("p"),oXo=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),rXo=o("not"),tXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OO=a("a"),aXo=o("from_pretrained()"),nXo=o(" to load the model weights."),sXo=l(),F(RF.$$.fragment),lXo=l(),no=a("div"),F(rA.$$.fragment),iXo=l(),Cge=a("p"),dXo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),cXo=l(),Pa=a("p"),fXo=o("The model class to instantiate is selected based on the "),wge=a("code"),mXo=o("model_type"),gXo=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),hXo=o("pretrained_model_name_or_path"),pXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),uXo=o("pretrained_model_name_or_path"),_Xo=o(":"),bXo=l(),qe=a("ul"),BF=a("li"),Lge=a("strong"),vXo=o("data2vec-audio"),FXo=o(" \u2014 "),VO=a("a"),TXo=o("Data2VecAudioForSequenceClassification"),MXo=o(" (Data2VecAudio model)"),EXo=l(),PF=a("li"),xge=a("strong"),CXo=o("hubert"),wXo=o(" \u2014 "),XO=a("a"),AXo=o("HubertForSequenceClassification"),yXo=o(" (Hubert model)"),LXo=l(),IF=a("li"),$ge=a("strong"),xXo=o("sew"),$Xo=o(" \u2014 "),zO=a("a"),kXo=o("SEWForSequenceClassification"),SXo=o(" (SEW model)"),RXo=l(),qF=a("li"),kge=a("strong"),BXo=o("sew-d"),PXo=o(" \u2014 "),QO=a("a"),IXo=o("SEWDForSequenceClassification"),qXo=o(" (SEW-D model)"),NXo=l(),NF=a("li"),Sge=a("strong"),jXo=o("unispeech"),DXo=o(" \u2014 "),WO=a("a"),GXo=o("UniSpeechForSequenceClassification"),OXo=o(" (UniSpeech model)"),VXo=l(),jF=a("li"),Rge=a("strong"),XXo=o("unispeech-sat"),zXo=o(" \u2014 "),HO=a("a"),QXo=o("UniSpeechSatForSequenceClassification"),WXo=o(" (UniSpeechSat model)"),HXo=l(),DF=a("li"),Bge=a("strong"),UXo=o("wav2vec2"),JXo=o(" \u2014 "),UO=a("a"),YXo=o("Wav2Vec2ForSequenceClassification"),KXo=o(" (Wav2Vec2 model)"),ZXo=l(),GF=a("li"),Pge=a("strong"),ezo=o("wavlm"),ozo=o(" \u2014 "),JO=a("a"),rzo=o("WavLMForSequenceClassification"),tzo=o(" (WavLM model)"),azo=l(),OF=a("p"),nzo=o("The model is set in evaluation mode by default using "),Ige=a("code"),szo=o("model.eval()"),lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=a("code"),izo=o("model.train()"),dzo=l(),F(VF.$$.fragment),bBe=l(),ad=a("h2"),XF=a("a"),Nge=a("span"),F(tA.$$.fragment),czo=l(),jge=a("span"),fzo=o("AutoModelForAudioFrameClassification"),vBe=l(),Do=a("div"),F(aA.$$.fragment),mzo=l(),nd=a("p"),gzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YO=a("a"),hzo=o("from_pretrained()"),pzo=o(" class method or the "),KO=a("a"),uzo=o("from_config()"),_zo=o(` class
method.`),bzo=l(),nA=a("p"),vzo=o("This class cannot be instantiated directly using "),Dge=a("code"),Fzo=o("__init__()"),Tzo=o(" (throws an error)."),Mzo=l(),gt=a("div"),F(sA.$$.fragment),Ezo=l(),Gge=a("p"),Czo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wzo=l(),sd=a("p"),Azo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),yzo=o("not"),Lzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=a("a"),xzo=o("from_pretrained()"),$zo=o(" to load the model weights."),kzo=l(),F(zF.$$.fragment),Szo=l(),so=a("div"),F(lA.$$.fragment),Rzo=l(),Vge=a("p"),Bzo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Pzo=l(),Ia=a("p"),Izo=o("The model class to instantiate is selected based on the "),Xge=a("code"),qzo=o("model_type"),Nzo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),jzo=o("pretrained_model_name_or_path"),Dzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),Gzo=o("pretrained_model_name_or_path"),Ozo=o(":"),Vzo=l(),qa=a("ul"),QF=a("li"),Wge=a("strong"),Xzo=o("data2vec-audio"),zzo=o(" \u2014 "),eV=a("a"),Qzo=o("Data2VecAudioForAudioFrameClassification"),Wzo=o(" (Data2VecAudio model)"),Hzo=l(),WF=a("li"),Hge=a("strong"),Uzo=o("unispeech-sat"),Jzo=o(" \u2014 "),oV=a("a"),Yzo=o("UniSpeechSatForAudioFrameClassification"),Kzo=o(" (UniSpeechSat model)"),Zzo=l(),HF=a("li"),Uge=a("strong"),eQo=o("wav2vec2"),oQo=o(" \u2014 "),rV=a("a"),rQo=o("Wav2Vec2ForAudioFrameClassification"),tQo=o(" (Wav2Vec2 model)"),aQo=l(),UF=a("li"),Jge=a("strong"),nQo=o("wavlm"),sQo=o(" \u2014 "),tV=a("a"),lQo=o("WavLMForAudioFrameClassification"),iQo=o(" (WavLM model)"),dQo=l(),JF=a("p"),cQo=o("The model is set in evaluation mode by default using "),Yge=a("code"),fQo=o("model.eval()"),mQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),gQo=o("model.train()"),hQo=l(),F(YF.$$.fragment),FBe=l(),ld=a("h2"),KF=a("a"),Zge=a("span"),F(iA.$$.fragment),pQo=l(),ehe=a("span"),uQo=o("AutoModelForCTC"),TBe=l(),Go=a("div"),F(dA.$$.fragment),_Qo=l(),id=a("p"),bQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),aV=a("a"),vQo=o("from_pretrained()"),FQo=o(" class method or the "),nV=a("a"),TQo=o("from_config()"),MQo=o(` class
method.`),EQo=l(),cA=a("p"),CQo=o("This class cannot be instantiated directly using "),ohe=a("code"),wQo=o("__init__()"),AQo=o(" (throws an error)."),yQo=l(),ht=a("div"),F(fA.$$.fragment),LQo=l(),rhe=a("p"),xQo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$Qo=l(),dd=a("p"),kQo=o(`Note:
Loading a model from its configuration file does `),the=a("strong"),SQo=o("not"),RQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=a("a"),BQo=o("from_pretrained()"),PQo=o(" to load the model weights."),IQo=l(),F(ZF.$$.fragment),qQo=l(),lo=a("div"),F(mA.$$.fragment),NQo=l(),ahe=a("p"),jQo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),DQo=l(),Na=a("p"),GQo=o("The model class to instantiate is selected based on the "),nhe=a("code"),OQo=o("model_type"),VQo=o(` property of the config object (either
passed as an argument or loaded from `),she=a("code"),XQo=o("pretrained_model_name_or_path"),zQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=a("code"),QQo=o("pretrained_model_name_or_path"),WQo=o(":"),HQo=l(),Ne=a("ul"),e0=a("li"),ihe=a("strong"),UQo=o("data2vec-audio"),JQo=o(" \u2014 "),lV=a("a"),YQo=o("Data2VecAudioForCTC"),KQo=o(" (Data2VecAudio model)"),ZQo=l(),o0=a("li"),dhe=a("strong"),eWo=o("hubert"),oWo=o(" \u2014 "),iV=a("a"),rWo=o("HubertForCTC"),tWo=o(" (Hubert model)"),aWo=l(),r0=a("li"),che=a("strong"),nWo=o("sew"),sWo=o(" \u2014 "),dV=a("a"),lWo=o("SEWForCTC"),iWo=o(" (SEW model)"),dWo=l(),t0=a("li"),fhe=a("strong"),cWo=o("sew-d"),fWo=o(" \u2014 "),cV=a("a"),mWo=o("SEWDForCTC"),gWo=o(" (SEW-D model)"),hWo=l(),a0=a("li"),mhe=a("strong"),pWo=o("unispeech"),uWo=o(" \u2014 "),fV=a("a"),_Wo=o("UniSpeechForCTC"),bWo=o(" (UniSpeech model)"),vWo=l(),n0=a("li"),ghe=a("strong"),FWo=o("unispeech-sat"),TWo=o(" \u2014 "),mV=a("a"),MWo=o("UniSpeechSatForCTC"),EWo=o(" (UniSpeechSat model)"),CWo=l(),s0=a("li"),hhe=a("strong"),wWo=o("wav2vec2"),AWo=o(" \u2014 "),gV=a("a"),yWo=o("Wav2Vec2ForCTC"),LWo=o(" (Wav2Vec2 model)"),xWo=l(),l0=a("li"),phe=a("strong"),$Wo=o("wavlm"),kWo=o(" \u2014 "),hV=a("a"),SWo=o("WavLMForCTC"),RWo=o(" (WavLM model)"),BWo=l(),i0=a("p"),PWo=o("The model is set in evaluation mode by default using "),uhe=a("code"),IWo=o("model.eval()"),qWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=a("code"),NWo=o("model.train()"),jWo=l(),F(d0.$$.fragment),MBe=l(),cd=a("h2"),c0=a("a"),bhe=a("span"),F(gA.$$.fragment),DWo=l(),vhe=a("span"),GWo=o("AutoModelForSpeechSeq2Seq"),EBe=l(),Oo=a("div"),F(hA.$$.fragment),OWo=l(),fd=a("p"),VWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pV=a("a"),XWo=o("from_pretrained()"),zWo=o(" class method or the "),uV=a("a"),QWo=o("from_config()"),WWo=o(` class
method.`),HWo=l(),pA=a("p"),UWo=o("This class cannot be instantiated directly using "),Fhe=a("code"),JWo=o("__init__()"),YWo=o(" (throws an error)."),KWo=l(),pt=a("div"),F(uA.$$.fragment),ZWo=l(),The=a("p"),eHo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),oHo=l(),md=a("p"),rHo=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),tHo=o("not"),aHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),nHo=o("from_pretrained()"),sHo=o(" to load the model weights."),lHo=l(),F(f0.$$.fragment),iHo=l(),io=a("div"),F(_A.$$.fragment),dHo=l(),Ehe=a("p"),cHo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fHo=l(),ja=a("p"),mHo=o("The model class to instantiate is selected based on the "),Che=a("code"),gHo=o("model_type"),hHo=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),pHo=o("pretrained_model_name_or_path"),uHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),_Ho=o("pretrained_model_name_or_path"),bHo=o(":"),vHo=l(),bA=a("ul"),m0=a("li"),yhe=a("strong"),FHo=o("speech-encoder-decoder"),THo=o(" \u2014 "),bV=a("a"),MHo=o("SpeechEncoderDecoderModel"),EHo=o(" (Speech Encoder decoder model)"),CHo=l(),g0=a("li"),Lhe=a("strong"),wHo=o("speech_to_text"),AHo=o(" \u2014 "),vV=a("a"),yHo=o("Speech2TextForConditionalGeneration"),LHo=o(" (Speech2Text model)"),xHo=l(),h0=a("p"),$Ho=o("The model is set in evaluation mode by default using "),xhe=a("code"),kHo=o("model.eval()"),SHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=a("code"),RHo=o("model.train()"),BHo=l(),F(p0.$$.fragment),CBe=l(),gd=a("h2"),u0=a("a"),khe=a("span"),F(vA.$$.fragment),PHo=l(),She=a("span"),IHo=o("AutoModelForAudioXVector"),wBe=l(),Vo=a("div"),F(FA.$$.fragment),qHo=l(),hd=a("p"),NHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),FV=a("a"),jHo=o("from_pretrained()"),DHo=o(" class method or the "),TV=a("a"),GHo=o("from_config()"),OHo=o(` class
method.`),VHo=l(),TA=a("p"),XHo=o("This class cannot be instantiated directly using "),Rhe=a("code"),zHo=o("__init__()"),QHo=o(" (throws an error)."),WHo=l(),ut=a("div"),F(MA.$$.fragment),HHo=l(),Bhe=a("p"),UHo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),JHo=l(),pd=a("p"),YHo=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),KHo=o("not"),ZHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),eUo=o("from_pretrained()"),oUo=o(" to load the model weights."),rUo=l(),F(_0.$$.fragment),tUo=l(),co=a("div"),F(EA.$$.fragment),aUo=l(),Ihe=a("p"),nUo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),sUo=l(),Da=a("p"),lUo=o("The model class to instantiate is selected based on the "),qhe=a("code"),iUo=o("model_type"),dUo=o(` property of the config object (either
passed as an argument or loaded from `),Nhe=a("code"),cUo=o("pretrained_model_name_or_path"),fUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=a("code"),mUo=o("pretrained_model_name_or_path"),gUo=o(":"),hUo=l(),Ga=a("ul"),b0=a("li"),Dhe=a("strong"),pUo=o("data2vec-audio"),uUo=o(" \u2014 "),EV=a("a"),_Uo=o("Data2VecAudioForXVector"),bUo=o(" (Data2VecAudio model)"),vUo=l(),v0=a("li"),Ghe=a("strong"),FUo=o("unispeech-sat"),TUo=o(" \u2014 "),CV=a("a"),MUo=o("UniSpeechSatForXVector"),EUo=o(" (UniSpeechSat model)"),CUo=l(),F0=a("li"),Ohe=a("strong"),wUo=o("wav2vec2"),AUo=o(" \u2014 "),wV=a("a"),yUo=o("Wav2Vec2ForXVector"),LUo=o(" (Wav2Vec2 model)"),xUo=l(),T0=a("li"),Vhe=a("strong"),$Uo=o("wavlm"),kUo=o(" \u2014 "),AV=a("a"),SUo=o("WavLMForXVector"),RUo=o(" (WavLM model)"),BUo=l(),M0=a("p"),PUo=o("The model is set in evaluation mode by default using "),Xhe=a("code"),IUo=o("model.eval()"),qUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=a("code"),NUo=o("model.train()"),jUo=l(),F(E0.$$.fragment),ABe=l(),ud=a("h2"),C0=a("a"),Qhe=a("span"),F(CA.$$.fragment),DUo=l(),Whe=a("span"),GUo=o("AutoModelForMaskedImageModeling"),yBe=l(),Xo=a("div"),F(wA.$$.fragment),OUo=l(),_d=a("p"),VUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yV=a("a"),XUo=o("from_pretrained()"),zUo=o(" class method or the "),LV=a("a"),QUo=o("from_config()"),WUo=o(` class
method.`),HUo=l(),AA=a("p"),UUo=o("This class cannot be instantiated directly using "),Hhe=a("code"),JUo=o("__init__()"),YUo=o(" (throws an error)."),KUo=l(),_t=a("div"),F(yA.$$.fragment),ZUo=l(),Uhe=a("p"),eJo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),oJo=l(),bd=a("p"),rJo=o(`Note:
Loading a model from its configuration file does `),Jhe=a("strong"),tJo=o("not"),aJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),nJo=o("from_pretrained()"),sJo=o(" to load the model weights."),lJo=l(),F(w0.$$.fragment),iJo=l(),fo=a("div"),F(LA.$$.fragment),dJo=l(),Yhe=a("p"),cJo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fJo=l(),Oa=a("p"),mJo=o("The model class to instantiate is selected based on the "),Khe=a("code"),gJo=o("model_type"),hJo=o(` property of the config object (either
passed as an argument or loaded from `),Zhe=a("code"),pJo=o("pretrained_model_name_or_path"),uJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=a("code"),_Jo=o("pretrained_model_name_or_path"),bJo=o(":"),vJo=l(),Va=a("ul"),A0=a("li"),ope=a("strong"),FJo=o("beit"),TJo=o(" \u2014 "),$V=a("a"),MJo=o("BeitForMaskedImageModeling"),EJo=o(" (BEiT model)"),CJo=l(),y0=a("li"),rpe=a("strong"),wJo=o("deit"),AJo=o(" \u2014 "),kV=a("a"),yJo=o("DeiTForMaskedImageModeling"),LJo=o(" (DeiT model)"),xJo=l(),L0=a("li"),tpe=a("strong"),$Jo=o("swin"),kJo=o(" \u2014 "),SV=a("a"),SJo=o("SwinForMaskedImageModeling"),RJo=o(" (Swin model)"),BJo=l(),x0=a("li"),ape=a("strong"),PJo=o("vit"),IJo=o(" \u2014 "),RV=a("a"),qJo=o("ViTForMaskedImageModeling"),NJo=o(" (ViT model)"),jJo=l(),$0=a("p"),DJo=o("The model is set in evaluation mode by default using "),npe=a("code"),GJo=o("model.eval()"),OJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),spe=a("code"),VJo=o("model.train()"),XJo=l(),F(k0.$$.fragment),LBe=l(),vd=a("h2"),S0=a("a"),lpe=a("span"),F(xA.$$.fragment),zJo=l(),ipe=a("span"),QJo=o("AutoModelForObjectDetection"),xBe=l(),zo=a("div"),F($A.$$.fragment),WJo=l(),Fd=a("p"),HJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),BV=a("a"),UJo=o("from_pretrained()"),JJo=o(" class method or the "),PV=a("a"),YJo=o("from_config()"),KJo=o(` class
method.`),ZJo=l(),kA=a("p"),eYo=o("This class cannot be instantiated directly using "),dpe=a("code"),oYo=o("__init__()"),rYo=o(" (throws an error)."),tYo=l(),bt=a("div"),F(SA.$$.fragment),aYo=l(),cpe=a("p"),nYo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),sYo=l(),Td=a("p"),lYo=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),iYo=o("not"),dYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),cYo=o("from_pretrained()"),fYo=o(" to load the model weights."),mYo=l(),F(R0.$$.fragment),gYo=l(),mo=a("div"),F(RA.$$.fragment),hYo=l(),mpe=a("p"),pYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),uYo=l(),Xa=a("p"),_Yo=o("The model class to instantiate is selected based on the "),gpe=a("code"),bYo=o("model_type"),vYo=o(` property of the config object (either
passed as an argument or loaded from `),hpe=a("code"),FYo=o("pretrained_model_name_or_path"),TYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=a("code"),MYo=o("pretrained_model_name_or_path"),EYo=o(":"),CYo=l(),upe=a("ul"),B0=a("li"),_pe=a("strong"),wYo=o("detr"),AYo=o(" \u2014 "),qV=a("a"),yYo=o("DetrForObjectDetection"),LYo=o(" (DETR model)"),xYo=l(),P0=a("p"),$Yo=o("The model is set in evaluation mode by default using "),bpe=a("code"),kYo=o("model.eval()"),SYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=a("code"),RYo=o("model.train()"),BYo=l(),F(I0.$$.fragment),$Be=l(),Md=a("h2"),q0=a("a"),Fpe=a("span"),F(BA.$$.fragment),PYo=l(),Tpe=a("span"),IYo=o("AutoModelForImageSegmentation"),kBe=l(),Qo=a("div"),F(PA.$$.fragment),qYo=l(),Ed=a("p"),NYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NV=a("a"),jYo=o("from_pretrained()"),DYo=o(" class method or the "),jV=a("a"),GYo=o("from_config()"),OYo=o(` class
method.`),VYo=l(),IA=a("p"),XYo=o("This class cannot be instantiated directly using "),Mpe=a("code"),zYo=o("__init__()"),QYo=o(" (throws an error)."),WYo=l(),vt=a("div"),F(qA.$$.fragment),HYo=l(),Epe=a("p"),UYo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),JYo=l(),Cd=a("p"),YYo=o(`Note:
Loading a model from its configuration file does `),Cpe=a("strong"),KYo=o("not"),ZYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),eKo=o("from_pretrained()"),oKo=o(" to load the model weights."),rKo=l(),F(N0.$$.fragment),tKo=l(),go=a("div"),F(NA.$$.fragment),aKo=l(),wpe=a("p"),nKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),sKo=l(),za=a("p"),lKo=o("The model class to instantiate is selected based on the "),Ape=a("code"),iKo=o("model_type"),dKo=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),cKo=o("pretrained_model_name_or_path"),fKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),mKo=o("pretrained_model_name_or_path"),gKo=o(":"),hKo=l(),xpe=a("ul"),j0=a("li"),$pe=a("strong"),pKo=o("detr"),uKo=o(" \u2014 "),GV=a("a"),_Ko=o("DetrForSegmentation"),bKo=o(" (DETR model)"),vKo=l(),D0=a("p"),FKo=o("The model is set in evaluation mode by default using "),kpe=a("code"),TKo=o("model.eval()"),MKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=a("code"),EKo=o("model.train()"),CKo=l(),F(G0.$$.fragment),SBe=l(),wd=a("h2"),O0=a("a"),Rpe=a("span"),F(jA.$$.fragment),wKo=l(),Bpe=a("span"),AKo=o("AutoModelForSemanticSegmentation"),RBe=l(),Wo=a("div"),F(DA.$$.fragment),yKo=l(),Ad=a("p"),LKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),OV=a("a"),xKo=o("from_pretrained()"),$Ko=o(" class method or the "),VV=a("a"),kKo=o("from_config()"),SKo=o(` class
method.`),RKo=l(),GA=a("p"),BKo=o("This class cannot be instantiated directly using "),Ppe=a("code"),PKo=o("__init__()"),IKo=o(" (throws an error)."),qKo=l(),Ft=a("div"),F(OA.$$.fragment),NKo=l(),Ipe=a("p"),jKo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),DKo=l(),yd=a("p"),GKo=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),OKo=o("not"),VKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),XKo=o("from_pretrained()"),zKo=o(" to load the model weights."),QKo=l(),F(V0.$$.fragment),WKo=l(),ho=a("div"),F(VA.$$.fragment),HKo=l(),Npe=a("p"),UKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),JKo=l(),Qa=a("p"),YKo=o("The model class to instantiate is selected based on the "),jpe=a("code"),KKo=o("model_type"),ZKo=o(` property of the config object (either
passed as an argument or loaded from `),Dpe=a("code"),eZo=o("pretrained_model_name_or_path"),oZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=a("code"),rZo=o("pretrained_model_name_or_path"),tZo=o(":"),aZo=l(),Wa=a("ul"),X0=a("li"),Ope=a("strong"),nZo=o("beit"),sZo=o(" \u2014 "),zV=a("a"),lZo=o("BeitForSemanticSegmentation"),iZo=o(" (BEiT model)"),dZo=l(),z0=a("li"),Vpe=a("strong"),cZo=o("data2vec-vision"),fZo=o(" \u2014 "),QV=a("a"),mZo=o("Data2VecVisionForSemanticSegmentation"),gZo=o(" (Data2VecVision model)"),hZo=l(),Q0=a("li"),Xpe=a("strong"),pZo=o("dpt"),uZo=o(" \u2014 "),WV=a("a"),_Zo=o("DPTForSemanticSegmentation"),bZo=o(" (DPT model)"),vZo=l(),W0=a("li"),zpe=a("strong"),FZo=o("segformer"),TZo=o(" \u2014 "),HV=a("a"),MZo=o("SegformerForSemanticSegmentation"),EZo=o(" (SegFormer model)"),CZo=l(),H0=a("p"),wZo=o("The model is set in evaluation mode by default using "),Qpe=a("code"),AZo=o("model.eval()"),yZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),LZo=o("model.train()"),xZo=l(),F(U0.$$.fragment),BBe=l(),Ld=a("h2"),J0=a("a"),Hpe=a("span"),F(XA.$$.fragment),$Zo=l(),Upe=a("span"),kZo=o("AutoModelForInstanceSegmentation"),PBe=l(),Ho=a("div"),F(zA.$$.fragment),SZo=l(),xd=a("p"),RZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UV=a("a"),BZo=o("from_pretrained()"),PZo=o(" class method or the "),JV=a("a"),IZo=o("from_config()"),qZo=o(` class
method.`),NZo=l(),QA=a("p"),jZo=o("This class cannot be instantiated directly using "),Jpe=a("code"),DZo=o("__init__()"),GZo=o(" (throws an error)."),OZo=l(),Tt=a("div"),F(WA.$$.fragment),VZo=l(),Ype=a("p"),XZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zZo=l(),$d=a("p"),QZo=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),WZo=o("not"),HZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),UZo=o("from_pretrained()"),JZo=o(" to load the model weights."),YZo=l(),F(Y0.$$.fragment),KZo=l(),po=a("div"),F(HA.$$.fragment),ZZo=l(),Zpe=a("p"),eer=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),oer=l(),Ha=a("p"),rer=o("The model class to instantiate is selected based on the "),eue=a("code"),ter=o("model_type"),aer=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),ner=o("pretrained_model_name_or_path"),ser=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),ler=o("pretrained_model_name_or_path"),ier=o(":"),der=l(),tue=a("ul"),K0=a("li"),aue=a("strong"),cer=o("maskformer"),fer=o(" \u2014 "),KV=a("a"),mer=o("MaskFormerForInstanceSegmentation"),ger=o(" (MaskFormer model)"),her=l(),Z0=a("p"),per=o("The model is set in evaluation mode by default using "),nue=a("code"),uer=o("model.eval()"),_er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=a("code"),ber=o("model.train()"),ver=l(),F(e6.$$.fragment),IBe=l(),kd=a("h2"),o6=a("a"),lue=a("span"),F(UA.$$.fragment),Fer=l(),iue=a("span"),Ter=o("TFAutoModel"),qBe=l(),Uo=a("div"),F(JA.$$.fragment),Mer=l(),Sd=a("p"),Eer=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZV=a("a"),Cer=o("from_pretrained()"),wer=o(" class method or the "),eX=a("a"),Aer=o("from_config()"),yer=o(` class
method.`),Ler=l(),YA=a("p"),xer=o("This class cannot be instantiated directly using "),due=a("code"),$er=o("__init__()"),ker=o(" (throws an error)."),Ser=l(),Mt=a("div"),F(KA.$$.fragment),Rer=l(),cue=a("p"),Ber=o("Instantiates one of the base model classes of the library from a configuration."),Per=l(),Rd=a("p"),Ier=o(`Note:
Loading a model from its configuration file does `),fue=a("strong"),qer=o("not"),Ner=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),jer=o("from_pretrained()"),Der=o(" to load the model weights."),Ger=l(),F(r6.$$.fragment),Oer=l(),Mr=a("div"),F(ZA.$$.fragment),Ver=l(),mue=a("p"),Xer=o("Instantiate one of the base model classes of the library from a pretrained model."),zer=l(),Ua=a("p"),Qer=o("The model class to instantiate is selected based on the "),gue=a("code"),Wer=o("model_type"),Her=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),Uer=o("pretrained_model_name_or_path"),Jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),Yer=o("pretrained_model_name_or_path"),Ker=o(":"),Zer=l(),j=a("ul"),t6=a("li"),uue=a("strong"),eor=o("albert"),oor=o(" \u2014 "),rX=a("a"),ror=o("TFAlbertModel"),tor=o(" (ALBERT model)"),aor=l(),a6=a("li"),_ue=a("strong"),nor=o("bart"),sor=o(" \u2014 "),tX=a("a"),lor=o("TFBartModel"),ior=o(" (BART model)"),dor=l(),n6=a("li"),bue=a("strong"),cor=o("bert"),mor=o(" \u2014 "),aX=a("a"),gor=o("TFBertModel"),hor=o(" (BERT model)"),por=l(),s6=a("li"),vue=a("strong"),uor=o("blenderbot"),_or=o(" \u2014 "),nX=a("a"),bor=o("TFBlenderbotModel"),vor=o(" (Blenderbot model)"),For=l(),l6=a("li"),Fue=a("strong"),Tor=o("blenderbot-small"),Mor=o(" \u2014 "),sX=a("a"),Eor=o("TFBlenderbotSmallModel"),Cor=o(" (BlenderbotSmall model)"),wor=l(),i6=a("li"),Tue=a("strong"),Aor=o("camembert"),yor=o(" \u2014 "),lX=a("a"),Lor=o("TFCamembertModel"),xor=o(" (CamemBERT model)"),$or=l(),d6=a("li"),Mue=a("strong"),kor=o("clip"),Sor=o(" \u2014 "),iX=a("a"),Ror=o("TFCLIPModel"),Bor=o(" (CLIP model)"),Por=l(),c6=a("li"),Eue=a("strong"),Ior=o("convbert"),qor=o(" \u2014 "),dX=a("a"),Nor=o("TFConvBertModel"),jor=o(" (ConvBERT model)"),Dor=l(),f6=a("li"),Cue=a("strong"),Gor=o("convnext"),Oor=o(" \u2014 "),cX=a("a"),Vor=o("TFConvNextModel"),Xor=o(" (ConvNext model)"),zor=l(),m6=a("li"),wue=a("strong"),Qor=o("ctrl"),Wor=o(" \u2014 "),fX=a("a"),Hor=o("TFCTRLModel"),Uor=o(" (CTRL model)"),Jor=l(),g6=a("li"),Aue=a("strong"),Yor=o("deberta"),Kor=o(" \u2014 "),mX=a("a"),Zor=o("TFDebertaModel"),err=o(" (DeBERTa model)"),orr=l(),h6=a("li"),yue=a("strong"),rrr=o("deberta-v2"),trr=o(" \u2014 "),gX=a("a"),arr=o("TFDebertaV2Model"),nrr=o(" (DeBERTa-v2 model)"),srr=l(),p6=a("li"),Lue=a("strong"),lrr=o("distilbert"),irr=o(" \u2014 "),hX=a("a"),drr=o("TFDistilBertModel"),crr=o(" (DistilBERT model)"),frr=l(),u6=a("li"),xue=a("strong"),mrr=o("dpr"),grr=o(" \u2014 "),pX=a("a"),hrr=o("TFDPRQuestionEncoder"),prr=o(" (DPR model)"),urr=l(),_6=a("li"),$ue=a("strong"),_rr=o("electra"),brr=o(" \u2014 "),uX=a("a"),vrr=o("TFElectraModel"),Frr=o(" (ELECTRA model)"),Trr=l(),b6=a("li"),kue=a("strong"),Mrr=o("flaubert"),Err=o(" \u2014 "),_X=a("a"),Crr=o("TFFlaubertModel"),wrr=o(" (FlauBERT model)"),Arr=l(),$s=a("li"),Sue=a("strong"),yrr=o("funnel"),Lrr=o(" \u2014 "),bX=a("a"),xrr=o("TFFunnelModel"),$rr=o(" or "),vX=a("a"),krr=o("TFFunnelBaseModel"),Srr=o(" (Funnel Transformer model)"),Rrr=l(),v6=a("li"),Rue=a("strong"),Brr=o("gpt2"),Prr=o(" \u2014 "),FX=a("a"),Irr=o("TFGPT2Model"),qrr=o(" (OpenAI GPT-2 model)"),Nrr=l(),F6=a("li"),Bue=a("strong"),jrr=o("gptj"),Drr=o(" \u2014 "),TX=a("a"),Grr=o("TFGPTJModel"),Orr=o(" (GPT-J model)"),Vrr=l(),T6=a("li"),Pue=a("strong"),Xrr=o("hubert"),zrr=o(" \u2014 "),MX=a("a"),Qrr=o("TFHubertModel"),Wrr=o(" (Hubert model)"),Hrr=l(),M6=a("li"),Iue=a("strong"),Urr=o("layoutlm"),Jrr=o(" \u2014 "),EX=a("a"),Yrr=o("TFLayoutLMModel"),Krr=o(" (LayoutLM model)"),Zrr=l(),E6=a("li"),que=a("strong"),etr=o("led"),otr=o(" \u2014 "),CX=a("a"),rtr=o("TFLEDModel"),ttr=o(" (LED model)"),atr=l(),C6=a("li"),Nue=a("strong"),ntr=o("longformer"),str=o(" \u2014 "),wX=a("a"),ltr=o("TFLongformerModel"),itr=o(" (Longformer model)"),dtr=l(),w6=a("li"),jue=a("strong"),ctr=o("lxmert"),ftr=o(" \u2014 "),AX=a("a"),mtr=o("TFLxmertModel"),gtr=o(" (LXMERT model)"),htr=l(),A6=a("li"),Due=a("strong"),ptr=o("marian"),utr=o(" \u2014 "),yX=a("a"),_tr=o("TFMarianModel"),btr=o(" (Marian model)"),vtr=l(),y6=a("li"),Gue=a("strong"),Ftr=o("mbart"),Ttr=o(" \u2014 "),LX=a("a"),Mtr=o("TFMBartModel"),Etr=o(" (mBART model)"),Ctr=l(),L6=a("li"),Oue=a("strong"),wtr=o("mobilebert"),Atr=o(" \u2014 "),xX=a("a"),ytr=o("TFMobileBertModel"),Ltr=o(" (MobileBERT model)"),xtr=l(),x6=a("li"),Vue=a("strong"),$tr=o("mpnet"),ktr=o(" \u2014 "),$X=a("a"),Str=o("TFMPNetModel"),Rtr=o(" (MPNet model)"),Btr=l(),$6=a("li"),Xue=a("strong"),Ptr=o("mt5"),Itr=o(" \u2014 "),kX=a("a"),qtr=o("TFMT5Model"),Ntr=o(" (mT5 model)"),jtr=l(),k6=a("li"),zue=a("strong"),Dtr=o("openai-gpt"),Gtr=o(" \u2014 "),SX=a("a"),Otr=o("TFOpenAIGPTModel"),Vtr=o(" (OpenAI GPT model)"),Xtr=l(),S6=a("li"),Que=a("strong"),ztr=o("pegasus"),Qtr=o(" \u2014 "),RX=a("a"),Wtr=o("TFPegasusModel"),Htr=o(" (Pegasus model)"),Utr=l(),R6=a("li"),Wue=a("strong"),Jtr=o("rembert"),Ytr=o(" \u2014 "),BX=a("a"),Ktr=o("TFRemBertModel"),Ztr=o(" (RemBERT model)"),ear=l(),B6=a("li"),Hue=a("strong"),oar=o("roberta"),rar=o(" \u2014 "),PX=a("a"),tar=o("TFRobertaModel"),aar=o(" (RoBERTa model)"),nar=l(),P6=a("li"),Uue=a("strong"),sar=o("roformer"),lar=o(" \u2014 "),IX=a("a"),iar=o("TFRoFormerModel"),dar=o(" (RoFormer model)"),car=l(),I6=a("li"),Jue=a("strong"),far=o("speech_to_text"),mar=o(" \u2014 "),qX=a("a"),gar=o("TFSpeech2TextModel"),har=o(" (Speech2Text model)"),par=l(),q6=a("li"),Yue=a("strong"),uar=o("t5"),_ar=o(" \u2014 "),NX=a("a"),bar=o("TFT5Model"),Far=o(" (T5 model)"),Tar=l(),N6=a("li"),Kue=a("strong"),Mar=o("tapas"),Ear=o(" \u2014 "),jX=a("a"),Car=o("TFTapasModel"),war=o(" (TAPAS model)"),Aar=l(),j6=a("li"),Zue=a("strong"),yar=o("transfo-xl"),Lar=o(" \u2014 "),DX=a("a"),xar=o("TFTransfoXLModel"),$ar=o(" (Transformer-XL model)"),kar=l(),D6=a("li"),e_e=a("strong"),Sar=o("vit"),Rar=o(" \u2014 "),GX=a("a"),Bar=o("TFViTModel"),Par=o(" (ViT model)"),Iar=l(),G6=a("li"),o_e=a("strong"),qar=o("vit_mae"),Nar=o(" \u2014 "),OX=a("a"),jar=o("TFViTMAEModel"),Dar=o(" (ViTMAE model)"),Gar=l(),O6=a("li"),r_e=a("strong"),Oar=o("wav2vec2"),Var=o(" \u2014 "),VX=a("a"),Xar=o("TFWav2Vec2Model"),zar=o(" (Wav2Vec2 model)"),Qar=l(),V6=a("li"),t_e=a("strong"),War=o("xlm"),Har=o(" \u2014 "),XX=a("a"),Uar=o("TFXLMModel"),Jar=o(" (XLM model)"),Yar=l(),X6=a("li"),a_e=a("strong"),Kar=o("xlm-roberta"),Zar=o(" \u2014 "),zX=a("a"),enr=o("TFXLMRobertaModel"),onr=o(" (XLM-RoBERTa model)"),rnr=l(),z6=a("li"),n_e=a("strong"),tnr=o("xlnet"),anr=o(" \u2014 "),QX=a("a"),nnr=o("TFXLNetModel"),snr=o(" (XLNet model)"),lnr=l(),F(Q6.$$.fragment),NBe=l(),Bd=a("h2"),W6=a("a"),s_e=a("span"),F(ey.$$.fragment),inr=l(),l_e=a("span"),dnr=o("TFAutoModelForPreTraining"),jBe=l(),Jo=a("div"),F(oy.$$.fragment),cnr=l(),Pd=a("p"),fnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WX=a("a"),mnr=o("from_pretrained()"),gnr=o(" class method or the "),HX=a("a"),hnr=o("from_config()"),pnr=o(` class
method.`),unr=l(),ry=a("p"),_nr=o("This class cannot be instantiated directly using "),i_e=a("code"),bnr=o("__init__()"),vnr=o(" (throws an error)."),Fnr=l(),Et=a("div"),F(ty.$$.fragment),Tnr=l(),d_e=a("p"),Mnr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Enr=l(),Id=a("p"),Cnr=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),wnr=o("not"),Anr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),ynr=o("from_pretrained()"),Lnr=o(" to load the model weights."),xnr=l(),F(H6.$$.fragment),$nr=l(),Er=a("div"),F(ay.$$.fragment),knr=l(),f_e=a("p"),Snr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rnr=l(),Ja=a("p"),Bnr=o("The model class to instantiate is selected based on the "),m_e=a("code"),Pnr=o("model_type"),Inr=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),qnr=o("pretrained_model_name_or_path"),Nnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),jnr=o("pretrained_model_name_or_path"),Dnr=o(":"),Gnr=l(),ne=a("ul"),U6=a("li"),p_e=a("strong"),Onr=o("albert"),Vnr=o(" \u2014 "),JX=a("a"),Xnr=o("TFAlbertForPreTraining"),znr=o(" (ALBERT model)"),Qnr=l(),J6=a("li"),u_e=a("strong"),Wnr=o("bart"),Hnr=o(" \u2014 "),YX=a("a"),Unr=o("TFBartForConditionalGeneration"),Jnr=o(" (BART model)"),Ynr=l(),Y6=a("li"),__e=a("strong"),Knr=o("bert"),Znr=o(" \u2014 "),KX=a("a"),esr=o("TFBertForPreTraining"),osr=o(" (BERT model)"),rsr=l(),K6=a("li"),b_e=a("strong"),tsr=o("camembert"),asr=o(" \u2014 "),ZX=a("a"),nsr=o("TFCamembertForMaskedLM"),ssr=o(" (CamemBERT model)"),lsr=l(),Z6=a("li"),v_e=a("strong"),isr=o("ctrl"),dsr=o(" \u2014 "),ez=a("a"),csr=o("TFCTRLLMHeadModel"),fsr=o(" (CTRL model)"),msr=l(),eT=a("li"),F_e=a("strong"),gsr=o("distilbert"),hsr=o(" \u2014 "),oz=a("a"),psr=o("TFDistilBertForMaskedLM"),usr=o(" (DistilBERT model)"),_sr=l(),oT=a("li"),T_e=a("strong"),bsr=o("electra"),vsr=o(" \u2014 "),rz=a("a"),Fsr=o("TFElectraForPreTraining"),Tsr=o(" (ELECTRA model)"),Msr=l(),rT=a("li"),M_e=a("strong"),Esr=o("flaubert"),Csr=o(" \u2014 "),tz=a("a"),wsr=o("TFFlaubertWithLMHeadModel"),Asr=o(" (FlauBERT model)"),ysr=l(),tT=a("li"),E_e=a("strong"),Lsr=o("funnel"),xsr=o(" \u2014 "),az=a("a"),$sr=o("TFFunnelForPreTraining"),ksr=o(" (Funnel Transformer model)"),Ssr=l(),aT=a("li"),C_e=a("strong"),Rsr=o("gpt2"),Bsr=o(" \u2014 "),nz=a("a"),Psr=o("TFGPT2LMHeadModel"),Isr=o(" (OpenAI GPT-2 model)"),qsr=l(),nT=a("li"),w_e=a("strong"),Nsr=o("layoutlm"),jsr=o(" \u2014 "),sz=a("a"),Dsr=o("TFLayoutLMForMaskedLM"),Gsr=o(" (LayoutLM model)"),Osr=l(),sT=a("li"),A_e=a("strong"),Vsr=o("lxmert"),Xsr=o(" \u2014 "),lz=a("a"),zsr=o("TFLxmertForPreTraining"),Qsr=o(" (LXMERT model)"),Wsr=l(),lT=a("li"),y_e=a("strong"),Hsr=o("mobilebert"),Usr=o(" \u2014 "),iz=a("a"),Jsr=o("TFMobileBertForPreTraining"),Ysr=o(" (MobileBERT model)"),Ksr=l(),iT=a("li"),L_e=a("strong"),Zsr=o("mpnet"),elr=o(" \u2014 "),dz=a("a"),olr=o("TFMPNetForMaskedLM"),rlr=o(" (MPNet model)"),tlr=l(),dT=a("li"),x_e=a("strong"),alr=o("openai-gpt"),nlr=o(" \u2014 "),cz=a("a"),slr=o("TFOpenAIGPTLMHeadModel"),llr=o(" (OpenAI GPT model)"),ilr=l(),cT=a("li"),$_e=a("strong"),dlr=o("roberta"),clr=o(" \u2014 "),fz=a("a"),flr=o("TFRobertaForMaskedLM"),mlr=o(" (RoBERTa model)"),glr=l(),fT=a("li"),k_e=a("strong"),hlr=o("t5"),plr=o(" \u2014 "),mz=a("a"),ulr=o("TFT5ForConditionalGeneration"),_lr=o(" (T5 model)"),blr=l(),mT=a("li"),S_e=a("strong"),vlr=o("tapas"),Flr=o(" \u2014 "),gz=a("a"),Tlr=o("TFTapasForMaskedLM"),Mlr=o(" (TAPAS model)"),Elr=l(),gT=a("li"),R_e=a("strong"),Clr=o("transfo-xl"),wlr=o(" \u2014 "),hz=a("a"),Alr=o("TFTransfoXLLMHeadModel"),ylr=o(" (Transformer-XL model)"),Llr=l(),hT=a("li"),B_e=a("strong"),xlr=o("vit_mae"),$lr=o(" \u2014 "),pz=a("a"),klr=o("TFViTMAEForPreTraining"),Slr=o(" (ViTMAE model)"),Rlr=l(),pT=a("li"),P_e=a("strong"),Blr=o("xlm"),Plr=o(" \u2014 "),uz=a("a"),Ilr=o("TFXLMWithLMHeadModel"),qlr=o(" (XLM model)"),Nlr=l(),uT=a("li"),I_e=a("strong"),jlr=o("xlm-roberta"),Dlr=o(" \u2014 "),_z=a("a"),Glr=o("TFXLMRobertaForMaskedLM"),Olr=o(" (XLM-RoBERTa model)"),Vlr=l(),_T=a("li"),q_e=a("strong"),Xlr=o("xlnet"),zlr=o(" \u2014 "),bz=a("a"),Qlr=o("TFXLNetLMHeadModel"),Wlr=o(" (XLNet model)"),Hlr=l(),F(bT.$$.fragment),DBe=l(),qd=a("h2"),vT=a("a"),N_e=a("span"),F(ny.$$.fragment),Ulr=l(),j_e=a("span"),Jlr=o("TFAutoModelForCausalLM"),GBe=l(),Yo=a("div"),F(sy.$$.fragment),Ylr=l(),Nd=a("p"),Klr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vz=a("a"),Zlr=o("from_pretrained()"),eir=o(" class method or the "),Fz=a("a"),oir=o("from_config()"),rir=o(` class
method.`),tir=l(),ly=a("p"),air=o("This class cannot be instantiated directly using "),D_e=a("code"),nir=o("__init__()"),sir=o(" (throws an error)."),lir=l(),Ct=a("div"),F(iy.$$.fragment),iir=l(),G_e=a("p"),dir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cir=l(),jd=a("p"),fir=o(`Note:
Loading a model from its configuration file does `),O_e=a("strong"),mir=o("not"),gir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),hir=o("from_pretrained()"),pir=o(" to load the model weights."),uir=l(),F(FT.$$.fragment),_ir=l(),Cr=a("div"),F(dy.$$.fragment),bir=l(),V_e=a("p"),vir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Fir=l(),Ya=a("p"),Tir=o("The model class to instantiate is selected based on the "),X_e=a("code"),Mir=o("model_type"),Eir=o(` property of the config object (either
passed as an argument or loaded from `),z_e=a("code"),Cir=o("pretrained_model_name_or_path"),wir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=a("code"),Air=o("pretrained_model_name_or_path"),yir=o(":"),Lir=l(),Te=a("ul"),TT=a("li"),W_e=a("strong"),xir=o("bert"),$ir=o(" \u2014 "),Mz=a("a"),kir=o("TFBertLMHeadModel"),Sir=o(" (BERT model)"),Rir=l(),MT=a("li"),H_e=a("strong"),Bir=o("camembert"),Pir=o(" \u2014 "),Ez=a("a"),Iir=o("TFCamembertForCausalLM"),qir=o(" (CamemBERT model)"),Nir=l(),ET=a("li"),U_e=a("strong"),jir=o("ctrl"),Dir=o(" \u2014 "),Cz=a("a"),Gir=o("TFCTRLLMHeadModel"),Oir=o(" (CTRL model)"),Vir=l(),CT=a("li"),J_e=a("strong"),Xir=o("gpt2"),zir=o(" \u2014 "),wz=a("a"),Qir=o("TFGPT2LMHeadModel"),Wir=o(" (OpenAI GPT-2 model)"),Hir=l(),wT=a("li"),Y_e=a("strong"),Uir=o("gptj"),Jir=o(" \u2014 "),Az=a("a"),Yir=o("TFGPTJForCausalLM"),Kir=o(" (GPT-J model)"),Zir=l(),AT=a("li"),K_e=a("strong"),edr=o("openai-gpt"),odr=o(" \u2014 "),yz=a("a"),rdr=o("TFOpenAIGPTLMHeadModel"),tdr=o(" (OpenAI GPT model)"),adr=l(),yT=a("li"),Z_e=a("strong"),ndr=o("rembert"),sdr=o(" \u2014 "),Lz=a("a"),ldr=o("TFRemBertForCausalLM"),idr=o(" (RemBERT model)"),ddr=l(),LT=a("li"),e1e=a("strong"),cdr=o("roberta"),fdr=o(" \u2014 "),xz=a("a"),mdr=o("TFRobertaForCausalLM"),gdr=o(" (RoBERTa model)"),hdr=l(),xT=a("li"),o1e=a("strong"),pdr=o("roformer"),udr=o(" \u2014 "),$z=a("a"),_dr=o("TFRoFormerForCausalLM"),bdr=o(" (RoFormer model)"),vdr=l(),$T=a("li"),r1e=a("strong"),Fdr=o("transfo-xl"),Tdr=o(" \u2014 "),kz=a("a"),Mdr=o("TFTransfoXLLMHeadModel"),Edr=o(" (Transformer-XL model)"),Cdr=l(),kT=a("li"),t1e=a("strong"),wdr=o("xlm"),Adr=o(" \u2014 "),Sz=a("a"),ydr=o("TFXLMWithLMHeadModel"),Ldr=o(" (XLM model)"),xdr=l(),ST=a("li"),a1e=a("strong"),$dr=o("xlnet"),kdr=o(" \u2014 "),Rz=a("a"),Sdr=o("TFXLNetLMHeadModel"),Rdr=o(" (XLNet model)"),Bdr=l(),F(RT.$$.fragment),OBe=l(),Dd=a("h2"),BT=a("a"),n1e=a("span"),F(cy.$$.fragment),Pdr=l(),s1e=a("span"),Idr=o("TFAutoModelForImageClassification"),VBe=l(),Ko=a("div"),F(fy.$$.fragment),qdr=l(),Gd=a("p"),Ndr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Bz=a("a"),jdr=o("from_pretrained()"),Ddr=o(" class method or the "),Pz=a("a"),Gdr=o("from_config()"),Odr=o(` class
method.`),Vdr=l(),my=a("p"),Xdr=o("This class cannot be instantiated directly using "),l1e=a("code"),zdr=o("__init__()"),Qdr=o(" (throws an error)."),Wdr=l(),wt=a("div"),F(gy.$$.fragment),Hdr=l(),i1e=a("p"),Udr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jdr=l(),Od=a("p"),Ydr=o(`Note:
Loading a model from its configuration file does `),d1e=a("strong"),Kdr=o("not"),Zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),ecr=o("from_pretrained()"),ocr=o(" to load the model weights."),rcr=l(),F(PT.$$.fragment),tcr=l(),wr=a("div"),F(hy.$$.fragment),acr=l(),c1e=a("p"),ncr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),scr=l(),Ka=a("p"),lcr=o("The model class to instantiate is selected based on the "),f1e=a("code"),icr=o("model_type"),dcr=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),ccr=o("pretrained_model_name_or_path"),fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),mcr=o("pretrained_model_name_or_path"),gcr=o(":"),hcr=l(),py=a("ul"),IT=a("li"),h1e=a("strong"),pcr=o("convnext"),ucr=o(" \u2014 "),qz=a("a"),_cr=o("TFConvNextForImageClassification"),bcr=o(" (ConvNext model)"),vcr=l(),qT=a("li"),p1e=a("strong"),Fcr=o("vit"),Tcr=o(" \u2014 "),Nz=a("a"),Mcr=o("TFViTForImageClassification"),Ecr=o(" (ViT model)"),Ccr=l(),F(NT.$$.fragment),XBe=l(),Vd=a("h2"),jT=a("a"),u1e=a("span"),F(uy.$$.fragment),wcr=l(),_1e=a("span"),Acr=o("TFAutoModelForMaskedLM"),zBe=l(),Zo=a("div"),F(_y.$$.fragment),ycr=l(),Xd=a("p"),Lcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jz=a("a"),xcr=o("from_pretrained()"),$cr=o(" class method or the "),Dz=a("a"),kcr=o("from_config()"),Scr=o(` class
method.`),Rcr=l(),by=a("p"),Bcr=o("This class cannot be instantiated directly using "),b1e=a("code"),Pcr=o("__init__()"),Icr=o(" (throws an error)."),qcr=l(),At=a("div"),F(vy.$$.fragment),Ncr=l(),v1e=a("p"),jcr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Dcr=l(),zd=a("p"),Gcr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),Ocr=o("not"),Vcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),Xcr=o("from_pretrained()"),zcr=o(" to load the model weights."),Qcr=l(),F(DT.$$.fragment),Wcr=l(),Ar=a("div"),F(Fy.$$.fragment),Hcr=l(),T1e=a("p"),Ucr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Jcr=l(),Za=a("p"),Ycr=o("The model class to instantiate is selected based on the "),M1e=a("code"),Kcr=o("model_type"),Zcr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),efr=o("pretrained_model_name_or_path"),ofr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),rfr=o("pretrained_model_name_or_path"),tfr=o(":"),afr=l(),ie=a("ul"),GT=a("li"),w1e=a("strong"),nfr=o("albert"),sfr=o(" \u2014 "),Oz=a("a"),lfr=o("TFAlbertForMaskedLM"),ifr=o(" (ALBERT model)"),dfr=l(),OT=a("li"),A1e=a("strong"),cfr=o("bert"),ffr=o(" \u2014 "),Vz=a("a"),mfr=o("TFBertForMaskedLM"),gfr=o(" (BERT model)"),hfr=l(),VT=a("li"),y1e=a("strong"),pfr=o("camembert"),ufr=o(" \u2014 "),Xz=a("a"),_fr=o("TFCamembertForMaskedLM"),bfr=o(" (CamemBERT model)"),vfr=l(),XT=a("li"),L1e=a("strong"),Ffr=o("convbert"),Tfr=o(" \u2014 "),zz=a("a"),Mfr=o("TFConvBertForMaskedLM"),Efr=o(" (ConvBERT model)"),Cfr=l(),zT=a("li"),x1e=a("strong"),wfr=o("deberta"),Afr=o(" \u2014 "),Qz=a("a"),yfr=o("TFDebertaForMaskedLM"),Lfr=o(" (DeBERTa model)"),xfr=l(),QT=a("li"),$1e=a("strong"),$fr=o("deberta-v2"),kfr=o(" \u2014 "),Wz=a("a"),Sfr=o("TFDebertaV2ForMaskedLM"),Rfr=o(" (DeBERTa-v2 model)"),Bfr=l(),WT=a("li"),k1e=a("strong"),Pfr=o("distilbert"),Ifr=o(" \u2014 "),Hz=a("a"),qfr=o("TFDistilBertForMaskedLM"),Nfr=o(" (DistilBERT model)"),jfr=l(),HT=a("li"),S1e=a("strong"),Dfr=o("electra"),Gfr=o(" \u2014 "),Uz=a("a"),Ofr=o("TFElectraForMaskedLM"),Vfr=o(" (ELECTRA model)"),Xfr=l(),UT=a("li"),R1e=a("strong"),zfr=o("flaubert"),Qfr=o(" \u2014 "),Jz=a("a"),Wfr=o("TFFlaubertWithLMHeadModel"),Hfr=o(" (FlauBERT model)"),Ufr=l(),JT=a("li"),B1e=a("strong"),Jfr=o("funnel"),Yfr=o(" \u2014 "),Yz=a("a"),Kfr=o("TFFunnelForMaskedLM"),Zfr=o(" (Funnel Transformer model)"),emr=l(),YT=a("li"),P1e=a("strong"),omr=o("layoutlm"),rmr=o(" \u2014 "),Kz=a("a"),tmr=o("TFLayoutLMForMaskedLM"),amr=o(" (LayoutLM model)"),nmr=l(),KT=a("li"),I1e=a("strong"),smr=o("longformer"),lmr=o(" \u2014 "),Zz=a("a"),imr=o("TFLongformerForMaskedLM"),dmr=o(" (Longformer model)"),cmr=l(),ZT=a("li"),q1e=a("strong"),fmr=o("mobilebert"),mmr=o(" \u2014 "),eQ=a("a"),gmr=o("TFMobileBertForMaskedLM"),hmr=o(" (MobileBERT model)"),pmr=l(),e8=a("li"),N1e=a("strong"),umr=o("mpnet"),_mr=o(" \u2014 "),oQ=a("a"),bmr=o("TFMPNetForMaskedLM"),vmr=o(" (MPNet model)"),Fmr=l(),o8=a("li"),j1e=a("strong"),Tmr=o("rembert"),Mmr=o(" \u2014 "),rQ=a("a"),Emr=o("TFRemBertForMaskedLM"),Cmr=o(" (RemBERT model)"),wmr=l(),r8=a("li"),D1e=a("strong"),Amr=o("roberta"),ymr=o(" \u2014 "),tQ=a("a"),Lmr=o("TFRobertaForMaskedLM"),xmr=o(" (RoBERTa model)"),$mr=l(),t8=a("li"),G1e=a("strong"),kmr=o("roformer"),Smr=o(" \u2014 "),aQ=a("a"),Rmr=o("TFRoFormerForMaskedLM"),Bmr=o(" (RoFormer model)"),Pmr=l(),a8=a("li"),O1e=a("strong"),Imr=o("tapas"),qmr=o(" \u2014 "),nQ=a("a"),Nmr=o("TFTapasForMaskedLM"),jmr=o(" (TAPAS model)"),Dmr=l(),n8=a("li"),V1e=a("strong"),Gmr=o("xlm"),Omr=o(" \u2014 "),sQ=a("a"),Vmr=o("TFXLMWithLMHeadModel"),Xmr=o(" (XLM model)"),zmr=l(),s8=a("li"),X1e=a("strong"),Qmr=o("xlm-roberta"),Wmr=o(" \u2014 "),lQ=a("a"),Hmr=o("TFXLMRobertaForMaskedLM"),Umr=o(" (XLM-RoBERTa model)"),Jmr=l(),F(l8.$$.fragment),QBe=l(),Qd=a("h2"),i8=a("a"),z1e=a("span"),F(Ty.$$.fragment),Ymr=l(),Q1e=a("span"),Kmr=o("TFAutoModelForSeq2SeqLM"),WBe=l(),er=a("div"),F(My.$$.fragment),Zmr=l(),Wd=a("p"),egr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iQ=a("a"),ogr=o("from_pretrained()"),rgr=o(" class method or the "),dQ=a("a"),tgr=o("from_config()"),agr=o(` class
method.`),ngr=l(),Ey=a("p"),sgr=o("This class cannot be instantiated directly using "),W1e=a("code"),lgr=o("__init__()"),igr=o(" (throws an error)."),dgr=l(),yt=a("div"),F(Cy.$$.fragment),cgr=l(),H1e=a("p"),fgr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mgr=l(),Hd=a("p"),ggr=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),hgr=o("not"),pgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),ugr=o("from_pretrained()"),_gr=o(" to load the model weights."),bgr=l(),F(d8.$$.fragment),vgr=l(),yr=a("div"),F(wy.$$.fragment),Fgr=l(),J1e=a("p"),Tgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Mgr=l(),en=a("p"),Egr=o("The model class to instantiate is selected based on the "),Y1e=a("code"),Cgr=o("model_type"),wgr=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),Agr=o("pretrained_model_name_or_path"),ygr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),Lgr=o("pretrained_model_name_or_path"),xgr=o(":"),$gr=l(),ye=a("ul"),c8=a("li"),ebe=a("strong"),kgr=o("bart"),Sgr=o(" \u2014 "),fQ=a("a"),Rgr=o("TFBartForConditionalGeneration"),Bgr=o(" (BART model)"),Pgr=l(),f8=a("li"),obe=a("strong"),Igr=o("blenderbot"),qgr=o(" \u2014 "),mQ=a("a"),Ngr=o("TFBlenderbotForConditionalGeneration"),jgr=o(" (Blenderbot model)"),Dgr=l(),m8=a("li"),rbe=a("strong"),Ggr=o("blenderbot-small"),Ogr=o(" \u2014 "),gQ=a("a"),Vgr=o("TFBlenderbotSmallForConditionalGeneration"),Xgr=o(" (BlenderbotSmall model)"),zgr=l(),g8=a("li"),tbe=a("strong"),Qgr=o("encoder-decoder"),Wgr=o(" \u2014 "),hQ=a("a"),Hgr=o("TFEncoderDecoderModel"),Ugr=o(" (Encoder decoder model)"),Jgr=l(),h8=a("li"),abe=a("strong"),Ygr=o("led"),Kgr=o(" \u2014 "),pQ=a("a"),Zgr=o("TFLEDForConditionalGeneration"),ehr=o(" (LED model)"),ohr=l(),p8=a("li"),nbe=a("strong"),rhr=o("marian"),thr=o(" \u2014 "),uQ=a("a"),ahr=o("TFMarianMTModel"),nhr=o(" (Marian model)"),shr=l(),u8=a("li"),sbe=a("strong"),lhr=o("mbart"),ihr=o(" \u2014 "),_Q=a("a"),dhr=o("TFMBartForConditionalGeneration"),chr=o(" (mBART model)"),fhr=l(),_8=a("li"),lbe=a("strong"),mhr=o("mt5"),ghr=o(" \u2014 "),bQ=a("a"),hhr=o("TFMT5ForConditionalGeneration"),phr=o(" (mT5 model)"),uhr=l(),b8=a("li"),ibe=a("strong"),_hr=o("pegasus"),bhr=o(" \u2014 "),vQ=a("a"),vhr=o("TFPegasusForConditionalGeneration"),Fhr=o(" (Pegasus model)"),Thr=l(),v8=a("li"),dbe=a("strong"),Mhr=o("t5"),Ehr=o(" \u2014 "),FQ=a("a"),Chr=o("TFT5ForConditionalGeneration"),whr=o(" (T5 model)"),Ahr=l(),F(F8.$$.fragment),HBe=l(),Ud=a("h2"),T8=a("a"),cbe=a("span"),F(Ay.$$.fragment),yhr=l(),fbe=a("span"),Lhr=o("TFAutoModelForSequenceClassification"),UBe=l(),or=a("div"),F(yy.$$.fragment),xhr=l(),Jd=a("p"),$hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TQ=a("a"),khr=o("from_pretrained()"),Shr=o(" class method or the "),MQ=a("a"),Rhr=o("from_config()"),Bhr=o(` class
method.`),Phr=l(),Ly=a("p"),Ihr=o("This class cannot be instantiated directly using "),mbe=a("code"),qhr=o("__init__()"),Nhr=o(" (throws an error)."),jhr=l(),Lt=a("div"),F(xy.$$.fragment),Dhr=l(),gbe=a("p"),Ghr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ohr=l(),Yd=a("p"),Vhr=o(`Note:
Loading a model from its configuration file does `),hbe=a("strong"),Xhr=o("not"),zhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),Qhr=o("from_pretrained()"),Whr=o(" to load the model weights."),Hhr=l(),F(M8.$$.fragment),Uhr=l(),Lr=a("div"),F($y.$$.fragment),Jhr=l(),pbe=a("p"),Yhr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Khr=l(),on=a("p"),Zhr=o("The model class to instantiate is selected based on the "),ube=a("code"),epr=o("model_type"),opr=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),rpr=o("pretrained_model_name_or_path"),tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bbe=a("code"),apr=o("pretrained_model_name_or_path"),npr=o(":"),spr=l(),Z=a("ul"),E8=a("li"),vbe=a("strong"),lpr=o("albert"),ipr=o(" \u2014 "),CQ=a("a"),dpr=o("TFAlbertForSequenceClassification"),cpr=o(" (ALBERT model)"),fpr=l(),C8=a("li"),Fbe=a("strong"),mpr=o("bert"),gpr=o(" \u2014 "),wQ=a("a"),hpr=o("TFBertForSequenceClassification"),ppr=o(" (BERT model)"),upr=l(),w8=a("li"),Tbe=a("strong"),_pr=o("camembert"),bpr=o(" \u2014 "),AQ=a("a"),vpr=o("TFCamembertForSequenceClassification"),Fpr=o(" (CamemBERT model)"),Tpr=l(),A8=a("li"),Mbe=a("strong"),Mpr=o("convbert"),Epr=o(" \u2014 "),yQ=a("a"),Cpr=o("TFConvBertForSequenceClassification"),wpr=o(" (ConvBERT model)"),Apr=l(),y8=a("li"),Ebe=a("strong"),ypr=o("ctrl"),Lpr=o(" \u2014 "),LQ=a("a"),xpr=o("TFCTRLForSequenceClassification"),$pr=o(" (CTRL model)"),kpr=l(),L8=a("li"),Cbe=a("strong"),Spr=o("deberta"),Rpr=o(" \u2014 "),xQ=a("a"),Bpr=o("TFDebertaForSequenceClassification"),Ppr=o(" (DeBERTa model)"),Ipr=l(),x8=a("li"),wbe=a("strong"),qpr=o("deberta-v2"),Npr=o(" \u2014 "),$Q=a("a"),jpr=o("TFDebertaV2ForSequenceClassification"),Dpr=o(" (DeBERTa-v2 model)"),Gpr=l(),$8=a("li"),Abe=a("strong"),Opr=o("distilbert"),Vpr=o(" \u2014 "),kQ=a("a"),Xpr=o("TFDistilBertForSequenceClassification"),zpr=o(" (DistilBERT model)"),Qpr=l(),k8=a("li"),ybe=a("strong"),Wpr=o("electra"),Hpr=o(" \u2014 "),SQ=a("a"),Upr=o("TFElectraForSequenceClassification"),Jpr=o(" (ELECTRA model)"),Ypr=l(),S8=a("li"),Lbe=a("strong"),Kpr=o("flaubert"),Zpr=o(" \u2014 "),RQ=a("a"),eur=o("TFFlaubertForSequenceClassification"),our=o(" (FlauBERT model)"),rur=l(),R8=a("li"),xbe=a("strong"),tur=o("funnel"),aur=o(" \u2014 "),BQ=a("a"),nur=o("TFFunnelForSequenceClassification"),sur=o(" (Funnel Transformer model)"),lur=l(),B8=a("li"),$be=a("strong"),iur=o("gpt2"),dur=o(" \u2014 "),PQ=a("a"),cur=o("TFGPT2ForSequenceClassification"),fur=o(" (OpenAI GPT-2 model)"),mur=l(),P8=a("li"),kbe=a("strong"),gur=o("gptj"),hur=o(" \u2014 "),IQ=a("a"),pur=o("TFGPTJForSequenceClassification"),uur=o(" (GPT-J model)"),_ur=l(),I8=a("li"),Sbe=a("strong"),bur=o("layoutlm"),vur=o(" \u2014 "),qQ=a("a"),Fur=o("TFLayoutLMForSequenceClassification"),Tur=o(" (LayoutLM model)"),Mur=l(),q8=a("li"),Rbe=a("strong"),Eur=o("longformer"),Cur=o(" \u2014 "),NQ=a("a"),wur=o("TFLongformerForSequenceClassification"),Aur=o(" (Longformer model)"),yur=l(),N8=a("li"),Bbe=a("strong"),Lur=o("mobilebert"),xur=o(" \u2014 "),jQ=a("a"),$ur=o("TFMobileBertForSequenceClassification"),kur=o(" (MobileBERT model)"),Sur=l(),j8=a("li"),Pbe=a("strong"),Rur=o("mpnet"),Bur=o(" \u2014 "),DQ=a("a"),Pur=o("TFMPNetForSequenceClassification"),Iur=o(" (MPNet model)"),qur=l(),D8=a("li"),Ibe=a("strong"),Nur=o("openai-gpt"),jur=o(" \u2014 "),GQ=a("a"),Dur=o("TFOpenAIGPTForSequenceClassification"),Gur=o(" (OpenAI GPT model)"),Our=l(),G8=a("li"),qbe=a("strong"),Vur=o("rembert"),Xur=o(" \u2014 "),OQ=a("a"),zur=o("TFRemBertForSequenceClassification"),Qur=o(" (RemBERT model)"),Wur=l(),O8=a("li"),Nbe=a("strong"),Hur=o("roberta"),Uur=o(" \u2014 "),VQ=a("a"),Jur=o("TFRobertaForSequenceClassification"),Yur=o(" (RoBERTa model)"),Kur=l(),V8=a("li"),jbe=a("strong"),Zur=o("roformer"),e_r=o(" \u2014 "),XQ=a("a"),o_r=o("TFRoFormerForSequenceClassification"),r_r=o(" (RoFormer model)"),t_r=l(),X8=a("li"),Dbe=a("strong"),a_r=o("tapas"),n_r=o(" \u2014 "),zQ=a("a"),s_r=o("TFTapasForSequenceClassification"),l_r=o(" (TAPAS model)"),i_r=l(),z8=a("li"),Gbe=a("strong"),d_r=o("transfo-xl"),c_r=o(" \u2014 "),QQ=a("a"),f_r=o("TFTransfoXLForSequenceClassification"),m_r=o(" (Transformer-XL model)"),g_r=l(),Q8=a("li"),Obe=a("strong"),h_r=o("xlm"),p_r=o(" \u2014 "),WQ=a("a"),u_r=o("TFXLMForSequenceClassification"),__r=o(" (XLM model)"),b_r=l(),W8=a("li"),Vbe=a("strong"),v_r=o("xlm-roberta"),F_r=o(" \u2014 "),HQ=a("a"),T_r=o("TFXLMRobertaForSequenceClassification"),M_r=o(" (XLM-RoBERTa model)"),E_r=l(),H8=a("li"),Xbe=a("strong"),C_r=o("xlnet"),w_r=o(" \u2014 "),UQ=a("a"),A_r=o("TFXLNetForSequenceClassification"),y_r=o(" (XLNet model)"),L_r=l(),F(U8.$$.fragment),JBe=l(),Kd=a("h2"),J8=a("a"),zbe=a("span"),F(ky.$$.fragment),x_r=l(),Qbe=a("span"),$_r=o("TFAutoModelForMultipleChoice"),YBe=l(),rr=a("div"),F(Sy.$$.fragment),k_r=l(),Zd=a("p"),S_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JQ=a("a"),R_r=o("from_pretrained()"),B_r=o(" class method or the "),YQ=a("a"),P_r=o("from_config()"),I_r=o(` class
method.`),q_r=l(),Ry=a("p"),N_r=o("This class cannot be instantiated directly using "),Wbe=a("code"),j_r=o("__init__()"),D_r=o(" (throws an error)."),G_r=l(),xt=a("div"),F(By.$$.fragment),O_r=l(),Hbe=a("p"),V_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),X_r=l(),ec=a("p"),z_r=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),Q_r=o("not"),W_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),H_r=o("from_pretrained()"),U_r=o(" to load the model weights."),J_r=l(),F(Y8.$$.fragment),Y_r=l(),xr=a("div"),F(Py.$$.fragment),K_r=l(),Jbe=a("p"),Z_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),e1r=l(),rn=a("p"),o1r=o("The model class to instantiate is selected based on the "),Ybe=a("code"),r1r=o("model_type"),t1r=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),a1r=o("pretrained_model_name_or_path"),n1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),s1r=o("pretrained_model_name_or_path"),l1r=o(":"),i1r=l(),pe=a("ul"),K8=a("li"),e2e=a("strong"),d1r=o("albert"),c1r=o(" \u2014 "),ZQ=a("a"),f1r=o("TFAlbertForMultipleChoice"),m1r=o(" (ALBERT model)"),g1r=l(),Z8=a("li"),o2e=a("strong"),h1r=o("bert"),p1r=o(" \u2014 "),eW=a("a"),u1r=o("TFBertForMultipleChoice"),_1r=o(" (BERT model)"),b1r=l(),e9=a("li"),r2e=a("strong"),v1r=o("camembert"),F1r=o(" \u2014 "),oW=a("a"),T1r=o("TFCamembertForMultipleChoice"),M1r=o(" (CamemBERT model)"),E1r=l(),o9=a("li"),t2e=a("strong"),C1r=o("convbert"),w1r=o(" \u2014 "),rW=a("a"),A1r=o("TFConvBertForMultipleChoice"),y1r=o(" (ConvBERT model)"),L1r=l(),r9=a("li"),a2e=a("strong"),x1r=o("distilbert"),$1r=o(" \u2014 "),tW=a("a"),k1r=o("TFDistilBertForMultipleChoice"),S1r=o(" (DistilBERT model)"),R1r=l(),t9=a("li"),n2e=a("strong"),B1r=o("electra"),P1r=o(" \u2014 "),aW=a("a"),I1r=o("TFElectraForMultipleChoice"),q1r=o(" (ELECTRA model)"),N1r=l(),a9=a("li"),s2e=a("strong"),j1r=o("flaubert"),D1r=o(" \u2014 "),nW=a("a"),G1r=o("TFFlaubertForMultipleChoice"),O1r=o(" (FlauBERT model)"),V1r=l(),n9=a("li"),l2e=a("strong"),X1r=o("funnel"),z1r=o(" \u2014 "),sW=a("a"),Q1r=o("TFFunnelForMultipleChoice"),W1r=o(" (Funnel Transformer model)"),H1r=l(),s9=a("li"),i2e=a("strong"),U1r=o("longformer"),J1r=o(" \u2014 "),lW=a("a"),Y1r=o("TFLongformerForMultipleChoice"),K1r=o(" (Longformer model)"),Z1r=l(),l9=a("li"),d2e=a("strong"),ebr=o("mobilebert"),obr=o(" \u2014 "),iW=a("a"),rbr=o("TFMobileBertForMultipleChoice"),tbr=o(" (MobileBERT model)"),abr=l(),i9=a("li"),c2e=a("strong"),nbr=o("mpnet"),sbr=o(" \u2014 "),dW=a("a"),lbr=o("TFMPNetForMultipleChoice"),ibr=o(" (MPNet model)"),dbr=l(),d9=a("li"),f2e=a("strong"),cbr=o("rembert"),fbr=o(" \u2014 "),cW=a("a"),mbr=o("TFRemBertForMultipleChoice"),gbr=o(" (RemBERT model)"),hbr=l(),c9=a("li"),m2e=a("strong"),pbr=o("roberta"),ubr=o(" \u2014 "),fW=a("a"),_br=o("TFRobertaForMultipleChoice"),bbr=o(" (RoBERTa model)"),vbr=l(),f9=a("li"),g2e=a("strong"),Fbr=o("roformer"),Tbr=o(" \u2014 "),mW=a("a"),Mbr=o("TFRoFormerForMultipleChoice"),Ebr=o(" (RoFormer model)"),Cbr=l(),m9=a("li"),h2e=a("strong"),wbr=o("xlm"),Abr=o(" \u2014 "),gW=a("a"),ybr=o("TFXLMForMultipleChoice"),Lbr=o(" (XLM model)"),xbr=l(),g9=a("li"),p2e=a("strong"),$br=o("xlm-roberta"),kbr=o(" \u2014 "),hW=a("a"),Sbr=o("TFXLMRobertaForMultipleChoice"),Rbr=o(" (XLM-RoBERTa model)"),Bbr=l(),h9=a("li"),u2e=a("strong"),Pbr=o("xlnet"),Ibr=o(" \u2014 "),pW=a("a"),qbr=o("TFXLNetForMultipleChoice"),Nbr=o(" (XLNet model)"),jbr=l(),F(p9.$$.fragment),KBe=l(),oc=a("h2"),u9=a("a"),_2e=a("span"),F(Iy.$$.fragment),Dbr=l(),b2e=a("span"),Gbr=o("TFAutoModelForTableQuestionAnswering"),ZBe=l(),tr=a("div"),F(qy.$$.fragment),Obr=l(),rc=a("p"),Vbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uW=a("a"),Xbr=o("from_pretrained()"),zbr=o(" class method or the "),_W=a("a"),Qbr=o("from_config()"),Wbr=o(` class
method.`),Hbr=l(),Ny=a("p"),Ubr=o("This class cannot be instantiated directly using "),v2e=a("code"),Jbr=o("__init__()"),Ybr=o(" (throws an error)."),Kbr=l(),$t=a("div"),F(jy.$$.fragment),Zbr=l(),F2e=a("p"),e2r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),o2r=l(),tc=a("p"),r2r=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),t2r=o("not"),a2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),n2r=o("from_pretrained()"),s2r=o(" to load the model weights."),l2r=l(),F(_9.$$.fragment),i2r=l(),$r=a("div"),F(Dy.$$.fragment),d2r=l(),M2e=a("p"),c2r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),f2r=l(),tn=a("p"),m2r=o("The model class to instantiate is selected based on the "),E2e=a("code"),g2r=o("model_type"),h2r=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),p2r=o("pretrained_model_name_or_path"),u2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),_2r=o("pretrained_model_name_or_path"),b2r=o(":"),v2r=l(),A2e=a("ul"),b9=a("li"),y2e=a("strong"),F2r=o("tapas"),T2r=o(" \u2014 "),vW=a("a"),M2r=o("TFTapasForQuestionAnswering"),E2r=o(" (TAPAS model)"),C2r=l(),F(v9.$$.fragment),ePe=l(),ac=a("h2"),F9=a("a"),L2e=a("span"),F(Gy.$$.fragment),w2r=l(),x2e=a("span"),A2r=o("TFAutoModelForTokenClassification"),oPe=l(),ar=a("div"),F(Oy.$$.fragment),y2r=l(),nc=a("p"),L2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FW=a("a"),x2r=o("from_pretrained()"),$2r=o(" class method or the "),TW=a("a"),k2r=o("from_config()"),S2r=o(` class
method.`),R2r=l(),Vy=a("p"),B2r=o("This class cannot be instantiated directly using "),$2e=a("code"),P2r=o("__init__()"),I2r=o(" (throws an error)."),q2r=l(),kt=a("div"),F(Xy.$$.fragment),N2r=l(),k2e=a("p"),j2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),D2r=l(),sc=a("p"),G2r=o(`Note:
Loading a model from its configuration file does `),S2e=a("strong"),O2r=o("not"),V2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),X2r=o("from_pretrained()"),z2r=o(" to load the model weights."),Q2r=l(),F(T9.$$.fragment),W2r=l(),kr=a("div"),F(zy.$$.fragment),H2r=l(),R2e=a("p"),U2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),J2r=l(),an=a("p"),Y2r=o("The model class to instantiate is selected based on the "),B2e=a("code"),K2r=o("model_type"),Z2r=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),evr=o("pretrained_model_name_or_path"),ovr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),rvr=o("pretrained_model_name_or_path"),tvr=o(":"),avr=l(),de=a("ul"),M9=a("li"),q2e=a("strong"),nvr=o("albert"),svr=o(" \u2014 "),EW=a("a"),lvr=o("TFAlbertForTokenClassification"),ivr=o(" (ALBERT model)"),dvr=l(),E9=a("li"),N2e=a("strong"),cvr=o("bert"),fvr=o(" \u2014 "),CW=a("a"),mvr=o("TFBertForTokenClassification"),gvr=o(" (BERT model)"),hvr=l(),C9=a("li"),j2e=a("strong"),pvr=o("camembert"),uvr=o(" \u2014 "),wW=a("a"),_vr=o("TFCamembertForTokenClassification"),bvr=o(" (CamemBERT model)"),vvr=l(),w9=a("li"),D2e=a("strong"),Fvr=o("convbert"),Tvr=o(" \u2014 "),AW=a("a"),Mvr=o("TFConvBertForTokenClassification"),Evr=o(" (ConvBERT model)"),Cvr=l(),A9=a("li"),G2e=a("strong"),wvr=o("deberta"),Avr=o(" \u2014 "),yW=a("a"),yvr=o("TFDebertaForTokenClassification"),Lvr=o(" (DeBERTa model)"),xvr=l(),y9=a("li"),O2e=a("strong"),$vr=o("deberta-v2"),kvr=o(" \u2014 "),LW=a("a"),Svr=o("TFDebertaV2ForTokenClassification"),Rvr=o(" (DeBERTa-v2 model)"),Bvr=l(),L9=a("li"),V2e=a("strong"),Pvr=o("distilbert"),Ivr=o(" \u2014 "),xW=a("a"),qvr=o("TFDistilBertForTokenClassification"),Nvr=o(" (DistilBERT model)"),jvr=l(),x9=a("li"),X2e=a("strong"),Dvr=o("electra"),Gvr=o(" \u2014 "),$W=a("a"),Ovr=o("TFElectraForTokenClassification"),Vvr=o(" (ELECTRA model)"),Xvr=l(),$9=a("li"),z2e=a("strong"),zvr=o("flaubert"),Qvr=o(" \u2014 "),kW=a("a"),Wvr=o("TFFlaubertForTokenClassification"),Hvr=o(" (FlauBERT model)"),Uvr=l(),k9=a("li"),Q2e=a("strong"),Jvr=o("funnel"),Yvr=o(" \u2014 "),SW=a("a"),Kvr=o("TFFunnelForTokenClassification"),Zvr=o(" (Funnel Transformer model)"),eFr=l(),S9=a("li"),W2e=a("strong"),oFr=o("layoutlm"),rFr=o(" \u2014 "),RW=a("a"),tFr=o("TFLayoutLMForTokenClassification"),aFr=o(" (LayoutLM model)"),nFr=l(),R9=a("li"),H2e=a("strong"),sFr=o("longformer"),lFr=o(" \u2014 "),BW=a("a"),iFr=o("TFLongformerForTokenClassification"),dFr=o(" (Longformer model)"),cFr=l(),B9=a("li"),U2e=a("strong"),fFr=o("mobilebert"),mFr=o(" \u2014 "),PW=a("a"),gFr=o("TFMobileBertForTokenClassification"),hFr=o(" (MobileBERT model)"),pFr=l(),P9=a("li"),J2e=a("strong"),uFr=o("mpnet"),_Fr=o(" \u2014 "),IW=a("a"),bFr=o("TFMPNetForTokenClassification"),vFr=o(" (MPNet model)"),FFr=l(),I9=a("li"),Y2e=a("strong"),TFr=o("rembert"),MFr=o(" \u2014 "),qW=a("a"),EFr=o("TFRemBertForTokenClassification"),CFr=o(" (RemBERT model)"),wFr=l(),q9=a("li"),K2e=a("strong"),AFr=o("roberta"),yFr=o(" \u2014 "),NW=a("a"),LFr=o("TFRobertaForTokenClassification"),xFr=o(" (RoBERTa model)"),$Fr=l(),N9=a("li"),Z2e=a("strong"),kFr=o("roformer"),SFr=o(" \u2014 "),jW=a("a"),RFr=o("TFRoFormerForTokenClassification"),BFr=o(" (RoFormer model)"),PFr=l(),j9=a("li"),eve=a("strong"),IFr=o("xlm"),qFr=o(" \u2014 "),DW=a("a"),NFr=o("TFXLMForTokenClassification"),jFr=o(" (XLM model)"),DFr=l(),D9=a("li"),ove=a("strong"),GFr=o("xlm-roberta"),OFr=o(" \u2014 "),GW=a("a"),VFr=o("TFXLMRobertaForTokenClassification"),XFr=o(" (XLM-RoBERTa model)"),zFr=l(),G9=a("li"),rve=a("strong"),QFr=o("xlnet"),WFr=o(" \u2014 "),OW=a("a"),HFr=o("TFXLNetForTokenClassification"),UFr=o(" (XLNet model)"),JFr=l(),F(O9.$$.fragment),rPe=l(),lc=a("h2"),V9=a("a"),tve=a("span"),F(Qy.$$.fragment),YFr=l(),ave=a("span"),KFr=o("TFAutoModelForQuestionAnswering"),tPe=l(),nr=a("div"),F(Wy.$$.fragment),ZFr=l(),ic=a("p"),e0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VW=a("a"),o0r=o("from_pretrained()"),r0r=o(" class method or the "),XW=a("a"),t0r=o("from_config()"),a0r=o(` class
method.`),n0r=l(),Hy=a("p"),s0r=o("This class cannot be instantiated directly using "),nve=a("code"),l0r=o("__init__()"),i0r=o(" (throws an error)."),d0r=l(),St=a("div"),F(Uy.$$.fragment),c0r=l(),sve=a("p"),f0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),m0r=l(),dc=a("p"),g0r=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),h0r=o("not"),p0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),u0r=o("from_pretrained()"),_0r=o(" to load the model weights."),b0r=l(),F(X9.$$.fragment),v0r=l(),Sr=a("div"),F(Jy.$$.fragment),F0r=l(),ive=a("p"),T0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),M0r=l(),nn=a("p"),E0r=o("The model class to instantiate is selected based on the "),dve=a("code"),C0r=o("model_type"),w0r=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),A0r=o("pretrained_model_name_or_path"),y0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),L0r=o("pretrained_model_name_or_path"),x0r=o(":"),$0r=l(),ce=a("ul"),z9=a("li"),mve=a("strong"),k0r=o("albert"),S0r=o(" \u2014 "),QW=a("a"),R0r=o("TFAlbertForQuestionAnswering"),B0r=o(" (ALBERT model)"),P0r=l(),Q9=a("li"),gve=a("strong"),I0r=o("bert"),q0r=o(" \u2014 "),WW=a("a"),N0r=o("TFBertForQuestionAnswering"),j0r=o(" (BERT model)"),D0r=l(),W9=a("li"),hve=a("strong"),G0r=o("camembert"),O0r=o(" \u2014 "),HW=a("a"),V0r=o("TFCamembertForQuestionAnswering"),X0r=o(" (CamemBERT model)"),z0r=l(),H9=a("li"),pve=a("strong"),Q0r=o("convbert"),W0r=o(" \u2014 "),UW=a("a"),H0r=o("TFConvBertForQuestionAnswering"),U0r=o(" (ConvBERT model)"),J0r=l(),U9=a("li"),uve=a("strong"),Y0r=o("deberta"),K0r=o(" \u2014 "),JW=a("a"),Z0r=o("TFDebertaForQuestionAnswering"),e6r=o(" (DeBERTa model)"),o6r=l(),J9=a("li"),_ve=a("strong"),r6r=o("deberta-v2"),t6r=o(" \u2014 "),YW=a("a"),a6r=o("TFDebertaV2ForQuestionAnswering"),n6r=o(" (DeBERTa-v2 model)"),s6r=l(),Y9=a("li"),bve=a("strong"),l6r=o("distilbert"),i6r=o(" \u2014 "),KW=a("a"),d6r=o("TFDistilBertForQuestionAnswering"),c6r=o(" (DistilBERT model)"),f6r=l(),K9=a("li"),vve=a("strong"),m6r=o("electra"),g6r=o(" \u2014 "),ZW=a("a"),h6r=o("TFElectraForQuestionAnswering"),p6r=o(" (ELECTRA model)"),u6r=l(),Z9=a("li"),Fve=a("strong"),_6r=o("flaubert"),b6r=o(" \u2014 "),eH=a("a"),v6r=o("TFFlaubertForQuestionAnsweringSimple"),F6r=o(" (FlauBERT model)"),T6r=l(),eM=a("li"),Tve=a("strong"),M6r=o("funnel"),E6r=o(" \u2014 "),oH=a("a"),C6r=o("TFFunnelForQuestionAnswering"),w6r=o(" (Funnel Transformer model)"),A6r=l(),oM=a("li"),Mve=a("strong"),y6r=o("gptj"),L6r=o(" \u2014 "),rH=a("a"),x6r=o("TFGPTJForQuestionAnswering"),$6r=o(" (GPT-J model)"),k6r=l(),rM=a("li"),Eve=a("strong"),S6r=o("longformer"),R6r=o(" \u2014 "),tH=a("a"),B6r=o("TFLongformerForQuestionAnswering"),P6r=o(" (Longformer model)"),I6r=l(),tM=a("li"),Cve=a("strong"),q6r=o("mobilebert"),N6r=o(" \u2014 "),aH=a("a"),j6r=o("TFMobileBertForQuestionAnswering"),D6r=o(" (MobileBERT model)"),G6r=l(),aM=a("li"),wve=a("strong"),O6r=o("mpnet"),V6r=o(" \u2014 "),nH=a("a"),X6r=o("TFMPNetForQuestionAnswering"),z6r=o(" (MPNet model)"),Q6r=l(),nM=a("li"),Ave=a("strong"),W6r=o("rembert"),H6r=o(" \u2014 "),sH=a("a"),U6r=o("TFRemBertForQuestionAnswering"),J6r=o(" (RemBERT model)"),Y6r=l(),sM=a("li"),yve=a("strong"),K6r=o("roberta"),Z6r=o(" \u2014 "),lH=a("a"),eTr=o("TFRobertaForQuestionAnswering"),oTr=o(" (RoBERTa model)"),rTr=l(),lM=a("li"),Lve=a("strong"),tTr=o("roformer"),aTr=o(" \u2014 "),iH=a("a"),nTr=o("TFRoFormerForQuestionAnswering"),sTr=o(" (RoFormer model)"),lTr=l(),iM=a("li"),xve=a("strong"),iTr=o("xlm"),dTr=o(" \u2014 "),dH=a("a"),cTr=o("TFXLMForQuestionAnsweringSimple"),fTr=o(" (XLM model)"),mTr=l(),dM=a("li"),$ve=a("strong"),gTr=o("xlm-roberta"),hTr=o(" \u2014 "),cH=a("a"),pTr=o("TFXLMRobertaForQuestionAnswering"),uTr=o(" (XLM-RoBERTa model)"),_Tr=l(),cM=a("li"),kve=a("strong"),bTr=o("xlnet"),vTr=o(" \u2014 "),fH=a("a"),FTr=o("TFXLNetForQuestionAnsweringSimple"),TTr=o(" (XLNet model)"),MTr=l(),F(fM.$$.fragment),aPe=l(),cc=a("h2"),mM=a("a"),Sve=a("span"),F(Yy.$$.fragment),ETr=l(),Rve=a("span"),CTr=o("TFAutoModelForVision2Seq"),nPe=l(),sr=a("div"),F(Ky.$$.fragment),wTr=l(),fc=a("p"),ATr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mH=a("a"),yTr=o("from_pretrained()"),LTr=o(" class method or the "),gH=a("a"),xTr=o("from_config()"),$Tr=o(` class
method.`),kTr=l(),Zy=a("p"),STr=o("This class cannot be instantiated directly using "),Bve=a("code"),RTr=o("__init__()"),BTr=o(" (throws an error)."),PTr=l(),Rt=a("div"),F(eL.$$.fragment),ITr=l(),Pve=a("p"),qTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NTr=l(),mc=a("p"),jTr=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),DTr=o("not"),GTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),OTr=o("from_pretrained()"),VTr=o(" to load the model weights."),XTr=l(),F(gM.$$.fragment),zTr=l(),Rr=a("div"),F(oL.$$.fragment),QTr=l(),qve=a("p"),WTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),HTr=l(),sn=a("p"),UTr=o("The model class to instantiate is selected based on the "),Nve=a("code"),JTr=o("model_type"),YTr=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),KTr=o("pretrained_model_name_or_path"),ZTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),e8r=o("pretrained_model_name_or_path"),o8r=o(":"),r8r=l(),Gve=a("ul"),hM=a("li"),Ove=a("strong"),t8r=o("vision-encoder-decoder"),a8r=o(" \u2014 "),pH=a("a"),n8r=o("TFVisionEncoderDecoderModel"),s8r=o(" (Vision Encoder decoder model)"),l8r=l(),F(pM.$$.fragment),sPe=l(),gc=a("h2"),uM=a("a"),Vve=a("span"),F(rL.$$.fragment),i8r=l(),Xve=a("span"),d8r=o("TFAutoModelForSpeechSeq2Seq"),lPe=l(),lr=a("div"),F(tL.$$.fragment),c8r=l(),hc=a("p"),f8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uH=a("a"),m8r=o("from_pretrained()"),g8r=o(" class method or the "),_H=a("a"),h8r=o("from_config()"),p8r=o(` class
method.`),u8r=l(),aL=a("p"),_8r=o("This class cannot be instantiated directly using "),zve=a("code"),b8r=o("__init__()"),v8r=o(" (throws an error)."),F8r=l(),Bt=a("div"),F(nL.$$.fragment),T8r=l(),Qve=a("p"),M8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),E8r=l(),pc=a("p"),C8r=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),w8r=o("not"),A8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),y8r=o("from_pretrained()"),L8r=o(" to load the model weights."),x8r=l(),F(_M.$$.fragment),$8r=l(),Br=a("div"),F(sL.$$.fragment),k8r=l(),Hve=a("p"),S8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),R8r=l(),ln=a("p"),B8r=o("The model class to instantiate is selected based on the "),Uve=a("code"),P8r=o("model_type"),I8r=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),q8r=o("pretrained_model_name_or_path"),N8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),j8r=o("pretrained_model_name_or_path"),D8r=o(":"),G8r=l(),Kve=a("ul"),bM=a("li"),Zve=a("strong"),O8r=o("speech_to_text"),V8r=o(" \u2014 "),vH=a("a"),X8r=o("TFSpeech2TextForConditionalGeneration"),z8r=o(" (Speech2Text model)"),Q8r=l(),F(vM.$$.fragment),iPe=l(),uc=a("h2"),FM=a("a"),eFe=a("span"),F(lL.$$.fragment),W8r=l(),oFe=a("span"),H8r=o("FlaxAutoModel"),dPe=l(),ir=a("div"),F(iL.$$.fragment),U8r=l(),_c=a("p"),J8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FH=a("a"),Y8r=o("from_pretrained()"),K8r=o(" class method or the "),TH=a("a"),Z8r=o("from_config()"),e9r=o(` class
method.`),o9r=l(),dL=a("p"),r9r=o("This class cannot be instantiated directly using "),rFe=a("code"),t9r=o("__init__()"),a9r=o(" (throws an error)."),n9r=l(),Pt=a("div"),F(cL.$$.fragment),s9r=l(),tFe=a("p"),l9r=o("Instantiates one of the base model classes of the library from a configuration."),i9r=l(),bc=a("p"),d9r=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),c9r=o("not"),f9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),m9r=o("from_pretrained()"),g9r=o(" to load the model weights."),h9r=l(),F(TM.$$.fragment),p9r=l(),Pr=a("div"),F(fL.$$.fragment),u9r=l(),nFe=a("p"),_9r=o("Instantiate one of the base model classes of the library from a pretrained model."),b9r=l(),dn=a("p"),v9r=o("The model class to instantiate is selected based on the "),sFe=a("code"),F9r=o("model_type"),T9r=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),M9r=o("pretrained_model_name_or_path"),E9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),C9r=o("pretrained_model_name_or_path"),w9r=o(":"),A9r=l(),oe=a("ul"),MM=a("li"),dFe=a("strong"),y9r=o("albert"),L9r=o(" \u2014 "),EH=a("a"),x9r=o("FlaxAlbertModel"),$9r=o(" (ALBERT model)"),k9r=l(),EM=a("li"),cFe=a("strong"),S9r=o("bart"),R9r=o(" \u2014 "),CH=a("a"),B9r=o("FlaxBartModel"),P9r=o(" (BART model)"),I9r=l(),CM=a("li"),fFe=a("strong"),q9r=o("beit"),N9r=o(" \u2014 "),wH=a("a"),j9r=o("FlaxBeitModel"),D9r=o(" (BEiT model)"),G9r=l(),wM=a("li"),mFe=a("strong"),O9r=o("bert"),V9r=o(" \u2014 "),AH=a("a"),X9r=o("FlaxBertModel"),z9r=o(" (BERT model)"),Q9r=l(),AM=a("li"),gFe=a("strong"),W9r=o("big_bird"),H9r=o(" \u2014 "),yH=a("a"),U9r=o("FlaxBigBirdModel"),J9r=o(" (BigBird model)"),Y9r=l(),yM=a("li"),hFe=a("strong"),K9r=o("blenderbot"),Z9r=o(" \u2014 "),LH=a("a"),eMr=o("FlaxBlenderbotModel"),oMr=o(" (Blenderbot model)"),rMr=l(),LM=a("li"),pFe=a("strong"),tMr=o("blenderbot-small"),aMr=o(" \u2014 "),xH=a("a"),nMr=o("FlaxBlenderbotSmallModel"),sMr=o(" (BlenderbotSmall model)"),lMr=l(),xM=a("li"),uFe=a("strong"),iMr=o("clip"),dMr=o(" \u2014 "),$H=a("a"),cMr=o("FlaxCLIPModel"),fMr=o(" (CLIP model)"),mMr=l(),$M=a("li"),_Fe=a("strong"),gMr=o("distilbert"),hMr=o(" \u2014 "),kH=a("a"),pMr=o("FlaxDistilBertModel"),uMr=o(" (DistilBERT model)"),_Mr=l(),kM=a("li"),bFe=a("strong"),bMr=o("electra"),vMr=o(" \u2014 "),SH=a("a"),FMr=o("FlaxElectraModel"),TMr=o(" (ELECTRA model)"),MMr=l(),SM=a("li"),vFe=a("strong"),EMr=o("gpt2"),CMr=o(" \u2014 "),RH=a("a"),wMr=o("FlaxGPT2Model"),AMr=o(" (OpenAI GPT-2 model)"),yMr=l(),RM=a("li"),FFe=a("strong"),LMr=o("gpt_neo"),xMr=o(" \u2014 "),BH=a("a"),$Mr=o("FlaxGPTNeoModel"),kMr=o(" (GPT Neo model)"),SMr=l(),BM=a("li"),TFe=a("strong"),RMr=o("gptj"),BMr=o(" \u2014 "),PH=a("a"),PMr=o("FlaxGPTJModel"),IMr=o(" (GPT-J model)"),qMr=l(),PM=a("li"),MFe=a("strong"),NMr=o("marian"),jMr=o(" \u2014 "),IH=a("a"),DMr=o("FlaxMarianModel"),GMr=o(" (Marian model)"),OMr=l(),IM=a("li"),EFe=a("strong"),VMr=o("mbart"),XMr=o(" \u2014 "),qH=a("a"),zMr=o("FlaxMBartModel"),QMr=o(" (mBART model)"),WMr=l(),qM=a("li"),CFe=a("strong"),HMr=o("mt5"),UMr=o(" \u2014 "),NH=a("a"),JMr=o("FlaxMT5Model"),YMr=o(" (mT5 model)"),KMr=l(),NM=a("li"),wFe=a("strong"),ZMr=o("pegasus"),e4r=o(" \u2014 "),jH=a("a"),o4r=o("FlaxPegasusModel"),r4r=o(" (Pegasus model)"),t4r=l(),jM=a("li"),AFe=a("strong"),a4r=o("roberta"),n4r=o(" \u2014 "),DH=a("a"),s4r=o("FlaxRobertaModel"),l4r=o(" (RoBERTa model)"),i4r=l(),DM=a("li"),yFe=a("strong"),d4r=o("roformer"),c4r=o(" \u2014 "),GH=a("a"),f4r=o("FlaxRoFormerModel"),m4r=o(" (RoFormer model)"),g4r=l(),GM=a("li"),LFe=a("strong"),h4r=o("t5"),p4r=o(" \u2014 "),OH=a("a"),u4r=o("FlaxT5Model"),_4r=o(" (T5 model)"),b4r=l(),OM=a("li"),xFe=a("strong"),v4r=o("vision-text-dual-encoder"),F4r=o(" \u2014 "),VH=a("a"),T4r=o("FlaxVisionTextDualEncoderModel"),M4r=o(" (VisionTextDualEncoder model)"),E4r=l(),VM=a("li"),$Fe=a("strong"),C4r=o("vit"),w4r=o(" \u2014 "),XH=a("a"),A4r=o("FlaxViTModel"),y4r=o(" (ViT model)"),L4r=l(),XM=a("li"),kFe=a("strong"),x4r=o("wav2vec2"),$4r=o(" \u2014 "),zH=a("a"),k4r=o("FlaxWav2Vec2Model"),S4r=o(" (Wav2Vec2 model)"),R4r=l(),zM=a("li"),SFe=a("strong"),B4r=o("xglm"),P4r=o(" \u2014 "),QH=a("a"),I4r=o("FlaxXGLMModel"),q4r=o(" (XGLM model)"),N4r=l(),QM=a("li"),RFe=a("strong"),j4r=o("xlm-roberta"),D4r=o(" \u2014 "),WH=a("a"),G4r=o("FlaxXLMRobertaModel"),O4r=o(" (XLM-RoBERTa model)"),V4r=l(),F(WM.$$.fragment),cPe=l(),vc=a("h2"),HM=a("a"),BFe=a("span"),F(mL.$$.fragment),X4r=l(),PFe=a("span"),z4r=o("FlaxAutoModelForCausalLM"),fPe=l(),dr=a("div"),F(gL.$$.fragment),Q4r=l(),Fc=a("p"),W4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HH=a("a"),H4r=o("from_pretrained()"),U4r=o(" class method or the "),UH=a("a"),J4r=o("from_config()"),Y4r=o(` class
method.`),K4r=l(),hL=a("p"),Z4r=o("This class cannot be instantiated directly using "),IFe=a("code"),eEr=o("__init__()"),oEr=o(" (throws an error)."),rEr=l(),It=a("div"),F(pL.$$.fragment),tEr=l(),qFe=a("p"),aEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nEr=l(),Tc=a("p"),sEr=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),lEr=o("not"),iEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),dEr=o("from_pretrained()"),cEr=o(" to load the model weights."),fEr=l(),F(UM.$$.fragment),mEr=l(),Ir=a("div"),F(uL.$$.fragment),gEr=l(),jFe=a("p"),hEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pEr=l(),cn=a("p"),uEr=o("The model class to instantiate is selected based on the "),DFe=a("code"),_Er=o("model_type"),bEr=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),vEr=o("pretrained_model_name_or_path"),FEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),TEr=o("pretrained_model_name_or_path"),MEr=o(":"),EEr=l(),Hr=a("ul"),JM=a("li"),VFe=a("strong"),CEr=o("bart"),wEr=o(" \u2014 "),YH=a("a"),AEr=o("FlaxBartForCausalLM"),yEr=o(" (BART model)"),LEr=l(),YM=a("li"),XFe=a("strong"),xEr=o("gpt2"),$Er=o(" \u2014 "),KH=a("a"),kEr=o("FlaxGPT2LMHeadModel"),SEr=o(" (OpenAI GPT-2 model)"),REr=l(),KM=a("li"),zFe=a("strong"),BEr=o("gpt_neo"),PEr=o(" \u2014 "),ZH=a("a"),IEr=o("FlaxGPTNeoForCausalLM"),qEr=o(" (GPT Neo model)"),NEr=l(),ZM=a("li"),QFe=a("strong"),jEr=o("gptj"),DEr=o(" \u2014 "),eU=a("a"),GEr=o("FlaxGPTJForCausalLM"),OEr=o(" (GPT-J model)"),VEr=l(),e4=a("li"),WFe=a("strong"),XEr=o("xglm"),zEr=o(" \u2014 "),oU=a("a"),QEr=o("FlaxXGLMForCausalLM"),WEr=o(" (XGLM model)"),HEr=l(),F(o4.$$.fragment),mPe=l(),Mc=a("h2"),r4=a("a"),HFe=a("span"),F(_L.$$.fragment),UEr=l(),UFe=a("span"),JEr=o("FlaxAutoModelForPreTraining"),gPe=l(),cr=a("div"),F(bL.$$.fragment),YEr=l(),Ec=a("p"),KEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rU=a("a"),ZEr=o("from_pretrained()"),e5r=o(" class method or the "),tU=a("a"),o5r=o("from_config()"),r5r=o(` class
method.`),t5r=l(),vL=a("p"),a5r=o("This class cannot be instantiated directly using "),JFe=a("code"),n5r=o("__init__()"),s5r=o(" (throws an error)."),l5r=l(),qt=a("div"),F(FL.$$.fragment),i5r=l(),YFe=a("p"),d5r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),c5r=l(),Cc=a("p"),f5r=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),m5r=o("not"),g5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),h5r=o("from_pretrained()"),p5r=o(" to load the model weights."),u5r=l(),F(t4.$$.fragment),_5r=l(),qr=a("div"),F(TL.$$.fragment),b5r=l(),ZFe=a("p"),v5r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),F5r=l(),fn=a("p"),T5r=o("The model class to instantiate is selected based on the "),e0e=a("code"),M5r=o("model_type"),E5r=o(` property of the config object (either
passed as an argument or loaded from `),o0e=a("code"),C5r=o("pretrained_model_name_or_path"),w5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=a("code"),A5r=o("pretrained_model_name_or_path"),y5r=o(":"),L5r=l(),Me=a("ul"),a4=a("li"),t0e=a("strong"),x5r=o("albert"),$5r=o(" \u2014 "),nU=a("a"),k5r=o("FlaxAlbertForPreTraining"),S5r=o(" (ALBERT model)"),R5r=l(),n4=a("li"),a0e=a("strong"),B5r=o("bart"),P5r=o(" \u2014 "),sU=a("a"),I5r=o("FlaxBartForConditionalGeneration"),q5r=o(" (BART model)"),N5r=l(),s4=a("li"),n0e=a("strong"),j5r=o("bert"),D5r=o(" \u2014 "),lU=a("a"),G5r=o("FlaxBertForPreTraining"),O5r=o(" (BERT model)"),V5r=l(),l4=a("li"),s0e=a("strong"),X5r=o("big_bird"),z5r=o(" \u2014 "),iU=a("a"),Q5r=o("FlaxBigBirdForPreTraining"),W5r=o(" (BigBird model)"),H5r=l(),i4=a("li"),l0e=a("strong"),U5r=o("electra"),J5r=o(" \u2014 "),dU=a("a"),Y5r=o("FlaxElectraForPreTraining"),K5r=o(" (ELECTRA model)"),Z5r=l(),d4=a("li"),i0e=a("strong"),eCr=o("mbart"),oCr=o(" \u2014 "),cU=a("a"),rCr=o("FlaxMBartForConditionalGeneration"),tCr=o(" (mBART model)"),aCr=l(),c4=a("li"),d0e=a("strong"),nCr=o("mt5"),sCr=o(" \u2014 "),fU=a("a"),lCr=o("FlaxMT5ForConditionalGeneration"),iCr=o(" (mT5 model)"),dCr=l(),f4=a("li"),c0e=a("strong"),cCr=o("roberta"),fCr=o(" \u2014 "),mU=a("a"),mCr=o("FlaxRobertaForMaskedLM"),gCr=o(" (RoBERTa model)"),hCr=l(),m4=a("li"),f0e=a("strong"),pCr=o("roformer"),uCr=o(" \u2014 "),gU=a("a"),_Cr=o("FlaxRoFormerForMaskedLM"),bCr=o(" (RoFormer model)"),vCr=l(),g4=a("li"),m0e=a("strong"),FCr=o("t5"),TCr=o(" \u2014 "),hU=a("a"),MCr=o("FlaxT5ForConditionalGeneration"),ECr=o(" (T5 model)"),CCr=l(),h4=a("li"),g0e=a("strong"),wCr=o("wav2vec2"),ACr=o(" \u2014 "),pU=a("a"),yCr=o("FlaxWav2Vec2ForPreTraining"),LCr=o(" (Wav2Vec2 model)"),xCr=l(),p4=a("li"),h0e=a("strong"),$Cr=o("xlm-roberta"),kCr=o(" \u2014 "),uU=a("a"),SCr=o("FlaxXLMRobertaForMaskedLM"),RCr=o(" (XLM-RoBERTa model)"),BCr=l(),F(u4.$$.fragment),hPe=l(),wc=a("h2"),_4=a("a"),p0e=a("span"),F(ML.$$.fragment),PCr=l(),u0e=a("span"),ICr=o("FlaxAutoModelForMaskedLM"),pPe=l(),fr=a("div"),F(EL.$$.fragment),qCr=l(),Ac=a("p"),NCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_U=a("a"),jCr=o("from_pretrained()"),DCr=o(" class method or the "),bU=a("a"),GCr=o("from_config()"),OCr=o(` class
method.`),VCr=l(),CL=a("p"),XCr=o("This class cannot be instantiated directly using "),_0e=a("code"),zCr=o("__init__()"),QCr=o(" (throws an error)."),WCr=l(),Nt=a("div"),F(wL.$$.fragment),HCr=l(),b0e=a("p"),UCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JCr=l(),yc=a("p"),YCr=o(`Note:
Loading a model from its configuration file does `),v0e=a("strong"),KCr=o("not"),ZCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),e3r=o("from_pretrained()"),o3r=o(" to load the model weights."),r3r=l(),F(b4.$$.fragment),t3r=l(),Nr=a("div"),F(AL.$$.fragment),a3r=l(),F0e=a("p"),n3r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),s3r=l(),mn=a("p"),l3r=o("The model class to instantiate is selected based on the "),T0e=a("code"),i3r=o("model_type"),d3r=o(` property of the config object (either
passed as an argument or loaded from `),M0e=a("code"),c3r=o("pretrained_model_name_or_path"),f3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E0e=a("code"),m3r=o("pretrained_model_name_or_path"),g3r=o(":"),h3r=l(),Le=a("ul"),v4=a("li"),C0e=a("strong"),p3r=o("albert"),u3r=o(" \u2014 "),FU=a("a"),_3r=o("FlaxAlbertForMaskedLM"),b3r=o(" (ALBERT model)"),v3r=l(),F4=a("li"),w0e=a("strong"),F3r=o("bart"),T3r=o(" \u2014 "),TU=a("a"),M3r=o("FlaxBartForConditionalGeneration"),E3r=o(" (BART model)"),C3r=l(),T4=a("li"),A0e=a("strong"),w3r=o("bert"),A3r=o(" \u2014 "),MU=a("a"),y3r=o("FlaxBertForMaskedLM"),L3r=o(" (BERT model)"),x3r=l(),M4=a("li"),y0e=a("strong"),$3r=o("big_bird"),k3r=o(" \u2014 "),EU=a("a"),S3r=o("FlaxBigBirdForMaskedLM"),R3r=o(" (BigBird model)"),B3r=l(),E4=a("li"),L0e=a("strong"),P3r=o("distilbert"),I3r=o(" \u2014 "),CU=a("a"),q3r=o("FlaxDistilBertForMaskedLM"),N3r=o(" (DistilBERT model)"),j3r=l(),C4=a("li"),x0e=a("strong"),D3r=o("electra"),G3r=o(" \u2014 "),wU=a("a"),O3r=o("FlaxElectraForMaskedLM"),V3r=o(" (ELECTRA model)"),X3r=l(),w4=a("li"),$0e=a("strong"),z3r=o("mbart"),Q3r=o(" \u2014 "),AU=a("a"),W3r=o("FlaxMBartForConditionalGeneration"),H3r=o(" (mBART model)"),U3r=l(),A4=a("li"),k0e=a("strong"),J3r=o("roberta"),Y3r=o(" \u2014 "),yU=a("a"),K3r=o("FlaxRobertaForMaskedLM"),Z3r=o(" (RoBERTa model)"),ewr=l(),y4=a("li"),S0e=a("strong"),owr=o("roformer"),rwr=o(" \u2014 "),LU=a("a"),twr=o("FlaxRoFormerForMaskedLM"),awr=o(" (RoFormer model)"),nwr=l(),L4=a("li"),R0e=a("strong"),swr=o("xlm-roberta"),lwr=o(" \u2014 "),xU=a("a"),iwr=o("FlaxXLMRobertaForMaskedLM"),dwr=o(" (XLM-RoBERTa model)"),cwr=l(),F(x4.$$.fragment),uPe=l(),Lc=a("h2"),$4=a("a"),B0e=a("span"),F(yL.$$.fragment),fwr=l(),P0e=a("span"),mwr=o("FlaxAutoModelForSeq2SeqLM"),_Pe=l(),mr=a("div"),F(LL.$$.fragment),gwr=l(),xc=a("p"),hwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$U=a("a"),pwr=o("from_pretrained()"),uwr=o(" class method or the "),kU=a("a"),_wr=o("from_config()"),bwr=o(` class
method.`),vwr=l(),xL=a("p"),Fwr=o("This class cannot be instantiated directly using "),I0e=a("code"),Twr=o("__init__()"),Mwr=o(" (throws an error)."),Ewr=l(),jt=a("div"),F($L.$$.fragment),Cwr=l(),q0e=a("p"),wwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Awr=l(),$c=a("p"),ywr=o(`Note:
Loading a model from its configuration file does `),N0e=a("strong"),Lwr=o("not"),xwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),$wr=o("from_pretrained()"),kwr=o(" to load the model weights."),Swr=l(),F(k4.$$.fragment),Rwr=l(),jr=a("div"),F(kL.$$.fragment),Bwr=l(),j0e=a("p"),Pwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Iwr=l(),gn=a("p"),qwr=o("The model class to instantiate is selected based on the "),D0e=a("code"),Nwr=o("model_type"),jwr=o(` property of the config object (either
passed as an argument or loaded from `),G0e=a("code"),Dwr=o("pretrained_model_name_or_path"),Gwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=a("code"),Owr=o("pretrained_model_name_or_path"),Vwr=o(":"),Xwr=l(),ke=a("ul"),S4=a("li"),V0e=a("strong"),zwr=o("bart"),Qwr=o(" \u2014 "),RU=a("a"),Wwr=o("FlaxBartForConditionalGeneration"),Hwr=o(" (BART model)"),Uwr=l(),R4=a("li"),X0e=a("strong"),Jwr=o("blenderbot"),Ywr=o(" \u2014 "),BU=a("a"),Kwr=o("FlaxBlenderbotForConditionalGeneration"),Zwr=o(" (Blenderbot model)"),eAr=l(),B4=a("li"),z0e=a("strong"),oAr=o("blenderbot-small"),rAr=o(" \u2014 "),PU=a("a"),tAr=o("FlaxBlenderbotSmallForConditionalGeneration"),aAr=o(" (BlenderbotSmall model)"),nAr=l(),P4=a("li"),Q0e=a("strong"),sAr=o("encoder-decoder"),lAr=o(" \u2014 "),IU=a("a"),iAr=o("FlaxEncoderDecoderModel"),dAr=o(" (Encoder decoder model)"),cAr=l(),I4=a("li"),W0e=a("strong"),fAr=o("marian"),mAr=o(" \u2014 "),qU=a("a"),gAr=o("FlaxMarianMTModel"),hAr=o(" (Marian model)"),pAr=l(),q4=a("li"),H0e=a("strong"),uAr=o("mbart"),_Ar=o(" \u2014 "),NU=a("a"),bAr=o("FlaxMBartForConditionalGeneration"),vAr=o(" (mBART model)"),FAr=l(),N4=a("li"),U0e=a("strong"),TAr=o("mt5"),MAr=o(" \u2014 "),jU=a("a"),EAr=o("FlaxMT5ForConditionalGeneration"),CAr=o(" (mT5 model)"),wAr=l(),j4=a("li"),J0e=a("strong"),AAr=o("pegasus"),yAr=o(" \u2014 "),DU=a("a"),LAr=o("FlaxPegasusForConditionalGeneration"),xAr=o(" (Pegasus model)"),$Ar=l(),D4=a("li"),Y0e=a("strong"),kAr=o("t5"),SAr=o(" \u2014 "),GU=a("a"),RAr=o("FlaxT5ForConditionalGeneration"),BAr=o(" (T5 model)"),PAr=l(),F(G4.$$.fragment),bPe=l(),kc=a("h2"),O4=a("a"),K0e=a("span"),F(SL.$$.fragment),IAr=l(),Z0e=a("span"),qAr=o("FlaxAutoModelForSequenceClassification"),vPe=l(),gr=a("div"),F(RL.$$.fragment),NAr=l(),Sc=a("p"),jAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OU=a("a"),DAr=o("from_pretrained()"),GAr=o(" class method or the "),VU=a("a"),OAr=o("from_config()"),VAr=o(` class
method.`),XAr=l(),BL=a("p"),zAr=o("This class cannot be instantiated directly using "),e6e=a("code"),QAr=o("__init__()"),WAr=o(" (throws an error)."),HAr=l(),Dt=a("div"),F(PL.$$.fragment),UAr=l(),o6e=a("p"),JAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YAr=l(),Rc=a("p"),KAr=o(`Note:
Loading a model from its configuration file does `),r6e=a("strong"),ZAr=o("not"),eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=a("a"),oyr=o("from_pretrained()"),ryr=o(" to load the model weights."),tyr=l(),F(V4.$$.fragment),ayr=l(),Dr=a("div"),F(IL.$$.fragment),nyr=l(),t6e=a("p"),syr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lyr=l(),hn=a("p"),iyr=o("The model class to instantiate is selected based on the "),a6e=a("code"),dyr=o("model_type"),cyr=o(` property of the config object (either
passed as an argument or loaded from `),n6e=a("code"),fyr=o("pretrained_model_name_or_path"),myr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=a("code"),gyr=o("pretrained_model_name_or_path"),hyr=o(":"),pyr=l(),xe=a("ul"),X4=a("li"),l6e=a("strong"),uyr=o("albert"),_yr=o(" \u2014 "),zU=a("a"),byr=o("FlaxAlbertForSequenceClassification"),vyr=o(" (ALBERT model)"),Fyr=l(),z4=a("li"),i6e=a("strong"),Tyr=o("bart"),Myr=o(" \u2014 "),QU=a("a"),Eyr=o("FlaxBartForSequenceClassification"),Cyr=o(" (BART model)"),wyr=l(),Q4=a("li"),d6e=a("strong"),Ayr=o("bert"),yyr=o(" \u2014 "),WU=a("a"),Lyr=o("FlaxBertForSequenceClassification"),xyr=o(" (BERT model)"),$yr=l(),W4=a("li"),c6e=a("strong"),kyr=o("big_bird"),Syr=o(" \u2014 "),HU=a("a"),Ryr=o("FlaxBigBirdForSequenceClassification"),Byr=o(" (BigBird model)"),Pyr=l(),H4=a("li"),f6e=a("strong"),Iyr=o("distilbert"),qyr=o(" \u2014 "),UU=a("a"),Nyr=o("FlaxDistilBertForSequenceClassification"),jyr=o(" (DistilBERT model)"),Dyr=l(),U4=a("li"),m6e=a("strong"),Gyr=o("electra"),Oyr=o(" \u2014 "),JU=a("a"),Vyr=o("FlaxElectraForSequenceClassification"),Xyr=o(" (ELECTRA model)"),zyr=l(),J4=a("li"),g6e=a("strong"),Qyr=o("mbart"),Wyr=o(" \u2014 "),YU=a("a"),Hyr=o("FlaxMBartForSequenceClassification"),Uyr=o(" (mBART model)"),Jyr=l(),Y4=a("li"),h6e=a("strong"),Yyr=o("roberta"),Kyr=o(" \u2014 "),KU=a("a"),Zyr=o("FlaxRobertaForSequenceClassification"),eLr=o(" (RoBERTa model)"),oLr=l(),K4=a("li"),p6e=a("strong"),rLr=o("roformer"),tLr=o(" \u2014 "),ZU=a("a"),aLr=o("FlaxRoFormerForSequenceClassification"),nLr=o(" (RoFormer model)"),sLr=l(),Z4=a("li"),u6e=a("strong"),lLr=o("xlm-roberta"),iLr=o(" \u2014 "),eJ=a("a"),dLr=o("FlaxXLMRobertaForSequenceClassification"),cLr=o(" (XLM-RoBERTa model)"),fLr=l(),F(eE.$$.fragment),FPe=l(),Bc=a("h2"),oE=a("a"),_6e=a("span"),F(qL.$$.fragment),mLr=l(),b6e=a("span"),gLr=o("FlaxAutoModelForQuestionAnswering"),TPe=l(),hr=a("div"),F(NL.$$.fragment),hLr=l(),Pc=a("p"),pLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oJ=a("a"),uLr=o("from_pretrained()"),_Lr=o(" class method or the "),rJ=a("a"),bLr=o("from_config()"),vLr=o(` class
method.`),FLr=l(),jL=a("p"),TLr=o("This class cannot be instantiated directly using "),v6e=a("code"),MLr=o("__init__()"),ELr=o(" (throws an error)."),CLr=l(),Gt=a("div"),F(DL.$$.fragment),wLr=l(),F6e=a("p"),ALr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yLr=l(),Ic=a("p"),LLr=o(`Note:
Loading a model from its configuration file does `),T6e=a("strong"),xLr=o("not"),$Lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),kLr=o("from_pretrained()"),SLr=o(" to load the model weights."),RLr=l(),F(rE.$$.fragment),BLr=l(),Gr=a("div"),F(GL.$$.fragment),PLr=l(),M6e=a("p"),ILr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qLr=l(),pn=a("p"),NLr=o("The model class to instantiate is selected based on the "),E6e=a("code"),jLr=o("model_type"),DLr=o(` property of the config object (either
passed as an argument or loaded from `),C6e=a("code"),GLr=o("pretrained_model_name_or_path"),OLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w6e=a("code"),VLr=o("pretrained_model_name_or_path"),XLr=o(":"),zLr=l(),$e=a("ul"),tE=a("li"),A6e=a("strong"),QLr=o("albert"),WLr=o(" \u2014 "),aJ=a("a"),HLr=o("FlaxAlbertForQuestionAnswering"),ULr=o(" (ALBERT model)"),JLr=l(),aE=a("li"),y6e=a("strong"),YLr=o("bart"),KLr=o(" \u2014 "),nJ=a("a"),ZLr=o("FlaxBartForQuestionAnswering"),e7r=o(" (BART model)"),o7r=l(),nE=a("li"),L6e=a("strong"),r7r=o("bert"),t7r=o(" \u2014 "),sJ=a("a"),a7r=o("FlaxBertForQuestionAnswering"),n7r=o(" (BERT model)"),s7r=l(),sE=a("li"),x6e=a("strong"),l7r=o("big_bird"),i7r=o(" \u2014 "),lJ=a("a"),d7r=o("FlaxBigBirdForQuestionAnswering"),c7r=o(" (BigBird model)"),f7r=l(),lE=a("li"),$6e=a("strong"),m7r=o("distilbert"),g7r=o(" \u2014 "),iJ=a("a"),h7r=o("FlaxDistilBertForQuestionAnswering"),p7r=o(" (DistilBERT model)"),u7r=l(),iE=a("li"),k6e=a("strong"),_7r=o("electra"),b7r=o(" \u2014 "),dJ=a("a"),v7r=o("FlaxElectraForQuestionAnswering"),F7r=o(" (ELECTRA model)"),T7r=l(),dE=a("li"),S6e=a("strong"),M7r=o("mbart"),E7r=o(" \u2014 "),cJ=a("a"),C7r=o("FlaxMBartForQuestionAnswering"),w7r=o(" (mBART model)"),A7r=l(),cE=a("li"),R6e=a("strong"),y7r=o("roberta"),L7r=o(" \u2014 "),fJ=a("a"),x7r=o("FlaxRobertaForQuestionAnswering"),$7r=o(" (RoBERTa model)"),k7r=l(),fE=a("li"),B6e=a("strong"),S7r=o("roformer"),R7r=o(" \u2014 "),mJ=a("a"),B7r=o("FlaxRoFormerForQuestionAnswering"),P7r=o(" (RoFormer model)"),I7r=l(),mE=a("li"),P6e=a("strong"),q7r=o("xlm-roberta"),N7r=o(" \u2014 "),gJ=a("a"),j7r=o("FlaxXLMRobertaForQuestionAnswering"),D7r=o(" (XLM-RoBERTa model)"),G7r=l(),F(gE.$$.fragment),MPe=l(),qc=a("h2"),hE=a("a"),I6e=a("span"),F(OL.$$.fragment),O7r=l(),q6e=a("span"),V7r=o("FlaxAutoModelForTokenClassification"),EPe=l(),pr=a("div"),F(VL.$$.fragment),X7r=l(),Nc=a("p"),z7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hJ=a("a"),Q7r=o("from_pretrained()"),W7r=o(" class method or the "),pJ=a("a"),H7r=o("from_config()"),U7r=o(` class
method.`),J7r=l(),XL=a("p"),Y7r=o("This class cannot be instantiated directly using "),N6e=a("code"),K7r=o("__init__()"),Z7r=o(" (throws an error)."),exr=l(),Ot=a("div"),F(zL.$$.fragment),oxr=l(),j6e=a("p"),rxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),txr=l(),jc=a("p"),axr=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),nxr=o("not"),sxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),lxr=o("from_pretrained()"),ixr=o(" to load the model weights."),dxr=l(),F(pE.$$.fragment),cxr=l(),Or=a("div"),F(QL.$$.fragment),fxr=l(),G6e=a("p"),mxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gxr=l(),un=a("p"),hxr=o("The model class to instantiate is selected based on the "),O6e=a("code"),pxr=o("model_type"),uxr=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),_xr=o("pretrained_model_name_or_path"),bxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),vxr=o("pretrained_model_name_or_path"),Fxr=o(":"),Txr=l(),je=a("ul"),uE=a("li"),z6e=a("strong"),Mxr=o("albert"),Exr=o(" \u2014 "),_J=a("a"),Cxr=o("FlaxAlbertForTokenClassification"),wxr=o(" (ALBERT model)"),Axr=l(),_E=a("li"),Q6e=a("strong"),yxr=o("bert"),Lxr=o(" \u2014 "),bJ=a("a"),xxr=o("FlaxBertForTokenClassification"),$xr=o(" (BERT model)"),kxr=l(),bE=a("li"),W6e=a("strong"),Sxr=o("big_bird"),Rxr=o(" \u2014 "),vJ=a("a"),Bxr=o("FlaxBigBirdForTokenClassification"),Pxr=o(" (BigBird model)"),Ixr=l(),vE=a("li"),H6e=a("strong"),qxr=o("distilbert"),Nxr=o(" \u2014 "),FJ=a("a"),jxr=o("FlaxDistilBertForTokenClassification"),Dxr=o(" (DistilBERT model)"),Gxr=l(),FE=a("li"),U6e=a("strong"),Oxr=o("electra"),Vxr=o(" \u2014 "),TJ=a("a"),Xxr=o("FlaxElectraForTokenClassification"),zxr=o(" (ELECTRA model)"),Qxr=l(),TE=a("li"),J6e=a("strong"),Wxr=o("roberta"),Hxr=o(" \u2014 "),MJ=a("a"),Uxr=o("FlaxRobertaForTokenClassification"),Jxr=o(" (RoBERTa model)"),Yxr=l(),ME=a("li"),Y6e=a("strong"),Kxr=o("roformer"),Zxr=o(" \u2014 "),EJ=a("a"),e$r=o("FlaxRoFormerForTokenClassification"),o$r=o(" (RoFormer model)"),r$r=l(),EE=a("li"),K6e=a("strong"),t$r=o("xlm-roberta"),a$r=o(" \u2014 "),CJ=a("a"),n$r=o("FlaxXLMRobertaForTokenClassification"),s$r=o(" (XLM-RoBERTa model)"),l$r=l(),F(CE.$$.fragment),CPe=l(),Dc=a("h2"),wE=a("a"),Z6e=a("span"),F(WL.$$.fragment),i$r=l(),eTe=a("span"),d$r=o("FlaxAutoModelForMultipleChoice"),wPe=l(),ur=a("div"),F(HL.$$.fragment),c$r=l(),Gc=a("p"),f$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wJ=a("a"),m$r=o("from_pretrained()"),g$r=o(" class method or the "),AJ=a("a"),h$r=o("from_config()"),p$r=o(` class
method.`),u$r=l(),UL=a("p"),_$r=o("This class cannot be instantiated directly using "),oTe=a("code"),b$r=o("__init__()"),v$r=o(" (throws an error)."),F$r=l(),Vt=a("div"),F(JL.$$.fragment),T$r=l(),rTe=a("p"),M$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),E$r=l(),Oc=a("p"),C$r=o(`Note:
Loading a model from its configuration file does `),tTe=a("strong"),w$r=o("not"),A$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),y$r=o("from_pretrained()"),L$r=o(" to load the model weights."),x$r=l(),F(AE.$$.fragment),$$r=l(),Vr=a("div"),F(YL.$$.fragment),k$r=l(),aTe=a("p"),S$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),R$r=l(),_n=a("p"),B$r=o("The model class to instantiate is selected based on the "),nTe=a("code"),P$r=o("model_type"),I$r=o(` property of the config object (either
passed as an argument or loaded from `),sTe=a("code"),q$r=o("pretrained_model_name_or_path"),N$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),j$r=o("pretrained_model_name_or_path"),D$r=o(":"),G$r=l(),De=a("ul"),yE=a("li"),iTe=a("strong"),O$r=o("albert"),V$r=o(" \u2014 "),LJ=a("a"),X$r=o("FlaxAlbertForMultipleChoice"),z$r=o(" (ALBERT model)"),Q$r=l(),LE=a("li"),dTe=a("strong"),W$r=o("bert"),H$r=o(" \u2014 "),xJ=a("a"),U$r=o("FlaxBertForMultipleChoice"),J$r=o(" (BERT model)"),Y$r=l(),xE=a("li"),cTe=a("strong"),K$r=o("big_bird"),Z$r=o(" \u2014 "),$J=a("a"),ekr=o("FlaxBigBirdForMultipleChoice"),okr=o(" (BigBird model)"),rkr=l(),$E=a("li"),fTe=a("strong"),tkr=o("distilbert"),akr=o(" \u2014 "),kJ=a("a"),nkr=o("FlaxDistilBertForMultipleChoice"),skr=o(" (DistilBERT model)"),lkr=l(),kE=a("li"),mTe=a("strong"),ikr=o("electra"),dkr=o(" \u2014 "),SJ=a("a"),ckr=o("FlaxElectraForMultipleChoice"),fkr=o(" (ELECTRA model)"),mkr=l(),SE=a("li"),gTe=a("strong"),gkr=o("roberta"),hkr=o(" \u2014 "),RJ=a("a"),pkr=o("FlaxRobertaForMultipleChoice"),ukr=o(" (RoBERTa model)"),_kr=l(),RE=a("li"),hTe=a("strong"),bkr=o("roformer"),vkr=o(" \u2014 "),BJ=a("a"),Fkr=o("FlaxRoFormerForMultipleChoice"),Tkr=o(" (RoFormer model)"),Mkr=l(),BE=a("li"),pTe=a("strong"),Ekr=o("xlm-roberta"),Ckr=o(" \u2014 "),PJ=a("a"),wkr=o("FlaxXLMRobertaForMultipleChoice"),Akr=o(" (XLM-RoBERTa model)"),ykr=l(),F(PE.$$.fragment),APe=l(),Vc=a("h2"),IE=a("a"),uTe=a("span"),F(KL.$$.fragment),Lkr=l(),_Te=a("span"),xkr=o("FlaxAutoModelForNextSentencePrediction"),yPe=l(),_r=a("div"),F(ZL.$$.fragment),$kr=l(),Xc=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IJ=a("a"),Skr=o("from_pretrained()"),Rkr=o(" class method or the "),qJ=a("a"),Bkr=o("from_config()"),Pkr=o(` class
method.`),Ikr=l(),e7=a("p"),qkr=o("This class cannot be instantiated directly using "),bTe=a("code"),Nkr=o("__init__()"),jkr=o(" (throws an error)."),Dkr=l(),Xt=a("div"),F(o7.$$.fragment),Gkr=l(),vTe=a("p"),Okr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Vkr=l(),zc=a("p"),Xkr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),zkr=o("not"),Qkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),Wkr=o("from_pretrained()"),Hkr=o(" to load the model weights."),Ukr=l(),F(qE.$$.fragment),Jkr=l(),Xr=a("div"),F(r7.$$.fragment),Ykr=l(),TTe=a("p"),Kkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Zkr=l(),bn=a("p"),eSr=o("The model class to instantiate is selected based on the "),MTe=a("code"),oSr=o("model_type"),rSr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),tSr=o("pretrained_model_name_or_path"),aSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(":"),lSr=l(),wTe=a("ul"),NE=a("li"),ATe=a("strong"),iSr=o("bert"),dSr=o(" \u2014 "),jJ=a("a"),cSr=o("FlaxBertForNextSentencePrediction"),fSr=o(" (BERT model)"),mSr=l(),F(jE.$$.fragment),LPe=l(),Qc=a("h2"),DE=a("a"),yTe=a("span"),F(t7.$$.fragment),gSr=l(),LTe=a("span"),hSr=o("FlaxAutoModelForImageClassification"),xPe=l(),br=a("div"),F(a7.$$.fragment),pSr=l(),Wc=a("p"),uSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DJ=a("a"),_Sr=o("from_pretrained()"),bSr=o(" class method or the "),GJ=a("a"),vSr=o("from_config()"),FSr=o(` class
method.`),TSr=l(),n7=a("p"),MSr=o("This class cannot be instantiated directly using "),xTe=a("code"),ESr=o("__init__()"),CSr=o(" (throws an error)."),wSr=l(),zt=a("div"),F(s7.$$.fragment),ASr=l(),$Te=a("p"),ySr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LSr=l(),Hc=a("p"),xSr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),$Sr=o("not"),kSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),SSr=o("from_pretrained()"),RSr=o(" to load the model weights."),BSr=l(),F(GE.$$.fragment),PSr=l(),zr=a("div"),F(l7.$$.fragment),ISr=l(),STe=a("p"),qSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NSr=l(),vn=a("p"),jSr=o("The model class to instantiate is selected based on the "),RTe=a("code"),DSr=o("model_type"),GSr=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),OSr=o("pretrained_model_name_or_path"),VSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(":"),QSr=l(),i7=a("ul"),OE=a("li"),ITe=a("strong"),WSr=o("beit"),HSr=o(" \u2014 "),VJ=a("a"),USr=o("FlaxBeitForImageClassification"),JSr=o(" (BEiT model)"),YSr=l(),VE=a("li"),qTe=a("strong"),KSr=o("vit"),ZSr=o(" \u2014 "),XJ=a("a"),eRr=o("FlaxViTForImageClassification"),oRr=o(" (ViT model)"),rRr=l(),F(XE.$$.fragment),$Pe=l(),Uc=a("h2"),zE=a("a"),NTe=a("span"),F(d7.$$.fragment),tRr=l(),jTe=a("span"),aRr=o("FlaxAutoModelForVision2Seq"),kPe=l(),vr=a("div"),F(c7.$$.fragment),nRr=l(),Jc=a("p"),sRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zJ=a("a"),lRr=o("from_pretrained()"),iRr=o(" class method or the "),QJ=a("a"),dRr=o("from_config()"),cRr=o(` class
method.`),fRr=l(),f7=a("p"),mRr=o("This class cannot be instantiated directly using "),DTe=a("code"),gRr=o("__init__()"),hRr=o(" (throws an error)."),pRr=l(),Qt=a("div"),F(m7.$$.fragment),uRr=l(),GTe=a("p"),_Rr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bRr=l(),Yc=a("p"),vRr=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),FRr=o("not"),TRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),MRr=o("from_pretrained()"),ERr=o(" to load the model weights."),CRr=l(),F(QE.$$.fragment),wRr=l(),Qr=a("div"),F(g7.$$.fragment),ARr=l(),VTe=a("p"),yRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LRr=l(),Fn=a("p"),xRr=o("The model class to instantiate is selected based on the "),XTe=a("code"),$Rr=o("model_type"),kRr=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),SRr=o("pretrained_model_name_or_path"),RRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),BRr=o("pretrained_model_name_or_path"),PRr=o(":"),IRr=l(),WTe=a("ul"),WE=a("li"),HTe=a("strong"),qRr=o("vision-encoder-decoder"),NRr=o(" \u2014 "),HJ=a("a"),jRr=o("FlaxVisionEncoderDecoderModel"),DRr=o(" (Vision Encoder decoder model)"),GRr=l(),F(HE.$$.fragment),this.h()},l(f){const _=_Mt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var h7=s(p);m=n(h7,"A",{id:!0,class:!0,href:!0});var UTe=s(m);u=n(UTe,"SPAN",{});var JTe=s(u);T(d.$$.fragment,JTe),JTe.forEach(t),UTe.forEach(t),h=i(h7),Fo=n(h7,"SPAN",{});var YTe=s(Fo);ri=r(YTe,"Auto Classes"),YTe.forEach(t),h7.forEach(t),of=i(f),Yr=n(f,"P",{});var p7=s(Yr);ti=r(p7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=n(p7,"CODE",{});var KTe=s(ai);f3=r(KTe,"from_pretrained()"),KTe.forEach(t),rf=r(p7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),p7.forEach(t),Ie=i(f),Oe=n(f,"P",{});var Tn=s(Oe);ni=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var ZTe=s(Mn);m3=r(ZTe,"AutoConfig"),ZTe.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var e8e=s(Cn);g3=r(e8e,"AutoModel"),e8e.forEach(t),si=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var o8e=s(wn);h3=r(o8e,"AutoTokenizer"),o8e.forEach(t),li=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),tf=i(f),T(ba.$$.fragment,f),Ve=i(f),Ae=n(f,"P",{});var u7=s(Ae);Ax=r(u7,"will create a model that is an instance of "),ii=n(u7,"A",{href:!0});var r8e=s(ii);yx=r(r8e,"BertModel"),r8e.forEach(t),Lx=r(u7,"."),u7.forEach(t),To=i(f),va=n(f,"P",{});var _7=s(va);xx=r(_7,"There is one class of "),af=n(_7,"CODE",{});var t8e=s(af);$x=r(t8e,"AutoModel"),t8e.forEach(t),qqe=r(_7," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),_7.forEach(t),kRe=i(f),di=n(f,"H2",{class:!0});var b7=s(di);nf=n(b7,"A",{id:!0,class:!0,href:!0});var a8e=s(nf);NK=n(a8e,"SPAN",{});var n8e=s(NK);T(p3.$$.fragment,n8e),n8e.forEach(t),a8e.forEach(t),Nqe=i(b7),jK=n(b7,"SPAN",{});var s8e=s(jK);jqe=r(s8e,"Extending the Auto Classes"),s8e.forEach(t),b7.forEach(t),SRe=i(f),An=n(f,"P",{});var Kc=s(An);Dqe=r(Kc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),DK=n(Kc,"CODE",{});var l8e=s(DK);Gqe=r(l8e,"NewModel"),l8e.forEach(t),Oqe=r(Kc,", make sure you have a "),GK=n(Kc,"CODE",{});var i8e=s(GK);Vqe=r(i8e,"NewModelConfig"),i8e.forEach(t),Xqe=r(Kc,` then you can add those to the auto
classes like this:`),Kc.forEach(t),RRe=i(f),T(u3.$$.fragment,f),BRe=i(f),kx=n(f,"P",{});var d8e=s(kx);zqe=r(d8e,"You will then be able to use the auto classes like you would usually do!"),d8e.forEach(t),PRe=i(f),T(sf.$$.fragment,f),IRe=i(f),ci=n(f,"H2",{class:!0});var v7=s(ci);lf=n(v7,"A",{id:!0,class:!0,href:!0});var c8e=s(lf);OK=n(c8e,"SPAN",{});var f8e=s(OK);T(_3.$$.fragment,f8e),f8e.forEach(t),c8e.forEach(t),Qqe=i(v7),VK=n(v7,"SPAN",{});var m8e=s(VK);Wqe=r(m8e,"AutoConfig"),m8e.forEach(t),v7.forEach(t),qRe=i(f),Mo=n(f,"DIV",{class:!0});var Ur=s(Mo);T(b3.$$.fragment,Ur),Hqe=i(Ur),v3=n(Ur,"P",{});var F7=s(v3);Uqe=r(F7,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Sx=n(F7,"A",{href:!0});var g8e=s(Sx);Jqe=r(g8e,"from_pretrained()"),g8e.forEach(t),Yqe=r(F7," class method."),F7.forEach(t),Kqe=i(Ur),F3=n(Ur,"P",{});var T7=s(F3);Zqe=r(T7,"This class cannot be instantiated directly using "),XK=n(T7,"CODE",{});var h8e=s(XK);eNe=r(h8e,"__init__()"),h8e.forEach(t),oNe=r(T7," (throws an error)."),T7.forEach(t),rNe=i(Ur),Fr=n(Ur,"DIV",{class:!0});var Jr=s(Fr);T(T3.$$.fragment,Jr),tNe=i(Jr),zK=n(Jr,"P",{});var p8e=s(zK);aNe=r(p8e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),p8e.forEach(t),nNe=i(Jr),fi=n(Jr,"P",{});var Zc=s(fi);sNe=r(Zc,"The configuration class to instantiate is selected based on the "),QK=n(Zc,"CODE",{});var u8e=s(QK);lNe=r(u8e,"model_type"),u8e.forEach(t),iNe=r(Zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),WK=n(Zc,"CODE",{});var _8e=s(WK);dNe=r(_8e,"pretrained_model_name_or_path"),_8e.forEach(t),cNe=r(Zc,":"),Zc.forEach(t),fNe=i(Jr),y=n(Jr,"UL",{});var L=s(y);df=n(L,"LI",{});var UE=s(df);HK=n(UE,"STRONG",{});var b8e=s(HK);mNe=r(b8e,"albert"),b8e.forEach(t),gNe=r(UE," \u2014 "),Rx=n(UE,"A",{href:!0});var v8e=s(Rx);hNe=r(v8e,"AlbertConfig"),v8e.forEach(t),pNe=r(UE," (ALBERT model)"),UE.forEach(t),uNe=i(L),cf=n(L,"LI",{});var JE=s(cf);UK=n(JE,"STRONG",{});var F8e=s(UK);_Ne=r(F8e,"bart"),F8e.forEach(t),bNe=r(JE," \u2014 "),Bx=n(JE,"A",{href:!0});var T8e=s(Bx);vNe=r(T8e,"BartConfig"),T8e.forEach(t),FNe=r(JE," (BART model)"),JE.forEach(t),TNe=i(L),ff=n(L,"LI",{});var YE=s(ff);JK=n(YE,"STRONG",{});var M8e=s(JK);MNe=r(M8e,"beit"),M8e.forEach(t),ENe=r(YE," \u2014 "),Px=n(YE,"A",{href:!0});var E8e=s(Px);CNe=r(E8e,"BeitConfig"),E8e.forEach(t),wNe=r(YE," (BEiT model)"),YE.forEach(t),ANe=i(L),mf=n(L,"LI",{});var KE=s(mf);YK=n(KE,"STRONG",{});var C8e=s(YK);yNe=r(C8e,"bert"),C8e.forEach(t),LNe=r(KE," \u2014 "),Ix=n(KE,"A",{href:!0});var w8e=s(Ix);xNe=r(w8e,"BertConfig"),w8e.forEach(t),$Ne=r(KE," (BERT model)"),KE.forEach(t),kNe=i(L),gf=n(L,"LI",{});var ZE=s(gf);KK=n(ZE,"STRONG",{});var A8e=s(KK);SNe=r(A8e,"bert-generation"),A8e.forEach(t),RNe=r(ZE," \u2014 "),qx=n(ZE,"A",{href:!0});var y8e=s(qx);BNe=r(y8e,"BertGenerationConfig"),y8e.forEach(t),PNe=r(ZE," (Bert Generation model)"),ZE.forEach(t),INe=i(L),hf=n(L,"LI",{});var e5=s(hf);ZK=n(e5,"STRONG",{});var L8e=s(ZK);qNe=r(L8e,"big_bird"),L8e.forEach(t),NNe=r(e5," \u2014 "),Nx=n(e5,"A",{href:!0});var x8e=s(Nx);jNe=r(x8e,"BigBirdConfig"),x8e.forEach(t),DNe=r(e5," (BigBird model)"),e5.forEach(t),GNe=i(L),pf=n(L,"LI",{});var o5=s(pf);eZ=n(o5,"STRONG",{});var $8e=s(eZ);ONe=r($8e,"bigbird_pegasus"),$8e.forEach(t),VNe=r(o5," \u2014 "),jx=n(o5,"A",{href:!0});var k8e=s(jx);XNe=r(k8e,"BigBirdPegasusConfig"),k8e.forEach(t),zNe=r(o5," (BigBirdPegasus model)"),o5.forEach(t),QNe=i(L),uf=n(L,"LI",{});var r5=s(uf);oZ=n(r5,"STRONG",{});var S8e=s(oZ);WNe=r(S8e,"blenderbot"),S8e.forEach(t),HNe=r(r5," \u2014 "),Dx=n(r5,"A",{href:!0});var R8e=s(Dx);UNe=r(R8e,"BlenderbotConfig"),R8e.forEach(t),JNe=r(r5," (Blenderbot model)"),r5.forEach(t),YNe=i(L),_f=n(L,"LI",{});var t5=s(_f);rZ=n(t5,"STRONG",{});var B8e=s(rZ);KNe=r(B8e,"blenderbot-small"),B8e.forEach(t),ZNe=r(t5," \u2014 "),Gx=n(t5,"A",{href:!0});var P8e=s(Gx);eje=r(P8e,"BlenderbotSmallConfig"),P8e.forEach(t),oje=r(t5," (BlenderbotSmall model)"),t5.forEach(t),rje=i(L),bf=n(L,"LI",{});var a5=s(bf);tZ=n(a5,"STRONG",{});var I8e=s(tZ);tje=r(I8e,"camembert"),I8e.forEach(t),aje=r(a5," \u2014 "),Ox=n(a5,"A",{href:!0});var q8e=s(Ox);nje=r(q8e,"CamembertConfig"),q8e.forEach(t),sje=r(a5," (CamemBERT model)"),a5.forEach(t),lje=i(L),vf=n(L,"LI",{});var n5=s(vf);aZ=n(n5,"STRONG",{});var N8e=s(aZ);ije=r(N8e,"canine"),N8e.forEach(t),dje=r(n5," \u2014 "),Vx=n(n5,"A",{href:!0});var j8e=s(Vx);cje=r(j8e,"CanineConfig"),j8e.forEach(t),fje=r(n5," (Canine model)"),n5.forEach(t),mje=i(L),Ff=n(L,"LI",{});var s5=s(Ff);nZ=n(s5,"STRONG",{});var D8e=s(nZ);gje=r(D8e,"clip"),D8e.forEach(t),hje=r(s5," \u2014 "),Xx=n(s5,"A",{href:!0});var G8e=s(Xx);pje=r(G8e,"CLIPConfig"),G8e.forEach(t),uje=r(s5," (CLIP model)"),s5.forEach(t),_je=i(L),Tf=n(L,"LI",{});var l5=s(Tf);sZ=n(l5,"STRONG",{});var O8e=s(sZ);bje=r(O8e,"convbert"),O8e.forEach(t),vje=r(l5," \u2014 "),zx=n(l5,"A",{href:!0});var V8e=s(zx);Fje=r(V8e,"ConvBertConfig"),V8e.forEach(t),Tje=r(l5," (ConvBERT model)"),l5.forEach(t),Mje=i(L),Mf=n(L,"LI",{});var i5=s(Mf);lZ=n(i5,"STRONG",{});var X8e=s(lZ);Eje=r(X8e,"convnext"),X8e.forEach(t),Cje=r(i5," \u2014 "),Qx=n(i5,"A",{href:!0});var z8e=s(Qx);wje=r(z8e,"ConvNextConfig"),z8e.forEach(t),Aje=r(i5," (ConvNext model)"),i5.forEach(t),yje=i(L),Ef=n(L,"LI",{});var d5=s(Ef);iZ=n(d5,"STRONG",{});var Q8e=s(iZ);Lje=r(Q8e,"ctrl"),Q8e.forEach(t),xje=r(d5," \u2014 "),Wx=n(d5,"A",{href:!0});var W8e=s(Wx);$je=r(W8e,"CTRLConfig"),W8e.forEach(t),kje=r(d5," (CTRL model)"),d5.forEach(t),Sje=i(L),Cf=n(L,"LI",{});var c5=s(Cf);dZ=n(c5,"STRONG",{});var H8e=s(dZ);Rje=r(H8e,"data2vec-audio"),H8e.forEach(t),Bje=r(c5," \u2014 "),Hx=n(c5,"A",{href:!0});var U8e=s(Hx);Pje=r(U8e,"Data2VecAudioConfig"),U8e.forEach(t),Ije=r(c5," (Data2VecAudio model)"),c5.forEach(t),qje=i(L),wf=n(L,"LI",{});var f5=s(wf);cZ=n(f5,"STRONG",{});var J8e=s(cZ);Nje=r(J8e,"data2vec-text"),J8e.forEach(t),jje=r(f5," \u2014 "),Ux=n(f5,"A",{href:!0});var Y8e=s(Ux);Dje=r(Y8e,"Data2VecTextConfig"),Y8e.forEach(t),Gje=r(f5," (Data2VecText model)"),f5.forEach(t),Oje=i(L),Af=n(L,"LI",{});var m5=s(Af);fZ=n(m5,"STRONG",{});var K8e=s(fZ);Vje=r(K8e,"data2vec-vision"),K8e.forEach(t),Xje=r(m5," \u2014 "),Jx=n(m5,"A",{href:!0});var Z8e=s(Jx);zje=r(Z8e,"Data2VecVisionConfig"),Z8e.forEach(t),Qje=r(m5," (Data2VecVision model)"),m5.forEach(t),Wje=i(L),yf=n(L,"LI",{});var g5=s(yf);mZ=n(g5,"STRONG",{});var e9e=s(mZ);Hje=r(e9e,"deberta"),e9e.forEach(t),Uje=r(g5," \u2014 "),Yx=n(g5,"A",{href:!0});var o9e=s(Yx);Jje=r(o9e,"DebertaConfig"),o9e.forEach(t),Yje=r(g5," (DeBERTa model)"),g5.forEach(t),Kje=i(L),Lf=n(L,"LI",{});var h5=s(Lf);gZ=n(h5,"STRONG",{});var r9e=s(gZ);Zje=r(r9e,"deberta-v2"),r9e.forEach(t),eDe=r(h5," \u2014 "),Kx=n(h5,"A",{href:!0});var t9e=s(Kx);oDe=r(t9e,"DebertaV2Config"),t9e.forEach(t),rDe=r(h5," (DeBERTa-v2 model)"),h5.forEach(t),tDe=i(L),xf=n(L,"LI",{});var p5=s(xf);hZ=n(p5,"STRONG",{});var a9e=s(hZ);aDe=r(a9e,"decision_transformer"),a9e.forEach(t),nDe=r(p5," \u2014 "),Zx=n(p5,"A",{href:!0});var n9e=s(Zx);sDe=r(n9e,"DecisionTransformerConfig"),n9e.forEach(t),lDe=r(p5," (Decision Transformer model)"),p5.forEach(t),iDe=i(L),$f=n(L,"LI",{});var u5=s($f);pZ=n(u5,"STRONG",{});var s9e=s(pZ);dDe=r(s9e,"deit"),s9e.forEach(t),cDe=r(u5," \u2014 "),e$=n(u5,"A",{href:!0});var l9e=s(e$);fDe=r(l9e,"DeiTConfig"),l9e.forEach(t),mDe=r(u5," (DeiT model)"),u5.forEach(t),gDe=i(L),kf=n(L,"LI",{});var i9e=s(kf);uZ=n(i9e,"STRONG",{});var VRr=s(uZ);hDe=r(VRr,"detr"),VRr.forEach(t),pDe=r(i9e," \u2014 "),o$=n(i9e,"A",{href:!0});var XRr=s(o$);uDe=r(XRr,"DetrConfig"),XRr.forEach(t),_De=r(i9e," (DETR model)"),i9e.forEach(t),bDe=i(L),Sf=n(L,"LI",{});var d9e=s(Sf);_Z=n(d9e,"STRONG",{});var zRr=s(_Z);vDe=r(zRr,"distilbert"),zRr.forEach(t),FDe=r(d9e," \u2014 "),r$=n(d9e,"A",{href:!0});var QRr=s(r$);TDe=r(QRr,"DistilBertConfig"),QRr.forEach(t),MDe=r(d9e," (DistilBERT model)"),d9e.forEach(t),EDe=i(L),Rf=n(L,"LI",{});var c9e=s(Rf);bZ=n(c9e,"STRONG",{});var WRr=s(bZ);CDe=r(WRr,"dpr"),WRr.forEach(t),wDe=r(c9e," \u2014 "),t$=n(c9e,"A",{href:!0});var HRr=s(t$);ADe=r(HRr,"DPRConfig"),HRr.forEach(t),yDe=r(c9e," (DPR model)"),c9e.forEach(t),LDe=i(L),Bf=n(L,"LI",{});var f9e=s(Bf);vZ=n(f9e,"STRONG",{});var URr=s(vZ);xDe=r(URr,"dpt"),URr.forEach(t),$De=r(f9e," \u2014 "),a$=n(f9e,"A",{href:!0});var JRr=s(a$);kDe=r(JRr,"DPTConfig"),JRr.forEach(t),SDe=r(f9e," (DPT model)"),f9e.forEach(t),RDe=i(L),Pf=n(L,"LI",{});var m9e=s(Pf);FZ=n(m9e,"STRONG",{});var YRr=s(FZ);BDe=r(YRr,"electra"),YRr.forEach(t),PDe=r(m9e," \u2014 "),n$=n(m9e,"A",{href:!0});var KRr=s(n$);IDe=r(KRr,"ElectraConfig"),KRr.forEach(t),qDe=r(m9e," (ELECTRA model)"),m9e.forEach(t),NDe=i(L),If=n(L,"LI",{});var g9e=s(If);TZ=n(g9e,"STRONG",{});var ZRr=s(TZ);jDe=r(ZRr,"encoder-decoder"),ZRr.forEach(t),DDe=r(g9e," \u2014 "),s$=n(g9e,"A",{href:!0});var eBr=s(s$);GDe=r(eBr,"EncoderDecoderConfig"),eBr.forEach(t),ODe=r(g9e," (Encoder decoder model)"),g9e.forEach(t),VDe=i(L),qf=n(L,"LI",{});var h9e=s(qf);MZ=n(h9e,"STRONG",{});var oBr=s(MZ);XDe=r(oBr,"flaubert"),oBr.forEach(t),zDe=r(h9e," \u2014 "),l$=n(h9e,"A",{href:!0});var rBr=s(l$);QDe=r(rBr,"FlaubertConfig"),rBr.forEach(t),WDe=r(h9e," (FlauBERT model)"),h9e.forEach(t),HDe=i(L),Nf=n(L,"LI",{});var p9e=s(Nf);EZ=n(p9e,"STRONG",{});var tBr=s(EZ);UDe=r(tBr,"fnet"),tBr.forEach(t),JDe=r(p9e," \u2014 "),i$=n(p9e,"A",{href:!0});var aBr=s(i$);YDe=r(aBr,"FNetConfig"),aBr.forEach(t),KDe=r(p9e," (FNet model)"),p9e.forEach(t),ZDe=i(L),jf=n(L,"LI",{});var u9e=s(jf);CZ=n(u9e,"STRONG",{});var nBr=s(CZ);eGe=r(nBr,"fsmt"),nBr.forEach(t),oGe=r(u9e," \u2014 "),d$=n(u9e,"A",{href:!0});var sBr=s(d$);rGe=r(sBr,"FSMTConfig"),sBr.forEach(t),tGe=r(u9e," (FairSeq Machine-Translation model)"),u9e.forEach(t),aGe=i(L),Df=n(L,"LI",{});var _9e=s(Df);wZ=n(_9e,"STRONG",{});var lBr=s(wZ);nGe=r(lBr,"funnel"),lBr.forEach(t),sGe=r(_9e," \u2014 "),c$=n(_9e,"A",{href:!0});var iBr=s(c$);lGe=r(iBr,"FunnelConfig"),iBr.forEach(t),iGe=r(_9e," (Funnel Transformer model)"),_9e.forEach(t),dGe=i(L),Gf=n(L,"LI",{});var b9e=s(Gf);AZ=n(b9e,"STRONG",{});var dBr=s(AZ);cGe=r(dBr,"glpn"),dBr.forEach(t),fGe=r(b9e," \u2014 "),f$=n(b9e,"A",{href:!0});var cBr=s(f$);mGe=r(cBr,"GLPNConfig"),cBr.forEach(t),gGe=r(b9e," (GLPN model)"),b9e.forEach(t),hGe=i(L),Of=n(L,"LI",{});var v9e=s(Of);yZ=n(v9e,"STRONG",{});var fBr=s(yZ);pGe=r(fBr,"gpt2"),fBr.forEach(t),uGe=r(v9e," \u2014 "),m$=n(v9e,"A",{href:!0});var mBr=s(m$);_Ge=r(mBr,"GPT2Config"),mBr.forEach(t),bGe=r(v9e," (OpenAI GPT-2 model)"),v9e.forEach(t),vGe=i(L),Vf=n(L,"LI",{});var F9e=s(Vf);LZ=n(F9e,"STRONG",{});var gBr=s(LZ);FGe=r(gBr,"gpt_neo"),gBr.forEach(t),TGe=r(F9e," \u2014 "),g$=n(F9e,"A",{href:!0});var hBr=s(g$);MGe=r(hBr,"GPTNeoConfig"),hBr.forEach(t),EGe=r(F9e," (GPT Neo model)"),F9e.forEach(t),CGe=i(L),Xf=n(L,"LI",{});var T9e=s(Xf);xZ=n(T9e,"STRONG",{});var pBr=s(xZ);wGe=r(pBr,"gptj"),pBr.forEach(t),AGe=r(T9e," \u2014 "),h$=n(T9e,"A",{href:!0});var uBr=s(h$);yGe=r(uBr,"GPTJConfig"),uBr.forEach(t),LGe=r(T9e," (GPT-J model)"),T9e.forEach(t),xGe=i(L),zf=n(L,"LI",{});var M9e=s(zf);$Z=n(M9e,"STRONG",{});var _Br=s($Z);$Ge=r(_Br,"hubert"),_Br.forEach(t),kGe=r(M9e," \u2014 "),p$=n(M9e,"A",{href:!0});var bBr=s(p$);SGe=r(bBr,"HubertConfig"),bBr.forEach(t),RGe=r(M9e," (Hubert model)"),M9e.forEach(t),BGe=i(L),Qf=n(L,"LI",{});var E9e=s(Qf);kZ=n(E9e,"STRONG",{});var vBr=s(kZ);PGe=r(vBr,"ibert"),vBr.forEach(t),IGe=r(E9e," \u2014 "),u$=n(E9e,"A",{href:!0});var FBr=s(u$);qGe=r(FBr,"IBertConfig"),FBr.forEach(t),NGe=r(E9e," (I-BERT model)"),E9e.forEach(t),jGe=i(L),Wf=n(L,"LI",{});var C9e=s(Wf);SZ=n(C9e,"STRONG",{});var TBr=s(SZ);DGe=r(TBr,"imagegpt"),TBr.forEach(t),GGe=r(C9e," \u2014 "),_$=n(C9e,"A",{href:!0});var MBr=s(_$);OGe=r(MBr,"ImageGPTConfig"),MBr.forEach(t),VGe=r(C9e," (ImageGPT model)"),C9e.forEach(t),XGe=i(L),Hf=n(L,"LI",{});var w9e=s(Hf);RZ=n(w9e,"STRONG",{});var EBr=s(RZ);zGe=r(EBr,"layoutlm"),EBr.forEach(t),QGe=r(w9e," \u2014 "),b$=n(w9e,"A",{href:!0});var CBr=s(b$);WGe=r(CBr,"LayoutLMConfig"),CBr.forEach(t),HGe=r(w9e," (LayoutLM model)"),w9e.forEach(t),UGe=i(L),Uf=n(L,"LI",{});var A9e=s(Uf);BZ=n(A9e,"STRONG",{});var wBr=s(BZ);JGe=r(wBr,"layoutlmv2"),wBr.forEach(t),YGe=r(A9e," \u2014 "),v$=n(A9e,"A",{href:!0});var ABr=s(v$);KGe=r(ABr,"LayoutLMv2Config"),ABr.forEach(t),ZGe=r(A9e," (LayoutLMv2 model)"),A9e.forEach(t),eOe=i(L),Jf=n(L,"LI",{});var y9e=s(Jf);PZ=n(y9e,"STRONG",{});var yBr=s(PZ);oOe=r(yBr,"led"),yBr.forEach(t),rOe=r(y9e," \u2014 "),F$=n(y9e,"A",{href:!0});var LBr=s(F$);tOe=r(LBr,"LEDConfig"),LBr.forEach(t),aOe=r(y9e," (LED model)"),y9e.forEach(t),nOe=i(L),Yf=n(L,"LI",{});var L9e=s(Yf);IZ=n(L9e,"STRONG",{});var xBr=s(IZ);sOe=r(xBr,"longformer"),xBr.forEach(t),lOe=r(L9e," \u2014 "),T$=n(L9e,"A",{href:!0});var $Br=s(T$);iOe=r($Br,"LongformerConfig"),$Br.forEach(t),dOe=r(L9e," (Longformer model)"),L9e.forEach(t),cOe=i(L),Kf=n(L,"LI",{});var x9e=s(Kf);qZ=n(x9e,"STRONG",{});var kBr=s(qZ);fOe=r(kBr,"luke"),kBr.forEach(t),mOe=r(x9e," \u2014 "),M$=n(x9e,"A",{href:!0});var SBr=s(M$);gOe=r(SBr,"LukeConfig"),SBr.forEach(t),hOe=r(x9e," (LUKE model)"),x9e.forEach(t),pOe=i(L),Zf=n(L,"LI",{});var $9e=s(Zf);NZ=n($9e,"STRONG",{});var RBr=s(NZ);uOe=r(RBr,"lxmert"),RBr.forEach(t),_Oe=r($9e," \u2014 "),E$=n($9e,"A",{href:!0});var BBr=s(E$);bOe=r(BBr,"LxmertConfig"),BBr.forEach(t),vOe=r($9e," (LXMERT model)"),$9e.forEach(t),FOe=i(L),em=n(L,"LI",{});var k9e=s(em);jZ=n(k9e,"STRONG",{});var PBr=s(jZ);TOe=r(PBr,"m2m_100"),PBr.forEach(t),MOe=r(k9e," \u2014 "),C$=n(k9e,"A",{href:!0});var IBr=s(C$);EOe=r(IBr,"M2M100Config"),IBr.forEach(t),COe=r(k9e," (M2M100 model)"),k9e.forEach(t),wOe=i(L),om=n(L,"LI",{});var S9e=s(om);DZ=n(S9e,"STRONG",{});var qBr=s(DZ);AOe=r(qBr,"marian"),qBr.forEach(t),yOe=r(S9e," \u2014 "),w$=n(S9e,"A",{href:!0});var NBr=s(w$);LOe=r(NBr,"MarianConfig"),NBr.forEach(t),xOe=r(S9e," (Marian model)"),S9e.forEach(t),$Oe=i(L),rm=n(L,"LI",{});var R9e=s(rm);GZ=n(R9e,"STRONG",{});var jBr=s(GZ);kOe=r(jBr,"maskformer"),jBr.forEach(t),SOe=r(R9e," \u2014 "),A$=n(R9e,"A",{href:!0});var DBr=s(A$);ROe=r(DBr,"MaskFormerConfig"),DBr.forEach(t),BOe=r(R9e," (MaskFormer model)"),R9e.forEach(t),POe=i(L),tm=n(L,"LI",{});var B9e=s(tm);OZ=n(B9e,"STRONG",{});var GBr=s(OZ);IOe=r(GBr,"mbart"),GBr.forEach(t),qOe=r(B9e," \u2014 "),y$=n(B9e,"A",{href:!0});var OBr=s(y$);NOe=r(OBr,"MBartConfig"),OBr.forEach(t),jOe=r(B9e," (mBART model)"),B9e.forEach(t),DOe=i(L),am=n(L,"LI",{});var P9e=s(am);VZ=n(P9e,"STRONG",{});var VBr=s(VZ);GOe=r(VBr,"megatron-bert"),VBr.forEach(t),OOe=r(P9e," \u2014 "),L$=n(P9e,"A",{href:!0});var XBr=s(L$);VOe=r(XBr,"MegatronBertConfig"),XBr.forEach(t),XOe=r(P9e," (MegatronBert model)"),P9e.forEach(t),zOe=i(L),nm=n(L,"LI",{});var I9e=s(nm);XZ=n(I9e,"STRONG",{});var zBr=s(XZ);QOe=r(zBr,"mobilebert"),zBr.forEach(t),WOe=r(I9e," \u2014 "),x$=n(I9e,"A",{href:!0});var QBr=s(x$);HOe=r(QBr,"MobileBertConfig"),QBr.forEach(t),UOe=r(I9e," (MobileBERT model)"),I9e.forEach(t),JOe=i(L),sm=n(L,"LI",{});var q9e=s(sm);zZ=n(q9e,"STRONG",{});var WBr=s(zZ);YOe=r(WBr,"mpnet"),WBr.forEach(t),KOe=r(q9e," \u2014 "),$$=n(q9e,"A",{href:!0});var HBr=s($$);ZOe=r(HBr,"MPNetConfig"),HBr.forEach(t),eVe=r(q9e," (MPNet model)"),q9e.forEach(t),oVe=i(L),lm=n(L,"LI",{});var N9e=s(lm);QZ=n(N9e,"STRONG",{});var UBr=s(QZ);rVe=r(UBr,"mt5"),UBr.forEach(t),tVe=r(N9e," \u2014 "),k$=n(N9e,"A",{href:!0});var JBr=s(k$);aVe=r(JBr,"MT5Config"),JBr.forEach(t),nVe=r(N9e," (mT5 model)"),N9e.forEach(t),sVe=i(L),im=n(L,"LI",{});var j9e=s(im);WZ=n(j9e,"STRONG",{});var YBr=s(WZ);lVe=r(YBr,"nystromformer"),YBr.forEach(t),iVe=r(j9e," \u2014 "),S$=n(j9e,"A",{href:!0});var KBr=s(S$);dVe=r(KBr,"NystromformerConfig"),KBr.forEach(t),cVe=r(j9e," (Nystromformer model)"),j9e.forEach(t),fVe=i(L),dm=n(L,"LI",{});var D9e=s(dm);HZ=n(D9e,"STRONG",{});var ZBr=s(HZ);mVe=r(ZBr,"openai-gpt"),ZBr.forEach(t),gVe=r(D9e," \u2014 "),R$=n(D9e,"A",{href:!0});var ePr=s(R$);hVe=r(ePr,"OpenAIGPTConfig"),ePr.forEach(t),pVe=r(D9e," (OpenAI GPT model)"),D9e.forEach(t),uVe=i(L),cm=n(L,"LI",{});var G9e=s(cm);UZ=n(G9e,"STRONG",{});var oPr=s(UZ);_Ve=r(oPr,"pegasus"),oPr.forEach(t),bVe=r(G9e," \u2014 "),B$=n(G9e,"A",{href:!0});var rPr=s(B$);vVe=r(rPr,"PegasusConfig"),rPr.forEach(t),FVe=r(G9e," (Pegasus model)"),G9e.forEach(t),TVe=i(L),fm=n(L,"LI",{});var O9e=s(fm);JZ=n(O9e,"STRONG",{});var tPr=s(JZ);MVe=r(tPr,"perceiver"),tPr.forEach(t),EVe=r(O9e," \u2014 "),P$=n(O9e,"A",{href:!0});var aPr=s(P$);CVe=r(aPr,"PerceiverConfig"),aPr.forEach(t),wVe=r(O9e," (Perceiver model)"),O9e.forEach(t),AVe=i(L),mm=n(L,"LI",{});var V9e=s(mm);YZ=n(V9e,"STRONG",{});var nPr=s(YZ);yVe=r(nPr,"plbart"),nPr.forEach(t),LVe=r(V9e," \u2014 "),I$=n(V9e,"A",{href:!0});var sPr=s(I$);xVe=r(sPr,"PLBartConfig"),sPr.forEach(t),$Ve=r(V9e," (PLBart model)"),V9e.forEach(t),kVe=i(L),gm=n(L,"LI",{});var X9e=s(gm);KZ=n(X9e,"STRONG",{});var lPr=s(KZ);SVe=r(lPr,"poolformer"),lPr.forEach(t),RVe=r(X9e," \u2014 "),q$=n(X9e,"A",{href:!0});var iPr=s(q$);BVe=r(iPr,"PoolFormerConfig"),iPr.forEach(t),PVe=r(X9e," (PoolFormer model)"),X9e.forEach(t),IVe=i(L),hm=n(L,"LI",{});var z9e=s(hm);ZZ=n(z9e,"STRONG",{});var dPr=s(ZZ);qVe=r(dPr,"prophetnet"),dPr.forEach(t),NVe=r(z9e," \u2014 "),N$=n(z9e,"A",{href:!0});var cPr=s(N$);jVe=r(cPr,"ProphetNetConfig"),cPr.forEach(t),DVe=r(z9e," (ProphetNet model)"),z9e.forEach(t),GVe=i(L),pm=n(L,"LI",{});var Q9e=s(pm);eee=n(Q9e,"STRONG",{});var fPr=s(eee);OVe=r(fPr,"qdqbert"),fPr.forEach(t),VVe=r(Q9e," \u2014 "),j$=n(Q9e,"A",{href:!0});var mPr=s(j$);XVe=r(mPr,"QDQBertConfig"),mPr.forEach(t),zVe=r(Q9e," (QDQBert model)"),Q9e.forEach(t),QVe=i(L),um=n(L,"LI",{});var W9e=s(um);oee=n(W9e,"STRONG",{});var gPr=s(oee);WVe=r(gPr,"rag"),gPr.forEach(t),HVe=r(W9e," \u2014 "),D$=n(W9e,"A",{href:!0});var hPr=s(D$);UVe=r(hPr,"RagConfig"),hPr.forEach(t),JVe=r(W9e," (RAG model)"),W9e.forEach(t),YVe=i(L),_m=n(L,"LI",{});var H9e=s(_m);ree=n(H9e,"STRONG",{});var pPr=s(ree);KVe=r(pPr,"realm"),pPr.forEach(t),ZVe=r(H9e," \u2014 "),G$=n(H9e,"A",{href:!0});var uPr=s(G$);eXe=r(uPr,"RealmConfig"),uPr.forEach(t),oXe=r(H9e," (Realm model)"),H9e.forEach(t),rXe=i(L),bm=n(L,"LI",{});var U9e=s(bm);tee=n(U9e,"STRONG",{});var _Pr=s(tee);tXe=r(_Pr,"reformer"),_Pr.forEach(t),aXe=r(U9e," \u2014 "),O$=n(U9e,"A",{href:!0});var bPr=s(O$);nXe=r(bPr,"ReformerConfig"),bPr.forEach(t),sXe=r(U9e," (Reformer model)"),U9e.forEach(t),lXe=i(L),vm=n(L,"LI",{});var J9e=s(vm);aee=n(J9e,"STRONG",{});var vPr=s(aee);iXe=r(vPr,"regnet"),vPr.forEach(t),dXe=r(J9e," \u2014 "),V$=n(J9e,"A",{href:!0});var FPr=s(V$);cXe=r(FPr,"RegNetConfig"),FPr.forEach(t),fXe=r(J9e," (RegNet model)"),J9e.forEach(t),mXe=i(L),Fm=n(L,"LI",{});var Y9e=s(Fm);nee=n(Y9e,"STRONG",{});var TPr=s(nee);gXe=r(TPr,"rembert"),TPr.forEach(t),hXe=r(Y9e," \u2014 "),X$=n(Y9e,"A",{href:!0});var MPr=s(X$);pXe=r(MPr,"RemBertConfig"),MPr.forEach(t),uXe=r(Y9e," (RemBERT model)"),Y9e.forEach(t),_Xe=i(L),Tm=n(L,"LI",{});var K9e=s(Tm);see=n(K9e,"STRONG",{});var EPr=s(see);bXe=r(EPr,"resnet"),EPr.forEach(t),vXe=r(K9e," \u2014 "),z$=n(K9e,"A",{href:!0});var CPr=s(z$);FXe=r(CPr,"ResNetConfig"),CPr.forEach(t),TXe=r(K9e," (ResNet model)"),K9e.forEach(t),MXe=i(L),Mm=n(L,"LI",{});var Z9e=s(Mm);lee=n(Z9e,"STRONG",{});var wPr=s(lee);EXe=r(wPr,"retribert"),wPr.forEach(t),CXe=r(Z9e," \u2014 "),Q$=n(Z9e,"A",{href:!0});var APr=s(Q$);wXe=r(APr,"RetriBertConfig"),APr.forEach(t),AXe=r(Z9e," (RetriBERT model)"),Z9e.forEach(t),yXe=i(L),Em=n(L,"LI",{});var eMe=s(Em);iee=n(eMe,"STRONG",{});var yPr=s(iee);LXe=r(yPr,"roberta"),yPr.forEach(t),xXe=r(eMe," \u2014 "),W$=n(eMe,"A",{href:!0});var LPr=s(W$);$Xe=r(LPr,"RobertaConfig"),LPr.forEach(t),kXe=r(eMe," (RoBERTa model)"),eMe.forEach(t),SXe=i(L),Cm=n(L,"LI",{});var oMe=s(Cm);dee=n(oMe,"STRONG",{});var xPr=s(dee);RXe=r(xPr,"roformer"),xPr.forEach(t),BXe=r(oMe," \u2014 "),H$=n(oMe,"A",{href:!0});var $Pr=s(H$);PXe=r($Pr,"RoFormerConfig"),$Pr.forEach(t),IXe=r(oMe," (RoFormer model)"),oMe.forEach(t),qXe=i(L),wm=n(L,"LI",{});var rMe=s(wm);cee=n(rMe,"STRONG",{});var kPr=s(cee);NXe=r(kPr,"segformer"),kPr.forEach(t),jXe=r(rMe," \u2014 "),U$=n(rMe,"A",{href:!0});var SPr=s(U$);DXe=r(SPr,"SegformerConfig"),SPr.forEach(t),GXe=r(rMe," (SegFormer model)"),rMe.forEach(t),OXe=i(L),Am=n(L,"LI",{});var tMe=s(Am);fee=n(tMe,"STRONG",{});var RPr=s(fee);VXe=r(RPr,"sew"),RPr.forEach(t),XXe=r(tMe," \u2014 "),J$=n(tMe,"A",{href:!0});var BPr=s(J$);zXe=r(BPr,"SEWConfig"),BPr.forEach(t),QXe=r(tMe," (SEW model)"),tMe.forEach(t),WXe=i(L),ym=n(L,"LI",{});var aMe=s(ym);mee=n(aMe,"STRONG",{});var PPr=s(mee);HXe=r(PPr,"sew-d"),PPr.forEach(t),UXe=r(aMe," \u2014 "),Y$=n(aMe,"A",{href:!0});var IPr=s(Y$);JXe=r(IPr,"SEWDConfig"),IPr.forEach(t),YXe=r(aMe," (SEW-D model)"),aMe.forEach(t),KXe=i(L),Lm=n(L,"LI",{});var nMe=s(Lm);gee=n(nMe,"STRONG",{});var qPr=s(gee);ZXe=r(qPr,"speech-encoder-decoder"),qPr.forEach(t),eze=r(nMe," \u2014 "),K$=n(nMe,"A",{href:!0});var NPr=s(K$);oze=r(NPr,"SpeechEncoderDecoderConfig"),NPr.forEach(t),rze=r(nMe," (Speech Encoder decoder model)"),nMe.forEach(t),tze=i(L),xm=n(L,"LI",{});var sMe=s(xm);hee=n(sMe,"STRONG",{});var jPr=s(hee);aze=r(jPr,"speech_to_text"),jPr.forEach(t),nze=r(sMe," \u2014 "),Z$=n(sMe,"A",{href:!0});var DPr=s(Z$);sze=r(DPr,"Speech2TextConfig"),DPr.forEach(t),lze=r(sMe," (Speech2Text model)"),sMe.forEach(t),ize=i(L),$m=n(L,"LI",{});var lMe=s($m);pee=n(lMe,"STRONG",{});var GPr=s(pee);dze=r(GPr,"speech_to_text_2"),GPr.forEach(t),cze=r(lMe," \u2014 "),ek=n(lMe,"A",{href:!0});var OPr=s(ek);fze=r(OPr,"Speech2Text2Config"),OPr.forEach(t),mze=r(lMe," (Speech2Text2 model)"),lMe.forEach(t),gze=i(L),km=n(L,"LI",{});var iMe=s(km);uee=n(iMe,"STRONG",{});var VPr=s(uee);hze=r(VPr,"splinter"),VPr.forEach(t),pze=r(iMe," \u2014 "),ok=n(iMe,"A",{href:!0});var XPr=s(ok);uze=r(XPr,"SplinterConfig"),XPr.forEach(t),_ze=r(iMe," (Splinter model)"),iMe.forEach(t),bze=i(L),Sm=n(L,"LI",{});var dMe=s(Sm);_ee=n(dMe,"STRONG",{});var zPr=s(_ee);vze=r(zPr,"squeezebert"),zPr.forEach(t),Fze=r(dMe," \u2014 "),rk=n(dMe,"A",{href:!0});var QPr=s(rk);Tze=r(QPr,"SqueezeBertConfig"),QPr.forEach(t),Mze=r(dMe," (SqueezeBERT model)"),dMe.forEach(t),Eze=i(L),Rm=n(L,"LI",{});var cMe=s(Rm);bee=n(cMe,"STRONG",{});var WPr=s(bee);Cze=r(WPr,"swin"),WPr.forEach(t),wze=r(cMe," \u2014 "),tk=n(cMe,"A",{href:!0});var HPr=s(tk);Aze=r(HPr,"SwinConfig"),HPr.forEach(t),yze=r(cMe," (Swin model)"),cMe.forEach(t),Lze=i(L),Bm=n(L,"LI",{});var fMe=s(Bm);vee=n(fMe,"STRONG",{});var UPr=s(vee);xze=r(UPr,"t5"),UPr.forEach(t),$ze=r(fMe," \u2014 "),ak=n(fMe,"A",{href:!0});var JPr=s(ak);kze=r(JPr,"T5Config"),JPr.forEach(t),Sze=r(fMe," (T5 model)"),fMe.forEach(t),Rze=i(L),Pm=n(L,"LI",{});var mMe=s(Pm);Fee=n(mMe,"STRONG",{});var YPr=s(Fee);Bze=r(YPr,"tapas"),YPr.forEach(t),Pze=r(mMe," \u2014 "),nk=n(mMe,"A",{href:!0});var KPr=s(nk);Ize=r(KPr,"TapasConfig"),KPr.forEach(t),qze=r(mMe," (TAPAS model)"),mMe.forEach(t),Nze=i(L),Im=n(L,"LI",{});var gMe=s(Im);Tee=n(gMe,"STRONG",{});var ZPr=s(Tee);jze=r(ZPr,"tapex"),ZPr.forEach(t),Dze=r(gMe," \u2014 "),sk=n(gMe,"A",{href:!0});var eIr=s(sk);Gze=r(eIr,"BartConfig"),eIr.forEach(t),Oze=r(gMe," (TAPEX model)"),gMe.forEach(t),Vze=i(L),qm=n(L,"LI",{});var hMe=s(qm);Mee=n(hMe,"STRONG",{});var oIr=s(Mee);Xze=r(oIr,"transfo-xl"),oIr.forEach(t),zze=r(hMe," \u2014 "),lk=n(hMe,"A",{href:!0});var rIr=s(lk);Qze=r(rIr,"TransfoXLConfig"),rIr.forEach(t),Wze=r(hMe," (Transformer-XL model)"),hMe.forEach(t),Hze=i(L),Nm=n(L,"LI",{});var pMe=s(Nm);Eee=n(pMe,"STRONG",{});var tIr=s(Eee);Uze=r(tIr,"trocr"),tIr.forEach(t),Jze=r(pMe," \u2014 "),ik=n(pMe,"A",{href:!0});var aIr=s(ik);Yze=r(aIr,"TrOCRConfig"),aIr.forEach(t),Kze=r(pMe," (TrOCR model)"),pMe.forEach(t),Zze=i(L),jm=n(L,"LI",{});var uMe=s(jm);Cee=n(uMe,"STRONG",{});var nIr=s(Cee);eQe=r(nIr,"unispeech"),nIr.forEach(t),oQe=r(uMe," \u2014 "),dk=n(uMe,"A",{href:!0});var sIr=s(dk);rQe=r(sIr,"UniSpeechConfig"),sIr.forEach(t),tQe=r(uMe," (UniSpeech model)"),uMe.forEach(t),aQe=i(L),Dm=n(L,"LI",{});var _Me=s(Dm);wee=n(_Me,"STRONG",{});var lIr=s(wee);nQe=r(lIr,"unispeech-sat"),lIr.forEach(t),sQe=r(_Me," \u2014 "),ck=n(_Me,"A",{href:!0});var iIr=s(ck);lQe=r(iIr,"UniSpeechSatConfig"),iIr.forEach(t),iQe=r(_Me," (UniSpeechSat model)"),_Me.forEach(t),dQe=i(L),Gm=n(L,"LI",{});var bMe=s(Gm);Aee=n(bMe,"STRONG",{});var dIr=s(Aee);cQe=r(dIr,"van"),dIr.forEach(t),fQe=r(bMe," \u2014 "),fk=n(bMe,"A",{href:!0});var cIr=s(fk);mQe=r(cIr,"VanConfig"),cIr.forEach(t),gQe=r(bMe," (VAN model)"),bMe.forEach(t),hQe=i(L),Om=n(L,"LI",{});var vMe=s(Om);yee=n(vMe,"STRONG",{});var fIr=s(yee);pQe=r(fIr,"vilt"),fIr.forEach(t),uQe=r(vMe," \u2014 "),mk=n(vMe,"A",{href:!0});var mIr=s(mk);_Qe=r(mIr,"ViltConfig"),mIr.forEach(t),bQe=r(vMe," (ViLT model)"),vMe.forEach(t),vQe=i(L),Vm=n(L,"LI",{});var FMe=s(Vm);Lee=n(FMe,"STRONG",{});var gIr=s(Lee);FQe=r(gIr,"vision-encoder-decoder"),gIr.forEach(t),TQe=r(FMe," \u2014 "),gk=n(FMe,"A",{href:!0});var hIr=s(gk);MQe=r(hIr,"VisionEncoderDecoderConfig"),hIr.forEach(t),EQe=r(FMe," (Vision Encoder decoder model)"),FMe.forEach(t),CQe=i(L),Xm=n(L,"LI",{});var TMe=s(Xm);xee=n(TMe,"STRONG",{});var pIr=s(xee);wQe=r(pIr,"vision-text-dual-encoder"),pIr.forEach(t),AQe=r(TMe," \u2014 "),hk=n(TMe,"A",{href:!0});var uIr=s(hk);yQe=r(uIr,"VisionTextDualEncoderConfig"),uIr.forEach(t),LQe=r(TMe," (VisionTextDualEncoder model)"),TMe.forEach(t),xQe=i(L),zm=n(L,"LI",{});var MMe=s(zm);$ee=n(MMe,"STRONG",{});var _Ir=s($ee);$Qe=r(_Ir,"visual_bert"),_Ir.forEach(t),kQe=r(MMe," \u2014 "),pk=n(MMe,"A",{href:!0});var bIr=s(pk);SQe=r(bIr,"VisualBertConfig"),bIr.forEach(t),RQe=r(MMe," (VisualBert model)"),MMe.forEach(t),BQe=i(L),Qm=n(L,"LI",{});var EMe=s(Qm);kee=n(EMe,"STRONG",{});var vIr=s(kee);PQe=r(vIr,"vit"),vIr.forEach(t),IQe=r(EMe," \u2014 "),uk=n(EMe,"A",{href:!0});var FIr=s(uk);qQe=r(FIr,"ViTConfig"),FIr.forEach(t),NQe=r(EMe," (ViT model)"),EMe.forEach(t),jQe=i(L),Wm=n(L,"LI",{});var CMe=s(Wm);See=n(CMe,"STRONG",{});var TIr=s(See);DQe=r(TIr,"vit_mae"),TIr.forEach(t),GQe=r(CMe," \u2014 "),_k=n(CMe,"A",{href:!0});var MIr=s(_k);OQe=r(MIr,"ViTMAEConfig"),MIr.forEach(t),VQe=r(CMe," (ViTMAE model)"),CMe.forEach(t),XQe=i(L),Hm=n(L,"LI",{});var wMe=s(Hm);Ree=n(wMe,"STRONG",{});var EIr=s(Ree);zQe=r(EIr,"wav2vec2"),EIr.forEach(t),QQe=r(wMe," \u2014 "),bk=n(wMe,"A",{href:!0});var CIr=s(bk);WQe=r(CIr,"Wav2Vec2Config"),CIr.forEach(t),HQe=r(wMe," (Wav2Vec2 model)"),wMe.forEach(t),UQe=i(L),Um=n(L,"LI",{});var AMe=s(Um);Bee=n(AMe,"STRONG",{});var wIr=s(Bee);JQe=r(wIr,"wavlm"),wIr.forEach(t),YQe=r(AMe," \u2014 "),vk=n(AMe,"A",{href:!0});var AIr=s(vk);KQe=r(AIr,"WavLMConfig"),AIr.forEach(t),ZQe=r(AMe," (WavLM model)"),AMe.forEach(t),eWe=i(L),Jm=n(L,"LI",{});var yMe=s(Jm);Pee=n(yMe,"STRONG",{});var yIr=s(Pee);oWe=r(yIr,"xglm"),yIr.forEach(t),rWe=r(yMe," \u2014 "),Fk=n(yMe,"A",{href:!0});var LIr=s(Fk);tWe=r(LIr,"XGLMConfig"),LIr.forEach(t),aWe=r(yMe," (XGLM model)"),yMe.forEach(t),nWe=i(L),Ym=n(L,"LI",{});var LMe=s(Ym);Iee=n(LMe,"STRONG",{});var xIr=s(Iee);sWe=r(xIr,"xlm"),xIr.forEach(t),lWe=r(LMe," \u2014 "),Tk=n(LMe,"A",{href:!0});var $Ir=s(Tk);iWe=r($Ir,"XLMConfig"),$Ir.forEach(t),dWe=r(LMe," (XLM model)"),LMe.forEach(t),cWe=i(L),Km=n(L,"LI",{});var xMe=s(Km);qee=n(xMe,"STRONG",{});var kIr=s(qee);fWe=r(kIr,"xlm-prophetnet"),kIr.forEach(t),mWe=r(xMe," \u2014 "),Mk=n(xMe,"A",{href:!0});var SIr=s(Mk);gWe=r(SIr,"XLMProphetNetConfig"),SIr.forEach(t),hWe=r(xMe," (XLMProphetNet model)"),xMe.forEach(t),pWe=i(L),Zm=n(L,"LI",{});var $Me=s(Zm);Nee=n($Me,"STRONG",{});var RIr=s(Nee);uWe=r(RIr,"xlm-roberta"),RIr.forEach(t),_We=r($Me," \u2014 "),Ek=n($Me,"A",{href:!0});var BIr=s(Ek);bWe=r(BIr,"XLMRobertaConfig"),BIr.forEach(t),vWe=r($Me," (XLM-RoBERTa model)"),$Me.forEach(t),FWe=i(L),eg=n(L,"LI",{});var kMe=s(eg);jee=n(kMe,"STRONG",{});var PIr=s(jee);TWe=r(PIr,"xlm-roberta-xl"),PIr.forEach(t),MWe=r(kMe," \u2014 "),Ck=n(kMe,"A",{href:!0});var IIr=s(Ck);EWe=r(IIr,"XLMRobertaXLConfig"),IIr.forEach(t),CWe=r(kMe," (XLM-RoBERTa-XL model)"),kMe.forEach(t),wWe=i(L),og=n(L,"LI",{});var SMe=s(og);Dee=n(SMe,"STRONG",{});var qIr=s(Dee);AWe=r(qIr,"xlnet"),qIr.forEach(t),yWe=r(SMe," \u2014 "),wk=n(SMe,"A",{href:!0});var NIr=s(wk);LWe=r(NIr,"XLNetConfig"),NIr.forEach(t),xWe=r(SMe," (XLNet model)"),SMe.forEach(t),$We=i(L),rg=n(L,"LI",{});var RMe=s(rg);Gee=n(RMe,"STRONG",{});var jIr=s(Gee);kWe=r(jIr,"yoso"),jIr.forEach(t),SWe=r(RMe," \u2014 "),Ak=n(RMe,"A",{href:!0});var DIr=s(Ak);RWe=r(DIr,"YosoConfig"),DIr.forEach(t),BWe=r(RMe," (YOSO model)"),RMe.forEach(t),L.forEach(t),PWe=i(Jr),T(tg.$$.fragment,Jr),Jr.forEach(t),IWe=i(Ur),ag=n(Ur,"DIV",{class:!0});var RPe=s(ag);T(M3.$$.fragment,RPe),qWe=i(RPe),Oee=n(RPe,"P",{});var GIr=s(Oee);NWe=r(GIr,"Register a new configuration for this class."),GIr.forEach(t),RPe.forEach(t),Ur.forEach(t),NRe=i(f),mi=n(f,"H2",{class:!0});var BPe=s(mi);ng=n(BPe,"A",{id:!0,class:!0,href:!0});var OIr=s(ng);Vee=n(OIr,"SPAN",{});var VIr=s(Vee);T(E3.$$.fragment,VIr),VIr.forEach(t),OIr.forEach(t),jWe=i(BPe),Xee=n(BPe,"SPAN",{});var XIr=s(Xee);DWe=r(XIr,"AutoTokenizer"),XIr.forEach(t),BPe.forEach(t),jRe=i(f),Eo=n(f,"DIV",{class:!0});var ks=s(Eo);T(C3.$$.fragment,ks),GWe=i(ks),w3=n(ks,"P",{});var PPe=s(w3);OWe=r(PPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yk=n(PPe,"A",{href:!0});var zIr=s(yk);VWe=r(zIr,"AutoTokenizer.from_pretrained()"),zIr.forEach(t),XWe=r(PPe," class method."),PPe.forEach(t),zWe=i(ks),A3=n(ks,"P",{});var IPe=s(A3);QWe=r(IPe,"This class cannot be instantiated directly using "),zee=n(IPe,"CODE",{});var QIr=s(zee);WWe=r(QIr,"__init__()"),QIr.forEach(t),HWe=r(IPe," (throws an error)."),IPe.forEach(t),UWe=i(ks),Tr=n(ks,"DIV",{class:!0});var Ss=s(Tr);T(y3.$$.fragment,Ss),JWe=i(Ss),Qee=n(Ss,"P",{});var WIr=s(Qee);YWe=r(WIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),WIr.forEach(t),KWe=i(Ss),Fa=n(Ss,"P",{});var _5=s(Fa);ZWe=r(_5,"The tokenizer class to instantiate is selected based on the "),Wee=n(_5,"CODE",{});var HIr=s(Wee);eHe=r(HIr,"model_type"),HIr.forEach(t),oHe=r(_5,` property of the config object (either
passed as an argument or loaded from `),Hee=n(_5,"CODE",{});var UIr=s(Hee);rHe=r(UIr,"pretrained_model_name_or_path"),UIr.forEach(t),tHe=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uee=n(_5,"CODE",{});var JIr=s(Uee);aHe=r(JIr,"pretrained_model_name_or_path"),JIr.forEach(t),nHe=r(_5,":"),_5.forEach(t),sHe=i(Ss),k=n(Ss,"UL",{});var S=s(k);yn=n(S,"LI",{});var M7=s(yn);Jee=n(M7,"STRONG",{});var YIr=s(Jee);lHe=r(YIr,"albert"),YIr.forEach(t),iHe=r(M7," \u2014 "),Lk=n(M7,"A",{href:!0});var KIr=s(Lk);dHe=r(KIr,"AlbertTokenizer"),KIr.forEach(t),cHe=r(M7," or "),xk=n(M7,"A",{href:!0});var ZIr=s(xk);fHe=r(ZIr,"AlbertTokenizerFast"),ZIr.forEach(t),mHe=r(M7," (ALBERT model)"),M7.forEach(t),gHe=i(S),Ln=n(S,"LI",{});var E7=s(Ln);Yee=n(E7,"STRONG",{});var eqr=s(Yee);hHe=r(eqr,"bart"),eqr.forEach(t),pHe=r(E7," \u2014 "),$k=n(E7,"A",{href:!0});var oqr=s($k);uHe=r(oqr,"BartTokenizer"),oqr.forEach(t),_He=r(E7," or "),kk=n(E7,"A",{href:!0});var rqr=s(kk);bHe=r(rqr,"BartTokenizerFast"),rqr.forEach(t),vHe=r(E7," (BART model)"),E7.forEach(t),FHe=i(S),xn=n(S,"LI",{});var C7=s(xn);Kee=n(C7,"STRONG",{});var tqr=s(Kee);THe=r(tqr,"barthez"),tqr.forEach(t),MHe=r(C7," \u2014 "),Sk=n(C7,"A",{href:!0});var aqr=s(Sk);EHe=r(aqr,"BarthezTokenizer"),aqr.forEach(t),CHe=r(C7," or "),Rk=n(C7,"A",{href:!0});var nqr=s(Rk);wHe=r(nqr,"BarthezTokenizerFast"),nqr.forEach(t),AHe=r(C7," (BARThez model)"),C7.forEach(t),yHe=i(S),sg=n(S,"LI",{});var BMe=s(sg);Zee=n(BMe,"STRONG",{});var sqr=s(Zee);LHe=r(sqr,"bartpho"),sqr.forEach(t),xHe=r(BMe," \u2014 "),Bk=n(BMe,"A",{href:!0});var lqr=s(Bk);$He=r(lqr,"BartphoTokenizer"),lqr.forEach(t),kHe=r(BMe," (BARTpho model)"),BMe.forEach(t),SHe=i(S),$n=n(S,"LI",{});var w7=s($n);eoe=n(w7,"STRONG",{});var iqr=s(eoe);RHe=r(iqr,"bert"),iqr.forEach(t),BHe=r(w7," \u2014 "),Pk=n(w7,"A",{href:!0});var dqr=s(Pk);PHe=r(dqr,"BertTokenizer"),dqr.forEach(t),IHe=r(w7," or "),Ik=n(w7,"A",{href:!0});var cqr=s(Ik);qHe=r(cqr,"BertTokenizerFast"),cqr.forEach(t),NHe=r(w7," (BERT model)"),w7.forEach(t),jHe=i(S),lg=n(S,"LI",{});var PMe=s(lg);ooe=n(PMe,"STRONG",{});var fqr=s(ooe);DHe=r(fqr,"bert-generation"),fqr.forEach(t),GHe=r(PMe," \u2014 "),qk=n(PMe,"A",{href:!0});var mqr=s(qk);OHe=r(mqr,"BertGenerationTokenizer"),mqr.forEach(t),VHe=r(PMe," (Bert Generation model)"),PMe.forEach(t),XHe=i(S),ig=n(S,"LI",{});var IMe=s(ig);roe=n(IMe,"STRONG",{});var gqr=s(roe);zHe=r(gqr,"bert-japanese"),gqr.forEach(t),QHe=r(IMe," \u2014 "),Nk=n(IMe,"A",{href:!0});var hqr=s(Nk);WHe=r(hqr,"BertJapaneseTokenizer"),hqr.forEach(t),HHe=r(IMe," (BertJapanese model)"),IMe.forEach(t),UHe=i(S),dg=n(S,"LI",{});var qMe=s(dg);toe=n(qMe,"STRONG",{});var pqr=s(toe);JHe=r(pqr,"bertweet"),pqr.forEach(t),YHe=r(qMe," \u2014 "),jk=n(qMe,"A",{href:!0});var uqr=s(jk);KHe=r(uqr,"BertweetTokenizer"),uqr.forEach(t),ZHe=r(qMe," (Bertweet model)"),qMe.forEach(t),eUe=i(S),kn=n(S,"LI",{});var A7=s(kn);aoe=n(A7,"STRONG",{});var _qr=s(aoe);oUe=r(_qr,"big_bird"),_qr.forEach(t),rUe=r(A7," \u2014 "),Dk=n(A7,"A",{href:!0});var bqr=s(Dk);tUe=r(bqr,"BigBirdTokenizer"),bqr.forEach(t),aUe=r(A7," or "),Gk=n(A7,"A",{href:!0});var vqr=s(Gk);nUe=r(vqr,"BigBirdTokenizerFast"),vqr.forEach(t),sUe=r(A7," (BigBird model)"),A7.forEach(t),lUe=i(S),Sn=n(S,"LI",{});var y7=s(Sn);noe=n(y7,"STRONG",{});var Fqr=s(noe);iUe=r(Fqr,"bigbird_pegasus"),Fqr.forEach(t),dUe=r(y7," \u2014 "),Ok=n(y7,"A",{href:!0});var Tqr=s(Ok);cUe=r(Tqr,"PegasusTokenizer"),Tqr.forEach(t),fUe=r(y7," or "),Vk=n(y7,"A",{href:!0});var Mqr=s(Vk);mUe=r(Mqr,"PegasusTokenizerFast"),Mqr.forEach(t),gUe=r(y7," (BigBirdPegasus model)"),y7.forEach(t),hUe=i(S),Rn=n(S,"LI",{});var L7=s(Rn);soe=n(L7,"STRONG",{});var Eqr=s(soe);pUe=r(Eqr,"blenderbot"),Eqr.forEach(t),uUe=r(L7," \u2014 "),Xk=n(L7,"A",{href:!0});var Cqr=s(Xk);_Ue=r(Cqr,"BlenderbotTokenizer"),Cqr.forEach(t),bUe=r(L7," or "),zk=n(L7,"A",{href:!0});var wqr=s(zk);vUe=r(wqr,"BlenderbotTokenizerFast"),wqr.forEach(t),FUe=r(L7," (Blenderbot model)"),L7.forEach(t),TUe=i(S),cg=n(S,"LI",{});var NMe=s(cg);loe=n(NMe,"STRONG",{});var Aqr=s(loe);MUe=r(Aqr,"blenderbot-small"),Aqr.forEach(t),EUe=r(NMe," \u2014 "),Qk=n(NMe,"A",{href:!0});var yqr=s(Qk);CUe=r(yqr,"BlenderbotSmallTokenizer"),yqr.forEach(t),wUe=r(NMe," (BlenderbotSmall model)"),NMe.forEach(t),AUe=i(S),fg=n(S,"LI",{});var jMe=s(fg);ioe=n(jMe,"STRONG",{});var Lqr=s(ioe);yUe=r(Lqr,"byt5"),Lqr.forEach(t),LUe=r(jMe," \u2014 "),Wk=n(jMe,"A",{href:!0});var xqr=s(Wk);xUe=r(xqr,"ByT5Tokenizer"),xqr.forEach(t),$Ue=r(jMe," (ByT5 model)"),jMe.forEach(t),kUe=i(S),Bn=n(S,"LI",{});var x7=s(Bn);doe=n(x7,"STRONG",{});var $qr=s(doe);SUe=r($qr,"camembert"),$qr.forEach(t),RUe=r(x7," \u2014 "),Hk=n(x7,"A",{href:!0});var kqr=s(Hk);BUe=r(kqr,"CamembertTokenizer"),kqr.forEach(t),PUe=r(x7," or "),Uk=n(x7,"A",{href:!0});var Sqr=s(Uk);IUe=r(Sqr,"CamembertTokenizerFast"),Sqr.forEach(t),qUe=r(x7," (CamemBERT model)"),x7.forEach(t),NUe=i(S),mg=n(S,"LI",{});var DMe=s(mg);coe=n(DMe,"STRONG",{});var Rqr=s(coe);jUe=r(Rqr,"canine"),Rqr.forEach(t),DUe=r(DMe," \u2014 "),Jk=n(DMe,"A",{href:!0});var Bqr=s(Jk);GUe=r(Bqr,"CanineTokenizer"),Bqr.forEach(t),OUe=r(DMe," (Canine model)"),DMe.forEach(t),VUe=i(S),Pn=n(S,"LI",{});var $7=s(Pn);foe=n($7,"STRONG",{});var Pqr=s(foe);XUe=r(Pqr,"clip"),Pqr.forEach(t),zUe=r($7," \u2014 "),Yk=n($7,"A",{href:!0});var Iqr=s(Yk);QUe=r(Iqr,"CLIPTokenizer"),Iqr.forEach(t),WUe=r($7," or "),Kk=n($7,"A",{href:!0});var qqr=s(Kk);HUe=r(qqr,"CLIPTokenizerFast"),qqr.forEach(t),UUe=r($7," (CLIP model)"),$7.forEach(t),JUe=i(S),In=n(S,"LI",{});var k7=s(In);moe=n(k7,"STRONG",{});var Nqr=s(moe);YUe=r(Nqr,"convbert"),Nqr.forEach(t),KUe=r(k7," \u2014 "),Zk=n(k7,"A",{href:!0});var jqr=s(Zk);ZUe=r(jqr,"ConvBertTokenizer"),jqr.forEach(t),eJe=r(k7," or "),eS=n(k7,"A",{href:!0});var Dqr=s(eS);oJe=r(Dqr,"ConvBertTokenizerFast"),Dqr.forEach(t),rJe=r(k7," (ConvBERT model)"),k7.forEach(t),tJe=i(S),qn=n(S,"LI",{});var S7=s(qn);goe=n(S7,"STRONG",{});var Gqr=s(goe);aJe=r(Gqr,"cpm"),Gqr.forEach(t),nJe=r(S7," \u2014 "),oS=n(S7,"A",{href:!0});var Oqr=s(oS);sJe=r(Oqr,"CpmTokenizer"),Oqr.forEach(t),lJe=r(S7," or "),hoe=n(S7,"CODE",{});var Vqr=s(hoe);iJe=r(Vqr,"CpmTokenizerFast"),Vqr.forEach(t),dJe=r(S7," (CPM model)"),S7.forEach(t),cJe=i(S),gg=n(S,"LI",{});var GMe=s(gg);poe=n(GMe,"STRONG",{});var Xqr=s(poe);fJe=r(Xqr,"ctrl"),Xqr.forEach(t),mJe=r(GMe," \u2014 "),rS=n(GMe,"A",{href:!0});var zqr=s(rS);gJe=r(zqr,"CTRLTokenizer"),zqr.forEach(t),hJe=r(GMe," (CTRL model)"),GMe.forEach(t),pJe=i(S),Nn=n(S,"LI",{});var R7=s(Nn);uoe=n(R7,"STRONG",{});var Qqr=s(uoe);uJe=r(Qqr,"data2vec-text"),Qqr.forEach(t),_Je=r(R7," \u2014 "),tS=n(R7,"A",{href:!0});var Wqr=s(tS);bJe=r(Wqr,"RobertaTokenizer"),Wqr.forEach(t),vJe=r(R7," or "),aS=n(R7,"A",{href:!0});var Hqr=s(aS);FJe=r(Hqr,"RobertaTokenizerFast"),Hqr.forEach(t),TJe=r(R7," (Data2VecText model)"),R7.forEach(t),MJe=i(S),jn=n(S,"LI",{});var B7=s(jn);_oe=n(B7,"STRONG",{});var Uqr=s(_oe);EJe=r(Uqr,"deberta"),Uqr.forEach(t),CJe=r(B7," \u2014 "),nS=n(B7,"A",{href:!0});var Jqr=s(nS);wJe=r(Jqr,"DebertaTokenizer"),Jqr.forEach(t),AJe=r(B7," or "),sS=n(B7,"A",{href:!0});var Yqr=s(sS);yJe=r(Yqr,"DebertaTokenizerFast"),Yqr.forEach(t),LJe=r(B7," (DeBERTa model)"),B7.forEach(t),xJe=i(S),Dn=n(S,"LI",{});var P7=s(Dn);boe=n(P7,"STRONG",{});var Kqr=s(boe);$Je=r(Kqr,"deberta-v2"),Kqr.forEach(t),kJe=r(P7," \u2014 "),lS=n(P7,"A",{href:!0});var Zqr=s(lS);SJe=r(Zqr,"DebertaV2Tokenizer"),Zqr.forEach(t),RJe=r(P7," or "),iS=n(P7,"A",{href:!0});var eNr=s(iS);BJe=r(eNr,"DebertaV2TokenizerFast"),eNr.forEach(t),PJe=r(P7," (DeBERTa-v2 model)"),P7.forEach(t),IJe=i(S),Gn=n(S,"LI",{});var I7=s(Gn);voe=n(I7,"STRONG",{});var oNr=s(voe);qJe=r(oNr,"distilbert"),oNr.forEach(t),NJe=r(I7," \u2014 "),dS=n(I7,"A",{href:!0});var rNr=s(dS);jJe=r(rNr,"DistilBertTokenizer"),rNr.forEach(t),DJe=r(I7," or "),cS=n(I7,"A",{href:!0});var tNr=s(cS);GJe=r(tNr,"DistilBertTokenizerFast"),tNr.forEach(t),OJe=r(I7," (DistilBERT model)"),I7.forEach(t),VJe=i(S),On=n(S,"LI",{});var q7=s(On);Foe=n(q7,"STRONG",{});var aNr=s(Foe);XJe=r(aNr,"dpr"),aNr.forEach(t),zJe=r(q7," \u2014 "),fS=n(q7,"A",{href:!0});var nNr=s(fS);QJe=r(nNr,"DPRQuestionEncoderTokenizer"),nNr.forEach(t),WJe=r(q7," or "),mS=n(q7,"A",{href:!0});var sNr=s(mS);HJe=r(sNr,"DPRQuestionEncoderTokenizerFast"),sNr.forEach(t),UJe=r(q7," (DPR model)"),q7.forEach(t),JJe=i(S),Vn=n(S,"LI",{});var N7=s(Vn);Toe=n(N7,"STRONG",{});var lNr=s(Toe);YJe=r(lNr,"electra"),lNr.forEach(t),KJe=r(N7," \u2014 "),gS=n(N7,"A",{href:!0});var iNr=s(gS);ZJe=r(iNr,"ElectraTokenizer"),iNr.forEach(t),eYe=r(N7," or "),hS=n(N7,"A",{href:!0});var dNr=s(hS);oYe=r(dNr,"ElectraTokenizerFast"),dNr.forEach(t),rYe=r(N7," (ELECTRA model)"),N7.forEach(t),tYe=i(S),hg=n(S,"LI",{});var OMe=s(hg);Moe=n(OMe,"STRONG",{});var cNr=s(Moe);aYe=r(cNr,"flaubert"),cNr.forEach(t),nYe=r(OMe," \u2014 "),pS=n(OMe,"A",{href:!0});var fNr=s(pS);sYe=r(fNr,"FlaubertTokenizer"),fNr.forEach(t),lYe=r(OMe," (FlauBERT model)"),OMe.forEach(t),iYe=i(S),Xn=n(S,"LI",{});var j7=s(Xn);Eoe=n(j7,"STRONG",{});var mNr=s(Eoe);dYe=r(mNr,"fnet"),mNr.forEach(t),cYe=r(j7," \u2014 "),uS=n(j7,"A",{href:!0});var gNr=s(uS);fYe=r(gNr,"FNetTokenizer"),gNr.forEach(t),mYe=r(j7," or "),_S=n(j7,"A",{href:!0});var hNr=s(_S);gYe=r(hNr,"FNetTokenizerFast"),hNr.forEach(t),hYe=r(j7," (FNet model)"),j7.forEach(t),pYe=i(S),pg=n(S,"LI",{});var VMe=s(pg);Coe=n(VMe,"STRONG",{});var pNr=s(Coe);uYe=r(pNr,"fsmt"),pNr.forEach(t),_Ye=r(VMe," \u2014 "),bS=n(VMe,"A",{href:!0});var uNr=s(bS);bYe=r(uNr,"FSMTTokenizer"),uNr.forEach(t),vYe=r(VMe," (FairSeq Machine-Translation model)"),VMe.forEach(t),FYe=i(S),zn=n(S,"LI",{});var D7=s(zn);woe=n(D7,"STRONG",{});var _Nr=s(woe);TYe=r(_Nr,"funnel"),_Nr.forEach(t),MYe=r(D7," \u2014 "),vS=n(D7,"A",{href:!0});var bNr=s(vS);EYe=r(bNr,"FunnelTokenizer"),bNr.forEach(t),CYe=r(D7," or "),FS=n(D7,"A",{href:!0});var vNr=s(FS);wYe=r(vNr,"FunnelTokenizerFast"),vNr.forEach(t),AYe=r(D7," (Funnel Transformer model)"),D7.forEach(t),yYe=i(S),Qn=n(S,"LI",{});var G7=s(Qn);Aoe=n(G7,"STRONG",{});var FNr=s(Aoe);LYe=r(FNr,"gpt2"),FNr.forEach(t),xYe=r(G7," \u2014 "),TS=n(G7,"A",{href:!0});var TNr=s(TS);$Ye=r(TNr,"GPT2Tokenizer"),TNr.forEach(t),kYe=r(G7," or "),MS=n(G7,"A",{href:!0});var MNr=s(MS);SYe=r(MNr,"GPT2TokenizerFast"),MNr.forEach(t),RYe=r(G7," (OpenAI GPT-2 model)"),G7.forEach(t),BYe=i(S),Wn=n(S,"LI",{});var O7=s(Wn);yoe=n(O7,"STRONG",{});var ENr=s(yoe);PYe=r(ENr,"gpt_neo"),ENr.forEach(t),IYe=r(O7," \u2014 "),ES=n(O7,"A",{href:!0});var CNr=s(ES);qYe=r(CNr,"GPT2Tokenizer"),CNr.forEach(t),NYe=r(O7," or "),CS=n(O7,"A",{href:!0});var wNr=s(CS);jYe=r(wNr,"GPT2TokenizerFast"),wNr.forEach(t),DYe=r(O7," (GPT Neo model)"),O7.forEach(t),GYe=i(S),Hn=n(S,"LI",{});var V7=s(Hn);Loe=n(V7,"STRONG",{});var ANr=s(Loe);OYe=r(ANr,"gptj"),ANr.forEach(t),VYe=r(V7," \u2014 "),wS=n(V7,"A",{href:!0});var yNr=s(wS);XYe=r(yNr,"GPT2Tokenizer"),yNr.forEach(t),zYe=r(V7," or "),AS=n(V7,"A",{href:!0});var LNr=s(AS);QYe=r(LNr,"GPT2TokenizerFast"),LNr.forEach(t),WYe=r(V7," (GPT-J model)"),V7.forEach(t),HYe=i(S),Un=n(S,"LI",{});var X7=s(Un);xoe=n(X7,"STRONG",{});var xNr=s(xoe);UYe=r(xNr,"herbert"),xNr.forEach(t),JYe=r(X7," \u2014 "),yS=n(X7,"A",{href:!0});var $Nr=s(yS);YYe=r($Nr,"HerbertTokenizer"),$Nr.forEach(t),KYe=r(X7," or "),LS=n(X7,"A",{href:!0});var kNr=s(LS);ZYe=r(kNr,"HerbertTokenizerFast"),kNr.forEach(t),eKe=r(X7," (HerBERT model)"),X7.forEach(t),oKe=i(S),ug=n(S,"LI",{});var XMe=s(ug);$oe=n(XMe,"STRONG",{});var SNr=s($oe);rKe=r(SNr,"hubert"),SNr.forEach(t),tKe=r(XMe," \u2014 "),xS=n(XMe,"A",{href:!0});var RNr=s(xS);aKe=r(RNr,"Wav2Vec2CTCTokenizer"),RNr.forEach(t),nKe=r(XMe," (Hubert model)"),XMe.forEach(t),sKe=i(S),Jn=n(S,"LI",{});var z7=s(Jn);koe=n(z7,"STRONG",{});var BNr=s(koe);lKe=r(BNr,"ibert"),BNr.forEach(t),iKe=r(z7," \u2014 "),$S=n(z7,"A",{href:!0});var PNr=s($S);dKe=r(PNr,"RobertaTokenizer"),PNr.forEach(t),cKe=r(z7," or "),kS=n(z7,"A",{href:!0});var INr=s(kS);fKe=r(INr,"RobertaTokenizerFast"),INr.forEach(t),mKe=r(z7," (I-BERT model)"),z7.forEach(t),gKe=i(S),Yn=n(S,"LI",{});var Q7=s(Yn);Soe=n(Q7,"STRONG",{});var qNr=s(Soe);hKe=r(qNr,"layoutlm"),qNr.forEach(t),pKe=r(Q7," \u2014 "),SS=n(Q7,"A",{href:!0});var NNr=s(SS);uKe=r(NNr,"LayoutLMTokenizer"),NNr.forEach(t),_Ke=r(Q7," or "),RS=n(Q7,"A",{href:!0});var jNr=s(RS);bKe=r(jNr,"LayoutLMTokenizerFast"),jNr.forEach(t),vKe=r(Q7," (LayoutLM model)"),Q7.forEach(t),FKe=i(S),Kn=n(S,"LI",{});var W7=s(Kn);Roe=n(W7,"STRONG",{});var DNr=s(Roe);TKe=r(DNr,"layoutlmv2"),DNr.forEach(t),MKe=r(W7," \u2014 "),BS=n(W7,"A",{href:!0});var GNr=s(BS);EKe=r(GNr,"LayoutLMv2Tokenizer"),GNr.forEach(t),CKe=r(W7," or "),PS=n(W7,"A",{href:!0});var ONr=s(PS);wKe=r(ONr,"LayoutLMv2TokenizerFast"),ONr.forEach(t),AKe=r(W7," (LayoutLMv2 model)"),W7.forEach(t),yKe=i(S),Zn=n(S,"LI",{});var H7=s(Zn);Boe=n(H7,"STRONG",{});var VNr=s(Boe);LKe=r(VNr,"layoutxlm"),VNr.forEach(t),xKe=r(H7," \u2014 "),IS=n(H7,"A",{href:!0});var XNr=s(IS);$Ke=r(XNr,"LayoutXLMTokenizer"),XNr.forEach(t),kKe=r(H7," or "),qS=n(H7,"A",{href:!0});var zNr=s(qS);SKe=r(zNr,"LayoutXLMTokenizerFast"),zNr.forEach(t),RKe=r(H7," (LayoutXLM model)"),H7.forEach(t),BKe=i(S),es=n(S,"LI",{});var U7=s(es);Poe=n(U7,"STRONG",{});var QNr=s(Poe);PKe=r(QNr,"led"),QNr.forEach(t),IKe=r(U7," \u2014 "),NS=n(U7,"A",{href:!0});var WNr=s(NS);qKe=r(WNr,"LEDTokenizer"),WNr.forEach(t),NKe=r(U7," or "),jS=n(U7,"A",{href:!0});var HNr=s(jS);jKe=r(HNr,"LEDTokenizerFast"),HNr.forEach(t),DKe=r(U7," (LED model)"),U7.forEach(t),GKe=i(S),os=n(S,"LI",{});var J7=s(os);Ioe=n(J7,"STRONG",{});var UNr=s(Ioe);OKe=r(UNr,"longformer"),UNr.forEach(t),VKe=r(J7," \u2014 "),DS=n(J7,"A",{href:!0});var JNr=s(DS);XKe=r(JNr,"LongformerTokenizer"),JNr.forEach(t),zKe=r(J7," or "),GS=n(J7,"A",{href:!0});var YNr=s(GS);QKe=r(YNr,"LongformerTokenizerFast"),YNr.forEach(t),WKe=r(J7," (Longformer model)"),J7.forEach(t),HKe=i(S),_g=n(S,"LI",{});var zMe=s(_g);qoe=n(zMe,"STRONG",{});var KNr=s(qoe);UKe=r(KNr,"luke"),KNr.forEach(t),JKe=r(zMe," \u2014 "),OS=n(zMe,"A",{href:!0});var ZNr=s(OS);YKe=r(ZNr,"LukeTokenizer"),ZNr.forEach(t),KKe=r(zMe," (LUKE model)"),zMe.forEach(t),ZKe=i(S),rs=n(S,"LI",{});var Y7=s(rs);Noe=n(Y7,"STRONG",{});var ejr=s(Noe);eZe=r(ejr,"lxmert"),ejr.forEach(t),oZe=r(Y7," \u2014 "),VS=n(Y7,"A",{href:!0});var ojr=s(VS);rZe=r(ojr,"LxmertTokenizer"),ojr.forEach(t),tZe=r(Y7," or "),XS=n(Y7,"A",{href:!0});var rjr=s(XS);aZe=r(rjr,"LxmertTokenizerFast"),rjr.forEach(t),nZe=r(Y7," (LXMERT model)"),Y7.forEach(t),sZe=i(S),bg=n(S,"LI",{});var QMe=s(bg);joe=n(QMe,"STRONG",{});var tjr=s(joe);lZe=r(tjr,"m2m_100"),tjr.forEach(t),iZe=r(QMe," \u2014 "),zS=n(QMe,"A",{href:!0});var ajr=s(zS);dZe=r(ajr,"M2M100Tokenizer"),ajr.forEach(t),cZe=r(QMe," (M2M100 model)"),QMe.forEach(t),fZe=i(S),vg=n(S,"LI",{});var WMe=s(vg);Doe=n(WMe,"STRONG",{});var njr=s(Doe);mZe=r(njr,"marian"),njr.forEach(t),gZe=r(WMe," \u2014 "),QS=n(WMe,"A",{href:!0});var sjr=s(QS);hZe=r(sjr,"MarianTokenizer"),sjr.forEach(t),pZe=r(WMe," (Marian model)"),WMe.forEach(t),uZe=i(S),ts=n(S,"LI",{});var K7=s(ts);Goe=n(K7,"STRONG",{});var ljr=s(Goe);_Ze=r(ljr,"mbart"),ljr.forEach(t),bZe=r(K7," \u2014 "),WS=n(K7,"A",{href:!0});var ijr=s(WS);vZe=r(ijr,"MBartTokenizer"),ijr.forEach(t),FZe=r(K7," or "),HS=n(K7,"A",{href:!0});var djr=s(HS);TZe=r(djr,"MBartTokenizerFast"),djr.forEach(t),MZe=r(K7," (mBART model)"),K7.forEach(t),EZe=i(S),as=n(S,"LI",{});var Z7=s(as);Ooe=n(Z7,"STRONG",{});var cjr=s(Ooe);CZe=r(cjr,"mbart50"),cjr.forEach(t),wZe=r(Z7," \u2014 "),US=n(Z7,"A",{href:!0});var fjr=s(US);AZe=r(fjr,"MBart50Tokenizer"),fjr.forEach(t),yZe=r(Z7," or "),JS=n(Z7,"A",{href:!0});var mjr=s(JS);LZe=r(mjr,"MBart50TokenizerFast"),mjr.forEach(t),xZe=r(Z7," (mBART-50 model)"),Z7.forEach(t),$Ze=i(S),ns=n(S,"LI",{});var ex=s(ns);Voe=n(ex,"STRONG",{});var gjr=s(Voe);kZe=r(gjr,"megatron-bert"),gjr.forEach(t),SZe=r(ex," \u2014 "),YS=n(ex,"A",{href:!0});var hjr=s(YS);RZe=r(hjr,"BertTokenizer"),hjr.forEach(t),BZe=r(ex," or "),KS=n(ex,"A",{href:!0});var pjr=s(KS);PZe=r(pjr,"BertTokenizerFast"),pjr.forEach(t),IZe=r(ex," (MegatronBert model)"),ex.forEach(t),qZe=i(S),Fg=n(S,"LI",{});var HMe=s(Fg);Xoe=n(HMe,"STRONG",{});var ujr=s(Xoe);NZe=r(ujr,"mluke"),ujr.forEach(t),jZe=r(HMe," \u2014 "),ZS=n(HMe,"A",{href:!0});var _jr=s(ZS);DZe=r(_jr,"MLukeTokenizer"),_jr.forEach(t),GZe=r(HMe," (mLUKE model)"),HMe.forEach(t),OZe=i(S),ss=n(S,"LI",{});var ox=s(ss);zoe=n(ox,"STRONG",{});var bjr=s(zoe);VZe=r(bjr,"mobilebert"),bjr.forEach(t),XZe=r(ox," \u2014 "),eR=n(ox,"A",{href:!0});var vjr=s(eR);zZe=r(vjr,"MobileBertTokenizer"),vjr.forEach(t),QZe=r(ox," or "),oR=n(ox,"A",{href:!0});var Fjr=s(oR);WZe=r(Fjr,"MobileBertTokenizerFast"),Fjr.forEach(t),HZe=r(ox," (MobileBERT model)"),ox.forEach(t),UZe=i(S),ls=n(S,"LI",{});var rx=s(ls);Qoe=n(rx,"STRONG",{});var Tjr=s(Qoe);JZe=r(Tjr,"mpnet"),Tjr.forEach(t),YZe=r(rx," \u2014 "),rR=n(rx,"A",{href:!0});var Mjr=s(rR);KZe=r(Mjr,"MPNetTokenizer"),Mjr.forEach(t),ZZe=r(rx," or "),tR=n(rx,"A",{href:!0});var Ejr=s(tR);eeo=r(Ejr,"MPNetTokenizerFast"),Ejr.forEach(t),oeo=r(rx," (MPNet model)"),rx.forEach(t),reo=i(S),is=n(S,"LI",{});var tx=s(is);Woe=n(tx,"STRONG",{});var Cjr=s(Woe);teo=r(Cjr,"mt5"),Cjr.forEach(t),aeo=r(tx," \u2014 "),aR=n(tx,"A",{href:!0});var wjr=s(aR);neo=r(wjr,"MT5Tokenizer"),wjr.forEach(t),seo=r(tx," or "),nR=n(tx,"A",{href:!0});var Ajr=s(nR);leo=r(Ajr,"MT5TokenizerFast"),Ajr.forEach(t),ieo=r(tx," (mT5 model)"),tx.forEach(t),deo=i(S),ds=n(S,"LI",{});var ax=s(ds);Hoe=n(ax,"STRONG",{});var yjr=s(Hoe);ceo=r(yjr,"nystromformer"),yjr.forEach(t),feo=r(ax," \u2014 "),sR=n(ax,"A",{href:!0});var Ljr=s(sR);meo=r(Ljr,"AlbertTokenizer"),Ljr.forEach(t),geo=r(ax," or "),lR=n(ax,"A",{href:!0});var xjr=s(lR);heo=r(xjr,"AlbertTokenizerFast"),xjr.forEach(t),peo=r(ax," (Nystromformer model)"),ax.forEach(t),ueo=i(S),cs=n(S,"LI",{});var nx=s(cs);Uoe=n(nx,"STRONG",{});var $jr=s(Uoe);_eo=r($jr,"openai-gpt"),$jr.forEach(t),beo=r(nx," \u2014 "),iR=n(nx,"A",{href:!0});var kjr=s(iR);veo=r(kjr,"OpenAIGPTTokenizer"),kjr.forEach(t),Feo=r(nx," or "),dR=n(nx,"A",{href:!0});var Sjr=s(dR);Teo=r(Sjr,"OpenAIGPTTokenizerFast"),Sjr.forEach(t),Meo=r(nx," (OpenAI GPT model)"),nx.forEach(t),Eeo=i(S),fs=n(S,"LI",{});var sx=s(fs);Joe=n(sx,"STRONG",{});var Rjr=s(Joe);Ceo=r(Rjr,"pegasus"),Rjr.forEach(t),weo=r(sx," \u2014 "),cR=n(sx,"A",{href:!0});var Bjr=s(cR);Aeo=r(Bjr,"PegasusTokenizer"),Bjr.forEach(t),yeo=r(sx," or "),fR=n(sx,"A",{href:!0});var Pjr=s(fR);Leo=r(Pjr,"PegasusTokenizerFast"),Pjr.forEach(t),xeo=r(sx," (Pegasus model)"),sx.forEach(t),$eo=i(S),Tg=n(S,"LI",{});var UMe=s(Tg);Yoe=n(UMe,"STRONG",{});var Ijr=s(Yoe);keo=r(Ijr,"perceiver"),Ijr.forEach(t),Seo=r(UMe," \u2014 "),mR=n(UMe,"A",{href:!0});var qjr=s(mR);Reo=r(qjr,"PerceiverTokenizer"),qjr.forEach(t),Beo=r(UMe," (Perceiver model)"),UMe.forEach(t),Peo=i(S),Mg=n(S,"LI",{});var JMe=s(Mg);Koe=n(JMe,"STRONG",{});var Njr=s(Koe);Ieo=r(Njr,"phobert"),Njr.forEach(t),qeo=r(JMe," \u2014 "),gR=n(JMe,"A",{href:!0});var jjr=s(gR);Neo=r(jjr,"PhobertTokenizer"),jjr.forEach(t),jeo=r(JMe," (PhoBERT model)"),JMe.forEach(t),Deo=i(S),Eg=n(S,"LI",{});var YMe=s(Eg);Zoe=n(YMe,"STRONG",{});var Djr=s(Zoe);Geo=r(Djr,"plbart"),Djr.forEach(t),Oeo=r(YMe," \u2014 "),hR=n(YMe,"A",{href:!0});var Gjr=s(hR);Veo=r(Gjr,"PLBartTokenizer"),Gjr.forEach(t),Xeo=r(YMe," (PLBart model)"),YMe.forEach(t),zeo=i(S),Cg=n(S,"LI",{});var KMe=s(Cg);ere=n(KMe,"STRONG",{});var Ojr=s(ere);Qeo=r(Ojr,"prophetnet"),Ojr.forEach(t),Weo=r(KMe," \u2014 "),pR=n(KMe,"A",{href:!0});var Vjr=s(pR);Heo=r(Vjr,"ProphetNetTokenizer"),Vjr.forEach(t),Ueo=r(KMe," (ProphetNet model)"),KMe.forEach(t),Jeo=i(S),ms=n(S,"LI",{});var lx=s(ms);ore=n(lx,"STRONG",{});var Xjr=s(ore);Yeo=r(Xjr,"qdqbert"),Xjr.forEach(t),Keo=r(lx," \u2014 "),uR=n(lx,"A",{href:!0});var zjr=s(uR);Zeo=r(zjr,"BertTokenizer"),zjr.forEach(t),eoo=r(lx," or "),_R=n(lx,"A",{href:!0});var Qjr=s(_R);ooo=r(Qjr,"BertTokenizerFast"),Qjr.forEach(t),roo=r(lx," (QDQBert model)"),lx.forEach(t),too=i(S),wg=n(S,"LI",{});var ZMe=s(wg);rre=n(ZMe,"STRONG",{});var Wjr=s(rre);aoo=r(Wjr,"rag"),Wjr.forEach(t),noo=r(ZMe," \u2014 "),bR=n(ZMe,"A",{href:!0});var Hjr=s(bR);soo=r(Hjr,"RagTokenizer"),Hjr.forEach(t),loo=r(ZMe," (RAG model)"),ZMe.forEach(t),ioo=i(S),gs=n(S,"LI",{});var ix=s(gs);tre=n(ix,"STRONG",{});var Ujr=s(tre);doo=r(Ujr,"realm"),Ujr.forEach(t),coo=r(ix," \u2014 "),vR=n(ix,"A",{href:!0});var Jjr=s(vR);foo=r(Jjr,"RealmTokenizer"),Jjr.forEach(t),moo=r(ix," or "),FR=n(ix,"A",{href:!0});var Yjr=s(FR);goo=r(Yjr,"RealmTokenizerFast"),Yjr.forEach(t),hoo=r(ix," (Realm model)"),ix.forEach(t),poo=i(S),hs=n(S,"LI",{});var dx=s(hs);are=n(dx,"STRONG",{});var Kjr=s(are);uoo=r(Kjr,"reformer"),Kjr.forEach(t),_oo=r(dx," \u2014 "),TR=n(dx,"A",{href:!0});var Zjr=s(TR);boo=r(Zjr,"ReformerTokenizer"),Zjr.forEach(t),voo=r(dx," or "),MR=n(dx,"A",{href:!0});var eDr=s(MR);Foo=r(eDr,"ReformerTokenizerFast"),eDr.forEach(t),Too=r(dx," (Reformer model)"),dx.forEach(t),Moo=i(S),ps=n(S,"LI",{});var cx=s(ps);nre=n(cx,"STRONG",{});var oDr=s(nre);Eoo=r(oDr,"rembert"),oDr.forEach(t),Coo=r(cx," \u2014 "),ER=n(cx,"A",{href:!0});var rDr=s(ER);woo=r(rDr,"RemBertTokenizer"),rDr.forEach(t),Aoo=r(cx," or "),CR=n(cx,"A",{href:!0});var tDr=s(CR);yoo=r(tDr,"RemBertTokenizerFast"),tDr.forEach(t),Loo=r(cx," (RemBERT model)"),cx.forEach(t),xoo=i(S),us=n(S,"LI",{});var fx=s(us);sre=n(fx,"STRONG",{});var aDr=s(sre);$oo=r(aDr,"retribert"),aDr.forEach(t),koo=r(fx," \u2014 "),wR=n(fx,"A",{href:!0});var nDr=s(wR);Soo=r(nDr,"RetriBertTokenizer"),nDr.forEach(t),Roo=r(fx," or "),AR=n(fx,"A",{href:!0});var sDr=s(AR);Boo=r(sDr,"RetriBertTokenizerFast"),sDr.forEach(t),Poo=r(fx," (RetriBERT model)"),fx.forEach(t),Ioo=i(S),_s=n(S,"LI",{});var mx=s(_s);lre=n(mx,"STRONG",{});var lDr=s(lre);qoo=r(lDr,"roberta"),lDr.forEach(t),Noo=r(mx," \u2014 "),yR=n(mx,"A",{href:!0});var iDr=s(yR);joo=r(iDr,"RobertaTokenizer"),iDr.forEach(t),Doo=r(mx," or "),LR=n(mx,"A",{href:!0});var dDr=s(LR);Goo=r(dDr,"RobertaTokenizerFast"),dDr.forEach(t),Ooo=r(mx," (RoBERTa model)"),mx.forEach(t),Voo=i(S),bs=n(S,"LI",{});var gx=s(bs);ire=n(gx,"STRONG",{});var cDr=s(ire);Xoo=r(cDr,"roformer"),cDr.forEach(t),zoo=r(gx," \u2014 "),xR=n(gx,"A",{href:!0});var fDr=s(xR);Qoo=r(fDr,"RoFormerTokenizer"),fDr.forEach(t),Woo=r(gx," or "),$R=n(gx,"A",{href:!0});var mDr=s($R);Hoo=r(mDr,"RoFormerTokenizerFast"),mDr.forEach(t),Uoo=r(gx," (RoFormer model)"),gx.forEach(t),Joo=i(S),Ag=n(S,"LI",{});var e4e=s(Ag);dre=n(e4e,"STRONG",{});var gDr=s(dre);Yoo=r(gDr,"speech_to_text"),gDr.forEach(t),Koo=r(e4e," \u2014 "),kR=n(e4e,"A",{href:!0});var hDr=s(kR);Zoo=r(hDr,"Speech2TextTokenizer"),hDr.forEach(t),ero=r(e4e," (Speech2Text model)"),e4e.forEach(t),oro=i(S),yg=n(S,"LI",{});var o4e=s(yg);cre=n(o4e,"STRONG",{});var pDr=s(cre);rro=r(pDr,"speech_to_text_2"),pDr.forEach(t),tro=r(o4e," \u2014 "),SR=n(o4e,"A",{href:!0});var uDr=s(SR);aro=r(uDr,"Speech2Text2Tokenizer"),uDr.forEach(t),nro=r(o4e," (Speech2Text2 model)"),o4e.forEach(t),sro=i(S),vs=n(S,"LI",{});var hx=s(vs);fre=n(hx,"STRONG",{});var _Dr=s(fre);lro=r(_Dr,"splinter"),_Dr.forEach(t),iro=r(hx," \u2014 "),RR=n(hx,"A",{href:!0});var bDr=s(RR);dro=r(bDr,"SplinterTokenizer"),bDr.forEach(t),cro=r(hx," or "),BR=n(hx,"A",{href:!0});var vDr=s(BR);fro=r(vDr,"SplinterTokenizerFast"),vDr.forEach(t),mro=r(hx," (Splinter model)"),hx.forEach(t),gro=i(S),Fs=n(S,"LI",{});var px=s(Fs);mre=n(px,"STRONG",{});var FDr=s(mre);hro=r(FDr,"squeezebert"),FDr.forEach(t),pro=r(px," \u2014 "),PR=n(px,"A",{href:!0});var TDr=s(PR);uro=r(TDr,"SqueezeBertTokenizer"),TDr.forEach(t),_ro=r(px," or "),IR=n(px,"A",{href:!0});var MDr=s(IR);bro=r(MDr,"SqueezeBertTokenizerFast"),MDr.forEach(t),vro=r(px," (SqueezeBERT model)"),px.forEach(t),Fro=i(S),Ts=n(S,"LI",{});var ux=s(Ts);gre=n(ux,"STRONG",{});var EDr=s(gre);Tro=r(EDr,"t5"),EDr.forEach(t),Mro=r(ux," \u2014 "),qR=n(ux,"A",{href:!0});var CDr=s(qR);Ero=r(CDr,"T5Tokenizer"),CDr.forEach(t),Cro=r(ux," or "),NR=n(ux,"A",{href:!0});var wDr=s(NR);wro=r(wDr,"T5TokenizerFast"),wDr.forEach(t),Aro=r(ux," (T5 model)"),ux.forEach(t),yro=i(S),Lg=n(S,"LI",{});var r4e=s(Lg);hre=n(r4e,"STRONG",{});var ADr=s(hre);Lro=r(ADr,"tapas"),ADr.forEach(t),xro=r(r4e," \u2014 "),jR=n(r4e,"A",{href:!0});var yDr=s(jR);$ro=r(yDr,"TapasTokenizer"),yDr.forEach(t),kro=r(r4e," (TAPAS model)"),r4e.forEach(t),Sro=i(S),xg=n(S,"LI",{});var t4e=s(xg);pre=n(t4e,"STRONG",{});var LDr=s(pre);Rro=r(LDr,"tapex"),LDr.forEach(t),Bro=r(t4e," \u2014 "),DR=n(t4e,"A",{href:!0});var xDr=s(DR);Pro=r(xDr,"TapexTokenizer"),xDr.forEach(t),Iro=r(t4e," (TAPEX model)"),t4e.forEach(t),qro=i(S),$g=n(S,"LI",{});var a4e=s($g);ure=n(a4e,"STRONG",{});var $Dr=s(ure);Nro=r($Dr,"transfo-xl"),$Dr.forEach(t),jro=r(a4e," \u2014 "),GR=n(a4e,"A",{href:!0});var kDr=s(GR);Dro=r(kDr,"TransfoXLTokenizer"),kDr.forEach(t),Gro=r(a4e," (Transformer-XL model)"),a4e.forEach(t),Oro=i(S),Ms=n(S,"LI",{});var _x=s(Ms);_re=n(_x,"STRONG",{});var SDr=s(_re);Vro=r(SDr,"visual_bert"),SDr.forEach(t),Xro=r(_x," \u2014 "),OR=n(_x,"A",{href:!0});var RDr=s(OR);zro=r(RDr,"BertTokenizer"),RDr.forEach(t),Qro=r(_x," or "),VR=n(_x,"A",{href:!0});var BDr=s(VR);Wro=r(BDr,"BertTokenizerFast"),BDr.forEach(t),Hro=r(_x," (VisualBert model)"),_x.forEach(t),Uro=i(S),kg=n(S,"LI",{});var n4e=s(kg);bre=n(n4e,"STRONG",{});var PDr=s(bre);Jro=r(PDr,"wav2vec2"),PDr.forEach(t),Yro=r(n4e," \u2014 "),XR=n(n4e,"A",{href:!0});var IDr=s(XR);Kro=r(IDr,"Wav2Vec2CTCTokenizer"),IDr.forEach(t),Zro=r(n4e," (Wav2Vec2 model)"),n4e.forEach(t),eto=i(S),Sg=n(S,"LI",{});var s4e=s(Sg);vre=n(s4e,"STRONG",{});var qDr=s(vre);oto=r(qDr,"wav2vec2_phoneme"),qDr.forEach(t),rto=r(s4e," \u2014 "),zR=n(s4e,"A",{href:!0});var NDr=s(zR);tto=r(NDr,"Wav2Vec2PhonemeCTCTokenizer"),NDr.forEach(t),ato=r(s4e," (Wav2Vec2Phoneme model)"),s4e.forEach(t),nto=i(S),Es=n(S,"LI",{});var bx=s(Es);Fre=n(bx,"STRONG",{});var jDr=s(Fre);sto=r(jDr,"xglm"),jDr.forEach(t),lto=r(bx," \u2014 "),QR=n(bx,"A",{href:!0});var DDr=s(QR);ito=r(DDr,"XGLMTokenizer"),DDr.forEach(t),dto=r(bx," or "),WR=n(bx,"A",{href:!0});var GDr=s(WR);cto=r(GDr,"XGLMTokenizerFast"),GDr.forEach(t),fto=r(bx," (XGLM model)"),bx.forEach(t),mto=i(S),Rg=n(S,"LI",{});var l4e=s(Rg);Tre=n(l4e,"STRONG",{});var ODr=s(Tre);gto=r(ODr,"xlm"),ODr.forEach(t),hto=r(l4e," \u2014 "),HR=n(l4e,"A",{href:!0});var VDr=s(HR);pto=r(VDr,"XLMTokenizer"),VDr.forEach(t),uto=r(l4e," (XLM model)"),l4e.forEach(t),_to=i(S),Bg=n(S,"LI",{});var i4e=s(Bg);Mre=n(i4e,"STRONG",{});var XDr=s(Mre);bto=r(XDr,"xlm-prophetnet"),XDr.forEach(t),vto=r(i4e," \u2014 "),UR=n(i4e,"A",{href:!0});var zDr=s(UR);Fto=r(zDr,"XLMProphetNetTokenizer"),zDr.forEach(t),Tto=r(i4e," (XLMProphetNet model)"),i4e.forEach(t),Mto=i(S),Cs=n(S,"LI",{});var vx=s(Cs);Ere=n(vx,"STRONG",{});var QDr=s(Ere);Eto=r(QDr,"xlm-roberta"),QDr.forEach(t),Cto=r(vx," \u2014 "),JR=n(vx,"A",{href:!0});var WDr=s(JR);wto=r(WDr,"XLMRobertaTokenizer"),WDr.forEach(t),Ato=r(vx," or "),YR=n(vx,"A",{href:!0});var HDr=s(YR);yto=r(HDr,"XLMRobertaTokenizerFast"),HDr.forEach(t),Lto=r(vx," (XLM-RoBERTa model)"),vx.forEach(t),xto=i(S),ws=n(S,"LI",{});var Fx=s(ws);Cre=n(Fx,"STRONG",{});var UDr=s(Cre);$to=r(UDr,"xlm-roberta-xl"),UDr.forEach(t),kto=r(Fx," \u2014 "),KR=n(Fx,"A",{href:!0});var JDr=s(KR);Sto=r(JDr,"RobertaTokenizer"),JDr.forEach(t),Rto=r(Fx," or "),ZR=n(Fx,"A",{href:!0});var YDr=s(ZR);Bto=r(YDr,"RobertaTokenizerFast"),YDr.forEach(t),Pto=r(Fx," (XLM-RoBERTa-XL model)"),Fx.forEach(t),Ito=i(S),As=n(S,"LI",{});var Tx=s(As);wre=n(Tx,"STRONG",{});var KDr=s(wre);qto=r(KDr,"xlnet"),KDr.forEach(t),Nto=r(Tx," \u2014 "),eB=n(Tx,"A",{href:!0});var ZDr=s(eB);jto=r(ZDr,"XLNetTokenizer"),ZDr.forEach(t),Dto=r(Tx," or "),oB=n(Tx,"A",{href:!0});var eGr=s(oB);Gto=r(eGr,"XLNetTokenizerFast"),eGr.forEach(t),Oto=r(Tx," (XLNet model)"),Tx.forEach(t),Vto=i(S),ys=n(S,"LI",{});var Mx=s(ys);Are=n(Mx,"STRONG",{});var oGr=s(Are);Xto=r(oGr,"yoso"),oGr.forEach(t),zto=r(Mx," \u2014 "),rB=n(Mx,"A",{href:!0});var rGr=s(rB);Qto=r(rGr,"AlbertTokenizer"),rGr.forEach(t),Wto=r(Mx," or "),tB=n(Mx,"A",{href:!0});var tGr=s(tB);Hto=r(tGr,"AlbertTokenizerFast"),tGr.forEach(t),Uto=r(Mx," (YOSO model)"),Mx.forEach(t),S.forEach(t),Jto=i(Ss),T(Pg.$$.fragment,Ss),Ss.forEach(t),Yto=i(ks),Ig=n(ks,"DIV",{class:!0});var qPe=s(Ig);T(L3.$$.fragment,qPe),Kto=i(qPe),yre=n(qPe,"P",{});var aGr=s(yre);Zto=r(aGr,"Register a new tokenizer in this mapping."),aGr.forEach(t),qPe.forEach(t),ks.forEach(t),DRe=i(f),gi=n(f,"H2",{class:!0});var NPe=s(gi);qg=n(NPe,"A",{id:!0,class:!0,href:!0});var nGr=s(qg);Lre=n(nGr,"SPAN",{});var sGr=s(Lre);T(x3.$$.fragment,sGr),sGr.forEach(t),nGr.forEach(t),eao=i(NPe),xre=n(NPe,"SPAN",{});var lGr=s(xre);oao=r(lGr,"AutoFeatureExtractor"),lGr.forEach(t),NPe.forEach(t),GRe=i(f),Co=n(f,"DIV",{class:!0});var Rs=s(Co);T($3.$$.fragment,Rs),rao=i(Rs),k3=n(Rs,"P",{});var jPe=s(k3);tao=r(jPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aB=n(jPe,"A",{href:!0});var iGr=s(aB);aao=r(iGr,"AutoFeatureExtractor.from_pretrained()"),iGr.forEach(t),nao=r(jPe," class method."),jPe.forEach(t),sao=i(Rs),S3=n(Rs,"P",{});var DPe=s(S3);lao=r(DPe,"This class cannot be instantiated directly using "),$re=n(DPe,"CODE",{});var dGr=s($re);iao=r(dGr,"__init__()"),dGr.forEach(t),dao=r(DPe," (throws an error)."),DPe.forEach(t),cao=i(Rs),Xe=n(Rs,"DIV",{class:!0});var Wt=s(Xe);T(R3.$$.fragment,Wt),fao=i(Wt),kre=n(Wt,"P",{});var cGr=s(kre);mao=r(cGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),cGr.forEach(t),gao=i(Wt),Ta=n(Wt,"P",{});var b5=s(Ta);hao=r(b5,"The feature extractor class to instantiate is selected based on the "),Sre=n(b5,"CODE",{});var fGr=s(Sre);pao=r(fGr,"model_type"),fGr.forEach(t),uao=r(b5,` property of the config object
(either passed as an argument or loaded from `),Rre=n(b5,"CODE",{});var mGr=s(Rre);_ao=r(mGr,"pretrained_model_name_or_path"),mGr.forEach(t),bao=r(b5,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bre=n(b5,"CODE",{});var gGr=s(Bre);vao=r(gGr,"pretrained_model_name_or_path"),gGr.forEach(t),Fao=r(b5,":"),b5.forEach(t),Tao=i(Wt),ae=n(Wt,"UL",{});var se=s(ae);Ng=n(se,"LI",{});var d4e=s(Ng);Pre=n(d4e,"STRONG",{});var hGr=s(Pre);Mao=r(hGr,"beit"),hGr.forEach(t),Eao=r(d4e," \u2014 "),nB=n(d4e,"A",{href:!0});var pGr=s(nB);Cao=r(pGr,"BeitFeatureExtractor"),pGr.forEach(t),wao=r(d4e," (BEiT model)"),d4e.forEach(t),Aao=i(se),jg=n(se,"LI",{});var c4e=s(jg);Ire=n(c4e,"STRONG",{});var uGr=s(Ire);yao=r(uGr,"clip"),uGr.forEach(t),Lao=r(c4e," \u2014 "),sB=n(c4e,"A",{href:!0});var _Gr=s(sB);xao=r(_Gr,"CLIPFeatureExtractor"),_Gr.forEach(t),$ao=r(c4e," (CLIP model)"),c4e.forEach(t),kao=i(se),Dg=n(se,"LI",{});var f4e=s(Dg);qre=n(f4e,"STRONG",{});var bGr=s(qre);Sao=r(bGr,"convnext"),bGr.forEach(t),Rao=r(f4e," \u2014 "),lB=n(f4e,"A",{href:!0});var vGr=s(lB);Bao=r(vGr,"ConvNextFeatureExtractor"),vGr.forEach(t),Pao=r(f4e," (ConvNext model)"),f4e.forEach(t),Iao=i(se),Gg=n(se,"LI",{});var m4e=s(Gg);Nre=n(m4e,"STRONG",{});var FGr=s(Nre);qao=r(FGr,"data2vec-audio"),FGr.forEach(t),Nao=r(m4e," \u2014 "),iB=n(m4e,"A",{href:!0});var TGr=s(iB);jao=r(TGr,"Wav2Vec2FeatureExtractor"),TGr.forEach(t),Dao=r(m4e," (Data2VecAudio model)"),m4e.forEach(t),Gao=i(se),Og=n(se,"LI",{});var g4e=s(Og);jre=n(g4e,"STRONG",{});var MGr=s(jre);Oao=r(MGr,"data2vec-vision"),MGr.forEach(t),Vao=r(g4e," \u2014 "),dB=n(g4e,"A",{href:!0});var EGr=s(dB);Xao=r(EGr,"BeitFeatureExtractor"),EGr.forEach(t),zao=r(g4e," (Data2VecVision model)"),g4e.forEach(t),Qao=i(se),Vg=n(se,"LI",{});var h4e=s(Vg);Dre=n(h4e,"STRONG",{});var CGr=s(Dre);Wao=r(CGr,"deit"),CGr.forEach(t),Hao=r(h4e," \u2014 "),cB=n(h4e,"A",{href:!0});var wGr=s(cB);Uao=r(wGr,"DeiTFeatureExtractor"),wGr.forEach(t),Jao=r(h4e," (DeiT model)"),h4e.forEach(t),Yao=i(se),Xg=n(se,"LI",{});var p4e=s(Xg);Gre=n(p4e,"STRONG",{});var AGr=s(Gre);Kao=r(AGr,"detr"),AGr.forEach(t),Zao=r(p4e," \u2014 "),fB=n(p4e,"A",{href:!0});var yGr=s(fB);eno=r(yGr,"DetrFeatureExtractor"),yGr.forEach(t),ono=r(p4e," (DETR model)"),p4e.forEach(t),rno=i(se),zg=n(se,"LI",{});var u4e=s(zg);Ore=n(u4e,"STRONG",{});var LGr=s(Ore);tno=r(LGr,"dpt"),LGr.forEach(t),ano=r(u4e," \u2014 "),mB=n(u4e,"A",{href:!0});var xGr=s(mB);nno=r(xGr,"DPTFeatureExtractor"),xGr.forEach(t),sno=r(u4e," (DPT model)"),u4e.forEach(t),lno=i(se),Qg=n(se,"LI",{});var _4e=s(Qg);Vre=n(_4e,"STRONG",{});var $Gr=s(Vre);ino=r($Gr,"glpn"),$Gr.forEach(t),dno=r(_4e," \u2014 "),gB=n(_4e,"A",{href:!0});var kGr=s(gB);cno=r(kGr,"GLPNFeatureExtractor"),kGr.forEach(t),fno=r(_4e," (GLPN model)"),_4e.forEach(t),mno=i(se),Wg=n(se,"LI",{});var b4e=s(Wg);Xre=n(b4e,"STRONG",{});var SGr=s(Xre);gno=r(SGr,"hubert"),SGr.forEach(t),hno=r(b4e," \u2014 "),hB=n(b4e,"A",{href:!0});var RGr=s(hB);pno=r(RGr,"Wav2Vec2FeatureExtractor"),RGr.forEach(t),uno=r(b4e," (Hubert model)"),b4e.forEach(t),_no=i(se),Hg=n(se,"LI",{});var v4e=s(Hg);zre=n(v4e,"STRONG",{});var BGr=s(zre);bno=r(BGr,"layoutlmv2"),BGr.forEach(t),vno=r(v4e," \u2014 "),pB=n(v4e,"A",{href:!0});var PGr=s(pB);Fno=r(PGr,"LayoutLMv2FeatureExtractor"),PGr.forEach(t),Tno=r(v4e," (LayoutLMv2 model)"),v4e.forEach(t),Mno=i(se),Ug=n(se,"LI",{});var F4e=s(Ug);Qre=n(F4e,"STRONG",{});var IGr=s(Qre);Eno=r(IGr,"maskformer"),IGr.forEach(t),Cno=r(F4e," \u2014 "),uB=n(F4e,"A",{href:!0});var qGr=s(uB);wno=r(qGr,"MaskFormerFeatureExtractor"),qGr.forEach(t),Ano=r(F4e," (MaskFormer model)"),F4e.forEach(t),yno=i(se),Jg=n(se,"LI",{});var T4e=s(Jg);Wre=n(T4e,"STRONG",{});var NGr=s(Wre);Lno=r(NGr,"perceiver"),NGr.forEach(t),xno=r(T4e," \u2014 "),_B=n(T4e,"A",{href:!0});var jGr=s(_B);$no=r(jGr,"PerceiverFeatureExtractor"),jGr.forEach(t),kno=r(T4e," (Perceiver model)"),T4e.forEach(t),Sno=i(se),Yg=n(se,"LI",{});var M4e=s(Yg);Hre=n(M4e,"STRONG",{});var DGr=s(Hre);Rno=r(DGr,"poolformer"),DGr.forEach(t),Bno=r(M4e," \u2014 "),bB=n(M4e,"A",{href:!0});var GGr=s(bB);Pno=r(GGr,"PoolFormerFeatureExtractor"),GGr.forEach(t),Ino=r(M4e," (PoolFormer model)"),M4e.forEach(t),qno=i(se),Kg=n(se,"LI",{});var E4e=s(Kg);Ure=n(E4e,"STRONG",{});var OGr=s(Ure);Nno=r(OGr,"regnet"),OGr.forEach(t),jno=r(E4e," \u2014 "),vB=n(E4e,"A",{href:!0});var VGr=s(vB);Dno=r(VGr,"ConvNextFeatureExtractor"),VGr.forEach(t),Gno=r(E4e," (RegNet model)"),E4e.forEach(t),Ono=i(se),Zg=n(se,"LI",{});var C4e=s(Zg);Jre=n(C4e,"STRONG",{});var XGr=s(Jre);Vno=r(XGr,"resnet"),XGr.forEach(t),Xno=r(C4e," \u2014 "),FB=n(C4e,"A",{href:!0});var zGr=s(FB);zno=r(zGr,"ConvNextFeatureExtractor"),zGr.forEach(t),Qno=r(C4e," (ResNet model)"),C4e.forEach(t),Wno=i(se),eh=n(se,"LI",{});var w4e=s(eh);Yre=n(w4e,"STRONG",{});var QGr=s(Yre);Hno=r(QGr,"segformer"),QGr.forEach(t),Uno=r(w4e," \u2014 "),TB=n(w4e,"A",{href:!0});var WGr=s(TB);Jno=r(WGr,"SegformerFeatureExtractor"),WGr.forEach(t),Yno=r(w4e," (SegFormer model)"),w4e.forEach(t),Kno=i(se),oh=n(se,"LI",{});var A4e=s(oh);Kre=n(A4e,"STRONG",{});var HGr=s(Kre);Zno=r(HGr,"speech_to_text"),HGr.forEach(t),eso=r(A4e," \u2014 "),MB=n(A4e,"A",{href:!0});var UGr=s(MB);oso=r(UGr,"Speech2TextFeatureExtractor"),UGr.forEach(t),rso=r(A4e," (Speech2Text model)"),A4e.forEach(t),tso=i(se),rh=n(se,"LI",{});var y4e=s(rh);Zre=n(y4e,"STRONG",{});var JGr=s(Zre);aso=r(JGr,"swin"),JGr.forEach(t),nso=r(y4e," \u2014 "),EB=n(y4e,"A",{href:!0});var YGr=s(EB);sso=r(YGr,"ViTFeatureExtractor"),YGr.forEach(t),lso=r(y4e," (Swin model)"),y4e.forEach(t),iso=i(se),th=n(se,"LI",{});var L4e=s(th);ete=n(L4e,"STRONG",{});var KGr=s(ete);dso=r(KGr,"van"),KGr.forEach(t),cso=r(L4e," \u2014 "),CB=n(L4e,"A",{href:!0});var ZGr=s(CB);fso=r(ZGr,"ConvNextFeatureExtractor"),ZGr.forEach(t),mso=r(L4e," (VAN model)"),L4e.forEach(t),gso=i(se),ah=n(se,"LI",{});var x4e=s(ah);ote=n(x4e,"STRONG",{});var eOr=s(ote);hso=r(eOr,"vit"),eOr.forEach(t),pso=r(x4e," \u2014 "),wB=n(x4e,"A",{href:!0});var oOr=s(wB);uso=r(oOr,"ViTFeatureExtractor"),oOr.forEach(t),_so=r(x4e," (ViT model)"),x4e.forEach(t),bso=i(se),nh=n(se,"LI",{});var $4e=s(nh);rte=n($4e,"STRONG",{});var rOr=s(rte);vso=r(rOr,"vit_mae"),rOr.forEach(t),Fso=r($4e," \u2014 "),AB=n($4e,"A",{href:!0});var tOr=s(AB);Tso=r(tOr,"ViTFeatureExtractor"),tOr.forEach(t),Mso=r($4e," (ViTMAE model)"),$4e.forEach(t),Eso=i(se),sh=n(se,"LI",{});var k4e=s(sh);tte=n(k4e,"STRONG",{});var aOr=s(tte);Cso=r(aOr,"wav2vec2"),aOr.forEach(t),wso=r(k4e," \u2014 "),yB=n(k4e,"A",{href:!0});var nOr=s(yB);Aso=r(nOr,"Wav2Vec2FeatureExtractor"),nOr.forEach(t),yso=r(k4e," (Wav2Vec2 model)"),k4e.forEach(t),se.forEach(t),Lso=i(Wt),T(lh.$$.fragment,Wt),xso=i(Wt),T(ih.$$.fragment,Wt),Wt.forEach(t),$so=i(Rs),dh=n(Rs,"DIV",{class:!0});var GPe=s(dh);T(B3.$$.fragment,GPe),kso=i(GPe),ate=n(GPe,"P",{});var sOr=s(ate);Sso=r(sOr,"Register a new feature extractor for this class."),sOr.forEach(t),GPe.forEach(t),Rs.forEach(t),ORe=i(f),hi=n(f,"H2",{class:!0});var OPe=s(hi);ch=n(OPe,"A",{id:!0,class:!0,href:!0});var lOr=s(ch);nte=n(lOr,"SPAN",{});var iOr=s(nte);T(P3.$$.fragment,iOr),iOr.forEach(t),lOr.forEach(t),Rso=i(OPe),ste=n(OPe,"SPAN",{});var dOr=s(ste);Bso=r(dOr,"AutoProcessor"),dOr.forEach(t),OPe.forEach(t),VRe=i(f),wo=n(f,"DIV",{class:!0});var Bs=s(wo);T(I3.$$.fragment,Bs),Pso=i(Bs),q3=n(Bs,"P",{});var VPe=s(q3);Iso=r(VPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),LB=n(VPe,"A",{href:!0});var cOr=s(LB);qso=r(cOr,"AutoProcessor.from_pretrained()"),cOr.forEach(t),Nso=r(VPe," class method."),VPe.forEach(t),jso=i(Bs),N3=n(Bs,"P",{});var XPe=s(N3);Dso=r(XPe,"This class cannot be instantiated directly using "),lte=n(XPe,"CODE",{});var fOr=s(lte);Gso=r(fOr,"__init__()"),fOr.forEach(t),Oso=r(XPe," (throws an error)."),XPe.forEach(t),Vso=i(Bs),ze=n(Bs,"DIV",{class:!0});var Ht=s(ze);T(j3.$$.fragment,Ht),Xso=i(Ht),ite=n(Ht,"P",{});var mOr=s(ite);zso=r(mOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),mOr.forEach(t),Qso=i(Ht),pi=n(Ht,"P",{});var UJ=s(pi);Wso=r(UJ,"The processor class to instantiate is selected based on the "),dte=n(UJ,"CODE",{});var gOr=s(dte);Hso=r(gOr,"model_type"),gOr.forEach(t),Uso=r(UJ,` property of the config object (either
passed as an argument or loaded from `),cte=n(UJ,"CODE",{});var hOr=s(cte);Jso=r(hOr,"pretrained_model_name_or_path"),hOr.forEach(t),Yso=r(UJ," if possible):"),UJ.forEach(t),Kso=i(Ht),be=n(Ht,"UL",{});var Fe=s(be);fh=n(Fe,"LI",{});var S4e=s(fh);fte=n(S4e,"STRONG",{});var pOr=s(fte);Zso=r(pOr,"clip"),pOr.forEach(t),elo=r(S4e," \u2014 "),xB=n(S4e,"A",{href:!0});var uOr=s(xB);olo=r(uOr,"CLIPProcessor"),uOr.forEach(t),rlo=r(S4e," (CLIP model)"),S4e.forEach(t),tlo=i(Fe),mh=n(Fe,"LI",{});var R4e=s(mh);mte=n(R4e,"STRONG",{});var _Or=s(mte);alo=r(_Or,"layoutlmv2"),_Or.forEach(t),nlo=r(R4e," \u2014 "),$B=n(R4e,"A",{href:!0});var bOr=s($B);slo=r(bOr,"LayoutLMv2Processor"),bOr.forEach(t),llo=r(R4e," (LayoutLMv2 model)"),R4e.forEach(t),ilo=i(Fe),gh=n(Fe,"LI",{});var B4e=s(gh);gte=n(B4e,"STRONG",{});var vOr=s(gte);dlo=r(vOr,"layoutxlm"),vOr.forEach(t),clo=r(B4e," \u2014 "),kB=n(B4e,"A",{href:!0});var FOr=s(kB);flo=r(FOr,"LayoutXLMProcessor"),FOr.forEach(t),mlo=r(B4e," (LayoutXLM model)"),B4e.forEach(t),glo=i(Fe),hh=n(Fe,"LI",{});var P4e=s(hh);hte=n(P4e,"STRONG",{});var TOr=s(hte);hlo=r(TOr,"sew"),TOr.forEach(t),plo=r(P4e," \u2014 "),SB=n(P4e,"A",{href:!0});var MOr=s(SB);ulo=r(MOr,"Wav2Vec2Processor"),MOr.forEach(t),_lo=r(P4e," (SEW model)"),P4e.forEach(t),blo=i(Fe),ph=n(Fe,"LI",{});var I4e=s(ph);pte=n(I4e,"STRONG",{});var EOr=s(pte);vlo=r(EOr,"sew-d"),EOr.forEach(t),Flo=r(I4e," \u2014 "),RB=n(I4e,"A",{href:!0});var COr=s(RB);Tlo=r(COr,"Wav2Vec2Processor"),COr.forEach(t),Mlo=r(I4e," (SEW-D model)"),I4e.forEach(t),Elo=i(Fe),uh=n(Fe,"LI",{});var q4e=s(uh);ute=n(q4e,"STRONG",{});var wOr=s(ute);Clo=r(wOr,"speech_to_text"),wOr.forEach(t),wlo=r(q4e," \u2014 "),BB=n(q4e,"A",{href:!0});var AOr=s(BB);Alo=r(AOr,"Speech2TextProcessor"),AOr.forEach(t),ylo=r(q4e," (Speech2Text model)"),q4e.forEach(t),Llo=i(Fe),_h=n(Fe,"LI",{});var N4e=s(_h);_te=n(N4e,"STRONG",{});var yOr=s(_te);xlo=r(yOr,"speech_to_text_2"),yOr.forEach(t),$lo=r(N4e," \u2014 "),PB=n(N4e,"A",{href:!0});var LOr=s(PB);klo=r(LOr,"Speech2Text2Processor"),LOr.forEach(t),Slo=r(N4e," (Speech2Text2 model)"),N4e.forEach(t),Rlo=i(Fe),bh=n(Fe,"LI",{});var j4e=s(bh);bte=n(j4e,"STRONG",{});var xOr=s(bte);Blo=r(xOr,"trocr"),xOr.forEach(t),Plo=r(j4e," \u2014 "),IB=n(j4e,"A",{href:!0});var $Or=s(IB);Ilo=r($Or,"TrOCRProcessor"),$Or.forEach(t),qlo=r(j4e," (TrOCR model)"),j4e.forEach(t),Nlo=i(Fe),vh=n(Fe,"LI",{});var D4e=s(vh);vte=n(D4e,"STRONG",{});var kOr=s(vte);jlo=r(kOr,"unispeech"),kOr.forEach(t),Dlo=r(D4e," \u2014 "),qB=n(D4e,"A",{href:!0});var SOr=s(qB);Glo=r(SOr,"Wav2Vec2Processor"),SOr.forEach(t),Olo=r(D4e," (UniSpeech model)"),D4e.forEach(t),Vlo=i(Fe),Fh=n(Fe,"LI",{});var G4e=s(Fh);Fte=n(G4e,"STRONG",{});var ROr=s(Fte);Xlo=r(ROr,"unispeech-sat"),ROr.forEach(t),zlo=r(G4e," \u2014 "),NB=n(G4e,"A",{href:!0});var BOr=s(NB);Qlo=r(BOr,"Wav2Vec2Processor"),BOr.forEach(t),Wlo=r(G4e," (UniSpeechSat model)"),G4e.forEach(t),Hlo=i(Fe),Th=n(Fe,"LI",{});var O4e=s(Th);Tte=n(O4e,"STRONG",{});var POr=s(Tte);Ulo=r(POr,"vilt"),POr.forEach(t),Jlo=r(O4e," \u2014 "),jB=n(O4e,"A",{href:!0});var IOr=s(jB);Ylo=r(IOr,"ViltProcessor"),IOr.forEach(t),Klo=r(O4e," (ViLT model)"),O4e.forEach(t),Zlo=i(Fe),Mh=n(Fe,"LI",{});var V4e=s(Mh);Mte=n(V4e,"STRONG",{});var qOr=s(Mte);eio=r(qOr,"vision-text-dual-encoder"),qOr.forEach(t),oio=r(V4e," \u2014 "),DB=n(V4e,"A",{href:!0});var NOr=s(DB);rio=r(NOr,"VisionTextDualEncoderProcessor"),NOr.forEach(t),tio=r(V4e," (VisionTextDualEncoder model)"),V4e.forEach(t),aio=i(Fe),Eh=n(Fe,"LI",{});var X4e=s(Eh);Ete=n(X4e,"STRONG",{});var jOr=s(Ete);nio=r(jOr,"wav2vec2"),jOr.forEach(t),sio=r(X4e," \u2014 "),GB=n(X4e,"A",{href:!0});var DOr=s(GB);lio=r(DOr,"Wav2Vec2Processor"),DOr.forEach(t),iio=r(X4e," (Wav2Vec2 model)"),X4e.forEach(t),dio=i(Fe),Ch=n(Fe,"LI",{});var z4e=s(Ch);Cte=n(z4e,"STRONG",{});var GOr=s(Cte);cio=r(GOr,"wavlm"),GOr.forEach(t),fio=r(z4e," \u2014 "),OB=n(z4e,"A",{href:!0});var OOr=s(OB);mio=r(OOr,"Wav2Vec2Processor"),OOr.forEach(t),gio=r(z4e," (WavLM model)"),z4e.forEach(t),Fe.forEach(t),hio=i(Ht),T(wh.$$.fragment,Ht),pio=i(Ht),T(Ah.$$.fragment,Ht),Ht.forEach(t),uio=i(Bs),yh=n(Bs,"DIV",{class:!0});var zPe=s(yh);T(D3.$$.fragment,zPe),_io=i(zPe),wte=n(zPe,"P",{});var VOr=s(wte);bio=r(VOr,"Register a new processor for this class."),VOr.forEach(t),zPe.forEach(t),Bs.forEach(t),XRe=i(f),ui=n(f,"H2",{class:!0});var QPe=s(ui);Lh=n(QPe,"A",{id:!0,class:!0,href:!0});var XOr=s(Lh);Ate=n(XOr,"SPAN",{});var zOr=s(Ate);T(G3.$$.fragment,zOr),zOr.forEach(t),XOr.forEach(t),vio=i(QPe),yte=n(QPe,"SPAN",{});var QOr=s(yte);Fio=r(QOr,"AutoModel"),QOr.forEach(t),QPe.forEach(t),zRe=i(f),Ao=n(f,"DIV",{class:!0});var Ps=s(Ao);T(O3.$$.fragment,Ps),Tio=i(Ps),_i=n(Ps,"P",{});var JJ=s(_i);Mio=r(JJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VB=n(JJ,"A",{href:!0});var WOr=s(VB);Eio=r(WOr,"from_pretrained()"),WOr.forEach(t),Cio=r(JJ," class method or the "),XB=n(JJ,"A",{href:!0});var HOr=s(XB);wio=r(HOr,"from_config()"),HOr.forEach(t),Aio=r(JJ,` class
method.`),JJ.forEach(t),yio=i(Ps),V3=n(Ps,"P",{});var WPe=s(V3);Lio=r(WPe,"This class cannot be instantiated directly using "),Lte=n(WPe,"CODE",{});var UOr=s(Lte);xio=r(UOr,"__init__()"),UOr.forEach(t),$io=r(WPe," (throws an error)."),WPe.forEach(t),kio=i(Ps),Kr=n(Ps,"DIV",{class:!0});var v5=s(Kr);T(X3.$$.fragment,v5),Sio=i(v5),xte=n(v5,"P",{});var JOr=s(xte);Rio=r(JOr,"Instantiates one of the base model classes of the library from a configuration."),JOr.forEach(t),Bio=i(v5),bi=n(v5,"P",{});var YJ=s(bi);Pio=r(YJ,`Note:
Loading a model from its configuration file does `),$te=n(YJ,"STRONG",{});var YOr=s($te);Iio=r(YOr,"not"),YOr.forEach(t),qio=r(YJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zB=n(YJ,"A",{href:!0});var KOr=s(zB);Nio=r(KOr,"from_pretrained()"),KOr.forEach(t),jio=r(YJ," to load the model weights."),YJ.forEach(t),Dio=i(v5),T(xh.$$.fragment,v5),v5.forEach(t),Gio=i(Ps),Qe=n(Ps,"DIV",{class:!0});var Ut=s(Qe);T(z3.$$.fragment,Ut),Oio=i(Ut),kte=n(Ut,"P",{});var ZOr=s(kte);Vio=r(ZOr,"Instantiate one of the base model classes of the library from a pretrained model."),ZOr.forEach(t),Xio=i(Ut),Ma=n(Ut,"P",{});var F5=s(Ma);zio=r(F5,"The model class to instantiate is selected based on the "),Ste=n(F5,"CODE",{});var eVr=s(Ste);Qio=r(eVr,"model_type"),eVr.forEach(t),Wio=r(F5,` property of the config object (either
passed as an argument or loaded from `),Rte=n(F5,"CODE",{});var oVr=s(Rte);Hio=r(oVr,"pretrained_model_name_or_path"),oVr.forEach(t),Uio=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=n(F5,"CODE",{});var rVr=s(Bte);Jio=r(rVr,"pretrained_model_name_or_path"),rVr.forEach(t),Yio=r(F5,":"),F5.forEach(t),Kio=i(Ut),x=n(Ut,"UL",{});var $=s(x);$h=n($,"LI",{});var Q4e=s($h);Pte=n(Q4e,"STRONG",{});var tVr=s(Pte);Zio=r(tVr,"albert"),tVr.forEach(t),edo=r(Q4e," \u2014 "),QB=n(Q4e,"A",{href:!0});var aVr=s(QB);odo=r(aVr,"AlbertModel"),aVr.forEach(t),rdo=r(Q4e," (ALBERT model)"),Q4e.forEach(t),tdo=i($),kh=n($,"LI",{});var W4e=s(kh);Ite=n(W4e,"STRONG",{});var nVr=s(Ite);ado=r(nVr,"bart"),nVr.forEach(t),ndo=r(W4e," \u2014 "),WB=n(W4e,"A",{href:!0});var sVr=s(WB);sdo=r(sVr,"BartModel"),sVr.forEach(t),ldo=r(W4e," (BART model)"),W4e.forEach(t),ido=i($),Sh=n($,"LI",{});var H4e=s(Sh);qte=n(H4e,"STRONG",{});var lVr=s(qte);ddo=r(lVr,"beit"),lVr.forEach(t),cdo=r(H4e," \u2014 "),HB=n(H4e,"A",{href:!0});var iVr=s(HB);fdo=r(iVr,"BeitModel"),iVr.forEach(t),mdo=r(H4e," (BEiT model)"),H4e.forEach(t),gdo=i($),Rh=n($,"LI",{});var U4e=s(Rh);Nte=n(U4e,"STRONG",{});var dVr=s(Nte);hdo=r(dVr,"bert"),dVr.forEach(t),pdo=r(U4e," \u2014 "),UB=n(U4e,"A",{href:!0});var cVr=s(UB);udo=r(cVr,"BertModel"),cVr.forEach(t),_do=r(U4e," (BERT model)"),U4e.forEach(t),bdo=i($),Bh=n($,"LI",{});var J4e=s(Bh);jte=n(J4e,"STRONG",{});var fVr=s(jte);vdo=r(fVr,"bert-generation"),fVr.forEach(t),Fdo=r(J4e," \u2014 "),JB=n(J4e,"A",{href:!0});var mVr=s(JB);Tdo=r(mVr,"BertGenerationEncoder"),mVr.forEach(t),Mdo=r(J4e," (Bert Generation model)"),J4e.forEach(t),Edo=i($),Ph=n($,"LI",{});var Y4e=s(Ph);Dte=n(Y4e,"STRONG",{});var gVr=s(Dte);Cdo=r(gVr,"big_bird"),gVr.forEach(t),wdo=r(Y4e," \u2014 "),YB=n(Y4e,"A",{href:!0});var hVr=s(YB);Ado=r(hVr,"BigBirdModel"),hVr.forEach(t),ydo=r(Y4e," (BigBird model)"),Y4e.forEach(t),Ldo=i($),Ih=n($,"LI",{});var K4e=s(Ih);Gte=n(K4e,"STRONG",{});var pVr=s(Gte);xdo=r(pVr,"bigbird_pegasus"),pVr.forEach(t),$do=r(K4e," \u2014 "),KB=n(K4e,"A",{href:!0});var uVr=s(KB);kdo=r(uVr,"BigBirdPegasusModel"),uVr.forEach(t),Sdo=r(K4e," (BigBirdPegasus model)"),K4e.forEach(t),Rdo=i($),qh=n($,"LI",{});var Z4e=s(qh);Ote=n(Z4e,"STRONG",{});var _Vr=s(Ote);Bdo=r(_Vr,"blenderbot"),_Vr.forEach(t),Pdo=r(Z4e," \u2014 "),ZB=n(Z4e,"A",{href:!0});var bVr=s(ZB);Ido=r(bVr,"BlenderbotModel"),bVr.forEach(t),qdo=r(Z4e," (Blenderbot model)"),Z4e.forEach(t),Ndo=i($),Nh=n($,"LI",{});var eEe=s(Nh);Vte=n(eEe,"STRONG",{});var vVr=s(Vte);jdo=r(vVr,"blenderbot-small"),vVr.forEach(t),Ddo=r(eEe," \u2014 "),eP=n(eEe,"A",{href:!0});var FVr=s(eP);Gdo=r(FVr,"BlenderbotSmallModel"),FVr.forEach(t),Odo=r(eEe," (BlenderbotSmall model)"),eEe.forEach(t),Vdo=i($),jh=n($,"LI",{});var oEe=s(jh);Xte=n(oEe,"STRONG",{});var TVr=s(Xte);Xdo=r(TVr,"camembert"),TVr.forEach(t),zdo=r(oEe," \u2014 "),oP=n(oEe,"A",{href:!0});var MVr=s(oP);Qdo=r(MVr,"CamembertModel"),MVr.forEach(t),Wdo=r(oEe," (CamemBERT model)"),oEe.forEach(t),Hdo=i($),Dh=n($,"LI",{});var rEe=s(Dh);zte=n(rEe,"STRONG",{});var EVr=s(zte);Udo=r(EVr,"canine"),EVr.forEach(t),Jdo=r(rEe," \u2014 "),rP=n(rEe,"A",{href:!0});var CVr=s(rP);Ydo=r(CVr,"CanineModel"),CVr.forEach(t),Kdo=r(rEe," (Canine model)"),rEe.forEach(t),Zdo=i($),Gh=n($,"LI",{});var tEe=s(Gh);Qte=n(tEe,"STRONG",{});var wVr=s(Qte);eco=r(wVr,"clip"),wVr.forEach(t),oco=r(tEe," \u2014 "),tP=n(tEe,"A",{href:!0});var AVr=s(tP);rco=r(AVr,"CLIPModel"),AVr.forEach(t),tco=r(tEe," (CLIP model)"),tEe.forEach(t),aco=i($),Oh=n($,"LI",{});var aEe=s(Oh);Wte=n(aEe,"STRONG",{});var yVr=s(Wte);nco=r(yVr,"convbert"),yVr.forEach(t),sco=r(aEe," \u2014 "),aP=n(aEe,"A",{href:!0});var LVr=s(aP);lco=r(LVr,"ConvBertModel"),LVr.forEach(t),ico=r(aEe," (ConvBERT model)"),aEe.forEach(t),dco=i($),Vh=n($,"LI",{});var nEe=s(Vh);Hte=n(nEe,"STRONG",{});var xVr=s(Hte);cco=r(xVr,"convnext"),xVr.forEach(t),fco=r(nEe," \u2014 "),nP=n(nEe,"A",{href:!0});var $Vr=s(nP);mco=r($Vr,"ConvNextModel"),$Vr.forEach(t),gco=r(nEe," (ConvNext model)"),nEe.forEach(t),hco=i($),Xh=n($,"LI",{});var sEe=s(Xh);Ute=n(sEe,"STRONG",{});var kVr=s(Ute);pco=r(kVr,"ctrl"),kVr.forEach(t),uco=r(sEe," \u2014 "),sP=n(sEe,"A",{href:!0});var SVr=s(sP);_co=r(SVr,"CTRLModel"),SVr.forEach(t),bco=r(sEe," (CTRL model)"),sEe.forEach(t),vco=i($),zh=n($,"LI",{});var lEe=s(zh);Jte=n(lEe,"STRONG",{});var RVr=s(Jte);Fco=r(RVr,"data2vec-audio"),RVr.forEach(t),Tco=r(lEe," \u2014 "),lP=n(lEe,"A",{href:!0});var BVr=s(lP);Mco=r(BVr,"Data2VecAudioModel"),BVr.forEach(t),Eco=r(lEe," (Data2VecAudio model)"),lEe.forEach(t),Cco=i($),Qh=n($,"LI",{});var iEe=s(Qh);Yte=n(iEe,"STRONG",{});var PVr=s(Yte);wco=r(PVr,"data2vec-text"),PVr.forEach(t),Aco=r(iEe," \u2014 "),iP=n(iEe,"A",{href:!0});var IVr=s(iP);yco=r(IVr,"Data2VecTextModel"),IVr.forEach(t),Lco=r(iEe," (Data2VecText model)"),iEe.forEach(t),xco=i($),Wh=n($,"LI",{});var dEe=s(Wh);Kte=n(dEe,"STRONG",{});var qVr=s(Kte);$co=r(qVr,"data2vec-vision"),qVr.forEach(t),kco=r(dEe," \u2014 "),dP=n(dEe,"A",{href:!0});var NVr=s(dP);Sco=r(NVr,"Data2VecVisionModel"),NVr.forEach(t),Rco=r(dEe," (Data2VecVision model)"),dEe.forEach(t),Bco=i($),Hh=n($,"LI",{});var cEe=s(Hh);Zte=n(cEe,"STRONG",{});var jVr=s(Zte);Pco=r(jVr,"deberta"),jVr.forEach(t),Ico=r(cEe," \u2014 "),cP=n(cEe,"A",{href:!0});var DVr=s(cP);qco=r(DVr,"DebertaModel"),DVr.forEach(t),Nco=r(cEe," (DeBERTa model)"),cEe.forEach(t),jco=i($),Uh=n($,"LI",{});var fEe=s(Uh);eae=n(fEe,"STRONG",{});var GVr=s(eae);Dco=r(GVr,"deberta-v2"),GVr.forEach(t),Gco=r(fEe," \u2014 "),fP=n(fEe,"A",{href:!0});var OVr=s(fP);Oco=r(OVr,"DebertaV2Model"),OVr.forEach(t),Vco=r(fEe," (DeBERTa-v2 model)"),fEe.forEach(t),Xco=i($),Jh=n($,"LI",{});var mEe=s(Jh);oae=n(mEe,"STRONG",{});var VVr=s(oae);zco=r(VVr,"decision_transformer"),VVr.forEach(t),Qco=r(mEe," \u2014 "),mP=n(mEe,"A",{href:!0});var XVr=s(mP);Wco=r(XVr,"DecisionTransformerModel"),XVr.forEach(t),Hco=r(mEe," (Decision Transformer model)"),mEe.forEach(t),Uco=i($),Yh=n($,"LI",{});var gEe=s(Yh);rae=n(gEe,"STRONG",{});var zVr=s(rae);Jco=r(zVr,"deit"),zVr.forEach(t),Yco=r(gEe," \u2014 "),gP=n(gEe,"A",{href:!0});var QVr=s(gP);Kco=r(QVr,"DeiTModel"),QVr.forEach(t),Zco=r(gEe," (DeiT model)"),gEe.forEach(t),efo=i($),Kh=n($,"LI",{});var hEe=s(Kh);tae=n(hEe,"STRONG",{});var WVr=s(tae);ofo=r(WVr,"detr"),WVr.forEach(t),rfo=r(hEe," \u2014 "),hP=n(hEe,"A",{href:!0});var HVr=s(hP);tfo=r(HVr,"DetrModel"),HVr.forEach(t),afo=r(hEe," (DETR model)"),hEe.forEach(t),nfo=i($),Zh=n($,"LI",{});var pEe=s(Zh);aae=n(pEe,"STRONG",{});var UVr=s(aae);sfo=r(UVr,"distilbert"),UVr.forEach(t),lfo=r(pEe," \u2014 "),pP=n(pEe,"A",{href:!0});var JVr=s(pP);ifo=r(JVr,"DistilBertModel"),JVr.forEach(t),dfo=r(pEe," (DistilBERT model)"),pEe.forEach(t),cfo=i($),ep=n($,"LI",{});var uEe=s(ep);nae=n(uEe,"STRONG",{});var YVr=s(nae);ffo=r(YVr,"dpr"),YVr.forEach(t),mfo=r(uEe," \u2014 "),uP=n(uEe,"A",{href:!0});var KVr=s(uP);gfo=r(KVr,"DPRQuestionEncoder"),KVr.forEach(t),hfo=r(uEe," (DPR model)"),uEe.forEach(t),pfo=i($),op=n($,"LI",{});var _Ee=s(op);sae=n(_Ee,"STRONG",{});var ZVr=s(sae);ufo=r(ZVr,"dpt"),ZVr.forEach(t),_fo=r(_Ee," \u2014 "),_P=n(_Ee,"A",{href:!0});var eXr=s(_P);bfo=r(eXr,"DPTModel"),eXr.forEach(t),vfo=r(_Ee," (DPT model)"),_Ee.forEach(t),Ffo=i($),rp=n($,"LI",{});var bEe=s(rp);lae=n(bEe,"STRONG",{});var oXr=s(lae);Tfo=r(oXr,"electra"),oXr.forEach(t),Mfo=r(bEe," \u2014 "),bP=n(bEe,"A",{href:!0});var rXr=s(bP);Efo=r(rXr,"ElectraModel"),rXr.forEach(t),Cfo=r(bEe," (ELECTRA model)"),bEe.forEach(t),wfo=i($),tp=n($,"LI",{});var vEe=s(tp);iae=n(vEe,"STRONG",{});var tXr=s(iae);Afo=r(tXr,"flaubert"),tXr.forEach(t),yfo=r(vEe," \u2014 "),vP=n(vEe,"A",{href:!0});var aXr=s(vP);Lfo=r(aXr,"FlaubertModel"),aXr.forEach(t),xfo=r(vEe," (FlauBERT model)"),vEe.forEach(t),$fo=i($),ap=n($,"LI",{});var FEe=s(ap);dae=n(FEe,"STRONG",{});var nXr=s(dae);kfo=r(nXr,"fnet"),nXr.forEach(t),Sfo=r(FEe," \u2014 "),FP=n(FEe,"A",{href:!0});var sXr=s(FP);Rfo=r(sXr,"FNetModel"),sXr.forEach(t),Bfo=r(FEe," (FNet model)"),FEe.forEach(t),Pfo=i($),np=n($,"LI",{});var TEe=s(np);cae=n(TEe,"STRONG",{});var lXr=s(cae);Ifo=r(lXr,"fsmt"),lXr.forEach(t),qfo=r(TEe," \u2014 "),TP=n(TEe,"A",{href:!0});var iXr=s(TP);Nfo=r(iXr,"FSMTModel"),iXr.forEach(t),jfo=r(TEe," (FairSeq Machine-Translation model)"),TEe.forEach(t),Dfo=i($),Ls=n($,"LI",{});var Ex=s(Ls);fae=n(Ex,"STRONG",{});var dXr=s(fae);Gfo=r(dXr,"funnel"),dXr.forEach(t),Ofo=r(Ex," \u2014 "),MP=n(Ex,"A",{href:!0});var cXr=s(MP);Vfo=r(cXr,"FunnelModel"),cXr.forEach(t),Xfo=r(Ex," or "),EP=n(Ex,"A",{href:!0});var fXr=s(EP);zfo=r(fXr,"FunnelBaseModel"),fXr.forEach(t),Qfo=r(Ex," (Funnel Transformer model)"),Ex.forEach(t),Wfo=i($),sp=n($,"LI",{});var MEe=s(sp);mae=n(MEe,"STRONG",{});var mXr=s(mae);Hfo=r(mXr,"glpn"),mXr.forEach(t),Ufo=r(MEe," \u2014 "),CP=n(MEe,"A",{href:!0});var gXr=s(CP);Jfo=r(gXr,"GLPNModel"),gXr.forEach(t),Yfo=r(MEe," (GLPN model)"),MEe.forEach(t),Kfo=i($),lp=n($,"LI",{});var EEe=s(lp);gae=n(EEe,"STRONG",{});var hXr=s(gae);Zfo=r(hXr,"gpt2"),hXr.forEach(t),emo=r(EEe," \u2014 "),wP=n(EEe,"A",{href:!0});var pXr=s(wP);omo=r(pXr,"GPT2Model"),pXr.forEach(t),rmo=r(EEe," (OpenAI GPT-2 model)"),EEe.forEach(t),tmo=i($),ip=n($,"LI",{});var CEe=s(ip);hae=n(CEe,"STRONG",{});var uXr=s(hae);amo=r(uXr,"gpt_neo"),uXr.forEach(t),nmo=r(CEe," \u2014 "),AP=n(CEe,"A",{href:!0});var _Xr=s(AP);smo=r(_Xr,"GPTNeoModel"),_Xr.forEach(t),lmo=r(CEe," (GPT Neo model)"),CEe.forEach(t),imo=i($),dp=n($,"LI",{});var wEe=s(dp);pae=n(wEe,"STRONG",{});var bXr=s(pae);dmo=r(bXr,"gptj"),bXr.forEach(t),cmo=r(wEe," \u2014 "),yP=n(wEe,"A",{href:!0});var vXr=s(yP);fmo=r(vXr,"GPTJModel"),vXr.forEach(t),mmo=r(wEe," (GPT-J model)"),wEe.forEach(t),gmo=i($),cp=n($,"LI",{});var AEe=s(cp);uae=n(AEe,"STRONG",{});var FXr=s(uae);hmo=r(FXr,"hubert"),FXr.forEach(t),pmo=r(AEe," \u2014 "),LP=n(AEe,"A",{href:!0});var TXr=s(LP);umo=r(TXr,"HubertModel"),TXr.forEach(t),_mo=r(AEe," (Hubert model)"),AEe.forEach(t),bmo=i($),fp=n($,"LI",{});var yEe=s(fp);_ae=n(yEe,"STRONG",{});var MXr=s(_ae);vmo=r(MXr,"ibert"),MXr.forEach(t),Fmo=r(yEe," \u2014 "),xP=n(yEe,"A",{href:!0});var EXr=s(xP);Tmo=r(EXr,"IBertModel"),EXr.forEach(t),Mmo=r(yEe," (I-BERT model)"),yEe.forEach(t),Emo=i($),mp=n($,"LI",{});var LEe=s(mp);bae=n(LEe,"STRONG",{});var CXr=s(bae);Cmo=r(CXr,"imagegpt"),CXr.forEach(t),wmo=r(LEe," \u2014 "),$P=n(LEe,"A",{href:!0});var wXr=s($P);Amo=r(wXr,"ImageGPTModel"),wXr.forEach(t),ymo=r(LEe," (ImageGPT model)"),LEe.forEach(t),Lmo=i($),gp=n($,"LI",{});var xEe=s(gp);vae=n(xEe,"STRONG",{});var AXr=s(vae);xmo=r(AXr,"layoutlm"),AXr.forEach(t),$mo=r(xEe," \u2014 "),kP=n(xEe,"A",{href:!0});var yXr=s(kP);kmo=r(yXr,"LayoutLMModel"),yXr.forEach(t),Smo=r(xEe," (LayoutLM model)"),xEe.forEach(t),Rmo=i($),hp=n($,"LI",{});var $Ee=s(hp);Fae=n($Ee,"STRONG",{});var LXr=s(Fae);Bmo=r(LXr,"layoutlmv2"),LXr.forEach(t),Pmo=r($Ee," \u2014 "),SP=n($Ee,"A",{href:!0});var xXr=s(SP);Imo=r(xXr,"LayoutLMv2Model"),xXr.forEach(t),qmo=r($Ee," (LayoutLMv2 model)"),$Ee.forEach(t),Nmo=i($),pp=n($,"LI",{});var kEe=s(pp);Tae=n(kEe,"STRONG",{});var $Xr=s(Tae);jmo=r($Xr,"led"),$Xr.forEach(t),Dmo=r(kEe," \u2014 "),RP=n(kEe,"A",{href:!0});var kXr=s(RP);Gmo=r(kXr,"LEDModel"),kXr.forEach(t),Omo=r(kEe," (LED model)"),kEe.forEach(t),Vmo=i($),up=n($,"LI",{});var SEe=s(up);Mae=n(SEe,"STRONG",{});var SXr=s(Mae);Xmo=r(SXr,"longformer"),SXr.forEach(t),zmo=r(SEe," \u2014 "),BP=n(SEe,"A",{href:!0});var RXr=s(BP);Qmo=r(RXr,"LongformerModel"),RXr.forEach(t),Wmo=r(SEe," (Longformer model)"),SEe.forEach(t),Hmo=i($),_p=n($,"LI",{});var REe=s(_p);Eae=n(REe,"STRONG",{});var BXr=s(Eae);Umo=r(BXr,"luke"),BXr.forEach(t),Jmo=r(REe," \u2014 "),PP=n(REe,"A",{href:!0});var PXr=s(PP);Ymo=r(PXr,"LukeModel"),PXr.forEach(t),Kmo=r(REe," (LUKE model)"),REe.forEach(t),Zmo=i($),bp=n($,"LI",{});var BEe=s(bp);Cae=n(BEe,"STRONG",{});var IXr=s(Cae);ego=r(IXr,"lxmert"),IXr.forEach(t),ogo=r(BEe," \u2014 "),IP=n(BEe,"A",{href:!0});var qXr=s(IP);rgo=r(qXr,"LxmertModel"),qXr.forEach(t),tgo=r(BEe," (LXMERT model)"),BEe.forEach(t),ago=i($),vp=n($,"LI",{});var PEe=s(vp);wae=n(PEe,"STRONG",{});var NXr=s(wae);ngo=r(NXr,"m2m_100"),NXr.forEach(t),sgo=r(PEe," \u2014 "),qP=n(PEe,"A",{href:!0});var jXr=s(qP);lgo=r(jXr,"M2M100Model"),jXr.forEach(t),igo=r(PEe," (M2M100 model)"),PEe.forEach(t),dgo=i($),Fp=n($,"LI",{});var IEe=s(Fp);Aae=n(IEe,"STRONG",{});var DXr=s(Aae);cgo=r(DXr,"marian"),DXr.forEach(t),fgo=r(IEe," \u2014 "),NP=n(IEe,"A",{href:!0});var GXr=s(NP);mgo=r(GXr,"MarianModel"),GXr.forEach(t),ggo=r(IEe," (Marian model)"),IEe.forEach(t),hgo=i($),Tp=n($,"LI",{});var qEe=s(Tp);yae=n(qEe,"STRONG",{});var OXr=s(yae);pgo=r(OXr,"maskformer"),OXr.forEach(t),ugo=r(qEe," \u2014 "),jP=n(qEe,"A",{href:!0});var VXr=s(jP);_go=r(VXr,"MaskFormerModel"),VXr.forEach(t),bgo=r(qEe," (MaskFormer model)"),qEe.forEach(t),vgo=i($),Mp=n($,"LI",{});var NEe=s(Mp);Lae=n(NEe,"STRONG",{});var XXr=s(Lae);Fgo=r(XXr,"mbart"),XXr.forEach(t),Tgo=r(NEe," \u2014 "),DP=n(NEe,"A",{href:!0});var zXr=s(DP);Mgo=r(zXr,"MBartModel"),zXr.forEach(t),Ego=r(NEe," (mBART model)"),NEe.forEach(t),Cgo=i($),Ep=n($,"LI",{});var jEe=s(Ep);xae=n(jEe,"STRONG",{});var QXr=s(xae);wgo=r(QXr,"megatron-bert"),QXr.forEach(t),Ago=r(jEe," \u2014 "),GP=n(jEe,"A",{href:!0});var WXr=s(GP);ygo=r(WXr,"MegatronBertModel"),WXr.forEach(t),Lgo=r(jEe," (MegatronBert model)"),jEe.forEach(t),xgo=i($),Cp=n($,"LI",{});var DEe=s(Cp);$ae=n(DEe,"STRONG",{});var HXr=s($ae);$go=r(HXr,"mobilebert"),HXr.forEach(t),kgo=r(DEe," \u2014 "),OP=n(DEe,"A",{href:!0});var UXr=s(OP);Sgo=r(UXr,"MobileBertModel"),UXr.forEach(t),Rgo=r(DEe," (MobileBERT model)"),DEe.forEach(t),Bgo=i($),wp=n($,"LI",{});var GEe=s(wp);kae=n(GEe,"STRONG",{});var JXr=s(kae);Pgo=r(JXr,"mpnet"),JXr.forEach(t),Igo=r(GEe," \u2014 "),VP=n(GEe,"A",{href:!0});var YXr=s(VP);qgo=r(YXr,"MPNetModel"),YXr.forEach(t),Ngo=r(GEe," (MPNet model)"),GEe.forEach(t),jgo=i($),Ap=n($,"LI",{});var OEe=s(Ap);Sae=n(OEe,"STRONG",{});var KXr=s(Sae);Dgo=r(KXr,"mt5"),KXr.forEach(t),Ggo=r(OEe," \u2014 "),XP=n(OEe,"A",{href:!0});var ZXr=s(XP);Ogo=r(ZXr,"MT5Model"),ZXr.forEach(t),Vgo=r(OEe," (mT5 model)"),OEe.forEach(t),Xgo=i($),yp=n($,"LI",{});var VEe=s(yp);Rae=n(VEe,"STRONG",{});var ezr=s(Rae);zgo=r(ezr,"nystromformer"),ezr.forEach(t),Qgo=r(VEe," \u2014 "),zP=n(VEe,"A",{href:!0});var ozr=s(zP);Wgo=r(ozr,"NystromformerModel"),ozr.forEach(t),Hgo=r(VEe," (Nystromformer model)"),VEe.forEach(t),Ugo=i($),Lp=n($,"LI",{});var XEe=s(Lp);Bae=n(XEe,"STRONG",{});var rzr=s(Bae);Jgo=r(rzr,"openai-gpt"),rzr.forEach(t),Ygo=r(XEe," \u2014 "),QP=n(XEe,"A",{href:!0});var tzr=s(QP);Kgo=r(tzr,"OpenAIGPTModel"),tzr.forEach(t),Zgo=r(XEe," (OpenAI GPT model)"),XEe.forEach(t),eho=i($),xp=n($,"LI",{});var zEe=s(xp);Pae=n(zEe,"STRONG",{});var azr=s(Pae);oho=r(azr,"pegasus"),azr.forEach(t),rho=r(zEe," \u2014 "),WP=n(zEe,"A",{href:!0});var nzr=s(WP);tho=r(nzr,"PegasusModel"),nzr.forEach(t),aho=r(zEe," (Pegasus model)"),zEe.forEach(t),nho=i($),$p=n($,"LI",{});var QEe=s($p);Iae=n(QEe,"STRONG",{});var szr=s(Iae);sho=r(szr,"perceiver"),szr.forEach(t),lho=r(QEe," \u2014 "),HP=n(QEe,"A",{href:!0});var lzr=s(HP);iho=r(lzr,"PerceiverModel"),lzr.forEach(t),dho=r(QEe," (Perceiver model)"),QEe.forEach(t),cho=i($),kp=n($,"LI",{});var WEe=s(kp);qae=n(WEe,"STRONG",{});var izr=s(qae);fho=r(izr,"plbart"),izr.forEach(t),mho=r(WEe," \u2014 "),UP=n(WEe,"A",{href:!0});var dzr=s(UP);gho=r(dzr,"PLBartModel"),dzr.forEach(t),hho=r(WEe," (PLBart model)"),WEe.forEach(t),pho=i($),Sp=n($,"LI",{});var HEe=s(Sp);Nae=n(HEe,"STRONG",{});var czr=s(Nae);uho=r(czr,"poolformer"),czr.forEach(t),_ho=r(HEe," \u2014 "),JP=n(HEe,"A",{href:!0});var fzr=s(JP);bho=r(fzr,"PoolFormerModel"),fzr.forEach(t),vho=r(HEe," (PoolFormer model)"),HEe.forEach(t),Fho=i($),Rp=n($,"LI",{});var UEe=s(Rp);jae=n(UEe,"STRONG",{});var mzr=s(jae);Tho=r(mzr,"prophetnet"),mzr.forEach(t),Mho=r(UEe," \u2014 "),YP=n(UEe,"A",{href:!0});var gzr=s(YP);Eho=r(gzr,"ProphetNetModel"),gzr.forEach(t),Cho=r(UEe," (ProphetNet model)"),UEe.forEach(t),who=i($),Bp=n($,"LI",{});var JEe=s(Bp);Dae=n(JEe,"STRONG",{});var hzr=s(Dae);Aho=r(hzr,"qdqbert"),hzr.forEach(t),yho=r(JEe," \u2014 "),KP=n(JEe,"A",{href:!0});var pzr=s(KP);Lho=r(pzr,"QDQBertModel"),pzr.forEach(t),xho=r(JEe," (QDQBert model)"),JEe.forEach(t),$ho=i($),Pp=n($,"LI",{});var YEe=s(Pp);Gae=n(YEe,"STRONG",{});var uzr=s(Gae);kho=r(uzr,"reformer"),uzr.forEach(t),Sho=r(YEe," \u2014 "),ZP=n(YEe,"A",{href:!0});var _zr=s(ZP);Rho=r(_zr,"ReformerModel"),_zr.forEach(t),Bho=r(YEe," (Reformer model)"),YEe.forEach(t),Pho=i($),Ip=n($,"LI",{});var KEe=s(Ip);Oae=n(KEe,"STRONG",{});var bzr=s(Oae);Iho=r(bzr,"regnet"),bzr.forEach(t),qho=r(KEe," \u2014 "),eI=n(KEe,"A",{href:!0});var vzr=s(eI);Nho=r(vzr,"RegNetModel"),vzr.forEach(t),jho=r(KEe," (RegNet model)"),KEe.forEach(t),Dho=i($),qp=n($,"LI",{});var ZEe=s(qp);Vae=n(ZEe,"STRONG",{});var Fzr=s(Vae);Gho=r(Fzr,"rembert"),Fzr.forEach(t),Oho=r(ZEe," \u2014 "),oI=n(ZEe,"A",{href:!0});var Tzr=s(oI);Vho=r(Tzr,"RemBertModel"),Tzr.forEach(t),Xho=r(ZEe," (RemBERT model)"),ZEe.forEach(t),zho=i($),Np=n($,"LI",{});var e5e=s(Np);Xae=n(e5e,"STRONG",{});var Mzr=s(Xae);Qho=r(Mzr,"resnet"),Mzr.forEach(t),Who=r(e5e," \u2014 "),rI=n(e5e,"A",{href:!0});var Ezr=s(rI);Hho=r(Ezr,"ResNetModel"),Ezr.forEach(t),Uho=r(e5e," (ResNet model)"),e5e.forEach(t),Jho=i($),jp=n($,"LI",{});var o5e=s(jp);zae=n(o5e,"STRONG",{});var Czr=s(zae);Yho=r(Czr,"retribert"),Czr.forEach(t),Kho=r(o5e," \u2014 "),tI=n(o5e,"A",{href:!0});var wzr=s(tI);Zho=r(wzr,"RetriBertModel"),wzr.forEach(t),epo=r(o5e," (RetriBERT model)"),o5e.forEach(t),opo=i($),Dp=n($,"LI",{});var r5e=s(Dp);Qae=n(r5e,"STRONG",{});var Azr=s(Qae);rpo=r(Azr,"roberta"),Azr.forEach(t),tpo=r(r5e," \u2014 "),aI=n(r5e,"A",{href:!0});var yzr=s(aI);apo=r(yzr,"RobertaModel"),yzr.forEach(t),npo=r(r5e," (RoBERTa model)"),r5e.forEach(t),spo=i($),Gp=n($,"LI",{});var t5e=s(Gp);Wae=n(t5e,"STRONG",{});var Lzr=s(Wae);lpo=r(Lzr,"roformer"),Lzr.forEach(t),ipo=r(t5e," \u2014 "),nI=n(t5e,"A",{href:!0});var xzr=s(nI);dpo=r(xzr,"RoFormerModel"),xzr.forEach(t),cpo=r(t5e," (RoFormer model)"),t5e.forEach(t),fpo=i($),Op=n($,"LI",{});var a5e=s(Op);Hae=n(a5e,"STRONG",{});var $zr=s(Hae);mpo=r($zr,"segformer"),$zr.forEach(t),gpo=r(a5e," \u2014 "),sI=n(a5e,"A",{href:!0});var kzr=s(sI);hpo=r(kzr,"SegformerModel"),kzr.forEach(t),ppo=r(a5e," (SegFormer model)"),a5e.forEach(t),upo=i($),Vp=n($,"LI",{});var n5e=s(Vp);Uae=n(n5e,"STRONG",{});var Szr=s(Uae);_po=r(Szr,"sew"),Szr.forEach(t),bpo=r(n5e," \u2014 "),lI=n(n5e,"A",{href:!0});var Rzr=s(lI);vpo=r(Rzr,"SEWModel"),Rzr.forEach(t),Fpo=r(n5e," (SEW model)"),n5e.forEach(t),Tpo=i($),Xp=n($,"LI",{});var s5e=s(Xp);Jae=n(s5e,"STRONG",{});var Bzr=s(Jae);Mpo=r(Bzr,"sew-d"),Bzr.forEach(t),Epo=r(s5e," \u2014 "),iI=n(s5e,"A",{href:!0});var Pzr=s(iI);Cpo=r(Pzr,"SEWDModel"),Pzr.forEach(t),wpo=r(s5e," (SEW-D model)"),s5e.forEach(t),Apo=i($),zp=n($,"LI",{});var l5e=s(zp);Yae=n(l5e,"STRONG",{});var Izr=s(Yae);ypo=r(Izr,"speech_to_text"),Izr.forEach(t),Lpo=r(l5e," \u2014 "),dI=n(l5e,"A",{href:!0});var qzr=s(dI);xpo=r(qzr,"Speech2TextModel"),qzr.forEach(t),$po=r(l5e," (Speech2Text model)"),l5e.forEach(t),kpo=i($),Qp=n($,"LI",{});var i5e=s(Qp);Kae=n(i5e,"STRONG",{});var Nzr=s(Kae);Spo=r(Nzr,"splinter"),Nzr.forEach(t),Rpo=r(i5e," \u2014 "),cI=n(i5e,"A",{href:!0});var jzr=s(cI);Bpo=r(jzr,"SplinterModel"),jzr.forEach(t),Ppo=r(i5e," (Splinter model)"),i5e.forEach(t),Ipo=i($),Wp=n($,"LI",{});var d5e=s(Wp);Zae=n(d5e,"STRONG",{});var Dzr=s(Zae);qpo=r(Dzr,"squeezebert"),Dzr.forEach(t),Npo=r(d5e," \u2014 "),fI=n(d5e,"A",{href:!0});var Gzr=s(fI);jpo=r(Gzr,"SqueezeBertModel"),Gzr.forEach(t),Dpo=r(d5e," (SqueezeBERT model)"),d5e.forEach(t),Gpo=i($),Hp=n($,"LI",{});var c5e=s(Hp);ene=n(c5e,"STRONG",{});var Ozr=s(ene);Opo=r(Ozr,"swin"),Ozr.forEach(t),Vpo=r(c5e," \u2014 "),mI=n(c5e,"A",{href:!0});var Vzr=s(mI);Xpo=r(Vzr,"SwinModel"),Vzr.forEach(t),zpo=r(c5e," (Swin model)"),c5e.forEach(t),Qpo=i($),Up=n($,"LI",{});var f5e=s(Up);one=n(f5e,"STRONG",{});var Xzr=s(one);Wpo=r(Xzr,"t5"),Xzr.forEach(t),Hpo=r(f5e," \u2014 "),gI=n(f5e,"A",{href:!0});var zzr=s(gI);Upo=r(zzr,"T5Model"),zzr.forEach(t),Jpo=r(f5e," (T5 model)"),f5e.forEach(t),Ypo=i($),Jp=n($,"LI",{});var m5e=s(Jp);rne=n(m5e,"STRONG",{});var Qzr=s(rne);Kpo=r(Qzr,"tapas"),Qzr.forEach(t),Zpo=r(m5e," \u2014 "),hI=n(m5e,"A",{href:!0});var Wzr=s(hI);euo=r(Wzr,"TapasModel"),Wzr.forEach(t),ouo=r(m5e," (TAPAS model)"),m5e.forEach(t),ruo=i($),Yp=n($,"LI",{});var g5e=s(Yp);tne=n(g5e,"STRONG",{});var Hzr=s(tne);tuo=r(Hzr,"transfo-xl"),Hzr.forEach(t),auo=r(g5e," \u2014 "),pI=n(g5e,"A",{href:!0});var Uzr=s(pI);nuo=r(Uzr,"TransfoXLModel"),Uzr.forEach(t),suo=r(g5e," (Transformer-XL model)"),g5e.forEach(t),luo=i($),Kp=n($,"LI",{});var h5e=s(Kp);ane=n(h5e,"STRONG",{});var Jzr=s(ane);iuo=r(Jzr,"unispeech"),Jzr.forEach(t),duo=r(h5e," \u2014 "),uI=n(h5e,"A",{href:!0});var Yzr=s(uI);cuo=r(Yzr,"UniSpeechModel"),Yzr.forEach(t),fuo=r(h5e," (UniSpeech model)"),h5e.forEach(t),muo=i($),Zp=n($,"LI",{});var p5e=s(Zp);nne=n(p5e,"STRONG",{});var Kzr=s(nne);guo=r(Kzr,"unispeech-sat"),Kzr.forEach(t),huo=r(p5e," \u2014 "),_I=n(p5e,"A",{href:!0});var Zzr=s(_I);puo=r(Zzr,"UniSpeechSatModel"),Zzr.forEach(t),uuo=r(p5e," (UniSpeechSat model)"),p5e.forEach(t),_uo=i($),eu=n($,"LI",{});var u5e=s(eu);sne=n(u5e,"STRONG",{});var eQr=s(sne);buo=r(eQr,"van"),eQr.forEach(t),vuo=r(u5e," \u2014 "),bI=n(u5e,"A",{href:!0});var oQr=s(bI);Fuo=r(oQr,"VanModel"),oQr.forEach(t),Tuo=r(u5e," (VAN model)"),u5e.forEach(t),Muo=i($),ou=n($,"LI",{});var _5e=s(ou);lne=n(_5e,"STRONG",{});var rQr=s(lne);Euo=r(rQr,"vilt"),rQr.forEach(t),Cuo=r(_5e," \u2014 "),vI=n(_5e,"A",{href:!0});var tQr=s(vI);wuo=r(tQr,"ViltModel"),tQr.forEach(t),Auo=r(_5e," (ViLT model)"),_5e.forEach(t),yuo=i($),ru=n($,"LI",{});var b5e=s(ru);ine=n(b5e,"STRONG",{});var aQr=s(ine);Luo=r(aQr,"vision-text-dual-encoder"),aQr.forEach(t),xuo=r(b5e," \u2014 "),FI=n(b5e,"A",{href:!0});var nQr=s(FI);$uo=r(nQr,"VisionTextDualEncoderModel"),nQr.forEach(t),kuo=r(b5e," (VisionTextDualEncoder model)"),b5e.forEach(t),Suo=i($),tu=n($,"LI",{});var v5e=s(tu);dne=n(v5e,"STRONG",{});var sQr=s(dne);Ruo=r(sQr,"visual_bert"),sQr.forEach(t),Buo=r(v5e," \u2014 "),TI=n(v5e,"A",{href:!0});var lQr=s(TI);Puo=r(lQr,"VisualBertModel"),lQr.forEach(t),Iuo=r(v5e," (VisualBert model)"),v5e.forEach(t),quo=i($),au=n($,"LI",{});var F5e=s(au);cne=n(F5e,"STRONG",{});var iQr=s(cne);Nuo=r(iQr,"vit"),iQr.forEach(t),juo=r(F5e," \u2014 "),MI=n(F5e,"A",{href:!0});var dQr=s(MI);Duo=r(dQr,"ViTModel"),dQr.forEach(t),Guo=r(F5e," (ViT model)"),F5e.forEach(t),Ouo=i($),nu=n($,"LI",{});var T5e=s(nu);fne=n(T5e,"STRONG",{});var cQr=s(fne);Vuo=r(cQr,"vit_mae"),cQr.forEach(t),Xuo=r(T5e," \u2014 "),EI=n(T5e,"A",{href:!0});var fQr=s(EI);zuo=r(fQr,"ViTMAEModel"),fQr.forEach(t),Quo=r(T5e," (ViTMAE model)"),T5e.forEach(t),Wuo=i($),su=n($,"LI",{});var M5e=s(su);mne=n(M5e,"STRONG",{});var mQr=s(mne);Huo=r(mQr,"wav2vec2"),mQr.forEach(t),Uuo=r(M5e," \u2014 "),CI=n(M5e,"A",{href:!0});var gQr=s(CI);Juo=r(gQr,"Wav2Vec2Model"),gQr.forEach(t),Yuo=r(M5e," (Wav2Vec2 model)"),M5e.forEach(t),Kuo=i($),lu=n($,"LI",{});var E5e=s(lu);gne=n(E5e,"STRONG",{});var hQr=s(gne);Zuo=r(hQr,"wavlm"),hQr.forEach(t),e_o=r(E5e," \u2014 "),wI=n(E5e,"A",{href:!0});var pQr=s(wI);o_o=r(pQr,"WavLMModel"),pQr.forEach(t),r_o=r(E5e," (WavLM model)"),E5e.forEach(t),t_o=i($),iu=n($,"LI",{});var C5e=s(iu);hne=n(C5e,"STRONG",{});var uQr=s(hne);a_o=r(uQr,"xglm"),uQr.forEach(t),n_o=r(C5e," \u2014 "),AI=n(C5e,"A",{href:!0});var _Qr=s(AI);s_o=r(_Qr,"XGLMModel"),_Qr.forEach(t),l_o=r(C5e," (XGLM model)"),C5e.forEach(t),i_o=i($),du=n($,"LI",{});var w5e=s(du);pne=n(w5e,"STRONG",{});var bQr=s(pne);d_o=r(bQr,"xlm"),bQr.forEach(t),c_o=r(w5e," \u2014 "),yI=n(w5e,"A",{href:!0});var vQr=s(yI);f_o=r(vQr,"XLMModel"),vQr.forEach(t),m_o=r(w5e," (XLM model)"),w5e.forEach(t),g_o=i($),cu=n($,"LI",{});var A5e=s(cu);une=n(A5e,"STRONG",{});var FQr=s(une);h_o=r(FQr,"xlm-prophetnet"),FQr.forEach(t),p_o=r(A5e," \u2014 "),LI=n(A5e,"A",{href:!0});var TQr=s(LI);u_o=r(TQr,"XLMProphetNetModel"),TQr.forEach(t),__o=r(A5e," (XLMProphetNet model)"),A5e.forEach(t),b_o=i($),fu=n($,"LI",{});var y5e=s(fu);_ne=n(y5e,"STRONG",{});var MQr=s(_ne);v_o=r(MQr,"xlm-roberta"),MQr.forEach(t),F_o=r(y5e," \u2014 "),xI=n(y5e,"A",{href:!0});var EQr=s(xI);T_o=r(EQr,"XLMRobertaModel"),EQr.forEach(t),M_o=r(y5e," (XLM-RoBERTa model)"),y5e.forEach(t),E_o=i($),mu=n($,"LI",{});var L5e=s(mu);bne=n(L5e,"STRONG",{});var CQr=s(bne);C_o=r(CQr,"xlm-roberta-xl"),CQr.forEach(t),w_o=r(L5e," \u2014 "),$I=n(L5e,"A",{href:!0});var wQr=s($I);A_o=r(wQr,"XLMRobertaXLModel"),wQr.forEach(t),y_o=r(L5e," (XLM-RoBERTa-XL model)"),L5e.forEach(t),L_o=i($),gu=n($,"LI",{});var x5e=s(gu);vne=n(x5e,"STRONG",{});var AQr=s(vne);x_o=r(AQr,"xlnet"),AQr.forEach(t),$_o=r(x5e," \u2014 "),kI=n(x5e,"A",{href:!0});var yQr=s(kI);k_o=r(yQr,"XLNetModel"),yQr.forEach(t),S_o=r(x5e," (XLNet model)"),x5e.forEach(t),R_o=i($),hu=n($,"LI",{});var $5e=s(hu);Fne=n($5e,"STRONG",{});var LQr=s(Fne);B_o=r(LQr,"yoso"),LQr.forEach(t),P_o=r($5e," \u2014 "),SI=n($5e,"A",{href:!0});var xQr=s(SI);I_o=r(xQr,"YosoModel"),xQr.forEach(t),q_o=r($5e," (YOSO model)"),$5e.forEach(t),$.forEach(t),N_o=i(Ut),pu=n(Ut,"P",{});var k5e=s(pu);j_o=r(k5e,"The model is set in evaluation mode by default using "),Tne=n(k5e,"CODE",{});var $Qr=s(Tne);D_o=r($Qr,"model.eval()"),$Qr.forEach(t),G_o=r(k5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=n(k5e,"CODE",{});var kQr=s(Mne);O_o=r(kQr,"model.train()"),kQr.forEach(t),k5e.forEach(t),V_o=i(Ut),T(uu.$$.fragment,Ut),Ut.forEach(t),Ps.forEach(t),QRe=i(f),vi=n(f,"H2",{class:!0});var HPe=s(vi);_u=n(HPe,"A",{id:!0,class:!0,href:!0});var SQr=s(_u);Ene=n(SQr,"SPAN",{});var RQr=s(Ene);T(Q3.$$.fragment,RQr),RQr.forEach(t),SQr.forEach(t),X_o=i(HPe),Cne=n(HPe,"SPAN",{});var BQr=s(Cne);z_o=r(BQr,"AutoModelForPreTraining"),BQr.forEach(t),HPe.forEach(t),WRe=i(f),yo=n(f,"DIV",{class:!0});var Is=s(yo);T(W3.$$.fragment,Is),Q_o=i(Is),Fi=n(Is,"P",{});var KJ=s(Fi);W_o=r(KJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RI=n(KJ,"A",{href:!0});var PQr=s(RI);H_o=r(PQr,"from_pretrained()"),PQr.forEach(t),U_o=r(KJ," class method or the "),BI=n(KJ,"A",{href:!0});var IQr=s(BI);J_o=r(IQr,"from_config()"),IQr.forEach(t),Y_o=r(KJ,` class
method.`),KJ.forEach(t),K_o=i(Is),H3=n(Is,"P",{});var UPe=s(H3);Z_o=r(UPe,"This class cannot be instantiated directly using "),wne=n(UPe,"CODE",{});var qQr=s(wne);e1o=r(qQr,"__init__()"),qQr.forEach(t),o1o=r(UPe," (throws an error)."),UPe.forEach(t),r1o=i(Is),Zr=n(Is,"DIV",{class:!0});var T5=s(Zr);T(U3.$$.fragment,T5),t1o=i(T5),Ane=n(T5,"P",{});var NQr=s(Ane);a1o=r(NQr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NQr.forEach(t),n1o=i(T5),Ti=n(T5,"P",{});var ZJ=s(Ti);s1o=r(ZJ,`Note:
Loading a model from its configuration file does `),yne=n(ZJ,"STRONG",{});var jQr=s(yne);l1o=r(jQr,"not"),jQr.forEach(t),i1o=r(ZJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PI=n(ZJ,"A",{href:!0});var DQr=s(PI);d1o=r(DQr,"from_pretrained()"),DQr.forEach(t),c1o=r(ZJ," to load the model weights."),ZJ.forEach(t),f1o=i(T5),T(bu.$$.fragment,T5),T5.forEach(t),m1o=i(Is),We=n(Is,"DIV",{class:!0});var Jt=s(We);T(J3.$$.fragment,Jt),g1o=i(Jt),Lne=n(Jt,"P",{});var GQr=s(Lne);h1o=r(GQr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GQr.forEach(t),p1o=i(Jt),Ea=n(Jt,"P",{});var M5=s(Ea);u1o=r(M5,"The model class to instantiate is selected based on the "),xne=n(M5,"CODE",{});var OQr=s(xne);_1o=r(OQr,"model_type"),OQr.forEach(t),b1o=r(M5,` property of the config object (either
passed as an argument or loaded from `),$ne=n(M5,"CODE",{});var VQr=s($ne);v1o=r(VQr,"pretrained_model_name_or_path"),VQr.forEach(t),F1o=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=n(M5,"CODE",{});var XQr=s(kne);T1o=r(XQr,"pretrained_model_name_or_path"),XQr.forEach(t),M1o=r(M5,":"),M5.forEach(t),E1o=i(Jt),G=n(Jt,"UL",{});var V=s(G);vu=n(V,"LI",{});var S5e=s(vu);Sne=n(S5e,"STRONG",{});var zQr=s(Sne);C1o=r(zQr,"albert"),zQr.forEach(t),w1o=r(S5e," \u2014 "),II=n(S5e,"A",{href:!0});var QQr=s(II);A1o=r(QQr,"AlbertForPreTraining"),QQr.forEach(t),y1o=r(S5e," (ALBERT model)"),S5e.forEach(t),L1o=i(V),Fu=n(V,"LI",{});var R5e=s(Fu);Rne=n(R5e,"STRONG",{});var WQr=s(Rne);x1o=r(WQr,"bart"),WQr.forEach(t),$1o=r(R5e," \u2014 "),qI=n(R5e,"A",{href:!0});var HQr=s(qI);k1o=r(HQr,"BartForConditionalGeneration"),HQr.forEach(t),S1o=r(R5e," (BART model)"),R5e.forEach(t),R1o=i(V),Tu=n(V,"LI",{});var B5e=s(Tu);Bne=n(B5e,"STRONG",{});var UQr=s(Bne);B1o=r(UQr,"bert"),UQr.forEach(t),P1o=r(B5e," \u2014 "),NI=n(B5e,"A",{href:!0});var JQr=s(NI);I1o=r(JQr,"BertForPreTraining"),JQr.forEach(t),q1o=r(B5e," (BERT model)"),B5e.forEach(t),N1o=i(V),Mu=n(V,"LI",{});var P5e=s(Mu);Pne=n(P5e,"STRONG",{});var YQr=s(Pne);j1o=r(YQr,"big_bird"),YQr.forEach(t),D1o=r(P5e," \u2014 "),jI=n(P5e,"A",{href:!0});var KQr=s(jI);G1o=r(KQr,"BigBirdForPreTraining"),KQr.forEach(t),O1o=r(P5e," (BigBird model)"),P5e.forEach(t),V1o=i(V),Eu=n(V,"LI",{});var I5e=s(Eu);Ine=n(I5e,"STRONG",{});var ZQr=s(Ine);X1o=r(ZQr,"camembert"),ZQr.forEach(t),z1o=r(I5e," \u2014 "),DI=n(I5e,"A",{href:!0});var eWr=s(DI);Q1o=r(eWr,"CamembertForMaskedLM"),eWr.forEach(t),W1o=r(I5e," (CamemBERT model)"),I5e.forEach(t),H1o=i(V),Cu=n(V,"LI",{});var q5e=s(Cu);qne=n(q5e,"STRONG",{});var oWr=s(qne);U1o=r(oWr,"ctrl"),oWr.forEach(t),J1o=r(q5e," \u2014 "),GI=n(q5e,"A",{href:!0});var rWr=s(GI);Y1o=r(rWr,"CTRLLMHeadModel"),rWr.forEach(t),K1o=r(q5e," (CTRL model)"),q5e.forEach(t),Z1o=i(V),wu=n(V,"LI",{});var N5e=s(wu);Nne=n(N5e,"STRONG",{});var tWr=s(Nne);ebo=r(tWr,"data2vec-text"),tWr.forEach(t),obo=r(N5e," \u2014 "),OI=n(N5e,"A",{href:!0});var aWr=s(OI);rbo=r(aWr,"Data2VecTextForMaskedLM"),aWr.forEach(t),tbo=r(N5e," (Data2VecText model)"),N5e.forEach(t),abo=i(V),Au=n(V,"LI",{});var j5e=s(Au);jne=n(j5e,"STRONG",{});var nWr=s(jne);nbo=r(nWr,"deberta"),nWr.forEach(t),sbo=r(j5e," \u2014 "),VI=n(j5e,"A",{href:!0});var sWr=s(VI);lbo=r(sWr,"DebertaForMaskedLM"),sWr.forEach(t),ibo=r(j5e," (DeBERTa model)"),j5e.forEach(t),dbo=i(V),yu=n(V,"LI",{});var D5e=s(yu);Dne=n(D5e,"STRONG",{});var lWr=s(Dne);cbo=r(lWr,"deberta-v2"),lWr.forEach(t),fbo=r(D5e," \u2014 "),XI=n(D5e,"A",{href:!0});var iWr=s(XI);mbo=r(iWr,"DebertaV2ForMaskedLM"),iWr.forEach(t),gbo=r(D5e," (DeBERTa-v2 model)"),D5e.forEach(t),hbo=i(V),Lu=n(V,"LI",{});var G5e=s(Lu);Gne=n(G5e,"STRONG",{});var dWr=s(Gne);pbo=r(dWr,"distilbert"),dWr.forEach(t),ubo=r(G5e," \u2014 "),zI=n(G5e,"A",{href:!0});var cWr=s(zI);_bo=r(cWr,"DistilBertForMaskedLM"),cWr.forEach(t),bbo=r(G5e," (DistilBERT model)"),G5e.forEach(t),vbo=i(V),xu=n(V,"LI",{});var O5e=s(xu);One=n(O5e,"STRONG",{});var fWr=s(One);Fbo=r(fWr,"electra"),fWr.forEach(t),Tbo=r(O5e," \u2014 "),QI=n(O5e,"A",{href:!0});var mWr=s(QI);Mbo=r(mWr,"ElectraForPreTraining"),mWr.forEach(t),Ebo=r(O5e," (ELECTRA model)"),O5e.forEach(t),Cbo=i(V),$u=n(V,"LI",{});var V5e=s($u);Vne=n(V5e,"STRONG",{});var gWr=s(Vne);wbo=r(gWr,"flaubert"),gWr.forEach(t),Abo=r(V5e," \u2014 "),WI=n(V5e,"A",{href:!0});var hWr=s(WI);ybo=r(hWr,"FlaubertWithLMHeadModel"),hWr.forEach(t),Lbo=r(V5e," (FlauBERT model)"),V5e.forEach(t),xbo=i(V),ku=n(V,"LI",{});var X5e=s(ku);Xne=n(X5e,"STRONG",{});var pWr=s(Xne);$bo=r(pWr,"fnet"),pWr.forEach(t),kbo=r(X5e," \u2014 "),HI=n(X5e,"A",{href:!0});var uWr=s(HI);Sbo=r(uWr,"FNetForPreTraining"),uWr.forEach(t),Rbo=r(X5e," (FNet model)"),X5e.forEach(t),Bbo=i(V),Su=n(V,"LI",{});var z5e=s(Su);zne=n(z5e,"STRONG",{});var _Wr=s(zne);Pbo=r(_Wr,"fsmt"),_Wr.forEach(t),Ibo=r(z5e," \u2014 "),UI=n(z5e,"A",{href:!0});var bWr=s(UI);qbo=r(bWr,"FSMTForConditionalGeneration"),bWr.forEach(t),Nbo=r(z5e," (FairSeq Machine-Translation model)"),z5e.forEach(t),jbo=i(V),Ru=n(V,"LI",{});var Q5e=s(Ru);Qne=n(Q5e,"STRONG",{});var vWr=s(Qne);Dbo=r(vWr,"funnel"),vWr.forEach(t),Gbo=r(Q5e," \u2014 "),JI=n(Q5e,"A",{href:!0});var FWr=s(JI);Obo=r(FWr,"FunnelForPreTraining"),FWr.forEach(t),Vbo=r(Q5e," (Funnel Transformer model)"),Q5e.forEach(t),Xbo=i(V),Bu=n(V,"LI",{});var W5e=s(Bu);Wne=n(W5e,"STRONG",{});var TWr=s(Wne);zbo=r(TWr,"gpt2"),TWr.forEach(t),Qbo=r(W5e," \u2014 "),YI=n(W5e,"A",{href:!0});var MWr=s(YI);Wbo=r(MWr,"GPT2LMHeadModel"),MWr.forEach(t),Hbo=r(W5e," (OpenAI GPT-2 model)"),W5e.forEach(t),Ubo=i(V),Pu=n(V,"LI",{});var H5e=s(Pu);Hne=n(H5e,"STRONG",{});var EWr=s(Hne);Jbo=r(EWr,"ibert"),EWr.forEach(t),Ybo=r(H5e," \u2014 "),KI=n(H5e,"A",{href:!0});var CWr=s(KI);Kbo=r(CWr,"IBertForMaskedLM"),CWr.forEach(t),Zbo=r(H5e," (I-BERT model)"),H5e.forEach(t),e2o=i(V),Iu=n(V,"LI",{});var U5e=s(Iu);Une=n(U5e,"STRONG",{});var wWr=s(Une);o2o=r(wWr,"layoutlm"),wWr.forEach(t),r2o=r(U5e," \u2014 "),ZI=n(U5e,"A",{href:!0});var AWr=s(ZI);t2o=r(AWr,"LayoutLMForMaskedLM"),AWr.forEach(t),a2o=r(U5e," (LayoutLM model)"),U5e.forEach(t),n2o=i(V),qu=n(V,"LI",{});var J5e=s(qu);Jne=n(J5e,"STRONG",{});var yWr=s(Jne);s2o=r(yWr,"longformer"),yWr.forEach(t),l2o=r(J5e," \u2014 "),eq=n(J5e,"A",{href:!0});var LWr=s(eq);i2o=r(LWr,"LongformerForMaskedLM"),LWr.forEach(t),d2o=r(J5e," (Longformer model)"),J5e.forEach(t),c2o=i(V),Nu=n(V,"LI",{});var Y5e=s(Nu);Yne=n(Y5e,"STRONG",{});var xWr=s(Yne);f2o=r(xWr,"lxmert"),xWr.forEach(t),m2o=r(Y5e," \u2014 "),oq=n(Y5e,"A",{href:!0});var $Wr=s(oq);g2o=r($Wr,"LxmertForPreTraining"),$Wr.forEach(t),h2o=r(Y5e," (LXMERT model)"),Y5e.forEach(t),p2o=i(V),ju=n(V,"LI",{});var K5e=s(ju);Kne=n(K5e,"STRONG",{});var kWr=s(Kne);u2o=r(kWr,"megatron-bert"),kWr.forEach(t),_2o=r(K5e," \u2014 "),rq=n(K5e,"A",{href:!0});var SWr=s(rq);b2o=r(SWr,"MegatronBertForPreTraining"),SWr.forEach(t),v2o=r(K5e," (MegatronBert model)"),K5e.forEach(t),F2o=i(V),Du=n(V,"LI",{});var Z5e=s(Du);Zne=n(Z5e,"STRONG",{});var RWr=s(Zne);T2o=r(RWr,"mobilebert"),RWr.forEach(t),M2o=r(Z5e," \u2014 "),tq=n(Z5e,"A",{href:!0});var BWr=s(tq);E2o=r(BWr,"MobileBertForPreTraining"),BWr.forEach(t),C2o=r(Z5e," (MobileBERT model)"),Z5e.forEach(t),w2o=i(V),Gu=n(V,"LI",{});var eCe=s(Gu);ese=n(eCe,"STRONG",{});var PWr=s(ese);A2o=r(PWr,"mpnet"),PWr.forEach(t),y2o=r(eCe," \u2014 "),aq=n(eCe,"A",{href:!0});var IWr=s(aq);L2o=r(IWr,"MPNetForMaskedLM"),IWr.forEach(t),x2o=r(eCe," (MPNet model)"),eCe.forEach(t),$2o=i(V),Ou=n(V,"LI",{});var oCe=s(Ou);ose=n(oCe,"STRONG",{});var qWr=s(ose);k2o=r(qWr,"openai-gpt"),qWr.forEach(t),S2o=r(oCe," \u2014 "),nq=n(oCe,"A",{href:!0});var NWr=s(nq);R2o=r(NWr,"OpenAIGPTLMHeadModel"),NWr.forEach(t),B2o=r(oCe," (OpenAI GPT model)"),oCe.forEach(t),P2o=i(V),Vu=n(V,"LI",{});var rCe=s(Vu);rse=n(rCe,"STRONG",{});var jWr=s(rse);I2o=r(jWr,"retribert"),jWr.forEach(t),q2o=r(rCe," \u2014 "),sq=n(rCe,"A",{href:!0});var DWr=s(sq);N2o=r(DWr,"RetriBertModel"),DWr.forEach(t),j2o=r(rCe," (RetriBERT model)"),rCe.forEach(t),D2o=i(V),Xu=n(V,"LI",{});var tCe=s(Xu);tse=n(tCe,"STRONG",{});var GWr=s(tse);G2o=r(GWr,"roberta"),GWr.forEach(t),O2o=r(tCe," \u2014 "),lq=n(tCe,"A",{href:!0});var OWr=s(lq);V2o=r(OWr,"RobertaForMaskedLM"),OWr.forEach(t),X2o=r(tCe," (RoBERTa model)"),tCe.forEach(t),z2o=i(V),zu=n(V,"LI",{});var aCe=s(zu);ase=n(aCe,"STRONG",{});var VWr=s(ase);Q2o=r(VWr,"squeezebert"),VWr.forEach(t),W2o=r(aCe," \u2014 "),iq=n(aCe,"A",{href:!0});var XWr=s(iq);H2o=r(XWr,"SqueezeBertForMaskedLM"),XWr.forEach(t),U2o=r(aCe," (SqueezeBERT model)"),aCe.forEach(t),J2o=i(V),Qu=n(V,"LI",{});var nCe=s(Qu);nse=n(nCe,"STRONG",{});var zWr=s(nse);Y2o=r(zWr,"t5"),zWr.forEach(t),K2o=r(nCe," \u2014 "),dq=n(nCe,"A",{href:!0});var QWr=s(dq);Z2o=r(QWr,"T5ForConditionalGeneration"),QWr.forEach(t),evo=r(nCe," (T5 model)"),nCe.forEach(t),ovo=i(V),Wu=n(V,"LI",{});var sCe=s(Wu);sse=n(sCe,"STRONG",{});var WWr=s(sse);rvo=r(WWr,"tapas"),WWr.forEach(t),tvo=r(sCe," \u2014 "),cq=n(sCe,"A",{href:!0});var HWr=s(cq);avo=r(HWr,"TapasForMaskedLM"),HWr.forEach(t),nvo=r(sCe," (TAPAS model)"),sCe.forEach(t),svo=i(V),Hu=n(V,"LI",{});var lCe=s(Hu);lse=n(lCe,"STRONG",{});var UWr=s(lse);lvo=r(UWr,"transfo-xl"),UWr.forEach(t),ivo=r(lCe," \u2014 "),fq=n(lCe,"A",{href:!0});var JWr=s(fq);dvo=r(JWr,"TransfoXLLMHeadModel"),JWr.forEach(t),cvo=r(lCe," (Transformer-XL model)"),lCe.forEach(t),fvo=i(V),Uu=n(V,"LI",{});var iCe=s(Uu);ise=n(iCe,"STRONG",{});var YWr=s(ise);mvo=r(YWr,"unispeech"),YWr.forEach(t),gvo=r(iCe," \u2014 "),mq=n(iCe,"A",{href:!0});var KWr=s(mq);hvo=r(KWr,"UniSpeechForPreTraining"),KWr.forEach(t),pvo=r(iCe," (UniSpeech model)"),iCe.forEach(t),uvo=i(V),Ju=n(V,"LI",{});var dCe=s(Ju);dse=n(dCe,"STRONG",{});var ZWr=s(dse);_vo=r(ZWr,"unispeech-sat"),ZWr.forEach(t),bvo=r(dCe," \u2014 "),gq=n(dCe,"A",{href:!0});var eHr=s(gq);vvo=r(eHr,"UniSpeechSatForPreTraining"),eHr.forEach(t),Fvo=r(dCe," (UniSpeechSat model)"),dCe.forEach(t),Tvo=i(V),Yu=n(V,"LI",{});var cCe=s(Yu);cse=n(cCe,"STRONG",{});var oHr=s(cse);Mvo=r(oHr,"visual_bert"),oHr.forEach(t),Evo=r(cCe," \u2014 "),hq=n(cCe,"A",{href:!0});var rHr=s(hq);Cvo=r(rHr,"VisualBertForPreTraining"),rHr.forEach(t),wvo=r(cCe," (VisualBert model)"),cCe.forEach(t),Avo=i(V),Ku=n(V,"LI",{});var fCe=s(Ku);fse=n(fCe,"STRONG",{});var tHr=s(fse);yvo=r(tHr,"vit_mae"),tHr.forEach(t),Lvo=r(fCe," \u2014 "),pq=n(fCe,"A",{href:!0});var aHr=s(pq);xvo=r(aHr,"ViTMAEForPreTraining"),aHr.forEach(t),$vo=r(fCe," (ViTMAE model)"),fCe.forEach(t),kvo=i(V),Zu=n(V,"LI",{});var mCe=s(Zu);mse=n(mCe,"STRONG",{});var nHr=s(mse);Svo=r(nHr,"wav2vec2"),nHr.forEach(t),Rvo=r(mCe," \u2014 "),uq=n(mCe,"A",{href:!0});var sHr=s(uq);Bvo=r(sHr,"Wav2Vec2ForPreTraining"),sHr.forEach(t),Pvo=r(mCe," (Wav2Vec2 model)"),mCe.forEach(t),Ivo=i(V),e_=n(V,"LI",{});var gCe=s(e_);gse=n(gCe,"STRONG",{});var lHr=s(gse);qvo=r(lHr,"xlm"),lHr.forEach(t),Nvo=r(gCe," \u2014 "),_q=n(gCe,"A",{href:!0});var iHr=s(_q);jvo=r(iHr,"XLMWithLMHeadModel"),iHr.forEach(t),Dvo=r(gCe," (XLM model)"),gCe.forEach(t),Gvo=i(V),o_=n(V,"LI",{});var hCe=s(o_);hse=n(hCe,"STRONG",{});var dHr=s(hse);Ovo=r(dHr,"xlm-roberta"),dHr.forEach(t),Vvo=r(hCe," \u2014 "),bq=n(hCe,"A",{href:!0});var cHr=s(bq);Xvo=r(cHr,"XLMRobertaForMaskedLM"),cHr.forEach(t),zvo=r(hCe," (XLM-RoBERTa model)"),hCe.forEach(t),Qvo=i(V),r_=n(V,"LI",{});var pCe=s(r_);pse=n(pCe,"STRONG",{});var fHr=s(pse);Wvo=r(fHr,"xlm-roberta-xl"),fHr.forEach(t),Hvo=r(pCe," \u2014 "),vq=n(pCe,"A",{href:!0});var mHr=s(vq);Uvo=r(mHr,"XLMRobertaXLForMaskedLM"),mHr.forEach(t),Jvo=r(pCe," (XLM-RoBERTa-XL model)"),pCe.forEach(t),Yvo=i(V),t_=n(V,"LI",{});var uCe=s(t_);use=n(uCe,"STRONG",{});var gHr=s(use);Kvo=r(gHr,"xlnet"),gHr.forEach(t),Zvo=r(uCe," \u2014 "),Fq=n(uCe,"A",{href:!0});var hHr=s(Fq);eFo=r(hHr,"XLNetLMHeadModel"),hHr.forEach(t),oFo=r(uCe," (XLNet model)"),uCe.forEach(t),V.forEach(t),rFo=i(Jt),a_=n(Jt,"P",{});var _Ce=s(a_);tFo=r(_Ce,"The model is set in evaluation mode by default using "),_se=n(_Ce,"CODE",{});var pHr=s(_se);aFo=r(pHr,"model.eval()"),pHr.forEach(t),nFo=r(_Ce,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bse=n(_Ce,"CODE",{});var uHr=s(bse);sFo=r(uHr,"model.train()"),uHr.forEach(t),_Ce.forEach(t),lFo=i(Jt),T(n_.$$.fragment,Jt),Jt.forEach(t),Is.forEach(t),HRe=i(f),Mi=n(f,"H2",{class:!0});var JPe=s(Mi);s_=n(JPe,"A",{id:!0,class:!0,href:!0});var _Hr=s(s_);vse=n(_Hr,"SPAN",{});var bHr=s(vse);T(Y3.$$.fragment,bHr),bHr.forEach(t),_Hr.forEach(t),iFo=i(JPe),Fse=n(JPe,"SPAN",{});var vHr=s(Fse);dFo=r(vHr,"AutoModelForCausalLM"),vHr.forEach(t),JPe.forEach(t),URe=i(f),Lo=n(f,"DIV",{class:!0});var qs=s(Lo);T(K3.$$.fragment,qs),cFo=i(qs),Ei=n(qs,"P",{});var eY=s(Ei);fFo=r(eY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Tq=n(eY,"A",{href:!0});var FHr=s(Tq);mFo=r(FHr,"from_pretrained()"),FHr.forEach(t),gFo=r(eY," class method or the "),Mq=n(eY,"A",{href:!0});var THr=s(Mq);hFo=r(THr,"from_config()"),THr.forEach(t),pFo=r(eY,` class
method.`),eY.forEach(t),uFo=i(qs),Z3=n(qs,"P",{});var YPe=s(Z3);_Fo=r(YPe,"This class cannot be instantiated directly using "),Tse=n(YPe,"CODE",{});var MHr=s(Tse);bFo=r(MHr,"__init__()"),MHr.forEach(t),vFo=r(YPe," (throws an error)."),YPe.forEach(t),FFo=i(qs),et=n(qs,"DIV",{class:!0});var E5=s(et);T(ew.$$.fragment,E5),TFo=i(E5),Mse=n(E5,"P",{});var EHr=s(Mse);MFo=r(EHr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EHr.forEach(t),EFo=i(E5),Ci=n(E5,"P",{});var oY=s(Ci);CFo=r(oY,`Note:
Loading a model from its configuration file does `),Ese=n(oY,"STRONG",{});var CHr=s(Ese);wFo=r(CHr,"not"),CHr.forEach(t),AFo=r(oY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eq=n(oY,"A",{href:!0});var wHr=s(Eq);yFo=r(wHr,"from_pretrained()"),wHr.forEach(t),LFo=r(oY," to load the model weights."),oY.forEach(t),xFo=i(E5),T(l_.$$.fragment,E5),E5.forEach(t),$Fo=i(qs),He=n(qs,"DIV",{class:!0});var Yt=s(He);T(ow.$$.fragment,Yt),kFo=i(Yt),Cse=n(Yt,"P",{});var AHr=s(Cse);SFo=r(AHr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AHr.forEach(t),RFo=i(Yt),Ca=n(Yt,"P",{});var C5=s(Ca);BFo=r(C5,"The model class to instantiate is selected based on the "),wse=n(C5,"CODE",{});var yHr=s(wse);PFo=r(yHr,"model_type"),yHr.forEach(t),IFo=r(C5,` property of the config object (either
passed as an argument or loaded from `),Ase=n(C5,"CODE",{});var LHr=s(Ase);qFo=r(LHr,"pretrained_model_name_or_path"),LHr.forEach(t),NFo=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=n(C5,"CODE",{});var xHr=s(yse);jFo=r(xHr,"pretrained_model_name_or_path"),xHr.forEach(t),DFo=r(C5,":"),C5.forEach(t),GFo=i(Yt),z=n(Yt,"UL",{});var W=s(z);i_=n(W,"LI",{});var bCe=s(i_);Lse=n(bCe,"STRONG",{});var $Hr=s(Lse);OFo=r($Hr,"bart"),$Hr.forEach(t),VFo=r(bCe," \u2014 "),Cq=n(bCe,"A",{href:!0});var kHr=s(Cq);XFo=r(kHr,"BartForCausalLM"),kHr.forEach(t),zFo=r(bCe," (BART model)"),bCe.forEach(t),QFo=i(W),d_=n(W,"LI",{});var vCe=s(d_);xse=n(vCe,"STRONG",{});var SHr=s(xse);WFo=r(SHr,"bert"),SHr.forEach(t),HFo=r(vCe," \u2014 "),wq=n(vCe,"A",{href:!0});var RHr=s(wq);UFo=r(RHr,"BertLMHeadModel"),RHr.forEach(t),JFo=r(vCe," (BERT model)"),vCe.forEach(t),YFo=i(W),c_=n(W,"LI",{});var FCe=s(c_);$se=n(FCe,"STRONG",{});var BHr=s($se);KFo=r(BHr,"bert-generation"),BHr.forEach(t),ZFo=r(FCe," \u2014 "),Aq=n(FCe,"A",{href:!0});var PHr=s(Aq);e0o=r(PHr,"BertGenerationDecoder"),PHr.forEach(t),o0o=r(FCe," (Bert Generation model)"),FCe.forEach(t),r0o=i(W),f_=n(W,"LI",{});var TCe=s(f_);kse=n(TCe,"STRONG",{});var IHr=s(kse);t0o=r(IHr,"big_bird"),IHr.forEach(t),a0o=r(TCe," \u2014 "),yq=n(TCe,"A",{href:!0});var qHr=s(yq);n0o=r(qHr,"BigBirdForCausalLM"),qHr.forEach(t),s0o=r(TCe," (BigBird model)"),TCe.forEach(t),l0o=i(W),m_=n(W,"LI",{});var MCe=s(m_);Sse=n(MCe,"STRONG",{});var NHr=s(Sse);i0o=r(NHr,"bigbird_pegasus"),NHr.forEach(t),d0o=r(MCe," \u2014 "),Lq=n(MCe,"A",{href:!0});var jHr=s(Lq);c0o=r(jHr,"BigBirdPegasusForCausalLM"),jHr.forEach(t),f0o=r(MCe," (BigBirdPegasus model)"),MCe.forEach(t),m0o=i(W),g_=n(W,"LI",{});var ECe=s(g_);Rse=n(ECe,"STRONG",{});var DHr=s(Rse);g0o=r(DHr,"blenderbot"),DHr.forEach(t),h0o=r(ECe," \u2014 "),xq=n(ECe,"A",{href:!0});var GHr=s(xq);p0o=r(GHr,"BlenderbotForCausalLM"),GHr.forEach(t),u0o=r(ECe," (Blenderbot model)"),ECe.forEach(t),_0o=i(W),h_=n(W,"LI",{});var CCe=s(h_);Bse=n(CCe,"STRONG",{});var OHr=s(Bse);b0o=r(OHr,"blenderbot-small"),OHr.forEach(t),v0o=r(CCe," \u2014 "),$q=n(CCe,"A",{href:!0});var VHr=s($q);F0o=r(VHr,"BlenderbotSmallForCausalLM"),VHr.forEach(t),T0o=r(CCe," (BlenderbotSmall model)"),CCe.forEach(t),M0o=i(W),p_=n(W,"LI",{});var wCe=s(p_);Pse=n(wCe,"STRONG",{});var XHr=s(Pse);E0o=r(XHr,"camembert"),XHr.forEach(t),C0o=r(wCe," \u2014 "),kq=n(wCe,"A",{href:!0});var zHr=s(kq);w0o=r(zHr,"CamembertForCausalLM"),zHr.forEach(t),A0o=r(wCe," (CamemBERT model)"),wCe.forEach(t),y0o=i(W),u_=n(W,"LI",{});var ACe=s(u_);Ise=n(ACe,"STRONG",{});var QHr=s(Ise);L0o=r(QHr,"ctrl"),QHr.forEach(t),x0o=r(ACe," \u2014 "),Sq=n(ACe,"A",{href:!0});var WHr=s(Sq);$0o=r(WHr,"CTRLLMHeadModel"),WHr.forEach(t),k0o=r(ACe," (CTRL model)"),ACe.forEach(t),S0o=i(W),__=n(W,"LI",{});var yCe=s(__);qse=n(yCe,"STRONG",{});var HHr=s(qse);R0o=r(HHr,"data2vec-text"),HHr.forEach(t),B0o=r(yCe," \u2014 "),Rq=n(yCe,"A",{href:!0});var UHr=s(Rq);P0o=r(UHr,"Data2VecTextForCausalLM"),UHr.forEach(t),I0o=r(yCe," (Data2VecText model)"),yCe.forEach(t),q0o=i(W),b_=n(W,"LI",{});var LCe=s(b_);Nse=n(LCe,"STRONG",{});var JHr=s(Nse);N0o=r(JHr,"electra"),JHr.forEach(t),j0o=r(LCe," \u2014 "),Bq=n(LCe,"A",{href:!0});var YHr=s(Bq);D0o=r(YHr,"ElectraForCausalLM"),YHr.forEach(t),G0o=r(LCe," (ELECTRA model)"),LCe.forEach(t),O0o=i(W),v_=n(W,"LI",{});var xCe=s(v_);jse=n(xCe,"STRONG",{});var KHr=s(jse);V0o=r(KHr,"gpt2"),KHr.forEach(t),X0o=r(xCe," \u2014 "),Pq=n(xCe,"A",{href:!0});var ZHr=s(Pq);z0o=r(ZHr,"GPT2LMHeadModel"),ZHr.forEach(t),Q0o=r(xCe," (OpenAI GPT-2 model)"),xCe.forEach(t),W0o=i(W),F_=n(W,"LI",{});var $Ce=s(F_);Dse=n($Ce,"STRONG",{});var eUr=s(Dse);H0o=r(eUr,"gpt_neo"),eUr.forEach(t),U0o=r($Ce," \u2014 "),Iq=n($Ce,"A",{href:!0});var oUr=s(Iq);J0o=r(oUr,"GPTNeoForCausalLM"),oUr.forEach(t),Y0o=r($Ce," (GPT Neo model)"),$Ce.forEach(t),K0o=i(W),T_=n(W,"LI",{});var kCe=s(T_);Gse=n(kCe,"STRONG",{});var rUr=s(Gse);Z0o=r(rUr,"gptj"),rUr.forEach(t),e6o=r(kCe," \u2014 "),qq=n(kCe,"A",{href:!0});var tUr=s(qq);o6o=r(tUr,"GPTJForCausalLM"),tUr.forEach(t),r6o=r(kCe," (GPT-J model)"),kCe.forEach(t),t6o=i(W),M_=n(W,"LI",{});var SCe=s(M_);Ose=n(SCe,"STRONG",{});var aUr=s(Ose);a6o=r(aUr,"marian"),aUr.forEach(t),n6o=r(SCe," \u2014 "),Nq=n(SCe,"A",{href:!0});var nUr=s(Nq);s6o=r(nUr,"MarianForCausalLM"),nUr.forEach(t),l6o=r(SCe," (Marian model)"),SCe.forEach(t),i6o=i(W),E_=n(W,"LI",{});var RCe=s(E_);Vse=n(RCe,"STRONG",{});var sUr=s(Vse);d6o=r(sUr,"mbart"),sUr.forEach(t),c6o=r(RCe," \u2014 "),jq=n(RCe,"A",{href:!0});var lUr=s(jq);f6o=r(lUr,"MBartForCausalLM"),lUr.forEach(t),m6o=r(RCe," (mBART model)"),RCe.forEach(t),g6o=i(W),C_=n(W,"LI",{});var BCe=s(C_);Xse=n(BCe,"STRONG",{});var iUr=s(Xse);h6o=r(iUr,"megatron-bert"),iUr.forEach(t),p6o=r(BCe," \u2014 "),Dq=n(BCe,"A",{href:!0});var dUr=s(Dq);u6o=r(dUr,"MegatronBertForCausalLM"),dUr.forEach(t),_6o=r(BCe," (MegatronBert model)"),BCe.forEach(t),b6o=i(W),w_=n(W,"LI",{});var PCe=s(w_);zse=n(PCe,"STRONG",{});var cUr=s(zse);v6o=r(cUr,"openai-gpt"),cUr.forEach(t),F6o=r(PCe," \u2014 "),Gq=n(PCe,"A",{href:!0});var fUr=s(Gq);T6o=r(fUr,"OpenAIGPTLMHeadModel"),fUr.forEach(t),M6o=r(PCe," (OpenAI GPT model)"),PCe.forEach(t),E6o=i(W),A_=n(W,"LI",{});var ICe=s(A_);Qse=n(ICe,"STRONG",{});var mUr=s(Qse);C6o=r(mUr,"pegasus"),mUr.forEach(t),w6o=r(ICe," \u2014 "),Oq=n(ICe,"A",{href:!0});var gUr=s(Oq);A6o=r(gUr,"PegasusForCausalLM"),gUr.forEach(t),y6o=r(ICe," (Pegasus model)"),ICe.forEach(t),L6o=i(W),y_=n(W,"LI",{});var qCe=s(y_);Wse=n(qCe,"STRONG",{});var hUr=s(Wse);x6o=r(hUr,"plbart"),hUr.forEach(t),$6o=r(qCe," \u2014 "),Vq=n(qCe,"A",{href:!0});var pUr=s(Vq);k6o=r(pUr,"PLBartForCausalLM"),pUr.forEach(t),S6o=r(qCe," (PLBart model)"),qCe.forEach(t),R6o=i(W),L_=n(W,"LI",{});var NCe=s(L_);Hse=n(NCe,"STRONG",{});var uUr=s(Hse);B6o=r(uUr,"prophetnet"),uUr.forEach(t),P6o=r(NCe," \u2014 "),Xq=n(NCe,"A",{href:!0});var _Ur=s(Xq);I6o=r(_Ur,"ProphetNetForCausalLM"),_Ur.forEach(t),q6o=r(NCe," (ProphetNet model)"),NCe.forEach(t),N6o=i(W),x_=n(W,"LI",{});var jCe=s(x_);Use=n(jCe,"STRONG",{});var bUr=s(Use);j6o=r(bUr,"qdqbert"),bUr.forEach(t),D6o=r(jCe," \u2014 "),zq=n(jCe,"A",{href:!0});var vUr=s(zq);G6o=r(vUr,"QDQBertLMHeadModel"),vUr.forEach(t),O6o=r(jCe," (QDQBert model)"),jCe.forEach(t),V6o=i(W),$_=n(W,"LI",{});var DCe=s($_);Jse=n(DCe,"STRONG",{});var FUr=s(Jse);X6o=r(FUr,"reformer"),FUr.forEach(t),z6o=r(DCe," \u2014 "),Qq=n(DCe,"A",{href:!0});var TUr=s(Qq);Q6o=r(TUr,"ReformerModelWithLMHead"),TUr.forEach(t),W6o=r(DCe," (Reformer model)"),DCe.forEach(t),H6o=i(W),k_=n(W,"LI",{});var GCe=s(k_);Yse=n(GCe,"STRONG",{});var MUr=s(Yse);U6o=r(MUr,"rembert"),MUr.forEach(t),J6o=r(GCe," \u2014 "),Wq=n(GCe,"A",{href:!0});var EUr=s(Wq);Y6o=r(EUr,"RemBertForCausalLM"),EUr.forEach(t),K6o=r(GCe," (RemBERT model)"),GCe.forEach(t),Z6o=i(W),S_=n(W,"LI",{});var OCe=s(S_);Kse=n(OCe,"STRONG",{});var CUr=s(Kse);eTo=r(CUr,"roberta"),CUr.forEach(t),oTo=r(OCe," \u2014 "),Hq=n(OCe,"A",{href:!0});var wUr=s(Hq);rTo=r(wUr,"RobertaForCausalLM"),wUr.forEach(t),tTo=r(OCe," (RoBERTa model)"),OCe.forEach(t),aTo=i(W),R_=n(W,"LI",{});var VCe=s(R_);Zse=n(VCe,"STRONG",{});var AUr=s(Zse);nTo=r(AUr,"roformer"),AUr.forEach(t),sTo=r(VCe," \u2014 "),Uq=n(VCe,"A",{href:!0});var yUr=s(Uq);lTo=r(yUr,"RoFormerForCausalLM"),yUr.forEach(t),iTo=r(VCe," (RoFormer model)"),VCe.forEach(t),dTo=i(W),B_=n(W,"LI",{});var XCe=s(B_);ele=n(XCe,"STRONG",{});var LUr=s(ele);cTo=r(LUr,"speech_to_text_2"),LUr.forEach(t),fTo=r(XCe," \u2014 "),Jq=n(XCe,"A",{href:!0});var xUr=s(Jq);mTo=r(xUr,"Speech2Text2ForCausalLM"),xUr.forEach(t),gTo=r(XCe," (Speech2Text2 model)"),XCe.forEach(t),hTo=i(W),P_=n(W,"LI",{});var zCe=s(P_);ole=n(zCe,"STRONG",{});var $Ur=s(ole);pTo=r($Ur,"transfo-xl"),$Ur.forEach(t),uTo=r(zCe," \u2014 "),Yq=n(zCe,"A",{href:!0});var kUr=s(Yq);_To=r(kUr,"TransfoXLLMHeadModel"),kUr.forEach(t),bTo=r(zCe," (Transformer-XL model)"),zCe.forEach(t),vTo=i(W),I_=n(W,"LI",{});var QCe=s(I_);rle=n(QCe,"STRONG",{});var SUr=s(rle);FTo=r(SUr,"trocr"),SUr.forEach(t),TTo=r(QCe," \u2014 "),Kq=n(QCe,"A",{href:!0});var RUr=s(Kq);MTo=r(RUr,"TrOCRForCausalLM"),RUr.forEach(t),ETo=r(QCe," (TrOCR model)"),QCe.forEach(t),CTo=i(W),q_=n(W,"LI",{});var WCe=s(q_);tle=n(WCe,"STRONG",{});var BUr=s(tle);wTo=r(BUr,"xglm"),BUr.forEach(t),ATo=r(WCe," \u2014 "),Zq=n(WCe,"A",{href:!0});var PUr=s(Zq);yTo=r(PUr,"XGLMForCausalLM"),PUr.forEach(t),LTo=r(WCe," (XGLM model)"),WCe.forEach(t),xTo=i(W),N_=n(W,"LI",{});var HCe=s(N_);ale=n(HCe,"STRONG",{});var IUr=s(ale);$To=r(IUr,"xlm"),IUr.forEach(t),kTo=r(HCe," \u2014 "),eN=n(HCe,"A",{href:!0});var qUr=s(eN);STo=r(qUr,"XLMWithLMHeadModel"),qUr.forEach(t),RTo=r(HCe," (XLM model)"),HCe.forEach(t),BTo=i(W),j_=n(W,"LI",{});var UCe=s(j_);nle=n(UCe,"STRONG",{});var NUr=s(nle);PTo=r(NUr,"xlm-prophetnet"),NUr.forEach(t),ITo=r(UCe," \u2014 "),oN=n(UCe,"A",{href:!0});var jUr=s(oN);qTo=r(jUr,"XLMProphetNetForCausalLM"),jUr.forEach(t),NTo=r(UCe," (XLMProphetNet model)"),UCe.forEach(t),jTo=i(W),D_=n(W,"LI",{});var JCe=s(D_);sle=n(JCe,"STRONG",{});var DUr=s(sle);DTo=r(DUr,"xlm-roberta"),DUr.forEach(t),GTo=r(JCe," \u2014 "),rN=n(JCe,"A",{href:!0});var GUr=s(rN);OTo=r(GUr,"XLMRobertaForCausalLM"),GUr.forEach(t),VTo=r(JCe," (XLM-RoBERTa model)"),JCe.forEach(t),XTo=i(W),G_=n(W,"LI",{});var YCe=s(G_);lle=n(YCe,"STRONG",{});var OUr=s(lle);zTo=r(OUr,"xlm-roberta-xl"),OUr.forEach(t),QTo=r(YCe," \u2014 "),tN=n(YCe,"A",{href:!0});var VUr=s(tN);WTo=r(VUr,"XLMRobertaXLForCausalLM"),VUr.forEach(t),HTo=r(YCe," (XLM-RoBERTa-XL model)"),YCe.forEach(t),UTo=i(W),O_=n(W,"LI",{});var KCe=s(O_);ile=n(KCe,"STRONG",{});var XUr=s(ile);JTo=r(XUr,"xlnet"),XUr.forEach(t),YTo=r(KCe," \u2014 "),aN=n(KCe,"A",{href:!0});var zUr=s(aN);KTo=r(zUr,"XLNetLMHeadModel"),zUr.forEach(t),ZTo=r(KCe," (XLNet model)"),KCe.forEach(t),W.forEach(t),e8o=i(Yt),V_=n(Yt,"P",{});var ZCe=s(V_);o8o=r(ZCe,"The model is set in evaluation mode by default using "),dle=n(ZCe,"CODE",{});var QUr=s(dle);r8o=r(QUr,"model.eval()"),QUr.forEach(t),t8o=r(ZCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cle=n(ZCe,"CODE",{});var WUr=s(cle);a8o=r(WUr,"model.train()"),WUr.forEach(t),ZCe.forEach(t),n8o=i(Yt),T(X_.$$.fragment,Yt),Yt.forEach(t),qs.forEach(t),JRe=i(f),wi=n(f,"H2",{class:!0});var KPe=s(wi);z_=n(KPe,"A",{id:!0,class:!0,href:!0});var HUr=s(z_);fle=n(HUr,"SPAN",{});var UUr=s(fle);T(rw.$$.fragment,UUr),UUr.forEach(t),HUr.forEach(t),s8o=i(KPe),mle=n(KPe,"SPAN",{});var JUr=s(mle);l8o=r(JUr,"AutoModelForMaskedLM"),JUr.forEach(t),KPe.forEach(t),YRe=i(f),xo=n(f,"DIV",{class:!0});var Ns=s(xo);T(tw.$$.fragment,Ns),i8o=i(Ns),Ai=n(Ns,"P",{});var rY=s(Ai);d8o=r(rY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nN=n(rY,"A",{href:!0});var YUr=s(nN);c8o=r(YUr,"from_pretrained()"),YUr.forEach(t),f8o=r(rY," class method or the "),sN=n(rY,"A",{href:!0});var KUr=s(sN);m8o=r(KUr,"from_config()"),KUr.forEach(t),g8o=r(rY,` class
method.`),rY.forEach(t),h8o=i(Ns),aw=n(Ns,"P",{});var ZPe=s(aw);p8o=r(ZPe,"This class cannot be instantiated directly using "),gle=n(ZPe,"CODE",{});var ZUr=s(gle);u8o=r(ZUr,"__init__()"),ZUr.forEach(t),_8o=r(ZPe," (throws an error)."),ZPe.forEach(t),b8o=i(Ns),ot=n(Ns,"DIV",{class:!0});var w5=s(ot);T(nw.$$.fragment,w5),v8o=i(w5),hle=n(w5,"P",{});var eJr=s(hle);F8o=r(eJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eJr.forEach(t),T8o=i(w5),yi=n(w5,"P",{});var tY=s(yi);M8o=r(tY,`Note:
Loading a model from its configuration file does `),ple=n(tY,"STRONG",{});var oJr=s(ple);E8o=r(oJr,"not"),oJr.forEach(t),C8o=r(tY,` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=n(tY,"A",{href:!0});var rJr=s(lN);w8o=r(rJr,"from_pretrained()"),rJr.forEach(t),A8o=r(tY," to load the model weights."),tY.forEach(t),y8o=i(w5),T(Q_.$$.fragment,w5),w5.forEach(t),L8o=i(Ns),Ue=n(Ns,"DIV",{class:!0});var Kt=s(Ue);T(sw.$$.fragment,Kt),x8o=i(Kt),ule=n(Kt,"P",{});var tJr=s(ule);$8o=r(tJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tJr.forEach(t),k8o=i(Kt),wa=n(Kt,"P",{});var A5=s(wa);S8o=r(A5,"The model class to instantiate is selected based on the "),_le=n(A5,"CODE",{});var aJr=s(_le);R8o=r(aJr,"model_type"),aJr.forEach(t),B8o=r(A5,` property of the config object (either
passed as an argument or loaded from `),ble=n(A5,"CODE",{});var nJr=s(ble);P8o=r(nJr,"pretrained_model_name_or_path"),nJr.forEach(t),I8o=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vle=n(A5,"CODE",{});var sJr=s(vle);q8o=r(sJr,"pretrained_model_name_or_path"),sJr.forEach(t),N8o=r(A5,":"),A5.forEach(t),j8o=i(Kt),Q=n(Kt,"UL",{});var H=s(Q);W_=n(H,"LI",{});var e3e=s(W_);Fle=n(e3e,"STRONG",{});var lJr=s(Fle);D8o=r(lJr,"albert"),lJr.forEach(t),G8o=r(e3e," \u2014 "),iN=n(e3e,"A",{href:!0});var iJr=s(iN);O8o=r(iJr,"AlbertForMaskedLM"),iJr.forEach(t),V8o=r(e3e," (ALBERT model)"),e3e.forEach(t),X8o=i(H),H_=n(H,"LI",{});var o3e=s(H_);Tle=n(o3e,"STRONG",{});var dJr=s(Tle);z8o=r(dJr,"bart"),dJr.forEach(t),Q8o=r(o3e," \u2014 "),dN=n(o3e,"A",{href:!0});var cJr=s(dN);W8o=r(cJr,"BartForConditionalGeneration"),cJr.forEach(t),H8o=r(o3e," (BART model)"),o3e.forEach(t),U8o=i(H),U_=n(H,"LI",{});var r3e=s(U_);Mle=n(r3e,"STRONG",{});var fJr=s(Mle);J8o=r(fJr,"bert"),fJr.forEach(t),Y8o=r(r3e," \u2014 "),cN=n(r3e,"A",{href:!0});var mJr=s(cN);K8o=r(mJr,"BertForMaskedLM"),mJr.forEach(t),Z8o=r(r3e," (BERT model)"),r3e.forEach(t),e9o=i(H),J_=n(H,"LI",{});var t3e=s(J_);Ele=n(t3e,"STRONG",{});var gJr=s(Ele);o9o=r(gJr,"big_bird"),gJr.forEach(t),r9o=r(t3e," \u2014 "),fN=n(t3e,"A",{href:!0});var hJr=s(fN);t9o=r(hJr,"BigBirdForMaskedLM"),hJr.forEach(t),a9o=r(t3e," (BigBird model)"),t3e.forEach(t),n9o=i(H),Y_=n(H,"LI",{});var a3e=s(Y_);Cle=n(a3e,"STRONG",{});var pJr=s(Cle);s9o=r(pJr,"camembert"),pJr.forEach(t),l9o=r(a3e," \u2014 "),mN=n(a3e,"A",{href:!0});var uJr=s(mN);i9o=r(uJr,"CamembertForMaskedLM"),uJr.forEach(t),d9o=r(a3e," (CamemBERT model)"),a3e.forEach(t),c9o=i(H),K_=n(H,"LI",{});var n3e=s(K_);wle=n(n3e,"STRONG",{});var _Jr=s(wle);f9o=r(_Jr,"convbert"),_Jr.forEach(t),m9o=r(n3e," \u2014 "),gN=n(n3e,"A",{href:!0});var bJr=s(gN);g9o=r(bJr,"ConvBertForMaskedLM"),bJr.forEach(t),h9o=r(n3e," (ConvBERT model)"),n3e.forEach(t),p9o=i(H),Z_=n(H,"LI",{});var s3e=s(Z_);Ale=n(s3e,"STRONG",{});var vJr=s(Ale);u9o=r(vJr,"data2vec-text"),vJr.forEach(t),_9o=r(s3e," \u2014 "),hN=n(s3e,"A",{href:!0});var FJr=s(hN);b9o=r(FJr,"Data2VecTextForMaskedLM"),FJr.forEach(t),v9o=r(s3e," (Data2VecText model)"),s3e.forEach(t),F9o=i(H),e1=n(H,"LI",{});var l3e=s(e1);yle=n(l3e,"STRONG",{});var TJr=s(yle);T9o=r(TJr,"deberta"),TJr.forEach(t),M9o=r(l3e," \u2014 "),pN=n(l3e,"A",{href:!0});var MJr=s(pN);E9o=r(MJr,"DebertaForMaskedLM"),MJr.forEach(t),C9o=r(l3e," (DeBERTa model)"),l3e.forEach(t),w9o=i(H),o1=n(H,"LI",{});var i3e=s(o1);Lle=n(i3e,"STRONG",{});var EJr=s(Lle);A9o=r(EJr,"deberta-v2"),EJr.forEach(t),y9o=r(i3e," \u2014 "),uN=n(i3e,"A",{href:!0});var CJr=s(uN);L9o=r(CJr,"DebertaV2ForMaskedLM"),CJr.forEach(t),x9o=r(i3e," (DeBERTa-v2 model)"),i3e.forEach(t),$9o=i(H),r1=n(H,"LI",{});var d3e=s(r1);xle=n(d3e,"STRONG",{});var wJr=s(xle);k9o=r(wJr,"distilbert"),wJr.forEach(t),S9o=r(d3e," \u2014 "),_N=n(d3e,"A",{href:!0});var AJr=s(_N);R9o=r(AJr,"DistilBertForMaskedLM"),AJr.forEach(t),B9o=r(d3e," (DistilBERT model)"),d3e.forEach(t),P9o=i(H),t1=n(H,"LI",{});var c3e=s(t1);$le=n(c3e,"STRONG",{});var yJr=s($le);I9o=r(yJr,"electra"),yJr.forEach(t),q9o=r(c3e," \u2014 "),bN=n(c3e,"A",{href:!0});var LJr=s(bN);N9o=r(LJr,"ElectraForMaskedLM"),LJr.forEach(t),j9o=r(c3e," (ELECTRA model)"),c3e.forEach(t),D9o=i(H),a1=n(H,"LI",{});var f3e=s(a1);kle=n(f3e,"STRONG",{});var xJr=s(kle);G9o=r(xJr,"flaubert"),xJr.forEach(t),O9o=r(f3e," \u2014 "),vN=n(f3e,"A",{href:!0});var $Jr=s(vN);V9o=r($Jr,"FlaubertWithLMHeadModel"),$Jr.forEach(t),X9o=r(f3e," (FlauBERT model)"),f3e.forEach(t),z9o=i(H),n1=n(H,"LI",{});var m3e=s(n1);Sle=n(m3e,"STRONG",{});var kJr=s(Sle);Q9o=r(kJr,"fnet"),kJr.forEach(t),W9o=r(m3e," \u2014 "),FN=n(m3e,"A",{href:!0});var SJr=s(FN);H9o=r(SJr,"FNetForMaskedLM"),SJr.forEach(t),U9o=r(m3e," (FNet model)"),m3e.forEach(t),J9o=i(H),s1=n(H,"LI",{});var g3e=s(s1);Rle=n(g3e,"STRONG",{});var RJr=s(Rle);Y9o=r(RJr,"funnel"),RJr.forEach(t),K9o=r(g3e," \u2014 "),TN=n(g3e,"A",{href:!0});var BJr=s(TN);Z9o=r(BJr,"FunnelForMaskedLM"),BJr.forEach(t),eMo=r(g3e," (Funnel Transformer model)"),g3e.forEach(t),oMo=i(H),l1=n(H,"LI",{});var h3e=s(l1);Ble=n(h3e,"STRONG",{});var PJr=s(Ble);rMo=r(PJr,"ibert"),PJr.forEach(t),tMo=r(h3e," \u2014 "),MN=n(h3e,"A",{href:!0});var IJr=s(MN);aMo=r(IJr,"IBertForMaskedLM"),IJr.forEach(t),nMo=r(h3e," (I-BERT model)"),h3e.forEach(t),sMo=i(H),i1=n(H,"LI",{});var p3e=s(i1);Ple=n(p3e,"STRONG",{});var qJr=s(Ple);lMo=r(qJr,"layoutlm"),qJr.forEach(t),iMo=r(p3e," \u2014 "),EN=n(p3e,"A",{href:!0});var NJr=s(EN);dMo=r(NJr,"LayoutLMForMaskedLM"),NJr.forEach(t),cMo=r(p3e," (LayoutLM model)"),p3e.forEach(t),fMo=i(H),d1=n(H,"LI",{});var u3e=s(d1);Ile=n(u3e,"STRONG",{});var jJr=s(Ile);mMo=r(jJr,"longformer"),jJr.forEach(t),gMo=r(u3e," \u2014 "),CN=n(u3e,"A",{href:!0});var DJr=s(CN);hMo=r(DJr,"LongformerForMaskedLM"),DJr.forEach(t),pMo=r(u3e," (Longformer model)"),u3e.forEach(t),uMo=i(H),c1=n(H,"LI",{});var _3e=s(c1);qle=n(_3e,"STRONG",{});var GJr=s(qle);_Mo=r(GJr,"mbart"),GJr.forEach(t),bMo=r(_3e," \u2014 "),wN=n(_3e,"A",{href:!0});var OJr=s(wN);vMo=r(OJr,"MBartForConditionalGeneration"),OJr.forEach(t),FMo=r(_3e," (mBART model)"),_3e.forEach(t),TMo=i(H),f1=n(H,"LI",{});var b3e=s(f1);Nle=n(b3e,"STRONG",{});var VJr=s(Nle);MMo=r(VJr,"megatron-bert"),VJr.forEach(t),EMo=r(b3e," \u2014 "),AN=n(b3e,"A",{href:!0});var XJr=s(AN);CMo=r(XJr,"MegatronBertForMaskedLM"),XJr.forEach(t),wMo=r(b3e," (MegatronBert model)"),b3e.forEach(t),AMo=i(H),m1=n(H,"LI",{});var v3e=s(m1);jle=n(v3e,"STRONG",{});var zJr=s(jle);yMo=r(zJr,"mobilebert"),zJr.forEach(t),LMo=r(v3e," \u2014 "),yN=n(v3e,"A",{href:!0});var QJr=s(yN);xMo=r(QJr,"MobileBertForMaskedLM"),QJr.forEach(t),$Mo=r(v3e," (MobileBERT model)"),v3e.forEach(t),kMo=i(H),g1=n(H,"LI",{});var F3e=s(g1);Dle=n(F3e,"STRONG",{});var WJr=s(Dle);SMo=r(WJr,"mpnet"),WJr.forEach(t),RMo=r(F3e," \u2014 "),LN=n(F3e,"A",{href:!0});var HJr=s(LN);BMo=r(HJr,"MPNetForMaskedLM"),HJr.forEach(t),PMo=r(F3e," (MPNet model)"),F3e.forEach(t),IMo=i(H),h1=n(H,"LI",{});var T3e=s(h1);Gle=n(T3e,"STRONG",{});var UJr=s(Gle);qMo=r(UJr,"nystromformer"),UJr.forEach(t),NMo=r(T3e," \u2014 "),xN=n(T3e,"A",{href:!0});var JJr=s(xN);jMo=r(JJr,"NystromformerForMaskedLM"),JJr.forEach(t),DMo=r(T3e," (Nystromformer model)"),T3e.forEach(t),GMo=i(H),p1=n(H,"LI",{});var M3e=s(p1);Ole=n(M3e,"STRONG",{});var YJr=s(Ole);OMo=r(YJr,"perceiver"),YJr.forEach(t),VMo=r(M3e," \u2014 "),$N=n(M3e,"A",{href:!0});var KJr=s($N);XMo=r(KJr,"PerceiverForMaskedLM"),KJr.forEach(t),zMo=r(M3e," (Perceiver model)"),M3e.forEach(t),QMo=i(H),u1=n(H,"LI",{});var E3e=s(u1);Vle=n(E3e,"STRONG",{});var ZJr=s(Vle);WMo=r(ZJr,"qdqbert"),ZJr.forEach(t),HMo=r(E3e," \u2014 "),kN=n(E3e,"A",{href:!0});var eYr=s(kN);UMo=r(eYr,"QDQBertForMaskedLM"),eYr.forEach(t),JMo=r(E3e," (QDQBert model)"),E3e.forEach(t),YMo=i(H),_1=n(H,"LI",{});var C3e=s(_1);Xle=n(C3e,"STRONG",{});var oYr=s(Xle);KMo=r(oYr,"reformer"),oYr.forEach(t),ZMo=r(C3e," \u2014 "),SN=n(C3e,"A",{href:!0});var rYr=s(SN);e4o=r(rYr,"ReformerForMaskedLM"),rYr.forEach(t),o4o=r(C3e," (Reformer model)"),C3e.forEach(t),r4o=i(H),b1=n(H,"LI",{});var w3e=s(b1);zle=n(w3e,"STRONG",{});var tYr=s(zle);t4o=r(tYr,"rembert"),tYr.forEach(t),a4o=r(w3e," \u2014 "),RN=n(w3e,"A",{href:!0});var aYr=s(RN);n4o=r(aYr,"RemBertForMaskedLM"),aYr.forEach(t),s4o=r(w3e," (RemBERT model)"),w3e.forEach(t),l4o=i(H),v1=n(H,"LI",{});var A3e=s(v1);Qle=n(A3e,"STRONG",{});var nYr=s(Qle);i4o=r(nYr,"roberta"),nYr.forEach(t),d4o=r(A3e," \u2014 "),BN=n(A3e,"A",{href:!0});var sYr=s(BN);c4o=r(sYr,"RobertaForMaskedLM"),sYr.forEach(t),f4o=r(A3e," (RoBERTa model)"),A3e.forEach(t),m4o=i(H),F1=n(H,"LI",{});var y3e=s(F1);Wle=n(y3e,"STRONG",{});var lYr=s(Wle);g4o=r(lYr,"roformer"),lYr.forEach(t),h4o=r(y3e," \u2014 "),PN=n(y3e,"A",{href:!0});var iYr=s(PN);p4o=r(iYr,"RoFormerForMaskedLM"),iYr.forEach(t),u4o=r(y3e," (RoFormer model)"),y3e.forEach(t),_4o=i(H),T1=n(H,"LI",{});var L3e=s(T1);Hle=n(L3e,"STRONG",{});var dYr=s(Hle);b4o=r(dYr,"squeezebert"),dYr.forEach(t),v4o=r(L3e," \u2014 "),IN=n(L3e,"A",{href:!0});var cYr=s(IN);F4o=r(cYr,"SqueezeBertForMaskedLM"),cYr.forEach(t),T4o=r(L3e," (SqueezeBERT model)"),L3e.forEach(t),M4o=i(H),M1=n(H,"LI",{});var x3e=s(M1);Ule=n(x3e,"STRONG",{});var fYr=s(Ule);E4o=r(fYr,"tapas"),fYr.forEach(t),C4o=r(x3e," \u2014 "),qN=n(x3e,"A",{href:!0});var mYr=s(qN);w4o=r(mYr,"TapasForMaskedLM"),mYr.forEach(t),A4o=r(x3e," (TAPAS model)"),x3e.forEach(t),y4o=i(H),E1=n(H,"LI",{});var $3e=s(E1);Jle=n($3e,"STRONG",{});var gYr=s(Jle);L4o=r(gYr,"wav2vec2"),gYr.forEach(t),x4o=r($3e," \u2014 "),Yle=n($3e,"CODE",{});var hYr=s(Yle);$4o=r(hYr,"Wav2Vec2ForMaskedLM"),hYr.forEach(t),k4o=r($3e," (Wav2Vec2 model)"),$3e.forEach(t),S4o=i(H),C1=n(H,"LI",{});var k3e=s(C1);Kle=n(k3e,"STRONG",{});var pYr=s(Kle);R4o=r(pYr,"xlm"),pYr.forEach(t),B4o=r(k3e," \u2014 "),NN=n(k3e,"A",{href:!0});var uYr=s(NN);P4o=r(uYr,"XLMWithLMHeadModel"),uYr.forEach(t),I4o=r(k3e," (XLM model)"),k3e.forEach(t),q4o=i(H),w1=n(H,"LI",{});var S3e=s(w1);Zle=n(S3e,"STRONG",{});var _Yr=s(Zle);N4o=r(_Yr,"xlm-roberta"),_Yr.forEach(t),j4o=r(S3e," \u2014 "),jN=n(S3e,"A",{href:!0});var bYr=s(jN);D4o=r(bYr,"XLMRobertaForMaskedLM"),bYr.forEach(t),G4o=r(S3e," (XLM-RoBERTa model)"),S3e.forEach(t),O4o=i(H),A1=n(H,"LI",{});var R3e=s(A1);eie=n(R3e,"STRONG",{});var vYr=s(eie);V4o=r(vYr,"xlm-roberta-xl"),vYr.forEach(t),X4o=r(R3e," \u2014 "),DN=n(R3e,"A",{href:!0});var FYr=s(DN);z4o=r(FYr,"XLMRobertaXLForMaskedLM"),FYr.forEach(t),Q4o=r(R3e," (XLM-RoBERTa-XL model)"),R3e.forEach(t),W4o=i(H),y1=n(H,"LI",{});var B3e=s(y1);oie=n(B3e,"STRONG",{});var TYr=s(oie);H4o=r(TYr,"yoso"),TYr.forEach(t),U4o=r(B3e," \u2014 "),GN=n(B3e,"A",{href:!0});var MYr=s(GN);J4o=r(MYr,"YosoForMaskedLM"),MYr.forEach(t),Y4o=r(B3e," (YOSO model)"),B3e.forEach(t),H.forEach(t),K4o=i(Kt),L1=n(Kt,"P",{});var P3e=s(L1);Z4o=r(P3e,"The model is set in evaluation mode by default using "),rie=n(P3e,"CODE",{});var EYr=s(rie);eEo=r(EYr,"model.eval()"),EYr.forEach(t),oEo=r(P3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tie=n(P3e,"CODE",{});var CYr=s(tie);rEo=r(CYr,"model.train()"),CYr.forEach(t),P3e.forEach(t),tEo=i(Kt),T(x1.$$.fragment,Kt),Kt.forEach(t),Ns.forEach(t),KRe=i(f),Li=n(f,"H2",{class:!0});var eIe=s(Li);$1=n(eIe,"A",{id:!0,class:!0,href:!0});var wYr=s($1);aie=n(wYr,"SPAN",{});var AYr=s(aie);T(lw.$$.fragment,AYr),AYr.forEach(t),wYr.forEach(t),aEo=i(eIe),nie=n(eIe,"SPAN",{});var yYr=s(nie);nEo=r(yYr,"AutoModelForSeq2SeqLM"),yYr.forEach(t),eIe.forEach(t),ZRe=i(f),$o=n(f,"DIV",{class:!0});var js=s($o);T(iw.$$.fragment,js),sEo=i(js),xi=n(js,"P",{});var aY=s(xi);lEo=r(aY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ON=n(aY,"A",{href:!0});var LYr=s(ON);iEo=r(LYr,"from_pretrained()"),LYr.forEach(t),dEo=r(aY," class method or the "),VN=n(aY,"A",{href:!0});var xYr=s(VN);cEo=r(xYr,"from_config()"),xYr.forEach(t),fEo=r(aY,` class
method.`),aY.forEach(t),mEo=i(js),dw=n(js,"P",{});var oIe=s(dw);gEo=r(oIe,"This class cannot be instantiated directly using "),sie=n(oIe,"CODE",{});var $Yr=s(sie);hEo=r($Yr,"__init__()"),$Yr.forEach(t),pEo=r(oIe," (throws an error)."),oIe.forEach(t),uEo=i(js),rt=n(js,"DIV",{class:!0});var y5=s(rt);T(cw.$$.fragment,y5),_Eo=i(y5),lie=n(y5,"P",{});var kYr=s(lie);bEo=r(kYr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kYr.forEach(t),vEo=i(y5),$i=n(y5,"P",{});var nY=s($i);FEo=r(nY,`Note:
Loading a model from its configuration file does `),iie=n(nY,"STRONG",{});var SYr=s(iie);TEo=r(SYr,"not"),SYr.forEach(t),MEo=r(nY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=n(nY,"A",{href:!0});var RYr=s(XN);EEo=r(RYr,"from_pretrained()"),RYr.forEach(t),CEo=r(nY," to load the model weights."),nY.forEach(t),wEo=i(y5),T(k1.$$.fragment,y5),y5.forEach(t),AEo=i(js),Je=n(js,"DIV",{class:!0});var Zt=s(Je);T(fw.$$.fragment,Zt),yEo=i(Zt),die=n(Zt,"P",{});var BYr=s(die);LEo=r(BYr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),BYr.forEach(t),xEo=i(Zt),Aa=n(Zt,"P",{});var L5=s(Aa);$Eo=r(L5,"The model class to instantiate is selected based on the "),cie=n(L5,"CODE",{});var PYr=s(cie);kEo=r(PYr,"model_type"),PYr.forEach(t),SEo=r(L5,` property of the config object (either
passed as an argument or loaded from `),fie=n(L5,"CODE",{});var IYr=s(fie);REo=r(IYr,"pretrained_model_name_or_path"),IYr.forEach(t),BEo=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mie=n(L5,"CODE",{});var qYr=s(mie);PEo=r(qYr,"pretrained_model_name_or_path"),qYr.forEach(t),IEo=r(L5,":"),L5.forEach(t),qEo=i(Zt),he=n(Zt,"UL",{});var ue=s(he);S1=n(ue,"LI",{});var I3e=s(S1);gie=n(I3e,"STRONG",{});var NYr=s(gie);NEo=r(NYr,"bart"),NYr.forEach(t),jEo=r(I3e," \u2014 "),zN=n(I3e,"A",{href:!0});var jYr=s(zN);DEo=r(jYr,"BartForConditionalGeneration"),jYr.forEach(t),GEo=r(I3e," (BART model)"),I3e.forEach(t),OEo=i(ue),R1=n(ue,"LI",{});var q3e=s(R1);hie=n(q3e,"STRONG",{});var DYr=s(hie);VEo=r(DYr,"bigbird_pegasus"),DYr.forEach(t),XEo=r(q3e," \u2014 "),QN=n(q3e,"A",{href:!0});var GYr=s(QN);zEo=r(GYr,"BigBirdPegasusForConditionalGeneration"),GYr.forEach(t),QEo=r(q3e," (BigBirdPegasus model)"),q3e.forEach(t),WEo=i(ue),B1=n(ue,"LI",{});var N3e=s(B1);pie=n(N3e,"STRONG",{});var OYr=s(pie);HEo=r(OYr,"blenderbot"),OYr.forEach(t),UEo=r(N3e," \u2014 "),WN=n(N3e,"A",{href:!0});var VYr=s(WN);JEo=r(VYr,"BlenderbotForConditionalGeneration"),VYr.forEach(t),YEo=r(N3e," (Blenderbot model)"),N3e.forEach(t),KEo=i(ue),P1=n(ue,"LI",{});var j3e=s(P1);uie=n(j3e,"STRONG",{});var XYr=s(uie);ZEo=r(XYr,"blenderbot-small"),XYr.forEach(t),e5o=r(j3e," \u2014 "),HN=n(j3e,"A",{href:!0});var zYr=s(HN);o5o=r(zYr,"BlenderbotSmallForConditionalGeneration"),zYr.forEach(t),r5o=r(j3e," (BlenderbotSmall model)"),j3e.forEach(t),t5o=i(ue),I1=n(ue,"LI",{});var D3e=s(I1);_ie=n(D3e,"STRONG",{});var QYr=s(_ie);a5o=r(QYr,"encoder-decoder"),QYr.forEach(t),n5o=r(D3e," \u2014 "),UN=n(D3e,"A",{href:!0});var WYr=s(UN);s5o=r(WYr,"EncoderDecoderModel"),WYr.forEach(t),l5o=r(D3e," (Encoder decoder model)"),D3e.forEach(t),i5o=i(ue),q1=n(ue,"LI",{});var G3e=s(q1);bie=n(G3e,"STRONG",{});var HYr=s(bie);d5o=r(HYr,"fsmt"),HYr.forEach(t),c5o=r(G3e," \u2014 "),JN=n(G3e,"A",{href:!0});var UYr=s(JN);f5o=r(UYr,"FSMTForConditionalGeneration"),UYr.forEach(t),m5o=r(G3e," (FairSeq Machine-Translation model)"),G3e.forEach(t),g5o=i(ue),N1=n(ue,"LI",{});var O3e=s(N1);vie=n(O3e,"STRONG",{});var JYr=s(vie);h5o=r(JYr,"led"),JYr.forEach(t),p5o=r(O3e," \u2014 "),YN=n(O3e,"A",{href:!0});var YYr=s(YN);u5o=r(YYr,"LEDForConditionalGeneration"),YYr.forEach(t),_5o=r(O3e," (LED model)"),O3e.forEach(t),b5o=i(ue),j1=n(ue,"LI",{});var V3e=s(j1);Fie=n(V3e,"STRONG",{});var KYr=s(Fie);v5o=r(KYr,"m2m_100"),KYr.forEach(t),F5o=r(V3e," \u2014 "),KN=n(V3e,"A",{href:!0});var ZYr=s(KN);T5o=r(ZYr,"M2M100ForConditionalGeneration"),ZYr.forEach(t),M5o=r(V3e," (M2M100 model)"),V3e.forEach(t),E5o=i(ue),D1=n(ue,"LI",{});var X3e=s(D1);Tie=n(X3e,"STRONG",{});var eKr=s(Tie);C5o=r(eKr,"marian"),eKr.forEach(t),w5o=r(X3e," \u2014 "),ZN=n(X3e,"A",{href:!0});var oKr=s(ZN);A5o=r(oKr,"MarianMTModel"),oKr.forEach(t),y5o=r(X3e," (Marian model)"),X3e.forEach(t),L5o=i(ue),G1=n(ue,"LI",{});var z3e=s(G1);Mie=n(z3e,"STRONG",{});var rKr=s(Mie);x5o=r(rKr,"mbart"),rKr.forEach(t),$5o=r(z3e," \u2014 "),ej=n(z3e,"A",{href:!0});var tKr=s(ej);k5o=r(tKr,"MBartForConditionalGeneration"),tKr.forEach(t),S5o=r(z3e," (mBART model)"),z3e.forEach(t),R5o=i(ue),O1=n(ue,"LI",{});var Q3e=s(O1);Eie=n(Q3e,"STRONG",{});var aKr=s(Eie);B5o=r(aKr,"mt5"),aKr.forEach(t),P5o=r(Q3e," \u2014 "),oj=n(Q3e,"A",{href:!0});var nKr=s(oj);I5o=r(nKr,"MT5ForConditionalGeneration"),nKr.forEach(t),q5o=r(Q3e," (mT5 model)"),Q3e.forEach(t),N5o=i(ue),V1=n(ue,"LI",{});var W3e=s(V1);Cie=n(W3e,"STRONG",{});var sKr=s(Cie);j5o=r(sKr,"pegasus"),sKr.forEach(t),D5o=r(W3e," \u2014 "),rj=n(W3e,"A",{href:!0});var lKr=s(rj);G5o=r(lKr,"PegasusForConditionalGeneration"),lKr.forEach(t),O5o=r(W3e," (Pegasus model)"),W3e.forEach(t),V5o=i(ue),X1=n(ue,"LI",{});var H3e=s(X1);wie=n(H3e,"STRONG",{});var iKr=s(wie);X5o=r(iKr,"plbart"),iKr.forEach(t),z5o=r(H3e," \u2014 "),tj=n(H3e,"A",{href:!0});var dKr=s(tj);Q5o=r(dKr,"PLBartForConditionalGeneration"),dKr.forEach(t),W5o=r(H3e," (PLBart model)"),H3e.forEach(t),H5o=i(ue),z1=n(ue,"LI",{});var U3e=s(z1);Aie=n(U3e,"STRONG",{});var cKr=s(Aie);U5o=r(cKr,"prophetnet"),cKr.forEach(t),J5o=r(U3e," \u2014 "),aj=n(U3e,"A",{href:!0});var fKr=s(aj);Y5o=r(fKr,"ProphetNetForConditionalGeneration"),fKr.forEach(t),K5o=r(U3e," (ProphetNet model)"),U3e.forEach(t),Z5o=i(ue),Q1=n(ue,"LI",{});var J3e=s(Q1);yie=n(J3e,"STRONG",{});var mKr=s(yie);eCo=r(mKr,"t5"),mKr.forEach(t),oCo=r(J3e," \u2014 "),nj=n(J3e,"A",{href:!0});var gKr=s(nj);rCo=r(gKr,"T5ForConditionalGeneration"),gKr.forEach(t),tCo=r(J3e," (T5 model)"),J3e.forEach(t),aCo=i(ue),W1=n(ue,"LI",{});var Y3e=s(W1);Lie=n(Y3e,"STRONG",{});var hKr=s(Lie);nCo=r(hKr,"tapex"),hKr.forEach(t),sCo=r(Y3e," \u2014 "),sj=n(Y3e,"A",{href:!0});var pKr=s(sj);lCo=r(pKr,"BartForConditionalGeneration"),pKr.forEach(t),iCo=r(Y3e," (TAPEX model)"),Y3e.forEach(t),dCo=i(ue),H1=n(ue,"LI",{});var K3e=s(H1);xie=n(K3e,"STRONG",{});var uKr=s(xie);cCo=r(uKr,"xlm-prophetnet"),uKr.forEach(t),fCo=r(K3e," \u2014 "),lj=n(K3e,"A",{href:!0});var _Kr=s(lj);mCo=r(_Kr,"XLMProphetNetForConditionalGeneration"),_Kr.forEach(t),gCo=r(K3e," (XLMProphetNet model)"),K3e.forEach(t),ue.forEach(t),hCo=i(Zt),U1=n(Zt,"P",{});var Z3e=s(U1);pCo=r(Z3e,"The model is set in evaluation mode by default using "),$ie=n(Z3e,"CODE",{});var bKr=s($ie);uCo=r(bKr,"model.eval()"),bKr.forEach(t),_Co=r(Z3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=n(Z3e,"CODE",{});var vKr=s(kie);bCo=r(vKr,"model.train()"),vKr.forEach(t),Z3e.forEach(t),vCo=i(Zt),T(J1.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),eBe=i(f),ki=n(f,"H2",{class:!0});var rIe=s(ki);Y1=n(rIe,"A",{id:!0,class:!0,href:!0});var FKr=s(Y1);Sie=n(FKr,"SPAN",{});var TKr=s(Sie);T(mw.$$.fragment,TKr),TKr.forEach(t),FKr.forEach(t),FCo=i(rIe),Rie=n(rIe,"SPAN",{});var MKr=s(Rie);TCo=r(MKr,"AutoModelForSequenceClassification"),MKr.forEach(t),rIe.forEach(t),oBe=i(f),ko=n(f,"DIV",{class:!0});var Ds=s(ko);T(gw.$$.fragment,Ds),MCo=i(Ds),Si=n(Ds,"P",{});var sY=s(Si);ECo=r(sY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ij=n(sY,"A",{href:!0});var EKr=s(ij);CCo=r(EKr,"from_pretrained()"),EKr.forEach(t),wCo=r(sY," class method or the "),dj=n(sY,"A",{href:!0});var CKr=s(dj);ACo=r(CKr,"from_config()"),CKr.forEach(t),yCo=r(sY,` class
method.`),sY.forEach(t),LCo=i(Ds),hw=n(Ds,"P",{});var tIe=s(hw);xCo=r(tIe,"This class cannot be instantiated directly using "),Bie=n(tIe,"CODE",{});var wKr=s(Bie);$Co=r(wKr,"__init__()"),wKr.forEach(t),kCo=r(tIe," (throws an error)."),tIe.forEach(t),SCo=i(Ds),tt=n(Ds,"DIV",{class:!0});var x5=s(tt);T(pw.$$.fragment,x5),RCo=i(x5),Pie=n(x5,"P",{});var AKr=s(Pie);BCo=r(AKr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),AKr.forEach(t),PCo=i(x5),Ri=n(x5,"P",{});var lY=s(Ri);ICo=r(lY,`Note:
Loading a model from its configuration file does `),Iie=n(lY,"STRONG",{});var yKr=s(Iie);qCo=r(yKr,"not"),yKr.forEach(t),NCo=r(lY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=n(lY,"A",{href:!0});var LKr=s(cj);jCo=r(LKr,"from_pretrained()"),LKr.forEach(t),DCo=r(lY," to load the model weights."),lY.forEach(t),GCo=i(x5),T(K1.$$.fragment,x5),x5.forEach(t),OCo=i(Ds),Ye=n(Ds,"DIV",{class:!0});var ea=s(Ye);T(uw.$$.fragment,ea),VCo=i(ea),qie=n(ea,"P",{});var xKr=s(qie);XCo=r(xKr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xKr.forEach(t),zCo=i(ea),ya=n(ea,"P",{});var $5=s(ya);QCo=r($5,"The model class to instantiate is selected based on the "),Nie=n($5,"CODE",{});var $Kr=s(Nie);WCo=r($Kr,"model_type"),$Kr.forEach(t),HCo=r($5,` property of the config object (either
passed as an argument or loaded from `),jie=n($5,"CODE",{});var kKr=s(jie);UCo=r(kKr,"pretrained_model_name_or_path"),kKr.forEach(t),JCo=r($5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=n($5,"CODE",{});var SKr=s(Die);YCo=r(SKr,"pretrained_model_name_or_path"),SKr.forEach(t),KCo=r($5,":"),$5.forEach(t),ZCo=i(ea),q=n(ea,"UL",{});var N=s(q);Z1=n(N,"LI",{});var ewe=s(Z1);Gie=n(ewe,"STRONG",{});var RKr=s(Gie);e3o=r(RKr,"albert"),RKr.forEach(t),o3o=r(ewe," \u2014 "),fj=n(ewe,"A",{href:!0});var BKr=s(fj);r3o=r(BKr,"AlbertForSequenceClassification"),BKr.forEach(t),t3o=r(ewe," (ALBERT model)"),ewe.forEach(t),a3o=i(N),eb=n(N,"LI",{});var owe=s(eb);Oie=n(owe,"STRONG",{});var PKr=s(Oie);n3o=r(PKr,"bart"),PKr.forEach(t),s3o=r(owe," \u2014 "),mj=n(owe,"A",{href:!0});var IKr=s(mj);l3o=r(IKr,"BartForSequenceClassification"),IKr.forEach(t),i3o=r(owe," (BART model)"),owe.forEach(t),d3o=i(N),ob=n(N,"LI",{});var rwe=s(ob);Vie=n(rwe,"STRONG",{});var qKr=s(Vie);c3o=r(qKr,"bert"),qKr.forEach(t),f3o=r(rwe," \u2014 "),gj=n(rwe,"A",{href:!0});var NKr=s(gj);m3o=r(NKr,"BertForSequenceClassification"),NKr.forEach(t),g3o=r(rwe," (BERT model)"),rwe.forEach(t),h3o=i(N),rb=n(N,"LI",{});var twe=s(rb);Xie=n(twe,"STRONG",{});var jKr=s(Xie);p3o=r(jKr,"big_bird"),jKr.forEach(t),u3o=r(twe," \u2014 "),hj=n(twe,"A",{href:!0});var DKr=s(hj);_3o=r(DKr,"BigBirdForSequenceClassification"),DKr.forEach(t),b3o=r(twe," (BigBird model)"),twe.forEach(t),v3o=i(N),tb=n(N,"LI",{});var awe=s(tb);zie=n(awe,"STRONG",{});var GKr=s(zie);F3o=r(GKr,"bigbird_pegasus"),GKr.forEach(t),T3o=r(awe," \u2014 "),pj=n(awe,"A",{href:!0});var OKr=s(pj);M3o=r(OKr,"BigBirdPegasusForSequenceClassification"),OKr.forEach(t),E3o=r(awe," (BigBirdPegasus model)"),awe.forEach(t),C3o=i(N),ab=n(N,"LI",{});var nwe=s(ab);Qie=n(nwe,"STRONG",{});var VKr=s(Qie);w3o=r(VKr,"camembert"),VKr.forEach(t),A3o=r(nwe," \u2014 "),uj=n(nwe,"A",{href:!0});var XKr=s(uj);y3o=r(XKr,"CamembertForSequenceClassification"),XKr.forEach(t),L3o=r(nwe," (CamemBERT model)"),nwe.forEach(t),x3o=i(N),nb=n(N,"LI",{});var swe=s(nb);Wie=n(swe,"STRONG",{});var zKr=s(Wie);$3o=r(zKr,"canine"),zKr.forEach(t),k3o=r(swe," \u2014 "),_j=n(swe,"A",{href:!0});var QKr=s(_j);S3o=r(QKr,"CanineForSequenceClassification"),QKr.forEach(t),R3o=r(swe," (Canine model)"),swe.forEach(t),B3o=i(N),sb=n(N,"LI",{});var lwe=s(sb);Hie=n(lwe,"STRONG",{});var WKr=s(Hie);P3o=r(WKr,"convbert"),WKr.forEach(t),I3o=r(lwe," \u2014 "),bj=n(lwe,"A",{href:!0});var HKr=s(bj);q3o=r(HKr,"ConvBertForSequenceClassification"),HKr.forEach(t),N3o=r(lwe," (ConvBERT model)"),lwe.forEach(t),j3o=i(N),lb=n(N,"LI",{});var iwe=s(lb);Uie=n(iwe,"STRONG",{});var UKr=s(Uie);D3o=r(UKr,"ctrl"),UKr.forEach(t),G3o=r(iwe," \u2014 "),vj=n(iwe,"A",{href:!0});var JKr=s(vj);O3o=r(JKr,"CTRLForSequenceClassification"),JKr.forEach(t),V3o=r(iwe," (CTRL model)"),iwe.forEach(t),X3o=i(N),ib=n(N,"LI",{});var dwe=s(ib);Jie=n(dwe,"STRONG",{});var YKr=s(Jie);z3o=r(YKr,"data2vec-text"),YKr.forEach(t),Q3o=r(dwe," \u2014 "),Fj=n(dwe,"A",{href:!0});var KKr=s(Fj);W3o=r(KKr,"Data2VecTextForSequenceClassification"),KKr.forEach(t),H3o=r(dwe," (Data2VecText model)"),dwe.forEach(t),U3o=i(N),db=n(N,"LI",{});var cwe=s(db);Yie=n(cwe,"STRONG",{});var ZKr=s(Yie);J3o=r(ZKr,"deberta"),ZKr.forEach(t),Y3o=r(cwe," \u2014 "),Tj=n(cwe,"A",{href:!0});var eZr=s(Tj);K3o=r(eZr,"DebertaForSequenceClassification"),eZr.forEach(t),Z3o=r(cwe," (DeBERTa model)"),cwe.forEach(t),ewo=i(N),cb=n(N,"LI",{});var fwe=s(cb);Kie=n(fwe,"STRONG",{});var oZr=s(Kie);owo=r(oZr,"deberta-v2"),oZr.forEach(t),rwo=r(fwe," \u2014 "),Mj=n(fwe,"A",{href:!0});var rZr=s(Mj);two=r(rZr,"DebertaV2ForSequenceClassification"),rZr.forEach(t),awo=r(fwe," (DeBERTa-v2 model)"),fwe.forEach(t),nwo=i(N),fb=n(N,"LI",{});var mwe=s(fb);Zie=n(mwe,"STRONG",{});var tZr=s(Zie);swo=r(tZr,"distilbert"),tZr.forEach(t),lwo=r(mwe," \u2014 "),Ej=n(mwe,"A",{href:!0});var aZr=s(Ej);iwo=r(aZr,"DistilBertForSequenceClassification"),aZr.forEach(t),dwo=r(mwe," (DistilBERT model)"),mwe.forEach(t),cwo=i(N),mb=n(N,"LI",{});var gwe=s(mb);ede=n(gwe,"STRONG",{});var nZr=s(ede);fwo=r(nZr,"electra"),nZr.forEach(t),mwo=r(gwe," \u2014 "),Cj=n(gwe,"A",{href:!0});var sZr=s(Cj);gwo=r(sZr,"ElectraForSequenceClassification"),sZr.forEach(t),hwo=r(gwe," (ELECTRA model)"),gwe.forEach(t),pwo=i(N),gb=n(N,"LI",{});var hwe=s(gb);ode=n(hwe,"STRONG",{});var lZr=s(ode);uwo=r(lZr,"flaubert"),lZr.forEach(t),_wo=r(hwe," \u2014 "),wj=n(hwe,"A",{href:!0});var iZr=s(wj);bwo=r(iZr,"FlaubertForSequenceClassification"),iZr.forEach(t),vwo=r(hwe," (FlauBERT model)"),hwe.forEach(t),Fwo=i(N),hb=n(N,"LI",{});var pwe=s(hb);rde=n(pwe,"STRONG",{});var dZr=s(rde);Two=r(dZr,"fnet"),dZr.forEach(t),Mwo=r(pwe," \u2014 "),Aj=n(pwe,"A",{href:!0});var cZr=s(Aj);Ewo=r(cZr,"FNetForSequenceClassification"),cZr.forEach(t),Cwo=r(pwe," (FNet model)"),pwe.forEach(t),wwo=i(N),pb=n(N,"LI",{});var uwe=s(pb);tde=n(uwe,"STRONG",{});var fZr=s(tde);Awo=r(fZr,"funnel"),fZr.forEach(t),ywo=r(uwe," \u2014 "),yj=n(uwe,"A",{href:!0});var mZr=s(yj);Lwo=r(mZr,"FunnelForSequenceClassification"),mZr.forEach(t),xwo=r(uwe," (Funnel Transformer model)"),uwe.forEach(t),$wo=i(N),ub=n(N,"LI",{});var _we=s(ub);ade=n(_we,"STRONG",{});var gZr=s(ade);kwo=r(gZr,"gpt2"),gZr.forEach(t),Swo=r(_we," \u2014 "),Lj=n(_we,"A",{href:!0});var hZr=s(Lj);Rwo=r(hZr,"GPT2ForSequenceClassification"),hZr.forEach(t),Bwo=r(_we," (OpenAI GPT-2 model)"),_we.forEach(t),Pwo=i(N),_b=n(N,"LI",{});var bwe=s(_b);nde=n(bwe,"STRONG",{});var pZr=s(nde);Iwo=r(pZr,"gpt_neo"),pZr.forEach(t),qwo=r(bwe," \u2014 "),xj=n(bwe,"A",{href:!0});var uZr=s(xj);Nwo=r(uZr,"GPTNeoForSequenceClassification"),uZr.forEach(t),jwo=r(bwe," (GPT Neo model)"),bwe.forEach(t),Dwo=i(N),bb=n(N,"LI",{});var vwe=s(bb);sde=n(vwe,"STRONG",{});var _Zr=s(sde);Gwo=r(_Zr,"gptj"),_Zr.forEach(t),Owo=r(vwe," \u2014 "),$j=n(vwe,"A",{href:!0});var bZr=s($j);Vwo=r(bZr,"GPTJForSequenceClassification"),bZr.forEach(t),Xwo=r(vwe," (GPT-J model)"),vwe.forEach(t),zwo=i(N),vb=n(N,"LI",{});var Fwe=s(vb);lde=n(Fwe,"STRONG",{});var vZr=s(lde);Qwo=r(vZr,"ibert"),vZr.forEach(t),Wwo=r(Fwe," \u2014 "),kj=n(Fwe,"A",{href:!0});var FZr=s(kj);Hwo=r(FZr,"IBertForSequenceClassification"),FZr.forEach(t),Uwo=r(Fwe," (I-BERT model)"),Fwe.forEach(t),Jwo=i(N),Fb=n(N,"LI",{});var Twe=s(Fb);ide=n(Twe,"STRONG",{});var TZr=s(ide);Ywo=r(TZr,"layoutlm"),TZr.forEach(t),Kwo=r(Twe," \u2014 "),Sj=n(Twe,"A",{href:!0});var MZr=s(Sj);Zwo=r(MZr,"LayoutLMForSequenceClassification"),MZr.forEach(t),eAo=r(Twe," (LayoutLM model)"),Twe.forEach(t),oAo=i(N),Tb=n(N,"LI",{});var Mwe=s(Tb);dde=n(Mwe,"STRONG",{});var EZr=s(dde);rAo=r(EZr,"layoutlmv2"),EZr.forEach(t),tAo=r(Mwe," \u2014 "),Rj=n(Mwe,"A",{href:!0});var CZr=s(Rj);aAo=r(CZr,"LayoutLMv2ForSequenceClassification"),CZr.forEach(t),nAo=r(Mwe," (LayoutLMv2 model)"),Mwe.forEach(t),sAo=i(N),Mb=n(N,"LI",{});var Ewe=s(Mb);cde=n(Ewe,"STRONG",{});var wZr=s(cde);lAo=r(wZr,"led"),wZr.forEach(t),iAo=r(Ewe," \u2014 "),Bj=n(Ewe,"A",{href:!0});var AZr=s(Bj);dAo=r(AZr,"LEDForSequenceClassification"),AZr.forEach(t),cAo=r(Ewe," (LED model)"),Ewe.forEach(t),fAo=i(N),Eb=n(N,"LI",{});var Cwe=s(Eb);fde=n(Cwe,"STRONG",{});var yZr=s(fde);mAo=r(yZr,"longformer"),yZr.forEach(t),gAo=r(Cwe," \u2014 "),Pj=n(Cwe,"A",{href:!0});var LZr=s(Pj);hAo=r(LZr,"LongformerForSequenceClassification"),LZr.forEach(t),pAo=r(Cwe," (Longformer model)"),Cwe.forEach(t),uAo=i(N),Cb=n(N,"LI",{});var wwe=s(Cb);mde=n(wwe,"STRONG",{});var xZr=s(mde);_Ao=r(xZr,"mbart"),xZr.forEach(t),bAo=r(wwe," \u2014 "),Ij=n(wwe,"A",{href:!0});var $Zr=s(Ij);vAo=r($Zr,"MBartForSequenceClassification"),$Zr.forEach(t),FAo=r(wwe," (mBART model)"),wwe.forEach(t),TAo=i(N),wb=n(N,"LI",{});var Awe=s(wb);gde=n(Awe,"STRONG",{});var kZr=s(gde);MAo=r(kZr,"megatron-bert"),kZr.forEach(t),EAo=r(Awe," \u2014 "),qj=n(Awe,"A",{href:!0});var SZr=s(qj);CAo=r(SZr,"MegatronBertForSequenceClassification"),SZr.forEach(t),wAo=r(Awe," (MegatronBert model)"),Awe.forEach(t),AAo=i(N),Ab=n(N,"LI",{});var ywe=s(Ab);hde=n(ywe,"STRONG",{});var RZr=s(hde);yAo=r(RZr,"mobilebert"),RZr.forEach(t),LAo=r(ywe," \u2014 "),Nj=n(ywe,"A",{href:!0});var BZr=s(Nj);xAo=r(BZr,"MobileBertForSequenceClassification"),BZr.forEach(t),$Ao=r(ywe," (MobileBERT model)"),ywe.forEach(t),kAo=i(N),yb=n(N,"LI",{});var Lwe=s(yb);pde=n(Lwe,"STRONG",{});var PZr=s(pde);SAo=r(PZr,"mpnet"),PZr.forEach(t),RAo=r(Lwe," \u2014 "),jj=n(Lwe,"A",{href:!0});var IZr=s(jj);BAo=r(IZr,"MPNetForSequenceClassification"),IZr.forEach(t),PAo=r(Lwe," (MPNet model)"),Lwe.forEach(t),IAo=i(N),Lb=n(N,"LI",{});var xwe=s(Lb);ude=n(xwe,"STRONG",{});var qZr=s(ude);qAo=r(qZr,"nystromformer"),qZr.forEach(t),NAo=r(xwe," \u2014 "),Dj=n(xwe,"A",{href:!0});var NZr=s(Dj);jAo=r(NZr,"NystromformerForSequenceClassification"),NZr.forEach(t),DAo=r(xwe," (Nystromformer model)"),xwe.forEach(t),GAo=i(N),xb=n(N,"LI",{});var $we=s(xb);_de=n($we,"STRONG",{});var jZr=s(_de);OAo=r(jZr,"openai-gpt"),jZr.forEach(t),VAo=r($we," \u2014 "),Gj=n($we,"A",{href:!0});var DZr=s(Gj);XAo=r(DZr,"OpenAIGPTForSequenceClassification"),DZr.forEach(t),zAo=r($we," (OpenAI GPT model)"),$we.forEach(t),QAo=i(N),$b=n(N,"LI",{});var kwe=s($b);bde=n(kwe,"STRONG",{});var GZr=s(bde);WAo=r(GZr,"perceiver"),GZr.forEach(t),HAo=r(kwe," \u2014 "),Oj=n(kwe,"A",{href:!0});var OZr=s(Oj);UAo=r(OZr,"PerceiverForSequenceClassification"),OZr.forEach(t),JAo=r(kwe," (Perceiver model)"),kwe.forEach(t),YAo=i(N),kb=n(N,"LI",{});var Swe=s(kb);vde=n(Swe,"STRONG",{});var VZr=s(vde);KAo=r(VZr,"plbart"),VZr.forEach(t),ZAo=r(Swe," \u2014 "),Vj=n(Swe,"A",{href:!0});var XZr=s(Vj);eyo=r(XZr,"PLBartForSequenceClassification"),XZr.forEach(t),oyo=r(Swe," (PLBart model)"),Swe.forEach(t),ryo=i(N),Sb=n(N,"LI",{});var Rwe=s(Sb);Fde=n(Rwe,"STRONG",{});var zZr=s(Fde);tyo=r(zZr,"qdqbert"),zZr.forEach(t),ayo=r(Rwe," \u2014 "),Xj=n(Rwe,"A",{href:!0});var QZr=s(Xj);nyo=r(QZr,"QDQBertForSequenceClassification"),QZr.forEach(t),syo=r(Rwe," (QDQBert model)"),Rwe.forEach(t),lyo=i(N),Rb=n(N,"LI",{});var Bwe=s(Rb);Tde=n(Bwe,"STRONG",{});var WZr=s(Tde);iyo=r(WZr,"reformer"),WZr.forEach(t),dyo=r(Bwe," \u2014 "),zj=n(Bwe,"A",{href:!0});var HZr=s(zj);cyo=r(HZr,"ReformerForSequenceClassification"),HZr.forEach(t),fyo=r(Bwe," (Reformer model)"),Bwe.forEach(t),myo=i(N),Bb=n(N,"LI",{});var Pwe=s(Bb);Mde=n(Pwe,"STRONG",{});var UZr=s(Mde);gyo=r(UZr,"rembert"),UZr.forEach(t),hyo=r(Pwe," \u2014 "),Qj=n(Pwe,"A",{href:!0});var JZr=s(Qj);pyo=r(JZr,"RemBertForSequenceClassification"),JZr.forEach(t),uyo=r(Pwe," (RemBERT model)"),Pwe.forEach(t),_yo=i(N),Pb=n(N,"LI",{});var Iwe=s(Pb);Ede=n(Iwe,"STRONG",{});var YZr=s(Ede);byo=r(YZr,"roberta"),YZr.forEach(t),vyo=r(Iwe," \u2014 "),Wj=n(Iwe,"A",{href:!0});var KZr=s(Wj);Fyo=r(KZr,"RobertaForSequenceClassification"),KZr.forEach(t),Tyo=r(Iwe," (RoBERTa model)"),Iwe.forEach(t),Myo=i(N),Ib=n(N,"LI",{});var qwe=s(Ib);Cde=n(qwe,"STRONG",{});var ZZr=s(Cde);Eyo=r(ZZr,"roformer"),ZZr.forEach(t),Cyo=r(qwe," \u2014 "),Hj=n(qwe,"A",{href:!0});var eet=s(Hj);wyo=r(eet,"RoFormerForSequenceClassification"),eet.forEach(t),Ayo=r(qwe," (RoFormer model)"),qwe.forEach(t),yyo=i(N),qb=n(N,"LI",{});var Nwe=s(qb);wde=n(Nwe,"STRONG",{});var oet=s(wde);Lyo=r(oet,"squeezebert"),oet.forEach(t),xyo=r(Nwe," \u2014 "),Uj=n(Nwe,"A",{href:!0});var ret=s(Uj);$yo=r(ret,"SqueezeBertForSequenceClassification"),ret.forEach(t),kyo=r(Nwe," (SqueezeBERT model)"),Nwe.forEach(t),Syo=i(N),Nb=n(N,"LI",{});var jwe=s(Nb);Ade=n(jwe,"STRONG",{});var tet=s(Ade);Ryo=r(tet,"tapas"),tet.forEach(t),Byo=r(jwe," \u2014 "),Jj=n(jwe,"A",{href:!0});var aet=s(Jj);Pyo=r(aet,"TapasForSequenceClassification"),aet.forEach(t),Iyo=r(jwe," (TAPAS model)"),jwe.forEach(t),qyo=i(N),jb=n(N,"LI",{});var Dwe=s(jb);yde=n(Dwe,"STRONG",{});var net=s(yde);Nyo=r(net,"tapex"),net.forEach(t),jyo=r(Dwe," \u2014 "),Yj=n(Dwe,"A",{href:!0});var set=s(Yj);Dyo=r(set,"BartForSequenceClassification"),set.forEach(t),Gyo=r(Dwe," (TAPEX model)"),Dwe.forEach(t),Oyo=i(N),Db=n(N,"LI",{});var Gwe=s(Db);Lde=n(Gwe,"STRONG",{});var iet=s(Lde);Vyo=r(iet,"transfo-xl"),iet.forEach(t),Xyo=r(Gwe," \u2014 "),Kj=n(Gwe,"A",{href:!0});var det=s(Kj);zyo=r(det,"TransfoXLForSequenceClassification"),det.forEach(t),Qyo=r(Gwe," (Transformer-XL model)"),Gwe.forEach(t),Wyo=i(N),Gb=n(N,"LI",{});var Owe=s(Gb);xde=n(Owe,"STRONG",{});var cet=s(xde);Hyo=r(cet,"xlm"),cet.forEach(t),Uyo=r(Owe," \u2014 "),Zj=n(Owe,"A",{href:!0});var fet=s(Zj);Jyo=r(fet,"XLMForSequenceClassification"),fet.forEach(t),Yyo=r(Owe," (XLM model)"),Owe.forEach(t),Kyo=i(N),Ob=n(N,"LI",{});var Vwe=s(Ob);$de=n(Vwe,"STRONG",{});var met=s($de);Zyo=r(met,"xlm-roberta"),met.forEach(t),eLo=r(Vwe," \u2014 "),eD=n(Vwe,"A",{href:!0});var get=s(eD);oLo=r(get,"XLMRobertaForSequenceClassification"),get.forEach(t),rLo=r(Vwe," (XLM-RoBERTa model)"),Vwe.forEach(t),tLo=i(N),Vb=n(N,"LI",{});var Xwe=s(Vb);kde=n(Xwe,"STRONG",{});var het=s(kde);aLo=r(het,"xlm-roberta-xl"),het.forEach(t),nLo=r(Xwe," \u2014 "),oD=n(Xwe,"A",{href:!0});var pet=s(oD);sLo=r(pet,"XLMRobertaXLForSequenceClassification"),pet.forEach(t),lLo=r(Xwe," (XLM-RoBERTa-XL model)"),Xwe.forEach(t),iLo=i(N),Xb=n(N,"LI",{});var zwe=s(Xb);Sde=n(zwe,"STRONG",{});var uet=s(Sde);dLo=r(uet,"xlnet"),uet.forEach(t),cLo=r(zwe," \u2014 "),rD=n(zwe,"A",{href:!0});var _et=s(rD);fLo=r(_et,"XLNetForSequenceClassification"),_et.forEach(t),mLo=r(zwe," (XLNet model)"),zwe.forEach(t),gLo=i(N),zb=n(N,"LI",{});var Qwe=s(zb);Rde=n(Qwe,"STRONG",{});var bet=s(Rde);hLo=r(bet,"yoso"),bet.forEach(t),pLo=r(Qwe," \u2014 "),tD=n(Qwe,"A",{href:!0});var vet=s(tD);uLo=r(vet,"YosoForSequenceClassification"),vet.forEach(t),_Lo=r(Qwe," (YOSO model)"),Qwe.forEach(t),N.forEach(t),bLo=i(ea),Qb=n(ea,"P",{});var Wwe=s(Qb);vLo=r(Wwe,"The model is set in evaluation mode by default using "),Bde=n(Wwe,"CODE",{});var Fet=s(Bde);FLo=r(Fet,"model.eval()"),Fet.forEach(t),TLo=r(Wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(Wwe,"CODE",{});var Tet=s(Pde);MLo=r(Tet,"model.train()"),Tet.forEach(t),Wwe.forEach(t),ELo=i(ea),T(Wb.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),rBe=i(f),Bi=n(f,"H2",{class:!0});var aIe=s(Bi);Hb=n(aIe,"A",{id:!0,class:!0,href:!0});var Met=s(Hb);Ide=n(Met,"SPAN",{});var Eet=s(Ide);T(_w.$$.fragment,Eet),Eet.forEach(t),Met.forEach(t),CLo=i(aIe),qde=n(aIe,"SPAN",{});var Cet=s(qde);wLo=r(Cet,"AutoModelForMultipleChoice"),Cet.forEach(t),aIe.forEach(t),tBe=i(f),So=n(f,"DIV",{class:!0});var Gs=s(So);T(bw.$$.fragment,Gs),ALo=i(Gs),Pi=n(Gs,"P",{});var iY=s(Pi);yLo=r(iY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aD=n(iY,"A",{href:!0});var wet=s(aD);LLo=r(wet,"from_pretrained()"),wet.forEach(t),xLo=r(iY," class method or the "),nD=n(iY,"A",{href:!0});var Aet=s(nD);$Lo=r(Aet,"from_config()"),Aet.forEach(t),kLo=r(iY,` class
method.`),iY.forEach(t),SLo=i(Gs),vw=n(Gs,"P",{});var nIe=s(vw);RLo=r(nIe,"This class cannot be instantiated directly using "),Nde=n(nIe,"CODE",{});var yet=s(Nde);BLo=r(yet,"__init__()"),yet.forEach(t),PLo=r(nIe," (throws an error)."),nIe.forEach(t),ILo=i(Gs),at=n(Gs,"DIV",{class:!0});var k5=s(at);T(Fw.$$.fragment,k5),qLo=i(k5),jde=n(k5,"P",{});var Let=s(jde);NLo=r(Let,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Let.forEach(t),jLo=i(k5),Ii=n(k5,"P",{});var dY=s(Ii);DLo=r(dY,`Note:
Loading a model from its configuration file does `),Dde=n(dY,"STRONG",{});var xet=s(Dde);GLo=r(xet,"not"),xet.forEach(t),OLo=r(dY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=n(dY,"A",{href:!0});var $et=s(sD);VLo=r($et,"from_pretrained()"),$et.forEach(t),XLo=r(dY," to load the model weights."),dY.forEach(t),zLo=i(k5),T(Ub.$$.fragment,k5),k5.forEach(t),QLo=i(Gs),Ke=n(Gs,"DIV",{class:!0});var oa=s(Ke);T(Tw.$$.fragment,oa),WLo=i(oa),Gde=n(oa,"P",{});var ket=s(Gde);HLo=r(ket,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ket.forEach(t),ULo=i(oa),La=n(oa,"P",{});var S5=s(La);JLo=r(S5,"The model class to instantiate is selected based on the "),Ode=n(S5,"CODE",{});var Set=s(Ode);YLo=r(Set,"model_type"),Set.forEach(t),KLo=r(S5,` property of the config object (either
passed as an argument or loaded from `),Vde=n(S5,"CODE",{});var Ret=s(Vde);ZLo=r(Ret,"pretrained_model_name_or_path"),Ret.forEach(t),e7o=r(S5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=n(S5,"CODE",{});var Bet=s(Xde);o7o=r(Bet,"pretrained_model_name_or_path"),Bet.forEach(t),r7o=r(S5,":"),S5.forEach(t),t7o=i(oa),Y=n(oa,"UL",{});var K=s(Y);Jb=n(K,"LI",{});var Hwe=s(Jb);zde=n(Hwe,"STRONG",{});var Pet=s(zde);a7o=r(Pet,"albert"),Pet.forEach(t),n7o=r(Hwe," \u2014 "),lD=n(Hwe,"A",{href:!0});var Iet=s(lD);s7o=r(Iet,"AlbertForMultipleChoice"),Iet.forEach(t),l7o=r(Hwe," (ALBERT model)"),Hwe.forEach(t),i7o=i(K),Yb=n(K,"LI",{});var Uwe=s(Yb);Qde=n(Uwe,"STRONG",{});var qet=s(Qde);d7o=r(qet,"bert"),qet.forEach(t),c7o=r(Uwe," \u2014 "),iD=n(Uwe,"A",{href:!0});var Net=s(iD);f7o=r(Net,"BertForMultipleChoice"),Net.forEach(t),m7o=r(Uwe," (BERT model)"),Uwe.forEach(t),g7o=i(K),Kb=n(K,"LI",{});var Jwe=s(Kb);Wde=n(Jwe,"STRONG",{});var jet=s(Wde);h7o=r(jet,"big_bird"),jet.forEach(t),p7o=r(Jwe," \u2014 "),dD=n(Jwe,"A",{href:!0});var Det=s(dD);u7o=r(Det,"BigBirdForMultipleChoice"),Det.forEach(t),_7o=r(Jwe," (BigBird model)"),Jwe.forEach(t),b7o=i(K),Zb=n(K,"LI",{});var Ywe=s(Zb);Hde=n(Ywe,"STRONG",{});var Get=s(Hde);v7o=r(Get,"camembert"),Get.forEach(t),F7o=r(Ywe," \u2014 "),cD=n(Ywe,"A",{href:!0});var Oet=s(cD);T7o=r(Oet,"CamembertForMultipleChoice"),Oet.forEach(t),M7o=r(Ywe," (CamemBERT model)"),Ywe.forEach(t),E7o=i(K),e2=n(K,"LI",{});var Kwe=s(e2);Ude=n(Kwe,"STRONG",{});var Vet=s(Ude);C7o=r(Vet,"canine"),Vet.forEach(t),w7o=r(Kwe," \u2014 "),fD=n(Kwe,"A",{href:!0});var Xet=s(fD);A7o=r(Xet,"CanineForMultipleChoice"),Xet.forEach(t),y7o=r(Kwe," (Canine model)"),Kwe.forEach(t),L7o=i(K),o2=n(K,"LI",{});var Zwe=s(o2);Jde=n(Zwe,"STRONG",{});var zet=s(Jde);x7o=r(zet,"convbert"),zet.forEach(t),$7o=r(Zwe," \u2014 "),mD=n(Zwe,"A",{href:!0});var Qet=s(mD);k7o=r(Qet,"ConvBertForMultipleChoice"),Qet.forEach(t),S7o=r(Zwe," (ConvBERT model)"),Zwe.forEach(t),R7o=i(K),r2=n(K,"LI",{});var eAe=s(r2);Yde=n(eAe,"STRONG",{});var Wet=s(Yde);B7o=r(Wet,"data2vec-text"),Wet.forEach(t),P7o=r(eAe," \u2014 "),gD=n(eAe,"A",{href:!0});var Het=s(gD);I7o=r(Het,"Data2VecTextForMultipleChoice"),Het.forEach(t),q7o=r(eAe," (Data2VecText model)"),eAe.forEach(t),N7o=i(K),t2=n(K,"LI",{});var oAe=s(t2);Kde=n(oAe,"STRONG",{});var Uet=s(Kde);j7o=r(Uet,"distilbert"),Uet.forEach(t),D7o=r(oAe," \u2014 "),hD=n(oAe,"A",{href:!0});var Jet=s(hD);G7o=r(Jet,"DistilBertForMultipleChoice"),Jet.forEach(t),O7o=r(oAe," (DistilBERT model)"),oAe.forEach(t),V7o=i(K),a2=n(K,"LI",{});var rAe=s(a2);Zde=n(rAe,"STRONG",{});var Yet=s(Zde);X7o=r(Yet,"electra"),Yet.forEach(t),z7o=r(rAe," \u2014 "),pD=n(rAe,"A",{href:!0});var Ket=s(pD);Q7o=r(Ket,"ElectraForMultipleChoice"),Ket.forEach(t),W7o=r(rAe," (ELECTRA model)"),rAe.forEach(t),H7o=i(K),n2=n(K,"LI",{});var tAe=s(n2);ece=n(tAe,"STRONG",{});var Zet=s(ece);U7o=r(Zet,"flaubert"),Zet.forEach(t),J7o=r(tAe," \u2014 "),uD=n(tAe,"A",{href:!0});var eot=s(uD);Y7o=r(eot,"FlaubertForMultipleChoice"),eot.forEach(t),K7o=r(tAe," (FlauBERT model)"),tAe.forEach(t),Z7o=i(K),s2=n(K,"LI",{});var aAe=s(s2);oce=n(aAe,"STRONG",{});var oot=s(oce);exo=r(oot,"fnet"),oot.forEach(t),oxo=r(aAe," \u2014 "),_D=n(aAe,"A",{href:!0});var rot=s(_D);rxo=r(rot,"FNetForMultipleChoice"),rot.forEach(t),txo=r(aAe," (FNet model)"),aAe.forEach(t),axo=i(K),l2=n(K,"LI",{});var nAe=s(l2);rce=n(nAe,"STRONG",{});var tot=s(rce);nxo=r(tot,"funnel"),tot.forEach(t),sxo=r(nAe," \u2014 "),bD=n(nAe,"A",{href:!0});var aot=s(bD);lxo=r(aot,"FunnelForMultipleChoice"),aot.forEach(t),ixo=r(nAe," (Funnel Transformer model)"),nAe.forEach(t),dxo=i(K),i2=n(K,"LI",{});var sAe=s(i2);tce=n(sAe,"STRONG",{});var not=s(tce);cxo=r(not,"ibert"),not.forEach(t),fxo=r(sAe," \u2014 "),vD=n(sAe,"A",{href:!0});var sot=s(vD);mxo=r(sot,"IBertForMultipleChoice"),sot.forEach(t),gxo=r(sAe," (I-BERT model)"),sAe.forEach(t),hxo=i(K),d2=n(K,"LI",{});var lAe=s(d2);ace=n(lAe,"STRONG",{});var lot=s(ace);pxo=r(lot,"longformer"),lot.forEach(t),uxo=r(lAe," \u2014 "),FD=n(lAe,"A",{href:!0});var iot=s(FD);_xo=r(iot,"LongformerForMultipleChoice"),iot.forEach(t),bxo=r(lAe," (Longformer model)"),lAe.forEach(t),vxo=i(K),c2=n(K,"LI",{});var iAe=s(c2);nce=n(iAe,"STRONG",{});var dot=s(nce);Fxo=r(dot,"megatron-bert"),dot.forEach(t),Txo=r(iAe," \u2014 "),TD=n(iAe,"A",{href:!0});var cot=s(TD);Mxo=r(cot,"MegatronBertForMultipleChoice"),cot.forEach(t),Exo=r(iAe," (MegatronBert model)"),iAe.forEach(t),Cxo=i(K),f2=n(K,"LI",{});var dAe=s(f2);sce=n(dAe,"STRONG",{});var fot=s(sce);wxo=r(fot,"mobilebert"),fot.forEach(t),Axo=r(dAe," \u2014 "),MD=n(dAe,"A",{href:!0});var mot=s(MD);yxo=r(mot,"MobileBertForMultipleChoice"),mot.forEach(t),Lxo=r(dAe," (MobileBERT model)"),dAe.forEach(t),xxo=i(K),m2=n(K,"LI",{});var cAe=s(m2);lce=n(cAe,"STRONG",{});var got=s(lce);$xo=r(got,"mpnet"),got.forEach(t),kxo=r(cAe," \u2014 "),ED=n(cAe,"A",{href:!0});var hot=s(ED);Sxo=r(hot,"MPNetForMultipleChoice"),hot.forEach(t),Rxo=r(cAe," (MPNet model)"),cAe.forEach(t),Bxo=i(K),g2=n(K,"LI",{});var fAe=s(g2);ice=n(fAe,"STRONG",{});var pot=s(ice);Pxo=r(pot,"nystromformer"),pot.forEach(t),Ixo=r(fAe," \u2014 "),CD=n(fAe,"A",{href:!0});var uot=s(CD);qxo=r(uot,"NystromformerForMultipleChoice"),uot.forEach(t),Nxo=r(fAe," (Nystromformer model)"),fAe.forEach(t),jxo=i(K),h2=n(K,"LI",{});var mAe=s(h2);dce=n(mAe,"STRONG",{});var _ot=s(dce);Dxo=r(_ot,"qdqbert"),_ot.forEach(t),Gxo=r(mAe," \u2014 "),wD=n(mAe,"A",{href:!0});var bot=s(wD);Oxo=r(bot,"QDQBertForMultipleChoice"),bot.forEach(t),Vxo=r(mAe," (QDQBert model)"),mAe.forEach(t),Xxo=i(K),p2=n(K,"LI",{});var gAe=s(p2);cce=n(gAe,"STRONG",{});var vot=s(cce);zxo=r(vot,"rembert"),vot.forEach(t),Qxo=r(gAe," \u2014 "),AD=n(gAe,"A",{href:!0});var Fot=s(AD);Wxo=r(Fot,"RemBertForMultipleChoice"),Fot.forEach(t),Hxo=r(gAe," (RemBERT model)"),gAe.forEach(t),Uxo=i(K),u2=n(K,"LI",{});var hAe=s(u2);fce=n(hAe,"STRONG",{});var Tot=s(fce);Jxo=r(Tot,"roberta"),Tot.forEach(t),Yxo=r(hAe," \u2014 "),yD=n(hAe,"A",{href:!0});var Mot=s(yD);Kxo=r(Mot,"RobertaForMultipleChoice"),Mot.forEach(t),Zxo=r(hAe," (RoBERTa model)"),hAe.forEach(t),e$o=i(K),_2=n(K,"LI",{});var pAe=s(_2);mce=n(pAe,"STRONG",{});var Eot=s(mce);o$o=r(Eot,"roformer"),Eot.forEach(t),r$o=r(pAe," \u2014 "),LD=n(pAe,"A",{href:!0});var Cot=s(LD);t$o=r(Cot,"RoFormerForMultipleChoice"),Cot.forEach(t),a$o=r(pAe," (RoFormer model)"),pAe.forEach(t),n$o=i(K),b2=n(K,"LI",{});var uAe=s(b2);gce=n(uAe,"STRONG",{});var wot=s(gce);s$o=r(wot,"squeezebert"),wot.forEach(t),l$o=r(uAe," \u2014 "),xD=n(uAe,"A",{href:!0});var Aot=s(xD);i$o=r(Aot,"SqueezeBertForMultipleChoice"),Aot.forEach(t),d$o=r(uAe," (SqueezeBERT model)"),uAe.forEach(t),c$o=i(K),v2=n(K,"LI",{});var _Ae=s(v2);hce=n(_Ae,"STRONG",{});var yot=s(hce);f$o=r(yot,"xlm"),yot.forEach(t),m$o=r(_Ae," \u2014 "),$D=n(_Ae,"A",{href:!0});var Lot=s($D);g$o=r(Lot,"XLMForMultipleChoice"),Lot.forEach(t),h$o=r(_Ae," (XLM model)"),_Ae.forEach(t),p$o=i(K),F2=n(K,"LI",{});var bAe=s(F2);pce=n(bAe,"STRONG",{});var xot=s(pce);u$o=r(xot,"xlm-roberta"),xot.forEach(t),_$o=r(bAe," \u2014 "),kD=n(bAe,"A",{href:!0});var $ot=s(kD);b$o=r($ot,"XLMRobertaForMultipleChoice"),$ot.forEach(t),v$o=r(bAe," (XLM-RoBERTa model)"),bAe.forEach(t),F$o=i(K),T2=n(K,"LI",{});var vAe=s(T2);uce=n(vAe,"STRONG",{});var kot=s(uce);T$o=r(kot,"xlm-roberta-xl"),kot.forEach(t),M$o=r(vAe," \u2014 "),SD=n(vAe,"A",{href:!0});var Sot=s(SD);E$o=r(Sot,"XLMRobertaXLForMultipleChoice"),Sot.forEach(t),C$o=r(vAe," (XLM-RoBERTa-XL model)"),vAe.forEach(t),w$o=i(K),M2=n(K,"LI",{});var FAe=s(M2);_ce=n(FAe,"STRONG",{});var Rot=s(_ce);A$o=r(Rot,"xlnet"),Rot.forEach(t),y$o=r(FAe," \u2014 "),RD=n(FAe,"A",{href:!0});var Bot=s(RD);L$o=r(Bot,"XLNetForMultipleChoice"),Bot.forEach(t),x$o=r(FAe," (XLNet model)"),FAe.forEach(t),$$o=i(K),E2=n(K,"LI",{});var TAe=s(E2);bce=n(TAe,"STRONG",{});var Pot=s(bce);k$o=r(Pot,"yoso"),Pot.forEach(t),S$o=r(TAe," \u2014 "),BD=n(TAe,"A",{href:!0});var Iot=s(BD);R$o=r(Iot,"YosoForMultipleChoice"),Iot.forEach(t),B$o=r(TAe," (YOSO model)"),TAe.forEach(t),K.forEach(t),P$o=i(oa),C2=n(oa,"P",{});var MAe=s(C2);I$o=r(MAe,"The model is set in evaluation mode by default using "),vce=n(MAe,"CODE",{});var qot=s(vce);q$o=r(qot,"model.eval()"),qot.forEach(t),N$o=r(MAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=n(MAe,"CODE",{});var Not=s(Fce);j$o=r(Not,"model.train()"),Not.forEach(t),MAe.forEach(t),D$o=i(oa),T(w2.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),aBe=i(f),qi=n(f,"H2",{class:!0});var sIe=s(qi);A2=n(sIe,"A",{id:!0,class:!0,href:!0});var jot=s(A2);Tce=n(jot,"SPAN",{});var Dot=s(Tce);T(Mw.$$.fragment,Dot),Dot.forEach(t),jot.forEach(t),G$o=i(sIe),Mce=n(sIe,"SPAN",{});var Got=s(Mce);O$o=r(Got,"AutoModelForNextSentencePrediction"),Got.forEach(t),sIe.forEach(t),nBe=i(f),Ro=n(f,"DIV",{class:!0});var Os=s(Ro);T(Ew.$$.fragment,Os),V$o=i(Os),Ni=n(Os,"P",{});var cY=s(Ni);X$o=r(cY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PD=n(cY,"A",{href:!0});var Oot=s(PD);z$o=r(Oot,"from_pretrained()"),Oot.forEach(t),Q$o=r(cY," class method or the "),ID=n(cY,"A",{href:!0});var Vot=s(ID);W$o=r(Vot,"from_config()"),Vot.forEach(t),H$o=r(cY,` class
method.`),cY.forEach(t),U$o=i(Os),Cw=n(Os,"P",{});var lIe=s(Cw);J$o=r(lIe,"This class cannot be instantiated directly using "),Ece=n(lIe,"CODE",{});var Xot=s(Ece);Y$o=r(Xot,"__init__()"),Xot.forEach(t),K$o=r(lIe," (throws an error)."),lIe.forEach(t),Z$o=i(Os),nt=n(Os,"DIV",{class:!0});var R5=s(nt);T(ww.$$.fragment,R5),eko=i(R5),Cce=n(R5,"P",{});var zot=s(Cce);oko=r(zot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zot.forEach(t),rko=i(R5),ji=n(R5,"P",{});var fY=s(ji);tko=r(fY,`Note:
Loading a model from its configuration file does `),wce=n(fY,"STRONG",{});var Qot=s(wce);ako=r(Qot,"not"),Qot.forEach(t),nko=r(fY,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(fY,"A",{href:!0});var Wot=s(qD);sko=r(Wot,"from_pretrained()"),Wot.forEach(t),lko=r(fY," to load the model weights."),fY.forEach(t),iko=i(R5),T(y2.$$.fragment,R5),R5.forEach(t),dko=i(Os),Ze=n(Os,"DIV",{class:!0});var ra=s(Ze);T(Aw.$$.fragment,ra),cko=i(ra),Ace=n(ra,"P",{});var Hot=s(Ace);fko=r(Hot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Hot.forEach(t),mko=i(ra),xa=n(ra,"P",{});var B5=s(xa);gko=r(B5,"The model class to instantiate is selected based on the "),yce=n(B5,"CODE",{});var Uot=s(yce);hko=r(Uot,"model_type"),Uot.forEach(t),pko=r(B5,` property of the config object (either
passed as an argument or loaded from `),Lce=n(B5,"CODE",{});var Jot=s(Lce);uko=r(Jot,"pretrained_model_name_or_path"),Jot.forEach(t),_ko=r(B5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=n(B5,"CODE",{});var Yot=s(xce);bko=r(Yot,"pretrained_model_name_or_path"),Yot.forEach(t),vko=r(B5,":"),B5.forEach(t),Fko=i(ra),Wr=n(ra,"UL",{});var Vs=s(Wr);L2=n(Vs,"LI",{});var EAe=s(L2);$ce=n(EAe,"STRONG",{});var Kot=s($ce);Tko=r(Kot,"bert"),Kot.forEach(t),Mko=r(EAe," \u2014 "),ND=n(EAe,"A",{href:!0});var Zot=s(ND);Eko=r(Zot,"BertForNextSentencePrediction"),Zot.forEach(t),Cko=r(EAe," (BERT model)"),EAe.forEach(t),wko=i(Vs),x2=n(Vs,"LI",{});var CAe=s(x2);kce=n(CAe,"STRONG",{});var ert=s(kce);Ako=r(ert,"fnet"),ert.forEach(t),yko=r(CAe," \u2014 "),jD=n(CAe,"A",{href:!0});var ort=s(jD);Lko=r(ort,"FNetForNextSentencePrediction"),ort.forEach(t),xko=r(CAe," (FNet model)"),CAe.forEach(t),$ko=i(Vs),$2=n(Vs,"LI",{});var wAe=s($2);Sce=n(wAe,"STRONG",{});var rrt=s(Sce);kko=r(rrt,"megatron-bert"),rrt.forEach(t),Sko=r(wAe," \u2014 "),DD=n(wAe,"A",{href:!0});var trt=s(DD);Rko=r(trt,"MegatronBertForNextSentencePrediction"),trt.forEach(t),Bko=r(wAe," (MegatronBert model)"),wAe.forEach(t),Pko=i(Vs),k2=n(Vs,"LI",{});var AAe=s(k2);Rce=n(AAe,"STRONG",{});var art=s(Rce);Iko=r(art,"mobilebert"),art.forEach(t),qko=r(AAe," \u2014 "),GD=n(AAe,"A",{href:!0});var nrt=s(GD);Nko=r(nrt,"MobileBertForNextSentencePrediction"),nrt.forEach(t),jko=r(AAe," (MobileBERT model)"),AAe.forEach(t),Dko=i(Vs),S2=n(Vs,"LI",{});var yAe=s(S2);Bce=n(yAe,"STRONG",{});var srt=s(Bce);Gko=r(srt,"qdqbert"),srt.forEach(t),Oko=r(yAe," \u2014 "),OD=n(yAe,"A",{href:!0});var lrt=s(OD);Vko=r(lrt,"QDQBertForNextSentencePrediction"),lrt.forEach(t),Xko=r(yAe," (QDQBert model)"),yAe.forEach(t),Vs.forEach(t),zko=i(ra),R2=n(ra,"P",{});var LAe=s(R2);Qko=r(LAe,"The model is set in evaluation mode by default using "),Pce=n(LAe,"CODE",{});var irt=s(Pce);Wko=r(irt,"model.eval()"),irt.forEach(t),Hko=r(LAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=n(LAe,"CODE",{});var drt=s(Ice);Uko=r(drt,"model.train()"),drt.forEach(t),LAe.forEach(t),Jko=i(ra),T(B2.$$.fragment,ra),ra.forEach(t),Os.forEach(t),sBe=i(f),Di=n(f,"H2",{class:!0});var iIe=s(Di);P2=n(iIe,"A",{id:!0,class:!0,href:!0});var crt=s(P2);qce=n(crt,"SPAN",{});var frt=s(qce);T(yw.$$.fragment,frt),frt.forEach(t),crt.forEach(t),Yko=i(iIe),Nce=n(iIe,"SPAN",{});var mrt=s(Nce);Kko=r(mrt,"AutoModelForTokenClassification"),mrt.forEach(t),iIe.forEach(t),lBe=i(f),Bo=n(f,"DIV",{class:!0});var Xs=s(Bo);T(Lw.$$.fragment,Xs),Zko=i(Xs),Gi=n(Xs,"P",{});var mY=s(Gi);eSo=r(mY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VD=n(mY,"A",{href:!0});var grt=s(VD);oSo=r(grt,"from_pretrained()"),grt.forEach(t),rSo=r(mY," class method or the "),XD=n(mY,"A",{href:!0});var hrt=s(XD);tSo=r(hrt,"from_config()"),hrt.forEach(t),aSo=r(mY,` class
method.`),mY.forEach(t),nSo=i(Xs),xw=n(Xs,"P",{});var dIe=s(xw);sSo=r(dIe,"This class cannot be instantiated directly using "),jce=n(dIe,"CODE",{});var prt=s(jce);lSo=r(prt,"__init__()"),prt.forEach(t),iSo=r(dIe," (throws an error)."),dIe.forEach(t),dSo=i(Xs),st=n(Xs,"DIV",{class:!0});var P5=s(st);T($w.$$.fragment,P5),cSo=i(P5),Dce=n(P5,"P",{});var urt=s(Dce);fSo=r(urt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),urt.forEach(t),mSo=i(P5),Oi=n(P5,"P",{});var gY=s(Oi);gSo=r(gY,`Note:
Loading a model from its configuration file does `),Gce=n(gY,"STRONG",{});var _rt=s(Gce);hSo=r(_rt,"not"),_rt.forEach(t),pSo=r(gY,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(gY,"A",{href:!0});var brt=s(zD);uSo=r(brt,"from_pretrained()"),brt.forEach(t),_So=r(gY," to load the model weights."),gY.forEach(t),bSo=i(P5),T(I2.$$.fragment,P5),P5.forEach(t),vSo=i(Xs),eo=n(Xs,"DIV",{class:!0});var ta=s(eo);T(kw.$$.fragment,ta),FSo=i(ta),Oce=n(ta,"P",{});var vrt=s(Oce);TSo=r(vrt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vrt.forEach(t),MSo=i(ta),$a=n(ta,"P",{});var I5=s($a);ESo=r(I5,"The model class to instantiate is selected based on the "),Vce=n(I5,"CODE",{});var Frt=s(Vce);CSo=r(Frt,"model_type"),Frt.forEach(t),wSo=r(I5,` property of the config object (either
passed as an argument or loaded from `),Xce=n(I5,"CODE",{});var Trt=s(Xce);ASo=r(Trt,"pretrained_model_name_or_path"),Trt.forEach(t),ySo=r(I5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(I5,"CODE",{});var Mrt=s(zce);LSo=r(Mrt,"pretrained_model_name_or_path"),Mrt.forEach(t),xSo=r(I5,":"),I5.forEach(t),$So=i(ta),U=n(ta,"UL",{});var J=s(U);q2=n(J,"LI",{});var xAe=s(q2);Qce=n(xAe,"STRONG",{});var Ert=s(Qce);kSo=r(Ert,"albert"),Ert.forEach(t),SSo=r(xAe," \u2014 "),QD=n(xAe,"A",{href:!0});var Crt=s(QD);RSo=r(Crt,"AlbertForTokenClassification"),Crt.forEach(t),BSo=r(xAe," (ALBERT model)"),xAe.forEach(t),PSo=i(J),N2=n(J,"LI",{});var $Ae=s(N2);Wce=n($Ae,"STRONG",{});var wrt=s(Wce);ISo=r(wrt,"bert"),wrt.forEach(t),qSo=r($Ae," \u2014 "),WD=n($Ae,"A",{href:!0});var Art=s(WD);NSo=r(Art,"BertForTokenClassification"),Art.forEach(t),jSo=r($Ae," (BERT model)"),$Ae.forEach(t),DSo=i(J),j2=n(J,"LI",{});var kAe=s(j2);Hce=n(kAe,"STRONG",{});var yrt=s(Hce);GSo=r(yrt,"big_bird"),yrt.forEach(t),OSo=r(kAe," \u2014 "),HD=n(kAe,"A",{href:!0});var Lrt=s(HD);VSo=r(Lrt,"BigBirdForTokenClassification"),Lrt.forEach(t),XSo=r(kAe," (BigBird model)"),kAe.forEach(t),zSo=i(J),D2=n(J,"LI",{});var SAe=s(D2);Uce=n(SAe,"STRONG",{});var xrt=s(Uce);QSo=r(xrt,"camembert"),xrt.forEach(t),WSo=r(SAe," \u2014 "),UD=n(SAe,"A",{href:!0});var $rt=s(UD);HSo=r($rt,"CamembertForTokenClassification"),$rt.forEach(t),USo=r(SAe," (CamemBERT model)"),SAe.forEach(t),JSo=i(J),G2=n(J,"LI",{});var RAe=s(G2);Jce=n(RAe,"STRONG",{});var krt=s(Jce);YSo=r(krt,"canine"),krt.forEach(t),KSo=r(RAe," \u2014 "),JD=n(RAe,"A",{href:!0});var Srt=s(JD);ZSo=r(Srt,"CanineForTokenClassification"),Srt.forEach(t),eRo=r(RAe," (Canine model)"),RAe.forEach(t),oRo=i(J),O2=n(J,"LI",{});var BAe=s(O2);Yce=n(BAe,"STRONG",{});var Rrt=s(Yce);rRo=r(Rrt,"convbert"),Rrt.forEach(t),tRo=r(BAe," \u2014 "),YD=n(BAe,"A",{href:!0});var Brt=s(YD);aRo=r(Brt,"ConvBertForTokenClassification"),Brt.forEach(t),nRo=r(BAe," (ConvBERT model)"),BAe.forEach(t),sRo=i(J),V2=n(J,"LI",{});var PAe=s(V2);Kce=n(PAe,"STRONG",{});var Prt=s(Kce);lRo=r(Prt,"data2vec-text"),Prt.forEach(t),iRo=r(PAe," \u2014 "),KD=n(PAe,"A",{href:!0});var Irt=s(KD);dRo=r(Irt,"Data2VecTextForTokenClassification"),Irt.forEach(t),cRo=r(PAe," (Data2VecText model)"),PAe.forEach(t),fRo=i(J),X2=n(J,"LI",{});var IAe=s(X2);Zce=n(IAe,"STRONG",{});var qrt=s(Zce);mRo=r(qrt,"deberta"),qrt.forEach(t),gRo=r(IAe," \u2014 "),ZD=n(IAe,"A",{href:!0});var Nrt=s(ZD);hRo=r(Nrt,"DebertaForTokenClassification"),Nrt.forEach(t),pRo=r(IAe," (DeBERTa model)"),IAe.forEach(t),uRo=i(J),z2=n(J,"LI",{});var qAe=s(z2);efe=n(qAe,"STRONG",{});var jrt=s(efe);_Ro=r(jrt,"deberta-v2"),jrt.forEach(t),bRo=r(qAe," \u2014 "),eG=n(qAe,"A",{href:!0});var Drt=s(eG);vRo=r(Drt,"DebertaV2ForTokenClassification"),Drt.forEach(t),FRo=r(qAe," (DeBERTa-v2 model)"),qAe.forEach(t),TRo=i(J),Q2=n(J,"LI",{});var NAe=s(Q2);ofe=n(NAe,"STRONG",{});var Grt=s(ofe);MRo=r(Grt,"distilbert"),Grt.forEach(t),ERo=r(NAe," \u2014 "),oG=n(NAe,"A",{href:!0});var Ort=s(oG);CRo=r(Ort,"DistilBertForTokenClassification"),Ort.forEach(t),wRo=r(NAe," (DistilBERT model)"),NAe.forEach(t),ARo=i(J),W2=n(J,"LI",{});var jAe=s(W2);rfe=n(jAe,"STRONG",{});var Vrt=s(rfe);yRo=r(Vrt,"electra"),Vrt.forEach(t),LRo=r(jAe," \u2014 "),rG=n(jAe,"A",{href:!0});var Xrt=s(rG);xRo=r(Xrt,"ElectraForTokenClassification"),Xrt.forEach(t),$Ro=r(jAe," (ELECTRA model)"),jAe.forEach(t),kRo=i(J),H2=n(J,"LI",{});var DAe=s(H2);tfe=n(DAe,"STRONG",{});var zrt=s(tfe);SRo=r(zrt,"flaubert"),zrt.forEach(t),RRo=r(DAe," \u2014 "),tG=n(DAe,"A",{href:!0});var Qrt=s(tG);BRo=r(Qrt,"FlaubertForTokenClassification"),Qrt.forEach(t),PRo=r(DAe," (FlauBERT model)"),DAe.forEach(t),IRo=i(J),U2=n(J,"LI",{});var GAe=s(U2);afe=n(GAe,"STRONG",{});var Wrt=s(afe);qRo=r(Wrt,"fnet"),Wrt.forEach(t),NRo=r(GAe," \u2014 "),aG=n(GAe,"A",{href:!0});var Hrt=s(aG);jRo=r(Hrt,"FNetForTokenClassification"),Hrt.forEach(t),DRo=r(GAe," (FNet model)"),GAe.forEach(t),GRo=i(J),J2=n(J,"LI",{});var OAe=s(J2);nfe=n(OAe,"STRONG",{});var Urt=s(nfe);ORo=r(Urt,"funnel"),Urt.forEach(t),VRo=r(OAe," \u2014 "),nG=n(OAe,"A",{href:!0});var Jrt=s(nG);XRo=r(Jrt,"FunnelForTokenClassification"),Jrt.forEach(t),zRo=r(OAe," (Funnel Transformer model)"),OAe.forEach(t),QRo=i(J),Y2=n(J,"LI",{});var VAe=s(Y2);sfe=n(VAe,"STRONG",{});var Yrt=s(sfe);WRo=r(Yrt,"gpt2"),Yrt.forEach(t),HRo=r(VAe," \u2014 "),sG=n(VAe,"A",{href:!0});var Krt=s(sG);URo=r(Krt,"GPT2ForTokenClassification"),Krt.forEach(t),JRo=r(VAe," (OpenAI GPT-2 model)"),VAe.forEach(t),YRo=i(J),K2=n(J,"LI",{});var XAe=s(K2);lfe=n(XAe,"STRONG",{});var Zrt=s(lfe);KRo=r(Zrt,"ibert"),Zrt.forEach(t),ZRo=r(XAe," \u2014 "),lG=n(XAe,"A",{href:!0});var ett=s(lG);eBo=r(ett,"IBertForTokenClassification"),ett.forEach(t),oBo=r(XAe," (I-BERT model)"),XAe.forEach(t),rBo=i(J),Z2=n(J,"LI",{});var zAe=s(Z2);ife=n(zAe,"STRONG",{});var ott=s(ife);tBo=r(ott,"layoutlm"),ott.forEach(t),aBo=r(zAe," \u2014 "),iG=n(zAe,"A",{href:!0});var rtt=s(iG);nBo=r(rtt,"LayoutLMForTokenClassification"),rtt.forEach(t),sBo=r(zAe," (LayoutLM model)"),zAe.forEach(t),lBo=i(J),ev=n(J,"LI",{});var QAe=s(ev);dfe=n(QAe,"STRONG",{});var ttt=s(dfe);iBo=r(ttt,"layoutlmv2"),ttt.forEach(t),dBo=r(QAe," \u2014 "),dG=n(QAe,"A",{href:!0});var att=s(dG);cBo=r(att,"LayoutLMv2ForTokenClassification"),att.forEach(t),fBo=r(QAe," (LayoutLMv2 model)"),QAe.forEach(t),mBo=i(J),ov=n(J,"LI",{});var WAe=s(ov);cfe=n(WAe,"STRONG",{});var ntt=s(cfe);gBo=r(ntt,"longformer"),ntt.forEach(t),hBo=r(WAe," \u2014 "),cG=n(WAe,"A",{href:!0});var stt=s(cG);pBo=r(stt,"LongformerForTokenClassification"),stt.forEach(t),uBo=r(WAe," (Longformer model)"),WAe.forEach(t),_Bo=i(J),rv=n(J,"LI",{});var HAe=s(rv);ffe=n(HAe,"STRONG",{});var ltt=s(ffe);bBo=r(ltt,"megatron-bert"),ltt.forEach(t),vBo=r(HAe," \u2014 "),fG=n(HAe,"A",{href:!0});var itt=s(fG);FBo=r(itt,"MegatronBertForTokenClassification"),itt.forEach(t),TBo=r(HAe," (MegatronBert model)"),HAe.forEach(t),MBo=i(J),tv=n(J,"LI",{});var UAe=s(tv);mfe=n(UAe,"STRONG",{});var dtt=s(mfe);EBo=r(dtt,"mobilebert"),dtt.forEach(t),CBo=r(UAe," \u2014 "),mG=n(UAe,"A",{href:!0});var ctt=s(mG);wBo=r(ctt,"MobileBertForTokenClassification"),ctt.forEach(t),ABo=r(UAe," (MobileBERT model)"),UAe.forEach(t),yBo=i(J),av=n(J,"LI",{});var JAe=s(av);gfe=n(JAe,"STRONG",{});var ftt=s(gfe);LBo=r(ftt,"mpnet"),ftt.forEach(t),xBo=r(JAe," \u2014 "),gG=n(JAe,"A",{href:!0});var mtt=s(gG);$Bo=r(mtt,"MPNetForTokenClassification"),mtt.forEach(t),kBo=r(JAe," (MPNet model)"),JAe.forEach(t),SBo=i(J),nv=n(J,"LI",{});var YAe=s(nv);hfe=n(YAe,"STRONG",{});var gtt=s(hfe);RBo=r(gtt,"nystromformer"),gtt.forEach(t),BBo=r(YAe," \u2014 "),hG=n(YAe,"A",{href:!0});var htt=s(hG);PBo=r(htt,"NystromformerForTokenClassification"),htt.forEach(t),IBo=r(YAe," (Nystromformer model)"),YAe.forEach(t),qBo=i(J),sv=n(J,"LI",{});var KAe=s(sv);pfe=n(KAe,"STRONG",{});var ptt=s(pfe);NBo=r(ptt,"qdqbert"),ptt.forEach(t),jBo=r(KAe," \u2014 "),pG=n(KAe,"A",{href:!0});var utt=s(pG);DBo=r(utt,"QDQBertForTokenClassification"),utt.forEach(t),GBo=r(KAe," (QDQBert model)"),KAe.forEach(t),OBo=i(J),lv=n(J,"LI",{});var ZAe=s(lv);ufe=n(ZAe,"STRONG",{});var _tt=s(ufe);VBo=r(_tt,"rembert"),_tt.forEach(t),XBo=r(ZAe," \u2014 "),uG=n(ZAe,"A",{href:!0});var btt=s(uG);zBo=r(btt,"RemBertForTokenClassification"),btt.forEach(t),QBo=r(ZAe," (RemBERT model)"),ZAe.forEach(t),WBo=i(J),iv=n(J,"LI",{});var eye=s(iv);_fe=n(eye,"STRONG",{});var vtt=s(_fe);HBo=r(vtt,"roberta"),vtt.forEach(t),UBo=r(eye," \u2014 "),_G=n(eye,"A",{href:!0});var Ftt=s(_G);JBo=r(Ftt,"RobertaForTokenClassification"),Ftt.forEach(t),YBo=r(eye," (RoBERTa model)"),eye.forEach(t),KBo=i(J),dv=n(J,"LI",{});var oye=s(dv);bfe=n(oye,"STRONG",{});var Ttt=s(bfe);ZBo=r(Ttt,"roformer"),Ttt.forEach(t),ePo=r(oye," \u2014 "),bG=n(oye,"A",{href:!0});var Mtt=s(bG);oPo=r(Mtt,"RoFormerForTokenClassification"),Mtt.forEach(t),rPo=r(oye," (RoFormer model)"),oye.forEach(t),tPo=i(J),cv=n(J,"LI",{});var rye=s(cv);vfe=n(rye,"STRONG",{});var Ett=s(vfe);aPo=r(Ett,"squeezebert"),Ett.forEach(t),nPo=r(rye," \u2014 "),vG=n(rye,"A",{href:!0});var Ctt=s(vG);sPo=r(Ctt,"SqueezeBertForTokenClassification"),Ctt.forEach(t),lPo=r(rye," (SqueezeBERT model)"),rye.forEach(t),iPo=i(J),fv=n(J,"LI",{});var tye=s(fv);Ffe=n(tye,"STRONG",{});var wtt=s(Ffe);dPo=r(wtt,"xlm"),wtt.forEach(t),cPo=r(tye," \u2014 "),FG=n(tye,"A",{href:!0});var Att=s(FG);fPo=r(Att,"XLMForTokenClassification"),Att.forEach(t),mPo=r(tye," (XLM model)"),tye.forEach(t),gPo=i(J),mv=n(J,"LI",{});var aye=s(mv);Tfe=n(aye,"STRONG",{});var ytt=s(Tfe);hPo=r(ytt,"xlm-roberta"),ytt.forEach(t),pPo=r(aye," \u2014 "),TG=n(aye,"A",{href:!0});var Ltt=s(TG);uPo=r(Ltt,"XLMRobertaForTokenClassification"),Ltt.forEach(t),_Po=r(aye," (XLM-RoBERTa model)"),aye.forEach(t),bPo=i(J),gv=n(J,"LI",{});var nye=s(gv);Mfe=n(nye,"STRONG",{});var xtt=s(Mfe);vPo=r(xtt,"xlm-roberta-xl"),xtt.forEach(t),FPo=r(nye," \u2014 "),MG=n(nye,"A",{href:!0});var $tt=s(MG);TPo=r($tt,"XLMRobertaXLForTokenClassification"),$tt.forEach(t),MPo=r(nye," (XLM-RoBERTa-XL model)"),nye.forEach(t),EPo=i(J),hv=n(J,"LI",{});var sye=s(hv);Efe=n(sye,"STRONG",{});var ktt=s(Efe);CPo=r(ktt,"xlnet"),ktt.forEach(t),wPo=r(sye," \u2014 "),EG=n(sye,"A",{href:!0});var Stt=s(EG);APo=r(Stt,"XLNetForTokenClassification"),Stt.forEach(t),yPo=r(sye," (XLNet model)"),sye.forEach(t),LPo=i(J),pv=n(J,"LI",{});var lye=s(pv);Cfe=n(lye,"STRONG",{});var Rtt=s(Cfe);xPo=r(Rtt,"yoso"),Rtt.forEach(t),$Po=r(lye," \u2014 "),CG=n(lye,"A",{href:!0});var Btt=s(CG);kPo=r(Btt,"YosoForTokenClassification"),Btt.forEach(t),SPo=r(lye," (YOSO model)"),lye.forEach(t),J.forEach(t),RPo=i(ta),uv=n(ta,"P",{});var iye=s(uv);BPo=r(iye,"The model is set in evaluation mode by default using "),wfe=n(iye,"CODE",{});var Ptt=s(wfe);PPo=r(Ptt,"model.eval()"),Ptt.forEach(t),IPo=r(iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=n(iye,"CODE",{});var Itt=s(Afe);qPo=r(Itt,"model.train()"),Itt.forEach(t),iye.forEach(t),NPo=i(ta),T(_v.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),iBe=i(f),Vi=n(f,"H2",{class:!0});var cIe=s(Vi);bv=n(cIe,"A",{id:!0,class:!0,href:!0});var qtt=s(bv);yfe=n(qtt,"SPAN",{});var Ntt=s(yfe);T(Sw.$$.fragment,Ntt),Ntt.forEach(t),qtt.forEach(t),jPo=i(cIe),Lfe=n(cIe,"SPAN",{});var jtt=s(Lfe);DPo=r(jtt,"AutoModelForQuestionAnswering"),jtt.forEach(t),cIe.forEach(t),dBe=i(f),Po=n(f,"DIV",{class:!0});var zs=s(Po);T(Rw.$$.fragment,zs),GPo=i(zs),Xi=n(zs,"P",{});var hY=s(Xi);OPo=r(hY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wG=n(hY,"A",{href:!0});var Dtt=s(wG);VPo=r(Dtt,"from_pretrained()"),Dtt.forEach(t),XPo=r(hY," class method or the "),AG=n(hY,"A",{href:!0});var Gtt=s(AG);zPo=r(Gtt,"from_config()"),Gtt.forEach(t),QPo=r(hY,` class
method.`),hY.forEach(t),WPo=i(zs),Bw=n(zs,"P",{});var fIe=s(Bw);HPo=r(fIe,"This class cannot be instantiated directly using "),xfe=n(fIe,"CODE",{});var Ott=s(xfe);UPo=r(Ott,"__init__()"),Ott.forEach(t),JPo=r(fIe," (throws an error)."),fIe.forEach(t),YPo=i(zs),lt=n(zs,"DIV",{class:!0});var q5=s(lt);T(Pw.$$.fragment,q5),KPo=i(q5),$fe=n(q5,"P",{});var Vtt=s($fe);ZPo=r(Vtt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vtt.forEach(t),eIo=i(q5),zi=n(q5,"P",{});var pY=s(zi);oIo=r(pY,`Note:
Loading a model from its configuration file does `),kfe=n(pY,"STRONG",{});var Xtt=s(kfe);rIo=r(Xtt,"not"),Xtt.forEach(t),tIo=r(pY,` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=n(pY,"A",{href:!0});var ztt=s(yG);aIo=r(ztt,"from_pretrained()"),ztt.forEach(t),nIo=r(pY," to load the model weights."),pY.forEach(t),sIo=i(q5),T(vv.$$.fragment,q5),q5.forEach(t),lIo=i(zs),oo=n(zs,"DIV",{class:!0});var aa=s(oo);T(Iw.$$.fragment,aa),iIo=i(aa),Sfe=n(aa,"P",{});var Qtt=s(Sfe);dIo=r(Qtt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qtt.forEach(t),cIo=i(aa),ka=n(aa,"P",{});var N5=s(ka);fIo=r(N5,"The model class to instantiate is selected based on the "),Rfe=n(N5,"CODE",{});var Wtt=s(Rfe);mIo=r(Wtt,"model_type"),Wtt.forEach(t),gIo=r(N5,` property of the config object (either
passed as an argument or loaded from `),Bfe=n(N5,"CODE",{});var Htt=s(Bfe);hIo=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),pIo=r(N5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=n(N5,"CODE",{});var Utt=s(Pfe);uIo=r(Utt,"pretrained_model_name_or_path"),Utt.forEach(t),_Io=r(N5,":"),N5.forEach(t),bIo=i(aa),O=n(aa,"UL",{});var X=s(O);Fv=n(X,"LI",{});var dye=s(Fv);Ife=n(dye,"STRONG",{});var Jtt=s(Ife);vIo=r(Jtt,"albert"),Jtt.forEach(t),FIo=r(dye," \u2014 "),LG=n(dye,"A",{href:!0});var Ytt=s(LG);TIo=r(Ytt,"AlbertForQuestionAnswering"),Ytt.forEach(t),MIo=r(dye," (ALBERT model)"),dye.forEach(t),EIo=i(X),Tv=n(X,"LI",{});var cye=s(Tv);qfe=n(cye,"STRONG",{});var Ktt=s(qfe);CIo=r(Ktt,"bart"),Ktt.forEach(t),wIo=r(cye," \u2014 "),xG=n(cye,"A",{href:!0});var Ztt=s(xG);AIo=r(Ztt,"BartForQuestionAnswering"),Ztt.forEach(t),yIo=r(cye," (BART model)"),cye.forEach(t),LIo=i(X),Mv=n(X,"LI",{});var fye=s(Mv);Nfe=n(fye,"STRONG",{});var eat=s(Nfe);xIo=r(eat,"bert"),eat.forEach(t),$Io=r(fye," \u2014 "),$G=n(fye,"A",{href:!0});var oat=s($G);kIo=r(oat,"BertForQuestionAnswering"),oat.forEach(t),SIo=r(fye," (BERT model)"),fye.forEach(t),RIo=i(X),Ev=n(X,"LI",{});var mye=s(Ev);jfe=n(mye,"STRONG",{});var rat=s(jfe);BIo=r(rat,"big_bird"),rat.forEach(t),PIo=r(mye," \u2014 "),kG=n(mye,"A",{href:!0});var tat=s(kG);IIo=r(tat,"BigBirdForQuestionAnswering"),tat.forEach(t),qIo=r(mye," (BigBird model)"),mye.forEach(t),NIo=i(X),Cv=n(X,"LI",{});var gye=s(Cv);Dfe=n(gye,"STRONG",{});var aat=s(Dfe);jIo=r(aat,"bigbird_pegasus"),aat.forEach(t),DIo=r(gye," \u2014 "),SG=n(gye,"A",{href:!0});var nat=s(SG);GIo=r(nat,"BigBirdPegasusForQuestionAnswering"),nat.forEach(t),OIo=r(gye," (BigBirdPegasus model)"),gye.forEach(t),VIo=i(X),wv=n(X,"LI",{});var hye=s(wv);Gfe=n(hye,"STRONG",{});var sat=s(Gfe);XIo=r(sat,"camembert"),sat.forEach(t),zIo=r(hye," \u2014 "),RG=n(hye,"A",{href:!0});var lat=s(RG);QIo=r(lat,"CamembertForQuestionAnswering"),lat.forEach(t),WIo=r(hye," (CamemBERT model)"),hye.forEach(t),HIo=i(X),Av=n(X,"LI",{});var pye=s(Av);Ofe=n(pye,"STRONG",{});var iat=s(Ofe);UIo=r(iat,"canine"),iat.forEach(t),JIo=r(pye," \u2014 "),BG=n(pye,"A",{href:!0});var dat=s(BG);YIo=r(dat,"CanineForQuestionAnswering"),dat.forEach(t),KIo=r(pye," (Canine model)"),pye.forEach(t),ZIo=i(X),yv=n(X,"LI",{});var uye=s(yv);Vfe=n(uye,"STRONG",{});var cat=s(Vfe);eqo=r(cat,"convbert"),cat.forEach(t),oqo=r(uye," \u2014 "),PG=n(uye,"A",{href:!0});var fat=s(PG);rqo=r(fat,"ConvBertForQuestionAnswering"),fat.forEach(t),tqo=r(uye," (ConvBERT model)"),uye.forEach(t),aqo=i(X),Lv=n(X,"LI",{});var _ye=s(Lv);Xfe=n(_ye,"STRONG",{});var mat=s(Xfe);nqo=r(mat,"data2vec-text"),mat.forEach(t),sqo=r(_ye," \u2014 "),IG=n(_ye,"A",{href:!0});var gat=s(IG);lqo=r(gat,"Data2VecTextForQuestionAnswering"),gat.forEach(t),iqo=r(_ye," (Data2VecText model)"),_ye.forEach(t),dqo=i(X),xv=n(X,"LI",{});var bye=s(xv);zfe=n(bye,"STRONG",{});var hat=s(zfe);cqo=r(hat,"deberta"),hat.forEach(t),fqo=r(bye," \u2014 "),qG=n(bye,"A",{href:!0});var pat=s(qG);mqo=r(pat,"DebertaForQuestionAnswering"),pat.forEach(t),gqo=r(bye," (DeBERTa model)"),bye.forEach(t),hqo=i(X),$v=n(X,"LI",{});var vye=s($v);Qfe=n(vye,"STRONG",{});var uat=s(Qfe);pqo=r(uat,"deberta-v2"),uat.forEach(t),uqo=r(vye," \u2014 "),NG=n(vye,"A",{href:!0});var _at=s(NG);_qo=r(_at,"DebertaV2ForQuestionAnswering"),_at.forEach(t),bqo=r(vye," (DeBERTa-v2 model)"),vye.forEach(t),vqo=i(X),kv=n(X,"LI",{});var Fye=s(kv);Wfe=n(Fye,"STRONG",{});var bat=s(Wfe);Fqo=r(bat,"distilbert"),bat.forEach(t),Tqo=r(Fye," \u2014 "),jG=n(Fye,"A",{href:!0});var vat=s(jG);Mqo=r(vat,"DistilBertForQuestionAnswering"),vat.forEach(t),Eqo=r(Fye," (DistilBERT model)"),Fye.forEach(t),Cqo=i(X),Sv=n(X,"LI",{});var Tye=s(Sv);Hfe=n(Tye,"STRONG",{});var Fat=s(Hfe);wqo=r(Fat,"electra"),Fat.forEach(t),Aqo=r(Tye," \u2014 "),DG=n(Tye,"A",{href:!0});var Tat=s(DG);yqo=r(Tat,"ElectraForQuestionAnswering"),Tat.forEach(t),Lqo=r(Tye," (ELECTRA model)"),Tye.forEach(t),xqo=i(X),Rv=n(X,"LI",{});var Mye=s(Rv);Ufe=n(Mye,"STRONG",{});var Mat=s(Ufe);$qo=r(Mat,"flaubert"),Mat.forEach(t),kqo=r(Mye," \u2014 "),GG=n(Mye,"A",{href:!0});var Eat=s(GG);Sqo=r(Eat,"FlaubertForQuestionAnsweringSimple"),Eat.forEach(t),Rqo=r(Mye," (FlauBERT model)"),Mye.forEach(t),Bqo=i(X),Bv=n(X,"LI",{});var Eye=s(Bv);Jfe=n(Eye,"STRONG",{});var Cat=s(Jfe);Pqo=r(Cat,"fnet"),Cat.forEach(t),Iqo=r(Eye," \u2014 "),OG=n(Eye,"A",{href:!0});var wat=s(OG);qqo=r(wat,"FNetForQuestionAnswering"),wat.forEach(t),Nqo=r(Eye," (FNet model)"),Eye.forEach(t),jqo=i(X),Pv=n(X,"LI",{});var Cye=s(Pv);Yfe=n(Cye,"STRONG",{});var Aat=s(Yfe);Dqo=r(Aat,"funnel"),Aat.forEach(t),Gqo=r(Cye," \u2014 "),VG=n(Cye,"A",{href:!0});var yat=s(VG);Oqo=r(yat,"FunnelForQuestionAnswering"),yat.forEach(t),Vqo=r(Cye," (Funnel Transformer model)"),Cye.forEach(t),Xqo=i(X),Iv=n(X,"LI",{});var wye=s(Iv);Kfe=n(wye,"STRONG",{});var Lat=s(Kfe);zqo=r(Lat,"gptj"),Lat.forEach(t),Qqo=r(wye," \u2014 "),XG=n(wye,"A",{href:!0});var xat=s(XG);Wqo=r(xat,"GPTJForQuestionAnswering"),xat.forEach(t),Hqo=r(wye," (GPT-J model)"),wye.forEach(t),Uqo=i(X),qv=n(X,"LI",{});var Aye=s(qv);Zfe=n(Aye,"STRONG",{});var $at=s(Zfe);Jqo=r($at,"ibert"),$at.forEach(t),Yqo=r(Aye," \u2014 "),zG=n(Aye,"A",{href:!0});var kat=s(zG);Kqo=r(kat,"IBertForQuestionAnswering"),kat.forEach(t),Zqo=r(Aye," (I-BERT model)"),Aye.forEach(t),eNo=i(X),Nv=n(X,"LI",{});var yye=s(Nv);eme=n(yye,"STRONG",{});var Sat=s(eme);oNo=r(Sat,"layoutlmv2"),Sat.forEach(t),rNo=r(yye," \u2014 "),QG=n(yye,"A",{href:!0});var Rat=s(QG);tNo=r(Rat,"LayoutLMv2ForQuestionAnswering"),Rat.forEach(t),aNo=r(yye," (LayoutLMv2 model)"),yye.forEach(t),nNo=i(X),jv=n(X,"LI",{});var Lye=s(jv);ome=n(Lye,"STRONG",{});var Bat=s(ome);sNo=r(Bat,"led"),Bat.forEach(t),lNo=r(Lye," \u2014 "),WG=n(Lye,"A",{href:!0});var Pat=s(WG);iNo=r(Pat,"LEDForQuestionAnswering"),Pat.forEach(t),dNo=r(Lye," (LED model)"),Lye.forEach(t),cNo=i(X),Dv=n(X,"LI",{});var xye=s(Dv);rme=n(xye,"STRONG",{});var Iat=s(rme);fNo=r(Iat,"longformer"),Iat.forEach(t),mNo=r(xye," \u2014 "),HG=n(xye,"A",{href:!0});var qat=s(HG);gNo=r(qat,"LongformerForQuestionAnswering"),qat.forEach(t),hNo=r(xye," (Longformer model)"),xye.forEach(t),pNo=i(X),Gv=n(X,"LI",{});var $ye=s(Gv);tme=n($ye,"STRONG",{});var Nat=s(tme);uNo=r(Nat,"lxmert"),Nat.forEach(t),_No=r($ye," \u2014 "),UG=n($ye,"A",{href:!0});var jat=s(UG);bNo=r(jat,"LxmertForQuestionAnswering"),jat.forEach(t),vNo=r($ye," (LXMERT model)"),$ye.forEach(t),FNo=i(X),Ov=n(X,"LI",{});var kye=s(Ov);ame=n(kye,"STRONG",{});var Dat=s(ame);TNo=r(Dat,"mbart"),Dat.forEach(t),MNo=r(kye," \u2014 "),JG=n(kye,"A",{href:!0});var Gat=s(JG);ENo=r(Gat,"MBartForQuestionAnswering"),Gat.forEach(t),CNo=r(kye," (mBART model)"),kye.forEach(t),wNo=i(X),Vv=n(X,"LI",{});var Sye=s(Vv);nme=n(Sye,"STRONG",{});var Oat=s(nme);ANo=r(Oat,"megatron-bert"),Oat.forEach(t),yNo=r(Sye," \u2014 "),YG=n(Sye,"A",{href:!0});var Vat=s(YG);LNo=r(Vat,"MegatronBertForQuestionAnswering"),Vat.forEach(t),xNo=r(Sye," (MegatronBert model)"),Sye.forEach(t),$No=i(X),Xv=n(X,"LI",{});var Rye=s(Xv);sme=n(Rye,"STRONG",{});var Xat=s(sme);kNo=r(Xat,"mobilebert"),Xat.forEach(t),SNo=r(Rye," \u2014 "),KG=n(Rye,"A",{href:!0});var zat=s(KG);RNo=r(zat,"MobileBertForQuestionAnswering"),zat.forEach(t),BNo=r(Rye," (MobileBERT model)"),Rye.forEach(t),PNo=i(X),zv=n(X,"LI",{});var Bye=s(zv);lme=n(Bye,"STRONG",{});var Qat=s(lme);INo=r(Qat,"mpnet"),Qat.forEach(t),qNo=r(Bye," \u2014 "),ZG=n(Bye,"A",{href:!0});var Wat=s(ZG);NNo=r(Wat,"MPNetForQuestionAnswering"),Wat.forEach(t),jNo=r(Bye," (MPNet model)"),Bye.forEach(t),DNo=i(X),Qv=n(X,"LI",{});var Pye=s(Qv);ime=n(Pye,"STRONG",{});var Hat=s(ime);GNo=r(Hat,"nystromformer"),Hat.forEach(t),ONo=r(Pye," \u2014 "),eO=n(Pye,"A",{href:!0});var Uat=s(eO);VNo=r(Uat,"NystromformerForQuestionAnswering"),Uat.forEach(t),XNo=r(Pye," (Nystromformer model)"),Pye.forEach(t),zNo=i(X),Wv=n(X,"LI",{});var Iye=s(Wv);dme=n(Iye,"STRONG",{});var Jat=s(dme);QNo=r(Jat,"qdqbert"),Jat.forEach(t),WNo=r(Iye," \u2014 "),oO=n(Iye,"A",{href:!0});var Yat=s(oO);HNo=r(Yat,"QDQBertForQuestionAnswering"),Yat.forEach(t),UNo=r(Iye," (QDQBert model)"),Iye.forEach(t),JNo=i(X),Hv=n(X,"LI",{});var qye=s(Hv);cme=n(qye,"STRONG",{});var Kat=s(cme);YNo=r(Kat,"reformer"),Kat.forEach(t),KNo=r(qye," \u2014 "),rO=n(qye,"A",{href:!0});var Zat=s(rO);ZNo=r(Zat,"ReformerForQuestionAnswering"),Zat.forEach(t),ejo=r(qye," (Reformer model)"),qye.forEach(t),ojo=i(X),Uv=n(X,"LI",{});var Nye=s(Uv);fme=n(Nye,"STRONG",{});var ent=s(fme);rjo=r(ent,"rembert"),ent.forEach(t),tjo=r(Nye," \u2014 "),tO=n(Nye,"A",{href:!0});var ont=s(tO);ajo=r(ont,"RemBertForQuestionAnswering"),ont.forEach(t),njo=r(Nye," (RemBERT model)"),Nye.forEach(t),sjo=i(X),Jv=n(X,"LI",{});var jye=s(Jv);mme=n(jye,"STRONG",{});var rnt=s(mme);ljo=r(rnt,"roberta"),rnt.forEach(t),ijo=r(jye," \u2014 "),aO=n(jye,"A",{href:!0});var tnt=s(aO);djo=r(tnt,"RobertaForQuestionAnswering"),tnt.forEach(t),cjo=r(jye," (RoBERTa model)"),jye.forEach(t),fjo=i(X),Yv=n(X,"LI",{});var Dye=s(Yv);gme=n(Dye,"STRONG",{});var ant=s(gme);mjo=r(ant,"roformer"),ant.forEach(t),gjo=r(Dye," \u2014 "),nO=n(Dye,"A",{href:!0});var nnt=s(nO);hjo=r(nnt,"RoFormerForQuestionAnswering"),nnt.forEach(t),pjo=r(Dye," (RoFormer model)"),Dye.forEach(t),ujo=i(X),Kv=n(X,"LI",{});var Gye=s(Kv);hme=n(Gye,"STRONG",{});var snt=s(hme);_jo=r(snt,"splinter"),snt.forEach(t),bjo=r(Gye," \u2014 "),sO=n(Gye,"A",{href:!0});var lnt=s(sO);vjo=r(lnt,"SplinterForQuestionAnswering"),lnt.forEach(t),Fjo=r(Gye," (Splinter model)"),Gye.forEach(t),Tjo=i(X),Zv=n(X,"LI",{});var Oye=s(Zv);pme=n(Oye,"STRONG",{});var int=s(pme);Mjo=r(int,"squeezebert"),int.forEach(t),Ejo=r(Oye," \u2014 "),lO=n(Oye,"A",{href:!0});var dnt=s(lO);Cjo=r(dnt,"SqueezeBertForQuestionAnswering"),dnt.forEach(t),wjo=r(Oye," (SqueezeBERT model)"),Oye.forEach(t),Ajo=i(X),eF=n(X,"LI",{});var Vye=s(eF);ume=n(Vye,"STRONG",{});var cnt=s(ume);yjo=r(cnt,"xlm"),cnt.forEach(t),Ljo=r(Vye," \u2014 "),iO=n(Vye,"A",{href:!0});var fnt=s(iO);xjo=r(fnt,"XLMForQuestionAnsweringSimple"),fnt.forEach(t),$jo=r(Vye," (XLM model)"),Vye.forEach(t),kjo=i(X),oF=n(X,"LI",{});var Xye=s(oF);_me=n(Xye,"STRONG",{});var mnt=s(_me);Sjo=r(mnt,"xlm-roberta"),mnt.forEach(t),Rjo=r(Xye," \u2014 "),dO=n(Xye,"A",{href:!0});var gnt=s(dO);Bjo=r(gnt,"XLMRobertaForQuestionAnswering"),gnt.forEach(t),Pjo=r(Xye," (XLM-RoBERTa model)"),Xye.forEach(t),Ijo=i(X),rF=n(X,"LI",{});var zye=s(rF);bme=n(zye,"STRONG",{});var hnt=s(bme);qjo=r(hnt,"xlm-roberta-xl"),hnt.forEach(t),Njo=r(zye," \u2014 "),cO=n(zye,"A",{href:!0});var pnt=s(cO);jjo=r(pnt,"XLMRobertaXLForQuestionAnswering"),pnt.forEach(t),Djo=r(zye," (XLM-RoBERTa-XL model)"),zye.forEach(t),Gjo=i(X),tF=n(X,"LI",{});var Qye=s(tF);vme=n(Qye,"STRONG",{});var unt=s(vme);Ojo=r(unt,"xlnet"),unt.forEach(t),Vjo=r(Qye," \u2014 "),fO=n(Qye,"A",{href:!0});var _nt=s(fO);Xjo=r(_nt,"XLNetForQuestionAnsweringSimple"),_nt.forEach(t),zjo=r(Qye," (XLNet model)"),Qye.forEach(t),Qjo=i(X),aF=n(X,"LI",{});var Wye=s(aF);Fme=n(Wye,"STRONG",{});var bnt=s(Fme);Wjo=r(bnt,"yoso"),bnt.forEach(t),Hjo=r(Wye," \u2014 "),mO=n(Wye,"A",{href:!0});var vnt=s(mO);Ujo=r(vnt,"YosoForQuestionAnswering"),vnt.forEach(t),Jjo=r(Wye," (YOSO model)"),Wye.forEach(t),X.forEach(t),Yjo=i(aa),nF=n(aa,"P",{});var Hye=s(nF);Kjo=r(Hye,"The model is set in evaluation mode by default using "),Tme=n(Hye,"CODE",{});var Fnt=s(Tme);Zjo=r(Fnt,"model.eval()"),Fnt.forEach(t),eDo=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=n(Hye,"CODE",{});var Tnt=s(Mme);oDo=r(Tnt,"model.train()"),Tnt.forEach(t),Hye.forEach(t),rDo=i(aa),T(sF.$$.fragment,aa),aa.forEach(t),zs.forEach(t),cBe=i(f),Qi=n(f,"H2",{class:!0});var mIe=s(Qi);lF=n(mIe,"A",{id:!0,class:!0,href:!0});var Mnt=s(lF);Eme=n(Mnt,"SPAN",{});var Ent=s(Eme);T(qw.$$.fragment,Ent),Ent.forEach(t),Mnt.forEach(t),tDo=i(mIe),Cme=n(mIe,"SPAN",{});var Cnt=s(Cme);aDo=r(Cnt,"AutoModelForTableQuestionAnswering"),Cnt.forEach(t),mIe.forEach(t),fBe=i(f),Io=n(f,"DIV",{class:!0});var Qs=s(Io);T(Nw.$$.fragment,Qs),nDo=i(Qs),Wi=n(Qs,"P",{});var uY=s(Wi);sDo=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gO=n(uY,"A",{href:!0});var wnt=s(gO);lDo=r(wnt,"from_pretrained()"),wnt.forEach(t),iDo=r(uY," class method or the "),hO=n(uY,"A",{href:!0});var Ant=s(hO);dDo=r(Ant,"from_config()"),Ant.forEach(t),cDo=r(uY,` class
method.`),uY.forEach(t),fDo=i(Qs),jw=n(Qs,"P",{});var gIe=s(jw);mDo=r(gIe,"This class cannot be instantiated directly using "),wme=n(gIe,"CODE",{});var ynt=s(wme);gDo=r(ynt,"__init__()"),ynt.forEach(t),hDo=r(gIe," (throws an error)."),gIe.forEach(t),pDo=i(Qs),it=n(Qs,"DIV",{class:!0});var j5=s(it);T(Dw.$$.fragment,j5),uDo=i(j5),Ame=n(j5,"P",{});var Lnt=s(Ame);_Do=r(Lnt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lnt.forEach(t),bDo=i(j5),Hi=n(j5,"P",{});var _Y=s(Hi);vDo=r(_Y,`Note:
Loading a model from its configuration file does `),yme=n(_Y,"STRONG",{});var xnt=s(yme);FDo=r(xnt,"not"),xnt.forEach(t),TDo=r(_Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=n(_Y,"A",{href:!0});var $nt=s(pO);MDo=r($nt,"from_pretrained()"),$nt.forEach(t),EDo=r(_Y," to load the model weights."),_Y.forEach(t),CDo=i(j5),T(iF.$$.fragment,j5),j5.forEach(t),wDo=i(Qs),ro=n(Qs,"DIV",{class:!0});var na=s(ro);T(Gw.$$.fragment,na),ADo=i(na),Lme=n(na,"P",{});var knt=s(Lme);yDo=r(knt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),knt.forEach(t),LDo=i(na),Sa=n(na,"P",{});var D5=s(Sa);xDo=r(D5,"The model class to instantiate is selected based on the "),xme=n(D5,"CODE",{});var Snt=s(xme);$Do=r(Snt,"model_type"),Snt.forEach(t),kDo=r(D5,` property of the config object (either
passed as an argument or loaded from `),$me=n(D5,"CODE",{});var Rnt=s($me);SDo=r(Rnt,"pretrained_model_name_or_path"),Rnt.forEach(t),RDo=r(D5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=n(D5,"CODE",{});var Bnt=s(kme);BDo=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),PDo=r(D5,":"),D5.forEach(t),IDo=i(na),Sme=n(na,"UL",{});var Pnt=s(Sme);dF=n(Pnt,"LI",{});var Uye=s(dF);Rme=n(Uye,"STRONG",{});var Int=s(Rme);qDo=r(Int,"tapas"),Int.forEach(t),NDo=r(Uye," \u2014 "),uO=n(Uye,"A",{href:!0});var qnt=s(uO);jDo=r(qnt,"TapasForQuestionAnswering"),qnt.forEach(t),DDo=r(Uye," (TAPAS model)"),Uye.forEach(t),Pnt.forEach(t),GDo=i(na),cF=n(na,"P",{});var Jye=s(cF);ODo=r(Jye,"The model is set in evaluation mode by default using "),Bme=n(Jye,"CODE",{});var Nnt=s(Bme);VDo=r(Nnt,"model.eval()"),Nnt.forEach(t),XDo=r(Jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=n(Jye,"CODE",{});var jnt=s(Pme);zDo=r(jnt,"model.train()"),jnt.forEach(t),Jye.forEach(t),QDo=i(na),T(fF.$$.fragment,na),na.forEach(t),Qs.forEach(t),mBe=i(f),Ui=n(f,"H2",{class:!0});var hIe=s(Ui);mF=n(hIe,"A",{id:!0,class:!0,href:!0});var Dnt=s(mF);Ime=n(Dnt,"SPAN",{});var Gnt=s(Ime);T(Ow.$$.fragment,Gnt),Gnt.forEach(t),Dnt.forEach(t),WDo=i(hIe),qme=n(hIe,"SPAN",{});var Ont=s(qme);HDo=r(Ont,"AutoModelForImageClassification"),Ont.forEach(t),hIe.forEach(t),gBe=i(f),qo=n(f,"DIV",{class:!0});var Ws=s(qo);T(Vw.$$.fragment,Ws),UDo=i(Ws),Ji=n(Ws,"P",{});var bY=s(Ji);JDo=r(bY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_O=n(bY,"A",{href:!0});var Vnt=s(_O);YDo=r(Vnt,"from_pretrained()"),Vnt.forEach(t),KDo=r(bY," class method or the "),bO=n(bY,"A",{href:!0});var Xnt=s(bO);ZDo=r(Xnt,"from_config()"),Xnt.forEach(t),eGo=r(bY,` class
method.`),bY.forEach(t),oGo=i(Ws),Xw=n(Ws,"P",{});var pIe=s(Xw);rGo=r(pIe,"This class cannot be instantiated directly using "),Nme=n(pIe,"CODE",{});var znt=s(Nme);tGo=r(znt,"__init__()"),znt.forEach(t),aGo=r(pIe," (throws an error)."),pIe.forEach(t),nGo=i(Ws),dt=n(Ws,"DIV",{class:!0});var G5=s(dt);T(zw.$$.fragment,G5),sGo=i(G5),jme=n(G5,"P",{});var Qnt=s(jme);lGo=r(Qnt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Qnt.forEach(t),iGo=i(G5),Yi=n(G5,"P",{});var vY=s(Yi);dGo=r(vY,`Note:
Loading a model from its configuration file does `),Dme=n(vY,"STRONG",{});var Wnt=s(Dme);cGo=r(Wnt,"not"),Wnt.forEach(t),fGo=r(vY,` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=n(vY,"A",{href:!0});var Hnt=s(vO);mGo=r(Hnt,"from_pretrained()"),Hnt.forEach(t),gGo=r(vY," to load the model weights."),vY.forEach(t),hGo=i(G5),T(gF.$$.fragment,G5),G5.forEach(t),pGo=i(Ws),to=n(Ws,"DIV",{class:!0});var sa=s(to);T(Qw.$$.fragment,sa),uGo=i(sa),Gme=n(sa,"P",{});var Unt=s(Gme);_Go=r(Unt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Unt.forEach(t),bGo=i(sa),Ra=n(sa,"P",{});var O5=s(Ra);vGo=r(O5,"The model class to instantiate is selected based on the "),Ome=n(O5,"CODE",{});var Jnt=s(Ome);FGo=r(Jnt,"model_type"),Jnt.forEach(t),TGo=r(O5,` property of the config object (either
passed as an argument or loaded from `),Vme=n(O5,"CODE",{});var Ynt=s(Vme);MGo=r(Ynt,"pretrained_model_name_or_path"),Ynt.forEach(t),EGo=r(O5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=n(O5,"CODE",{});var Knt=s(Xme);CGo=r(Knt,"pretrained_model_name_or_path"),Knt.forEach(t),wGo=r(O5,":"),O5.forEach(t),AGo=i(sa),ve=n(sa,"UL",{});var Ee=s(ve);hF=n(Ee,"LI",{});var Yye=s(hF);zme=n(Yye,"STRONG",{});var Znt=s(zme);yGo=r(Znt,"beit"),Znt.forEach(t),LGo=r(Yye," \u2014 "),FO=n(Yye,"A",{href:!0});var est=s(FO);xGo=r(est,"BeitForImageClassification"),est.forEach(t),$Go=r(Yye," (BEiT model)"),Yye.forEach(t),kGo=i(Ee),pF=n(Ee,"LI",{});var Kye=s(pF);Qme=n(Kye,"STRONG",{});var ost=s(Qme);SGo=r(ost,"convnext"),ost.forEach(t),RGo=r(Kye," \u2014 "),TO=n(Kye,"A",{href:!0});var rst=s(TO);BGo=r(rst,"ConvNextForImageClassification"),rst.forEach(t),PGo=r(Kye," (ConvNext model)"),Kye.forEach(t),IGo=i(Ee),uF=n(Ee,"LI",{});var Zye=s(uF);Wme=n(Zye,"STRONG",{});var tst=s(Wme);qGo=r(tst,"data2vec-vision"),tst.forEach(t),NGo=r(Zye," \u2014 "),MO=n(Zye,"A",{href:!0});var ast=s(MO);jGo=r(ast,"Data2VecVisionForImageClassification"),ast.forEach(t),DGo=r(Zye," (Data2VecVision model)"),Zye.forEach(t),GGo=i(Ee),xs=n(Ee,"LI",{});var Cx=s(xs);Hme=n(Cx,"STRONG",{});var nst=s(Hme);OGo=r(nst,"deit"),nst.forEach(t),VGo=r(Cx," \u2014 "),EO=n(Cx,"A",{href:!0});var sst=s(EO);XGo=r(sst,"DeiTForImageClassification"),sst.forEach(t),zGo=r(Cx," or "),CO=n(Cx,"A",{href:!0});var lst=s(CO);QGo=r(lst,"DeiTForImageClassificationWithTeacher"),lst.forEach(t),WGo=r(Cx," (DeiT model)"),Cx.forEach(t),HGo=i(Ee),_F=n(Ee,"LI",{});var eLe=s(_F);Ume=n(eLe,"STRONG",{});var ist=s(Ume);UGo=r(ist,"imagegpt"),ist.forEach(t),JGo=r(eLe," \u2014 "),wO=n(eLe,"A",{href:!0});var dst=s(wO);YGo=r(dst,"ImageGPTForImageClassification"),dst.forEach(t),KGo=r(eLe," (ImageGPT model)"),eLe.forEach(t),ZGo=i(Ee),ct=n(Ee,"LI",{});var ef=s(ct);Jme=n(ef,"STRONG",{});var cst=s(Jme);eOo=r(cst,"perceiver"),cst.forEach(t),oOo=r(ef," \u2014 "),AO=n(ef,"A",{href:!0});var fst=s(AO);rOo=r(fst,"PerceiverForImageClassificationLearned"),fst.forEach(t),tOo=r(ef," or "),yO=n(ef,"A",{href:!0});var mst=s(yO);aOo=r(mst,"PerceiverForImageClassificationFourier"),mst.forEach(t),nOo=r(ef," or "),LO=n(ef,"A",{href:!0});var gst=s(LO);sOo=r(gst,"PerceiverForImageClassificationConvProcessing"),gst.forEach(t),lOo=r(ef," (Perceiver model)"),ef.forEach(t),iOo=i(Ee),bF=n(Ee,"LI",{});var oLe=s(bF);Yme=n(oLe,"STRONG",{});var hst=s(Yme);dOo=r(hst,"poolformer"),hst.forEach(t),cOo=r(oLe," \u2014 "),xO=n(oLe,"A",{href:!0});var pst=s(xO);fOo=r(pst,"PoolFormerForImageClassification"),pst.forEach(t),mOo=r(oLe," (PoolFormer model)"),oLe.forEach(t),gOo=i(Ee),vF=n(Ee,"LI",{});var rLe=s(vF);Kme=n(rLe,"STRONG",{});var ust=s(Kme);hOo=r(ust,"regnet"),ust.forEach(t),pOo=r(rLe," \u2014 "),$O=n(rLe,"A",{href:!0});var _st=s($O);uOo=r(_st,"RegNetForImageClassification"),_st.forEach(t),_Oo=r(rLe," (RegNet model)"),rLe.forEach(t),bOo=i(Ee),FF=n(Ee,"LI",{});var tLe=s(FF);Zme=n(tLe,"STRONG",{});var bst=s(Zme);vOo=r(bst,"resnet"),bst.forEach(t),FOo=r(tLe," \u2014 "),kO=n(tLe,"A",{href:!0});var vst=s(kO);TOo=r(vst,"ResNetForImageClassification"),vst.forEach(t),MOo=r(tLe," (ResNet model)"),tLe.forEach(t),EOo=i(Ee),TF=n(Ee,"LI",{});var aLe=s(TF);ege=n(aLe,"STRONG",{});var Fst=s(ege);COo=r(Fst,"segformer"),Fst.forEach(t),wOo=r(aLe," \u2014 "),SO=n(aLe,"A",{href:!0});var Tst=s(SO);AOo=r(Tst,"SegformerForImageClassification"),Tst.forEach(t),yOo=r(aLe," (SegFormer model)"),aLe.forEach(t),LOo=i(Ee),MF=n(Ee,"LI",{});var nLe=s(MF);oge=n(nLe,"STRONG",{});var Mst=s(oge);xOo=r(Mst,"swin"),Mst.forEach(t),$Oo=r(nLe," \u2014 "),RO=n(nLe,"A",{href:!0});var Est=s(RO);kOo=r(Est,"SwinForImageClassification"),Est.forEach(t),SOo=r(nLe," (Swin model)"),nLe.forEach(t),ROo=i(Ee),EF=n(Ee,"LI",{});var sLe=s(EF);rge=n(sLe,"STRONG",{});var Cst=s(rge);BOo=r(Cst,"van"),Cst.forEach(t),POo=r(sLe," \u2014 "),BO=n(sLe,"A",{href:!0});var wst=s(BO);IOo=r(wst,"VanForImageClassification"),wst.forEach(t),qOo=r(sLe," (VAN model)"),sLe.forEach(t),NOo=i(Ee),CF=n(Ee,"LI",{});var lLe=s(CF);tge=n(lLe,"STRONG",{});var Ast=s(tge);jOo=r(Ast,"vit"),Ast.forEach(t),DOo=r(lLe," \u2014 "),PO=n(lLe,"A",{href:!0});var yst=s(PO);GOo=r(yst,"ViTForImageClassification"),yst.forEach(t),OOo=r(lLe," (ViT model)"),lLe.forEach(t),Ee.forEach(t),VOo=i(sa),wF=n(sa,"P",{});var iLe=s(wF);XOo=r(iLe,"The model is set in evaluation mode by default using "),age=n(iLe,"CODE",{});var Lst=s(age);zOo=r(Lst,"model.eval()"),Lst.forEach(t),QOo=r(iLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(iLe,"CODE",{});var xst=s(nge);WOo=r(xst,"model.train()"),xst.forEach(t),iLe.forEach(t),HOo=i(sa),T(AF.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),hBe=i(f),Ki=n(f,"H2",{class:!0});var uIe=s(Ki);yF=n(uIe,"A",{id:!0,class:!0,href:!0});var $st=s(yF);sge=n($st,"SPAN",{});var kst=s(sge);T(Ww.$$.fragment,kst),kst.forEach(t),$st.forEach(t),UOo=i(uIe),lge=n(uIe,"SPAN",{});var Sst=s(lge);JOo=r(Sst,"AutoModelForVision2Seq"),Sst.forEach(t),uIe.forEach(t),pBe=i(f),No=n(f,"DIV",{class:!0});var Hs=s(No);T(Hw.$$.fragment,Hs),YOo=i(Hs),Zi=n(Hs,"P",{});var FY=s(Zi);KOo=r(FY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IO=n(FY,"A",{href:!0});var Rst=s(IO);ZOo=r(Rst,"from_pretrained()"),Rst.forEach(t),eVo=r(FY," class method or the "),qO=n(FY,"A",{href:!0});var Bst=s(qO);oVo=r(Bst,"from_config()"),Bst.forEach(t),rVo=r(FY,` class
method.`),FY.forEach(t),tVo=i(Hs),Uw=n(Hs,"P",{});var _Ie=s(Uw);aVo=r(_Ie,"This class cannot be instantiated directly using "),ige=n(_Ie,"CODE",{});var Pst=s(ige);nVo=r(Pst,"__init__()"),Pst.forEach(t),sVo=r(_Ie," (throws an error)."),_Ie.forEach(t),lVo=i(Hs),ft=n(Hs,"DIV",{class:!0});var V5=s(ft);T(Jw.$$.fragment,V5),iVo=i(V5),dge=n(V5,"P",{});var Ist=s(dge);dVo=r(Ist,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ist.forEach(t),cVo=i(V5),ed=n(V5,"P",{});var TY=s(ed);fVo=r(TY,`Note:
Loading a model from its configuration file does `),cge=n(TY,"STRONG",{});var qst=s(cge);mVo=r(qst,"not"),qst.forEach(t),gVo=r(TY,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(TY,"A",{href:!0});var Nst=s(NO);hVo=r(Nst,"from_pretrained()"),Nst.forEach(t),pVo=r(TY," to load the model weights."),TY.forEach(t),uVo=i(V5),T(LF.$$.fragment,V5),V5.forEach(t),_Vo=i(Hs),ao=n(Hs,"DIV",{class:!0});var la=s(ao);T(Yw.$$.fragment,la),bVo=i(la),fge=n(la,"P",{});var jst=s(fge);vVo=r(jst,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jst.forEach(t),FVo=i(la),Ba=n(la,"P",{});var X5=s(Ba);TVo=r(X5,"The model class to instantiate is selected based on the "),mge=n(X5,"CODE",{});var Dst=s(mge);MVo=r(Dst,"model_type"),Dst.forEach(t),EVo=r(X5,` property of the config object (either
passed as an argument or loaded from `),gge=n(X5,"CODE",{});var Gst=s(gge);CVo=r(Gst,"pretrained_model_name_or_path"),Gst.forEach(t),wVo=r(X5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(X5,"CODE",{});var Ost=s(hge);AVo=r(Ost,"pretrained_model_name_or_path"),Ost.forEach(t),yVo=r(X5,":"),X5.forEach(t),LVo=i(la),pge=n(la,"UL",{});var Vst=s(pge);xF=n(Vst,"LI",{});var dLe=s(xF);uge=n(dLe,"STRONG",{});var Xst=s(uge);xVo=r(Xst,"vision-encoder-decoder"),Xst.forEach(t),$Vo=r(dLe," \u2014 "),jO=n(dLe,"A",{href:!0});var zst=s(jO);kVo=r(zst,"VisionEncoderDecoderModel"),zst.forEach(t),SVo=r(dLe," (Vision Encoder decoder model)"),dLe.forEach(t),Vst.forEach(t),RVo=i(la),$F=n(la,"P",{});var cLe=s($F);BVo=r(cLe,"The model is set in evaluation mode by default using "),_ge=n(cLe,"CODE",{});var Qst=s(_ge);PVo=r(Qst,"model.eval()"),Qst.forEach(t),IVo=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(cLe,"CODE",{});var Wst=s(bge);qVo=r(Wst,"model.train()"),Wst.forEach(t),cLe.forEach(t),NVo=i(la),T(kF.$$.fragment,la),la.forEach(t),Hs.forEach(t),uBe=i(f),od=n(f,"H2",{class:!0});var bIe=s(od);SF=n(bIe,"A",{id:!0,class:!0,href:!0});var Hst=s(SF);vge=n(Hst,"SPAN",{});var Ust=s(vge);T(Kw.$$.fragment,Ust),Ust.forEach(t),Hst.forEach(t),jVo=i(bIe),Fge=n(bIe,"SPAN",{});var Jst=s(Fge);DVo=r(Jst,"AutoModelForAudioClassification"),Jst.forEach(t),bIe.forEach(t),_Be=i(f),jo=n(f,"DIV",{class:!0});var Us=s(jo);T(Zw.$$.fragment,Us),GVo=i(Us),rd=n(Us,"P",{});var MY=s(rd);OVo=r(MY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),DO=n(MY,"A",{href:!0});var Yst=s(DO);VVo=r(Yst,"from_pretrained()"),Yst.forEach(t),XVo=r(MY," class method or the "),GO=n(MY,"A",{href:!0});var Kst=s(GO);zVo=r(Kst,"from_config()"),Kst.forEach(t),QVo=r(MY,` class
method.`),MY.forEach(t),WVo=i(Us),eA=n(Us,"P",{});var vIe=s(eA);HVo=r(vIe,"This class cannot be instantiated directly using "),Tge=n(vIe,"CODE",{});var Zst=s(Tge);UVo=r(Zst,"__init__()"),Zst.forEach(t),JVo=r(vIe," (throws an error)."),vIe.forEach(t),YVo=i(Us),mt=n(Us,"DIV",{class:!0});var z5=s(mt);T(oA.$$.fragment,z5),KVo=i(z5),Mge=n(z5,"P",{});var elt=s(Mge);ZVo=r(elt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),elt.forEach(t),eXo=i(z5),td=n(z5,"P",{});var EY=s(td);oXo=r(EY,`Note:
Loading a model from its configuration file does `),Ege=n(EY,"STRONG",{});var olt=s(Ege);rXo=r(olt,"not"),olt.forEach(t),tXo=r(EY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OO=n(EY,"A",{href:!0});var rlt=s(OO);aXo=r(rlt,"from_pretrained()"),rlt.forEach(t),nXo=r(EY," to load the model weights."),EY.forEach(t),sXo=i(z5),T(RF.$$.fragment,z5),z5.forEach(t),lXo=i(Us),no=n(Us,"DIV",{class:!0});var ia=s(no);T(rA.$$.fragment,ia),iXo=i(ia),Cge=n(ia,"P",{});var tlt=s(Cge);dXo=r(tlt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),tlt.forEach(t),cXo=i(ia),Pa=n(ia,"P",{});var Q5=s(Pa);fXo=r(Q5,"The model class to instantiate is selected based on the "),wge=n(Q5,"CODE",{});var alt=s(wge);mXo=r(alt,"model_type"),alt.forEach(t),gXo=r(Q5,` property of the config object (either
passed as an argument or loaded from `),Age=n(Q5,"CODE",{});var nlt=s(Age);hXo=r(nlt,"pretrained_model_name_or_path"),nlt.forEach(t),pXo=r(Q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=n(Q5,"CODE",{});var slt=s(yge);uXo=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),_Xo=r(Q5,":"),Q5.forEach(t),bXo=i(ia),qe=n(ia,"UL",{});var uo=s(qe);BF=n(uo,"LI",{});var fLe=s(BF);Lge=n(fLe,"STRONG",{});var llt=s(Lge);vXo=r(llt,"data2vec-audio"),llt.forEach(t),FXo=r(fLe," \u2014 "),VO=n(fLe,"A",{href:!0});var ilt=s(VO);TXo=r(ilt,"Data2VecAudioForSequenceClassification"),ilt.forEach(t),MXo=r(fLe," (Data2VecAudio model)"),fLe.forEach(t),EXo=i(uo),PF=n(uo,"LI",{});var mLe=s(PF);xge=n(mLe,"STRONG",{});var dlt=s(xge);CXo=r(dlt,"hubert"),dlt.forEach(t),wXo=r(mLe," \u2014 "),XO=n(mLe,"A",{href:!0});var clt=s(XO);AXo=r(clt,"HubertForSequenceClassification"),clt.forEach(t),yXo=r(mLe," (Hubert model)"),mLe.forEach(t),LXo=i(uo),IF=n(uo,"LI",{});var gLe=s(IF);$ge=n(gLe,"STRONG",{});var flt=s($ge);xXo=r(flt,"sew"),flt.forEach(t),$Xo=r(gLe," \u2014 "),zO=n(gLe,"A",{href:!0});var mlt=s(zO);kXo=r(mlt,"SEWForSequenceClassification"),mlt.forEach(t),SXo=r(gLe," (SEW model)"),gLe.forEach(t),RXo=i(uo),qF=n(uo,"LI",{});var hLe=s(qF);kge=n(hLe,"STRONG",{});var glt=s(kge);BXo=r(glt,"sew-d"),glt.forEach(t),PXo=r(hLe," \u2014 "),QO=n(hLe,"A",{href:!0});var hlt=s(QO);IXo=r(hlt,"SEWDForSequenceClassification"),hlt.forEach(t),qXo=r(hLe," (SEW-D model)"),hLe.forEach(t),NXo=i(uo),NF=n(uo,"LI",{});var pLe=s(NF);Sge=n(pLe,"STRONG",{});var plt=s(Sge);jXo=r(plt,"unispeech"),plt.forEach(t),DXo=r(pLe," \u2014 "),WO=n(pLe,"A",{href:!0});var ult=s(WO);GXo=r(ult,"UniSpeechForSequenceClassification"),ult.forEach(t),OXo=r(pLe," (UniSpeech model)"),pLe.forEach(t),VXo=i(uo),jF=n(uo,"LI",{});var uLe=s(jF);Rge=n(uLe,"STRONG",{});var _lt=s(Rge);XXo=r(_lt,"unispeech-sat"),_lt.forEach(t),zXo=r(uLe," \u2014 "),HO=n(uLe,"A",{href:!0});var blt=s(HO);QXo=r(blt,"UniSpeechSatForSequenceClassification"),blt.forEach(t),WXo=r(uLe," (UniSpeechSat model)"),uLe.forEach(t),HXo=i(uo),DF=n(uo,"LI",{});var _Le=s(DF);Bge=n(_Le,"STRONG",{});var vlt=s(Bge);UXo=r(vlt,"wav2vec2"),vlt.forEach(t),JXo=r(_Le," \u2014 "),UO=n(_Le,"A",{href:!0});var Flt=s(UO);YXo=r(Flt,"Wav2Vec2ForSequenceClassification"),Flt.forEach(t),KXo=r(_Le," (Wav2Vec2 model)"),_Le.forEach(t),ZXo=i(uo),GF=n(uo,"LI",{});var bLe=s(GF);Pge=n(bLe,"STRONG",{});var Tlt=s(Pge);ezo=r(Tlt,"wavlm"),Tlt.forEach(t),ozo=r(bLe," \u2014 "),JO=n(bLe,"A",{href:!0});var Mlt=s(JO);rzo=r(Mlt,"WavLMForSequenceClassification"),Mlt.forEach(t),tzo=r(bLe," (WavLM model)"),bLe.forEach(t),uo.forEach(t),azo=i(ia),OF=n(ia,"P",{});var vLe=s(OF);nzo=r(vLe,"The model is set in evaluation mode by default using "),Ige=n(vLe,"CODE",{});var Elt=s(Ige);szo=r(Elt,"model.eval()"),Elt.forEach(t),lzo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=n(vLe,"CODE",{});var Clt=s(qge);izo=r(Clt,"model.train()"),Clt.forEach(t),vLe.forEach(t),dzo=i(ia),T(VF.$$.fragment,ia),ia.forEach(t),Us.forEach(t),bBe=i(f),ad=n(f,"H2",{class:!0});var FIe=s(ad);XF=n(FIe,"A",{id:!0,class:!0,href:!0});var wlt=s(XF);Nge=n(wlt,"SPAN",{});var Alt=s(Nge);T(tA.$$.fragment,Alt),Alt.forEach(t),wlt.forEach(t),czo=i(FIe),jge=n(FIe,"SPAN",{});var ylt=s(jge);fzo=r(ylt,"AutoModelForAudioFrameClassification"),ylt.forEach(t),FIe.forEach(t),vBe=i(f),Do=n(f,"DIV",{class:!0});var Js=s(Do);T(aA.$$.fragment,Js),mzo=i(Js),nd=n(Js,"P",{});var CY=s(nd);gzo=r(CY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YO=n(CY,"A",{href:!0});var Llt=s(YO);hzo=r(Llt,"from_pretrained()"),Llt.forEach(t),pzo=r(CY," class method or the "),KO=n(CY,"A",{href:!0});var xlt=s(KO);uzo=r(xlt,"from_config()"),xlt.forEach(t),_zo=r(CY,` class
method.`),CY.forEach(t),bzo=i(Js),nA=n(Js,"P",{});var TIe=s(nA);vzo=r(TIe,"This class cannot be instantiated directly using "),Dge=n(TIe,"CODE",{});var $lt=s(Dge);Fzo=r($lt,"__init__()"),$lt.forEach(t),Tzo=r(TIe," (throws an error)."),TIe.forEach(t),Mzo=i(Js),gt=n(Js,"DIV",{class:!0});var W5=s(gt);T(sA.$$.fragment,W5),Ezo=i(W5),Gge=n(W5,"P",{});var klt=s(Gge);Czo=r(klt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),klt.forEach(t),wzo=i(W5),sd=n(W5,"P",{});var wY=s(sd);Azo=r(wY,`Note:
Loading a model from its configuration file does `),Oge=n(wY,"STRONG",{});var Slt=s(Oge);yzo=r(Slt,"not"),Slt.forEach(t),Lzo=r(wY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=n(wY,"A",{href:!0});var Rlt=s(ZO);xzo=r(Rlt,"from_pretrained()"),Rlt.forEach(t),$zo=r(wY," to load the model weights."),wY.forEach(t),kzo=i(W5),T(zF.$$.fragment,W5),W5.forEach(t),Szo=i(Js),so=n(Js,"DIV",{class:!0});var da=s(so);T(lA.$$.fragment,da),Rzo=i(da),Vge=n(da,"P",{});var Blt=s(Vge);Bzo=r(Blt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Blt.forEach(t),Pzo=i(da),Ia=n(da,"P",{});var H5=s(Ia);Izo=r(H5,"The model class to instantiate is selected based on the "),Xge=n(H5,"CODE",{});var Plt=s(Xge);qzo=r(Plt,"model_type"),Plt.forEach(t),Nzo=r(H5,` property of the config object (either
passed as an argument or loaded from `),zge=n(H5,"CODE",{});var Ilt=s(zge);jzo=r(Ilt,"pretrained_model_name_or_path"),Ilt.forEach(t),Dzo=r(H5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(H5,"CODE",{});var qlt=s(Qge);Gzo=r(qlt,"pretrained_model_name_or_path"),qlt.forEach(t),Ozo=r(H5,":"),H5.forEach(t),Vzo=i(da),qa=n(da,"UL",{});var U5=s(qa);QF=n(U5,"LI",{});var FLe=s(QF);Wge=n(FLe,"STRONG",{});var Nlt=s(Wge);Xzo=r(Nlt,"data2vec-audio"),Nlt.forEach(t),zzo=r(FLe," \u2014 "),eV=n(FLe,"A",{href:!0});var jlt=s(eV);Qzo=r(jlt,"Data2VecAudioForAudioFrameClassification"),jlt.forEach(t),Wzo=r(FLe," (Data2VecAudio model)"),FLe.forEach(t),Hzo=i(U5),WF=n(U5,"LI",{});var TLe=s(WF);Hge=n(TLe,"STRONG",{});var Dlt=s(Hge);Uzo=r(Dlt,"unispeech-sat"),Dlt.forEach(t),Jzo=r(TLe," \u2014 "),oV=n(TLe,"A",{href:!0});var Glt=s(oV);Yzo=r(Glt,"UniSpeechSatForAudioFrameClassification"),Glt.forEach(t),Kzo=r(TLe," (UniSpeechSat model)"),TLe.forEach(t),Zzo=i(U5),HF=n(U5,"LI",{});var MLe=s(HF);Uge=n(MLe,"STRONG",{});var Olt=s(Uge);eQo=r(Olt,"wav2vec2"),Olt.forEach(t),oQo=r(MLe," \u2014 "),rV=n(MLe,"A",{href:!0});var Vlt=s(rV);rQo=r(Vlt,"Wav2Vec2ForAudioFrameClassification"),Vlt.forEach(t),tQo=r(MLe," (Wav2Vec2 model)"),MLe.forEach(t),aQo=i(U5),UF=n(U5,"LI",{});var ELe=s(UF);Jge=n(ELe,"STRONG",{});var Xlt=s(Jge);nQo=r(Xlt,"wavlm"),Xlt.forEach(t),sQo=r(ELe," \u2014 "),tV=n(ELe,"A",{href:!0});var zlt=s(tV);lQo=r(zlt,"WavLMForAudioFrameClassification"),zlt.forEach(t),iQo=r(ELe," (WavLM model)"),ELe.forEach(t),U5.forEach(t),dQo=i(da),JF=n(da,"P",{});var CLe=s(JF);cQo=r(CLe,"The model is set in evaluation mode by default using "),Yge=n(CLe,"CODE",{});var Qlt=s(Yge);fQo=r(Qlt,"model.eval()"),Qlt.forEach(t),mQo=r(CLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(CLe,"CODE",{});var Wlt=s(Kge);gQo=r(Wlt,"model.train()"),Wlt.forEach(t),CLe.forEach(t),hQo=i(da),T(YF.$$.fragment,da),da.forEach(t),Js.forEach(t),FBe=i(f),ld=n(f,"H2",{class:!0});var MIe=s(ld);KF=n(MIe,"A",{id:!0,class:!0,href:!0});var Hlt=s(KF);Zge=n(Hlt,"SPAN",{});var Ult=s(Zge);T(iA.$$.fragment,Ult),Ult.forEach(t),Hlt.forEach(t),pQo=i(MIe),ehe=n(MIe,"SPAN",{});var Jlt=s(ehe);uQo=r(Jlt,"AutoModelForCTC"),Jlt.forEach(t),MIe.forEach(t),TBe=i(f),Go=n(f,"DIV",{class:!0});var Ys=s(Go);T(dA.$$.fragment,Ys),_Qo=i(Ys),id=n(Ys,"P",{});var AY=s(id);bQo=r(AY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),aV=n(AY,"A",{href:!0});var Ylt=s(aV);vQo=r(Ylt,"from_pretrained()"),Ylt.forEach(t),FQo=r(AY," class method or the "),nV=n(AY,"A",{href:!0});var Klt=s(nV);TQo=r(Klt,"from_config()"),Klt.forEach(t),MQo=r(AY,` class
method.`),AY.forEach(t),EQo=i(Ys),cA=n(Ys,"P",{});var EIe=s(cA);CQo=r(EIe,"This class cannot be instantiated directly using "),ohe=n(EIe,"CODE",{});var Zlt=s(ohe);wQo=r(Zlt,"__init__()"),Zlt.forEach(t),AQo=r(EIe," (throws an error)."),EIe.forEach(t),yQo=i(Ys),ht=n(Ys,"DIV",{class:!0});var J5=s(ht);T(fA.$$.fragment,J5),LQo=i(J5),rhe=n(J5,"P",{});var eit=s(rhe);xQo=r(eit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),eit.forEach(t),$Qo=i(J5),dd=n(J5,"P",{});var yY=s(dd);kQo=r(yY,`Note:
Loading a model from its configuration file does `),the=n(yY,"STRONG",{});var oit=s(the);SQo=r(oit,"not"),oit.forEach(t),RQo=r(yY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=n(yY,"A",{href:!0});var rit=s(sV);BQo=r(rit,"from_pretrained()"),rit.forEach(t),PQo=r(yY," to load the model weights."),yY.forEach(t),IQo=i(J5),T(ZF.$$.fragment,J5),J5.forEach(t),qQo=i(Ys),lo=n(Ys,"DIV",{class:!0});var ca=s(lo);T(mA.$$.fragment,ca),NQo=i(ca),ahe=n(ca,"P",{});var tit=s(ahe);jQo=r(tit,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tit.forEach(t),DQo=i(ca),Na=n(ca,"P",{});var Y5=s(Na);GQo=r(Y5,"The model class to instantiate is selected based on the "),nhe=n(Y5,"CODE",{});var ait=s(nhe);OQo=r(ait,"model_type"),ait.forEach(t),VQo=r(Y5,` property of the config object (either
passed as an argument or loaded from `),she=n(Y5,"CODE",{});var nit=s(she);XQo=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),zQo=r(Y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=n(Y5,"CODE",{});var sit=s(lhe);QQo=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),WQo=r(Y5,":"),Y5.forEach(t),HQo=i(ca),Ne=n(ca,"UL",{});var _o=s(Ne);e0=n(_o,"LI",{});var wLe=s(e0);ihe=n(wLe,"STRONG",{});var lit=s(ihe);UQo=r(lit,"data2vec-audio"),lit.forEach(t),JQo=r(wLe," \u2014 "),lV=n(wLe,"A",{href:!0});var iit=s(lV);YQo=r(iit,"Data2VecAudioForCTC"),iit.forEach(t),KQo=r(wLe," (Data2VecAudio model)"),wLe.forEach(t),ZQo=i(_o),o0=n(_o,"LI",{});var ALe=s(o0);dhe=n(ALe,"STRONG",{});var dit=s(dhe);eWo=r(dit,"hubert"),dit.forEach(t),oWo=r(ALe," \u2014 "),iV=n(ALe,"A",{href:!0});var cit=s(iV);rWo=r(cit,"HubertForCTC"),cit.forEach(t),tWo=r(ALe," (Hubert model)"),ALe.forEach(t),aWo=i(_o),r0=n(_o,"LI",{});var yLe=s(r0);che=n(yLe,"STRONG",{});var fit=s(che);nWo=r(fit,"sew"),fit.forEach(t),sWo=r(yLe," \u2014 "),dV=n(yLe,"A",{href:!0});var mit=s(dV);lWo=r(mit,"SEWForCTC"),mit.forEach(t),iWo=r(yLe," (SEW model)"),yLe.forEach(t),dWo=i(_o),t0=n(_o,"LI",{});var LLe=s(t0);fhe=n(LLe,"STRONG",{});var git=s(fhe);cWo=r(git,"sew-d"),git.forEach(t),fWo=r(LLe," \u2014 "),cV=n(LLe,"A",{href:!0});var hit=s(cV);mWo=r(hit,"SEWDForCTC"),hit.forEach(t),gWo=r(LLe," (SEW-D model)"),LLe.forEach(t),hWo=i(_o),a0=n(_o,"LI",{});var xLe=s(a0);mhe=n(xLe,"STRONG",{});var pit=s(mhe);pWo=r(pit,"unispeech"),pit.forEach(t),uWo=r(xLe," \u2014 "),fV=n(xLe,"A",{href:!0});var uit=s(fV);_Wo=r(uit,"UniSpeechForCTC"),uit.forEach(t),bWo=r(xLe," (UniSpeech model)"),xLe.forEach(t),vWo=i(_o),n0=n(_o,"LI",{});var $Le=s(n0);ghe=n($Le,"STRONG",{});var _it=s(ghe);FWo=r(_it,"unispeech-sat"),_it.forEach(t),TWo=r($Le," \u2014 "),mV=n($Le,"A",{href:!0});var bit=s(mV);MWo=r(bit,"UniSpeechSatForCTC"),bit.forEach(t),EWo=r($Le," (UniSpeechSat model)"),$Le.forEach(t),CWo=i(_o),s0=n(_o,"LI",{});var kLe=s(s0);hhe=n(kLe,"STRONG",{});var vit=s(hhe);wWo=r(vit,"wav2vec2"),vit.forEach(t),AWo=r(kLe," \u2014 "),gV=n(kLe,"A",{href:!0});var Fit=s(gV);yWo=r(Fit,"Wav2Vec2ForCTC"),Fit.forEach(t),LWo=r(kLe," (Wav2Vec2 model)"),kLe.forEach(t),xWo=i(_o),l0=n(_o,"LI",{});var SLe=s(l0);phe=n(SLe,"STRONG",{});var Tit=s(phe);$Wo=r(Tit,"wavlm"),Tit.forEach(t),kWo=r(SLe," \u2014 "),hV=n(SLe,"A",{href:!0});var Mit=s(hV);SWo=r(Mit,"WavLMForCTC"),Mit.forEach(t),RWo=r(SLe," (WavLM model)"),SLe.forEach(t),_o.forEach(t),BWo=i(ca),i0=n(ca,"P",{});var RLe=s(i0);PWo=r(RLe,"The model is set in evaluation mode by default using "),uhe=n(RLe,"CODE",{});var Eit=s(uhe);IWo=r(Eit,"model.eval()"),Eit.forEach(t),qWo=r(RLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=n(RLe,"CODE",{});var Cit=s(_he);NWo=r(Cit,"model.train()"),Cit.forEach(t),RLe.forEach(t),jWo=i(ca),T(d0.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),MBe=i(f),cd=n(f,"H2",{class:!0});var CIe=s(cd);c0=n(CIe,"A",{id:!0,class:!0,href:!0});var wit=s(c0);bhe=n(wit,"SPAN",{});var Ait=s(bhe);T(gA.$$.fragment,Ait),Ait.forEach(t),wit.forEach(t),DWo=i(CIe),vhe=n(CIe,"SPAN",{});var yit=s(vhe);GWo=r(yit,"AutoModelForSpeechSeq2Seq"),yit.forEach(t),CIe.forEach(t),EBe=i(f),Oo=n(f,"DIV",{class:!0});var Ks=s(Oo);T(hA.$$.fragment,Ks),OWo=i(Ks),fd=n(Ks,"P",{});var LY=s(fd);VWo=r(LY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pV=n(LY,"A",{href:!0});var Lit=s(pV);XWo=r(Lit,"from_pretrained()"),Lit.forEach(t),zWo=r(LY," class method or the "),uV=n(LY,"A",{href:!0});var xit=s(uV);QWo=r(xit,"from_config()"),xit.forEach(t),WWo=r(LY,` class
method.`),LY.forEach(t),HWo=i(Ks),pA=n(Ks,"P",{});var wIe=s(pA);UWo=r(wIe,"This class cannot be instantiated directly using "),Fhe=n(wIe,"CODE",{});var $it=s(Fhe);JWo=r($it,"__init__()"),$it.forEach(t),YWo=r(wIe," (throws an error)."),wIe.forEach(t),KWo=i(Ks),pt=n(Ks,"DIV",{class:!0});var K5=s(pt);T(uA.$$.fragment,K5),ZWo=i(K5),The=n(K5,"P",{});var kit=s(The);eHo=r(kit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kit.forEach(t),oHo=i(K5),md=n(K5,"P",{});var xY=s(md);rHo=r(xY,`Note:
Loading a model from its configuration file does `),Mhe=n(xY,"STRONG",{});var Sit=s(Mhe);tHo=r(Sit,"not"),Sit.forEach(t),aHo=r(xY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(xY,"A",{href:!0});var Rit=s(_V);nHo=r(Rit,"from_pretrained()"),Rit.forEach(t),sHo=r(xY," to load the model weights."),xY.forEach(t),lHo=i(K5),T(f0.$$.fragment,K5),K5.forEach(t),iHo=i(Ks),io=n(Ks,"DIV",{class:!0});var fa=s(io);T(_A.$$.fragment,fa),dHo=i(fa),Ehe=n(fa,"P",{});var Bit=s(Ehe);cHo=r(Bit,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Bit.forEach(t),fHo=i(fa),ja=n(fa,"P",{});var Z5=s(ja);mHo=r(Z5,"The model class to instantiate is selected based on the "),Che=n(Z5,"CODE",{});var Pit=s(Che);gHo=r(Pit,"model_type"),Pit.forEach(t),hHo=r(Z5,` property of the config object (either
passed as an argument or loaded from `),whe=n(Z5,"CODE",{});var Iit=s(whe);pHo=r(Iit,"pretrained_model_name_or_path"),Iit.forEach(t),uHo=r(Z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(Z5,"CODE",{});var qit=s(Ahe);_Ho=r(qit,"pretrained_model_name_or_path"),qit.forEach(t),bHo=r(Z5,":"),Z5.forEach(t),vHo=i(fa),bA=n(fa,"UL",{});var AIe=s(bA);m0=n(AIe,"LI",{});var BLe=s(m0);yhe=n(BLe,"STRONG",{});var Nit=s(yhe);FHo=r(Nit,"speech-encoder-decoder"),Nit.forEach(t),THo=r(BLe," \u2014 "),bV=n(BLe,"A",{href:!0});var jit=s(bV);MHo=r(jit,"SpeechEncoderDecoderModel"),jit.forEach(t),EHo=r(BLe," (Speech Encoder decoder model)"),BLe.forEach(t),CHo=i(AIe),g0=n(AIe,"LI",{});var PLe=s(g0);Lhe=n(PLe,"STRONG",{});var Dit=s(Lhe);wHo=r(Dit,"speech_to_text"),Dit.forEach(t),AHo=r(PLe," \u2014 "),vV=n(PLe,"A",{href:!0});var Git=s(vV);yHo=r(Git,"Speech2TextForConditionalGeneration"),Git.forEach(t),LHo=r(PLe," (Speech2Text model)"),PLe.forEach(t),AIe.forEach(t),xHo=i(fa),h0=n(fa,"P",{});var ILe=s(h0);$Ho=r(ILe,"The model is set in evaluation mode by default using "),xhe=n(ILe,"CODE",{});var Oit=s(xhe);kHo=r(Oit,"model.eval()"),Oit.forEach(t),SHo=r(ILe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=n(ILe,"CODE",{});var Vit=s($he);RHo=r(Vit,"model.train()"),Vit.forEach(t),ILe.forEach(t),BHo=i(fa),T(p0.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),CBe=i(f),gd=n(f,"H2",{class:!0});var yIe=s(gd);u0=n(yIe,"A",{id:!0,class:!0,href:!0});var Xit=s(u0);khe=n(Xit,"SPAN",{});var zit=s(khe);T(vA.$$.fragment,zit),zit.forEach(t),Xit.forEach(t),PHo=i(yIe),She=n(yIe,"SPAN",{});var Qit=s(She);IHo=r(Qit,"AutoModelForAudioXVector"),Qit.forEach(t),yIe.forEach(t),wBe=i(f),Vo=n(f,"DIV",{class:!0});var Zs=s(Vo);T(FA.$$.fragment,Zs),qHo=i(Zs),hd=n(Zs,"P",{});var $Y=s(hd);NHo=r($Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),FV=n($Y,"A",{href:!0});var Wit=s(FV);jHo=r(Wit,"from_pretrained()"),Wit.forEach(t),DHo=r($Y," class method or the "),TV=n($Y,"A",{href:!0});var Hit=s(TV);GHo=r(Hit,"from_config()"),Hit.forEach(t),OHo=r($Y,` class
method.`),$Y.forEach(t),VHo=i(Zs),TA=n(Zs,"P",{});var LIe=s(TA);XHo=r(LIe,"This class cannot be instantiated directly using "),Rhe=n(LIe,"CODE",{});var Uit=s(Rhe);zHo=r(Uit,"__init__()"),Uit.forEach(t),QHo=r(LIe," (throws an error)."),LIe.forEach(t),WHo=i(Zs),ut=n(Zs,"DIV",{class:!0});var eC=s(ut);T(MA.$$.fragment,eC),HHo=i(eC),Bhe=n(eC,"P",{});var Jit=s(Bhe);UHo=r(Jit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Jit.forEach(t),JHo=i(eC),pd=n(eC,"P",{});var kY=s(pd);YHo=r(kY,`Note:
Loading a model from its configuration file does `),Phe=n(kY,"STRONG",{});var Yit=s(Phe);KHo=r(Yit,"not"),Yit.forEach(t),ZHo=r(kY,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(kY,"A",{href:!0});var Kit=s(MV);eUo=r(Kit,"from_pretrained()"),Kit.forEach(t),oUo=r(kY," to load the model weights."),kY.forEach(t),rUo=i(eC),T(_0.$$.fragment,eC),eC.forEach(t),tUo=i(Zs),co=n(Zs,"DIV",{class:!0});var ma=s(co);T(EA.$$.fragment,ma),aUo=i(ma),Ihe=n(ma,"P",{});var Zit=s(Ihe);nUo=r(Zit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Zit.forEach(t),sUo=i(ma),Da=n(ma,"P",{});var oC=s(Da);lUo=r(oC,"The model class to instantiate is selected based on the "),qhe=n(oC,"CODE",{});var edt=s(qhe);iUo=r(edt,"model_type"),edt.forEach(t),dUo=r(oC,` property of the config object (either
passed as an argument or loaded from `),Nhe=n(oC,"CODE",{});var odt=s(Nhe);cUo=r(odt,"pretrained_model_name_or_path"),odt.forEach(t),fUo=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=n(oC,"CODE",{});var rdt=s(jhe);mUo=r(rdt,"pretrained_model_name_or_path"),rdt.forEach(t),gUo=r(oC,":"),oC.forEach(t),hUo=i(ma),Ga=n(ma,"UL",{});var rC=s(Ga);b0=n(rC,"LI",{});var qLe=s(b0);Dhe=n(qLe,"STRONG",{});var tdt=s(Dhe);pUo=r(tdt,"data2vec-audio"),tdt.forEach(t),uUo=r(qLe," \u2014 "),EV=n(qLe,"A",{href:!0});var adt=s(EV);_Uo=r(adt,"Data2VecAudioForXVector"),adt.forEach(t),bUo=r(qLe," (Data2VecAudio model)"),qLe.forEach(t),vUo=i(rC),v0=n(rC,"LI",{});var NLe=s(v0);Ghe=n(NLe,"STRONG",{});var ndt=s(Ghe);FUo=r(ndt,"unispeech-sat"),ndt.forEach(t),TUo=r(NLe," \u2014 "),CV=n(NLe,"A",{href:!0});var sdt=s(CV);MUo=r(sdt,"UniSpeechSatForXVector"),sdt.forEach(t),EUo=r(NLe," (UniSpeechSat model)"),NLe.forEach(t),CUo=i(rC),F0=n(rC,"LI",{});var jLe=s(F0);Ohe=n(jLe,"STRONG",{});var ldt=s(Ohe);wUo=r(ldt,"wav2vec2"),ldt.forEach(t),AUo=r(jLe," \u2014 "),wV=n(jLe,"A",{href:!0});var idt=s(wV);yUo=r(idt,"Wav2Vec2ForXVector"),idt.forEach(t),LUo=r(jLe," (Wav2Vec2 model)"),jLe.forEach(t),xUo=i(rC),T0=n(rC,"LI",{});var DLe=s(T0);Vhe=n(DLe,"STRONG",{});var ddt=s(Vhe);$Uo=r(ddt,"wavlm"),ddt.forEach(t),kUo=r(DLe," \u2014 "),AV=n(DLe,"A",{href:!0});var cdt=s(AV);SUo=r(cdt,"WavLMForXVector"),cdt.forEach(t),RUo=r(DLe," (WavLM model)"),DLe.forEach(t),rC.forEach(t),BUo=i(ma),M0=n(ma,"P",{});var GLe=s(M0);PUo=r(GLe,"The model is set in evaluation mode by default using "),Xhe=n(GLe,"CODE",{});var fdt=s(Xhe);IUo=r(fdt,"model.eval()"),fdt.forEach(t),qUo=r(GLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=n(GLe,"CODE",{});var mdt=s(zhe);NUo=r(mdt,"model.train()"),mdt.forEach(t),GLe.forEach(t),jUo=i(ma),T(E0.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),ABe=i(f),ud=n(f,"H2",{class:!0});var xIe=s(ud);C0=n(xIe,"A",{id:!0,class:!0,href:!0});var gdt=s(C0);Qhe=n(gdt,"SPAN",{});var hdt=s(Qhe);T(CA.$$.fragment,hdt),hdt.forEach(t),gdt.forEach(t),DUo=i(xIe),Whe=n(xIe,"SPAN",{});var pdt=s(Whe);GUo=r(pdt,"AutoModelForMaskedImageModeling"),pdt.forEach(t),xIe.forEach(t),yBe=i(f),Xo=n(f,"DIV",{class:!0});var el=s(Xo);T(wA.$$.fragment,el),OUo=i(el),_d=n(el,"P",{});var SY=s(_d);VUo=r(SY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yV=n(SY,"A",{href:!0});var udt=s(yV);XUo=r(udt,"from_pretrained()"),udt.forEach(t),zUo=r(SY," class method or the "),LV=n(SY,"A",{href:!0});var _dt=s(LV);QUo=r(_dt,"from_config()"),_dt.forEach(t),WUo=r(SY,` class
method.`),SY.forEach(t),HUo=i(el),AA=n(el,"P",{});var $Ie=s(AA);UUo=r($Ie,"This class cannot be instantiated directly using "),Hhe=n($Ie,"CODE",{});var bdt=s(Hhe);JUo=r(bdt,"__init__()"),bdt.forEach(t),YUo=r($Ie," (throws an error)."),$Ie.forEach(t),KUo=i(el),_t=n(el,"DIV",{class:!0});var tC=s(_t);T(yA.$$.fragment,tC),ZUo=i(tC),Uhe=n(tC,"P",{});var vdt=s(Uhe);eJo=r(vdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),vdt.forEach(t),oJo=i(tC),bd=n(tC,"P",{});var RY=s(bd);rJo=r(RY,`Note:
Loading a model from its configuration file does `),Jhe=n(RY,"STRONG",{});var Fdt=s(Jhe);tJo=r(Fdt,"not"),Fdt.forEach(t),aJo=r(RY,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(RY,"A",{href:!0});var Tdt=s(xV);nJo=r(Tdt,"from_pretrained()"),Tdt.forEach(t),sJo=r(RY," to load the model weights."),RY.forEach(t),lJo=i(tC),T(w0.$$.fragment,tC),tC.forEach(t),iJo=i(el),fo=n(el,"DIV",{class:!0});var ga=s(fo);T(LA.$$.fragment,ga),dJo=i(ga),Yhe=n(ga,"P",{});var Mdt=s(Yhe);cJo=r(Mdt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Mdt.forEach(t),fJo=i(ga),Oa=n(ga,"P",{});var aC=s(Oa);mJo=r(aC,"The model class to instantiate is selected based on the "),Khe=n(aC,"CODE",{});var Edt=s(Khe);gJo=r(Edt,"model_type"),Edt.forEach(t),hJo=r(aC,` property of the config object (either
passed as an argument or loaded from `),Zhe=n(aC,"CODE",{});var Cdt=s(Zhe);pJo=r(Cdt,"pretrained_model_name_or_path"),Cdt.forEach(t),uJo=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=n(aC,"CODE",{});var wdt=s(epe);_Jo=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),bJo=r(aC,":"),aC.forEach(t),vJo=i(ga),Va=n(ga,"UL",{});var nC=s(Va);A0=n(nC,"LI",{});var OLe=s(A0);ope=n(OLe,"STRONG",{});var Adt=s(ope);FJo=r(Adt,"beit"),Adt.forEach(t),TJo=r(OLe," \u2014 "),$V=n(OLe,"A",{href:!0});var ydt=s($V);MJo=r(ydt,"BeitForMaskedImageModeling"),ydt.forEach(t),EJo=r(OLe," (BEiT model)"),OLe.forEach(t),CJo=i(nC),y0=n(nC,"LI",{});var VLe=s(y0);rpe=n(VLe,"STRONG",{});var Ldt=s(rpe);wJo=r(Ldt,"deit"),Ldt.forEach(t),AJo=r(VLe," \u2014 "),kV=n(VLe,"A",{href:!0});var xdt=s(kV);yJo=r(xdt,"DeiTForMaskedImageModeling"),xdt.forEach(t),LJo=r(VLe," (DeiT model)"),VLe.forEach(t),xJo=i(nC),L0=n(nC,"LI",{});var XLe=s(L0);tpe=n(XLe,"STRONG",{});var $dt=s(tpe);$Jo=r($dt,"swin"),$dt.forEach(t),kJo=r(XLe," \u2014 "),SV=n(XLe,"A",{href:!0});var kdt=s(SV);SJo=r(kdt,"SwinForMaskedImageModeling"),kdt.forEach(t),RJo=r(XLe," (Swin model)"),XLe.forEach(t),BJo=i(nC),x0=n(nC,"LI",{});var zLe=s(x0);ape=n(zLe,"STRONG",{});var Sdt=s(ape);PJo=r(Sdt,"vit"),Sdt.forEach(t),IJo=r(zLe," \u2014 "),RV=n(zLe,"A",{href:!0});var Rdt=s(RV);qJo=r(Rdt,"ViTForMaskedImageModeling"),Rdt.forEach(t),NJo=r(zLe," (ViT model)"),zLe.forEach(t),nC.forEach(t),jJo=i(ga),$0=n(ga,"P",{});var QLe=s($0);DJo=r(QLe,"The model is set in evaluation mode by default using "),npe=n(QLe,"CODE",{});var Bdt=s(npe);GJo=r(Bdt,"model.eval()"),Bdt.forEach(t),OJo=r(QLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),spe=n(QLe,"CODE",{});var Pdt=s(spe);VJo=r(Pdt,"model.train()"),Pdt.forEach(t),QLe.forEach(t),XJo=i(ga),T(k0.$$.fragment,ga),ga.forEach(t),el.forEach(t),LBe=i(f),vd=n(f,"H2",{class:!0});var kIe=s(vd);S0=n(kIe,"A",{id:!0,class:!0,href:!0});var Idt=s(S0);lpe=n(Idt,"SPAN",{});var qdt=s(lpe);T(xA.$$.fragment,qdt),qdt.forEach(t),Idt.forEach(t),zJo=i(kIe),ipe=n(kIe,"SPAN",{});var Ndt=s(ipe);QJo=r(Ndt,"AutoModelForObjectDetection"),Ndt.forEach(t),kIe.forEach(t),xBe=i(f),zo=n(f,"DIV",{class:!0});var ol=s(zo);T($A.$$.fragment,ol),WJo=i(ol),Fd=n(ol,"P",{});var BY=s(Fd);HJo=r(BY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),BV=n(BY,"A",{href:!0});var jdt=s(BV);UJo=r(jdt,"from_pretrained()"),jdt.forEach(t),JJo=r(BY," class method or the "),PV=n(BY,"A",{href:!0});var Ddt=s(PV);YJo=r(Ddt,"from_config()"),Ddt.forEach(t),KJo=r(BY,` class
method.`),BY.forEach(t),ZJo=i(ol),kA=n(ol,"P",{});var SIe=s(kA);eYo=r(SIe,"This class cannot be instantiated directly using "),dpe=n(SIe,"CODE",{});var Gdt=s(dpe);oYo=r(Gdt,"__init__()"),Gdt.forEach(t),rYo=r(SIe," (throws an error)."),SIe.forEach(t),tYo=i(ol),bt=n(ol,"DIV",{class:!0});var sC=s(bt);T(SA.$$.fragment,sC),aYo=i(sC),cpe=n(sC,"P",{});var Odt=s(cpe);nYo=r(Odt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Odt.forEach(t),sYo=i(sC),Td=n(sC,"P",{});var PY=s(Td);lYo=r(PY,`Note:
Loading a model from its configuration file does `),fpe=n(PY,"STRONG",{});var Vdt=s(fpe);iYo=r(Vdt,"not"),Vdt.forEach(t),dYo=r(PY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(PY,"A",{href:!0});var Xdt=s(IV);cYo=r(Xdt,"from_pretrained()"),Xdt.forEach(t),fYo=r(PY," to load the model weights."),PY.forEach(t),mYo=i(sC),T(R0.$$.fragment,sC),sC.forEach(t),gYo=i(ol),mo=n(ol,"DIV",{class:!0});var ha=s(mo);T(RA.$$.fragment,ha),hYo=i(ha),mpe=n(ha,"P",{});var zdt=s(mpe);pYo=r(zdt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),zdt.forEach(t),uYo=i(ha),Xa=n(ha,"P",{});var lC=s(Xa);_Yo=r(lC,"The model class to instantiate is selected based on the "),gpe=n(lC,"CODE",{});var Qdt=s(gpe);bYo=r(Qdt,"model_type"),Qdt.forEach(t),vYo=r(lC,` property of the config object (either
passed as an argument or loaded from `),hpe=n(lC,"CODE",{});var Wdt=s(hpe);FYo=r(Wdt,"pretrained_model_name_or_path"),Wdt.forEach(t),TYo=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=n(lC,"CODE",{});var Hdt=s(ppe);MYo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),EYo=r(lC,":"),lC.forEach(t),CYo=i(ha),upe=n(ha,"UL",{});var Udt=s(upe);B0=n(Udt,"LI",{});var WLe=s(B0);_pe=n(WLe,"STRONG",{});var Jdt=s(_pe);wYo=r(Jdt,"detr"),Jdt.forEach(t),AYo=r(WLe," \u2014 "),qV=n(WLe,"A",{href:!0});var Ydt=s(qV);yYo=r(Ydt,"DetrForObjectDetection"),Ydt.forEach(t),LYo=r(WLe," (DETR model)"),WLe.forEach(t),Udt.forEach(t),xYo=i(ha),P0=n(ha,"P",{});var HLe=s(P0);$Yo=r(HLe,"The model is set in evaluation mode by default using "),bpe=n(HLe,"CODE",{});var Kdt=s(bpe);kYo=r(Kdt,"model.eval()"),Kdt.forEach(t),SYo=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=n(HLe,"CODE",{});var Zdt=s(vpe);RYo=r(Zdt,"model.train()"),Zdt.forEach(t),HLe.forEach(t),BYo=i(ha),T(I0.$$.fragment,ha),ha.forEach(t),ol.forEach(t),$Be=i(f),Md=n(f,"H2",{class:!0});var RIe=s(Md);q0=n(RIe,"A",{id:!0,class:!0,href:!0});var ect=s(q0);Fpe=n(ect,"SPAN",{});var oct=s(Fpe);T(BA.$$.fragment,oct),oct.forEach(t),ect.forEach(t),PYo=i(RIe),Tpe=n(RIe,"SPAN",{});var rct=s(Tpe);IYo=r(rct,"AutoModelForImageSegmentation"),rct.forEach(t),RIe.forEach(t),kBe=i(f),Qo=n(f,"DIV",{class:!0});var rl=s(Qo);T(PA.$$.fragment,rl),qYo=i(rl),Ed=n(rl,"P",{});var IY=s(Ed);NYo=r(IY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NV=n(IY,"A",{href:!0});var tct=s(NV);jYo=r(tct,"from_pretrained()"),tct.forEach(t),DYo=r(IY," class method or the "),jV=n(IY,"A",{href:!0});var act=s(jV);GYo=r(act,"from_config()"),act.forEach(t),OYo=r(IY,` class
method.`),IY.forEach(t),VYo=i(rl),IA=n(rl,"P",{});var BIe=s(IA);XYo=r(BIe,"This class cannot be instantiated directly using "),Mpe=n(BIe,"CODE",{});var nct=s(Mpe);zYo=r(nct,"__init__()"),nct.forEach(t),QYo=r(BIe," (throws an error)."),BIe.forEach(t),WYo=i(rl),vt=n(rl,"DIV",{class:!0});var iC=s(vt);T(qA.$$.fragment,iC),HYo=i(iC),Epe=n(iC,"P",{});var sct=s(Epe);UYo=r(sct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sct.forEach(t),JYo=i(iC),Cd=n(iC,"P",{});var qY=s(Cd);YYo=r(qY,`Note:
Loading a model from its configuration file does `),Cpe=n(qY,"STRONG",{});var lct=s(Cpe);KYo=r(lct,"not"),lct.forEach(t),ZYo=r(qY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(qY,"A",{href:!0});var ict=s(DV);eKo=r(ict,"from_pretrained()"),ict.forEach(t),oKo=r(qY," to load the model weights."),qY.forEach(t),rKo=i(iC),T(N0.$$.fragment,iC),iC.forEach(t),tKo=i(rl),go=n(rl,"DIV",{class:!0});var pa=s(go);T(NA.$$.fragment,pa),aKo=i(pa),wpe=n(pa,"P",{});var dct=s(wpe);nKo=r(dct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),dct.forEach(t),sKo=i(pa),za=n(pa,"P",{});var dC=s(za);lKo=r(dC,"The model class to instantiate is selected based on the "),Ape=n(dC,"CODE",{});var cct=s(Ape);iKo=r(cct,"model_type"),cct.forEach(t),dKo=r(dC,` property of the config object (either
passed as an argument or loaded from `),ype=n(dC,"CODE",{});var fct=s(ype);cKo=r(fct,"pretrained_model_name_or_path"),fct.forEach(t),fKo=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n(dC,"CODE",{});var mct=s(Lpe);mKo=r(mct,"pretrained_model_name_or_path"),mct.forEach(t),gKo=r(dC,":"),dC.forEach(t),hKo=i(pa),xpe=n(pa,"UL",{});var gct=s(xpe);j0=n(gct,"LI",{});var ULe=s(j0);$pe=n(ULe,"STRONG",{});var hct=s($pe);pKo=r(hct,"detr"),hct.forEach(t),uKo=r(ULe," \u2014 "),GV=n(ULe,"A",{href:!0});var pct=s(GV);_Ko=r(pct,"DetrForSegmentation"),pct.forEach(t),bKo=r(ULe," (DETR model)"),ULe.forEach(t),gct.forEach(t),vKo=i(pa),D0=n(pa,"P",{});var JLe=s(D0);FKo=r(JLe,"The model is set in evaluation mode by default using "),kpe=n(JLe,"CODE",{});var uct=s(kpe);TKo=r(uct,"model.eval()"),uct.forEach(t),MKo=r(JLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=n(JLe,"CODE",{});var _ct=s(Spe);EKo=r(_ct,"model.train()"),_ct.forEach(t),JLe.forEach(t),CKo=i(pa),T(G0.$$.fragment,pa),pa.forEach(t),rl.forEach(t),SBe=i(f),wd=n(f,"H2",{class:!0});var PIe=s(wd);O0=n(PIe,"A",{id:!0,class:!0,href:!0});var bct=s(O0);Rpe=n(bct,"SPAN",{});var vct=s(Rpe);T(jA.$$.fragment,vct),vct.forEach(t),bct.forEach(t),wKo=i(PIe),Bpe=n(PIe,"SPAN",{});var Fct=s(Bpe);AKo=r(Fct,"AutoModelForSemanticSegmentation"),Fct.forEach(t),PIe.forEach(t),RBe=i(f),Wo=n(f,"DIV",{class:!0});var tl=s(Wo);T(DA.$$.fragment,tl),yKo=i(tl),Ad=n(tl,"P",{});var NY=s(Ad);LKo=r(NY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),OV=n(NY,"A",{href:!0});var Tct=s(OV);xKo=r(Tct,"from_pretrained()"),Tct.forEach(t),$Ko=r(NY," class method or the "),VV=n(NY,"A",{href:!0});var Mct=s(VV);kKo=r(Mct,"from_config()"),Mct.forEach(t),SKo=r(NY,` class
method.`),NY.forEach(t),RKo=i(tl),GA=n(tl,"P",{});var IIe=s(GA);BKo=r(IIe,"This class cannot be instantiated directly using "),Ppe=n(IIe,"CODE",{});var Ect=s(Ppe);PKo=r(Ect,"__init__()"),Ect.forEach(t),IKo=r(IIe," (throws an error)."),IIe.forEach(t),qKo=i(tl),Ft=n(tl,"DIV",{class:!0});var cC=s(Ft);T(OA.$$.fragment,cC),NKo=i(cC),Ipe=n(cC,"P",{});var Cct=s(Ipe);jKo=r(Cct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Cct.forEach(t),DKo=i(cC),yd=n(cC,"P",{});var jY=s(yd);GKo=r(jY,`Note:
Loading a model from its configuration file does `),qpe=n(jY,"STRONG",{});var wct=s(qpe);OKo=r(wct,"not"),wct.forEach(t),VKo=r(jY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(jY,"A",{href:!0});var Act=s(XV);XKo=r(Act,"from_pretrained()"),Act.forEach(t),zKo=r(jY," to load the model weights."),jY.forEach(t),QKo=i(cC),T(V0.$$.fragment,cC),cC.forEach(t),WKo=i(tl),ho=n(tl,"DIV",{class:!0});var ua=s(ho);T(VA.$$.fragment,ua),HKo=i(ua),Npe=n(ua,"P",{});var yct=s(Npe);UKo=r(yct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),yct.forEach(t),JKo=i(ua),Qa=n(ua,"P",{});var fC=s(Qa);YKo=r(fC,"The model class to instantiate is selected based on the "),jpe=n(fC,"CODE",{});var Lct=s(jpe);KKo=r(Lct,"model_type"),Lct.forEach(t),ZKo=r(fC,` property of the config object (either
passed as an argument or loaded from `),Dpe=n(fC,"CODE",{});var xct=s(Dpe);eZo=r(xct,"pretrained_model_name_or_path"),xct.forEach(t),oZo=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=n(fC,"CODE",{});var $ct=s(Gpe);rZo=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),tZo=r(fC,":"),fC.forEach(t),aZo=i(ua),Wa=n(ua,"UL",{});var mC=s(Wa);X0=n(mC,"LI",{});var YLe=s(X0);Ope=n(YLe,"STRONG",{});var kct=s(Ope);nZo=r(kct,"beit"),kct.forEach(t),sZo=r(YLe," \u2014 "),zV=n(YLe,"A",{href:!0});var Sct=s(zV);lZo=r(Sct,"BeitForSemanticSegmentation"),Sct.forEach(t),iZo=r(YLe," (BEiT model)"),YLe.forEach(t),dZo=i(mC),z0=n(mC,"LI",{});var KLe=s(z0);Vpe=n(KLe,"STRONG",{});var Rct=s(Vpe);cZo=r(Rct,"data2vec-vision"),Rct.forEach(t),fZo=r(KLe," \u2014 "),QV=n(KLe,"A",{href:!0});var Bct=s(QV);mZo=r(Bct,"Data2VecVisionForSemanticSegmentation"),Bct.forEach(t),gZo=r(KLe," (Data2VecVision model)"),KLe.forEach(t),hZo=i(mC),Q0=n(mC,"LI",{});var ZLe=s(Q0);Xpe=n(ZLe,"STRONG",{});var Pct=s(Xpe);pZo=r(Pct,"dpt"),Pct.forEach(t),uZo=r(ZLe," \u2014 "),WV=n(ZLe,"A",{href:!0});var Ict=s(WV);_Zo=r(Ict,"DPTForSemanticSegmentation"),Ict.forEach(t),bZo=r(ZLe," (DPT model)"),ZLe.forEach(t),vZo=i(mC),W0=n(mC,"LI",{});var e7e=s(W0);zpe=n(e7e,"STRONG",{});var qct=s(zpe);FZo=r(qct,"segformer"),qct.forEach(t),TZo=r(e7e," \u2014 "),HV=n(e7e,"A",{href:!0});var Nct=s(HV);MZo=r(Nct,"SegformerForSemanticSegmentation"),Nct.forEach(t),EZo=r(e7e," (SegFormer model)"),e7e.forEach(t),mC.forEach(t),CZo=i(ua),H0=n(ua,"P",{});var o7e=s(H0);wZo=r(o7e,"The model is set in evaluation mode by default using "),Qpe=n(o7e,"CODE",{});var jct=s(Qpe);AZo=r(jct,"model.eval()"),jct.forEach(t),yZo=r(o7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(o7e,"CODE",{});var Dct=s(Wpe);LZo=r(Dct,"model.train()"),Dct.forEach(t),o7e.forEach(t),xZo=i(ua),T(U0.$$.fragment,ua),ua.forEach(t),tl.forEach(t),BBe=i(f),Ld=n(f,"H2",{class:!0});var qIe=s(Ld);J0=n(qIe,"A",{id:!0,class:!0,href:!0});var Gct=s(J0);Hpe=n(Gct,"SPAN",{});var Oct=s(Hpe);T(XA.$$.fragment,Oct),Oct.forEach(t),Gct.forEach(t),$Zo=i(qIe),Upe=n(qIe,"SPAN",{});var Vct=s(Upe);kZo=r(Vct,"AutoModelForInstanceSegmentation"),Vct.forEach(t),qIe.forEach(t),PBe=i(f),Ho=n(f,"DIV",{class:!0});var al=s(Ho);T(zA.$$.fragment,al),SZo=i(al),xd=n(al,"P",{});var DY=s(xd);RZo=r(DY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UV=n(DY,"A",{href:!0});var Xct=s(UV);BZo=r(Xct,"from_pretrained()"),Xct.forEach(t),PZo=r(DY," class method or the "),JV=n(DY,"A",{href:!0});var zct=s(JV);IZo=r(zct,"from_config()"),zct.forEach(t),qZo=r(DY,` class
method.`),DY.forEach(t),NZo=i(al),QA=n(al,"P",{});var NIe=s(QA);jZo=r(NIe,"This class cannot be instantiated directly using "),Jpe=n(NIe,"CODE",{});var Qct=s(Jpe);DZo=r(Qct,"__init__()"),Qct.forEach(t),GZo=r(NIe," (throws an error)."),NIe.forEach(t),OZo=i(al),Tt=n(al,"DIV",{class:!0});var gC=s(Tt);T(WA.$$.fragment,gC),VZo=i(gC),Ype=n(gC,"P",{});var Wct=s(Ype);XZo=r(Wct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wct.forEach(t),zZo=i(gC),$d=n(gC,"P",{});var GY=s($d);QZo=r(GY,`Note:
Loading a model from its configuration file does `),Kpe=n(GY,"STRONG",{});var Hct=s(Kpe);WZo=r(Hct,"not"),Hct.forEach(t),HZo=r(GY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(GY,"A",{href:!0});var Uct=s(YV);UZo=r(Uct,"from_pretrained()"),Uct.forEach(t),JZo=r(GY," to load the model weights."),GY.forEach(t),YZo=i(gC),T(Y0.$$.fragment,gC),gC.forEach(t),KZo=i(al),po=n(al,"DIV",{class:!0});var _a=s(po);T(HA.$$.fragment,_a),ZZo=i(_a),Zpe=n(_a,"P",{});var Jct=s(Zpe);eer=r(Jct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Jct.forEach(t),oer=i(_a),Ha=n(_a,"P",{});var hC=s(Ha);rer=r(hC,"The model class to instantiate is selected based on the "),eue=n(hC,"CODE",{});var Yct=s(eue);ter=r(Yct,"model_type"),Yct.forEach(t),aer=r(hC,` property of the config object (either
passed as an argument or loaded from `),oue=n(hC,"CODE",{});var Kct=s(oue);ner=r(Kct,"pretrained_model_name_or_path"),Kct.forEach(t),ser=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(hC,"CODE",{});var Zct=s(rue);ler=r(Zct,"pretrained_model_name_or_path"),Zct.forEach(t),ier=r(hC,":"),hC.forEach(t),der=i(_a),tue=n(_a,"UL",{});var eft=s(tue);K0=n(eft,"LI",{});var r7e=s(K0);aue=n(r7e,"STRONG",{});var oft=s(aue);cer=r(oft,"maskformer"),oft.forEach(t),fer=r(r7e," \u2014 "),KV=n(r7e,"A",{href:!0});var rft=s(KV);mer=r(rft,"MaskFormerForInstanceSegmentation"),rft.forEach(t),ger=r(r7e," (MaskFormer model)"),r7e.forEach(t),eft.forEach(t),her=i(_a),Z0=n(_a,"P",{});var t7e=s(Z0);per=r(t7e,"The model is set in evaluation mode by default using "),nue=n(t7e,"CODE",{});var tft=s(nue);uer=r(tft,"model.eval()"),tft.forEach(t),_er=r(t7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=n(t7e,"CODE",{});var aft=s(sue);ber=r(aft,"model.train()"),aft.forEach(t),t7e.forEach(t),ver=i(_a),T(e6.$$.fragment,_a),_a.forEach(t),al.forEach(t),IBe=i(f),kd=n(f,"H2",{class:!0});var jIe=s(kd);o6=n(jIe,"A",{id:!0,class:!0,href:!0});var nft=s(o6);lue=n(nft,"SPAN",{});var sft=s(lue);T(UA.$$.fragment,sft),sft.forEach(t),nft.forEach(t),Fer=i(jIe),iue=n(jIe,"SPAN",{});var lft=s(iue);Ter=r(lft,"TFAutoModel"),lft.forEach(t),jIe.forEach(t),qBe=i(f),Uo=n(f,"DIV",{class:!0});var nl=s(Uo);T(JA.$$.fragment,nl),Mer=i(nl),Sd=n(nl,"P",{});var OY=s(Sd);Eer=r(OY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZV=n(OY,"A",{href:!0});var ift=s(ZV);Cer=r(ift,"from_pretrained()"),ift.forEach(t),wer=r(OY," class method or the "),eX=n(OY,"A",{href:!0});var dft=s(eX);Aer=r(dft,"from_config()"),dft.forEach(t),yer=r(OY,` class
method.`),OY.forEach(t),Ler=i(nl),YA=n(nl,"P",{});var DIe=s(YA);xer=r(DIe,"This class cannot be instantiated directly using "),due=n(DIe,"CODE",{});var cft=s(due);$er=r(cft,"__init__()"),cft.forEach(t),ker=r(DIe," (throws an error)."),DIe.forEach(t),Ser=i(nl),Mt=n(nl,"DIV",{class:!0});var pC=s(Mt);T(KA.$$.fragment,pC),Rer=i(pC),cue=n(pC,"P",{});var fft=s(cue);Ber=r(fft,"Instantiates one of the base model classes of the library from a configuration."),fft.forEach(t),Per=i(pC),Rd=n(pC,"P",{});var VY=s(Rd);Ier=r(VY,`Note:
Loading a model from its configuration file does `),fue=n(VY,"STRONG",{});var mft=s(fue);qer=r(mft,"not"),mft.forEach(t),Ner=r(VY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(VY,"A",{href:!0});var gft=s(oX);jer=r(gft,"from_pretrained()"),gft.forEach(t),Der=r(VY," to load the model weights."),VY.forEach(t),Ger=i(pC),T(r6.$$.fragment,pC),pC.forEach(t),Oer=i(nl),Mr=n(nl,"DIV",{class:!0});var sl=s(Mr);T(ZA.$$.fragment,sl),Ver=i(sl),mue=n(sl,"P",{});var hft=s(mue);Xer=r(hft,"Instantiate one of the base model classes of the library from a pretrained model."),hft.forEach(t),zer=i(sl),Ua=n(sl,"P",{});var uC=s(Ua);Qer=r(uC,"The model class to instantiate is selected based on the "),gue=n(uC,"CODE",{});var pft=s(gue);Wer=r(pft,"model_type"),pft.forEach(t),Her=r(uC,` property of the config object (either
passed as an argument or loaded from `),hue=n(uC,"CODE",{});var uft=s(hue);Uer=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),Jer=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(uC,"CODE",{});var _ft=s(pue);Yer=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),Ker=r(uC,":"),uC.forEach(t),Zer=i(sl),j=n(sl,"UL",{});var D=s(j);t6=n(D,"LI",{});var a7e=s(t6);uue=n(a7e,"STRONG",{});var bft=s(uue);eor=r(bft,"albert"),bft.forEach(t),oor=r(a7e," \u2014 "),rX=n(a7e,"A",{href:!0});var vft=s(rX);ror=r(vft,"TFAlbertModel"),vft.forEach(t),tor=r(a7e," (ALBERT model)"),a7e.forEach(t),aor=i(D),a6=n(D,"LI",{});var n7e=s(a6);_ue=n(n7e,"STRONG",{});var Fft=s(_ue);nor=r(Fft,"bart"),Fft.forEach(t),sor=r(n7e," \u2014 "),tX=n(n7e,"A",{href:!0});var Tft=s(tX);lor=r(Tft,"TFBartModel"),Tft.forEach(t),ior=r(n7e," (BART model)"),n7e.forEach(t),dor=i(D),n6=n(D,"LI",{});var s7e=s(n6);bue=n(s7e,"STRONG",{});var Mft=s(bue);cor=r(Mft,"bert"),Mft.forEach(t),mor=r(s7e," \u2014 "),aX=n(s7e,"A",{href:!0});var Eft=s(aX);gor=r(Eft,"TFBertModel"),Eft.forEach(t),hor=r(s7e," (BERT model)"),s7e.forEach(t),por=i(D),s6=n(D,"LI",{});var l7e=s(s6);vue=n(l7e,"STRONG",{});var Cft=s(vue);uor=r(Cft,"blenderbot"),Cft.forEach(t),_or=r(l7e," \u2014 "),nX=n(l7e,"A",{href:!0});var wft=s(nX);bor=r(wft,"TFBlenderbotModel"),wft.forEach(t),vor=r(l7e," (Blenderbot model)"),l7e.forEach(t),For=i(D),l6=n(D,"LI",{});var i7e=s(l6);Fue=n(i7e,"STRONG",{});var Aft=s(Fue);Tor=r(Aft,"blenderbot-small"),Aft.forEach(t),Mor=r(i7e," \u2014 "),sX=n(i7e,"A",{href:!0});var yft=s(sX);Eor=r(yft,"TFBlenderbotSmallModel"),yft.forEach(t),Cor=r(i7e," (BlenderbotSmall model)"),i7e.forEach(t),wor=i(D),i6=n(D,"LI",{});var d7e=s(i6);Tue=n(d7e,"STRONG",{});var Lft=s(Tue);Aor=r(Lft,"camembert"),Lft.forEach(t),yor=r(d7e," \u2014 "),lX=n(d7e,"A",{href:!0});var xft=s(lX);Lor=r(xft,"TFCamembertModel"),xft.forEach(t),xor=r(d7e," (CamemBERT model)"),d7e.forEach(t),$or=i(D),d6=n(D,"LI",{});var c7e=s(d6);Mue=n(c7e,"STRONG",{});var $ft=s(Mue);kor=r($ft,"clip"),$ft.forEach(t),Sor=r(c7e," \u2014 "),iX=n(c7e,"A",{href:!0});var kft=s(iX);Ror=r(kft,"TFCLIPModel"),kft.forEach(t),Bor=r(c7e," (CLIP model)"),c7e.forEach(t),Por=i(D),c6=n(D,"LI",{});var f7e=s(c6);Eue=n(f7e,"STRONG",{});var Sft=s(Eue);Ior=r(Sft,"convbert"),Sft.forEach(t),qor=r(f7e," \u2014 "),dX=n(f7e,"A",{href:!0});var Rft=s(dX);Nor=r(Rft,"TFConvBertModel"),Rft.forEach(t),jor=r(f7e," (ConvBERT model)"),f7e.forEach(t),Dor=i(D),f6=n(D,"LI",{});var m7e=s(f6);Cue=n(m7e,"STRONG",{});var Bft=s(Cue);Gor=r(Bft,"convnext"),Bft.forEach(t),Oor=r(m7e," \u2014 "),cX=n(m7e,"A",{href:!0});var Pft=s(cX);Vor=r(Pft,"TFConvNextModel"),Pft.forEach(t),Xor=r(m7e," (ConvNext model)"),m7e.forEach(t),zor=i(D),m6=n(D,"LI",{});var g7e=s(m6);wue=n(g7e,"STRONG",{});var Ift=s(wue);Qor=r(Ift,"ctrl"),Ift.forEach(t),Wor=r(g7e," \u2014 "),fX=n(g7e,"A",{href:!0});var qft=s(fX);Hor=r(qft,"TFCTRLModel"),qft.forEach(t),Uor=r(g7e," (CTRL model)"),g7e.forEach(t),Jor=i(D),g6=n(D,"LI",{});var h7e=s(g6);Aue=n(h7e,"STRONG",{});var Nft=s(Aue);Yor=r(Nft,"deberta"),Nft.forEach(t),Kor=r(h7e," \u2014 "),mX=n(h7e,"A",{href:!0});var jft=s(mX);Zor=r(jft,"TFDebertaModel"),jft.forEach(t),err=r(h7e," (DeBERTa model)"),h7e.forEach(t),orr=i(D),h6=n(D,"LI",{});var p7e=s(h6);yue=n(p7e,"STRONG",{});var Dft=s(yue);rrr=r(Dft,"deberta-v2"),Dft.forEach(t),trr=r(p7e," \u2014 "),gX=n(p7e,"A",{href:!0});var Gft=s(gX);arr=r(Gft,"TFDebertaV2Model"),Gft.forEach(t),nrr=r(p7e," (DeBERTa-v2 model)"),p7e.forEach(t),srr=i(D),p6=n(D,"LI",{});var u7e=s(p6);Lue=n(u7e,"STRONG",{});var Oft=s(Lue);lrr=r(Oft,"distilbert"),Oft.forEach(t),irr=r(u7e," \u2014 "),hX=n(u7e,"A",{href:!0});var Vft=s(hX);drr=r(Vft,"TFDistilBertModel"),Vft.forEach(t),crr=r(u7e," (DistilBERT model)"),u7e.forEach(t),frr=i(D),u6=n(D,"LI",{});var _7e=s(u6);xue=n(_7e,"STRONG",{});var Xft=s(xue);mrr=r(Xft,"dpr"),Xft.forEach(t),grr=r(_7e," \u2014 "),pX=n(_7e,"A",{href:!0});var zft=s(pX);hrr=r(zft,"TFDPRQuestionEncoder"),zft.forEach(t),prr=r(_7e," (DPR model)"),_7e.forEach(t),urr=i(D),_6=n(D,"LI",{});var b7e=s(_6);$ue=n(b7e,"STRONG",{});var Qft=s($ue);_rr=r(Qft,"electra"),Qft.forEach(t),brr=r(b7e," \u2014 "),uX=n(b7e,"A",{href:!0});var Wft=s(uX);vrr=r(Wft,"TFElectraModel"),Wft.forEach(t),Frr=r(b7e," (ELECTRA model)"),b7e.forEach(t),Trr=i(D),b6=n(D,"LI",{});var v7e=s(b6);kue=n(v7e,"STRONG",{});var Hft=s(kue);Mrr=r(Hft,"flaubert"),Hft.forEach(t),Err=r(v7e," \u2014 "),_X=n(v7e,"A",{href:!0});var Uft=s(_X);Crr=r(Uft,"TFFlaubertModel"),Uft.forEach(t),wrr=r(v7e," (FlauBERT model)"),v7e.forEach(t),Arr=i(D),$s=n(D,"LI",{});var wx=s($s);Sue=n(wx,"STRONG",{});var Jft=s(Sue);yrr=r(Jft,"funnel"),Jft.forEach(t),Lrr=r(wx," \u2014 "),bX=n(wx,"A",{href:!0});var Yft=s(bX);xrr=r(Yft,"TFFunnelModel"),Yft.forEach(t),$rr=r(wx," or "),vX=n(wx,"A",{href:!0});var Kft=s(vX);krr=r(Kft,"TFFunnelBaseModel"),Kft.forEach(t),Srr=r(wx," (Funnel Transformer model)"),wx.forEach(t),Rrr=i(D),v6=n(D,"LI",{});var F7e=s(v6);Rue=n(F7e,"STRONG",{});var Zft=s(Rue);Brr=r(Zft,"gpt2"),Zft.forEach(t),Prr=r(F7e," \u2014 "),FX=n(F7e,"A",{href:!0});var emt=s(FX);Irr=r(emt,"TFGPT2Model"),emt.forEach(t),qrr=r(F7e," (OpenAI GPT-2 model)"),F7e.forEach(t),Nrr=i(D),F6=n(D,"LI",{});var T7e=s(F6);Bue=n(T7e,"STRONG",{});var omt=s(Bue);jrr=r(omt,"gptj"),omt.forEach(t),Drr=r(T7e," \u2014 "),TX=n(T7e,"A",{href:!0});var rmt=s(TX);Grr=r(rmt,"TFGPTJModel"),rmt.forEach(t),Orr=r(T7e," (GPT-J model)"),T7e.forEach(t),Vrr=i(D),T6=n(D,"LI",{});var M7e=s(T6);Pue=n(M7e,"STRONG",{});var tmt=s(Pue);Xrr=r(tmt,"hubert"),tmt.forEach(t),zrr=r(M7e," \u2014 "),MX=n(M7e,"A",{href:!0});var amt=s(MX);Qrr=r(amt,"TFHubertModel"),amt.forEach(t),Wrr=r(M7e," (Hubert model)"),M7e.forEach(t),Hrr=i(D),M6=n(D,"LI",{});var E7e=s(M6);Iue=n(E7e,"STRONG",{});var nmt=s(Iue);Urr=r(nmt,"layoutlm"),nmt.forEach(t),Jrr=r(E7e," \u2014 "),EX=n(E7e,"A",{href:!0});var smt=s(EX);Yrr=r(smt,"TFLayoutLMModel"),smt.forEach(t),Krr=r(E7e," (LayoutLM model)"),E7e.forEach(t),Zrr=i(D),E6=n(D,"LI",{});var C7e=s(E6);que=n(C7e,"STRONG",{});var lmt=s(que);etr=r(lmt,"led"),lmt.forEach(t),otr=r(C7e," \u2014 "),CX=n(C7e,"A",{href:!0});var imt=s(CX);rtr=r(imt,"TFLEDModel"),imt.forEach(t),ttr=r(C7e," (LED model)"),C7e.forEach(t),atr=i(D),C6=n(D,"LI",{});var w7e=s(C6);Nue=n(w7e,"STRONG",{});var dmt=s(Nue);ntr=r(dmt,"longformer"),dmt.forEach(t),str=r(w7e," \u2014 "),wX=n(w7e,"A",{href:!0});var cmt=s(wX);ltr=r(cmt,"TFLongformerModel"),cmt.forEach(t),itr=r(w7e," (Longformer model)"),w7e.forEach(t),dtr=i(D),w6=n(D,"LI",{});var A7e=s(w6);jue=n(A7e,"STRONG",{});var fmt=s(jue);ctr=r(fmt,"lxmert"),fmt.forEach(t),ftr=r(A7e," \u2014 "),AX=n(A7e,"A",{href:!0});var mmt=s(AX);mtr=r(mmt,"TFLxmertModel"),mmt.forEach(t),gtr=r(A7e," (LXMERT model)"),A7e.forEach(t),htr=i(D),A6=n(D,"LI",{});var y7e=s(A6);Due=n(y7e,"STRONG",{});var gmt=s(Due);ptr=r(gmt,"marian"),gmt.forEach(t),utr=r(y7e," \u2014 "),yX=n(y7e,"A",{href:!0});var hmt=s(yX);_tr=r(hmt,"TFMarianModel"),hmt.forEach(t),btr=r(y7e," (Marian model)"),y7e.forEach(t),vtr=i(D),y6=n(D,"LI",{});var L7e=s(y6);Gue=n(L7e,"STRONG",{});var pmt=s(Gue);Ftr=r(pmt,"mbart"),pmt.forEach(t),Ttr=r(L7e," \u2014 "),LX=n(L7e,"A",{href:!0});var umt=s(LX);Mtr=r(umt,"TFMBartModel"),umt.forEach(t),Etr=r(L7e," (mBART model)"),L7e.forEach(t),Ctr=i(D),L6=n(D,"LI",{});var x7e=s(L6);Oue=n(x7e,"STRONG",{});var _mt=s(Oue);wtr=r(_mt,"mobilebert"),_mt.forEach(t),Atr=r(x7e," \u2014 "),xX=n(x7e,"A",{href:!0});var bmt=s(xX);ytr=r(bmt,"TFMobileBertModel"),bmt.forEach(t),Ltr=r(x7e," (MobileBERT model)"),x7e.forEach(t),xtr=i(D),x6=n(D,"LI",{});var $7e=s(x6);Vue=n($7e,"STRONG",{});var vmt=s(Vue);$tr=r(vmt,"mpnet"),vmt.forEach(t),ktr=r($7e," \u2014 "),$X=n($7e,"A",{href:!0});var Fmt=s($X);Str=r(Fmt,"TFMPNetModel"),Fmt.forEach(t),Rtr=r($7e," (MPNet model)"),$7e.forEach(t),Btr=i(D),$6=n(D,"LI",{});var k7e=s($6);Xue=n(k7e,"STRONG",{});var Tmt=s(Xue);Ptr=r(Tmt,"mt5"),Tmt.forEach(t),Itr=r(k7e," \u2014 "),kX=n(k7e,"A",{href:!0});var Mmt=s(kX);qtr=r(Mmt,"TFMT5Model"),Mmt.forEach(t),Ntr=r(k7e," (mT5 model)"),k7e.forEach(t),jtr=i(D),k6=n(D,"LI",{});var S7e=s(k6);zue=n(S7e,"STRONG",{});var Emt=s(zue);Dtr=r(Emt,"openai-gpt"),Emt.forEach(t),Gtr=r(S7e," \u2014 "),SX=n(S7e,"A",{href:!0});var Cmt=s(SX);Otr=r(Cmt,"TFOpenAIGPTModel"),Cmt.forEach(t),Vtr=r(S7e," (OpenAI GPT model)"),S7e.forEach(t),Xtr=i(D),S6=n(D,"LI",{});var R7e=s(S6);Que=n(R7e,"STRONG",{});var wmt=s(Que);ztr=r(wmt,"pegasus"),wmt.forEach(t),Qtr=r(R7e," \u2014 "),RX=n(R7e,"A",{href:!0});var Amt=s(RX);Wtr=r(Amt,"TFPegasusModel"),Amt.forEach(t),Htr=r(R7e," (Pegasus model)"),R7e.forEach(t),Utr=i(D),R6=n(D,"LI",{});var B7e=s(R6);Wue=n(B7e,"STRONG",{});var ymt=s(Wue);Jtr=r(ymt,"rembert"),ymt.forEach(t),Ytr=r(B7e," \u2014 "),BX=n(B7e,"A",{href:!0});var Lmt=s(BX);Ktr=r(Lmt,"TFRemBertModel"),Lmt.forEach(t),Ztr=r(B7e," (RemBERT model)"),B7e.forEach(t),ear=i(D),B6=n(D,"LI",{});var P7e=s(B6);Hue=n(P7e,"STRONG",{});var xmt=s(Hue);oar=r(xmt,"roberta"),xmt.forEach(t),rar=r(P7e," \u2014 "),PX=n(P7e,"A",{href:!0});var $mt=s(PX);tar=r($mt,"TFRobertaModel"),$mt.forEach(t),aar=r(P7e," (RoBERTa model)"),P7e.forEach(t),nar=i(D),P6=n(D,"LI",{});var I7e=s(P6);Uue=n(I7e,"STRONG",{});var kmt=s(Uue);sar=r(kmt,"roformer"),kmt.forEach(t),lar=r(I7e," \u2014 "),IX=n(I7e,"A",{href:!0});var Smt=s(IX);iar=r(Smt,"TFRoFormerModel"),Smt.forEach(t),dar=r(I7e," (RoFormer model)"),I7e.forEach(t),car=i(D),I6=n(D,"LI",{});var q7e=s(I6);Jue=n(q7e,"STRONG",{});var Rmt=s(Jue);far=r(Rmt,"speech_to_text"),Rmt.forEach(t),mar=r(q7e," \u2014 "),qX=n(q7e,"A",{href:!0});var Bmt=s(qX);gar=r(Bmt,"TFSpeech2TextModel"),Bmt.forEach(t),har=r(q7e," (Speech2Text model)"),q7e.forEach(t),par=i(D),q6=n(D,"LI",{});var N7e=s(q6);Yue=n(N7e,"STRONG",{});var Pmt=s(Yue);uar=r(Pmt,"t5"),Pmt.forEach(t),_ar=r(N7e," \u2014 "),NX=n(N7e,"A",{href:!0});var Imt=s(NX);bar=r(Imt,"TFT5Model"),Imt.forEach(t),Far=r(N7e," (T5 model)"),N7e.forEach(t),Tar=i(D),N6=n(D,"LI",{});var j7e=s(N6);Kue=n(j7e,"STRONG",{});var qmt=s(Kue);Mar=r(qmt,"tapas"),qmt.forEach(t),Ear=r(j7e," \u2014 "),jX=n(j7e,"A",{href:!0});var Nmt=s(jX);Car=r(Nmt,"TFTapasModel"),Nmt.forEach(t),war=r(j7e," (TAPAS model)"),j7e.forEach(t),Aar=i(D),j6=n(D,"LI",{});var D7e=s(j6);Zue=n(D7e,"STRONG",{});var jmt=s(Zue);yar=r(jmt,"transfo-xl"),jmt.forEach(t),Lar=r(D7e," \u2014 "),DX=n(D7e,"A",{href:!0});var Dmt=s(DX);xar=r(Dmt,"TFTransfoXLModel"),Dmt.forEach(t),$ar=r(D7e," (Transformer-XL model)"),D7e.forEach(t),kar=i(D),D6=n(D,"LI",{});var G7e=s(D6);e_e=n(G7e,"STRONG",{});var Gmt=s(e_e);Sar=r(Gmt,"vit"),Gmt.forEach(t),Rar=r(G7e," \u2014 "),GX=n(G7e,"A",{href:!0});var Omt=s(GX);Bar=r(Omt,"TFViTModel"),Omt.forEach(t),Par=r(G7e," (ViT model)"),G7e.forEach(t),Iar=i(D),G6=n(D,"LI",{});var O7e=s(G6);o_e=n(O7e,"STRONG",{});var Vmt=s(o_e);qar=r(Vmt,"vit_mae"),Vmt.forEach(t),Nar=r(O7e," \u2014 "),OX=n(O7e,"A",{href:!0});var Xmt=s(OX);jar=r(Xmt,"TFViTMAEModel"),Xmt.forEach(t),Dar=r(O7e," (ViTMAE model)"),O7e.forEach(t),Gar=i(D),O6=n(D,"LI",{});var V7e=s(O6);r_e=n(V7e,"STRONG",{});var zmt=s(r_e);Oar=r(zmt,"wav2vec2"),zmt.forEach(t),Var=r(V7e," \u2014 "),VX=n(V7e,"A",{href:!0});var Qmt=s(VX);Xar=r(Qmt,"TFWav2Vec2Model"),Qmt.forEach(t),zar=r(V7e," (Wav2Vec2 model)"),V7e.forEach(t),Qar=i(D),V6=n(D,"LI",{});var X7e=s(V6);t_e=n(X7e,"STRONG",{});var Wmt=s(t_e);War=r(Wmt,"xlm"),Wmt.forEach(t),Har=r(X7e," \u2014 "),XX=n(X7e,"A",{href:!0});var Hmt=s(XX);Uar=r(Hmt,"TFXLMModel"),Hmt.forEach(t),Jar=r(X7e," (XLM model)"),X7e.forEach(t),Yar=i(D),X6=n(D,"LI",{});var z7e=s(X6);a_e=n(z7e,"STRONG",{});var Umt=s(a_e);Kar=r(Umt,"xlm-roberta"),Umt.forEach(t),Zar=r(z7e," \u2014 "),zX=n(z7e,"A",{href:!0});var Jmt=s(zX);enr=r(Jmt,"TFXLMRobertaModel"),Jmt.forEach(t),onr=r(z7e," (XLM-RoBERTa model)"),z7e.forEach(t),rnr=i(D),z6=n(D,"LI",{});var Q7e=s(z6);n_e=n(Q7e,"STRONG",{});var Ymt=s(n_e);tnr=r(Ymt,"xlnet"),Ymt.forEach(t),anr=r(Q7e," \u2014 "),QX=n(Q7e,"A",{href:!0});var Kmt=s(QX);nnr=r(Kmt,"TFXLNetModel"),Kmt.forEach(t),snr=r(Q7e," (XLNet model)"),Q7e.forEach(t),D.forEach(t),lnr=i(sl),T(Q6.$$.fragment,sl),sl.forEach(t),nl.forEach(t),NBe=i(f),Bd=n(f,"H2",{class:!0});var GIe=s(Bd);W6=n(GIe,"A",{id:!0,class:!0,href:!0});var Zmt=s(W6);s_e=n(Zmt,"SPAN",{});var egt=s(s_e);T(ey.$$.fragment,egt),egt.forEach(t),Zmt.forEach(t),inr=i(GIe),l_e=n(GIe,"SPAN",{});var ogt=s(l_e);dnr=r(ogt,"TFAutoModelForPreTraining"),ogt.forEach(t),GIe.forEach(t),jBe=i(f),Jo=n(f,"DIV",{class:!0});var ll=s(Jo);T(oy.$$.fragment,ll),cnr=i(ll),Pd=n(ll,"P",{});var XY=s(Pd);fnr=r(XY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WX=n(XY,"A",{href:!0});var rgt=s(WX);mnr=r(rgt,"from_pretrained()"),rgt.forEach(t),gnr=r(XY," class method or the "),HX=n(XY,"A",{href:!0});var tgt=s(HX);hnr=r(tgt,"from_config()"),tgt.forEach(t),pnr=r(XY,` class
method.`),XY.forEach(t),unr=i(ll),ry=n(ll,"P",{});var OIe=s(ry);_nr=r(OIe,"This class cannot be instantiated directly using "),i_e=n(OIe,"CODE",{});var agt=s(i_e);bnr=r(agt,"__init__()"),agt.forEach(t),vnr=r(OIe," (throws an error)."),OIe.forEach(t),Fnr=i(ll),Et=n(ll,"DIV",{class:!0});var _C=s(Et);T(ty.$$.fragment,_C),Tnr=i(_C),d_e=n(_C,"P",{});var ngt=s(d_e);Mnr=r(ngt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ngt.forEach(t),Enr=i(_C),Id=n(_C,"P",{});var zY=s(Id);Cnr=r(zY,`Note:
Loading a model from its configuration file does `),c_e=n(zY,"STRONG",{});var sgt=s(c_e);wnr=r(sgt,"not"),sgt.forEach(t),Anr=r(zY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(zY,"A",{href:!0});var lgt=s(UX);ynr=r(lgt,"from_pretrained()"),lgt.forEach(t),Lnr=r(zY," to load the model weights."),zY.forEach(t),xnr=i(_C),T(H6.$$.fragment,_C),_C.forEach(t),$nr=i(ll),Er=n(ll,"DIV",{class:!0});var il=s(Er);T(ay.$$.fragment,il),knr=i(il),f_e=n(il,"P",{});var igt=s(f_e);Snr=r(igt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),igt.forEach(t),Rnr=i(il),Ja=n(il,"P",{});var bC=s(Ja);Bnr=r(bC,"The model class to instantiate is selected based on the "),m_e=n(bC,"CODE",{});var dgt=s(m_e);Pnr=r(dgt,"model_type"),dgt.forEach(t),Inr=r(bC,` property of the config object (either
passed as an argument or loaded from `),g_e=n(bC,"CODE",{});var cgt=s(g_e);qnr=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),Nnr=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(bC,"CODE",{});var fgt=s(h_e);jnr=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),Dnr=r(bC,":"),bC.forEach(t),Gnr=i(il),ne=n(il,"UL",{});var le=s(ne);U6=n(le,"LI",{});var W7e=s(U6);p_e=n(W7e,"STRONG",{});var mgt=s(p_e);Onr=r(mgt,"albert"),mgt.forEach(t),Vnr=r(W7e," \u2014 "),JX=n(W7e,"A",{href:!0});var ggt=s(JX);Xnr=r(ggt,"TFAlbertForPreTraining"),ggt.forEach(t),znr=r(W7e," (ALBERT model)"),W7e.forEach(t),Qnr=i(le),J6=n(le,"LI",{});var H7e=s(J6);u_e=n(H7e,"STRONG",{});var hgt=s(u_e);Wnr=r(hgt,"bart"),hgt.forEach(t),Hnr=r(H7e," \u2014 "),YX=n(H7e,"A",{href:!0});var pgt=s(YX);Unr=r(pgt,"TFBartForConditionalGeneration"),pgt.forEach(t),Jnr=r(H7e," (BART model)"),H7e.forEach(t),Ynr=i(le),Y6=n(le,"LI",{});var U7e=s(Y6);__e=n(U7e,"STRONG",{});var ugt=s(__e);Knr=r(ugt,"bert"),ugt.forEach(t),Znr=r(U7e," \u2014 "),KX=n(U7e,"A",{href:!0});var _gt=s(KX);esr=r(_gt,"TFBertForPreTraining"),_gt.forEach(t),osr=r(U7e," (BERT model)"),U7e.forEach(t),rsr=i(le),K6=n(le,"LI",{});var J7e=s(K6);b_e=n(J7e,"STRONG",{});var bgt=s(b_e);tsr=r(bgt,"camembert"),bgt.forEach(t),asr=r(J7e," \u2014 "),ZX=n(J7e,"A",{href:!0});var vgt=s(ZX);nsr=r(vgt,"TFCamembertForMaskedLM"),vgt.forEach(t),ssr=r(J7e," (CamemBERT model)"),J7e.forEach(t),lsr=i(le),Z6=n(le,"LI",{});var Y7e=s(Z6);v_e=n(Y7e,"STRONG",{});var Fgt=s(v_e);isr=r(Fgt,"ctrl"),Fgt.forEach(t),dsr=r(Y7e," \u2014 "),ez=n(Y7e,"A",{href:!0});var Tgt=s(ez);csr=r(Tgt,"TFCTRLLMHeadModel"),Tgt.forEach(t),fsr=r(Y7e," (CTRL model)"),Y7e.forEach(t),msr=i(le),eT=n(le,"LI",{});var K7e=s(eT);F_e=n(K7e,"STRONG",{});var Mgt=s(F_e);gsr=r(Mgt,"distilbert"),Mgt.forEach(t),hsr=r(K7e," \u2014 "),oz=n(K7e,"A",{href:!0});var Egt=s(oz);psr=r(Egt,"TFDistilBertForMaskedLM"),Egt.forEach(t),usr=r(K7e," (DistilBERT model)"),K7e.forEach(t),_sr=i(le),oT=n(le,"LI",{});var Z7e=s(oT);T_e=n(Z7e,"STRONG",{});var Cgt=s(T_e);bsr=r(Cgt,"electra"),Cgt.forEach(t),vsr=r(Z7e," \u2014 "),rz=n(Z7e,"A",{href:!0});var wgt=s(rz);Fsr=r(wgt,"TFElectraForPreTraining"),wgt.forEach(t),Tsr=r(Z7e," (ELECTRA model)"),Z7e.forEach(t),Msr=i(le),rT=n(le,"LI",{});var exe=s(rT);M_e=n(exe,"STRONG",{});var Agt=s(M_e);Esr=r(Agt,"flaubert"),Agt.forEach(t),Csr=r(exe," \u2014 "),tz=n(exe,"A",{href:!0});var ygt=s(tz);wsr=r(ygt,"TFFlaubertWithLMHeadModel"),ygt.forEach(t),Asr=r(exe," (FlauBERT model)"),exe.forEach(t),ysr=i(le),tT=n(le,"LI",{});var oxe=s(tT);E_e=n(oxe,"STRONG",{});var Lgt=s(E_e);Lsr=r(Lgt,"funnel"),Lgt.forEach(t),xsr=r(oxe," \u2014 "),az=n(oxe,"A",{href:!0});var xgt=s(az);$sr=r(xgt,"TFFunnelForPreTraining"),xgt.forEach(t),ksr=r(oxe," (Funnel Transformer model)"),oxe.forEach(t),Ssr=i(le),aT=n(le,"LI",{});var rxe=s(aT);C_e=n(rxe,"STRONG",{});var $gt=s(C_e);Rsr=r($gt,"gpt2"),$gt.forEach(t),Bsr=r(rxe," \u2014 "),nz=n(rxe,"A",{href:!0});var kgt=s(nz);Psr=r(kgt,"TFGPT2LMHeadModel"),kgt.forEach(t),Isr=r(rxe," (OpenAI GPT-2 model)"),rxe.forEach(t),qsr=i(le),nT=n(le,"LI",{});var txe=s(nT);w_e=n(txe,"STRONG",{});var Sgt=s(w_e);Nsr=r(Sgt,"layoutlm"),Sgt.forEach(t),jsr=r(txe," \u2014 "),sz=n(txe,"A",{href:!0});var Rgt=s(sz);Dsr=r(Rgt,"TFLayoutLMForMaskedLM"),Rgt.forEach(t),Gsr=r(txe," (LayoutLM model)"),txe.forEach(t),Osr=i(le),sT=n(le,"LI",{});var axe=s(sT);A_e=n(axe,"STRONG",{});var Bgt=s(A_e);Vsr=r(Bgt,"lxmert"),Bgt.forEach(t),Xsr=r(axe," \u2014 "),lz=n(axe,"A",{href:!0});var Pgt=s(lz);zsr=r(Pgt,"TFLxmertForPreTraining"),Pgt.forEach(t),Qsr=r(axe," (LXMERT model)"),axe.forEach(t),Wsr=i(le),lT=n(le,"LI",{});var nxe=s(lT);y_e=n(nxe,"STRONG",{});var Igt=s(y_e);Hsr=r(Igt,"mobilebert"),Igt.forEach(t),Usr=r(nxe," \u2014 "),iz=n(nxe,"A",{href:!0});var qgt=s(iz);Jsr=r(qgt,"TFMobileBertForPreTraining"),qgt.forEach(t),Ysr=r(nxe," (MobileBERT model)"),nxe.forEach(t),Ksr=i(le),iT=n(le,"LI",{});var sxe=s(iT);L_e=n(sxe,"STRONG",{});var Ngt=s(L_e);Zsr=r(Ngt,"mpnet"),Ngt.forEach(t),elr=r(sxe," \u2014 "),dz=n(sxe,"A",{href:!0});var jgt=s(dz);olr=r(jgt,"TFMPNetForMaskedLM"),jgt.forEach(t),rlr=r(sxe," (MPNet model)"),sxe.forEach(t),tlr=i(le),dT=n(le,"LI",{});var lxe=s(dT);x_e=n(lxe,"STRONG",{});var Dgt=s(x_e);alr=r(Dgt,"openai-gpt"),Dgt.forEach(t),nlr=r(lxe," \u2014 "),cz=n(lxe,"A",{href:!0});var Ggt=s(cz);slr=r(Ggt,"TFOpenAIGPTLMHeadModel"),Ggt.forEach(t),llr=r(lxe," (OpenAI GPT model)"),lxe.forEach(t),ilr=i(le),cT=n(le,"LI",{});var ixe=s(cT);$_e=n(ixe,"STRONG",{});var Ogt=s($_e);dlr=r(Ogt,"roberta"),Ogt.forEach(t),clr=r(ixe," \u2014 "),fz=n(ixe,"A",{href:!0});var Vgt=s(fz);flr=r(Vgt,"TFRobertaForMaskedLM"),Vgt.forEach(t),mlr=r(ixe," (RoBERTa model)"),ixe.forEach(t),glr=i(le),fT=n(le,"LI",{});var dxe=s(fT);k_e=n(dxe,"STRONG",{});var Xgt=s(k_e);hlr=r(Xgt,"t5"),Xgt.forEach(t),plr=r(dxe," \u2014 "),mz=n(dxe,"A",{href:!0});var zgt=s(mz);ulr=r(zgt,"TFT5ForConditionalGeneration"),zgt.forEach(t),_lr=r(dxe," (T5 model)"),dxe.forEach(t),blr=i(le),mT=n(le,"LI",{});var cxe=s(mT);S_e=n(cxe,"STRONG",{});var Qgt=s(S_e);vlr=r(Qgt,"tapas"),Qgt.forEach(t),Flr=r(cxe," \u2014 "),gz=n(cxe,"A",{href:!0});var Wgt=s(gz);Tlr=r(Wgt,"TFTapasForMaskedLM"),Wgt.forEach(t),Mlr=r(cxe," (TAPAS model)"),cxe.forEach(t),Elr=i(le),gT=n(le,"LI",{});var fxe=s(gT);R_e=n(fxe,"STRONG",{});var Hgt=s(R_e);Clr=r(Hgt,"transfo-xl"),Hgt.forEach(t),wlr=r(fxe," \u2014 "),hz=n(fxe,"A",{href:!0});var Ugt=s(hz);Alr=r(Ugt,"TFTransfoXLLMHeadModel"),Ugt.forEach(t),ylr=r(fxe," (Transformer-XL model)"),fxe.forEach(t),Llr=i(le),hT=n(le,"LI",{});var mxe=s(hT);B_e=n(mxe,"STRONG",{});var Jgt=s(B_e);xlr=r(Jgt,"vit_mae"),Jgt.forEach(t),$lr=r(mxe," \u2014 "),pz=n(mxe,"A",{href:!0});var Ygt=s(pz);klr=r(Ygt,"TFViTMAEForPreTraining"),Ygt.forEach(t),Slr=r(mxe," (ViTMAE model)"),mxe.forEach(t),Rlr=i(le),pT=n(le,"LI",{});var gxe=s(pT);P_e=n(gxe,"STRONG",{});var Kgt=s(P_e);Blr=r(Kgt,"xlm"),Kgt.forEach(t),Plr=r(gxe," \u2014 "),uz=n(gxe,"A",{href:!0});var Zgt=s(uz);Ilr=r(Zgt,"TFXLMWithLMHeadModel"),Zgt.forEach(t),qlr=r(gxe," (XLM model)"),gxe.forEach(t),Nlr=i(le),uT=n(le,"LI",{});var hxe=s(uT);I_e=n(hxe,"STRONG",{});var eht=s(I_e);jlr=r(eht,"xlm-roberta"),eht.forEach(t),Dlr=r(hxe," \u2014 "),_z=n(hxe,"A",{href:!0});var oht=s(_z);Glr=r(oht,"TFXLMRobertaForMaskedLM"),oht.forEach(t),Olr=r(hxe," (XLM-RoBERTa model)"),hxe.forEach(t),Vlr=i(le),_T=n(le,"LI",{});var pxe=s(_T);q_e=n(pxe,"STRONG",{});var rht=s(q_e);Xlr=r(rht,"xlnet"),rht.forEach(t),zlr=r(pxe," \u2014 "),bz=n(pxe,"A",{href:!0});var tht=s(bz);Qlr=r(tht,"TFXLNetLMHeadModel"),tht.forEach(t),Wlr=r(pxe," (XLNet model)"),pxe.forEach(t),le.forEach(t),Hlr=i(il),T(bT.$$.fragment,il),il.forEach(t),ll.forEach(t),DBe=i(f),qd=n(f,"H2",{class:!0});var VIe=s(qd);vT=n(VIe,"A",{id:!0,class:!0,href:!0});var aht=s(vT);N_e=n(aht,"SPAN",{});var nht=s(N_e);T(ny.$$.fragment,nht),nht.forEach(t),aht.forEach(t),Ulr=i(VIe),j_e=n(VIe,"SPAN",{});var sht=s(j_e);Jlr=r(sht,"TFAutoModelForCausalLM"),sht.forEach(t),VIe.forEach(t),GBe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(sy.$$.fragment,dl),Ylr=i(dl),Nd=n(dl,"P",{});var QY=s(Nd);Klr=r(QY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vz=n(QY,"A",{href:!0});var lht=s(vz);Zlr=r(lht,"from_pretrained()"),lht.forEach(t),eir=r(QY," class method or the "),Fz=n(QY,"A",{href:!0});var iht=s(Fz);oir=r(iht,"from_config()"),iht.forEach(t),rir=r(QY,` class
method.`),QY.forEach(t),tir=i(dl),ly=n(dl,"P",{});var XIe=s(ly);air=r(XIe,"This class cannot be instantiated directly using "),D_e=n(XIe,"CODE",{});var dht=s(D_e);nir=r(dht,"__init__()"),dht.forEach(t),sir=r(XIe," (throws an error)."),XIe.forEach(t),lir=i(dl),Ct=n(dl,"DIV",{class:!0});var vC=s(Ct);T(iy.$$.fragment,vC),iir=i(vC),G_e=n(vC,"P",{});var cht=s(G_e);dir=r(cht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cht.forEach(t),cir=i(vC),jd=n(vC,"P",{});var WY=s(jd);fir=r(WY,`Note:
Loading a model from its configuration file does `),O_e=n(WY,"STRONG",{});var fht=s(O_e);mir=r(fht,"not"),fht.forEach(t),gir=r(WY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(WY,"A",{href:!0});var mht=s(Tz);hir=r(mht,"from_pretrained()"),mht.forEach(t),pir=r(WY," to load the model weights."),WY.forEach(t),uir=i(vC),T(FT.$$.fragment,vC),vC.forEach(t),_ir=i(dl),Cr=n(dl,"DIV",{class:!0});var cl=s(Cr);T(dy.$$.fragment,cl),bir=i(cl),V_e=n(cl,"P",{});var ght=s(V_e);vir=r(ght,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ght.forEach(t),Fir=i(cl),Ya=n(cl,"P",{});var FC=s(Ya);Tir=r(FC,"The model class to instantiate is selected based on the "),X_e=n(FC,"CODE",{});var hht=s(X_e);Mir=r(hht,"model_type"),hht.forEach(t),Eir=r(FC,` property of the config object (either
passed as an argument or loaded from `),z_e=n(FC,"CODE",{});var pht=s(z_e);Cir=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),wir=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=n(FC,"CODE",{});var uht=s(Q_e);Air=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),yir=r(FC,":"),FC.forEach(t),Lir=i(cl),Te=n(cl,"UL",{});var Ce=s(Te);TT=n(Ce,"LI",{});var uxe=s(TT);W_e=n(uxe,"STRONG",{});var _ht=s(W_e);xir=r(_ht,"bert"),_ht.forEach(t),$ir=r(uxe," \u2014 "),Mz=n(uxe,"A",{href:!0});var bht=s(Mz);kir=r(bht,"TFBertLMHeadModel"),bht.forEach(t),Sir=r(uxe," (BERT model)"),uxe.forEach(t),Rir=i(Ce),MT=n(Ce,"LI",{});var _xe=s(MT);H_e=n(_xe,"STRONG",{});var vht=s(H_e);Bir=r(vht,"camembert"),vht.forEach(t),Pir=r(_xe," \u2014 "),Ez=n(_xe,"A",{href:!0});var Fht=s(Ez);Iir=r(Fht,"TFCamembertForCausalLM"),Fht.forEach(t),qir=r(_xe," (CamemBERT model)"),_xe.forEach(t),Nir=i(Ce),ET=n(Ce,"LI",{});var bxe=s(ET);U_e=n(bxe,"STRONG",{});var Tht=s(U_e);jir=r(Tht,"ctrl"),Tht.forEach(t),Dir=r(bxe," \u2014 "),Cz=n(bxe,"A",{href:!0});var Mht=s(Cz);Gir=r(Mht,"TFCTRLLMHeadModel"),Mht.forEach(t),Oir=r(bxe," (CTRL model)"),bxe.forEach(t),Vir=i(Ce),CT=n(Ce,"LI",{});var vxe=s(CT);J_e=n(vxe,"STRONG",{});var Eht=s(J_e);Xir=r(Eht,"gpt2"),Eht.forEach(t),zir=r(vxe," \u2014 "),wz=n(vxe,"A",{href:!0});var Cht=s(wz);Qir=r(Cht,"TFGPT2LMHeadModel"),Cht.forEach(t),Wir=r(vxe," (OpenAI GPT-2 model)"),vxe.forEach(t),Hir=i(Ce),wT=n(Ce,"LI",{});var Fxe=s(wT);Y_e=n(Fxe,"STRONG",{});var wht=s(Y_e);Uir=r(wht,"gptj"),wht.forEach(t),Jir=r(Fxe," \u2014 "),Az=n(Fxe,"A",{href:!0});var Aht=s(Az);Yir=r(Aht,"TFGPTJForCausalLM"),Aht.forEach(t),Kir=r(Fxe," (GPT-J model)"),Fxe.forEach(t),Zir=i(Ce),AT=n(Ce,"LI",{});var Txe=s(AT);K_e=n(Txe,"STRONG",{});var yht=s(K_e);edr=r(yht,"openai-gpt"),yht.forEach(t),odr=r(Txe," \u2014 "),yz=n(Txe,"A",{href:!0});var Lht=s(yz);rdr=r(Lht,"TFOpenAIGPTLMHeadModel"),Lht.forEach(t),tdr=r(Txe," (OpenAI GPT model)"),Txe.forEach(t),adr=i(Ce),yT=n(Ce,"LI",{});var Mxe=s(yT);Z_e=n(Mxe,"STRONG",{});var xht=s(Z_e);ndr=r(xht,"rembert"),xht.forEach(t),sdr=r(Mxe," \u2014 "),Lz=n(Mxe,"A",{href:!0});var $ht=s(Lz);ldr=r($ht,"TFRemBertForCausalLM"),$ht.forEach(t),idr=r(Mxe," (RemBERT model)"),Mxe.forEach(t),ddr=i(Ce),LT=n(Ce,"LI",{});var Exe=s(LT);e1e=n(Exe,"STRONG",{});var kht=s(e1e);cdr=r(kht,"roberta"),kht.forEach(t),fdr=r(Exe," \u2014 "),xz=n(Exe,"A",{href:!0});var Sht=s(xz);mdr=r(Sht,"TFRobertaForCausalLM"),Sht.forEach(t),gdr=r(Exe," (RoBERTa model)"),Exe.forEach(t),hdr=i(Ce),xT=n(Ce,"LI",{});var Cxe=s(xT);o1e=n(Cxe,"STRONG",{});var Rht=s(o1e);pdr=r(Rht,"roformer"),Rht.forEach(t),udr=r(Cxe," \u2014 "),$z=n(Cxe,"A",{href:!0});var Bht=s($z);_dr=r(Bht,"TFRoFormerForCausalLM"),Bht.forEach(t),bdr=r(Cxe," (RoFormer model)"),Cxe.forEach(t),vdr=i(Ce),$T=n(Ce,"LI",{});var wxe=s($T);r1e=n(wxe,"STRONG",{});var Pht=s(r1e);Fdr=r(Pht,"transfo-xl"),Pht.forEach(t),Tdr=r(wxe," \u2014 "),kz=n(wxe,"A",{href:!0});var Iht=s(kz);Mdr=r(Iht,"TFTransfoXLLMHeadModel"),Iht.forEach(t),Edr=r(wxe," (Transformer-XL model)"),wxe.forEach(t),Cdr=i(Ce),kT=n(Ce,"LI",{});var Axe=s(kT);t1e=n(Axe,"STRONG",{});var qht=s(t1e);wdr=r(qht,"xlm"),qht.forEach(t),Adr=r(Axe," \u2014 "),Sz=n(Axe,"A",{href:!0});var Nht=s(Sz);ydr=r(Nht,"TFXLMWithLMHeadModel"),Nht.forEach(t),Ldr=r(Axe," (XLM model)"),Axe.forEach(t),xdr=i(Ce),ST=n(Ce,"LI",{});var yxe=s(ST);a1e=n(yxe,"STRONG",{});var jht=s(a1e);$dr=r(jht,"xlnet"),jht.forEach(t),kdr=r(yxe," \u2014 "),Rz=n(yxe,"A",{href:!0});var Dht=s(Rz);Sdr=r(Dht,"TFXLNetLMHeadModel"),Dht.forEach(t),Rdr=r(yxe," (XLNet model)"),yxe.forEach(t),Ce.forEach(t),Bdr=i(cl),T(RT.$$.fragment,cl),cl.forEach(t),dl.forEach(t),OBe=i(f),Dd=n(f,"H2",{class:!0});var zIe=s(Dd);BT=n(zIe,"A",{id:!0,class:!0,href:!0});var Ght=s(BT);n1e=n(Ght,"SPAN",{});var Oht=s(n1e);T(cy.$$.fragment,Oht),Oht.forEach(t),Ght.forEach(t),Pdr=i(zIe),s1e=n(zIe,"SPAN",{});var Vht=s(s1e);Idr=r(Vht,"TFAutoModelForImageClassification"),Vht.forEach(t),zIe.forEach(t),VBe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(fy.$$.fragment,fl),qdr=i(fl),Gd=n(fl,"P",{});var HY=s(Gd);Ndr=r(HY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Bz=n(HY,"A",{href:!0});var Xht=s(Bz);jdr=r(Xht,"from_pretrained()"),Xht.forEach(t),Ddr=r(HY," class method or the "),Pz=n(HY,"A",{href:!0});var zht=s(Pz);Gdr=r(zht,"from_config()"),zht.forEach(t),Odr=r(HY,` class
method.`),HY.forEach(t),Vdr=i(fl),my=n(fl,"P",{});var QIe=s(my);Xdr=r(QIe,"This class cannot be instantiated directly using "),l1e=n(QIe,"CODE",{});var Qht=s(l1e);zdr=r(Qht,"__init__()"),Qht.forEach(t),Qdr=r(QIe," (throws an error)."),QIe.forEach(t),Wdr=i(fl),wt=n(fl,"DIV",{class:!0});var TC=s(wt);T(gy.$$.fragment,TC),Hdr=i(TC),i1e=n(TC,"P",{});var Wht=s(i1e);Udr=r(Wht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wht.forEach(t),Jdr=i(TC),Od=n(TC,"P",{});var UY=s(Od);Ydr=r(UY,`Note:
Loading a model from its configuration file does `),d1e=n(UY,"STRONG",{});var Hht=s(d1e);Kdr=r(Hht,"not"),Hht.forEach(t),Zdr=r(UY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(UY,"A",{href:!0});var Uht=s(Iz);ecr=r(Uht,"from_pretrained()"),Uht.forEach(t),ocr=r(UY," to load the model weights."),UY.forEach(t),rcr=i(TC),T(PT.$$.fragment,TC),TC.forEach(t),tcr=i(fl),wr=n(fl,"DIV",{class:!0});var ml=s(wr);T(hy.$$.fragment,ml),acr=i(ml),c1e=n(ml,"P",{});var Jht=s(c1e);ncr=r(Jht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jht.forEach(t),scr=i(ml),Ka=n(ml,"P",{});var MC=s(Ka);lcr=r(MC,"The model class to instantiate is selected based on the "),f1e=n(MC,"CODE",{});var Yht=s(f1e);icr=r(Yht,"model_type"),Yht.forEach(t),dcr=r(MC,` property of the config object (either
passed as an argument or loaded from `),m1e=n(MC,"CODE",{});var Kht=s(m1e);ccr=r(Kht,"pretrained_model_name_or_path"),Kht.forEach(t),fcr=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=n(MC,"CODE",{});var Zht=s(g1e);mcr=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),gcr=r(MC,":"),MC.forEach(t),hcr=i(ml),py=n(ml,"UL",{});var WIe=s(py);IT=n(WIe,"LI",{});var Lxe=s(IT);h1e=n(Lxe,"STRONG",{});var ept=s(h1e);pcr=r(ept,"convnext"),ept.forEach(t),ucr=r(Lxe," \u2014 "),qz=n(Lxe,"A",{href:!0});var opt=s(qz);_cr=r(opt,"TFConvNextForImageClassification"),opt.forEach(t),bcr=r(Lxe," (ConvNext model)"),Lxe.forEach(t),vcr=i(WIe),qT=n(WIe,"LI",{});var xxe=s(qT);p1e=n(xxe,"STRONG",{});var rpt=s(p1e);Fcr=r(rpt,"vit"),rpt.forEach(t),Tcr=r(xxe," \u2014 "),Nz=n(xxe,"A",{href:!0});var tpt=s(Nz);Mcr=r(tpt,"TFViTForImageClassification"),tpt.forEach(t),Ecr=r(xxe," (ViT model)"),xxe.forEach(t),WIe.forEach(t),Ccr=i(ml),T(NT.$$.fragment,ml),ml.forEach(t),fl.forEach(t),XBe=i(f),Vd=n(f,"H2",{class:!0});var HIe=s(Vd);jT=n(HIe,"A",{id:!0,class:!0,href:!0});var apt=s(jT);u1e=n(apt,"SPAN",{});var npt=s(u1e);T(uy.$$.fragment,npt),npt.forEach(t),apt.forEach(t),wcr=i(HIe),_1e=n(HIe,"SPAN",{});var spt=s(_1e);Acr=r(spt,"TFAutoModelForMaskedLM"),spt.forEach(t),HIe.forEach(t),zBe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(_y.$$.fragment,gl),ycr=i(gl),Xd=n(gl,"P",{});var JY=s(Xd);Lcr=r(JY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jz=n(JY,"A",{href:!0});var lpt=s(jz);xcr=r(lpt,"from_pretrained()"),lpt.forEach(t),$cr=r(JY," class method or the "),Dz=n(JY,"A",{href:!0});var ipt=s(Dz);kcr=r(ipt,"from_config()"),ipt.forEach(t),Scr=r(JY,` class
method.`),JY.forEach(t),Rcr=i(gl),by=n(gl,"P",{});var UIe=s(by);Bcr=r(UIe,"This class cannot be instantiated directly using "),b1e=n(UIe,"CODE",{});var dpt=s(b1e);Pcr=r(dpt,"__init__()"),dpt.forEach(t),Icr=r(UIe," (throws an error)."),UIe.forEach(t),qcr=i(gl),At=n(gl,"DIV",{class:!0});var EC=s(At);T(vy.$$.fragment,EC),Ncr=i(EC),v1e=n(EC,"P",{});var cpt=s(v1e);jcr=r(cpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cpt.forEach(t),Dcr=i(EC),zd=n(EC,"P",{});var YY=s(zd);Gcr=r(YY,`Note:
Loading a model from its configuration file does `),F1e=n(YY,"STRONG",{});var fpt=s(F1e);Ocr=r(fpt,"not"),fpt.forEach(t),Vcr=r(YY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(YY,"A",{href:!0});var mpt=s(Gz);Xcr=r(mpt,"from_pretrained()"),mpt.forEach(t),zcr=r(YY," to load the model weights."),YY.forEach(t),Qcr=i(EC),T(DT.$$.fragment,EC),EC.forEach(t),Wcr=i(gl),Ar=n(gl,"DIV",{class:!0});var hl=s(Ar);T(Fy.$$.fragment,hl),Hcr=i(hl),T1e=n(hl,"P",{});var gpt=s(T1e);Ucr=r(gpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gpt.forEach(t),Jcr=i(hl),Za=n(hl,"P",{});var CC=s(Za);Ycr=r(CC,"The model class to instantiate is selected based on the "),M1e=n(CC,"CODE",{});var hpt=s(M1e);Kcr=r(hpt,"model_type"),hpt.forEach(t),Zcr=r(CC,` property of the config object (either
passed as an argument or loaded from `),E1e=n(CC,"CODE",{});var ppt=s(E1e);efr=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),ofr=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(CC,"CODE",{});var upt=s(C1e);rfr=r(upt,"pretrained_model_name_or_path"),upt.forEach(t),tfr=r(CC,":"),CC.forEach(t),afr=i(hl),ie=n(hl,"UL",{});var fe=s(ie);GT=n(fe,"LI",{});var $xe=s(GT);w1e=n($xe,"STRONG",{});var _pt=s(w1e);nfr=r(_pt,"albert"),_pt.forEach(t),sfr=r($xe," \u2014 "),Oz=n($xe,"A",{href:!0});var bpt=s(Oz);lfr=r(bpt,"TFAlbertForMaskedLM"),bpt.forEach(t),ifr=r($xe," (ALBERT model)"),$xe.forEach(t),dfr=i(fe),OT=n(fe,"LI",{});var kxe=s(OT);A1e=n(kxe,"STRONG",{});var vpt=s(A1e);cfr=r(vpt,"bert"),vpt.forEach(t),ffr=r(kxe," \u2014 "),Vz=n(kxe,"A",{href:!0});var Fpt=s(Vz);mfr=r(Fpt,"TFBertForMaskedLM"),Fpt.forEach(t),gfr=r(kxe," (BERT model)"),kxe.forEach(t),hfr=i(fe),VT=n(fe,"LI",{});var Sxe=s(VT);y1e=n(Sxe,"STRONG",{});var Tpt=s(y1e);pfr=r(Tpt,"camembert"),Tpt.forEach(t),ufr=r(Sxe," \u2014 "),Xz=n(Sxe,"A",{href:!0});var Mpt=s(Xz);_fr=r(Mpt,"TFCamembertForMaskedLM"),Mpt.forEach(t),bfr=r(Sxe," (CamemBERT model)"),Sxe.forEach(t),vfr=i(fe),XT=n(fe,"LI",{});var Rxe=s(XT);L1e=n(Rxe,"STRONG",{});var Ept=s(L1e);Ffr=r(Ept,"convbert"),Ept.forEach(t),Tfr=r(Rxe," \u2014 "),zz=n(Rxe,"A",{href:!0});var Cpt=s(zz);Mfr=r(Cpt,"TFConvBertForMaskedLM"),Cpt.forEach(t),Efr=r(Rxe," (ConvBERT model)"),Rxe.forEach(t),Cfr=i(fe),zT=n(fe,"LI",{});var Bxe=s(zT);x1e=n(Bxe,"STRONG",{});var wpt=s(x1e);wfr=r(wpt,"deberta"),wpt.forEach(t),Afr=r(Bxe," \u2014 "),Qz=n(Bxe,"A",{href:!0});var Apt=s(Qz);yfr=r(Apt,"TFDebertaForMaskedLM"),Apt.forEach(t),Lfr=r(Bxe," (DeBERTa model)"),Bxe.forEach(t),xfr=i(fe),QT=n(fe,"LI",{});var Pxe=s(QT);$1e=n(Pxe,"STRONG",{});var ypt=s($1e);$fr=r(ypt,"deberta-v2"),ypt.forEach(t),kfr=r(Pxe," \u2014 "),Wz=n(Pxe,"A",{href:!0});var Lpt=s(Wz);Sfr=r(Lpt,"TFDebertaV2ForMaskedLM"),Lpt.forEach(t),Rfr=r(Pxe," (DeBERTa-v2 model)"),Pxe.forEach(t),Bfr=i(fe),WT=n(fe,"LI",{});var Ixe=s(WT);k1e=n(Ixe,"STRONG",{});var xpt=s(k1e);Pfr=r(xpt,"distilbert"),xpt.forEach(t),Ifr=r(Ixe," \u2014 "),Hz=n(Ixe,"A",{href:!0});var $pt=s(Hz);qfr=r($pt,"TFDistilBertForMaskedLM"),$pt.forEach(t),Nfr=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),jfr=i(fe),HT=n(fe,"LI",{});var qxe=s(HT);S1e=n(qxe,"STRONG",{});var kpt=s(S1e);Dfr=r(kpt,"electra"),kpt.forEach(t),Gfr=r(qxe," \u2014 "),Uz=n(qxe,"A",{href:!0});var Spt=s(Uz);Ofr=r(Spt,"TFElectraForMaskedLM"),Spt.forEach(t),Vfr=r(qxe," (ELECTRA model)"),qxe.forEach(t),Xfr=i(fe),UT=n(fe,"LI",{});var Nxe=s(UT);R1e=n(Nxe,"STRONG",{});var Rpt=s(R1e);zfr=r(Rpt,"flaubert"),Rpt.forEach(t),Qfr=r(Nxe," \u2014 "),Jz=n(Nxe,"A",{href:!0});var Bpt=s(Jz);Wfr=r(Bpt,"TFFlaubertWithLMHeadModel"),Bpt.forEach(t),Hfr=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),Ufr=i(fe),JT=n(fe,"LI",{});var jxe=s(JT);B1e=n(jxe,"STRONG",{});var Ppt=s(B1e);Jfr=r(Ppt,"funnel"),Ppt.forEach(t),Yfr=r(jxe," \u2014 "),Yz=n(jxe,"A",{href:!0});var Ipt=s(Yz);Kfr=r(Ipt,"TFFunnelForMaskedLM"),Ipt.forEach(t),Zfr=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),emr=i(fe),YT=n(fe,"LI",{});var Dxe=s(YT);P1e=n(Dxe,"STRONG",{});var qpt=s(P1e);omr=r(qpt,"layoutlm"),qpt.forEach(t),rmr=r(Dxe," \u2014 "),Kz=n(Dxe,"A",{href:!0});var Npt=s(Kz);tmr=r(Npt,"TFLayoutLMForMaskedLM"),Npt.forEach(t),amr=r(Dxe," (LayoutLM model)"),Dxe.forEach(t),nmr=i(fe),KT=n(fe,"LI",{});var Gxe=s(KT);I1e=n(Gxe,"STRONG",{});var jpt=s(I1e);smr=r(jpt,"longformer"),jpt.forEach(t),lmr=r(Gxe," \u2014 "),Zz=n(Gxe,"A",{href:!0});var Dpt=s(Zz);imr=r(Dpt,"TFLongformerForMaskedLM"),Dpt.forEach(t),dmr=r(Gxe," (Longformer model)"),Gxe.forEach(t),cmr=i(fe),ZT=n(fe,"LI",{});var Oxe=s(ZT);q1e=n(Oxe,"STRONG",{});var Gpt=s(q1e);fmr=r(Gpt,"mobilebert"),Gpt.forEach(t),mmr=r(Oxe," \u2014 "),eQ=n(Oxe,"A",{href:!0});var Opt=s(eQ);gmr=r(Opt,"TFMobileBertForMaskedLM"),Opt.forEach(t),hmr=r(Oxe," (MobileBERT model)"),Oxe.forEach(t),pmr=i(fe),e8=n(fe,"LI",{});var Vxe=s(e8);N1e=n(Vxe,"STRONG",{});var Vpt=s(N1e);umr=r(Vpt,"mpnet"),Vpt.forEach(t),_mr=r(Vxe," \u2014 "),oQ=n(Vxe,"A",{href:!0});var Xpt=s(oQ);bmr=r(Xpt,"TFMPNetForMaskedLM"),Xpt.forEach(t),vmr=r(Vxe," (MPNet model)"),Vxe.forEach(t),Fmr=i(fe),o8=n(fe,"LI",{});var Xxe=s(o8);j1e=n(Xxe,"STRONG",{});var zpt=s(j1e);Tmr=r(zpt,"rembert"),zpt.forEach(t),Mmr=r(Xxe," \u2014 "),rQ=n(Xxe,"A",{href:!0});var Qpt=s(rQ);Emr=r(Qpt,"TFRemBertForMaskedLM"),Qpt.forEach(t),Cmr=r(Xxe," (RemBERT model)"),Xxe.forEach(t),wmr=i(fe),r8=n(fe,"LI",{});var zxe=s(r8);D1e=n(zxe,"STRONG",{});var Wpt=s(D1e);Amr=r(Wpt,"roberta"),Wpt.forEach(t),ymr=r(zxe," \u2014 "),tQ=n(zxe,"A",{href:!0});var Hpt=s(tQ);Lmr=r(Hpt,"TFRobertaForMaskedLM"),Hpt.forEach(t),xmr=r(zxe," (RoBERTa model)"),zxe.forEach(t),$mr=i(fe),t8=n(fe,"LI",{});var Qxe=s(t8);G1e=n(Qxe,"STRONG",{});var Upt=s(G1e);kmr=r(Upt,"roformer"),Upt.forEach(t),Smr=r(Qxe," \u2014 "),aQ=n(Qxe,"A",{href:!0});var Jpt=s(aQ);Rmr=r(Jpt,"TFRoFormerForMaskedLM"),Jpt.forEach(t),Bmr=r(Qxe," (RoFormer model)"),Qxe.forEach(t),Pmr=i(fe),a8=n(fe,"LI",{});var Wxe=s(a8);O1e=n(Wxe,"STRONG",{});var Ypt=s(O1e);Imr=r(Ypt,"tapas"),Ypt.forEach(t),qmr=r(Wxe," \u2014 "),nQ=n(Wxe,"A",{href:!0});var Kpt=s(nQ);Nmr=r(Kpt,"TFTapasForMaskedLM"),Kpt.forEach(t),jmr=r(Wxe," (TAPAS model)"),Wxe.forEach(t),Dmr=i(fe),n8=n(fe,"LI",{});var Hxe=s(n8);V1e=n(Hxe,"STRONG",{});var Zpt=s(V1e);Gmr=r(Zpt,"xlm"),Zpt.forEach(t),Omr=r(Hxe," \u2014 "),sQ=n(Hxe,"A",{href:!0});var eut=s(sQ);Vmr=r(eut,"TFXLMWithLMHeadModel"),eut.forEach(t),Xmr=r(Hxe," (XLM model)"),Hxe.forEach(t),zmr=i(fe),s8=n(fe,"LI",{});var Uxe=s(s8);X1e=n(Uxe,"STRONG",{});var out=s(X1e);Qmr=r(out,"xlm-roberta"),out.forEach(t),Wmr=r(Uxe," \u2014 "),lQ=n(Uxe,"A",{href:!0});var rut=s(lQ);Hmr=r(rut,"TFXLMRobertaForMaskedLM"),rut.forEach(t),Umr=r(Uxe," (XLM-RoBERTa model)"),Uxe.forEach(t),fe.forEach(t),Jmr=i(hl),T(l8.$$.fragment,hl),hl.forEach(t),gl.forEach(t),QBe=i(f),Qd=n(f,"H2",{class:!0});var JIe=s(Qd);i8=n(JIe,"A",{id:!0,class:!0,href:!0});var tut=s(i8);z1e=n(tut,"SPAN",{});var aut=s(z1e);T(Ty.$$.fragment,aut),aut.forEach(t),tut.forEach(t),Ymr=i(JIe),Q1e=n(JIe,"SPAN",{});var nut=s(Q1e);Kmr=r(nut,"TFAutoModelForSeq2SeqLM"),nut.forEach(t),JIe.forEach(t),WBe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(My.$$.fragment,pl),Zmr=i(pl),Wd=n(pl,"P",{});var KY=s(Wd);egr=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iQ=n(KY,"A",{href:!0});var sut=s(iQ);ogr=r(sut,"from_pretrained()"),sut.forEach(t),rgr=r(KY," class method or the "),dQ=n(KY,"A",{href:!0});var lut=s(dQ);tgr=r(lut,"from_config()"),lut.forEach(t),agr=r(KY,` class
method.`),KY.forEach(t),ngr=i(pl),Ey=n(pl,"P",{});var YIe=s(Ey);sgr=r(YIe,"This class cannot be instantiated directly using "),W1e=n(YIe,"CODE",{});var iut=s(W1e);lgr=r(iut,"__init__()"),iut.forEach(t),igr=r(YIe," (throws an error)."),YIe.forEach(t),dgr=i(pl),yt=n(pl,"DIV",{class:!0});var wC=s(yt);T(Cy.$$.fragment,wC),cgr=i(wC),H1e=n(wC,"P",{});var dut=s(H1e);fgr=r(dut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dut.forEach(t),mgr=i(wC),Hd=n(wC,"P",{});var ZY=s(Hd);ggr=r(ZY,`Note:
Loading a model from its configuration file does `),U1e=n(ZY,"STRONG",{});var cut=s(U1e);hgr=r(cut,"not"),cut.forEach(t),pgr=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(ZY,"A",{href:!0});var fut=s(cQ);ugr=r(fut,"from_pretrained()"),fut.forEach(t),_gr=r(ZY," to load the model weights."),ZY.forEach(t),bgr=i(wC),T(d8.$$.fragment,wC),wC.forEach(t),vgr=i(pl),yr=n(pl,"DIV",{class:!0});var ul=s(yr);T(wy.$$.fragment,ul),Fgr=i(ul),J1e=n(ul,"P",{});var mut=s(J1e);Tgr=r(mut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mut.forEach(t),Mgr=i(ul),en=n(ul,"P",{});var AC=s(en);Egr=r(AC,"The model class to instantiate is selected based on the "),Y1e=n(AC,"CODE",{});var gut=s(Y1e);Cgr=r(gut,"model_type"),gut.forEach(t),wgr=r(AC,` property of the config object (either
passed as an argument or loaded from `),K1e=n(AC,"CODE",{});var hut=s(K1e);Agr=r(hut,"pretrained_model_name_or_path"),hut.forEach(t),ygr=r(AC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(AC,"CODE",{});var put=s(Z1e);Lgr=r(put,"pretrained_model_name_or_path"),put.forEach(t),xgr=r(AC,":"),AC.forEach(t),$gr=i(ul),ye=n(ul,"UL",{});var Se=s(ye);c8=n(Se,"LI",{});var Jxe=s(c8);ebe=n(Jxe,"STRONG",{});var uut=s(ebe);kgr=r(uut,"bart"),uut.forEach(t),Sgr=r(Jxe," \u2014 "),fQ=n(Jxe,"A",{href:!0});var _ut=s(fQ);Rgr=r(_ut,"TFBartForConditionalGeneration"),_ut.forEach(t),Bgr=r(Jxe," (BART model)"),Jxe.forEach(t),Pgr=i(Se),f8=n(Se,"LI",{});var Yxe=s(f8);obe=n(Yxe,"STRONG",{});var but=s(obe);Igr=r(but,"blenderbot"),but.forEach(t),qgr=r(Yxe," \u2014 "),mQ=n(Yxe,"A",{href:!0});var vut=s(mQ);Ngr=r(vut,"TFBlenderbotForConditionalGeneration"),vut.forEach(t),jgr=r(Yxe," (Blenderbot model)"),Yxe.forEach(t),Dgr=i(Se),m8=n(Se,"LI",{});var Kxe=s(m8);rbe=n(Kxe,"STRONG",{});var Fut=s(rbe);Ggr=r(Fut,"blenderbot-small"),Fut.forEach(t),Ogr=r(Kxe," \u2014 "),gQ=n(Kxe,"A",{href:!0});var Tut=s(gQ);Vgr=r(Tut,"TFBlenderbotSmallForConditionalGeneration"),Tut.forEach(t),Xgr=r(Kxe," (BlenderbotSmall model)"),Kxe.forEach(t),zgr=i(Se),g8=n(Se,"LI",{});var Zxe=s(g8);tbe=n(Zxe,"STRONG",{});var Mut=s(tbe);Qgr=r(Mut,"encoder-decoder"),Mut.forEach(t),Wgr=r(Zxe," \u2014 "),hQ=n(Zxe,"A",{href:!0});var Eut=s(hQ);Hgr=r(Eut,"TFEncoderDecoderModel"),Eut.forEach(t),Ugr=r(Zxe," (Encoder decoder model)"),Zxe.forEach(t),Jgr=i(Se),h8=n(Se,"LI",{});var e$e=s(h8);abe=n(e$e,"STRONG",{});var Cut=s(abe);Ygr=r(Cut,"led"),Cut.forEach(t),Kgr=r(e$e," \u2014 "),pQ=n(e$e,"A",{href:!0});var wut=s(pQ);Zgr=r(wut,"TFLEDForConditionalGeneration"),wut.forEach(t),ehr=r(e$e," (LED model)"),e$e.forEach(t),ohr=i(Se),p8=n(Se,"LI",{});var o$e=s(p8);nbe=n(o$e,"STRONG",{});var Aut=s(nbe);rhr=r(Aut,"marian"),Aut.forEach(t),thr=r(o$e," \u2014 "),uQ=n(o$e,"A",{href:!0});var yut=s(uQ);ahr=r(yut,"TFMarianMTModel"),yut.forEach(t),nhr=r(o$e," (Marian model)"),o$e.forEach(t),shr=i(Se),u8=n(Se,"LI",{});var r$e=s(u8);sbe=n(r$e,"STRONG",{});var Lut=s(sbe);lhr=r(Lut,"mbart"),Lut.forEach(t),ihr=r(r$e," \u2014 "),_Q=n(r$e,"A",{href:!0});var xut=s(_Q);dhr=r(xut,"TFMBartForConditionalGeneration"),xut.forEach(t),chr=r(r$e," (mBART model)"),r$e.forEach(t),fhr=i(Se),_8=n(Se,"LI",{});var t$e=s(_8);lbe=n(t$e,"STRONG",{});var $ut=s(lbe);mhr=r($ut,"mt5"),$ut.forEach(t),ghr=r(t$e," \u2014 "),bQ=n(t$e,"A",{href:!0});var kut=s(bQ);hhr=r(kut,"TFMT5ForConditionalGeneration"),kut.forEach(t),phr=r(t$e," (mT5 model)"),t$e.forEach(t),uhr=i(Se),b8=n(Se,"LI",{});var a$e=s(b8);ibe=n(a$e,"STRONG",{});var Sut=s(ibe);_hr=r(Sut,"pegasus"),Sut.forEach(t),bhr=r(a$e," \u2014 "),vQ=n(a$e,"A",{href:!0});var Rut=s(vQ);vhr=r(Rut,"TFPegasusForConditionalGeneration"),Rut.forEach(t),Fhr=r(a$e," (Pegasus model)"),a$e.forEach(t),Thr=i(Se),v8=n(Se,"LI",{});var n$e=s(v8);dbe=n(n$e,"STRONG",{});var But=s(dbe);Mhr=r(But,"t5"),But.forEach(t),Ehr=r(n$e," \u2014 "),FQ=n(n$e,"A",{href:!0});var Put=s(FQ);Chr=r(Put,"TFT5ForConditionalGeneration"),Put.forEach(t),whr=r(n$e," (T5 model)"),n$e.forEach(t),Se.forEach(t),Ahr=i(ul),T(F8.$$.fragment,ul),ul.forEach(t),pl.forEach(t),HBe=i(f),Ud=n(f,"H2",{class:!0});var KIe=s(Ud);T8=n(KIe,"A",{id:!0,class:!0,href:!0});var Iut=s(T8);cbe=n(Iut,"SPAN",{});var qut=s(cbe);T(Ay.$$.fragment,qut),qut.forEach(t),Iut.forEach(t),yhr=i(KIe),fbe=n(KIe,"SPAN",{});var Nut=s(fbe);Lhr=r(Nut,"TFAutoModelForSequenceClassification"),Nut.forEach(t),KIe.forEach(t),UBe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(yy.$$.fragment,_l),xhr=i(_l),Jd=n(_l,"P",{});var eK=s(Jd);$hr=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TQ=n(eK,"A",{href:!0});var jut=s(TQ);khr=r(jut,"from_pretrained()"),jut.forEach(t),Shr=r(eK," class method or the "),MQ=n(eK,"A",{href:!0});var Dut=s(MQ);Rhr=r(Dut,"from_config()"),Dut.forEach(t),Bhr=r(eK,` class
method.`),eK.forEach(t),Phr=i(_l),Ly=n(_l,"P",{});var ZIe=s(Ly);Ihr=r(ZIe,"This class cannot be instantiated directly using "),mbe=n(ZIe,"CODE",{});var Gut=s(mbe);qhr=r(Gut,"__init__()"),Gut.forEach(t),Nhr=r(ZIe," (throws an error)."),ZIe.forEach(t),jhr=i(_l),Lt=n(_l,"DIV",{class:!0});var yC=s(Lt);T(xy.$$.fragment,yC),Dhr=i(yC),gbe=n(yC,"P",{});var Out=s(gbe);Ghr=r(Out,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Out.forEach(t),Ohr=i(yC),Yd=n(yC,"P",{});var oK=s(Yd);Vhr=r(oK,`Note:
Loading a model from its configuration file does `),hbe=n(oK,"STRONG",{});var Vut=s(hbe);Xhr=r(Vut,"not"),Vut.forEach(t),zhr=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(oK,"A",{href:!0});var Xut=s(EQ);Qhr=r(Xut,"from_pretrained()"),Xut.forEach(t),Whr=r(oK," to load the model weights."),oK.forEach(t),Hhr=i(yC),T(M8.$$.fragment,yC),yC.forEach(t),Uhr=i(_l),Lr=n(_l,"DIV",{class:!0});var bl=s(Lr);T($y.$$.fragment,bl),Jhr=i(bl),pbe=n(bl,"P",{});var zut=s(pbe);Yhr=r(zut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zut.forEach(t),Khr=i(bl),on=n(bl,"P",{});var LC=s(on);Zhr=r(LC,"The model class to instantiate is selected based on the "),ube=n(LC,"CODE",{});var Qut=s(ube);epr=r(Qut,"model_type"),Qut.forEach(t),opr=r(LC,` property of the config object (either
passed as an argument or loaded from `),_be=n(LC,"CODE",{});var Wut=s(_be);rpr=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),tpr=r(LC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bbe=n(LC,"CODE",{});var Hut=s(bbe);apr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),npr=r(LC,":"),LC.forEach(t),spr=i(bl),Z=n(bl,"UL",{});var re=s(Z);E8=n(re,"LI",{});var s$e=s(E8);vbe=n(s$e,"STRONG",{});var Uut=s(vbe);lpr=r(Uut,"albert"),Uut.forEach(t),ipr=r(s$e," \u2014 "),CQ=n(s$e,"A",{href:!0});var Jut=s(CQ);dpr=r(Jut,"TFAlbertForSequenceClassification"),Jut.forEach(t),cpr=r(s$e," (ALBERT model)"),s$e.forEach(t),fpr=i(re),C8=n(re,"LI",{});var l$e=s(C8);Fbe=n(l$e,"STRONG",{});var Yut=s(Fbe);mpr=r(Yut,"bert"),Yut.forEach(t),gpr=r(l$e," \u2014 "),wQ=n(l$e,"A",{href:!0});var Kut=s(wQ);hpr=r(Kut,"TFBertForSequenceClassification"),Kut.forEach(t),ppr=r(l$e," (BERT model)"),l$e.forEach(t),upr=i(re),w8=n(re,"LI",{});var i$e=s(w8);Tbe=n(i$e,"STRONG",{});var Zut=s(Tbe);_pr=r(Zut,"camembert"),Zut.forEach(t),bpr=r(i$e," \u2014 "),AQ=n(i$e,"A",{href:!0});var e_t=s(AQ);vpr=r(e_t,"TFCamembertForSequenceClassification"),e_t.forEach(t),Fpr=r(i$e," (CamemBERT model)"),i$e.forEach(t),Tpr=i(re),A8=n(re,"LI",{});var d$e=s(A8);Mbe=n(d$e,"STRONG",{});var o_t=s(Mbe);Mpr=r(o_t,"convbert"),o_t.forEach(t),Epr=r(d$e," \u2014 "),yQ=n(d$e,"A",{href:!0});var r_t=s(yQ);Cpr=r(r_t,"TFConvBertForSequenceClassification"),r_t.forEach(t),wpr=r(d$e," (ConvBERT model)"),d$e.forEach(t),Apr=i(re),y8=n(re,"LI",{});var c$e=s(y8);Ebe=n(c$e,"STRONG",{});var t_t=s(Ebe);ypr=r(t_t,"ctrl"),t_t.forEach(t),Lpr=r(c$e," \u2014 "),LQ=n(c$e,"A",{href:!0});var a_t=s(LQ);xpr=r(a_t,"TFCTRLForSequenceClassification"),a_t.forEach(t),$pr=r(c$e," (CTRL model)"),c$e.forEach(t),kpr=i(re),L8=n(re,"LI",{});var f$e=s(L8);Cbe=n(f$e,"STRONG",{});var n_t=s(Cbe);Spr=r(n_t,"deberta"),n_t.forEach(t),Rpr=r(f$e," \u2014 "),xQ=n(f$e,"A",{href:!0});var s_t=s(xQ);Bpr=r(s_t,"TFDebertaForSequenceClassification"),s_t.forEach(t),Ppr=r(f$e," (DeBERTa model)"),f$e.forEach(t),Ipr=i(re),x8=n(re,"LI",{});var m$e=s(x8);wbe=n(m$e,"STRONG",{});var l_t=s(wbe);qpr=r(l_t,"deberta-v2"),l_t.forEach(t),Npr=r(m$e," \u2014 "),$Q=n(m$e,"A",{href:!0});var i_t=s($Q);jpr=r(i_t,"TFDebertaV2ForSequenceClassification"),i_t.forEach(t),Dpr=r(m$e," (DeBERTa-v2 model)"),m$e.forEach(t),Gpr=i(re),$8=n(re,"LI",{});var g$e=s($8);Abe=n(g$e,"STRONG",{});var d_t=s(Abe);Opr=r(d_t,"distilbert"),d_t.forEach(t),Vpr=r(g$e," \u2014 "),kQ=n(g$e,"A",{href:!0});var c_t=s(kQ);Xpr=r(c_t,"TFDistilBertForSequenceClassification"),c_t.forEach(t),zpr=r(g$e," (DistilBERT model)"),g$e.forEach(t),Qpr=i(re),k8=n(re,"LI",{});var h$e=s(k8);ybe=n(h$e,"STRONG",{});var f_t=s(ybe);Wpr=r(f_t,"electra"),f_t.forEach(t),Hpr=r(h$e," \u2014 "),SQ=n(h$e,"A",{href:!0});var m_t=s(SQ);Upr=r(m_t,"TFElectraForSequenceClassification"),m_t.forEach(t),Jpr=r(h$e," (ELECTRA model)"),h$e.forEach(t),Ypr=i(re),S8=n(re,"LI",{});var p$e=s(S8);Lbe=n(p$e,"STRONG",{});var g_t=s(Lbe);Kpr=r(g_t,"flaubert"),g_t.forEach(t),Zpr=r(p$e," \u2014 "),RQ=n(p$e,"A",{href:!0});var h_t=s(RQ);eur=r(h_t,"TFFlaubertForSequenceClassification"),h_t.forEach(t),our=r(p$e," (FlauBERT model)"),p$e.forEach(t),rur=i(re),R8=n(re,"LI",{});var u$e=s(R8);xbe=n(u$e,"STRONG",{});var p_t=s(xbe);tur=r(p_t,"funnel"),p_t.forEach(t),aur=r(u$e," \u2014 "),BQ=n(u$e,"A",{href:!0});var u_t=s(BQ);nur=r(u_t,"TFFunnelForSequenceClassification"),u_t.forEach(t),sur=r(u$e," (Funnel Transformer model)"),u$e.forEach(t),lur=i(re),B8=n(re,"LI",{});var _$e=s(B8);$be=n(_$e,"STRONG",{});var __t=s($be);iur=r(__t,"gpt2"),__t.forEach(t),dur=r(_$e," \u2014 "),PQ=n(_$e,"A",{href:!0});var b_t=s(PQ);cur=r(b_t,"TFGPT2ForSequenceClassification"),b_t.forEach(t),fur=r(_$e," (OpenAI GPT-2 model)"),_$e.forEach(t),mur=i(re),P8=n(re,"LI",{});var b$e=s(P8);kbe=n(b$e,"STRONG",{});var v_t=s(kbe);gur=r(v_t,"gptj"),v_t.forEach(t),hur=r(b$e," \u2014 "),IQ=n(b$e,"A",{href:!0});var F_t=s(IQ);pur=r(F_t,"TFGPTJForSequenceClassification"),F_t.forEach(t),uur=r(b$e," (GPT-J model)"),b$e.forEach(t),_ur=i(re),I8=n(re,"LI",{});var v$e=s(I8);Sbe=n(v$e,"STRONG",{});var T_t=s(Sbe);bur=r(T_t,"layoutlm"),T_t.forEach(t),vur=r(v$e," \u2014 "),qQ=n(v$e,"A",{href:!0});var M_t=s(qQ);Fur=r(M_t,"TFLayoutLMForSequenceClassification"),M_t.forEach(t),Tur=r(v$e," (LayoutLM model)"),v$e.forEach(t),Mur=i(re),q8=n(re,"LI",{});var F$e=s(q8);Rbe=n(F$e,"STRONG",{});var E_t=s(Rbe);Eur=r(E_t,"longformer"),E_t.forEach(t),Cur=r(F$e," \u2014 "),NQ=n(F$e,"A",{href:!0});var C_t=s(NQ);wur=r(C_t,"TFLongformerForSequenceClassification"),C_t.forEach(t),Aur=r(F$e," (Longformer model)"),F$e.forEach(t),yur=i(re),N8=n(re,"LI",{});var T$e=s(N8);Bbe=n(T$e,"STRONG",{});var w_t=s(Bbe);Lur=r(w_t,"mobilebert"),w_t.forEach(t),xur=r(T$e," \u2014 "),jQ=n(T$e,"A",{href:!0});var A_t=s(jQ);$ur=r(A_t,"TFMobileBertForSequenceClassification"),A_t.forEach(t),kur=r(T$e," (MobileBERT model)"),T$e.forEach(t),Sur=i(re),j8=n(re,"LI",{});var M$e=s(j8);Pbe=n(M$e,"STRONG",{});var y_t=s(Pbe);Rur=r(y_t,"mpnet"),y_t.forEach(t),Bur=r(M$e," \u2014 "),DQ=n(M$e,"A",{href:!0});var L_t=s(DQ);Pur=r(L_t,"TFMPNetForSequenceClassification"),L_t.forEach(t),Iur=r(M$e," (MPNet model)"),M$e.forEach(t),qur=i(re),D8=n(re,"LI",{});var E$e=s(D8);Ibe=n(E$e,"STRONG",{});var x_t=s(Ibe);Nur=r(x_t,"openai-gpt"),x_t.forEach(t),jur=r(E$e," \u2014 "),GQ=n(E$e,"A",{href:!0});var $_t=s(GQ);Dur=r($_t,"TFOpenAIGPTForSequenceClassification"),$_t.forEach(t),Gur=r(E$e," (OpenAI GPT model)"),E$e.forEach(t),Our=i(re),G8=n(re,"LI",{});var C$e=s(G8);qbe=n(C$e,"STRONG",{});var k_t=s(qbe);Vur=r(k_t,"rembert"),k_t.forEach(t),Xur=r(C$e," \u2014 "),OQ=n(C$e,"A",{href:!0});var S_t=s(OQ);zur=r(S_t,"TFRemBertForSequenceClassification"),S_t.forEach(t),Qur=r(C$e," (RemBERT model)"),C$e.forEach(t),Wur=i(re),O8=n(re,"LI",{});var w$e=s(O8);Nbe=n(w$e,"STRONG",{});var R_t=s(Nbe);Hur=r(R_t,"roberta"),R_t.forEach(t),Uur=r(w$e," \u2014 "),VQ=n(w$e,"A",{href:!0});var B_t=s(VQ);Jur=r(B_t,"TFRobertaForSequenceClassification"),B_t.forEach(t),Yur=r(w$e," (RoBERTa model)"),w$e.forEach(t),Kur=i(re),V8=n(re,"LI",{});var A$e=s(V8);jbe=n(A$e,"STRONG",{});var P_t=s(jbe);Zur=r(P_t,"roformer"),P_t.forEach(t),e_r=r(A$e," \u2014 "),XQ=n(A$e,"A",{href:!0});var I_t=s(XQ);o_r=r(I_t,"TFRoFormerForSequenceClassification"),I_t.forEach(t),r_r=r(A$e," (RoFormer model)"),A$e.forEach(t),t_r=i(re),X8=n(re,"LI",{});var y$e=s(X8);Dbe=n(y$e,"STRONG",{});var q_t=s(Dbe);a_r=r(q_t,"tapas"),q_t.forEach(t),n_r=r(y$e," \u2014 "),zQ=n(y$e,"A",{href:!0});var N_t=s(zQ);s_r=r(N_t,"TFTapasForSequenceClassification"),N_t.forEach(t),l_r=r(y$e," (TAPAS model)"),y$e.forEach(t),i_r=i(re),z8=n(re,"LI",{});var L$e=s(z8);Gbe=n(L$e,"STRONG",{});var j_t=s(Gbe);d_r=r(j_t,"transfo-xl"),j_t.forEach(t),c_r=r(L$e," \u2014 "),QQ=n(L$e,"A",{href:!0});var D_t=s(QQ);f_r=r(D_t,"TFTransfoXLForSequenceClassification"),D_t.forEach(t),m_r=r(L$e," (Transformer-XL model)"),L$e.forEach(t),g_r=i(re),Q8=n(re,"LI",{});var x$e=s(Q8);Obe=n(x$e,"STRONG",{});var G_t=s(Obe);h_r=r(G_t,"xlm"),G_t.forEach(t),p_r=r(x$e," \u2014 "),WQ=n(x$e,"A",{href:!0});var O_t=s(WQ);u_r=r(O_t,"TFXLMForSequenceClassification"),O_t.forEach(t),__r=r(x$e," (XLM model)"),x$e.forEach(t),b_r=i(re),W8=n(re,"LI",{});var $$e=s(W8);Vbe=n($$e,"STRONG",{});var V_t=s(Vbe);v_r=r(V_t,"xlm-roberta"),V_t.forEach(t),F_r=r($$e," \u2014 "),HQ=n($$e,"A",{href:!0});var X_t=s(HQ);T_r=r(X_t,"TFXLMRobertaForSequenceClassification"),X_t.forEach(t),M_r=r($$e," (XLM-RoBERTa model)"),$$e.forEach(t),E_r=i(re),H8=n(re,"LI",{});var k$e=s(H8);Xbe=n(k$e,"STRONG",{});var z_t=s(Xbe);C_r=r(z_t,"xlnet"),z_t.forEach(t),w_r=r(k$e," \u2014 "),UQ=n(k$e,"A",{href:!0});var Q_t=s(UQ);A_r=r(Q_t,"TFXLNetForSequenceClassification"),Q_t.forEach(t),y_r=r(k$e," (XLNet model)"),k$e.forEach(t),re.forEach(t),L_r=i(bl),T(U8.$$.fragment,bl),bl.forEach(t),_l.forEach(t),JBe=i(f),Kd=n(f,"H2",{class:!0});var eqe=s(Kd);J8=n(eqe,"A",{id:!0,class:!0,href:!0});var W_t=s(J8);zbe=n(W_t,"SPAN",{});var H_t=s(zbe);T(ky.$$.fragment,H_t),H_t.forEach(t),W_t.forEach(t),x_r=i(eqe),Qbe=n(eqe,"SPAN",{});var U_t=s(Qbe);$_r=r(U_t,"TFAutoModelForMultipleChoice"),U_t.forEach(t),eqe.forEach(t),YBe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(Sy.$$.fragment,vl),k_r=i(vl),Zd=n(vl,"P",{});var rK=s(Zd);S_r=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JQ=n(rK,"A",{href:!0});var J_t=s(JQ);R_r=r(J_t,"from_pretrained()"),J_t.forEach(t),B_r=r(rK," class method or the "),YQ=n(rK,"A",{href:!0});var Y_t=s(YQ);P_r=r(Y_t,"from_config()"),Y_t.forEach(t),I_r=r(rK,` class
method.`),rK.forEach(t),q_r=i(vl),Ry=n(vl,"P",{});var oqe=s(Ry);N_r=r(oqe,"This class cannot be instantiated directly using "),Wbe=n(oqe,"CODE",{});var K_t=s(Wbe);j_r=r(K_t,"__init__()"),K_t.forEach(t),D_r=r(oqe," (throws an error)."),oqe.forEach(t),G_r=i(vl),xt=n(vl,"DIV",{class:!0});var xC=s(xt);T(By.$$.fragment,xC),O_r=i(xC),Hbe=n(xC,"P",{});var Z_t=s(Hbe);V_r=r(Z_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Z_t.forEach(t),X_r=i(xC),ec=n(xC,"P",{});var tK=s(ec);z_r=r(tK,`Note:
Loading a model from its configuration file does `),Ube=n(tK,"STRONG",{});var e1t=s(Ube);Q_r=r(e1t,"not"),e1t.forEach(t),W_r=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(tK,"A",{href:!0});var o1t=s(KQ);H_r=r(o1t,"from_pretrained()"),o1t.forEach(t),U_r=r(tK," to load the model weights."),tK.forEach(t),J_r=i(xC),T(Y8.$$.fragment,xC),xC.forEach(t),Y_r=i(vl),xr=n(vl,"DIV",{class:!0});var Fl=s(xr);T(Py.$$.fragment,Fl),K_r=i(Fl),Jbe=n(Fl,"P",{});var r1t=s(Jbe);Z_r=r(r1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),r1t.forEach(t),e1r=i(Fl),rn=n(Fl,"P",{});var $C=s(rn);o1r=r($C,"The model class to instantiate is selected based on the "),Ybe=n($C,"CODE",{});var t1t=s(Ybe);r1r=r(t1t,"model_type"),t1t.forEach(t),t1r=r($C,` property of the config object (either
passed as an argument or loaded from `),Kbe=n($C,"CODE",{});var a1t=s(Kbe);a1r=r(a1t,"pretrained_model_name_or_path"),a1t.forEach(t),n1r=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n($C,"CODE",{});var n1t=s(Zbe);s1r=r(n1t,"pretrained_model_name_or_path"),n1t.forEach(t),l1r=r($C,":"),$C.forEach(t),i1r=i(Fl),pe=n(Fl,"UL",{});var _e=s(pe);K8=n(_e,"LI",{});var S$e=s(K8);e2e=n(S$e,"STRONG",{});var s1t=s(e2e);d1r=r(s1t,"albert"),s1t.forEach(t),c1r=r(S$e," \u2014 "),ZQ=n(S$e,"A",{href:!0});var l1t=s(ZQ);f1r=r(l1t,"TFAlbertForMultipleChoice"),l1t.forEach(t),m1r=r(S$e," (ALBERT model)"),S$e.forEach(t),g1r=i(_e),Z8=n(_e,"LI",{});var R$e=s(Z8);o2e=n(R$e,"STRONG",{});var i1t=s(o2e);h1r=r(i1t,"bert"),i1t.forEach(t),p1r=r(R$e," \u2014 "),eW=n(R$e,"A",{href:!0});var d1t=s(eW);u1r=r(d1t,"TFBertForMultipleChoice"),d1t.forEach(t),_1r=r(R$e," (BERT model)"),R$e.forEach(t),b1r=i(_e),e9=n(_e,"LI",{});var B$e=s(e9);r2e=n(B$e,"STRONG",{});var c1t=s(r2e);v1r=r(c1t,"camembert"),c1t.forEach(t),F1r=r(B$e," \u2014 "),oW=n(B$e,"A",{href:!0});var f1t=s(oW);T1r=r(f1t,"TFCamembertForMultipleChoice"),f1t.forEach(t),M1r=r(B$e," (CamemBERT model)"),B$e.forEach(t),E1r=i(_e),o9=n(_e,"LI",{});var P$e=s(o9);t2e=n(P$e,"STRONG",{});var m1t=s(t2e);C1r=r(m1t,"convbert"),m1t.forEach(t),w1r=r(P$e," \u2014 "),rW=n(P$e,"A",{href:!0});var g1t=s(rW);A1r=r(g1t,"TFConvBertForMultipleChoice"),g1t.forEach(t),y1r=r(P$e," (ConvBERT model)"),P$e.forEach(t),L1r=i(_e),r9=n(_e,"LI",{});var I$e=s(r9);a2e=n(I$e,"STRONG",{});var h1t=s(a2e);x1r=r(h1t,"distilbert"),h1t.forEach(t),$1r=r(I$e," \u2014 "),tW=n(I$e,"A",{href:!0});var p1t=s(tW);k1r=r(p1t,"TFDistilBertForMultipleChoice"),p1t.forEach(t),S1r=r(I$e," (DistilBERT model)"),I$e.forEach(t),R1r=i(_e),t9=n(_e,"LI",{});var q$e=s(t9);n2e=n(q$e,"STRONG",{});var u1t=s(n2e);B1r=r(u1t,"electra"),u1t.forEach(t),P1r=r(q$e," \u2014 "),aW=n(q$e,"A",{href:!0});var _1t=s(aW);I1r=r(_1t,"TFElectraForMultipleChoice"),_1t.forEach(t),q1r=r(q$e," (ELECTRA model)"),q$e.forEach(t),N1r=i(_e),a9=n(_e,"LI",{});var N$e=s(a9);s2e=n(N$e,"STRONG",{});var b1t=s(s2e);j1r=r(b1t,"flaubert"),b1t.forEach(t),D1r=r(N$e," \u2014 "),nW=n(N$e,"A",{href:!0});var v1t=s(nW);G1r=r(v1t,"TFFlaubertForMultipleChoice"),v1t.forEach(t),O1r=r(N$e," (FlauBERT model)"),N$e.forEach(t),V1r=i(_e),n9=n(_e,"LI",{});var j$e=s(n9);l2e=n(j$e,"STRONG",{});var F1t=s(l2e);X1r=r(F1t,"funnel"),F1t.forEach(t),z1r=r(j$e," \u2014 "),sW=n(j$e,"A",{href:!0});var T1t=s(sW);Q1r=r(T1t,"TFFunnelForMultipleChoice"),T1t.forEach(t),W1r=r(j$e," (Funnel Transformer model)"),j$e.forEach(t),H1r=i(_e),s9=n(_e,"LI",{});var D$e=s(s9);i2e=n(D$e,"STRONG",{});var M1t=s(i2e);U1r=r(M1t,"longformer"),M1t.forEach(t),J1r=r(D$e," \u2014 "),lW=n(D$e,"A",{href:!0});var E1t=s(lW);Y1r=r(E1t,"TFLongformerForMultipleChoice"),E1t.forEach(t),K1r=r(D$e," (Longformer model)"),D$e.forEach(t),Z1r=i(_e),l9=n(_e,"LI",{});var G$e=s(l9);d2e=n(G$e,"STRONG",{});var C1t=s(d2e);ebr=r(C1t,"mobilebert"),C1t.forEach(t),obr=r(G$e," \u2014 "),iW=n(G$e,"A",{href:!0});var w1t=s(iW);rbr=r(w1t,"TFMobileBertForMultipleChoice"),w1t.forEach(t),tbr=r(G$e," (MobileBERT model)"),G$e.forEach(t),abr=i(_e),i9=n(_e,"LI",{});var O$e=s(i9);c2e=n(O$e,"STRONG",{});var A1t=s(c2e);nbr=r(A1t,"mpnet"),A1t.forEach(t),sbr=r(O$e," \u2014 "),dW=n(O$e,"A",{href:!0});var y1t=s(dW);lbr=r(y1t,"TFMPNetForMultipleChoice"),y1t.forEach(t),ibr=r(O$e," (MPNet model)"),O$e.forEach(t),dbr=i(_e),d9=n(_e,"LI",{});var V$e=s(d9);f2e=n(V$e,"STRONG",{});var L1t=s(f2e);cbr=r(L1t,"rembert"),L1t.forEach(t),fbr=r(V$e," \u2014 "),cW=n(V$e,"A",{href:!0});var x1t=s(cW);mbr=r(x1t,"TFRemBertForMultipleChoice"),x1t.forEach(t),gbr=r(V$e," (RemBERT model)"),V$e.forEach(t),hbr=i(_e),c9=n(_e,"LI",{});var X$e=s(c9);m2e=n(X$e,"STRONG",{});var $1t=s(m2e);pbr=r($1t,"roberta"),$1t.forEach(t),ubr=r(X$e," \u2014 "),fW=n(X$e,"A",{href:!0});var k1t=s(fW);_br=r(k1t,"TFRobertaForMultipleChoice"),k1t.forEach(t),bbr=r(X$e," (RoBERTa model)"),X$e.forEach(t),vbr=i(_e),f9=n(_e,"LI",{});var z$e=s(f9);g2e=n(z$e,"STRONG",{});var S1t=s(g2e);Fbr=r(S1t,"roformer"),S1t.forEach(t),Tbr=r(z$e," \u2014 "),mW=n(z$e,"A",{href:!0});var R1t=s(mW);Mbr=r(R1t,"TFRoFormerForMultipleChoice"),R1t.forEach(t),Ebr=r(z$e," (RoFormer model)"),z$e.forEach(t),Cbr=i(_e),m9=n(_e,"LI",{});var Q$e=s(m9);h2e=n(Q$e,"STRONG",{});var B1t=s(h2e);wbr=r(B1t,"xlm"),B1t.forEach(t),Abr=r(Q$e," \u2014 "),gW=n(Q$e,"A",{href:!0});var P1t=s(gW);ybr=r(P1t,"TFXLMForMultipleChoice"),P1t.forEach(t),Lbr=r(Q$e," (XLM model)"),Q$e.forEach(t),xbr=i(_e),g9=n(_e,"LI",{});var W$e=s(g9);p2e=n(W$e,"STRONG",{});var I1t=s(p2e);$br=r(I1t,"xlm-roberta"),I1t.forEach(t),kbr=r(W$e," \u2014 "),hW=n(W$e,"A",{href:!0});var q1t=s(hW);Sbr=r(q1t,"TFXLMRobertaForMultipleChoice"),q1t.forEach(t),Rbr=r(W$e," (XLM-RoBERTa model)"),W$e.forEach(t),Bbr=i(_e),h9=n(_e,"LI",{});var H$e=s(h9);u2e=n(H$e,"STRONG",{});var N1t=s(u2e);Pbr=r(N1t,"xlnet"),N1t.forEach(t),Ibr=r(H$e," \u2014 "),pW=n(H$e,"A",{href:!0});var j1t=s(pW);qbr=r(j1t,"TFXLNetForMultipleChoice"),j1t.forEach(t),Nbr=r(H$e," (XLNet model)"),H$e.forEach(t),_e.forEach(t),jbr=i(Fl),T(p9.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),KBe=i(f),oc=n(f,"H2",{class:!0});var rqe=s(oc);u9=n(rqe,"A",{id:!0,class:!0,href:!0});var D1t=s(u9);_2e=n(D1t,"SPAN",{});var G1t=s(_2e);T(Iy.$$.fragment,G1t),G1t.forEach(t),D1t.forEach(t),Dbr=i(rqe),b2e=n(rqe,"SPAN",{});var O1t=s(b2e);Gbr=r(O1t,"TFAutoModelForTableQuestionAnswering"),O1t.forEach(t),rqe.forEach(t),ZBe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(qy.$$.fragment,Tl),Obr=i(Tl),rc=n(Tl,"P",{});var aK=s(rc);Vbr=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uW=n(aK,"A",{href:!0});var V1t=s(uW);Xbr=r(V1t,"from_pretrained()"),V1t.forEach(t),zbr=r(aK," class method or the "),_W=n(aK,"A",{href:!0});var X1t=s(_W);Qbr=r(X1t,"from_config()"),X1t.forEach(t),Wbr=r(aK,` class
method.`),aK.forEach(t),Hbr=i(Tl),Ny=n(Tl,"P",{});var tqe=s(Ny);Ubr=r(tqe,"This class cannot be instantiated directly using "),v2e=n(tqe,"CODE",{});var z1t=s(v2e);Jbr=r(z1t,"__init__()"),z1t.forEach(t),Ybr=r(tqe," (throws an error)."),tqe.forEach(t),Kbr=i(Tl),$t=n(Tl,"DIV",{class:!0});var kC=s($t);T(jy.$$.fragment,kC),Zbr=i(kC),F2e=n(kC,"P",{});var Q1t=s(F2e);e2r=r(Q1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Q1t.forEach(t),o2r=i(kC),tc=n(kC,"P",{});var nK=s(tc);r2r=r(nK,`Note:
Loading a model from its configuration file does `),T2e=n(nK,"STRONG",{});var W1t=s(T2e);t2r=r(W1t,"not"),W1t.forEach(t),a2r=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(nK,"A",{href:!0});var H1t=s(bW);n2r=r(H1t,"from_pretrained()"),H1t.forEach(t),s2r=r(nK," to load the model weights."),nK.forEach(t),l2r=i(kC),T(_9.$$.fragment,kC),kC.forEach(t),i2r=i(Tl),$r=n(Tl,"DIV",{class:!0});var Ml=s($r);T(Dy.$$.fragment,Ml),d2r=i(Ml),M2e=n(Ml,"P",{});var U1t=s(M2e);c2r=r(U1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),U1t.forEach(t),f2r=i(Ml),tn=n(Ml,"P",{});var SC=s(tn);m2r=r(SC,"The model class to instantiate is selected based on the "),E2e=n(SC,"CODE",{});var J1t=s(E2e);g2r=r(J1t,"model_type"),J1t.forEach(t),h2r=r(SC,` property of the config object (either
passed as an argument or loaded from `),C2e=n(SC,"CODE",{});var Y1t=s(C2e);p2r=r(Y1t,"pretrained_model_name_or_path"),Y1t.forEach(t),u2r=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(SC,"CODE",{});var K1t=s(w2e);_2r=r(K1t,"pretrained_model_name_or_path"),K1t.forEach(t),b2r=r(SC,":"),SC.forEach(t),v2r=i(Ml),A2e=n(Ml,"UL",{});var Z1t=s(A2e);b9=n(Z1t,"LI",{});var U$e=s(b9);y2e=n(U$e,"STRONG",{});var ebt=s(y2e);F2r=r(ebt,"tapas"),ebt.forEach(t),T2r=r(U$e," \u2014 "),vW=n(U$e,"A",{href:!0});var obt=s(vW);M2r=r(obt,"TFTapasForQuestionAnswering"),obt.forEach(t),E2r=r(U$e," (TAPAS model)"),U$e.forEach(t),Z1t.forEach(t),C2r=i(Ml),T(v9.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),ePe=i(f),ac=n(f,"H2",{class:!0});var aqe=s(ac);F9=n(aqe,"A",{id:!0,class:!0,href:!0});var rbt=s(F9);L2e=n(rbt,"SPAN",{});var tbt=s(L2e);T(Gy.$$.fragment,tbt),tbt.forEach(t),rbt.forEach(t),w2r=i(aqe),x2e=n(aqe,"SPAN",{});var abt=s(x2e);A2r=r(abt,"TFAutoModelForTokenClassification"),abt.forEach(t),aqe.forEach(t),oPe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(Oy.$$.fragment,El),y2r=i(El),nc=n(El,"P",{});var sK=s(nc);L2r=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FW=n(sK,"A",{href:!0});var nbt=s(FW);x2r=r(nbt,"from_pretrained()"),nbt.forEach(t),$2r=r(sK," class method or the "),TW=n(sK,"A",{href:!0});var sbt=s(TW);k2r=r(sbt,"from_config()"),sbt.forEach(t),S2r=r(sK,` class
method.`),sK.forEach(t),R2r=i(El),Vy=n(El,"P",{});var nqe=s(Vy);B2r=r(nqe,"This class cannot be instantiated directly using "),$2e=n(nqe,"CODE",{});var lbt=s($2e);P2r=r(lbt,"__init__()"),lbt.forEach(t),I2r=r(nqe," (throws an error)."),nqe.forEach(t),q2r=i(El),kt=n(El,"DIV",{class:!0});var RC=s(kt);T(Xy.$$.fragment,RC),N2r=i(RC),k2e=n(RC,"P",{});var ibt=s(k2e);j2r=r(ibt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ibt.forEach(t),D2r=i(RC),sc=n(RC,"P",{});var lK=s(sc);G2r=r(lK,`Note:
Loading a model from its configuration file does `),S2e=n(lK,"STRONG",{});var dbt=s(S2e);O2r=r(dbt,"not"),dbt.forEach(t),V2r=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(lK,"A",{href:!0});var cbt=s(MW);X2r=r(cbt,"from_pretrained()"),cbt.forEach(t),z2r=r(lK," to load the model weights."),lK.forEach(t),Q2r=i(RC),T(T9.$$.fragment,RC),RC.forEach(t),W2r=i(El),kr=n(El,"DIV",{class:!0});var Cl=s(kr);T(zy.$$.fragment,Cl),H2r=i(Cl),R2e=n(Cl,"P",{});var fbt=s(R2e);U2r=r(fbt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fbt.forEach(t),J2r=i(Cl),an=n(Cl,"P",{});var BC=s(an);Y2r=r(BC,"The model class to instantiate is selected based on the "),B2e=n(BC,"CODE",{});var mbt=s(B2e);K2r=r(mbt,"model_type"),mbt.forEach(t),Z2r=r(BC,` property of the config object (either
passed as an argument or loaded from `),P2e=n(BC,"CODE",{});var gbt=s(P2e);evr=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),ovr=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(BC,"CODE",{});var hbt=s(I2e);rvr=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),tvr=r(BC,":"),BC.forEach(t),avr=i(Cl),de=n(Cl,"UL",{});var me=s(de);M9=n(me,"LI",{});var J$e=s(M9);q2e=n(J$e,"STRONG",{});var pbt=s(q2e);nvr=r(pbt,"albert"),pbt.forEach(t),svr=r(J$e," \u2014 "),EW=n(J$e,"A",{href:!0});var ubt=s(EW);lvr=r(ubt,"TFAlbertForTokenClassification"),ubt.forEach(t),ivr=r(J$e," (ALBERT model)"),J$e.forEach(t),dvr=i(me),E9=n(me,"LI",{});var Y$e=s(E9);N2e=n(Y$e,"STRONG",{});var _bt=s(N2e);cvr=r(_bt,"bert"),_bt.forEach(t),fvr=r(Y$e," \u2014 "),CW=n(Y$e,"A",{href:!0});var bbt=s(CW);mvr=r(bbt,"TFBertForTokenClassification"),bbt.forEach(t),gvr=r(Y$e," (BERT model)"),Y$e.forEach(t),hvr=i(me),C9=n(me,"LI",{});var K$e=s(C9);j2e=n(K$e,"STRONG",{});var vbt=s(j2e);pvr=r(vbt,"camembert"),vbt.forEach(t),uvr=r(K$e," \u2014 "),wW=n(K$e,"A",{href:!0});var Fbt=s(wW);_vr=r(Fbt,"TFCamembertForTokenClassification"),Fbt.forEach(t),bvr=r(K$e," (CamemBERT model)"),K$e.forEach(t),vvr=i(me),w9=n(me,"LI",{});var Z$e=s(w9);D2e=n(Z$e,"STRONG",{});var Tbt=s(D2e);Fvr=r(Tbt,"convbert"),Tbt.forEach(t),Tvr=r(Z$e," \u2014 "),AW=n(Z$e,"A",{href:!0});var Mbt=s(AW);Mvr=r(Mbt,"TFConvBertForTokenClassification"),Mbt.forEach(t),Evr=r(Z$e," (ConvBERT model)"),Z$e.forEach(t),Cvr=i(me),A9=n(me,"LI",{});var eke=s(A9);G2e=n(eke,"STRONG",{});var Ebt=s(G2e);wvr=r(Ebt,"deberta"),Ebt.forEach(t),Avr=r(eke," \u2014 "),yW=n(eke,"A",{href:!0});var Cbt=s(yW);yvr=r(Cbt,"TFDebertaForTokenClassification"),Cbt.forEach(t),Lvr=r(eke," (DeBERTa model)"),eke.forEach(t),xvr=i(me),y9=n(me,"LI",{});var oke=s(y9);O2e=n(oke,"STRONG",{});var wbt=s(O2e);$vr=r(wbt,"deberta-v2"),wbt.forEach(t),kvr=r(oke," \u2014 "),LW=n(oke,"A",{href:!0});var Abt=s(LW);Svr=r(Abt,"TFDebertaV2ForTokenClassification"),Abt.forEach(t),Rvr=r(oke," (DeBERTa-v2 model)"),oke.forEach(t),Bvr=i(me),L9=n(me,"LI",{});var rke=s(L9);V2e=n(rke,"STRONG",{});var ybt=s(V2e);Pvr=r(ybt,"distilbert"),ybt.forEach(t),Ivr=r(rke," \u2014 "),xW=n(rke,"A",{href:!0});var Lbt=s(xW);qvr=r(Lbt,"TFDistilBertForTokenClassification"),Lbt.forEach(t),Nvr=r(rke," (DistilBERT model)"),rke.forEach(t),jvr=i(me),x9=n(me,"LI",{});var tke=s(x9);X2e=n(tke,"STRONG",{});var xbt=s(X2e);Dvr=r(xbt,"electra"),xbt.forEach(t),Gvr=r(tke," \u2014 "),$W=n(tke,"A",{href:!0});var $bt=s($W);Ovr=r($bt,"TFElectraForTokenClassification"),$bt.forEach(t),Vvr=r(tke," (ELECTRA model)"),tke.forEach(t),Xvr=i(me),$9=n(me,"LI",{});var ake=s($9);z2e=n(ake,"STRONG",{});var kbt=s(z2e);zvr=r(kbt,"flaubert"),kbt.forEach(t),Qvr=r(ake," \u2014 "),kW=n(ake,"A",{href:!0});var Sbt=s(kW);Wvr=r(Sbt,"TFFlaubertForTokenClassification"),Sbt.forEach(t),Hvr=r(ake," (FlauBERT model)"),ake.forEach(t),Uvr=i(me),k9=n(me,"LI",{});var nke=s(k9);Q2e=n(nke,"STRONG",{});var Rbt=s(Q2e);Jvr=r(Rbt,"funnel"),Rbt.forEach(t),Yvr=r(nke," \u2014 "),SW=n(nke,"A",{href:!0});var Bbt=s(SW);Kvr=r(Bbt,"TFFunnelForTokenClassification"),Bbt.forEach(t),Zvr=r(nke," (Funnel Transformer model)"),nke.forEach(t),eFr=i(me),S9=n(me,"LI",{});var ske=s(S9);W2e=n(ske,"STRONG",{});var Pbt=s(W2e);oFr=r(Pbt,"layoutlm"),Pbt.forEach(t),rFr=r(ske," \u2014 "),RW=n(ske,"A",{href:!0});var Ibt=s(RW);tFr=r(Ibt,"TFLayoutLMForTokenClassification"),Ibt.forEach(t),aFr=r(ske," (LayoutLM model)"),ske.forEach(t),nFr=i(me),R9=n(me,"LI",{});var lke=s(R9);H2e=n(lke,"STRONG",{});var qbt=s(H2e);sFr=r(qbt,"longformer"),qbt.forEach(t),lFr=r(lke," \u2014 "),BW=n(lke,"A",{href:!0});var Nbt=s(BW);iFr=r(Nbt,"TFLongformerForTokenClassification"),Nbt.forEach(t),dFr=r(lke," (Longformer model)"),lke.forEach(t),cFr=i(me),B9=n(me,"LI",{});var ike=s(B9);U2e=n(ike,"STRONG",{});var jbt=s(U2e);fFr=r(jbt,"mobilebert"),jbt.forEach(t),mFr=r(ike," \u2014 "),PW=n(ike,"A",{href:!0});var Dbt=s(PW);gFr=r(Dbt,"TFMobileBertForTokenClassification"),Dbt.forEach(t),hFr=r(ike," (MobileBERT model)"),ike.forEach(t),pFr=i(me),P9=n(me,"LI",{});var dke=s(P9);J2e=n(dke,"STRONG",{});var Gbt=s(J2e);uFr=r(Gbt,"mpnet"),Gbt.forEach(t),_Fr=r(dke," \u2014 "),IW=n(dke,"A",{href:!0});var Obt=s(IW);bFr=r(Obt,"TFMPNetForTokenClassification"),Obt.forEach(t),vFr=r(dke," (MPNet model)"),dke.forEach(t),FFr=i(me),I9=n(me,"LI",{});var cke=s(I9);Y2e=n(cke,"STRONG",{});var Vbt=s(Y2e);TFr=r(Vbt,"rembert"),Vbt.forEach(t),MFr=r(cke," \u2014 "),qW=n(cke,"A",{href:!0});var Xbt=s(qW);EFr=r(Xbt,"TFRemBertForTokenClassification"),Xbt.forEach(t),CFr=r(cke," (RemBERT model)"),cke.forEach(t),wFr=i(me),q9=n(me,"LI",{});var fke=s(q9);K2e=n(fke,"STRONG",{});var zbt=s(K2e);AFr=r(zbt,"roberta"),zbt.forEach(t),yFr=r(fke," \u2014 "),NW=n(fke,"A",{href:!0});var Qbt=s(NW);LFr=r(Qbt,"TFRobertaForTokenClassification"),Qbt.forEach(t),xFr=r(fke," (RoBERTa model)"),fke.forEach(t),$Fr=i(me),N9=n(me,"LI",{});var mke=s(N9);Z2e=n(mke,"STRONG",{});var Wbt=s(Z2e);kFr=r(Wbt,"roformer"),Wbt.forEach(t),SFr=r(mke," \u2014 "),jW=n(mke,"A",{href:!0});var Hbt=s(jW);RFr=r(Hbt,"TFRoFormerForTokenClassification"),Hbt.forEach(t),BFr=r(mke," (RoFormer model)"),mke.forEach(t),PFr=i(me),j9=n(me,"LI",{});var gke=s(j9);eve=n(gke,"STRONG",{});var Ubt=s(eve);IFr=r(Ubt,"xlm"),Ubt.forEach(t),qFr=r(gke," \u2014 "),DW=n(gke,"A",{href:!0});var Jbt=s(DW);NFr=r(Jbt,"TFXLMForTokenClassification"),Jbt.forEach(t),jFr=r(gke," (XLM model)"),gke.forEach(t),DFr=i(me),D9=n(me,"LI",{});var hke=s(D9);ove=n(hke,"STRONG",{});var Ybt=s(ove);GFr=r(Ybt,"xlm-roberta"),Ybt.forEach(t),OFr=r(hke," \u2014 "),GW=n(hke,"A",{href:!0});var Kbt=s(GW);VFr=r(Kbt,"TFXLMRobertaForTokenClassification"),Kbt.forEach(t),XFr=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),zFr=i(me),G9=n(me,"LI",{});var pke=s(G9);rve=n(pke,"STRONG",{});var Zbt=s(rve);QFr=r(Zbt,"xlnet"),Zbt.forEach(t),WFr=r(pke," \u2014 "),OW=n(pke,"A",{href:!0});var e2t=s(OW);HFr=r(e2t,"TFXLNetForTokenClassification"),e2t.forEach(t),UFr=r(pke," (XLNet model)"),pke.forEach(t),me.forEach(t),JFr=i(Cl),T(O9.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),rPe=i(f),lc=n(f,"H2",{class:!0});var sqe=s(lc);V9=n(sqe,"A",{id:!0,class:!0,href:!0});var o2t=s(V9);tve=n(o2t,"SPAN",{});var r2t=s(tve);T(Qy.$$.fragment,r2t),r2t.forEach(t),o2t.forEach(t),YFr=i(sqe),ave=n(sqe,"SPAN",{});var t2t=s(ave);KFr=r(t2t,"TFAutoModelForQuestionAnswering"),t2t.forEach(t),sqe.forEach(t),tPe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(Wy.$$.fragment,wl),ZFr=i(wl),ic=n(wl,"P",{});var iK=s(ic);e0r=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VW=n(iK,"A",{href:!0});var a2t=s(VW);o0r=r(a2t,"from_pretrained()"),a2t.forEach(t),r0r=r(iK," class method or the "),XW=n(iK,"A",{href:!0});var n2t=s(XW);t0r=r(n2t,"from_config()"),n2t.forEach(t),a0r=r(iK,` class
method.`),iK.forEach(t),n0r=i(wl),Hy=n(wl,"P",{});var lqe=s(Hy);s0r=r(lqe,"This class cannot be instantiated directly using "),nve=n(lqe,"CODE",{});var s2t=s(nve);l0r=r(s2t,"__init__()"),s2t.forEach(t),i0r=r(lqe," (throws an error)."),lqe.forEach(t),d0r=i(wl),St=n(wl,"DIV",{class:!0});var PC=s(St);T(Uy.$$.fragment,PC),c0r=i(PC),sve=n(PC,"P",{});var l2t=s(sve);f0r=r(l2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),l2t.forEach(t),m0r=i(PC),dc=n(PC,"P",{});var dK=s(dc);g0r=r(dK,`Note:
Loading a model from its configuration file does `),lve=n(dK,"STRONG",{});var i2t=s(lve);h0r=r(i2t,"not"),i2t.forEach(t),p0r=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(dK,"A",{href:!0});var d2t=s(zW);u0r=r(d2t,"from_pretrained()"),d2t.forEach(t),_0r=r(dK," to load the model weights."),dK.forEach(t),b0r=i(PC),T(X9.$$.fragment,PC),PC.forEach(t),v0r=i(wl),Sr=n(wl,"DIV",{class:!0});var Al=s(Sr);T(Jy.$$.fragment,Al),F0r=i(Al),ive=n(Al,"P",{});var c2t=s(ive);T0r=r(c2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),c2t.forEach(t),M0r=i(Al),nn=n(Al,"P",{});var IC=s(nn);E0r=r(IC,"The model class to instantiate is selected based on the "),dve=n(IC,"CODE",{});var f2t=s(dve);C0r=r(f2t,"model_type"),f2t.forEach(t),w0r=r(IC,` property of the config object (either
passed as an argument or loaded from `),cve=n(IC,"CODE",{});var m2t=s(cve);A0r=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),y0r=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(IC,"CODE",{});var g2t=s(fve);L0r=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),x0r=r(IC,":"),IC.forEach(t),$0r=i(Al),ce=n(Al,"UL",{});var ge=s(ce);z9=n(ge,"LI",{});var uke=s(z9);mve=n(uke,"STRONG",{});var h2t=s(mve);k0r=r(h2t,"albert"),h2t.forEach(t),S0r=r(uke," \u2014 "),QW=n(uke,"A",{href:!0});var p2t=s(QW);R0r=r(p2t,"TFAlbertForQuestionAnswering"),p2t.forEach(t),B0r=r(uke," (ALBERT model)"),uke.forEach(t),P0r=i(ge),Q9=n(ge,"LI",{});var _ke=s(Q9);gve=n(_ke,"STRONG",{});var u2t=s(gve);I0r=r(u2t,"bert"),u2t.forEach(t),q0r=r(_ke," \u2014 "),WW=n(_ke,"A",{href:!0});var _2t=s(WW);N0r=r(_2t,"TFBertForQuestionAnswering"),_2t.forEach(t),j0r=r(_ke," (BERT model)"),_ke.forEach(t),D0r=i(ge),W9=n(ge,"LI",{});var bke=s(W9);hve=n(bke,"STRONG",{});var b2t=s(hve);G0r=r(b2t,"camembert"),b2t.forEach(t),O0r=r(bke," \u2014 "),HW=n(bke,"A",{href:!0});var v2t=s(HW);V0r=r(v2t,"TFCamembertForQuestionAnswering"),v2t.forEach(t),X0r=r(bke," (CamemBERT model)"),bke.forEach(t),z0r=i(ge),H9=n(ge,"LI",{});var vke=s(H9);pve=n(vke,"STRONG",{});var F2t=s(pve);Q0r=r(F2t,"convbert"),F2t.forEach(t),W0r=r(vke," \u2014 "),UW=n(vke,"A",{href:!0});var T2t=s(UW);H0r=r(T2t,"TFConvBertForQuestionAnswering"),T2t.forEach(t),U0r=r(vke," (ConvBERT model)"),vke.forEach(t),J0r=i(ge),U9=n(ge,"LI",{});var Fke=s(U9);uve=n(Fke,"STRONG",{});var M2t=s(uve);Y0r=r(M2t,"deberta"),M2t.forEach(t),K0r=r(Fke," \u2014 "),JW=n(Fke,"A",{href:!0});var E2t=s(JW);Z0r=r(E2t,"TFDebertaForQuestionAnswering"),E2t.forEach(t),e6r=r(Fke," (DeBERTa model)"),Fke.forEach(t),o6r=i(ge),J9=n(ge,"LI",{});var Tke=s(J9);_ve=n(Tke,"STRONG",{});var C2t=s(_ve);r6r=r(C2t,"deberta-v2"),C2t.forEach(t),t6r=r(Tke," \u2014 "),YW=n(Tke,"A",{href:!0});var w2t=s(YW);a6r=r(w2t,"TFDebertaV2ForQuestionAnswering"),w2t.forEach(t),n6r=r(Tke," (DeBERTa-v2 model)"),Tke.forEach(t),s6r=i(ge),Y9=n(ge,"LI",{});var Mke=s(Y9);bve=n(Mke,"STRONG",{});var A2t=s(bve);l6r=r(A2t,"distilbert"),A2t.forEach(t),i6r=r(Mke," \u2014 "),KW=n(Mke,"A",{href:!0});var y2t=s(KW);d6r=r(y2t,"TFDistilBertForQuestionAnswering"),y2t.forEach(t),c6r=r(Mke," (DistilBERT model)"),Mke.forEach(t),f6r=i(ge),K9=n(ge,"LI",{});var Eke=s(K9);vve=n(Eke,"STRONG",{});var L2t=s(vve);m6r=r(L2t,"electra"),L2t.forEach(t),g6r=r(Eke," \u2014 "),ZW=n(Eke,"A",{href:!0});var x2t=s(ZW);h6r=r(x2t,"TFElectraForQuestionAnswering"),x2t.forEach(t),p6r=r(Eke," (ELECTRA model)"),Eke.forEach(t),u6r=i(ge),Z9=n(ge,"LI",{});var Cke=s(Z9);Fve=n(Cke,"STRONG",{});var $2t=s(Fve);_6r=r($2t,"flaubert"),$2t.forEach(t),b6r=r(Cke," \u2014 "),eH=n(Cke,"A",{href:!0});var k2t=s(eH);v6r=r(k2t,"TFFlaubertForQuestionAnsweringSimple"),k2t.forEach(t),F6r=r(Cke," (FlauBERT model)"),Cke.forEach(t),T6r=i(ge),eM=n(ge,"LI",{});var wke=s(eM);Tve=n(wke,"STRONG",{});var S2t=s(Tve);M6r=r(S2t,"funnel"),S2t.forEach(t),E6r=r(wke," \u2014 "),oH=n(wke,"A",{href:!0});var R2t=s(oH);C6r=r(R2t,"TFFunnelForQuestionAnswering"),R2t.forEach(t),w6r=r(wke," (Funnel Transformer model)"),wke.forEach(t),A6r=i(ge),oM=n(ge,"LI",{});var Ake=s(oM);Mve=n(Ake,"STRONG",{});var B2t=s(Mve);y6r=r(B2t,"gptj"),B2t.forEach(t),L6r=r(Ake," \u2014 "),rH=n(Ake,"A",{href:!0});var P2t=s(rH);x6r=r(P2t,"TFGPTJForQuestionAnswering"),P2t.forEach(t),$6r=r(Ake," (GPT-J model)"),Ake.forEach(t),k6r=i(ge),rM=n(ge,"LI",{});var yke=s(rM);Eve=n(yke,"STRONG",{});var I2t=s(Eve);S6r=r(I2t,"longformer"),I2t.forEach(t),R6r=r(yke," \u2014 "),tH=n(yke,"A",{href:!0});var q2t=s(tH);B6r=r(q2t,"TFLongformerForQuestionAnswering"),q2t.forEach(t),P6r=r(yke," (Longformer model)"),yke.forEach(t),I6r=i(ge),tM=n(ge,"LI",{});var Lke=s(tM);Cve=n(Lke,"STRONG",{});var N2t=s(Cve);q6r=r(N2t,"mobilebert"),N2t.forEach(t),N6r=r(Lke," \u2014 "),aH=n(Lke,"A",{href:!0});var j2t=s(aH);j6r=r(j2t,"TFMobileBertForQuestionAnswering"),j2t.forEach(t),D6r=r(Lke," (MobileBERT model)"),Lke.forEach(t),G6r=i(ge),aM=n(ge,"LI",{});var xke=s(aM);wve=n(xke,"STRONG",{});var D2t=s(wve);O6r=r(D2t,"mpnet"),D2t.forEach(t),V6r=r(xke," \u2014 "),nH=n(xke,"A",{href:!0});var G2t=s(nH);X6r=r(G2t,"TFMPNetForQuestionAnswering"),G2t.forEach(t),z6r=r(xke," (MPNet model)"),xke.forEach(t),Q6r=i(ge),nM=n(ge,"LI",{});var $ke=s(nM);Ave=n($ke,"STRONG",{});var O2t=s(Ave);W6r=r(O2t,"rembert"),O2t.forEach(t),H6r=r($ke," \u2014 "),sH=n($ke,"A",{href:!0});var V2t=s(sH);U6r=r(V2t,"TFRemBertForQuestionAnswering"),V2t.forEach(t),J6r=r($ke," (RemBERT model)"),$ke.forEach(t),Y6r=i(ge),sM=n(ge,"LI",{});var kke=s(sM);yve=n(kke,"STRONG",{});var X2t=s(yve);K6r=r(X2t,"roberta"),X2t.forEach(t),Z6r=r(kke," \u2014 "),lH=n(kke,"A",{href:!0});var z2t=s(lH);eTr=r(z2t,"TFRobertaForQuestionAnswering"),z2t.forEach(t),oTr=r(kke," (RoBERTa model)"),kke.forEach(t),rTr=i(ge),lM=n(ge,"LI",{});var Ske=s(lM);Lve=n(Ske,"STRONG",{});var Q2t=s(Lve);tTr=r(Q2t,"roformer"),Q2t.forEach(t),aTr=r(Ske," \u2014 "),iH=n(Ske,"A",{href:!0});var W2t=s(iH);nTr=r(W2t,"TFRoFormerForQuestionAnswering"),W2t.forEach(t),sTr=r(Ske," (RoFormer model)"),Ske.forEach(t),lTr=i(ge),iM=n(ge,"LI",{});var Rke=s(iM);xve=n(Rke,"STRONG",{});var H2t=s(xve);iTr=r(H2t,"xlm"),H2t.forEach(t),dTr=r(Rke," \u2014 "),dH=n(Rke,"A",{href:!0});var U2t=s(dH);cTr=r(U2t,"TFXLMForQuestionAnsweringSimple"),U2t.forEach(t),fTr=r(Rke," (XLM model)"),Rke.forEach(t),mTr=i(ge),dM=n(ge,"LI",{});var Bke=s(dM);$ve=n(Bke,"STRONG",{});var J2t=s($ve);gTr=r(J2t,"xlm-roberta"),J2t.forEach(t),hTr=r(Bke," \u2014 "),cH=n(Bke,"A",{href:!0});var Y2t=s(cH);pTr=r(Y2t,"TFXLMRobertaForQuestionAnswering"),Y2t.forEach(t),uTr=r(Bke," (XLM-RoBERTa model)"),Bke.forEach(t),_Tr=i(ge),cM=n(ge,"LI",{});var Pke=s(cM);kve=n(Pke,"STRONG",{});var K2t=s(kve);bTr=r(K2t,"xlnet"),K2t.forEach(t),vTr=r(Pke," \u2014 "),fH=n(Pke,"A",{href:!0});var Z2t=s(fH);FTr=r(Z2t,"TFXLNetForQuestionAnsweringSimple"),Z2t.forEach(t),TTr=r(Pke," (XLNet model)"),Pke.forEach(t),ge.forEach(t),MTr=i(Al),T(fM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),aPe=i(f),cc=n(f,"H2",{class:!0});var iqe=s(cc);mM=n(iqe,"A",{id:!0,class:!0,href:!0});var evt=s(mM);Sve=n(evt,"SPAN",{});var ovt=s(Sve);T(Yy.$$.fragment,ovt),ovt.forEach(t),evt.forEach(t),ETr=i(iqe),Rve=n(iqe,"SPAN",{});var rvt=s(Rve);CTr=r(rvt,"TFAutoModelForVision2Seq"),rvt.forEach(t),iqe.forEach(t),nPe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(Ky.$$.fragment,yl),wTr=i(yl),fc=n(yl,"P",{});var cK=s(fc);ATr=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mH=n(cK,"A",{href:!0});var tvt=s(mH);yTr=r(tvt,"from_pretrained()"),tvt.forEach(t),LTr=r(cK," class method or the "),gH=n(cK,"A",{href:!0});var avt=s(gH);xTr=r(avt,"from_config()"),avt.forEach(t),$Tr=r(cK,` class
method.`),cK.forEach(t),kTr=i(yl),Zy=n(yl,"P",{});var dqe=s(Zy);STr=r(dqe,"This class cannot be instantiated directly using "),Bve=n(dqe,"CODE",{});var nvt=s(Bve);RTr=r(nvt,"__init__()"),nvt.forEach(t),BTr=r(dqe," (throws an error)."),dqe.forEach(t),PTr=i(yl),Rt=n(yl,"DIV",{class:!0});var qC=s(Rt);T(eL.$$.fragment,qC),ITr=i(qC),Pve=n(qC,"P",{});var svt=s(Pve);qTr=r(svt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),svt.forEach(t),NTr=i(qC),mc=n(qC,"P",{});var fK=s(mc);jTr=r(fK,`Note:
Loading a model from its configuration file does `),Ive=n(fK,"STRONG",{});var lvt=s(Ive);DTr=r(lvt,"not"),lvt.forEach(t),GTr=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(fK,"A",{href:!0});var ivt=s(hH);OTr=r(ivt,"from_pretrained()"),ivt.forEach(t),VTr=r(fK," to load the model weights."),fK.forEach(t),XTr=i(qC),T(gM.$$.fragment,qC),qC.forEach(t),zTr=i(yl),Rr=n(yl,"DIV",{class:!0});var Ll=s(Rr);T(oL.$$.fragment,Ll),QTr=i(Ll),qve=n(Ll,"P",{});var dvt=s(qve);WTr=r(dvt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dvt.forEach(t),HTr=i(Ll),sn=n(Ll,"P",{});var NC=s(sn);UTr=r(NC,"The model class to instantiate is selected based on the "),Nve=n(NC,"CODE",{});var cvt=s(Nve);JTr=r(cvt,"model_type"),cvt.forEach(t),YTr=r(NC,` property of the config object (either
passed as an argument or loaded from `),jve=n(NC,"CODE",{});var fvt=s(jve);KTr=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),ZTr=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(NC,"CODE",{});var mvt=s(Dve);e8r=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),o8r=r(NC,":"),NC.forEach(t),r8r=i(Ll),Gve=n(Ll,"UL",{});var gvt=s(Gve);hM=n(gvt,"LI",{});var Ike=s(hM);Ove=n(Ike,"STRONG",{});var hvt=s(Ove);t8r=r(hvt,"vision-encoder-decoder"),hvt.forEach(t),a8r=r(Ike," \u2014 "),pH=n(Ike,"A",{href:!0});var pvt=s(pH);n8r=r(pvt,"TFVisionEncoderDecoderModel"),pvt.forEach(t),s8r=r(Ike," (Vision Encoder decoder model)"),Ike.forEach(t),gvt.forEach(t),l8r=i(Ll),T(pM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),sPe=i(f),gc=n(f,"H2",{class:!0});var cqe=s(gc);uM=n(cqe,"A",{id:!0,class:!0,href:!0});var uvt=s(uM);Vve=n(uvt,"SPAN",{});var _vt=s(Vve);T(rL.$$.fragment,_vt),_vt.forEach(t),uvt.forEach(t),i8r=i(cqe),Xve=n(cqe,"SPAN",{});var bvt=s(Xve);d8r=r(bvt,"TFAutoModelForSpeechSeq2Seq"),bvt.forEach(t),cqe.forEach(t),lPe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(tL.$$.fragment,xl),c8r=i(xl),hc=n(xl,"P",{});var mK=s(hc);f8r=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uH=n(mK,"A",{href:!0});var vvt=s(uH);m8r=r(vvt,"from_pretrained()"),vvt.forEach(t),g8r=r(mK," class method or the "),_H=n(mK,"A",{href:!0});var Fvt=s(_H);h8r=r(Fvt,"from_config()"),Fvt.forEach(t),p8r=r(mK,` class
method.`),mK.forEach(t),u8r=i(xl),aL=n(xl,"P",{});var fqe=s(aL);_8r=r(fqe,"This class cannot be instantiated directly using "),zve=n(fqe,"CODE",{});var Tvt=s(zve);b8r=r(Tvt,"__init__()"),Tvt.forEach(t),v8r=r(fqe," (throws an error)."),fqe.forEach(t),F8r=i(xl),Bt=n(xl,"DIV",{class:!0});var jC=s(Bt);T(nL.$$.fragment,jC),T8r=i(jC),Qve=n(jC,"P",{});var Mvt=s(Qve);M8r=r(Mvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Mvt.forEach(t),E8r=i(jC),pc=n(jC,"P",{});var gK=s(pc);C8r=r(gK,`Note:
Loading a model from its configuration file does `),Wve=n(gK,"STRONG",{});var Evt=s(Wve);w8r=r(Evt,"not"),Evt.forEach(t),A8r=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(gK,"A",{href:!0});var Cvt=s(bH);y8r=r(Cvt,"from_pretrained()"),Cvt.forEach(t),L8r=r(gK," to load the model weights."),gK.forEach(t),x8r=i(jC),T(_M.$$.fragment,jC),jC.forEach(t),$8r=i(xl),Br=n(xl,"DIV",{class:!0});var $l=s(Br);T(sL.$$.fragment,$l),k8r=i($l),Hve=n($l,"P",{});var wvt=s(Hve);S8r=r(wvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wvt.forEach(t),R8r=i($l),ln=n($l,"P",{});var DC=s(ln);B8r=r(DC,"The model class to instantiate is selected based on the "),Uve=n(DC,"CODE",{});var Avt=s(Uve);P8r=r(Avt,"model_type"),Avt.forEach(t),I8r=r(DC,` property of the config object (either
passed as an argument or loaded from `),Jve=n(DC,"CODE",{});var yvt=s(Jve);q8r=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),N8r=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(DC,"CODE",{});var Lvt=s(Yve);j8r=r(Lvt,"pretrained_model_name_or_path"),Lvt.forEach(t),D8r=r(DC,":"),DC.forEach(t),G8r=i($l),Kve=n($l,"UL",{});var xvt=s(Kve);bM=n(xvt,"LI",{});var qke=s(bM);Zve=n(qke,"STRONG",{});var $vt=s(Zve);O8r=r($vt,"speech_to_text"),$vt.forEach(t),V8r=r(qke," \u2014 "),vH=n(qke,"A",{href:!0});var kvt=s(vH);X8r=r(kvt,"TFSpeech2TextForConditionalGeneration"),kvt.forEach(t),z8r=r(qke," (Speech2Text model)"),qke.forEach(t),xvt.forEach(t),Q8r=i($l),T(vM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),iPe=i(f),uc=n(f,"H2",{class:!0});var mqe=s(uc);FM=n(mqe,"A",{id:!0,class:!0,href:!0});var Svt=s(FM);eFe=n(Svt,"SPAN",{});var Rvt=s(eFe);T(lL.$$.fragment,Rvt),Rvt.forEach(t),Svt.forEach(t),W8r=i(mqe),oFe=n(mqe,"SPAN",{});var Bvt=s(oFe);H8r=r(Bvt,"FlaxAutoModel"),Bvt.forEach(t),mqe.forEach(t),dPe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(iL.$$.fragment,kl),U8r=i(kl),_c=n(kl,"P",{});var hK=s(_c);J8r=r(hK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FH=n(hK,"A",{href:!0});var Pvt=s(FH);Y8r=r(Pvt,"from_pretrained()"),Pvt.forEach(t),K8r=r(hK," class method or the "),TH=n(hK,"A",{href:!0});var Ivt=s(TH);Z8r=r(Ivt,"from_config()"),Ivt.forEach(t),e9r=r(hK,` class
method.`),hK.forEach(t),o9r=i(kl),dL=n(kl,"P",{});var gqe=s(dL);r9r=r(gqe,"This class cannot be instantiated directly using "),rFe=n(gqe,"CODE",{});var qvt=s(rFe);t9r=r(qvt,"__init__()"),qvt.forEach(t),a9r=r(gqe," (throws an error)."),gqe.forEach(t),n9r=i(kl),Pt=n(kl,"DIV",{class:!0});var GC=s(Pt);T(cL.$$.fragment,GC),s9r=i(GC),tFe=n(GC,"P",{});var Nvt=s(tFe);l9r=r(Nvt,"Instantiates one of the base model classes of the library from a configuration."),Nvt.forEach(t),i9r=i(GC),bc=n(GC,"P",{});var pK=s(bc);d9r=r(pK,`Note:
Loading a model from its configuration file does `),aFe=n(pK,"STRONG",{});var jvt=s(aFe);c9r=r(jvt,"not"),jvt.forEach(t),f9r=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(pK,"A",{href:!0});var Dvt=s(MH);m9r=r(Dvt,"from_pretrained()"),Dvt.forEach(t),g9r=r(pK," to load the model weights."),pK.forEach(t),h9r=i(GC),T(TM.$$.fragment,GC),GC.forEach(t),p9r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(fL.$$.fragment,Sl),u9r=i(Sl),nFe=n(Sl,"P",{});var Gvt=s(nFe);_9r=r(Gvt,"Instantiate one of the base model classes of the library from a pretrained model."),Gvt.forEach(t),b9r=i(Sl),dn=n(Sl,"P",{});var OC=s(dn);v9r=r(OC,"The model class to instantiate is selected based on the "),sFe=n(OC,"CODE",{});var Ovt=s(sFe);F9r=r(Ovt,"model_type"),Ovt.forEach(t),T9r=r(OC,` property of the config object (either
passed as an argument or loaded from `),lFe=n(OC,"CODE",{});var Vvt=s(lFe);M9r=r(Vvt,"pretrained_model_name_or_path"),Vvt.forEach(t),E9r=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(OC,"CODE",{});var Xvt=s(iFe);C9r=r(Xvt,"pretrained_model_name_or_path"),Xvt.forEach(t),w9r=r(OC,":"),OC.forEach(t),A9r=i(Sl),oe=n(Sl,"UL",{});var te=s(oe);MM=n(te,"LI",{});var Nke=s(MM);dFe=n(Nke,"STRONG",{});var zvt=s(dFe);y9r=r(zvt,"albert"),zvt.forEach(t),L9r=r(Nke," \u2014 "),EH=n(Nke,"A",{href:!0});var Qvt=s(EH);x9r=r(Qvt,"FlaxAlbertModel"),Qvt.forEach(t),$9r=r(Nke," (ALBERT model)"),Nke.forEach(t),k9r=i(te),EM=n(te,"LI",{});var jke=s(EM);cFe=n(jke,"STRONG",{});var Wvt=s(cFe);S9r=r(Wvt,"bart"),Wvt.forEach(t),R9r=r(jke," \u2014 "),CH=n(jke,"A",{href:!0});var Hvt=s(CH);B9r=r(Hvt,"FlaxBartModel"),Hvt.forEach(t),P9r=r(jke," (BART model)"),jke.forEach(t),I9r=i(te),CM=n(te,"LI",{});var Dke=s(CM);fFe=n(Dke,"STRONG",{});var Uvt=s(fFe);q9r=r(Uvt,"beit"),Uvt.forEach(t),N9r=r(Dke," \u2014 "),wH=n(Dke,"A",{href:!0});var Jvt=s(wH);j9r=r(Jvt,"FlaxBeitModel"),Jvt.forEach(t),D9r=r(Dke," (BEiT model)"),Dke.forEach(t),G9r=i(te),wM=n(te,"LI",{});var Gke=s(wM);mFe=n(Gke,"STRONG",{});var Yvt=s(mFe);O9r=r(Yvt,"bert"),Yvt.forEach(t),V9r=r(Gke," \u2014 "),AH=n(Gke,"A",{href:!0});var Kvt=s(AH);X9r=r(Kvt,"FlaxBertModel"),Kvt.forEach(t),z9r=r(Gke," (BERT model)"),Gke.forEach(t),Q9r=i(te),AM=n(te,"LI",{});var Oke=s(AM);gFe=n(Oke,"STRONG",{});var Zvt=s(gFe);W9r=r(Zvt,"big_bird"),Zvt.forEach(t),H9r=r(Oke," \u2014 "),yH=n(Oke,"A",{href:!0});var eFt=s(yH);U9r=r(eFt,"FlaxBigBirdModel"),eFt.forEach(t),J9r=r(Oke," (BigBird model)"),Oke.forEach(t),Y9r=i(te),yM=n(te,"LI",{});var Vke=s(yM);hFe=n(Vke,"STRONG",{});var oFt=s(hFe);K9r=r(oFt,"blenderbot"),oFt.forEach(t),Z9r=r(Vke," \u2014 "),LH=n(Vke,"A",{href:!0});var rFt=s(LH);eMr=r(rFt,"FlaxBlenderbotModel"),rFt.forEach(t),oMr=r(Vke," (Blenderbot model)"),Vke.forEach(t),rMr=i(te),LM=n(te,"LI",{});var Xke=s(LM);pFe=n(Xke,"STRONG",{});var tFt=s(pFe);tMr=r(tFt,"blenderbot-small"),tFt.forEach(t),aMr=r(Xke," \u2014 "),xH=n(Xke,"A",{href:!0});var aFt=s(xH);nMr=r(aFt,"FlaxBlenderbotSmallModel"),aFt.forEach(t),sMr=r(Xke," (BlenderbotSmall model)"),Xke.forEach(t),lMr=i(te),xM=n(te,"LI",{});var zke=s(xM);uFe=n(zke,"STRONG",{});var nFt=s(uFe);iMr=r(nFt,"clip"),nFt.forEach(t),dMr=r(zke," \u2014 "),$H=n(zke,"A",{href:!0});var sFt=s($H);cMr=r(sFt,"FlaxCLIPModel"),sFt.forEach(t),fMr=r(zke," (CLIP model)"),zke.forEach(t),mMr=i(te),$M=n(te,"LI",{});var Qke=s($M);_Fe=n(Qke,"STRONG",{});var lFt=s(_Fe);gMr=r(lFt,"distilbert"),lFt.forEach(t),hMr=r(Qke," \u2014 "),kH=n(Qke,"A",{href:!0});var iFt=s(kH);pMr=r(iFt,"FlaxDistilBertModel"),iFt.forEach(t),uMr=r(Qke," (DistilBERT model)"),Qke.forEach(t),_Mr=i(te),kM=n(te,"LI",{});var Wke=s(kM);bFe=n(Wke,"STRONG",{});var dFt=s(bFe);bMr=r(dFt,"electra"),dFt.forEach(t),vMr=r(Wke," \u2014 "),SH=n(Wke,"A",{href:!0});var cFt=s(SH);FMr=r(cFt,"FlaxElectraModel"),cFt.forEach(t),TMr=r(Wke," (ELECTRA model)"),Wke.forEach(t),MMr=i(te),SM=n(te,"LI",{});var Hke=s(SM);vFe=n(Hke,"STRONG",{});var fFt=s(vFe);EMr=r(fFt,"gpt2"),fFt.forEach(t),CMr=r(Hke," \u2014 "),RH=n(Hke,"A",{href:!0});var mFt=s(RH);wMr=r(mFt,"FlaxGPT2Model"),mFt.forEach(t),AMr=r(Hke," (OpenAI GPT-2 model)"),Hke.forEach(t),yMr=i(te),RM=n(te,"LI",{});var Uke=s(RM);FFe=n(Uke,"STRONG",{});var gFt=s(FFe);LMr=r(gFt,"gpt_neo"),gFt.forEach(t),xMr=r(Uke," \u2014 "),BH=n(Uke,"A",{href:!0});var hFt=s(BH);$Mr=r(hFt,"FlaxGPTNeoModel"),hFt.forEach(t),kMr=r(Uke," (GPT Neo model)"),Uke.forEach(t),SMr=i(te),BM=n(te,"LI",{});var Jke=s(BM);TFe=n(Jke,"STRONG",{});var pFt=s(TFe);RMr=r(pFt,"gptj"),pFt.forEach(t),BMr=r(Jke," \u2014 "),PH=n(Jke,"A",{href:!0});var uFt=s(PH);PMr=r(uFt,"FlaxGPTJModel"),uFt.forEach(t),IMr=r(Jke," (GPT-J model)"),Jke.forEach(t),qMr=i(te),PM=n(te,"LI",{});var Yke=s(PM);MFe=n(Yke,"STRONG",{});var _Ft=s(MFe);NMr=r(_Ft,"marian"),_Ft.forEach(t),jMr=r(Yke," \u2014 "),IH=n(Yke,"A",{href:!0});var bFt=s(IH);DMr=r(bFt,"FlaxMarianModel"),bFt.forEach(t),GMr=r(Yke," (Marian model)"),Yke.forEach(t),OMr=i(te),IM=n(te,"LI",{});var Kke=s(IM);EFe=n(Kke,"STRONG",{});var vFt=s(EFe);VMr=r(vFt,"mbart"),vFt.forEach(t),XMr=r(Kke," \u2014 "),qH=n(Kke,"A",{href:!0});var FFt=s(qH);zMr=r(FFt,"FlaxMBartModel"),FFt.forEach(t),QMr=r(Kke," (mBART model)"),Kke.forEach(t),WMr=i(te),qM=n(te,"LI",{});var Zke=s(qM);CFe=n(Zke,"STRONG",{});var TFt=s(CFe);HMr=r(TFt,"mt5"),TFt.forEach(t),UMr=r(Zke," \u2014 "),NH=n(Zke,"A",{href:!0});var MFt=s(NH);JMr=r(MFt,"FlaxMT5Model"),MFt.forEach(t),YMr=r(Zke," (mT5 model)"),Zke.forEach(t),KMr=i(te),NM=n(te,"LI",{});var eSe=s(NM);wFe=n(eSe,"STRONG",{});var EFt=s(wFe);ZMr=r(EFt,"pegasus"),EFt.forEach(t),e4r=r(eSe," \u2014 "),jH=n(eSe,"A",{href:!0});var CFt=s(jH);o4r=r(CFt,"FlaxPegasusModel"),CFt.forEach(t),r4r=r(eSe," (Pegasus model)"),eSe.forEach(t),t4r=i(te),jM=n(te,"LI",{});var oSe=s(jM);AFe=n(oSe,"STRONG",{});var wFt=s(AFe);a4r=r(wFt,"roberta"),wFt.forEach(t),n4r=r(oSe," \u2014 "),DH=n(oSe,"A",{href:!0});var AFt=s(DH);s4r=r(AFt,"FlaxRobertaModel"),AFt.forEach(t),l4r=r(oSe," (RoBERTa model)"),oSe.forEach(t),i4r=i(te),DM=n(te,"LI",{});var rSe=s(DM);yFe=n(rSe,"STRONG",{});var yFt=s(yFe);d4r=r(yFt,"roformer"),yFt.forEach(t),c4r=r(rSe," \u2014 "),GH=n(rSe,"A",{href:!0});var LFt=s(GH);f4r=r(LFt,"FlaxRoFormerModel"),LFt.forEach(t),m4r=r(rSe," (RoFormer model)"),rSe.forEach(t),g4r=i(te),GM=n(te,"LI",{});var tSe=s(GM);LFe=n(tSe,"STRONG",{});var xFt=s(LFe);h4r=r(xFt,"t5"),xFt.forEach(t),p4r=r(tSe," \u2014 "),OH=n(tSe,"A",{href:!0});var $Ft=s(OH);u4r=r($Ft,"FlaxT5Model"),$Ft.forEach(t),_4r=r(tSe," (T5 model)"),tSe.forEach(t),b4r=i(te),OM=n(te,"LI",{});var aSe=s(OM);xFe=n(aSe,"STRONG",{});var kFt=s(xFe);v4r=r(kFt,"vision-text-dual-encoder"),kFt.forEach(t),F4r=r(aSe," \u2014 "),VH=n(aSe,"A",{href:!0});var SFt=s(VH);T4r=r(SFt,"FlaxVisionTextDualEncoderModel"),SFt.forEach(t),M4r=r(aSe," (VisionTextDualEncoder model)"),aSe.forEach(t),E4r=i(te),VM=n(te,"LI",{});var nSe=s(VM);$Fe=n(nSe,"STRONG",{});var RFt=s($Fe);C4r=r(RFt,"vit"),RFt.forEach(t),w4r=r(nSe," \u2014 "),XH=n(nSe,"A",{href:!0});var BFt=s(XH);A4r=r(BFt,"FlaxViTModel"),BFt.forEach(t),y4r=r(nSe," (ViT model)"),nSe.forEach(t),L4r=i(te),XM=n(te,"LI",{});var sSe=s(XM);kFe=n(sSe,"STRONG",{});var PFt=s(kFe);x4r=r(PFt,"wav2vec2"),PFt.forEach(t),$4r=r(sSe," \u2014 "),zH=n(sSe,"A",{href:!0});var IFt=s(zH);k4r=r(IFt,"FlaxWav2Vec2Model"),IFt.forEach(t),S4r=r(sSe," (Wav2Vec2 model)"),sSe.forEach(t),R4r=i(te),zM=n(te,"LI",{});var lSe=s(zM);SFe=n(lSe,"STRONG",{});var qFt=s(SFe);B4r=r(qFt,"xglm"),qFt.forEach(t),P4r=r(lSe," \u2014 "),QH=n(lSe,"A",{href:!0});var NFt=s(QH);I4r=r(NFt,"FlaxXGLMModel"),NFt.forEach(t),q4r=r(lSe," (XGLM model)"),lSe.forEach(t),N4r=i(te),QM=n(te,"LI",{});var iSe=s(QM);RFe=n(iSe,"STRONG",{});var jFt=s(RFe);j4r=r(jFt,"xlm-roberta"),jFt.forEach(t),D4r=r(iSe," \u2014 "),WH=n(iSe,"A",{href:!0});var DFt=s(WH);G4r=r(DFt,"FlaxXLMRobertaModel"),DFt.forEach(t),O4r=r(iSe," (XLM-RoBERTa model)"),iSe.forEach(t),te.forEach(t),V4r=i(Sl),T(WM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),cPe=i(f),vc=n(f,"H2",{class:!0});var hqe=s(vc);HM=n(hqe,"A",{id:!0,class:!0,href:!0});var GFt=s(HM);BFe=n(GFt,"SPAN",{});var OFt=s(BFe);T(mL.$$.fragment,OFt),OFt.forEach(t),GFt.forEach(t),X4r=i(hqe),PFe=n(hqe,"SPAN",{});var VFt=s(PFe);z4r=r(VFt,"FlaxAutoModelForCausalLM"),VFt.forEach(t),hqe.forEach(t),fPe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(gL.$$.fragment,Rl),Q4r=i(Rl),Fc=n(Rl,"P",{});var uK=s(Fc);W4r=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HH=n(uK,"A",{href:!0});var XFt=s(HH);H4r=r(XFt,"from_pretrained()"),XFt.forEach(t),U4r=r(uK," class method or the "),UH=n(uK,"A",{href:!0});var zFt=s(UH);J4r=r(zFt,"from_config()"),zFt.forEach(t),Y4r=r(uK,` class
method.`),uK.forEach(t),K4r=i(Rl),hL=n(Rl,"P",{});var pqe=s(hL);Z4r=r(pqe,"This class cannot be instantiated directly using "),IFe=n(pqe,"CODE",{});var QFt=s(IFe);eEr=r(QFt,"__init__()"),QFt.forEach(t),oEr=r(pqe," (throws an error)."),pqe.forEach(t),rEr=i(Rl),It=n(Rl,"DIV",{class:!0});var VC=s(It);T(pL.$$.fragment,VC),tEr=i(VC),qFe=n(VC,"P",{});var WFt=s(qFe);aEr=r(WFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),WFt.forEach(t),nEr=i(VC),Tc=n(VC,"P",{});var _K=s(Tc);sEr=r(_K,`Note:
Loading a model from its configuration file does `),NFe=n(_K,"STRONG",{});var HFt=s(NFe);lEr=r(HFt,"not"),HFt.forEach(t),iEr=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(_K,"A",{href:!0});var UFt=s(JH);dEr=r(UFt,"from_pretrained()"),UFt.forEach(t),cEr=r(_K," to load the model weights."),_K.forEach(t),fEr=i(VC),T(UM.$$.fragment,VC),VC.forEach(t),mEr=i(Rl),Ir=n(Rl,"DIV",{class:!0});var Bl=s(Ir);T(uL.$$.fragment,Bl),gEr=i(Bl),jFe=n(Bl,"P",{});var JFt=s(jFe);hEr=r(JFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JFt.forEach(t),pEr=i(Bl),cn=n(Bl,"P",{});var XC=s(cn);uEr=r(XC,"The model class to instantiate is selected based on the "),DFe=n(XC,"CODE",{});var YFt=s(DFe);_Er=r(YFt,"model_type"),YFt.forEach(t),bEr=r(XC,` property of the config object (either
passed as an argument or loaded from `),GFe=n(XC,"CODE",{});var KFt=s(GFe);vEr=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),FEr=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(XC,"CODE",{});var ZFt=s(OFe);TEr=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),MEr=r(XC,":"),XC.forEach(t),EEr=i(Bl),Hr=n(Bl,"UL",{});var Pl=s(Hr);JM=n(Pl,"LI",{});var dSe=s(JM);VFe=n(dSe,"STRONG",{});var e0t=s(VFe);CEr=r(e0t,"bart"),e0t.forEach(t),wEr=r(dSe," \u2014 "),YH=n(dSe,"A",{href:!0});var o0t=s(YH);AEr=r(o0t,"FlaxBartForCausalLM"),o0t.forEach(t),yEr=r(dSe," (BART model)"),dSe.forEach(t),LEr=i(Pl),YM=n(Pl,"LI",{});var cSe=s(YM);XFe=n(cSe,"STRONG",{});var r0t=s(XFe);xEr=r(r0t,"gpt2"),r0t.forEach(t),$Er=r(cSe," \u2014 "),KH=n(cSe,"A",{href:!0});var t0t=s(KH);kEr=r(t0t,"FlaxGPT2LMHeadModel"),t0t.forEach(t),SEr=r(cSe," (OpenAI GPT-2 model)"),cSe.forEach(t),REr=i(Pl),KM=n(Pl,"LI",{});var fSe=s(KM);zFe=n(fSe,"STRONG",{});var a0t=s(zFe);BEr=r(a0t,"gpt_neo"),a0t.forEach(t),PEr=r(fSe," \u2014 "),ZH=n(fSe,"A",{href:!0});var n0t=s(ZH);IEr=r(n0t,"FlaxGPTNeoForCausalLM"),n0t.forEach(t),qEr=r(fSe," (GPT Neo model)"),fSe.forEach(t),NEr=i(Pl),ZM=n(Pl,"LI",{});var mSe=s(ZM);QFe=n(mSe,"STRONG",{});var s0t=s(QFe);jEr=r(s0t,"gptj"),s0t.forEach(t),DEr=r(mSe," \u2014 "),eU=n(mSe,"A",{href:!0});var l0t=s(eU);GEr=r(l0t,"FlaxGPTJForCausalLM"),l0t.forEach(t),OEr=r(mSe," (GPT-J model)"),mSe.forEach(t),VEr=i(Pl),e4=n(Pl,"LI",{});var gSe=s(e4);WFe=n(gSe,"STRONG",{});var i0t=s(WFe);XEr=r(i0t,"xglm"),i0t.forEach(t),zEr=r(gSe," \u2014 "),oU=n(gSe,"A",{href:!0});var d0t=s(oU);QEr=r(d0t,"FlaxXGLMForCausalLM"),d0t.forEach(t),WEr=r(gSe," (XGLM model)"),gSe.forEach(t),Pl.forEach(t),HEr=i(Bl),T(o4.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),mPe=i(f),Mc=n(f,"H2",{class:!0});var uqe=s(Mc);r4=n(uqe,"A",{id:!0,class:!0,href:!0});var c0t=s(r4);HFe=n(c0t,"SPAN",{});var f0t=s(HFe);T(_L.$$.fragment,f0t),f0t.forEach(t),c0t.forEach(t),UEr=i(uqe),UFe=n(uqe,"SPAN",{});var m0t=s(UFe);JEr=r(m0t,"FlaxAutoModelForPreTraining"),m0t.forEach(t),uqe.forEach(t),gPe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(bL.$$.fragment,Il),YEr=i(Il),Ec=n(Il,"P",{});var bK=s(Ec);KEr=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rU=n(bK,"A",{href:!0});var g0t=s(rU);ZEr=r(g0t,"from_pretrained()"),g0t.forEach(t),e5r=r(bK," class method or the "),tU=n(bK,"A",{href:!0});var h0t=s(tU);o5r=r(h0t,"from_config()"),h0t.forEach(t),r5r=r(bK,` class
method.`),bK.forEach(t),t5r=i(Il),vL=n(Il,"P",{});var _qe=s(vL);a5r=r(_qe,"This class cannot be instantiated directly using "),JFe=n(_qe,"CODE",{});var p0t=s(JFe);n5r=r(p0t,"__init__()"),p0t.forEach(t),s5r=r(_qe," (throws an error)."),_qe.forEach(t),l5r=i(Il),qt=n(Il,"DIV",{class:!0});var zC=s(qt);T(FL.$$.fragment,zC),i5r=i(zC),YFe=n(zC,"P",{});var u0t=s(YFe);d5r=r(u0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u0t.forEach(t),c5r=i(zC),Cc=n(zC,"P",{});var vK=s(Cc);f5r=r(vK,`Note:
Loading a model from its configuration file does `),KFe=n(vK,"STRONG",{});var _0t=s(KFe);m5r=r(_0t,"not"),_0t.forEach(t),g5r=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(vK,"A",{href:!0});var b0t=s(aU);h5r=r(b0t,"from_pretrained()"),b0t.forEach(t),p5r=r(vK," to load the model weights."),vK.forEach(t),u5r=i(zC),T(t4.$$.fragment,zC),zC.forEach(t),_5r=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(TL.$$.fragment,ql),b5r=i(ql),ZFe=n(ql,"P",{});var v0t=s(ZFe);v5r=r(v0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v0t.forEach(t),F5r=i(ql),fn=n(ql,"P",{});var QC=s(fn);T5r=r(QC,"The model class to instantiate is selected based on the "),e0e=n(QC,"CODE",{});var F0t=s(e0e);M5r=r(F0t,"model_type"),F0t.forEach(t),E5r=r(QC,` property of the config object (either
passed as an argument or loaded from `),o0e=n(QC,"CODE",{});var T0t=s(o0e);C5r=r(T0t,"pretrained_model_name_or_path"),T0t.forEach(t),w5r=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=n(QC,"CODE",{});var M0t=s(r0e);A5r=r(M0t,"pretrained_model_name_or_path"),M0t.forEach(t),y5r=r(QC,":"),QC.forEach(t),L5r=i(ql),Me=n(ql,"UL",{});var we=s(Me);a4=n(we,"LI",{});var hSe=s(a4);t0e=n(hSe,"STRONG",{});var E0t=s(t0e);x5r=r(E0t,"albert"),E0t.forEach(t),$5r=r(hSe," \u2014 "),nU=n(hSe,"A",{href:!0});var C0t=s(nU);k5r=r(C0t,"FlaxAlbertForPreTraining"),C0t.forEach(t),S5r=r(hSe," (ALBERT model)"),hSe.forEach(t),R5r=i(we),n4=n(we,"LI",{});var pSe=s(n4);a0e=n(pSe,"STRONG",{});var w0t=s(a0e);B5r=r(w0t,"bart"),w0t.forEach(t),P5r=r(pSe," \u2014 "),sU=n(pSe,"A",{href:!0});var A0t=s(sU);I5r=r(A0t,"FlaxBartForConditionalGeneration"),A0t.forEach(t),q5r=r(pSe," (BART model)"),pSe.forEach(t),N5r=i(we),s4=n(we,"LI",{});var uSe=s(s4);n0e=n(uSe,"STRONG",{});var y0t=s(n0e);j5r=r(y0t,"bert"),y0t.forEach(t),D5r=r(uSe," \u2014 "),lU=n(uSe,"A",{href:!0});var L0t=s(lU);G5r=r(L0t,"FlaxBertForPreTraining"),L0t.forEach(t),O5r=r(uSe," (BERT model)"),uSe.forEach(t),V5r=i(we),l4=n(we,"LI",{});var _Se=s(l4);s0e=n(_Se,"STRONG",{});var x0t=s(s0e);X5r=r(x0t,"big_bird"),x0t.forEach(t),z5r=r(_Se," \u2014 "),iU=n(_Se,"A",{href:!0});var $0t=s(iU);Q5r=r($0t,"FlaxBigBirdForPreTraining"),$0t.forEach(t),W5r=r(_Se," (BigBird model)"),_Se.forEach(t),H5r=i(we),i4=n(we,"LI",{});var bSe=s(i4);l0e=n(bSe,"STRONG",{});var k0t=s(l0e);U5r=r(k0t,"electra"),k0t.forEach(t),J5r=r(bSe," \u2014 "),dU=n(bSe,"A",{href:!0});var S0t=s(dU);Y5r=r(S0t,"FlaxElectraForPreTraining"),S0t.forEach(t),K5r=r(bSe," (ELECTRA model)"),bSe.forEach(t),Z5r=i(we),d4=n(we,"LI",{});var vSe=s(d4);i0e=n(vSe,"STRONG",{});var R0t=s(i0e);eCr=r(R0t,"mbart"),R0t.forEach(t),oCr=r(vSe," \u2014 "),cU=n(vSe,"A",{href:!0});var B0t=s(cU);rCr=r(B0t,"FlaxMBartForConditionalGeneration"),B0t.forEach(t),tCr=r(vSe," (mBART model)"),vSe.forEach(t),aCr=i(we),c4=n(we,"LI",{});var FSe=s(c4);d0e=n(FSe,"STRONG",{});var P0t=s(d0e);nCr=r(P0t,"mt5"),P0t.forEach(t),sCr=r(FSe," \u2014 "),fU=n(FSe,"A",{href:!0});var I0t=s(fU);lCr=r(I0t,"FlaxMT5ForConditionalGeneration"),I0t.forEach(t),iCr=r(FSe," (mT5 model)"),FSe.forEach(t),dCr=i(we),f4=n(we,"LI",{});var TSe=s(f4);c0e=n(TSe,"STRONG",{});var q0t=s(c0e);cCr=r(q0t,"roberta"),q0t.forEach(t),fCr=r(TSe," \u2014 "),mU=n(TSe,"A",{href:!0});var N0t=s(mU);mCr=r(N0t,"FlaxRobertaForMaskedLM"),N0t.forEach(t),gCr=r(TSe," (RoBERTa model)"),TSe.forEach(t),hCr=i(we),m4=n(we,"LI",{});var MSe=s(m4);f0e=n(MSe,"STRONG",{});var j0t=s(f0e);pCr=r(j0t,"roformer"),j0t.forEach(t),uCr=r(MSe," \u2014 "),gU=n(MSe,"A",{href:!0});var D0t=s(gU);_Cr=r(D0t,"FlaxRoFormerForMaskedLM"),D0t.forEach(t),bCr=r(MSe," (RoFormer model)"),MSe.forEach(t),vCr=i(we),g4=n(we,"LI",{});var ESe=s(g4);m0e=n(ESe,"STRONG",{});var G0t=s(m0e);FCr=r(G0t,"t5"),G0t.forEach(t),TCr=r(ESe," \u2014 "),hU=n(ESe,"A",{href:!0});var O0t=s(hU);MCr=r(O0t,"FlaxT5ForConditionalGeneration"),O0t.forEach(t),ECr=r(ESe," (T5 model)"),ESe.forEach(t),CCr=i(we),h4=n(we,"LI",{});var CSe=s(h4);g0e=n(CSe,"STRONG",{});var V0t=s(g0e);wCr=r(V0t,"wav2vec2"),V0t.forEach(t),ACr=r(CSe," \u2014 "),pU=n(CSe,"A",{href:!0});var X0t=s(pU);yCr=r(X0t,"FlaxWav2Vec2ForPreTraining"),X0t.forEach(t),LCr=r(CSe," (Wav2Vec2 model)"),CSe.forEach(t),xCr=i(we),p4=n(we,"LI",{});var wSe=s(p4);h0e=n(wSe,"STRONG",{});var z0t=s(h0e);$Cr=r(z0t,"xlm-roberta"),z0t.forEach(t),kCr=r(wSe," \u2014 "),uU=n(wSe,"A",{href:!0});var Q0t=s(uU);SCr=r(Q0t,"FlaxXLMRobertaForMaskedLM"),Q0t.forEach(t),RCr=r(wSe," (XLM-RoBERTa model)"),wSe.forEach(t),we.forEach(t),BCr=i(ql),T(u4.$$.fragment,ql),ql.forEach(t),Il.forEach(t),hPe=i(f),wc=n(f,"H2",{class:!0});var bqe=s(wc);_4=n(bqe,"A",{id:!0,class:!0,href:!0});var W0t=s(_4);p0e=n(W0t,"SPAN",{});var H0t=s(p0e);T(ML.$$.fragment,H0t),H0t.forEach(t),W0t.forEach(t),PCr=i(bqe),u0e=n(bqe,"SPAN",{});var U0t=s(u0e);ICr=r(U0t,"FlaxAutoModelForMaskedLM"),U0t.forEach(t),bqe.forEach(t),pPe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(EL.$$.fragment,Nl),qCr=i(Nl),Ac=n(Nl,"P",{});var FK=s(Ac);NCr=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_U=n(FK,"A",{href:!0});var J0t=s(_U);jCr=r(J0t,"from_pretrained()"),J0t.forEach(t),DCr=r(FK," class method or the "),bU=n(FK,"A",{href:!0});var Y0t=s(bU);GCr=r(Y0t,"from_config()"),Y0t.forEach(t),OCr=r(FK,` class
method.`),FK.forEach(t),VCr=i(Nl),CL=n(Nl,"P",{});var vqe=s(CL);XCr=r(vqe,"This class cannot be instantiated directly using "),_0e=n(vqe,"CODE",{});var K0t=s(_0e);zCr=r(K0t,"__init__()"),K0t.forEach(t),QCr=r(vqe," (throws an error)."),vqe.forEach(t),WCr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var WC=s(Nt);T(wL.$$.fragment,WC),HCr=i(WC),b0e=n(WC,"P",{});var Z0t=s(b0e);UCr=r(Z0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z0t.forEach(t),JCr=i(WC),yc=n(WC,"P",{});var TK=s(yc);YCr=r(TK,`Note:
Loading a model from its configuration file does `),v0e=n(TK,"STRONG",{});var e6t=s(v0e);KCr=r(e6t,"not"),e6t.forEach(t),ZCr=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(TK,"A",{href:!0});var o6t=s(vU);e3r=r(o6t,"from_pretrained()"),o6t.forEach(t),o3r=r(TK," to load the model weights."),TK.forEach(t),r3r=i(WC),T(b4.$$.fragment,WC),WC.forEach(t),t3r=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(AL.$$.fragment,jl),a3r=i(jl),F0e=n(jl,"P",{});var r6t=s(F0e);n3r=r(r6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),r6t.forEach(t),s3r=i(jl),mn=n(jl,"P",{});var HC=s(mn);l3r=r(HC,"The model class to instantiate is selected based on the "),T0e=n(HC,"CODE",{});var t6t=s(T0e);i3r=r(t6t,"model_type"),t6t.forEach(t),d3r=r(HC,` property of the config object (either
passed as an argument or loaded from `),M0e=n(HC,"CODE",{});var a6t=s(M0e);c3r=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),f3r=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E0e=n(HC,"CODE",{});var n6t=s(E0e);m3r=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),g3r=r(HC,":"),HC.forEach(t),h3r=i(jl),Le=n(jl,"UL",{});var Re=s(Le);v4=n(Re,"LI",{});var ASe=s(v4);C0e=n(ASe,"STRONG",{});var s6t=s(C0e);p3r=r(s6t,"albert"),s6t.forEach(t),u3r=r(ASe," \u2014 "),FU=n(ASe,"A",{href:!0});var l6t=s(FU);_3r=r(l6t,"FlaxAlbertForMaskedLM"),l6t.forEach(t),b3r=r(ASe," (ALBERT model)"),ASe.forEach(t),v3r=i(Re),F4=n(Re,"LI",{});var ySe=s(F4);w0e=n(ySe,"STRONG",{});var i6t=s(w0e);F3r=r(i6t,"bart"),i6t.forEach(t),T3r=r(ySe," \u2014 "),TU=n(ySe,"A",{href:!0});var d6t=s(TU);M3r=r(d6t,"FlaxBartForConditionalGeneration"),d6t.forEach(t),E3r=r(ySe," (BART model)"),ySe.forEach(t),C3r=i(Re),T4=n(Re,"LI",{});var LSe=s(T4);A0e=n(LSe,"STRONG",{});var c6t=s(A0e);w3r=r(c6t,"bert"),c6t.forEach(t),A3r=r(LSe," \u2014 "),MU=n(LSe,"A",{href:!0});var f6t=s(MU);y3r=r(f6t,"FlaxBertForMaskedLM"),f6t.forEach(t),L3r=r(LSe," (BERT model)"),LSe.forEach(t),x3r=i(Re),M4=n(Re,"LI",{});var xSe=s(M4);y0e=n(xSe,"STRONG",{});var m6t=s(y0e);$3r=r(m6t,"big_bird"),m6t.forEach(t),k3r=r(xSe," \u2014 "),EU=n(xSe,"A",{href:!0});var g6t=s(EU);S3r=r(g6t,"FlaxBigBirdForMaskedLM"),g6t.forEach(t),R3r=r(xSe," (BigBird model)"),xSe.forEach(t),B3r=i(Re),E4=n(Re,"LI",{});var $Se=s(E4);L0e=n($Se,"STRONG",{});var h6t=s(L0e);P3r=r(h6t,"distilbert"),h6t.forEach(t),I3r=r($Se," \u2014 "),CU=n($Se,"A",{href:!0});var p6t=s(CU);q3r=r(p6t,"FlaxDistilBertForMaskedLM"),p6t.forEach(t),N3r=r($Se," (DistilBERT model)"),$Se.forEach(t),j3r=i(Re),C4=n(Re,"LI",{});var kSe=s(C4);x0e=n(kSe,"STRONG",{});var u6t=s(x0e);D3r=r(u6t,"electra"),u6t.forEach(t),G3r=r(kSe," \u2014 "),wU=n(kSe,"A",{href:!0});var _6t=s(wU);O3r=r(_6t,"FlaxElectraForMaskedLM"),_6t.forEach(t),V3r=r(kSe," (ELECTRA model)"),kSe.forEach(t),X3r=i(Re),w4=n(Re,"LI",{});var SSe=s(w4);$0e=n(SSe,"STRONG",{});var b6t=s($0e);z3r=r(b6t,"mbart"),b6t.forEach(t),Q3r=r(SSe," \u2014 "),AU=n(SSe,"A",{href:!0});var v6t=s(AU);W3r=r(v6t,"FlaxMBartForConditionalGeneration"),v6t.forEach(t),H3r=r(SSe," (mBART model)"),SSe.forEach(t),U3r=i(Re),A4=n(Re,"LI",{});var RSe=s(A4);k0e=n(RSe,"STRONG",{});var F6t=s(k0e);J3r=r(F6t,"roberta"),F6t.forEach(t),Y3r=r(RSe," \u2014 "),yU=n(RSe,"A",{href:!0});var T6t=s(yU);K3r=r(T6t,"FlaxRobertaForMaskedLM"),T6t.forEach(t),Z3r=r(RSe," (RoBERTa model)"),RSe.forEach(t),ewr=i(Re),y4=n(Re,"LI",{});var BSe=s(y4);S0e=n(BSe,"STRONG",{});var M6t=s(S0e);owr=r(M6t,"roformer"),M6t.forEach(t),rwr=r(BSe," \u2014 "),LU=n(BSe,"A",{href:!0});var E6t=s(LU);twr=r(E6t,"FlaxRoFormerForMaskedLM"),E6t.forEach(t),awr=r(BSe," (RoFormer model)"),BSe.forEach(t),nwr=i(Re),L4=n(Re,"LI",{});var PSe=s(L4);R0e=n(PSe,"STRONG",{});var C6t=s(R0e);swr=r(C6t,"xlm-roberta"),C6t.forEach(t),lwr=r(PSe," \u2014 "),xU=n(PSe,"A",{href:!0});var w6t=s(xU);iwr=r(w6t,"FlaxXLMRobertaForMaskedLM"),w6t.forEach(t),dwr=r(PSe," (XLM-RoBERTa model)"),PSe.forEach(t),Re.forEach(t),cwr=i(jl),T(x4.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),uPe=i(f),Lc=n(f,"H2",{class:!0});var Fqe=s(Lc);$4=n(Fqe,"A",{id:!0,class:!0,href:!0});var A6t=s($4);B0e=n(A6t,"SPAN",{});var y6t=s(B0e);T(yL.$$.fragment,y6t),y6t.forEach(t),A6t.forEach(t),fwr=i(Fqe),P0e=n(Fqe,"SPAN",{});var L6t=s(P0e);mwr=r(L6t,"FlaxAutoModelForSeq2SeqLM"),L6t.forEach(t),Fqe.forEach(t),_Pe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(LL.$$.fragment,Dl),gwr=i(Dl),xc=n(Dl,"P",{});var MK=s(xc);hwr=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$U=n(MK,"A",{href:!0});var x6t=s($U);pwr=r(x6t,"from_pretrained()"),x6t.forEach(t),uwr=r(MK," class method or the "),kU=n(MK,"A",{href:!0});var $6t=s(kU);_wr=r($6t,"from_config()"),$6t.forEach(t),bwr=r(MK,` class
method.`),MK.forEach(t),vwr=i(Dl),xL=n(Dl,"P",{});var Tqe=s(xL);Fwr=r(Tqe,"This class cannot be instantiated directly using "),I0e=n(Tqe,"CODE",{});var k6t=s(I0e);Twr=r(k6t,"__init__()"),k6t.forEach(t),Mwr=r(Tqe," (throws an error)."),Tqe.forEach(t),Ewr=i(Dl),jt=n(Dl,"DIV",{class:!0});var UC=s(jt);T($L.$$.fragment,UC),Cwr=i(UC),q0e=n(UC,"P",{});var S6t=s(q0e);wwr=r(S6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),S6t.forEach(t),Awr=i(UC),$c=n(UC,"P",{});var EK=s($c);ywr=r(EK,`Note:
Loading a model from its configuration file does `),N0e=n(EK,"STRONG",{});var R6t=s(N0e);Lwr=r(R6t,"not"),R6t.forEach(t),xwr=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(EK,"A",{href:!0});var B6t=s(SU);$wr=r(B6t,"from_pretrained()"),B6t.forEach(t),kwr=r(EK," to load the model weights."),EK.forEach(t),Swr=i(UC),T(k4.$$.fragment,UC),UC.forEach(t),Rwr=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(kL.$$.fragment,Gl),Bwr=i(Gl),j0e=n(Gl,"P",{});var P6t=s(j0e);Pwr=r(P6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),P6t.forEach(t),Iwr=i(Gl),gn=n(Gl,"P",{});var JC=s(gn);qwr=r(JC,"The model class to instantiate is selected based on the "),D0e=n(JC,"CODE",{});var I6t=s(D0e);Nwr=r(I6t,"model_type"),I6t.forEach(t),jwr=r(JC,` property of the config object (either
passed as an argument or loaded from `),G0e=n(JC,"CODE",{});var q6t=s(G0e);Dwr=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),Gwr=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=n(JC,"CODE",{});var N6t=s(O0e);Owr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),Vwr=r(JC,":"),JC.forEach(t),Xwr=i(Gl),ke=n(Gl,"UL",{});var Ge=s(ke);S4=n(Ge,"LI",{});var ISe=s(S4);V0e=n(ISe,"STRONG",{});var j6t=s(V0e);zwr=r(j6t,"bart"),j6t.forEach(t),Qwr=r(ISe," \u2014 "),RU=n(ISe,"A",{href:!0});var D6t=s(RU);Wwr=r(D6t,"FlaxBartForConditionalGeneration"),D6t.forEach(t),Hwr=r(ISe," (BART model)"),ISe.forEach(t),Uwr=i(Ge),R4=n(Ge,"LI",{});var qSe=s(R4);X0e=n(qSe,"STRONG",{});var G6t=s(X0e);Jwr=r(G6t,"blenderbot"),G6t.forEach(t),Ywr=r(qSe," \u2014 "),BU=n(qSe,"A",{href:!0});var O6t=s(BU);Kwr=r(O6t,"FlaxBlenderbotForConditionalGeneration"),O6t.forEach(t),Zwr=r(qSe," (Blenderbot model)"),qSe.forEach(t),eAr=i(Ge),B4=n(Ge,"LI",{});var NSe=s(B4);z0e=n(NSe,"STRONG",{});var V6t=s(z0e);oAr=r(V6t,"blenderbot-small"),V6t.forEach(t),rAr=r(NSe," \u2014 "),PU=n(NSe,"A",{href:!0});var X6t=s(PU);tAr=r(X6t,"FlaxBlenderbotSmallForConditionalGeneration"),X6t.forEach(t),aAr=r(NSe," (BlenderbotSmall model)"),NSe.forEach(t),nAr=i(Ge),P4=n(Ge,"LI",{});var jSe=s(P4);Q0e=n(jSe,"STRONG",{});var z6t=s(Q0e);sAr=r(z6t,"encoder-decoder"),z6t.forEach(t),lAr=r(jSe," \u2014 "),IU=n(jSe,"A",{href:!0});var Q6t=s(IU);iAr=r(Q6t,"FlaxEncoderDecoderModel"),Q6t.forEach(t),dAr=r(jSe," (Encoder decoder model)"),jSe.forEach(t),cAr=i(Ge),I4=n(Ge,"LI",{});var DSe=s(I4);W0e=n(DSe,"STRONG",{});var W6t=s(W0e);fAr=r(W6t,"marian"),W6t.forEach(t),mAr=r(DSe," \u2014 "),qU=n(DSe,"A",{href:!0});var H6t=s(qU);gAr=r(H6t,"FlaxMarianMTModel"),H6t.forEach(t),hAr=r(DSe," (Marian model)"),DSe.forEach(t),pAr=i(Ge),q4=n(Ge,"LI",{});var GSe=s(q4);H0e=n(GSe,"STRONG",{});var U6t=s(H0e);uAr=r(U6t,"mbart"),U6t.forEach(t),_Ar=r(GSe," \u2014 "),NU=n(GSe,"A",{href:!0});var J6t=s(NU);bAr=r(J6t,"FlaxMBartForConditionalGeneration"),J6t.forEach(t),vAr=r(GSe," (mBART model)"),GSe.forEach(t),FAr=i(Ge),N4=n(Ge,"LI",{});var OSe=s(N4);U0e=n(OSe,"STRONG",{});var Y6t=s(U0e);TAr=r(Y6t,"mt5"),Y6t.forEach(t),MAr=r(OSe," \u2014 "),jU=n(OSe,"A",{href:!0});var K6t=s(jU);EAr=r(K6t,"FlaxMT5ForConditionalGeneration"),K6t.forEach(t),CAr=r(OSe," (mT5 model)"),OSe.forEach(t),wAr=i(Ge),j4=n(Ge,"LI",{});var VSe=s(j4);J0e=n(VSe,"STRONG",{});var Z6t=s(J0e);AAr=r(Z6t,"pegasus"),Z6t.forEach(t),yAr=r(VSe," \u2014 "),DU=n(VSe,"A",{href:!0});var eTt=s(DU);LAr=r(eTt,"FlaxPegasusForConditionalGeneration"),eTt.forEach(t),xAr=r(VSe," (Pegasus model)"),VSe.forEach(t),$Ar=i(Ge),D4=n(Ge,"LI",{});var XSe=s(D4);Y0e=n(XSe,"STRONG",{});var oTt=s(Y0e);kAr=r(oTt,"t5"),oTt.forEach(t),SAr=r(XSe," \u2014 "),GU=n(XSe,"A",{href:!0});var rTt=s(GU);RAr=r(rTt,"FlaxT5ForConditionalGeneration"),rTt.forEach(t),BAr=r(XSe," (T5 model)"),XSe.forEach(t),Ge.forEach(t),PAr=i(Gl),T(G4.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),bPe=i(f),kc=n(f,"H2",{class:!0});var Mqe=s(kc);O4=n(Mqe,"A",{id:!0,class:!0,href:!0});var tTt=s(O4);K0e=n(tTt,"SPAN",{});var aTt=s(K0e);T(SL.$$.fragment,aTt),aTt.forEach(t),tTt.forEach(t),IAr=i(Mqe),Z0e=n(Mqe,"SPAN",{});var nTt=s(Z0e);qAr=r(nTt,"FlaxAutoModelForSequenceClassification"),nTt.forEach(t),Mqe.forEach(t),vPe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(RL.$$.fragment,Ol),NAr=i(Ol),Sc=n(Ol,"P",{});var CK=s(Sc);jAr=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OU=n(CK,"A",{href:!0});var sTt=s(OU);DAr=r(sTt,"from_pretrained()"),sTt.forEach(t),GAr=r(CK," class method or the "),VU=n(CK,"A",{href:!0});var lTt=s(VU);OAr=r(lTt,"from_config()"),lTt.forEach(t),VAr=r(CK,` class
method.`),CK.forEach(t),XAr=i(Ol),BL=n(Ol,"P",{});var Eqe=s(BL);zAr=r(Eqe,"This class cannot be instantiated directly using "),e6e=n(Eqe,"CODE",{});var iTt=s(e6e);QAr=r(iTt,"__init__()"),iTt.forEach(t),WAr=r(Eqe," (throws an error)."),Eqe.forEach(t),HAr=i(Ol),Dt=n(Ol,"DIV",{class:!0});var YC=s(Dt);T(PL.$$.fragment,YC),UAr=i(YC),o6e=n(YC,"P",{});var dTt=s(o6e);JAr=r(dTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dTt.forEach(t),YAr=i(YC),Rc=n(YC,"P",{});var wK=s(Rc);KAr=r(wK,`Note:
Loading a model from its configuration file does `),r6e=n(wK,"STRONG",{});var cTt=s(r6e);ZAr=r(cTt,"not"),cTt.forEach(t),eyr=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=n(wK,"A",{href:!0});var fTt=s(XU);oyr=r(fTt,"from_pretrained()"),fTt.forEach(t),ryr=r(wK," to load the model weights."),wK.forEach(t),tyr=i(YC),T(V4.$$.fragment,YC),YC.forEach(t),ayr=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(IL.$$.fragment,Vl),nyr=i(Vl),t6e=n(Vl,"P",{});var mTt=s(t6e);syr=r(mTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mTt.forEach(t),lyr=i(Vl),hn=n(Vl,"P",{});var KC=s(hn);iyr=r(KC,"The model class to instantiate is selected based on the "),a6e=n(KC,"CODE",{});var gTt=s(a6e);dyr=r(gTt,"model_type"),gTt.forEach(t),cyr=r(KC,` property of the config object (either
passed as an argument or loaded from `),n6e=n(KC,"CODE",{});var hTt=s(n6e);fyr=r(hTt,"pretrained_model_name_or_path"),hTt.forEach(t),myr=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=n(KC,"CODE",{});var pTt=s(s6e);gyr=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),hyr=r(KC,":"),KC.forEach(t),pyr=i(Vl),xe=n(Vl,"UL",{});var Be=s(xe);X4=n(Be,"LI",{});var zSe=s(X4);l6e=n(zSe,"STRONG",{});var uTt=s(l6e);uyr=r(uTt,"albert"),uTt.forEach(t),_yr=r(zSe," \u2014 "),zU=n(zSe,"A",{href:!0});var _Tt=s(zU);byr=r(_Tt,"FlaxAlbertForSequenceClassification"),_Tt.forEach(t),vyr=r(zSe," (ALBERT model)"),zSe.forEach(t),Fyr=i(Be),z4=n(Be,"LI",{});var QSe=s(z4);i6e=n(QSe,"STRONG",{});var bTt=s(i6e);Tyr=r(bTt,"bart"),bTt.forEach(t),Myr=r(QSe," \u2014 "),QU=n(QSe,"A",{href:!0});var vTt=s(QU);Eyr=r(vTt,"FlaxBartForSequenceClassification"),vTt.forEach(t),Cyr=r(QSe," (BART model)"),QSe.forEach(t),wyr=i(Be),Q4=n(Be,"LI",{});var WSe=s(Q4);d6e=n(WSe,"STRONG",{});var FTt=s(d6e);Ayr=r(FTt,"bert"),FTt.forEach(t),yyr=r(WSe," \u2014 "),WU=n(WSe,"A",{href:!0});var TTt=s(WU);Lyr=r(TTt,"FlaxBertForSequenceClassification"),TTt.forEach(t),xyr=r(WSe," (BERT model)"),WSe.forEach(t),$yr=i(Be),W4=n(Be,"LI",{});var HSe=s(W4);c6e=n(HSe,"STRONG",{});var MTt=s(c6e);kyr=r(MTt,"big_bird"),MTt.forEach(t),Syr=r(HSe," \u2014 "),HU=n(HSe,"A",{href:!0});var ETt=s(HU);Ryr=r(ETt,"FlaxBigBirdForSequenceClassification"),ETt.forEach(t),Byr=r(HSe," (BigBird model)"),HSe.forEach(t),Pyr=i(Be),H4=n(Be,"LI",{});var USe=s(H4);f6e=n(USe,"STRONG",{});var CTt=s(f6e);Iyr=r(CTt,"distilbert"),CTt.forEach(t),qyr=r(USe," \u2014 "),UU=n(USe,"A",{href:!0});var wTt=s(UU);Nyr=r(wTt,"FlaxDistilBertForSequenceClassification"),wTt.forEach(t),jyr=r(USe," (DistilBERT model)"),USe.forEach(t),Dyr=i(Be),U4=n(Be,"LI",{});var JSe=s(U4);m6e=n(JSe,"STRONG",{});var ATt=s(m6e);Gyr=r(ATt,"electra"),ATt.forEach(t),Oyr=r(JSe," \u2014 "),JU=n(JSe,"A",{href:!0});var yTt=s(JU);Vyr=r(yTt,"FlaxElectraForSequenceClassification"),yTt.forEach(t),Xyr=r(JSe," (ELECTRA model)"),JSe.forEach(t),zyr=i(Be),J4=n(Be,"LI",{});var YSe=s(J4);g6e=n(YSe,"STRONG",{});var LTt=s(g6e);Qyr=r(LTt,"mbart"),LTt.forEach(t),Wyr=r(YSe," \u2014 "),YU=n(YSe,"A",{href:!0});var xTt=s(YU);Hyr=r(xTt,"FlaxMBartForSequenceClassification"),xTt.forEach(t),Uyr=r(YSe," (mBART model)"),YSe.forEach(t),Jyr=i(Be),Y4=n(Be,"LI",{});var KSe=s(Y4);h6e=n(KSe,"STRONG",{});var $Tt=s(h6e);Yyr=r($Tt,"roberta"),$Tt.forEach(t),Kyr=r(KSe," \u2014 "),KU=n(KSe,"A",{href:!0});var kTt=s(KU);Zyr=r(kTt,"FlaxRobertaForSequenceClassification"),kTt.forEach(t),eLr=r(KSe," (RoBERTa model)"),KSe.forEach(t),oLr=i(Be),K4=n(Be,"LI",{});var ZSe=s(K4);p6e=n(ZSe,"STRONG",{});var STt=s(p6e);rLr=r(STt,"roformer"),STt.forEach(t),tLr=r(ZSe," \u2014 "),ZU=n(ZSe,"A",{href:!0});var RTt=s(ZU);aLr=r(RTt,"FlaxRoFormerForSequenceClassification"),RTt.forEach(t),nLr=r(ZSe," (RoFormer model)"),ZSe.forEach(t),sLr=i(Be),Z4=n(Be,"LI",{});var eRe=s(Z4);u6e=n(eRe,"STRONG",{});var BTt=s(u6e);lLr=r(BTt,"xlm-roberta"),BTt.forEach(t),iLr=r(eRe," \u2014 "),eJ=n(eRe,"A",{href:!0});var PTt=s(eJ);dLr=r(PTt,"FlaxXLMRobertaForSequenceClassification"),PTt.forEach(t),cLr=r(eRe," (XLM-RoBERTa model)"),eRe.forEach(t),Be.forEach(t),fLr=i(Vl),T(eE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),FPe=i(f),Bc=n(f,"H2",{class:!0});var Cqe=s(Bc);oE=n(Cqe,"A",{id:!0,class:!0,href:!0});var ITt=s(oE);_6e=n(ITt,"SPAN",{});var qTt=s(_6e);T(qL.$$.fragment,qTt),qTt.forEach(t),ITt.forEach(t),mLr=i(Cqe),b6e=n(Cqe,"SPAN",{});var NTt=s(b6e);gLr=r(NTt,"FlaxAutoModelForQuestionAnswering"),NTt.forEach(t),Cqe.forEach(t),TPe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(NL.$$.fragment,Xl),hLr=i(Xl),Pc=n(Xl,"P",{});var AK=s(Pc);pLr=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oJ=n(AK,"A",{href:!0});var jTt=s(oJ);uLr=r(jTt,"from_pretrained()"),jTt.forEach(t),_Lr=r(AK," class method or the "),rJ=n(AK,"A",{href:!0});var DTt=s(rJ);bLr=r(DTt,"from_config()"),DTt.forEach(t),vLr=r(AK,` class
method.`),AK.forEach(t),FLr=i(Xl),jL=n(Xl,"P",{});var wqe=s(jL);TLr=r(wqe,"This class cannot be instantiated directly using "),v6e=n(wqe,"CODE",{});var GTt=s(v6e);MLr=r(GTt,"__init__()"),GTt.forEach(t),ELr=r(wqe," (throws an error)."),wqe.forEach(t),CLr=i(Xl),Gt=n(Xl,"DIV",{class:!0});var ZC=s(Gt);T(DL.$$.fragment,ZC),wLr=i(ZC),F6e=n(ZC,"P",{});var OTt=s(F6e);ALr=r(OTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),OTt.forEach(t),yLr=i(ZC),Ic=n(ZC,"P",{});var yK=s(Ic);LLr=r(yK,`Note:
Loading a model from its configuration file does `),T6e=n(yK,"STRONG",{});var VTt=s(T6e);xLr=r(VTt,"not"),VTt.forEach(t),$Lr=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(yK,"A",{href:!0});var XTt=s(tJ);kLr=r(XTt,"from_pretrained()"),XTt.forEach(t),SLr=r(yK," to load the model weights."),yK.forEach(t),RLr=i(ZC),T(rE.$$.fragment,ZC),ZC.forEach(t),BLr=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(GL.$$.fragment,zl),PLr=i(zl),M6e=n(zl,"P",{});var zTt=s(M6e);ILr=r(zTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zTt.forEach(t),qLr=i(zl),pn=n(zl,"P",{});var e3=s(pn);NLr=r(e3,"The model class to instantiate is selected based on the "),E6e=n(e3,"CODE",{});var QTt=s(E6e);jLr=r(QTt,"model_type"),QTt.forEach(t),DLr=r(e3,` property of the config object (either
passed as an argument or loaded from `),C6e=n(e3,"CODE",{});var WTt=s(C6e);GLr=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),OLr=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w6e=n(e3,"CODE",{});var HTt=s(w6e);VLr=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),XLr=r(e3,":"),e3.forEach(t),zLr=i(zl),$e=n(zl,"UL",{});var Pe=s($e);tE=n(Pe,"LI",{});var oRe=s(tE);A6e=n(oRe,"STRONG",{});var UTt=s(A6e);QLr=r(UTt,"albert"),UTt.forEach(t),WLr=r(oRe," \u2014 "),aJ=n(oRe,"A",{href:!0});var JTt=s(aJ);HLr=r(JTt,"FlaxAlbertForQuestionAnswering"),JTt.forEach(t),ULr=r(oRe," (ALBERT model)"),oRe.forEach(t),JLr=i(Pe),aE=n(Pe,"LI",{});var rRe=s(aE);y6e=n(rRe,"STRONG",{});var YTt=s(y6e);YLr=r(YTt,"bart"),YTt.forEach(t),KLr=r(rRe," \u2014 "),nJ=n(rRe,"A",{href:!0});var KTt=s(nJ);ZLr=r(KTt,"FlaxBartForQuestionAnswering"),KTt.forEach(t),e7r=r(rRe," (BART model)"),rRe.forEach(t),o7r=i(Pe),nE=n(Pe,"LI",{});var tRe=s(nE);L6e=n(tRe,"STRONG",{});var ZTt=s(L6e);r7r=r(ZTt,"bert"),ZTt.forEach(t),t7r=r(tRe," \u2014 "),sJ=n(tRe,"A",{href:!0});var e8t=s(sJ);a7r=r(e8t,"FlaxBertForQuestionAnswering"),e8t.forEach(t),n7r=r(tRe," (BERT model)"),tRe.forEach(t),s7r=i(Pe),sE=n(Pe,"LI",{});var aRe=s(sE);x6e=n(aRe,"STRONG",{});var o8t=s(x6e);l7r=r(o8t,"big_bird"),o8t.forEach(t),i7r=r(aRe," \u2014 "),lJ=n(aRe,"A",{href:!0});var r8t=s(lJ);d7r=r(r8t,"FlaxBigBirdForQuestionAnswering"),r8t.forEach(t),c7r=r(aRe," (BigBird model)"),aRe.forEach(t),f7r=i(Pe),lE=n(Pe,"LI",{});var nRe=s(lE);$6e=n(nRe,"STRONG",{});var t8t=s($6e);m7r=r(t8t,"distilbert"),t8t.forEach(t),g7r=r(nRe," \u2014 "),iJ=n(nRe,"A",{href:!0});var a8t=s(iJ);h7r=r(a8t,"FlaxDistilBertForQuestionAnswering"),a8t.forEach(t),p7r=r(nRe," (DistilBERT model)"),nRe.forEach(t),u7r=i(Pe),iE=n(Pe,"LI",{});var sRe=s(iE);k6e=n(sRe,"STRONG",{});var n8t=s(k6e);_7r=r(n8t,"electra"),n8t.forEach(t),b7r=r(sRe," \u2014 "),dJ=n(sRe,"A",{href:!0});var s8t=s(dJ);v7r=r(s8t,"FlaxElectraForQuestionAnswering"),s8t.forEach(t),F7r=r(sRe," (ELECTRA model)"),sRe.forEach(t),T7r=i(Pe),dE=n(Pe,"LI",{});var lRe=s(dE);S6e=n(lRe,"STRONG",{});var l8t=s(S6e);M7r=r(l8t,"mbart"),l8t.forEach(t),E7r=r(lRe," \u2014 "),cJ=n(lRe,"A",{href:!0});var i8t=s(cJ);C7r=r(i8t,"FlaxMBartForQuestionAnswering"),i8t.forEach(t),w7r=r(lRe," (mBART model)"),lRe.forEach(t),A7r=i(Pe),cE=n(Pe,"LI",{});var iRe=s(cE);R6e=n(iRe,"STRONG",{});var d8t=s(R6e);y7r=r(d8t,"roberta"),d8t.forEach(t),L7r=r(iRe," \u2014 "),fJ=n(iRe,"A",{href:!0});var c8t=s(fJ);x7r=r(c8t,"FlaxRobertaForQuestionAnswering"),c8t.forEach(t),$7r=r(iRe," (RoBERTa model)"),iRe.forEach(t),k7r=i(Pe),fE=n(Pe,"LI",{});var dRe=s(fE);B6e=n(dRe,"STRONG",{});var f8t=s(B6e);S7r=r(f8t,"roformer"),f8t.forEach(t),R7r=r(dRe," \u2014 "),mJ=n(dRe,"A",{href:!0});var m8t=s(mJ);B7r=r(m8t,"FlaxRoFormerForQuestionAnswering"),m8t.forEach(t),P7r=r(dRe," (RoFormer model)"),dRe.forEach(t),I7r=i(Pe),mE=n(Pe,"LI",{});var cRe=s(mE);P6e=n(cRe,"STRONG",{});var g8t=s(P6e);q7r=r(g8t,"xlm-roberta"),g8t.forEach(t),N7r=r(cRe," \u2014 "),gJ=n(cRe,"A",{href:!0});var h8t=s(gJ);j7r=r(h8t,"FlaxXLMRobertaForQuestionAnswering"),h8t.forEach(t),D7r=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),Pe.forEach(t),G7r=i(zl),T(gE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),MPe=i(f),qc=n(f,"H2",{class:!0});var Aqe=s(qc);hE=n(Aqe,"A",{id:!0,class:!0,href:!0});var p8t=s(hE);I6e=n(p8t,"SPAN",{});var u8t=s(I6e);T(OL.$$.fragment,u8t),u8t.forEach(t),p8t.forEach(t),O7r=i(Aqe),q6e=n(Aqe,"SPAN",{});var _8t=s(q6e);V7r=r(_8t,"FlaxAutoModelForTokenClassification"),_8t.forEach(t),Aqe.forEach(t),EPe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(VL.$$.fragment,Ql),X7r=i(Ql),Nc=n(Ql,"P",{});var LK=s(Nc);z7r=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hJ=n(LK,"A",{href:!0});var b8t=s(hJ);Q7r=r(b8t,"from_pretrained()"),b8t.forEach(t),W7r=r(LK," class method or the "),pJ=n(LK,"A",{href:!0});var v8t=s(pJ);H7r=r(v8t,"from_config()"),v8t.forEach(t),U7r=r(LK,` class
method.`),LK.forEach(t),J7r=i(Ql),XL=n(Ql,"P",{});var yqe=s(XL);Y7r=r(yqe,"This class cannot be instantiated directly using "),N6e=n(yqe,"CODE",{});var F8t=s(N6e);K7r=r(F8t,"__init__()"),F8t.forEach(t),Z7r=r(yqe," (throws an error)."),yqe.forEach(t),exr=i(Ql),Ot=n(Ql,"DIV",{class:!0});var o3=s(Ot);T(zL.$$.fragment,o3),oxr=i(o3),j6e=n(o3,"P",{});var T8t=s(j6e);rxr=r(T8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),T8t.forEach(t),txr=i(o3),jc=n(o3,"P",{});var xK=s(jc);axr=r(xK,`Note:
Loading a model from its configuration file does `),D6e=n(xK,"STRONG",{});var M8t=s(D6e);nxr=r(M8t,"not"),M8t.forEach(t),sxr=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(xK,"A",{href:!0});var E8t=s(uJ);lxr=r(E8t,"from_pretrained()"),E8t.forEach(t),ixr=r(xK," to load the model weights."),xK.forEach(t),dxr=i(o3),T(pE.$$.fragment,o3),o3.forEach(t),cxr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Wl=s(Or);T(QL.$$.fragment,Wl),fxr=i(Wl),G6e=n(Wl,"P",{});var C8t=s(G6e);mxr=r(C8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C8t.forEach(t),gxr=i(Wl),un=n(Wl,"P",{});var r3=s(un);hxr=r(r3,"The model class to instantiate is selected based on the "),O6e=n(r3,"CODE",{});var w8t=s(O6e);pxr=r(w8t,"model_type"),w8t.forEach(t),uxr=r(r3,` property of the config object (either
passed as an argument or loaded from `),V6e=n(r3,"CODE",{});var A8t=s(V6e);_xr=r(A8t,"pretrained_model_name_or_path"),A8t.forEach(t),bxr=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(r3,"CODE",{});var y8t=s(X6e);vxr=r(y8t,"pretrained_model_name_or_path"),y8t.forEach(t),Fxr=r(r3,":"),r3.forEach(t),Txr=i(Wl),je=n(Wl,"UL",{});var bo=s(je);uE=n(bo,"LI",{});var fRe=s(uE);z6e=n(fRe,"STRONG",{});var L8t=s(z6e);Mxr=r(L8t,"albert"),L8t.forEach(t),Exr=r(fRe," \u2014 "),_J=n(fRe,"A",{href:!0});var x8t=s(_J);Cxr=r(x8t,"FlaxAlbertForTokenClassification"),x8t.forEach(t),wxr=r(fRe," (ALBERT model)"),fRe.forEach(t),Axr=i(bo),_E=n(bo,"LI",{});var mRe=s(_E);Q6e=n(mRe,"STRONG",{});var $8t=s(Q6e);yxr=r($8t,"bert"),$8t.forEach(t),Lxr=r(mRe," \u2014 "),bJ=n(mRe,"A",{href:!0});var k8t=s(bJ);xxr=r(k8t,"FlaxBertForTokenClassification"),k8t.forEach(t),$xr=r(mRe," (BERT model)"),mRe.forEach(t),kxr=i(bo),bE=n(bo,"LI",{});var gRe=s(bE);W6e=n(gRe,"STRONG",{});var S8t=s(W6e);Sxr=r(S8t,"big_bird"),S8t.forEach(t),Rxr=r(gRe," \u2014 "),vJ=n(gRe,"A",{href:!0});var R8t=s(vJ);Bxr=r(R8t,"FlaxBigBirdForTokenClassification"),R8t.forEach(t),Pxr=r(gRe," (BigBird model)"),gRe.forEach(t),Ixr=i(bo),vE=n(bo,"LI",{});var hRe=s(vE);H6e=n(hRe,"STRONG",{});var B8t=s(H6e);qxr=r(B8t,"distilbert"),B8t.forEach(t),Nxr=r(hRe," \u2014 "),FJ=n(hRe,"A",{href:!0});var P8t=s(FJ);jxr=r(P8t,"FlaxDistilBertForTokenClassification"),P8t.forEach(t),Dxr=r(hRe," (DistilBERT model)"),hRe.forEach(t),Gxr=i(bo),FE=n(bo,"LI",{});var pRe=s(FE);U6e=n(pRe,"STRONG",{});var I8t=s(U6e);Oxr=r(I8t,"electra"),I8t.forEach(t),Vxr=r(pRe," \u2014 "),TJ=n(pRe,"A",{href:!0});var q8t=s(TJ);Xxr=r(q8t,"FlaxElectraForTokenClassification"),q8t.forEach(t),zxr=r(pRe," (ELECTRA model)"),pRe.forEach(t),Qxr=i(bo),TE=n(bo,"LI",{});var uRe=s(TE);J6e=n(uRe,"STRONG",{});var N8t=s(J6e);Wxr=r(N8t,"roberta"),N8t.forEach(t),Hxr=r(uRe," \u2014 "),MJ=n(uRe,"A",{href:!0});var j8t=s(MJ);Uxr=r(j8t,"FlaxRobertaForTokenClassification"),j8t.forEach(t),Jxr=r(uRe," (RoBERTa model)"),uRe.forEach(t),Yxr=i(bo),ME=n(bo,"LI",{});var _Re=s(ME);Y6e=n(_Re,"STRONG",{});var D8t=s(Y6e);Kxr=r(D8t,"roformer"),D8t.forEach(t),Zxr=r(_Re," \u2014 "),EJ=n(_Re,"A",{href:!0});var G8t=s(EJ);e$r=r(G8t,"FlaxRoFormerForTokenClassification"),G8t.forEach(t),o$r=r(_Re," (RoFormer model)"),_Re.forEach(t),r$r=i(bo),EE=n(bo,"LI",{});var bRe=s(EE);K6e=n(bRe,"STRONG",{});var O8t=s(K6e);t$r=r(O8t,"xlm-roberta"),O8t.forEach(t),a$r=r(bRe," \u2014 "),CJ=n(bRe,"A",{href:!0});var V8t=s(CJ);n$r=r(V8t,"FlaxXLMRobertaForTokenClassification"),V8t.forEach(t),s$r=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),bo.forEach(t),l$r=i(Wl),T(CE.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),CPe=i(f),Dc=n(f,"H2",{class:!0});var Lqe=s(Dc);wE=n(Lqe,"A",{id:!0,class:!0,href:!0});var X8t=s(wE);Z6e=n(X8t,"SPAN",{});var z8t=s(Z6e);T(WL.$$.fragment,z8t),z8t.forEach(t),X8t.forEach(t),i$r=i(Lqe),eTe=n(Lqe,"SPAN",{});var Q8t=s(eTe);d$r=r(Q8t,"FlaxAutoModelForMultipleChoice"),Q8t.forEach(t),Lqe.forEach(t),wPe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(HL.$$.fragment,Hl),c$r=i(Hl),Gc=n(Hl,"P",{});var $K=s(Gc);f$r=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wJ=n($K,"A",{href:!0});var W8t=s(wJ);m$r=r(W8t,"from_pretrained()"),W8t.forEach(t),g$r=r($K," class method or the "),AJ=n($K,"A",{href:!0});var H8t=s(AJ);h$r=r(H8t,"from_config()"),H8t.forEach(t),p$r=r($K,` class
method.`),$K.forEach(t),u$r=i(Hl),UL=n(Hl,"P",{});var xqe=s(UL);_$r=r(xqe,"This class cannot be instantiated directly using "),oTe=n(xqe,"CODE",{});var U8t=s(oTe);b$r=r(U8t,"__init__()"),U8t.forEach(t),v$r=r(xqe," (throws an error)."),xqe.forEach(t),F$r=i(Hl),Vt=n(Hl,"DIV",{class:!0});var t3=s(Vt);T(JL.$$.fragment,t3),T$r=i(t3),rTe=n(t3,"P",{});var J8t=s(rTe);M$r=r(J8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),J8t.forEach(t),E$r=i(t3),Oc=n(t3,"P",{});var kK=s(Oc);C$r=r(kK,`Note:
Loading a model from its configuration file does `),tTe=n(kK,"STRONG",{});var Y8t=s(tTe);w$r=r(Y8t,"not"),Y8t.forEach(t),A$r=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(kK,"A",{href:!0});var K8t=s(yJ);y$r=r(K8t,"from_pretrained()"),K8t.forEach(t),L$r=r(kK," to load the model weights."),kK.forEach(t),x$r=i(t3),T(AE.$$.fragment,t3),t3.forEach(t),$$r=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(YL.$$.fragment,Ul),k$r=i(Ul),aTe=n(Ul,"P",{});var Z8t=s(aTe);S$r=r(Z8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z8t.forEach(t),R$r=i(Ul),_n=n(Ul,"P",{});var a3=s(_n);B$r=r(a3,"The model class to instantiate is selected based on the "),nTe=n(a3,"CODE",{});var e9t=s(nTe);P$r=r(e9t,"model_type"),e9t.forEach(t),I$r=r(a3,` property of the config object (either
passed as an argument or loaded from `),sTe=n(a3,"CODE",{});var o9t=s(sTe);q$r=r(o9t,"pretrained_model_name_or_path"),o9t.forEach(t),N$r=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=n(a3,"CODE",{});var r9t=s(lTe);j$r=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),D$r=r(a3,":"),a3.forEach(t),G$r=i(Ul),De=n(Ul,"UL",{});var vo=s(De);yE=n(vo,"LI",{});var vRe=s(yE);iTe=n(vRe,"STRONG",{});var t9t=s(iTe);O$r=r(t9t,"albert"),t9t.forEach(t),V$r=r(vRe," \u2014 "),LJ=n(vRe,"A",{href:!0});var a9t=s(LJ);X$r=r(a9t,"FlaxAlbertForMultipleChoice"),a9t.forEach(t),z$r=r(vRe," (ALBERT model)"),vRe.forEach(t),Q$r=i(vo),LE=n(vo,"LI",{});var FRe=s(LE);dTe=n(FRe,"STRONG",{});var n9t=s(dTe);W$r=r(n9t,"bert"),n9t.forEach(t),H$r=r(FRe," \u2014 "),xJ=n(FRe,"A",{href:!0});var s9t=s(xJ);U$r=r(s9t,"FlaxBertForMultipleChoice"),s9t.forEach(t),J$r=r(FRe," (BERT model)"),FRe.forEach(t),Y$r=i(vo),xE=n(vo,"LI",{});var TRe=s(xE);cTe=n(TRe,"STRONG",{});var l9t=s(cTe);K$r=r(l9t,"big_bird"),l9t.forEach(t),Z$r=r(TRe," \u2014 "),$J=n(TRe,"A",{href:!0});var i9t=s($J);ekr=r(i9t,"FlaxBigBirdForMultipleChoice"),i9t.forEach(t),okr=r(TRe," (BigBird model)"),TRe.forEach(t),rkr=i(vo),$E=n(vo,"LI",{});var MRe=s($E);fTe=n(MRe,"STRONG",{});var d9t=s(fTe);tkr=r(d9t,"distilbert"),d9t.forEach(t),akr=r(MRe," \u2014 "),kJ=n(MRe,"A",{href:!0});var c9t=s(kJ);nkr=r(c9t,"FlaxDistilBertForMultipleChoice"),c9t.forEach(t),skr=r(MRe," (DistilBERT model)"),MRe.forEach(t),lkr=i(vo),kE=n(vo,"LI",{});var ERe=s(kE);mTe=n(ERe,"STRONG",{});var f9t=s(mTe);ikr=r(f9t,"electra"),f9t.forEach(t),dkr=r(ERe," \u2014 "),SJ=n(ERe,"A",{href:!0});var m9t=s(SJ);ckr=r(m9t,"FlaxElectraForMultipleChoice"),m9t.forEach(t),fkr=r(ERe," (ELECTRA model)"),ERe.forEach(t),mkr=i(vo),SE=n(vo,"LI",{});var CRe=s(SE);gTe=n(CRe,"STRONG",{});var g9t=s(gTe);gkr=r(g9t,"roberta"),g9t.forEach(t),hkr=r(CRe," \u2014 "),RJ=n(CRe,"A",{href:!0});var h9t=s(RJ);pkr=r(h9t,"FlaxRobertaForMultipleChoice"),h9t.forEach(t),ukr=r(CRe," (RoBERTa model)"),CRe.forEach(t),_kr=i(vo),RE=n(vo,"LI",{});var wRe=s(RE);hTe=n(wRe,"STRONG",{});var p9t=s(hTe);bkr=r(p9t,"roformer"),p9t.forEach(t),vkr=r(wRe," \u2014 "),BJ=n(wRe,"A",{href:!0});var u9t=s(BJ);Fkr=r(u9t,"FlaxRoFormerForMultipleChoice"),u9t.forEach(t),Tkr=r(wRe," (RoFormer model)"),wRe.forEach(t),Mkr=i(vo),BE=n(vo,"LI",{});var ARe=s(BE);pTe=n(ARe,"STRONG",{});var _9t=s(pTe);Ekr=r(_9t,"xlm-roberta"),_9t.forEach(t),Ckr=r(ARe," \u2014 "),PJ=n(ARe,"A",{href:!0});var b9t=s(PJ);wkr=r(b9t,"FlaxXLMRobertaForMultipleChoice"),b9t.forEach(t),Akr=r(ARe," (XLM-RoBERTa model)"),ARe.forEach(t),vo.forEach(t),ykr=i(Ul),T(PE.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),APe=i(f),Vc=n(f,"H2",{class:!0});var $qe=s(Vc);IE=n($qe,"A",{id:!0,class:!0,href:!0});var v9t=s(IE);uTe=n(v9t,"SPAN",{});var F9t=s(uTe);T(KL.$$.fragment,F9t),F9t.forEach(t),v9t.forEach(t),Lkr=i($qe),_Te=n($qe,"SPAN",{});var T9t=s(_Te);xkr=r(T9t,"FlaxAutoModelForNextSentencePrediction"),T9t.forEach(t),$qe.forEach(t),yPe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(ZL.$$.fragment,Jl),$kr=i(Jl),Xc=n(Jl,"P",{});var SK=s(Xc);kkr=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IJ=n(SK,"A",{href:!0});var M9t=s(IJ);Skr=r(M9t,"from_pretrained()"),M9t.forEach(t),Rkr=r(SK," class method or the "),qJ=n(SK,"A",{href:!0});var E9t=s(qJ);Bkr=r(E9t,"from_config()"),E9t.forEach(t),Pkr=r(SK,` class
method.`),SK.forEach(t),Ikr=i(Jl),e7=n(Jl,"P",{});var kqe=s(e7);qkr=r(kqe,"This class cannot be instantiated directly using "),bTe=n(kqe,"CODE",{});var C9t=s(bTe);Nkr=r(C9t,"__init__()"),C9t.forEach(t),jkr=r(kqe," (throws an error)."),kqe.forEach(t),Dkr=i(Jl),Xt=n(Jl,"DIV",{class:!0});var n3=s(Xt);T(o7.$$.fragment,n3),Gkr=i(n3),vTe=n(n3,"P",{});var w9t=s(vTe);Okr=r(w9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),w9t.forEach(t),Vkr=i(n3),zc=n(n3,"P",{});var RK=s(zc);Xkr=r(RK,`Note:
Loading a model from its configuration file does `),FTe=n(RK,"STRONG",{});var A9t=s(FTe);zkr=r(A9t,"not"),A9t.forEach(t),Qkr=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(RK,"A",{href:!0});var y9t=s(NJ);Wkr=r(y9t,"from_pretrained()"),y9t.forEach(t),Hkr=r(RK," to load the model weights."),RK.forEach(t),Ukr=i(n3),T(qE.$$.fragment,n3),n3.forEach(t),Jkr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(r7.$$.fragment,Yl),Ykr=i(Yl),TTe=n(Yl,"P",{});var L9t=s(TTe);Kkr=r(L9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),L9t.forEach(t),Zkr=i(Yl),bn=n(Yl,"P",{});var s3=s(bn);eSr=r(s3,"The model class to instantiate is selected based on the "),MTe=n(s3,"CODE",{});var x9t=s(MTe);oSr=r(x9t,"model_type"),x9t.forEach(t),rSr=r(s3,` property of the config object (either
passed as an argument or loaded from `),ETe=n(s3,"CODE",{});var $9t=s(ETe);tSr=r($9t,"pretrained_model_name_or_path"),$9t.forEach(t),aSr=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(s3,"CODE",{});var k9t=s(CTe);nSr=r(k9t,"pretrained_model_name_or_path"),k9t.forEach(t),sSr=r(s3,":"),s3.forEach(t),lSr=i(Yl),wTe=n(Yl,"UL",{});var S9t=s(wTe);NE=n(S9t,"LI",{});var yRe=s(NE);ATe=n(yRe,"STRONG",{});var R9t=s(ATe);iSr=r(R9t,"bert"),R9t.forEach(t),dSr=r(yRe," \u2014 "),jJ=n(yRe,"A",{href:!0});var B9t=s(jJ);cSr=r(B9t,"FlaxBertForNextSentencePrediction"),B9t.forEach(t),fSr=r(yRe," (BERT model)"),yRe.forEach(t),S9t.forEach(t),mSr=i(Yl),T(jE.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),LPe=i(f),Qc=n(f,"H2",{class:!0});var Sqe=s(Qc);DE=n(Sqe,"A",{id:!0,class:!0,href:!0});var P9t=s(DE);yTe=n(P9t,"SPAN",{});var I9t=s(yTe);T(t7.$$.fragment,I9t),I9t.forEach(t),P9t.forEach(t),gSr=i(Sqe),LTe=n(Sqe,"SPAN",{});var q9t=s(LTe);hSr=r(q9t,"FlaxAutoModelForImageClassification"),q9t.forEach(t),Sqe.forEach(t),xPe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T(a7.$$.fragment,Kl),pSr=i(Kl),Wc=n(Kl,"P",{});var BK=s(Wc);uSr=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DJ=n(BK,"A",{href:!0});var N9t=s(DJ);_Sr=r(N9t,"from_pretrained()"),N9t.forEach(t),bSr=r(BK," class method or the "),GJ=n(BK,"A",{href:!0});var j9t=s(GJ);vSr=r(j9t,"from_config()"),j9t.forEach(t),FSr=r(BK,` class
method.`),BK.forEach(t),TSr=i(Kl),n7=n(Kl,"P",{});var Rqe=s(n7);MSr=r(Rqe,"This class cannot be instantiated directly using "),xTe=n(Rqe,"CODE",{});var D9t=s(xTe);ESr=r(D9t,"__init__()"),D9t.forEach(t),CSr=r(Rqe," (throws an error)."),Rqe.forEach(t),wSr=i(Kl),zt=n(Kl,"DIV",{class:!0});var l3=s(zt);T(s7.$$.fragment,l3),ASr=i(l3),$Te=n(l3,"P",{});var G9t=s($Te);ySr=r(G9t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),G9t.forEach(t),LSr=i(l3),Hc=n(l3,"P",{});var PK=s(Hc);xSr=r(PK,`Note:
Loading a model from its configuration file does `),kTe=n(PK,"STRONG",{});var O9t=s(kTe);$Sr=r(O9t,"not"),O9t.forEach(t),kSr=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(PK,"A",{href:!0});var V9t=s(OJ);SSr=r(V9t,"from_pretrained()"),V9t.forEach(t),RSr=r(PK," to load the model weights."),PK.forEach(t),BSr=i(l3),T(GE.$$.fragment,l3),l3.forEach(t),PSr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(l7.$$.fragment,Zl),ISr=i(Zl),STe=n(Zl,"P",{});var X9t=s(STe);qSr=r(X9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),X9t.forEach(t),NSr=i(Zl),vn=n(Zl,"P",{});var i3=s(vn);jSr=r(i3,"The model class to instantiate is selected based on the "),RTe=n(i3,"CODE",{});var z9t=s(RTe);DSr=r(z9t,"model_type"),z9t.forEach(t),GSr=r(i3,` property of the config object (either
passed as an argument or loaded from `),BTe=n(i3,"CODE",{});var Q9t=s(BTe);OSr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),VSr=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(i3,"CODE",{});var W9t=s(PTe);XSr=r(W9t,"pretrained_model_name_or_path"),W9t.forEach(t),zSr=r(i3,":"),i3.forEach(t),QSr=i(Zl),i7=n(Zl,"UL",{});var Bqe=s(i7);OE=n(Bqe,"LI",{});var LRe=s(OE);ITe=n(LRe,"STRONG",{});var H9t=s(ITe);WSr=r(H9t,"beit"),H9t.forEach(t),HSr=r(LRe," \u2014 "),VJ=n(LRe,"A",{href:!0});var U9t=s(VJ);USr=r(U9t,"FlaxBeitForImageClassification"),U9t.forEach(t),JSr=r(LRe," (BEiT model)"),LRe.forEach(t),YSr=i(Bqe),VE=n(Bqe,"LI",{});var xRe=s(VE);qTe=n(xRe,"STRONG",{});var J9t=s(qTe);KSr=r(J9t,"vit"),J9t.forEach(t),ZSr=r(xRe," \u2014 "),XJ=n(xRe,"A",{href:!0});var Y9t=s(XJ);eRr=r(Y9t,"FlaxViTForImageClassification"),Y9t.forEach(t),oRr=r(xRe," (ViT model)"),xRe.forEach(t),Bqe.forEach(t),rRr=i(Zl),T(XE.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),$Pe=i(f),Uc=n(f,"H2",{class:!0});var Pqe=s(Uc);zE=n(Pqe,"A",{id:!0,class:!0,href:!0});var K9t=s(zE);NTe=n(K9t,"SPAN",{});var Z9t=s(NTe);T(d7.$$.fragment,Z9t),Z9t.forEach(t),K9t.forEach(t),tRr=i(Pqe),jTe=n(Pqe,"SPAN",{});var eMt=s(jTe);aRr=r(eMt,"FlaxAutoModelForVision2Seq"),eMt.forEach(t),Pqe.forEach(t),kPe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(c7.$$.fragment,ei),nRr=i(ei),Jc=n(ei,"P",{});var IK=s(Jc);sRr=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zJ=n(IK,"A",{href:!0});var oMt=s(zJ);lRr=r(oMt,"from_pretrained()"),oMt.forEach(t),iRr=r(IK," class method or the "),QJ=n(IK,"A",{href:!0});var rMt=s(QJ);dRr=r(rMt,"from_config()"),rMt.forEach(t),cRr=r(IK,` class
method.`),IK.forEach(t),fRr=i(ei),f7=n(ei,"P",{});var Iqe=s(f7);mRr=r(Iqe,"This class cannot be instantiated directly using "),DTe=n(Iqe,"CODE",{});var tMt=s(DTe);gRr=r(tMt,"__init__()"),tMt.forEach(t),hRr=r(Iqe," (throws an error)."),Iqe.forEach(t),pRr=i(ei),Qt=n(ei,"DIV",{class:!0});var d3=s(Qt);T(m7.$$.fragment,d3),uRr=i(d3),GTe=n(d3,"P",{});var aMt=s(GTe);_Rr=r(aMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aMt.forEach(t),bRr=i(d3),Yc=n(d3,"P",{});var qK=s(Yc);vRr=r(qK,`Note:
Loading a model from its configuration file does `),OTe=n(qK,"STRONG",{});var nMt=s(OTe);FRr=r(nMt,"not"),nMt.forEach(t),TRr=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(qK,"A",{href:!0});var sMt=s(WJ);MRr=r(sMt,"from_pretrained()"),sMt.forEach(t),ERr=r(qK," to load the model weights."),qK.forEach(t),CRr=i(d3),T(QE.$$.fragment,d3),d3.forEach(t),wRr=i(ei),Qr=n(ei,"DIV",{class:!0});var oi=s(Qr);T(g7.$$.fragment,oi),ARr=i(oi),VTe=n(oi,"P",{});var lMt=s(VTe);yRr=r(lMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lMt.forEach(t),LRr=i(oi),Fn=n(oi,"P",{});var c3=s(Fn);xRr=r(c3,"The model class to instantiate is selected based on the "),XTe=n(c3,"CODE",{});var iMt=s(XTe);$Rr=r(iMt,"model_type"),iMt.forEach(t),kRr=r(c3,` property of the config object (either
passed as an argument or loaded from `),zTe=n(c3,"CODE",{});var dMt=s(zTe);SRr=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),RRr=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(c3,"CODE",{});var cMt=s(QTe);BRr=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),PRr=r(c3,":"),c3.forEach(t),IRr=i(oi),WTe=n(oi,"UL",{});var fMt=s(WTe);WE=n(fMt,"LI",{});var $Re=s(WE);HTe=n($Re,"STRONG",{});var mMt=s(HTe);qRr=r(mMt,"vision-encoder-decoder"),mMt.forEach(t),NRr=r($Re," \u2014 "),HJ=n($Re,"A",{href:!0});var gMt=s(HJ);jRr=r(gMt,"FlaxVisionEncoderDecoderModel"),gMt.forEach(t),DRr=r($Re," (Vision Encoder decoder model)"),$Re.forEach(t),fMt.forEach(t),GRr=i(oi),T(HE.$$.fragment,oi),oi.forEach(t),ei.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(pEt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.AutoTokenizer"),c(ii,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertModel"),c(nf,"id","extending-the-auto-classes"),c(nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nf,"href","#extending-the-auto-classes"),c(di,"class","relative group"),c(lf,"id","transformers.AutoConfig"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#transformers.AutoConfig"),c(ci,"class","relative group"),c(Sx,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Rx,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertConfig"),c(Bx,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig"),c(Px,"href","/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitConfig"),c(Ix,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertConfig"),c(qx,"href","/docs/transformers/pr_16980/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Nx,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdConfig"),c(jx,"href","/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Dx,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Gx,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Ox,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertConfig"),c(Vx,"href","/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineConfig"),c(Xx,"href","/docs/transformers/pr_16980/en/model_doc/clip#transformers.CLIPConfig"),c(zx,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertConfig"),c(Qx,"href","/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextConfig"),c(Wx,"href","/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLConfig"),c(Hx,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Ux,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Jx,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Yx,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaConfig"),c(Kx,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Zx,"href","/docs/transformers/pr_16980/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(e$,"href","/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTConfig"),c(o$,"href","/docs/transformers/pr_16980/en/model_doc/detr#transformers.DetrConfig"),c(r$,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertConfig"),c(t$,"href","/docs/transformers/pr_16980/en/model_doc/dpr#transformers.DPRConfig"),c(a$,"href","/docs/transformers/pr_16980/en/model_doc/dpt#transformers.DPTConfig"),c(n$,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraConfig"),c(s$,"href","/docs/transformers/pr_16980/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(l$,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertConfig"),c(i$,"href","/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetConfig"),c(d$,"href","/docs/transformers/pr_16980/en/model_doc/fsmt#transformers.FSMTConfig"),c(c$,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelConfig"),c(f$,"href","/docs/transformers/pr_16980/en/model_doc/glpn#transformers.GLPNConfig"),c(m$,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Config"),c(g$,"href","/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(h$,"href","/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJConfig"),c(p$,"href","/docs/transformers/pr_16980/en/model_doc/hubert#transformers.HubertConfig"),c(u$,"href","/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertConfig"),c(_$,"href","/docs/transformers/pr_16980/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(b$,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(v$,"href","/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(F$,"href","/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDConfig"),c(T$,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerConfig"),c(M$,"href","/docs/transformers/pr_16980/en/model_doc/luke#transformers.LukeConfig"),c(E$,"href","/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertConfig"),c(C$,"href","/docs/transformers/pr_16980/en/model_doc/m2m_100#transformers.M2M100Config"),c(w$,"href","/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianConfig"),c(A$,"href","/docs/transformers/pr_16980/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(y$,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartConfig"),c(L$,"href","/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(x$,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertConfig"),c($$,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetConfig"),c(k$,"href","/docs/transformers/pr_16980/en/model_doc/mt5#transformers.MT5Config"),c(S$,"href","/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(R$,"href","/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(B$,"href","/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusConfig"),c(P$,"href","/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverConfig"),c(I$,"href","/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartConfig"),c(q$,"href","/docs/transformers/pr_16980/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(N$,"href","/docs/transformers/pr_16980/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(j$,"href","/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(D$,"href","/docs/transformers/pr_16980/en/model_doc/rag#transformers.RagConfig"),c(G$,"href","/docs/transformers/pr_16980/en/model_doc/realm#transformers.RealmConfig"),c(O$,"href","/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerConfig"),c(V$,"href","/docs/transformers/pr_16980/en/model_doc/regnet#transformers.RegNetConfig"),c(X$,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertConfig"),c(z$,"href","/docs/transformers/pr_16980/en/model_doc/resnet#transformers.ResNetConfig"),c(Q$,"href","/docs/transformers/pr_16980/en/model_doc/retribert#transformers.RetriBertConfig"),c(W$,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaConfig"),c(H$,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerConfig"),c(U$,"href","/docs/transformers/pr_16980/en/model_doc/segformer#transformers.SegformerConfig"),c(J$,"href","/docs/transformers/pr_16980/en/model_doc/sew#transformers.SEWConfig"),c(Y$,"href","/docs/transformers/pr_16980/en/model_doc/sew-d#transformers.SEWDConfig"),c(K$,"href","/docs/transformers/pr_16980/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Z$,"href","/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(ek,"href","/docs/transformers/pr_16980/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ok,"href","/docs/transformers/pr_16980/en/model_doc/splinter#transformers.SplinterConfig"),c(rk,"href","/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(tk,"href","/docs/transformers/pr_16980/en/model_doc/swin#transformers.SwinConfig"),c(ak,"href","/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5Config"),c(nk,"href","/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasConfig"),c(sk,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartConfig"),c(lk,"href","/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(ik,"href","/docs/transformers/pr_16980/en/model_doc/trocr#transformers.TrOCRConfig"),c(dk,"href","/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(ck,"href","/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(fk,"href","/docs/transformers/pr_16980/en/model_doc/van#transformers.VanConfig"),c(mk,"href","/docs/transformers/pr_16980/en/model_doc/vilt#transformers.ViltConfig"),c(gk,"href","/docs/transformers/pr_16980/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(hk,"href","/docs/transformers/pr_16980/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(pk,"href","/docs/transformers/pr_16980/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(uk,"href","/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTConfig"),c(_k,"href","/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(bk,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(vk,"href","/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMConfig"),c(Fk,"href","/docs/transformers/pr_16980/en/model_doc/xglm#transformers.XGLMConfig"),c(Tk,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMConfig"),c(Mk,"href","/docs/transformers/pr_16980/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Ek,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Ck,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(wk,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetConfig"),c(Ak,"href","/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoConfig"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ng,"id","transformers.AutoTokenizer"),c(ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ng,"href","#transformers.AutoTokenizer"),c(mi,"class","relative group"),c(yk,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Lk,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertTokenizer"),c(xk,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($k,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartTokenizer"),c(kk,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartTokenizerFast"),c(Sk,"href","/docs/transformers/pr_16980/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Rk,"href","/docs/transformers/pr_16980/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Bk,"href","/docs/transformers/pr_16980/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Pk,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertTokenizer"),c(Ik,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertTokenizerFast"),c(qk,"href","/docs/transformers/pr_16980/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Nk,"href","/docs/transformers/pr_16980/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(jk,"href","/docs/transformers/pr_16980/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Dk,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Gk,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Ok,"href","/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Vk,"href","/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Xk,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(zk,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Qk,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Wk,"href","/docs/transformers/pr_16980/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Hk,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Uk,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Jk,"href","/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineTokenizer"),c(Yk,"href","/docs/transformers/pr_16980/en/model_doc/clip#transformers.CLIPTokenizer"),c(Kk,"href","/docs/transformers/pr_16980/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Zk,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(eS,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(oS,"href","/docs/transformers/pr_16980/en/model_doc/cpm#transformers.CpmTokenizer"),c(rS,"href","/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(tS,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aS,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nS,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaTokenizer"),c(sS,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(lS,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(iS,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(dS,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(cS,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(fS,"href","/docs/transformers/pr_16980/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(mS,"href","/docs/transformers/pr_16980/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(gS,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraTokenizer"),c(hS,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(pS,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(uS,"href","/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetTokenizer"),c(_S,"href","/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(bS,"href","/docs/transformers/pr_16980/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(vS,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelTokenizer"),c(FS,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(TS,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MS,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ES,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CS,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wS,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AS,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yS,"href","/docs/transformers/pr_16980/en/model_doc/herbert#transformers.HerbertTokenizer"),c(LS,"href","/docs/transformers/pr_16980/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(xS,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c($S,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kS,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SS,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(RS,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(BS,"href","/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(PS,"href","/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(IS,"href","/docs/transformers/pr_16980/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(qS,"href","/docs/transformers/pr_16980/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(NS,"href","/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDTokenizer"),c(jS,"href","/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDTokenizerFast"),c(DS,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerTokenizer"),c(GS,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(OS,"href","/docs/transformers/pr_16980/en/model_doc/luke#transformers.LukeTokenizer"),c(VS,"href","/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(XS,"href","/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(zS,"href","/docs/transformers/pr_16980/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(QS,"href","/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianTokenizer"),c(WS,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartTokenizer"),c(HS,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(US,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(JS,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(YS,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertTokenizer"),c(KS,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16980/en/model_doc/mluke#transformers.MLukeTokenizer"),c(eR,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(oR,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(rR,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(tR,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(aR,"href","/docs/transformers/pr_16980/en/model_doc/mt5#transformers.T5Tokenizer"),c(nR,"href","/docs/transformers/pr_16980/en/model_doc/mt5#transformers.T5TokenizerFast"),c(sR,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertTokenizer"),c(lR,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(iR,"href","/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(dR,"href","/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(cR,"href","/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(fR,"href","/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(mR,"href","/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(gR,"href","/docs/transformers/pr_16980/en/model_doc/phobert#transformers.PhobertTokenizer"),c(hR,"href","/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartTokenizer"),c(pR,"href","/docs/transformers/pr_16980/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(uR,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertTokenizer"),c(_R,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertTokenizerFast"),c(bR,"href","/docs/transformers/pr_16980/en/model_doc/rag#transformers.RagTokenizer"),c(vR,"href","/docs/transformers/pr_16980/en/model_doc/realm#transformers.RealmTokenizer"),c(FR,"href","/docs/transformers/pr_16980/en/model_doc/realm#transformers.RealmTokenizerFast"),c(TR,"href","/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerTokenizer"),c(MR,"href","/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(ER,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertTokenizer"),c(CR,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(wR,"href","/docs/transformers/pr_16980/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(AR,"href","/docs/transformers/pr_16980/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(yR,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaTokenizer"),c(LR,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xR,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerTokenizer"),c($R,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(kR,"href","/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(SR,"href","/docs/transformers/pr_16980/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(RR,"href","/docs/transformers/pr_16980/en/model_doc/splinter#transformers.SplinterTokenizer"),c(BR,"href","/docs/transformers/pr_16980/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(PR,"href","/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(IR,"href","/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(qR,"href","/docs/transformers/pr_16980/en/model_doc/mt5#transformers.T5Tokenizer"),c(NR,"href","/docs/transformers/pr_16980/en/model_doc/mt5#transformers.T5TokenizerFast"),c(jR,"href","/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasTokenizer"),c(DR,"href","/docs/transformers/pr_16980/en/model_doc/tapex#transformers.TapexTokenizer"),c(GR,"href","/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(OR,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertTokenizer"),c(VR,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertTokenizerFast"),c(XR,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zR,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(QR,"href","/docs/transformers/pr_16980/en/model_doc/xglm#transformers.XGLMTokenizer"),c(WR,"href","/docs/transformers/pr_16980/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(HR,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMTokenizer"),c(UR,"href","/docs/transformers/pr_16980/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(JR,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(YR,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(KR,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZR,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eB,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(oB,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(rB,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertTokenizer"),c(tB,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"id","transformers.AutoFeatureExtractor"),c(qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qg,"href","#transformers.AutoFeatureExtractor"),c(gi,"class","relative group"),c(aB,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(nB,"href","/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(sB,"href","/docs/transformers/pr_16980/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(lB,"href","/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iB,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dB,"href","/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cB,"href","/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(fB,"href","/docs/transformers/pr_16980/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(mB,"href","/docs/transformers/pr_16980/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(gB,"href","/docs/transformers/pr_16980/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(hB,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pB,"href","/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(uB,"href","/docs/transformers/pr_16980/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(_B,"href","/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(bB,"href","/docs/transformers/pr_16980/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(vB,"href","/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16980/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"id","transformers.AutoProcessor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoProcessor"),c(hi,"class","relative group"),c(LB,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(xB,"href","/docs/transformers/pr_16980/en/model_doc/clip#transformers.CLIPProcessor"),c($B,"href","/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(kB,"href","/docs/transformers/pr_16980/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(SB,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RB,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BB,"href","/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(PB,"href","/docs/transformers/pr_16980/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(IB,"href","/docs/transformers/pr_16980/en/model_doc/trocr#transformers.TrOCRProcessor"),c(qB,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NB,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jB,"href","/docs/transformers/pr_16980/en/model_doc/vilt#transformers.ViltProcessor"),c(DB,"href","/docs/transformers/pr_16980/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(GB,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OB,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoModel"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoModel"),c(ui,"class","relative group"),c(VB,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XB,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zB,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QB,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertModel"),c(WB,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartModel"),c(HB,"href","/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitModel"),c(UB,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertModel"),c(JB,"href","/docs/transformers/pr_16980/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(YB,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdModel"),c(KB,"href","/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(ZB,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(eP,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(oP,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertModel"),c(rP,"href","/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineModel"),c(tP,"href","/docs/transformers/pr_16980/en/model_doc/clip#transformers.CLIPModel"),c(aP,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertModel"),c(nP,"href","/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextModel"),c(sP,"href","/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLModel"),c(lP,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(iP,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(dP,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(cP,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaModel"),c(fP,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(mP,"href","/docs/transformers/pr_16980/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(gP,"href","/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTModel"),c(hP,"href","/docs/transformers/pr_16980/en/model_doc/detr#transformers.DetrModel"),c(pP,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertModel"),c(uP,"href","/docs/transformers/pr_16980/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_P,"href","/docs/transformers/pr_16980/en/model_doc/dpt#transformers.DPTModel"),c(bP,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraModel"),c(vP,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertModel"),c(FP,"href","/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetModel"),c(TP,"href","/docs/transformers/pr_16980/en/model_doc/fsmt#transformers.FSMTModel"),c(MP,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelModel"),c(EP,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelBaseModel"),c(CP,"href","/docs/transformers/pr_16980/en/model_doc/glpn#transformers.GLPNModel"),c(wP,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2Model"),c(AP,"href","/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(yP,"href","/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJModel"),c(LP,"href","/docs/transformers/pr_16980/en/model_doc/hubert#transformers.HubertModel"),c(xP,"href","/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertModel"),c($P,"href","/docs/transformers/pr_16980/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(kP,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(SP,"href","/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(RP,"href","/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDModel"),c(BP,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerModel"),c(PP,"href","/docs/transformers/pr_16980/en/model_doc/luke#transformers.LukeModel"),c(IP,"href","/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertModel"),c(qP,"href","/docs/transformers/pr_16980/en/model_doc/m2m_100#transformers.M2M100Model"),c(NP,"href","/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianModel"),c(jP,"href","/docs/transformers/pr_16980/en/model_doc/maskformer#transformers.MaskFormerModel"),c(DP,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartModel"),c(GP,"href","/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(OP,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertModel"),c(VP,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetModel"),c(XP,"href","/docs/transformers/pr_16980/en/model_doc/mt5#transformers.MT5Model"),c(zP,"href","/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerModel"),c(QP,"href","/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(WP,"href","/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusModel"),c(HP,"href","/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverModel"),c(UP,"href","/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartModel"),c(JP,"href","/docs/transformers/pr_16980/en/model_doc/poolformer#transformers.PoolFormerModel"),c(YP,"href","/docs/transformers/pr_16980/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(KP,"href","/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertModel"),c(ZP,"href","/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerModel"),c(eI,"href","/docs/transformers/pr_16980/en/model_doc/regnet#transformers.RegNetModel"),c(oI,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertModel"),c(rI,"href","/docs/transformers/pr_16980/en/model_doc/resnet#transformers.ResNetModel"),c(tI,"href","/docs/transformers/pr_16980/en/model_doc/retribert#transformers.RetriBertModel"),c(aI,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaModel"),c(nI,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerModel"),c(sI,"href","/docs/transformers/pr_16980/en/model_doc/segformer#transformers.SegformerModel"),c(lI,"href","/docs/transformers/pr_16980/en/model_doc/sew#transformers.SEWModel"),c(iI,"href","/docs/transformers/pr_16980/en/model_doc/sew-d#transformers.SEWDModel"),c(dI,"href","/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(cI,"href","/docs/transformers/pr_16980/en/model_doc/splinter#transformers.SplinterModel"),c(fI,"href","/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(mI,"href","/docs/transformers/pr_16980/en/model_doc/swin#transformers.SwinModel"),c(gI,"href","/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5Model"),c(hI,"href","/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasModel"),c(pI,"href","/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(uI,"href","/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechModel"),c(_I,"href","/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(bI,"href","/docs/transformers/pr_16980/en/model_doc/van#transformers.VanModel"),c(vI,"href","/docs/transformers/pr_16980/en/model_doc/vilt#transformers.ViltModel"),c(FI,"href","/docs/transformers/pr_16980/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(TI,"href","/docs/transformers/pr_16980/en/model_doc/visual_bert#transformers.VisualBertModel"),c(MI,"href","/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTModel"),c(EI,"href","/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(CI,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(wI,"href","/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMModel"),c(AI,"href","/docs/transformers/pr_16980/en/model_doc/xglm#transformers.XGLMModel"),c(yI,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMModel"),c(LI,"href","/docs/transformers/pr_16980/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(xI,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c($I,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(kI,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetModel"),c(SI,"href","/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoModel"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_u,"id","transformers.AutoModelForPreTraining"),c(_u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_u,"href","#transformers.AutoModelForPreTraining"),c(vi,"class","relative group"),c(RI,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BI,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PI,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(II,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertForPreTraining"),c(qI,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(NI,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForPreTraining"),c(jI,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(DI,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(GI,"href","/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(OI,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(VI,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(XI,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(zI,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(QI,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForPreTraining"),c(WI,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(HI,"href","/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForPreTraining"),c(UI,"href","/docs/transformers/pr_16980/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JI,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(YI,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(KI,"href","/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ZI,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(eq,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(oq,"href","/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(rq,"href","/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(tq,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(aq,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nq,"href","/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(sq,"href","/docs/transformers/pr_16980/en/model_doc/retribert#transformers.RetriBertModel"),c(lq,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(iq,"href","/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(dq,"href","/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cq,"href","/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(fq,"href","/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mq,"href","/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(gq,"href","/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(hq,"href","/docs/transformers/pr_16980/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(pq,"href","/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(uq,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(_q,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bq,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(vq,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Fq,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s_,"id","transformers.AutoModelForCausalLM"),c(s_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s_,"href","#transformers.AutoModelForCausalLM"),c(Mi,"class","relative group"),c(Tq,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mq,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eq,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cq,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForCausalLM"),c(wq,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertLMHeadModel"),c(Aq,"href","/docs/transformers/pr_16980/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(yq,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Lq,"href","/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(xq,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c($q,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(kq,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Sq,"href","/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Rq,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Bq,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Pq,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Iq,"href","/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(qq,"href","/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Nq,"href","/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianForCausalLM"),c(jq,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Dq,"href","/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Gq,"href","/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Oq,"href","/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Vq,"href","/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Xq,"href","/docs/transformers/pr_16980/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(zq,"href","/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Qq,"href","/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Wq,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Hq,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Uq,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Jq,"href","/docs/transformers/pr_16980/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Yq,"href","/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Kq,"href","/docs/transformers/pr_16980/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Zq,"href","/docs/transformers/pr_16980/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(eN,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(oN,"href","/docs/transformers/pr_16980/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(rN,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(tN,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(aN,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForMaskedLM"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForMaskedLM"),c(wi,"class","relative group"),c(nN,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sN,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lN,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iN,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(dN,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cN,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForMaskedLM"),c(fN,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(mN,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gN,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(hN,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pN,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(uN,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_N,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bN,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(vN,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(FN,"href","/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(TN,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(MN,"href","/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(EN,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(CN,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(wN,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(AN,"href","/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(yN,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(LN,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(xN,"href","/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c($N,"href","/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(kN,"href","/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(SN,"href","/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(RN,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(BN,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PN,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(IN,"href","/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qN,"href","/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(NN,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jN,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(DN,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(GN,"href","/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForSeq2SeqLM"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Li,"class","relative group"),c(ON,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VN,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XN,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zN,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QN,"href","/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(WN,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(HN,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(UN,"href","/docs/transformers/pr_16980/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(JN,"href","/docs/transformers/pr_16980/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(YN,"href","/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(KN,"href","/docs/transformers/pr_16980/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(ZN,"href","/docs/transformers/pr_16980/en/model_doc/marian#transformers.MarianMTModel"),c(ej,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(oj,"href","/docs/transformers/pr_16980/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(rj,"href","/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_16980/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(nj,"href","/docs/transformers/pr_16980/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lj,"href","/docs/transformers/pr_16980/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y1,"id","transformers.AutoModelForSequenceClassification"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForSequenceClassification"),c(ki,"class","relative group"),c(ij,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dj,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cj,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fj,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(mj,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForSequenceClassification"),c(gj,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForSequenceClassification"),c(hj,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(pj,"href","/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(uj,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(_j,"href","/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(bj,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(vj,"href","/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($j,"href","/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16980/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hb,"id","transformers.AutoModelForMultipleChoice"),c(Hb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hb,"href","#transformers.AutoModelForMultipleChoice"),c(Bi,"class","relative group"),c(aD,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nD,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sD,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lD,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(iD,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForMultipleChoice"),c(dD,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(cD,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(fD,"href","/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(mD,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(gD,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(hD,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(pD,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uD,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(_D,"href","/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(bD,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(vD,"href","/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(FD,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(TD,"href","/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(MD,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(ED,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(CD,"href","/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(wD,"href","/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(AD,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(yD,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(LD,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c($D,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(RD,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(BD,"href","/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A2,"id","transformers.AutoModelForNextSentencePrediction"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForNextSentencePrediction"),c(qi,"class","relative group"),c(PD,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ID,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qD,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ND,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(jD,"href","/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(DD,"href","/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(GD,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(OD,"href","/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P2,"id","transformers.AutoModelForTokenClassification"),c(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P2,"href","#transformers.AutoModelForTokenClassification"),c(Di,"class","relative group"),c(VD,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XD,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zD,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QD,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(WD,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForTokenClassification"),c(HD,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(UD,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(JD,"href","/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineForTokenClassification"),c(YD,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(KD,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(ZD,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(eG,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(oG,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(rG,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(tG,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(aG,"href","/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(nG,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(sG,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(lG,"href","/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(iG,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(dG,"href","/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(cG,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(fG,"href","/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(mG,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gG,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hG,"href","/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(pG,"href","/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(uG,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(_G,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(bG,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(vG,"href","/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(FG,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(TG,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(MG,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(EG,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(CG,"href","/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bv,"id","transformers.AutoModelForQuestionAnswering"),c(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bv,"href","#transformers.AutoModelForQuestionAnswering"),c(Vi,"class","relative group"),c(wG,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AG,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yG,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LG,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(xG,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.BartForQuestionAnswering"),c($G,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(kG,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(SG,"href","/docs/transformers/pr_16980/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(RG,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(BG,"href","/docs/transformers/pr_16980/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(PG,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(IG,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qG,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(NG,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(jG,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(DG,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(GG,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(OG,"href","/docs/transformers/pr_16980/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_16980/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_16980/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_16980/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_16980/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16980/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16980/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_16980/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_16980/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16980/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16980/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(dO,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(mO,"href","/docs/transformers/pr_16980/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForTableQuestionAnswering"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Qi,"class","relative group"),c(gO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uO,"href","/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mF,"id","transformers.AutoModelForImageClassification"),c(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mF,"href","#transformers.AutoModelForImageClassification"),c(Ui,"class","relative group"),c(_O,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FO,"href","/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitForImageClassification"),c(TO,"href","/docs/transformers/pr_16980/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(MO,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(EO,"href","/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTForImageClassification"),c(CO,"href","/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(wO,"href","/docs/transformers/pr_16980/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(AO,"href","/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(yO,"href","/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(LO,"href","/docs/transformers/pr_16980/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(xO,"href","/docs/transformers/pr_16980/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c($O,"href","/docs/transformers/pr_16980/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(kO,"href","/docs/transformers/pr_16980/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(SO,"href","/docs/transformers/pr_16980/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(RO,"href","/docs/transformers/pr_16980/en/model_doc/swin#transformers.SwinForImageClassification"),c(BO,"href","/docs/transformers/pr_16980/en/model_doc/van#transformers.VanForImageClassification"),c(PO,"href","/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTForImageClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForVision2Seq"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForVision2Seq"),c(Ki,"class","relative group"),c(IO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_16980/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForAudioClassification"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForAudioClassification"),c(od,"class","relative group"),c(DO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VO,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(XO,"href","/docs/transformers/pr_16980/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(zO,"href","/docs/transformers/pr_16980/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(QO,"href","/docs/transformers/pr_16980/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(WO,"href","/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(HO,"href","/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(UO,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(JO,"href","/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForAudioFrameClassification"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForAudioFrameClassification"),c(ad,"class","relative group"),c(YO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZO,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eV,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(oV,"href","/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(rV,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(tV,"href","/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KF,"id","transformers.AutoModelForCTC"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.AutoModelForCTC"),c(ld,"class","relative group"),c(aV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lV,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(iV,"href","/docs/transformers/pr_16980/en/model_doc/hubert#transformers.HubertForCTC"),c(dV,"href","/docs/transformers/pr_16980/en/model_doc/sew#transformers.SEWForCTC"),c(cV,"href","/docs/transformers/pr_16980/en/model_doc/sew-d#transformers.SEWDForCTC"),c(fV,"href","/docs/transformers/pr_16980/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(mV,"href","/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(gV,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(hV,"href","/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMForCTC"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c0,"id","transformers.AutoModelForSpeechSeq2Seq"),c(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c0,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(cd,"class","relative group"),c(pV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bV,"href","/docs/transformers/pr_16980/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(vV,"href","/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.AutoModelForAudioXVector"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.AutoModelForAudioXVector"),c(gd,"class","relative group"),c(FV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(CV,"href","/docs/transformers/pr_16980/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(wV,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(AV,"href","/docs/transformers/pr_16980/en/model_doc/wavlm#transformers.WavLMForXVector"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.AutoModelForMaskedImageModeling"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.AutoModelForMaskedImageModeling"),c(ud,"class","relative group"),c(yV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitForMaskedImageModeling"),c(kV,"href","/docs/transformers/pr_16980/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(SV,"href","/docs/transformers/pr_16980/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(RV,"href","/docs/transformers/pr_16980/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.AutoModelForObjectDetection"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(BV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/pr_16980/en/model_doc/detr#transformers.DetrForObjectDetection"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q0,"id","transformers.AutoModelForImageSegmentation"),c(q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q0,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(NV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_16980/en/model_doc/detr#transformers.DetrForSegmentation"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O0,"id","transformers.AutoModelForSemanticSegmentation"),c(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O0,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(OV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_16980/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(QV,"href","/docs/transformers/pr_16980/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(WV,"href","/docs/transformers/pr_16980/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(HV,"href","/docs/transformers/pr_16980/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J0,"id","transformers.AutoModelForInstanceSegmentation"),c(J0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J0,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(UV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_16980/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o6,"id","transformers.TFAutoModel"),c(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o6,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(ZV,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertModel"),c(tX,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.TFBartModel"),c(aX,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertModel"),c(nX,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(sX,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(lX,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertModel"),c(iX,"href","/docs/transformers/pr_16980/en/model_doc/clip#transformers.TFCLIPModel"),c(dX,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.TFConvBertModel"),c(cX,"href","/docs/transformers/pr_16980/en/model_doc/convnext#transformers.TFConvNextModel"),c(fX,"href","/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.TFCTRLModel"),c(mX,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.TFDebertaModel"),c(gX,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(hX,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(pX,"href","/docs/transformers/pr_16980/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(uX,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraModel"),c(_X,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(bX,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelModel"),c(vX,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(FX,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.TFGPT2Model"),c(TX,"href","/docs/transformers/pr_16980/en/model_doc/gptj#transformers.TFGPTJModel"),c(MX,"href","/docs/transformers/pr_16980/en/model_doc/hubert#transformers.TFHubertModel"),c(EX,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(CX,"href","/docs/transformers/pr_16980/en/model_doc/led#transformers.TFLEDModel"),c(wX,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.TFLongformerModel"),c(AX,"href","/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.TFLxmertModel"),c(yX,"href","/docs/transformers/pr_16980/en/model_doc/marian#transformers.TFMarianModel"),c(LX,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.TFMBartModel"),c(xX,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c($X,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetModel"),c(kX,"href","/docs/transformers/pr_16980/en/model_doc/mt5#transformers.TFMT5Model"),c(SX,"href","/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(RX,"href","/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.TFPegasusModel"),c(BX,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertModel"),c(PX,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaModel"),c(IX,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerModel"),c(qX,"href","/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(NX,"href","/docs/transformers/pr_16980/en/model_doc/t5#transformers.TFT5Model"),c(jX,"href","/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TFTapasModel"),c(DX,"href","/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(GX,"href","/docs/transformers/pr_16980/en/model_doc/vit#transformers.TFViTModel"),c(OX,"href","/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(VX,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(XX,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMModel"),c(zX,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(QX,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W6,"id","transformers.TFAutoModelForPreTraining"),c(W6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W6,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(WX,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(YX,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(KX,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertForPreTraining"),c(ZX,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(ez,"href","/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(oz,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(rz,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(tz,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(az,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(nz,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sz,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(lz,"href","/docs/transformers/pr_16980/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(iz,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(dz,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(cz,"href","/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(fz,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(mz,"href","/docs/transformers/pr_16980/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(gz,"href","/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(hz,"href","/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(pz,"href","/docs/transformers/pr_16980/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(uz,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_z,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bz,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.TFAutoModelForCausalLM"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(vz,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Ez,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Cz,"href","/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wz,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Az,"href","/docs/transformers/pr_16980/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(yz,"href","/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Lz,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(xz,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c($z,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(kz,"href","/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Sz,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Rz,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.TFAutoModelForImageClassification"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_16980/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Nz,"href","/docs/transformers/pr_16980/en/model_doc/vit#transformers.TFViTForImageClassification"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.TFAutoModelForMaskedLM"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.TFAutoModelForMaskedLM"),c(Vd,"class","relative group"),c(jz,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Vz,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Xz,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(zz,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Qz,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Wz,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Hz,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Uz,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Jz,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Yz,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(Kz,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Zz,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(eQ,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(oQ,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rQ,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(tQ,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aQ,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(nQ,"href","/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sQ,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lQ,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i8,"id","transformers.TFAutoModelForSeq2SeqLM"),c(i8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i8,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Qd,"class","relative group"),c(iQ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(mQ,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(gQ,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(hQ,"href","/docs/transformers/pr_16980/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(pQ,"href","/docs/transformers/pr_16980/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(uQ,"href","/docs/transformers/pr_16980/en/model_doc/marian#transformers.TFMarianMTModel"),c(_Q,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(bQ,"href","/docs/transformers/pr_16980/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(vQ,"href","/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(FQ,"href","/docs/transformers/pr_16980/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T8,"id","transformers.TFAutoModelForSequenceClassification"),c(T8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T8,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ud,"class","relative group"),c(TQ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(wQ,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(AQ,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(yQ,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(LQ,"href","/docs/transformers/pr_16980/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(xQ,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c($Q,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(kQ,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(SQ,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(RQ,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(BQ,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(PQ,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(IQ,"href","/docs/transformers/pr_16980/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(NQ,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_16980/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_16980/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J8,"id","transformers.TFAutoModelForMultipleChoice"),c(J8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J8,"href","#transformers.TFAutoModelForMultipleChoice"),c(Kd,"class","relative group"),c(JQ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(eW,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(oW,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(rW,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(tW,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(aW,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(nW,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(sW,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(lW,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(iW,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(dW,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(cW,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(fW,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(mW,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(gW,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(hW,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(pW,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u9,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(u9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(oc,"class","relative group"),c(uW,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_16980/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F9,"id","transformers.TFAutoModelForTokenClassification"),c(F9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F9,"href","#transformers.TFAutoModelForTokenClassification"),c(ac,"class","relative group"),c(FW,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(CW,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(wW,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(AW,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(yW,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(LW,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(xW,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c($W,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(kW,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(SW,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(RW,"href","/docs/transformers/pr_16980/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(BW,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(PW,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(IW,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(qW,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(NW,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(jW,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(DW,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(GW,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(OW,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V9,"id","transformers.TFAutoModelForQuestionAnswering"),c(V9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V9,"href","#transformers.TFAutoModelForQuestionAnswering"),c(lc,"class","relative group"),c(VW,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XW,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zW,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QW,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(WW,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(HW,"href","/docs/transformers/pr_16980/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(UW,"href","/docs/transformers/pr_16980/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(JW,"href","/docs/transformers/pr_16980/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(YW,"href","/docs/transformers/pr_16980/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(KW,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(ZW,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_16980/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(oH,"href","/docs/transformers/pr_16980/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_16980/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_16980/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_16980/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_16980/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_16980/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_16980/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(cH,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_16980/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mM,"id","transformers.TFAutoModelForVision2Seq"),c(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mM,"href","#transformers.TFAutoModelForVision2Seq"),c(cc,"class","relative group"),c(mH,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_16980/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gc,"class","relative group"),c(uH,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_H,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/pr_16980/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.FlaxAutoModel"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.FlaxAutoModel"),c(uc,"class","relative group"),c(FH,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertModel"),c(CH,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartModel"),c(wH,"href","/docs/transformers/pr_16980/en/model_doc/beit#transformers.FlaxBeitModel"),c(AH,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertModel"),c(yH,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(LH,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(xH,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c($H,"href","/docs/transformers/pr_16980/en/model_doc/clip#transformers.FlaxCLIPModel"),c(kH,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(SH,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraModel"),c(RH,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(BH,"href","/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(PH,"href","/docs/transformers/pr_16980/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(IH,"href","/docs/transformers/pr_16980/en/model_doc/marian#transformers.FlaxMarianModel"),c(qH,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.FlaxMBartModel"),c(NH,"href","/docs/transformers/pr_16980/en/model_doc/mt5#transformers.FlaxMT5Model"),c(jH,"href","/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(DH,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(GH,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(OH,"href","/docs/transformers/pr_16980/en/model_doc/t5#transformers.FlaxT5Model"),c(VH,"href","/docs/transformers/pr_16980/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(XH,"href","/docs/transformers/pr_16980/en/model_doc/vit#transformers.FlaxViTModel"),c(zH,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(QH,"href","/docs/transformers/pr_16980/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(WH,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.FlaxAutoModelForCausalLM"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.FlaxAutoModelForCausalLM"),c(vc,"class","relative group"),c(HH,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(KH,"href","/docs/transformers/pr_16980/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(ZH,"href","/docs/transformers/pr_16980/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(eU,"href","/docs/transformers/pr_16980/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(oU,"href","/docs/transformers/pr_16980/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.FlaxAutoModelForPreTraining"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mc,"class","relative group"),c(rU,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(sU,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lU,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(iU,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(dU,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(cU,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fU,"href","/docs/transformers/pr_16980/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(mU,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gU,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hU,"href","/docs/transformers/pr_16980/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(pU,"href","/docs/transformers/pr_16980/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(uU,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_4,"id","transformers.FlaxAutoModelForMaskedLM"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wc,"class","relative group"),c(_U,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(TU,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(MU,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(EU,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(CU,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(wU,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(AU,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(yU,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(LU,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xU,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c($U,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(BU,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(PU,"href","/docs/transformers/pr_16980/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(IU,"href","/docs/transformers/pr_16980/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(qU,"href","/docs/transformers/pr_16980/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(NU,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_16980/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(DU,"href","/docs/transformers/pr_16980/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(GU,"href","/docs/transformers/pr_16980/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.FlaxAutoModelForSequenceClassification"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(OU,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VU,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XU,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zU,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(QU,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(WU,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(HU,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(UU,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(JU,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(YU,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(KU,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(ZU,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_16980/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(lJ,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_16980/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.FlaxAutoModelForTokenClassification"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.FlaxAutoModelForTokenClassification"),c(qc,"class","relative group"),c(hJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(bJ,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(vJ,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(FJ,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(TJ,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(MJ,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(EJ,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(CJ,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wE,"id","transformers.FlaxAutoModelForMultipleChoice"),c(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wE,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Dc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_16980/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(xJ,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c($J,"href","/docs/transformers/pr_16980/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(kJ,"href","/docs/transformers/pr_16980/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(SJ,"href","/docs/transformers/pr_16980/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(RJ,"href","/docs/transformers/pr_16980/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(BJ,"href","/docs/transformers/pr_16980/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(PJ,"href","/docs/transformers/pr_16980/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vc,"class","relative group"),c(IJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jJ,"href","/docs/transformers/pr_16980/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.FlaxAutoModelForImageClassification"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.FlaxAutoModelForImageClassification"),c(Qc,"class","relative group"),c(DJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_16980/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(XJ,"href","/docs/transformers/pr_16980/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.FlaxAutoModelForVision2Seq"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_16980/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_16980/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Fo),e(Fo,ri),b(f,of,_),b(f,Yr,_),e(Yr,ti),e(Yr,ai),e(ai,f3),e(Yr,rf),b(f,Ie,_),b(f,Oe,_),e(Oe,ni),e(Oe,Mn),e(Mn,m3),e(Oe,En),e(Oe,Cn),e(Cn,g3),e(Oe,si),e(Oe,wn),e(wn,h3),e(Oe,li),b(f,tf,_),M(ba,f,_),b(f,Ve,_),b(f,Ae,_),e(Ae,Ax),e(Ae,ii),e(ii,yx),e(Ae,Lx),b(f,To,_),b(f,va,_),e(va,xx),e(va,af),e(af,$x),e(va,qqe),b(f,kRe,_),b(f,di,_),e(di,nf),e(nf,NK),M(p3,NK,null),e(di,Nqe),e(di,jK),e(jK,jqe),b(f,SRe,_),b(f,An,_),e(An,Dqe),e(An,DK),e(DK,Gqe),e(An,Oqe),e(An,GK),e(GK,Vqe),e(An,Xqe),b(f,RRe,_),M(u3,f,_),b(f,BRe,_),b(f,kx,_),e(kx,zqe),b(f,PRe,_),M(sf,f,_),b(f,IRe,_),b(f,ci,_),e(ci,lf),e(lf,OK),M(_3,OK,null),e(ci,Qqe),e(ci,VK),e(VK,Wqe),b(f,qRe,_),b(f,Mo,_),M(b3,Mo,null),e(Mo,Hqe),e(Mo,v3),e(v3,Uqe),e(v3,Sx),e(Sx,Jqe),e(v3,Yqe),e(Mo,Kqe),e(Mo,F3),e(F3,Zqe),e(F3,XK),e(XK,eNe),e(F3,oNe),e(Mo,rNe),e(Mo,Fr),M(T3,Fr,null),e(Fr,tNe),e(Fr,zK),e(zK,aNe),e(Fr,nNe),e(Fr,fi),e(fi,sNe),e(fi,QK),e(QK,lNe),e(fi,iNe),e(fi,WK),e(WK,dNe),e(fi,cNe),e(Fr,fNe),e(Fr,y),e(y,df),e(df,HK),e(HK,mNe),e(df,gNe),e(df,Rx),e(Rx,hNe),e(df,pNe),e(y,uNe),e(y,cf),e(cf,UK),e(UK,_Ne),e(cf,bNe),e(cf,Bx),e(Bx,vNe),e(cf,FNe),e(y,TNe),e(y,ff),e(ff,JK),e(JK,MNe),e(ff,ENe),e(ff,Px),e(Px,CNe),e(ff,wNe),e(y,ANe),e(y,mf),e(mf,YK),e(YK,yNe),e(mf,LNe),e(mf,Ix),e(Ix,xNe),e(mf,$Ne),e(y,kNe),e(y,gf),e(gf,KK),e(KK,SNe),e(gf,RNe),e(gf,qx),e(qx,BNe),e(gf,PNe),e(y,INe),e(y,hf),e(hf,ZK),e(ZK,qNe),e(hf,NNe),e(hf,Nx),e(Nx,jNe),e(hf,DNe),e(y,GNe),e(y,pf),e(pf,eZ),e(eZ,ONe),e(pf,VNe),e(pf,jx),e(jx,XNe),e(pf,zNe),e(y,QNe),e(y,uf),e(uf,oZ),e(oZ,WNe),e(uf,HNe),e(uf,Dx),e(Dx,UNe),e(uf,JNe),e(y,YNe),e(y,_f),e(_f,rZ),e(rZ,KNe),e(_f,ZNe),e(_f,Gx),e(Gx,eje),e(_f,oje),e(y,rje),e(y,bf),e(bf,tZ),e(tZ,tje),e(bf,aje),e(bf,Ox),e(Ox,nje),e(bf,sje),e(y,lje),e(y,vf),e(vf,aZ),e(aZ,ije),e(vf,dje),e(vf,Vx),e(Vx,cje),e(vf,fje),e(y,mje),e(y,Ff),e(Ff,nZ),e(nZ,gje),e(Ff,hje),e(Ff,Xx),e(Xx,pje),e(Ff,uje),e(y,_je),e(y,Tf),e(Tf,sZ),e(sZ,bje),e(Tf,vje),e(Tf,zx),e(zx,Fje),e(Tf,Tje),e(y,Mje),e(y,Mf),e(Mf,lZ),e(lZ,Eje),e(Mf,Cje),e(Mf,Qx),e(Qx,wje),e(Mf,Aje),e(y,yje),e(y,Ef),e(Ef,iZ),e(iZ,Lje),e(Ef,xje),e(Ef,Wx),e(Wx,$je),e(Ef,kje),e(y,Sje),e(y,Cf),e(Cf,dZ),e(dZ,Rje),e(Cf,Bje),e(Cf,Hx),e(Hx,Pje),e(Cf,Ije),e(y,qje),e(y,wf),e(wf,cZ),e(cZ,Nje),e(wf,jje),e(wf,Ux),e(Ux,Dje),e(wf,Gje),e(y,Oje),e(y,Af),e(Af,fZ),e(fZ,Vje),e(Af,Xje),e(Af,Jx),e(Jx,zje),e(Af,Qje),e(y,Wje),e(y,yf),e(yf,mZ),e(mZ,Hje),e(yf,Uje),e(yf,Yx),e(Yx,Jje),e(yf,Yje),e(y,Kje),e(y,Lf),e(Lf,gZ),e(gZ,Zje),e(Lf,eDe),e(Lf,Kx),e(Kx,oDe),e(Lf,rDe),e(y,tDe),e(y,xf),e(xf,hZ),e(hZ,aDe),e(xf,nDe),e(xf,Zx),e(Zx,sDe),e(xf,lDe),e(y,iDe),e(y,$f),e($f,pZ),e(pZ,dDe),e($f,cDe),e($f,e$),e(e$,fDe),e($f,mDe),e(y,gDe),e(y,kf),e(kf,uZ),e(uZ,hDe),e(kf,pDe),e(kf,o$),e(o$,uDe),e(kf,_De),e(y,bDe),e(y,Sf),e(Sf,_Z),e(_Z,vDe),e(Sf,FDe),e(Sf,r$),e(r$,TDe),e(Sf,MDe),e(y,EDe),e(y,Rf),e(Rf,bZ),e(bZ,CDe),e(Rf,wDe),e(Rf,t$),e(t$,ADe),e(Rf,yDe),e(y,LDe),e(y,Bf),e(Bf,vZ),e(vZ,xDe),e(Bf,$De),e(Bf,a$),e(a$,kDe),e(Bf,SDe),e(y,RDe),e(y,Pf),e(Pf,FZ),e(FZ,BDe),e(Pf,PDe),e(Pf,n$),e(n$,IDe),e(Pf,qDe),e(y,NDe),e(y,If),e(If,TZ),e(TZ,jDe),e(If,DDe),e(If,s$),e(s$,GDe),e(If,ODe),e(y,VDe),e(y,qf),e(qf,MZ),e(MZ,XDe),e(qf,zDe),e(qf,l$),e(l$,QDe),e(qf,WDe),e(y,HDe),e(y,Nf),e(Nf,EZ),e(EZ,UDe),e(Nf,JDe),e(Nf,i$),e(i$,YDe),e(Nf,KDe),e(y,ZDe),e(y,jf),e(jf,CZ),e(CZ,eGe),e(jf,oGe),e(jf,d$),e(d$,rGe),e(jf,tGe),e(y,aGe),e(y,Df),e(Df,wZ),e(wZ,nGe),e(Df,sGe),e(Df,c$),e(c$,lGe),e(Df,iGe),e(y,dGe),e(y,Gf),e(Gf,AZ),e(AZ,cGe),e(Gf,fGe),e(Gf,f$),e(f$,mGe),e(Gf,gGe),e(y,hGe),e(y,Of),e(Of,yZ),e(yZ,pGe),e(Of,uGe),e(Of,m$),e(m$,_Ge),e(Of,bGe),e(y,vGe),e(y,Vf),e(Vf,LZ),e(LZ,FGe),e(Vf,TGe),e(Vf,g$),e(g$,MGe),e(Vf,EGe),e(y,CGe),e(y,Xf),e(Xf,xZ),e(xZ,wGe),e(Xf,AGe),e(Xf,h$),e(h$,yGe),e(Xf,LGe),e(y,xGe),e(y,zf),e(zf,$Z),e($Z,$Ge),e(zf,kGe),e(zf,p$),e(p$,SGe),e(zf,RGe),e(y,BGe),e(y,Qf),e(Qf,kZ),e(kZ,PGe),e(Qf,IGe),e(Qf,u$),e(u$,qGe),e(Qf,NGe),e(y,jGe),e(y,Wf),e(Wf,SZ),e(SZ,DGe),e(Wf,GGe),e(Wf,_$),e(_$,OGe),e(Wf,VGe),e(y,XGe),e(y,Hf),e(Hf,RZ),e(RZ,zGe),e(Hf,QGe),e(Hf,b$),e(b$,WGe),e(Hf,HGe),e(y,UGe),e(y,Uf),e(Uf,BZ),e(BZ,JGe),e(Uf,YGe),e(Uf,v$),e(v$,KGe),e(Uf,ZGe),e(y,eOe),e(y,Jf),e(Jf,PZ),e(PZ,oOe),e(Jf,rOe),e(Jf,F$),e(F$,tOe),e(Jf,aOe),e(y,nOe),e(y,Yf),e(Yf,IZ),e(IZ,sOe),e(Yf,lOe),e(Yf,T$),e(T$,iOe),e(Yf,dOe),e(y,cOe),e(y,Kf),e(Kf,qZ),e(qZ,fOe),e(Kf,mOe),e(Kf,M$),e(M$,gOe),e(Kf,hOe),e(y,pOe),e(y,Zf),e(Zf,NZ),e(NZ,uOe),e(Zf,_Oe),e(Zf,E$),e(E$,bOe),e(Zf,vOe),e(y,FOe),e(y,em),e(em,jZ),e(jZ,TOe),e(em,MOe),e(em,C$),e(C$,EOe),e(em,COe),e(y,wOe),e(y,om),e(om,DZ),e(DZ,AOe),e(om,yOe),e(om,w$),e(w$,LOe),e(om,xOe),e(y,$Oe),e(y,rm),e(rm,GZ),e(GZ,kOe),e(rm,SOe),e(rm,A$),e(A$,ROe),e(rm,BOe),e(y,POe),e(y,tm),e(tm,OZ),e(OZ,IOe),e(tm,qOe),e(tm,y$),e(y$,NOe),e(tm,jOe),e(y,DOe),e(y,am),e(am,VZ),e(VZ,GOe),e(am,OOe),e(am,L$),e(L$,VOe),e(am,XOe),e(y,zOe),e(y,nm),e(nm,XZ),e(XZ,QOe),e(nm,WOe),e(nm,x$),e(x$,HOe),e(nm,UOe),e(y,JOe),e(y,sm),e(sm,zZ),e(zZ,YOe),e(sm,KOe),e(sm,$$),e($$,ZOe),e(sm,eVe),e(y,oVe),e(y,lm),e(lm,QZ),e(QZ,rVe),e(lm,tVe),e(lm,k$),e(k$,aVe),e(lm,nVe),e(y,sVe),e(y,im),e(im,WZ),e(WZ,lVe),e(im,iVe),e(im,S$),e(S$,dVe),e(im,cVe),e(y,fVe),e(y,dm),e(dm,HZ),e(HZ,mVe),e(dm,gVe),e(dm,R$),e(R$,hVe),e(dm,pVe),e(y,uVe),e(y,cm),e(cm,UZ),e(UZ,_Ve),e(cm,bVe),e(cm,B$),e(B$,vVe),e(cm,FVe),e(y,TVe),e(y,fm),e(fm,JZ),e(JZ,MVe),e(fm,EVe),e(fm,P$),e(P$,CVe),e(fm,wVe),e(y,AVe),e(y,mm),e(mm,YZ),e(YZ,yVe),e(mm,LVe),e(mm,I$),e(I$,xVe),e(mm,$Ve),e(y,kVe),e(y,gm),e(gm,KZ),e(KZ,SVe),e(gm,RVe),e(gm,q$),e(q$,BVe),e(gm,PVe),e(y,IVe),e(y,hm),e(hm,ZZ),e(ZZ,qVe),e(hm,NVe),e(hm,N$),e(N$,jVe),e(hm,DVe),e(y,GVe),e(y,pm),e(pm,eee),e(eee,OVe),e(pm,VVe),e(pm,j$),e(j$,XVe),e(pm,zVe),e(y,QVe),e(y,um),e(um,oee),e(oee,WVe),e(um,HVe),e(um,D$),e(D$,UVe),e(um,JVe),e(y,YVe),e(y,_m),e(_m,ree),e(ree,KVe),e(_m,ZVe),e(_m,G$),e(G$,eXe),e(_m,oXe),e(y,rXe),e(y,bm),e(bm,tee),e(tee,tXe),e(bm,aXe),e(bm,O$),e(O$,nXe),e(bm,sXe),e(y,lXe),e(y,vm),e(vm,aee),e(aee,iXe),e(vm,dXe),e(vm,V$),e(V$,cXe),e(vm,fXe),e(y,mXe),e(y,Fm),e(Fm,nee),e(nee,gXe),e(Fm,hXe),e(Fm,X$),e(X$,pXe),e(Fm,uXe),e(y,_Xe),e(y,Tm),e(Tm,see),e(see,bXe),e(Tm,vXe),e(Tm,z$),e(z$,FXe),e(Tm,TXe),e(y,MXe),e(y,Mm),e(Mm,lee),e(lee,EXe),e(Mm,CXe),e(Mm,Q$),e(Q$,wXe),e(Mm,AXe),e(y,yXe),e(y,Em),e(Em,iee),e(iee,LXe),e(Em,xXe),e(Em,W$),e(W$,$Xe),e(Em,kXe),e(y,SXe),e(y,Cm),e(Cm,dee),e(dee,RXe),e(Cm,BXe),e(Cm,H$),e(H$,PXe),e(Cm,IXe),e(y,qXe),e(y,wm),e(wm,cee),e(cee,NXe),e(wm,jXe),e(wm,U$),e(U$,DXe),e(wm,GXe),e(y,OXe),e(y,Am),e(Am,fee),e(fee,VXe),e(Am,XXe),e(Am,J$),e(J$,zXe),e(Am,QXe),e(y,WXe),e(y,ym),e(ym,mee),e(mee,HXe),e(ym,UXe),e(ym,Y$),e(Y$,JXe),e(ym,YXe),e(y,KXe),e(y,Lm),e(Lm,gee),e(gee,ZXe),e(Lm,eze),e(Lm,K$),e(K$,oze),e(Lm,rze),e(y,tze),e(y,xm),e(xm,hee),e(hee,aze),e(xm,nze),e(xm,Z$),e(Z$,sze),e(xm,lze),e(y,ize),e(y,$m),e($m,pee),e(pee,dze),e($m,cze),e($m,ek),e(ek,fze),e($m,mze),e(y,gze),e(y,km),e(km,uee),e(uee,hze),e(km,pze),e(km,ok),e(ok,uze),e(km,_ze),e(y,bze),e(y,Sm),e(Sm,_ee),e(_ee,vze),e(Sm,Fze),e(Sm,rk),e(rk,Tze),e(Sm,Mze),e(y,Eze),e(y,Rm),e(Rm,bee),e(bee,Cze),e(Rm,wze),e(Rm,tk),e(tk,Aze),e(Rm,yze),e(y,Lze),e(y,Bm),e(Bm,vee),e(vee,xze),e(Bm,$ze),e(Bm,ak),e(ak,kze),e(Bm,Sze),e(y,Rze),e(y,Pm),e(Pm,Fee),e(Fee,Bze),e(Pm,Pze),e(Pm,nk),e(nk,Ize),e(Pm,qze),e(y,Nze),e(y,Im),e(Im,Tee),e(Tee,jze),e(Im,Dze),e(Im,sk),e(sk,Gze),e(Im,Oze),e(y,Vze),e(y,qm),e(qm,Mee),e(Mee,Xze),e(qm,zze),e(qm,lk),e(lk,Qze),e(qm,Wze),e(y,Hze),e(y,Nm),e(Nm,Eee),e(Eee,Uze),e(Nm,Jze),e(Nm,ik),e(ik,Yze),e(Nm,Kze),e(y,Zze),e(y,jm),e(jm,Cee),e(Cee,eQe),e(jm,oQe),e(jm,dk),e(dk,rQe),e(jm,tQe),e(y,aQe),e(y,Dm),e(Dm,wee),e(wee,nQe),e(Dm,sQe),e(Dm,ck),e(ck,lQe),e(Dm,iQe),e(y,dQe),e(y,Gm),e(Gm,Aee),e(Aee,cQe),e(Gm,fQe),e(Gm,fk),e(fk,mQe),e(Gm,gQe),e(y,hQe),e(y,Om),e(Om,yee),e(yee,pQe),e(Om,uQe),e(Om,mk),e(mk,_Qe),e(Om,bQe),e(y,vQe),e(y,Vm),e(Vm,Lee),e(Lee,FQe),e(Vm,TQe),e(Vm,gk),e(gk,MQe),e(Vm,EQe),e(y,CQe),e(y,Xm),e(Xm,xee),e(xee,wQe),e(Xm,AQe),e(Xm,hk),e(hk,yQe),e(Xm,LQe),e(y,xQe),e(y,zm),e(zm,$ee),e($ee,$Qe),e(zm,kQe),e(zm,pk),e(pk,SQe),e(zm,RQe),e(y,BQe),e(y,Qm),e(Qm,kee),e(kee,PQe),e(Qm,IQe),e(Qm,uk),e(uk,qQe),e(Qm,NQe),e(y,jQe),e(y,Wm),e(Wm,See),e(See,DQe),e(Wm,GQe),e(Wm,_k),e(_k,OQe),e(Wm,VQe),e(y,XQe),e(y,Hm),e(Hm,Ree),e(Ree,zQe),e(Hm,QQe),e(Hm,bk),e(bk,WQe),e(Hm,HQe),e(y,UQe),e(y,Um),e(Um,Bee),e(Bee,JQe),e(Um,YQe),e(Um,vk),e(vk,KQe),e(Um,ZQe),e(y,eWe),e(y,Jm),e(Jm,Pee),e(Pee,oWe),e(Jm,rWe),e(Jm,Fk),e(Fk,tWe),e(Jm,aWe),e(y,nWe),e(y,Ym),e(Ym,Iee),e(Iee,sWe),e(Ym,lWe),e(Ym,Tk),e(Tk,iWe),e(Ym,dWe),e(y,cWe),e(y,Km),e(Km,qee),e(qee,fWe),e(Km,mWe),e(Km,Mk),e(Mk,gWe),e(Km,hWe),e(y,pWe),e(y,Zm),e(Zm,Nee),e(Nee,uWe),e(Zm,_We),e(Zm,Ek),e(Ek,bWe),e(Zm,vWe),e(y,FWe),e(y,eg),e(eg,jee),e(jee,TWe),e(eg,MWe),e(eg,Ck),e(Ck,EWe),e(eg,CWe),e(y,wWe),e(y,og),e(og,Dee),e(Dee,AWe),e(og,yWe),e(og,wk),e(wk,LWe),e(og,xWe),e(y,$We),e(y,rg),e(rg,Gee),e(Gee,kWe),e(rg,SWe),e(rg,Ak),e(Ak,RWe),e(rg,BWe),e(Fr,PWe),M(tg,Fr,null),e(Mo,IWe),e(Mo,ag),M(M3,ag,null),e(ag,qWe),e(ag,Oee),e(Oee,NWe),b(f,NRe,_),b(f,mi,_),e(mi,ng),e(ng,Vee),M(E3,Vee,null),e(mi,jWe),e(mi,Xee),e(Xee,DWe),b(f,jRe,_),b(f,Eo,_),M(C3,Eo,null),e(Eo,GWe),e(Eo,w3),e(w3,OWe),e(w3,yk),e(yk,VWe),e(w3,XWe),e(Eo,zWe),e(Eo,A3),e(A3,QWe),e(A3,zee),e(zee,WWe),e(A3,HWe),e(Eo,UWe),e(Eo,Tr),M(y3,Tr,null),e(Tr,JWe),e(Tr,Qee),e(Qee,YWe),e(Tr,KWe),e(Tr,Fa),e(Fa,ZWe),e(Fa,Wee),e(Wee,eHe),e(Fa,oHe),e(Fa,Hee),e(Hee,rHe),e(Fa,tHe),e(Fa,Uee),e(Uee,aHe),e(Fa,nHe),e(Tr,sHe),e(Tr,k),e(k,yn),e(yn,Jee),e(Jee,lHe),e(yn,iHe),e(yn,Lk),e(Lk,dHe),e(yn,cHe),e(yn,xk),e(xk,fHe),e(yn,mHe),e(k,gHe),e(k,Ln),e(Ln,Yee),e(Yee,hHe),e(Ln,pHe),e(Ln,$k),e($k,uHe),e(Ln,_He),e(Ln,kk),e(kk,bHe),e(Ln,vHe),e(k,FHe),e(k,xn),e(xn,Kee),e(Kee,THe),e(xn,MHe),e(xn,Sk),e(Sk,EHe),e(xn,CHe),e(xn,Rk),e(Rk,wHe),e(xn,AHe),e(k,yHe),e(k,sg),e(sg,Zee),e(Zee,LHe),e(sg,xHe),e(sg,Bk),e(Bk,$He),e(sg,kHe),e(k,SHe),e(k,$n),e($n,eoe),e(eoe,RHe),e($n,BHe),e($n,Pk),e(Pk,PHe),e($n,IHe),e($n,Ik),e(Ik,qHe),e($n,NHe),e(k,jHe),e(k,lg),e(lg,ooe),e(ooe,DHe),e(lg,GHe),e(lg,qk),e(qk,OHe),e(lg,VHe),e(k,XHe),e(k,ig),e(ig,roe),e(roe,zHe),e(ig,QHe),e(ig,Nk),e(Nk,WHe),e(ig,HHe),e(k,UHe),e(k,dg),e(dg,toe),e(toe,JHe),e(dg,YHe),e(dg,jk),e(jk,KHe),e(dg,ZHe),e(k,eUe),e(k,kn),e(kn,aoe),e(aoe,oUe),e(kn,rUe),e(kn,Dk),e(Dk,tUe),e(kn,aUe),e(kn,Gk),e(Gk,nUe),e(kn,sUe),e(k,lUe),e(k,Sn),e(Sn,noe),e(noe,iUe),e(Sn,dUe),e(Sn,Ok),e(Ok,cUe),e(Sn,fUe),e(Sn,Vk),e(Vk,mUe),e(Sn,gUe),e(k,hUe),e(k,Rn),e(Rn,soe),e(soe,pUe),e(Rn,uUe),e(Rn,Xk),e(Xk,_Ue),e(Rn,bUe),e(Rn,zk),e(zk,vUe),e(Rn,FUe),e(k,TUe),e(k,cg),e(cg,loe),e(loe,MUe),e(cg,EUe),e(cg,Qk),e(Qk,CUe),e(cg,wUe),e(k,AUe),e(k,fg),e(fg,ioe),e(ioe,yUe),e(fg,LUe),e(fg,Wk),e(Wk,xUe),e(fg,$Ue),e(k,kUe),e(k,Bn),e(Bn,doe),e(doe,SUe),e(Bn,RUe),e(Bn,Hk),e(Hk,BUe),e(Bn,PUe),e(Bn,Uk),e(Uk,IUe),e(Bn,qUe),e(k,NUe),e(k,mg),e(mg,coe),e(coe,jUe),e(mg,DUe),e(mg,Jk),e(Jk,GUe),e(mg,OUe),e(k,VUe),e(k,Pn),e(Pn,foe),e(foe,XUe),e(Pn,zUe),e(Pn,Yk),e(Yk,QUe),e(Pn,WUe),e(Pn,Kk),e(Kk,HUe),e(Pn,UUe),e(k,JUe),e(k,In),e(In,moe),e(moe,YUe),e(In,KUe),e(In,Zk),e(Zk,ZUe),e(In,eJe),e(In,eS),e(eS,oJe),e(In,rJe),e(k,tJe),e(k,qn),e(qn,goe),e(goe,aJe),e(qn,nJe),e(qn,oS),e(oS,sJe),e(qn,lJe),e(qn,hoe),e(hoe,iJe),e(qn,dJe),e(k,cJe),e(k,gg),e(gg,poe),e(poe,fJe),e(gg,mJe),e(gg,rS),e(rS,gJe),e(gg,hJe),e(k,pJe),e(k,Nn),e(Nn,uoe),e(uoe,uJe),e(Nn,_Je),e(Nn,tS),e(tS,bJe),e(Nn,vJe),e(Nn,aS),e(aS,FJe),e(Nn,TJe),e(k,MJe),e(k,jn),e(jn,_oe),e(_oe,EJe),e(jn,CJe),e(jn,nS),e(nS,wJe),e(jn,AJe),e(jn,sS),e(sS,yJe),e(jn,LJe),e(k,xJe),e(k,Dn),e(Dn,boe),e(boe,$Je),e(Dn,kJe),e(Dn,lS),e(lS,SJe),e(Dn,RJe),e(Dn,iS),e(iS,BJe),e(Dn,PJe),e(k,IJe),e(k,Gn),e(Gn,voe),e(voe,qJe),e(Gn,NJe),e(Gn,dS),e(dS,jJe),e(Gn,DJe),e(Gn,cS),e(cS,GJe),e(Gn,OJe),e(k,VJe),e(k,On),e(On,Foe),e(Foe,XJe),e(On,zJe),e(On,fS),e(fS,QJe),e(On,WJe),e(On,mS),e(mS,HJe),e(On,UJe),e(k,JJe),e(k,Vn),e(Vn,Toe),e(Toe,YJe),e(Vn,KJe),e(Vn,gS),e(gS,ZJe),e(Vn,eYe),e(Vn,hS),e(hS,oYe),e(Vn,rYe),e(k,tYe),e(k,hg),e(hg,Moe),e(Moe,aYe),e(hg,nYe),e(hg,pS),e(pS,sYe),e(hg,lYe),e(k,iYe),e(k,Xn),e(Xn,Eoe),e(Eoe,dYe),e(Xn,cYe),e(Xn,uS),e(uS,fYe),e(Xn,mYe),e(Xn,_S),e(_S,gYe),e(Xn,hYe),e(k,pYe),e(k,pg),e(pg,Coe),e(Coe,uYe),e(pg,_Ye),e(pg,bS),e(bS,bYe),e(pg,vYe),e(k,FYe),e(k,zn),e(zn,woe),e(woe,TYe),e(zn,MYe),e(zn,vS),e(vS,EYe),e(zn,CYe),e(zn,FS),e(FS,wYe),e(zn,AYe),e(k,yYe),e(k,Qn),e(Qn,Aoe),e(Aoe,LYe),e(Qn,xYe),e(Qn,TS),e(TS,$Ye),e(Qn,kYe),e(Qn,MS),e(MS,SYe),e(Qn,RYe),e(k,BYe),e(k,Wn),e(Wn,yoe),e(yoe,PYe),e(Wn,IYe),e(Wn,ES),e(ES,qYe),e(Wn,NYe),e(Wn,CS),e(CS,jYe),e(Wn,DYe),e(k,GYe),e(k,Hn),e(Hn,Loe),e(Loe,OYe),e(Hn,VYe),e(Hn,wS),e(wS,XYe),e(Hn,zYe),e(Hn,AS),e(AS,QYe),e(Hn,WYe),e(k,HYe),e(k,Un),e(Un,xoe),e(xoe,UYe),e(Un,JYe),e(Un,yS),e(yS,YYe),e(Un,KYe),e(Un,LS),e(LS,ZYe),e(Un,eKe),e(k,oKe),e(k,ug),e(ug,$oe),e($oe,rKe),e(ug,tKe),e(ug,xS),e(xS,aKe),e(ug,nKe),e(k,sKe),e(k,Jn),e(Jn,koe),e(koe,lKe),e(Jn,iKe),e(Jn,$S),e($S,dKe),e(Jn,cKe),e(Jn,kS),e(kS,fKe),e(Jn,mKe),e(k,gKe),e(k,Yn),e(Yn,Soe),e(Soe,hKe),e(Yn,pKe),e(Yn,SS),e(SS,uKe),e(Yn,_Ke),e(Yn,RS),e(RS,bKe),e(Yn,vKe),e(k,FKe),e(k,Kn),e(Kn,Roe),e(Roe,TKe),e(Kn,MKe),e(Kn,BS),e(BS,EKe),e(Kn,CKe),e(Kn,PS),e(PS,wKe),e(Kn,AKe),e(k,yKe),e(k,Zn),e(Zn,Boe),e(Boe,LKe),e(Zn,xKe),e(Zn,IS),e(IS,$Ke),e(Zn,kKe),e(Zn,qS),e(qS,SKe),e(Zn,RKe),e(k,BKe),e(k,es),e(es,Poe),e(Poe,PKe),e(es,IKe),e(es,NS),e(NS,qKe),e(es,NKe),e(es,jS),e(jS,jKe),e(es,DKe),e(k,GKe),e(k,os),e(os,Ioe),e(Ioe,OKe),e(os,VKe),e(os,DS),e(DS,XKe),e(os,zKe),e(os,GS),e(GS,QKe),e(os,WKe),e(k,HKe),e(k,_g),e(_g,qoe),e(qoe,UKe),e(_g,JKe),e(_g,OS),e(OS,YKe),e(_g,KKe),e(k,ZKe),e(k,rs),e(rs,Noe),e(Noe,eZe),e(rs,oZe),e(rs,VS),e(VS,rZe),e(rs,tZe),e(rs,XS),e(XS,aZe),e(rs,nZe),e(k,sZe),e(k,bg),e(bg,joe),e(joe,lZe),e(bg,iZe),e(bg,zS),e(zS,dZe),e(bg,cZe),e(k,fZe),e(k,vg),e(vg,Doe),e(Doe,mZe),e(vg,gZe),e(vg,QS),e(QS,hZe),e(vg,pZe),e(k,uZe),e(k,ts),e(ts,Goe),e(Goe,_Ze),e(ts,bZe),e(ts,WS),e(WS,vZe),e(ts,FZe),e(ts,HS),e(HS,TZe),e(ts,MZe),e(k,EZe),e(k,as),e(as,Ooe),e(Ooe,CZe),e(as,wZe),e(as,US),e(US,AZe),e(as,yZe),e(as,JS),e(JS,LZe),e(as,xZe),e(k,$Ze),e(k,ns),e(ns,Voe),e(Voe,kZe),e(ns,SZe),e(ns,YS),e(YS,RZe),e(ns,BZe),e(ns,KS),e(KS,PZe),e(ns,IZe),e(k,qZe),e(k,Fg),e(Fg,Xoe),e(Xoe,NZe),e(Fg,jZe),e(Fg,ZS),e(ZS,DZe),e(Fg,GZe),e(k,OZe),e(k,ss),e(ss,zoe),e(zoe,VZe),e(ss,XZe),e(ss,eR),e(eR,zZe),e(ss,QZe),e(ss,oR),e(oR,WZe),e(ss,HZe),e(k,UZe),e(k,ls),e(ls,Qoe),e(Qoe,JZe),e(ls,YZe),e(ls,rR),e(rR,KZe),e(ls,ZZe),e(ls,tR),e(tR,eeo),e(ls,oeo),e(k,reo),e(k,is),e(is,Woe),e(Woe,teo),e(is,aeo),e(is,aR),e(aR,neo),e(is,seo),e(is,nR),e(nR,leo),e(is,ieo),e(k,deo),e(k,ds),e(ds,Hoe),e(Hoe,ceo),e(ds,feo),e(ds,sR),e(sR,meo),e(ds,geo),e(ds,lR),e(lR,heo),e(ds,peo),e(k,ueo),e(k,cs),e(cs,Uoe),e(Uoe,_eo),e(cs,beo),e(cs,iR),e(iR,veo),e(cs,Feo),e(cs,dR),e(dR,Teo),e(cs,Meo),e(k,Eeo),e(k,fs),e(fs,Joe),e(Joe,Ceo),e(fs,weo),e(fs,cR),e(cR,Aeo),e(fs,yeo),e(fs,fR),e(fR,Leo),e(fs,xeo),e(k,$eo),e(k,Tg),e(Tg,Yoe),e(Yoe,keo),e(Tg,Seo),e(Tg,mR),e(mR,Reo),e(Tg,Beo),e(k,Peo),e(k,Mg),e(Mg,Koe),e(Koe,Ieo),e(Mg,qeo),e(Mg,gR),e(gR,Neo),e(Mg,jeo),e(k,Deo),e(k,Eg),e(Eg,Zoe),e(Zoe,Geo),e(Eg,Oeo),e(Eg,hR),e(hR,Veo),e(Eg,Xeo),e(k,zeo),e(k,Cg),e(Cg,ere),e(ere,Qeo),e(Cg,Weo),e(Cg,pR),e(pR,Heo),e(Cg,Ueo),e(k,Jeo),e(k,ms),e(ms,ore),e(ore,Yeo),e(ms,Keo),e(ms,uR),e(uR,Zeo),e(ms,eoo),e(ms,_R),e(_R,ooo),e(ms,roo),e(k,too),e(k,wg),e(wg,rre),e(rre,aoo),e(wg,noo),e(wg,bR),e(bR,soo),e(wg,loo),e(k,ioo),e(k,gs),e(gs,tre),e(tre,doo),e(gs,coo),e(gs,vR),e(vR,foo),e(gs,moo),e(gs,FR),e(FR,goo),e(gs,hoo),e(k,poo),e(k,hs),e(hs,are),e(are,uoo),e(hs,_oo),e(hs,TR),e(TR,boo),e(hs,voo),e(hs,MR),e(MR,Foo),e(hs,Too),e(k,Moo),e(k,ps),e(ps,nre),e(nre,Eoo),e(ps,Coo),e(ps,ER),e(ER,woo),e(ps,Aoo),e(ps,CR),e(CR,yoo),e(ps,Loo),e(k,xoo),e(k,us),e(us,sre),e(sre,$oo),e(us,koo),e(us,wR),e(wR,Soo),e(us,Roo),e(us,AR),e(AR,Boo),e(us,Poo),e(k,Ioo),e(k,_s),e(_s,lre),e(lre,qoo),e(_s,Noo),e(_s,yR),e(yR,joo),e(_s,Doo),e(_s,LR),e(LR,Goo),e(_s,Ooo),e(k,Voo),e(k,bs),e(bs,ire),e(ire,Xoo),e(bs,zoo),e(bs,xR),e(xR,Qoo),e(bs,Woo),e(bs,$R),e($R,Hoo),e(bs,Uoo),e(k,Joo),e(k,Ag),e(Ag,dre),e(dre,Yoo),e(Ag,Koo),e(Ag,kR),e(kR,Zoo),e(Ag,ero),e(k,oro),e(k,yg),e(yg,cre),e(cre,rro),e(yg,tro),e(yg,SR),e(SR,aro),e(yg,nro),e(k,sro),e(k,vs),e(vs,fre),e(fre,lro),e(vs,iro),e(vs,RR),e(RR,dro),e(vs,cro),e(vs,BR),e(BR,fro),e(vs,mro),e(k,gro),e(k,Fs),e(Fs,mre),e(mre,hro),e(Fs,pro),e(Fs,PR),e(PR,uro),e(Fs,_ro),e(Fs,IR),e(IR,bro),e(Fs,vro),e(k,Fro),e(k,Ts),e(Ts,gre),e(gre,Tro),e(Ts,Mro),e(Ts,qR),e(qR,Ero),e(Ts,Cro),e(Ts,NR),e(NR,wro),e(Ts,Aro),e(k,yro),e(k,Lg),e(Lg,hre),e(hre,Lro),e(Lg,xro),e(Lg,jR),e(jR,$ro),e(Lg,kro),e(k,Sro),e(k,xg),e(xg,pre),e(pre,Rro),e(xg,Bro),e(xg,DR),e(DR,Pro),e(xg,Iro),e(k,qro),e(k,$g),e($g,ure),e(ure,Nro),e($g,jro),e($g,GR),e(GR,Dro),e($g,Gro),e(k,Oro),e(k,Ms),e(Ms,_re),e(_re,Vro),e(Ms,Xro),e(Ms,OR),e(OR,zro),e(Ms,Qro),e(Ms,VR),e(VR,Wro),e(Ms,Hro),e(k,Uro),e(k,kg),e(kg,bre),e(bre,Jro),e(kg,Yro),e(kg,XR),e(XR,Kro),e(kg,Zro),e(k,eto),e(k,Sg),e(Sg,vre),e(vre,oto),e(Sg,rto),e(Sg,zR),e(zR,tto),e(Sg,ato),e(k,nto),e(k,Es),e(Es,Fre),e(Fre,sto),e(Es,lto),e(Es,QR),e(QR,ito),e(Es,dto),e(Es,WR),e(WR,cto),e(Es,fto),e(k,mto),e(k,Rg),e(Rg,Tre),e(Tre,gto),e(Rg,hto),e(Rg,HR),e(HR,pto),e(Rg,uto),e(k,_to),e(k,Bg),e(Bg,Mre),e(Mre,bto),e(Bg,vto),e(Bg,UR),e(UR,Fto),e(Bg,Tto),e(k,Mto),e(k,Cs),e(Cs,Ere),e(Ere,Eto),e(Cs,Cto),e(Cs,JR),e(JR,wto),e(Cs,Ato),e(Cs,YR),e(YR,yto),e(Cs,Lto),e(k,xto),e(k,ws),e(ws,Cre),e(Cre,$to),e(ws,kto),e(ws,KR),e(KR,Sto),e(ws,Rto),e(ws,ZR),e(ZR,Bto),e(ws,Pto),e(k,Ito),e(k,As),e(As,wre),e(wre,qto),e(As,Nto),e(As,eB),e(eB,jto),e(As,Dto),e(As,oB),e(oB,Gto),e(As,Oto),e(k,Vto),e(k,ys),e(ys,Are),e(Are,Xto),e(ys,zto),e(ys,rB),e(rB,Qto),e(ys,Wto),e(ys,tB),e(tB,Hto),e(ys,Uto),e(Tr,Jto),M(Pg,Tr,null),e(Eo,Yto),e(Eo,Ig),M(L3,Ig,null),e(Ig,Kto),e(Ig,yre),e(yre,Zto),b(f,DRe,_),b(f,gi,_),e(gi,qg),e(qg,Lre),M(x3,Lre,null),e(gi,eao),e(gi,xre),e(xre,oao),b(f,GRe,_),b(f,Co,_),M($3,Co,null),e(Co,rao),e(Co,k3),e(k3,tao),e(k3,aB),e(aB,aao),e(k3,nao),e(Co,sao),e(Co,S3),e(S3,lao),e(S3,$re),e($re,iao),e(S3,dao),e(Co,cao),e(Co,Xe),M(R3,Xe,null),e(Xe,fao),e(Xe,kre),e(kre,mao),e(Xe,gao),e(Xe,Ta),e(Ta,hao),e(Ta,Sre),e(Sre,pao),e(Ta,uao),e(Ta,Rre),e(Rre,_ao),e(Ta,bao),e(Ta,Bre),e(Bre,vao),e(Ta,Fao),e(Xe,Tao),e(Xe,ae),e(ae,Ng),e(Ng,Pre),e(Pre,Mao),e(Ng,Eao),e(Ng,nB),e(nB,Cao),e(Ng,wao),e(ae,Aao),e(ae,jg),e(jg,Ire),e(Ire,yao),e(jg,Lao),e(jg,sB),e(sB,xao),e(jg,$ao),e(ae,kao),e(ae,Dg),e(Dg,qre),e(qre,Sao),e(Dg,Rao),e(Dg,lB),e(lB,Bao),e(Dg,Pao),e(ae,Iao),e(ae,Gg),e(Gg,Nre),e(Nre,qao),e(Gg,Nao),e(Gg,iB),e(iB,jao),e(Gg,Dao),e(ae,Gao),e(ae,Og),e(Og,jre),e(jre,Oao),e(Og,Vao),e(Og,dB),e(dB,Xao),e(Og,zao),e(ae,Qao),e(ae,Vg),e(Vg,Dre),e(Dre,Wao),e(Vg,Hao),e(Vg,cB),e(cB,Uao),e(Vg,Jao),e(ae,Yao),e(ae,Xg),e(Xg,Gre),e(Gre,Kao),e(Xg,Zao),e(Xg,fB),e(fB,eno),e(Xg,ono),e(ae,rno),e(ae,zg),e(zg,Ore),e(Ore,tno),e(zg,ano),e(zg,mB),e(mB,nno),e(zg,sno),e(ae,lno),e(ae,Qg),e(Qg,Vre),e(Vre,ino),e(Qg,dno),e(Qg,gB),e(gB,cno),e(Qg,fno),e(ae,mno),e(ae,Wg),e(Wg,Xre),e(Xre,gno),e(Wg,hno),e(Wg,hB),e(hB,pno),e(Wg,uno),e(ae,_no),e(ae,Hg),e(Hg,zre),e(zre,bno),e(Hg,vno),e(Hg,pB),e(pB,Fno),e(Hg,Tno),e(ae,Mno),e(ae,Ug),e(Ug,Qre),e(Qre,Eno),e(Ug,Cno),e(Ug,uB),e(uB,wno),e(Ug,Ano),e(ae,yno),e(ae,Jg),e(Jg,Wre),e(Wre,Lno),e(Jg,xno),e(Jg,_B),e(_B,$no),e(Jg,kno),e(ae,Sno),e(ae,Yg),e(Yg,Hre),e(Hre,Rno),e(Yg,Bno),e(Yg,bB),e(bB,Pno),e(Yg,Ino),e(ae,qno),e(ae,Kg),e(Kg,Ure),e(Ure,Nno),e(Kg,jno),e(Kg,vB),e(vB,Dno),e(Kg,Gno),e(ae,Ono),e(ae,Zg),e(Zg,Jre),e(Jre,Vno),e(Zg,Xno),e(Zg,FB),e(FB,zno),e(Zg,Qno),e(ae,Wno),e(ae,eh),e(eh,Yre),e(Yre,Hno),e(eh,Uno),e(eh,TB),e(TB,Jno),e(eh,Yno),e(ae,Kno),e(ae,oh),e(oh,Kre),e(Kre,Zno),e(oh,eso),e(oh,MB),e(MB,oso),e(oh,rso),e(ae,tso),e(ae,rh),e(rh,Zre),e(Zre,aso),e(rh,nso),e(rh,EB),e(EB,sso),e(rh,lso),e(ae,iso),e(ae,th),e(th,ete),e(ete,dso),e(th,cso),e(th,CB),e(CB,fso),e(th,mso),e(ae,gso),e(ae,ah),e(ah,ote),e(ote,hso),e(ah,pso),e(ah,wB),e(wB,uso),e(ah,_so),e(ae,bso),e(ae,nh),e(nh,rte),e(rte,vso),e(nh,Fso),e(nh,AB),e(AB,Tso),e(nh,Mso),e(ae,Eso),e(ae,sh),e(sh,tte),e(tte,Cso),e(sh,wso),e(sh,yB),e(yB,Aso),e(sh,yso),e(Xe,Lso),M(lh,Xe,null),e(Xe,xso),M(ih,Xe,null),e(Co,$so),e(Co,dh),M(B3,dh,null),e(dh,kso),e(dh,ate),e(ate,Sso),b(f,ORe,_),b(f,hi,_),e(hi,ch),e(ch,nte),M(P3,nte,null),e(hi,Rso),e(hi,ste),e(ste,Bso),b(f,VRe,_),b(f,wo,_),M(I3,wo,null),e(wo,Pso),e(wo,q3),e(q3,Iso),e(q3,LB),e(LB,qso),e(q3,Nso),e(wo,jso),e(wo,N3),e(N3,Dso),e(N3,lte),e(lte,Gso),e(N3,Oso),e(wo,Vso),e(wo,ze),M(j3,ze,null),e(ze,Xso),e(ze,ite),e(ite,zso),e(ze,Qso),e(ze,pi),e(pi,Wso),e(pi,dte),e(dte,Hso),e(pi,Uso),e(pi,cte),e(cte,Jso),e(pi,Yso),e(ze,Kso),e(ze,be),e(be,fh),e(fh,fte),e(fte,Zso),e(fh,elo),e(fh,xB),e(xB,olo),e(fh,rlo),e(be,tlo),e(be,mh),e(mh,mte),e(mte,alo),e(mh,nlo),e(mh,$B),e($B,slo),e(mh,llo),e(be,ilo),e(be,gh),e(gh,gte),e(gte,dlo),e(gh,clo),e(gh,kB),e(kB,flo),e(gh,mlo),e(be,glo),e(be,hh),e(hh,hte),e(hte,hlo),e(hh,plo),e(hh,SB),e(SB,ulo),e(hh,_lo),e(be,blo),e(be,ph),e(ph,pte),e(pte,vlo),e(ph,Flo),e(ph,RB),e(RB,Tlo),e(ph,Mlo),e(be,Elo),e(be,uh),e(uh,ute),e(ute,Clo),e(uh,wlo),e(uh,BB),e(BB,Alo),e(uh,ylo),e(be,Llo),e(be,_h),e(_h,_te),e(_te,xlo),e(_h,$lo),e(_h,PB),e(PB,klo),e(_h,Slo),e(be,Rlo),e(be,bh),e(bh,bte),e(bte,Blo),e(bh,Plo),e(bh,IB),e(IB,Ilo),e(bh,qlo),e(be,Nlo),e(be,vh),e(vh,vte),e(vte,jlo),e(vh,Dlo),e(vh,qB),e(qB,Glo),e(vh,Olo),e(be,Vlo),e(be,Fh),e(Fh,Fte),e(Fte,Xlo),e(Fh,zlo),e(Fh,NB),e(NB,Qlo),e(Fh,Wlo),e(be,Hlo),e(be,Th),e(Th,Tte),e(Tte,Ulo),e(Th,Jlo),e(Th,jB),e(jB,Ylo),e(Th,Klo),e(be,Zlo),e(be,Mh),e(Mh,Mte),e(Mte,eio),e(Mh,oio),e(Mh,DB),e(DB,rio),e(Mh,tio),e(be,aio),e(be,Eh),e(Eh,Ete),e(Ete,nio),e(Eh,sio),e(Eh,GB),e(GB,lio),e(Eh,iio),e(be,dio),e(be,Ch),e(Ch,Cte),e(Cte,cio),e(Ch,fio),e(Ch,OB),e(OB,mio),e(Ch,gio),e(ze,hio),M(wh,ze,null),e(ze,pio),M(Ah,ze,null),e(wo,uio),e(wo,yh),M(D3,yh,null),e(yh,_io),e(yh,wte),e(wte,bio),b(f,XRe,_),b(f,ui,_),e(ui,Lh),e(Lh,Ate),M(G3,Ate,null),e(ui,vio),e(ui,yte),e(yte,Fio),b(f,zRe,_),b(f,Ao,_),M(O3,Ao,null),e(Ao,Tio),e(Ao,_i),e(_i,Mio),e(_i,VB),e(VB,Eio),e(_i,Cio),e(_i,XB),e(XB,wio),e(_i,Aio),e(Ao,yio),e(Ao,V3),e(V3,Lio),e(V3,Lte),e(Lte,xio),e(V3,$io),e(Ao,kio),e(Ao,Kr),M(X3,Kr,null),e(Kr,Sio),e(Kr,xte),e(xte,Rio),e(Kr,Bio),e(Kr,bi),e(bi,Pio),e(bi,$te),e($te,Iio),e(bi,qio),e(bi,zB),e(zB,Nio),e(bi,jio),e(Kr,Dio),M(xh,Kr,null),e(Ao,Gio),e(Ao,Qe),M(z3,Qe,null),e(Qe,Oio),e(Qe,kte),e(kte,Vio),e(Qe,Xio),e(Qe,Ma),e(Ma,zio),e(Ma,Ste),e(Ste,Qio),e(Ma,Wio),e(Ma,Rte),e(Rte,Hio),e(Ma,Uio),e(Ma,Bte),e(Bte,Jio),e(Ma,Yio),e(Qe,Kio),e(Qe,x),e(x,$h),e($h,Pte),e(Pte,Zio),e($h,edo),e($h,QB),e(QB,odo),e($h,rdo),e(x,tdo),e(x,kh),e(kh,Ite),e(Ite,ado),e(kh,ndo),e(kh,WB),e(WB,sdo),e(kh,ldo),e(x,ido),e(x,Sh),e(Sh,qte),e(qte,ddo),e(Sh,cdo),e(Sh,HB),e(HB,fdo),e(Sh,mdo),e(x,gdo),e(x,Rh),e(Rh,Nte),e(Nte,hdo),e(Rh,pdo),e(Rh,UB),e(UB,udo),e(Rh,_do),e(x,bdo),e(x,Bh),e(Bh,jte),e(jte,vdo),e(Bh,Fdo),e(Bh,JB),e(JB,Tdo),e(Bh,Mdo),e(x,Edo),e(x,Ph),e(Ph,Dte),e(Dte,Cdo),e(Ph,wdo),e(Ph,YB),e(YB,Ado),e(Ph,ydo),e(x,Ldo),e(x,Ih),e(Ih,Gte),e(Gte,xdo),e(Ih,$do),e(Ih,KB),e(KB,kdo),e(Ih,Sdo),e(x,Rdo),e(x,qh),e(qh,Ote),e(Ote,Bdo),e(qh,Pdo),e(qh,ZB),e(ZB,Ido),e(qh,qdo),e(x,Ndo),e(x,Nh),e(Nh,Vte),e(Vte,jdo),e(Nh,Ddo),e(Nh,eP),e(eP,Gdo),e(Nh,Odo),e(x,Vdo),e(x,jh),e(jh,Xte),e(Xte,Xdo),e(jh,zdo),e(jh,oP),e(oP,Qdo),e(jh,Wdo),e(x,Hdo),e(x,Dh),e(Dh,zte),e(zte,Udo),e(Dh,Jdo),e(Dh,rP),e(rP,Ydo),e(Dh,Kdo),e(x,Zdo),e(x,Gh),e(Gh,Qte),e(Qte,eco),e(Gh,oco),e(Gh,tP),e(tP,rco),e(Gh,tco),e(x,aco),e(x,Oh),e(Oh,Wte),e(Wte,nco),e(Oh,sco),e(Oh,aP),e(aP,lco),e(Oh,ico),e(x,dco),e(x,Vh),e(Vh,Hte),e(Hte,cco),e(Vh,fco),e(Vh,nP),e(nP,mco),e(Vh,gco),e(x,hco),e(x,Xh),e(Xh,Ute),e(Ute,pco),e(Xh,uco),e(Xh,sP),e(sP,_co),e(Xh,bco),e(x,vco),e(x,zh),e(zh,Jte),e(Jte,Fco),e(zh,Tco),e(zh,lP),e(lP,Mco),e(zh,Eco),e(x,Cco),e(x,Qh),e(Qh,Yte),e(Yte,wco),e(Qh,Aco),e(Qh,iP),e(iP,yco),e(Qh,Lco),e(x,xco),e(x,Wh),e(Wh,Kte),e(Kte,$co),e(Wh,kco),e(Wh,dP),e(dP,Sco),e(Wh,Rco),e(x,Bco),e(x,Hh),e(Hh,Zte),e(Zte,Pco),e(Hh,Ico),e(Hh,cP),e(cP,qco),e(Hh,Nco),e(x,jco),e(x,Uh),e(Uh,eae),e(eae,Dco),e(Uh,Gco),e(Uh,fP),e(fP,Oco),e(Uh,Vco),e(x,Xco),e(x,Jh),e(Jh,oae),e(oae,zco),e(Jh,Qco),e(Jh,mP),e(mP,Wco),e(Jh,Hco),e(x,Uco),e(x,Yh),e(Yh,rae),e(rae,Jco),e(Yh,Yco),e(Yh,gP),e(gP,Kco),e(Yh,Zco),e(x,efo),e(x,Kh),e(Kh,tae),e(tae,ofo),e(Kh,rfo),e(Kh,hP),e(hP,tfo),e(Kh,afo),e(x,nfo),e(x,Zh),e(Zh,aae),e(aae,sfo),e(Zh,lfo),e(Zh,pP),e(pP,ifo),e(Zh,dfo),e(x,cfo),e(x,ep),e(ep,nae),e(nae,ffo),e(ep,mfo),e(ep,uP),e(uP,gfo),e(ep,hfo),e(x,pfo),e(x,op),e(op,sae),e(sae,ufo),e(op,_fo),e(op,_P),e(_P,bfo),e(op,vfo),e(x,Ffo),e(x,rp),e(rp,lae),e(lae,Tfo),e(rp,Mfo),e(rp,bP),e(bP,Efo),e(rp,Cfo),e(x,wfo),e(x,tp),e(tp,iae),e(iae,Afo),e(tp,yfo),e(tp,vP),e(vP,Lfo),e(tp,xfo),e(x,$fo),e(x,ap),e(ap,dae),e(dae,kfo),e(ap,Sfo),e(ap,FP),e(FP,Rfo),e(ap,Bfo),e(x,Pfo),e(x,np),e(np,cae),e(cae,Ifo),e(np,qfo),e(np,TP),e(TP,Nfo),e(np,jfo),e(x,Dfo),e(x,Ls),e(Ls,fae),e(fae,Gfo),e(Ls,Ofo),e(Ls,MP),e(MP,Vfo),e(Ls,Xfo),e(Ls,EP),e(EP,zfo),e(Ls,Qfo),e(x,Wfo),e(x,sp),e(sp,mae),e(mae,Hfo),e(sp,Ufo),e(sp,CP),e(CP,Jfo),e(sp,Yfo),e(x,Kfo),e(x,lp),e(lp,gae),e(gae,Zfo),e(lp,emo),e(lp,wP),e(wP,omo),e(lp,rmo),e(x,tmo),e(x,ip),e(ip,hae),e(hae,amo),e(ip,nmo),e(ip,AP),e(AP,smo),e(ip,lmo),e(x,imo),e(x,dp),e(dp,pae),e(pae,dmo),e(dp,cmo),e(dp,yP),e(yP,fmo),e(dp,mmo),e(x,gmo),e(x,cp),e(cp,uae),e(uae,hmo),e(cp,pmo),e(cp,LP),e(LP,umo),e(cp,_mo),e(x,bmo),e(x,fp),e(fp,_ae),e(_ae,vmo),e(fp,Fmo),e(fp,xP),e(xP,Tmo),e(fp,Mmo),e(x,Emo),e(x,mp),e(mp,bae),e(bae,Cmo),e(mp,wmo),e(mp,$P),e($P,Amo),e(mp,ymo),e(x,Lmo),e(x,gp),e(gp,vae),e(vae,xmo),e(gp,$mo),e(gp,kP),e(kP,kmo),e(gp,Smo),e(x,Rmo),e(x,hp),e(hp,Fae),e(Fae,Bmo),e(hp,Pmo),e(hp,SP),e(SP,Imo),e(hp,qmo),e(x,Nmo),e(x,pp),e(pp,Tae),e(Tae,jmo),e(pp,Dmo),e(pp,RP),e(RP,Gmo),e(pp,Omo),e(x,Vmo),e(x,up),e(up,Mae),e(Mae,Xmo),e(up,zmo),e(up,BP),e(BP,Qmo),e(up,Wmo),e(x,Hmo),e(x,_p),e(_p,Eae),e(Eae,Umo),e(_p,Jmo),e(_p,PP),e(PP,Ymo),e(_p,Kmo),e(x,Zmo),e(x,bp),e(bp,Cae),e(Cae,ego),e(bp,ogo),e(bp,IP),e(IP,rgo),e(bp,tgo),e(x,ago),e(x,vp),e(vp,wae),e(wae,ngo),e(vp,sgo),e(vp,qP),e(qP,lgo),e(vp,igo),e(x,dgo),e(x,Fp),e(Fp,Aae),e(Aae,cgo),e(Fp,fgo),e(Fp,NP),e(NP,mgo),e(Fp,ggo),e(x,hgo),e(x,Tp),e(Tp,yae),e(yae,pgo),e(Tp,ugo),e(Tp,jP),e(jP,_go),e(Tp,bgo),e(x,vgo),e(x,Mp),e(Mp,Lae),e(Lae,Fgo),e(Mp,Tgo),e(Mp,DP),e(DP,Mgo),e(Mp,Ego),e(x,Cgo),e(x,Ep),e(Ep,xae),e(xae,wgo),e(Ep,Ago),e(Ep,GP),e(GP,ygo),e(Ep,Lgo),e(x,xgo),e(x,Cp),e(Cp,$ae),e($ae,$go),e(Cp,kgo),e(Cp,OP),e(OP,Sgo),e(Cp,Rgo),e(x,Bgo),e(x,wp),e(wp,kae),e(kae,Pgo),e(wp,Igo),e(wp,VP),e(VP,qgo),e(wp,Ngo),e(x,jgo),e(x,Ap),e(Ap,Sae),e(Sae,Dgo),e(Ap,Ggo),e(Ap,XP),e(XP,Ogo),e(Ap,Vgo),e(x,Xgo),e(x,yp),e(yp,Rae),e(Rae,zgo),e(yp,Qgo),e(yp,zP),e(zP,Wgo),e(yp,Hgo),e(x,Ugo),e(x,Lp),e(Lp,Bae),e(Bae,Jgo),e(Lp,Ygo),e(Lp,QP),e(QP,Kgo),e(Lp,Zgo),e(x,eho),e(x,xp),e(xp,Pae),e(Pae,oho),e(xp,rho),e(xp,WP),e(WP,tho),e(xp,aho),e(x,nho),e(x,$p),e($p,Iae),e(Iae,sho),e($p,lho),e($p,HP),e(HP,iho),e($p,dho),e(x,cho),e(x,kp),e(kp,qae),e(qae,fho),e(kp,mho),e(kp,UP),e(UP,gho),e(kp,hho),e(x,pho),e(x,Sp),e(Sp,Nae),e(Nae,uho),e(Sp,_ho),e(Sp,JP),e(JP,bho),e(Sp,vho),e(x,Fho),e(x,Rp),e(Rp,jae),e(jae,Tho),e(Rp,Mho),e(Rp,YP),e(YP,Eho),e(Rp,Cho),e(x,who),e(x,Bp),e(Bp,Dae),e(Dae,Aho),e(Bp,yho),e(Bp,KP),e(KP,Lho),e(Bp,xho),e(x,$ho),e(x,Pp),e(Pp,Gae),e(Gae,kho),e(Pp,Sho),e(Pp,ZP),e(ZP,Rho),e(Pp,Bho),e(x,Pho),e(x,Ip),e(Ip,Oae),e(Oae,Iho),e(Ip,qho),e(Ip,eI),e(eI,Nho),e(Ip,jho),e(x,Dho),e(x,qp),e(qp,Vae),e(Vae,Gho),e(qp,Oho),e(qp,oI),e(oI,Vho),e(qp,Xho),e(x,zho),e(x,Np),e(Np,Xae),e(Xae,Qho),e(Np,Who),e(Np,rI),e(rI,Hho),e(Np,Uho),e(x,Jho),e(x,jp),e(jp,zae),e(zae,Yho),e(jp,Kho),e(jp,tI),e(tI,Zho),e(jp,epo),e(x,opo),e(x,Dp),e(Dp,Qae),e(Qae,rpo),e(Dp,tpo),e(Dp,aI),e(aI,apo),e(Dp,npo),e(x,spo),e(x,Gp),e(Gp,Wae),e(Wae,lpo),e(Gp,ipo),e(Gp,nI),e(nI,dpo),e(Gp,cpo),e(x,fpo),e(x,Op),e(Op,Hae),e(Hae,mpo),e(Op,gpo),e(Op,sI),e(sI,hpo),e(Op,ppo),e(x,upo),e(x,Vp),e(Vp,Uae),e(Uae,_po),e(Vp,bpo),e(Vp,lI),e(lI,vpo),e(Vp,Fpo),e(x,Tpo),e(x,Xp),e(Xp,Jae),e(Jae,Mpo),e(Xp,Epo),e(Xp,iI),e(iI,Cpo),e(Xp,wpo),e(x,Apo),e(x,zp),e(zp,Yae),e(Yae,ypo),e(zp,Lpo),e(zp,dI),e(dI,xpo),e(zp,$po),e(x,kpo),e(x,Qp),e(Qp,Kae),e(Kae,Spo),e(Qp,Rpo),e(Qp,cI),e(cI,Bpo),e(Qp,Ppo),e(x,Ipo),e(x,Wp),e(Wp,Zae),e(Zae,qpo),e(Wp,Npo),e(Wp,fI),e(fI,jpo),e(Wp,Dpo),e(x,Gpo),e(x,Hp),e(Hp,ene),e(ene,Opo),e(Hp,Vpo),e(Hp,mI),e(mI,Xpo),e(Hp,zpo),e(x,Qpo),e(x,Up),e(Up,one),e(one,Wpo),e(Up,Hpo),e(Up,gI),e(gI,Upo),e(Up,Jpo),e(x,Ypo),e(x,Jp),e(Jp,rne),e(rne,Kpo),e(Jp,Zpo),e(Jp,hI),e(hI,euo),e(Jp,ouo),e(x,ruo),e(x,Yp),e(Yp,tne),e(tne,tuo),e(Yp,auo),e(Yp,pI),e(pI,nuo),e(Yp,suo),e(x,luo),e(x,Kp),e(Kp,ane),e(ane,iuo),e(Kp,duo),e(Kp,uI),e(uI,cuo),e(Kp,fuo),e(x,muo),e(x,Zp),e(Zp,nne),e(nne,guo),e(Zp,huo),e(Zp,_I),e(_I,puo),e(Zp,uuo),e(x,_uo),e(x,eu),e(eu,sne),e(sne,buo),e(eu,vuo),e(eu,bI),e(bI,Fuo),e(eu,Tuo),e(x,Muo),e(x,ou),e(ou,lne),e(lne,Euo),e(ou,Cuo),e(ou,vI),e(vI,wuo),e(ou,Auo),e(x,yuo),e(x,ru),e(ru,ine),e(ine,Luo),e(ru,xuo),e(ru,FI),e(FI,$uo),e(ru,kuo),e(x,Suo),e(x,tu),e(tu,dne),e(dne,Ruo),e(tu,Buo),e(tu,TI),e(TI,Puo),e(tu,Iuo),e(x,quo),e(x,au),e(au,cne),e(cne,Nuo),e(au,juo),e(au,MI),e(MI,Duo),e(au,Guo),e(x,Ouo),e(x,nu),e(nu,fne),e(fne,Vuo),e(nu,Xuo),e(nu,EI),e(EI,zuo),e(nu,Quo),e(x,Wuo),e(x,su),e(su,mne),e(mne,Huo),e(su,Uuo),e(su,CI),e(CI,Juo),e(su,Yuo),e(x,Kuo),e(x,lu),e(lu,gne),e(gne,Zuo),e(lu,e_o),e(lu,wI),e(wI,o_o),e(lu,r_o),e(x,t_o),e(x,iu),e(iu,hne),e(hne,a_o),e(iu,n_o),e(iu,AI),e(AI,s_o),e(iu,l_o),e(x,i_o),e(x,du),e(du,pne),e(pne,d_o),e(du,c_o),e(du,yI),e(yI,f_o),e(du,m_o),e(x,g_o),e(x,cu),e(cu,une),e(une,h_o),e(cu,p_o),e(cu,LI),e(LI,u_o),e(cu,__o),e(x,b_o),e(x,fu),e(fu,_ne),e(_ne,v_o),e(fu,F_o),e(fu,xI),e(xI,T_o),e(fu,M_o),e(x,E_o),e(x,mu),e(mu,bne),e(bne,C_o),e(mu,w_o),e(mu,$I),e($I,A_o),e(mu,y_o),e(x,L_o),e(x,gu),e(gu,vne),e(vne,x_o),e(gu,$_o),e(gu,kI),e(kI,k_o),e(gu,S_o),e(x,R_o),e(x,hu),e(hu,Fne),e(Fne,B_o),e(hu,P_o),e(hu,SI),e(SI,I_o),e(hu,q_o),e(Qe,N_o),e(Qe,pu),e(pu,j_o),e(pu,Tne),e(Tne,D_o),e(pu,G_o),e(pu,Mne),e(Mne,O_o),e(Qe,V_o),M(uu,Qe,null),b(f,QRe,_),b(f,vi,_),e(vi,_u),e(_u,Ene),M(Q3,Ene,null),e(vi,X_o),e(vi,Cne),e(Cne,z_o),b(f,WRe,_),b(f,yo,_),M(W3,yo,null),e(yo,Q_o),e(yo,Fi),e(Fi,W_o),e(Fi,RI),e(RI,H_o),e(Fi,U_o),e(Fi,BI),e(BI,J_o),e(Fi,Y_o),e(yo,K_o),e(yo,H3),e(H3,Z_o),e(H3,wne),e(wne,e1o),e(H3,o1o),e(yo,r1o),e(yo,Zr),M(U3,Zr,null),e(Zr,t1o),e(Zr,Ane),e(Ane,a1o),e(Zr,n1o),e(Zr,Ti),e(Ti,s1o),e(Ti,yne),e(yne,l1o),e(Ti,i1o),e(Ti,PI),e(PI,d1o),e(Ti,c1o),e(Zr,f1o),M(bu,Zr,null),e(yo,m1o),e(yo,We),M(J3,We,null),e(We,g1o),e(We,Lne),e(Lne,h1o),e(We,p1o),e(We,Ea),e(Ea,u1o),e(Ea,xne),e(xne,_1o),e(Ea,b1o),e(Ea,$ne),e($ne,v1o),e(Ea,F1o),e(Ea,kne),e(kne,T1o),e(Ea,M1o),e(We,E1o),e(We,G),e(G,vu),e(vu,Sne),e(Sne,C1o),e(vu,w1o),e(vu,II),e(II,A1o),e(vu,y1o),e(G,L1o),e(G,Fu),e(Fu,Rne),e(Rne,x1o),e(Fu,$1o),e(Fu,qI),e(qI,k1o),e(Fu,S1o),e(G,R1o),e(G,Tu),e(Tu,Bne),e(Bne,B1o),e(Tu,P1o),e(Tu,NI),e(NI,I1o),e(Tu,q1o),e(G,N1o),e(G,Mu),e(Mu,Pne),e(Pne,j1o),e(Mu,D1o),e(Mu,jI),e(jI,G1o),e(Mu,O1o),e(G,V1o),e(G,Eu),e(Eu,Ine),e(Ine,X1o),e(Eu,z1o),e(Eu,DI),e(DI,Q1o),e(Eu,W1o),e(G,H1o),e(G,Cu),e(Cu,qne),e(qne,U1o),e(Cu,J1o),e(Cu,GI),e(GI,Y1o),e(Cu,K1o),e(G,Z1o),e(G,wu),e(wu,Nne),e(Nne,ebo),e(wu,obo),e(wu,OI),e(OI,rbo),e(wu,tbo),e(G,abo),e(G,Au),e(Au,jne),e(jne,nbo),e(Au,sbo),e(Au,VI),e(VI,lbo),e(Au,ibo),e(G,dbo),e(G,yu),e(yu,Dne),e(Dne,cbo),e(yu,fbo),e(yu,XI),e(XI,mbo),e(yu,gbo),e(G,hbo),e(G,Lu),e(Lu,Gne),e(Gne,pbo),e(Lu,ubo),e(Lu,zI),e(zI,_bo),e(Lu,bbo),e(G,vbo),e(G,xu),e(xu,One),e(One,Fbo),e(xu,Tbo),e(xu,QI),e(QI,Mbo),e(xu,Ebo),e(G,Cbo),e(G,$u),e($u,Vne),e(Vne,wbo),e($u,Abo),e($u,WI),e(WI,ybo),e($u,Lbo),e(G,xbo),e(G,ku),e(ku,Xne),e(Xne,$bo),e(ku,kbo),e(ku,HI),e(HI,Sbo),e(ku,Rbo),e(G,Bbo),e(G,Su),e(Su,zne),e(zne,Pbo),e(Su,Ibo),e(Su,UI),e(UI,qbo),e(Su,Nbo),e(G,jbo),e(G,Ru),e(Ru,Qne),e(Qne,Dbo),e(Ru,Gbo),e(Ru,JI),e(JI,Obo),e(Ru,Vbo),e(G,Xbo),e(G,Bu),e(Bu,Wne),e(Wne,zbo),e(Bu,Qbo),e(Bu,YI),e(YI,Wbo),e(Bu,Hbo),e(G,Ubo),e(G,Pu),e(Pu,Hne),e(Hne,Jbo),e(Pu,Ybo),e(Pu,KI),e(KI,Kbo),e(Pu,Zbo),e(G,e2o),e(G,Iu),e(Iu,Une),e(Une,o2o),e(Iu,r2o),e(Iu,ZI),e(ZI,t2o),e(Iu,a2o),e(G,n2o),e(G,qu),e(qu,Jne),e(Jne,s2o),e(qu,l2o),e(qu,eq),e(eq,i2o),e(qu,d2o),e(G,c2o),e(G,Nu),e(Nu,Yne),e(Yne,f2o),e(Nu,m2o),e(Nu,oq),e(oq,g2o),e(Nu,h2o),e(G,p2o),e(G,ju),e(ju,Kne),e(Kne,u2o),e(ju,_2o),e(ju,rq),e(rq,b2o),e(ju,v2o),e(G,F2o),e(G,Du),e(Du,Zne),e(Zne,T2o),e(Du,M2o),e(Du,tq),e(tq,E2o),e(Du,C2o),e(G,w2o),e(G,Gu),e(Gu,ese),e(ese,A2o),e(Gu,y2o),e(Gu,aq),e(aq,L2o),e(Gu,x2o),e(G,$2o),e(G,Ou),e(Ou,ose),e(ose,k2o),e(Ou,S2o),e(Ou,nq),e(nq,R2o),e(Ou,B2o),e(G,P2o),e(G,Vu),e(Vu,rse),e(rse,I2o),e(Vu,q2o),e(Vu,sq),e(sq,N2o),e(Vu,j2o),e(G,D2o),e(G,Xu),e(Xu,tse),e(tse,G2o),e(Xu,O2o),e(Xu,lq),e(lq,V2o),e(Xu,X2o),e(G,z2o),e(G,zu),e(zu,ase),e(ase,Q2o),e(zu,W2o),e(zu,iq),e(iq,H2o),e(zu,U2o),e(G,J2o),e(G,Qu),e(Qu,nse),e(nse,Y2o),e(Qu,K2o),e(Qu,dq),e(dq,Z2o),e(Qu,evo),e(G,ovo),e(G,Wu),e(Wu,sse),e(sse,rvo),e(Wu,tvo),e(Wu,cq),e(cq,avo),e(Wu,nvo),e(G,svo),e(G,Hu),e(Hu,lse),e(lse,lvo),e(Hu,ivo),e(Hu,fq),e(fq,dvo),e(Hu,cvo),e(G,fvo),e(G,Uu),e(Uu,ise),e(ise,mvo),e(Uu,gvo),e(Uu,mq),e(mq,hvo),e(Uu,pvo),e(G,uvo),e(G,Ju),e(Ju,dse),e(dse,_vo),e(Ju,bvo),e(Ju,gq),e(gq,vvo),e(Ju,Fvo),e(G,Tvo),e(G,Yu),e(Yu,cse),e(cse,Mvo),e(Yu,Evo),e(Yu,hq),e(hq,Cvo),e(Yu,wvo),e(G,Avo),e(G,Ku),e(Ku,fse),e(fse,yvo),e(Ku,Lvo),e(Ku,pq),e(pq,xvo),e(Ku,$vo),e(G,kvo),e(G,Zu),e(Zu,mse),e(mse,Svo),e(Zu,Rvo),e(Zu,uq),e(uq,Bvo),e(Zu,Pvo),e(G,Ivo),e(G,e_),e(e_,gse),e(gse,qvo),e(e_,Nvo),e(e_,_q),e(_q,jvo),e(e_,Dvo),e(G,Gvo),e(G,o_),e(o_,hse),e(hse,Ovo),e(o_,Vvo),e(o_,bq),e(bq,Xvo),e(o_,zvo),e(G,Qvo),e(G,r_),e(r_,pse),e(pse,Wvo),e(r_,Hvo),e(r_,vq),e(vq,Uvo),e(r_,Jvo),e(G,Yvo),e(G,t_),e(t_,use),e(use,Kvo),e(t_,Zvo),e(t_,Fq),e(Fq,eFo),e(t_,oFo),e(We,rFo),e(We,a_),e(a_,tFo),e(a_,_se),e(_se,aFo),e(a_,nFo),e(a_,bse),e(bse,sFo),e(We,lFo),M(n_,We,null),b(f,HRe,_),b(f,Mi,_),e(Mi,s_),e(s_,vse),M(Y3,vse,null),e(Mi,iFo),e(Mi,Fse),e(Fse,dFo),b(f,URe,_),b(f,Lo,_),M(K3,Lo,null),e(Lo,cFo),e(Lo,Ei),e(Ei,fFo),e(Ei,Tq),e(Tq,mFo),e(Ei,gFo),e(Ei,Mq),e(Mq,hFo),e(Ei,pFo),e(Lo,uFo),e(Lo,Z3),e(Z3,_Fo),e(Z3,Tse),e(Tse,bFo),e(Z3,vFo),e(Lo,FFo),e(Lo,et),M(ew,et,null),e(et,TFo),e(et,Mse),e(Mse,MFo),e(et,EFo),e(et,Ci),e(Ci,CFo),e(Ci,Ese),e(Ese,wFo),e(Ci,AFo),e(Ci,Eq),e(Eq,yFo),e(Ci,LFo),e(et,xFo),M(l_,et,null),e(Lo,$Fo),e(Lo,He),M(ow,He,null),e(He,kFo),e(He,Cse),e(Cse,SFo),e(He,RFo),e(He,Ca),e(Ca,BFo),e(Ca,wse),e(wse,PFo),e(Ca,IFo),e(Ca,Ase),e(Ase,qFo),e(Ca,NFo),e(Ca,yse),e(yse,jFo),e(Ca,DFo),e(He,GFo),e(He,z),e(z,i_),e(i_,Lse),e(Lse,OFo),e(i_,VFo),e(i_,Cq),e(Cq,XFo),e(i_,zFo),e(z,QFo),e(z,d_),e(d_,xse),e(xse,WFo),e(d_,HFo),e(d_,wq),e(wq,UFo),e(d_,JFo),e(z,YFo),e(z,c_),e(c_,$se),e($se,KFo),e(c_,ZFo),e(c_,Aq),e(Aq,e0o),e(c_,o0o),e(z,r0o),e(z,f_),e(f_,kse),e(kse,t0o),e(f_,a0o),e(f_,yq),e(yq,n0o),e(f_,s0o),e(z,l0o),e(z,m_),e(m_,Sse),e(Sse,i0o),e(m_,d0o),e(m_,Lq),e(Lq,c0o),e(m_,f0o),e(z,m0o),e(z,g_),e(g_,Rse),e(Rse,g0o),e(g_,h0o),e(g_,xq),e(xq,p0o),e(g_,u0o),e(z,_0o),e(z,h_),e(h_,Bse),e(Bse,b0o),e(h_,v0o),e(h_,$q),e($q,F0o),e(h_,T0o),e(z,M0o),e(z,p_),e(p_,Pse),e(Pse,E0o),e(p_,C0o),e(p_,kq),e(kq,w0o),e(p_,A0o),e(z,y0o),e(z,u_),e(u_,Ise),e(Ise,L0o),e(u_,x0o),e(u_,Sq),e(Sq,$0o),e(u_,k0o),e(z,S0o),e(z,__),e(__,qse),e(qse,R0o),e(__,B0o),e(__,Rq),e(Rq,P0o),e(__,I0o),e(z,q0o),e(z,b_),e(b_,Nse),e(Nse,N0o),e(b_,j0o),e(b_,Bq),e(Bq,D0o),e(b_,G0o),e(z,O0o),e(z,v_),e(v_,jse),e(jse,V0o),e(v_,X0o),e(v_,Pq),e(Pq,z0o),e(v_,Q0o),e(z,W0o),e(z,F_),e(F_,Dse),e(Dse,H0o),e(F_,U0o),e(F_,Iq),e(Iq,J0o),e(F_,Y0o),e(z,K0o),e(z,T_),e(T_,Gse),e(Gse,Z0o),e(T_,e6o),e(T_,qq),e(qq,o6o),e(T_,r6o),e(z,t6o),e(z,M_),e(M_,Ose),e(Ose,a6o),e(M_,n6o),e(M_,Nq),e(Nq,s6o),e(M_,l6o),e(z,i6o),e(z,E_),e(E_,Vse),e(Vse,d6o),e(E_,c6o),e(E_,jq),e(jq,f6o),e(E_,m6o),e(z,g6o),e(z,C_),e(C_,Xse),e(Xse,h6o),e(C_,p6o),e(C_,Dq),e(Dq,u6o),e(C_,_6o),e(z,b6o),e(z,w_),e(w_,zse),e(zse,v6o),e(w_,F6o),e(w_,Gq),e(Gq,T6o),e(w_,M6o),e(z,E6o),e(z,A_),e(A_,Qse),e(Qse,C6o),e(A_,w6o),e(A_,Oq),e(Oq,A6o),e(A_,y6o),e(z,L6o),e(z,y_),e(y_,Wse),e(Wse,x6o),e(y_,$6o),e(y_,Vq),e(Vq,k6o),e(y_,S6o),e(z,R6o),e(z,L_),e(L_,Hse),e(Hse,B6o),e(L_,P6o),e(L_,Xq),e(Xq,I6o),e(L_,q6o),e(z,N6o),e(z,x_),e(x_,Use),e(Use,j6o),e(x_,D6o),e(x_,zq),e(zq,G6o),e(x_,O6o),e(z,V6o),e(z,$_),e($_,Jse),e(Jse,X6o),e($_,z6o),e($_,Qq),e(Qq,Q6o),e($_,W6o),e(z,H6o),e(z,k_),e(k_,Yse),e(Yse,U6o),e(k_,J6o),e(k_,Wq),e(Wq,Y6o),e(k_,K6o),e(z,Z6o),e(z,S_),e(S_,Kse),e(Kse,eTo),e(S_,oTo),e(S_,Hq),e(Hq,rTo),e(S_,tTo),e(z,aTo),e(z,R_),e(R_,Zse),e(Zse,nTo),e(R_,sTo),e(R_,Uq),e(Uq,lTo),e(R_,iTo),e(z,dTo),e(z,B_),e(B_,ele),e(ele,cTo),e(B_,fTo),e(B_,Jq),e(Jq,mTo),e(B_,gTo),e(z,hTo),e(z,P_),e(P_,ole),e(ole,pTo),e(P_,uTo),e(P_,Yq),e(Yq,_To),e(P_,bTo),e(z,vTo),e(z,I_),e(I_,rle),e(rle,FTo),e(I_,TTo),e(I_,Kq),e(Kq,MTo),e(I_,ETo),e(z,CTo),e(z,q_),e(q_,tle),e(tle,wTo),e(q_,ATo),e(q_,Zq),e(Zq,yTo),e(q_,LTo),e(z,xTo),e(z,N_),e(N_,ale),e(ale,$To),e(N_,kTo),e(N_,eN),e(eN,STo),e(N_,RTo),e(z,BTo),e(z,j_),e(j_,nle),e(nle,PTo),e(j_,ITo),e(j_,oN),e(oN,qTo),e(j_,NTo),e(z,jTo),e(z,D_),e(D_,sle),e(sle,DTo),e(D_,GTo),e(D_,rN),e(rN,OTo),e(D_,VTo),e(z,XTo),e(z,G_),e(G_,lle),e(lle,zTo),e(G_,QTo),e(G_,tN),e(tN,WTo),e(G_,HTo),e(z,UTo),e(z,O_),e(O_,ile),e(ile,JTo),e(O_,YTo),e(O_,aN),e(aN,KTo),e(O_,ZTo),e(He,e8o),e(He,V_),e(V_,o8o),e(V_,dle),e(dle,r8o),e(V_,t8o),e(V_,cle),e(cle,a8o),e(He,n8o),M(X_,He,null),b(f,JRe,_),b(f,wi,_),e(wi,z_),e(z_,fle),M(rw,fle,null),e(wi,s8o),e(wi,mle),e(mle,l8o),b(f,YRe,_),b(f,xo,_),M(tw,xo,null),e(xo,i8o),e(xo,Ai),e(Ai,d8o),e(Ai,nN),e(nN,c8o),e(Ai,f8o),e(Ai,sN),e(sN,m8o),e(Ai,g8o),e(xo,h8o),e(xo,aw),e(aw,p8o),e(aw,gle),e(gle,u8o),e(aw,_8o),e(xo,b8o),e(xo,ot),M(nw,ot,null),e(ot,v8o),e(ot,hle),e(hle,F8o),e(ot,T8o),e(ot,yi),e(yi,M8o),e(yi,ple),e(ple,E8o),e(yi,C8o),e(yi,lN),e(lN,w8o),e(yi,A8o),e(ot,y8o),M(Q_,ot,null),e(xo,L8o),e(xo,Ue),M(sw,Ue,null),e(Ue,x8o),e(Ue,ule),e(ule,$8o),e(Ue,k8o),e(Ue,wa),e(wa,S8o),e(wa,_le),e(_le,R8o),e(wa,B8o),e(wa,ble),e(ble,P8o),e(wa,I8o),e(wa,vle),e(vle,q8o),e(wa,N8o),e(Ue,j8o),e(Ue,Q),e(Q,W_),e(W_,Fle),e(Fle,D8o),e(W_,G8o),e(W_,iN),e(iN,O8o),e(W_,V8o),e(Q,X8o),e(Q,H_),e(H_,Tle),e(Tle,z8o),e(H_,Q8o),e(H_,dN),e(dN,W8o),e(H_,H8o),e(Q,U8o),e(Q,U_),e(U_,Mle),e(Mle,J8o),e(U_,Y8o),e(U_,cN),e(cN,K8o),e(U_,Z8o),e(Q,e9o),e(Q,J_),e(J_,Ele),e(Ele,o9o),e(J_,r9o),e(J_,fN),e(fN,t9o),e(J_,a9o),e(Q,n9o),e(Q,Y_),e(Y_,Cle),e(Cle,s9o),e(Y_,l9o),e(Y_,mN),e(mN,i9o),e(Y_,d9o),e(Q,c9o),e(Q,K_),e(K_,wle),e(wle,f9o),e(K_,m9o),e(K_,gN),e(gN,g9o),e(K_,h9o),e(Q,p9o),e(Q,Z_),e(Z_,Ale),e(Ale,u9o),e(Z_,_9o),e(Z_,hN),e(hN,b9o),e(Z_,v9o),e(Q,F9o),e(Q,e1),e(e1,yle),e(yle,T9o),e(e1,M9o),e(e1,pN),e(pN,E9o),e(e1,C9o),e(Q,w9o),e(Q,o1),e(o1,Lle),e(Lle,A9o),e(o1,y9o),e(o1,uN),e(uN,L9o),e(o1,x9o),e(Q,$9o),e(Q,r1),e(r1,xle),e(xle,k9o),e(r1,S9o),e(r1,_N),e(_N,R9o),e(r1,B9o),e(Q,P9o),e(Q,t1),e(t1,$le),e($le,I9o),e(t1,q9o),e(t1,bN),e(bN,N9o),e(t1,j9o),e(Q,D9o),e(Q,a1),e(a1,kle),e(kle,G9o),e(a1,O9o),e(a1,vN),e(vN,V9o),e(a1,X9o),e(Q,z9o),e(Q,n1),e(n1,Sle),e(Sle,Q9o),e(n1,W9o),e(n1,FN),e(FN,H9o),e(n1,U9o),e(Q,J9o),e(Q,s1),e(s1,Rle),e(Rle,Y9o),e(s1,K9o),e(s1,TN),e(TN,Z9o),e(s1,eMo),e(Q,oMo),e(Q,l1),e(l1,Ble),e(Ble,rMo),e(l1,tMo),e(l1,MN),e(MN,aMo),e(l1,nMo),e(Q,sMo),e(Q,i1),e(i1,Ple),e(Ple,lMo),e(i1,iMo),e(i1,EN),e(EN,dMo),e(i1,cMo),e(Q,fMo),e(Q,d1),e(d1,Ile),e(Ile,mMo),e(d1,gMo),e(d1,CN),e(CN,hMo),e(d1,pMo),e(Q,uMo),e(Q,c1),e(c1,qle),e(qle,_Mo),e(c1,bMo),e(c1,wN),e(wN,vMo),e(c1,FMo),e(Q,TMo),e(Q,f1),e(f1,Nle),e(Nle,MMo),e(f1,EMo),e(f1,AN),e(AN,CMo),e(f1,wMo),e(Q,AMo),e(Q,m1),e(m1,jle),e(jle,yMo),e(m1,LMo),e(m1,yN),e(yN,xMo),e(m1,$Mo),e(Q,kMo),e(Q,g1),e(g1,Dle),e(Dle,SMo),e(g1,RMo),e(g1,LN),e(LN,BMo),e(g1,PMo),e(Q,IMo),e(Q,h1),e(h1,Gle),e(Gle,qMo),e(h1,NMo),e(h1,xN),e(xN,jMo),e(h1,DMo),e(Q,GMo),e(Q,p1),e(p1,Ole),e(Ole,OMo),e(p1,VMo),e(p1,$N),e($N,XMo),e(p1,zMo),e(Q,QMo),e(Q,u1),e(u1,Vle),e(Vle,WMo),e(u1,HMo),e(u1,kN),e(kN,UMo),e(u1,JMo),e(Q,YMo),e(Q,_1),e(_1,Xle),e(Xle,KMo),e(_1,ZMo),e(_1,SN),e(SN,e4o),e(_1,o4o),e(Q,r4o),e(Q,b1),e(b1,zle),e(zle,t4o),e(b1,a4o),e(b1,RN),e(RN,n4o),e(b1,s4o),e(Q,l4o),e(Q,v1),e(v1,Qle),e(Qle,i4o),e(v1,d4o),e(v1,BN),e(BN,c4o),e(v1,f4o),e(Q,m4o),e(Q,F1),e(F1,Wle),e(Wle,g4o),e(F1,h4o),e(F1,PN),e(PN,p4o),e(F1,u4o),e(Q,_4o),e(Q,T1),e(T1,Hle),e(Hle,b4o),e(T1,v4o),e(T1,IN),e(IN,F4o),e(T1,T4o),e(Q,M4o),e(Q,M1),e(M1,Ule),e(Ule,E4o),e(M1,C4o),e(M1,qN),e(qN,w4o),e(M1,A4o),e(Q,y4o),e(Q,E1),e(E1,Jle),e(Jle,L4o),e(E1,x4o),e(E1,Yle),e(Yle,$4o),e(E1,k4o),e(Q,S4o),e(Q,C1),e(C1,Kle),e(Kle,R4o),e(C1,B4o),e(C1,NN),e(NN,P4o),e(C1,I4o),e(Q,q4o),e(Q,w1),e(w1,Zle),e(Zle,N4o),e(w1,j4o),e(w1,jN),e(jN,D4o),e(w1,G4o),e(Q,O4o),e(Q,A1),e(A1,eie),e(eie,V4o),e(A1,X4o),e(A1,DN),e(DN,z4o),e(A1,Q4o),e(Q,W4o),e(Q,y1),e(y1,oie),e(oie,H4o),e(y1,U4o),e(y1,GN),e(GN,J4o),e(y1,Y4o),e(Ue,K4o),e(Ue,L1),e(L1,Z4o),e(L1,rie),e(rie,eEo),e(L1,oEo),e(L1,tie),e(tie,rEo),e(Ue,tEo),M(x1,Ue,null),b(f,KRe,_),b(f,Li,_),e(Li,$1),e($1,aie),M(lw,aie,null),e(Li,aEo),e(Li,nie),e(nie,nEo),b(f,ZRe,_),b(f,$o,_),M(iw,$o,null),e($o,sEo),e($o,xi),e(xi,lEo),e(xi,ON),e(ON,iEo),e(xi,dEo),e(xi,VN),e(VN,cEo),e(xi,fEo),e($o,mEo),e($o,dw),e(dw,gEo),e(dw,sie),e(sie,hEo),e(dw,pEo),e($o,uEo),e($o,rt),M(cw,rt,null),e(rt,_Eo),e(rt,lie),e(lie,bEo),e(rt,vEo),e(rt,$i),e($i,FEo),e($i,iie),e(iie,TEo),e($i,MEo),e($i,XN),e(XN,EEo),e($i,CEo),e(rt,wEo),M(k1,rt,null),e($o,AEo),e($o,Je),M(fw,Je,null),e(Je,yEo),e(Je,die),e(die,LEo),e(Je,xEo),e(Je,Aa),e(Aa,$Eo),e(Aa,cie),e(cie,kEo),e(Aa,SEo),e(Aa,fie),e(fie,REo),e(Aa,BEo),e(Aa,mie),e(mie,PEo),e(Aa,IEo),e(Je,qEo),e(Je,he),e(he,S1),e(S1,gie),e(gie,NEo),e(S1,jEo),e(S1,zN),e(zN,DEo),e(S1,GEo),e(he,OEo),e(he,R1),e(R1,hie),e(hie,VEo),e(R1,XEo),e(R1,QN),e(QN,zEo),e(R1,QEo),e(he,WEo),e(he,B1),e(B1,pie),e(pie,HEo),e(B1,UEo),e(B1,WN),e(WN,JEo),e(B1,YEo),e(he,KEo),e(he,P1),e(P1,uie),e(uie,ZEo),e(P1,e5o),e(P1,HN),e(HN,o5o),e(P1,r5o),e(he,t5o),e(he,I1),e(I1,_ie),e(_ie,a5o),e(I1,n5o),e(I1,UN),e(UN,s5o),e(I1,l5o),e(he,i5o),e(he,q1),e(q1,bie),e(bie,d5o),e(q1,c5o),e(q1,JN),e(JN,f5o),e(q1,m5o),e(he,g5o),e(he,N1),e(N1,vie),e(vie,h5o),e(N1,p5o),e(N1,YN),e(YN,u5o),e(N1,_5o),e(he,b5o),e(he,j1),e(j1,Fie),e(Fie,v5o),e(j1,F5o),e(j1,KN),e(KN,T5o),e(j1,M5o),e(he,E5o),e(he,D1),e(D1,Tie),e(Tie,C5o),e(D1,w5o),e(D1,ZN),e(ZN,A5o),e(D1,y5o),e(he,L5o),e(he,G1),e(G1,Mie),e(Mie,x5o),e(G1,$5o),e(G1,ej),e(ej,k5o),e(G1,S5o),e(he,R5o),e(he,O1),e(O1,Eie),e(Eie,B5o),e(O1,P5o),e(O1,oj),e(oj,I5o),e(O1,q5o),e(he,N5o),e(he,V1),e(V1,Cie),e(Cie,j5o),e(V1,D5o),e(V1,rj),e(rj,G5o),e(V1,O5o),e(he,V5o),e(he,X1),e(X1,wie),e(wie,X5o),e(X1,z5o),e(X1,tj),e(tj,Q5o),e(X1,W5o),e(he,H5o),e(he,z1),e(z1,Aie),e(Aie,U5o),e(z1,J5o),e(z1,aj),e(aj,Y5o),e(z1,K5o),e(he,Z5o),e(he,Q1),e(Q1,yie),e(yie,eCo),e(Q1,oCo),e(Q1,nj),e(nj,rCo),e(Q1,tCo),e(he,aCo),e(he,W1),e(W1,Lie),e(Lie,nCo),e(W1,sCo),e(W1,sj),e(sj,lCo),e(W1,iCo),e(he,dCo),e(he,H1),e(H1,xie),e(xie,cCo),e(H1,fCo),e(H1,lj),e(lj,mCo),e(H1,gCo),e(Je,hCo),e(Je,U1),e(U1,pCo),e(U1,$ie),e($ie,uCo),e(U1,_Co),e(U1,kie),e(kie,bCo),e(Je,vCo),M(J1,Je,null),b(f,eBe,_),b(f,ki,_),e(ki,Y1),e(Y1,Sie),M(mw,Sie,null),e(ki,FCo),e(ki,Rie),e(Rie,TCo),b(f,oBe,_),b(f,ko,_),M(gw,ko,null),e(ko,MCo),e(ko,Si),e(Si,ECo),e(Si,ij),e(ij,CCo),e(Si,wCo),e(Si,dj),e(dj,ACo),e(Si,yCo),e(ko,LCo),e(ko,hw),e(hw,xCo),e(hw,Bie),e(Bie,$Co),e(hw,kCo),e(ko,SCo),e(ko,tt),M(pw,tt,null),e(tt,RCo),e(tt,Pie),e(Pie,BCo),e(tt,PCo),e(tt,Ri),e(Ri,ICo),e(Ri,Iie),e(Iie,qCo),e(Ri,NCo),e(Ri,cj),e(cj,jCo),e(Ri,DCo),e(tt,GCo),M(K1,tt,null),e(ko,OCo),e(ko,Ye),M(uw,Ye,null),e(Ye,VCo),e(Ye,qie),e(qie,XCo),e(Ye,zCo),e(Ye,ya),e(ya,QCo),e(ya,Nie),e(Nie,WCo),e(ya,HCo),e(ya,jie),e(jie,UCo),e(ya,JCo),e(ya,Die),e(Die,YCo),e(ya,KCo),e(Ye,ZCo),e(Ye,q),e(q,Z1),e(Z1,Gie),e(Gie,e3o),e(Z1,o3o),e(Z1,fj),e(fj,r3o),e(Z1,t3o),e(q,a3o),e(q,eb),e(eb,Oie),e(Oie,n3o),e(eb,s3o),e(eb,mj),e(mj,l3o),e(eb,i3o),e(q,d3o),e(q,ob),e(ob,Vie),e(Vie,c3o),e(ob,f3o),e(ob,gj),e(gj,m3o),e(ob,g3o),e(q,h3o),e(q,rb),e(rb,Xie),e(Xie,p3o),e(rb,u3o),e(rb,hj),e(hj,_3o),e(rb,b3o),e(q,v3o),e(q,tb),e(tb,zie),e(zie,F3o),e(tb,T3o),e(tb,pj),e(pj,M3o),e(tb,E3o),e(q,C3o),e(q,ab),e(ab,Qie),e(Qie,w3o),e(ab,A3o),e(ab,uj),e(uj,y3o),e(ab,L3o),e(q,x3o),e(q,nb),e(nb,Wie),e(Wie,$3o),e(nb,k3o),e(nb,_j),e(_j,S3o),e(nb,R3o),e(q,B3o),e(q,sb),e(sb,Hie),e(Hie,P3o),e(sb,I3o),e(sb,bj),e(bj,q3o),e(sb,N3o),e(q,j3o),e(q,lb),e(lb,Uie),e(Uie,D3o),e(lb,G3o),e(lb,vj),e(vj,O3o),e(lb,V3o),e(q,X3o),e(q,ib),e(ib,Jie),e(Jie,z3o),e(ib,Q3o),e(ib,Fj),e(Fj,W3o),e(ib,H3o),e(q,U3o),e(q,db),e(db,Yie),e(Yie,J3o),e(db,Y3o),e(db,Tj),e(Tj,K3o),e(db,Z3o),e(q,ewo),e(q,cb),e(cb,Kie),e(Kie,owo),e(cb,rwo),e(cb,Mj),e(Mj,two),e(cb,awo),e(q,nwo),e(q,fb),e(fb,Zie),e(Zie,swo),e(fb,lwo),e(fb,Ej),e(Ej,iwo),e(fb,dwo),e(q,cwo),e(q,mb),e(mb,ede),e(ede,fwo),e(mb,mwo),e(mb,Cj),e(Cj,gwo),e(mb,hwo),e(q,pwo),e(q,gb),e(gb,ode),e(ode,uwo),e(gb,_wo),e(gb,wj),e(wj,bwo),e(gb,vwo),e(q,Fwo),e(q,hb),e(hb,rde),e(rde,Two),e(hb,Mwo),e(hb,Aj),e(Aj,Ewo),e(hb,Cwo),e(q,wwo),e(q,pb),e(pb,tde),e(tde,Awo),e(pb,ywo),e(pb,yj),e(yj,Lwo),e(pb,xwo),e(q,$wo),e(q,ub),e(ub,ade),e(ade,kwo),e(ub,Swo),e(ub,Lj),e(Lj,Rwo),e(ub,Bwo),e(q,Pwo),e(q,_b),e(_b,nde),e(nde,Iwo),e(_b,qwo),e(_b,xj),e(xj,Nwo),e(_b,jwo),e(q,Dwo),e(q,bb),e(bb,sde),e(sde,Gwo),e(bb,Owo),e(bb,$j),e($j,Vwo),e(bb,Xwo),e(q,zwo),e(q,vb),e(vb,lde),e(lde,Qwo),e(vb,Wwo),e(vb,kj),e(kj,Hwo),e(vb,Uwo),e(q,Jwo),e(q,Fb),e(Fb,ide),e(ide,Ywo),e(Fb,Kwo),e(Fb,Sj),e(Sj,Zwo),e(Fb,eAo),e(q,oAo),e(q,Tb),e(Tb,dde),e(dde,rAo),e(Tb,tAo),e(Tb,Rj),e(Rj,aAo),e(Tb,nAo),e(q,sAo),e(q,Mb),e(Mb,cde),e(cde,lAo),e(Mb,iAo),e(Mb,Bj),e(Bj,dAo),e(Mb,cAo),e(q,fAo),e(q,Eb),e(Eb,fde),e(fde,mAo),e(Eb,gAo),e(Eb,Pj),e(Pj,hAo),e(Eb,pAo),e(q,uAo),e(q,Cb),e(Cb,mde),e(mde,_Ao),e(Cb,bAo),e(Cb,Ij),e(Ij,vAo),e(Cb,FAo),e(q,TAo),e(q,wb),e(wb,gde),e(gde,MAo),e(wb,EAo),e(wb,qj),e(qj,CAo),e(wb,wAo),e(q,AAo),e(q,Ab),e(Ab,hde),e(hde,yAo),e(Ab,LAo),e(Ab,Nj),e(Nj,xAo),e(Ab,$Ao),e(q,kAo),e(q,yb),e(yb,pde),e(pde,SAo),e(yb,RAo),e(yb,jj),e(jj,BAo),e(yb,PAo),e(q,IAo),e(q,Lb),e(Lb,ude),e(ude,qAo),e(Lb,NAo),e(Lb,Dj),e(Dj,jAo),e(Lb,DAo),e(q,GAo),e(q,xb),e(xb,_de),e(_de,OAo),e(xb,VAo),e(xb,Gj),e(Gj,XAo),e(xb,zAo),e(q,QAo),e(q,$b),e($b,bde),e(bde,WAo),e($b,HAo),e($b,Oj),e(Oj,UAo),e($b,JAo),e(q,YAo),e(q,kb),e(kb,vde),e(vde,KAo),e(kb,ZAo),e(kb,Vj),e(Vj,eyo),e(kb,oyo),e(q,ryo),e(q,Sb),e(Sb,Fde),e(Fde,tyo),e(Sb,ayo),e(Sb,Xj),e(Xj,nyo),e(Sb,syo),e(q,lyo),e(q,Rb),e(Rb,Tde),e(Tde,iyo),e(Rb,dyo),e(Rb,zj),e(zj,cyo),e(Rb,fyo),e(q,myo),e(q,Bb),e(Bb,Mde),e(Mde,gyo),e(Bb,hyo),e(Bb,Qj),e(Qj,pyo),e(Bb,uyo),e(q,_yo),e(q,Pb),e(Pb,Ede),e(Ede,byo),e(Pb,vyo),e(Pb,Wj),e(Wj,Fyo),e(Pb,Tyo),e(q,Myo),e(q,Ib),e(Ib,Cde),e(Cde,Eyo),e(Ib,Cyo),e(Ib,Hj),e(Hj,wyo),e(Ib,Ayo),e(q,yyo),e(q,qb),e(qb,wde),e(wde,Lyo),e(qb,xyo),e(qb,Uj),e(Uj,$yo),e(qb,kyo),e(q,Syo),e(q,Nb),e(Nb,Ade),e(Ade,Ryo),e(Nb,Byo),e(Nb,Jj),e(Jj,Pyo),e(Nb,Iyo),e(q,qyo),e(q,jb),e(jb,yde),e(yde,Nyo),e(jb,jyo),e(jb,Yj),e(Yj,Dyo),e(jb,Gyo),e(q,Oyo),e(q,Db),e(Db,Lde),e(Lde,Vyo),e(Db,Xyo),e(Db,Kj),e(Kj,zyo),e(Db,Qyo),e(q,Wyo),e(q,Gb),e(Gb,xde),e(xde,Hyo),e(Gb,Uyo),e(Gb,Zj),e(Zj,Jyo),e(Gb,Yyo),e(q,Kyo),e(q,Ob),e(Ob,$de),e($de,Zyo),e(Ob,eLo),e(Ob,eD),e(eD,oLo),e(Ob,rLo),e(q,tLo),e(q,Vb),e(Vb,kde),e(kde,aLo),e(Vb,nLo),e(Vb,oD),e(oD,sLo),e(Vb,lLo),e(q,iLo),e(q,Xb),e(Xb,Sde),e(Sde,dLo),e(Xb,cLo),e(Xb,rD),e(rD,fLo),e(Xb,mLo),e(q,gLo),e(q,zb),e(zb,Rde),e(Rde,hLo),e(zb,pLo),e(zb,tD),e(tD,uLo),e(zb,_Lo),e(Ye,bLo),e(Ye,Qb),e(Qb,vLo),e(Qb,Bde),e(Bde,FLo),e(Qb,TLo),e(Qb,Pde),e(Pde,MLo),e(Ye,ELo),M(Wb,Ye,null),b(f,rBe,_),b(f,Bi,_),e(Bi,Hb),e(Hb,Ide),M(_w,Ide,null),e(Bi,CLo),e(Bi,qde),e(qde,wLo),b(f,tBe,_),b(f,So,_),M(bw,So,null),e(So,ALo),e(So,Pi),e(Pi,yLo),e(Pi,aD),e(aD,LLo),e(Pi,xLo),e(Pi,nD),e(nD,$Lo),e(Pi,kLo),e(So,SLo),e(So,vw),e(vw,RLo),e(vw,Nde),e(Nde,BLo),e(vw,PLo),e(So,ILo),e(So,at),M(Fw,at,null),e(at,qLo),e(at,jde),e(jde,NLo),e(at,jLo),e(at,Ii),e(Ii,DLo),e(Ii,Dde),e(Dde,GLo),e(Ii,OLo),e(Ii,sD),e(sD,VLo),e(Ii,XLo),e(at,zLo),M(Ub,at,null),e(So,QLo),e(So,Ke),M(Tw,Ke,null),e(Ke,WLo),e(Ke,Gde),e(Gde,HLo),e(Ke,ULo),e(Ke,La),e(La,JLo),e(La,Ode),e(Ode,YLo),e(La,KLo),e(La,Vde),e(Vde,ZLo),e(La,e7o),e(La,Xde),e(Xde,o7o),e(La,r7o),e(Ke,t7o),e(Ke,Y),e(Y,Jb),e(Jb,zde),e(zde,a7o),e(Jb,n7o),e(Jb,lD),e(lD,s7o),e(Jb,l7o),e(Y,i7o),e(Y,Yb),e(Yb,Qde),e(Qde,d7o),e(Yb,c7o),e(Yb,iD),e(iD,f7o),e(Yb,m7o),e(Y,g7o),e(Y,Kb),e(Kb,Wde),e(Wde,h7o),e(Kb,p7o),e(Kb,dD),e(dD,u7o),e(Kb,_7o),e(Y,b7o),e(Y,Zb),e(Zb,Hde),e(Hde,v7o),e(Zb,F7o),e(Zb,cD),e(cD,T7o),e(Zb,M7o),e(Y,E7o),e(Y,e2),e(e2,Ude),e(Ude,C7o),e(e2,w7o),e(e2,fD),e(fD,A7o),e(e2,y7o),e(Y,L7o),e(Y,o2),e(o2,Jde),e(Jde,x7o),e(o2,$7o),e(o2,mD),e(mD,k7o),e(o2,S7o),e(Y,R7o),e(Y,r2),e(r2,Yde),e(Yde,B7o),e(r2,P7o),e(r2,gD),e(gD,I7o),e(r2,q7o),e(Y,N7o),e(Y,t2),e(t2,Kde),e(Kde,j7o),e(t2,D7o),e(t2,hD),e(hD,G7o),e(t2,O7o),e(Y,V7o),e(Y,a2),e(a2,Zde),e(Zde,X7o),e(a2,z7o),e(a2,pD),e(pD,Q7o),e(a2,W7o),e(Y,H7o),e(Y,n2),e(n2,ece),e(ece,U7o),e(n2,J7o),e(n2,uD),e(uD,Y7o),e(n2,K7o),e(Y,Z7o),e(Y,s2),e(s2,oce),e(oce,exo),e(s2,oxo),e(s2,_D),e(_D,rxo),e(s2,txo),e(Y,axo),e(Y,l2),e(l2,rce),e(rce,nxo),e(l2,sxo),e(l2,bD),e(bD,lxo),e(l2,ixo),e(Y,dxo),e(Y,i2),e(i2,tce),e(tce,cxo),e(i2,fxo),e(i2,vD),e(vD,mxo),e(i2,gxo),e(Y,hxo),e(Y,d2),e(d2,ace),e(ace,pxo),e(d2,uxo),e(d2,FD),e(FD,_xo),e(d2,bxo),e(Y,vxo),e(Y,c2),e(c2,nce),e(nce,Fxo),e(c2,Txo),e(c2,TD),e(TD,Mxo),e(c2,Exo),e(Y,Cxo),e(Y,f2),e(f2,sce),e(sce,wxo),e(f2,Axo),e(f2,MD),e(MD,yxo),e(f2,Lxo),e(Y,xxo),e(Y,m2),e(m2,lce),e(lce,$xo),e(m2,kxo),e(m2,ED),e(ED,Sxo),e(m2,Rxo),e(Y,Bxo),e(Y,g2),e(g2,ice),e(ice,Pxo),e(g2,Ixo),e(g2,CD),e(CD,qxo),e(g2,Nxo),e(Y,jxo),e(Y,h2),e(h2,dce),e(dce,Dxo),e(h2,Gxo),e(h2,wD),e(wD,Oxo),e(h2,Vxo),e(Y,Xxo),e(Y,p2),e(p2,cce),e(cce,zxo),e(p2,Qxo),e(p2,AD),e(AD,Wxo),e(p2,Hxo),e(Y,Uxo),e(Y,u2),e(u2,fce),e(fce,Jxo),e(u2,Yxo),e(u2,yD),e(yD,Kxo),e(u2,Zxo),e(Y,e$o),e(Y,_2),e(_2,mce),e(mce,o$o),e(_2,r$o),e(_2,LD),e(LD,t$o),e(_2,a$o),e(Y,n$o),e(Y,b2),e(b2,gce),e(gce,s$o),e(b2,l$o),e(b2,xD),e(xD,i$o),e(b2,d$o),e(Y,c$o),e(Y,v2),e(v2,hce),e(hce,f$o),e(v2,m$o),e(v2,$D),e($D,g$o),e(v2,h$o),e(Y,p$o),e(Y,F2),e(F2,pce),e(pce,u$o),e(F2,_$o),e(F2,kD),e(kD,b$o),e(F2,v$o),e(Y,F$o),e(Y,T2),e(T2,uce),e(uce,T$o),e(T2,M$o),e(T2,SD),e(SD,E$o),e(T2,C$o),e(Y,w$o),e(Y,M2),e(M2,_ce),e(_ce,A$o),e(M2,y$o),e(M2,RD),e(RD,L$o),e(M2,x$o),e(Y,$$o),e(Y,E2),e(E2,bce),e(bce,k$o),e(E2,S$o),e(E2,BD),e(BD,R$o),e(E2,B$o),e(Ke,P$o),e(Ke,C2),e(C2,I$o),e(C2,vce),e(vce,q$o),e(C2,N$o),e(C2,Fce),e(Fce,j$o),e(Ke,D$o),M(w2,Ke,null),b(f,aBe,_),b(f,qi,_),e(qi,A2),e(A2,Tce),M(Mw,Tce,null),e(qi,G$o),e(qi,Mce),e(Mce,O$o),b(f,nBe,_),b(f,Ro,_),M(Ew,Ro,null),e(Ro,V$o),e(Ro,Ni),e(Ni,X$o),e(Ni,PD),e(PD,z$o),e(Ni,Q$o),e(Ni,ID),e(ID,W$o),e(Ni,H$o),e(Ro,U$o),e(Ro,Cw),e(Cw,J$o),e(Cw,Ece),e(Ece,Y$o),e(Cw,K$o),e(Ro,Z$o),e(Ro,nt),M(ww,nt,null),e(nt,eko),e(nt,Cce),e(Cce,oko),e(nt,rko),e(nt,ji),e(ji,tko),e(ji,wce),e(wce,ako),e(ji,nko),e(ji,qD),e(qD,sko),e(ji,lko),e(nt,iko),M(y2,nt,null),e(Ro,dko),e(Ro,Ze),M(Aw,Ze,null),e(Ze,cko),e(Ze,Ace),e(Ace,fko),e(Ze,mko),e(Ze,xa),e(xa,gko),e(xa,yce),e(yce,hko),e(xa,pko),e(xa,Lce),e(Lce,uko),e(xa,_ko),e(xa,xce),e(xce,bko),e(xa,vko),e(Ze,Fko),e(Ze,Wr),e(Wr,L2),e(L2,$ce),e($ce,Tko),e(L2,Mko),e(L2,ND),e(ND,Eko),e(L2,Cko),e(Wr,wko),e(Wr,x2),e(x2,kce),e(kce,Ako),e(x2,yko),e(x2,jD),e(jD,Lko),e(x2,xko),e(Wr,$ko),e(Wr,$2),e($2,Sce),e(Sce,kko),e($2,Sko),e($2,DD),e(DD,Rko),e($2,Bko),e(Wr,Pko),e(Wr,k2),e(k2,Rce),e(Rce,Iko),e(k2,qko),e(k2,GD),e(GD,Nko),e(k2,jko),e(Wr,Dko),e(Wr,S2),e(S2,Bce),e(Bce,Gko),e(S2,Oko),e(S2,OD),e(OD,Vko),e(S2,Xko),e(Ze,zko),e(Ze,R2),e(R2,Qko),e(R2,Pce),e(Pce,Wko),e(R2,Hko),e(R2,Ice),e(Ice,Uko),e(Ze,Jko),M(B2,Ze,null),b(f,sBe,_),b(f,Di,_),e(Di,P2),e(P2,qce),M(yw,qce,null),e(Di,Yko),e(Di,Nce),e(Nce,Kko),b(f,lBe,_),b(f,Bo,_),M(Lw,Bo,null),e(Bo,Zko),e(Bo,Gi),e(Gi,eSo),e(Gi,VD),e(VD,oSo),e(Gi,rSo),e(Gi,XD),e(XD,tSo),e(Gi,aSo),e(Bo,nSo),e(Bo,xw),e(xw,sSo),e(xw,jce),e(jce,lSo),e(xw,iSo),e(Bo,dSo),e(Bo,st),M($w,st,null),e(st,cSo),e(st,Dce),e(Dce,fSo),e(st,mSo),e(st,Oi),e(Oi,gSo),e(Oi,Gce),e(Gce,hSo),e(Oi,pSo),e(Oi,zD),e(zD,uSo),e(Oi,_So),e(st,bSo),M(I2,st,null),e(Bo,vSo),e(Bo,eo),M(kw,eo,null),e(eo,FSo),e(eo,Oce),e(Oce,TSo),e(eo,MSo),e(eo,$a),e($a,ESo),e($a,Vce),e(Vce,CSo),e($a,wSo),e($a,Xce),e(Xce,ASo),e($a,ySo),e($a,zce),e(zce,LSo),e($a,xSo),e(eo,$So),e(eo,U),e(U,q2),e(q2,Qce),e(Qce,kSo),e(q2,SSo),e(q2,QD),e(QD,RSo),e(q2,BSo),e(U,PSo),e(U,N2),e(N2,Wce),e(Wce,ISo),e(N2,qSo),e(N2,WD),e(WD,NSo),e(N2,jSo),e(U,DSo),e(U,j2),e(j2,Hce),e(Hce,GSo),e(j2,OSo),e(j2,HD),e(HD,VSo),e(j2,XSo),e(U,zSo),e(U,D2),e(D2,Uce),e(Uce,QSo),e(D2,WSo),e(D2,UD),e(UD,HSo),e(D2,USo),e(U,JSo),e(U,G2),e(G2,Jce),e(Jce,YSo),e(G2,KSo),e(G2,JD),e(JD,ZSo),e(G2,eRo),e(U,oRo),e(U,O2),e(O2,Yce),e(Yce,rRo),e(O2,tRo),e(O2,YD),e(YD,aRo),e(O2,nRo),e(U,sRo),e(U,V2),e(V2,Kce),e(Kce,lRo),e(V2,iRo),e(V2,KD),e(KD,dRo),e(V2,cRo),e(U,fRo),e(U,X2),e(X2,Zce),e(Zce,mRo),e(X2,gRo),e(X2,ZD),e(ZD,hRo),e(X2,pRo),e(U,uRo),e(U,z2),e(z2,efe),e(efe,_Ro),e(z2,bRo),e(z2,eG),e(eG,vRo),e(z2,FRo),e(U,TRo),e(U,Q2),e(Q2,ofe),e(ofe,MRo),e(Q2,ERo),e(Q2,oG),e(oG,CRo),e(Q2,wRo),e(U,ARo),e(U,W2),e(W2,rfe),e(rfe,yRo),e(W2,LRo),e(W2,rG),e(rG,xRo),e(W2,$Ro),e(U,kRo),e(U,H2),e(H2,tfe),e(tfe,SRo),e(H2,RRo),e(H2,tG),e(tG,BRo),e(H2,PRo),e(U,IRo),e(U,U2),e(U2,afe),e(afe,qRo),e(U2,NRo),e(U2,aG),e(aG,jRo),e(U2,DRo),e(U,GRo),e(U,J2),e(J2,nfe),e(nfe,ORo),e(J2,VRo),e(J2,nG),e(nG,XRo),e(J2,zRo),e(U,QRo),e(U,Y2),e(Y2,sfe),e(sfe,WRo),e(Y2,HRo),e(Y2,sG),e(sG,URo),e(Y2,JRo),e(U,YRo),e(U,K2),e(K2,lfe),e(lfe,KRo),e(K2,ZRo),e(K2,lG),e(lG,eBo),e(K2,oBo),e(U,rBo),e(U,Z2),e(Z2,ife),e(ife,tBo),e(Z2,aBo),e(Z2,iG),e(iG,nBo),e(Z2,sBo),e(U,lBo),e(U,ev),e(ev,dfe),e(dfe,iBo),e(ev,dBo),e(ev,dG),e(dG,cBo),e(ev,fBo),e(U,mBo),e(U,ov),e(ov,cfe),e(cfe,gBo),e(ov,hBo),e(ov,cG),e(cG,pBo),e(ov,uBo),e(U,_Bo),e(U,rv),e(rv,ffe),e(ffe,bBo),e(rv,vBo),e(rv,fG),e(fG,FBo),e(rv,TBo),e(U,MBo),e(U,tv),e(tv,mfe),e(mfe,EBo),e(tv,CBo),e(tv,mG),e(mG,wBo),e(tv,ABo),e(U,yBo),e(U,av),e(av,gfe),e(gfe,LBo),e(av,xBo),e(av,gG),e(gG,$Bo),e(av,kBo),e(U,SBo),e(U,nv),e(nv,hfe),e(hfe,RBo),e(nv,BBo),e(nv,hG),e(hG,PBo),e(nv,IBo),e(U,qBo),e(U,sv),e(sv,pfe),e(pfe,NBo),e(sv,jBo),e(sv,pG),e(pG,DBo),e(sv,GBo),e(U,OBo),e(U,lv),e(lv,ufe),e(ufe,VBo),e(lv,XBo),e(lv,uG),e(uG,zBo),e(lv,QBo),e(U,WBo),e(U,iv),e(iv,_fe),e(_fe,HBo),e(iv,UBo),e(iv,_G),e(_G,JBo),e(iv,YBo),e(U,KBo),e(U,dv),e(dv,bfe),e(bfe,ZBo),e(dv,ePo),e(dv,bG),e(bG,oPo),e(dv,rPo),e(U,tPo),e(U,cv),e(cv,vfe),e(vfe,aPo),e(cv,nPo),e(cv,vG),e(vG,sPo),e(cv,lPo),e(U,iPo),e(U,fv),e(fv,Ffe),e(Ffe,dPo),e(fv,cPo),e(fv,FG),e(FG,fPo),e(fv,mPo),e(U,gPo),e(U,mv),e(mv,Tfe),e(Tfe,hPo),e(mv,pPo),e(mv,TG),e(TG,uPo),e(mv,_Po),e(U,bPo),e(U,gv),e(gv,Mfe),e(Mfe,vPo),e(gv,FPo),e(gv,MG),e(MG,TPo),e(gv,MPo),e(U,EPo),e(U,hv),e(hv,Efe),e(Efe,CPo),e(hv,wPo),e(hv,EG),e(EG,APo),e(hv,yPo),e(U,LPo),e(U,pv),e(pv,Cfe),e(Cfe,xPo),e(pv,$Po),e(pv,CG),e(CG,kPo),e(pv,SPo),e(eo,RPo),e(eo,uv),e(uv,BPo),e(uv,wfe),e(wfe,PPo),e(uv,IPo),e(uv,Afe),e(Afe,qPo),e(eo,NPo),M(_v,eo,null),b(f,iBe,_),b(f,Vi,_),e(Vi,bv),e(bv,yfe),M(Sw,yfe,null),e(Vi,jPo),e(Vi,Lfe),e(Lfe,DPo),b(f,dBe,_),b(f,Po,_),M(Rw,Po,null),e(Po,GPo),e(Po,Xi),e(Xi,OPo),e(Xi,wG),e(wG,VPo),e(Xi,XPo),e(Xi,AG),e(AG,zPo),e(Xi,QPo),e(Po,WPo),e(Po,Bw),e(Bw,HPo),e(Bw,xfe),e(xfe,UPo),e(Bw,JPo),e(Po,YPo),e(Po,lt),M(Pw,lt,null),e(lt,KPo),e(lt,$fe),e($fe,ZPo),e(lt,eIo),e(lt,zi),e(zi,oIo),e(zi,kfe),e(kfe,rIo),e(zi,tIo),e(zi,yG),e(yG,aIo),e(zi,nIo),e(lt,sIo),M(vv,lt,null),e(Po,lIo),e(Po,oo),M(Iw,oo,null),e(oo,iIo),e(oo,Sfe),e(Sfe,dIo),e(oo,cIo),e(oo,ka),e(ka,fIo),e(ka,Rfe),e(Rfe,mIo),e(ka,gIo),e(ka,Bfe),e(Bfe,hIo),e(ka,pIo),e(ka,Pfe),e(Pfe,uIo),e(ka,_Io),e(oo,bIo),e(oo,O),e(O,Fv),e(Fv,Ife),e(Ife,vIo),e(Fv,FIo),e(Fv,LG),e(LG,TIo),e(Fv,MIo),e(O,EIo),e(O,Tv),e(Tv,qfe),e(qfe,CIo),e(Tv,wIo),e(Tv,xG),e(xG,AIo),e(Tv,yIo),e(O,LIo),e(O,Mv),e(Mv,Nfe),e(Nfe,xIo),e(Mv,$Io),e(Mv,$G),e($G,kIo),e(Mv,SIo),e(O,RIo),e(O,Ev),e(Ev,jfe),e(jfe,BIo),e(Ev,PIo),e(Ev,kG),e(kG,IIo),e(Ev,qIo),e(O,NIo),e(O,Cv),e(Cv,Dfe),e(Dfe,jIo),e(Cv,DIo),e(Cv,SG),e(SG,GIo),e(Cv,OIo),e(O,VIo),e(O,wv),e(wv,Gfe),e(Gfe,XIo),e(wv,zIo),e(wv,RG),e(RG,QIo),e(wv,WIo),e(O,HIo),e(O,Av),e(Av,Ofe),e(Ofe,UIo),e(Av,JIo),e(Av,BG),e(BG,YIo),e(Av,KIo),e(O,ZIo),e(O,yv),e(yv,Vfe),e(Vfe,eqo),e(yv,oqo),e(yv,PG),e(PG,rqo),e(yv,tqo),e(O,aqo),e(O,Lv),e(Lv,Xfe),e(Xfe,nqo),e(Lv,sqo),e(Lv,IG),e(IG,lqo),e(Lv,iqo),e(O,dqo),e(O,xv),e(xv,zfe),e(zfe,cqo),e(xv,fqo),e(xv,qG),e(qG,mqo),e(xv,gqo),e(O,hqo),e(O,$v),e($v,Qfe),e(Qfe,pqo),e($v,uqo),e($v,NG),e(NG,_qo),e($v,bqo),e(O,vqo),e(O,kv),e(kv,Wfe),e(Wfe,Fqo),e(kv,Tqo),e(kv,jG),e(jG,Mqo),e(kv,Eqo),e(O,Cqo),e(O,Sv),e(Sv,Hfe),e(Hfe,wqo),e(Sv,Aqo),e(Sv,DG),e(DG,yqo),e(Sv,Lqo),e(O,xqo),e(O,Rv),e(Rv,Ufe),e(Ufe,$qo),e(Rv,kqo),e(Rv,GG),e(GG,Sqo),e(Rv,Rqo),e(O,Bqo),e(O,Bv),e(Bv,Jfe),e(Jfe,Pqo),e(Bv,Iqo),e(Bv,OG),e(OG,qqo),e(Bv,Nqo),e(O,jqo),e(O,Pv),e(Pv,Yfe),e(Yfe,Dqo),e(Pv,Gqo),e(Pv,VG),e(VG,Oqo),e(Pv,Vqo),e(O,Xqo),e(O,Iv),e(Iv,Kfe),e(Kfe,zqo),e(Iv,Qqo),e(Iv,XG),e(XG,Wqo),e(Iv,Hqo),e(O,Uqo),e(O,qv),e(qv,Zfe),e(Zfe,Jqo),e(qv,Yqo),e(qv,zG),e(zG,Kqo),e(qv,Zqo),e(O,eNo),e(O,Nv),e(Nv,eme),e(eme,oNo),e(Nv,rNo),e(Nv,QG),e(QG,tNo),e(Nv,aNo),e(O,nNo),e(O,jv),e(jv,ome),e(ome,sNo),e(jv,lNo),e(jv,WG),e(WG,iNo),e(jv,dNo),e(O,cNo),e(O,Dv),e(Dv,rme),e(rme,fNo),e(Dv,mNo),e(Dv,HG),e(HG,gNo),e(Dv,hNo),e(O,pNo),e(O,Gv),e(Gv,tme),e(tme,uNo),e(Gv,_No),e(Gv,UG),e(UG,bNo),e(Gv,vNo),e(O,FNo),e(O,Ov),e(Ov,ame),e(ame,TNo),e(Ov,MNo),e(Ov,JG),e(JG,ENo),e(Ov,CNo),e(O,wNo),e(O,Vv),e(Vv,nme),e(nme,ANo),e(Vv,yNo),e(Vv,YG),e(YG,LNo),e(Vv,xNo),e(O,$No),e(O,Xv),e(Xv,sme),e(sme,kNo),e(Xv,SNo),e(Xv,KG),e(KG,RNo),e(Xv,BNo),e(O,PNo),e(O,zv),e(zv,lme),e(lme,INo),e(zv,qNo),e(zv,ZG),e(ZG,NNo),e(zv,jNo),e(O,DNo),e(O,Qv),e(Qv,ime),e(ime,GNo),e(Qv,ONo),e(Qv,eO),e(eO,VNo),e(Qv,XNo),e(O,zNo),e(O,Wv),e(Wv,dme),e(dme,QNo),e(Wv,WNo),e(Wv,oO),e(oO,HNo),e(Wv,UNo),e(O,JNo),e(O,Hv),e(Hv,cme),e(cme,YNo),e(Hv,KNo),e(Hv,rO),e(rO,ZNo),e(Hv,ejo),e(O,ojo),e(O,Uv),e(Uv,fme),e(fme,rjo),e(Uv,tjo),e(Uv,tO),e(tO,ajo),e(Uv,njo),e(O,sjo),e(O,Jv),e(Jv,mme),e(mme,ljo),e(Jv,ijo),e(Jv,aO),e(aO,djo),e(Jv,cjo),e(O,fjo),e(O,Yv),e(Yv,gme),e(gme,mjo),e(Yv,gjo),e(Yv,nO),e(nO,hjo),e(Yv,pjo),e(O,ujo),e(O,Kv),e(Kv,hme),e(hme,_jo),e(Kv,bjo),e(Kv,sO),e(sO,vjo),e(Kv,Fjo),e(O,Tjo),e(O,Zv),e(Zv,pme),e(pme,Mjo),e(Zv,Ejo),e(Zv,lO),e(lO,Cjo),e(Zv,wjo),e(O,Ajo),e(O,eF),e(eF,ume),e(ume,yjo),e(eF,Ljo),e(eF,iO),e(iO,xjo),e(eF,$jo),e(O,kjo),e(O,oF),e(oF,_me),e(_me,Sjo),e(oF,Rjo),e(oF,dO),e(dO,Bjo),e(oF,Pjo),e(O,Ijo),e(O,rF),e(rF,bme),e(bme,qjo),e(rF,Njo),e(rF,cO),e(cO,jjo),e(rF,Djo),e(O,Gjo),e(O,tF),e(tF,vme),e(vme,Ojo),e(tF,Vjo),e(tF,fO),e(fO,Xjo),e(tF,zjo),e(O,Qjo),e(O,aF),e(aF,Fme),e(Fme,Wjo),e(aF,Hjo),e(aF,mO),e(mO,Ujo),e(aF,Jjo),e(oo,Yjo),e(oo,nF),e(nF,Kjo),e(nF,Tme),e(Tme,Zjo),e(nF,eDo),e(nF,Mme),e(Mme,oDo),e(oo,rDo),M(sF,oo,null),b(f,cBe,_),b(f,Qi,_),e(Qi,lF),e(lF,Eme),M(qw,Eme,null),e(Qi,tDo),e(Qi,Cme),e(Cme,aDo),b(f,fBe,_),b(f,Io,_),M(Nw,Io,null),e(Io,nDo),e(Io,Wi),e(Wi,sDo),e(Wi,gO),e(gO,lDo),e(Wi,iDo),e(Wi,hO),e(hO,dDo),e(Wi,cDo),e(Io,fDo),e(Io,jw),e(jw,mDo),e(jw,wme),e(wme,gDo),e(jw,hDo),e(Io,pDo),e(Io,it),M(Dw,it,null),e(it,uDo),e(it,Ame),e(Ame,_Do),e(it,bDo),e(it,Hi),e(Hi,vDo),e(Hi,yme),e(yme,FDo),e(Hi,TDo),e(Hi,pO),e(pO,MDo),e(Hi,EDo),e(it,CDo),M(iF,it,null),e(Io,wDo),e(Io,ro),M(Gw,ro,null),e(ro,ADo),e(ro,Lme),e(Lme,yDo),e(ro,LDo),e(ro,Sa),e(Sa,xDo),e(Sa,xme),e(xme,$Do),e(Sa,kDo),e(Sa,$me),e($me,SDo),e(Sa,RDo),e(Sa,kme),e(kme,BDo),e(Sa,PDo),e(ro,IDo),e(ro,Sme),e(Sme,dF),e(dF,Rme),e(Rme,qDo),e(dF,NDo),e(dF,uO),e(uO,jDo),e(dF,DDo),e(ro,GDo),e(ro,cF),e(cF,ODo),e(cF,Bme),e(Bme,VDo),e(cF,XDo),e(cF,Pme),e(Pme,zDo),e(ro,QDo),M(fF,ro,null),b(f,mBe,_),b(f,Ui,_),e(Ui,mF),e(mF,Ime),M(Ow,Ime,null),e(Ui,WDo),e(Ui,qme),e(qme,HDo),b(f,gBe,_),b(f,qo,_),M(Vw,qo,null),e(qo,UDo),e(qo,Ji),e(Ji,JDo),e(Ji,_O),e(_O,YDo),e(Ji,KDo),e(Ji,bO),e(bO,ZDo),e(Ji,eGo),e(qo,oGo),e(qo,Xw),e(Xw,rGo),e(Xw,Nme),e(Nme,tGo),e(Xw,aGo),e(qo,nGo),e(qo,dt),M(zw,dt,null),e(dt,sGo),e(dt,jme),e(jme,lGo),e(dt,iGo),e(dt,Yi),e(Yi,dGo),e(Yi,Dme),e(Dme,cGo),e(Yi,fGo),e(Yi,vO),e(vO,mGo),e(Yi,gGo),e(dt,hGo),M(gF,dt,null),e(qo,pGo),e(qo,to),M(Qw,to,null),e(to,uGo),e(to,Gme),e(Gme,_Go),e(to,bGo),e(to,Ra),e(Ra,vGo),e(Ra,Ome),e(Ome,FGo),e(Ra,TGo),e(Ra,Vme),e(Vme,MGo),e(Ra,EGo),e(Ra,Xme),e(Xme,CGo),e(Ra,wGo),e(to,AGo),e(to,ve),e(ve,hF),e(hF,zme),e(zme,yGo),e(hF,LGo),e(hF,FO),e(FO,xGo),e(hF,$Go),e(ve,kGo),e(ve,pF),e(pF,Qme),e(Qme,SGo),e(pF,RGo),e(pF,TO),e(TO,BGo),e(pF,PGo),e(ve,IGo),e(ve,uF),e(uF,Wme),e(Wme,qGo),e(uF,NGo),e(uF,MO),e(MO,jGo),e(uF,DGo),e(ve,GGo),e(ve,xs),e(xs,Hme),e(Hme,OGo),e(xs,VGo),e(xs,EO),e(EO,XGo),e(xs,zGo),e(xs,CO),e(CO,QGo),e(xs,WGo),e(ve,HGo),e(ve,_F),e(_F,Ume),e(Ume,UGo),e(_F,JGo),e(_F,wO),e(wO,YGo),e(_F,KGo),e(ve,ZGo),e(ve,ct),e(ct,Jme),e(Jme,eOo),e(ct,oOo),e(ct,AO),e(AO,rOo),e(ct,tOo),e(ct,yO),e(yO,aOo),e(ct,nOo),e(ct,LO),e(LO,sOo),e(ct,lOo),e(ve,iOo),e(ve,bF),e(bF,Yme),e(Yme,dOo),e(bF,cOo),e(bF,xO),e(xO,fOo),e(bF,mOo),e(ve,gOo),e(ve,vF),e(vF,Kme),e(Kme,hOo),e(vF,pOo),e(vF,$O),e($O,uOo),e(vF,_Oo),e(ve,bOo),e(ve,FF),e(FF,Zme),e(Zme,vOo),e(FF,FOo),e(FF,kO),e(kO,TOo),e(FF,MOo),e(ve,EOo),e(ve,TF),e(TF,ege),e(ege,COo),e(TF,wOo),e(TF,SO),e(SO,AOo),e(TF,yOo),e(ve,LOo),e(ve,MF),e(MF,oge),e(oge,xOo),e(MF,$Oo),e(MF,RO),e(RO,kOo),e(MF,SOo),e(ve,ROo),e(ve,EF),e(EF,rge),e(rge,BOo),e(EF,POo),e(EF,BO),e(BO,IOo),e(EF,qOo),e(ve,NOo),e(ve,CF),e(CF,tge),e(tge,jOo),e(CF,DOo),e(CF,PO),e(PO,GOo),e(CF,OOo),e(to,VOo),e(to,wF),e(wF,XOo),e(wF,age),e(age,zOo),e(wF,QOo),e(wF,nge),e(nge,WOo),e(to,HOo),M(AF,to,null),b(f,hBe,_),b(f,Ki,_),e(Ki,yF),e(yF,sge),M(Ww,sge,null),e(Ki,UOo),e(Ki,lge),e(lge,JOo),b(f,pBe,_),b(f,No,_),M(Hw,No,null),e(No,YOo),e(No,Zi),e(Zi,KOo),e(Zi,IO),e(IO,ZOo),e(Zi,eVo),e(Zi,qO),e(qO,oVo),e(Zi,rVo),e(No,tVo),e(No,Uw),e(Uw,aVo),e(Uw,ige),e(ige,nVo),e(Uw,sVo),e(No,lVo),e(No,ft),M(Jw,ft,null),e(ft,iVo),e(ft,dge),e(dge,dVo),e(ft,cVo),e(ft,ed),e(ed,fVo),e(ed,cge),e(cge,mVo),e(ed,gVo),e(ed,NO),e(NO,hVo),e(ed,pVo),e(ft,uVo),M(LF,ft,null),e(No,_Vo),e(No,ao),M(Yw,ao,null),e(ao,bVo),e(ao,fge),e(fge,vVo),e(ao,FVo),e(ao,Ba),e(Ba,TVo),e(Ba,mge),e(mge,MVo),e(Ba,EVo),e(Ba,gge),e(gge,CVo),e(Ba,wVo),e(Ba,hge),e(hge,AVo),e(Ba,yVo),e(ao,LVo),e(ao,pge),e(pge,xF),e(xF,uge),e(uge,xVo),e(xF,$Vo),e(xF,jO),e(jO,kVo),e(xF,SVo),e(ao,RVo),e(ao,$F),e($F,BVo),e($F,_ge),e(_ge,PVo),e($F,IVo),e($F,bge),e(bge,qVo),e(ao,NVo),M(kF,ao,null),b(f,uBe,_),b(f,od,_),e(od,SF),e(SF,vge),M(Kw,vge,null),e(od,jVo),e(od,Fge),e(Fge,DVo),b(f,_Be,_),b(f,jo,_),M(Zw,jo,null),e(jo,GVo),e(jo,rd),e(rd,OVo),e(rd,DO),e(DO,VVo),e(rd,XVo),e(rd,GO),e(GO,zVo),e(rd,QVo),e(jo,WVo),e(jo,eA),e(eA,HVo),e(eA,Tge),e(Tge,UVo),e(eA,JVo),e(jo,YVo),e(jo,mt),M(oA,mt,null),e(mt,KVo),e(mt,Mge),e(Mge,ZVo),e(mt,eXo),e(mt,td),e(td,oXo),e(td,Ege),e(Ege,rXo),e(td,tXo),e(td,OO),e(OO,aXo),e(td,nXo),e(mt,sXo),M(RF,mt,null),e(jo,lXo),e(jo,no),M(rA,no,null),e(no,iXo),e(no,Cge),e(Cge,dXo),e(no,cXo),e(no,Pa),e(Pa,fXo),e(Pa,wge),e(wge,mXo),e(Pa,gXo),e(Pa,Age),e(Age,hXo),e(Pa,pXo),e(Pa,yge),e(yge,uXo),e(Pa,_Xo),e(no,bXo),e(no,qe),e(qe,BF),e(BF,Lge),e(Lge,vXo),e(BF,FXo),e(BF,VO),e(VO,TXo),e(BF,MXo),e(qe,EXo),e(qe,PF),e(PF,xge),e(xge,CXo),e(PF,wXo),e(PF,XO),e(XO,AXo),e(PF,yXo),e(qe,LXo),e(qe,IF),e(IF,$ge),e($ge,xXo),e(IF,$Xo),e(IF,zO),e(zO,kXo),e(IF,SXo),e(qe,RXo),e(qe,qF),e(qF,kge),e(kge,BXo),e(qF,PXo),e(qF,QO),e(QO,IXo),e(qF,qXo),e(qe,NXo),e(qe,NF),e(NF,Sge),e(Sge,jXo),e(NF,DXo),e(NF,WO),e(WO,GXo),e(NF,OXo),e(qe,VXo),e(qe,jF),e(jF,Rge),e(Rge,XXo),e(jF,zXo),e(jF,HO),e(HO,QXo),e(jF,WXo),e(qe,HXo),e(qe,DF),e(DF,Bge),e(Bge,UXo),e(DF,JXo),e(DF,UO),e(UO,YXo),e(DF,KXo),e(qe,ZXo),e(qe,GF),e(GF,Pge),e(Pge,ezo),e(GF,ozo),e(GF,JO),e(JO,rzo),e(GF,tzo),e(no,azo),e(no,OF),e(OF,nzo),e(OF,Ige),e(Ige,szo),e(OF,lzo),e(OF,qge),e(qge,izo),e(no,dzo),M(VF,no,null),b(f,bBe,_),b(f,ad,_),e(ad,XF),e(XF,Nge),M(tA,Nge,null),e(ad,czo),e(ad,jge),e(jge,fzo),b(f,vBe,_),b(f,Do,_),M(aA,Do,null),e(Do,mzo),e(Do,nd),e(nd,gzo),e(nd,YO),e(YO,hzo),e(nd,pzo),e(nd,KO),e(KO,uzo),e(nd,_zo),e(Do,bzo),e(Do,nA),e(nA,vzo),e(nA,Dge),e(Dge,Fzo),e(nA,Tzo),e(Do,Mzo),e(Do,gt),M(sA,gt,null),e(gt,Ezo),e(gt,Gge),e(Gge,Czo),e(gt,wzo),e(gt,sd),e(sd,Azo),e(sd,Oge),e(Oge,yzo),e(sd,Lzo),e(sd,ZO),e(ZO,xzo),e(sd,$zo),e(gt,kzo),M(zF,gt,null),e(Do,Szo),e(Do,so),M(lA,so,null),e(so,Rzo),e(so,Vge),e(Vge,Bzo),e(so,Pzo),e(so,Ia),e(Ia,Izo),e(Ia,Xge),e(Xge,qzo),e(Ia,Nzo),e(Ia,zge),e(zge,jzo),e(Ia,Dzo),e(Ia,Qge),e(Qge,Gzo),e(Ia,Ozo),e(so,Vzo),e(so,qa),e(qa,QF),e(QF,Wge),e(Wge,Xzo),e(QF,zzo),e(QF,eV),e(eV,Qzo),e(QF,Wzo),e(qa,Hzo),e(qa,WF),e(WF,Hge),e(Hge,Uzo),e(WF,Jzo),e(WF,oV),e(oV,Yzo),e(WF,Kzo),e(qa,Zzo),e(qa,HF),e(HF,Uge),e(Uge,eQo),e(HF,oQo),e(HF,rV),e(rV,rQo),e(HF,tQo),e(qa,aQo),e(qa,UF),e(UF,Jge),e(Jge,nQo),e(UF,sQo),e(UF,tV),e(tV,lQo),e(UF,iQo),e(so,dQo),e(so,JF),e(JF,cQo),e(JF,Yge),e(Yge,fQo),e(JF,mQo),e(JF,Kge),e(Kge,gQo),e(so,hQo),M(YF,so,null),b(f,FBe,_),b(f,ld,_),e(ld,KF),e(KF,Zge),M(iA,Zge,null),e(ld,pQo),e(ld,ehe),e(ehe,uQo),b(f,TBe,_),b(f,Go,_),M(dA,Go,null),e(Go,_Qo),e(Go,id),e(id,bQo),e(id,aV),e(aV,vQo),e(id,FQo),e(id,nV),e(nV,TQo),e(id,MQo),e(Go,EQo),e(Go,cA),e(cA,CQo),e(cA,ohe),e(ohe,wQo),e(cA,AQo),e(Go,yQo),e(Go,ht),M(fA,ht,null),e(ht,LQo),e(ht,rhe),e(rhe,xQo),e(ht,$Qo),e(ht,dd),e(dd,kQo),e(dd,the),e(the,SQo),e(dd,RQo),e(dd,sV),e(sV,BQo),e(dd,PQo),e(ht,IQo),M(ZF,ht,null),e(Go,qQo),e(Go,lo),M(mA,lo,null),e(lo,NQo),e(lo,ahe),e(ahe,jQo),e(lo,DQo),e(lo,Na),e(Na,GQo),e(Na,nhe),e(nhe,OQo),e(Na,VQo),e(Na,she),e(she,XQo),e(Na,zQo),e(Na,lhe),e(lhe,QQo),e(Na,WQo),e(lo,HQo),e(lo,Ne),e(Ne,e0),e(e0,ihe),e(ihe,UQo),e(e0,JQo),e(e0,lV),e(lV,YQo),e(e0,KQo),e(Ne,ZQo),e(Ne,o0),e(o0,dhe),e(dhe,eWo),e(o0,oWo),e(o0,iV),e(iV,rWo),e(o0,tWo),e(Ne,aWo),e(Ne,r0),e(r0,che),e(che,nWo),e(r0,sWo),e(r0,dV),e(dV,lWo),e(r0,iWo),e(Ne,dWo),e(Ne,t0),e(t0,fhe),e(fhe,cWo),e(t0,fWo),e(t0,cV),e(cV,mWo),e(t0,gWo),e(Ne,hWo),e(Ne,a0),e(a0,mhe),e(mhe,pWo),e(a0,uWo),e(a0,fV),e(fV,_Wo),e(a0,bWo),e(Ne,vWo),e(Ne,n0),e(n0,ghe),e(ghe,FWo),e(n0,TWo),e(n0,mV),e(mV,MWo),e(n0,EWo),e(Ne,CWo),e(Ne,s0),e(s0,hhe),e(hhe,wWo),e(s0,AWo),e(s0,gV),e(gV,yWo),e(s0,LWo),e(Ne,xWo),e(Ne,l0),e(l0,phe),e(phe,$Wo),e(l0,kWo),e(l0,hV),e(hV,SWo),e(l0,RWo),e(lo,BWo),e(lo,i0),e(i0,PWo),e(i0,uhe),e(uhe,IWo),e(i0,qWo),e(i0,_he),e(_he,NWo),e(lo,jWo),M(d0,lo,null),b(f,MBe,_),b(f,cd,_),e(cd,c0),e(c0,bhe),M(gA,bhe,null),e(cd,DWo),e(cd,vhe),e(vhe,GWo),b(f,EBe,_),b(f,Oo,_),M(hA,Oo,null),e(Oo,OWo),e(Oo,fd),e(fd,VWo),e(fd,pV),e(pV,XWo),e(fd,zWo),e(fd,uV),e(uV,QWo),e(fd,WWo),e(Oo,HWo),e(Oo,pA),e(pA,UWo),e(pA,Fhe),e(Fhe,JWo),e(pA,YWo),e(Oo,KWo),e(Oo,pt),M(uA,pt,null),e(pt,ZWo),e(pt,The),e(The,eHo),e(pt,oHo),e(pt,md),e(md,rHo),e(md,Mhe),e(Mhe,tHo),e(md,aHo),e(md,_V),e(_V,nHo),e(md,sHo),e(pt,lHo),M(f0,pt,null),e(Oo,iHo),e(Oo,io),M(_A,io,null),e(io,dHo),e(io,Ehe),e(Ehe,cHo),e(io,fHo),e(io,ja),e(ja,mHo),e(ja,Che),e(Che,gHo),e(ja,hHo),e(ja,whe),e(whe,pHo),e(ja,uHo),e(ja,Ahe),e(Ahe,_Ho),e(ja,bHo),e(io,vHo),e(io,bA),e(bA,m0),e(m0,yhe),e(yhe,FHo),e(m0,THo),e(m0,bV),e(bV,MHo),e(m0,EHo),e(bA,CHo),e(bA,g0),e(g0,Lhe),e(Lhe,wHo),e(g0,AHo),e(g0,vV),e(vV,yHo),e(g0,LHo),e(io,xHo),e(io,h0),e(h0,$Ho),e(h0,xhe),e(xhe,kHo),e(h0,SHo),e(h0,$he),e($he,RHo),e(io,BHo),M(p0,io,null),b(f,CBe,_),b(f,gd,_),e(gd,u0),e(u0,khe),M(vA,khe,null),e(gd,PHo),e(gd,She),e(She,IHo),b(f,wBe,_),b(f,Vo,_),M(FA,Vo,null),e(Vo,qHo),e(Vo,hd),e(hd,NHo),e(hd,FV),e(FV,jHo),e(hd,DHo),e(hd,TV),e(TV,GHo),e(hd,OHo),e(Vo,VHo),e(Vo,TA),e(TA,XHo),e(TA,Rhe),e(Rhe,zHo),e(TA,QHo),e(Vo,WHo),e(Vo,ut),M(MA,ut,null),e(ut,HHo),e(ut,Bhe),e(Bhe,UHo),e(ut,JHo),e(ut,pd),e(pd,YHo),e(pd,Phe),e(Phe,KHo),e(pd,ZHo),e(pd,MV),e(MV,eUo),e(pd,oUo),e(ut,rUo),M(_0,ut,null),e(Vo,tUo),e(Vo,co),M(EA,co,null),e(co,aUo),e(co,Ihe),e(Ihe,nUo),e(co,sUo),e(co,Da),e(Da,lUo),e(Da,qhe),e(qhe,iUo),e(Da,dUo),e(Da,Nhe),e(Nhe,cUo),e(Da,fUo),e(Da,jhe),e(jhe,mUo),e(Da,gUo),e(co,hUo),e(co,Ga),e(Ga,b0),e(b0,Dhe),e(Dhe,pUo),e(b0,uUo),e(b0,EV),e(EV,_Uo),e(b0,bUo),e(Ga,vUo),e(Ga,v0),e(v0,Ghe),e(Ghe,FUo),e(v0,TUo),e(v0,CV),e(CV,MUo),e(v0,EUo),e(Ga,CUo),e(Ga,F0),e(F0,Ohe),e(Ohe,wUo),e(F0,AUo),e(F0,wV),e(wV,yUo),e(F0,LUo),e(Ga,xUo),e(Ga,T0),e(T0,Vhe),e(Vhe,$Uo),e(T0,kUo),e(T0,AV),e(AV,SUo),e(T0,RUo),e(co,BUo),e(co,M0),e(M0,PUo),e(M0,Xhe),e(Xhe,IUo),e(M0,qUo),e(M0,zhe),e(zhe,NUo),e(co,jUo),M(E0,co,null),b(f,ABe,_),b(f,ud,_),e(ud,C0),e(C0,Qhe),M(CA,Qhe,null),e(ud,DUo),e(ud,Whe),e(Whe,GUo),b(f,yBe,_),b(f,Xo,_),M(wA,Xo,null),e(Xo,OUo),e(Xo,_d),e(_d,VUo),e(_d,yV),e(yV,XUo),e(_d,zUo),e(_d,LV),e(LV,QUo),e(_d,WUo),e(Xo,HUo),e(Xo,AA),e(AA,UUo),e(AA,Hhe),e(Hhe,JUo),e(AA,YUo),e(Xo,KUo),e(Xo,_t),M(yA,_t,null),e(_t,ZUo),e(_t,Uhe),e(Uhe,eJo),e(_t,oJo),e(_t,bd),e(bd,rJo),e(bd,Jhe),e(Jhe,tJo),e(bd,aJo),e(bd,xV),e(xV,nJo),e(bd,sJo),e(_t,lJo),M(w0,_t,null),e(Xo,iJo),e(Xo,fo),M(LA,fo,null),e(fo,dJo),e(fo,Yhe),e(Yhe,cJo),e(fo,fJo),e(fo,Oa),e(Oa,mJo),e(Oa,Khe),e(Khe,gJo),e(Oa,hJo),e(Oa,Zhe),e(Zhe,pJo),e(Oa,uJo),e(Oa,epe),e(epe,_Jo),e(Oa,bJo),e(fo,vJo),e(fo,Va),e(Va,A0),e(A0,ope),e(ope,FJo),e(A0,TJo),e(A0,$V),e($V,MJo),e(A0,EJo),e(Va,CJo),e(Va,y0),e(y0,rpe),e(rpe,wJo),e(y0,AJo),e(y0,kV),e(kV,yJo),e(y0,LJo),e(Va,xJo),e(Va,L0),e(L0,tpe),e(tpe,$Jo),e(L0,kJo),e(L0,SV),e(SV,SJo),e(L0,RJo),e(Va,BJo),e(Va,x0),e(x0,ape),e(ape,PJo),e(x0,IJo),e(x0,RV),e(RV,qJo),e(x0,NJo),e(fo,jJo),e(fo,$0),e($0,DJo),e($0,npe),e(npe,GJo),e($0,OJo),e($0,spe),e(spe,VJo),e(fo,XJo),M(k0,fo,null),b(f,LBe,_),b(f,vd,_),e(vd,S0),e(S0,lpe),M(xA,lpe,null),e(vd,zJo),e(vd,ipe),e(ipe,QJo),b(f,xBe,_),b(f,zo,_),M($A,zo,null),e(zo,WJo),e(zo,Fd),e(Fd,HJo),e(Fd,BV),e(BV,UJo),e(Fd,JJo),e(Fd,PV),e(PV,YJo),e(Fd,KJo),e(zo,ZJo),e(zo,kA),e(kA,eYo),e(kA,dpe),e(dpe,oYo),e(kA,rYo),e(zo,tYo),e(zo,bt),M(SA,bt,null),e(bt,aYo),e(bt,cpe),e(cpe,nYo),e(bt,sYo),e(bt,Td),e(Td,lYo),e(Td,fpe),e(fpe,iYo),e(Td,dYo),e(Td,IV),e(IV,cYo),e(Td,fYo),e(bt,mYo),M(R0,bt,null),e(zo,gYo),e(zo,mo),M(RA,mo,null),e(mo,hYo),e(mo,mpe),e(mpe,pYo),e(mo,uYo),e(mo,Xa),e(Xa,_Yo),e(Xa,gpe),e(gpe,bYo),e(Xa,vYo),e(Xa,hpe),e(hpe,FYo),e(Xa,TYo),e(Xa,ppe),e(ppe,MYo),e(Xa,EYo),e(mo,CYo),e(mo,upe),e(upe,B0),e(B0,_pe),e(_pe,wYo),e(B0,AYo),e(B0,qV),e(qV,yYo),e(B0,LYo),e(mo,xYo),e(mo,P0),e(P0,$Yo),e(P0,bpe),e(bpe,kYo),e(P0,SYo),e(P0,vpe),e(vpe,RYo),e(mo,BYo),M(I0,mo,null),b(f,$Be,_),b(f,Md,_),e(Md,q0),e(q0,Fpe),M(BA,Fpe,null),e(Md,PYo),e(Md,Tpe),e(Tpe,IYo),b(f,kBe,_),b(f,Qo,_),M(PA,Qo,null),e(Qo,qYo),e(Qo,Ed),e(Ed,NYo),e(Ed,NV),e(NV,jYo),e(Ed,DYo),e(Ed,jV),e(jV,GYo),e(Ed,OYo),e(Qo,VYo),e(Qo,IA),e(IA,XYo),e(IA,Mpe),e(Mpe,zYo),e(IA,QYo),e(Qo,WYo),e(Qo,vt),M(qA,vt,null),e(vt,HYo),e(vt,Epe),e(Epe,UYo),e(vt,JYo),e(vt,Cd),e(Cd,YYo),e(Cd,Cpe),e(Cpe,KYo),e(Cd,ZYo),e(Cd,DV),e(DV,eKo),e(Cd,oKo),e(vt,rKo),M(N0,vt,null),e(Qo,tKo),e(Qo,go),M(NA,go,null),e(go,aKo),e(go,wpe),e(wpe,nKo),e(go,sKo),e(go,za),e(za,lKo),e(za,Ape),e(Ape,iKo),e(za,dKo),e(za,ype),e(ype,cKo),e(za,fKo),e(za,Lpe),e(Lpe,mKo),e(za,gKo),e(go,hKo),e(go,xpe),e(xpe,j0),e(j0,$pe),e($pe,pKo),e(j0,uKo),e(j0,GV),e(GV,_Ko),e(j0,bKo),e(go,vKo),e(go,D0),e(D0,FKo),e(D0,kpe),e(kpe,TKo),e(D0,MKo),e(D0,Spe),e(Spe,EKo),e(go,CKo),M(G0,go,null),b(f,SBe,_),b(f,wd,_),e(wd,O0),e(O0,Rpe),M(jA,Rpe,null),e(wd,wKo),e(wd,Bpe),e(Bpe,AKo),b(f,RBe,_),b(f,Wo,_),M(DA,Wo,null),e(Wo,yKo),e(Wo,Ad),e(Ad,LKo),e(Ad,OV),e(OV,xKo),e(Ad,$Ko),e(Ad,VV),e(VV,kKo),e(Ad,SKo),e(Wo,RKo),e(Wo,GA),e(GA,BKo),e(GA,Ppe),e(Ppe,PKo),e(GA,IKo),e(Wo,qKo),e(Wo,Ft),M(OA,Ft,null),e(Ft,NKo),e(Ft,Ipe),e(Ipe,jKo),e(Ft,DKo),e(Ft,yd),e(yd,GKo),e(yd,qpe),e(qpe,OKo),e(yd,VKo),e(yd,XV),e(XV,XKo),e(yd,zKo),e(Ft,QKo),M(V0,Ft,null),e(Wo,WKo),e(Wo,ho),M(VA,ho,null),e(ho,HKo),e(ho,Npe),e(Npe,UKo),e(ho,JKo),e(ho,Qa),e(Qa,YKo),e(Qa,jpe),e(jpe,KKo),e(Qa,ZKo),e(Qa,Dpe),e(Dpe,eZo),e(Qa,oZo),e(Qa,Gpe),e(Gpe,rZo),e(Qa,tZo),e(ho,aZo),e(ho,Wa),e(Wa,X0),e(X0,Ope),e(Ope,nZo),e(X0,sZo),e(X0,zV),e(zV,lZo),e(X0,iZo),e(Wa,dZo),e(Wa,z0),e(z0,Vpe),e(Vpe,cZo),e(z0,fZo),e(z0,QV),e(QV,mZo),e(z0,gZo),e(Wa,hZo),e(Wa,Q0),e(Q0,Xpe),e(Xpe,pZo),e(Q0,uZo),e(Q0,WV),e(WV,_Zo),e(Q0,bZo),e(Wa,vZo),e(Wa,W0),e(W0,zpe),e(zpe,FZo),e(W0,TZo),e(W0,HV),e(HV,MZo),e(W0,EZo),e(ho,CZo),e(ho,H0),e(H0,wZo),e(H0,Qpe),e(Qpe,AZo),e(H0,yZo),e(H0,Wpe),e(Wpe,LZo),e(ho,xZo),M(U0,ho,null),b(f,BBe,_),b(f,Ld,_),e(Ld,J0),e(J0,Hpe),M(XA,Hpe,null),e(Ld,$Zo),e(Ld,Upe),e(Upe,kZo),b(f,PBe,_),b(f,Ho,_),M(zA,Ho,null),e(Ho,SZo),e(Ho,xd),e(xd,RZo),e(xd,UV),e(UV,BZo),e(xd,PZo),e(xd,JV),e(JV,IZo),e(xd,qZo),e(Ho,NZo),e(Ho,QA),e(QA,jZo),e(QA,Jpe),e(Jpe,DZo),e(QA,GZo),e(Ho,OZo),e(Ho,Tt),M(WA,Tt,null),e(Tt,VZo),e(Tt,Ype),e(Ype,XZo),e(Tt,zZo),e(Tt,$d),e($d,QZo),e($d,Kpe),e(Kpe,WZo),e($d,HZo),e($d,YV),e(YV,UZo),e($d,JZo),e(Tt,YZo),M(Y0,Tt,null),e(Ho,KZo),e(Ho,po),M(HA,po,null),e(po,ZZo),e(po,Zpe),e(Zpe,eer),e(po,oer),e(po,Ha),e(Ha,rer),e(Ha,eue),e(eue,ter),e(Ha,aer),e(Ha,oue),e(oue,ner),e(Ha,ser),e(Ha,rue),e(rue,ler),e(Ha,ier),e(po,der),e(po,tue),e(tue,K0),e(K0,aue),e(aue,cer),e(K0,fer),e(K0,KV),e(KV,mer),e(K0,ger),e(po,her),e(po,Z0),e(Z0,per),e(Z0,nue),e(nue,uer),e(Z0,_er),e(Z0,sue),e(sue,ber),e(po,ver),M(e6,po,null),b(f,IBe,_),b(f,kd,_),e(kd,o6),e(o6,lue),M(UA,lue,null),e(kd,Fer),e(kd,iue),e(iue,Ter),b(f,qBe,_),b(f,Uo,_),M(JA,Uo,null),e(Uo,Mer),e(Uo,Sd),e(Sd,Eer),e(Sd,ZV),e(ZV,Cer),e(Sd,wer),e(Sd,eX),e(eX,Aer),e(Sd,yer),e(Uo,Ler),e(Uo,YA),e(YA,xer),e(YA,due),e(due,$er),e(YA,ker),e(Uo,Ser),e(Uo,Mt),M(KA,Mt,null),e(Mt,Rer),e(Mt,cue),e(cue,Ber),e(Mt,Per),e(Mt,Rd),e(Rd,Ier),e(Rd,fue),e(fue,qer),e(Rd,Ner),e(Rd,oX),e(oX,jer),e(Rd,Der),e(Mt,Ger),M(r6,Mt,null),e(Uo,Oer),e(Uo,Mr),M(ZA,Mr,null),e(Mr,Ver),e(Mr,mue),e(mue,Xer),e(Mr,zer),e(Mr,Ua),e(Ua,Qer),e(Ua,gue),e(gue,Wer),e(Ua,Her),e(Ua,hue),e(hue,Uer),e(Ua,Jer),e(Ua,pue),e(pue,Yer),e(Ua,Ker),e(Mr,Zer),e(Mr,j),e(j,t6),e(t6,uue),e(uue,eor),e(t6,oor),e(t6,rX),e(rX,ror),e(t6,tor),e(j,aor),e(j,a6),e(a6,_ue),e(_ue,nor),e(a6,sor),e(a6,tX),e(tX,lor),e(a6,ior),e(j,dor),e(j,n6),e(n6,bue),e(bue,cor),e(n6,mor),e(n6,aX),e(aX,gor),e(n6,hor),e(j,por),e(j,s6),e(s6,vue),e(vue,uor),e(s6,_or),e(s6,nX),e(nX,bor),e(s6,vor),e(j,For),e(j,l6),e(l6,Fue),e(Fue,Tor),e(l6,Mor),e(l6,sX),e(sX,Eor),e(l6,Cor),e(j,wor),e(j,i6),e(i6,Tue),e(Tue,Aor),e(i6,yor),e(i6,lX),e(lX,Lor),e(i6,xor),e(j,$or),e(j,d6),e(d6,Mue),e(Mue,kor),e(d6,Sor),e(d6,iX),e(iX,Ror),e(d6,Bor),e(j,Por),e(j,c6),e(c6,Eue),e(Eue,Ior),e(c6,qor),e(c6,dX),e(dX,Nor),e(c6,jor),e(j,Dor),e(j,f6),e(f6,Cue),e(Cue,Gor),e(f6,Oor),e(f6,cX),e(cX,Vor),e(f6,Xor),e(j,zor),e(j,m6),e(m6,wue),e(wue,Qor),e(m6,Wor),e(m6,fX),e(fX,Hor),e(m6,Uor),e(j,Jor),e(j,g6),e(g6,Aue),e(Aue,Yor),e(g6,Kor),e(g6,mX),e(mX,Zor),e(g6,err),e(j,orr),e(j,h6),e(h6,yue),e(yue,rrr),e(h6,trr),e(h6,gX),e(gX,arr),e(h6,nrr),e(j,srr),e(j,p6),e(p6,Lue),e(Lue,lrr),e(p6,irr),e(p6,hX),e(hX,drr),e(p6,crr),e(j,frr),e(j,u6),e(u6,xue),e(xue,mrr),e(u6,grr),e(u6,pX),e(pX,hrr),e(u6,prr),e(j,urr),e(j,_6),e(_6,$ue),e($ue,_rr),e(_6,brr),e(_6,uX),e(uX,vrr),e(_6,Frr),e(j,Trr),e(j,b6),e(b6,kue),e(kue,Mrr),e(b6,Err),e(b6,_X),e(_X,Crr),e(b6,wrr),e(j,Arr),e(j,$s),e($s,Sue),e(Sue,yrr),e($s,Lrr),e($s,bX),e(bX,xrr),e($s,$rr),e($s,vX),e(vX,krr),e($s,Srr),e(j,Rrr),e(j,v6),e(v6,Rue),e(Rue,Brr),e(v6,Prr),e(v6,FX),e(FX,Irr),e(v6,qrr),e(j,Nrr),e(j,F6),e(F6,Bue),e(Bue,jrr),e(F6,Drr),e(F6,TX),e(TX,Grr),e(F6,Orr),e(j,Vrr),e(j,T6),e(T6,Pue),e(Pue,Xrr),e(T6,zrr),e(T6,MX),e(MX,Qrr),e(T6,Wrr),e(j,Hrr),e(j,M6),e(M6,Iue),e(Iue,Urr),e(M6,Jrr),e(M6,EX),e(EX,Yrr),e(M6,Krr),e(j,Zrr),e(j,E6),e(E6,que),e(que,etr),e(E6,otr),e(E6,CX),e(CX,rtr),e(E6,ttr),e(j,atr),e(j,C6),e(C6,Nue),e(Nue,ntr),e(C6,str),e(C6,wX),e(wX,ltr),e(C6,itr),e(j,dtr),e(j,w6),e(w6,jue),e(jue,ctr),e(w6,ftr),e(w6,AX),e(AX,mtr),e(w6,gtr),e(j,htr),e(j,A6),e(A6,Due),e(Due,ptr),e(A6,utr),e(A6,yX),e(yX,_tr),e(A6,btr),e(j,vtr),e(j,y6),e(y6,Gue),e(Gue,Ftr),e(y6,Ttr),e(y6,LX),e(LX,Mtr),e(y6,Etr),e(j,Ctr),e(j,L6),e(L6,Oue),e(Oue,wtr),e(L6,Atr),e(L6,xX),e(xX,ytr),e(L6,Ltr),e(j,xtr),e(j,x6),e(x6,Vue),e(Vue,$tr),e(x6,ktr),e(x6,$X),e($X,Str),e(x6,Rtr),e(j,Btr),e(j,$6),e($6,Xue),e(Xue,Ptr),e($6,Itr),e($6,kX),e(kX,qtr),e($6,Ntr),e(j,jtr),e(j,k6),e(k6,zue),e(zue,Dtr),e(k6,Gtr),e(k6,SX),e(SX,Otr),e(k6,Vtr),e(j,Xtr),e(j,S6),e(S6,Que),e(Que,ztr),e(S6,Qtr),e(S6,RX),e(RX,Wtr),e(S6,Htr),e(j,Utr),e(j,R6),e(R6,Wue),e(Wue,Jtr),e(R6,Ytr),e(R6,BX),e(BX,Ktr),e(R6,Ztr),e(j,ear),e(j,B6),e(B6,Hue),e(Hue,oar),e(B6,rar),e(B6,PX),e(PX,tar),e(B6,aar),e(j,nar),e(j,P6),e(P6,Uue),e(Uue,sar),e(P6,lar),e(P6,IX),e(IX,iar),e(P6,dar),e(j,car),e(j,I6),e(I6,Jue),e(Jue,far),e(I6,mar),e(I6,qX),e(qX,gar),e(I6,har),e(j,par),e(j,q6),e(q6,Yue),e(Yue,uar),e(q6,_ar),e(q6,NX),e(NX,bar),e(q6,Far),e(j,Tar),e(j,N6),e(N6,Kue),e(Kue,Mar),e(N6,Ear),e(N6,jX),e(jX,Car),e(N6,war),e(j,Aar),e(j,j6),e(j6,Zue),e(Zue,yar),e(j6,Lar),e(j6,DX),e(DX,xar),e(j6,$ar),e(j,kar),e(j,D6),e(D6,e_e),e(e_e,Sar),e(D6,Rar),e(D6,GX),e(GX,Bar),e(D6,Par),e(j,Iar),e(j,G6),e(G6,o_e),e(o_e,qar),e(G6,Nar),e(G6,OX),e(OX,jar),e(G6,Dar),e(j,Gar),e(j,O6),e(O6,r_e),e(r_e,Oar),e(O6,Var),e(O6,VX),e(VX,Xar),e(O6,zar),e(j,Qar),e(j,V6),e(V6,t_e),e(t_e,War),e(V6,Har),e(V6,XX),e(XX,Uar),e(V6,Jar),e(j,Yar),e(j,X6),e(X6,a_e),e(a_e,Kar),e(X6,Zar),e(X6,zX),e(zX,enr),e(X6,onr),e(j,rnr),e(j,z6),e(z6,n_e),e(n_e,tnr),e(z6,anr),e(z6,QX),e(QX,nnr),e(z6,snr),e(Mr,lnr),M(Q6,Mr,null),b(f,NBe,_),b(f,Bd,_),e(Bd,W6),e(W6,s_e),M(ey,s_e,null),e(Bd,inr),e(Bd,l_e),e(l_e,dnr),b(f,jBe,_),b(f,Jo,_),M(oy,Jo,null),e(Jo,cnr),e(Jo,Pd),e(Pd,fnr),e(Pd,WX),e(WX,mnr),e(Pd,gnr),e(Pd,HX),e(HX,hnr),e(Pd,pnr),e(Jo,unr),e(Jo,ry),e(ry,_nr),e(ry,i_e),e(i_e,bnr),e(ry,vnr),e(Jo,Fnr),e(Jo,Et),M(ty,Et,null),e(Et,Tnr),e(Et,d_e),e(d_e,Mnr),e(Et,Enr),e(Et,Id),e(Id,Cnr),e(Id,c_e),e(c_e,wnr),e(Id,Anr),e(Id,UX),e(UX,ynr),e(Id,Lnr),e(Et,xnr),M(H6,Et,null),e(Jo,$nr),e(Jo,Er),M(ay,Er,null),e(Er,knr),e(Er,f_e),e(f_e,Snr),e(Er,Rnr),e(Er,Ja),e(Ja,Bnr),e(Ja,m_e),e(m_e,Pnr),e(Ja,Inr),e(Ja,g_e),e(g_e,qnr),e(Ja,Nnr),e(Ja,h_e),e(h_e,jnr),e(Ja,Dnr),e(Er,Gnr),e(Er,ne),e(ne,U6),e(U6,p_e),e(p_e,Onr),e(U6,Vnr),e(U6,JX),e(JX,Xnr),e(U6,znr),e(ne,Qnr),e(ne,J6),e(J6,u_e),e(u_e,Wnr),e(J6,Hnr),e(J6,YX),e(YX,Unr),e(J6,Jnr),e(ne,Ynr),e(ne,Y6),e(Y6,__e),e(__e,Knr),e(Y6,Znr),e(Y6,KX),e(KX,esr),e(Y6,osr),e(ne,rsr),e(ne,K6),e(K6,b_e),e(b_e,tsr),e(K6,asr),e(K6,ZX),e(ZX,nsr),e(K6,ssr),e(ne,lsr),e(ne,Z6),e(Z6,v_e),e(v_e,isr),e(Z6,dsr),e(Z6,ez),e(ez,csr),e(Z6,fsr),e(ne,msr),e(ne,eT),e(eT,F_e),e(F_e,gsr),e(eT,hsr),e(eT,oz),e(oz,psr),e(eT,usr),e(ne,_sr),e(ne,oT),e(oT,T_e),e(T_e,bsr),e(oT,vsr),e(oT,rz),e(rz,Fsr),e(oT,Tsr),e(ne,Msr),e(ne,rT),e(rT,M_e),e(M_e,Esr),e(rT,Csr),e(rT,tz),e(tz,wsr),e(rT,Asr),e(ne,ysr),e(ne,tT),e(tT,E_e),e(E_e,Lsr),e(tT,xsr),e(tT,az),e(az,$sr),e(tT,ksr),e(ne,Ssr),e(ne,aT),e(aT,C_e),e(C_e,Rsr),e(aT,Bsr),e(aT,nz),e(nz,Psr),e(aT,Isr),e(ne,qsr),e(ne,nT),e(nT,w_e),e(w_e,Nsr),e(nT,jsr),e(nT,sz),e(sz,Dsr),e(nT,Gsr),e(ne,Osr),e(ne,sT),e(sT,A_e),e(A_e,Vsr),e(sT,Xsr),e(sT,lz),e(lz,zsr),e(sT,Qsr),e(ne,Wsr),e(ne,lT),e(lT,y_e),e(y_e,Hsr),e(lT,Usr),e(lT,iz),e(iz,Jsr),e(lT,Ysr),e(ne,Ksr),e(ne,iT),e(iT,L_e),e(L_e,Zsr),e(iT,elr),e(iT,dz),e(dz,olr),e(iT,rlr),e(ne,tlr),e(ne,dT),e(dT,x_e),e(x_e,alr),e(dT,nlr),e(dT,cz),e(cz,slr),e(dT,llr),e(ne,ilr),e(ne,cT),e(cT,$_e),e($_e,dlr),e(cT,clr),e(cT,fz),e(fz,flr),e(cT,mlr),e(ne,glr),e(ne,fT),e(fT,k_e),e(k_e,hlr),e(fT,plr),e(fT,mz),e(mz,ulr),e(fT,_lr),e(ne,blr),e(ne,mT),e(mT,S_e),e(S_e,vlr),e(mT,Flr),e(mT,gz),e(gz,Tlr),e(mT,Mlr),e(ne,Elr),e(ne,gT),e(gT,R_e),e(R_e,Clr),e(gT,wlr),e(gT,hz),e(hz,Alr),e(gT,ylr),e(ne,Llr),e(ne,hT),e(hT,B_e),e(B_e,xlr),e(hT,$lr),e(hT,pz),e(pz,klr),e(hT,Slr),e(ne,Rlr),e(ne,pT),e(pT,P_e),e(P_e,Blr),e(pT,Plr),e(pT,uz),e(uz,Ilr),e(pT,qlr),e(ne,Nlr),e(ne,uT),e(uT,I_e),e(I_e,jlr),e(uT,Dlr),e(uT,_z),e(_z,Glr),e(uT,Olr),e(ne,Vlr),e(ne,_T),e(_T,q_e),e(q_e,Xlr),e(_T,zlr),e(_T,bz),e(bz,Qlr),e(_T,Wlr),e(Er,Hlr),M(bT,Er,null),b(f,DBe,_),b(f,qd,_),e(qd,vT),e(vT,N_e),M(ny,N_e,null),e(qd,Ulr),e(qd,j_e),e(j_e,Jlr),b(f,GBe,_),b(f,Yo,_),M(sy,Yo,null),e(Yo,Ylr),e(Yo,Nd),e(Nd,Klr),e(Nd,vz),e(vz,Zlr),e(Nd,eir),e(Nd,Fz),e(Fz,oir),e(Nd,rir),e(Yo,tir),e(Yo,ly),e(ly,air),e(ly,D_e),e(D_e,nir),e(ly,sir),e(Yo,lir),e(Yo,Ct),M(iy,Ct,null),e(Ct,iir),e(Ct,G_e),e(G_e,dir),e(Ct,cir),e(Ct,jd),e(jd,fir),e(jd,O_e),e(O_e,mir),e(jd,gir),e(jd,Tz),e(Tz,hir),e(jd,pir),e(Ct,uir),M(FT,Ct,null),e(Yo,_ir),e(Yo,Cr),M(dy,Cr,null),e(Cr,bir),e(Cr,V_e),e(V_e,vir),e(Cr,Fir),e(Cr,Ya),e(Ya,Tir),e(Ya,X_e),e(X_e,Mir),e(Ya,Eir),e(Ya,z_e),e(z_e,Cir),e(Ya,wir),e(Ya,Q_e),e(Q_e,Air),e(Ya,yir),e(Cr,Lir),e(Cr,Te),e(Te,TT),e(TT,W_e),e(W_e,xir),e(TT,$ir),e(TT,Mz),e(Mz,kir),e(TT,Sir),e(Te,Rir),e(Te,MT),e(MT,H_e),e(H_e,Bir),e(MT,Pir),e(MT,Ez),e(Ez,Iir),e(MT,qir),e(Te,Nir),e(Te,ET),e(ET,U_e),e(U_e,jir),e(ET,Dir),e(ET,Cz),e(Cz,Gir),e(ET,Oir),e(Te,Vir),e(Te,CT),e(CT,J_e),e(J_e,Xir),e(CT,zir),e(CT,wz),e(wz,Qir),e(CT,Wir),e(Te,Hir),e(Te,wT),e(wT,Y_e),e(Y_e,Uir),e(wT,Jir),e(wT,Az),e(Az,Yir),e(wT,Kir),e(Te,Zir),e(Te,AT),e(AT,K_e),e(K_e,edr),e(AT,odr),e(AT,yz),e(yz,rdr),e(AT,tdr),e(Te,adr),e(Te,yT),e(yT,Z_e),e(Z_e,ndr),e(yT,sdr),e(yT,Lz),e(Lz,ldr),e(yT,idr),e(Te,ddr),e(Te,LT),e(LT,e1e),e(e1e,cdr),e(LT,fdr),e(LT,xz),e(xz,mdr),e(LT,gdr),e(Te,hdr),e(Te,xT),e(xT,o1e),e(o1e,pdr),e(xT,udr),e(xT,$z),e($z,_dr),e(xT,bdr),e(Te,vdr),e(Te,$T),e($T,r1e),e(r1e,Fdr),e($T,Tdr),e($T,kz),e(kz,Mdr),e($T,Edr),e(Te,Cdr),e(Te,kT),e(kT,t1e),e(t1e,wdr),e(kT,Adr),e(kT,Sz),e(Sz,ydr),e(kT,Ldr),e(Te,xdr),e(Te,ST),e(ST,a1e),e(a1e,$dr),e(ST,kdr),e(ST,Rz),e(Rz,Sdr),e(ST,Rdr),e(Cr,Bdr),M(RT,Cr,null),b(f,OBe,_),b(f,Dd,_),e(Dd,BT),e(BT,n1e),M(cy,n1e,null),e(Dd,Pdr),e(Dd,s1e),e(s1e,Idr),b(f,VBe,_),b(f,Ko,_),M(fy,Ko,null),e(Ko,qdr),e(Ko,Gd),e(Gd,Ndr),e(Gd,Bz),e(Bz,jdr),e(Gd,Ddr),e(Gd,Pz),e(Pz,Gdr),e(Gd,Odr),e(Ko,Vdr),e(Ko,my),e(my,Xdr),e(my,l1e),e(l1e,zdr),e(my,Qdr),e(Ko,Wdr),e(Ko,wt),M(gy,wt,null),e(wt,Hdr),e(wt,i1e),e(i1e,Udr),e(wt,Jdr),e(wt,Od),e(Od,Ydr),e(Od,d1e),e(d1e,Kdr),e(Od,Zdr),e(Od,Iz),e(Iz,ecr),e(Od,ocr),e(wt,rcr),M(PT,wt,null),e(Ko,tcr),e(Ko,wr),M(hy,wr,null),e(wr,acr),e(wr,c1e),e(c1e,ncr),e(wr,scr),e(wr,Ka),e(Ka,lcr),e(Ka,f1e),e(f1e,icr),e(Ka,dcr),e(Ka,m1e),e(m1e,ccr),e(Ka,fcr),e(Ka,g1e),e(g1e,mcr),e(Ka,gcr),e(wr,hcr),e(wr,py),e(py,IT),e(IT,h1e),e(h1e,pcr),e(IT,ucr),e(IT,qz),e(qz,_cr),e(IT,bcr),e(py,vcr),e(py,qT),e(qT,p1e),e(p1e,Fcr),e(qT,Tcr),e(qT,Nz),e(Nz,Mcr),e(qT,Ecr),e(wr,Ccr),M(NT,wr,null),b(f,XBe,_),b(f,Vd,_),e(Vd,jT),e(jT,u1e),M(uy,u1e,null),e(Vd,wcr),e(Vd,_1e),e(_1e,Acr),b(f,zBe,_),b(f,Zo,_),M(_y,Zo,null),e(Zo,ycr),e(Zo,Xd),e(Xd,Lcr),e(Xd,jz),e(jz,xcr),e(Xd,$cr),e(Xd,Dz),e(Dz,kcr),e(Xd,Scr),e(Zo,Rcr),e(Zo,by),e(by,Bcr),e(by,b1e),e(b1e,Pcr),e(by,Icr),e(Zo,qcr),e(Zo,At),M(vy,At,null),e(At,Ncr),e(At,v1e),e(v1e,jcr),e(At,Dcr),e(At,zd),e(zd,Gcr),e(zd,F1e),e(F1e,Ocr),e(zd,Vcr),e(zd,Gz),e(Gz,Xcr),e(zd,zcr),e(At,Qcr),M(DT,At,null),e(Zo,Wcr),e(Zo,Ar),M(Fy,Ar,null),e(Ar,Hcr),e(Ar,T1e),e(T1e,Ucr),e(Ar,Jcr),e(Ar,Za),e(Za,Ycr),e(Za,M1e),e(M1e,Kcr),e(Za,Zcr),e(Za,E1e),e(E1e,efr),e(Za,ofr),e(Za,C1e),e(C1e,rfr),e(Za,tfr),e(Ar,afr),e(Ar,ie),e(ie,GT),e(GT,w1e),e(w1e,nfr),e(GT,sfr),e(GT,Oz),e(Oz,lfr),e(GT,ifr),e(ie,dfr),e(ie,OT),e(OT,A1e),e(A1e,cfr),e(OT,ffr),e(OT,Vz),e(Vz,mfr),e(OT,gfr),e(ie,hfr),e(ie,VT),e(VT,y1e),e(y1e,pfr),e(VT,ufr),e(VT,Xz),e(Xz,_fr),e(VT,bfr),e(ie,vfr),e(ie,XT),e(XT,L1e),e(L1e,Ffr),e(XT,Tfr),e(XT,zz),e(zz,Mfr),e(XT,Efr),e(ie,Cfr),e(ie,zT),e(zT,x1e),e(x1e,wfr),e(zT,Afr),e(zT,Qz),e(Qz,yfr),e(zT,Lfr),e(ie,xfr),e(ie,QT),e(QT,$1e),e($1e,$fr),e(QT,kfr),e(QT,Wz),e(Wz,Sfr),e(QT,Rfr),e(ie,Bfr),e(ie,WT),e(WT,k1e),e(k1e,Pfr),e(WT,Ifr),e(WT,Hz),e(Hz,qfr),e(WT,Nfr),e(ie,jfr),e(ie,HT),e(HT,S1e),e(S1e,Dfr),e(HT,Gfr),e(HT,Uz),e(Uz,Ofr),e(HT,Vfr),e(ie,Xfr),e(ie,UT),e(UT,R1e),e(R1e,zfr),e(UT,Qfr),e(UT,Jz),e(Jz,Wfr),e(UT,Hfr),e(ie,Ufr),e(ie,JT),e(JT,B1e),e(B1e,Jfr),e(JT,Yfr),e(JT,Yz),e(Yz,Kfr),e(JT,Zfr),e(ie,emr),e(ie,YT),e(YT,P1e),e(P1e,omr),e(YT,rmr),e(YT,Kz),e(Kz,tmr),e(YT,amr),e(ie,nmr),e(ie,KT),e(KT,I1e),e(I1e,smr),e(KT,lmr),e(KT,Zz),e(Zz,imr),e(KT,dmr),e(ie,cmr),e(ie,ZT),e(ZT,q1e),e(q1e,fmr),e(ZT,mmr),e(ZT,eQ),e(eQ,gmr),e(ZT,hmr),e(ie,pmr),e(ie,e8),e(e8,N1e),e(N1e,umr),e(e8,_mr),e(e8,oQ),e(oQ,bmr),e(e8,vmr),e(ie,Fmr),e(ie,o8),e(o8,j1e),e(j1e,Tmr),e(o8,Mmr),e(o8,rQ),e(rQ,Emr),e(o8,Cmr),e(ie,wmr),e(ie,r8),e(r8,D1e),e(D1e,Amr),e(r8,ymr),e(r8,tQ),e(tQ,Lmr),e(r8,xmr),e(ie,$mr),e(ie,t8),e(t8,G1e),e(G1e,kmr),e(t8,Smr),e(t8,aQ),e(aQ,Rmr),e(t8,Bmr),e(ie,Pmr),e(ie,a8),e(a8,O1e),e(O1e,Imr),e(a8,qmr),e(a8,nQ),e(nQ,Nmr),e(a8,jmr),e(ie,Dmr),e(ie,n8),e(n8,V1e),e(V1e,Gmr),e(n8,Omr),e(n8,sQ),e(sQ,Vmr),e(n8,Xmr),e(ie,zmr),e(ie,s8),e(s8,X1e),e(X1e,Qmr),e(s8,Wmr),e(s8,lQ),e(lQ,Hmr),e(s8,Umr),e(Ar,Jmr),M(l8,Ar,null),b(f,QBe,_),b(f,Qd,_),e(Qd,i8),e(i8,z1e),M(Ty,z1e,null),e(Qd,Ymr),e(Qd,Q1e),e(Q1e,Kmr),b(f,WBe,_),b(f,er,_),M(My,er,null),e(er,Zmr),e(er,Wd),e(Wd,egr),e(Wd,iQ),e(iQ,ogr),e(Wd,rgr),e(Wd,dQ),e(dQ,tgr),e(Wd,agr),e(er,ngr),e(er,Ey),e(Ey,sgr),e(Ey,W1e),e(W1e,lgr),e(Ey,igr),e(er,dgr),e(er,yt),M(Cy,yt,null),e(yt,cgr),e(yt,H1e),e(H1e,fgr),e(yt,mgr),e(yt,Hd),e(Hd,ggr),e(Hd,U1e),e(U1e,hgr),e(Hd,pgr),e(Hd,cQ),e(cQ,ugr),e(Hd,_gr),e(yt,bgr),M(d8,yt,null),e(er,vgr),e(er,yr),M(wy,yr,null),e(yr,Fgr),e(yr,J1e),e(J1e,Tgr),e(yr,Mgr),e(yr,en),e(en,Egr),e(en,Y1e),e(Y1e,Cgr),e(en,wgr),e(en,K1e),e(K1e,Agr),e(en,ygr),e(en,Z1e),e(Z1e,Lgr),e(en,xgr),e(yr,$gr),e(yr,ye),e(ye,c8),e(c8,ebe),e(ebe,kgr),e(c8,Sgr),e(c8,fQ),e(fQ,Rgr),e(c8,Bgr),e(ye,Pgr),e(ye,f8),e(f8,obe),e(obe,Igr),e(f8,qgr),e(f8,mQ),e(mQ,Ngr),e(f8,jgr),e(ye,Dgr),e(ye,m8),e(m8,rbe),e(rbe,Ggr),e(m8,Ogr),e(m8,gQ),e(gQ,Vgr),e(m8,Xgr),e(ye,zgr),e(ye,g8),e(g8,tbe),e(tbe,Qgr),e(g8,Wgr),e(g8,hQ),e(hQ,Hgr),e(g8,Ugr),e(ye,Jgr),e(ye,h8),e(h8,abe),e(abe,Ygr),e(h8,Kgr),e(h8,pQ),e(pQ,Zgr),e(h8,ehr),e(ye,ohr),e(ye,p8),e(p8,nbe),e(nbe,rhr),e(p8,thr),e(p8,uQ),e(uQ,ahr),e(p8,nhr),e(ye,shr),e(ye,u8),e(u8,sbe),e(sbe,lhr),e(u8,ihr),e(u8,_Q),e(_Q,dhr),e(u8,chr),e(ye,fhr),e(ye,_8),e(_8,lbe),e(lbe,mhr),e(_8,ghr),e(_8,bQ),e(bQ,hhr),e(_8,phr),e(ye,uhr),e(ye,b8),e(b8,ibe),e(ibe,_hr),e(b8,bhr),e(b8,vQ),e(vQ,vhr),e(b8,Fhr),e(ye,Thr),e(ye,v8),e(v8,dbe),e(dbe,Mhr),e(v8,Ehr),e(v8,FQ),e(FQ,Chr),e(v8,whr),e(yr,Ahr),M(F8,yr,null),b(f,HBe,_),b(f,Ud,_),e(Ud,T8),e(T8,cbe),M(Ay,cbe,null),e(Ud,yhr),e(Ud,fbe),e(fbe,Lhr),b(f,UBe,_),b(f,or,_),M(yy,or,null),e(or,xhr),e(or,Jd),e(Jd,$hr),e(Jd,TQ),e(TQ,khr),e(Jd,Shr),e(Jd,MQ),e(MQ,Rhr),e(Jd,Bhr),e(or,Phr),e(or,Ly),e(Ly,Ihr),e(Ly,mbe),e(mbe,qhr),e(Ly,Nhr),e(or,jhr),e(or,Lt),M(xy,Lt,null),e(Lt,Dhr),e(Lt,gbe),e(gbe,Ghr),e(Lt,Ohr),e(Lt,Yd),e(Yd,Vhr),e(Yd,hbe),e(hbe,Xhr),e(Yd,zhr),e(Yd,EQ),e(EQ,Qhr),e(Yd,Whr),e(Lt,Hhr),M(M8,Lt,null),e(or,Uhr),e(or,Lr),M($y,Lr,null),e(Lr,Jhr),e(Lr,pbe),e(pbe,Yhr),e(Lr,Khr),e(Lr,on),e(on,Zhr),e(on,ube),e(ube,epr),e(on,opr),e(on,_be),e(_be,rpr),e(on,tpr),e(on,bbe),e(bbe,apr),e(on,npr),e(Lr,spr),e(Lr,Z),e(Z,E8),e(E8,vbe),e(vbe,lpr),e(E8,ipr),e(E8,CQ),e(CQ,dpr),e(E8,cpr),e(Z,fpr),e(Z,C8),e(C8,Fbe),e(Fbe,mpr),e(C8,gpr),e(C8,wQ),e(wQ,hpr),e(C8,ppr),e(Z,upr),e(Z,w8),e(w8,Tbe),e(Tbe,_pr),e(w8,bpr),e(w8,AQ),e(AQ,vpr),e(w8,Fpr),e(Z,Tpr),e(Z,A8),e(A8,Mbe),e(Mbe,Mpr),e(A8,Epr),e(A8,yQ),e(yQ,Cpr),e(A8,wpr),e(Z,Apr),e(Z,y8),e(y8,Ebe),e(Ebe,ypr),e(y8,Lpr),e(y8,LQ),e(LQ,xpr),e(y8,$pr),e(Z,kpr),e(Z,L8),e(L8,Cbe),e(Cbe,Spr),e(L8,Rpr),e(L8,xQ),e(xQ,Bpr),e(L8,Ppr),e(Z,Ipr),e(Z,x8),e(x8,wbe),e(wbe,qpr),e(x8,Npr),e(x8,$Q),e($Q,jpr),e(x8,Dpr),e(Z,Gpr),e(Z,$8),e($8,Abe),e(Abe,Opr),e($8,Vpr),e($8,kQ),e(kQ,Xpr),e($8,zpr),e(Z,Qpr),e(Z,k8),e(k8,ybe),e(ybe,Wpr),e(k8,Hpr),e(k8,SQ),e(SQ,Upr),e(k8,Jpr),e(Z,Ypr),e(Z,S8),e(S8,Lbe),e(Lbe,Kpr),e(S8,Zpr),e(S8,RQ),e(RQ,eur),e(S8,our),e(Z,rur),e(Z,R8),e(R8,xbe),e(xbe,tur),e(R8,aur),e(R8,BQ),e(BQ,nur),e(R8,sur),e(Z,lur),e(Z,B8),e(B8,$be),e($be,iur),e(B8,dur),e(B8,PQ),e(PQ,cur),e(B8,fur),e(Z,mur),e(Z,P8),e(P8,kbe),e(kbe,gur),e(P8,hur),e(P8,IQ),e(IQ,pur),e(P8,uur),e(Z,_ur),e(Z,I8),e(I8,Sbe),e(Sbe,bur),e(I8,vur),e(I8,qQ),e(qQ,Fur),e(I8,Tur),e(Z,Mur),e(Z,q8),e(q8,Rbe),e(Rbe,Eur),e(q8,Cur),e(q8,NQ),e(NQ,wur),e(q8,Aur),e(Z,yur),e(Z,N8),e(N8,Bbe),e(Bbe,Lur),e(N8,xur),e(N8,jQ),e(jQ,$ur),e(N8,kur),e(Z,Sur),e(Z,j8),e(j8,Pbe),e(Pbe,Rur),e(j8,Bur),e(j8,DQ),e(DQ,Pur),e(j8,Iur),e(Z,qur),e(Z,D8),e(D8,Ibe),e(Ibe,Nur),e(D8,jur),e(D8,GQ),e(GQ,Dur),e(D8,Gur),e(Z,Our),e(Z,G8),e(G8,qbe),e(qbe,Vur),e(G8,Xur),e(G8,OQ),e(OQ,zur),e(G8,Qur),e(Z,Wur),e(Z,O8),e(O8,Nbe),e(Nbe,Hur),e(O8,Uur),e(O8,VQ),e(VQ,Jur),e(O8,Yur),e(Z,Kur),e(Z,V8),e(V8,jbe),e(jbe,Zur),e(V8,e_r),e(V8,XQ),e(XQ,o_r),e(V8,r_r),e(Z,t_r),e(Z,X8),e(X8,Dbe),e(Dbe,a_r),e(X8,n_r),e(X8,zQ),e(zQ,s_r),e(X8,l_r),e(Z,i_r),e(Z,z8),e(z8,Gbe),e(Gbe,d_r),e(z8,c_r),e(z8,QQ),e(QQ,f_r),e(z8,m_r),e(Z,g_r),e(Z,Q8),e(Q8,Obe),e(Obe,h_r),e(Q8,p_r),e(Q8,WQ),e(WQ,u_r),e(Q8,__r),e(Z,b_r),e(Z,W8),e(W8,Vbe),e(Vbe,v_r),e(W8,F_r),e(W8,HQ),e(HQ,T_r),e(W8,M_r),e(Z,E_r),e(Z,H8),e(H8,Xbe),e(Xbe,C_r),e(H8,w_r),e(H8,UQ),e(UQ,A_r),e(H8,y_r),e(Lr,L_r),M(U8,Lr,null),b(f,JBe,_),b(f,Kd,_),e(Kd,J8),e(J8,zbe),M(ky,zbe,null),e(Kd,x_r),e(Kd,Qbe),e(Qbe,$_r),b(f,YBe,_),b(f,rr,_),M(Sy,rr,null),e(rr,k_r),e(rr,Zd),e(Zd,S_r),e(Zd,JQ),e(JQ,R_r),e(Zd,B_r),e(Zd,YQ),e(YQ,P_r),e(Zd,I_r),e(rr,q_r),e(rr,Ry),e(Ry,N_r),e(Ry,Wbe),e(Wbe,j_r),e(Ry,D_r),e(rr,G_r),e(rr,xt),M(By,xt,null),e(xt,O_r),e(xt,Hbe),e(Hbe,V_r),e(xt,X_r),e(xt,ec),e(ec,z_r),e(ec,Ube),e(Ube,Q_r),e(ec,W_r),e(ec,KQ),e(KQ,H_r),e(ec,U_r),e(xt,J_r),M(Y8,xt,null),e(rr,Y_r),e(rr,xr),M(Py,xr,null),e(xr,K_r),e(xr,Jbe),e(Jbe,Z_r),e(xr,e1r),e(xr,rn),e(rn,o1r),e(rn,Ybe),e(Ybe,r1r),e(rn,t1r),e(rn,Kbe),e(Kbe,a1r),e(rn,n1r),e(rn,Zbe),e(Zbe,s1r),e(rn,l1r),e(xr,i1r),e(xr,pe),e(pe,K8),e(K8,e2e),e(e2e,d1r),e(K8,c1r),e(K8,ZQ),e(ZQ,f1r),e(K8,m1r),e(pe,g1r),e(pe,Z8),e(Z8,o2e),e(o2e,h1r),e(Z8,p1r),e(Z8,eW),e(eW,u1r),e(Z8,_1r),e(pe,b1r),e(pe,e9),e(e9,r2e),e(r2e,v1r),e(e9,F1r),e(e9,oW),e(oW,T1r),e(e9,M1r),e(pe,E1r),e(pe,o9),e(o9,t2e),e(t2e,C1r),e(o9,w1r),e(o9,rW),e(rW,A1r),e(o9,y1r),e(pe,L1r),e(pe,r9),e(r9,a2e),e(a2e,x1r),e(r9,$1r),e(r9,tW),e(tW,k1r),e(r9,S1r),e(pe,R1r),e(pe,t9),e(t9,n2e),e(n2e,B1r),e(t9,P1r),e(t9,aW),e(aW,I1r),e(t9,q1r),e(pe,N1r),e(pe,a9),e(a9,s2e),e(s2e,j1r),e(a9,D1r),e(a9,nW),e(nW,G1r),e(a9,O1r),e(pe,V1r),e(pe,n9),e(n9,l2e),e(l2e,X1r),e(n9,z1r),e(n9,sW),e(sW,Q1r),e(n9,W1r),e(pe,H1r),e(pe,s9),e(s9,i2e),e(i2e,U1r),e(s9,J1r),e(s9,lW),e(lW,Y1r),e(s9,K1r),e(pe,Z1r),e(pe,l9),e(l9,d2e),e(d2e,ebr),e(l9,obr),e(l9,iW),e(iW,rbr),e(l9,tbr),e(pe,abr),e(pe,i9),e(i9,c2e),e(c2e,nbr),e(i9,sbr),e(i9,dW),e(dW,lbr),e(i9,ibr),e(pe,dbr),e(pe,d9),e(d9,f2e),e(f2e,cbr),e(d9,fbr),e(d9,cW),e(cW,mbr),e(d9,gbr),e(pe,hbr),e(pe,c9),e(c9,m2e),e(m2e,pbr),e(c9,ubr),e(c9,fW),e(fW,_br),e(c9,bbr),e(pe,vbr),e(pe,f9),e(f9,g2e),e(g2e,Fbr),e(f9,Tbr),e(f9,mW),e(mW,Mbr),e(f9,Ebr),e(pe,Cbr),e(pe,m9),e(m9,h2e),e(h2e,wbr),e(m9,Abr),e(m9,gW),e(gW,ybr),e(m9,Lbr),e(pe,xbr),e(pe,g9),e(g9,p2e),e(p2e,$br),e(g9,kbr),e(g9,hW),e(hW,Sbr),e(g9,Rbr),e(pe,Bbr),e(pe,h9),e(h9,u2e),e(u2e,Pbr),e(h9,Ibr),e(h9,pW),e(pW,qbr),e(h9,Nbr),e(xr,jbr),M(p9,xr,null),b(f,KBe,_),b(f,oc,_),e(oc,u9),e(u9,_2e),M(Iy,_2e,null),e(oc,Dbr),e(oc,b2e),e(b2e,Gbr),b(f,ZBe,_),b(f,tr,_),M(qy,tr,null),e(tr,Obr),e(tr,rc),e(rc,Vbr),e(rc,uW),e(uW,Xbr),e(rc,zbr),e(rc,_W),e(_W,Qbr),e(rc,Wbr),e(tr,Hbr),e(tr,Ny),e(Ny,Ubr),e(Ny,v2e),e(v2e,Jbr),e(Ny,Ybr),e(tr,Kbr),e(tr,$t),M(jy,$t,null),e($t,Zbr),e($t,F2e),e(F2e,e2r),e($t,o2r),e($t,tc),e(tc,r2r),e(tc,T2e),e(T2e,t2r),e(tc,a2r),e(tc,bW),e(bW,n2r),e(tc,s2r),e($t,l2r),M(_9,$t,null),e(tr,i2r),e(tr,$r),M(Dy,$r,null),e($r,d2r),e($r,M2e),e(M2e,c2r),e($r,f2r),e($r,tn),e(tn,m2r),e(tn,E2e),e(E2e,g2r),e(tn,h2r),e(tn,C2e),e(C2e,p2r),e(tn,u2r),e(tn,w2e),e(w2e,_2r),e(tn,b2r),e($r,v2r),e($r,A2e),e(A2e,b9),e(b9,y2e),e(y2e,F2r),e(b9,T2r),e(b9,vW),e(vW,M2r),e(b9,E2r),e($r,C2r),M(v9,$r,null),b(f,ePe,_),b(f,ac,_),e(ac,F9),e(F9,L2e),M(Gy,L2e,null),e(ac,w2r),e(ac,x2e),e(x2e,A2r),b(f,oPe,_),b(f,ar,_),M(Oy,ar,null),e(ar,y2r),e(ar,nc),e(nc,L2r),e(nc,FW),e(FW,x2r),e(nc,$2r),e(nc,TW),e(TW,k2r),e(nc,S2r),e(ar,R2r),e(ar,Vy),e(Vy,B2r),e(Vy,$2e),e($2e,P2r),e(Vy,I2r),e(ar,q2r),e(ar,kt),M(Xy,kt,null),e(kt,N2r),e(kt,k2e),e(k2e,j2r),e(kt,D2r),e(kt,sc),e(sc,G2r),e(sc,S2e),e(S2e,O2r),e(sc,V2r),e(sc,MW),e(MW,X2r),e(sc,z2r),e(kt,Q2r),M(T9,kt,null),e(ar,W2r),e(ar,kr),M(zy,kr,null),e(kr,H2r),e(kr,R2e),e(R2e,U2r),e(kr,J2r),e(kr,an),e(an,Y2r),e(an,B2e),e(B2e,K2r),e(an,Z2r),e(an,P2e),e(P2e,evr),e(an,ovr),e(an,I2e),e(I2e,rvr),e(an,tvr),e(kr,avr),e(kr,de),e(de,M9),e(M9,q2e),e(q2e,nvr),e(M9,svr),e(M9,EW),e(EW,lvr),e(M9,ivr),e(de,dvr),e(de,E9),e(E9,N2e),e(N2e,cvr),e(E9,fvr),e(E9,CW),e(CW,mvr),e(E9,gvr),e(de,hvr),e(de,C9),e(C9,j2e),e(j2e,pvr),e(C9,uvr),e(C9,wW),e(wW,_vr),e(C9,bvr),e(de,vvr),e(de,w9),e(w9,D2e),e(D2e,Fvr),e(w9,Tvr),e(w9,AW),e(AW,Mvr),e(w9,Evr),e(de,Cvr),e(de,A9),e(A9,G2e),e(G2e,wvr),e(A9,Avr),e(A9,yW),e(yW,yvr),e(A9,Lvr),e(de,xvr),e(de,y9),e(y9,O2e),e(O2e,$vr),e(y9,kvr),e(y9,LW),e(LW,Svr),e(y9,Rvr),e(de,Bvr),e(de,L9),e(L9,V2e),e(V2e,Pvr),e(L9,Ivr),e(L9,xW),e(xW,qvr),e(L9,Nvr),e(de,jvr),e(de,x9),e(x9,X2e),e(X2e,Dvr),e(x9,Gvr),e(x9,$W),e($W,Ovr),e(x9,Vvr),e(de,Xvr),e(de,$9),e($9,z2e),e(z2e,zvr),e($9,Qvr),e($9,kW),e(kW,Wvr),e($9,Hvr),e(de,Uvr),e(de,k9),e(k9,Q2e),e(Q2e,Jvr),e(k9,Yvr),e(k9,SW),e(SW,Kvr),e(k9,Zvr),e(de,eFr),e(de,S9),e(S9,W2e),e(W2e,oFr),e(S9,rFr),e(S9,RW),e(RW,tFr),e(S9,aFr),e(de,nFr),e(de,R9),e(R9,H2e),e(H2e,sFr),e(R9,lFr),e(R9,BW),e(BW,iFr),e(R9,dFr),e(de,cFr),e(de,B9),e(B9,U2e),e(U2e,fFr),e(B9,mFr),e(B9,PW),e(PW,gFr),e(B9,hFr),e(de,pFr),e(de,P9),e(P9,J2e),e(J2e,uFr),e(P9,_Fr),e(P9,IW),e(IW,bFr),e(P9,vFr),e(de,FFr),e(de,I9),e(I9,Y2e),e(Y2e,TFr),e(I9,MFr),e(I9,qW),e(qW,EFr),e(I9,CFr),e(de,wFr),e(de,q9),e(q9,K2e),e(K2e,AFr),e(q9,yFr),e(q9,NW),e(NW,LFr),e(q9,xFr),e(de,$Fr),e(de,N9),e(N9,Z2e),e(Z2e,kFr),e(N9,SFr),e(N9,jW),e(jW,RFr),e(N9,BFr),e(de,PFr),e(de,j9),e(j9,eve),e(eve,IFr),e(j9,qFr),e(j9,DW),e(DW,NFr),e(j9,jFr),e(de,DFr),e(de,D9),e(D9,ove),e(ove,GFr),e(D9,OFr),e(D9,GW),e(GW,VFr),e(D9,XFr),e(de,zFr),e(de,G9),e(G9,rve),e(rve,QFr),e(G9,WFr),e(G9,OW),e(OW,HFr),e(G9,UFr),e(kr,JFr),M(O9,kr,null),b(f,rPe,_),b(f,lc,_),e(lc,V9),e(V9,tve),M(Qy,tve,null),e(lc,YFr),e(lc,ave),e(ave,KFr),b(f,tPe,_),b(f,nr,_),M(Wy,nr,null),e(nr,ZFr),e(nr,ic),e(ic,e0r),e(ic,VW),e(VW,o0r),e(ic,r0r),e(ic,XW),e(XW,t0r),e(ic,a0r),e(nr,n0r),e(nr,Hy),e(Hy,s0r),e(Hy,nve),e(nve,l0r),e(Hy,i0r),e(nr,d0r),e(nr,St),M(Uy,St,null),e(St,c0r),e(St,sve),e(sve,f0r),e(St,m0r),e(St,dc),e(dc,g0r),e(dc,lve),e(lve,h0r),e(dc,p0r),e(dc,zW),e(zW,u0r),e(dc,_0r),e(St,b0r),M(X9,St,null),e(nr,v0r),e(nr,Sr),M(Jy,Sr,null),e(Sr,F0r),e(Sr,ive),e(ive,T0r),e(Sr,M0r),e(Sr,nn),e(nn,E0r),e(nn,dve),e(dve,C0r),e(nn,w0r),e(nn,cve),e(cve,A0r),e(nn,y0r),e(nn,fve),e(fve,L0r),e(nn,x0r),e(Sr,$0r),e(Sr,ce),e(ce,z9),e(z9,mve),e(mve,k0r),e(z9,S0r),e(z9,QW),e(QW,R0r),e(z9,B0r),e(ce,P0r),e(ce,Q9),e(Q9,gve),e(gve,I0r),e(Q9,q0r),e(Q9,WW),e(WW,N0r),e(Q9,j0r),e(ce,D0r),e(ce,W9),e(W9,hve),e(hve,G0r),e(W9,O0r),e(W9,HW),e(HW,V0r),e(W9,X0r),e(ce,z0r),e(ce,H9),e(H9,pve),e(pve,Q0r),e(H9,W0r),e(H9,UW),e(UW,H0r),e(H9,U0r),e(ce,J0r),e(ce,U9),e(U9,uve),e(uve,Y0r),e(U9,K0r),e(U9,JW),e(JW,Z0r),e(U9,e6r),e(ce,o6r),e(ce,J9),e(J9,_ve),e(_ve,r6r),e(J9,t6r),e(J9,YW),e(YW,a6r),e(J9,n6r),e(ce,s6r),e(ce,Y9),e(Y9,bve),e(bve,l6r),e(Y9,i6r),e(Y9,KW),e(KW,d6r),e(Y9,c6r),e(ce,f6r),e(ce,K9),e(K9,vve),e(vve,m6r),e(K9,g6r),e(K9,ZW),e(ZW,h6r),e(K9,p6r),e(ce,u6r),e(ce,Z9),e(Z9,Fve),e(Fve,_6r),e(Z9,b6r),e(Z9,eH),e(eH,v6r),e(Z9,F6r),e(ce,T6r),e(ce,eM),e(eM,Tve),e(Tve,M6r),e(eM,E6r),e(eM,oH),e(oH,C6r),e(eM,w6r),e(ce,A6r),e(ce,oM),e(oM,Mve),e(Mve,y6r),e(oM,L6r),e(oM,rH),e(rH,x6r),e(oM,$6r),e(ce,k6r),e(ce,rM),e(rM,Eve),e(Eve,S6r),e(rM,R6r),e(rM,tH),e(tH,B6r),e(rM,P6r),e(ce,I6r),e(ce,tM),e(tM,Cve),e(Cve,q6r),e(tM,N6r),e(tM,aH),e(aH,j6r),e(tM,D6r),e(ce,G6r),e(ce,aM),e(aM,wve),e(wve,O6r),e(aM,V6r),e(aM,nH),e(nH,X6r),e(aM,z6r),e(ce,Q6r),e(ce,nM),e(nM,Ave),e(Ave,W6r),e(nM,H6r),e(nM,sH),e(sH,U6r),e(nM,J6r),e(ce,Y6r),e(ce,sM),e(sM,yve),e(yve,K6r),e(sM,Z6r),e(sM,lH),e(lH,eTr),e(sM,oTr),e(ce,rTr),e(ce,lM),e(lM,Lve),e(Lve,tTr),e(lM,aTr),e(lM,iH),e(iH,nTr),e(lM,sTr),e(ce,lTr),e(ce,iM),e(iM,xve),e(xve,iTr),e(iM,dTr),e(iM,dH),e(dH,cTr),e(iM,fTr),e(ce,mTr),e(ce,dM),e(dM,$ve),e($ve,gTr),e(dM,hTr),e(dM,cH),e(cH,pTr),e(dM,uTr),e(ce,_Tr),e(ce,cM),e(cM,kve),e(kve,bTr),e(cM,vTr),e(cM,fH),e(fH,FTr),e(cM,TTr),e(Sr,MTr),M(fM,Sr,null),b(f,aPe,_),b(f,cc,_),e(cc,mM),e(mM,Sve),M(Yy,Sve,null),e(cc,ETr),e(cc,Rve),e(Rve,CTr),b(f,nPe,_),b(f,sr,_),M(Ky,sr,null),e(sr,wTr),e(sr,fc),e(fc,ATr),e(fc,mH),e(mH,yTr),e(fc,LTr),e(fc,gH),e(gH,xTr),e(fc,$Tr),e(sr,kTr),e(sr,Zy),e(Zy,STr),e(Zy,Bve),e(Bve,RTr),e(Zy,BTr),e(sr,PTr),e(sr,Rt),M(eL,Rt,null),e(Rt,ITr),e(Rt,Pve),e(Pve,qTr),e(Rt,NTr),e(Rt,mc),e(mc,jTr),e(mc,Ive),e(Ive,DTr),e(mc,GTr),e(mc,hH),e(hH,OTr),e(mc,VTr),e(Rt,XTr),M(gM,Rt,null),e(sr,zTr),e(sr,Rr),M(oL,Rr,null),e(Rr,QTr),e(Rr,qve),e(qve,WTr),e(Rr,HTr),e(Rr,sn),e(sn,UTr),e(sn,Nve),e(Nve,JTr),e(sn,YTr),e(sn,jve),e(jve,KTr),e(sn,ZTr),e(sn,Dve),e(Dve,e8r),e(sn,o8r),e(Rr,r8r),e(Rr,Gve),e(Gve,hM),e(hM,Ove),e(Ove,t8r),e(hM,a8r),e(hM,pH),e(pH,n8r),e(hM,s8r),e(Rr,l8r),M(pM,Rr,null),b(f,sPe,_),b(f,gc,_),e(gc,uM),e(uM,Vve),M(rL,Vve,null),e(gc,i8r),e(gc,Xve),e(Xve,d8r),b(f,lPe,_),b(f,lr,_),M(tL,lr,null),e(lr,c8r),e(lr,hc),e(hc,f8r),e(hc,uH),e(uH,m8r),e(hc,g8r),e(hc,_H),e(_H,h8r),e(hc,p8r),e(lr,u8r),e(lr,aL),e(aL,_8r),e(aL,zve),e(zve,b8r),e(aL,v8r),e(lr,F8r),e(lr,Bt),M(nL,Bt,null),e(Bt,T8r),e(Bt,Qve),e(Qve,M8r),e(Bt,E8r),e(Bt,pc),e(pc,C8r),e(pc,Wve),e(Wve,w8r),e(pc,A8r),e(pc,bH),e(bH,y8r),e(pc,L8r),e(Bt,x8r),M(_M,Bt,null),e(lr,$8r),e(lr,Br),M(sL,Br,null),e(Br,k8r),e(Br,Hve),e(Hve,S8r),e(Br,R8r),e(Br,ln),e(ln,B8r),e(ln,Uve),e(Uve,P8r),e(ln,I8r),e(ln,Jve),e(Jve,q8r),e(ln,N8r),e(ln,Yve),e(Yve,j8r),e(ln,D8r),e(Br,G8r),e(Br,Kve),e(Kve,bM),e(bM,Zve),e(Zve,O8r),e(bM,V8r),e(bM,vH),e(vH,X8r),e(bM,z8r),e(Br,Q8r),M(vM,Br,null),b(f,iPe,_),b(f,uc,_),e(uc,FM),e(FM,eFe),M(lL,eFe,null),e(uc,W8r),e(uc,oFe),e(oFe,H8r),b(f,dPe,_),b(f,ir,_),M(iL,ir,null),e(ir,U8r),e(ir,_c),e(_c,J8r),e(_c,FH),e(FH,Y8r),e(_c,K8r),e(_c,TH),e(TH,Z8r),e(_c,e9r),e(ir,o9r),e(ir,dL),e(dL,r9r),e(dL,rFe),e(rFe,t9r),e(dL,a9r),e(ir,n9r),e(ir,Pt),M(cL,Pt,null),e(Pt,s9r),e(Pt,tFe),e(tFe,l9r),e(Pt,i9r),e(Pt,bc),e(bc,d9r),e(bc,aFe),e(aFe,c9r),e(bc,f9r),e(bc,MH),e(MH,m9r),e(bc,g9r),e(Pt,h9r),M(TM,Pt,null),e(ir,p9r),e(ir,Pr),M(fL,Pr,null),e(Pr,u9r),e(Pr,nFe),e(nFe,_9r),e(Pr,b9r),e(Pr,dn),e(dn,v9r),e(dn,sFe),e(sFe,F9r),e(dn,T9r),e(dn,lFe),e(lFe,M9r),e(dn,E9r),e(dn,iFe),e(iFe,C9r),e(dn,w9r),e(Pr,A9r),e(Pr,oe),e(oe,MM),e(MM,dFe),e(dFe,y9r),e(MM,L9r),e(MM,EH),e(EH,x9r),e(MM,$9r),e(oe,k9r),e(oe,EM),e(EM,cFe),e(cFe,S9r),e(EM,R9r),e(EM,CH),e(CH,B9r),e(EM,P9r),e(oe,I9r),e(oe,CM),e(CM,fFe),e(fFe,q9r),e(CM,N9r),e(CM,wH),e(wH,j9r),e(CM,D9r),e(oe,G9r),e(oe,wM),e(wM,mFe),e(mFe,O9r),e(wM,V9r),e(wM,AH),e(AH,X9r),e(wM,z9r),e(oe,Q9r),e(oe,AM),e(AM,gFe),e(gFe,W9r),e(AM,H9r),e(AM,yH),e(yH,U9r),e(AM,J9r),e(oe,Y9r),e(oe,yM),e(yM,hFe),e(hFe,K9r),e(yM,Z9r),e(yM,LH),e(LH,eMr),e(yM,oMr),e(oe,rMr),e(oe,LM),e(LM,pFe),e(pFe,tMr),e(LM,aMr),e(LM,xH),e(xH,nMr),e(LM,sMr),e(oe,lMr),e(oe,xM),e(xM,uFe),e(uFe,iMr),e(xM,dMr),e(xM,$H),e($H,cMr),e(xM,fMr),e(oe,mMr),e(oe,$M),e($M,_Fe),e(_Fe,gMr),e($M,hMr),e($M,kH),e(kH,pMr),e($M,uMr),e(oe,_Mr),e(oe,kM),e(kM,bFe),e(bFe,bMr),e(kM,vMr),e(kM,SH),e(SH,FMr),e(kM,TMr),e(oe,MMr),e(oe,SM),e(SM,vFe),e(vFe,EMr),e(SM,CMr),e(SM,RH),e(RH,wMr),e(SM,AMr),e(oe,yMr),e(oe,RM),e(RM,FFe),e(FFe,LMr),e(RM,xMr),e(RM,BH),e(BH,$Mr),e(RM,kMr),e(oe,SMr),e(oe,BM),e(BM,TFe),e(TFe,RMr),e(BM,BMr),e(BM,PH),e(PH,PMr),e(BM,IMr),e(oe,qMr),e(oe,PM),e(PM,MFe),e(MFe,NMr),e(PM,jMr),e(PM,IH),e(IH,DMr),e(PM,GMr),e(oe,OMr),e(oe,IM),e(IM,EFe),e(EFe,VMr),e(IM,XMr),e(IM,qH),e(qH,zMr),e(IM,QMr),e(oe,WMr),e(oe,qM),e(qM,CFe),e(CFe,HMr),e(qM,UMr),e(qM,NH),e(NH,JMr),e(qM,YMr),e(oe,KMr),e(oe,NM),e(NM,wFe),e(wFe,ZMr),e(NM,e4r),e(NM,jH),e(jH,o4r),e(NM,r4r),e(oe,t4r),e(oe,jM),e(jM,AFe),e(AFe,a4r),e(jM,n4r),e(jM,DH),e(DH,s4r),e(jM,l4r),e(oe,i4r),e(oe,DM),e(DM,yFe),e(yFe,d4r),e(DM,c4r),e(DM,GH),e(GH,f4r),e(DM,m4r),e(oe,g4r),e(oe,GM),e(GM,LFe),e(LFe,h4r),e(GM,p4r),e(GM,OH),e(OH,u4r),e(GM,_4r),e(oe,b4r),e(oe,OM),e(OM,xFe),e(xFe,v4r),e(OM,F4r),e(OM,VH),e(VH,T4r),e(OM,M4r),e(oe,E4r),e(oe,VM),e(VM,$Fe),e($Fe,C4r),e(VM,w4r),e(VM,XH),e(XH,A4r),e(VM,y4r),e(oe,L4r),e(oe,XM),e(XM,kFe),e(kFe,x4r),e(XM,$4r),e(XM,zH),e(zH,k4r),e(XM,S4r),e(oe,R4r),e(oe,zM),e(zM,SFe),e(SFe,B4r),e(zM,P4r),e(zM,QH),e(QH,I4r),e(zM,q4r),e(oe,N4r),e(oe,QM),e(QM,RFe),e(RFe,j4r),e(QM,D4r),e(QM,WH),e(WH,G4r),e(QM,O4r),e(Pr,V4r),M(WM,Pr,null),b(f,cPe,_),b(f,vc,_),e(vc,HM),e(HM,BFe),M(mL,BFe,null),e(vc,X4r),e(vc,PFe),e(PFe,z4r),b(f,fPe,_),b(f,dr,_),M(gL,dr,null),e(dr,Q4r),e(dr,Fc),e(Fc,W4r),e(Fc,HH),e(HH,H4r),e(Fc,U4r),e(Fc,UH),e(UH,J4r),e(Fc,Y4r),e(dr,K4r),e(dr,hL),e(hL,Z4r),e(hL,IFe),e(IFe,eEr),e(hL,oEr),e(dr,rEr),e(dr,It),M(pL,It,null),e(It,tEr),e(It,qFe),e(qFe,aEr),e(It,nEr),e(It,Tc),e(Tc,sEr),e(Tc,NFe),e(NFe,lEr),e(Tc,iEr),e(Tc,JH),e(JH,dEr),e(Tc,cEr),e(It,fEr),M(UM,It,null),e(dr,mEr),e(dr,Ir),M(uL,Ir,null),e(Ir,gEr),e(Ir,jFe),e(jFe,hEr),e(Ir,pEr),e(Ir,cn),e(cn,uEr),e(cn,DFe),e(DFe,_Er),e(cn,bEr),e(cn,GFe),e(GFe,vEr),e(cn,FEr),e(cn,OFe),e(OFe,TEr),e(cn,MEr),e(Ir,EEr),e(Ir,Hr),e(Hr,JM),e(JM,VFe),e(VFe,CEr),e(JM,wEr),e(JM,YH),e(YH,AEr),e(JM,yEr),e(Hr,LEr),e(Hr,YM),e(YM,XFe),e(XFe,xEr),e(YM,$Er),e(YM,KH),e(KH,kEr),e(YM,SEr),e(Hr,REr),e(Hr,KM),e(KM,zFe),e(zFe,BEr),e(KM,PEr),e(KM,ZH),e(ZH,IEr),e(KM,qEr),e(Hr,NEr),e(Hr,ZM),e(ZM,QFe),e(QFe,jEr),e(ZM,DEr),e(ZM,eU),e(eU,GEr),e(ZM,OEr),e(Hr,VEr),e(Hr,e4),e(e4,WFe),e(WFe,XEr),e(e4,zEr),e(e4,oU),e(oU,QEr),e(e4,WEr),e(Ir,HEr),M(o4,Ir,null),b(f,mPe,_),b(f,Mc,_),e(Mc,r4),e(r4,HFe),M(_L,HFe,null),e(Mc,UEr),e(Mc,UFe),e(UFe,JEr),b(f,gPe,_),b(f,cr,_),M(bL,cr,null),e(cr,YEr),e(cr,Ec),e(Ec,KEr),e(Ec,rU),e(rU,ZEr),e(Ec,e5r),e(Ec,tU),e(tU,o5r),e(Ec,r5r),e(cr,t5r),e(cr,vL),e(vL,a5r),e(vL,JFe),e(JFe,n5r),e(vL,s5r),e(cr,l5r),e(cr,qt),M(FL,qt,null),e(qt,i5r),e(qt,YFe),e(YFe,d5r),e(qt,c5r),e(qt,Cc),e(Cc,f5r),e(Cc,KFe),e(KFe,m5r),e(Cc,g5r),e(Cc,aU),e(aU,h5r),e(Cc,p5r),e(qt,u5r),M(t4,qt,null),e(cr,_5r),e(cr,qr),M(TL,qr,null),e(qr,b5r),e(qr,ZFe),e(ZFe,v5r),e(qr,F5r),e(qr,fn),e(fn,T5r),e(fn,e0e),e(e0e,M5r),e(fn,E5r),e(fn,o0e),e(o0e,C5r),e(fn,w5r),e(fn,r0e),e(r0e,A5r),e(fn,y5r),e(qr,L5r),e(qr,Me),e(Me,a4),e(a4,t0e),e(t0e,x5r),e(a4,$5r),e(a4,nU),e(nU,k5r),e(a4,S5r),e(Me,R5r),e(Me,n4),e(n4,a0e),e(a0e,B5r),e(n4,P5r),e(n4,sU),e(sU,I5r),e(n4,q5r),e(Me,N5r),e(Me,s4),e(s4,n0e),e(n0e,j5r),e(s4,D5r),e(s4,lU),e(lU,G5r),e(s4,O5r),e(Me,V5r),e(Me,l4),e(l4,s0e),e(s0e,X5r),e(l4,z5r),e(l4,iU),e(iU,Q5r),e(l4,W5r),e(Me,H5r),e(Me,i4),e(i4,l0e),e(l0e,U5r),e(i4,J5r),e(i4,dU),e(dU,Y5r),e(i4,K5r),e(Me,Z5r),e(Me,d4),e(d4,i0e),e(i0e,eCr),e(d4,oCr),e(d4,cU),e(cU,rCr),e(d4,tCr),e(Me,aCr),e(Me,c4),e(c4,d0e),e(d0e,nCr),e(c4,sCr),e(c4,fU),e(fU,lCr),e(c4,iCr),e(Me,dCr),e(Me,f4),e(f4,c0e),e(c0e,cCr),e(f4,fCr),e(f4,mU),e(mU,mCr),e(f4,gCr),e(Me,hCr),e(Me,m4),e(m4,f0e),e(f0e,pCr),e(m4,uCr),e(m4,gU),e(gU,_Cr),e(m4,bCr),e(Me,vCr),e(Me,g4),e(g4,m0e),e(m0e,FCr),e(g4,TCr),e(g4,hU),e(hU,MCr),e(g4,ECr),e(Me,CCr),e(Me,h4),e(h4,g0e),e(g0e,wCr),e(h4,ACr),e(h4,pU),e(pU,yCr),e(h4,LCr),e(Me,xCr),e(Me,p4),e(p4,h0e),e(h0e,$Cr),e(p4,kCr),e(p4,uU),e(uU,SCr),e(p4,RCr),e(qr,BCr),M(u4,qr,null),b(f,hPe,_),b(f,wc,_),e(wc,_4),e(_4,p0e),M(ML,p0e,null),e(wc,PCr),e(wc,u0e),e(u0e,ICr),b(f,pPe,_),b(f,fr,_),M(EL,fr,null),e(fr,qCr),e(fr,Ac),e(Ac,NCr),e(Ac,_U),e(_U,jCr),e(Ac,DCr),e(Ac,bU),e(bU,GCr),e(Ac,OCr),e(fr,VCr),e(fr,CL),e(CL,XCr),e(CL,_0e),e(_0e,zCr),e(CL,QCr),e(fr,WCr),e(fr,Nt),M(wL,Nt,null),e(Nt,HCr),e(Nt,b0e),e(b0e,UCr),e(Nt,JCr),e(Nt,yc),e(yc,YCr),e(yc,v0e),e(v0e,KCr),e(yc,ZCr),e(yc,vU),e(vU,e3r),e(yc,o3r),e(Nt,r3r),M(b4,Nt,null),e(fr,t3r),e(fr,Nr),M(AL,Nr,null),e(Nr,a3r),e(Nr,F0e),e(F0e,n3r),e(Nr,s3r),e(Nr,mn),e(mn,l3r),e(mn,T0e),e(T0e,i3r),e(mn,d3r),e(mn,M0e),e(M0e,c3r),e(mn,f3r),e(mn,E0e),e(E0e,m3r),e(mn,g3r),e(Nr,h3r),e(Nr,Le),e(Le,v4),e(v4,C0e),e(C0e,p3r),e(v4,u3r),e(v4,FU),e(FU,_3r),e(v4,b3r),e(Le,v3r),e(Le,F4),e(F4,w0e),e(w0e,F3r),e(F4,T3r),e(F4,TU),e(TU,M3r),e(F4,E3r),e(Le,C3r),e(Le,T4),e(T4,A0e),e(A0e,w3r),e(T4,A3r),e(T4,MU),e(MU,y3r),e(T4,L3r),e(Le,x3r),e(Le,M4),e(M4,y0e),e(y0e,$3r),e(M4,k3r),e(M4,EU),e(EU,S3r),e(M4,R3r),e(Le,B3r),e(Le,E4),e(E4,L0e),e(L0e,P3r),e(E4,I3r),e(E4,CU),e(CU,q3r),e(E4,N3r),e(Le,j3r),e(Le,C4),e(C4,x0e),e(x0e,D3r),e(C4,G3r),e(C4,wU),e(wU,O3r),e(C4,V3r),e(Le,X3r),e(Le,w4),e(w4,$0e),e($0e,z3r),e(w4,Q3r),e(w4,AU),e(AU,W3r),e(w4,H3r),e(Le,U3r),e(Le,A4),e(A4,k0e),e(k0e,J3r),e(A4,Y3r),e(A4,yU),e(yU,K3r),e(A4,Z3r),e(Le,ewr),e(Le,y4),e(y4,S0e),e(S0e,owr),e(y4,rwr),e(y4,LU),e(LU,twr),e(y4,awr),e(Le,nwr),e(Le,L4),e(L4,R0e),e(R0e,swr),e(L4,lwr),e(L4,xU),e(xU,iwr),e(L4,dwr),e(Nr,cwr),M(x4,Nr,null),b(f,uPe,_),b(f,Lc,_),e(Lc,$4),e($4,B0e),M(yL,B0e,null),e(Lc,fwr),e(Lc,P0e),e(P0e,mwr),b(f,_Pe,_),b(f,mr,_),M(LL,mr,null),e(mr,gwr),e(mr,xc),e(xc,hwr),e(xc,$U),e($U,pwr),e(xc,uwr),e(xc,kU),e(kU,_wr),e(xc,bwr),e(mr,vwr),e(mr,xL),e(xL,Fwr),e(xL,I0e),e(I0e,Twr),e(xL,Mwr),e(mr,Ewr),e(mr,jt),M($L,jt,null),e(jt,Cwr),e(jt,q0e),e(q0e,wwr),e(jt,Awr),e(jt,$c),e($c,ywr),e($c,N0e),e(N0e,Lwr),e($c,xwr),e($c,SU),e(SU,$wr),e($c,kwr),e(jt,Swr),M(k4,jt,null),e(mr,Rwr),e(mr,jr),M(kL,jr,null),e(jr,Bwr),e(jr,j0e),e(j0e,Pwr),e(jr,Iwr),e(jr,gn),e(gn,qwr),e(gn,D0e),e(D0e,Nwr),e(gn,jwr),e(gn,G0e),e(G0e,Dwr),e(gn,Gwr),e(gn,O0e),e(O0e,Owr),e(gn,Vwr),e(jr,Xwr),e(jr,ke),e(ke,S4),e(S4,V0e),e(V0e,zwr),e(S4,Qwr),e(S4,RU),e(RU,Wwr),e(S4,Hwr),e(ke,Uwr),e(ke,R4),e(R4,X0e),e(X0e,Jwr),e(R4,Ywr),e(R4,BU),e(BU,Kwr),e(R4,Zwr),e(ke,eAr),e(ke,B4),e(B4,z0e),e(z0e,oAr),e(B4,rAr),e(B4,PU),e(PU,tAr),e(B4,aAr),e(ke,nAr),e(ke,P4),e(P4,Q0e),e(Q0e,sAr),e(P4,lAr),e(P4,IU),e(IU,iAr),e(P4,dAr),e(ke,cAr),e(ke,I4),e(I4,W0e),e(W0e,fAr),e(I4,mAr),e(I4,qU),e(qU,gAr),e(I4,hAr),e(ke,pAr),e(ke,q4),e(q4,H0e),e(H0e,uAr),e(q4,_Ar),e(q4,NU),e(NU,bAr),e(q4,vAr),e(ke,FAr),e(ke,N4),e(N4,U0e),e(U0e,TAr),e(N4,MAr),e(N4,jU),e(jU,EAr),e(N4,CAr),e(ke,wAr),e(ke,j4),e(j4,J0e),e(J0e,AAr),e(j4,yAr),e(j4,DU),e(DU,LAr),e(j4,xAr),e(ke,$Ar),e(ke,D4),e(D4,Y0e),e(Y0e,kAr),e(D4,SAr),e(D4,GU),e(GU,RAr),e(D4,BAr),e(jr,PAr),M(G4,jr,null),b(f,bPe,_),b(f,kc,_),e(kc,O4),e(O4,K0e),M(SL,K0e,null),e(kc,IAr),e(kc,Z0e),e(Z0e,qAr),b(f,vPe,_),b(f,gr,_),M(RL,gr,null),e(gr,NAr),e(gr,Sc),e(Sc,jAr),e(Sc,OU),e(OU,DAr),e(Sc,GAr),e(Sc,VU),e(VU,OAr),e(Sc,VAr),e(gr,XAr),e(gr,BL),e(BL,zAr),e(BL,e6e),e(e6e,QAr),e(BL,WAr),e(gr,HAr),e(gr,Dt),M(PL,Dt,null),e(Dt,UAr),e(Dt,o6e),e(o6e,JAr),e(Dt,YAr),e(Dt,Rc),e(Rc,KAr),e(Rc,r6e),e(r6e,ZAr),e(Rc,eyr),e(Rc,XU),e(XU,oyr),e(Rc,ryr),e(Dt,tyr),M(V4,Dt,null),e(gr,ayr),e(gr,Dr),M(IL,Dr,null),e(Dr,nyr),e(Dr,t6e),e(t6e,syr),e(Dr,lyr),e(Dr,hn),e(hn,iyr),e(hn,a6e),e(a6e,dyr),e(hn,cyr),e(hn,n6e),e(n6e,fyr),e(hn,myr),e(hn,s6e),e(s6e,gyr),e(hn,hyr),e(Dr,pyr),e(Dr,xe),e(xe,X4),e(X4,l6e),e(l6e,uyr),e(X4,_yr),e(X4,zU),e(zU,byr),e(X4,vyr),e(xe,Fyr),e(xe,z4),e(z4,i6e),e(i6e,Tyr),e(z4,Myr),e(z4,QU),e(QU,Eyr),e(z4,Cyr),e(xe,wyr),e(xe,Q4),e(Q4,d6e),e(d6e,Ayr),e(Q4,yyr),e(Q4,WU),e(WU,Lyr),e(Q4,xyr),e(xe,$yr),e(xe,W4),e(W4,c6e),e(c6e,kyr),e(W4,Syr),e(W4,HU),e(HU,Ryr),e(W4,Byr),e(xe,Pyr),e(xe,H4),e(H4,f6e),e(f6e,Iyr),e(H4,qyr),e(H4,UU),e(UU,Nyr),e(H4,jyr),e(xe,Dyr),e(xe,U4),e(U4,m6e),e(m6e,Gyr),e(U4,Oyr),e(U4,JU),e(JU,Vyr),e(U4,Xyr),e(xe,zyr),e(xe,J4),e(J4,g6e),e(g6e,Qyr),e(J4,Wyr),e(J4,YU),e(YU,Hyr),e(J4,Uyr),e(xe,Jyr),e(xe,Y4),e(Y4,h6e),e(h6e,Yyr),e(Y4,Kyr),e(Y4,KU),e(KU,Zyr),e(Y4,eLr),e(xe,oLr),e(xe,K4),e(K4,p6e),e(p6e,rLr),e(K4,tLr),e(K4,ZU),e(ZU,aLr),e(K4,nLr),e(xe,sLr),e(xe,Z4),e(Z4,u6e),e(u6e,lLr),e(Z4,iLr),e(Z4,eJ),e(eJ,dLr),e(Z4,cLr),e(Dr,fLr),M(eE,Dr,null),b(f,FPe,_),b(f,Bc,_),e(Bc,oE),e(oE,_6e),M(qL,_6e,null),e(Bc,mLr),e(Bc,b6e),e(b6e,gLr),b(f,TPe,_),b(f,hr,_),M(NL,hr,null),e(hr,hLr),e(hr,Pc),e(Pc,pLr),e(Pc,oJ),e(oJ,uLr),e(Pc,_Lr),e(Pc,rJ),e(rJ,bLr),e(Pc,vLr),e(hr,FLr),e(hr,jL),e(jL,TLr),e(jL,v6e),e(v6e,MLr),e(jL,ELr),e(hr,CLr),e(hr,Gt),M(DL,Gt,null),e(Gt,wLr),e(Gt,F6e),e(F6e,ALr),e(Gt,yLr),e(Gt,Ic),e(Ic,LLr),e(Ic,T6e),e(T6e,xLr),e(Ic,$Lr),e(Ic,tJ),e(tJ,kLr),e(Ic,SLr),e(Gt,RLr),M(rE,Gt,null),e(hr,BLr),e(hr,Gr),M(GL,Gr,null),e(Gr,PLr),e(Gr,M6e),e(M6e,ILr),e(Gr,qLr),e(Gr,pn),e(pn,NLr),e(pn,E6e),e(E6e,jLr),e(pn,DLr),e(pn,C6e),e(C6e,GLr),e(pn,OLr),e(pn,w6e),e(w6e,VLr),e(pn,XLr),e(Gr,zLr),e(Gr,$e),e($e,tE),e(tE,A6e),e(A6e,QLr),e(tE,WLr),e(tE,aJ),e(aJ,HLr),e(tE,ULr),e($e,JLr),e($e,aE),e(aE,y6e),e(y6e,YLr),e(aE,KLr),e(aE,nJ),e(nJ,ZLr),e(aE,e7r),e($e,o7r),e($e,nE),e(nE,L6e),e(L6e,r7r),e(nE,t7r),e(nE,sJ),e(sJ,a7r),e(nE,n7r),e($e,s7r),e($e,sE),e(sE,x6e),e(x6e,l7r),e(sE,i7r),e(sE,lJ),e(lJ,d7r),e(sE,c7r),e($e,f7r),e($e,lE),e(lE,$6e),e($6e,m7r),e(lE,g7r),e(lE,iJ),e(iJ,h7r),e(lE,p7r),e($e,u7r),e($e,iE),e(iE,k6e),e(k6e,_7r),e(iE,b7r),e(iE,dJ),e(dJ,v7r),e(iE,F7r),e($e,T7r),e($e,dE),e(dE,S6e),e(S6e,M7r),e(dE,E7r),e(dE,cJ),e(cJ,C7r),e(dE,w7r),e($e,A7r),e($e,cE),e(cE,R6e),e(R6e,y7r),e(cE,L7r),e(cE,fJ),e(fJ,x7r),e(cE,$7r),e($e,k7r),e($e,fE),e(fE,B6e),e(B6e,S7r),e(fE,R7r),e(fE,mJ),e(mJ,B7r),e(fE,P7r),e($e,I7r),e($e,mE),e(mE,P6e),e(P6e,q7r),e(mE,N7r),e(mE,gJ),e(gJ,j7r),e(mE,D7r),e(Gr,G7r),M(gE,Gr,null),b(f,MPe,_),b(f,qc,_),e(qc,hE),e(hE,I6e),M(OL,I6e,null),e(qc,O7r),e(qc,q6e),e(q6e,V7r),b(f,EPe,_),b(f,pr,_),M(VL,pr,null),e(pr,X7r),e(pr,Nc),e(Nc,z7r),e(Nc,hJ),e(hJ,Q7r),e(Nc,W7r),e(Nc,pJ),e(pJ,H7r),e(Nc,U7r),e(pr,J7r),e(pr,XL),e(XL,Y7r),e(XL,N6e),e(N6e,K7r),e(XL,Z7r),e(pr,exr),e(pr,Ot),M(zL,Ot,null),e(Ot,oxr),e(Ot,j6e),e(j6e,rxr),e(Ot,txr),e(Ot,jc),e(jc,axr),e(jc,D6e),e(D6e,nxr),e(jc,sxr),e(jc,uJ),e(uJ,lxr),e(jc,ixr),e(Ot,dxr),M(pE,Ot,null),e(pr,cxr),e(pr,Or),M(QL,Or,null),e(Or,fxr),e(Or,G6e),e(G6e,mxr),e(Or,gxr),e(Or,un),e(un,hxr),e(un,O6e),e(O6e,pxr),e(un,uxr),e(un,V6e),e(V6e,_xr),e(un,bxr),e(un,X6e),e(X6e,vxr),e(un,Fxr),e(Or,Txr),e(Or,je),e(je,uE),e(uE,z6e),e(z6e,Mxr),e(uE,Exr),e(uE,_J),e(_J,Cxr),e(uE,wxr),e(je,Axr),e(je,_E),e(_E,Q6e),e(Q6e,yxr),e(_E,Lxr),e(_E,bJ),e(bJ,xxr),e(_E,$xr),e(je,kxr),e(je,bE),e(bE,W6e),e(W6e,Sxr),e(bE,Rxr),e(bE,vJ),e(vJ,Bxr),e(bE,Pxr),e(je,Ixr),e(je,vE),e(vE,H6e),e(H6e,qxr),e(vE,Nxr),e(vE,FJ),e(FJ,jxr),e(vE,Dxr),e(je,Gxr),e(je,FE),e(FE,U6e),e(U6e,Oxr),e(FE,Vxr),e(FE,TJ),e(TJ,Xxr),e(FE,zxr),e(je,Qxr),e(je,TE),e(TE,J6e),e(J6e,Wxr),e(TE,Hxr),e(TE,MJ),e(MJ,Uxr),e(TE,Jxr),e(je,Yxr),e(je,ME),e(ME,Y6e),e(Y6e,Kxr),e(ME,Zxr),e(ME,EJ),e(EJ,e$r),e(ME,o$r),e(je,r$r),e(je,EE),e(EE,K6e),e(K6e,t$r),e(EE,a$r),e(EE,CJ),e(CJ,n$r),e(EE,s$r),e(Or,l$r),M(CE,Or,null),b(f,CPe,_),b(f,Dc,_),e(Dc,wE),e(wE,Z6e),M(WL,Z6e,null),e(Dc,i$r),e(Dc,eTe),e(eTe,d$r),b(f,wPe,_),b(f,ur,_),M(HL,ur,null),e(ur,c$r),e(ur,Gc),e(Gc,f$r),e(Gc,wJ),e(wJ,m$r),e(Gc,g$r),e(Gc,AJ),e(AJ,h$r),e(Gc,p$r),e(ur,u$r),e(ur,UL),e(UL,_$r),e(UL,oTe),e(oTe,b$r),e(UL,v$r),e(ur,F$r),e(ur,Vt),M(JL,Vt,null),e(Vt,T$r),e(Vt,rTe),e(rTe,M$r),e(Vt,E$r),e(Vt,Oc),e(Oc,C$r),e(Oc,tTe),e(tTe,w$r),e(Oc,A$r),e(Oc,yJ),e(yJ,y$r),e(Oc,L$r),e(Vt,x$r),M(AE,Vt,null),e(ur,$$r),e(ur,Vr),M(YL,Vr,null),e(Vr,k$r),e(Vr,aTe),e(aTe,S$r),e(Vr,R$r),e(Vr,_n),e(_n,B$r),e(_n,nTe),e(nTe,P$r),e(_n,I$r),e(_n,sTe),e(sTe,q$r),e(_n,N$r),e(_n,lTe),e(lTe,j$r),e(_n,D$r),e(Vr,G$r),e(Vr,De),e(De,yE),e(yE,iTe),e(iTe,O$r),e(yE,V$r),e(yE,LJ),e(LJ,X$r),e(yE,z$r),e(De,Q$r),e(De,LE),e(LE,dTe),e(dTe,W$r),e(LE,H$r),e(LE,xJ),e(xJ,U$r),e(LE,J$r),e(De,Y$r),e(De,xE),e(xE,cTe),e(cTe,K$r),e(xE,Z$r),e(xE,$J),e($J,ekr),e(xE,okr),e(De,rkr),e(De,$E),e($E,fTe),e(fTe,tkr),e($E,akr),e($E,kJ),e(kJ,nkr),e($E,skr),e(De,lkr),e(De,kE),e(kE,mTe),e(mTe,ikr),e(kE,dkr),e(kE,SJ),e(SJ,ckr),e(kE,fkr),e(De,mkr),e(De,SE),e(SE,gTe),e(gTe,gkr),e(SE,hkr),e(SE,RJ),e(RJ,pkr),e(SE,ukr),e(De,_kr),e(De,RE),e(RE,hTe),e(hTe,bkr),e(RE,vkr),e(RE,BJ),e(BJ,Fkr),e(RE,Tkr),e(De,Mkr),e(De,BE),e(BE,pTe),e(pTe,Ekr),e(BE,Ckr),e(BE,PJ),e(PJ,wkr),e(BE,Akr),e(Vr,ykr),M(PE,Vr,null),b(f,APe,_),b(f,Vc,_),e(Vc,IE),e(IE,uTe),M(KL,uTe,null),e(Vc,Lkr),e(Vc,_Te),e(_Te,xkr),b(f,yPe,_),b(f,_r,_),M(ZL,_r,null),e(_r,$kr),e(_r,Xc),e(Xc,kkr),e(Xc,IJ),e(IJ,Skr),e(Xc,Rkr),e(Xc,qJ),e(qJ,Bkr),e(Xc,Pkr),e(_r,Ikr),e(_r,e7),e(e7,qkr),e(e7,bTe),e(bTe,Nkr),e(e7,jkr),e(_r,Dkr),e(_r,Xt),M(o7,Xt,null),e(Xt,Gkr),e(Xt,vTe),e(vTe,Okr),e(Xt,Vkr),e(Xt,zc),e(zc,Xkr),e(zc,FTe),e(FTe,zkr),e(zc,Qkr),e(zc,NJ),e(NJ,Wkr),e(zc,Hkr),e(Xt,Ukr),M(qE,Xt,null),e(_r,Jkr),e(_r,Xr),M(r7,Xr,null),e(Xr,Ykr),e(Xr,TTe),e(TTe,Kkr),e(Xr,Zkr),e(Xr,bn),e(bn,eSr),e(bn,MTe),e(MTe,oSr),e(bn,rSr),e(bn,ETe),e(ETe,tSr),e(bn,aSr),e(bn,CTe),e(CTe,nSr),e(bn,sSr),e(Xr,lSr),e(Xr,wTe),e(wTe,NE),e(NE,ATe),e(ATe,iSr),e(NE,dSr),e(NE,jJ),e(jJ,cSr),e(NE,fSr),e(Xr,mSr),M(jE,Xr,null),b(f,LPe,_),b(f,Qc,_),e(Qc,DE),e(DE,yTe),M(t7,yTe,null),e(Qc,gSr),e(Qc,LTe),e(LTe,hSr),b(f,xPe,_),b(f,br,_),M(a7,br,null),e(br,pSr),e(br,Wc),e(Wc,uSr),e(Wc,DJ),e(DJ,_Sr),e(Wc,bSr),e(Wc,GJ),e(GJ,vSr),e(Wc,FSr),e(br,TSr),e(br,n7),e(n7,MSr),e(n7,xTe),e(xTe,ESr),e(n7,CSr),e(br,wSr),e(br,zt),M(s7,zt,null),e(zt,ASr),e(zt,$Te),e($Te,ySr),e(zt,LSr),e(zt,Hc),e(Hc,xSr),e(Hc,kTe),e(kTe,$Sr),e(Hc,kSr),e(Hc,OJ),e(OJ,SSr),e(Hc,RSr),e(zt,BSr),M(GE,zt,null),e(br,PSr),e(br,zr),M(l7,zr,null),e(zr,ISr),e(zr,STe),e(STe,qSr),e(zr,NSr),e(zr,vn),e(vn,jSr),e(vn,RTe),e(RTe,DSr),e(vn,GSr),e(vn,BTe),e(BTe,OSr),e(vn,VSr),e(vn,PTe),e(PTe,XSr),e(vn,zSr),e(zr,QSr),e(zr,i7),e(i7,OE),e(OE,ITe),e(ITe,WSr),e(OE,HSr),e(OE,VJ),e(VJ,USr),e(OE,JSr),e(i7,YSr),e(i7,VE),e(VE,qTe),e(qTe,KSr),e(VE,ZSr),e(VE,XJ),e(XJ,eRr),e(VE,oRr),e(zr,rRr),M(XE,zr,null),b(f,$Pe,_),b(f,Uc,_),e(Uc,zE),e(zE,NTe),M(d7,NTe,null),e(Uc,tRr),e(Uc,jTe),e(jTe,aRr),b(f,kPe,_),b(f,vr,_),M(c7,vr,null),e(vr,nRr),e(vr,Jc),e(Jc,sRr),e(Jc,zJ),e(zJ,lRr),e(Jc,iRr),e(Jc,QJ),e(QJ,dRr),e(Jc,cRr),e(vr,fRr),e(vr,f7),e(f7,mRr),e(f7,DTe),e(DTe,gRr),e(f7,hRr),e(vr,pRr),e(vr,Qt),M(m7,Qt,null),e(Qt,uRr),e(Qt,GTe),e(GTe,_Rr),e(Qt,bRr),e(Qt,Yc),e(Yc,vRr),e(Yc,OTe),e(OTe,FRr),e(Yc,TRr),e(Yc,WJ),e(WJ,MRr),e(Yc,ERr),e(Qt,CRr),M(QE,Qt,null),e(vr,wRr),e(vr,Qr),M(g7,Qr,null),e(Qr,ARr),e(Qr,VTe),e(VTe,yRr),e(Qr,LRr),e(Qr,Fn),e(Fn,xRr),e(Fn,XTe),e(XTe,$Rr),e(Fn,kRr),e(Fn,zTe),e(zTe,SRr),e(Fn,RRr),e(Fn,QTe),e(QTe,BRr),e(Fn,PRr),e(Qr,IRr),e(Qr,WTe),e(WTe,WE),e(WE,HTe),e(HTe,qRr),e(WE,NRr),e(WE,HJ),e(HJ,jRr),e(WE,DRr),e(Qr,GRr),M(HE,Qr,null),SPe=!0},p(f,[_]){const h7={};_&2&&(h7.$$scope={dirty:_,ctx:f}),sf.$set(h7);const UTe={};_&2&&(UTe.$$scope={dirty:_,ctx:f}),tg.$set(UTe);const JTe={};_&2&&(JTe.$$scope={dirty:_,ctx:f}),Pg.$set(JTe);const YTe={};_&2&&(YTe.$$scope={dirty:_,ctx:f}),lh.$set(YTe);const p7={};_&2&&(p7.$$scope={dirty:_,ctx:f}),ih.$set(p7);const KTe={};_&2&&(KTe.$$scope={dirty:_,ctx:f}),wh.$set(KTe);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),Ah.$set(Tn);const ZTe={};_&2&&(ZTe.$$scope={dirty:_,ctx:f}),xh.$set(ZTe);const e8e={};_&2&&(e8e.$$scope={dirty:_,ctx:f}),uu.$set(e8e);const o8e={};_&2&&(o8e.$$scope={dirty:_,ctx:f}),bu.$set(o8e);const u7={};_&2&&(u7.$$scope={dirty:_,ctx:f}),n_.$set(u7);const r8e={};_&2&&(r8e.$$scope={dirty:_,ctx:f}),l_.$set(r8e);const _7={};_&2&&(_7.$$scope={dirty:_,ctx:f}),X_.$set(_7);const t8e={};_&2&&(t8e.$$scope={dirty:_,ctx:f}),Q_.$set(t8e);const b7={};_&2&&(b7.$$scope={dirty:_,ctx:f}),x1.$set(b7);const a8e={};_&2&&(a8e.$$scope={dirty:_,ctx:f}),k1.$set(a8e);const n8e={};_&2&&(n8e.$$scope={dirty:_,ctx:f}),J1.$set(n8e);const s8e={};_&2&&(s8e.$$scope={dirty:_,ctx:f}),K1.$set(s8e);const Kc={};_&2&&(Kc.$$scope={dirty:_,ctx:f}),Wb.$set(Kc);const l8e={};_&2&&(l8e.$$scope={dirty:_,ctx:f}),Ub.$set(l8e);const i8e={};_&2&&(i8e.$$scope={dirty:_,ctx:f}),w2.$set(i8e);const d8e={};_&2&&(d8e.$$scope={dirty:_,ctx:f}),y2.$set(d8e);const v7={};_&2&&(v7.$$scope={dirty:_,ctx:f}),B2.$set(v7);const c8e={};_&2&&(c8e.$$scope={dirty:_,ctx:f}),I2.$set(c8e);const f8e={};_&2&&(f8e.$$scope={dirty:_,ctx:f}),_v.$set(f8e);const m8e={};_&2&&(m8e.$$scope={dirty:_,ctx:f}),vv.$set(m8e);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:f}),sF.$set(Ur);const F7={};_&2&&(F7.$$scope={dirty:_,ctx:f}),iF.$set(F7);const g8e={};_&2&&(g8e.$$scope={dirty:_,ctx:f}),fF.$set(g8e);const T7={};_&2&&(T7.$$scope={dirty:_,ctx:f}),gF.$set(T7);const h8e={};_&2&&(h8e.$$scope={dirty:_,ctx:f}),AF.$set(h8e);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),LF.$set(Jr);const p8e={};_&2&&(p8e.$$scope={dirty:_,ctx:f}),kF.$set(p8e);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),RF.$set(Zc);const u8e={};_&2&&(u8e.$$scope={dirty:_,ctx:f}),VF.$set(u8e);const _8e={};_&2&&(_8e.$$scope={dirty:_,ctx:f}),zF.$set(_8e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),YF.$set(L);const UE={};_&2&&(UE.$$scope={dirty:_,ctx:f}),ZF.$set(UE);const b8e={};_&2&&(b8e.$$scope={dirty:_,ctx:f}),d0.$set(b8e);const v8e={};_&2&&(v8e.$$scope={dirty:_,ctx:f}),f0.$set(v8e);const JE={};_&2&&(JE.$$scope={dirty:_,ctx:f}),p0.$set(JE);const F8e={};_&2&&(F8e.$$scope={dirty:_,ctx:f}),_0.$set(F8e);const T8e={};_&2&&(T8e.$$scope={dirty:_,ctx:f}),E0.$set(T8e);const YE={};_&2&&(YE.$$scope={dirty:_,ctx:f}),w0.$set(YE);const M8e={};_&2&&(M8e.$$scope={dirty:_,ctx:f}),k0.$set(M8e);const E8e={};_&2&&(E8e.$$scope={dirty:_,ctx:f}),R0.$set(E8e);const KE={};_&2&&(KE.$$scope={dirty:_,ctx:f}),I0.$set(KE);const C8e={};_&2&&(C8e.$$scope={dirty:_,ctx:f}),N0.$set(C8e);const w8e={};_&2&&(w8e.$$scope={dirty:_,ctx:f}),G0.$set(w8e);const ZE={};_&2&&(ZE.$$scope={dirty:_,ctx:f}),V0.$set(ZE);const A8e={};_&2&&(A8e.$$scope={dirty:_,ctx:f}),U0.$set(A8e);const y8e={};_&2&&(y8e.$$scope={dirty:_,ctx:f}),Y0.$set(y8e);const e5={};_&2&&(e5.$$scope={dirty:_,ctx:f}),e6.$set(e5);const L8e={};_&2&&(L8e.$$scope={dirty:_,ctx:f}),r6.$set(L8e);const x8e={};_&2&&(x8e.$$scope={dirty:_,ctx:f}),Q6.$set(x8e);const o5={};_&2&&(o5.$$scope={dirty:_,ctx:f}),H6.$set(o5);const $8e={};_&2&&($8e.$$scope={dirty:_,ctx:f}),bT.$set($8e);const k8e={};_&2&&(k8e.$$scope={dirty:_,ctx:f}),FT.$set(k8e);const r5={};_&2&&(r5.$$scope={dirty:_,ctx:f}),RT.$set(r5);const S8e={};_&2&&(S8e.$$scope={dirty:_,ctx:f}),PT.$set(S8e);const R8e={};_&2&&(R8e.$$scope={dirty:_,ctx:f}),NT.$set(R8e);const t5={};_&2&&(t5.$$scope={dirty:_,ctx:f}),DT.$set(t5);const B8e={};_&2&&(B8e.$$scope={dirty:_,ctx:f}),l8.$set(B8e);const P8e={};_&2&&(P8e.$$scope={dirty:_,ctx:f}),d8.$set(P8e);const a5={};_&2&&(a5.$$scope={dirty:_,ctx:f}),F8.$set(a5);const I8e={};_&2&&(I8e.$$scope={dirty:_,ctx:f}),M8.$set(I8e);const q8e={};_&2&&(q8e.$$scope={dirty:_,ctx:f}),U8.$set(q8e);const n5={};_&2&&(n5.$$scope={dirty:_,ctx:f}),Y8.$set(n5);const N8e={};_&2&&(N8e.$$scope={dirty:_,ctx:f}),p9.$set(N8e);const j8e={};_&2&&(j8e.$$scope={dirty:_,ctx:f}),_9.$set(j8e);const s5={};_&2&&(s5.$$scope={dirty:_,ctx:f}),v9.$set(s5);const D8e={};_&2&&(D8e.$$scope={dirty:_,ctx:f}),T9.$set(D8e);const G8e={};_&2&&(G8e.$$scope={dirty:_,ctx:f}),O9.$set(G8e);const l5={};_&2&&(l5.$$scope={dirty:_,ctx:f}),X9.$set(l5);const O8e={};_&2&&(O8e.$$scope={dirty:_,ctx:f}),fM.$set(O8e);const V8e={};_&2&&(V8e.$$scope={dirty:_,ctx:f}),gM.$set(V8e);const i5={};_&2&&(i5.$$scope={dirty:_,ctx:f}),pM.$set(i5);const X8e={};_&2&&(X8e.$$scope={dirty:_,ctx:f}),_M.$set(X8e);const z8e={};_&2&&(z8e.$$scope={dirty:_,ctx:f}),vM.$set(z8e);const d5={};_&2&&(d5.$$scope={dirty:_,ctx:f}),TM.$set(d5);const Q8e={};_&2&&(Q8e.$$scope={dirty:_,ctx:f}),WM.$set(Q8e);const W8e={};_&2&&(W8e.$$scope={dirty:_,ctx:f}),UM.$set(W8e);const c5={};_&2&&(c5.$$scope={dirty:_,ctx:f}),o4.$set(c5);const H8e={};_&2&&(H8e.$$scope={dirty:_,ctx:f}),t4.$set(H8e);const U8e={};_&2&&(U8e.$$scope={dirty:_,ctx:f}),u4.$set(U8e);const f5={};_&2&&(f5.$$scope={dirty:_,ctx:f}),b4.$set(f5);const J8e={};_&2&&(J8e.$$scope={dirty:_,ctx:f}),x4.$set(J8e);const Y8e={};_&2&&(Y8e.$$scope={dirty:_,ctx:f}),k4.$set(Y8e);const m5={};_&2&&(m5.$$scope={dirty:_,ctx:f}),G4.$set(m5);const K8e={};_&2&&(K8e.$$scope={dirty:_,ctx:f}),V4.$set(K8e);const Z8e={};_&2&&(Z8e.$$scope={dirty:_,ctx:f}),eE.$set(Z8e);const g5={};_&2&&(g5.$$scope={dirty:_,ctx:f}),rE.$set(g5);const e9e={};_&2&&(e9e.$$scope={dirty:_,ctx:f}),gE.$set(e9e);const o9e={};_&2&&(o9e.$$scope={dirty:_,ctx:f}),pE.$set(o9e);const h5={};_&2&&(h5.$$scope={dirty:_,ctx:f}),CE.$set(h5);const r9e={};_&2&&(r9e.$$scope={dirty:_,ctx:f}),AE.$set(r9e);const t9e={};_&2&&(t9e.$$scope={dirty:_,ctx:f}),PE.$set(t9e);const p5={};_&2&&(p5.$$scope={dirty:_,ctx:f}),qE.$set(p5);const a9e={};_&2&&(a9e.$$scope={dirty:_,ctx:f}),jE.$set(a9e);const n9e={};_&2&&(n9e.$$scope={dirty:_,ctx:f}),GE.$set(n9e);const u5={};_&2&&(u5.$$scope={dirty:_,ctx:f}),XE.$set(u5);const s9e={};_&2&&(s9e.$$scope={dirty:_,ctx:f}),QE.$set(s9e);const l9e={};_&2&&(l9e.$$scope={dirty:_,ctx:f}),HE.$set(l9e)},i(f){SPe||(E(d.$$.fragment,f),E(ba.$$.fragment,f),E(p3.$$.fragment,f),E(u3.$$.fragment,f),E(sf.$$.fragment,f),E(_3.$$.fragment,f),E(b3.$$.fragment,f),E(T3.$$.fragment,f),E(tg.$$.fragment,f),E(M3.$$.fragment,f),E(E3.$$.fragment,f),E(C3.$$.fragment,f),E(y3.$$.fragment,f),E(Pg.$$.fragment,f),E(L3.$$.fragment,f),E(x3.$$.fragment,f),E($3.$$.fragment,f),E(R3.$$.fragment,f),E(lh.$$.fragment,f),E(ih.$$.fragment,f),E(B3.$$.fragment,f),E(P3.$$.fragment,f),E(I3.$$.fragment,f),E(j3.$$.fragment,f),E(wh.$$.fragment,f),E(Ah.$$.fragment,f),E(D3.$$.fragment,f),E(G3.$$.fragment,f),E(O3.$$.fragment,f),E(X3.$$.fragment,f),E(xh.$$.fragment,f),E(z3.$$.fragment,f),E(uu.$$.fragment,f),E(Q3.$$.fragment,f),E(W3.$$.fragment,f),E(U3.$$.fragment,f),E(bu.$$.fragment,f),E(J3.$$.fragment,f),E(n_.$$.fragment,f),E(Y3.$$.fragment,f),E(K3.$$.fragment,f),E(ew.$$.fragment,f),E(l_.$$.fragment,f),E(ow.$$.fragment,f),E(X_.$$.fragment,f),E(rw.$$.fragment,f),E(tw.$$.fragment,f),E(nw.$$.fragment,f),E(Q_.$$.fragment,f),E(sw.$$.fragment,f),E(x1.$$.fragment,f),E(lw.$$.fragment,f),E(iw.$$.fragment,f),E(cw.$$.fragment,f),E(k1.$$.fragment,f),E(fw.$$.fragment,f),E(J1.$$.fragment,f),E(mw.$$.fragment,f),E(gw.$$.fragment,f),E(pw.$$.fragment,f),E(K1.$$.fragment,f),E(uw.$$.fragment,f),E(Wb.$$.fragment,f),E(_w.$$.fragment,f),E(bw.$$.fragment,f),E(Fw.$$.fragment,f),E(Ub.$$.fragment,f),E(Tw.$$.fragment,f),E(w2.$$.fragment,f),E(Mw.$$.fragment,f),E(Ew.$$.fragment,f),E(ww.$$.fragment,f),E(y2.$$.fragment,f),E(Aw.$$.fragment,f),E(B2.$$.fragment,f),E(yw.$$.fragment,f),E(Lw.$$.fragment,f),E($w.$$.fragment,f),E(I2.$$.fragment,f),E(kw.$$.fragment,f),E(_v.$$.fragment,f),E(Sw.$$.fragment,f),E(Rw.$$.fragment,f),E(Pw.$$.fragment,f),E(vv.$$.fragment,f),E(Iw.$$.fragment,f),E(sF.$$.fragment,f),E(qw.$$.fragment,f),E(Nw.$$.fragment,f),E(Dw.$$.fragment,f),E(iF.$$.fragment,f),E(Gw.$$.fragment,f),E(fF.$$.fragment,f),E(Ow.$$.fragment,f),E(Vw.$$.fragment,f),E(zw.$$.fragment,f),E(gF.$$.fragment,f),E(Qw.$$.fragment,f),E(AF.$$.fragment,f),E(Ww.$$.fragment,f),E(Hw.$$.fragment,f),E(Jw.$$.fragment,f),E(LF.$$.fragment,f),E(Yw.$$.fragment,f),E(kF.$$.fragment,f),E(Kw.$$.fragment,f),E(Zw.$$.fragment,f),E(oA.$$.fragment,f),E(RF.$$.fragment,f),E(rA.$$.fragment,f),E(VF.$$.fragment,f),E(tA.$$.fragment,f),E(aA.$$.fragment,f),E(sA.$$.fragment,f),E(zF.$$.fragment,f),E(lA.$$.fragment,f),E(YF.$$.fragment,f),E(iA.$$.fragment,f),E(dA.$$.fragment,f),E(fA.$$.fragment,f),E(ZF.$$.fragment,f),E(mA.$$.fragment,f),E(d0.$$.fragment,f),E(gA.$$.fragment,f),E(hA.$$.fragment,f),E(uA.$$.fragment,f),E(f0.$$.fragment,f),E(_A.$$.fragment,f),E(p0.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(MA.$$.fragment,f),E(_0.$$.fragment,f),E(EA.$$.fragment,f),E(E0.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(yA.$$.fragment,f),E(w0.$$.fragment,f),E(LA.$$.fragment,f),E(k0.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(SA.$$.fragment,f),E(R0.$$.fragment,f),E(RA.$$.fragment,f),E(I0.$$.fragment,f),E(BA.$$.fragment,f),E(PA.$$.fragment,f),E(qA.$$.fragment,f),E(N0.$$.fragment,f),E(NA.$$.fragment,f),E(G0.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(OA.$$.fragment,f),E(V0.$$.fragment,f),E(VA.$$.fragment,f),E(U0.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(Y0.$$.fragment,f),E(HA.$$.fragment,f),E(e6.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(r6.$$.fragment,f),E(ZA.$$.fragment,f),E(Q6.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(H6.$$.fragment,f),E(ay.$$.fragment,f),E(bT.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(FT.$$.fragment,f),E(dy.$$.fragment,f),E(RT.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(PT.$$.fragment,f),E(hy.$$.fragment,f),E(NT.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(DT.$$.fragment,f),E(Fy.$$.fragment,f),E(l8.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(d8.$$.fragment,f),E(wy.$$.fragment,f),E(F8.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(M8.$$.fragment,f),E($y.$$.fragment,f),E(U8.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(Y8.$$.fragment,f),E(Py.$$.fragment,f),E(p9.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(_9.$$.fragment,f),E(Dy.$$.fragment,f),E(v9.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(T9.$$.fragment,f),E(zy.$$.fragment,f),E(O9.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(X9.$$.fragment,f),E(Jy.$$.fragment,f),E(fM.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(gM.$$.fragment,f),E(oL.$$.fragment,f),E(pM.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(_M.$$.fragment,f),E(sL.$$.fragment,f),E(vM.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(TM.$$.fragment,f),E(fL.$$.fragment,f),E(WM.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(UM.$$.fragment,f),E(uL.$$.fragment,f),E(o4.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(t4.$$.fragment,f),E(TL.$$.fragment,f),E(u4.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(b4.$$.fragment,f),E(AL.$$.fragment,f),E(x4.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(k4.$$.fragment,f),E(kL.$$.fragment,f),E(G4.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(V4.$$.fragment,f),E(IL.$$.fragment,f),E(eE.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(rE.$$.fragment,f),E(GL.$$.fragment,f),E(gE.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(pE.$$.fragment,f),E(QL.$$.fragment,f),E(CE.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(AE.$$.fragment,f),E(YL.$$.fragment,f),E(PE.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o7.$$.fragment,f),E(qE.$$.fragment,f),E(r7.$$.fragment,f),E(jE.$$.fragment,f),E(t7.$$.fragment,f),E(a7.$$.fragment,f),E(s7.$$.fragment,f),E(GE.$$.fragment,f),E(l7.$$.fragment,f),E(XE.$$.fragment,f),E(d7.$$.fragment,f),E(c7.$$.fragment,f),E(m7.$$.fragment,f),E(QE.$$.fragment,f),E(g7.$$.fragment,f),E(HE.$$.fragment,f),SPe=!0)},o(f){C(d.$$.fragment,f),C(ba.$$.fragment,f),C(p3.$$.fragment,f),C(u3.$$.fragment,f),C(sf.$$.fragment,f),C(_3.$$.fragment,f),C(b3.$$.fragment,f),C(T3.$$.fragment,f),C(tg.$$.fragment,f),C(M3.$$.fragment,f),C(E3.$$.fragment,f),C(C3.$$.fragment,f),C(y3.$$.fragment,f),C(Pg.$$.fragment,f),C(L3.$$.fragment,f),C(x3.$$.fragment,f),C($3.$$.fragment,f),C(R3.$$.fragment,f),C(lh.$$.fragment,f),C(ih.$$.fragment,f),C(B3.$$.fragment,f),C(P3.$$.fragment,f),C(I3.$$.fragment,f),C(j3.$$.fragment,f),C(wh.$$.fragment,f),C(Ah.$$.fragment,f),C(D3.$$.fragment,f),C(G3.$$.fragment,f),C(O3.$$.fragment,f),C(X3.$$.fragment,f),C(xh.$$.fragment,f),C(z3.$$.fragment,f),C(uu.$$.fragment,f),C(Q3.$$.fragment,f),C(W3.$$.fragment,f),C(U3.$$.fragment,f),C(bu.$$.fragment,f),C(J3.$$.fragment,f),C(n_.$$.fragment,f),C(Y3.$$.fragment,f),C(K3.$$.fragment,f),C(ew.$$.fragment,f),C(l_.$$.fragment,f),C(ow.$$.fragment,f),C(X_.$$.fragment,f),C(rw.$$.fragment,f),C(tw.$$.fragment,f),C(nw.$$.fragment,f),C(Q_.$$.fragment,f),C(sw.$$.fragment,f),C(x1.$$.fragment,f),C(lw.$$.fragment,f),C(iw.$$.fragment,f),C(cw.$$.fragment,f),C(k1.$$.fragment,f),C(fw.$$.fragment,f),C(J1.$$.fragment,f),C(mw.$$.fragment,f),C(gw.$$.fragment,f),C(pw.$$.fragment,f),C(K1.$$.fragment,f),C(uw.$$.fragment,f),C(Wb.$$.fragment,f),C(_w.$$.fragment,f),C(bw.$$.fragment,f),C(Fw.$$.fragment,f),C(Ub.$$.fragment,f),C(Tw.$$.fragment,f),C(w2.$$.fragment,f),C(Mw.$$.fragment,f),C(Ew.$$.fragment,f),C(ww.$$.fragment,f),C(y2.$$.fragment,f),C(Aw.$$.fragment,f),C(B2.$$.fragment,f),C(yw.$$.fragment,f),C(Lw.$$.fragment,f),C($w.$$.fragment,f),C(I2.$$.fragment,f),C(kw.$$.fragment,f),C(_v.$$.fragment,f),C(Sw.$$.fragment,f),C(Rw.$$.fragment,f),C(Pw.$$.fragment,f),C(vv.$$.fragment,f),C(Iw.$$.fragment,f),C(sF.$$.fragment,f),C(qw.$$.fragment,f),C(Nw.$$.fragment,f),C(Dw.$$.fragment,f),C(iF.$$.fragment,f),C(Gw.$$.fragment,f),C(fF.$$.fragment,f),C(Ow.$$.fragment,f),C(Vw.$$.fragment,f),C(zw.$$.fragment,f),C(gF.$$.fragment,f),C(Qw.$$.fragment,f),C(AF.$$.fragment,f),C(Ww.$$.fragment,f),C(Hw.$$.fragment,f),C(Jw.$$.fragment,f),C(LF.$$.fragment,f),C(Yw.$$.fragment,f),C(kF.$$.fragment,f),C(Kw.$$.fragment,f),C(Zw.$$.fragment,f),C(oA.$$.fragment,f),C(RF.$$.fragment,f),C(rA.$$.fragment,f),C(VF.$$.fragment,f),C(tA.$$.fragment,f),C(aA.$$.fragment,f),C(sA.$$.fragment,f),C(zF.$$.fragment,f),C(lA.$$.fragment,f),C(YF.$$.fragment,f),C(iA.$$.fragment,f),C(dA.$$.fragment,f),C(fA.$$.fragment,f),C(ZF.$$.fragment,f),C(mA.$$.fragment,f),C(d0.$$.fragment,f),C(gA.$$.fragment,f),C(hA.$$.fragment,f),C(uA.$$.fragment,f),C(f0.$$.fragment,f),C(_A.$$.fragment,f),C(p0.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(MA.$$.fragment,f),C(_0.$$.fragment,f),C(EA.$$.fragment,f),C(E0.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(yA.$$.fragment,f),C(w0.$$.fragment,f),C(LA.$$.fragment,f),C(k0.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(SA.$$.fragment,f),C(R0.$$.fragment,f),C(RA.$$.fragment,f),C(I0.$$.fragment,f),C(BA.$$.fragment,f),C(PA.$$.fragment,f),C(qA.$$.fragment,f),C(N0.$$.fragment,f),C(NA.$$.fragment,f),C(G0.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(OA.$$.fragment,f),C(V0.$$.fragment,f),C(VA.$$.fragment,f),C(U0.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(Y0.$$.fragment,f),C(HA.$$.fragment,f),C(e6.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(r6.$$.fragment,f),C(ZA.$$.fragment,f),C(Q6.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(H6.$$.fragment,f),C(ay.$$.fragment,f),C(bT.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(FT.$$.fragment,f),C(dy.$$.fragment,f),C(RT.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(PT.$$.fragment,f),C(hy.$$.fragment,f),C(NT.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(DT.$$.fragment,f),C(Fy.$$.fragment,f),C(l8.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(d8.$$.fragment,f),C(wy.$$.fragment,f),C(F8.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(M8.$$.fragment,f),C($y.$$.fragment,f),C(U8.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(Y8.$$.fragment,f),C(Py.$$.fragment,f),C(p9.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(_9.$$.fragment,f),C(Dy.$$.fragment,f),C(v9.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(T9.$$.fragment,f),C(zy.$$.fragment,f),C(O9.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(X9.$$.fragment,f),C(Jy.$$.fragment,f),C(fM.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(gM.$$.fragment,f),C(oL.$$.fragment,f),C(pM.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(_M.$$.fragment,f),C(sL.$$.fragment,f),C(vM.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(TM.$$.fragment,f),C(fL.$$.fragment,f),C(WM.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(UM.$$.fragment,f),C(uL.$$.fragment,f),C(o4.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(t4.$$.fragment,f),C(TL.$$.fragment,f),C(u4.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(b4.$$.fragment,f),C(AL.$$.fragment,f),C(x4.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(k4.$$.fragment,f),C(kL.$$.fragment,f),C(G4.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(V4.$$.fragment,f),C(IL.$$.fragment,f),C(eE.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(rE.$$.fragment,f),C(GL.$$.fragment,f),C(gE.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(pE.$$.fragment,f),C(QL.$$.fragment,f),C(CE.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(AE.$$.fragment,f),C(YL.$$.fragment,f),C(PE.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o7.$$.fragment,f),C(qE.$$.fragment,f),C(r7.$$.fragment,f),C(jE.$$.fragment,f),C(t7.$$.fragment,f),C(a7.$$.fragment,f),C(s7.$$.fragment,f),C(GE.$$.fragment,f),C(l7.$$.fragment,f),C(XE.$$.fragment,f),C(d7.$$.fragment,f),C(c7.$$.fragment,f),C(m7.$$.fragment,f),C(QE.$$.fragment,f),C(g7.$$.fragment,f),C(HE.$$.fragment,f),SPe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(of),f&&t(Yr),f&&t(Ie),f&&t(Oe),f&&t(tf),w(ba,f),f&&t(Ve),f&&t(Ae),f&&t(To),f&&t(va),f&&t(kRe),f&&t(di),w(p3),f&&t(SRe),f&&t(An),f&&t(RRe),w(u3,f),f&&t(BRe),f&&t(kx),f&&t(PRe),w(sf,f),f&&t(IRe),f&&t(ci),w(_3),f&&t(qRe),f&&t(Mo),w(b3),w(T3),w(tg),w(M3),f&&t(NRe),f&&t(mi),w(E3),f&&t(jRe),f&&t(Eo),w(C3),w(y3),w(Pg),w(L3),f&&t(DRe),f&&t(gi),w(x3),f&&t(GRe),f&&t(Co),w($3),w(R3),w(lh),w(ih),w(B3),f&&t(ORe),f&&t(hi),w(P3),f&&t(VRe),f&&t(wo),w(I3),w(j3),w(wh),w(Ah),w(D3),f&&t(XRe),f&&t(ui),w(G3),f&&t(zRe),f&&t(Ao),w(O3),w(X3),w(xh),w(z3),w(uu),f&&t(QRe),f&&t(vi),w(Q3),f&&t(WRe),f&&t(yo),w(W3),w(U3),w(bu),w(J3),w(n_),f&&t(HRe),f&&t(Mi),w(Y3),f&&t(URe),f&&t(Lo),w(K3),w(ew),w(l_),w(ow),w(X_),f&&t(JRe),f&&t(wi),w(rw),f&&t(YRe),f&&t(xo),w(tw),w(nw),w(Q_),w(sw),w(x1),f&&t(KRe),f&&t(Li),w(lw),f&&t(ZRe),f&&t($o),w(iw),w(cw),w(k1),w(fw),w(J1),f&&t(eBe),f&&t(ki),w(mw),f&&t(oBe),f&&t(ko),w(gw),w(pw),w(K1),w(uw),w(Wb),f&&t(rBe),f&&t(Bi),w(_w),f&&t(tBe),f&&t(So),w(bw),w(Fw),w(Ub),w(Tw),w(w2),f&&t(aBe),f&&t(qi),w(Mw),f&&t(nBe),f&&t(Ro),w(Ew),w(ww),w(y2),w(Aw),w(B2),f&&t(sBe),f&&t(Di),w(yw),f&&t(lBe),f&&t(Bo),w(Lw),w($w),w(I2),w(kw),w(_v),f&&t(iBe),f&&t(Vi),w(Sw),f&&t(dBe),f&&t(Po),w(Rw),w(Pw),w(vv),w(Iw),w(sF),f&&t(cBe),f&&t(Qi),w(qw),f&&t(fBe),f&&t(Io),w(Nw),w(Dw),w(iF),w(Gw),w(fF),f&&t(mBe),f&&t(Ui),w(Ow),f&&t(gBe),f&&t(qo),w(Vw),w(zw),w(gF),w(Qw),w(AF),f&&t(hBe),f&&t(Ki),w(Ww),f&&t(pBe),f&&t(No),w(Hw),w(Jw),w(LF),w(Yw),w(kF),f&&t(uBe),f&&t(od),w(Kw),f&&t(_Be),f&&t(jo),w(Zw),w(oA),w(RF),w(rA),w(VF),f&&t(bBe),f&&t(ad),w(tA),f&&t(vBe),f&&t(Do),w(aA),w(sA),w(zF),w(lA),w(YF),f&&t(FBe),f&&t(ld),w(iA),f&&t(TBe),f&&t(Go),w(dA),w(fA),w(ZF),w(mA),w(d0),f&&t(MBe),f&&t(cd),w(gA),f&&t(EBe),f&&t(Oo),w(hA),w(uA),w(f0),w(_A),w(p0),f&&t(CBe),f&&t(gd),w(vA),f&&t(wBe),f&&t(Vo),w(FA),w(MA),w(_0),w(EA),w(E0),f&&t(ABe),f&&t(ud),w(CA),f&&t(yBe),f&&t(Xo),w(wA),w(yA),w(w0),w(LA),w(k0),f&&t(LBe),f&&t(vd),w(xA),f&&t(xBe),f&&t(zo),w($A),w(SA),w(R0),w(RA),w(I0),f&&t($Be),f&&t(Md),w(BA),f&&t(kBe),f&&t(Qo),w(PA),w(qA),w(N0),w(NA),w(G0),f&&t(SBe),f&&t(wd),w(jA),f&&t(RBe),f&&t(Wo),w(DA),w(OA),w(V0),w(VA),w(U0),f&&t(BBe),f&&t(Ld),w(XA),f&&t(PBe),f&&t(Ho),w(zA),w(WA),w(Y0),w(HA),w(e6),f&&t(IBe),f&&t(kd),w(UA),f&&t(qBe),f&&t(Uo),w(JA),w(KA),w(r6),w(ZA),w(Q6),f&&t(NBe),f&&t(Bd),w(ey),f&&t(jBe),f&&t(Jo),w(oy),w(ty),w(H6),w(ay),w(bT),f&&t(DBe),f&&t(qd),w(ny),f&&t(GBe),f&&t(Yo),w(sy),w(iy),w(FT),w(dy),w(RT),f&&t(OBe),f&&t(Dd),w(cy),f&&t(VBe),f&&t(Ko),w(fy),w(gy),w(PT),w(hy),w(NT),f&&t(XBe),f&&t(Vd),w(uy),f&&t(zBe),f&&t(Zo),w(_y),w(vy),w(DT),w(Fy),w(l8),f&&t(QBe),f&&t(Qd),w(Ty),f&&t(WBe),f&&t(er),w(My),w(Cy),w(d8),w(wy),w(F8),f&&t(HBe),f&&t(Ud),w(Ay),f&&t(UBe),f&&t(or),w(yy),w(xy),w(M8),w($y),w(U8),f&&t(JBe),f&&t(Kd),w(ky),f&&t(YBe),f&&t(rr),w(Sy),w(By),w(Y8),w(Py),w(p9),f&&t(KBe),f&&t(oc),w(Iy),f&&t(ZBe),f&&t(tr),w(qy),w(jy),w(_9),w(Dy),w(v9),f&&t(ePe),f&&t(ac),w(Gy),f&&t(oPe),f&&t(ar),w(Oy),w(Xy),w(T9),w(zy),w(O9),f&&t(rPe),f&&t(lc),w(Qy),f&&t(tPe),f&&t(nr),w(Wy),w(Uy),w(X9),w(Jy),w(fM),f&&t(aPe),f&&t(cc),w(Yy),f&&t(nPe),f&&t(sr),w(Ky),w(eL),w(gM),w(oL),w(pM),f&&t(sPe),f&&t(gc),w(rL),f&&t(lPe),f&&t(lr),w(tL),w(nL),w(_M),w(sL),w(vM),f&&t(iPe),f&&t(uc),w(lL),f&&t(dPe),f&&t(ir),w(iL),w(cL),w(TM),w(fL),w(WM),f&&t(cPe),f&&t(vc),w(mL),f&&t(fPe),f&&t(dr),w(gL),w(pL),w(UM),w(uL),w(o4),f&&t(mPe),f&&t(Mc),w(_L),f&&t(gPe),f&&t(cr),w(bL),w(FL),w(t4),w(TL),w(u4),f&&t(hPe),f&&t(wc),w(ML),f&&t(pPe),f&&t(fr),w(EL),w(wL),w(b4),w(AL),w(x4),f&&t(uPe),f&&t(Lc),w(yL),f&&t(_Pe),f&&t(mr),w(LL),w($L),w(k4),w(kL),w(G4),f&&t(bPe),f&&t(kc),w(SL),f&&t(vPe),f&&t(gr),w(RL),w(PL),w(V4),w(IL),w(eE),f&&t(FPe),f&&t(Bc),w(qL),f&&t(TPe),f&&t(hr),w(NL),w(DL),w(rE),w(GL),w(gE),f&&t(MPe),f&&t(qc),w(OL),f&&t(EPe),f&&t(pr),w(VL),w(zL),w(pE),w(QL),w(CE),f&&t(CPe),f&&t(Dc),w(WL),f&&t(wPe),f&&t(ur),w(HL),w(JL),w(AE),w(YL),w(PE),f&&t(APe),f&&t(Vc),w(KL),f&&t(yPe),f&&t(_r),w(ZL),w(o7),w(qE),w(r7),w(jE),f&&t(LPe),f&&t(Qc),w(t7),f&&t(xPe),f&&t(br),w(a7),w(s7),w(GE),w(l7),w(XE),f&&t($Pe),f&&t(Uc),w(d7),f&&t(kPe),f&&t(vr),w(c7),w(m7),w(QE),w(g7),w(HE)}}}const pEt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function uEt(A){return bMt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class EEt extends hMt{constructor(g){super();pMt(this,g,uEt,hEt,uMt,{})}}export{EEt as default,pEt as metadata};
