import{S as TCt,i as MCt,s as ECt,e as a,k as l,w as F,t as o,M as CCt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as wCt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as vIr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function ACt(L){let g,v,p,m,u,d,h,Mo,ri,rf,Kr,ti,ai,ww,tf,qe,Xe,ni,Mn,Aw,En,Cn,yw,si,wn,Lw,li,af,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ri=a("code"),rf=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ti=a("code"),ai=o('"new-model"'),ww=o(")."),tf=l(),qe=a("p"),Xe=o("Likewise, if your "),ni=a("code"),Mn=o("NewModel"),Aw=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),yw=o(`, make sure its
`),si=a("code"),wn=o("config_class"),Lw=o(` attribute is set to the same class you use when registering the model (here
`),li=a("code"),af=o("NewModelConfig"),va=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var O9=s(p);m=r(O9,"NewModelConfig"),O9.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ii=s(d);h=r(ii,"PretrainedConfig"),ii.forEach(t),Mo=r(Ae,`, make sure its
`),ri=n(Ae,"CODE",{});var V9=s(ri);rf=r(V9,"model_type"),V9.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ti=n(Ae,"CODE",{});var X9=s(ti);ai=r(X9,'"new-model"'),X9.forEach(t),ww=r(Ae,")."),Ae.forEach(t),tf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ni=n(Eo,"CODE",{});var Fa=s(ni);Mn=r(Fa,"NewModel"),Fa.forEach(t),Aw=r(Eo," is a subclass of "),En=n(Eo,"A",{href:!0});var z9=s(En);Cn=r(z9,"PreTrainedModel"),z9.forEach(t),yw=r(Eo,`, make sure its
`),si=n(Eo,"CODE",{});var nf=s(si);wn=r(nf,"config_class"),nf.forEach(t),Lw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),li=n(Eo,"CODE",{});var Q9=s(li);af=r(Q9,"NewModelConfig"),Q9.forEach(t),va=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ri),e(ri,rf),e(g,Kr),e(g,ti),e(ti,ai),e(g,ww),b(ze,tf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ni),e(ni,Mn),e(qe,Aw),e(qe,En),e(En,Cn),e(qe,yw),e(qe,si),e(si,wn),e(qe,Lw),e(qe,li),e(li,af),e(qe,va)},d(ze){ze&&t(g),ze&&t(tf),ze&&t(qe)}}}function yCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function $Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function SCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ICt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function swt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Twt(L){let g,v,p,m,u,d,h,Mo,ri,rf,Kr,ti,ai,ww,tf,qe,Xe,ni,Mn,Aw,En,Cn,yw,si,wn,Lw,li,af,va,ze,Ae,O9,ii,V9,X9,Eo,Fa,z9,nf,Q9,zNe,NBe,di,sf,bZ,xw,QNe,vZ,WNe,jBe,An,HNe,FZ,UNe,JNe,TZ,YNe,KNe,DBe,$w,GBe,W9,ZNe,OBe,lf,VBe,ci,df,MZ,kw,eje,EZ,oje,XBe,Co,Sw,rje,Rw,tje,H9,aje,nje,sje,Bw,lje,CZ,ije,dje,cje,Mr,Pw,fje,wZ,mje,gje,fi,hje,AZ,pje,uje,yZ,_je,bje,vje,A,cf,LZ,Fje,Tje,U9,Mje,Eje,Cje,ff,xZ,wje,Aje,J9,yje,Lje,xje,mf,$Z,$je,kje,Y9,Sje,Rje,Bje,gf,kZ,Pje,Ije,K9,qje,Nje,jje,hf,SZ,Dje,Gje,Z9,Oje,Vje,Xje,pf,RZ,zje,Qje,e$,Wje,Hje,Uje,uf,BZ,Jje,Yje,o$,Kje,Zje,eDe,_f,PZ,oDe,rDe,r$,tDe,aDe,nDe,bf,IZ,sDe,lDe,t$,iDe,dDe,cDe,vf,qZ,fDe,mDe,a$,gDe,hDe,pDe,Ff,NZ,uDe,_De,n$,bDe,vDe,FDe,Tf,jZ,TDe,MDe,s$,EDe,CDe,wDe,Mf,DZ,ADe,yDe,l$,LDe,xDe,$De,Ef,GZ,kDe,SDe,i$,RDe,BDe,PDe,Cf,OZ,IDe,qDe,d$,NDe,jDe,DDe,wf,VZ,GDe,ODe,c$,VDe,XDe,zDe,Af,XZ,QDe,WDe,f$,HDe,UDe,JDe,yf,zZ,YDe,KDe,m$,ZDe,eGe,oGe,Lf,QZ,rGe,tGe,g$,aGe,nGe,sGe,xf,WZ,lGe,iGe,h$,dGe,cGe,fGe,$f,HZ,mGe,gGe,p$,hGe,pGe,uGe,kf,UZ,_Ge,bGe,u$,vGe,FGe,TGe,Sf,JZ,MGe,EGe,_$,CGe,wGe,AGe,Rf,YZ,yGe,LGe,b$,xGe,$Ge,kGe,Bf,KZ,SGe,RGe,v$,BGe,PGe,IGe,Pf,ZZ,qGe,NGe,F$,jGe,DGe,GGe,If,eee,OGe,VGe,T$,XGe,zGe,QGe,qf,oee,WGe,HGe,M$,UGe,JGe,YGe,Nf,ree,KGe,ZGe,E$,eOe,oOe,rOe,jf,tee,tOe,aOe,C$,nOe,sOe,lOe,Df,aee,iOe,dOe,w$,cOe,fOe,mOe,Gf,nee,gOe,hOe,A$,pOe,uOe,_Oe,Of,see,bOe,vOe,y$,FOe,TOe,MOe,Vf,lee,EOe,COe,L$,wOe,AOe,yOe,Xf,iee,LOe,xOe,x$,$Oe,kOe,SOe,zf,dee,ROe,BOe,$$,POe,IOe,qOe,Qf,cee,NOe,jOe,k$,DOe,GOe,OOe,Wf,fee,VOe,XOe,S$,zOe,QOe,WOe,Hf,mee,HOe,UOe,R$,JOe,YOe,KOe,Uf,gee,ZOe,eVe,B$,oVe,rVe,tVe,Jf,hee,aVe,nVe,P$,sVe,lVe,iVe,Yf,pee,dVe,cVe,I$,fVe,mVe,gVe,Kf,uee,hVe,pVe,q$,uVe,_Ve,bVe,Zf,_ee,vVe,FVe,N$,TVe,MVe,EVe,em,bee,CVe,wVe,j$,AVe,yVe,LVe,om,vee,xVe,$Ve,D$,kVe,SVe,RVe,rm,Fee,BVe,PVe,G$,IVe,qVe,NVe,tm,Tee,jVe,DVe,O$,GVe,OVe,VVe,am,Mee,XVe,zVe,V$,QVe,WVe,HVe,nm,Eee,UVe,JVe,X$,YVe,KVe,ZVe,sm,Cee,eXe,oXe,z$,rXe,tXe,aXe,lm,wee,nXe,sXe,Q$,lXe,iXe,dXe,im,Aee,cXe,fXe,W$,mXe,gXe,hXe,dm,yee,pXe,uXe,H$,_Xe,bXe,vXe,cm,Lee,FXe,TXe,U$,MXe,EXe,CXe,fm,xee,wXe,AXe,J$,yXe,LXe,xXe,mm,$ee,$Xe,kXe,Y$,SXe,RXe,BXe,gm,kee,PXe,IXe,K$,qXe,NXe,jXe,hm,See,DXe,GXe,Z$,OXe,VXe,XXe,pm,Ree,zXe,QXe,ek,WXe,HXe,UXe,um,Bee,JXe,YXe,ok,KXe,ZXe,eze,_m,Pee,oze,rze,rk,tze,aze,nze,bm,Iee,sze,lze,tk,ize,dze,cze,vm,qee,fze,mze,ak,gze,hze,pze,Fm,Nee,uze,_ze,nk,bze,vze,Fze,Tm,jee,Tze,Mze,sk,Eze,Cze,wze,Mm,Dee,Aze,yze,lk,Lze,xze,$ze,Em,Gee,kze,Sze,ik,Rze,Bze,Pze,Cm,Oee,Ize,qze,dk,Nze,jze,Dze,wm,Vee,Gze,Oze,ck,Vze,Xze,zze,Am,Xee,Qze,Wze,fk,Hze,Uze,Jze,ym,zee,Yze,Kze,mk,Zze,eQe,oQe,Lm,Qee,rQe,tQe,gk,aQe,nQe,sQe,xm,Wee,lQe,iQe,hk,dQe,cQe,fQe,$m,Hee,mQe,gQe,pk,hQe,pQe,uQe,km,Uee,_Qe,bQe,uk,vQe,FQe,TQe,Sm,Jee,MQe,EQe,_k,CQe,wQe,AQe,Rm,Yee,yQe,LQe,bk,xQe,$Qe,kQe,Bm,Kee,SQe,RQe,vk,BQe,PQe,IQe,Pm,Zee,qQe,NQe,Fk,jQe,DQe,GQe,Im,eoe,OQe,VQe,Tk,XQe,zQe,QQe,qm,ooe,WQe,HQe,Mk,UQe,JQe,YQe,Nm,roe,KQe,ZQe,Ek,eWe,oWe,rWe,jm,toe,tWe,aWe,Ck,nWe,sWe,lWe,Dm,aoe,iWe,dWe,wk,cWe,fWe,mWe,Gm,noe,gWe,hWe,Ak,pWe,uWe,_We,Om,soe,bWe,vWe,yk,FWe,TWe,MWe,Vm,loe,EWe,CWe,Lk,wWe,AWe,yWe,Xm,ioe,LWe,xWe,xk,$We,kWe,SWe,zm,doe,RWe,BWe,$k,PWe,IWe,qWe,Qm,coe,NWe,jWe,kk,DWe,GWe,OWe,Wm,foe,VWe,XWe,Sk,zWe,QWe,WWe,Hm,moe,HWe,UWe,Rk,JWe,YWe,KWe,Um,goe,ZWe,eHe,Bk,oHe,rHe,tHe,Jm,hoe,aHe,nHe,Pk,sHe,lHe,iHe,Ym,poe,dHe,cHe,Ik,fHe,mHe,gHe,Km,uoe,hHe,pHe,qk,uHe,_He,bHe,Zm,_oe,vHe,FHe,Nk,THe,MHe,EHe,eg,boe,CHe,wHe,jk,AHe,yHe,LHe,og,voe,xHe,$He,Dk,kHe,SHe,RHe,rg,Foe,BHe,PHe,Gk,IHe,qHe,NHe,tg,Toe,jHe,DHe,Ok,GHe,OHe,VHe,ag,Moe,XHe,zHe,Vk,QHe,WHe,HHe,ng,Eoe,UHe,JHe,Xk,YHe,KHe,ZHe,sg,eUe,lg,Iw,oUe,Coe,rUe,zBe,mi,ig,woe,qw,tUe,Aoe,aUe,QBe,wo,Nw,nUe,jw,sUe,zk,lUe,iUe,dUe,Dw,cUe,yoe,fUe,mUe,gUe,Er,Gw,hUe,Loe,pUe,uUe,Ta,_Ue,xoe,bUe,vUe,$oe,FUe,TUe,koe,MUe,EUe,CUe,k,yn,Soe,wUe,AUe,Qk,yUe,LUe,Wk,xUe,$Ue,kUe,Ln,Roe,SUe,RUe,Hk,BUe,PUe,Uk,IUe,qUe,NUe,xn,Boe,jUe,DUe,Jk,GUe,OUe,Yk,VUe,XUe,zUe,dg,Poe,QUe,WUe,Kk,HUe,UUe,JUe,$n,Ioe,YUe,KUe,Zk,ZUe,eJe,eS,oJe,rJe,tJe,cg,qoe,aJe,nJe,oS,sJe,lJe,iJe,fg,Noe,dJe,cJe,rS,fJe,mJe,gJe,mg,joe,hJe,pJe,tS,uJe,_Je,bJe,kn,Doe,vJe,FJe,aS,TJe,MJe,nS,EJe,CJe,wJe,Sn,Goe,AJe,yJe,sS,LJe,xJe,lS,$Je,kJe,SJe,Rn,Ooe,RJe,BJe,iS,PJe,IJe,dS,qJe,NJe,jJe,gg,Voe,DJe,GJe,cS,OJe,VJe,XJe,hg,Xoe,zJe,QJe,fS,WJe,HJe,UJe,Bn,zoe,JJe,YJe,mS,KJe,ZJe,gS,eYe,oYe,rYe,pg,Qoe,tYe,aYe,hS,nYe,sYe,lYe,Pn,Woe,iYe,dYe,pS,cYe,fYe,uS,mYe,gYe,hYe,In,Hoe,pYe,uYe,_S,_Ye,bYe,bS,vYe,FYe,TYe,qn,Uoe,MYe,EYe,vS,CYe,wYe,FS,AYe,yYe,LYe,ug,Joe,xYe,$Ye,TS,kYe,SYe,RYe,Nn,Yoe,BYe,PYe,MS,IYe,qYe,ES,NYe,jYe,DYe,jn,Koe,GYe,OYe,CS,VYe,XYe,wS,zYe,QYe,WYe,Dn,Zoe,HYe,UYe,AS,JYe,YYe,yS,KYe,ZYe,eKe,Gn,ere,oKe,rKe,LS,tKe,aKe,xS,nKe,sKe,lKe,On,ore,iKe,dKe,$S,cKe,fKe,kS,mKe,gKe,hKe,Vn,rre,pKe,uKe,SS,_Ke,bKe,RS,vKe,FKe,TKe,_g,tre,MKe,EKe,BS,CKe,wKe,AKe,Xn,are,yKe,LKe,PS,xKe,$Ke,IS,kKe,SKe,RKe,bg,nre,BKe,PKe,qS,IKe,qKe,NKe,zn,sre,jKe,DKe,NS,GKe,OKe,jS,VKe,XKe,zKe,Qn,lre,QKe,WKe,DS,HKe,UKe,GS,JKe,YKe,KKe,Wn,ire,ZKe,eZe,OS,oZe,rZe,VS,tZe,aZe,nZe,Hn,dre,sZe,lZe,XS,iZe,dZe,zS,cZe,fZe,mZe,Un,cre,gZe,hZe,QS,pZe,uZe,WS,_Ze,bZe,vZe,vg,fre,FZe,TZe,HS,MZe,EZe,CZe,Jn,mre,wZe,AZe,US,yZe,LZe,JS,xZe,$Ze,kZe,Yn,gre,SZe,RZe,YS,BZe,PZe,KS,IZe,qZe,NZe,Kn,hre,jZe,DZe,ZS,GZe,OZe,eR,VZe,XZe,zZe,Zn,pre,QZe,WZe,oR,HZe,UZe,rR,JZe,YZe,KZe,es,ure,ZZe,eeo,tR,oeo,reo,aR,teo,aeo,neo,os,_re,seo,leo,nR,ieo,deo,sR,ceo,feo,meo,rs,bre,geo,heo,lR,peo,ueo,iR,_eo,beo,veo,Fg,vre,Feo,Teo,dR,Meo,Eeo,Ceo,ts,Fre,weo,Aeo,cR,yeo,Leo,fR,xeo,$eo,keo,Tg,Tre,Seo,Reo,mR,Beo,Peo,Ieo,Mg,Mre,qeo,Neo,gR,jeo,Deo,Geo,as,Ere,Oeo,Veo,hR,Xeo,zeo,pR,Qeo,Weo,Heo,ns,Cre,Ueo,Jeo,uR,Yeo,Keo,_R,Zeo,eoo,ooo,ss,wre,roo,too,bR,aoo,noo,vR,soo,loo,ioo,Eg,Are,doo,coo,FR,foo,moo,goo,ls,yre,hoo,poo,TR,uoo,_oo,MR,boo,voo,Foo,is,Lre,Too,Moo,ER,Eoo,Coo,CR,woo,Aoo,yoo,ds,xre,Loo,xoo,wR,$oo,koo,AR,Soo,Roo,Boo,cs,$re,Poo,Ioo,yR,qoo,Noo,LR,joo,Doo,Goo,fs,kre,Ooo,Voo,xR,Xoo,zoo,$R,Qoo,Woo,Hoo,ms,Sre,Uoo,Joo,kR,Yoo,Koo,SR,Zoo,ero,oro,Cg,Rre,rro,tro,RR,aro,nro,sro,wg,Bre,lro,iro,BR,dro,cro,fro,Ag,Pre,mro,gro,PR,hro,pro,uro,yg,Ire,_ro,bro,IR,vro,Fro,Tro,gs,qre,Mro,Ero,qR,Cro,wro,NR,Aro,yro,Lro,Lg,Nre,xro,$ro,jR,kro,Sro,Rro,hs,jre,Bro,Pro,DR,Iro,qro,GR,Nro,jro,Dro,ps,Dre,Gro,Oro,OR,Vro,Xro,VR,zro,Qro,Wro,us,Gre,Hro,Uro,XR,Jro,Yro,zR,Kro,Zro,eto,_s,Ore,oto,rto,QR,tto,ato,WR,nto,sto,lto,bs,Vre,ito,dto,HR,cto,fto,UR,mto,gto,hto,vs,Xre,pto,uto,JR,_to,bto,YR,vto,Fto,Tto,xg,zre,Mto,Eto,KR,Cto,wto,Ato,$g,Qre,yto,Lto,ZR,xto,$to,kto,Fs,Wre,Sto,Rto,eB,Bto,Pto,oB,Ito,qto,Nto,Ts,Hre,jto,Dto,rB,Gto,Oto,tB,Vto,Xto,zto,Ms,Ure,Qto,Wto,aB,Hto,Uto,nB,Jto,Yto,Kto,kg,Jre,Zto,eao,sB,oao,rao,tao,Sg,Yre,aao,nao,lB,sao,lao,iao,Rg,Kre,dao,cao,iB,fao,mao,gao,Es,Zre,hao,pao,dB,uao,_ao,cB,bao,vao,Fao,Bg,ete,Tao,Mao,fB,Eao,Cao,wao,Pg,ote,Aao,yao,mB,Lao,xao,$ao,Cs,rte,kao,Sao,gB,Rao,Bao,hB,Pao,Iao,qao,Ig,tte,Nao,jao,pB,Dao,Gao,Oao,qg,ate,Vao,Xao,uB,zao,Qao,Wao,ws,nte,Hao,Uao,_B,Jao,Yao,bB,Kao,Zao,eno,As,ste,ono,rno,vB,tno,ano,FB,nno,sno,lno,ys,lte,ino,dno,TB,cno,fno,MB,mno,gno,hno,Ls,ite,pno,uno,EB,_no,bno,CB,vno,Fno,Tno,Ng,Mno,jg,Ow,Eno,dte,Cno,WBe,gi,Dg,cte,Vw,wno,fte,Ano,HBe,Ao,Xw,yno,zw,Lno,wB,xno,$no,kno,Qw,Sno,mte,Rno,Bno,Pno,Qe,Ww,Ino,gte,qno,Nno,Ma,jno,hte,Dno,Gno,pte,Ono,Vno,ute,Xno,zno,Qno,oe,Gg,_te,Wno,Hno,AB,Uno,Jno,Yno,Og,bte,Kno,Zno,yB,eso,oso,rso,Vg,vte,tso,aso,LB,nso,sso,lso,Xg,Fte,iso,dso,xB,cso,fso,mso,zg,Tte,gso,hso,$B,pso,uso,_so,Qg,Mte,bso,vso,kB,Fso,Tso,Mso,Wg,Ete,Eso,Cso,SB,wso,Aso,yso,Hg,Cte,Lso,xso,RB,$so,kso,Sso,Ug,wte,Rso,Bso,BB,Pso,Iso,qso,Jg,Ate,Nso,jso,PB,Dso,Gso,Oso,Yg,yte,Vso,Xso,IB,zso,Qso,Wso,Kg,Lte,Hso,Uso,qB,Jso,Yso,Kso,Zg,xte,Zso,elo,NB,olo,rlo,tlo,eh,$te,alo,nlo,jB,slo,llo,ilo,oh,kte,dlo,clo,DB,flo,mlo,glo,rh,Ste,hlo,plo,GB,ulo,_lo,blo,th,Rte,vlo,Flo,OB,Tlo,Mlo,Elo,ah,Bte,Clo,wlo,VB,Alo,ylo,Llo,nh,Pte,xlo,$lo,XB,klo,Slo,Rlo,sh,Ite,Blo,Plo,zB,Ilo,qlo,Nlo,lh,qte,jlo,Dlo,QB,Glo,Olo,Vlo,ih,Nte,Xlo,zlo,WB,Qlo,Wlo,Hlo,dh,jte,Ulo,Jlo,HB,Ylo,Klo,Zlo,ch,Dte,eio,oio,UB,rio,tio,aio,fh,Gte,nio,sio,JB,lio,iio,dio,mh,cio,gh,fio,hh,Hw,mio,Ote,gio,UBe,hi,ph,Vte,Uw,hio,Xte,pio,JBe,yo,Jw,uio,Yw,_io,YB,bio,vio,Fio,Kw,Tio,zte,Mio,Eio,Cio,We,Zw,wio,Qte,Aio,yio,pi,Lio,Wte,xio,$io,Hte,kio,Sio,Rio,be,uh,Ute,Bio,Pio,KB,Iio,qio,Nio,_h,Jte,jio,Dio,ZB,Gio,Oio,Vio,bh,Yte,Xio,zio,eP,Qio,Wio,Hio,vh,Kte,Uio,Jio,oP,Yio,Kio,Zio,Fh,Zte,edo,odo,rP,rdo,tdo,ado,Th,eae,ndo,sdo,tP,ldo,ido,ddo,Mh,oae,cdo,fdo,aP,mdo,gdo,hdo,Eh,rae,pdo,udo,nP,_do,bdo,vdo,Ch,tae,Fdo,Tdo,sP,Mdo,Edo,Cdo,wh,aae,wdo,Ado,lP,ydo,Ldo,xdo,Ah,nae,$do,kdo,iP,Sdo,Rdo,Bdo,yh,sae,Pdo,Ido,dP,qdo,Ndo,jdo,Lh,lae,Ddo,Gdo,cP,Odo,Vdo,Xdo,xh,iae,zdo,Qdo,fP,Wdo,Hdo,Udo,$h,dae,Jdo,Ydo,mP,Kdo,Zdo,eco,kh,oco,Sh,rco,Rh,eA,tco,cae,aco,YBe,ui,Bh,fae,oA,nco,mae,sco,KBe,Lo,rA,lco,_i,ico,gP,dco,cco,hP,fco,mco,gco,tA,hco,gae,pco,uco,_co,Zr,aA,bco,hae,vco,Fco,bi,Tco,pae,Mco,Eco,pP,Cco,wco,Aco,Ph,yco,He,nA,Lco,uae,xco,$co,Ea,kco,_ae,Sco,Rco,bae,Bco,Pco,vae,Ico,qco,Nco,x,Ih,Fae,jco,Dco,uP,Gco,Oco,Vco,qh,Tae,Xco,zco,_P,Qco,Wco,Hco,Nh,Mae,Uco,Jco,bP,Yco,Kco,Zco,jh,Eae,efo,ofo,vP,rfo,tfo,afo,Dh,Cae,nfo,sfo,FP,lfo,ifo,dfo,Gh,wae,cfo,ffo,TP,mfo,gfo,hfo,Oh,Aae,pfo,ufo,MP,_fo,bfo,vfo,Vh,yae,Ffo,Tfo,EP,Mfo,Efo,Cfo,Xh,Lae,wfo,Afo,CP,yfo,Lfo,xfo,zh,xae,$fo,kfo,wP,Sfo,Rfo,Bfo,Qh,$ae,Pfo,Ifo,AP,qfo,Nfo,jfo,Wh,kae,Dfo,Gfo,yP,Ofo,Vfo,Xfo,Hh,Sae,zfo,Qfo,LP,Wfo,Hfo,Ufo,Uh,Rae,Jfo,Yfo,xP,Kfo,Zfo,emo,Jh,Bae,omo,rmo,$P,tmo,amo,nmo,Yh,Pae,smo,lmo,kP,imo,dmo,cmo,Kh,Iae,fmo,mmo,SP,gmo,hmo,pmo,Zh,qae,umo,_mo,RP,bmo,vmo,Fmo,ep,Nae,Tmo,Mmo,BP,Emo,Cmo,wmo,op,jae,Amo,ymo,PP,Lmo,xmo,$mo,rp,Dae,kmo,Smo,IP,Rmo,Bmo,Pmo,tp,Gae,Imo,qmo,qP,Nmo,jmo,Dmo,ap,Oae,Gmo,Omo,NP,Vmo,Xmo,zmo,np,Vae,Qmo,Wmo,jP,Hmo,Umo,Jmo,sp,Xae,Ymo,Kmo,DP,Zmo,ego,ogo,lp,zae,rgo,tgo,GP,ago,ngo,sgo,ip,Qae,lgo,igo,OP,dgo,cgo,fgo,dp,Wae,mgo,ggo,VP,hgo,pgo,ugo,cp,Hae,_go,bgo,XP,vgo,Fgo,Tgo,fp,Uae,Mgo,Ego,zP,Cgo,wgo,Ago,xs,Jae,ygo,Lgo,QP,xgo,$go,WP,kgo,Sgo,Rgo,mp,Yae,Bgo,Pgo,HP,Igo,qgo,Ngo,gp,Kae,jgo,Dgo,UP,Ggo,Ogo,Vgo,hp,Zae,Xgo,zgo,JP,Qgo,Wgo,Hgo,pp,ene,Ugo,Jgo,YP,Ygo,Kgo,Zgo,up,one,eho,oho,KP,rho,tho,aho,_p,rne,nho,sho,ZP,lho,iho,dho,bp,tne,cho,fho,eI,mho,gho,hho,vp,ane,pho,uho,oI,_ho,bho,vho,Fp,nne,Fho,Tho,rI,Mho,Eho,Cho,Tp,sne,who,Aho,tI,yho,Lho,xho,Mp,lne,$ho,kho,aI,Sho,Rho,Bho,Ep,ine,Pho,Iho,nI,qho,Nho,jho,Cp,dne,Dho,Gho,sI,Oho,Vho,Xho,wp,cne,zho,Qho,lI,Who,Hho,Uho,Ap,fne,Jho,Yho,iI,Kho,Zho,epo,yp,mne,opo,rpo,dI,tpo,apo,npo,Lp,gne,spo,lpo,cI,ipo,dpo,cpo,xp,hne,fpo,mpo,fI,gpo,hpo,ppo,$p,pne,upo,_po,mI,bpo,vpo,Fpo,kp,une,Tpo,Mpo,gI,Epo,Cpo,wpo,Sp,_ne,Apo,ypo,hI,Lpo,xpo,$po,Rp,bne,kpo,Spo,pI,Rpo,Bpo,Ppo,Bp,vne,Ipo,qpo,uI,Npo,jpo,Dpo,Pp,Fne,Gpo,Opo,_I,Vpo,Xpo,zpo,Ip,Tne,Qpo,Wpo,bI,Hpo,Upo,Jpo,qp,Mne,Ypo,Kpo,vI,Zpo,euo,ouo,Np,Ene,ruo,tuo,FI,auo,nuo,suo,jp,Cne,luo,iuo,TI,duo,cuo,fuo,Dp,wne,muo,guo,MI,huo,puo,uuo,Gp,Ane,_uo,buo,EI,vuo,Fuo,Tuo,Op,yne,Muo,Euo,CI,Cuo,wuo,Auo,Vp,Lne,yuo,Luo,wI,xuo,$uo,kuo,Xp,xne,Suo,Ruo,AI,Buo,Puo,Iuo,zp,$ne,quo,Nuo,yI,juo,Duo,Guo,Qp,kne,Ouo,Vuo,LI,Xuo,zuo,Quo,Wp,Sne,Wuo,Huo,xI,Uuo,Juo,Yuo,Hp,Rne,Kuo,Zuo,$I,e_o,o_o,r_o,Up,Bne,t_o,a_o,kI,n_o,s_o,l_o,Jp,Pne,i_o,d_o,SI,c_o,f_o,m_o,Yp,Ine,g_o,h_o,RI,p_o,u_o,__o,Kp,qne,b_o,v_o,BI,F_o,T_o,M_o,Zp,Nne,E_o,C_o,PI,w_o,A_o,y_o,eu,jne,L_o,x_o,II,$_o,k_o,S_o,ou,Dne,R_o,B_o,qI,P_o,I_o,q_o,ru,Gne,N_o,j_o,NI,D_o,G_o,O_o,tu,One,V_o,X_o,jI,z_o,Q_o,W_o,au,Vne,H_o,U_o,DI,J_o,Y_o,K_o,nu,Xne,Z_o,e0o,GI,o0o,r0o,t0o,su,zne,a0o,n0o,OI,s0o,l0o,i0o,lu,Qne,d0o,c0o,VI,f0o,m0o,g0o,iu,Wne,h0o,p0o,XI,u0o,_0o,b0o,du,Hne,v0o,F0o,zI,T0o,M0o,E0o,cu,Une,C0o,w0o,QI,A0o,y0o,L0o,fu,Jne,x0o,$0o,WI,k0o,S0o,R0o,mu,Yne,B0o,P0o,HI,I0o,q0o,N0o,gu,Kne,j0o,D0o,UI,G0o,O0o,V0o,hu,Zne,X0o,z0o,JI,Q0o,W0o,H0o,pu,ese,U0o,J0o,YI,Y0o,K0o,Z0o,uu,ose,e1o,o1o,KI,r1o,t1o,a1o,_u,rse,n1o,s1o,ZI,l1o,i1o,d1o,bu,tse,c1o,f1o,eq,m1o,g1o,h1o,vu,ase,p1o,u1o,oq,_1o,b1o,v1o,Fu,nse,F1o,T1o,rq,M1o,E1o,C1o,Tu,sse,w1o,A1o,tq,y1o,L1o,x1o,Mu,lse,$1o,k1o,aq,S1o,R1o,B1o,Eu,P1o,ise,I1o,q1o,dse,N1o,j1o,Cu,ZBe,vi,wu,cse,sA,D1o,fse,G1o,ePe,xo,lA,O1o,Fi,V1o,nq,X1o,z1o,sq,Q1o,W1o,H1o,iA,U1o,mse,J1o,Y1o,K1o,et,dA,Z1o,gse,ebo,obo,Ti,rbo,hse,tbo,abo,lq,nbo,sbo,lbo,Au,ibo,Ue,cA,dbo,pse,cbo,fbo,Ca,mbo,use,gbo,hbo,_se,pbo,ubo,bse,_bo,bbo,vbo,O,yu,vse,Fbo,Tbo,iq,Mbo,Ebo,Cbo,Lu,Fse,wbo,Abo,dq,ybo,Lbo,xbo,xu,Tse,$bo,kbo,cq,Sbo,Rbo,Bbo,$u,Mse,Pbo,Ibo,fq,qbo,Nbo,jbo,ku,Ese,Dbo,Gbo,mq,Obo,Vbo,Xbo,Su,Cse,zbo,Qbo,gq,Wbo,Hbo,Ubo,Ru,wse,Jbo,Ybo,hq,Kbo,Zbo,e2o,Bu,Ase,o2o,r2o,pq,t2o,a2o,n2o,Pu,yse,s2o,l2o,uq,i2o,d2o,c2o,Iu,Lse,f2o,m2o,_q,g2o,h2o,p2o,qu,xse,u2o,_2o,bq,b2o,v2o,F2o,Nu,$se,T2o,M2o,vq,E2o,C2o,w2o,ju,kse,A2o,y2o,Fq,L2o,x2o,$2o,Du,Sse,k2o,S2o,Tq,R2o,B2o,P2o,Gu,Rse,I2o,q2o,Mq,N2o,j2o,D2o,Ou,Bse,G2o,O2o,Eq,V2o,X2o,z2o,Vu,Pse,Q2o,W2o,Cq,H2o,U2o,J2o,Xu,Ise,Y2o,K2o,wq,Z2o,evo,ovo,zu,qse,rvo,tvo,Aq,avo,nvo,svo,Qu,Nse,lvo,ivo,yq,dvo,cvo,fvo,Wu,jse,mvo,gvo,Lq,hvo,pvo,uvo,Hu,Dse,_vo,bvo,xq,vvo,Fvo,Tvo,Uu,Gse,Mvo,Evo,$q,Cvo,wvo,Avo,Ju,Ose,yvo,Lvo,kq,xvo,$vo,kvo,Yu,Vse,Svo,Rvo,Sq,Bvo,Pvo,Ivo,Ku,Xse,qvo,Nvo,Rq,jvo,Dvo,Gvo,Zu,zse,Ovo,Vvo,Bq,Xvo,zvo,Qvo,e_,Qse,Wvo,Hvo,Pq,Uvo,Jvo,Yvo,o_,Wse,Kvo,Zvo,Iq,eFo,oFo,rFo,r_,Hse,tFo,aFo,qq,nFo,sFo,lFo,t_,Use,iFo,dFo,Nq,cFo,fFo,mFo,a_,Jse,gFo,hFo,jq,pFo,uFo,_Fo,n_,Yse,bFo,vFo,Dq,FFo,TFo,MFo,s_,Kse,EFo,CFo,Gq,wFo,AFo,yFo,l_,Zse,LFo,xFo,Oq,$Fo,kFo,SFo,i_,ele,RFo,BFo,Vq,PFo,IFo,qFo,d_,ole,NFo,jFo,Xq,DFo,GFo,OFo,c_,rle,VFo,XFo,zq,zFo,QFo,WFo,f_,tle,HFo,UFo,Qq,JFo,YFo,KFo,m_,ZFo,ale,e6o,o6o,nle,r6o,t6o,g_,oPe,Mi,h_,sle,fA,a6o,lle,n6o,rPe,$o,mA,s6o,Ei,l6o,Wq,i6o,d6o,Hq,c6o,f6o,m6o,gA,g6o,ile,h6o,p6o,u6o,ot,hA,_6o,dle,b6o,v6o,Ci,F6o,cle,T6o,M6o,Uq,E6o,C6o,w6o,p_,A6o,Je,pA,y6o,fle,L6o,x6o,wa,$6o,mle,k6o,S6o,gle,R6o,B6o,hle,P6o,I6o,q6o,z,u_,ple,N6o,j6o,Jq,D6o,G6o,O6o,__,ule,V6o,X6o,Yq,z6o,Q6o,W6o,b_,_le,H6o,U6o,Kq,J6o,Y6o,K6o,v_,ble,Z6o,eTo,Zq,oTo,rTo,tTo,F_,vle,aTo,nTo,eN,sTo,lTo,iTo,T_,Fle,dTo,cTo,oN,fTo,mTo,gTo,M_,Tle,hTo,pTo,rN,uTo,_To,bTo,E_,Mle,vTo,FTo,tN,TTo,MTo,ETo,C_,Ele,CTo,wTo,aN,ATo,yTo,LTo,w_,Cle,xTo,$To,nN,kTo,STo,RTo,A_,wle,BTo,PTo,sN,ITo,qTo,NTo,y_,Ale,jTo,DTo,lN,GTo,OTo,VTo,L_,yle,XTo,zTo,iN,QTo,WTo,HTo,x_,Lle,UTo,JTo,dN,YTo,KTo,ZTo,$_,xle,e7o,o7o,cN,r7o,t7o,a7o,k_,$le,n7o,s7o,fN,l7o,i7o,d7o,S_,kle,c7o,f7o,mN,m7o,g7o,h7o,R_,Sle,p7o,u7o,gN,_7o,b7o,v7o,B_,Rle,F7o,T7o,hN,M7o,E7o,C7o,P_,Ble,w7o,A7o,pN,y7o,L7o,x7o,I_,Ple,$7o,k7o,uN,S7o,R7o,B7o,q_,Ile,P7o,I7o,_N,q7o,N7o,j7o,N_,qle,D7o,G7o,bN,O7o,V7o,X7o,j_,Nle,z7o,Q7o,vN,W7o,H7o,U7o,D_,jle,J7o,Y7o,FN,K7o,Z7o,eMo,G_,Dle,oMo,rMo,TN,tMo,aMo,nMo,O_,Gle,sMo,lMo,MN,iMo,dMo,cMo,V_,Ole,fMo,mMo,EN,gMo,hMo,pMo,X_,Vle,uMo,_Mo,CN,bMo,vMo,FMo,z_,Xle,TMo,MMo,wN,EMo,CMo,wMo,Q_,zle,AMo,yMo,AN,LMo,xMo,$Mo,W_,Qle,kMo,SMo,yN,RMo,BMo,PMo,H_,Wle,IMo,qMo,LN,NMo,jMo,DMo,U_,Hle,GMo,OMo,xN,VMo,XMo,zMo,J_,Ule,QMo,WMo,$N,HMo,UMo,JMo,Y_,YMo,Jle,KMo,ZMo,Yle,e4o,o4o,K_,tPe,wi,Z_,Kle,uA,r4o,Zle,t4o,aPe,ko,_A,a4o,Ai,n4o,kN,s4o,l4o,SN,i4o,d4o,c4o,bA,f4o,eie,m4o,g4o,h4o,rt,vA,p4o,oie,u4o,_4o,yi,b4o,rie,v4o,F4o,RN,T4o,M4o,E4o,e0,C4o,Ye,FA,w4o,tie,A4o,y4o,Aa,L4o,aie,x4o,$4o,nie,k4o,S4o,sie,R4o,B4o,P4o,Q,o0,lie,I4o,q4o,BN,N4o,j4o,D4o,r0,iie,G4o,O4o,PN,V4o,X4o,z4o,t0,die,Q4o,W4o,IN,H4o,U4o,J4o,a0,cie,Y4o,K4o,qN,Z4o,eEo,oEo,n0,fie,rEo,tEo,NN,aEo,nEo,sEo,s0,mie,lEo,iEo,jN,dEo,cEo,fEo,l0,gie,mEo,gEo,DN,hEo,pEo,uEo,i0,hie,_Eo,bEo,GN,vEo,FEo,TEo,d0,pie,MEo,EEo,ON,CEo,wEo,AEo,c0,uie,yEo,LEo,VN,xEo,$Eo,kEo,f0,_ie,SEo,REo,XN,BEo,PEo,IEo,m0,bie,qEo,NEo,zN,jEo,DEo,GEo,g0,vie,OEo,VEo,QN,XEo,zEo,QEo,h0,Fie,WEo,HEo,WN,UEo,JEo,YEo,p0,Tie,KEo,ZEo,HN,e5o,o5o,r5o,u0,Mie,t5o,a5o,UN,n5o,s5o,l5o,_0,Eie,i5o,d5o,JN,c5o,f5o,m5o,b0,Cie,g5o,h5o,YN,p5o,u5o,_5o,v0,wie,b5o,v5o,KN,F5o,T5o,M5o,F0,Aie,E5o,C5o,ZN,w5o,A5o,y5o,T0,yie,L5o,x5o,ej,$5o,k5o,S5o,M0,Lie,R5o,B5o,oj,P5o,I5o,q5o,E0,xie,N5o,j5o,rj,D5o,G5o,O5o,C0,$ie,V5o,X5o,tj,z5o,Q5o,W5o,w0,kie,H5o,U5o,aj,J5o,Y5o,K5o,A0,Sie,Z5o,eCo,nj,oCo,rCo,tCo,y0,Rie,aCo,nCo,sj,sCo,lCo,iCo,L0,Bie,dCo,cCo,lj,fCo,mCo,gCo,x0,Pie,hCo,pCo,ij,uCo,_Co,bCo,$0,Iie,vCo,FCo,dj,TCo,MCo,ECo,k0,qie,CCo,wCo,Nie,ACo,yCo,LCo,S0,jie,xCo,$Co,cj,kCo,SCo,RCo,R0,Die,BCo,PCo,fj,ICo,qCo,NCo,B0,Gie,jCo,DCo,mj,GCo,OCo,VCo,P0,Oie,XCo,zCo,gj,QCo,WCo,HCo,I0,UCo,Vie,JCo,YCo,Xie,KCo,ZCo,q0,nPe,Li,N0,zie,TA,e3o,Qie,o3o,sPe,So,MA,r3o,xi,t3o,hj,a3o,n3o,pj,s3o,l3o,i3o,EA,d3o,Wie,c3o,f3o,m3o,tt,CA,g3o,Hie,h3o,p3o,$i,u3o,Uie,_3o,b3o,uj,v3o,F3o,T3o,j0,M3o,Ke,wA,E3o,Jie,C3o,w3o,ya,A3o,Yie,y3o,L3o,Kie,x3o,$3o,Zie,k3o,S3o,R3o,he,D0,ede,B3o,P3o,_j,I3o,q3o,N3o,G0,ode,j3o,D3o,bj,G3o,O3o,V3o,O0,rde,X3o,z3o,vj,Q3o,W3o,H3o,V0,tde,U3o,J3o,Fj,Y3o,K3o,Z3o,X0,ade,ewo,owo,Tj,rwo,two,awo,z0,nde,nwo,swo,Mj,lwo,iwo,dwo,Q0,sde,cwo,fwo,Ej,mwo,gwo,hwo,W0,lde,pwo,uwo,Cj,_wo,bwo,vwo,H0,ide,Fwo,Two,wj,Mwo,Ewo,Cwo,U0,dde,wwo,Awo,Aj,ywo,Lwo,xwo,J0,cde,$wo,kwo,yj,Swo,Rwo,Bwo,Y0,fde,Pwo,Iwo,Lj,qwo,Nwo,jwo,K0,mde,Dwo,Gwo,xj,Owo,Vwo,Xwo,Z0,gde,zwo,Qwo,$j,Wwo,Hwo,Uwo,e1,hde,Jwo,Ywo,kj,Kwo,Zwo,eAo,o1,pde,oAo,rAo,Sj,tAo,aAo,nAo,r1,ude,sAo,lAo,Rj,iAo,dAo,cAo,t1,fAo,_de,mAo,gAo,bde,hAo,pAo,a1,lPe,ki,n1,vde,AA,uAo,Fde,_Ao,iPe,Ro,yA,bAo,Si,vAo,Bj,FAo,TAo,Pj,MAo,EAo,CAo,LA,wAo,Tde,AAo,yAo,LAo,at,xA,xAo,Mde,$Ao,kAo,Ri,SAo,Ede,RAo,BAo,Ij,PAo,IAo,qAo,s1,NAo,Ze,$A,jAo,Cde,DAo,GAo,La,OAo,wde,VAo,XAo,Ade,zAo,QAo,yde,WAo,HAo,UAo,q,l1,Lde,JAo,YAo,qj,KAo,ZAo,eyo,i1,xde,oyo,ryo,Nj,tyo,ayo,nyo,d1,$de,syo,lyo,jj,iyo,dyo,cyo,c1,kde,fyo,myo,Dj,gyo,hyo,pyo,f1,Sde,uyo,_yo,Gj,byo,vyo,Fyo,m1,Rde,Tyo,Myo,Oj,Eyo,Cyo,wyo,g1,Bde,Ayo,yyo,Vj,Lyo,xyo,$yo,h1,Pde,kyo,Syo,Xj,Ryo,Byo,Pyo,p1,Ide,Iyo,qyo,zj,Nyo,jyo,Dyo,u1,qde,Gyo,Oyo,Qj,Vyo,Xyo,zyo,_1,Nde,Qyo,Wyo,Wj,Hyo,Uyo,Jyo,b1,jde,Yyo,Kyo,Hj,Zyo,eLo,oLo,v1,Dde,rLo,tLo,Uj,aLo,nLo,sLo,F1,Gde,lLo,iLo,Jj,dLo,cLo,fLo,T1,Ode,mLo,gLo,Yj,hLo,pLo,uLo,M1,Vde,_Lo,bLo,Kj,vLo,FLo,TLo,E1,Xde,MLo,ELo,Zj,CLo,wLo,ALo,C1,zde,yLo,LLo,eD,xLo,$Lo,kLo,w1,Qde,SLo,RLo,oD,BLo,PLo,ILo,A1,Wde,qLo,NLo,rD,jLo,DLo,GLo,y1,Hde,OLo,VLo,tD,XLo,zLo,QLo,L1,Ude,WLo,HLo,aD,ULo,JLo,YLo,x1,Jde,KLo,ZLo,nD,e8o,o8o,r8o,$1,Yde,t8o,a8o,sD,n8o,s8o,l8o,k1,Kde,i8o,d8o,lD,c8o,f8o,m8o,S1,Zde,g8o,h8o,iD,p8o,u8o,_8o,R1,ece,b8o,v8o,dD,F8o,T8o,M8o,B1,oce,E8o,C8o,cD,w8o,A8o,y8o,P1,rce,L8o,x8o,fD,$8o,k8o,S8o,I1,tce,R8o,B8o,mD,P8o,I8o,q8o,q1,ace,N8o,j8o,gD,D8o,G8o,O8o,N1,nce,V8o,X8o,hD,z8o,Q8o,W8o,j1,sce,H8o,U8o,pD,J8o,Y8o,K8o,D1,lce,Z8o,exo,uD,oxo,rxo,txo,G1,ice,axo,nxo,_D,sxo,lxo,ixo,O1,dce,dxo,cxo,bD,fxo,mxo,gxo,V1,cce,hxo,pxo,vD,uxo,_xo,bxo,X1,fce,vxo,Fxo,FD,Txo,Mxo,Exo,z1,mce,Cxo,wxo,TD,Axo,yxo,Lxo,Q1,gce,xxo,$xo,MD,kxo,Sxo,Rxo,W1,hce,Bxo,Pxo,ED,Ixo,qxo,Nxo,H1,pce,jxo,Dxo,CD,Gxo,Oxo,Vxo,U1,uce,Xxo,zxo,wD,Qxo,Wxo,Hxo,J1,_ce,Uxo,Jxo,AD,Yxo,Kxo,Zxo,Y1,bce,e9o,o9o,yD,r9o,t9o,a9o,K1,vce,n9o,s9o,LD,l9o,i9o,d9o,Z1,Fce,c9o,f9o,xD,m9o,g9o,h9o,eb,Tce,p9o,u9o,$D,_9o,b9o,v9o,ob,F9o,Mce,T9o,M9o,Ece,E9o,C9o,rb,dPe,Bi,tb,Cce,kA,w9o,wce,A9o,cPe,Bo,SA,y9o,Pi,L9o,kD,x9o,$9o,SD,k9o,S9o,R9o,RA,B9o,Ace,P9o,I9o,q9o,nt,BA,N9o,yce,j9o,D9o,Ii,G9o,Lce,O9o,V9o,RD,X9o,z9o,Q9o,ab,W9o,eo,PA,H9o,xce,U9o,J9o,xa,Y9o,$ce,K9o,Z9o,kce,e$o,o$o,Sce,r$o,t$o,a$o,Y,nb,Rce,n$o,s$o,BD,l$o,i$o,d$o,sb,Bce,c$o,f$o,PD,m$o,g$o,h$o,lb,Pce,p$o,u$o,ID,_$o,b$o,v$o,ib,Ice,F$o,T$o,qD,M$o,E$o,C$o,db,qce,w$o,A$o,ND,y$o,L$o,x$o,cb,Nce,$$o,k$o,jD,S$o,R$o,B$o,fb,jce,P$o,I$o,DD,q$o,N$o,j$o,mb,Dce,D$o,G$o,GD,O$o,V$o,X$o,gb,Gce,z$o,Q$o,OD,W$o,H$o,U$o,hb,Oce,J$o,Y$o,VD,K$o,Z$o,eko,pb,Vce,oko,rko,XD,tko,ako,nko,ub,Xce,sko,lko,zD,iko,dko,cko,_b,zce,fko,mko,QD,gko,hko,pko,bb,Qce,uko,_ko,WD,bko,vko,Fko,vb,Wce,Tko,Mko,HD,Eko,Cko,wko,Fb,Hce,Ako,yko,UD,Lko,xko,$ko,Tb,Uce,kko,Sko,JD,Rko,Bko,Pko,Mb,Jce,Iko,qko,YD,Nko,jko,Dko,Eb,Yce,Gko,Oko,KD,Vko,Xko,zko,Cb,Kce,Qko,Wko,ZD,Hko,Uko,Jko,wb,Zce,Yko,Kko,eG,Zko,eSo,oSo,Ab,efe,rSo,tSo,oG,aSo,nSo,sSo,yb,ofe,lSo,iSo,rG,dSo,cSo,fSo,Lb,rfe,mSo,gSo,tG,hSo,pSo,uSo,xb,tfe,_So,bSo,aG,vSo,FSo,TSo,$b,afe,MSo,ESo,nG,CSo,wSo,ASo,kb,nfe,ySo,LSo,sG,xSo,$So,kSo,Sb,sfe,SSo,RSo,lG,BSo,PSo,ISo,Rb,qSo,lfe,NSo,jSo,ife,DSo,GSo,Bb,fPe,qi,Pb,dfe,IA,OSo,cfe,VSo,mPe,Po,qA,XSo,Ni,zSo,iG,QSo,WSo,dG,HSo,USo,JSo,NA,YSo,ffe,KSo,ZSo,eRo,st,jA,oRo,mfe,rRo,tRo,ji,aRo,gfe,nRo,sRo,cG,lRo,iRo,dRo,Ib,cRo,oo,DA,fRo,hfe,mRo,gRo,$a,hRo,pfe,pRo,uRo,ufe,_Ro,bRo,_fe,vRo,FRo,TRo,Ur,qb,bfe,MRo,ERo,fG,CRo,wRo,ARo,Nb,vfe,yRo,LRo,mG,xRo,$Ro,kRo,jb,Ffe,SRo,RRo,gG,BRo,PRo,IRo,Db,Tfe,qRo,NRo,hG,jRo,DRo,GRo,Gb,Mfe,ORo,VRo,pG,XRo,zRo,QRo,Ob,WRo,Efe,HRo,URo,Cfe,JRo,YRo,Vb,gPe,Di,Xb,wfe,GA,KRo,Afe,ZRo,hPe,Io,OA,eBo,Gi,oBo,uG,rBo,tBo,_G,aBo,nBo,sBo,VA,lBo,yfe,iBo,dBo,cBo,lt,XA,fBo,Lfe,mBo,gBo,Oi,hBo,xfe,pBo,uBo,bG,_Bo,bBo,vBo,zb,FBo,ro,zA,TBo,$fe,MBo,EBo,ka,CBo,kfe,wBo,ABo,Sfe,yBo,LBo,Rfe,xBo,$Bo,kBo,W,Qb,Bfe,SBo,RBo,vG,BBo,PBo,IBo,Wb,Pfe,qBo,NBo,FG,jBo,DBo,GBo,Hb,Ife,OBo,VBo,TG,XBo,zBo,QBo,Ub,qfe,WBo,HBo,MG,UBo,JBo,YBo,Jb,Nfe,KBo,ZBo,EG,ePo,oPo,rPo,Yb,jfe,tPo,aPo,CG,nPo,sPo,lPo,Kb,Dfe,iPo,dPo,wG,cPo,fPo,mPo,Zb,Gfe,gPo,hPo,AG,pPo,uPo,_Po,e2,Ofe,bPo,vPo,yG,FPo,TPo,MPo,o2,Vfe,EPo,CPo,LG,wPo,APo,yPo,r2,Xfe,LPo,xPo,xG,$Po,kPo,SPo,t2,zfe,RPo,BPo,$G,PPo,IPo,qPo,a2,Qfe,NPo,jPo,kG,DPo,GPo,OPo,n2,Wfe,VPo,XPo,SG,zPo,QPo,WPo,s2,Hfe,HPo,UPo,RG,JPo,YPo,KPo,l2,Ufe,ZPo,eIo,BG,oIo,rIo,tIo,i2,Jfe,aIo,nIo,PG,sIo,lIo,iIo,d2,Yfe,dIo,cIo,IG,fIo,mIo,gIo,c2,Kfe,hIo,pIo,qG,uIo,_Io,bIo,f2,Zfe,vIo,FIo,NG,TIo,MIo,EIo,m2,eme,CIo,wIo,jG,AIo,yIo,LIo,g2,ome,xIo,$Io,DG,kIo,SIo,RIo,h2,rme,BIo,PIo,GG,IIo,qIo,NIo,p2,tme,jIo,DIo,OG,GIo,OIo,VIo,u2,ame,XIo,zIo,VG,QIo,WIo,HIo,_2,nme,UIo,JIo,XG,YIo,KIo,ZIo,b2,sme,eqo,oqo,zG,rqo,tqo,aqo,v2,lme,nqo,sqo,QG,lqo,iqo,dqo,F2,ime,cqo,fqo,WG,mqo,gqo,hqo,T2,dme,pqo,uqo,HG,_qo,bqo,vqo,M2,cme,Fqo,Tqo,UG,Mqo,Eqo,Cqo,E2,fme,wqo,Aqo,JG,yqo,Lqo,xqo,C2,mme,$qo,kqo,YG,Sqo,Rqo,Bqo,w2,gme,Pqo,Iqo,KG,qqo,Nqo,jqo,A2,Dqo,hme,Gqo,Oqo,pme,Vqo,Xqo,y2,pPe,Vi,L2,ume,QA,zqo,_me,Qqo,uPe,qo,WA,Wqo,Xi,Hqo,ZG,Uqo,Jqo,eO,Yqo,Kqo,Zqo,HA,eNo,bme,oNo,rNo,tNo,it,UA,aNo,vme,nNo,sNo,zi,lNo,Fme,iNo,dNo,oO,cNo,fNo,mNo,x2,gNo,to,JA,hNo,Tme,pNo,uNo,Sa,_No,Mme,bNo,vNo,Eme,FNo,TNo,Cme,MNo,ENo,CNo,G,$2,wme,wNo,ANo,rO,yNo,LNo,xNo,k2,Ame,$No,kNo,tO,SNo,RNo,BNo,S2,yme,PNo,INo,aO,qNo,NNo,jNo,R2,Lme,DNo,GNo,nO,ONo,VNo,XNo,B2,xme,zNo,QNo,sO,WNo,HNo,UNo,P2,$me,JNo,YNo,lO,KNo,ZNo,ejo,I2,kme,ojo,rjo,iO,tjo,ajo,njo,q2,Sme,sjo,ljo,dO,ijo,djo,cjo,N2,Rme,fjo,mjo,cO,gjo,hjo,pjo,j2,Bme,ujo,_jo,fO,bjo,vjo,Fjo,D2,Pme,Tjo,Mjo,mO,Ejo,Cjo,wjo,G2,Ime,Ajo,yjo,gO,Ljo,xjo,$jo,O2,qme,kjo,Sjo,hO,Rjo,Bjo,Pjo,V2,Nme,Ijo,qjo,pO,Njo,jjo,Djo,X2,jme,Gjo,Ojo,uO,Vjo,Xjo,zjo,z2,Dme,Qjo,Wjo,_O,Hjo,Ujo,Jjo,Q2,Gme,Yjo,Kjo,bO,Zjo,eDo,oDo,W2,Ome,rDo,tDo,vO,aDo,nDo,sDo,H2,Vme,lDo,iDo,FO,dDo,cDo,fDo,U2,Xme,mDo,gDo,TO,hDo,pDo,uDo,J2,zme,_Do,bDo,MO,vDo,FDo,TDo,Y2,Qme,MDo,EDo,EO,CDo,wDo,ADo,K2,Wme,yDo,LDo,CO,xDo,$Do,kDo,Z2,Hme,SDo,RDo,wO,BDo,PDo,IDo,ev,Ume,qDo,NDo,AO,jDo,DDo,GDo,ov,Jme,ODo,VDo,yO,XDo,zDo,QDo,rv,Yme,WDo,HDo,LO,UDo,JDo,YDo,tv,Kme,KDo,ZDo,xO,eGo,oGo,rGo,av,Zme,tGo,aGo,$O,nGo,sGo,lGo,nv,ege,iGo,dGo,kO,cGo,fGo,mGo,sv,oge,gGo,hGo,SO,pGo,uGo,_Go,lv,rge,bGo,vGo,RO,FGo,TGo,MGo,iv,tge,EGo,CGo,BO,wGo,AGo,yGo,dv,age,LGo,xGo,PO,$Go,kGo,SGo,cv,nge,RGo,BGo,IO,PGo,IGo,qGo,fv,sge,NGo,jGo,qO,DGo,GGo,OGo,mv,lge,VGo,XGo,NO,zGo,QGo,WGo,gv,ige,HGo,UGo,jO,JGo,YGo,KGo,hv,dge,ZGo,eOo,DO,oOo,rOo,tOo,pv,cge,aOo,nOo,GO,sOo,lOo,iOo,uv,dOo,fge,cOo,fOo,mge,mOo,gOo,_v,_Pe,Qi,bv,gge,YA,hOo,hge,pOo,bPe,No,KA,uOo,Wi,_Oo,OO,bOo,vOo,VO,FOo,TOo,MOo,ZA,EOo,pge,COo,wOo,AOo,dt,ey,yOo,uge,LOo,xOo,Hi,$Oo,_ge,kOo,SOo,XO,ROo,BOo,POo,vv,IOo,ao,oy,qOo,bge,NOo,jOo,Ra,DOo,vge,GOo,OOo,Fge,VOo,XOo,Tge,zOo,QOo,WOo,Mge,Fv,Ege,HOo,UOo,zO,JOo,YOo,KOo,Tv,ZOo,Cge,eVo,oVo,wge,rVo,tVo,Mv,vPe,Ui,Ev,Age,ry,aVo,yge,nVo,FPe,jo,ty,sVo,Ji,lVo,QO,iVo,dVo,WO,cVo,fVo,mVo,ay,gVo,Lge,hVo,pVo,uVo,ct,ny,_Vo,xge,bVo,vVo,Yi,FVo,$ge,TVo,MVo,HO,EVo,CVo,wVo,Cv,AVo,no,sy,yVo,kge,LVo,xVo,Ba,$Vo,Sge,kVo,SVo,Rge,RVo,BVo,Bge,PVo,IVo,qVo,Fe,wv,Pge,NVo,jVo,UO,DVo,GVo,OVo,Av,Ige,VVo,XVo,JO,zVo,QVo,WVo,yv,qge,HVo,UVo,YO,JVo,YVo,KVo,$s,Nge,ZVo,eXo,KO,oXo,rXo,ZO,tXo,aXo,nXo,Lv,jge,sXo,lXo,eV,iXo,dXo,cXo,ft,Dge,fXo,mXo,oV,gXo,hXo,rV,pXo,uXo,tV,_Xo,bXo,vXo,xv,Gge,FXo,TXo,aV,MXo,EXo,CXo,$v,Oge,wXo,AXo,nV,yXo,LXo,xXo,kv,Vge,$Xo,kXo,sV,SXo,RXo,BXo,Sv,Xge,PXo,IXo,lV,qXo,NXo,jXo,Rv,zge,DXo,GXo,iV,OXo,VXo,XXo,Bv,Qge,zXo,QXo,dV,WXo,HXo,UXo,Pv,Wge,JXo,YXo,cV,KXo,ZXo,ezo,Iv,ozo,Hge,rzo,tzo,Uge,azo,nzo,qv,TPe,Ki,Nv,Jge,ly,szo,Yge,lzo,MPe,Do,iy,izo,Zi,dzo,fV,czo,fzo,mV,mzo,gzo,hzo,dy,pzo,Kge,uzo,_zo,bzo,mt,cy,vzo,Zge,Fzo,Tzo,ed,Mzo,ehe,Ezo,Czo,gV,wzo,Azo,yzo,jv,Lzo,so,fy,xzo,ohe,$zo,kzo,Pa,Szo,rhe,Rzo,Bzo,the,Pzo,Izo,ahe,qzo,Nzo,jzo,nhe,Dv,she,Dzo,Gzo,hV,Ozo,Vzo,Xzo,Gv,zzo,lhe,Qzo,Wzo,ihe,Hzo,Uzo,Ov,EPe,od,Vv,dhe,my,Jzo,che,Yzo,CPe,Go,gy,Kzo,rd,Zzo,pV,eQo,oQo,uV,rQo,tQo,aQo,hy,nQo,fhe,sQo,lQo,iQo,gt,py,dQo,mhe,cQo,fQo,td,mQo,ghe,gQo,hQo,_V,pQo,uQo,_Qo,Xv,bQo,lo,uy,vQo,hhe,FQo,TQo,Ia,MQo,phe,EQo,CQo,uhe,wQo,AQo,_he,yQo,LQo,xQo,Ne,zv,bhe,$Qo,kQo,bV,SQo,RQo,BQo,Qv,vhe,PQo,IQo,vV,qQo,NQo,jQo,Wv,Fhe,DQo,GQo,FV,OQo,VQo,XQo,Hv,The,zQo,QQo,TV,WQo,HQo,UQo,Uv,Mhe,JQo,YQo,MV,KQo,ZQo,eWo,Jv,Ehe,oWo,rWo,EV,tWo,aWo,nWo,Yv,Che,sWo,lWo,CV,iWo,dWo,cWo,Kv,whe,fWo,mWo,wV,gWo,hWo,pWo,Zv,uWo,Ahe,_Wo,bWo,yhe,vWo,FWo,eF,wPe,ad,oF,Lhe,_y,TWo,xhe,MWo,APe,Oo,by,EWo,nd,CWo,AV,wWo,AWo,yV,yWo,LWo,xWo,vy,$Wo,$he,kWo,SWo,RWo,ht,Fy,BWo,khe,PWo,IWo,sd,qWo,She,NWo,jWo,LV,DWo,GWo,OWo,rF,VWo,io,Ty,XWo,Rhe,zWo,QWo,qa,WWo,Bhe,HWo,UWo,Phe,JWo,YWo,Ihe,KWo,ZWo,eHo,Na,tF,qhe,oHo,rHo,xV,tHo,aHo,nHo,aF,Nhe,sHo,lHo,$V,iHo,dHo,cHo,nF,jhe,fHo,mHo,kV,gHo,hHo,pHo,sF,Dhe,uHo,_Ho,SV,bHo,vHo,FHo,lF,THo,Ghe,MHo,EHo,Ohe,CHo,wHo,iF,yPe,ld,dF,Vhe,My,AHo,Xhe,yHo,LPe,Vo,Ey,LHo,id,xHo,RV,$Ho,kHo,BV,SHo,RHo,BHo,Cy,PHo,zhe,IHo,qHo,NHo,pt,wy,jHo,Qhe,DHo,GHo,dd,OHo,Whe,VHo,XHo,PV,zHo,QHo,WHo,cF,HHo,co,Ay,UHo,Hhe,JHo,YHo,ja,KHo,Uhe,ZHo,eUo,Jhe,oUo,rUo,Yhe,tUo,aUo,nUo,je,fF,Khe,sUo,lUo,IV,iUo,dUo,cUo,mF,Zhe,fUo,mUo,qV,gUo,hUo,pUo,gF,epe,uUo,_Uo,NV,bUo,vUo,FUo,hF,ope,TUo,MUo,jV,EUo,CUo,wUo,pF,rpe,AUo,yUo,DV,LUo,xUo,$Uo,uF,tpe,kUo,SUo,GV,RUo,BUo,PUo,_F,ape,IUo,qUo,OV,NUo,jUo,DUo,bF,npe,GUo,OUo,VV,VUo,XUo,zUo,vF,QUo,spe,WUo,HUo,lpe,UUo,JUo,FF,xPe,cd,TF,ipe,yy,YUo,dpe,KUo,$Pe,Xo,Ly,ZUo,fd,eJo,XV,oJo,rJo,zV,tJo,aJo,nJo,xy,sJo,cpe,lJo,iJo,dJo,ut,$y,cJo,fpe,fJo,mJo,md,gJo,mpe,hJo,pJo,QV,uJo,_Jo,bJo,MF,vJo,fo,ky,FJo,gpe,TJo,MJo,Da,EJo,hpe,CJo,wJo,ppe,AJo,yJo,upe,LJo,xJo,$Jo,Sy,EF,_pe,kJo,SJo,WV,RJo,BJo,PJo,CF,bpe,IJo,qJo,HV,NJo,jJo,DJo,wF,GJo,vpe,OJo,VJo,Fpe,XJo,zJo,AF,kPe,gd,yF,Tpe,Ry,QJo,Mpe,WJo,SPe,zo,By,HJo,hd,UJo,UV,JJo,YJo,JV,KJo,ZJo,eYo,Py,oYo,Epe,rYo,tYo,aYo,_t,Iy,nYo,Cpe,sYo,lYo,pd,iYo,wpe,dYo,cYo,YV,fYo,mYo,gYo,LF,hYo,mo,qy,pYo,Ape,uYo,_Yo,Ga,bYo,ype,vYo,FYo,Lpe,TYo,MYo,xpe,EYo,CYo,wYo,Oa,xF,$pe,AYo,yYo,KV,LYo,xYo,$Yo,$F,kpe,kYo,SYo,ZV,RYo,BYo,PYo,kF,Spe,IYo,qYo,eX,NYo,jYo,DYo,SF,Rpe,GYo,OYo,oX,VYo,XYo,zYo,RF,QYo,Bpe,WYo,HYo,Ppe,UYo,JYo,BF,RPe,ud,PF,Ipe,Ny,YYo,qpe,KYo,BPe,Qo,jy,ZYo,_d,eKo,rX,oKo,rKo,tX,tKo,aKo,nKo,Dy,sKo,Npe,lKo,iKo,dKo,bt,Gy,cKo,jpe,fKo,mKo,bd,gKo,Dpe,hKo,pKo,aX,uKo,_Ko,bKo,IF,vKo,go,Oy,FKo,Gpe,TKo,MKo,Va,EKo,Ope,CKo,wKo,Vpe,AKo,yKo,Xpe,LKo,xKo,$Ko,vd,qF,zpe,kKo,SKo,nX,RKo,BKo,PKo,NF,Qpe,IKo,qKo,sX,NKo,jKo,DKo,jF,Wpe,GKo,OKo,lX,VKo,XKo,zKo,DF,QKo,Hpe,WKo,HKo,Upe,UKo,JKo,GF,PPe,Fd,OF,Jpe,Vy,YKo,Ype,KKo,IPe,Wo,Xy,ZKo,Td,eZo,iX,oZo,rZo,dX,tZo,aZo,nZo,zy,sZo,Kpe,lZo,iZo,dZo,vt,Qy,cZo,Zpe,fZo,mZo,Md,gZo,eue,hZo,pZo,cX,uZo,_Zo,bZo,VF,vZo,ho,Wy,FZo,oue,TZo,MZo,Xa,EZo,rue,CZo,wZo,tue,AZo,yZo,aue,LZo,xZo,$Zo,Hy,XF,nue,kZo,SZo,fX,RZo,BZo,PZo,zF,sue,IZo,qZo,mX,NZo,jZo,DZo,QF,GZo,lue,OZo,VZo,iue,XZo,zZo,WF,qPe,Ed,HF,due,Uy,QZo,cue,WZo,NPe,Ho,Jy,HZo,Cd,UZo,gX,JZo,YZo,hX,KZo,ZZo,eer,Yy,oer,fue,rer,ter,aer,Ft,Ky,ner,mue,ser,ler,wd,ier,gue,der,cer,pX,fer,mer,ger,UF,her,po,Zy,per,hue,uer,_er,za,ber,pue,ver,Fer,uue,Ter,Mer,_ue,Eer,Cer,wer,bue,JF,vue,Aer,yer,uX,Ler,xer,$er,YF,ker,Fue,Ser,Rer,Tue,Ber,Per,KF,jPe,Ad,ZF,Mue,eL,Ier,Eue,qer,DPe,Uo,oL,Ner,yd,jer,_X,Der,Ger,bX,Oer,Ver,Xer,rL,zer,Cue,Qer,Wer,Her,Tt,tL,Uer,wue,Jer,Yer,Ld,Ker,Aue,Zer,eor,vX,oor,ror,tor,e6,aor,uo,aL,nor,yue,sor,lor,Qa,ior,Lue,dor,cor,xue,mor,gor,$ue,hor,por,uor,Wa,o6,kue,_or,bor,FX,vor,For,Tor,r6,Sue,Mor,Eor,TX,Cor,wor,Aor,t6,Rue,yor,Lor,MX,xor,$or,kor,a6,Bue,Sor,Ror,EX,Bor,Por,Ior,n6,qor,Pue,Nor,jor,Iue,Dor,Gor,s6,GPe,xd,l6,que,nL,Oor,Nue,Vor,OPe,Jo,sL,Xor,$d,zor,CX,Qor,Wor,wX,Hor,Uor,Jor,lL,Yor,jue,Kor,Zor,err,Mt,iL,orr,Due,rrr,trr,kd,arr,Gue,nrr,srr,AX,lrr,irr,drr,i6,crr,_o,dL,frr,Oue,mrr,grr,Ha,hrr,Vue,prr,urr,Xue,_rr,brr,zue,vrr,Frr,Trr,Que,d6,Wue,Mrr,Err,yX,Crr,wrr,Arr,c6,yrr,Hue,Lrr,xrr,Uue,$rr,krr,f6,VPe,Sd,m6,Jue,cL,Srr,Yue,Rrr,XPe,Yo,fL,Brr,Rd,Prr,LX,Irr,qrr,xX,Nrr,jrr,Drr,mL,Grr,Kue,Orr,Vrr,Xrr,Et,gL,zrr,Zue,Qrr,Wrr,Bd,Hrr,e_e,Urr,Jrr,$X,Yrr,Krr,Zrr,g6,etr,Cr,hL,otr,o_e,rtr,ttr,Ua,atr,r_e,ntr,str,t_e,ltr,itr,a_e,dtr,ctr,ftr,j,h6,n_e,mtr,gtr,kX,htr,ptr,utr,p6,s_e,_tr,btr,SX,vtr,Ftr,Ttr,u6,l_e,Mtr,Etr,RX,Ctr,wtr,Atr,_6,i_e,ytr,Ltr,BX,xtr,$tr,ktr,b6,d_e,Str,Rtr,PX,Btr,Ptr,Itr,v6,c_e,qtr,Ntr,IX,jtr,Dtr,Gtr,F6,f_e,Otr,Vtr,qX,Xtr,ztr,Qtr,T6,m_e,Wtr,Htr,NX,Utr,Jtr,Ytr,M6,g_e,Ktr,Ztr,jX,ear,oar,rar,E6,h_e,tar,aar,DX,nar,sar,lar,C6,p_e,iar,dar,GX,car,far,mar,w6,u_e,gar,har,OX,par,uar,_ar,A6,__e,bar,Far,VX,Tar,Mar,Ear,y6,b_e,Car,war,XX,Aar,yar,Lar,L6,v_e,xar,$ar,zX,kar,Sar,Rar,x6,F_e,Bar,Par,QX,Iar,qar,Nar,ks,T_e,jar,Dar,WX,Gar,Oar,HX,Var,Xar,zar,$6,M_e,Qar,War,UX,Har,Uar,Jar,k6,E_e,Yar,Kar,JX,Zar,enr,onr,S6,C_e,rnr,tnr,YX,anr,nnr,snr,R6,w_e,lnr,inr,KX,dnr,cnr,fnr,B6,A_e,mnr,gnr,ZX,hnr,pnr,unr,P6,y_e,_nr,bnr,ez,vnr,Fnr,Tnr,I6,L_e,Mnr,Enr,oz,Cnr,wnr,Anr,q6,x_e,ynr,Lnr,rz,xnr,$nr,knr,N6,$_e,Snr,Rnr,tz,Bnr,Pnr,Inr,j6,k_e,qnr,Nnr,az,jnr,Dnr,Gnr,D6,S_e,Onr,Vnr,nz,Xnr,znr,Qnr,G6,R_e,Wnr,Hnr,sz,Unr,Jnr,Ynr,O6,B_e,Knr,Znr,lz,esr,osr,rsr,V6,P_e,tsr,asr,iz,nsr,ssr,lsr,X6,I_e,isr,dsr,dz,csr,fsr,msr,z6,q_e,gsr,hsr,cz,psr,usr,_sr,Q6,N_e,bsr,vsr,fz,Fsr,Tsr,Msr,W6,j_e,Esr,Csr,mz,wsr,Asr,ysr,H6,D_e,Lsr,xsr,gz,$sr,ksr,Ssr,U6,G_e,Rsr,Bsr,hz,Psr,Isr,qsr,J6,O_e,Nsr,jsr,pz,Dsr,Gsr,Osr,Y6,V_e,Vsr,Xsr,uz,zsr,Qsr,Wsr,K6,X_e,Hsr,Usr,_z,Jsr,Ysr,Ksr,Z6,z_e,Zsr,elr,bz,olr,rlr,tlr,eT,Q_e,alr,nlr,vz,slr,llr,ilr,oT,W_e,dlr,clr,Fz,flr,mlr,glr,rT,H_e,hlr,plr,Tz,ulr,_lr,blr,tT,zPe,Pd,aT,U_e,pL,vlr,J_e,Flr,QPe,Ko,uL,Tlr,Id,Mlr,Mz,Elr,Clr,Ez,wlr,Alr,ylr,_L,Llr,Y_e,xlr,$lr,klr,Ct,bL,Slr,K_e,Rlr,Blr,qd,Plr,Z_e,Ilr,qlr,Cz,Nlr,jlr,Dlr,nT,Glr,wr,vL,Olr,e0e,Vlr,Xlr,Ja,zlr,o0e,Qlr,Wlr,r0e,Hlr,Ulr,t0e,Jlr,Ylr,Klr,se,sT,a0e,Zlr,eir,wz,oir,rir,tir,lT,n0e,air,nir,Az,sir,lir,iir,iT,s0e,dir,cir,yz,fir,mir,gir,dT,l0e,hir,pir,Lz,uir,_ir,bir,cT,i0e,vir,Fir,xz,Tir,Mir,Eir,fT,d0e,Cir,wir,$z,Air,yir,Lir,mT,c0e,xir,$ir,kz,kir,Sir,Rir,gT,f0e,Bir,Pir,Sz,Iir,qir,Nir,hT,m0e,jir,Dir,Rz,Gir,Oir,Vir,pT,g0e,Xir,zir,Bz,Qir,Wir,Hir,uT,h0e,Uir,Jir,Pz,Yir,Kir,Zir,_T,p0e,edr,odr,Iz,rdr,tdr,adr,bT,u0e,ndr,sdr,qz,ldr,idr,ddr,vT,_0e,cdr,fdr,Nz,mdr,gdr,hdr,FT,b0e,pdr,udr,jz,_dr,bdr,vdr,TT,v0e,Fdr,Tdr,Dz,Mdr,Edr,Cdr,MT,F0e,wdr,Adr,Gz,ydr,Ldr,xdr,ET,T0e,$dr,kdr,Oz,Sdr,Rdr,Bdr,CT,M0e,Pdr,Idr,Vz,qdr,Ndr,jdr,wT,E0e,Ddr,Gdr,Xz,Odr,Vdr,Xdr,AT,C0e,zdr,Qdr,zz,Wdr,Hdr,Udr,yT,w0e,Jdr,Ydr,Qz,Kdr,Zdr,ecr,LT,A0e,ocr,rcr,Wz,tcr,acr,ncr,xT,WPe,Nd,$T,y0e,FL,scr,L0e,lcr,HPe,Zo,TL,icr,jd,dcr,Hz,ccr,fcr,Uz,mcr,gcr,hcr,ML,pcr,x0e,ucr,_cr,bcr,wt,EL,vcr,$0e,Fcr,Tcr,Dd,Mcr,k0e,Ecr,Ccr,Jz,wcr,Acr,ycr,kT,Lcr,Ar,CL,xcr,S0e,$cr,kcr,Ya,Scr,R0e,Rcr,Bcr,B0e,Pcr,Icr,P0e,qcr,Ncr,jcr,Te,ST,I0e,Dcr,Gcr,Yz,Ocr,Vcr,Xcr,RT,q0e,zcr,Qcr,Kz,Wcr,Hcr,Ucr,BT,N0e,Jcr,Ycr,Zz,Kcr,Zcr,efr,PT,j0e,ofr,rfr,eQ,tfr,afr,nfr,IT,D0e,sfr,lfr,oQ,ifr,dfr,cfr,qT,G0e,ffr,mfr,rQ,gfr,hfr,pfr,NT,O0e,ufr,_fr,tQ,bfr,vfr,Ffr,jT,V0e,Tfr,Mfr,aQ,Efr,Cfr,wfr,DT,X0e,Afr,yfr,nQ,Lfr,xfr,$fr,GT,z0e,kfr,Sfr,sQ,Rfr,Bfr,Pfr,OT,Q0e,Ifr,qfr,lQ,Nfr,jfr,Dfr,VT,W0e,Gfr,Ofr,iQ,Vfr,Xfr,zfr,XT,UPe,Gd,zT,H0e,wL,Qfr,U0e,Wfr,JPe,er,AL,Hfr,Od,Ufr,dQ,Jfr,Yfr,cQ,Kfr,Zfr,emr,yL,omr,J0e,rmr,tmr,amr,At,LL,nmr,Y0e,smr,lmr,Vd,imr,K0e,dmr,cmr,fQ,fmr,mmr,gmr,QT,hmr,yr,xL,pmr,Z0e,umr,_mr,Ka,bmr,e1e,vmr,Fmr,o1e,Tmr,Mmr,r1e,Emr,Cmr,wmr,$L,WT,t1e,Amr,ymr,mQ,Lmr,xmr,$mr,HT,a1e,kmr,Smr,gQ,Rmr,Bmr,Pmr,UT,YPe,Xd,JT,n1e,kL,Imr,s1e,qmr,KPe,or,SL,Nmr,zd,jmr,hQ,Dmr,Gmr,pQ,Omr,Vmr,Xmr,RL,zmr,l1e,Qmr,Wmr,Hmr,yt,BL,Umr,i1e,Jmr,Ymr,Qd,Kmr,d1e,Zmr,egr,uQ,ogr,rgr,tgr,YT,agr,Lr,PL,ngr,c1e,sgr,lgr,Za,igr,f1e,dgr,cgr,m1e,fgr,mgr,g1e,ggr,hgr,pgr,ie,KT,h1e,ugr,_gr,_Q,bgr,vgr,Fgr,ZT,p1e,Tgr,Mgr,bQ,Egr,Cgr,wgr,e7,u1e,Agr,ygr,vQ,Lgr,xgr,$gr,o7,_1e,kgr,Sgr,FQ,Rgr,Bgr,Pgr,r7,b1e,Igr,qgr,TQ,Ngr,jgr,Dgr,t7,v1e,Ggr,Ogr,MQ,Vgr,Xgr,zgr,a7,F1e,Qgr,Wgr,EQ,Hgr,Ugr,Jgr,n7,T1e,Ygr,Kgr,CQ,Zgr,ehr,ohr,s7,M1e,rhr,thr,wQ,ahr,nhr,shr,l7,E1e,lhr,ihr,AQ,dhr,chr,fhr,i7,C1e,mhr,ghr,yQ,hhr,phr,uhr,d7,w1e,_hr,bhr,LQ,vhr,Fhr,Thr,c7,A1e,Mhr,Ehr,xQ,Chr,whr,Ahr,f7,y1e,yhr,Lhr,$Q,xhr,$hr,khr,m7,L1e,Shr,Rhr,kQ,Bhr,Phr,Ihr,g7,x1e,qhr,Nhr,SQ,jhr,Dhr,Ghr,h7,$1e,Ohr,Vhr,RQ,Xhr,zhr,Qhr,p7,k1e,Whr,Hhr,BQ,Uhr,Jhr,Yhr,u7,S1e,Khr,Zhr,PQ,epr,opr,rpr,_7,R1e,tpr,apr,IQ,npr,spr,lpr,b7,ZPe,Wd,v7,B1e,IL,ipr,P1e,dpr,eIe,rr,qL,cpr,Hd,fpr,qQ,mpr,gpr,NQ,hpr,ppr,upr,NL,_pr,I1e,bpr,vpr,Fpr,Lt,jL,Tpr,q1e,Mpr,Epr,Ud,Cpr,N1e,wpr,Apr,jQ,ypr,Lpr,xpr,F7,$pr,xr,DL,kpr,j1e,Spr,Rpr,en,Bpr,D1e,Ppr,Ipr,G1e,qpr,Npr,O1e,jpr,Dpr,Gpr,ye,T7,V1e,Opr,Vpr,DQ,Xpr,zpr,Qpr,M7,X1e,Wpr,Hpr,GQ,Upr,Jpr,Ypr,E7,z1e,Kpr,Zpr,OQ,eur,our,rur,C7,Q1e,tur,aur,VQ,nur,sur,lur,w7,W1e,iur,dur,XQ,cur,fur,mur,A7,H1e,gur,hur,zQ,pur,uur,_ur,y7,U1e,bur,vur,QQ,Fur,Tur,Mur,L7,J1e,Eur,Cur,WQ,wur,Aur,yur,x7,Y1e,Lur,xur,HQ,$ur,kur,Sur,$7,K1e,Rur,Bur,UQ,Pur,Iur,qur,k7,oIe,Jd,S7,Z1e,GL,Nur,ebe,jur,rIe,tr,OL,Dur,Yd,Gur,JQ,Our,Vur,YQ,Xur,zur,Qur,VL,Wur,obe,Hur,Uur,Jur,xt,XL,Yur,rbe,Kur,Zur,Kd,e_r,tbe,o_r,r_r,KQ,t_r,a_r,n_r,R7,s_r,$r,zL,l_r,abe,i_r,d_r,on,c_r,nbe,f_r,m_r,sbe,g_r,h_r,lbe,p_r,u_r,__r,Z,B7,ibe,b_r,v_r,ZQ,F_r,T_r,M_r,P7,dbe,E_r,C_r,eW,w_r,A_r,y_r,I7,cbe,L_r,x_r,oW,$_r,k_r,S_r,q7,fbe,R_r,B_r,rW,P_r,I_r,q_r,N7,mbe,N_r,j_r,tW,D_r,G_r,O_r,j7,gbe,V_r,X_r,aW,z_r,Q_r,W_r,D7,hbe,H_r,U_r,nW,J_r,Y_r,K_r,G7,pbe,Z_r,e0r,sW,o0r,r0r,t0r,O7,ube,a0r,n0r,lW,s0r,l0r,i0r,V7,_be,d0r,c0r,iW,f0r,m0r,g0r,X7,bbe,h0r,p0r,dW,u0r,_0r,b0r,z7,vbe,v0r,F0r,cW,T0r,M0r,E0r,Q7,Fbe,C0r,w0r,fW,A0r,y0r,L0r,W7,Tbe,x0r,$0r,mW,k0r,S0r,R0r,H7,Mbe,B0r,P0r,gW,I0r,q0r,N0r,U7,Ebe,j0r,D0r,hW,G0r,O0r,V0r,J7,Cbe,X0r,z0r,pW,Q0r,W0r,H0r,Y7,wbe,U0r,J0r,uW,Y0r,K0r,Z0r,K7,Abe,e1r,o1r,_W,r1r,t1r,a1r,Z7,ybe,n1r,s1r,bW,l1r,i1r,d1r,eM,Lbe,c1r,f1r,vW,m1r,g1r,h1r,oM,xbe,p1r,u1r,FW,_1r,b1r,v1r,rM,$be,F1r,T1r,TW,M1r,E1r,C1r,tM,kbe,w1r,A1r,MW,y1r,L1r,x1r,aM,Sbe,$1r,k1r,EW,S1r,R1r,B1r,nM,Rbe,P1r,I1r,CW,q1r,N1r,j1r,sM,tIe,Zd,lM,Bbe,QL,D1r,Pbe,G1r,aIe,ar,WL,O1r,ec,V1r,wW,X1r,z1r,AW,Q1r,W1r,H1r,HL,U1r,Ibe,J1r,Y1r,K1r,$t,UL,Z1r,qbe,ebr,obr,oc,rbr,Nbe,tbr,abr,yW,nbr,sbr,lbr,iM,ibr,kr,JL,dbr,jbe,cbr,fbr,rn,mbr,Dbe,gbr,hbr,Gbe,pbr,ubr,Obe,_br,bbr,vbr,pe,dM,Vbe,Fbr,Tbr,LW,Mbr,Ebr,Cbr,cM,Xbe,wbr,Abr,xW,ybr,Lbr,xbr,fM,zbe,$br,kbr,$W,Sbr,Rbr,Bbr,mM,Qbe,Pbr,Ibr,kW,qbr,Nbr,jbr,gM,Wbe,Dbr,Gbr,SW,Obr,Vbr,Xbr,hM,Hbe,zbr,Qbr,RW,Wbr,Hbr,Ubr,pM,Ube,Jbr,Ybr,BW,Kbr,Zbr,e2r,uM,Jbe,o2r,r2r,PW,t2r,a2r,n2r,_M,Ybe,s2r,l2r,IW,i2r,d2r,c2r,bM,Kbe,f2r,m2r,qW,g2r,h2r,p2r,vM,Zbe,u2r,_2r,NW,b2r,v2r,F2r,FM,e2e,T2r,M2r,jW,E2r,C2r,w2r,TM,o2e,A2r,y2r,DW,L2r,x2r,$2r,MM,r2e,k2r,S2r,GW,R2r,B2r,P2r,EM,t2e,I2r,q2r,OW,N2r,j2r,D2r,CM,a2e,G2r,O2r,VW,V2r,X2r,z2r,wM,n2e,Q2r,W2r,XW,H2r,U2r,J2r,AM,nIe,rc,yM,s2e,YL,Y2r,l2e,K2r,sIe,nr,KL,Z2r,tc,evr,zW,ovr,rvr,QW,tvr,avr,nvr,ZL,svr,i2e,lvr,ivr,dvr,kt,e8,cvr,d2e,fvr,mvr,ac,gvr,c2e,hvr,pvr,WW,uvr,_vr,bvr,LM,vvr,Sr,o8,Fvr,f2e,Tvr,Mvr,tn,Evr,m2e,Cvr,wvr,g2e,Avr,yvr,h2e,Lvr,xvr,$vr,p2e,xM,u2e,kvr,Svr,HW,Rvr,Bvr,Pvr,$M,lIe,nc,kM,_2e,r8,Ivr,b2e,qvr,iIe,sr,t8,Nvr,sc,jvr,UW,Dvr,Gvr,JW,Ovr,Vvr,Xvr,a8,zvr,v2e,Qvr,Wvr,Hvr,St,n8,Uvr,F2e,Jvr,Yvr,lc,Kvr,T2e,Zvr,eFr,YW,oFr,rFr,tFr,SM,aFr,Rr,s8,nFr,M2e,sFr,lFr,an,iFr,E2e,dFr,cFr,C2e,fFr,mFr,w2e,gFr,hFr,pFr,de,RM,A2e,uFr,_Fr,KW,bFr,vFr,FFr,BM,y2e,TFr,MFr,ZW,EFr,CFr,wFr,PM,L2e,AFr,yFr,eH,LFr,xFr,$Fr,IM,x2e,kFr,SFr,oH,RFr,BFr,PFr,qM,$2e,IFr,qFr,rH,NFr,jFr,DFr,NM,k2e,GFr,OFr,tH,VFr,XFr,zFr,jM,S2e,QFr,WFr,aH,HFr,UFr,JFr,DM,R2e,YFr,KFr,nH,ZFr,e6r,o6r,GM,B2e,r6r,t6r,sH,a6r,n6r,s6r,OM,P2e,l6r,i6r,lH,d6r,c6r,f6r,VM,I2e,m6r,g6r,iH,h6r,p6r,u6r,XM,q2e,_6r,b6r,dH,v6r,F6r,T6r,zM,N2e,M6r,E6r,cH,C6r,w6r,A6r,QM,j2e,y6r,L6r,fH,x6r,$6r,k6r,WM,D2e,S6r,R6r,mH,B6r,P6r,I6r,HM,G2e,q6r,N6r,gH,j6r,D6r,G6r,UM,O2e,O6r,V6r,hH,X6r,z6r,Q6r,JM,V2e,W6r,H6r,pH,U6r,J6r,Y6r,YM,X2e,K6r,Z6r,uH,eTr,oTr,rTr,KM,z2e,tTr,aTr,_H,nTr,sTr,lTr,ZM,dIe,ic,e4,Q2e,l8,iTr,W2e,dTr,cIe,lr,i8,cTr,dc,fTr,bH,mTr,gTr,vH,hTr,pTr,uTr,d8,_Tr,H2e,bTr,vTr,FTr,Rt,c8,TTr,U2e,MTr,ETr,cc,CTr,J2e,wTr,ATr,FH,yTr,LTr,xTr,o4,$Tr,Br,f8,kTr,Y2e,STr,RTr,nn,BTr,K2e,PTr,ITr,Z2e,qTr,NTr,eve,jTr,DTr,GTr,ce,r4,ove,OTr,VTr,TH,XTr,zTr,QTr,t4,rve,WTr,HTr,MH,UTr,JTr,YTr,a4,tve,KTr,ZTr,EH,e7r,o7r,r7r,n4,ave,t7r,a7r,CH,n7r,s7r,l7r,s4,nve,i7r,d7r,wH,c7r,f7r,m7r,l4,sve,g7r,h7r,AH,p7r,u7r,_7r,i4,lve,b7r,v7r,yH,F7r,T7r,M7r,d4,ive,E7r,C7r,LH,w7r,A7r,y7r,c4,dve,L7r,x7r,xH,$7r,k7r,S7r,f4,cve,R7r,B7r,$H,P7r,I7r,q7r,m4,fve,N7r,j7r,kH,D7r,G7r,O7r,g4,mve,V7r,X7r,SH,z7r,Q7r,W7r,h4,gve,H7r,U7r,RH,J7r,Y7r,K7r,p4,hve,Z7r,eMr,BH,oMr,rMr,tMr,u4,pve,aMr,nMr,PH,sMr,lMr,iMr,_4,uve,dMr,cMr,IH,fMr,mMr,gMr,b4,_ve,hMr,pMr,qH,uMr,_Mr,bMr,v4,bve,vMr,FMr,NH,TMr,MMr,EMr,F4,vve,CMr,wMr,jH,AMr,yMr,LMr,T4,Fve,xMr,$Mr,DH,kMr,SMr,RMr,M4,fIe,fc,E4,Tve,m8,BMr,Mve,PMr,mIe,ir,g8,IMr,mc,qMr,GH,NMr,jMr,OH,DMr,GMr,OMr,h8,VMr,Eve,XMr,zMr,QMr,Bt,p8,WMr,Cve,HMr,UMr,gc,JMr,wve,YMr,KMr,VH,ZMr,e4r,o4r,C4,r4r,Pr,u8,t4r,Ave,a4r,n4r,sn,s4r,yve,l4r,i4r,Lve,d4r,c4r,xve,f4r,m4r,g4r,$ve,w4,kve,h4r,p4r,XH,u4r,_4r,b4r,A4,gIe,hc,y4,Sve,_8,v4r,Rve,F4r,hIe,dr,b8,T4r,pc,M4r,zH,E4r,C4r,QH,w4r,A4r,y4r,v8,L4r,Bve,x4r,$4r,k4r,Pt,F8,S4r,Pve,R4r,B4r,uc,P4r,Ive,I4r,q4r,WH,N4r,j4r,D4r,L4,G4r,Ir,T8,O4r,qve,V4r,X4r,ln,z4r,Nve,Q4r,W4r,jve,H4r,U4r,Dve,J4r,Y4r,K4r,Gve,x4,Ove,Z4r,eEr,HH,oEr,rEr,tEr,$4,pIe,_c,k4,Vve,M8,aEr,Xve,nEr,uIe,cr,E8,sEr,bc,lEr,UH,iEr,dEr,JH,cEr,fEr,mEr,C8,gEr,zve,hEr,pEr,uEr,It,w8,_Er,Qve,bEr,vEr,vc,FEr,Wve,TEr,MEr,YH,EEr,CEr,wEr,S4,AEr,qr,A8,yEr,Hve,LEr,xEr,dn,$Er,Uve,kEr,SEr,Jve,REr,BEr,Yve,PEr,IEr,qEr,re,R4,Kve,NEr,jEr,KH,DEr,GEr,OEr,B4,Zve,VEr,XEr,ZH,zEr,QEr,WEr,P4,eFe,HEr,UEr,eU,JEr,YEr,KEr,I4,oFe,ZEr,e5r,oU,o5r,r5r,t5r,q4,rFe,a5r,n5r,rU,s5r,l5r,i5r,N4,tFe,d5r,c5r,tU,f5r,m5r,g5r,j4,aFe,h5r,p5r,aU,u5r,_5r,b5r,D4,nFe,v5r,F5r,nU,T5r,M5r,E5r,G4,sFe,C5r,w5r,sU,A5r,y5r,L5r,O4,lFe,x5r,$5r,lU,k5r,S5r,R5r,V4,iFe,B5r,P5r,iU,I5r,q5r,N5r,X4,dFe,j5r,D5r,dU,G5r,O5r,V5r,z4,cFe,X5r,z5r,cU,Q5r,W5r,H5r,Q4,fFe,U5r,J5r,fU,Y5r,K5r,Z5r,W4,mFe,eCr,oCr,mU,rCr,tCr,aCr,H4,gFe,nCr,sCr,gU,lCr,iCr,dCr,U4,hFe,cCr,fCr,hU,mCr,gCr,hCr,J4,pFe,pCr,uCr,pU,_Cr,bCr,vCr,Y4,uFe,FCr,TCr,uU,MCr,ECr,CCr,K4,_Fe,wCr,ACr,_U,yCr,LCr,xCr,Z4,bFe,$Cr,kCr,bU,SCr,RCr,BCr,eE,vFe,PCr,ICr,vU,qCr,NCr,jCr,oE,FFe,DCr,GCr,FU,OCr,VCr,XCr,rE,TFe,zCr,QCr,TU,WCr,HCr,UCr,tE,MFe,JCr,YCr,MU,KCr,ZCr,e3r,aE,_Ie,Fc,nE,EFe,y8,o3r,CFe,r3r,bIe,fr,L8,t3r,Tc,a3r,EU,n3r,s3r,CU,l3r,i3r,d3r,x8,c3r,wFe,f3r,m3r,g3r,qt,$8,h3r,AFe,p3r,u3r,Mc,_3r,yFe,b3r,v3r,wU,F3r,T3r,M3r,sE,E3r,Nr,k8,C3r,LFe,w3r,A3r,cn,y3r,xFe,L3r,x3r,$Fe,$3r,k3r,kFe,S3r,R3r,B3r,ke,lE,SFe,P3r,I3r,AU,q3r,N3r,j3r,iE,RFe,D3r,G3r,yU,O3r,V3r,X3r,dE,BFe,z3r,Q3r,LU,W3r,H3r,U3r,cE,PFe,J3r,Y3r,xU,K3r,Z3r,ewr,fE,IFe,owr,rwr,$U,twr,awr,nwr,mE,qFe,swr,lwr,kU,iwr,dwr,cwr,gE,NFe,fwr,mwr,SU,gwr,hwr,pwr,hE,jFe,uwr,_wr,RU,bwr,vwr,Fwr,pE,DFe,Twr,Mwr,BU,Ewr,Cwr,wwr,uE,vIe,Ec,_E,GFe,S8,Awr,OFe,ywr,FIe,mr,R8,Lwr,Cc,xwr,PU,$wr,kwr,IU,Swr,Rwr,Bwr,B8,Pwr,VFe,Iwr,qwr,Nwr,Nt,P8,jwr,XFe,Dwr,Gwr,wc,Owr,zFe,Vwr,Xwr,qU,zwr,Qwr,Wwr,bE,Hwr,jr,I8,Uwr,QFe,Jwr,Ywr,fn,Kwr,WFe,Zwr,eAr,HFe,oAr,rAr,UFe,tAr,aAr,nAr,Me,vE,JFe,sAr,lAr,NU,iAr,dAr,cAr,FE,YFe,fAr,mAr,jU,gAr,hAr,pAr,TE,KFe,uAr,_Ar,DU,bAr,vAr,FAr,ME,ZFe,TAr,MAr,GU,EAr,CAr,wAr,EE,e6e,AAr,yAr,OU,LAr,xAr,$Ar,CE,o6e,kAr,SAr,VU,RAr,BAr,PAr,wE,r6e,IAr,qAr,XU,NAr,jAr,DAr,AE,t6e,GAr,OAr,zU,VAr,XAr,zAr,yE,a6e,QAr,WAr,QU,HAr,UAr,JAr,LE,n6e,YAr,KAr,WU,ZAr,eyr,oyr,xE,s6e,ryr,tyr,HU,ayr,nyr,syr,$E,l6e,lyr,iyr,UU,dyr,cyr,fyr,kE,TIe,Ac,SE,i6e,q8,myr,d6e,gyr,MIe,gr,N8,hyr,yc,pyr,JU,uyr,_yr,YU,byr,vyr,Fyr,j8,Tyr,c6e,Myr,Eyr,Cyr,jt,D8,wyr,f6e,Ayr,yyr,Lc,Lyr,m6e,xyr,$yr,KU,kyr,Syr,Ryr,RE,Byr,Dr,G8,Pyr,g6e,Iyr,qyr,mn,Nyr,h6e,jyr,Dyr,p6e,Gyr,Oyr,u6e,Vyr,Xyr,zyr,Le,BE,_6e,Qyr,Wyr,ZU,Hyr,Uyr,Jyr,PE,b6e,Yyr,Kyr,eJ,Zyr,eLr,oLr,IE,v6e,rLr,tLr,oJ,aLr,nLr,sLr,qE,F6e,lLr,iLr,rJ,dLr,cLr,fLr,NE,T6e,mLr,gLr,tJ,hLr,pLr,uLr,jE,M6e,_Lr,bLr,aJ,vLr,FLr,TLr,DE,E6e,MLr,ELr,nJ,CLr,wLr,ALr,GE,C6e,yLr,LLr,sJ,xLr,$Lr,kLr,OE,w6e,SLr,RLr,lJ,BLr,PLr,ILr,VE,A6e,qLr,NLr,iJ,jLr,DLr,GLr,XE,EIe,xc,zE,y6e,O8,OLr,L6e,VLr,CIe,hr,V8,XLr,$c,zLr,dJ,QLr,WLr,cJ,HLr,ULr,JLr,X8,YLr,x6e,KLr,ZLr,e8r,Dt,z8,o8r,$6e,r8r,t8r,kc,a8r,k6e,n8r,s8r,fJ,l8r,i8r,d8r,QE,c8r,Gr,Q8,f8r,S6e,m8r,g8r,gn,h8r,R6e,p8r,u8r,B6e,_8r,b8r,P6e,v8r,F8r,T8r,Se,WE,I6e,M8r,E8r,mJ,C8r,w8r,A8r,HE,q6e,y8r,L8r,gJ,x8r,$8r,k8r,UE,N6e,S8r,R8r,hJ,B8r,P8r,I8r,JE,j6e,q8r,N8r,pJ,j8r,D8r,G8r,YE,D6e,O8r,V8r,uJ,X8r,z8r,Q8r,KE,G6e,W8r,H8r,_J,U8r,J8r,Y8r,ZE,O6e,K8r,Z8r,bJ,exr,oxr,rxr,e5,V6e,txr,axr,vJ,nxr,sxr,lxr,o5,X6e,ixr,dxr,FJ,cxr,fxr,mxr,r5,wIe,Sc,t5,z6e,W8,gxr,Q6e,hxr,AIe,pr,H8,pxr,Rc,uxr,TJ,_xr,bxr,MJ,vxr,Fxr,Txr,U8,Mxr,W6e,Exr,Cxr,wxr,Gt,J8,Axr,H6e,yxr,Lxr,Bc,xxr,U6e,$xr,kxr,EJ,Sxr,Rxr,Bxr,a5,Pxr,Or,Y8,Ixr,J6e,qxr,Nxr,hn,jxr,Y6e,Dxr,Gxr,K6e,Oxr,Vxr,Z6e,Xxr,zxr,Qxr,xe,n5,eTe,Wxr,Hxr,CJ,Uxr,Jxr,Yxr,s5,oTe,Kxr,Zxr,wJ,e9r,o9r,r9r,l5,rTe,t9r,a9r,AJ,n9r,s9r,l9r,i5,tTe,i9r,d9r,yJ,c9r,f9r,m9r,d5,aTe,g9r,h9r,LJ,p9r,u9r,_9r,c5,nTe,b9r,v9r,xJ,F9r,T9r,M9r,f5,sTe,E9r,C9r,$J,w9r,A9r,y9r,m5,lTe,L9r,x9r,kJ,$9r,k9r,S9r,g5,iTe,R9r,B9r,SJ,P9r,I9r,q9r,h5,dTe,N9r,j9r,RJ,D9r,G9r,O9r,p5,yIe,Pc,u5,cTe,K8,V9r,fTe,X9r,LIe,ur,Z8,z9r,Ic,Q9r,BJ,W9r,H9r,PJ,U9r,J9r,Y9r,ex,K9r,mTe,Z9r,e$r,o$r,Ot,ox,r$r,gTe,t$r,a$r,qc,n$r,hTe,s$r,l$r,IJ,i$r,d$r,c$r,_5,f$r,Vr,rx,m$r,pTe,g$r,h$r,pn,p$r,uTe,u$r,_$r,_Te,b$r,v$r,bTe,F$r,T$r,M$r,$e,b5,vTe,E$r,C$r,qJ,w$r,A$r,y$r,v5,FTe,L$r,x$r,NJ,$$r,k$r,S$r,F5,TTe,R$r,B$r,jJ,P$r,I$r,q$r,T5,MTe,N$r,j$r,DJ,D$r,G$r,O$r,M5,ETe,V$r,X$r,GJ,z$r,Q$r,W$r,E5,CTe,H$r,U$r,OJ,J$r,Y$r,K$r,C5,wTe,Z$r,ekr,VJ,okr,rkr,tkr,w5,ATe,akr,nkr,XJ,skr,lkr,ikr,A5,yTe,dkr,ckr,zJ,fkr,mkr,gkr,y5,LTe,hkr,pkr,QJ,ukr,_kr,bkr,L5,xIe,Nc,x5,xTe,tx,vkr,$Te,Fkr,$Ie,_r,ax,Tkr,jc,Mkr,WJ,Ekr,Ckr,HJ,wkr,Akr,ykr,nx,Lkr,kTe,xkr,$kr,kkr,Vt,sx,Skr,STe,Rkr,Bkr,Dc,Pkr,RTe,Ikr,qkr,UJ,Nkr,jkr,Dkr,$5,Gkr,Xr,lx,Okr,BTe,Vkr,Xkr,un,zkr,PTe,Qkr,Wkr,ITe,Hkr,Ukr,qTe,Jkr,Ykr,Kkr,De,k5,NTe,Zkr,eSr,JJ,oSr,rSr,tSr,S5,jTe,aSr,nSr,YJ,sSr,lSr,iSr,R5,DTe,dSr,cSr,KJ,fSr,mSr,gSr,B5,GTe,hSr,pSr,ZJ,uSr,_Sr,bSr,P5,OTe,vSr,FSr,eY,TSr,MSr,ESr,I5,VTe,CSr,wSr,oY,ASr,ySr,LSr,q5,XTe,xSr,$Sr,rY,kSr,SSr,RSr,N5,zTe,BSr,PSr,tY,ISr,qSr,NSr,j5,kIe,Gc,D5,QTe,ix,jSr,WTe,DSr,SIe,br,dx,GSr,Oc,OSr,aY,VSr,XSr,nY,zSr,QSr,WSr,cx,HSr,HTe,USr,JSr,YSr,Xt,fx,KSr,UTe,ZSr,eRr,Vc,oRr,JTe,rRr,tRr,sY,aRr,nRr,sRr,G5,lRr,zr,mx,iRr,YTe,dRr,cRr,_n,fRr,KTe,mRr,gRr,ZTe,hRr,pRr,e7e,uRr,_Rr,bRr,Ge,O5,o7e,vRr,FRr,lY,TRr,MRr,ERr,V5,r7e,CRr,wRr,iY,ARr,yRr,LRr,X5,t7e,xRr,$Rr,dY,kRr,SRr,RRr,z5,a7e,BRr,PRr,cY,IRr,qRr,NRr,Q5,n7e,jRr,DRr,fY,GRr,ORr,VRr,W5,s7e,XRr,zRr,mY,QRr,WRr,HRr,H5,l7e,URr,JRr,gY,YRr,KRr,ZRr,U5,i7e,eBr,oBr,hY,rBr,tBr,aBr,J5,RIe,Xc,Y5,d7e,gx,nBr,c7e,sBr,BIe,vr,hx,lBr,zc,iBr,pY,dBr,cBr,uY,fBr,mBr,gBr,px,hBr,f7e,pBr,uBr,_Br,zt,ux,bBr,m7e,vBr,FBr,Qc,TBr,g7e,MBr,EBr,_Y,CBr,wBr,ABr,K5,yBr,Qr,_x,LBr,h7e,xBr,$Br,bn,kBr,p7e,SBr,RBr,u7e,BBr,PBr,_7e,IBr,qBr,NBr,b7e,Z5,v7e,jBr,DBr,bY,GBr,OBr,VBr,eC,PIe,Wc,oC,F7e,bx,XBr,T7e,zBr,IIe,Fr,vx,QBr,Hc,WBr,vY,HBr,UBr,FY,JBr,YBr,KBr,Fx,ZBr,M7e,ePr,oPr,rPr,Qt,Tx,tPr,E7e,aPr,nPr,Uc,sPr,C7e,lPr,iPr,TY,dPr,cPr,fPr,rC,mPr,Wr,Mx,gPr,w7e,hPr,pPr,vn,uPr,A7e,_Pr,bPr,y7e,vPr,FPr,L7e,TPr,MPr,EPr,Ex,tC,x7e,CPr,wPr,MY,APr,yPr,LPr,aC,$7e,xPr,$Pr,EY,kPr,SPr,RPr,nC,qIe,Jc,sC,k7e,Cx,BPr,S7e,PPr,NIe,Tr,wx,IPr,Yc,qPr,CY,NPr,jPr,wY,DPr,GPr,OPr,Ax,VPr,R7e,XPr,zPr,QPr,Wt,yx,WPr,B7e,HPr,UPr,Kc,JPr,P7e,YPr,KPr,AY,ZPr,eIr,oIr,lC,rIr,Hr,Lx,tIr,I7e,aIr,nIr,Fn,sIr,q7e,lIr,iIr,N7e,dIr,cIr,j7e,fIr,mIr,gIr,D7e,iC,G7e,hIr,pIr,yY,uIr,_Ir,bIr,dC,jIe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),xw=new ee({}),$w=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),lf=new vIr({props:{warning:!0,$$slots:{default:[ACt]},$$scope:{ctx:L}}}),kw=new ee({}),Sw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L566"}}),Pw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L589"}}),sg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[yCt]},$$scope:{ctx:L}}}),Iw=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L711"}}),qw=new ee({}),Nw=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L378"}}),Gw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17060/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L392"}}),Ng=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[LCt]},$$scope:{ctx:L}}}),Ow=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L588"}}),Vw=new ee({}),Xw=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),Ww=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),mh=new vIr({props:{$$slots:{default:[xCt]},$$scope:{ctx:L}}}),gh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[$Ct]},$$scope:{ctx:L}}}),Hw=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),Uw=new ee({}),Jw=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L77"}}),Zw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L91"}}),kh=new vIr({props:{$$slots:{default:[kCt]},$$scope:{ctx:L}}}),Sh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[SCt]},$$scope:{ctx:L}}}),eA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L244"}}),oA=new ee({}),rA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L720"}}),aA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Ph=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[RCt]},$$scope:{ctx:L}}}),nA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Cu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[BCt]},$$scope:{ctx:L}}}),sA=new ee({}),lA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L727"}}),dA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Au=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[PCt]},$$scope:{ctx:L}}}),cA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),g_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ICt]},$$scope:{ctx:L}}}),fA=new ee({}),mA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L742"}}),hA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),p_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[qCt]},$$scope:{ctx:L}}}),pA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),K_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[NCt]},$$scope:{ctx:L}}}),uA=new ee({}),_A=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L749"}}),vA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[jCt]},$$scope:{ctx:L}}}),FA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[DCt]},$$scope:{ctx:L}}}),TA=new ee({}),MA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L756"}}),CA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[GCt]},$$scope:{ctx:L}}}),wA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),a1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[OCt]},$$scope:{ctx:L}}}),AA=new ee({}),yA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L765"}}),xA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),s1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[VCt]},$$scope:{ctx:L}}}),$A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),rb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[XCt]},$$scope:{ctx:L}}}),kA=new ee({}),SA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L799"}}),BA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),ab=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[zCt]},$$scope:{ctx:L}}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Bb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[QCt]},$$scope:{ctx:L}}}),IA=new ee({}),qA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L806"}}),jA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Ib=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[WCt]},$$scope:{ctx:L}}}),DA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[HCt]},$$scope:{ctx:L}}}),GA=new ee({}),OA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L792"}}),XA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[UCt]},$$scope:{ctx:L}}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),y2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[JCt]},$$scope:{ctx:L}}}),QA=new ee({}),WA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L774"}}),UA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),x2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[YCt]},$$scope:{ctx:L}}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),_v=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[KCt]},$$scope:{ctx:L}}}),YA=new ee({}),KA=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L781"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),vv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ZCt]},$$scope:{ctx:L}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Mv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[e3t]},$$scope:{ctx:L}}}),ry=new ee({}),ty=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L815"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Cv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[o3t]},$$scope:{ctx:L}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[r3t]},$$scope:{ctx:L}}}),ly=new ee({}),iy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L854"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),jv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[t3t]},$$scope:{ctx:L}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Ov=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[a3t]},$$scope:{ctx:L}}}),my=new ee({}),gy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L861"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Xv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[n3t]},$$scope:{ctx:L}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[s3t]},$$scope:{ctx:L}}}),_y=new ee({}),by=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L884"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[l3t]},$$scope:{ctx:L}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[i3t]},$$scope:{ctx:L}}}),My=new ee({}),Ey=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L868"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[d3t]},$$scope:{ctx:L}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[c3t]},$$scope:{ctx:L}}}),yy=new ee({}),Ly=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L875"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[f3t]},$$scope:{ctx:L}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[m3t]},$$scope:{ctx:L}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L893"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[g3t]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[h3t]},$$scope:{ctx:L}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L900"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[p3t]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[u3t]},$$scope:{ctx:L}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L847"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[_3t]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),WF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[b3t]},$$scope:{ctx:L}}}),Uy=new ee({}),Jy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L822"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[v3t]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[F3t]},$$scope:{ctx:L}}}),eL=new ee({}),oL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L829"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),e6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[T3t]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),s6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[M3t]},$$scope:{ctx:L}}}),nL=new ee({}),sL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L838"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),i6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[E3t]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),f6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[C3t]},$$scope:{ctx:L}}}),cL=new ee({}),fL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),gL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),g6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[w3t]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[A3t]},$$scope:{ctx:L}}}),pL=new ee({}),uL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),bL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[y3t]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[L3t]},$$scope:{ctx:L}}}),FL=new ee({}),TL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),EL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[x3t]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$3t]},$$scope:{ctx:L}}}),wL=new ee({}),AL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),LL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[k3t]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[S3t]},$$scope:{ctx:L}}}),kL=new ee({}),SL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),BL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[R3t]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[B3t]},$$scope:{ctx:L}}}),IL=new ee({}),qL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[P3t]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[I3t]},$$scope:{ctx:L}}}),GL=new ee({}),OL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),XL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[q3t]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[N3t]},$$scope:{ctx:L}}}),QL=new ee({}),WL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),UL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[j3t]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[D3t]},$$scope:{ctx:L}}}),YL=new ee({}),KL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),e8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[G3t]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[O3t]},$$scope:{ctx:L}}}),r8=new ee({}),t8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),n8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[V3t]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[X3t]},$$scope:{ctx:L}}}),l8=new ee({}),i8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),c8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[z3t]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Q3t]},$$scope:{ctx:L}}}),m8=new ee({}),g8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),p8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[W3t]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[H3t]},$$scope:{ctx:L}}}),_8=new ee({}),b8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),F8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[U3t]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[J3t]},$$scope:{ctx:L}}}),M8=new ee({}),E8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),w8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Y3t]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[K3t]},$$scope:{ctx:L}}}),y8=new ee({}),L8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),$8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Z3t]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),uE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ewt]},$$scope:{ctx:L}}}),S8=new ee({}),R8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),P8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[owt]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[rwt]},$$scope:{ctx:L}}}),q8=new ee({}),N8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),D8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[twt]},$$scope:{ctx:L}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[awt]},$$scope:{ctx:L}}}),O8=new ee({}),V8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),z8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[nwt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[swt]},$$scope:{ctx:L}}}),W8=new ee({}),H8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),J8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[lwt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[iwt]},$$scope:{ctx:L}}}),K8=new ee({}),Z8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dwt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cwt]},$$scope:{ctx:L}}}),tx=new ee({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[fwt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[mwt]},$$scope:{ctx:L}}}),ix=new ee({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[gwt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hwt]},$$scope:{ctx:L}}}),gx=new ee({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pwt]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uwt]},$$scope:{ctx:L}}}),bx=new ee({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[_wt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bwt]},$$scope:{ctx:L}}}),Cx=new ee({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[vwt]},$$scope:{ctx:L}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Fwt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ri=o("Auto Classes"),rf=l(),Kr=a("p"),ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=a("code"),ww=o("from_pretrained()"),tf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ni=o("Instantiating one of "),Mn=a("a"),Aw=o("AutoConfig"),En=o(", "),Cn=a("a"),yw=o("AutoModel"),si=o(`, and
`),wn=a("a"),Lw=o("AutoTokenizer"),li=o(" will directly create a class of the relevant architecture. For instance"),af=l(),F(va.$$.fragment),ze=l(),Ae=a("p"),O9=o("will create a model that is an instance of "),ii=a("a"),V9=o("BertModel"),X9=o("."),Eo=l(),Fa=a("p"),z9=o("There is one class of "),nf=a("code"),Q9=o("AutoModel"),zNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),NBe=l(),di=a("h2"),sf=a("a"),bZ=a("span"),F(xw.$$.fragment),QNe=l(),vZ=a("span"),WNe=o("Extending the Auto Classes"),jBe=l(),An=a("p"),HNe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),FZ=a("code"),UNe=o("NewModel"),JNe=o(", make sure you have a "),TZ=a("code"),YNe=o("NewModelConfig"),KNe=o(` then you can add those to the auto
classes like this:`),DBe=l(),F($w.$$.fragment),GBe=l(),W9=a("p"),ZNe=o("You will then be able to use the auto classes like you would usually do!"),OBe=l(),F(lf.$$.fragment),VBe=l(),ci=a("h2"),df=a("a"),MZ=a("span"),F(kw.$$.fragment),eje=l(),EZ=a("span"),oje=o("AutoConfig"),XBe=l(),Co=a("div"),F(Sw.$$.fragment),rje=l(),Rw=a("p"),tje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),H9=a("a"),aje=o("from_pretrained()"),nje=o(" class method."),sje=l(),Bw=a("p"),lje=o("This class cannot be instantiated directly using "),CZ=a("code"),ije=o("__init__()"),dje=o(" (throws an error)."),cje=l(),Mr=a("div"),F(Pw.$$.fragment),fje=l(),wZ=a("p"),mje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),gje=l(),fi=a("p"),hje=o("The configuration class to instantiate is selected based on the "),AZ=a("code"),pje=o("model_type"),uje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),yZ=a("code"),_je=o("pretrained_model_name_or_path"),bje=o(":"),vje=l(),A=a("ul"),cf=a("li"),LZ=a("strong"),Fje=o("albert"),Tje=o(" \u2014 "),U9=a("a"),Mje=o("AlbertConfig"),Eje=o(" (ALBERT model)"),Cje=l(),ff=a("li"),xZ=a("strong"),wje=o("bart"),Aje=o(" \u2014 "),J9=a("a"),yje=o("BartConfig"),Lje=o(" (BART model)"),xje=l(),mf=a("li"),$Z=a("strong"),$je=o("beit"),kje=o(" \u2014 "),Y9=a("a"),Sje=o("BeitConfig"),Rje=o(" (BEiT model)"),Bje=l(),gf=a("li"),kZ=a("strong"),Pje=o("bert"),Ije=o(" \u2014 "),K9=a("a"),qje=o("BertConfig"),Nje=o(" (BERT model)"),jje=l(),hf=a("li"),SZ=a("strong"),Dje=o("bert-generation"),Gje=o(" \u2014 "),Z9=a("a"),Oje=o("BertGenerationConfig"),Vje=o(" (Bert Generation model)"),Xje=l(),pf=a("li"),RZ=a("strong"),zje=o("big_bird"),Qje=o(" \u2014 "),e$=a("a"),Wje=o("BigBirdConfig"),Hje=o(" (BigBird model)"),Uje=l(),uf=a("li"),BZ=a("strong"),Jje=o("bigbird_pegasus"),Yje=o(" \u2014 "),o$=a("a"),Kje=o("BigBirdPegasusConfig"),Zje=o(" (BigBirdPegasus model)"),eDe=l(),_f=a("li"),PZ=a("strong"),oDe=o("blenderbot"),rDe=o(" \u2014 "),r$=a("a"),tDe=o("BlenderbotConfig"),aDe=o(" (Blenderbot model)"),nDe=l(),bf=a("li"),IZ=a("strong"),sDe=o("blenderbot-small"),lDe=o(" \u2014 "),t$=a("a"),iDe=o("BlenderbotSmallConfig"),dDe=o(" (BlenderbotSmall model)"),cDe=l(),vf=a("li"),qZ=a("strong"),fDe=o("camembert"),mDe=o(" \u2014 "),a$=a("a"),gDe=o("CamembertConfig"),hDe=o(" (CamemBERT model)"),pDe=l(),Ff=a("li"),NZ=a("strong"),uDe=o("canine"),_De=o(" \u2014 "),n$=a("a"),bDe=o("CanineConfig"),vDe=o(" (Canine model)"),FDe=l(),Tf=a("li"),jZ=a("strong"),TDe=o("clip"),MDe=o(" \u2014 "),s$=a("a"),EDe=o("CLIPConfig"),CDe=o(" (CLIP model)"),wDe=l(),Mf=a("li"),DZ=a("strong"),ADe=o("convbert"),yDe=o(" \u2014 "),l$=a("a"),LDe=o("ConvBertConfig"),xDe=o(" (ConvBERT model)"),$De=l(),Ef=a("li"),GZ=a("strong"),kDe=o("convnext"),SDe=o(" \u2014 "),i$=a("a"),RDe=o("ConvNextConfig"),BDe=o(" (ConvNext model)"),PDe=l(),Cf=a("li"),OZ=a("strong"),IDe=o("ctrl"),qDe=o(" \u2014 "),d$=a("a"),NDe=o("CTRLConfig"),jDe=o(" (CTRL model)"),DDe=l(),wf=a("li"),VZ=a("strong"),GDe=o("data2vec-audio"),ODe=o(" \u2014 "),c$=a("a"),VDe=o("Data2VecAudioConfig"),XDe=o(" (Data2VecAudio model)"),zDe=l(),Af=a("li"),XZ=a("strong"),QDe=o("data2vec-text"),WDe=o(" \u2014 "),f$=a("a"),HDe=o("Data2VecTextConfig"),UDe=o(" (Data2VecText model)"),JDe=l(),yf=a("li"),zZ=a("strong"),YDe=o("data2vec-vision"),KDe=o(" \u2014 "),m$=a("a"),ZDe=o("Data2VecVisionConfig"),eGe=o(" (Data2VecVision model)"),oGe=l(),Lf=a("li"),QZ=a("strong"),rGe=o("deberta"),tGe=o(" \u2014 "),g$=a("a"),aGe=o("DebertaConfig"),nGe=o(" (DeBERTa model)"),sGe=l(),xf=a("li"),WZ=a("strong"),lGe=o("deberta-v2"),iGe=o(" \u2014 "),h$=a("a"),dGe=o("DebertaV2Config"),cGe=o(" (DeBERTa-v2 model)"),fGe=l(),$f=a("li"),HZ=a("strong"),mGe=o("decision_transformer"),gGe=o(" \u2014 "),p$=a("a"),hGe=o("DecisionTransformerConfig"),pGe=o(" (Decision Transformer model)"),uGe=l(),kf=a("li"),UZ=a("strong"),_Ge=o("deit"),bGe=o(" \u2014 "),u$=a("a"),vGe=o("DeiTConfig"),FGe=o(" (DeiT model)"),TGe=l(),Sf=a("li"),JZ=a("strong"),MGe=o("detr"),EGe=o(" \u2014 "),_$=a("a"),CGe=o("DetrConfig"),wGe=o(" (DETR model)"),AGe=l(),Rf=a("li"),YZ=a("strong"),yGe=o("distilbert"),LGe=o(" \u2014 "),b$=a("a"),xGe=o("DistilBertConfig"),$Ge=o(" (DistilBERT model)"),kGe=l(),Bf=a("li"),KZ=a("strong"),SGe=o("dpr"),RGe=o(" \u2014 "),v$=a("a"),BGe=o("DPRConfig"),PGe=o(" (DPR model)"),IGe=l(),Pf=a("li"),ZZ=a("strong"),qGe=o("dpt"),NGe=o(" \u2014 "),F$=a("a"),jGe=o("DPTConfig"),DGe=o(" (DPT model)"),GGe=l(),If=a("li"),eee=a("strong"),OGe=o("electra"),VGe=o(" \u2014 "),T$=a("a"),XGe=o("ElectraConfig"),zGe=o(" (ELECTRA model)"),QGe=l(),qf=a("li"),oee=a("strong"),WGe=o("encoder-decoder"),HGe=o(" \u2014 "),M$=a("a"),UGe=o("EncoderDecoderConfig"),JGe=o(" (Encoder decoder model)"),YGe=l(),Nf=a("li"),ree=a("strong"),KGe=o("flaubert"),ZGe=o(" \u2014 "),E$=a("a"),eOe=o("FlaubertConfig"),oOe=o(" (FlauBERT model)"),rOe=l(),jf=a("li"),tee=a("strong"),tOe=o("fnet"),aOe=o(" \u2014 "),C$=a("a"),nOe=o("FNetConfig"),sOe=o(" (FNet model)"),lOe=l(),Df=a("li"),aee=a("strong"),iOe=o("fsmt"),dOe=o(" \u2014 "),w$=a("a"),cOe=o("FSMTConfig"),fOe=o(" (FairSeq Machine-Translation model)"),mOe=l(),Gf=a("li"),nee=a("strong"),gOe=o("funnel"),hOe=o(" \u2014 "),A$=a("a"),pOe=o("FunnelConfig"),uOe=o(" (Funnel Transformer model)"),_Oe=l(),Of=a("li"),see=a("strong"),bOe=o("glpn"),vOe=o(" \u2014 "),y$=a("a"),FOe=o("GLPNConfig"),TOe=o(" (GLPN model)"),MOe=l(),Vf=a("li"),lee=a("strong"),EOe=o("gpt2"),COe=o(" \u2014 "),L$=a("a"),wOe=o("GPT2Config"),AOe=o(" (OpenAI GPT-2 model)"),yOe=l(),Xf=a("li"),iee=a("strong"),LOe=o("gpt_neo"),xOe=o(" \u2014 "),x$=a("a"),$Oe=o("GPTNeoConfig"),kOe=o(" (GPT Neo model)"),SOe=l(),zf=a("li"),dee=a("strong"),ROe=o("gptj"),BOe=o(" \u2014 "),$$=a("a"),POe=o("GPTJConfig"),IOe=o(" (GPT-J model)"),qOe=l(),Qf=a("li"),cee=a("strong"),NOe=o("hubert"),jOe=o(" \u2014 "),k$=a("a"),DOe=o("HubertConfig"),GOe=o(" (Hubert model)"),OOe=l(),Wf=a("li"),fee=a("strong"),VOe=o("ibert"),XOe=o(" \u2014 "),S$=a("a"),zOe=o("IBertConfig"),QOe=o(" (I-BERT model)"),WOe=l(),Hf=a("li"),mee=a("strong"),HOe=o("imagegpt"),UOe=o(" \u2014 "),R$=a("a"),JOe=o("ImageGPTConfig"),YOe=o(" (ImageGPT model)"),KOe=l(),Uf=a("li"),gee=a("strong"),ZOe=o("layoutlm"),eVe=o(" \u2014 "),B$=a("a"),oVe=o("LayoutLMConfig"),rVe=o(" (LayoutLM model)"),tVe=l(),Jf=a("li"),hee=a("strong"),aVe=o("layoutlmv2"),nVe=o(" \u2014 "),P$=a("a"),sVe=o("LayoutLMv2Config"),lVe=o(" (LayoutLMv2 model)"),iVe=l(),Yf=a("li"),pee=a("strong"),dVe=o("layoutlmv3"),cVe=o(" \u2014 "),I$=a("a"),fVe=o("LayoutLMv3Config"),mVe=o(" (LayoutLMv3 model)"),gVe=l(),Kf=a("li"),uee=a("strong"),hVe=o("led"),pVe=o(" \u2014 "),q$=a("a"),uVe=o("LEDConfig"),_Ve=o(" (LED model)"),bVe=l(),Zf=a("li"),_ee=a("strong"),vVe=o("longformer"),FVe=o(" \u2014 "),N$=a("a"),TVe=o("LongformerConfig"),MVe=o(" (Longformer model)"),EVe=l(),em=a("li"),bee=a("strong"),CVe=o("luke"),wVe=o(" \u2014 "),j$=a("a"),AVe=o("LukeConfig"),yVe=o(" (LUKE model)"),LVe=l(),om=a("li"),vee=a("strong"),xVe=o("lxmert"),$Ve=o(" \u2014 "),D$=a("a"),kVe=o("LxmertConfig"),SVe=o(" (LXMERT model)"),RVe=l(),rm=a("li"),Fee=a("strong"),BVe=o("m2m_100"),PVe=o(" \u2014 "),G$=a("a"),IVe=o("M2M100Config"),qVe=o(" (M2M100 model)"),NVe=l(),tm=a("li"),Tee=a("strong"),jVe=o("marian"),DVe=o(" \u2014 "),O$=a("a"),GVe=o("MarianConfig"),OVe=o(" (Marian model)"),VVe=l(),am=a("li"),Mee=a("strong"),XVe=o("maskformer"),zVe=o(" \u2014 "),V$=a("a"),QVe=o("MaskFormerConfig"),WVe=o(" (MaskFormer model)"),HVe=l(),nm=a("li"),Eee=a("strong"),UVe=o("mbart"),JVe=o(" \u2014 "),X$=a("a"),YVe=o("MBartConfig"),KVe=o(" (mBART model)"),ZVe=l(),sm=a("li"),Cee=a("strong"),eXe=o("megatron-bert"),oXe=o(" \u2014 "),z$=a("a"),rXe=o("MegatronBertConfig"),tXe=o(" (MegatronBert model)"),aXe=l(),lm=a("li"),wee=a("strong"),nXe=o("mobilebert"),sXe=o(" \u2014 "),Q$=a("a"),lXe=o("MobileBertConfig"),iXe=o(" (MobileBERT model)"),dXe=l(),im=a("li"),Aee=a("strong"),cXe=o("mpnet"),fXe=o(" \u2014 "),W$=a("a"),mXe=o("MPNetConfig"),gXe=o(" (MPNet model)"),hXe=l(),dm=a("li"),yee=a("strong"),pXe=o("mt5"),uXe=o(" \u2014 "),H$=a("a"),_Xe=o("MT5Config"),bXe=o(" (mT5 model)"),vXe=l(),cm=a("li"),Lee=a("strong"),FXe=o("nystromformer"),TXe=o(" \u2014 "),U$=a("a"),MXe=o("NystromformerConfig"),EXe=o(" (Nystromformer model)"),CXe=l(),fm=a("li"),xee=a("strong"),wXe=o("openai-gpt"),AXe=o(" \u2014 "),J$=a("a"),yXe=o("OpenAIGPTConfig"),LXe=o(" (OpenAI GPT model)"),xXe=l(),mm=a("li"),$ee=a("strong"),$Xe=o("pegasus"),kXe=o(" \u2014 "),Y$=a("a"),SXe=o("PegasusConfig"),RXe=o(" (Pegasus model)"),BXe=l(),gm=a("li"),kee=a("strong"),PXe=o("perceiver"),IXe=o(" \u2014 "),K$=a("a"),qXe=o("PerceiverConfig"),NXe=o(" (Perceiver model)"),jXe=l(),hm=a("li"),See=a("strong"),DXe=o("plbart"),GXe=o(" \u2014 "),Z$=a("a"),OXe=o("PLBartConfig"),VXe=o(" (PLBart model)"),XXe=l(),pm=a("li"),Ree=a("strong"),zXe=o("poolformer"),QXe=o(" \u2014 "),ek=a("a"),WXe=o("PoolFormerConfig"),HXe=o(" (PoolFormer model)"),UXe=l(),um=a("li"),Bee=a("strong"),JXe=o("prophetnet"),YXe=o(" \u2014 "),ok=a("a"),KXe=o("ProphetNetConfig"),ZXe=o(" (ProphetNet model)"),eze=l(),_m=a("li"),Pee=a("strong"),oze=o("qdqbert"),rze=o(" \u2014 "),rk=a("a"),tze=o("QDQBertConfig"),aze=o(" (QDQBert model)"),nze=l(),bm=a("li"),Iee=a("strong"),sze=o("rag"),lze=o(" \u2014 "),tk=a("a"),ize=o("RagConfig"),dze=o(" (RAG model)"),cze=l(),vm=a("li"),qee=a("strong"),fze=o("realm"),mze=o(" \u2014 "),ak=a("a"),gze=o("RealmConfig"),hze=o(" (Realm model)"),pze=l(),Fm=a("li"),Nee=a("strong"),uze=o("reformer"),_ze=o(" \u2014 "),nk=a("a"),bze=o("ReformerConfig"),vze=o(" (Reformer model)"),Fze=l(),Tm=a("li"),jee=a("strong"),Tze=o("regnet"),Mze=o(" \u2014 "),sk=a("a"),Eze=o("RegNetConfig"),Cze=o(" (RegNet model)"),wze=l(),Mm=a("li"),Dee=a("strong"),Aze=o("rembert"),yze=o(" \u2014 "),lk=a("a"),Lze=o("RemBertConfig"),xze=o(" (RemBERT model)"),$ze=l(),Em=a("li"),Gee=a("strong"),kze=o("resnet"),Sze=o(" \u2014 "),ik=a("a"),Rze=o("ResNetConfig"),Bze=o(" (ResNet model)"),Pze=l(),Cm=a("li"),Oee=a("strong"),Ize=o("retribert"),qze=o(" \u2014 "),dk=a("a"),Nze=o("RetriBertConfig"),jze=o(" (RetriBERT model)"),Dze=l(),wm=a("li"),Vee=a("strong"),Gze=o("roberta"),Oze=o(" \u2014 "),ck=a("a"),Vze=o("RobertaConfig"),Xze=o(" (RoBERTa model)"),zze=l(),Am=a("li"),Xee=a("strong"),Qze=o("roformer"),Wze=o(" \u2014 "),fk=a("a"),Hze=o("RoFormerConfig"),Uze=o(" (RoFormer model)"),Jze=l(),ym=a("li"),zee=a("strong"),Yze=o("segformer"),Kze=o(" \u2014 "),mk=a("a"),Zze=o("SegformerConfig"),eQe=o(" (SegFormer model)"),oQe=l(),Lm=a("li"),Qee=a("strong"),rQe=o("sew"),tQe=o(" \u2014 "),gk=a("a"),aQe=o("SEWConfig"),nQe=o(" (SEW model)"),sQe=l(),xm=a("li"),Wee=a("strong"),lQe=o("sew-d"),iQe=o(" \u2014 "),hk=a("a"),dQe=o("SEWDConfig"),cQe=o(" (SEW-D model)"),fQe=l(),$m=a("li"),Hee=a("strong"),mQe=o("speech-encoder-decoder"),gQe=o(" \u2014 "),pk=a("a"),hQe=o("SpeechEncoderDecoderConfig"),pQe=o(" (Speech Encoder decoder model)"),uQe=l(),km=a("li"),Uee=a("strong"),_Qe=o("speech_to_text"),bQe=o(" \u2014 "),uk=a("a"),vQe=o("Speech2TextConfig"),FQe=o(" (Speech2Text model)"),TQe=l(),Sm=a("li"),Jee=a("strong"),MQe=o("speech_to_text_2"),EQe=o(" \u2014 "),_k=a("a"),CQe=o("Speech2Text2Config"),wQe=o(" (Speech2Text2 model)"),AQe=l(),Rm=a("li"),Yee=a("strong"),yQe=o("splinter"),LQe=o(" \u2014 "),bk=a("a"),xQe=o("SplinterConfig"),$Qe=o(" (Splinter model)"),kQe=l(),Bm=a("li"),Kee=a("strong"),SQe=o("squeezebert"),RQe=o(" \u2014 "),vk=a("a"),BQe=o("SqueezeBertConfig"),PQe=o(" (SqueezeBERT model)"),IQe=l(),Pm=a("li"),Zee=a("strong"),qQe=o("swin"),NQe=o(" \u2014 "),Fk=a("a"),jQe=o("SwinConfig"),DQe=o(" (Swin model)"),GQe=l(),Im=a("li"),eoe=a("strong"),OQe=o("t5"),VQe=o(" \u2014 "),Tk=a("a"),XQe=o("T5Config"),zQe=o(" (T5 model)"),QQe=l(),qm=a("li"),ooe=a("strong"),WQe=o("tapas"),HQe=o(" \u2014 "),Mk=a("a"),UQe=o("TapasConfig"),JQe=o(" (TAPAS model)"),YQe=l(),Nm=a("li"),roe=a("strong"),KQe=o("tapex"),ZQe=o(" \u2014 "),Ek=a("a"),eWe=o("BartConfig"),oWe=o(" (TAPEX model)"),rWe=l(),jm=a("li"),toe=a("strong"),tWe=o("transfo-xl"),aWe=o(" \u2014 "),Ck=a("a"),nWe=o("TransfoXLConfig"),sWe=o(" (Transformer-XL model)"),lWe=l(),Dm=a("li"),aoe=a("strong"),iWe=o("trocr"),dWe=o(" \u2014 "),wk=a("a"),cWe=o("TrOCRConfig"),fWe=o(" (TrOCR model)"),mWe=l(),Gm=a("li"),noe=a("strong"),gWe=o("unispeech"),hWe=o(" \u2014 "),Ak=a("a"),pWe=o("UniSpeechConfig"),uWe=o(" (UniSpeech model)"),_We=l(),Om=a("li"),soe=a("strong"),bWe=o("unispeech-sat"),vWe=o(" \u2014 "),yk=a("a"),FWe=o("UniSpeechSatConfig"),TWe=o(" (UniSpeechSat model)"),MWe=l(),Vm=a("li"),loe=a("strong"),EWe=o("van"),CWe=o(" \u2014 "),Lk=a("a"),wWe=o("VanConfig"),AWe=o(" (VAN model)"),yWe=l(),Xm=a("li"),ioe=a("strong"),LWe=o("vilt"),xWe=o(" \u2014 "),xk=a("a"),$We=o("ViltConfig"),kWe=o(" (ViLT model)"),SWe=l(),zm=a("li"),doe=a("strong"),RWe=o("vision-encoder-decoder"),BWe=o(" \u2014 "),$k=a("a"),PWe=o("VisionEncoderDecoderConfig"),IWe=o(" (Vision Encoder decoder model)"),qWe=l(),Qm=a("li"),coe=a("strong"),NWe=o("vision-text-dual-encoder"),jWe=o(" \u2014 "),kk=a("a"),DWe=o("VisionTextDualEncoderConfig"),GWe=o(" (VisionTextDualEncoder model)"),OWe=l(),Wm=a("li"),foe=a("strong"),VWe=o("visual_bert"),XWe=o(" \u2014 "),Sk=a("a"),zWe=o("VisualBertConfig"),QWe=o(" (VisualBert model)"),WWe=l(),Hm=a("li"),moe=a("strong"),HWe=o("vit"),UWe=o(" \u2014 "),Rk=a("a"),JWe=o("ViTConfig"),YWe=o(" (ViT model)"),KWe=l(),Um=a("li"),goe=a("strong"),ZWe=o("vit_mae"),eHe=o(" \u2014 "),Bk=a("a"),oHe=o("ViTMAEConfig"),rHe=o(" (ViTMAE model)"),tHe=l(),Jm=a("li"),hoe=a("strong"),aHe=o("wav2vec2"),nHe=o(" \u2014 "),Pk=a("a"),sHe=o("Wav2Vec2Config"),lHe=o(" (Wav2Vec2 model)"),iHe=l(),Ym=a("li"),poe=a("strong"),dHe=o("wavlm"),cHe=o(" \u2014 "),Ik=a("a"),fHe=o("WavLMConfig"),mHe=o(" (WavLM model)"),gHe=l(),Km=a("li"),uoe=a("strong"),hHe=o("xglm"),pHe=o(" \u2014 "),qk=a("a"),uHe=o("XGLMConfig"),_He=o(" (XGLM model)"),bHe=l(),Zm=a("li"),_oe=a("strong"),vHe=o("xlm"),FHe=o(" \u2014 "),Nk=a("a"),THe=o("XLMConfig"),MHe=o(" (XLM model)"),EHe=l(),eg=a("li"),boe=a("strong"),CHe=o("xlm-prophetnet"),wHe=o(" \u2014 "),jk=a("a"),AHe=o("XLMProphetNetConfig"),yHe=o(" (XLMProphetNet model)"),LHe=l(),og=a("li"),voe=a("strong"),xHe=o("xlm-roberta"),$He=o(" \u2014 "),Dk=a("a"),kHe=o("XLMRobertaConfig"),SHe=o(" (XLM-RoBERTa model)"),RHe=l(),rg=a("li"),Foe=a("strong"),BHe=o("xlm-roberta-xl"),PHe=o(" \u2014 "),Gk=a("a"),IHe=o("XLMRobertaXLConfig"),qHe=o(" (XLM-RoBERTa-XL model)"),NHe=l(),tg=a("li"),Toe=a("strong"),jHe=o("xlnet"),DHe=o(" \u2014 "),Ok=a("a"),GHe=o("XLNetConfig"),OHe=o(" (XLNet model)"),VHe=l(),ag=a("li"),Moe=a("strong"),XHe=o("yolos"),zHe=o(" \u2014 "),Vk=a("a"),QHe=o("YolosConfig"),WHe=o(" (YOLOS model)"),HHe=l(),ng=a("li"),Eoe=a("strong"),UHe=o("yoso"),JHe=o(" \u2014 "),Xk=a("a"),YHe=o("YosoConfig"),KHe=o(" (YOSO model)"),ZHe=l(),F(sg.$$.fragment),eUe=l(),lg=a("div"),F(Iw.$$.fragment),oUe=l(),Coe=a("p"),rUe=o("Register a new configuration for this class."),zBe=l(),mi=a("h2"),ig=a("a"),woe=a("span"),F(qw.$$.fragment),tUe=l(),Aoe=a("span"),aUe=o("AutoTokenizer"),QBe=l(),wo=a("div"),F(Nw.$$.fragment),nUe=l(),jw=a("p"),sUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),zk=a("a"),lUe=o("AutoTokenizer.from_pretrained()"),iUe=o(" class method."),dUe=l(),Dw=a("p"),cUe=o("This class cannot be instantiated directly using "),yoe=a("code"),fUe=o("__init__()"),mUe=o(" (throws an error)."),gUe=l(),Er=a("div"),F(Gw.$$.fragment),hUe=l(),Loe=a("p"),pUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uUe=l(),Ta=a("p"),_Ue=o("The tokenizer class to instantiate is selected based on the "),xoe=a("code"),bUe=o("model_type"),vUe=o(` property of the config object (either
passed as an argument or loaded from `),$oe=a("code"),FUe=o("pretrained_model_name_or_path"),TUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),koe=a("code"),MUe=o("pretrained_model_name_or_path"),EUe=o(":"),CUe=l(),k=a("ul"),yn=a("li"),Soe=a("strong"),wUe=o("albert"),AUe=o(" \u2014 "),Qk=a("a"),yUe=o("AlbertTokenizer"),LUe=o(" or "),Wk=a("a"),xUe=o("AlbertTokenizerFast"),$Ue=o(" (ALBERT model)"),kUe=l(),Ln=a("li"),Roe=a("strong"),SUe=o("bart"),RUe=o(" \u2014 "),Hk=a("a"),BUe=o("BartTokenizer"),PUe=o(" or "),Uk=a("a"),IUe=o("BartTokenizerFast"),qUe=o(" (BART model)"),NUe=l(),xn=a("li"),Boe=a("strong"),jUe=o("barthez"),DUe=o(" \u2014 "),Jk=a("a"),GUe=o("BarthezTokenizer"),OUe=o(" or "),Yk=a("a"),VUe=o("BarthezTokenizerFast"),XUe=o(" (BARThez model)"),zUe=l(),dg=a("li"),Poe=a("strong"),QUe=o("bartpho"),WUe=o(" \u2014 "),Kk=a("a"),HUe=o("BartphoTokenizer"),UUe=o(" (BARTpho model)"),JUe=l(),$n=a("li"),Ioe=a("strong"),YUe=o("bert"),KUe=o(" \u2014 "),Zk=a("a"),ZUe=o("BertTokenizer"),eJe=o(" or "),eS=a("a"),oJe=o("BertTokenizerFast"),rJe=o(" (BERT model)"),tJe=l(),cg=a("li"),qoe=a("strong"),aJe=o("bert-generation"),nJe=o(" \u2014 "),oS=a("a"),sJe=o("BertGenerationTokenizer"),lJe=o(" (Bert Generation model)"),iJe=l(),fg=a("li"),Noe=a("strong"),dJe=o("bert-japanese"),cJe=o(" \u2014 "),rS=a("a"),fJe=o("BertJapaneseTokenizer"),mJe=o(" (BertJapanese model)"),gJe=l(),mg=a("li"),joe=a("strong"),hJe=o("bertweet"),pJe=o(" \u2014 "),tS=a("a"),uJe=o("BertweetTokenizer"),_Je=o(" (Bertweet model)"),bJe=l(),kn=a("li"),Doe=a("strong"),vJe=o("big_bird"),FJe=o(" \u2014 "),aS=a("a"),TJe=o("BigBirdTokenizer"),MJe=o(" or "),nS=a("a"),EJe=o("BigBirdTokenizerFast"),CJe=o(" (BigBird model)"),wJe=l(),Sn=a("li"),Goe=a("strong"),AJe=o("bigbird_pegasus"),yJe=o(" \u2014 "),sS=a("a"),LJe=o("PegasusTokenizer"),xJe=o(" or "),lS=a("a"),$Je=o("PegasusTokenizerFast"),kJe=o(" (BigBirdPegasus model)"),SJe=l(),Rn=a("li"),Ooe=a("strong"),RJe=o("blenderbot"),BJe=o(" \u2014 "),iS=a("a"),PJe=o("BlenderbotTokenizer"),IJe=o(" or "),dS=a("a"),qJe=o("BlenderbotTokenizerFast"),NJe=o(" (Blenderbot model)"),jJe=l(),gg=a("li"),Voe=a("strong"),DJe=o("blenderbot-small"),GJe=o(" \u2014 "),cS=a("a"),OJe=o("BlenderbotSmallTokenizer"),VJe=o(" (BlenderbotSmall model)"),XJe=l(),hg=a("li"),Xoe=a("strong"),zJe=o("byt5"),QJe=o(" \u2014 "),fS=a("a"),WJe=o("ByT5Tokenizer"),HJe=o(" (ByT5 model)"),UJe=l(),Bn=a("li"),zoe=a("strong"),JJe=o("camembert"),YJe=o(" \u2014 "),mS=a("a"),KJe=o("CamembertTokenizer"),ZJe=o(" or "),gS=a("a"),eYe=o("CamembertTokenizerFast"),oYe=o(" (CamemBERT model)"),rYe=l(),pg=a("li"),Qoe=a("strong"),tYe=o("canine"),aYe=o(" \u2014 "),hS=a("a"),nYe=o("CanineTokenizer"),sYe=o(" (Canine model)"),lYe=l(),Pn=a("li"),Woe=a("strong"),iYe=o("clip"),dYe=o(" \u2014 "),pS=a("a"),cYe=o("CLIPTokenizer"),fYe=o(" or "),uS=a("a"),mYe=o("CLIPTokenizerFast"),gYe=o(" (CLIP model)"),hYe=l(),In=a("li"),Hoe=a("strong"),pYe=o("convbert"),uYe=o(" \u2014 "),_S=a("a"),_Ye=o("ConvBertTokenizer"),bYe=o(" or "),bS=a("a"),vYe=o("ConvBertTokenizerFast"),FYe=o(" (ConvBERT model)"),TYe=l(),qn=a("li"),Uoe=a("strong"),MYe=o("cpm"),EYe=o(" \u2014 "),vS=a("a"),CYe=o("CpmTokenizer"),wYe=o(" or "),FS=a("a"),AYe=o("CpmTokenizerFast"),yYe=o(" (CPM model)"),LYe=l(),ug=a("li"),Joe=a("strong"),xYe=o("ctrl"),$Ye=o(" \u2014 "),TS=a("a"),kYe=o("CTRLTokenizer"),SYe=o(" (CTRL model)"),RYe=l(),Nn=a("li"),Yoe=a("strong"),BYe=o("data2vec-text"),PYe=o(" \u2014 "),MS=a("a"),IYe=o("RobertaTokenizer"),qYe=o(" or "),ES=a("a"),NYe=o("RobertaTokenizerFast"),jYe=o(" (Data2VecText model)"),DYe=l(),jn=a("li"),Koe=a("strong"),GYe=o("deberta"),OYe=o(" \u2014 "),CS=a("a"),VYe=o("DebertaTokenizer"),XYe=o(" or "),wS=a("a"),zYe=o("DebertaTokenizerFast"),QYe=o(" (DeBERTa model)"),WYe=l(),Dn=a("li"),Zoe=a("strong"),HYe=o("deberta-v2"),UYe=o(" \u2014 "),AS=a("a"),JYe=o("DebertaV2Tokenizer"),YYe=o(" or "),yS=a("a"),KYe=o("DebertaV2TokenizerFast"),ZYe=o(" (DeBERTa-v2 model)"),eKe=l(),Gn=a("li"),ere=a("strong"),oKe=o("distilbert"),rKe=o(" \u2014 "),LS=a("a"),tKe=o("DistilBertTokenizer"),aKe=o(" or "),xS=a("a"),nKe=o("DistilBertTokenizerFast"),sKe=o(" (DistilBERT model)"),lKe=l(),On=a("li"),ore=a("strong"),iKe=o("dpr"),dKe=o(" \u2014 "),$S=a("a"),cKe=o("DPRQuestionEncoderTokenizer"),fKe=o(" or "),kS=a("a"),mKe=o("DPRQuestionEncoderTokenizerFast"),gKe=o(" (DPR model)"),hKe=l(),Vn=a("li"),rre=a("strong"),pKe=o("electra"),uKe=o(" \u2014 "),SS=a("a"),_Ke=o("ElectraTokenizer"),bKe=o(" or "),RS=a("a"),vKe=o("ElectraTokenizerFast"),FKe=o(" (ELECTRA model)"),TKe=l(),_g=a("li"),tre=a("strong"),MKe=o("flaubert"),EKe=o(" \u2014 "),BS=a("a"),CKe=o("FlaubertTokenizer"),wKe=o(" (FlauBERT model)"),AKe=l(),Xn=a("li"),are=a("strong"),yKe=o("fnet"),LKe=o(" \u2014 "),PS=a("a"),xKe=o("FNetTokenizer"),$Ke=o(" or "),IS=a("a"),kKe=o("FNetTokenizerFast"),SKe=o(" (FNet model)"),RKe=l(),bg=a("li"),nre=a("strong"),BKe=o("fsmt"),PKe=o(" \u2014 "),qS=a("a"),IKe=o("FSMTTokenizer"),qKe=o(" (FairSeq Machine-Translation model)"),NKe=l(),zn=a("li"),sre=a("strong"),jKe=o("funnel"),DKe=o(" \u2014 "),NS=a("a"),GKe=o("FunnelTokenizer"),OKe=o(" or "),jS=a("a"),VKe=o("FunnelTokenizerFast"),XKe=o(" (Funnel Transformer model)"),zKe=l(),Qn=a("li"),lre=a("strong"),QKe=o("gpt2"),WKe=o(" \u2014 "),DS=a("a"),HKe=o("GPT2Tokenizer"),UKe=o(" or "),GS=a("a"),JKe=o("GPT2TokenizerFast"),YKe=o(" (OpenAI GPT-2 model)"),KKe=l(),Wn=a("li"),ire=a("strong"),ZKe=o("gpt_neo"),eZe=o(" \u2014 "),OS=a("a"),oZe=o("GPT2Tokenizer"),rZe=o(" or "),VS=a("a"),tZe=o("GPT2TokenizerFast"),aZe=o(" (GPT Neo model)"),nZe=l(),Hn=a("li"),dre=a("strong"),sZe=o("gptj"),lZe=o(" \u2014 "),XS=a("a"),iZe=o("GPT2Tokenizer"),dZe=o(" or "),zS=a("a"),cZe=o("GPT2TokenizerFast"),fZe=o(" (GPT-J model)"),mZe=l(),Un=a("li"),cre=a("strong"),gZe=o("herbert"),hZe=o(" \u2014 "),QS=a("a"),pZe=o("HerbertTokenizer"),uZe=o(" or "),WS=a("a"),_Ze=o("HerbertTokenizerFast"),bZe=o(" (HerBERT model)"),vZe=l(),vg=a("li"),fre=a("strong"),FZe=o("hubert"),TZe=o(" \u2014 "),HS=a("a"),MZe=o("Wav2Vec2CTCTokenizer"),EZe=o(" (Hubert model)"),CZe=l(),Jn=a("li"),mre=a("strong"),wZe=o("ibert"),AZe=o(" \u2014 "),US=a("a"),yZe=o("RobertaTokenizer"),LZe=o(" or "),JS=a("a"),xZe=o("RobertaTokenizerFast"),$Ze=o(" (I-BERT model)"),kZe=l(),Yn=a("li"),gre=a("strong"),SZe=o("layoutlm"),RZe=o(" \u2014 "),YS=a("a"),BZe=o("LayoutLMTokenizer"),PZe=o(" or "),KS=a("a"),IZe=o("LayoutLMTokenizerFast"),qZe=o(" (LayoutLM model)"),NZe=l(),Kn=a("li"),hre=a("strong"),jZe=o("layoutlmv2"),DZe=o(" \u2014 "),ZS=a("a"),GZe=o("LayoutLMv2Tokenizer"),OZe=o(" or "),eR=a("a"),VZe=o("LayoutLMv2TokenizerFast"),XZe=o(" (LayoutLMv2 model)"),zZe=l(),Zn=a("li"),pre=a("strong"),QZe=o("layoutlmv3"),WZe=o(" \u2014 "),oR=a("a"),HZe=o("LayoutLMv2Tokenizer"),UZe=o(" or "),rR=a("a"),JZe=o("LayoutLMv2TokenizerFast"),YZe=o(" (LayoutLMv3 model)"),KZe=l(),es=a("li"),ure=a("strong"),ZZe=o("layoutxlm"),eeo=o(" \u2014 "),tR=a("a"),oeo=o("LayoutXLMTokenizer"),reo=o(" or "),aR=a("a"),teo=o("LayoutXLMTokenizerFast"),aeo=o(" (LayoutXLM model)"),neo=l(),os=a("li"),_re=a("strong"),seo=o("led"),leo=o(" \u2014 "),nR=a("a"),ieo=o("LEDTokenizer"),deo=o(" or "),sR=a("a"),ceo=o("LEDTokenizerFast"),feo=o(" (LED model)"),meo=l(),rs=a("li"),bre=a("strong"),geo=o("longformer"),heo=o(" \u2014 "),lR=a("a"),peo=o("LongformerTokenizer"),ueo=o(" or "),iR=a("a"),_eo=o("LongformerTokenizerFast"),beo=o(" (Longformer model)"),veo=l(),Fg=a("li"),vre=a("strong"),Feo=o("luke"),Teo=o(" \u2014 "),dR=a("a"),Meo=o("LukeTokenizer"),Eeo=o(" (LUKE model)"),Ceo=l(),ts=a("li"),Fre=a("strong"),weo=o("lxmert"),Aeo=o(" \u2014 "),cR=a("a"),yeo=o("LxmertTokenizer"),Leo=o(" or "),fR=a("a"),xeo=o("LxmertTokenizerFast"),$eo=o(" (LXMERT model)"),keo=l(),Tg=a("li"),Tre=a("strong"),Seo=o("m2m_100"),Reo=o(" \u2014 "),mR=a("a"),Beo=o("M2M100Tokenizer"),Peo=o(" (M2M100 model)"),Ieo=l(),Mg=a("li"),Mre=a("strong"),qeo=o("marian"),Neo=o(" \u2014 "),gR=a("a"),jeo=o("MarianTokenizer"),Deo=o(" (Marian model)"),Geo=l(),as=a("li"),Ere=a("strong"),Oeo=o("mbart"),Veo=o(" \u2014 "),hR=a("a"),Xeo=o("MBartTokenizer"),zeo=o(" or "),pR=a("a"),Qeo=o("MBartTokenizerFast"),Weo=o(" (mBART model)"),Heo=l(),ns=a("li"),Cre=a("strong"),Ueo=o("mbart50"),Jeo=o(" \u2014 "),uR=a("a"),Yeo=o("MBart50Tokenizer"),Keo=o(" or "),_R=a("a"),Zeo=o("MBart50TokenizerFast"),eoo=o(" (mBART-50 model)"),ooo=l(),ss=a("li"),wre=a("strong"),roo=o("megatron-bert"),too=o(" \u2014 "),bR=a("a"),aoo=o("BertTokenizer"),noo=o(" or "),vR=a("a"),soo=o("BertTokenizerFast"),loo=o(" (MegatronBert model)"),ioo=l(),Eg=a("li"),Are=a("strong"),doo=o("mluke"),coo=o(" \u2014 "),FR=a("a"),foo=o("MLukeTokenizer"),moo=o(" (mLUKE model)"),goo=l(),ls=a("li"),yre=a("strong"),hoo=o("mobilebert"),poo=o(" \u2014 "),TR=a("a"),uoo=o("MobileBertTokenizer"),_oo=o(" or "),MR=a("a"),boo=o("MobileBertTokenizerFast"),voo=o(" (MobileBERT model)"),Foo=l(),is=a("li"),Lre=a("strong"),Too=o("mpnet"),Moo=o(" \u2014 "),ER=a("a"),Eoo=o("MPNetTokenizer"),Coo=o(" or "),CR=a("a"),woo=o("MPNetTokenizerFast"),Aoo=o(" (MPNet model)"),yoo=l(),ds=a("li"),xre=a("strong"),Loo=o("mt5"),xoo=o(" \u2014 "),wR=a("a"),$oo=o("MT5Tokenizer"),koo=o(" or "),AR=a("a"),Soo=o("MT5TokenizerFast"),Roo=o(" (mT5 model)"),Boo=l(),cs=a("li"),$re=a("strong"),Poo=o("nystromformer"),Ioo=o(" \u2014 "),yR=a("a"),qoo=o("AlbertTokenizer"),Noo=o(" or "),LR=a("a"),joo=o("AlbertTokenizerFast"),Doo=o(" (Nystromformer model)"),Goo=l(),fs=a("li"),kre=a("strong"),Ooo=o("openai-gpt"),Voo=o(" \u2014 "),xR=a("a"),Xoo=o("OpenAIGPTTokenizer"),zoo=o(" or "),$R=a("a"),Qoo=o("OpenAIGPTTokenizerFast"),Woo=o(" (OpenAI GPT model)"),Hoo=l(),ms=a("li"),Sre=a("strong"),Uoo=o("pegasus"),Joo=o(" \u2014 "),kR=a("a"),Yoo=o("PegasusTokenizer"),Koo=o(" or "),SR=a("a"),Zoo=o("PegasusTokenizerFast"),ero=o(" (Pegasus model)"),oro=l(),Cg=a("li"),Rre=a("strong"),rro=o("perceiver"),tro=o(" \u2014 "),RR=a("a"),aro=o("PerceiverTokenizer"),nro=o(" (Perceiver model)"),sro=l(),wg=a("li"),Bre=a("strong"),lro=o("phobert"),iro=o(" \u2014 "),BR=a("a"),dro=o("PhobertTokenizer"),cro=o(" (PhoBERT model)"),fro=l(),Ag=a("li"),Pre=a("strong"),mro=o("plbart"),gro=o(" \u2014 "),PR=a("a"),hro=o("PLBartTokenizer"),pro=o(" (PLBart model)"),uro=l(),yg=a("li"),Ire=a("strong"),_ro=o("prophetnet"),bro=o(" \u2014 "),IR=a("a"),vro=o("ProphetNetTokenizer"),Fro=o(" (ProphetNet model)"),Tro=l(),gs=a("li"),qre=a("strong"),Mro=o("qdqbert"),Ero=o(" \u2014 "),qR=a("a"),Cro=o("BertTokenizer"),wro=o(" or "),NR=a("a"),Aro=o("BertTokenizerFast"),yro=o(" (QDQBert model)"),Lro=l(),Lg=a("li"),Nre=a("strong"),xro=o("rag"),$ro=o(" \u2014 "),jR=a("a"),kro=o("RagTokenizer"),Sro=o(" (RAG model)"),Rro=l(),hs=a("li"),jre=a("strong"),Bro=o("realm"),Pro=o(" \u2014 "),DR=a("a"),Iro=o("RealmTokenizer"),qro=o(" or "),GR=a("a"),Nro=o("RealmTokenizerFast"),jro=o(" (Realm model)"),Dro=l(),ps=a("li"),Dre=a("strong"),Gro=o("reformer"),Oro=o(" \u2014 "),OR=a("a"),Vro=o("ReformerTokenizer"),Xro=o(" or "),VR=a("a"),zro=o("ReformerTokenizerFast"),Qro=o(" (Reformer model)"),Wro=l(),us=a("li"),Gre=a("strong"),Hro=o("rembert"),Uro=o(" \u2014 "),XR=a("a"),Jro=o("RemBertTokenizer"),Yro=o(" or "),zR=a("a"),Kro=o("RemBertTokenizerFast"),Zro=o(" (RemBERT model)"),eto=l(),_s=a("li"),Ore=a("strong"),oto=o("retribert"),rto=o(" \u2014 "),QR=a("a"),tto=o("RetriBertTokenizer"),ato=o(" or "),WR=a("a"),nto=o("RetriBertTokenizerFast"),sto=o(" (RetriBERT model)"),lto=l(),bs=a("li"),Vre=a("strong"),ito=o("roberta"),dto=o(" \u2014 "),HR=a("a"),cto=o("RobertaTokenizer"),fto=o(" or "),UR=a("a"),mto=o("RobertaTokenizerFast"),gto=o(" (RoBERTa model)"),hto=l(),vs=a("li"),Xre=a("strong"),pto=o("roformer"),uto=o(" \u2014 "),JR=a("a"),_to=o("RoFormerTokenizer"),bto=o(" or "),YR=a("a"),vto=o("RoFormerTokenizerFast"),Fto=o(" (RoFormer model)"),Tto=l(),xg=a("li"),zre=a("strong"),Mto=o("speech_to_text"),Eto=o(" \u2014 "),KR=a("a"),Cto=o("Speech2TextTokenizer"),wto=o(" (Speech2Text model)"),Ato=l(),$g=a("li"),Qre=a("strong"),yto=o("speech_to_text_2"),Lto=o(" \u2014 "),ZR=a("a"),xto=o("Speech2Text2Tokenizer"),$to=o(" (Speech2Text2 model)"),kto=l(),Fs=a("li"),Wre=a("strong"),Sto=o("splinter"),Rto=o(" \u2014 "),eB=a("a"),Bto=o("SplinterTokenizer"),Pto=o(" or "),oB=a("a"),Ito=o("SplinterTokenizerFast"),qto=o(" (Splinter model)"),Nto=l(),Ts=a("li"),Hre=a("strong"),jto=o("squeezebert"),Dto=o(" \u2014 "),rB=a("a"),Gto=o("SqueezeBertTokenizer"),Oto=o(" or "),tB=a("a"),Vto=o("SqueezeBertTokenizerFast"),Xto=o(" (SqueezeBERT model)"),zto=l(),Ms=a("li"),Ure=a("strong"),Qto=o("t5"),Wto=o(" \u2014 "),aB=a("a"),Hto=o("T5Tokenizer"),Uto=o(" or "),nB=a("a"),Jto=o("T5TokenizerFast"),Yto=o(" (T5 model)"),Kto=l(),kg=a("li"),Jre=a("strong"),Zto=o("tapas"),eao=o(" \u2014 "),sB=a("a"),oao=o("TapasTokenizer"),rao=o(" (TAPAS model)"),tao=l(),Sg=a("li"),Yre=a("strong"),aao=o("tapex"),nao=o(" \u2014 "),lB=a("a"),sao=o("TapexTokenizer"),lao=o(" (TAPEX model)"),iao=l(),Rg=a("li"),Kre=a("strong"),dao=o("transfo-xl"),cao=o(" \u2014 "),iB=a("a"),fao=o("TransfoXLTokenizer"),mao=o(" (Transformer-XL model)"),gao=l(),Es=a("li"),Zre=a("strong"),hao=o("visual_bert"),pao=o(" \u2014 "),dB=a("a"),uao=o("BertTokenizer"),_ao=o(" or "),cB=a("a"),bao=o("BertTokenizerFast"),vao=o(" (VisualBert model)"),Fao=l(),Bg=a("li"),ete=a("strong"),Tao=o("wav2vec2"),Mao=o(" \u2014 "),fB=a("a"),Eao=o("Wav2Vec2CTCTokenizer"),Cao=o(" (Wav2Vec2 model)"),wao=l(),Pg=a("li"),ote=a("strong"),Aao=o("wav2vec2_phoneme"),yao=o(" \u2014 "),mB=a("a"),Lao=o("Wav2Vec2PhonemeCTCTokenizer"),xao=o(" (Wav2Vec2Phoneme model)"),$ao=l(),Cs=a("li"),rte=a("strong"),kao=o("xglm"),Sao=o(" \u2014 "),gB=a("a"),Rao=o("XGLMTokenizer"),Bao=o(" or "),hB=a("a"),Pao=o("XGLMTokenizerFast"),Iao=o(" (XGLM model)"),qao=l(),Ig=a("li"),tte=a("strong"),Nao=o("xlm"),jao=o(" \u2014 "),pB=a("a"),Dao=o("XLMTokenizer"),Gao=o(" (XLM model)"),Oao=l(),qg=a("li"),ate=a("strong"),Vao=o("xlm-prophetnet"),Xao=o(" \u2014 "),uB=a("a"),zao=o("XLMProphetNetTokenizer"),Qao=o(" (XLMProphetNet model)"),Wao=l(),ws=a("li"),nte=a("strong"),Hao=o("xlm-roberta"),Uao=o(" \u2014 "),_B=a("a"),Jao=o("XLMRobertaTokenizer"),Yao=o(" or "),bB=a("a"),Kao=o("XLMRobertaTokenizerFast"),Zao=o(" (XLM-RoBERTa model)"),eno=l(),As=a("li"),ste=a("strong"),ono=o("xlm-roberta-xl"),rno=o(" \u2014 "),vB=a("a"),tno=o("RobertaTokenizer"),ano=o(" or "),FB=a("a"),nno=o("RobertaTokenizerFast"),sno=o(" (XLM-RoBERTa-XL model)"),lno=l(),ys=a("li"),lte=a("strong"),ino=o("xlnet"),dno=o(" \u2014 "),TB=a("a"),cno=o("XLNetTokenizer"),fno=o(" or "),MB=a("a"),mno=o("XLNetTokenizerFast"),gno=o(" (XLNet model)"),hno=l(),Ls=a("li"),ite=a("strong"),pno=o("yoso"),uno=o(" \u2014 "),EB=a("a"),_no=o("AlbertTokenizer"),bno=o(" or "),CB=a("a"),vno=o("AlbertTokenizerFast"),Fno=o(" (YOSO model)"),Tno=l(),F(Ng.$$.fragment),Mno=l(),jg=a("div"),F(Ow.$$.fragment),Eno=l(),dte=a("p"),Cno=o("Register a new tokenizer in this mapping."),WBe=l(),gi=a("h2"),Dg=a("a"),cte=a("span"),F(Vw.$$.fragment),wno=l(),fte=a("span"),Ano=o("AutoFeatureExtractor"),HBe=l(),Ao=a("div"),F(Xw.$$.fragment),yno=l(),zw=a("p"),Lno=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),wB=a("a"),xno=o("AutoFeatureExtractor.from_pretrained()"),$no=o(" class method."),kno=l(),Qw=a("p"),Sno=o("This class cannot be instantiated directly using "),mte=a("code"),Rno=o("__init__()"),Bno=o(" (throws an error)."),Pno=l(),Qe=a("div"),F(Ww.$$.fragment),Ino=l(),gte=a("p"),qno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Nno=l(),Ma=a("p"),jno=o("The feature extractor class to instantiate is selected based on the "),hte=a("code"),Dno=o("model_type"),Gno=o(` property of the config object
(either passed as an argument or loaded from `),pte=a("code"),Ono=o("pretrained_model_name_or_path"),Vno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ute=a("code"),Xno=o("pretrained_model_name_or_path"),zno=o(":"),Qno=l(),oe=a("ul"),Gg=a("li"),_te=a("strong"),Wno=o("beit"),Hno=o(" \u2014 "),AB=a("a"),Uno=o("BeitFeatureExtractor"),Jno=o(" (BEiT model)"),Yno=l(),Og=a("li"),bte=a("strong"),Kno=o("clip"),Zno=o(" \u2014 "),yB=a("a"),eso=o("CLIPFeatureExtractor"),oso=o(" (CLIP model)"),rso=l(),Vg=a("li"),vte=a("strong"),tso=o("convnext"),aso=o(" \u2014 "),LB=a("a"),nso=o("ConvNextFeatureExtractor"),sso=o(" (ConvNext model)"),lso=l(),Xg=a("li"),Fte=a("strong"),iso=o("data2vec-audio"),dso=o(" \u2014 "),xB=a("a"),cso=o("Wav2Vec2FeatureExtractor"),fso=o(" (Data2VecAudio model)"),mso=l(),zg=a("li"),Tte=a("strong"),gso=o("data2vec-vision"),hso=o(" \u2014 "),$B=a("a"),pso=o("BeitFeatureExtractor"),uso=o(" (Data2VecVision model)"),_so=l(),Qg=a("li"),Mte=a("strong"),bso=o("deit"),vso=o(" \u2014 "),kB=a("a"),Fso=o("DeiTFeatureExtractor"),Tso=o(" (DeiT model)"),Mso=l(),Wg=a("li"),Ete=a("strong"),Eso=o("detr"),Cso=o(" \u2014 "),SB=a("a"),wso=o("DetrFeatureExtractor"),Aso=o(" (DETR model)"),yso=l(),Hg=a("li"),Cte=a("strong"),Lso=o("dpt"),xso=o(" \u2014 "),RB=a("a"),$so=o("DPTFeatureExtractor"),kso=o(" (DPT model)"),Sso=l(),Ug=a("li"),wte=a("strong"),Rso=o("glpn"),Bso=o(" \u2014 "),BB=a("a"),Pso=o("GLPNFeatureExtractor"),Iso=o(" (GLPN model)"),qso=l(),Jg=a("li"),Ate=a("strong"),Nso=o("hubert"),jso=o(" \u2014 "),PB=a("a"),Dso=o("Wav2Vec2FeatureExtractor"),Gso=o(" (Hubert model)"),Oso=l(),Yg=a("li"),yte=a("strong"),Vso=o("layoutlmv2"),Xso=o(" \u2014 "),IB=a("a"),zso=o("LayoutLMv2FeatureExtractor"),Qso=o(" (LayoutLMv2 model)"),Wso=l(),Kg=a("li"),Lte=a("strong"),Hso=o("layoutlmv3"),Uso=o(" \u2014 "),qB=a("a"),Jso=o("LayoutLMv3FeatureExtractor"),Yso=o(" (LayoutLMv3 model)"),Kso=l(),Zg=a("li"),xte=a("strong"),Zso=o("maskformer"),elo=o(" \u2014 "),NB=a("a"),olo=o("MaskFormerFeatureExtractor"),rlo=o(" (MaskFormer model)"),tlo=l(),eh=a("li"),$te=a("strong"),alo=o("perceiver"),nlo=o(" \u2014 "),jB=a("a"),slo=o("PerceiverFeatureExtractor"),llo=o(" (Perceiver model)"),ilo=l(),oh=a("li"),kte=a("strong"),dlo=o("poolformer"),clo=o(" \u2014 "),DB=a("a"),flo=o("PoolFormerFeatureExtractor"),mlo=o(" (PoolFormer model)"),glo=l(),rh=a("li"),Ste=a("strong"),hlo=o("regnet"),plo=o(" \u2014 "),GB=a("a"),ulo=o("ConvNextFeatureExtractor"),_lo=o(" (RegNet model)"),blo=l(),th=a("li"),Rte=a("strong"),vlo=o("resnet"),Flo=o(" \u2014 "),OB=a("a"),Tlo=o("ConvNextFeatureExtractor"),Mlo=o(" (ResNet model)"),Elo=l(),ah=a("li"),Bte=a("strong"),Clo=o("segformer"),wlo=o(" \u2014 "),VB=a("a"),Alo=o("SegformerFeatureExtractor"),ylo=o(" (SegFormer model)"),Llo=l(),nh=a("li"),Pte=a("strong"),xlo=o("speech_to_text"),$lo=o(" \u2014 "),XB=a("a"),klo=o("Speech2TextFeatureExtractor"),Slo=o(" (Speech2Text model)"),Rlo=l(),sh=a("li"),Ite=a("strong"),Blo=o("swin"),Plo=o(" \u2014 "),zB=a("a"),Ilo=o("ViTFeatureExtractor"),qlo=o(" (Swin model)"),Nlo=l(),lh=a("li"),qte=a("strong"),jlo=o("van"),Dlo=o(" \u2014 "),QB=a("a"),Glo=o("ConvNextFeatureExtractor"),Olo=o(" (VAN model)"),Vlo=l(),ih=a("li"),Nte=a("strong"),Xlo=o("vit"),zlo=o(" \u2014 "),WB=a("a"),Qlo=o("ViTFeatureExtractor"),Wlo=o(" (ViT model)"),Hlo=l(),dh=a("li"),jte=a("strong"),Ulo=o("vit_mae"),Jlo=o(" \u2014 "),HB=a("a"),Ylo=o("ViTFeatureExtractor"),Klo=o(" (ViTMAE model)"),Zlo=l(),ch=a("li"),Dte=a("strong"),eio=o("wav2vec2"),oio=o(" \u2014 "),UB=a("a"),rio=o("Wav2Vec2FeatureExtractor"),tio=o(" (Wav2Vec2 model)"),aio=l(),fh=a("li"),Gte=a("strong"),nio=o("yolos"),sio=o(" \u2014 "),JB=a("a"),lio=o("YolosFeatureExtractor"),iio=o(" (YOLOS model)"),dio=l(),F(mh.$$.fragment),cio=l(),F(gh.$$.fragment),fio=l(),hh=a("div"),F(Hw.$$.fragment),mio=l(),Ote=a("p"),gio=o("Register a new feature extractor for this class."),UBe=l(),hi=a("h2"),ph=a("a"),Vte=a("span"),F(Uw.$$.fragment),hio=l(),Xte=a("span"),pio=o("AutoProcessor"),JBe=l(),yo=a("div"),F(Jw.$$.fragment),uio=l(),Yw=a("p"),_io=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),YB=a("a"),bio=o("AutoProcessor.from_pretrained()"),vio=o(" class method."),Fio=l(),Kw=a("p"),Tio=o("This class cannot be instantiated directly using "),zte=a("code"),Mio=o("__init__()"),Eio=o(" (throws an error)."),Cio=l(),We=a("div"),F(Zw.$$.fragment),wio=l(),Qte=a("p"),Aio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),yio=l(),pi=a("p"),Lio=o("The processor class to instantiate is selected based on the "),Wte=a("code"),xio=o("model_type"),$io=o(` property of the config object (either
passed as an argument or loaded from `),Hte=a("code"),kio=o("pretrained_model_name_or_path"),Sio=o(" if possible):"),Rio=l(),be=a("ul"),uh=a("li"),Ute=a("strong"),Bio=o("clip"),Pio=o(" \u2014 "),KB=a("a"),Iio=o("CLIPProcessor"),qio=o(" (CLIP model)"),Nio=l(),_h=a("li"),Jte=a("strong"),jio=o("layoutlmv2"),Dio=o(" \u2014 "),ZB=a("a"),Gio=o("LayoutLMv2Processor"),Oio=o(" (LayoutLMv2 model)"),Vio=l(),bh=a("li"),Yte=a("strong"),Xio=o("layoutlmv3"),zio=o(" \u2014 "),eP=a("a"),Qio=o("LayoutLMv3Processor"),Wio=o(" (LayoutLMv3 model)"),Hio=l(),vh=a("li"),Kte=a("strong"),Uio=o("layoutxlm"),Jio=o(" \u2014 "),oP=a("a"),Yio=o("LayoutXLMProcessor"),Kio=o(" (LayoutXLM model)"),Zio=l(),Fh=a("li"),Zte=a("strong"),edo=o("sew"),odo=o(" \u2014 "),rP=a("a"),rdo=o("Wav2Vec2Processor"),tdo=o(" (SEW model)"),ado=l(),Th=a("li"),eae=a("strong"),ndo=o("sew-d"),sdo=o(" \u2014 "),tP=a("a"),ldo=o("Wav2Vec2Processor"),ido=o(" (SEW-D model)"),ddo=l(),Mh=a("li"),oae=a("strong"),cdo=o("speech_to_text"),fdo=o(" \u2014 "),aP=a("a"),mdo=o("Speech2TextProcessor"),gdo=o(" (Speech2Text model)"),hdo=l(),Eh=a("li"),rae=a("strong"),pdo=o("speech_to_text_2"),udo=o(" \u2014 "),nP=a("a"),_do=o("Speech2Text2Processor"),bdo=o(" (Speech2Text2 model)"),vdo=l(),Ch=a("li"),tae=a("strong"),Fdo=o("trocr"),Tdo=o(" \u2014 "),sP=a("a"),Mdo=o("TrOCRProcessor"),Edo=o(" (TrOCR model)"),Cdo=l(),wh=a("li"),aae=a("strong"),wdo=o("unispeech"),Ado=o(" \u2014 "),lP=a("a"),ydo=o("Wav2Vec2Processor"),Ldo=o(" (UniSpeech model)"),xdo=l(),Ah=a("li"),nae=a("strong"),$do=o("unispeech-sat"),kdo=o(" \u2014 "),iP=a("a"),Sdo=o("Wav2Vec2Processor"),Rdo=o(" (UniSpeechSat model)"),Bdo=l(),yh=a("li"),sae=a("strong"),Pdo=o("vilt"),Ido=o(" \u2014 "),dP=a("a"),qdo=o("ViltProcessor"),Ndo=o(" (ViLT model)"),jdo=l(),Lh=a("li"),lae=a("strong"),Ddo=o("vision-text-dual-encoder"),Gdo=o(" \u2014 "),cP=a("a"),Odo=o("VisionTextDualEncoderProcessor"),Vdo=o(" (VisionTextDualEncoder model)"),Xdo=l(),xh=a("li"),iae=a("strong"),zdo=o("wav2vec2"),Qdo=o(" \u2014 "),fP=a("a"),Wdo=o("Wav2Vec2Processor"),Hdo=o(" (Wav2Vec2 model)"),Udo=l(),$h=a("li"),dae=a("strong"),Jdo=o("wavlm"),Ydo=o(" \u2014 "),mP=a("a"),Kdo=o("Wav2Vec2Processor"),Zdo=o(" (WavLM model)"),eco=l(),F(kh.$$.fragment),oco=l(),F(Sh.$$.fragment),rco=l(),Rh=a("div"),F(eA.$$.fragment),tco=l(),cae=a("p"),aco=o("Register a new processor for this class."),YBe=l(),ui=a("h2"),Bh=a("a"),fae=a("span"),F(oA.$$.fragment),nco=l(),mae=a("span"),sco=o("AutoModel"),KBe=l(),Lo=a("div"),F(rA.$$.fragment),lco=l(),_i=a("p"),ico=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gP=a("a"),dco=o("from_pretrained()"),cco=o(" class method or the "),hP=a("a"),fco=o("from_config()"),mco=o(` class
method.`),gco=l(),tA=a("p"),hco=o("This class cannot be instantiated directly using "),gae=a("code"),pco=o("__init__()"),uco=o(" (throws an error)."),_co=l(),Zr=a("div"),F(aA.$$.fragment),bco=l(),hae=a("p"),vco=o("Instantiates one of the base model classes of the library from a configuration."),Fco=l(),bi=a("p"),Tco=o(`Note:
Loading a model from its configuration file does `),pae=a("strong"),Mco=o("not"),Eco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pP=a("a"),Cco=o("from_pretrained()"),wco=o(" to load the model weights."),Aco=l(),F(Ph.$$.fragment),yco=l(),He=a("div"),F(nA.$$.fragment),Lco=l(),uae=a("p"),xco=o("Instantiate one of the base model classes of the library from a pretrained model."),$co=l(),Ea=a("p"),kco=o("The model class to instantiate is selected based on the "),_ae=a("code"),Sco=o("model_type"),Rco=o(` property of the config object (either
passed as an argument or loaded from `),bae=a("code"),Bco=o("pretrained_model_name_or_path"),Pco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vae=a("code"),Ico=o("pretrained_model_name_or_path"),qco=o(":"),Nco=l(),x=a("ul"),Ih=a("li"),Fae=a("strong"),jco=o("albert"),Dco=o(" \u2014 "),uP=a("a"),Gco=o("AlbertModel"),Oco=o(" (ALBERT model)"),Vco=l(),qh=a("li"),Tae=a("strong"),Xco=o("bart"),zco=o(" \u2014 "),_P=a("a"),Qco=o("BartModel"),Wco=o(" (BART model)"),Hco=l(),Nh=a("li"),Mae=a("strong"),Uco=o("beit"),Jco=o(" \u2014 "),bP=a("a"),Yco=o("BeitModel"),Kco=o(" (BEiT model)"),Zco=l(),jh=a("li"),Eae=a("strong"),efo=o("bert"),ofo=o(" \u2014 "),vP=a("a"),rfo=o("BertModel"),tfo=o(" (BERT model)"),afo=l(),Dh=a("li"),Cae=a("strong"),nfo=o("bert-generation"),sfo=o(" \u2014 "),FP=a("a"),lfo=o("BertGenerationEncoder"),ifo=o(" (Bert Generation model)"),dfo=l(),Gh=a("li"),wae=a("strong"),cfo=o("big_bird"),ffo=o(" \u2014 "),TP=a("a"),mfo=o("BigBirdModel"),gfo=o(" (BigBird model)"),hfo=l(),Oh=a("li"),Aae=a("strong"),pfo=o("bigbird_pegasus"),ufo=o(" \u2014 "),MP=a("a"),_fo=o("BigBirdPegasusModel"),bfo=o(" (BigBirdPegasus model)"),vfo=l(),Vh=a("li"),yae=a("strong"),Ffo=o("blenderbot"),Tfo=o(" \u2014 "),EP=a("a"),Mfo=o("BlenderbotModel"),Efo=o(" (Blenderbot model)"),Cfo=l(),Xh=a("li"),Lae=a("strong"),wfo=o("blenderbot-small"),Afo=o(" \u2014 "),CP=a("a"),yfo=o("BlenderbotSmallModel"),Lfo=o(" (BlenderbotSmall model)"),xfo=l(),zh=a("li"),xae=a("strong"),$fo=o("camembert"),kfo=o(" \u2014 "),wP=a("a"),Sfo=o("CamembertModel"),Rfo=o(" (CamemBERT model)"),Bfo=l(),Qh=a("li"),$ae=a("strong"),Pfo=o("canine"),Ifo=o(" \u2014 "),AP=a("a"),qfo=o("CanineModel"),Nfo=o(" (Canine model)"),jfo=l(),Wh=a("li"),kae=a("strong"),Dfo=o("clip"),Gfo=o(" \u2014 "),yP=a("a"),Ofo=o("CLIPModel"),Vfo=o(" (CLIP model)"),Xfo=l(),Hh=a("li"),Sae=a("strong"),zfo=o("convbert"),Qfo=o(" \u2014 "),LP=a("a"),Wfo=o("ConvBertModel"),Hfo=o(" (ConvBERT model)"),Ufo=l(),Uh=a("li"),Rae=a("strong"),Jfo=o("convnext"),Yfo=o(" \u2014 "),xP=a("a"),Kfo=o("ConvNextModel"),Zfo=o(" (ConvNext model)"),emo=l(),Jh=a("li"),Bae=a("strong"),omo=o("ctrl"),rmo=o(" \u2014 "),$P=a("a"),tmo=o("CTRLModel"),amo=o(" (CTRL model)"),nmo=l(),Yh=a("li"),Pae=a("strong"),smo=o("data2vec-audio"),lmo=o(" \u2014 "),kP=a("a"),imo=o("Data2VecAudioModel"),dmo=o(" (Data2VecAudio model)"),cmo=l(),Kh=a("li"),Iae=a("strong"),fmo=o("data2vec-text"),mmo=o(" \u2014 "),SP=a("a"),gmo=o("Data2VecTextModel"),hmo=o(" (Data2VecText model)"),pmo=l(),Zh=a("li"),qae=a("strong"),umo=o("data2vec-vision"),_mo=o(" \u2014 "),RP=a("a"),bmo=o("Data2VecVisionModel"),vmo=o(" (Data2VecVision model)"),Fmo=l(),ep=a("li"),Nae=a("strong"),Tmo=o("deberta"),Mmo=o(" \u2014 "),BP=a("a"),Emo=o("DebertaModel"),Cmo=o(" (DeBERTa model)"),wmo=l(),op=a("li"),jae=a("strong"),Amo=o("deberta-v2"),ymo=o(" \u2014 "),PP=a("a"),Lmo=o("DebertaV2Model"),xmo=o(" (DeBERTa-v2 model)"),$mo=l(),rp=a("li"),Dae=a("strong"),kmo=o("decision_transformer"),Smo=o(" \u2014 "),IP=a("a"),Rmo=o("DecisionTransformerModel"),Bmo=o(" (Decision Transformer model)"),Pmo=l(),tp=a("li"),Gae=a("strong"),Imo=o("deit"),qmo=o(" \u2014 "),qP=a("a"),Nmo=o("DeiTModel"),jmo=o(" (DeiT model)"),Dmo=l(),ap=a("li"),Oae=a("strong"),Gmo=o("detr"),Omo=o(" \u2014 "),NP=a("a"),Vmo=o("DetrModel"),Xmo=o(" (DETR model)"),zmo=l(),np=a("li"),Vae=a("strong"),Qmo=o("distilbert"),Wmo=o(" \u2014 "),jP=a("a"),Hmo=o("DistilBertModel"),Umo=o(" (DistilBERT model)"),Jmo=l(),sp=a("li"),Xae=a("strong"),Ymo=o("dpr"),Kmo=o(" \u2014 "),DP=a("a"),Zmo=o("DPRQuestionEncoder"),ego=o(" (DPR model)"),ogo=l(),lp=a("li"),zae=a("strong"),rgo=o("dpt"),tgo=o(" \u2014 "),GP=a("a"),ago=o("DPTModel"),ngo=o(" (DPT model)"),sgo=l(),ip=a("li"),Qae=a("strong"),lgo=o("electra"),igo=o(" \u2014 "),OP=a("a"),dgo=o("ElectraModel"),cgo=o(" (ELECTRA model)"),fgo=l(),dp=a("li"),Wae=a("strong"),mgo=o("flaubert"),ggo=o(" \u2014 "),VP=a("a"),hgo=o("FlaubertModel"),pgo=o(" (FlauBERT model)"),ugo=l(),cp=a("li"),Hae=a("strong"),_go=o("fnet"),bgo=o(" \u2014 "),XP=a("a"),vgo=o("FNetModel"),Fgo=o(" (FNet model)"),Tgo=l(),fp=a("li"),Uae=a("strong"),Mgo=o("fsmt"),Ego=o(" \u2014 "),zP=a("a"),Cgo=o("FSMTModel"),wgo=o(" (FairSeq Machine-Translation model)"),Ago=l(),xs=a("li"),Jae=a("strong"),ygo=o("funnel"),Lgo=o(" \u2014 "),QP=a("a"),xgo=o("FunnelModel"),$go=o(" or "),WP=a("a"),kgo=o("FunnelBaseModel"),Sgo=o(" (Funnel Transformer model)"),Rgo=l(),mp=a("li"),Yae=a("strong"),Bgo=o("glpn"),Pgo=o(" \u2014 "),HP=a("a"),Igo=o("GLPNModel"),qgo=o(" (GLPN model)"),Ngo=l(),gp=a("li"),Kae=a("strong"),jgo=o("gpt2"),Dgo=o(" \u2014 "),UP=a("a"),Ggo=o("GPT2Model"),Ogo=o(" (OpenAI GPT-2 model)"),Vgo=l(),hp=a("li"),Zae=a("strong"),Xgo=o("gpt_neo"),zgo=o(" \u2014 "),JP=a("a"),Qgo=o("GPTNeoModel"),Wgo=o(" (GPT Neo model)"),Hgo=l(),pp=a("li"),ene=a("strong"),Ugo=o("gptj"),Jgo=o(" \u2014 "),YP=a("a"),Ygo=o("GPTJModel"),Kgo=o(" (GPT-J model)"),Zgo=l(),up=a("li"),one=a("strong"),eho=o("hubert"),oho=o(" \u2014 "),KP=a("a"),rho=o("HubertModel"),tho=o(" (Hubert model)"),aho=l(),_p=a("li"),rne=a("strong"),nho=o("ibert"),sho=o(" \u2014 "),ZP=a("a"),lho=o("IBertModel"),iho=o(" (I-BERT model)"),dho=l(),bp=a("li"),tne=a("strong"),cho=o("imagegpt"),fho=o(" \u2014 "),eI=a("a"),mho=o("ImageGPTModel"),gho=o(" (ImageGPT model)"),hho=l(),vp=a("li"),ane=a("strong"),pho=o("layoutlm"),uho=o(" \u2014 "),oI=a("a"),_ho=o("LayoutLMModel"),bho=o(" (LayoutLM model)"),vho=l(),Fp=a("li"),nne=a("strong"),Fho=o("layoutlmv2"),Tho=o(" \u2014 "),rI=a("a"),Mho=o("LayoutLMv2Model"),Eho=o(" (LayoutLMv2 model)"),Cho=l(),Tp=a("li"),sne=a("strong"),who=o("layoutlmv3"),Aho=o(" \u2014 "),tI=a("a"),yho=o("LayoutLMv3Model"),Lho=o(" (LayoutLMv3 model)"),xho=l(),Mp=a("li"),lne=a("strong"),$ho=o("led"),kho=o(" \u2014 "),aI=a("a"),Sho=o("LEDModel"),Rho=o(" (LED model)"),Bho=l(),Ep=a("li"),ine=a("strong"),Pho=o("longformer"),Iho=o(" \u2014 "),nI=a("a"),qho=o("LongformerModel"),Nho=o(" (Longformer model)"),jho=l(),Cp=a("li"),dne=a("strong"),Dho=o("luke"),Gho=o(" \u2014 "),sI=a("a"),Oho=o("LukeModel"),Vho=o(" (LUKE model)"),Xho=l(),wp=a("li"),cne=a("strong"),zho=o("lxmert"),Qho=o(" \u2014 "),lI=a("a"),Who=o("LxmertModel"),Hho=o(" (LXMERT model)"),Uho=l(),Ap=a("li"),fne=a("strong"),Jho=o("m2m_100"),Yho=o(" \u2014 "),iI=a("a"),Kho=o("M2M100Model"),Zho=o(" (M2M100 model)"),epo=l(),yp=a("li"),mne=a("strong"),opo=o("marian"),rpo=o(" \u2014 "),dI=a("a"),tpo=o("MarianModel"),apo=o(" (Marian model)"),npo=l(),Lp=a("li"),gne=a("strong"),spo=o("maskformer"),lpo=o(" \u2014 "),cI=a("a"),ipo=o("MaskFormerModel"),dpo=o(" (MaskFormer model)"),cpo=l(),xp=a("li"),hne=a("strong"),fpo=o("mbart"),mpo=o(" \u2014 "),fI=a("a"),gpo=o("MBartModel"),hpo=o(" (mBART model)"),ppo=l(),$p=a("li"),pne=a("strong"),upo=o("megatron-bert"),_po=o(" \u2014 "),mI=a("a"),bpo=o("MegatronBertModel"),vpo=o(" (MegatronBert model)"),Fpo=l(),kp=a("li"),une=a("strong"),Tpo=o("mobilebert"),Mpo=o(" \u2014 "),gI=a("a"),Epo=o("MobileBertModel"),Cpo=o(" (MobileBERT model)"),wpo=l(),Sp=a("li"),_ne=a("strong"),Apo=o("mpnet"),ypo=o(" \u2014 "),hI=a("a"),Lpo=o("MPNetModel"),xpo=o(" (MPNet model)"),$po=l(),Rp=a("li"),bne=a("strong"),kpo=o("mt5"),Spo=o(" \u2014 "),pI=a("a"),Rpo=o("MT5Model"),Bpo=o(" (mT5 model)"),Ppo=l(),Bp=a("li"),vne=a("strong"),Ipo=o("nystromformer"),qpo=o(" \u2014 "),uI=a("a"),Npo=o("NystromformerModel"),jpo=o(" (Nystromformer model)"),Dpo=l(),Pp=a("li"),Fne=a("strong"),Gpo=o("openai-gpt"),Opo=o(" \u2014 "),_I=a("a"),Vpo=o("OpenAIGPTModel"),Xpo=o(" (OpenAI GPT model)"),zpo=l(),Ip=a("li"),Tne=a("strong"),Qpo=o("pegasus"),Wpo=o(" \u2014 "),bI=a("a"),Hpo=o("PegasusModel"),Upo=o(" (Pegasus model)"),Jpo=l(),qp=a("li"),Mne=a("strong"),Ypo=o("perceiver"),Kpo=o(" \u2014 "),vI=a("a"),Zpo=o("PerceiverModel"),euo=o(" (Perceiver model)"),ouo=l(),Np=a("li"),Ene=a("strong"),ruo=o("plbart"),tuo=o(" \u2014 "),FI=a("a"),auo=o("PLBartModel"),nuo=o(" (PLBart model)"),suo=l(),jp=a("li"),Cne=a("strong"),luo=o("poolformer"),iuo=o(" \u2014 "),TI=a("a"),duo=o("PoolFormerModel"),cuo=o(" (PoolFormer model)"),fuo=l(),Dp=a("li"),wne=a("strong"),muo=o("prophetnet"),guo=o(" \u2014 "),MI=a("a"),huo=o("ProphetNetModel"),puo=o(" (ProphetNet model)"),uuo=l(),Gp=a("li"),Ane=a("strong"),_uo=o("qdqbert"),buo=o(" \u2014 "),EI=a("a"),vuo=o("QDQBertModel"),Fuo=o(" (QDQBert model)"),Tuo=l(),Op=a("li"),yne=a("strong"),Muo=o("reformer"),Euo=o(" \u2014 "),CI=a("a"),Cuo=o("ReformerModel"),wuo=o(" (Reformer model)"),Auo=l(),Vp=a("li"),Lne=a("strong"),yuo=o("regnet"),Luo=o(" \u2014 "),wI=a("a"),xuo=o("RegNetModel"),$uo=o(" (RegNet model)"),kuo=l(),Xp=a("li"),xne=a("strong"),Suo=o("rembert"),Ruo=o(" \u2014 "),AI=a("a"),Buo=o("RemBertModel"),Puo=o(" (RemBERT model)"),Iuo=l(),zp=a("li"),$ne=a("strong"),quo=o("resnet"),Nuo=o(" \u2014 "),yI=a("a"),juo=o("ResNetModel"),Duo=o(" (ResNet model)"),Guo=l(),Qp=a("li"),kne=a("strong"),Ouo=o("retribert"),Vuo=o(" \u2014 "),LI=a("a"),Xuo=o("RetriBertModel"),zuo=o(" (RetriBERT model)"),Quo=l(),Wp=a("li"),Sne=a("strong"),Wuo=o("roberta"),Huo=o(" \u2014 "),xI=a("a"),Uuo=o("RobertaModel"),Juo=o(" (RoBERTa model)"),Yuo=l(),Hp=a("li"),Rne=a("strong"),Kuo=o("roformer"),Zuo=o(" \u2014 "),$I=a("a"),e_o=o("RoFormerModel"),o_o=o(" (RoFormer model)"),r_o=l(),Up=a("li"),Bne=a("strong"),t_o=o("segformer"),a_o=o(" \u2014 "),kI=a("a"),n_o=o("SegformerModel"),s_o=o(" (SegFormer model)"),l_o=l(),Jp=a("li"),Pne=a("strong"),i_o=o("sew"),d_o=o(" \u2014 "),SI=a("a"),c_o=o("SEWModel"),f_o=o(" (SEW model)"),m_o=l(),Yp=a("li"),Ine=a("strong"),g_o=o("sew-d"),h_o=o(" \u2014 "),RI=a("a"),p_o=o("SEWDModel"),u_o=o(" (SEW-D model)"),__o=l(),Kp=a("li"),qne=a("strong"),b_o=o("speech_to_text"),v_o=o(" \u2014 "),BI=a("a"),F_o=o("Speech2TextModel"),T_o=o(" (Speech2Text model)"),M_o=l(),Zp=a("li"),Nne=a("strong"),E_o=o("splinter"),C_o=o(" \u2014 "),PI=a("a"),w_o=o("SplinterModel"),A_o=o(" (Splinter model)"),y_o=l(),eu=a("li"),jne=a("strong"),L_o=o("squeezebert"),x_o=o(" \u2014 "),II=a("a"),$_o=o("SqueezeBertModel"),k_o=o(" (SqueezeBERT model)"),S_o=l(),ou=a("li"),Dne=a("strong"),R_o=o("swin"),B_o=o(" \u2014 "),qI=a("a"),P_o=o("SwinModel"),I_o=o(" (Swin model)"),q_o=l(),ru=a("li"),Gne=a("strong"),N_o=o("t5"),j_o=o(" \u2014 "),NI=a("a"),D_o=o("T5Model"),G_o=o(" (T5 model)"),O_o=l(),tu=a("li"),One=a("strong"),V_o=o("tapas"),X_o=o(" \u2014 "),jI=a("a"),z_o=o("TapasModel"),Q_o=o(" (TAPAS model)"),W_o=l(),au=a("li"),Vne=a("strong"),H_o=o("transfo-xl"),U_o=o(" \u2014 "),DI=a("a"),J_o=o("TransfoXLModel"),Y_o=o(" (Transformer-XL model)"),K_o=l(),nu=a("li"),Xne=a("strong"),Z_o=o("unispeech"),e0o=o(" \u2014 "),GI=a("a"),o0o=o("UniSpeechModel"),r0o=o(" (UniSpeech model)"),t0o=l(),su=a("li"),zne=a("strong"),a0o=o("unispeech-sat"),n0o=o(" \u2014 "),OI=a("a"),s0o=o("UniSpeechSatModel"),l0o=o(" (UniSpeechSat model)"),i0o=l(),lu=a("li"),Qne=a("strong"),d0o=o("van"),c0o=o(" \u2014 "),VI=a("a"),f0o=o("VanModel"),m0o=o(" (VAN model)"),g0o=l(),iu=a("li"),Wne=a("strong"),h0o=o("vilt"),p0o=o(" \u2014 "),XI=a("a"),u0o=o("ViltModel"),_0o=o(" (ViLT model)"),b0o=l(),du=a("li"),Hne=a("strong"),v0o=o("vision-text-dual-encoder"),F0o=o(" \u2014 "),zI=a("a"),T0o=o("VisionTextDualEncoderModel"),M0o=o(" (VisionTextDualEncoder model)"),E0o=l(),cu=a("li"),Une=a("strong"),C0o=o("visual_bert"),w0o=o(" \u2014 "),QI=a("a"),A0o=o("VisualBertModel"),y0o=o(" (VisualBert model)"),L0o=l(),fu=a("li"),Jne=a("strong"),x0o=o("vit"),$0o=o(" \u2014 "),WI=a("a"),k0o=o("ViTModel"),S0o=o(" (ViT model)"),R0o=l(),mu=a("li"),Yne=a("strong"),B0o=o("vit_mae"),P0o=o(" \u2014 "),HI=a("a"),I0o=o("ViTMAEModel"),q0o=o(" (ViTMAE model)"),N0o=l(),gu=a("li"),Kne=a("strong"),j0o=o("wav2vec2"),D0o=o(" \u2014 "),UI=a("a"),G0o=o("Wav2Vec2Model"),O0o=o(" (Wav2Vec2 model)"),V0o=l(),hu=a("li"),Zne=a("strong"),X0o=o("wavlm"),z0o=o(" \u2014 "),JI=a("a"),Q0o=o("WavLMModel"),W0o=o(" (WavLM model)"),H0o=l(),pu=a("li"),ese=a("strong"),U0o=o("xglm"),J0o=o(" \u2014 "),YI=a("a"),Y0o=o("XGLMModel"),K0o=o(" (XGLM model)"),Z0o=l(),uu=a("li"),ose=a("strong"),e1o=o("xlm"),o1o=o(" \u2014 "),KI=a("a"),r1o=o("XLMModel"),t1o=o(" (XLM model)"),a1o=l(),_u=a("li"),rse=a("strong"),n1o=o("xlm-prophetnet"),s1o=o(" \u2014 "),ZI=a("a"),l1o=o("XLMProphetNetModel"),i1o=o(" (XLMProphetNet model)"),d1o=l(),bu=a("li"),tse=a("strong"),c1o=o("xlm-roberta"),f1o=o(" \u2014 "),eq=a("a"),m1o=o("XLMRobertaModel"),g1o=o(" (XLM-RoBERTa model)"),h1o=l(),vu=a("li"),ase=a("strong"),p1o=o("xlm-roberta-xl"),u1o=o(" \u2014 "),oq=a("a"),_1o=o("XLMRobertaXLModel"),b1o=o(" (XLM-RoBERTa-XL model)"),v1o=l(),Fu=a("li"),nse=a("strong"),F1o=o("xlnet"),T1o=o(" \u2014 "),rq=a("a"),M1o=o("XLNetModel"),E1o=o(" (XLNet model)"),C1o=l(),Tu=a("li"),sse=a("strong"),w1o=o("yolos"),A1o=o(" \u2014 "),tq=a("a"),y1o=o("YolosModel"),L1o=o(" (YOLOS model)"),x1o=l(),Mu=a("li"),lse=a("strong"),$1o=o("yoso"),k1o=o(" \u2014 "),aq=a("a"),S1o=o("YosoModel"),R1o=o(" (YOSO model)"),B1o=l(),Eu=a("p"),P1o=o("The model is set in evaluation mode by default using "),ise=a("code"),I1o=o("model.eval()"),q1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dse=a("code"),N1o=o("model.train()"),j1o=l(),F(Cu.$$.fragment),ZBe=l(),vi=a("h2"),wu=a("a"),cse=a("span"),F(sA.$$.fragment),D1o=l(),fse=a("span"),G1o=o("AutoModelForPreTraining"),ePe=l(),xo=a("div"),F(lA.$$.fragment),O1o=l(),Fi=a("p"),V1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nq=a("a"),X1o=o("from_pretrained()"),z1o=o(" class method or the "),sq=a("a"),Q1o=o("from_config()"),W1o=o(` class
method.`),H1o=l(),iA=a("p"),U1o=o("This class cannot be instantiated directly using "),mse=a("code"),J1o=o("__init__()"),Y1o=o(" (throws an error)."),K1o=l(),et=a("div"),F(dA.$$.fragment),Z1o=l(),gse=a("p"),ebo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),obo=l(),Ti=a("p"),rbo=o(`Note:
Loading a model from its configuration file does `),hse=a("strong"),tbo=o("not"),abo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lq=a("a"),nbo=o("from_pretrained()"),sbo=o(" to load the model weights."),lbo=l(),F(Au.$$.fragment),ibo=l(),Ue=a("div"),F(cA.$$.fragment),dbo=l(),pse=a("p"),cbo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fbo=l(),Ca=a("p"),mbo=o("The model class to instantiate is selected based on the "),use=a("code"),gbo=o("model_type"),hbo=o(` property of the config object (either
passed as an argument or loaded from `),_se=a("code"),pbo=o("pretrained_model_name_or_path"),ubo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bse=a("code"),_bo=o("pretrained_model_name_or_path"),bbo=o(":"),vbo=l(),O=a("ul"),yu=a("li"),vse=a("strong"),Fbo=o("albert"),Tbo=o(" \u2014 "),iq=a("a"),Mbo=o("AlbertForPreTraining"),Ebo=o(" (ALBERT model)"),Cbo=l(),Lu=a("li"),Fse=a("strong"),wbo=o("bart"),Abo=o(" \u2014 "),dq=a("a"),ybo=o("BartForConditionalGeneration"),Lbo=o(" (BART model)"),xbo=l(),xu=a("li"),Tse=a("strong"),$bo=o("bert"),kbo=o(" \u2014 "),cq=a("a"),Sbo=o("BertForPreTraining"),Rbo=o(" (BERT model)"),Bbo=l(),$u=a("li"),Mse=a("strong"),Pbo=o("big_bird"),Ibo=o(" \u2014 "),fq=a("a"),qbo=o("BigBirdForPreTraining"),Nbo=o(" (BigBird model)"),jbo=l(),ku=a("li"),Ese=a("strong"),Dbo=o("camembert"),Gbo=o(" \u2014 "),mq=a("a"),Obo=o("CamembertForMaskedLM"),Vbo=o(" (CamemBERT model)"),Xbo=l(),Su=a("li"),Cse=a("strong"),zbo=o("ctrl"),Qbo=o(" \u2014 "),gq=a("a"),Wbo=o("CTRLLMHeadModel"),Hbo=o(" (CTRL model)"),Ubo=l(),Ru=a("li"),wse=a("strong"),Jbo=o("data2vec-text"),Ybo=o(" \u2014 "),hq=a("a"),Kbo=o("Data2VecTextForMaskedLM"),Zbo=o(" (Data2VecText model)"),e2o=l(),Bu=a("li"),Ase=a("strong"),o2o=o("deberta"),r2o=o(" \u2014 "),pq=a("a"),t2o=o("DebertaForMaskedLM"),a2o=o(" (DeBERTa model)"),n2o=l(),Pu=a("li"),yse=a("strong"),s2o=o("deberta-v2"),l2o=o(" \u2014 "),uq=a("a"),i2o=o("DebertaV2ForMaskedLM"),d2o=o(" (DeBERTa-v2 model)"),c2o=l(),Iu=a("li"),Lse=a("strong"),f2o=o("distilbert"),m2o=o(" \u2014 "),_q=a("a"),g2o=o("DistilBertForMaskedLM"),h2o=o(" (DistilBERT model)"),p2o=l(),qu=a("li"),xse=a("strong"),u2o=o("electra"),_2o=o(" \u2014 "),bq=a("a"),b2o=o("ElectraForPreTraining"),v2o=o(" (ELECTRA model)"),F2o=l(),Nu=a("li"),$se=a("strong"),T2o=o("flaubert"),M2o=o(" \u2014 "),vq=a("a"),E2o=o("FlaubertWithLMHeadModel"),C2o=o(" (FlauBERT model)"),w2o=l(),ju=a("li"),kse=a("strong"),A2o=o("fnet"),y2o=o(" \u2014 "),Fq=a("a"),L2o=o("FNetForPreTraining"),x2o=o(" (FNet model)"),$2o=l(),Du=a("li"),Sse=a("strong"),k2o=o("fsmt"),S2o=o(" \u2014 "),Tq=a("a"),R2o=o("FSMTForConditionalGeneration"),B2o=o(" (FairSeq Machine-Translation model)"),P2o=l(),Gu=a("li"),Rse=a("strong"),I2o=o("funnel"),q2o=o(" \u2014 "),Mq=a("a"),N2o=o("FunnelForPreTraining"),j2o=o(" (Funnel Transformer model)"),D2o=l(),Ou=a("li"),Bse=a("strong"),G2o=o("gpt2"),O2o=o(" \u2014 "),Eq=a("a"),V2o=o("GPT2LMHeadModel"),X2o=o(" (OpenAI GPT-2 model)"),z2o=l(),Vu=a("li"),Pse=a("strong"),Q2o=o("ibert"),W2o=o(" \u2014 "),Cq=a("a"),H2o=o("IBertForMaskedLM"),U2o=o(" (I-BERT model)"),J2o=l(),Xu=a("li"),Ise=a("strong"),Y2o=o("layoutlm"),K2o=o(" \u2014 "),wq=a("a"),Z2o=o("LayoutLMForMaskedLM"),evo=o(" (LayoutLM model)"),ovo=l(),zu=a("li"),qse=a("strong"),rvo=o("longformer"),tvo=o(" \u2014 "),Aq=a("a"),avo=o("LongformerForMaskedLM"),nvo=o(" (Longformer model)"),svo=l(),Qu=a("li"),Nse=a("strong"),lvo=o("lxmert"),ivo=o(" \u2014 "),yq=a("a"),dvo=o("LxmertForPreTraining"),cvo=o(" (LXMERT model)"),fvo=l(),Wu=a("li"),jse=a("strong"),mvo=o("megatron-bert"),gvo=o(" \u2014 "),Lq=a("a"),hvo=o("MegatronBertForPreTraining"),pvo=o(" (MegatronBert model)"),uvo=l(),Hu=a("li"),Dse=a("strong"),_vo=o("mobilebert"),bvo=o(" \u2014 "),xq=a("a"),vvo=o("MobileBertForPreTraining"),Fvo=o(" (MobileBERT model)"),Tvo=l(),Uu=a("li"),Gse=a("strong"),Mvo=o("mpnet"),Evo=o(" \u2014 "),$q=a("a"),Cvo=o("MPNetForMaskedLM"),wvo=o(" (MPNet model)"),Avo=l(),Ju=a("li"),Ose=a("strong"),yvo=o("openai-gpt"),Lvo=o(" \u2014 "),kq=a("a"),xvo=o("OpenAIGPTLMHeadModel"),$vo=o(" (OpenAI GPT model)"),kvo=l(),Yu=a("li"),Vse=a("strong"),Svo=o("retribert"),Rvo=o(" \u2014 "),Sq=a("a"),Bvo=o("RetriBertModel"),Pvo=o(" (RetriBERT model)"),Ivo=l(),Ku=a("li"),Xse=a("strong"),qvo=o("roberta"),Nvo=o(" \u2014 "),Rq=a("a"),jvo=o("RobertaForMaskedLM"),Dvo=o(" (RoBERTa model)"),Gvo=l(),Zu=a("li"),zse=a("strong"),Ovo=o("squeezebert"),Vvo=o(" \u2014 "),Bq=a("a"),Xvo=o("SqueezeBertForMaskedLM"),zvo=o(" (SqueezeBERT model)"),Qvo=l(),e_=a("li"),Qse=a("strong"),Wvo=o("t5"),Hvo=o(" \u2014 "),Pq=a("a"),Uvo=o("T5ForConditionalGeneration"),Jvo=o(" (T5 model)"),Yvo=l(),o_=a("li"),Wse=a("strong"),Kvo=o("tapas"),Zvo=o(" \u2014 "),Iq=a("a"),eFo=o("TapasForMaskedLM"),oFo=o(" (TAPAS model)"),rFo=l(),r_=a("li"),Hse=a("strong"),tFo=o("transfo-xl"),aFo=o(" \u2014 "),qq=a("a"),nFo=o("TransfoXLLMHeadModel"),sFo=o(" (Transformer-XL model)"),lFo=l(),t_=a("li"),Use=a("strong"),iFo=o("unispeech"),dFo=o(" \u2014 "),Nq=a("a"),cFo=o("UniSpeechForPreTraining"),fFo=o(" (UniSpeech model)"),mFo=l(),a_=a("li"),Jse=a("strong"),gFo=o("unispeech-sat"),hFo=o(" \u2014 "),jq=a("a"),pFo=o("UniSpeechSatForPreTraining"),uFo=o(" (UniSpeechSat model)"),_Fo=l(),n_=a("li"),Yse=a("strong"),bFo=o("visual_bert"),vFo=o(" \u2014 "),Dq=a("a"),FFo=o("VisualBertForPreTraining"),TFo=o(" (VisualBert model)"),MFo=l(),s_=a("li"),Kse=a("strong"),EFo=o("vit_mae"),CFo=o(" \u2014 "),Gq=a("a"),wFo=o("ViTMAEForPreTraining"),AFo=o(" (ViTMAE model)"),yFo=l(),l_=a("li"),Zse=a("strong"),LFo=o("wav2vec2"),xFo=o(" \u2014 "),Oq=a("a"),$Fo=o("Wav2Vec2ForPreTraining"),kFo=o(" (Wav2Vec2 model)"),SFo=l(),i_=a("li"),ele=a("strong"),RFo=o("xlm"),BFo=o(" \u2014 "),Vq=a("a"),PFo=o("XLMWithLMHeadModel"),IFo=o(" (XLM model)"),qFo=l(),d_=a("li"),ole=a("strong"),NFo=o("xlm-roberta"),jFo=o(" \u2014 "),Xq=a("a"),DFo=o("XLMRobertaForMaskedLM"),GFo=o(" (XLM-RoBERTa model)"),OFo=l(),c_=a("li"),rle=a("strong"),VFo=o("xlm-roberta-xl"),XFo=o(" \u2014 "),zq=a("a"),zFo=o("XLMRobertaXLForMaskedLM"),QFo=o(" (XLM-RoBERTa-XL model)"),WFo=l(),f_=a("li"),tle=a("strong"),HFo=o("xlnet"),UFo=o(" \u2014 "),Qq=a("a"),JFo=o("XLNetLMHeadModel"),YFo=o(" (XLNet model)"),KFo=l(),m_=a("p"),ZFo=o("The model is set in evaluation mode by default using "),ale=a("code"),e6o=o("model.eval()"),o6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nle=a("code"),r6o=o("model.train()"),t6o=l(),F(g_.$$.fragment),oPe=l(),Mi=a("h2"),h_=a("a"),sle=a("span"),F(fA.$$.fragment),a6o=l(),lle=a("span"),n6o=o("AutoModelForCausalLM"),rPe=l(),$o=a("div"),F(mA.$$.fragment),s6o=l(),Ei=a("p"),l6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Wq=a("a"),i6o=o("from_pretrained()"),d6o=o(" class method or the "),Hq=a("a"),c6o=o("from_config()"),f6o=o(` class
method.`),m6o=l(),gA=a("p"),g6o=o("This class cannot be instantiated directly using "),ile=a("code"),h6o=o("__init__()"),p6o=o(" (throws an error)."),u6o=l(),ot=a("div"),F(hA.$$.fragment),_6o=l(),dle=a("p"),b6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),v6o=l(),Ci=a("p"),F6o=o(`Note:
Loading a model from its configuration file does `),cle=a("strong"),T6o=o("not"),M6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=a("a"),E6o=o("from_pretrained()"),C6o=o(" to load the model weights."),w6o=l(),F(p_.$$.fragment),A6o=l(),Je=a("div"),F(pA.$$.fragment),y6o=l(),fle=a("p"),L6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),x6o=l(),wa=a("p"),$6o=o("The model class to instantiate is selected based on the "),mle=a("code"),k6o=o("model_type"),S6o=o(` property of the config object (either
passed as an argument or loaded from `),gle=a("code"),R6o=o("pretrained_model_name_or_path"),B6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=a("code"),P6o=o("pretrained_model_name_or_path"),I6o=o(":"),q6o=l(),z=a("ul"),u_=a("li"),ple=a("strong"),N6o=o("bart"),j6o=o(" \u2014 "),Jq=a("a"),D6o=o("BartForCausalLM"),G6o=o(" (BART model)"),O6o=l(),__=a("li"),ule=a("strong"),V6o=o("bert"),X6o=o(" \u2014 "),Yq=a("a"),z6o=o("BertLMHeadModel"),Q6o=o(" (BERT model)"),W6o=l(),b_=a("li"),_le=a("strong"),H6o=o("bert-generation"),U6o=o(" \u2014 "),Kq=a("a"),J6o=o("BertGenerationDecoder"),Y6o=o(" (Bert Generation model)"),K6o=l(),v_=a("li"),ble=a("strong"),Z6o=o("big_bird"),eTo=o(" \u2014 "),Zq=a("a"),oTo=o("BigBirdForCausalLM"),rTo=o(" (BigBird model)"),tTo=l(),F_=a("li"),vle=a("strong"),aTo=o("bigbird_pegasus"),nTo=o(" \u2014 "),eN=a("a"),sTo=o("BigBirdPegasusForCausalLM"),lTo=o(" (BigBirdPegasus model)"),iTo=l(),T_=a("li"),Fle=a("strong"),dTo=o("blenderbot"),cTo=o(" \u2014 "),oN=a("a"),fTo=o("BlenderbotForCausalLM"),mTo=o(" (Blenderbot model)"),gTo=l(),M_=a("li"),Tle=a("strong"),hTo=o("blenderbot-small"),pTo=o(" \u2014 "),rN=a("a"),uTo=o("BlenderbotSmallForCausalLM"),_To=o(" (BlenderbotSmall model)"),bTo=l(),E_=a("li"),Mle=a("strong"),vTo=o("camembert"),FTo=o(" \u2014 "),tN=a("a"),TTo=o("CamembertForCausalLM"),MTo=o(" (CamemBERT model)"),ETo=l(),C_=a("li"),Ele=a("strong"),CTo=o("ctrl"),wTo=o(" \u2014 "),aN=a("a"),ATo=o("CTRLLMHeadModel"),yTo=o(" (CTRL model)"),LTo=l(),w_=a("li"),Cle=a("strong"),xTo=o("data2vec-text"),$To=o(" \u2014 "),nN=a("a"),kTo=o("Data2VecTextForCausalLM"),STo=o(" (Data2VecText model)"),RTo=l(),A_=a("li"),wle=a("strong"),BTo=o("electra"),PTo=o(" \u2014 "),sN=a("a"),ITo=o("ElectraForCausalLM"),qTo=o(" (ELECTRA model)"),NTo=l(),y_=a("li"),Ale=a("strong"),jTo=o("gpt2"),DTo=o(" \u2014 "),lN=a("a"),GTo=o("GPT2LMHeadModel"),OTo=o(" (OpenAI GPT-2 model)"),VTo=l(),L_=a("li"),yle=a("strong"),XTo=o("gpt_neo"),zTo=o(" \u2014 "),iN=a("a"),QTo=o("GPTNeoForCausalLM"),WTo=o(" (GPT Neo model)"),HTo=l(),x_=a("li"),Lle=a("strong"),UTo=o("gptj"),JTo=o(" \u2014 "),dN=a("a"),YTo=o("GPTJForCausalLM"),KTo=o(" (GPT-J model)"),ZTo=l(),$_=a("li"),xle=a("strong"),e7o=o("marian"),o7o=o(" \u2014 "),cN=a("a"),r7o=o("MarianForCausalLM"),t7o=o(" (Marian model)"),a7o=l(),k_=a("li"),$le=a("strong"),n7o=o("mbart"),s7o=o(" \u2014 "),fN=a("a"),l7o=o("MBartForCausalLM"),i7o=o(" (mBART model)"),d7o=l(),S_=a("li"),kle=a("strong"),c7o=o("megatron-bert"),f7o=o(" \u2014 "),mN=a("a"),m7o=o("MegatronBertForCausalLM"),g7o=o(" (MegatronBert model)"),h7o=l(),R_=a("li"),Sle=a("strong"),p7o=o("openai-gpt"),u7o=o(" \u2014 "),gN=a("a"),_7o=o("OpenAIGPTLMHeadModel"),b7o=o(" (OpenAI GPT model)"),v7o=l(),B_=a("li"),Rle=a("strong"),F7o=o("pegasus"),T7o=o(" \u2014 "),hN=a("a"),M7o=o("PegasusForCausalLM"),E7o=o(" (Pegasus model)"),C7o=l(),P_=a("li"),Ble=a("strong"),w7o=o("plbart"),A7o=o(" \u2014 "),pN=a("a"),y7o=o("PLBartForCausalLM"),L7o=o(" (PLBart model)"),x7o=l(),I_=a("li"),Ple=a("strong"),$7o=o("prophetnet"),k7o=o(" \u2014 "),uN=a("a"),S7o=o("ProphetNetForCausalLM"),R7o=o(" (ProphetNet model)"),B7o=l(),q_=a("li"),Ile=a("strong"),P7o=o("qdqbert"),I7o=o(" \u2014 "),_N=a("a"),q7o=o("QDQBertLMHeadModel"),N7o=o(" (QDQBert model)"),j7o=l(),N_=a("li"),qle=a("strong"),D7o=o("reformer"),G7o=o(" \u2014 "),bN=a("a"),O7o=o("ReformerModelWithLMHead"),V7o=o(" (Reformer model)"),X7o=l(),j_=a("li"),Nle=a("strong"),z7o=o("rembert"),Q7o=o(" \u2014 "),vN=a("a"),W7o=o("RemBertForCausalLM"),H7o=o(" (RemBERT model)"),U7o=l(),D_=a("li"),jle=a("strong"),J7o=o("roberta"),Y7o=o(" \u2014 "),FN=a("a"),K7o=o("RobertaForCausalLM"),Z7o=o(" (RoBERTa model)"),eMo=l(),G_=a("li"),Dle=a("strong"),oMo=o("roformer"),rMo=o(" \u2014 "),TN=a("a"),tMo=o("RoFormerForCausalLM"),aMo=o(" (RoFormer model)"),nMo=l(),O_=a("li"),Gle=a("strong"),sMo=o("speech_to_text_2"),lMo=o(" \u2014 "),MN=a("a"),iMo=o("Speech2Text2ForCausalLM"),dMo=o(" (Speech2Text2 model)"),cMo=l(),V_=a("li"),Ole=a("strong"),fMo=o("transfo-xl"),mMo=o(" \u2014 "),EN=a("a"),gMo=o("TransfoXLLMHeadModel"),hMo=o(" (Transformer-XL model)"),pMo=l(),X_=a("li"),Vle=a("strong"),uMo=o("trocr"),_Mo=o(" \u2014 "),CN=a("a"),bMo=o("TrOCRForCausalLM"),vMo=o(" (TrOCR model)"),FMo=l(),z_=a("li"),Xle=a("strong"),TMo=o("xglm"),MMo=o(" \u2014 "),wN=a("a"),EMo=o("XGLMForCausalLM"),CMo=o(" (XGLM model)"),wMo=l(),Q_=a("li"),zle=a("strong"),AMo=o("xlm"),yMo=o(" \u2014 "),AN=a("a"),LMo=o("XLMWithLMHeadModel"),xMo=o(" (XLM model)"),$Mo=l(),W_=a("li"),Qle=a("strong"),kMo=o("xlm-prophetnet"),SMo=o(" \u2014 "),yN=a("a"),RMo=o("XLMProphetNetForCausalLM"),BMo=o(" (XLMProphetNet model)"),PMo=l(),H_=a("li"),Wle=a("strong"),IMo=o("xlm-roberta"),qMo=o(" \u2014 "),LN=a("a"),NMo=o("XLMRobertaForCausalLM"),jMo=o(" (XLM-RoBERTa model)"),DMo=l(),U_=a("li"),Hle=a("strong"),GMo=o("xlm-roberta-xl"),OMo=o(" \u2014 "),xN=a("a"),VMo=o("XLMRobertaXLForCausalLM"),XMo=o(" (XLM-RoBERTa-XL model)"),zMo=l(),J_=a("li"),Ule=a("strong"),QMo=o("xlnet"),WMo=o(" \u2014 "),$N=a("a"),HMo=o("XLNetLMHeadModel"),UMo=o(" (XLNet model)"),JMo=l(),Y_=a("p"),YMo=o("The model is set in evaluation mode by default using "),Jle=a("code"),KMo=o("model.eval()"),ZMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yle=a("code"),e4o=o("model.train()"),o4o=l(),F(K_.$$.fragment),tPe=l(),wi=a("h2"),Z_=a("a"),Kle=a("span"),F(uA.$$.fragment),r4o=l(),Zle=a("span"),t4o=o("AutoModelForMaskedLM"),aPe=l(),ko=a("div"),F(_A.$$.fragment),a4o=l(),Ai=a("p"),n4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kN=a("a"),s4o=o("from_pretrained()"),l4o=o(" class method or the "),SN=a("a"),i4o=o("from_config()"),d4o=o(` class
method.`),c4o=l(),bA=a("p"),f4o=o("This class cannot be instantiated directly using "),eie=a("code"),m4o=o("__init__()"),g4o=o(" (throws an error)."),h4o=l(),rt=a("div"),F(vA.$$.fragment),p4o=l(),oie=a("p"),u4o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_4o=l(),yi=a("p"),b4o=o(`Note:
Loading a model from its configuration file does `),rie=a("strong"),v4o=o("not"),F4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RN=a("a"),T4o=o("from_pretrained()"),M4o=o(" to load the model weights."),E4o=l(),F(e0.$$.fragment),C4o=l(),Ye=a("div"),F(FA.$$.fragment),w4o=l(),tie=a("p"),A4o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y4o=l(),Aa=a("p"),L4o=o("The model class to instantiate is selected based on the "),aie=a("code"),x4o=o("model_type"),$4o=o(` property of the config object (either
passed as an argument or loaded from `),nie=a("code"),k4o=o("pretrained_model_name_or_path"),S4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sie=a("code"),R4o=o("pretrained_model_name_or_path"),B4o=o(":"),P4o=l(),Q=a("ul"),o0=a("li"),lie=a("strong"),I4o=o("albert"),q4o=o(" \u2014 "),BN=a("a"),N4o=o("AlbertForMaskedLM"),j4o=o(" (ALBERT model)"),D4o=l(),r0=a("li"),iie=a("strong"),G4o=o("bart"),O4o=o(" \u2014 "),PN=a("a"),V4o=o("BartForConditionalGeneration"),X4o=o(" (BART model)"),z4o=l(),t0=a("li"),die=a("strong"),Q4o=o("bert"),W4o=o(" \u2014 "),IN=a("a"),H4o=o("BertForMaskedLM"),U4o=o(" (BERT model)"),J4o=l(),a0=a("li"),cie=a("strong"),Y4o=o("big_bird"),K4o=o(" \u2014 "),qN=a("a"),Z4o=o("BigBirdForMaskedLM"),eEo=o(" (BigBird model)"),oEo=l(),n0=a("li"),fie=a("strong"),rEo=o("camembert"),tEo=o(" \u2014 "),NN=a("a"),aEo=o("CamembertForMaskedLM"),nEo=o(" (CamemBERT model)"),sEo=l(),s0=a("li"),mie=a("strong"),lEo=o("convbert"),iEo=o(" \u2014 "),jN=a("a"),dEo=o("ConvBertForMaskedLM"),cEo=o(" (ConvBERT model)"),fEo=l(),l0=a("li"),gie=a("strong"),mEo=o("data2vec-text"),gEo=o(" \u2014 "),DN=a("a"),hEo=o("Data2VecTextForMaskedLM"),pEo=o(" (Data2VecText model)"),uEo=l(),i0=a("li"),hie=a("strong"),_Eo=o("deberta"),bEo=o(" \u2014 "),GN=a("a"),vEo=o("DebertaForMaskedLM"),FEo=o(" (DeBERTa model)"),TEo=l(),d0=a("li"),pie=a("strong"),MEo=o("deberta-v2"),EEo=o(" \u2014 "),ON=a("a"),CEo=o("DebertaV2ForMaskedLM"),wEo=o(" (DeBERTa-v2 model)"),AEo=l(),c0=a("li"),uie=a("strong"),yEo=o("distilbert"),LEo=o(" \u2014 "),VN=a("a"),xEo=o("DistilBertForMaskedLM"),$Eo=o(" (DistilBERT model)"),kEo=l(),f0=a("li"),_ie=a("strong"),SEo=o("electra"),REo=o(" \u2014 "),XN=a("a"),BEo=o("ElectraForMaskedLM"),PEo=o(" (ELECTRA model)"),IEo=l(),m0=a("li"),bie=a("strong"),qEo=o("flaubert"),NEo=o(" \u2014 "),zN=a("a"),jEo=o("FlaubertWithLMHeadModel"),DEo=o(" (FlauBERT model)"),GEo=l(),g0=a("li"),vie=a("strong"),OEo=o("fnet"),VEo=o(" \u2014 "),QN=a("a"),XEo=o("FNetForMaskedLM"),zEo=o(" (FNet model)"),QEo=l(),h0=a("li"),Fie=a("strong"),WEo=o("funnel"),HEo=o(" \u2014 "),WN=a("a"),UEo=o("FunnelForMaskedLM"),JEo=o(" (Funnel Transformer model)"),YEo=l(),p0=a("li"),Tie=a("strong"),KEo=o("ibert"),ZEo=o(" \u2014 "),HN=a("a"),e5o=o("IBertForMaskedLM"),o5o=o(" (I-BERT model)"),r5o=l(),u0=a("li"),Mie=a("strong"),t5o=o("layoutlm"),a5o=o(" \u2014 "),UN=a("a"),n5o=o("LayoutLMForMaskedLM"),s5o=o(" (LayoutLM model)"),l5o=l(),_0=a("li"),Eie=a("strong"),i5o=o("longformer"),d5o=o(" \u2014 "),JN=a("a"),c5o=o("LongformerForMaskedLM"),f5o=o(" (Longformer model)"),m5o=l(),b0=a("li"),Cie=a("strong"),g5o=o("mbart"),h5o=o(" \u2014 "),YN=a("a"),p5o=o("MBartForConditionalGeneration"),u5o=o(" (mBART model)"),_5o=l(),v0=a("li"),wie=a("strong"),b5o=o("megatron-bert"),v5o=o(" \u2014 "),KN=a("a"),F5o=o("MegatronBertForMaskedLM"),T5o=o(" (MegatronBert model)"),M5o=l(),F0=a("li"),Aie=a("strong"),E5o=o("mobilebert"),C5o=o(" \u2014 "),ZN=a("a"),w5o=o("MobileBertForMaskedLM"),A5o=o(" (MobileBERT model)"),y5o=l(),T0=a("li"),yie=a("strong"),L5o=o("mpnet"),x5o=o(" \u2014 "),ej=a("a"),$5o=o("MPNetForMaskedLM"),k5o=o(" (MPNet model)"),S5o=l(),M0=a("li"),Lie=a("strong"),R5o=o("nystromformer"),B5o=o(" \u2014 "),oj=a("a"),P5o=o("NystromformerForMaskedLM"),I5o=o(" (Nystromformer model)"),q5o=l(),E0=a("li"),xie=a("strong"),N5o=o("perceiver"),j5o=o(" \u2014 "),rj=a("a"),D5o=o("PerceiverForMaskedLM"),G5o=o(" (Perceiver model)"),O5o=l(),C0=a("li"),$ie=a("strong"),V5o=o("qdqbert"),X5o=o(" \u2014 "),tj=a("a"),z5o=o("QDQBertForMaskedLM"),Q5o=o(" (QDQBert model)"),W5o=l(),w0=a("li"),kie=a("strong"),H5o=o("reformer"),U5o=o(" \u2014 "),aj=a("a"),J5o=o("ReformerForMaskedLM"),Y5o=o(" (Reformer model)"),K5o=l(),A0=a("li"),Sie=a("strong"),Z5o=o("rembert"),eCo=o(" \u2014 "),nj=a("a"),oCo=o("RemBertForMaskedLM"),rCo=o(" (RemBERT model)"),tCo=l(),y0=a("li"),Rie=a("strong"),aCo=o("roberta"),nCo=o(" \u2014 "),sj=a("a"),sCo=o("RobertaForMaskedLM"),lCo=o(" (RoBERTa model)"),iCo=l(),L0=a("li"),Bie=a("strong"),dCo=o("roformer"),cCo=o(" \u2014 "),lj=a("a"),fCo=o("RoFormerForMaskedLM"),mCo=o(" (RoFormer model)"),gCo=l(),x0=a("li"),Pie=a("strong"),hCo=o("squeezebert"),pCo=o(" \u2014 "),ij=a("a"),uCo=o("SqueezeBertForMaskedLM"),_Co=o(" (SqueezeBERT model)"),bCo=l(),$0=a("li"),Iie=a("strong"),vCo=o("tapas"),FCo=o(" \u2014 "),dj=a("a"),TCo=o("TapasForMaskedLM"),MCo=o(" (TAPAS model)"),ECo=l(),k0=a("li"),qie=a("strong"),CCo=o("wav2vec2"),wCo=o(" \u2014 "),Nie=a("code"),ACo=o("Wav2Vec2ForMaskedLM"),yCo=o(" (Wav2Vec2 model)"),LCo=l(),S0=a("li"),jie=a("strong"),xCo=o("xlm"),$Co=o(" \u2014 "),cj=a("a"),kCo=o("XLMWithLMHeadModel"),SCo=o(" (XLM model)"),RCo=l(),R0=a("li"),Die=a("strong"),BCo=o("xlm-roberta"),PCo=o(" \u2014 "),fj=a("a"),ICo=o("XLMRobertaForMaskedLM"),qCo=o(" (XLM-RoBERTa model)"),NCo=l(),B0=a("li"),Gie=a("strong"),jCo=o("xlm-roberta-xl"),DCo=o(" \u2014 "),mj=a("a"),GCo=o("XLMRobertaXLForMaskedLM"),OCo=o(" (XLM-RoBERTa-XL model)"),VCo=l(),P0=a("li"),Oie=a("strong"),XCo=o("yoso"),zCo=o(" \u2014 "),gj=a("a"),QCo=o("YosoForMaskedLM"),WCo=o(" (YOSO model)"),HCo=l(),I0=a("p"),UCo=o("The model is set in evaluation mode by default using "),Vie=a("code"),JCo=o("model.eval()"),YCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xie=a("code"),KCo=o("model.train()"),ZCo=l(),F(q0.$$.fragment),nPe=l(),Li=a("h2"),N0=a("a"),zie=a("span"),F(TA.$$.fragment),e3o=l(),Qie=a("span"),o3o=o("AutoModelForSeq2SeqLM"),sPe=l(),So=a("div"),F(MA.$$.fragment),r3o=l(),xi=a("p"),t3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hj=a("a"),a3o=o("from_pretrained()"),n3o=o(" class method or the "),pj=a("a"),s3o=o("from_config()"),l3o=o(` class
method.`),i3o=l(),EA=a("p"),d3o=o("This class cannot be instantiated directly using "),Wie=a("code"),c3o=o("__init__()"),f3o=o(" (throws an error)."),m3o=l(),tt=a("div"),F(CA.$$.fragment),g3o=l(),Hie=a("p"),h3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p3o=l(),$i=a("p"),u3o=o(`Note:
Loading a model from its configuration file does `),Uie=a("strong"),_3o=o("not"),b3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uj=a("a"),v3o=o("from_pretrained()"),F3o=o(" to load the model weights."),T3o=l(),F(j0.$$.fragment),M3o=l(),Ke=a("div"),F(wA.$$.fragment),E3o=l(),Jie=a("p"),C3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),w3o=l(),ya=a("p"),A3o=o("The model class to instantiate is selected based on the "),Yie=a("code"),y3o=o("model_type"),L3o=o(` property of the config object (either
passed as an argument or loaded from `),Kie=a("code"),x3o=o("pretrained_model_name_or_path"),$3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zie=a("code"),k3o=o("pretrained_model_name_or_path"),S3o=o(":"),R3o=l(),he=a("ul"),D0=a("li"),ede=a("strong"),B3o=o("bart"),P3o=o(" \u2014 "),_j=a("a"),I3o=o("BartForConditionalGeneration"),q3o=o(" (BART model)"),N3o=l(),G0=a("li"),ode=a("strong"),j3o=o("bigbird_pegasus"),D3o=o(" \u2014 "),bj=a("a"),G3o=o("BigBirdPegasusForConditionalGeneration"),O3o=o(" (BigBirdPegasus model)"),V3o=l(),O0=a("li"),rde=a("strong"),X3o=o("blenderbot"),z3o=o(" \u2014 "),vj=a("a"),Q3o=o("BlenderbotForConditionalGeneration"),W3o=o(" (Blenderbot model)"),H3o=l(),V0=a("li"),tde=a("strong"),U3o=o("blenderbot-small"),J3o=o(" \u2014 "),Fj=a("a"),Y3o=o("BlenderbotSmallForConditionalGeneration"),K3o=o(" (BlenderbotSmall model)"),Z3o=l(),X0=a("li"),ade=a("strong"),ewo=o("encoder-decoder"),owo=o(" \u2014 "),Tj=a("a"),rwo=o("EncoderDecoderModel"),two=o(" (Encoder decoder model)"),awo=l(),z0=a("li"),nde=a("strong"),nwo=o("fsmt"),swo=o(" \u2014 "),Mj=a("a"),lwo=o("FSMTForConditionalGeneration"),iwo=o(" (FairSeq Machine-Translation model)"),dwo=l(),Q0=a("li"),sde=a("strong"),cwo=o("led"),fwo=o(" \u2014 "),Ej=a("a"),mwo=o("LEDForConditionalGeneration"),gwo=o(" (LED model)"),hwo=l(),W0=a("li"),lde=a("strong"),pwo=o("m2m_100"),uwo=o(" \u2014 "),Cj=a("a"),_wo=o("M2M100ForConditionalGeneration"),bwo=o(" (M2M100 model)"),vwo=l(),H0=a("li"),ide=a("strong"),Fwo=o("marian"),Two=o(" \u2014 "),wj=a("a"),Mwo=o("MarianMTModel"),Ewo=o(" (Marian model)"),Cwo=l(),U0=a("li"),dde=a("strong"),wwo=o("mbart"),Awo=o(" \u2014 "),Aj=a("a"),ywo=o("MBartForConditionalGeneration"),Lwo=o(" (mBART model)"),xwo=l(),J0=a("li"),cde=a("strong"),$wo=o("mt5"),kwo=o(" \u2014 "),yj=a("a"),Swo=o("MT5ForConditionalGeneration"),Rwo=o(" (mT5 model)"),Bwo=l(),Y0=a("li"),fde=a("strong"),Pwo=o("pegasus"),Iwo=o(" \u2014 "),Lj=a("a"),qwo=o("PegasusForConditionalGeneration"),Nwo=o(" (Pegasus model)"),jwo=l(),K0=a("li"),mde=a("strong"),Dwo=o("plbart"),Gwo=o(" \u2014 "),xj=a("a"),Owo=o("PLBartForConditionalGeneration"),Vwo=o(" (PLBart model)"),Xwo=l(),Z0=a("li"),gde=a("strong"),zwo=o("prophetnet"),Qwo=o(" \u2014 "),$j=a("a"),Wwo=o("ProphetNetForConditionalGeneration"),Hwo=o(" (ProphetNet model)"),Uwo=l(),e1=a("li"),hde=a("strong"),Jwo=o("t5"),Ywo=o(" \u2014 "),kj=a("a"),Kwo=o("T5ForConditionalGeneration"),Zwo=o(" (T5 model)"),eAo=l(),o1=a("li"),pde=a("strong"),oAo=o("tapex"),rAo=o(" \u2014 "),Sj=a("a"),tAo=o("BartForConditionalGeneration"),aAo=o(" (TAPEX model)"),nAo=l(),r1=a("li"),ude=a("strong"),sAo=o("xlm-prophetnet"),lAo=o(" \u2014 "),Rj=a("a"),iAo=o("XLMProphetNetForConditionalGeneration"),dAo=o(" (XLMProphetNet model)"),cAo=l(),t1=a("p"),fAo=o("The model is set in evaluation mode by default using "),_de=a("code"),mAo=o("model.eval()"),gAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=a("code"),hAo=o("model.train()"),pAo=l(),F(a1.$$.fragment),lPe=l(),ki=a("h2"),n1=a("a"),vde=a("span"),F(AA.$$.fragment),uAo=l(),Fde=a("span"),_Ao=o("AutoModelForSequenceClassification"),iPe=l(),Ro=a("div"),F(yA.$$.fragment),bAo=l(),Si=a("p"),vAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bj=a("a"),FAo=o("from_pretrained()"),TAo=o(" class method or the "),Pj=a("a"),MAo=o("from_config()"),EAo=o(` class
method.`),CAo=l(),LA=a("p"),wAo=o("This class cannot be instantiated directly using "),Tde=a("code"),AAo=o("__init__()"),yAo=o(" (throws an error)."),LAo=l(),at=a("div"),F(xA.$$.fragment),xAo=l(),Mde=a("p"),$Ao=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kAo=l(),Ri=a("p"),SAo=o(`Note:
Loading a model from its configuration file does `),Ede=a("strong"),RAo=o("not"),BAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ij=a("a"),PAo=o("from_pretrained()"),IAo=o(" to load the model weights."),qAo=l(),F(s1.$$.fragment),NAo=l(),Ze=a("div"),F($A.$$.fragment),jAo=l(),Cde=a("p"),DAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GAo=l(),La=a("p"),OAo=o("The model class to instantiate is selected based on the "),wde=a("code"),VAo=o("model_type"),XAo=o(` property of the config object (either
passed as an argument or loaded from `),Ade=a("code"),zAo=o("pretrained_model_name_or_path"),QAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=a("code"),WAo=o("pretrained_model_name_or_path"),HAo=o(":"),UAo=l(),q=a("ul"),l1=a("li"),Lde=a("strong"),JAo=o("albert"),YAo=o(" \u2014 "),qj=a("a"),KAo=o("AlbertForSequenceClassification"),ZAo=o(" (ALBERT model)"),eyo=l(),i1=a("li"),xde=a("strong"),oyo=o("bart"),ryo=o(" \u2014 "),Nj=a("a"),tyo=o("BartForSequenceClassification"),ayo=o(" (BART model)"),nyo=l(),d1=a("li"),$de=a("strong"),syo=o("bert"),lyo=o(" \u2014 "),jj=a("a"),iyo=o("BertForSequenceClassification"),dyo=o(" (BERT model)"),cyo=l(),c1=a("li"),kde=a("strong"),fyo=o("big_bird"),myo=o(" \u2014 "),Dj=a("a"),gyo=o("BigBirdForSequenceClassification"),hyo=o(" (BigBird model)"),pyo=l(),f1=a("li"),Sde=a("strong"),uyo=o("bigbird_pegasus"),_yo=o(" \u2014 "),Gj=a("a"),byo=o("BigBirdPegasusForSequenceClassification"),vyo=o(" (BigBirdPegasus model)"),Fyo=l(),m1=a("li"),Rde=a("strong"),Tyo=o("camembert"),Myo=o(" \u2014 "),Oj=a("a"),Eyo=o("CamembertForSequenceClassification"),Cyo=o(" (CamemBERT model)"),wyo=l(),g1=a("li"),Bde=a("strong"),Ayo=o("canine"),yyo=o(" \u2014 "),Vj=a("a"),Lyo=o("CanineForSequenceClassification"),xyo=o(" (Canine model)"),$yo=l(),h1=a("li"),Pde=a("strong"),kyo=o("convbert"),Syo=o(" \u2014 "),Xj=a("a"),Ryo=o("ConvBertForSequenceClassification"),Byo=o(" (ConvBERT model)"),Pyo=l(),p1=a("li"),Ide=a("strong"),Iyo=o("ctrl"),qyo=o(" \u2014 "),zj=a("a"),Nyo=o("CTRLForSequenceClassification"),jyo=o(" (CTRL model)"),Dyo=l(),u1=a("li"),qde=a("strong"),Gyo=o("data2vec-text"),Oyo=o(" \u2014 "),Qj=a("a"),Vyo=o("Data2VecTextForSequenceClassification"),Xyo=o(" (Data2VecText model)"),zyo=l(),_1=a("li"),Nde=a("strong"),Qyo=o("deberta"),Wyo=o(" \u2014 "),Wj=a("a"),Hyo=o("DebertaForSequenceClassification"),Uyo=o(" (DeBERTa model)"),Jyo=l(),b1=a("li"),jde=a("strong"),Yyo=o("deberta-v2"),Kyo=o(" \u2014 "),Hj=a("a"),Zyo=o("DebertaV2ForSequenceClassification"),eLo=o(" (DeBERTa-v2 model)"),oLo=l(),v1=a("li"),Dde=a("strong"),rLo=o("distilbert"),tLo=o(" \u2014 "),Uj=a("a"),aLo=o("DistilBertForSequenceClassification"),nLo=o(" (DistilBERT model)"),sLo=l(),F1=a("li"),Gde=a("strong"),lLo=o("electra"),iLo=o(" \u2014 "),Jj=a("a"),dLo=o("ElectraForSequenceClassification"),cLo=o(" (ELECTRA model)"),fLo=l(),T1=a("li"),Ode=a("strong"),mLo=o("flaubert"),gLo=o(" \u2014 "),Yj=a("a"),hLo=o("FlaubertForSequenceClassification"),pLo=o(" (FlauBERT model)"),uLo=l(),M1=a("li"),Vde=a("strong"),_Lo=o("fnet"),bLo=o(" \u2014 "),Kj=a("a"),vLo=o("FNetForSequenceClassification"),FLo=o(" (FNet model)"),TLo=l(),E1=a("li"),Xde=a("strong"),MLo=o("funnel"),ELo=o(" \u2014 "),Zj=a("a"),CLo=o("FunnelForSequenceClassification"),wLo=o(" (Funnel Transformer model)"),ALo=l(),C1=a("li"),zde=a("strong"),yLo=o("gpt2"),LLo=o(" \u2014 "),eD=a("a"),xLo=o("GPT2ForSequenceClassification"),$Lo=o(" (OpenAI GPT-2 model)"),kLo=l(),w1=a("li"),Qde=a("strong"),SLo=o("gpt_neo"),RLo=o(" \u2014 "),oD=a("a"),BLo=o("GPTNeoForSequenceClassification"),PLo=o(" (GPT Neo model)"),ILo=l(),A1=a("li"),Wde=a("strong"),qLo=o("gptj"),NLo=o(" \u2014 "),rD=a("a"),jLo=o("GPTJForSequenceClassification"),DLo=o(" (GPT-J model)"),GLo=l(),y1=a("li"),Hde=a("strong"),OLo=o("ibert"),VLo=o(" \u2014 "),tD=a("a"),XLo=o("IBertForSequenceClassification"),zLo=o(" (I-BERT model)"),QLo=l(),L1=a("li"),Ude=a("strong"),WLo=o("layoutlm"),HLo=o(" \u2014 "),aD=a("a"),ULo=o("LayoutLMForSequenceClassification"),JLo=o(" (LayoutLM model)"),YLo=l(),x1=a("li"),Jde=a("strong"),KLo=o("layoutlmv2"),ZLo=o(" \u2014 "),nD=a("a"),e8o=o("LayoutLMv2ForSequenceClassification"),o8o=o(" (LayoutLMv2 model)"),r8o=l(),$1=a("li"),Yde=a("strong"),t8o=o("layoutlmv3"),a8o=o(" \u2014 "),sD=a("a"),n8o=o("LayoutLMv3ForSequenceClassification"),s8o=o(" (LayoutLMv3 model)"),l8o=l(),k1=a("li"),Kde=a("strong"),i8o=o("led"),d8o=o(" \u2014 "),lD=a("a"),c8o=o("LEDForSequenceClassification"),f8o=o(" (LED model)"),m8o=l(),S1=a("li"),Zde=a("strong"),g8o=o("longformer"),h8o=o(" \u2014 "),iD=a("a"),p8o=o("LongformerForSequenceClassification"),u8o=o(" (Longformer model)"),_8o=l(),R1=a("li"),ece=a("strong"),b8o=o("mbart"),v8o=o(" \u2014 "),dD=a("a"),F8o=o("MBartForSequenceClassification"),T8o=o(" (mBART model)"),M8o=l(),B1=a("li"),oce=a("strong"),E8o=o("megatron-bert"),C8o=o(" \u2014 "),cD=a("a"),w8o=o("MegatronBertForSequenceClassification"),A8o=o(" (MegatronBert model)"),y8o=l(),P1=a("li"),rce=a("strong"),L8o=o("mobilebert"),x8o=o(" \u2014 "),fD=a("a"),$8o=o("MobileBertForSequenceClassification"),k8o=o(" (MobileBERT model)"),S8o=l(),I1=a("li"),tce=a("strong"),R8o=o("mpnet"),B8o=o(" \u2014 "),mD=a("a"),P8o=o("MPNetForSequenceClassification"),I8o=o(" (MPNet model)"),q8o=l(),q1=a("li"),ace=a("strong"),N8o=o("nystromformer"),j8o=o(" \u2014 "),gD=a("a"),D8o=o("NystromformerForSequenceClassification"),G8o=o(" (Nystromformer model)"),O8o=l(),N1=a("li"),nce=a("strong"),V8o=o("openai-gpt"),X8o=o(" \u2014 "),hD=a("a"),z8o=o("OpenAIGPTForSequenceClassification"),Q8o=o(" (OpenAI GPT model)"),W8o=l(),j1=a("li"),sce=a("strong"),H8o=o("perceiver"),U8o=o(" \u2014 "),pD=a("a"),J8o=o("PerceiverForSequenceClassification"),Y8o=o(" (Perceiver model)"),K8o=l(),D1=a("li"),lce=a("strong"),Z8o=o("plbart"),exo=o(" \u2014 "),uD=a("a"),oxo=o("PLBartForSequenceClassification"),rxo=o(" (PLBart model)"),txo=l(),G1=a("li"),ice=a("strong"),axo=o("qdqbert"),nxo=o(" \u2014 "),_D=a("a"),sxo=o("QDQBertForSequenceClassification"),lxo=o(" (QDQBert model)"),ixo=l(),O1=a("li"),dce=a("strong"),dxo=o("reformer"),cxo=o(" \u2014 "),bD=a("a"),fxo=o("ReformerForSequenceClassification"),mxo=o(" (Reformer model)"),gxo=l(),V1=a("li"),cce=a("strong"),hxo=o("rembert"),pxo=o(" \u2014 "),vD=a("a"),uxo=o("RemBertForSequenceClassification"),_xo=o(" (RemBERT model)"),bxo=l(),X1=a("li"),fce=a("strong"),vxo=o("roberta"),Fxo=o(" \u2014 "),FD=a("a"),Txo=o("RobertaForSequenceClassification"),Mxo=o(" (RoBERTa model)"),Exo=l(),z1=a("li"),mce=a("strong"),Cxo=o("roformer"),wxo=o(" \u2014 "),TD=a("a"),Axo=o("RoFormerForSequenceClassification"),yxo=o(" (RoFormer model)"),Lxo=l(),Q1=a("li"),gce=a("strong"),xxo=o("squeezebert"),$xo=o(" \u2014 "),MD=a("a"),kxo=o("SqueezeBertForSequenceClassification"),Sxo=o(" (SqueezeBERT model)"),Rxo=l(),W1=a("li"),hce=a("strong"),Bxo=o("tapas"),Pxo=o(" \u2014 "),ED=a("a"),Ixo=o("TapasForSequenceClassification"),qxo=o(" (TAPAS model)"),Nxo=l(),H1=a("li"),pce=a("strong"),jxo=o("tapex"),Dxo=o(" \u2014 "),CD=a("a"),Gxo=o("BartForSequenceClassification"),Oxo=o(" (TAPEX model)"),Vxo=l(),U1=a("li"),uce=a("strong"),Xxo=o("transfo-xl"),zxo=o(" \u2014 "),wD=a("a"),Qxo=o("TransfoXLForSequenceClassification"),Wxo=o(" (Transformer-XL model)"),Hxo=l(),J1=a("li"),_ce=a("strong"),Uxo=o("xlm"),Jxo=o(" \u2014 "),AD=a("a"),Yxo=o("XLMForSequenceClassification"),Kxo=o(" (XLM model)"),Zxo=l(),Y1=a("li"),bce=a("strong"),e9o=o("xlm-roberta"),o9o=o(" \u2014 "),yD=a("a"),r9o=o("XLMRobertaForSequenceClassification"),t9o=o(" (XLM-RoBERTa model)"),a9o=l(),K1=a("li"),vce=a("strong"),n9o=o("xlm-roberta-xl"),s9o=o(" \u2014 "),LD=a("a"),l9o=o("XLMRobertaXLForSequenceClassification"),i9o=o(" (XLM-RoBERTa-XL model)"),d9o=l(),Z1=a("li"),Fce=a("strong"),c9o=o("xlnet"),f9o=o(" \u2014 "),xD=a("a"),m9o=o("XLNetForSequenceClassification"),g9o=o(" (XLNet model)"),h9o=l(),eb=a("li"),Tce=a("strong"),p9o=o("yoso"),u9o=o(" \u2014 "),$D=a("a"),_9o=o("YosoForSequenceClassification"),b9o=o(" (YOSO model)"),v9o=l(),ob=a("p"),F9o=o("The model is set in evaluation mode by default using "),Mce=a("code"),T9o=o("model.eval()"),M9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=a("code"),E9o=o("model.train()"),C9o=l(),F(rb.$$.fragment),dPe=l(),Bi=a("h2"),tb=a("a"),Cce=a("span"),F(kA.$$.fragment),w9o=l(),wce=a("span"),A9o=o("AutoModelForMultipleChoice"),cPe=l(),Bo=a("div"),F(SA.$$.fragment),y9o=l(),Pi=a("p"),L9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kD=a("a"),x9o=o("from_pretrained()"),$9o=o(" class method or the "),SD=a("a"),k9o=o("from_config()"),S9o=o(` class
method.`),R9o=l(),RA=a("p"),B9o=o("This class cannot be instantiated directly using "),Ace=a("code"),P9o=o("__init__()"),I9o=o(" (throws an error)."),q9o=l(),nt=a("div"),F(BA.$$.fragment),N9o=l(),yce=a("p"),j9o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),D9o=l(),Ii=a("p"),G9o=o(`Note:
Loading a model from its configuration file does `),Lce=a("strong"),O9o=o("not"),V9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RD=a("a"),X9o=o("from_pretrained()"),z9o=o(" to load the model weights."),Q9o=l(),F(ab.$$.fragment),W9o=l(),eo=a("div"),F(PA.$$.fragment),H9o=l(),xce=a("p"),U9o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),J9o=l(),xa=a("p"),Y9o=o("The model class to instantiate is selected based on the "),$ce=a("code"),K9o=o("model_type"),Z9o=o(` property of the config object (either
passed as an argument or loaded from `),kce=a("code"),e$o=o("pretrained_model_name_or_path"),o$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=a("code"),r$o=o("pretrained_model_name_or_path"),t$o=o(":"),a$o=l(),Y=a("ul"),nb=a("li"),Rce=a("strong"),n$o=o("albert"),s$o=o(" \u2014 "),BD=a("a"),l$o=o("AlbertForMultipleChoice"),i$o=o(" (ALBERT model)"),d$o=l(),sb=a("li"),Bce=a("strong"),c$o=o("bert"),f$o=o(" \u2014 "),PD=a("a"),m$o=o("BertForMultipleChoice"),g$o=o(" (BERT model)"),h$o=l(),lb=a("li"),Pce=a("strong"),p$o=o("big_bird"),u$o=o(" \u2014 "),ID=a("a"),_$o=o("BigBirdForMultipleChoice"),b$o=o(" (BigBird model)"),v$o=l(),ib=a("li"),Ice=a("strong"),F$o=o("camembert"),T$o=o(" \u2014 "),qD=a("a"),M$o=o("CamembertForMultipleChoice"),E$o=o(" (CamemBERT model)"),C$o=l(),db=a("li"),qce=a("strong"),w$o=o("canine"),A$o=o(" \u2014 "),ND=a("a"),y$o=o("CanineForMultipleChoice"),L$o=o(" (Canine model)"),x$o=l(),cb=a("li"),Nce=a("strong"),$$o=o("convbert"),k$o=o(" \u2014 "),jD=a("a"),S$o=o("ConvBertForMultipleChoice"),R$o=o(" (ConvBERT model)"),B$o=l(),fb=a("li"),jce=a("strong"),P$o=o("data2vec-text"),I$o=o(" \u2014 "),DD=a("a"),q$o=o("Data2VecTextForMultipleChoice"),N$o=o(" (Data2VecText model)"),j$o=l(),mb=a("li"),Dce=a("strong"),D$o=o("distilbert"),G$o=o(" \u2014 "),GD=a("a"),O$o=o("DistilBertForMultipleChoice"),V$o=o(" (DistilBERT model)"),X$o=l(),gb=a("li"),Gce=a("strong"),z$o=o("electra"),Q$o=o(" \u2014 "),OD=a("a"),W$o=o("ElectraForMultipleChoice"),H$o=o(" (ELECTRA model)"),U$o=l(),hb=a("li"),Oce=a("strong"),J$o=o("flaubert"),Y$o=o(" \u2014 "),VD=a("a"),K$o=o("FlaubertForMultipleChoice"),Z$o=o(" (FlauBERT model)"),eko=l(),pb=a("li"),Vce=a("strong"),oko=o("fnet"),rko=o(" \u2014 "),XD=a("a"),tko=o("FNetForMultipleChoice"),ako=o(" (FNet model)"),nko=l(),ub=a("li"),Xce=a("strong"),sko=o("funnel"),lko=o(" \u2014 "),zD=a("a"),iko=o("FunnelForMultipleChoice"),dko=o(" (Funnel Transformer model)"),cko=l(),_b=a("li"),zce=a("strong"),fko=o("ibert"),mko=o(" \u2014 "),QD=a("a"),gko=o("IBertForMultipleChoice"),hko=o(" (I-BERT model)"),pko=l(),bb=a("li"),Qce=a("strong"),uko=o("longformer"),_ko=o(" \u2014 "),WD=a("a"),bko=o("LongformerForMultipleChoice"),vko=o(" (Longformer model)"),Fko=l(),vb=a("li"),Wce=a("strong"),Tko=o("megatron-bert"),Mko=o(" \u2014 "),HD=a("a"),Eko=o("MegatronBertForMultipleChoice"),Cko=o(" (MegatronBert model)"),wko=l(),Fb=a("li"),Hce=a("strong"),Ako=o("mobilebert"),yko=o(" \u2014 "),UD=a("a"),Lko=o("MobileBertForMultipleChoice"),xko=o(" (MobileBERT model)"),$ko=l(),Tb=a("li"),Uce=a("strong"),kko=o("mpnet"),Sko=o(" \u2014 "),JD=a("a"),Rko=o("MPNetForMultipleChoice"),Bko=o(" (MPNet model)"),Pko=l(),Mb=a("li"),Jce=a("strong"),Iko=o("nystromformer"),qko=o(" \u2014 "),YD=a("a"),Nko=o("NystromformerForMultipleChoice"),jko=o(" (Nystromformer model)"),Dko=l(),Eb=a("li"),Yce=a("strong"),Gko=o("qdqbert"),Oko=o(" \u2014 "),KD=a("a"),Vko=o("QDQBertForMultipleChoice"),Xko=o(" (QDQBert model)"),zko=l(),Cb=a("li"),Kce=a("strong"),Qko=o("rembert"),Wko=o(" \u2014 "),ZD=a("a"),Hko=o("RemBertForMultipleChoice"),Uko=o(" (RemBERT model)"),Jko=l(),wb=a("li"),Zce=a("strong"),Yko=o("roberta"),Kko=o(" \u2014 "),eG=a("a"),Zko=o("RobertaForMultipleChoice"),eSo=o(" (RoBERTa model)"),oSo=l(),Ab=a("li"),efe=a("strong"),rSo=o("roformer"),tSo=o(" \u2014 "),oG=a("a"),aSo=o("RoFormerForMultipleChoice"),nSo=o(" (RoFormer model)"),sSo=l(),yb=a("li"),ofe=a("strong"),lSo=o("squeezebert"),iSo=o(" \u2014 "),rG=a("a"),dSo=o("SqueezeBertForMultipleChoice"),cSo=o(" (SqueezeBERT model)"),fSo=l(),Lb=a("li"),rfe=a("strong"),mSo=o("xlm"),gSo=o(" \u2014 "),tG=a("a"),hSo=o("XLMForMultipleChoice"),pSo=o(" (XLM model)"),uSo=l(),xb=a("li"),tfe=a("strong"),_So=o("xlm-roberta"),bSo=o(" \u2014 "),aG=a("a"),vSo=o("XLMRobertaForMultipleChoice"),FSo=o(" (XLM-RoBERTa model)"),TSo=l(),$b=a("li"),afe=a("strong"),MSo=o("xlm-roberta-xl"),ESo=o(" \u2014 "),nG=a("a"),CSo=o("XLMRobertaXLForMultipleChoice"),wSo=o(" (XLM-RoBERTa-XL model)"),ASo=l(),kb=a("li"),nfe=a("strong"),ySo=o("xlnet"),LSo=o(" \u2014 "),sG=a("a"),xSo=o("XLNetForMultipleChoice"),$So=o(" (XLNet model)"),kSo=l(),Sb=a("li"),sfe=a("strong"),SSo=o("yoso"),RSo=o(" \u2014 "),lG=a("a"),BSo=o("YosoForMultipleChoice"),PSo=o(" (YOSO model)"),ISo=l(),Rb=a("p"),qSo=o("The model is set in evaluation mode by default using "),lfe=a("code"),NSo=o("model.eval()"),jSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),DSo=o("model.train()"),GSo=l(),F(Bb.$$.fragment),fPe=l(),qi=a("h2"),Pb=a("a"),dfe=a("span"),F(IA.$$.fragment),OSo=l(),cfe=a("span"),VSo=o("AutoModelForNextSentencePrediction"),mPe=l(),Po=a("div"),F(qA.$$.fragment),XSo=l(),Ni=a("p"),zSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iG=a("a"),QSo=o("from_pretrained()"),WSo=o(" class method or the "),dG=a("a"),HSo=o("from_config()"),USo=o(` class
method.`),JSo=l(),NA=a("p"),YSo=o("This class cannot be instantiated directly using "),ffe=a("code"),KSo=o("__init__()"),ZSo=o(" (throws an error)."),eRo=l(),st=a("div"),F(jA.$$.fragment),oRo=l(),mfe=a("p"),rRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tRo=l(),ji=a("p"),aRo=o(`Note:
Loading a model from its configuration file does `),gfe=a("strong"),nRo=o("not"),sRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),lRo=o("from_pretrained()"),iRo=o(" to load the model weights."),dRo=l(),F(Ib.$$.fragment),cRo=l(),oo=a("div"),F(DA.$$.fragment),fRo=l(),hfe=a("p"),mRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gRo=l(),$a=a("p"),hRo=o("The model class to instantiate is selected based on the "),pfe=a("code"),pRo=o("model_type"),uRo=o(` property of the config object (either
passed as an argument or loaded from `),ufe=a("code"),_Ro=o("pretrained_model_name_or_path"),bRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_fe=a("code"),vRo=o("pretrained_model_name_or_path"),FRo=o(":"),TRo=l(),Ur=a("ul"),qb=a("li"),bfe=a("strong"),MRo=o("bert"),ERo=o(" \u2014 "),fG=a("a"),CRo=o("BertForNextSentencePrediction"),wRo=o(" (BERT model)"),ARo=l(),Nb=a("li"),vfe=a("strong"),yRo=o("fnet"),LRo=o(" \u2014 "),mG=a("a"),xRo=o("FNetForNextSentencePrediction"),$Ro=o(" (FNet model)"),kRo=l(),jb=a("li"),Ffe=a("strong"),SRo=o("megatron-bert"),RRo=o(" \u2014 "),gG=a("a"),BRo=o("MegatronBertForNextSentencePrediction"),PRo=o(" (MegatronBert model)"),IRo=l(),Db=a("li"),Tfe=a("strong"),qRo=o("mobilebert"),NRo=o(" \u2014 "),hG=a("a"),jRo=o("MobileBertForNextSentencePrediction"),DRo=o(" (MobileBERT model)"),GRo=l(),Gb=a("li"),Mfe=a("strong"),ORo=o("qdqbert"),VRo=o(" \u2014 "),pG=a("a"),XRo=o("QDQBertForNextSentencePrediction"),zRo=o(" (QDQBert model)"),QRo=l(),Ob=a("p"),WRo=o("The model is set in evaluation mode by default using "),Efe=a("code"),HRo=o("model.eval()"),URo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=a("code"),JRo=o("model.train()"),YRo=l(),F(Vb.$$.fragment),gPe=l(),Di=a("h2"),Xb=a("a"),wfe=a("span"),F(GA.$$.fragment),KRo=l(),Afe=a("span"),ZRo=o("AutoModelForTokenClassification"),hPe=l(),Io=a("div"),F(OA.$$.fragment),eBo=l(),Gi=a("p"),oBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uG=a("a"),rBo=o("from_pretrained()"),tBo=o(" class method or the "),_G=a("a"),aBo=o("from_config()"),nBo=o(` class
method.`),sBo=l(),VA=a("p"),lBo=o("This class cannot be instantiated directly using "),yfe=a("code"),iBo=o("__init__()"),dBo=o(" (throws an error)."),cBo=l(),lt=a("div"),F(XA.$$.fragment),fBo=l(),Lfe=a("p"),mBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gBo=l(),Oi=a("p"),hBo=o(`Note:
Loading a model from its configuration file does `),xfe=a("strong"),pBo=o("not"),uBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=a("a"),_Bo=o("from_pretrained()"),bBo=o(" to load the model weights."),vBo=l(),F(zb.$$.fragment),FBo=l(),ro=a("div"),F(zA.$$.fragment),TBo=l(),$fe=a("p"),MBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EBo=l(),ka=a("p"),CBo=o("The model class to instantiate is selected based on the "),kfe=a("code"),wBo=o("model_type"),ABo=o(` property of the config object (either
passed as an argument or loaded from `),Sfe=a("code"),yBo=o("pretrained_model_name_or_path"),LBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rfe=a("code"),xBo=o("pretrained_model_name_or_path"),$Bo=o(":"),kBo=l(),W=a("ul"),Qb=a("li"),Bfe=a("strong"),SBo=o("albert"),RBo=o(" \u2014 "),vG=a("a"),BBo=o("AlbertForTokenClassification"),PBo=o(" (ALBERT model)"),IBo=l(),Wb=a("li"),Pfe=a("strong"),qBo=o("bert"),NBo=o(" \u2014 "),FG=a("a"),jBo=o("BertForTokenClassification"),DBo=o(" (BERT model)"),GBo=l(),Hb=a("li"),Ife=a("strong"),OBo=o("big_bird"),VBo=o(" \u2014 "),TG=a("a"),XBo=o("BigBirdForTokenClassification"),zBo=o(" (BigBird model)"),QBo=l(),Ub=a("li"),qfe=a("strong"),WBo=o("camembert"),HBo=o(" \u2014 "),MG=a("a"),UBo=o("CamembertForTokenClassification"),JBo=o(" (CamemBERT model)"),YBo=l(),Jb=a("li"),Nfe=a("strong"),KBo=o("canine"),ZBo=o(" \u2014 "),EG=a("a"),ePo=o("CanineForTokenClassification"),oPo=o(" (Canine model)"),rPo=l(),Yb=a("li"),jfe=a("strong"),tPo=o("convbert"),aPo=o(" \u2014 "),CG=a("a"),nPo=o("ConvBertForTokenClassification"),sPo=o(" (ConvBERT model)"),lPo=l(),Kb=a("li"),Dfe=a("strong"),iPo=o("data2vec-text"),dPo=o(" \u2014 "),wG=a("a"),cPo=o("Data2VecTextForTokenClassification"),fPo=o(" (Data2VecText model)"),mPo=l(),Zb=a("li"),Gfe=a("strong"),gPo=o("deberta"),hPo=o(" \u2014 "),AG=a("a"),pPo=o("DebertaForTokenClassification"),uPo=o(" (DeBERTa model)"),_Po=l(),e2=a("li"),Ofe=a("strong"),bPo=o("deberta-v2"),vPo=o(" \u2014 "),yG=a("a"),FPo=o("DebertaV2ForTokenClassification"),TPo=o(" (DeBERTa-v2 model)"),MPo=l(),o2=a("li"),Vfe=a("strong"),EPo=o("distilbert"),CPo=o(" \u2014 "),LG=a("a"),wPo=o("DistilBertForTokenClassification"),APo=o(" (DistilBERT model)"),yPo=l(),r2=a("li"),Xfe=a("strong"),LPo=o("electra"),xPo=o(" \u2014 "),xG=a("a"),$Po=o("ElectraForTokenClassification"),kPo=o(" (ELECTRA model)"),SPo=l(),t2=a("li"),zfe=a("strong"),RPo=o("flaubert"),BPo=o(" \u2014 "),$G=a("a"),PPo=o("FlaubertForTokenClassification"),IPo=o(" (FlauBERT model)"),qPo=l(),a2=a("li"),Qfe=a("strong"),NPo=o("fnet"),jPo=o(" \u2014 "),kG=a("a"),DPo=o("FNetForTokenClassification"),GPo=o(" (FNet model)"),OPo=l(),n2=a("li"),Wfe=a("strong"),VPo=o("funnel"),XPo=o(" \u2014 "),SG=a("a"),zPo=o("FunnelForTokenClassification"),QPo=o(" (Funnel Transformer model)"),WPo=l(),s2=a("li"),Hfe=a("strong"),HPo=o("gpt2"),UPo=o(" \u2014 "),RG=a("a"),JPo=o("GPT2ForTokenClassification"),YPo=o(" (OpenAI GPT-2 model)"),KPo=l(),l2=a("li"),Ufe=a("strong"),ZPo=o("ibert"),eIo=o(" \u2014 "),BG=a("a"),oIo=o("IBertForTokenClassification"),rIo=o(" (I-BERT model)"),tIo=l(),i2=a("li"),Jfe=a("strong"),aIo=o("layoutlm"),nIo=o(" \u2014 "),PG=a("a"),sIo=o("LayoutLMForTokenClassification"),lIo=o(" (LayoutLM model)"),iIo=l(),d2=a("li"),Yfe=a("strong"),dIo=o("layoutlmv2"),cIo=o(" \u2014 "),IG=a("a"),fIo=o("LayoutLMv2ForTokenClassification"),mIo=o(" (LayoutLMv2 model)"),gIo=l(),c2=a("li"),Kfe=a("strong"),hIo=o("layoutlmv3"),pIo=o(" \u2014 "),qG=a("a"),uIo=o("LayoutLMv3ForTokenClassification"),_Io=o(" (LayoutLMv3 model)"),bIo=l(),f2=a("li"),Zfe=a("strong"),vIo=o("longformer"),FIo=o(" \u2014 "),NG=a("a"),TIo=o("LongformerForTokenClassification"),MIo=o(" (Longformer model)"),EIo=l(),m2=a("li"),eme=a("strong"),CIo=o("megatron-bert"),wIo=o(" \u2014 "),jG=a("a"),AIo=o("MegatronBertForTokenClassification"),yIo=o(" (MegatronBert model)"),LIo=l(),g2=a("li"),ome=a("strong"),xIo=o("mobilebert"),$Io=o(" \u2014 "),DG=a("a"),kIo=o("MobileBertForTokenClassification"),SIo=o(" (MobileBERT model)"),RIo=l(),h2=a("li"),rme=a("strong"),BIo=o("mpnet"),PIo=o(" \u2014 "),GG=a("a"),IIo=o("MPNetForTokenClassification"),qIo=o(" (MPNet model)"),NIo=l(),p2=a("li"),tme=a("strong"),jIo=o("nystromformer"),DIo=o(" \u2014 "),OG=a("a"),GIo=o("NystromformerForTokenClassification"),OIo=o(" (Nystromformer model)"),VIo=l(),u2=a("li"),ame=a("strong"),XIo=o("qdqbert"),zIo=o(" \u2014 "),VG=a("a"),QIo=o("QDQBertForTokenClassification"),WIo=o(" (QDQBert model)"),HIo=l(),_2=a("li"),nme=a("strong"),UIo=o("rembert"),JIo=o(" \u2014 "),XG=a("a"),YIo=o("RemBertForTokenClassification"),KIo=o(" (RemBERT model)"),ZIo=l(),b2=a("li"),sme=a("strong"),eqo=o("roberta"),oqo=o(" \u2014 "),zG=a("a"),rqo=o("RobertaForTokenClassification"),tqo=o(" (RoBERTa model)"),aqo=l(),v2=a("li"),lme=a("strong"),nqo=o("roformer"),sqo=o(" \u2014 "),QG=a("a"),lqo=o("RoFormerForTokenClassification"),iqo=o(" (RoFormer model)"),dqo=l(),F2=a("li"),ime=a("strong"),cqo=o("squeezebert"),fqo=o(" \u2014 "),WG=a("a"),mqo=o("SqueezeBertForTokenClassification"),gqo=o(" (SqueezeBERT model)"),hqo=l(),T2=a("li"),dme=a("strong"),pqo=o("xlm"),uqo=o(" \u2014 "),HG=a("a"),_qo=o("XLMForTokenClassification"),bqo=o(" (XLM model)"),vqo=l(),M2=a("li"),cme=a("strong"),Fqo=o("xlm-roberta"),Tqo=o(" \u2014 "),UG=a("a"),Mqo=o("XLMRobertaForTokenClassification"),Eqo=o(" (XLM-RoBERTa model)"),Cqo=l(),E2=a("li"),fme=a("strong"),wqo=o("xlm-roberta-xl"),Aqo=o(" \u2014 "),JG=a("a"),yqo=o("XLMRobertaXLForTokenClassification"),Lqo=o(" (XLM-RoBERTa-XL model)"),xqo=l(),C2=a("li"),mme=a("strong"),$qo=o("xlnet"),kqo=o(" \u2014 "),YG=a("a"),Sqo=o("XLNetForTokenClassification"),Rqo=o(" (XLNet model)"),Bqo=l(),w2=a("li"),gme=a("strong"),Pqo=o("yoso"),Iqo=o(" \u2014 "),KG=a("a"),qqo=o("YosoForTokenClassification"),Nqo=o(" (YOSO model)"),jqo=l(),A2=a("p"),Dqo=o("The model is set in evaluation mode by default using "),hme=a("code"),Gqo=o("model.eval()"),Oqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=a("code"),Vqo=o("model.train()"),Xqo=l(),F(y2.$$.fragment),pPe=l(),Vi=a("h2"),L2=a("a"),ume=a("span"),F(QA.$$.fragment),zqo=l(),_me=a("span"),Qqo=o("AutoModelForQuestionAnswering"),uPe=l(),qo=a("div"),F(WA.$$.fragment),Wqo=l(),Xi=a("p"),Hqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZG=a("a"),Uqo=o("from_pretrained()"),Jqo=o(" class method or the "),eO=a("a"),Yqo=o("from_config()"),Kqo=o(` class
method.`),Zqo=l(),HA=a("p"),eNo=o("This class cannot be instantiated directly using "),bme=a("code"),oNo=o("__init__()"),rNo=o(" (throws an error)."),tNo=l(),it=a("div"),F(UA.$$.fragment),aNo=l(),vme=a("p"),nNo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sNo=l(),zi=a("p"),lNo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),iNo=o("not"),dNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oO=a("a"),cNo=o("from_pretrained()"),fNo=o(" to load the model weights."),mNo=l(),F(x2.$$.fragment),gNo=l(),to=a("div"),F(JA.$$.fragment),hNo=l(),Tme=a("p"),pNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uNo=l(),Sa=a("p"),_No=o("The model class to instantiate is selected based on the "),Mme=a("code"),bNo=o("model_type"),vNo=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),FNo=o("pretrained_model_name_or_path"),TNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),MNo=o("pretrained_model_name_or_path"),ENo=o(":"),CNo=l(),G=a("ul"),$2=a("li"),wme=a("strong"),wNo=o("albert"),ANo=o(" \u2014 "),rO=a("a"),yNo=o("AlbertForQuestionAnswering"),LNo=o(" (ALBERT model)"),xNo=l(),k2=a("li"),Ame=a("strong"),$No=o("bart"),kNo=o(" \u2014 "),tO=a("a"),SNo=o("BartForQuestionAnswering"),RNo=o(" (BART model)"),BNo=l(),S2=a("li"),yme=a("strong"),PNo=o("bert"),INo=o(" \u2014 "),aO=a("a"),qNo=o("BertForQuestionAnswering"),NNo=o(" (BERT model)"),jNo=l(),R2=a("li"),Lme=a("strong"),DNo=o("big_bird"),GNo=o(" \u2014 "),nO=a("a"),ONo=o("BigBirdForQuestionAnswering"),VNo=o(" (BigBird model)"),XNo=l(),B2=a("li"),xme=a("strong"),zNo=o("bigbird_pegasus"),QNo=o(" \u2014 "),sO=a("a"),WNo=o("BigBirdPegasusForQuestionAnswering"),HNo=o(" (BigBirdPegasus model)"),UNo=l(),P2=a("li"),$me=a("strong"),JNo=o("camembert"),YNo=o(" \u2014 "),lO=a("a"),KNo=o("CamembertForQuestionAnswering"),ZNo=o(" (CamemBERT model)"),ejo=l(),I2=a("li"),kme=a("strong"),ojo=o("canine"),rjo=o(" \u2014 "),iO=a("a"),tjo=o("CanineForQuestionAnswering"),ajo=o(" (Canine model)"),njo=l(),q2=a("li"),Sme=a("strong"),sjo=o("convbert"),ljo=o(" \u2014 "),dO=a("a"),ijo=o("ConvBertForQuestionAnswering"),djo=o(" (ConvBERT model)"),cjo=l(),N2=a("li"),Rme=a("strong"),fjo=o("data2vec-text"),mjo=o(" \u2014 "),cO=a("a"),gjo=o("Data2VecTextForQuestionAnswering"),hjo=o(" (Data2VecText model)"),pjo=l(),j2=a("li"),Bme=a("strong"),ujo=o("deberta"),_jo=o(" \u2014 "),fO=a("a"),bjo=o("DebertaForQuestionAnswering"),vjo=o(" (DeBERTa model)"),Fjo=l(),D2=a("li"),Pme=a("strong"),Tjo=o("deberta-v2"),Mjo=o(" \u2014 "),mO=a("a"),Ejo=o("DebertaV2ForQuestionAnswering"),Cjo=o(" (DeBERTa-v2 model)"),wjo=l(),G2=a("li"),Ime=a("strong"),Ajo=o("distilbert"),yjo=o(" \u2014 "),gO=a("a"),Ljo=o("DistilBertForQuestionAnswering"),xjo=o(" (DistilBERT model)"),$jo=l(),O2=a("li"),qme=a("strong"),kjo=o("electra"),Sjo=o(" \u2014 "),hO=a("a"),Rjo=o("ElectraForQuestionAnswering"),Bjo=o(" (ELECTRA model)"),Pjo=l(),V2=a("li"),Nme=a("strong"),Ijo=o("flaubert"),qjo=o(" \u2014 "),pO=a("a"),Njo=o("FlaubertForQuestionAnsweringSimple"),jjo=o(" (FlauBERT model)"),Djo=l(),X2=a("li"),jme=a("strong"),Gjo=o("fnet"),Ojo=o(" \u2014 "),uO=a("a"),Vjo=o("FNetForQuestionAnswering"),Xjo=o(" (FNet model)"),zjo=l(),z2=a("li"),Dme=a("strong"),Qjo=o("funnel"),Wjo=o(" \u2014 "),_O=a("a"),Hjo=o("FunnelForQuestionAnswering"),Ujo=o(" (Funnel Transformer model)"),Jjo=l(),Q2=a("li"),Gme=a("strong"),Yjo=o("gptj"),Kjo=o(" \u2014 "),bO=a("a"),Zjo=o("GPTJForQuestionAnswering"),eDo=o(" (GPT-J model)"),oDo=l(),W2=a("li"),Ome=a("strong"),rDo=o("ibert"),tDo=o(" \u2014 "),vO=a("a"),aDo=o("IBertForQuestionAnswering"),nDo=o(" (I-BERT model)"),sDo=l(),H2=a("li"),Vme=a("strong"),lDo=o("layoutlmv2"),iDo=o(" \u2014 "),FO=a("a"),dDo=o("LayoutLMv2ForQuestionAnswering"),cDo=o(" (LayoutLMv2 model)"),fDo=l(),U2=a("li"),Xme=a("strong"),mDo=o("layoutlmv3"),gDo=o(" \u2014 "),TO=a("a"),hDo=o("LayoutLMv3ForQuestionAnswering"),pDo=o(" (LayoutLMv3 model)"),uDo=l(),J2=a("li"),zme=a("strong"),_Do=o("led"),bDo=o(" \u2014 "),MO=a("a"),vDo=o("LEDForQuestionAnswering"),FDo=o(" (LED model)"),TDo=l(),Y2=a("li"),Qme=a("strong"),MDo=o("longformer"),EDo=o(" \u2014 "),EO=a("a"),CDo=o("LongformerForQuestionAnswering"),wDo=o(" (Longformer model)"),ADo=l(),K2=a("li"),Wme=a("strong"),yDo=o("lxmert"),LDo=o(" \u2014 "),CO=a("a"),xDo=o("LxmertForQuestionAnswering"),$Do=o(" (LXMERT model)"),kDo=l(),Z2=a("li"),Hme=a("strong"),SDo=o("mbart"),RDo=o(" \u2014 "),wO=a("a"),BDo=o("MBartForQuestionAnswering"),PDo=o(" (mBART model)"),IDo=l(),ev=a("li"),Ume=a("strong"),qDo=o("megatron-bert"),NDo=o(" \u2014 "),AO=a("a"),jDo=o("MegatronBertForQuestionAnswering"),DDo=o(" (MegatronBert model)"),GDo=l(),ov=a("li"),Jme=a("strong"),ODo=o("mobilebert"),VDo=o(" \u2014 "),yO=a("a"),XDo=o("MobileBertForQuestionAnswering"),zDo=o(" (MobileBERT model)"),QDo=l(),rv=a("li"),Yme=a("strong"),WDo=o("mpnet"),HDo=o(" \u2014 "),LO=a("a"),UDo=o("MPNetForQuestionAnswering"),JDo=o(" (MPNet model)"),YDo=l(),tv=a("li"),Kme=a("strong"),KDo=o("nystromformer"),ZDo=o(" \u2014 "),xO=a("a"),eGo=o("NystromformerForQuestionAnswering"),oGo=o(" (Nystromformer model)"),rGo=l(),av=a("li"),Zme=a("strong"),tGo=o("qdqbert"),aGo=o(" \u2014 "),$O=a("a"),nGo=o("QDQBertForQuestionAnswering"),sGo=o(" (QDQBert model)"),lGo=l(),nv=a("li"),ege=a("strong"),iGo=o("reformer"),dGo=o(" \u2014 "),kO=a("a"),cGo=o("ReformerForQuestionAnswering"),fGo=o(" (Reformer model)"),mGo=l(),sv=a("li"),oge=a("strong"),gGo=o("rembert"),hGo=o(" \u2014 "),SO=a("a"),pGo=o("RemBertForQuestionAnswering"),uGo=o(" (RemBERT model)"),_Go=l(),lv=a("li"),rge=a("strong"),bGo=o("roberta"),vGo=o(" \u2014 "),RO=a("a"),FGo=o("RobertaForQuestionAnswering"),TGo=o(" (RoBERTa model)"),MGo=l(),iv=a("li"),tge=a("strong"),EGo=o("roformer"),CGo=o(" \u2014 "),BO=a("a"),wGo=o("RoFormerForQuestionAnswering"),AGo=o(" (RoFormer model)"),yGo=l(),dv=a("li"),age=a("strong"),LGo=o("splinter"),xGo=o(" \u2014 "),PO=a("a"),$Go=o("SplinterForQuestionAnswering"),kGo=o(" (Splinter model)"),SGo=l(),cv=a("li"),nge=a("strong"),RGo=o("squeezebert"),BGo=o(" \u2014 "),IO=a("a"),PGo=o("SqueezeBertForQuestionAnswering"),IGo=o(" (SqueezeBERT model)"),qGo=l(),fv=a("li"),sge=a("strong"),NGo=o("xlm"),jGo=o(" \u2014 "),qO=a("a"),DGo=o("XLMForQuestionAnsweringSimple"),GGo=o(" (XLM model)"),OGo=l(),mv=a("li"),lge=a("strong"),VGo=o("xlm-roberta"),XGo=o(" \u2014 "),NO=a("a"),zGo=o("XLMRobertaForQuestionAnswering"),QGo=o(" (XLM-RoBERTa model)"),WGo=l(),gv=a("li"),ige=a("strong"),HGo=o("xlm-roberta-xl"),UGo=o(" \u2014 "),jO=a("a"),JGo=o("XLMRobertaXLForQuestionAnswering"),YGo=o(" (XLM-RoBERTa-XL model)"),KGo=l(),hv=a("li"),dge=a("strong"),ZGo=o("xlnet"),eOo=o(" \u2014 "),DO=a("a"),oOo=o("XLNetForQuestionAnsweringSimple"),rOo=o(" (XLNet model)"),tOo=l(),pv=a("li"),cge=a("strong"),aOo=o("yoso"),nOo=o(" \u2014 "),GO=a("a"),sOo=o("YosoForQuestionAnswering"),lOo=o(" (YOSO model)"),iOo=l(),uv=a("p"),dOo=o("The model is set in evaluation mode by default using "),fge=a("code"),cOo=o("model.eval()"),fOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=a("code"),mOo=o("model.train()"),gOo=l(),F(_v.$$.fragment),_Pe=l(),Qi=a("h2"),bv=a("a"),gge=a("span"),F(YA.$$.fragment),hOo=l(),hge=a("span"),pOo=o("AutoModelForTableQuestionAnswering"),bPe=l(),No=a("div"),F(KA.$$.fragment),uOo=l(),Wi=a("p"),_Oo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OO=a("a"),bOo=o("from_pretrained()"),vOo=o(" class method or the "),VO=a("a"),FOo=o("from_config()"),TOo=o(` class
method.`),MOo=l(),ZA=a("p"),EOo=o("This class cannot be instantiated directly using "),pge=a("code"),COo=o("__init__()"),wOo=o(" (throws an error)."),AOo=l(),dt=a("div"),F(ey.$$.fragment),yOo=l(),uge=a("p"),LOo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xOo=l(),Hi=a("p"),$Oo=o(`Note:
Loading a model from its configuration file does `),_ge=a("strong"),kOo=o("not"),SOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=a("a"),ROo=o("from_pretrained()"),BOo=o(" to load the model weights."),POo=l(),F(vv.$$.fragment),IOo=l(),ao=a("div"),F(oy.$$.fragment),qOo=l(),bge=a("p"),NOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jOo=l(),Ra=a("p"),DOo=o("The model class to instantiate is selected based on the "),vge=a("code"),GOo=o("model_type"),OOo=o(` property of the config object (either
passed as an argument or loaded from `),Fge=a("code"),VOo=o("pretrained_model_name_or_path"),XOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=a("code"),zOo=o("pretrained_model_name_or_path"),QOo=o(":"),WOo=l(),Mge=a("ul"),Fv=a("li"),Ege=a("strong"),HOo=o("tapas"),UOo=o(" \u2014 "),zO=a("a"),JOo=o("TapasForQuestionAnswering"),YOo=o(" (TAPAS model)"),KOo=l(),Tv=a("p"),ZOo=o("The model is set in evaluation mode by default using "),Cge=a("code"),eVo=o("model.eval()"),oVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=a("code"),rVo=o("model.train()"),tVo=l(),F(Mv.$$.fragment),vPe=l(),Ui=a("h2"),Ev=a("a"),Age=a("span"),F(ry.$$.fragment),aVo=l(),yge=a("span"),nVo=o("AutoModelForImageClassification"),FPe=l(),jo=a("div"),F(ty.$$.fragment),sVo=l(),Ji=a("p"),lVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QO=a("a"),iVo=o("from_pretrained()"),dVo=o(" class method or the "),WO=a("a"),cVo=o("from_config()"),fVo=o(` class
method.`),mVo=l(),ay=a("p"),gVo=o("This class cannot be instantiated directly using "),Lge=a("code"),hVo=o("__init__()"),pVo=o(" (throws an error)."),uVo=l(),ct=a("div"),F(ny.$$.fragment),_Vo=l(),xge=a("p"),bVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vVo=l(),Yi=a("p"),FVo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),TVo=o("not"),MVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),EVo=o("from_pretrained()"),CVo=o(" to load the model weights."),wVo=l(),F(Cv.$$.fragment),AVo=l(),no=a("div"),F(sy.$$.fragment),yVo=l(),kge=a("p"),LVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xVo=l(),Ba=a("p"),$Vo=o("The model class to instantiate is selected based on the "),Sge=a("code"),kVo=o("model_type"),SVo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),RVo=o("pretrained_model_name_or_path"),BVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=a("code"),PVo=o("pretrained_model_name_or_path"),IVo=o(":"),qVo=l(),Fe=a("ul"),wv=a("li"),Pge=a("strong"),NVo=o("beit"),jVo=o(" \u2014 "),UO=a("a"),DVo=o("BeitForImageClassification"),GVo=o(" (BEiT model)"),OVo=l(),Av=a("li"),Ige=a("strong"),VVo=o("convnext"),XVo=o(" \u2014 "),JO=a("a"),zVo=o("ConvNextForImageClassification"),QVo=o(" (ConvNext model)"),WVo=l(),yv=a("li"),qge=a("strong"),HVo=o("data2vec-vision"),UVo=o(" \u2014 "),YO=a("a"),JVo=o("Data2VecVisionForImageClassification"),YVo=o(" (Data2VecVision model)"),KVo=l(),$s=a("li"),Nge=a("strong"),ZVo=o("deit"),eXo=o(" \u2014 "),KO=a("a"),oXo=o("DeiTForImageClassification"),rXo=o(" or "),ZO=a("a"),tXo=o("DeiTForImageClassificationWithTeacher"),aXo=o(" (DeiT model)"),nXo=l(),Lv=a("li"),jge=a("strong"),sXo=o("imagegpt"),lXo=o(" \u2014 "),eV=a("a"),iXo=o("ImageGPTForImageClassification"),dXo=o(" (ImageGPT model)"),cXo=l(),ft=a("li"),Dge=a("strong"),fXo=o("perceiver"),mXo=o(" \u2014 "),oV=a("a"),gXo=o("PerceiverForImageClassificationLearned"),hXo=o(" or "),rV=a("a"),pXo=o("PerceiverForImageClassificationFourier"),uXo=o(" or "),tV=a("a"),_Xo=o("PerceiverForImageClassificationConvProcessing"),bXo=o(" (Perceiver model)"),vXo=l(),xv=a("li"),Gge=a("strong"),FXo=o("poolformer"),TXo=o(" \u2014 "),aV=a("a"),MXo=o("PoolFormerForImageClassification"),EXo=o(" (PoolFormer model)"),CXo=l(),$v=a("li"),Oge=a("strong"),wXo=o("regnet"),AXo=o(" \u2014 "),nV=a("a"),yXo=o("RegNetForImageClassification"),LXo=o(" (RegNet model)"),xXo=l(),kv=a("li"),Vge=a("strong"),$Xo=o("resnet"),kXo=o(" \u2014 "),sV=a("a"),SXo=o("ResNetForImageClassification"),RXo=o(" (ResNet model)"),BXo=l(),Sv=a("li"),Xge=a("strong"),PXo=o("segformer"),IXo=o(" \u2014 "),lV=a("a"),qXo=o("SegformerForImageClassification"),NXo=o(" (SegFormer model)"),jXo=l(),Rv=a("li"),zge=a("strong"),DXo=o("swin"),GXo=o(" \u2014 "),iV=a("a"),OXo=o("SwinForImageClassification"),VXo=o(" (Swin model)"),XXo=l(),Bv=a("li"),Qge=a("strong"),zXo=o("van"),QXo=o(" \u2014 "),dV=a("a"),WXo=o("VanForImageClassification"),HXo=o(" (VAN model)"),UXo=l(),Pv=a("li"),Wge=a("strong"),JXo=o("vit"),YXo=o(" \u2014 "),cV=a("a"),KXo=o("ViTForImageClassification"),ZXo=o(" (ViT model)"),ezo=l(),Iv=a("p"),ozo=o("The model is set in evaluation mode by default using "),Hge=a("code"),rzo=o("model.eval()"),tzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=a("code"),azo=o("model.train()"),nzo=l(),F(qv.$$.fragment),TPe=l(),Ki=a("h2"),Nv=a("a"),Jge=a("span"),F(ly.$$.fragment),szo=l(),Yge=a("span"),lzo=o("AutoModelForVision2Seq"),MPe=l(),Do=a("div"),F(iy.$$.fragment),izo=l(),Zi=a("p"),dzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fV=a("a"),czo=o("from_pretrained()"),fzo=o(" class method or the "),mV=a("a"),mzo=o("from_config()"),gzo=o(` class
method.`),hzo=l(),dy=a("p"),pzo=o("This class cannot be instantiated directly using "),Kge=a("code"),uzo=o("__init__()"),_zo=o(" (throws an error)."),bzo=l(),mt=a("div"),F(cy.$$.fragment),vzo=l(),Zge=a("p"),Fzo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Tzo=l(),ed=a("p"),Mzo=o(`Note:
Loading a model from its configuration file does `),ehe=a("strong"),Ezo=o("not"),Czo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=a("a"),wzo=o("from_pretrained()"),Azo=o(" to load the model weights."),yzo=l(),F(jv.$$.fragment),Lzo=l(),so=a("div"),F(fy.$$.fragment),xzo=l(),ohe=a("p"),$zo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kzo=l(),Pa=a("p"),Szo=o("The model class to instantiate is selected based on the "),rhe=a("code"),Rzo=o("model_type"),Bzo=o(` property of the config object (either
passed as an argument or loaded from `),the=a("code"),Pzo=o("pretrained_model_name_or_path"),Izo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=a("code"),qzo=o("pretrained_model_name_or_path"),Nzo=o(":"),jzo=l(),nhe=a("ul"),Dv=a("li"),she=a("strong"),Dzo=o("vision-encoder-decoder"),Gzo=o(" \u2014 "),hV=a("a"),Ozo=o("VisionEncoderDecoderModel"),Vzo=o(" (Vision Encoder decoder model)"),Xzo=l(),Gv=a("p"),zzo=o("The model is set in evaluation mode by default using "),lhe=a("code"),Qzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=a("code"),Hzo=o("model.train()"),Uzo=l(),F(Ov.$$.fragment),EPe=l(),od=a("h2"),Vv=a("a"),dhe=a("span"),F(my.$$.fragment),Jzo=l(),che=a("span"),Yzo=o("AutoModelForAudioClassification"),CPe=l(),Go=a("div"),F(gy.$$.fragment),Kzo=l(),rd=a("p"),Zzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),pV=a("a"),eQo=o("from_pretrained()"),oQo=o(" class method or the "),uV=a("a"),rQo=o("from_config()"),tQo=o(` class
method.`),aQo=l(),hy=a("p"),nQo=o("This class cannot be instantiated directly using "),fhe=a("code"),sQo=o("__init__()"),lQo=o(" (throws an error)."),iQo=l(),gt=a("div"),F(py.$$.fragment),dQo=l(),mhe=a("p"),cQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),fQo=l(),td=a("p"),mQo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),gQo=o("not"),hQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),pQo=o("from_pretrained()"),uQo=o(" to load the model weights."),_Qo=l(),F(Xv.$$.fragment),bQo=l(),lo=a("div"),F(uy.$$.fragment),vQo=l(),hhe=a("p"),FQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),TQo=l(),Ia=a("p"),MQo=o("The model class to instantiate is selected based on the "),phe=a("code"),EQo=o("model_type"),CQo=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),wQo=o("pretrained_model_name_or_path"),AQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),yQo=o("pretrained_model_name_or_path"),LQo=o(":"),xQo=l(),Ne=a("ul"),zv=a("li"),bhe=a("strong"),$Qo=o("data2vec-audio"),kQo=o(" \u2014 "),bV=a("a"),SQo=o("Data2VecAudioForSequenceClassification"),RQo=o(" (Data2VecAudio model)"),BQo=l(),Qv=a("li"),vhe=a("strong"),PQo=o("hubert"),IQo=o(" \u2014 "),vV=a("a"),qQo=o("HubertForSequenceClassification"),NQo=o(" (Hubert model)"),jQo=l(),Wv=a("li"),Fhe=a("strong"),DQo=o("sew"),GQo=o(" \u2014 "),FV=a("a"),OQo=o("SEWForSequenceClassification"),VQo=o(" (SEW model)"),XQo=l(),Hv=a("li"),The=a("strong"),zQo=o("sew-d"),QQo=o(" \u2014 "),TV=a("a"),WQo=o("SEWDForSequenceClassification"),HQo=o(" (SEW-D model)"),UQo=l(),Uv=a("li"),Mhe=a("strong"),JQo=o("unispeech"),YQo=o(" \u2014 "),MV=a("a"),KQo=o("UniSpeechForSequenceClassification"),ZQo=o(" (UniSpeech model)"),eWo=l(),Jv=a("li"),Ehe=a("strong"),oWo=o("unispeech-sat"),rWo=o(" \u2014 "),EV=a("a"),tWo=o("UniSpeechSatForSequenceClassification"),aWo=o(" (UniSpeechSat model)"),nWo=l(),Yv=a("li"),Che=a("strong"),sWo=o("wav2vec2"),lWo=o(" \u2014 "),CV=a("a"),iWo=o("Wav2Vec2ForSequenceClassification"),dWo=o(" (Wav2Vec2 model)"),cWo=l(),Kv=a("li"),whe=a("strong"),fWo=o("wavlm"),mWo=o(" \u2014 "),wV=a("a"),gWo=o("WavLMForSequenceClassification"),hWo=o(" (WavLM model)"),pWo=l(),Zv=a("p"),uWo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),_Wo=o("model.eval()"),bWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),vWo=o("model.train()"),FWo=l(),F(eF.$$.fragment),wPe=l(),ad=a("h2"),oF=a("a"),Lhe=a("span"),F(_y.$$.fragment),TWo=l(),xhe=a("span"),MWo=o("AutoModelForAudioFrameClassification"),APe=l(),Oo=a("div"),F(by.$$.fragment),EWo=l(),nd=a("p"),CWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AV=a("a"),wWo=o("from_pretrained()"),AWo=o(" class method or the "),yV=a("a"),yWo=o("from_config()"),LWo=o(` class
method.`),xWo=l(),vy=a("p"),$Wo=o("This class cannot be instantiated directly using "),$he=a("code"),kWo=o("__init__()"),SWo=o(" (throws an error)."),RWo=l(),ht=a("div"),F(Fy.$$.fragment),BWo=l(),khe=a("p"),PWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),IWo=l(),sd=a("p"),qWo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),NWo=o("not"),jWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),DWo=o("from_pretrained()"),GWo=o(" to load the model weights."),OWo=l(),F(rF.$$.fragment),VWo=l(),io=a("div"),F(Ty.$$.fragment),XWo=l(),Rhe=a("p"),zWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),QWo=l(),qa=a("p"),WWo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),HWo=o("model_type"),UWo=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),JWo=o("pretrained_model_name_or_path"),YWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),KWo=o("pretrained_model_name_or_path"),ZWo=o(":"),eHo=l(),Na=a("ul"),tF=a("li"),qhe=a("strong"),oHo=o("data2vec-audio"),rHo=o(" \u2014 "),xV=a("a"),tHo=o("Data2VecAudioForAudioFrameClassification"),aHo=o(" (Data2VecAudio model)"),nHo=l(),aF=a("li"),Nhe=a("strong"),sHo=o("unispeech-sat"),lHo=o(" \u2014 "),$V=a("a"),iHo=o("UniSpeechSatForAudioFrameClassification"),dHo=o(" (UniSpeechSat model)"),cHo=l(),nF=a("li"),jhe=a("strong"),fHo=o("wav2vec2"),mHo=o(" \u2014 "),kV=a("a"),gHo=o("Wav2Vec2ForAudioFrameClassification"),hHo=o(" (Wav2Vec2 model)"),pHo=l(),sF=a("li"),Dhe=a("strong"),uHo=o("wavlm"),_Ho=o(" \u2014 "),SV=a("a"),bHo=o("WavLMForAudioFrameClassification"),vHo=o(" (WavLM model)"),FHo=l(),lF=a("p"),THo=o("The model is set in evaluation mode by default using "),Ghe=a("code"),MHo=o("model.eval()"),EHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=a("code"),CHo=o("model.train()"),wHo=l(),F(iF.$$.fragment),yPe=l(),ld=a("h2"),dF=a("a"),Vhe=a("span"),F(My.$$.fragment),AHo=l(),Xhe=a("span"),yHo=o("AutoModelForCTC"),LPe=l(),Vo=a("div"),F(Ey.$$.fragment),LHo=l(),id=a("p"),xHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),RV=a("a"),$Ho=o("from_pretrained()"),kHo=o(" class method or the "),BV=a("a"),SHo=o("from_config()"),RHo=o(` class
method.`),BHo=l(),Cy=a("p"),PHo=o("This class cannot be instantiated directly using "),zhe=a("code"),IHo=o("__init__()"),qHo=o(" (throws an error)."),NHo=l(),pt=a("div"),F(wy.$$.fragment),jHo=l(),Qhe=a("p"),DHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),GHo=l(),dd=a("p"),OHo=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),VHo=o("not"),XHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),zHo=o("from_pretrained()"),QHo=o(" to load the model weights."),WHo=l(),F(cF.$$.fragment),HHo=l(),co=a("div"),F(Ay.$$.fragment),UHo=l(),Hhe=a("p"),JHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),YHo=l(),ja=a("p"),KHo=o("The model class to instantiate is selected based on the "),Uhe=a("code"),ZHo=o("model_type"),eUo=o(` property of the config object (either
passed as an argument or loaded from `),Jhe=a("code"),oUo=o("pretrained_model_name_or_path"),rUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=a("code"),tUo=o("pretrained_model_name_or_path"),aUo=o(":"),nUo=l(),je=a("ul"),fF=a("li"),Khe=a("strong"),sUo=o("data2vec-audio"),lUo=o(" \u2014 "),IV=a("a"),iUo=o("Data2VecAudioForCTC"),dUo=o(" (Data2VecAudio model)"),cUo=l(),mF=a("li"),Zhe=a("strong"),fUo=o("hubert"),mUo=o(" \u2014 "),qV=a("a"),gUo=o("HubertForCTC"),hUo=o(" (Hubert model)"),pUo=l(),gF=a("li"),epe=a("strong"),uUo=o("sew"),_Uo=o(" \u2014 "),NV=a("a"),bUo=o("SEWForCTC"),vUo=o(" (SEW model)"),FUo=l(),hF=a("li"),ope=a("strong"),TUo=o("sew-d"),MUo=o(" \u2014 "),jV=a("a"),EUo=o("SEWDForCTC"),CUo=o(" (SEW-D model)"),wUo=l(),pF=a("li"),rpe=a("strong"),AUo=o("unispeech"),yUo=o(" \u2014 "),DV=a("a"),LUo=o("UniSpeechForCTC"),xUo=o(" (UniSpeech model)"),$Uo=l(),uF=a("li"),tpe=a("strong"),kUo=o("unispeech-sat"),SUo=o(" \u2014 "),GV=a("a"),RUo=o("UniSpeechSatForCTC"),BUo=o(" (UniSpeechSat model)"),PUo=l(),_F=a("li"),ape=a("strong"),IUo=o("wav2vec2"),qUo=o(" \u2014 "),OV=a("a"),NUo=o("Wav2Vec2ForCTC"),jUo=o(" (Wav2Vec2 model)"),DUo=l(),bF=a("li"),npe=a("strong"),GUo=o("wavlm"),OUo=o(" \u2014 "),VV=a("a"),VUo=o("WavLMForCTC"),XUo=o(" (WavLM model)"),zUo=l(),vF=a("p"),QUo=o("The model is set in evaluation mode by default using "),spe=a("code"),WUo=o("model.eval()"),HUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=a("code"),UUo=o("model.train()"),JUo=l(),F(FF.$$.fragment),xPe=l(),cd=a("h2"),TF=a("a"),ipe=a("span"),F(yy.$$.fragment),YUo=l(),dpe=a("span"),KUo=o("AutoModelForSpeechSeq2Seq"),$Pe=l(),Xo=a("div"),F(Ly.$$.fragment),ZUo=l(),fd=a("p"),eJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XV=a("a"),oJo=o("from_pretrained()"),rJo=o(" class method or the "),zV=a("a"),tJo=o("from_config()"),aJo=o(` class
method.`),nJo=l(),xy=a("p"),sJo=o("This class cannot be instantiated directly using "),cpe=a("code"),lJo=o("__init__()"),iJo=o(" (throws an error)."),dJo=l(),ut=a("div"),F($y.$$.fragment),cJo=l(),fpe=a("p"),fJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mJo=l(),md=a("p"),gJo=o(`Note:
Loading a model from its configuration file does `),mpe=a("strong"),hJo=o("not"),pJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=a("a"),uJo=o("from_pretrained()"),_Jo=o(" to load the model weights."),bJo=l(),F(MF.$$.fragment),vJo=l(),fo=a("div"),F(ky.$$.fragment),FJo=l(),gpe=a("p"),TJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),MJo=l(),Da=a("p"),EJo=o("The model class to instantiate is selected based on the "),hpe=a("code"),CJo=o("model_type"),wJo=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),AJo=o("pretrained_model_name_or_path"),yJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=a("code"),LJo=o("pretrained_model_name_or_path"),xJo=o(":"),$Jo=l(),Sy=a("ul"),EF=a("li"),_pe=a("strong"),kJo=o("speech-encoder-decoder"),SJo=o(" \u2014 "),WV=a("a"),RJo=o("SpeechEncoderDecoderModel"),BJo=o(" (Speech Encoder decoder model)"),PJo=l(),CF=a("li"),bpe=a("strong"),IJo=o("speech_to_text"),qJo=o(" \u2014 "),HV=a("a"),NJo=o("Speech2TextForConditionalGeneration"),jJo=o(" (Speech2Text model)"),DJo=l(),wF=a("p"),GJo=o("The model is set in evaluation mode by default using "),vpe=a("code"),OJo=o("model.eval()"),VJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=a("code"),XJo=o("model.train()"),zJo=l(),F(AF.$$.fragment),kPe=l(),gd=a("h2"),yF=a("a"),Tpe=a("span"),F(Ry.$$.fragment),QJo=l(),Mpe=a("span"),WJo=o("AutoModelForAudioXVector"),SPe=l(),zo=a("div"),F(By.$$.fragment),HJo=l(),hd=a("p"),UJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),UV=a("a"),JJo=o("from_pretrained()"),YJo=o(" class method or the "),JV=a("a"),KJo=o("from_config()"),ZJo=o(` class
method.`),eYo=l(),Py=a("p"),oYo=o("This class cannot be instantiated directly using "),Epe=a("code"),rYo=o("__init__()"),tYo=o(" (throws an error)."),aYo=l(),_t=a("div"),F(Iy.$$.fragment),nYo=l(),Cpe=a("p"),sYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),lYo=l(),pd=a("p"),iYo=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),dYo=o("not"),cYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),fYo=o("from_pretrained()"),mYo=o(" to load the model weights."),gYo=l(),F(LF.$$.fragment),hYo=l(),mo=a("div"),F(qy.$$.fragment),pYo=l(),Ape=a("p"),uYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_Yo=l(),Ga=a("p"),bYo=o("The model class to instantiate is selected based on the "),ype=a("code"),vYo=o("model_type"),FYo=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),TYo=o("pretrained_model_name_or_path"),MYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=a("code"),EYo=o("pretrained_model_name_or_path"),CYo=o(":"),wYo=l(),Oa=a("ul"),xF=a("li"),$pe=a("strong"),AYo=o("data2vec-audio"),yYo=o(" \u2014 "),KV=a("a"),LYo=o("Data2VecAudioForXVector"),xYo=o(" (Data2VecAudio model)"),$Yo=l(),$F=a("li"),kpe=a("strong"),kYo=o("unispeech-sat"),SYo=o(" \u2014 "),ZV=a("a"),RYo=o("UniSpeechSatForXVector"),BYo=o(" (UniSpeechSat model)"),PYo=l(),kF=a("li"),Spe=a("strong"),IYo=o("wav2vec2"),qYo=o(" \u2014 "),eX=a("a"),NYo=o("Wav2Vec2ForXVector"),jYo=o(" (Wav2Vec2 model)"),DYo=l(),SF=a("li"),Rpe=a("strong"),GYo=o("wavlm"),OYo=o(" \u2014 "),oX=a("a"),VYo=o("WavLMForXVector"),XYo=o(" (WavLM model)"),zYo=l(),RF=a("p"),QYo=o("The model is set in evaluation mode by default using "),Bpe=a("code"),WYo=o("model.eval()"),HYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ppe=a("code"),UYo=o("model.train()"),JYo=l(),F(BF.$$.fragment),RPe=l(),ud=a("h2"),PF=a("a"),Ipe=a("span"),F(Ny.$$.fragment),YYo=l(),qpe=a("span"),KYo=o("AutoModelForMaskedImageModeling"),BPe=l(),Qo=a("div"),F(jy.$$.fragment),ZYo=l(),_d=a("p"),eKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),rX=a("a"),oKo=o("from_pretrained()"),rKo=o(" class method or the "),tX=a("a"),tKo=o("from_config()"),aKo=o(` class
method.`),nKo=l(),Dy=a("p"),sKo=o("This class cannot be instantiated directly using "),Npe=a("code"),lKo=o("__init__()"),iKo=o(" (throws an error)."),dKo=l(),bt=a("div"),F(Gy.$$.fragment),cKo=l(),jpe=a("p"),fKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),mKo=l(),bd=a("p"),gKo=o(`Note:
Loading a model from its configuration file does `),Dpe=a("strong"),hKo=o("not"),pKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),uKo=o("from_pretrained()"),_Ko=o(" to load the model weights."),bKo=l(),F(IF.$$.fragment),vKo=l(),go=a("div"),F(Oy.$$.fragment),FKo=l(),Gpe=a("p"),TKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),MKo=l(),Va=a("p"),EKo=o("The model class to instantiate is selected based on the "),Ope=a("code"),CKo=o("model_type"),wKo=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),AKo=o("pretrained_model_name_or_path"),yKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=a("code"),LKo=o("pretrained_model_name_or_path"),xKo=o(":"),$Ko=l(),vd=a("ul"),qF=a("li"),zpe=a("strong"),kKo=o("deit"),SKo=o(" \u2014 "),nX=a("a"),RKo=o("DeiTForMaskedImageModeling"),BKo=o(" (DeiT model)"),PKo=l(),NF=a("li"),Qpe=a("strong"),IKo=o("swin"),qKo=o(" \u2014 "),sX=a("a"),NKo=o("SwinForMaskedImageModeling"),jKo=o(" (Swin model)"),DKo=l(),jF=a("li"),Wpe=a("strong"),GKo=o("vit"),OKo=o(" \u2014 "),lX=a("a"),VKo=o("ViTForMaskedImageModeling"),XKo=o(" (ViT model)"),zKo=l(),DF=a("p"),QKo=o("The model is set in evaluation mode by default using "),Hpe=a("code"),WKo=o("model.eval()"),HKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=a("code"),UKo=o("model.train()"),JKo=l(),F(GF.$$.fragment),PPe=l(),Fd=a("h2"),OF=a("a"),Jpe=a("span"),F(Vy.$$.fragment),YKo=l(),Ype=a("span"),KKo=o("AutoModelForObjectDetection"),IPe=l(),Wo=a("div"),F(Xy.$$.fragment),ZKo=l(),Td=a("p"),eZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iX=a("a"),oZo=o("from_pretrained()"),rZo=o(" class method or the "),dX=a("a"),tZo=o("from_config()"),aZo=o(` class
method.`),nZo=l(),zy=a("p"),sZo=o("This class cannot be instantiated directly using "),Kpe=a("code"),lZo=o("__init__()"),iZo=o(" (throws an error)."),dZo=l(),vt=a("div"),F(Qy.$$.fragment),cZo=l(),Zpe=a("p"),fZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mZo=l(),Md=a("p"),gZo=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),hZo=o("not"),pZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),uZo=o("from_pretrained()"),_Zo=o(" to load the model weights."),bZo=l(),F(VF.$$.fragment),vZo=l(),ho=a("div"),F(Wy.$$.fragment),FZo=l(),oue=a("p"),TZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),MZo=l(),Xa=a("p"),EZo=o("The model class to instantiate is selected based on the "),rue=a("code"),CZo=o("model_type"),wZo=o(` property of the config object (either
passed as an argument or loaded from `),tue=a("code"),AZo=o("pretrained_model_name_or_path"),yZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=a("code"),LZo=o("pretrained_model_name_or_path"),xZo=o(":"),$Zo=l(),Hy=a("ul"),XF=a("li"),nue=a("strong"),kZo=o("detr"),SZo=o(" \u2014 "),fX=a("a"),RZo=o("DetrForObjectDetection"),BZo=o(" (DETR model)"),PZo=l(),zF=a("li"),sue=a("strong"),IZo=o("yolos"),qZo=o(" \u2014 "),mX=a("a"),NZo=o("YolosForObjectDetection"),jZo=o(" (YOLOS model)"),DZo=l(),QF=a("p"),GZo=o("The model is set in evaluation mode by default using "),lue=a("code"),OZo=o("model.eval()"),VZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),XZo=o("model.train()"),zZo=l(),F(WF.$$.fragment),qPe=l(),Ed=a("h2"),HF=a("a"),due=a("span"),F(Uy.$$.fragment),QZo=l(),cue=a("span"),WZo=o("AutoModelForImageSegmentation"),NPe=l(),Ho=a("div"),F(Jy.$$.fragment),HZo=l(),Cd=a("p"),UZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),gX=a("a"),JZo=o("from_pretrained()"),YZo=o(" class method or the "),hX=a("a"),KZo=o("from_config()"),ZZo=o(` class
method.`),eer=l(),Yy=a("p"),oer=o("This class cannot be instantiated directly using "),fue=a("code"),rer=o("__init__()"),ter=o(" (throws an error)."),aer=l(),Ft=a("div"),F(Ky.$$.fragment),ner=l(),mue=a("p"),ser=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ler=l(),wd=a("p"),ier=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),der=o("not"),cer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),fer=o("from_pretrained()"),mer=o(" to load the model weights."),ger=l(),F(UF.$$.fragment),her=l(),po=a("div"),F(Zy.$$.fragment),per=l(),hue=a("p"),uer=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_er=l(),za=a("p"),ber=o("The model class to instantiate is selected based on the "),pue=a("code"),ver=o("model_type"),Fer=o(` property of the config object (either
passed as an argument or loaded from `),uue=a("code"),Ter=o("pretrained_model_name_or_path"),Mer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=a("code"),Eer=o("pretrained_model_name_or_path"),Cer=o(":"),wer=l(),bue=a("ul"),JF=a("li"),vue=a("strong"),Aer=o("detr"),yer=o(" \u2014 "),uX=a("a"),Ler=o("DetrForSegmentation"),xer=o(" (DETR model)"),$er=l(),YF=a("p"),ker=o("The model is set in evaluation mode by default using "),Fue=a("code"),Ser=o("model.eval()"),Rer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=a("code"),Ber=o("model.train()"),Per=l(),F(KF.$$.fragment),jPe=l(),Ad=a("h2"),ZF=a("a"),Mue=a("span"),F(eL.$$.fragment),Ier=l(),Eue=a("span"),qer=o("AutoModelForSemanticSegmentation"),DPe=l(),Uo=a("div"),F(oL.$$.fragment),Ner=l(),yd=a("p"),jer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_X=a("a"),Der=o("from_pretrained()"),Ger=o(" class method or the "),bX=a("a"),Oer=o("from_config()"),Ver=o(` class
method.`),Xer=l(),rL=a("p"),zer=o("This class cannot be instantiated directly using "),Cue=a("code"),Qer=o("__init__()"),Wer=o(" (throws an error)."),Her=l(),Tt=a("div"),F(tL.$$.fragment),Uer=l(),wue=a("p"),Jer=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Yer=l(),Ld=a("p"),Ker=o(`Note:
Loading a model from its configuration file does `),Aue=a("strong"),Zer=o("not"),eor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),oor=o("from_pretrained()"),ror=o(" to load the model weights."),tor=l(),F(e6.$$.fragment),aor=l(),uo=a("div"),F(aL.$$.fragment),nor=l(),yue=a("p"),sor=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lor=l(),Qa=a("p"),ior=o("The model class to instantiate is selected based on the "),Lue=a("code"),dor=o("model_type"),cor=o(` property of the config object (either
passed as an argument or loaded from `),xue=a("code"),mor=o("pretrained_model_name_or_path"),gor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=a("code"),hor=o("pretrained_model_name_or_path"),por=o(":"),uor=l(),Wa=a("ul"),o6=a("li"),kue=a("strong"),_or=o("beit"),bor=o(" \u2014 "),FX=a("a"),vor=o("BeitForSemanticSegmentation"),For=o(" (BEiT model)"),Tor=l(),r6=a("li"),Sue=a("strong"),Mor=o("data2vec-vision"),Eor=o(" \u2014 "),TX=a("a"),Cor=o("Data2VecVisionForSemanticSegmentation"),wor=o(" (Data2VecVision model)"),Aor=l(),t6=a("li"),Rue=a("strong"),yor=o("dpt"),Lor=o(" \u2014 "),MX=a("a"),xor=o("DPTForSemanticSegmentation"),$or=o(" (DPT model)"),kor=l(),a6=a("li"),Bue=a("strong"),Sor=o("segformer"),Ror=o(" \u2014 "),EX=a("a"),Bor=o("SegformerForSemanticSegmentation"),Por=o(" (SegFormer model)"),Ior=l(),n6=a("p"),qor=o("The model is set in evaluation mode by default using "),Pue=a("code"),Nor=o("model.eval()"),jor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iue=a("code"),Dor=o("model.train()"),Gor=l(),F(s6.$$.fragment),GPe=l(),xd=a("h2"),l6=a("a"),que=a("span"),F(nL.$$.fragment),Oor=l(),Nue=a("span"),Vor=o("AutoModelForInstanceSegmentation"),OPe=l(),Jo=a("div"),F(sL.$$.fragment),Xor=l(),$d=a("p"),zor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),CX=a("a"),Qor=o("from_pretrained()"),Wor=o(" class method or the "),wX=a("a"),Hor=o("from_config()"),Uor=o(` class
method.`),Jor=l(),lL=a("p"),Yor=o("This class cannot be instantiated directly using "),jue=a("code"),Kor=o("__init__()"),Zor=o(" (throws an error)."),err=l(),Mt=a("div"),F(iL.$$.fragment),orr=l(),Due=a("p"),rrr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),trr=l(),kd=a("p"),arr=o(`Note:
Loading a model from its configuration file does `),Gue=a("strong"),nrr=o("not"),srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),lrr=o("from_pretrained()"),irr=o(" to load the model weights."),drr=l(),F(i6.$$.fragment),crr=l(),_o=a("div"),F(dL.$$.fragment),frr=l(),Oue=a("p"),mrr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),grr=l(),Ha=a("p"),hrr=o("The model class to instantiate is selected based on the "),Vue=a("code"),prr=o("model_type"),urr=o(` property of the config object (either
passed as an argument or loaded from `),Xue=a("code"),_rr=o("pretrained_model_name_or_path"),brr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=a("code"),vrr=o("pretrained_model_name_or_path"),Frr=o(":"),Trr=l(),Que=a("ul"),d6=a("li"),Wue=a("strong"),Mrr=o("maskformer"),Err=o(" \u2014 "),yX=a("a"),Crr=o("MaskFormerForInstanceSegmentation"),wrr=o(" (MaskFormer model)"),Arr=l(),c6=a("p"),yrr=o("The model is set in evaluation mode by default using "),Hue=a("code"),Lrr=o("model.eval()"),xrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),$rr=o("model.train()"),krr=l(),F(f6.$$.fragment),VPe=l(),Sd=a("h2"),m6=a("a"),Jue=a("span"),F(cL.$$.fragment),Srr=l(),Yue=a("span"),Rrr=o("TFAutoModel"),XPe=l(),Yo=a("div"),F(fL.$$.fragment),Brr=l(),Rd=a("p"),Prr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LX=a("a"),Irr=o("from_pretrained()"),qrr=o(" class method or the "),xX=a("a"),Nrr=o("from_config()"),jrr=o(` class
method.`),Drr=l(),mL=a("p"),Grr=o("This class cannot be instantiated directly using "),Kue=a("code"),Orr=o("__init__()"),Vrr=o(" (throws an error)."),Xrr=l(),Et=a("div"),F(gL.$$.fragment),zrr=l(),Zue=a("p"),Qrr=o("Instantiates one of the base model classes of the library from a configuration."),Wrr=l(),Bd=a("p"),Hrr=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),Urr=o("not"),Jrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),Yrr=o("from_pretrained()"),Krr=o(" to load the model weights."),Zrr=l(),F(g6.$$.fragment),etr=l(),Cr=a("div"),F(hL.$$.fragment),otr=l(),o_e=a("p"),rtr=o("Instantiate one of the base model classes of the library from a pretrained model."),ttr=l(),Ua=a("p"),atr=o("The model class to instantiate is selected based on the "),r_e=a("code"),ntr=o("model_type"),str=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),ltr=o("pretrained_model_name_or_path"),itr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),dtr=o("pretrained_model_name_or_path"),ctr=o(":"),ftr=l(),j=a("ul"),h6=a("li"),n_e=a("strong"),mtr=o("albert"),gtr=o(" \u2014 "),kX=a("a"),htr=o("TFAlbertModel"),ptr=o(" (ALBERT model)"),utr=l(),p6=a("li"),s_e=a("strong"),_tr=o("bart"),btr=o(" \u2014 "),SX=a("a"),vtr=o("TFBartModel"),Ftr=o(" (BART model)"),Ttr=l(),u6=a("li"),l_e=a("strong"),Mtr=o("bert"),Etr=o(" \u2014 "),RX=a("a"),Ctr=o("TFBertModel"),wtr=o(" (BERT model)"),Atr=l(),_6=a("li"),i_e=a("strong"),ytr=o("blenderbot"),Ltr=o(" \u2014 "),BX=a("a"),xtr=o("TFBlenderbotModel"),$tr=o(" (Blenderbot model)"),ktr=l(),b6=a("li"),d_e=a("strong"),Str=o("blenderbot-small"),Rtr=o(" \u2014 "),PX=a("a"),Btr=o("TFBlenderbotSmallModel"),Ptr=o(" (BlenderbotSmall model)"),Itr=l(),v6=a("li"),c_e=a("strong"),qtr=o("camembert"),Ntr=o(" \u2014 "),IX=a("a"),jtr=o("TFCamembertModel"),Dtr=o(" (CamemBERT model)"),Gtr=l(),F6=a("li"),f_e=a("strong"),Otr=o("clip"),Vtr=o(" \u2014 "),qX=a("a"),Xtr=o("TFCLIPModel"),ztr=o(" (CLIP model)"),Qtr=l(),T6=a("li"),m_e=a("strong"),Wtr=o("convbert"),Htr=o(" \u2014 "),NX=a("a"),Utr=o("TFConvBertModel"),Jtr=o(" (ConvBERT model)"),Ytr=l(),M6=a("li"),g_e=a("strong"),Ktr=o("convnext"),Ztr=o(" \u2014 "),jX=a("a"),ear=o("TFConvNextModel"),oar=o(" (ConvNext model)"),rar=l(),E6=a("li"),h_e=a("strong"),tar=o("ctrl"),aar=o(" \u2014 "),DX=a("a"),nar=o("TFCTRLModel"),sar=o(" (CTRL model)"),lar=l(),C6=a("li"),p_e=a("strong"),iar=o("deberta"),dar=o(" \u2014 "),GX=a("a"),car=o("TFDebertaModel"),far=o(" (DeBERTa model)"),mar=l(),w6=a("li"),u_e=a("strong"),gar=o("deberta-v2"),har=o(" \u2014 "),OX=a("a"),par=o("TFDebertaV2Model"),uar=o(" (DeBERTa-v2 model)"),_ar=l(),A6=a("li"),__e=a("strong"),bar=o("distilbert"),Far=o(" \u2014 "),VX=a("a"),Tar=o("TFDistilBertModel"),Mar=o(" (DistilBERT model)"),Ear=l(),y6=a("li"),b_e=a("strong"),Car=o("dpr"),war=o(" \u2014 "),XX=a("a"),Aar=o("TFDPRQuestionEncoder"),yar=o(" (DPR model)"),Lar=l(),L6=a("li"),v_e=a("strong"),xar=o("electra"),$ar=o(" \u2014 "),zX=a("a"),kar=o("TFElectraModel"),Sar=o(" (ELECTRA model)"),Rar=l(),x6=a("li"),F_e=a("strong"),Bar=o("flaubert"),Par=o(" \u2014 "),QX=a("a"),Iar=o("TFFlaubertModel"),qar=o(" (FlauBERT model)"),Nar=l(),ks=a("li"),T_e=a("strong"),jar=o("funnel"),Dar=o(" \u2014 "),WX=a("a"),Gar=o("TFFunnelModel"),Oar=o(" or "),HX=a("a"),Var=o("TFFunnelBaseModel"),Xar=o(" (Funnel Transformer model)"),zar=l(),$6=a("li"),M_e=a("strong"),Qar=o("gpt2"),War=o(" \u2014 "),UX=a("a"),Har=o("TFGPT2Model"),Uar=o(" (OpenAI GPT-2 model)"),Jar=l(),k6=a("li"),E_e=a("strong"),Yar=o("gptj"),Kar=o(" \u2014 "),JX=a("a"),Zar=o("TFGPTJModel"),enr=o(" (GPT-J model)"),onr=l(),S6=a("li"),C_e=a("strong"),rnr=o("hubert"),tnr=o(" \u2014 "),YX=a("a"),anr=o("TFHubertModel"),nnr=o(" (Hubert model)"),snr=l(),R6=a("li"),w_e=a("strong"),lnr=o("layoutlm"),inr=o(" \u2014 "),KX=a("a"),dnr=o("TFLayoutLMModel"),cnr=o(" (LayoutLM model)"),fnr=l(),B6=a("li"),A_e=a("strong"),mnr=o("led"),gnr=o(" \u2014 "),ZX=a("a"),hnr=o("TFLEDModel"),pnr=o(" (LED model)"),unr=l(),P6=a("li"),y_e=a("strong"),_nr=o("longformer"),bnr=o(" \u2014 "),ez=a("a"),vnr=o("TFLongformerModel"),Fnr=o(" (Longformer model)"),Tnr=l(),I6=a("li"),L_e=a("strong"),Mnr=o("lxmert"),Enr=o(" \u2014 "),oz=a("a"),Cnr=o("TFLxmertModel"),wnr=o(" (LXMERT model)"),Anr=l(),q6=a("li"),x_e=a("strong"),ynr=o("marian"),Lnr=o(" \u2014 "),rz=a("a"),xnr=o("TFMarianModel"),$nr=o(" (Marian model)"),knr=l(),N6=a("li"),$_e=a("strong"),Snr=o("mbart"),Rnr=o(" \u2014 "),tz=a("a"),Bnr=o("TFMBartModel"),Pnr=o(" (mBART model)"),Inr=l(),j6=a("li"),k_e=a("strong"),qnr=o("mobilebert"),Nnr=o(" \u2014 "),az=a("a"),jnr=o("TFMobileBertModel"),Dnr=o(" (MobileBERT model)"),Gnr=l(),D6=a("li"),S_e=a("strong"),Onr=o("mpnet"),Vnr=o(" \u2014 "),nz=a("a"),Xnr=o("TFMPNetModel"),znr=o(" (MPNet model)"),Qnr=l(),G6=a("li"),R_e=a("strong"),Wnr=o("mt5"),Hnr=o(" \u2014 "),sz=a("a"),Unr=o("TFMT5Model"),Jnr=o(" (mT5 model)"),Ynr=l(),O6=a("li"),B_e=a("strong"),Knr=o("openai-gpt"),Znr=o(" \u2014 "),lz=a("a"),esr=o("TFOpenAIGPTModel"),osr=o(" (OpenAI GPT model)"),rsr=l(),V6=a("li"),P_e=a("strong"),tsr=o("pegasus"),asr=o(" \u2014 "),iz=a("a"),nsr=o("TFPegasusModel"),ssr=o(" (Pegasus model)"),lsr=l(),X6=a("li"),I_e=a("strong"),isr=o("rembert"),dsr=o(" \u2014 "),dz=a("a"),csr=o("TFRemBertModel"),fsr=o(" (RemBERT model)"),msr=l(),z6=a("li"),q_e=a("strong"),gsr=o("roberta"),hsr=o(" \u2014 "),cz=a("a"),psr=o("TFRobertaModel"),usr=o(" (RoBERTa model)"),_sr=l(),Q6=a("li"),N_e=a("strong"),bsr=o("roformer"),vsr=o(" \u2014 "),fz=a("a"),Fsr=o("TFRoFormerModel"),Tsr=o(" (RoFormer model)"),Msr=l(),W6=a("li"),j_e=a("strong"),Esr=o("speech_to_text"),Csr=o(" \u2014 "),mz=a("a"),wsr=o("TFSpeech2TextModel"),Asr=o(" (Speech2Text model)"),ysr=l(),H6=a("li"),D_e=a("strong"),Lsr=o("t5"),xsr=o(" \u2014 "),gz=a("a"),$sr=o("TFT5Model"),ksr=o(" (T5 model)"),Ssr=l(),U6=a("li"),G_e=a("strong"),Rsr=o("tapas"),Bsr=o(" \u2014 "),hz=a("a"),Psr=o("TFTapasModel"),Isr=o(" (TAPAS model)"),qsr=l(),J6=a("li"),O_e=a("strong"),Nsr=o("transfo-xl"),jsr=o(" \u2014 "),pz=a("a"),Dsr=o("TFTransfoXLModel"),Gsr=o(" (Transformer-XL model)"),Osr=l(),Y6=a("li"),V_e=a("strong"),Vsr=o("vit"),Xsr=o(" \u2014 "),uz=a("a"),zsr=o("TFViTModel"),Qsr=o(" (ViT model)"),Wsr=l(),K6=a("li"),X_e=a("strong"),Hsr=o("vit_mae"),Usr=o(" \u2014 "),_z=a("a"),Jsr=o("TFViTMAEModel"),Ysr=o(" (ViTMAE model)"),Ksr=l(),Z6=a("li"),z_e=a("strong"),Zsr=o("wav2vec2"),elr=o(" \u2014 "),bz=a("a"),olr=o("TFWav2Vec2Model"),rlr=o(" (Wav2Vec2 model)"),tlr=l(),eT=a("li"),Q_e=a("strong"),alr=o("xlm"),nlr=o(" \u2014 "),vz=a("a"),slr=o("TFXLMModel"),llr=o(" (XLM model)"),ilr=l(),oT=a("li"),W_e=a("strong"),dlr=o("xlm-roberta"),clr=o(" \u2014 "),Fz=a("a"),flr=o("TFXLMRobertaModel"),mlr=o(" (XLM-RoBERTa model)"),glr=l(),rT=a("li"),H_e=a("strong"),hlr=o("xlnet"),plr=o(" \u2014 "),Tz=a("a"),ulr=o("TFXLNetModel"),_lr=o(" (XLNet model)"),blr=l(),F(tT.$$.fragment),zPe=l(),Pd=a("h2"),aT=a("a"),U_e=a("span"),F(pL.$$.fragment),vlr=l(),J_e=a("span"),Flr=o("TFAutoModelForPreTraining"),QPe=l(),Ko=a("div"),F(uL.$$.fragment),Tlr=l(),Id=a("p"),Mlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Mz=a("a"),Elr=o("from_pretrained()"),Clr=o(" class method or the "),Ez=a("a"),wlr=o("from_config()"),Alr=o(` class
method.`),ylr=l(),_L=a("p"),Llr=o("This class cannot be instantiated directly using "),Y_e=a("code"),xlr=o("__init__()"),$lr=o(" (throws an error)."),klr=l(),Ct=a("div"),F(bL.$$.fragment),Slr=l(),K_e=a("p"),Rlr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Blr=l(),qd=a("p"),Plr=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),Ilr=o("not"),qlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),Nlr=o("from_pretrained()"),jlr=o(" to load the model weights."),Dlr=l(),F(nT.$$.fragment),Glr=l(),wr=a("div"),F(vL.$$.fragment),Olr=l(),e0e=a("p"),Vlr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xlr=l(),Ja=a("p"),zlr=o("The model class to instantiate is selected based on the "),o0e=a("code"),Qlr=o("model_type"),Wlr=o(` property of the config object (either
passed as an argument or loaded from `),r0e=a("code"),Hlr=o("pretrained_model_name_or_path"),Ulr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=a("code"),Jlr=o("pretrained_model_name_or_path"),Ylr=o(":"),Klr=l(),se=a("ul"),sT=a("li"),a0e=a("strong"),Zlr=o("albert"),eir=o(" \u2014 "),wz=a("a"),oir=o("TFAlbertForPreTraining"),rir=o(" (ALBERT model)"),tir=l(),lT=a("li"),n0e=a("strong"),air=o("bart"),nir=o(" \u2014 "),Az=a("a"),sir=o("TFBartForConditionalGeneration"),lir=o(" (BART model)"),iir=l(),iT=a("li"),s0e=a("strong"),dir=o("bert"),cir=o(" \u2014 "),yz=a("a"),fir=o("TFBertForPreTraining"),mir=o(" (BERT model)"),gir=l(),dT=a("li"),l0e=a("strong"),hir=o("camembert"),pir=o(" \u2014 "),Lz=a("a"),uir=o("TFCamembertForMaskedLM"),_ir=o(" (CamemBERT model)"),bir=l(),cT=a("li"),i0e=a("strong"),vir=o("ctrl"),Fir=o(" \u2014 "),xz=a("a"),Tir=o("TFCTRLLMHeadModel"),Mir=o(" (CTRL model)"),Eir=l(),fT=a("li"),d0e=a("strong"),Cir=o("distilbert"),wir=o(" \u2014 "),$z=a("a"),Air=o("TFDistilBertForMaskedLM"),yir=o(" (DistilBERT model)"),Lir=l(),mT=a("li"),c0e=a("strong"),xir=o("electra"),$ir=o(" \u2014 "),kz=a("a"),kir=o("TFElectraForPreTraining"),Sir=o(" (ELECTRA model)"),Rir=l(),gT=a("li"),f0e=a("strong"),Bir=o("flaubert"),Pir=o(" \u2014 "),Sz=a("a"),Iir=o("TFFlaubertWithLMHeadModel"),qir=o(" (FlauBERT model)"),Nir=l(),hT=a("li"),m0e=a("strong"),jir=o("funnel"),Dir=o(" \u2014 "),Rz=a("a"),Gir=o("TFFunnelForPreTraining"),Oir=o(" (Funnel Transformer model)"),Vir=l(),pT=a("li"),g0e=a("strong"),Xir=o("gpt2"),zir=o(" \u2014 "),Bz=a("a"),Qir=o("TFGPT2LMHeadModel"),Wir=o(" (OpenAI GPT-2 model)"),Hir=l(),uT=a("li"),h0e=a("strong"),Uir=o("layoutlm"),Jir=o(" \u2014 "),Pz=a("a"),Yir=o("TFLayoutLMForMaskedLM"),Kir=o(" (LayoutLM model)"),Zir=l(),_T=a("li"),p0e=a("strong"),edr=o("lxmert"),odr=o(" \u2014 "),Iz=a("a"),rdr=o("TFLxmertForPreTraining"),tdr=o(" (LXMERT model)"),adr=l(),bT=a("li"),u0e=a("strong"),ndr=o("mobilebert"),sdr=o(" \u2014 "),qz=a("a"),ldr=o("TFMobileBertForPreTraining"),idr=o(" (MobileBERT model)"),ddr=l(),vT=a("li"),_0e=a("strong"),cdr=o("mpnet"),fdr=o(" \u2014 "),Nz=a("a"),mdr=o("TFMPNetForMaskedLM"),gdr=o(" (MPNet model)"),hdr=l(),FT=a("li"),b0e=a("strong"),pdr=o("openai-gpt"),udr=o(" \u2014 "),jz=a("a"),_dr=o("TFOpenAIGPTLMHeadModel"),bdr=o(" (OpenAI GPT model)"),vdr=l(),TT=a("li"),v0e=a("strong"),Fdr=o("roberta"),Tdr=o(" \u2014 "),Dz=a("a"),Mdr=o("TFRobertaForMaskedLM"),Edr=o(" (RoBERTa model)"),Cdr=l(),MT=a("li"),F0e=a("strong"),wdr=o("t5"),Adr=o(" \u2014 "),Gz=a("a"),ydr=o("TFT5ForConditionalGeneration"),Ldr=o(" (T5 model)"),xdr=l(),ET=a("li"),T0e=a("strong"),$dr=o("tapas"),kdr=o(" \u2014 "),Oz=a("a"),Sdr=o("TFTapasForMaskedLM"),Rdr=o(" (TAPAS model)"),Bdr=l(),CT=a("li"),M0e=a("strong"),Pdr=o("transfo-xl"),Idr=o(" \u2014 "),Vz=a("a"),qdr=o("TFTransfoXLLMHeadModel"),Ndr=o(" (Transformer-XL model)"),jdr=l(),wT=a("li"),E0e=a("strong"),Ddr=o("vit_mae"),Gdr=o(" \u2014 "),Xz=a("a"),Odr=o("TFViTMAEForPreTraining"),Vdr=o(" (ViTMAE model)"),Xdr=l(),AT=a("li"),C0e=a("strong"),zdr=o("xlm"),Qdr=o(" \u2014 "),zz=a("a"),Wdr=o("TFXLMWithLMHeadModel"),Hdr=o(" (XLM model)"),Udr=l(),yT=a("li"),w0e=a("strong"),Jdr=o("xlm-roberta"),Ydr=o(" \u2014 "),Qz=a("a"),Kdr=o("TFXLMRobertaForMaskedLM"),Zdr=o(" (XLM-RoBERTa model)"),ecr=l(),LT=a("li"),A0e=a("strong"),ocr=o("xlnet"),rcr=o(" \u2014 "),Wz=a("a"),tcr=o("TFXLNetLMHeadModel"),acr=o(" (XLNet model)"),ncr=l(),F(xT.$$.fragment),WPe=l(),Nd=a("h2"),$T=a("a"),y0e=a("span"),F(FL.$$.fragment),scr=l(),L0e=a("span"),lcr=o("TFAutoModelForCausalLM"),HPe=l(),Zo=a("div"),F(TL.$$.fragment),icr=l(),jd=a("p"),dcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Hz=a("a"),ccr=o("from_pretrained()"),fcr=o(" class method or the "),Uz=a("a"),mcr=o("from_config()"),gcr=o(` class
method.`),hcr=l(),ML=a("p"),pcr=o("This class cannot be instantiated directly using "),x0e=a("code"),ucr=o("__init__()"),_cr=o(" (throws an error)."),bcr=l(),wt=a("div"),F(EL.$$.fragment),vcr=l(),$0e=a("p"),Fcr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Tcr=l(),Dd=a("p"),Mcr=o(`Note:
Loading a model from its configuration file does `),k0e=a("strong"),Ecr=o("not"),Ccr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),wcr=o("from_pretrained()"),Acr=o(" to load the model weights."),ycr=l(),F(kT.$$.fragment),Lcr=l(),Ar=a("div"),F(CL.$$.fragment),xcr=l(),S0e=a("p"),$cr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kcr=l(),Ya=a("p"),Scr=o("The model class to instantiate is selected based on the "),R0e=a("code"),Rcr=o("model_type"),Bcr=o(` property of the config object (either
passed as an argument or loaded from `),B0e=a("code"),Pcr=o("pretrained_model_name_or_path"),Icr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=a("code"),qcr=o("pretrained_model_name_or_path"),Ncr=o(":"),jcr=l(),Te=a("ul"),ST=a("li"),I0e=a("strong"),Dcr=o("bert"),Gcr=o(" \u2014 "),Yz=a("a"),Ocr=o("TFBertLMHeadModel"),Vcr=o(" (BERT model)"),Xcr=l(),RT=a("li"),q0e=a("strong"),zcr=o("camembert"),Qcr=o(" \u2014 "),Kz=a("a"),Wcr=o("TFCamembertForCausalLM"),Hcr=o(" (CamemBERT model)"),Ucr=l(),BT=a("li"),N0e=a("strong"),Jcr=o("ctrl"),Ycr=o(" \u2014 "),Zz=a("a"),Kcr=o("TFCTRLLMHeadModel"),Zcr=o(" (CTRL model)"),efr=l(),PT=a("li"),j0e=a("strong"),ofr=o("gpt2"),rfr=o(" \u2014 "),eQ=a("a"),tfr=o("TFGPT2LMHeadModel"),afr=o(" (OpenAI GPT-2 model)"),nfr=l(),IT=a("li"),D0e=a("strong"),sfr=o("gptj"),lfr=o(" \u2014 "),oQ=a("a"),ifr=o("TFGPTJForCausalLM"),dfr=o(" (GPT-J model)"),cfr=l(),qT=a("li"),G0e=a("strong"),ffr=o("openai-gpt"),mfr=o(" \u2014 "),rQ=a("a"),gfr=o("TFOpenAIGPTLMHeadModel"),hfr=o(" (OpenAI GPT model)"),pfr=l(),NT=a("li"),O0e=a("strong"),ufr=o("rembert"),_fr=o(" \u2014 "),tQ=a("a"),bfr=o("TFRemBertForCausalLM"),vfr=o(" (RemBERT model)"),Ffr=l(),jT=a("li"),V0e=a("strong"),Tfr=o("roberta"),Mfr=o(" \u2014 "),aQ=a("a"),Efr=o("TFRobertaForCausalLM"),Cfr=o(" (RoBERTa model)"),wfr=l(),DT=a("li"),X0e=a("strong"),Afr=o("roformer"),yfr=o(" \u2014 "),nQ=a("a"),Lfr=o("TFRoFormerForCausalLM"),xfr=o(" (RoFormer model)"),$fr=l(),GT=a("li"),z0e=a("strong"),kfr=o("transfo-xl"),Sfr=o(" \u2014 "),sQ=a("a"),Rfr=o("TFTransfoXLLMHeadModel"),Bfr=o(" (Transformer-XL model)"),Pfr=l(),OT=a("li"),Q0e=a("strong"),Ifr=o("xlm"),qfr=o(" \u2014 "),lQ=a("a"),Nfr=o("TFXLMWithLMHeadModel"),jfr=o(" (XLM model)"),Dfr=l(),VT=a("li"),W0e=a("strong"),Gfr=o("xlnet"),Ofr=o(" \u2014 "),iQ=a("a"),Vfr=o("TFXLNetLMHeadModel"),Xfr=o(" (XLNet model)"),zfr=l(),F(XT.$$.fragment),UPe=l(),Gd=a("h2"),zT=a("a"),H0e=a("span"),F(wL.$$.fragment),Qfr=l(),U0e=a("span"),Wfr=o("TFAutoModelForImageClassification"),JPe=l(),er=a("div"),F(AL.$$.fragment),Hfr=l(),Od=a("p"),Ufr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dQ=a("a"),Jfr=o("from_pretrained()"),Yfr=o(" class method or the "),cQ=a("a"),Kfr=o("from_config()"),Zfr=o(` class
method.`),emr=l(),yL=a("p"),omr=o("This class cannot be instantiated directly using "),J0e=a("code"),rmr=o("__init__()"),tmr=o(" (throws an error)."),amr=l(),At=a("div"),F(LL.$$.fragment),nmr=l(),Y0e=a("p"),smr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lmr=l(),Vd=a("p"),imr=o(`Note:
Loading a model from its configuration file does `),K0e=a("strong"),dmr=o("not"),cmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),fmr=o("from_pretrained()"),mmr=o(" to load the model weights."),gmr=l(),F(QT.$$.fragment),hmr=l(),yr=a("div"),F(xL.$$.fragment),pmr=l(),Z0e=a("p"),umr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_mr=l(),Ka=a("p"),bmr=o("The model class to instantiate is selected based on the "),e1e=a("code"),vmr=o("model_type"),Fmr=o(` property of the config object (either
passed as an argument or loaded from `),o1e=a("code"),Tmr=o("pretrained_model_name_or_path"),Mmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=a("code"),Emr=o("pretrained_model_name_or_path"),Cmr=o(":"),wmr=l(),$L=a("ul"),WT=a("li"),t1e=a("strong"),Amr=o("convnext"),ymr=o(" \u2014 "),mQ=a("a"),Lmr=o("TFConvNextForImageClassification"),xmr=o(" (ConvNext model)"),$mr=l(),HT=a("li"),a1e=a("strong"),kmr=o("vit"),Smr=o(" \u2014 "),gQ=a("a"),Rmr=o("TFViTForImageClassification"),Bmr=o(" (ViT model)"),Pmr=l(),F(UT.$$.fragment),YPe=l(),Xd=a("h2"),JT=a("a"),n1e=a("span"),F(kL.$$.fragment),Imr=l(),s1e=a("span"),qmr=o("TFAutoModelForMaskedLM"),KPe=l(),or=a("div"),F(SL.$$.fragment),Nmr=l(),zd=a("p"),jmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hQ=a("a"),Dmr=o("from_pretrained()"),Gmr=o(" class method or the "),pQ=a("a"),Omr=o("from_config()"),Vmr=o(` class
method.`),Xmr=l(),RL=a("p"),zmr=o("This class cannot be instantiated directly using "),l1e=a("code"),Qmr=o("__init__()"),Wmr=o(" (throws an error)."),Hmr=l(),yt=a("div"),F(BL.$$.fragment),Umr=l(),i1e=a("p"),Jmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ymr=l(),Qd=a("p"),Kmr=o(`Note:
Loading a model from its configuration file does `),d1e=a("strong"),Zmr=o("not"),egr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),ogr=o("from_pretrained()"),rgr=o(" to load the model weights."),tgr=l(),F(YT.$$.fragment),agr=l(),Lr=a("div"),F(PL.$$.fragment),ngr=l(),c1e=a("p"),sgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lgr=l(),Za=a("p"),igr=o("The model class to instantiate is selected based on the "),f1e=a("code"),dgr=o("model_type"),cgr=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),fgr=o("pretrained_model_name_or_path"),mgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),ggr=o("pretrained_model_name_or_path"),hgr=o(":"),pgr=l(),ie=a("ul"),KT=a("li"),h1e=a("strong"),ugr=o("albert"),_gr=o(" \u2014 "),_Q=a("a"),bgr=o("TFAlbertForMaskedLM"),vgr=o(" (ALBERT model)"),Fgr=l(),ZT=a("li"),p1e=a("strong"),Tgr=o("bert"),Mgr=o(" \u2014 "),bQ=a("a"),Egr=o("TFBertForMaskedLM"),Cgr=o(" (BERT model)"),wgr=l(),e7=a("li"),u1e=a("strong"),Agr=o("camembert"),ygr=o(" \u2014 "),vQ=a("a"),Lgr=o("TFCamembertForMaskedLM"),xgr=o(" (CamemBERT model)"),$gr=l(),o7=a("li"),_1e=a("strong"),kgr=o("convbert"),Sgr=o(" \u2014 "),FQ=a("a"),Rgr=o("TFConvBertForMaskedLM"),Bgr=o(" (ConvBERT model)"),Pgr=l(),r7=a("li"),b1e=a("strong"),Igr=o("deberta"),qgr=o(" \u2014 "),TQ=a("a"),Ngr=o("TFDebertaForMaskedLM"),jgr=o(" (DeBERTa model)"),Dgr=l(),t7=a("li"),v1e=a("strong"),Ggr=o("deberta-v2"),Ogr=o(" \u2014 "),MQ=a("a"),Vgr=o("TFDebertaV2ForMaskedLM"),Xgr=o(" (DeBERTa-v2 model)"),zgr=l(),a7=a("li"),F1e=a("strong"),Qgr=o("distilbert"),Wgr=o(" \u2014 "),EQ=a("a"),Hgr=o("TFDistilBertForMaskedLM"),Ugr=o(" (DistilBERT model)"),Jgr=l(),n7=a("li"),T1e=a("strong"),Ygr=o("electra"),Kgr=o(" \u2014 "),CQ=a("a"),Zgr=o("TFElectraForMaskedLM"),ehr=o(" (ELECTRA model)"),ohr=l(),s7=a("li"),M1e=a("strong"),rhr=o("flaubert"),thr=o(" \u2014 "),wQ=a("a"),ahr=o("TFFlaubertWithLMHeadModel"),nhr=o(" (FlauBERT model)"),shr=l(),l7=a("li"),E1e=a("strong"),lhr=o("funnel"),ihr=o(" \u2014 "),AQ=a("a"),dhr=o("TFFunnelForMaskedLM"),chr=o(" (Funnel Transformer model)"),fhr=l(),i7=a("li"),C1e=a("strong"),mhr=o("layoutlm"),ghr=o(" \u2014 "),yQ=a("a"),hhr=o("TFLayoutLMForMaskedLM"),phr=o(" (LayoutLM model)"),uhr=l(),d7=a("li"),w1e=a("strong"),_hr=o("longformer"),bhr=o(" \u2014 "),LQ=a("a"),vhr=o("TFLongformerForMaskedLM"),Fhr=o(" (Longformer model)"),Thr=l(),c7=a("li"),A1e=a("strong"),Mhr=o("mobilebert"),Ehr=o(" \u2014 "),xQ=a("a"),Chr=o("TFMobileBertForMaskedLM"),whr=o(" (MobileBERT model)"),Ahr=l(),f7=a("li"),y1e=a("strong"),yhr=o("mpnet"),Lhr=o(" \u2014 "),$Q=a("a"),xhr=o("TFMPNetForMaskedLM"),$hr=o(" (MPNet model)"),khr=l(),m7=a("li"),L1e=a("strong"),Shr=o("rembert"),Rhr=o(" \u2014 "),kQ=a("a"),Bhr=o("TFRemBertForMaskedLM"),Phr=o(" (RemBERT model)"),Ihr=l(),g7=a("li"),x1e=a("strong"),qhr=o("roberta"),Nhr=o(" \u2014 "),SQ=a("a"),jhr=o("TFRobertaForMaskedLM"),Dhr=o(" (RoBERTa model)"),Ghr=l(),h7=a("li"),$1e=a("strong"),Ohr=o("roformer"),Vhr=o(" \u2014 "),RQ=a("a"),Xhr=o("TFRoFormerForMaskedLM"),zhr=o(" (RoFormer model)"),Qhr=l(),p7=a("li"),k1e=a("strong"),Whr=o("tapas"),Hhr=o(" \u2014 "),BQ=a("a"),Uhr=o("TFTapasForMaskedLM"),Jhr=o(" (TAPAS model)"),Yhr=l(),u7=a("li"),S1e=a("strong"),Khr=o("xlm"),Zhr=o(" \u2014 "),PQ=a("a"),epr=o("TFXLMWithLMHeadModel"),opr=o(" (XLM model)"),rpr=l(),_7=a("li"),R1e=a("strong"),tpr=o("xlm-roberta"),apr=o(" \u2014 "),IQ=a("a"),npr=o("TFXLMRobertaForMaskedLM"),spr=o(" (XLM-RoBERTa model)"),lpr=l(),F(b7.$$.fragment),ZPe=l(),Wd=a("h2"),v7=a("a"),B1e=a("span"),F(IL.$$.fragment),ipr=l(),P1e=a("span"),dpr=o("TFAutoModelForSeq2SeqLM"),eIe=l(),rr=a("div"),F(qL.$$.fragment),cpr=l(),Hd=a("p"),fpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qQ=a("a"),mpr=o("from_pretrained()"),gpr=o(" class method or the "),NQ=a("a"),hpr=o("from_config()"),ppr=o(` class
method.`),upr=l(),NL=a("p"),_pr=o("This class cannot be instantiated directly using "),I1e=a("code"),bpr=o("__init__()"),vpr=o(" (throws an error)."),Fpr=l(),Lt=a("div"),F(jL.$$.fragment),Tpr=l(),q1e=a("p"),Mpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Epr=l(),Ud=a("p"),Cpr=o(`Note:
Loading a model from its configuration file does `),N1e=a("strong"),wpr=o("not"),Apr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=a("a"),ypr=o("from_pretrained()"),Lpr=o(" to load the model weights."),xpr=l(),F(F7.$$.fragment),$pr=l(),xr=a("div"),F(DL.$$.fragment),kpr=l(),j1e=a("p"),Spr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rpr=l(),en=a("p"),Bpr=o("The model class to instantiate is selected based on the "),D1e=a("code"),Ppr=o("model_type"),Ipr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),qpr=o("pretrained_model_name_or_path"),Npr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),jpr=o("pretrained_model_name_or_path"),Dpr=o(":"),Gpr=l(),ye=a("ul"),T7=a("li"),V1e=a("strong"),Opr=o("bart"),Vpr=o(" \u2014 "),DQ=a("a"),Xpr=o("TFBartForConditionalGeneration"),zpr=o(" (BART model)"),Qpr=l(),M7=a("li"),X1e=a("strong"),Wpr=o("blenderbot"),Hpr=o(" \u2014 "),GQ=a("a"),Upr=o("TFBlenderbotForConditionalGeneration"),Jpr=o(" (Blenderbot model)"),Ypr=l(),E7=a("li"),z1e=a("strong"),Kpr=o("blenderbot-small"),Zpr=o(" \u2014 "),OQ=a("a"),eur=o("TFBlenderbotSmallForConditionalGeneration"),our=o(" (BlenderbotSmall model)"),rur=l(),C7=a("li"),Q1e=a("strong"),tur=o("encoder-decoder"),aur=o(" \u2014 "),VQ=a("a"),nur=o("TFEncoderDecoderModel"),sur=o(" (Encoder decoder model)"),lur=l(),w7=a("li"),W1e=a("strong"),iur=o("led"),dur=o(" \u2014 "),XQ=a("a"),cur=o("TFLEDForConditionalGeneration"),fur=o(" (LED model)"),mur=l(),A7=a("li"),H1e=a("strong"),gur=o("marian"),hur=o(" \u2014 "),zQ=a("a"),pur=o("TFMarianMTModel"),uur=o(" (Marian model)"),_ur=l(),y7=a("li"),U1e=a("strong"),bur=o("mbart"),vur=o(" \u2014 "),QQ=a("a"),Fur=o("TFMBartForConditionalGeneration"),Tur=o(" (mBART model)"),Mur=l(),L7=a("li"),J1e=a("strong"),Eur=o("mt5"),Cur=o(" \u2014 "),WQ=a("a"),wur=o("TFMT5ForConditionalGeneration"),Aur=o(" (mT5 model)"),yur=l(),x7=a("li"),Y1e=a("strong"),Lur=o("pegasus"),xur=o(" \u2014 "),HQ=a("a"),$ur=o("TFPegasusForConditionalGeneration"),kur=o(" (Pegasus model)"),Sur=l(),$7=a("li"),K1e=a("strong"),Rur=o("t5"),Bur=o(" \u2014 "),UQ=a("a"),Pur=o("TFT5ForConditionalGeneration"),Iur=o(" (T5 model)"),qur=l(),F(k7.$$.fragment),oIe=l(),Jd=a("h2"),S7=a("a"),Z1e=a("span"),F(GL.$$.fragment),Nur=l(),ebe=a("span"),jur=o("TFAutoModelForSequenceClassification"),rIe=l(),tr=a("div"),F(OL.$$.fragment),Dur=l(),Yd=a("p"),Gur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JQ=a("a"),Our=o("from_pretrained()"),Vur=o(" class method or the "),YQ=a("a"),Xur=o("from_config()"),zur=o(` class
method.`),Qur=l(),VL=a("p"),Wur=o("This class cannot be instantiated directly using "),obe=a("code"),Hur=o("__init__()"),Uur=o(" (throws an error)."),Jur=l(),xt=a("div"),F(XL.$$.fragment),Yur=l(),rbe=a("p"),Kur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zur=l(),Kd=a("p"),e_r=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),o_r=o("not"),r_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),t_r=o("from_pretrained()"),a_r=o(" to load the model weights."),n_r=l(),F(R7.$$.fragment),s_r=l(),$r=a("div"),F(zL.$$.fragment),l_r=l(),abe=a("p"),i_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d_r=l(),on=a("p"),c_r=o("The model class to instantiate is selected based on the "),nbe=a("code"),f_r=o("model_type"),m_r=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),p_r=o("pretrained_model_name_or_path"),u_r=o(":"),__r=l(),Z=a("ul"),B7=a("li"),ibe=a("strong"),b_r=o("albert"),v_r=o(" \u2014 "),ZQ=a("a"),F_r=o("TFAlbertForSequenceClassification"),T_r=o(" (ALBERT model)"),M_r=l(),P7=a("li"),dbe=a("strong"),E_r=o("bert"),C_r=o(" \u2014 "),eW=a("a"),w_r=o("TFBertForSequenceClassification"),A_r=o(" (BERT model)"),y_r=l(),I7=a("li"),cbe=a("strong"),L_r=o("camembert"),x_r=o(" \u2014 "),oW=a("a"),$_r=o("TFCamembertForSequenceClassification"),k_r=o(" (CamemBERT model)"),S_r=l(),q7=a("li"),fbe=a("strong"),R_r=o("convbert"),B_r=o(" \u2014 "),rW=a("a"),P_r=o("TFConvBertForSequenceClassification"),I_r=o(" (ConvBERT model)"),q_r=l(),N7=a("li"),mbe=a("strong"),N_r=o("ctrl"),j_r=o(" \u2014 "),tW=a("a"),D_r=o("TFCTRLForSequenceClassification"),G_r=o(" (CTRL model)"),O_r=l(),j7=a("li"),gbe=a("strong"),V_r=o("deberta"),X_r=o(" \u2014 "),aW=a("a"),z_r=o("TFDebertaForSequenceClassification"),Q_r=o(" (DeBERTa model)"),W_r=l(),D7=a("li"),hbe=a("strong"),H_r=o("deberta-v2"),U_r=o(" \u2014 "),nW=a("a"),J_r=o("TFDebertaV2ForSequenceClassification"),Y_r=o(" (DeBERTa-v2 model)"),K_r=l(),G7=a("li"),pbe=a("strong"),Z_r=o("distilbert"),e0r=o(" \u2014 "),sW=a("a"),o0r=o("TFDistilBertForSequenceClassification"),r0r=o(" (DistilBERT model)"),t0r=l(),O7=a("li"),ube=a("strong"),a0r=o("electra"),n0r=o(" \u2014 "),lW=a("a"),s0r=o("TFElectraForSequenceClassification"),l0r=o(" (ELECTRA model)"),i0r=l(),V7=a("li"),_be=a("strong"),d0r=o("flaubert"),c0r=o(" \u2014 "),iW=a("a"),f0r=o("TFFlaubertForSequenceClassification"),m0r=o(" (FlauBERT model)"),g0r=l(),X7=a("li"),bbe=a("strong"),h0r=o("funnel"),p0r=o(" \u2014 "),dW=a("a"),u0r=o("TFFunnelForSequenceClassification"),_0r=o(" (Funnel Transformer model)"),b0r=l(),z7=a("li"),vbe=a("strong"),v0r=o("gpt2"),F0r=o(" \u2014 "),cW=a("a"),T0r=o("TFGPT2ForSequenceClassification"),M0r=o(" (OpenAI GPT-2 model)"),E0r=l(),Q7=a("li"),Fbe=a("strong"),C0r=o("gptj"),w0r=o(" \u2014 "),fW=a("a"),A0r=o("TFGPTJForSequenceClassification"),y0r=o(" (GPT-J model)"),L0r=l(),W7=a("li"),Tbe=a("strong"),x0r=o("layoutlm"),$0r=o(" \u2014 "),mW=a("a"),k0r=o("TFLayoutLMForSequenceClassification"),S0r=o(" (LayoutLM model)"),R0r=l(),H7=a("li"),Mbe=a("strong"),B0r=o("longformer"),P0r=o(" \u2014 "),gW=a("a"),I0r=o("TFLongformerForSequenceClassification"),q0r=o(" (Longformer model)"),N0r=l(),U7=a("li"),Ebe=a("strong"),j0r=o("mobilebert"),D0r=o(" \u2014 "),hW=a("a"),G0r=o("TFMobileBertForSequenceClassification"),O0r=o(" (MobileBERT model)"),V0r=l(),J7=a("li"),Cbe=a("strong"),X0r=o("mpnet"),z0r=o(" \u2014 "),pW=a("a"),Q0r=o("TFMPNetForSequenceClassification"),W0r=o(" (MPNet model)"),H0r=l(),Y7=a("li"),wbe=a("strong"),U0r=o("openai-gpt"),J0r=o(" \u2014 "),uW=a("a"),Y0r=o("TFOpenAIGPTForSequenceClassification"),K0r=o(" (OpenAI GPT model)"),Z0r=l(),K7=a("li"),Abe=a("strong"),e1r=o("rembert"),o1r=o(" \u2014 "),_W=a("a"),r1r=o("TFRemBertForSequenceClassification"),t1r=o(" (RemBERT model)"),a1r=l(),Z7=a("li"),ybe=a("strong"),n1r=o("roberta"),s1r=o(" \u2014 "),bW=a("a"),l1r=o("TFRobertaForSequenceClassification"),i1r=o(" (RoBERTa model)"),d1r=l(),eM=a("li"),Lbe=a("strong"),c1r=o("roformer"),f1r=o(" \u2014 "),vW=a("a"),m1r=o("TFRoFormerForSequenceClassification"),g1r=o(" (RoFormer model)"),h1r=l(),oM=a("li"),xbe=a("strong"),p1r=o("tapas"),u1r=o(" \u2014 "),FW=a("a"),_1r=o("TFTapasForSequenceClassification"),b1r=o(" (TAPAS model)"),v1r=l(),rM=a("li"),$be=a("strong"),F1r=o("transfo-xl"),T1r=o(" \u2014 "),TW=a("a"),M1r=o("TFTransfoXLForSequenceClassification"),E1r=o(" (Transformer-XL model)"),C1r=l(),tM=a("li"),kbe=a("strong"),w1r=o("xlm"),A1r=o(" \u2014 "),MW=a("a"),y1r=o("TFXLMForSequenceClassification"),L1r=o(" (XLM model)"),x1r=l(),aM=a("li"),Sbe=a("strong"),$1r=o("xlm-roberta"),k1r=o(" \u2014 "),EW=a("a"),S1r=o("TFXLMRobertaForSequenceClassification"),R1r=o(" (XLM-RoBERTa model)"),B1r=l(),nM=a("li"),Rbe=a("strong"),P1r=o("xlnet"),I1r=o(" \u2014 "),CW=a("a"),q1r=o("TFXLNetForSequenceClassification"),N1r=o(" (XLNet model)"),j1r=l(),F(sM.$$.fragment),tIe=l(),Zd=a("h2"),lM=a("a"),Bbe=a("span"),F(QL.$$.fragment),D1r=l(),Pbe=a("span"),G1r=o("TFAutoModelForMultipleChoice"),aIe=l(),ar=a("div"),F(WL.$$.fragment),O1r=l(),ec=a("p"),V1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wW=a("a"),X1r=o("from_pretrained()"),z1r=o(" class method or the "),AW=a("a"),Q1r=o("from_config()"),W1r=o(` class
method.`),H1r=l(),HL=a("p"),U1r=o("This class cannot be instantiated directly using "),Ibe=a("code"),J1r=o("__init__()"),Y1r=o(" (throws an error)."),K1r=l(),$t=a("div"),F(UL.$$.fragment),Z1r=l(),qbe=a("p"),ebr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),obr=l(),oc=a("p"),rbr=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),tbr=o("not"),abr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),nbr=o("from_pretrained()"),sbr=o(" to load the model weights."),lbr=l(),F(iM.$$.fragment),ibr=l(),kr=a("div"),F(JL.$$.fragment),dbr=l(),jbe=a("p"),cbr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fbr=l(),rn=a("p"),mbr=o("The model class to instantiate is selected based on the "),Dbe=a("code"),gbr=o("model_type"),hbr=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),pbr=o("pretrained_model_name_or_path"),ubr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),_br=o("pretrained_model_name_or_path"),bbr=o(":"),vbr=l(),pe=a("ul"),dM=a("li"),Vbe=a("strong"),Fbr=o("albert"),Tbr=o(" \u2014 "),LW=a("a"),Mbr=o("TFAlbertForMultipleChoice"),Ebr=o(" (ALBERT model)"),Cbr=l(),cM=a("li"),Xbe=a("strong"),wbr=o("bert"),Abr=o(" \u2014 "),xW=a("a"),ybr=o("TFBertForMultipleChoice"),Lbr=o(" (BERT model)"),xbr=l(),fM=a("li"),zbe=a("strong"),$br=o("camembert"),kbr=o(" \u2014 "),$W=a("a"),Sbr=o("TFCamembertForMultipleChoice"),Rbr=o(" (CamemBERT model)"),Bbr=l(),mM=a("li"),Qbe=a("strong"),Pbr=o("convbert"),Ibr=o(" \u2014 "),kW=a("a"),qbr=o("TFConvBertForMultipleChoice"),Nbr=o(" (ConvBERT model)"),jbr=l(),gM=a("li"),Wbe=a("strong"),Dbr=o("distilbert"),Gbr=o(" \u2014 "),SW=a("a"),Obr=o("TFDistilBertForMultipleChoice"),Vbr=o(" (DistilBERT model)"),Xbr=l(),hM=a("li"),Hbe=a("strong"),zbr=o("electra"),Qbr=o(" \u2014 "),RW=a("a"),Wbr=o("TFElectraForMultipleChoice"),Hbr=o(" (ELECTRA model)"),Ubr=l(),pM=a("li"),Ube=a("strong"),Jbr=o("flaubert"),Ybr=o(" \u2014 "),BW=a("a"),Kbr=o("TFFlaubertForMultipleChoice"),Zbr=o(" (FlauBERT model)"),e2r=l(),uM=a("li"),Jbe=a("strong"),o2r=o("funnel"),r2r=o(" \u2014 "),PW=a("a"),t2r=o("TFFunnelForMultipleChoice"),a2r=o(" (Funnel Transformer model)"),n2r=l(),_M=a("li"),Ybe=a("strong"),s2r=o("longformer"),l2r=o(" \u2014 "),IW=a("a"),i2r=o("TFLongformerForMultipleChoice"),d2r=o(" (Longformer model)"),c2r=l(),bM=a("li"),Kbe=a("strong"),f2r=o("mobilebert"),m2r=o(" \u2014 "),qW=a("a"),g2r=o("TFMobileBertForMultipleChoice"),h2r=o(" (MobileBERT model)"),p2r=l(),vM=a("li"),Zbe=a("strong"),u2r=o("mpnet"),_2r=o(" \u2014 "),NW=a("a"),b2r=o("TFMPNetForMultipleChoice"),v2r=o(" (MPNet model)"),F2r=l(),FM=a("li"),e2e=a("strong"),T2r=o("rembert"),M2r=o(" \u2014 "),jW=a("a"),E2r=o("TFRemBertForMultipleChoice"),C2r=o(" (RemBERT model)"),w2r=l(),TM=a("li"),o2e=a("strong"),A2r=o("roberta"),y2r=o(" \u2014 "),DW=a("a"),L2r=o("TFRobertaForMultipleChoice"),x2r=o(" (RoBERTa model)"),$2r=l(),MM=a("li"),r2e=a("strong"),k2r=o("roformer"),S2r=o(" \u2014 "),GW=a("a"),R2r=o("TFRoFormerForMultipleChoice"),B2r=o(" (RoFormer model)"),P2r=l(),EM=a("li"),t2e=a("strong"),I2r=o("xlm"),q2r=o(" \u2014 "),OW=a("a"),N2r=o("TFXLMForMultipleChoice"),j2r=o(" (XLM model)"),D2r=l(),CM=a("li"),a2e=a("strong"),G2r=o("xlm-roberta"),O2r=o(" \u2014 "),VW=a("a"),V2r=o("TFXLMRobertaForMultipleChoice"),X2r=o(" (XLM-RoBERTa model)"),z2r=l(),wM=a("li"),n2e=a("strong"),Q2r=o("xlnet"),W2r=o(" \u2014 "),XW=a("a"),H2r=o("TFXLNetForMultipleChoice"),U2r=o(" (XLNet model)"),J2r=l(),F(AM.$$.fragment),nIe=l(),rc=a("h2"),yM=a("a"),s2e=a("span"),F(YL.$$.fragment),Y2r=l(),l2e=a("span"),K2r=o("TFAutoModelForTableQuestionAnswering"),sIe=l(),nr=a("div"),F(KL.$$.fragment),Z2r=l(),tc=a("p"),evr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zW=a("a"),ovr=o("from_pretrained()"),rvr=o(" class method or the "),QW=a("a"),tvr=o("from_config()"),avr=o(` class
method.`),nvr=l(),ZL=a("p"),svr=o("This class cannot be instantiated directly using "),i2e=a("code"),lvr=o("__init__()"),ivr=o(" (throws an error)."),dvr=l(),kt=a("div"),F(e8.$$.fragment),cvr=l(),d2e=a("p"),fvr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mvr=l(),ac=a("p"),gvr=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),hvr=o("not"),pvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),uvr=o("from_pretrained()"),_vr=o(" to load the model weights."),bvr=l(),F(LM.$$.fragment),vvr=l(),Sr=a("div"),F(o8.$$.fragment),Fvr=l(),f2e=a("p"),Tvr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mvr=l(),tn=a("p"),Evr=o("The model class to instantiate is selected based on the "),m2e=a("code"),Cvr=o("model_type"),wvr=o(` property of the config object (either
passed as an argument or loaded from `),g2e=a("code"),Avr=o("pretrained_model_name_or_path"),yvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=a("code"),Lvr=o("pretrained_model_name_or_path"),xvr=o(":"),$vr=l(),p2e=a("ul"),xM=a("li"),u2e=a("strong"),kvr=o("tapas"),Svr=o(" \u2014 "),HW=a("a"),Rvr=o("TFTapasForQuestionAnswering"),Bvr=o(" (TAPAS model)"),Pvr=l(),F($M.$$.fragment),lIe=l(),nc=a("h2"),kM=a("a"),_2e=a("span"),F(r8.$$.fragment),Ivr=l(),b2e=a("span"),qvr=o("TFAutoModelForTokenClassification"),iIe=l(),sr=a("div"),F(t8.$$.fragment),Nvr=l(),sc=a("p"),jvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UW=a("a"),Dvr=o("from_pretrained()"),Gvr=o(" class method or the "),JW=a("a"),Ovr=o("from_config()"),Vvr=o(` class
method.`),Xvr=l(),a8=a("p"),zvr=o("This class cannot be instantiated directly using "),v2e=a("code"),Qvr=o("__init__()"),Wvr=o(" (throws an error)."),Hvr=l(),St=a("div"),F(n8.$$.fragment),Uvr=l(),F2e=a("p"),Jvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yvr=l(),lc=a("p"),Kvr=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),Zvr=o("not"),eFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),oFr=o("from_pretrained()"),rFr=o(" to load the model weights."),tFr=l(),F(SM.$$.fragment),aFr=l(),Rr=a("div"),F(s8.$$.fragment),nFr=l(),M2e=a("p"),sFr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lFr=l(),an=a("p"),iFr=o("The model class to instantiate is selected based on the "),E2e=a("code"),dFr=o("model_type"),cFr=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),fFr=o("pretrained_model_name_or_path"),mFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),gFr=o("pretrained_model_name_or_path"),hFr=o(":"),pFr=l(),de=a("ul"),RM=a("li"),A2e=a("strong"),uFr=o("albert"),_Fr=o(" \u2014 "),KW=a("a"),bFr=o("TFAlbertForTokenClassification"),vFr=o(" (ALBERT model)"),FFr=l(),BM=a("li"),y2e=a("strong"),TFr=o("bert"),MFr=o(" \u2014 "),ZW=a("a"),EFr=o("TFBertForTokenClassification"),CFr=o(" (BERT model)"),wFr=l(),PM=a("li"),L2e=a("strong"),AFr=o("camembert"),yFr=o(" \u2014 "),eH=a("a"),LFr=o("TFCamembertForTokenClassification"),xFr=o(" (CamemBERT model)"),$Fr=l(),IM=a("li"),x2e=a("strong"),kFr=o("convbert"),SFr=o(" \u2014 "),oH=a("a"),RFr=o("TFConvBertForTokenClassification"),BFr=o(" (ConvBERT model)"),PFr=l(),qM=a("li"),$2e=a("strong"),IFr=o("deberta"),qFr=o(" \u2014 "),rH=a("a"),NFr=o("TFDebertaForTokenClassification"),jFr=o(" (DeBERTa model)"),DFr=l(),NM=a("li"),k2e=a("strong"),GFr=o("deberta-v2"),OFr=o(" \u2014 "),tH=a("a"),VFr=o("TFDebertaV2ForTokenClassification"),XFr=o(" (DeBERTa-v2 model)"),zFr=l(),jM=a("li"),S2e=a("strong"),QFr=o("distilbert"),WFr=o(" \u2014 "),aH=a("a"),HFr=o("TFDistilBertForTokenClassification"),UFr=o(" (DistilBERT model)"),JFr=l(),DM=a("li"),R2e=a("strong"),YFr=o("electra"),KFr=o(" \u2014 "),nH=a("a"),ZFr=o("TFElectraForTokenClassification"),e6r=o(" (ELECTRA model)"),o6r=l(),GM=a("li"),B2e=a("strong"),r6r=o("flaubert"),t6r=o(" \u2014 "),sH=a("a"),a6r=o("TFFlaubertForTokenClassification"),n6r=o(" (FlauBERT model)"),s6r=l(),OM=a("li"),P2e=a("strong"),l6r=o("funnel"),i6r=o(" \u2014 "),lH=a("a"),d6r=o("TFFunnelForTokenClassification"),c6r=o(" (Funnel Transformer model)"),f6r=l(),VM=a("li"),I2e=a("strong"),m6r=o("layoutlm"),g6r=o(" \u2014 "),iH=a("a"),h6r=o("TFLayoutLMForTokenClassification"),p6r=o(" (LayoutLM model)"),u6r=l(),XM=a("li"),q2e=a("strong"),_6r=o("longformer"),b6r=o(" \u2014 "),dH=a("a"),v6r=o("TFLongformerForTokenClassification"),F6r=o(" (Longformer model)"),T6r=l(),zM=a("li"),N2e=a("strong"),M6r=o("mobilebert"),E6r=o(" \u2014 "),cH=a("a"),C6r=o("TFMobileBertForTokenClassification"),w6r=o(" (MobileBERT model)"),A6r=l(),QM=a("li"),j2e=a("strong"),y6r=o("mpnet"),L6r=o(" \u2014 "),fH=a("a"),x6r=o("TFMPNetForTokenClassification"),$6r=o(" (MPNet model)"),k6r=l(),WM=a("li"),D2e=a("strong"),S6r=o("rembert"),R6r=o(" \u2014 "),mH=a("a"),B6r=o("TFRemBertForTokenClassification"),P6r=o(" (RemBERT model)"),I6r=l(),HM=a("li"),G2e=a("strong"),q6r=o("roberta"),N6r=o(" \u2014 "),gH=a("a"),j6r=o("TFRobertaForTokenClassification"),D6r=o(" (RoBERTa model)"),G6r=l(),UM=a("li"),O2e=a("strong"),O6r=o("roformer"),V6r=o(" \u2014 "),hH=a("a"),X6r=o("TFRoFormerForTokenClassification"),z6r=o(" (RoFormer model)"),Q6r=l(),JM=a("li"),V2e=a("strong"),W6r=o("xlm"),H6r=o(" \u2014 "),pH=a("a"),U6r=o("TFXLMForTokenClassification"),J6r=o(" (XLM model)"),Y6r=l(),YM=a("li"),X2e=a("strong"),K6r=o("xlm-roberta"),Z6r=o(" \u2014 "),uH=a("a"),eTr=o("TFXLMRobertaForTokenClassification"),oTr=o(" (XLM-RoBERTa model)"),rTr=l(),KM=a("li"),z2e=a("strong"),tTr=o("xlnet"),aTr=o(" \u2014 "),_H=a("a"),nTr=o("TFXLNetForTokenClassification"),sTr=o(" (XLNet model)"),lTr=l(),F(ZM.$$.fragment),dIe=l(),ic=a("h2"),e4=a("a"),Q2e=a("span"),F(l8.$$.fragment),iTr=l(),W2e=a("span"),dTr=o("TFAutoModelForQuestionAnswering"),cIe=l(),lr=a("div"),F(i8.$$.fragment),cTr=l(),dc=a("p"),fTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bH=a("a"),mTr=o("from_pretrained()"),gTr=o(" class method or the "),vH=a("a"),hTr=o("from_config()"),pTr=o(` class
method.`),uTr=l(),d8=a("p"),_Tr=o("This class cannot be instantiated directly using "),H2e=a("code"),bTr=o("__init__()"),vTr=o(" (throws an error)."),FTr=l(),Rt=a("div"),F(c8.$$.fragment),TTr=l(),U2e=a("p"),MTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ETr=l(),cc=a("p"),CTr=o(`Note:
Loading a model from its configuration file does `),J2e=a("strong"),wTr=o("not"),ATr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),yTr=o("from_pretrained()"),LTr=o(" to load the model weights."),xTr=l(),F(o4.$$.fragment),$Tr=l(),Br=a("div"),F(f8.$$.fragment),kTr=l(),Y2e=a("p"),STr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RTr=l(),nn=a("p"),BTr=o("The model class to instantiate is selected based on the "),K2e=a("code"),PTr=o("model_type"),ITr=o(` property of the config object (either
passed as an argument or loaded from `),Z2e=a("code"),qTr=o("pretrained_model_name_or_path"),NTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),jTr=o("pretrained_model_name_or_path"),DTr=o(":"),GTr=l(),ce=a("ul"),r4=a("li"),ove=a("strong"),OTr=o("albert"),VTr=o(" \u2014 "),TH=a("a"),XTr=o("TFAlbertForQuestionAnswering"),zTr=o(" (ALBERT model)"),QTr=l(),t4=a("li"),rve=a("strong"),WTr=o("bert"),HTr=o(" \u2014 "),MH=a("a"),UTr=o("TFBertForQuestionAnswering"),JTr=o(" (BERT model)"),YTr=l(),a4=a("li"),tve=a("strong"),KTr=o("camembert"),ZTr=o(" \u2014 "),EH=a("a"),e7r=o("TFCamembertForQuestionAnswering"),o7r=o(" (CamemBERT model)"),r7r=l(),n4=a("li"),ave=a("strong"),t7r=o("convbert"),a7r=o(" \u2014 "),CH=a("a"),n7r=o("TFConvBertForQuestionAnswering"),s7r=o(" (ConvBERT model)"),l7r=l(),s4=a("li"),nve=a("strong"),i7r=o("deberta"),d7r=o(" \u2014 "),wH=a("a"),c7r=o("TFDebertaForQuestionAnswering"),f7r=o(" (DeBERTa model)"),m7r=l(),l4=a("li"),sve=a("strong"),g7r=o("deberta-v2"),h7r=o(" \u2014 "),AH=a("a"),p7r=o("TFDebertaV2ForQuestionAnswering"),u7r=o(" (DeBERTa-v2 model)"),_7r=l(),i4=a("li"),lve=a("strong"),b7r=o("distilbert"),v7r=o(" \u2014 "),yH=a("a"),F7r=o("TFDistilBertForQuestionAnswering"),T7r=o(" (DistilBERT model)"),M7r=l(),d4=a("li"),ive=a("strong"),E7r=o("electra"),C7r=o(" \u2014 "),LH=a("a"),w7r=o("TFElectraForQuestionAnswering"),A7r=o(" (ELECTRA model)"),y7r=l(),c4=a("li"),dve=a("strong"),L7r=o("flaubert"),x7r=o(" \u2014 "),xH=a("a"),$7r=o("TFFlaubertForQuestionAnsweringSimple"),k7r=o(" (FlauBERT model)"),S7r=l(),f4=a("li"),cve=a("strong"),R7r=o("funnel"),B7r=o(" \u2014 "),$H=a("a"),P7r=o("TFFunnelForQuestionAnswering"),I7r=o(" (Funnel Transformer model)"),q7r=l(),m4=a("li"),fve=a("strong"),N7r=o("gptj"),j7r=o(" \u2014 "),kH=a("a"),D7r=o("TFGPTJForQuestionAnswering"),G7r=o(" (GPT-J model)"),O7r=l(),g4=a("li"),mve=a("strong"),V7r=o("longformer"),X7r=o(" \u2014 "),SH=a("a"),z7r=o("TFLongformerForQuestionAnswering"),Q7r=o(" (Longformer model)"),W7r=l(),h4=a("li"),gve=a("strong"),H7r=o("mobilebert"),U7r=o(" \u2014 "),RH=a("a"),J7r=o("TFMobileBertForQuestionAnswering"),Y7r=o(" (MobileBERT model)"),K7r=l(),p4=a("li"),hve=a("strong"),Z7r=o("mpnet"),eMr=o(" \u2014 "),BH=a("a"),oMr=o("TFMPNetForQuestionAnswering"),rMr=o(" (MPNet model)"),tMr=l(),u4=a("li"),pve=a("strong"),aMr=o("rembert"),nMr=o(" \u2014 "),PH=a("a"),sMr=o("TFRemBertForQuestionAnswering"),lMr=o(" (RemBERT model)"),iMr=l(),_4=a("li"),uve=a("strong"),dMr=o("roberta"),cMr=o(" \u2014 "),IH=a("a"),fMr=o("TFRobertaForQuestionAnswering"),mMr=o(" (RoBERTa model)"),gMr=l(),b4=a("li"),_ve=a("strong"),hMr=o("roformer"),pMr=o(" \u2014 "),qH=a("a"),uMr=o("TFRoFormerForQuestionAnswering"),_Mr=o(" (RoFormer model)"),bMr=l(),v4=a("li"),bve=a("strong"),vMr=o("xlm"),FMr=o(" \u2014 "),NH=a("a"),TMr=o("TFXLMForQuestionAnsweringSimple"),MMr=o(" (XLM model)"),EMr=l(),F4=a("li"),vve=a("strong"),CMr=o("xlm-roberta"),wMr=o(" \u2014 "),jH=a("a"),AMr=o("TFXLMRobertaForQuestionAnswering"),yMr=o(" (XLM-RoBERTa model)"),LMr=l(),T4=a("li"),Fve=a("strong"),xMr=o("xlnet"),$Mr=o(" \u2014 "),DH=a("a"),kMr=o("TFXLNetForQuestionAnsweringSimple"),SMr=o(" (XLNet model)"),RMr=l(),F(M4.$$.fragment),fIe=l(),fc=a("h2"),E4=a("a"),Tve=a("span"),F(m8.$$.fragment),BMr=l(),Mve=a("span"),PMr=o("TFAutoModelForVision2Seq"),mIe=l(),ir=a("div"),F(g8.$$.fragment),IMr=l(),mc=a("p"),qMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GH=a("a"),NMr=o("from_pretrained()"),jMr=o(" class method or the "),OH=a("a"),DMr=o("from_config()"),GMr=o(` class
method.`),OMr=l(),h8=a("p"),VMr=o("This class cannot be instantiated directly using "),Eve=a("code"),XMr=o("__init__()"),zMr=o(" (throws an error)."),QMr=l(),Bt=a("div"),F(p8.$$.fragment),WMr=l(),Cve=a("p"),HMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UMr=l(),gc=a("p"),JMr=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),YMr=o("not"),KMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),ZMr=o("from_pretrained()"),e4r=o(" to load the model weights."),o4r=l(),F(C4.$$.fragment),r4r=l(),Pr=a("div"),F(u8.$$.fragment),t4r=l(),Ave=a("p"),a4r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),n4r=l(),sn=a("p"),s4r=o("The model class to instantiate is selected based on the "),yve=a("code"),l4r=o("model_type"),i4r=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),d4r=o("pretrained_model_name_or_path"),c4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),f4r=o("pretrained_model_name_or_path"),m4r=o(":"),g4r=l(),$ve=a("ul"),w4=a("li"),kve=a("strong"),h4r=o("vision-encoder-decoder"),p4r=o(" \u2014 "),XH=a("a"),u4r=o("TFVisionEncoderDecoderModel"),_4r=o(" (Vision Encoder decoder model)"),b4r=l(),F(A4.$$.fragment),gIe=l(),hc=a("h2"),y4=a("a"),Sve=a("span"),F(_8.$$.fragment),v4r=l(),Rve=a("span"),F4r=o("TFAutoModelForSpeechSeq2Seq"),hIe=l(),dr=a("div"),F(b8.$$.fragment),T4r=l(),pc=a("p"),M4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zH=a("a"),E4r=o("from_pretrained()"),C4r=o(" class method or the "),QH=a("a"),w4r=o("from_config()"),A4r=o(` class
method.`),y4r=l(),v8=a("p"),L4r=o("This class cannot be instantiated directly using "),Bve=a("code"),x4r=o("__init__()"),$4r=o(" (throws an error)."),k4r=l(),Pt=a("div"),F(F8.$$.fragment),S4r=l(),Pve=a("p"),R4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),B4r=l(),uc=a("p"),P4r=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),I4r=o("not"),q4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),N4r=o("from_pretrained()"),j4r=o(" to load the model weights."),D4r=l(),F(L4.$$.fragment),G4r=l(),Ir=a("div"),F(T8.$$.fragment),O4r=l(),qve=a("p"),V4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),X4r=l(),ln=a("p"),z4r=o("The model class to instantiate is selected based on the "),Nve=a("code"),Q4r=o("model_type"),W4r=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),H4r=o("pretrained_model_name_or_path"),U4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),J4r=o("pretrained_model_name_or_path"),Y4r=o(":"),K4r=l(),Gve=a("ul"),x4=a("li"),Ove=a("strong"),Z4r=o("speech_to_text"),eEr=o(" \u2014 "),HH=a("a"),oEr=o("TFSpeech2TextForConditionalGeneration"),rEr=o(" (Speech2Text model)"),tEr=l(),F($4.$$.fragment),pIe=l(),_c=a("h2"),k4=a("a"),Vve=a("span"),F(M8.$$.fragment),aEr=l(),Xve=a("span"),nEr=o("FlaxAutoModel"),uIe=l(),cr=a("div"),F(E8.$$.fragment),sEr=l(),bc=a("p"),lEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UH=a("a"),iEr=o("from_pretrained()"),dEr=o(" class method or the "),JH=a("a"),cEr=o("from_config()"),fEr=o(` class
method.`),mEr=l(),C8=a("p"),gEr=o("This class cannot be instantiated directly using "),zve=a("code"),hEr=o("__init__()"),pEr=o(" (throws an error)."),uEr=l(),It=a("div"),F(w8.$$.fragment),_Er=l(),Qve=a("p"),bEr=o("Instantiates one of the base model classes of the library from a configuration."),vEr=l(),vc=a("p"),FEr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),TEr=o("not"),MEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),EEr=o("from_pretrained()"),CEr=o(" to load the model weights."),wEr=l(),F(S4.$$.fragment),AEr=l(),qr=a("div"),F(A8.$$.fragment),yEr=l(),Hve=a("p"),LEr=o("Instantiate one of the base model classes of the library from a pretrained model."),xEr=l(),dn=a("p"),$Er=o("The model class to instantiate is selected based on the "),Uve=a("code"),kEr=o("model_type"),SEr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),REr=o("pretrained_model_name_or_path"),BEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),PEr=o("pretrained_model_name_or_path"),IEr=o(":"),qEr=l(),re=a("ul"),R4=a("li"),Kve=a("strong"),NEr=o("albert"),jEr=o(" \u2014 "),KH=a("a"),DEr=o("FlaxAlbertModel"),GEr=o(" (ALBERT model)"),OEr=l(),B4=a("li"),Zve=a("strong"),VEr=o("bart"),XEr=o(" \u2014 "),ZH=a("a"),zEr=o("FlaxBartModel"),QEr=o(" (BART model)"),WEr=l(),P4=a("li"),eFe=a("strong"),HEr=o("beit"),UEr=o(" \u2014 "),eU=a("a"),JEr=o("FlaxBeitModel"),YEr=o(" (BEiT model)"),KEr=l(),I4=a("li"),oFe=a("strong"),ZEr=o("bert"),e5r=o(" \u2014 "),oU=a("a"),o5r=o("FlaxBertModel"),r5r=o(" (BERT model)"),t5r=l(),q4=a("li"),rFe=a("strong"),a5r=o("big_bird"),n5r=o(" \u2014 "),rU=a("a"),s5r=o("FlaxBigBirdModel"),l5r=o(" (BigBird model)"),i5r=l(),N4=a("li"),tFe=a("strong"),d5r=o("blenderbot"),c5r=o(" \u2014 "),tU=a("a"),f5r=o("FlaxBlenderbotModel"),m5r=o(" (Blenderbot model)"),g5r=l(),j4=a("li"),aFe=a("strong"),h5r=o("blenderbot-small"),p5r=o(" \u2014 "),aU=a("a"),u5r=o("FlaxBlenderbotSmallModel"),_5r=o(" (BlenderbotSmall model)"),b5r=l(),D4=a("li"),nFe=a("strong"),v5r=o("clip"),F5r=o(" \u2014 "),nU=a("a"),T5r=o("FlaxCLIPModel"),M5r=o(" (CLIP model)"),E5r=l(),G4=a("li"),sFe=a("strong"),C5r=o("distilbert"),w5r=o(" \u2014 "),sU=a("a"),A5r=o("FlaxDistilBertModel"),y5r=o(" (DistilBERT model)"),L5r=l(),O4=a("li"),lFe=a("strong"),x5r=o("electra"),$5r=o(" \u2014 "),lU=a("a"),k5r=o("FlaxElectraModel"),S5r=o(" (ELECTRA model)"),R5r=l(),V4=a("li"),iFe=a("strong"),B5r=o("gpt2"),P5r=o(" \u2014 "),iU=a("a"),I5r=o("FlaxGPT2Model"),q5r=o(" (OpenAI GPT-2 model)"),N5r=l(),X4=a("li"),dFe=a("strong"),j5r=o("gpt_neo"),D5r=o(" \u2014 "),dU=a("a"),G5r=o("FlaxGPTNeoModel"),O5r=o(" (GPT Neo model)"),V5r=l(),z4=a("li"),cFe=a("strong"),X5r=o("gptj"),z5r=o(" \u2014 "),cU=a("a"),Q5r=o("FlaxGPTJModel"),W5r=o(" (GPT-J model)"),H5r=l(),Q4=a("li"),fFe=a("strong"),U5r=o("marian"),J5r=o(" \u2014 "),fU=a("a"),Y5r=o("FlaxMarianModel"),K5r=o(" (Marian model)"),Z5r=l(),W4=a("li"),mFe=a("strong"),eCr=o("mbart"),oCr=o(" \u2014 "),mU=a("a"),rCr=o("FlaxMBartModel"),tCr=o(" (mBART model)"),aCr=l(),H4=a("li"),gFe=a("strong"),nCr=o("mt5"),sCr=o(" \u2014 "),gU=a("a"),lCr=o("FlaxMT5Model"),iCr=o(" (mT5 model)"),dCr=l(),U4=a("li"),hFe=a("strong"),cCr=o("pegasus"),fCr=o(" \u2014 "),hU=a("a"),mCr=o("FlaxPegasusModel"),gCr=o(" (Pegasus model)"),hCr=l(),J4=a("li"),pFe=a("strong"),pCr=o("roberta"),uCr=o(" \u2014 "),pU=a("a"),_Cr=o("FlaxRobertaModel"),bCr=o(" (RoBERTa model)"),vCr=l(),Y4=a("li"),uFe=a("strong"),FCr=o("roformer"),TCr=o(" \u2014 "),uU=a("a"),MCr=o("FlaxRoFormerModel"),ECr=o(" (RoFormer model)"),CCr=l(),K4=a("li"),_Fe=a("strong"),wCr=o("t5"),ACr=o(" \u2014 "),_U=a("a"),yCr=o("FlaxT5Model"),LCr=o(" (T5 model)"),xCr=l(),Z4=a("li"),bFe=a("strong"),$Cr=o("vision-text-dual-encoder"),kCr=o(" \u2014 "),bU=a("a"),SCr=o("FlaxVisionTextDualEncoderModel"),RCr=o(" (VisionTextDualEncoder model)"),BCr=l(),eE=a("li"),vFe=a("strong"),PCr=o("vit"),ICr=o(" \u2014 "),vU=a("a"),qCr=o("FlaxViTModel"),NCr=o(" (ViT model)"),jCr=l(),oE=a("li"),FFe=a("strong"),DCr=o("wav2vec2"),GCr=o(" \u2014 "),FU=a("a"),OCr=o("FlaxWav2Vec2Model"),VCr=o(" (Wav2Vec2 model)"),XCr=l(),rE=a("li"),TFe=a("strong"),zCr=o("xglm"),QCr=o(" \u2014 "),TU=a("a"),WCr=o("FlaxXGLMModel"),HCr=o(" (XGLM model)"),UCr=l(),tE=a("li"),MFe=a("strong"),JCr=o("xlm-roberta"),YCr=o(" \u2014 "),MU=a("a"),KCr=o("FlaxXLMRobertaModel"),ZCr=o(" (XLM-RoBERTa model)"),e3r=l(),F(aE.$$.fragment),_Ie=l(),Fc=a("h2"),nE=a("a"),EFe=a("span"),F(y8.$$.fragment),o3r=l(),CFe=a("span"),r3r=o("FlaxAutoModelForCausalLM"),bIe=l(),fr=a("div"),F(L8.$$.fragment),t3r=l(),Tc=a("p"),a3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EU=a("a"),n3r=o("from_pretrained()"),s3r=o(" class method or the "),CU=a("a"),l3r=o("from_config()"),i3r=o(` class
method.`),d3r=l(),x8=a("p"),c3r=o("This class cannot be instantiated directly using "),wFe=a("code"),f3r=o("__init__()"),m3r=o(" (throws an error)."),g3r=l(),qt=a("div"),F($8.$$.fragment),h3r=l(),AFe=a("p"),p3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),u3r=l(),Mc=a("p"),_3r=o(`Note:
Loading a model from its configuration file does `),yFe=a("strong"),b3r=o("not"),v3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),F3r=o("from_pretrained()"),T3r=o(" to load the model weights."),M3r=l(),F(sE.$$.fragment),E3r=l(),Nr=a("div"),F(k8.$$.fragment),C3r=l(),LFe=a("p"),w3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),A3r=l(),cn=a("p"),y3r=o("The model class to instantiate is selected based on the "),xFe=a("code"),L3r=o("model_type"),x3r=o(` property of the config object (either
passed as an argument or loaded from `),$Fe=a("code"),$3r=o("pretrained_model_name_or_path"),k3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=a("code"),S3r=o("pretrained_model_name_or_path"),R3r=o(":"),B3r=l(),ke=a("ul"),lE=a("li"),SFe=a("strong"),P3r=o("bart"),I3r=o(" \u2014 "),AU=a("a"),q3r=o("FlaxBartForCausalLM"),N3r=o(" (BART model)"),j3r=l(),iE=a("li"),RFe=a("strong"),D3r=o("bert"),G3r=o(" \u2014 "),yU=a("a"),O3r=o("FlaxBertForCausalLM"),V3r=o(" (BERT model)"),X3r=l(),dE=a("li"),BFe=a("strong"),z3r=o("big_bird"),Q3r=o(" \u2014 "),LU=a("a"),W3r=o("FlaxBigBirdForCausalLM"),H3r=o(" (BigBird model)"),U3r=l(),cE=a("li"),PFe=a("strong"),J3r=o("electra"),Y3r=o(" \u2014 "),xU=a("a"),K3r=o("FlaxElectraForCausalLM"),Z3r=o(" (ELECTRA model)"),ewr=l(),fE=a("li"),IFe=a("strong"),owr=o("gpt2"),rwr=o(" \u2014 "),$U=a("a"),twr=o("FlaxGPT2LMHeadModel"),awr=o(" (OpenAI GPT-2 model)"),nwr=l(),mE=a("li"),qFe=a("strong"),swr=o("gpt_neo"),lwr=o(" \u2014 "),kU=a("a"),iwr=o("FlaxGPTNeoForCausalLM"),dwr=o(" (GPT Neo model)"),cwr=l(),gE=a("li"),NFe=a("strong"),fwr=o("gptj"),mwr=o(" \u2014 "),SU=a("a"),gwr=o("FlaxGPTJForCausalLM"),hwr=o(" (GPT-J model)"),pwr=l(),hE=a("li"),jFe=a("strong"),uwr=o("roberta"),_wr=o(" \u2014 "),RU=a("a"),bwr=o("FlaxRobertaForCausalLM"),vwr=o(" (RoBERTa model)"),Fwr=l(),pE=a("li"),DFe=a("strong"),Twr=o("xglm"),Mwr=o(" \u2014 "),BU=a("a"),Ewr=o("FlaxXGLMForCausalLM"),Cwr=o(" (XGLM model)"),wwr=l(),F(uE.$$.fragment),vIe=l(),Ec=a("h2"),_E=a("a"),GFe=a("span"),F(S8.$$.fragment),Awr=l(),OFe=a("span"),ywr=o("FlaxAutoModelForPreTraining"),FIe=l(),mr=a("div"),F(R8.$$.fragment),Lwr=l(),Cc=a("p"),xwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PU=a("a"),$wr=o("from_pretrained()"),kwr=o(" class method or the "),IU=a("a"),Swr=o("from_config()"),Rwr=o(` class
method.`),Bwr=l(),B8=a("p"),Pwr=o("This class cannot be instantiated directly using "),VFe=a("code"),Iwr=o("__init__()"),qwr=o(" (throws an error)."),Nwr=l(),Nt=a("div"),F(P8.$$.fragment),jwr=l(),XFe=a("p"),Dwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gwr=l(),wc=a("p"),Owr=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),Vwr=o("not"),Xwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),zwr=o("from_pretrained()"),Qwr=o(" to load the model weights."),Wwr=l(),F(bE.$$.fragment),Hwr=l(),jr=a("div"),F(I8.$$.fragment),Uwr=l(),QFe=a("p"),Jwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ywr=l(),fn=a("p"),Kwr=o("The model class to instantiate is selected based on the "),WFe=a("code"),Zwr=o("model_type"),eAr=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),oAr=o("pretrained_model_name_or_path"),rAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),tAr=o("pretrained_model_name_or_path"),aAr=o(":"),nAr=l(),Me=a("ul"),vE=a("li"),JFe=a("strong"),sAr=o("albert"),lAr=o(" \u2014 "),NU=a("a"),iAr=o("FlaxAlbertForPreTraining"),dAr=o(" (ALBERT model)"),cAr=l(),FE=a("li"),YFe=a("strong"),fAr=o("bart"),mAr=o(" \u2014 "),jU=a("a"),gAr=o("FlaxBartForConditionalGeneration"),hAr=o(" (BART model)"),pAr=l(),TE=a("li"),KFe=a("strong"),uAr=o("bert"),_Ar=o(" \u2014 "),DU=a("a"),bAr=o("FlaxBertForPreTraining"),vAr=o(" (BERT model)"),FAr=l(),ME=a("li"),ZFe=a("strong"),TAr=o("big_bird"),MAr=o(" \u2014 "),GU=a("a"),EAr=o("FlaxBigBirdForPreTraining"),CAr=o(" (BigBird model)"),wAr=l(),EE=a("li"),e6e=a("strong"),AAr=o("electra"),yAr=o(" \u2014 "),OU=a("a"),LAr=o("FlaxElectraForPreTraining"),xAr=o(" (ELECTRA model)"),$Ar=l(),CE=a("li"),o6e=a("strong"),kAr=o("mbart"),SAr=o(" \u2014 "),VU=a("a"),RAr=o("FlaxMBartForConditionalGeneration"),BAr=o(" (mBART model)"),PAr=l(),wE=a("li"),r6e=a("strong"),IAr=o("mt5"),qAr=o(" \u2014 "),XU=a("a"),NAr=o("FlaxMT5ForConditionalGeneration"),jAr=o(" (mT5 model)"),DAr=l(),AE=a("li"),t6e=a("strong"),GAr=o("roberta"),OAr=o(" \u2014 "),zU=a("a"),VAr=o("FlaxRobertaForMaskedLM"),XAr=o(" (RoBERTa model)"),zAr=l(),yE=a("li"),a6e=a("strong"),QAr=o("roformer"),WAr=o(" \u2014 "),QU=a("a"),HAr=o("FlaxRoFormerForMaskedLM"),UAr=o(" (RoFormer model)"),JAr=l(),LE=a("li"),n6e=a("strong"),YAr=o("t5"),KAr=o(" \u2014 "),WU=a("a"),ZAr=o("FlaxT5ForConditionalGeneration"),eyr=o(" (T5 model)"),oyr=l(),xE=a("li"),s6e=a("strong"),ryr=o("wav2vec2"),tyr=o(" \u2014 "),HU=a("a"),ayr=o("FlaxWav2Vec2ForPreTraining"),nyr=o(" (Wav2Vec2 model)"),syr=l(),$E=a("li"),l6e=a("strong"),lyr=o("xlm-roberta"),iyr=o(" \u2014 "),UU=a("a"),dyr=o("FlaxXLMRobertaForMaskedLM"),cyr=o(" (XLM-RoBERTa model)"),fyr=l(),F(kE.$$.fragment),TIe=l(),Ac=a("h2"),SE=a("a"),i6e=a("span"),F(q8.$$.fragment),myr=l(),d6e=a("span"),gyr=o("FlaxAutoModelForMaskedLM"),MIe=l(),gr=a("div"),F(N8.$$.fragment),hyr=l(),yc=a("p"),pyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JU=a("a"),uyr=o("from_pretrained()"),_yr=o(" class method or the "),YU=a("a"),byr=o("from_config()"),vyr=o(` class
method.`),Fyr=l(),j8=a("p"),Tyr=o("This class cannot be instantiated directly using "),c6e=a("code"),Myr=o("__init__()"),Eyr=o(" (throws an error)."),Cyr=l(),jt=a("div"),F(D8.$$.fragment),wyr=l(),f6e=a("p"),Ayr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yyr=l(),Lc=a("p"),Lyr=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),xyr=o("not"),$yr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),kyr=o("from_pretrained()"),Syr=o(" to load the model weights."),Ryr=l(),F(RE.$$.fragment),Byr=l(),Dr=a("div"),F(G8.$$.fragment),Pyr=l(),g6e=a("p"),Iyr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qyr=l(),mn=a("p"),Nyr=o("The model class to instantiate is selected based on the "),h6e=a("code"),jyr=o("model_type"),Dyr=o(` property of the config object (either
passed as an argument or loaded from `),p6e=a("code"),Gyr=o("pretrained_model_name_or_path"),Oyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=a("code"),Vyr=o("pretrained_model_name_or_path"),Xyr=o(":"),zyr=l(),Le=a("ul"),BE=a("li"),_6e=a("strong"),Qyr=o("albert"),Wyr=o(" \u2014 "),ZU=a("a"),Hyr=o("FlaxAlbertForMaskedLM"),Uyr=o(" (ALBERT model)"),Jyr=l(),PE=a("li"),b6e=a("strong"),Yyr=o("bart"),Kyr=o(" \u2014 "),eJ=a("a"),Zyr=o("FlaxBartForConditionalGeneration"),eLr=o(" (BART model)"),oLr=l(),IE=a("li"),v6e=a("strong"),rLr=o("bert"),tLr=o(" \u2014 "),oJ=a("a"),aLr=o("FlaxBertForMaskedLM"),nLr=o(" (BERT model)"),sLr=l(),qE=a("li"),F6e=a("strong"),lLr=o("big_bird"),iLr=o(" \u2014 "),rJ=a("a"),dLr=o("FlaxBigBirdForMaskedLM"),cLr=o(" (BigBird model)"),fLr=l(),NE=a("li"),T6e=a("strong"),mLr=o("distilbert"),gLr=o(" \u2014 "),tJ=a("a"),hLr=o("FlaxDistilBertForMaskedLM"),pLr=o(" (DistilBERT model)"),uLr=l(),jE=a("li"),M6e=a("strong"),_Lr=o("electra"),bLr=o(" \u2014 "),aJ=a("a"),vLr=o("FlaxElectraForMaskedLM"),FLr=o(" (ELECTRA model)"),TLr=l(),DE=a("li"),E6e=a("strong"),MLr=o("mbart"),ELr=o(" \u2014 "),nJ=a("a"),CLr=o("FlaxMBartForConditionalGeneration"),wLr=o(" (mBART model)"),ALr=l(),GE=a("li"),C6e=a("strong"),yLr=o("roberta"),LLr=o(" \u2014 "),sJ=a("a"),xLr=o("FlaxRobertaForMaskedLM"),$Lr=o(" (RoBERTa model)"),kLr=l(),OE=a("li"),w6e=a("strong"),SLr=o("roformer"),RLr=o(" \u2014 "),lJ=a("a"),BLr=o("FlaxRoFormerForMaskedLM"),PLr=o(" (RoFormer model)"),ILr=l(),VE=a("li"),A6e=a("strong"),qLr=o("xlm-roberta"),NLr=o(" \u2014 "),iJ=a("a"),jLr=o("FlaxXLMRobertaForMaskedLM"),DLr=o(" (XLM-RoBERTa model)"),GLr=l(),F(XE.$$.fragment),EIe=l(),xc=a("h2"),zE=a("a"),y6e=a("span"),F(O8.$$.fragment),OLr=l(),L6e=a("span"),VLr=o("FlaxAutoModelForSeq2SeqLM"),CIe=l(),hr=a("div"),F(V8.$$.fragment),XLr=l(),$c=a("p"),zLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dJ=a("a"),QLr=o("from_pretrained()"),WLr=o(" class method or the "),cJ=a("a"),HLr=o("from_config()"),ULr=o(` class
method.`),JLr=l(),X8=a("p"),YLr=o("This class cannot be instantiated directly using "),x6e=a("code"),KLr=o("__init__()"),ZLr=o(" (throws an error)."),e8r=l(),Dt=a("div"),F(z8.$$.fragment),o8r=l(),$6e=a("p"),r8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),t8r=l(),kc=a("p"),a8r=o(`Note:
Loading a model from its configuration file does `),k6e=a("strong"),n8r=o("not"),s8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),l8r=o("from_pretrained()"),i8r=o(" to load the model weights."),d8r=l(),F(QE.$$.fragment),c8r=l(),Gr=a("div"),F(Q8.$$.fragment),f8r=l(),S6e=a("p"),m8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),g8r=l(),gn=a("p"),h8r=o("The model class to instantiate is selected based on the "),R6e=a("code"),p8r=o("model_type"),u8r=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),_8r=o("pretrained_model_name_or_path"),b8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),v8r=o("pretrained_model_name_or_path"),F8r=o(":"),T8r=l(),Se=a("ul"),WE=a("li"),I6e=a("strong"),M8r=o("bart"),E8r=o(" \u2014 "),mJ=a("a"),C8r=o("FlaxBartForConditionalGeneration"),w8r=o(" (BART model)"),A8r=l(),HE=a("li"),q6e=a("strong"),y8r=o("blenderbot"),L8r=o(" \u2014 "),gJ=a("a"),x8r=o("FlaxBlenderbotForConditionalGeneration"),$8r=o(" (Blenderbot model)"),k8r=l(),UE=a("li"),N6e=a("strong"),S8r=o("blenderbot-small"),R8r=o(" \u2014 "),hJ=a("a"),B8r=o("FlaxBlenderbotSmallForConditionalGeneration"),P8r=o(" (BlenderbotSmall model)"),I8r=l(),JE=a("li"),j6e=a("strong"),q8r=o("encoder-decoder"),N8r=o(" \u2014 "),pJ=a("a"),j8r=o("FlaxEncoderDecoderModel"),D8r=o(" (Encoder decoder model)"),G8r=l(),YE=a("li"),D6e=a("strong"),O8r=o("marian"),V8r=o(" \u2014 "),uJ=a("a"),X8r=o("FlaxMarianMTModel"),z8r=o(" (Marian model)"),Q8r=l(),KE=a("li"),G6e=a("strong"),W8r=o("mbart"),H8r=o(" \u2014 "),_J=a("a"),U8r=o("FlaxMBartForConditionalGeneration"),J8r=o(" (mBART model)"),Y8r=l(),ZE=a("li"),O6e=a("strong"),K8r=o("mt5"),Z8r=o(" \u2014 "),bJ=a("a"),exr=o("FlaxMT5ForConditionalGeneration"),oxr=o(" (mT5 model)"),rxr=l(),e5=a("li"),V6e=a("strong"),txr=o("pegasus"),axr=o(" \u2014 "),vJ=a("a"),nxr=o("FlaxPegasusForConditionalGeneration"),sxr=o(" (Pegasus model)"),lxr=l(),o5=a("li"),X6e=a("strong"),ixr=o("t5"),dxr=o(" \u2014 "),FJ=a("a"),cxr=o("FlaxT5ForConditionalGeneration"),fxr=o(" (T5 model)"),mxr=l(),F(r5.$$.fragment),wIe=l(),Sc=a("h2"),t5=a("a"),z6e=a("span"),F(W8.$$.fragment),gxr=l(),Q6e=a("span"),hxr=o("FlaxAutoModelForSequenceClassification"),AIe=l(),pr=a("div"),F(H8.$$.fragment),pxr=l(),Rc=a("p"),uxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TJ=a("a"),_xr=o("from_pretrained()"),bxr=o(" class method or the "),MJ=a("a"),vxr=o("from_config()"),Fxr=o(` class
method.`),Txr=l(),U8=a("p"),Mxr=o("This class cannot be instantiated directly using "),W6e=a("code"),Exr=o("__init__()"),Cxr=o(" (throws an error)."),wxr=l(),Gt=a("div"),F(J8.$$.fragment),Axr=l(),H6e=a("p"),yxr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lxr=l(),Bc=a("p"),xxr=o(`Note:
Loading a model from its configuration file does `),U6e=a("strong"),$xr=o("not"),kxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),Sxr=o("from_pretrained()"),Rxr=o(" to load the model weights."),Bxr=l(),F(a5.$$.fragment),Pxr=l(),Or=a("div"),F(Y8.$$.fragment),Ixr=l(),J6e=a("p"),qxr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Nxr=l(),hn=a("p"),jxr=o("The model class to instantiate is selected based on the "),Y6e=a("code"),Dxr=o("model_type"),Gxr=o(` property of the config object (either
passed as an argument or loaded from `),K6e=a("code"),Oxr=o("pretrained_model_name_or_path"),Vxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=a("code"),Xxr=o("pretrained_model_name_or_path"),zxr=o(":"),Qxr=l(),xe=a("ul"),n5=a("li"),eTe=a("strong"),Wxr=o("albert"),Hxr=o(" \u2014 "),CJ=a("a"),Uxr=o("FlaxAlbertForSequenceClassification"),Jxr=o(" (ALBERT model)"),Yxr=l(),s5=a("li"),oTe=a("strong"),Kxr=o("bart"),Zxr=o(" \u2014 "),wJ=a("a"),e9r=o("FlaxBartForSequenceClassification"),o9r=o(" (BART model)"),r9r=l(),l5=a("li"),rTe=a("strong"),t9r=o("bert"),a9r=o(" \u2014 "),AJ=a("a"),n9r=o("FlaxBertForSequenceClassification"),s9r=o(" (BERT model)"),l9r=l(),i5=a("li"),tTe=a("strong"),i9r=o("big_bird"),d9r=o(" \u2014 "),yJ=a("a"),c9r=o("FlaxBigBirdForSequenceClassification"),f9r=o(" (BigBird model)"),m9r=l(),d5=a("li"),aTe=a("strong"),g9r=o("distilbert"),h9r=o(" \u2014 "),LJ=a("a"),p9r=o("FlaxDistilBertForSequenceClassification"),u9r=o(" (DistilBERT model)"),_9r=l(),c5=a("li"),nTe=a("strong"),b9r=o("electra"),v9r=o(" \u2014 "),xJ=a("a"),F9r=o("FlaxElectraForSequenceClassification"),T9r=o(" (ELECTRA model)"),M9r=l(),f5=a("li"),sTe=a("strong"),E9r=o("mbart"),C9r=o(" \u2014 "),$J=a("a"),w9r=o("FlaxMBartForSequenceClassification"),A9r=o(" (mBART model)"),y9r=l(),m5=a("li"),lTe=a("strong"),L9r=o("roberta"),x9r=o(" \u2014 "),kJ=a("a"),$9r=o("FlaxRobertaForSequenceClassification"),k9r=o(" (RoBERTa model)"),S9r=l(),g5=a("li"),iTe=a("strong"),R9r=o("roformer"),B9r=o(" \u2014 "),SJ=a("a"),P9r=o("FlaxRoFormerForSequenceClassification"),I9r=o(" (RoFormer model)"),q9r=l(),h5=a("li"),dTe=a("strong"),N9r=o("xlm-roberta"),j9r=o(" \u2014 "),RJ=a("a"),D9r=o("FlaxXLMRobertaForSequenceClassification"),G9r=o(" (XLM-RoBERTa model)"),O9r=l(),F(p5.$$.fragment),yIe=l(),Pc=a("h2"),u5=a("a"),cTe=a("span"),F(K8.$$.fragment),V9r=l(),fTe=a("span"),X9r=o("FlaxAutoModelForQuestionAnswering"),LIe=l(),ur=a("div"),F(Z8.$$.fragment),z9r=l(),Ic=a("p"),Q9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BJ=a("a"),W9r=o("from_pretrained()"),H9r=o(" class method or the "),PJ=a("a"),U9r=o("from_config()"),J9r=o(` class
method.`),Y9r=l(),ex=a("p"),K9r=o("This class cannot be instantiated directly using "),mTe=a("code"),Z9r=o("__init__()"),e$r=o(" (throws an error)."),o$r=l(),Ot=a("div"),F(ox.$$.fragment),r$r=l(),gTe=a("p"),t$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a$r=l(),qc=a("p"),n$r=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),s$r=o("not"),l$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=a("a"),i$r=o("from_pretrained()"),d$r=o(" to load the model weights."),c$r=l(),F(_5.$$.fragment),f$r=l(),Vr=a("div"),F(rx.$$.fragment),m$r=l(),pTe=a("p"),g$r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h$r=l(),pn=a("p"),p$r=o("The model class to instantiate is selected based on the "),uTe=a("code"),u$r=o("model_type"),_$r=o(` property of the config object (either
passed as an argument or loaded from `),_Te=a("code"),b$r=o("pretrained_model_name_or_path"),v$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),F$r=o("pretrained_model_name_or_path"),T$r=o(":"),M$r=l(),$e=a("ul"),b5=a("li"),vTe=a("strong"),E$r=o("albert"),C$r=o(" \u2014 "),qJ=a("a"),w$r=o("FlaxAlbertForQuestionAnswering"),A$r=o(" (ALBERT model)"),y$r=l(),v5=a("li"),FTe=a("strong"),L$r=o("bart"),x$r=o(" \u2014 "),NJ=a("a"),$$r=o("FlaxBartForQuestionAnswering"),k$r=o(" (BART model)"),S$r=l(),F5=a("li"),TTe=a("strong"),R$r=o("bert"),B$r=o(" \u2014 "),jJ=a("a"),P$r=o("FlaxBertForQuestionAnswering"),I$r=o(" (BERT model)"),q$r=l(),T5=a("li"),MTe=a("strong"),N$r=o("big_bird"),j$r=o(" \u2014 "),DJ=a("a"),D$r=o("FlaxBigBirdForQuestionAnswering"),G$r=o(" (BigBird model)"),O$r=l(),M5=a("li"),ETe=a("strong"),V$r=o("distilbert"),X$r=o(" \u2014 "),GJ=a("a"),z$r=o("FlaxDistilBertForQuestionAnswering"),Q$r=o(" (DistilBERT model)"),W$r=l(),E5=a("li"),CTe=a("strong"),H$r=o("electra"),U$r=o(" \u2014 "),OJ=a("a"),J$r=o("FlaxElectraForQuestionAnswering"),Y$r=o(" (ELECTRA model)"),K$r=l(),C5=a("li"),wTe=a("strong"),Z$r=o("mbart"),ekr=o(" \u2014 "),VJ=a("a"),okr=o("FlaxMBartForQuestionAnswering"),rkr=o(" (mBART model)"),tkr=l(),w5=a("li"),ATe=a("strong"),akr=o("roberta"),nkr=o(" \u2014 "),XJ=a("a"),skr=o("FlaxRobertaForQuestionAnswering"),lkr=o(" (RoBERTa model)"),ikr=l(),A5=a("li"),yTe=a("strong"),dkr=o("roformer"),ckr=o(" \u2014 "),zJ=a("a"),fkr=o("FlaxRoFormerForQuestionAnswering"),mkr=o(" (RoFormer model)"),gkr=l(),y5=a("li"),LTe=a("strong"),hkr=o("xlm-roberta"),pkr=o(" \u2014 "),QJ=a("a"),ukr=o("FlaxXLMRobertaForQuestionAnswering"),_kr=o(" (XLM-RoBERTa model)"),bkr=l(),F(L5.$$.fragment),xIe=l(),Nc=a("h2"),x5=a("a"),xTe=a("span"),F(tx.$$.fragment),vkr=l(),$Te=a("span"),Fkr=o("FlaxAutoModelForTokenClassification"),$Ie=l(),_r=a("div"),F(ax.$$.fragment),Tkr=l(),jc=a("p"),Mkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WJ=a("a"),Ekr=o("from_pretrained()"),Ckr=o(" class method or the "),HJ=a("a"),wkr=o("from_config()"),Akr=o(` class
method.`),ykr=l(),nx=a("p"),Lkr=o("This class cannot be instantiated directly using "),kTe=a("code"),xkr=o("__init__()"),$kr=o(" (throws an error)."),kkr=l(),Vt=a("div"),F(sx.$$.fragment),Skr=l(),STe=a("p"),Rkr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Bkr=l(),Dc=a("p"),Pkr=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),Ikr=o("not"),qkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),Nkr=o("from_pretrained()"),jkr=o(" to load the model weights."),Dkr=l(),F($5.$$.fragment),Gkr=l(),Xr=a("div"),F(lx.$$.fragment),Okr=l(),BTe=a("p"),Vkr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Xkr=l(),un=a("p"),zkr=o("The model class to instantiate is selected based on the "),PTe=a("code"),Qkr=o("model_type"),Wkr=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),Hkr=o("pretrained_model_name_or_path"),Ukr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=a("code"),Jkr=o("pretrained_model_name_or_path"),Ykr=o(":"),Kkr=l(),De=a("ul"),k5=a("li"),NTe=a("strong"),Zkr=o("albert"),eSr=o(" \u2014 "),JJ=a("a"),oSr=o("FlaxAlbertForTokenClassification"),rSr=o(" (ALBERT model)"),tSr=l(),S5=a("li"),jTe=a("strong"),aSr=o("bert"),nSr=o(" \u2014 "),YJ=a("a"),sSr=o("FlaxBertForTokenClassification"),lSr=o(" (BERT model)"),iSr=l(),R5=a("li"),DTe=a("strong"),dSr=o("big_bird"),cSr=o(" \u2014 "),KJ=a("a"),fSr=o("FlaxBigBirdForTokenClassification"),mSr=o(" (BigBird model)"),gSr=l(),B5=a("li"),GTe=a("strong"),hSr=o("distilbert"),pSr=o(" \u2014 "),ZJ=a("a"),uSr=o("FlaxDistilBertForTokenClassification"),_Sr=o(" (DistilBERT model)"),bSr=l(),P5=a("li"),OTe=a("strong"),vSr=o("electra"),FSr=o(" \u2014 "),eY=a("a"),TSr=o("FlaxElectraForTokenClassification"),MSr=o(" (ELECTRA model)"),ESr=l(),I5=a("li"),VTe=a("strong"),CSr=o("roberta"),wSr=o(" \u2014 "),oY=a("a"),ASr=o("FlaxRobertaForTokenClassification"),ySr=o(" (RoBERTa model)"),LSr=l(),q5=a("li"),XTe=a("strong"),xSr=o("roformer"),$Sr=o(" \u2014 "),rY=a("a"),kSr=o("FlaxRoFormerForTokenClassification"),SSr=o(" (RoFormer model)"),RSr=l(),N5=a("li"),zTe=a("strong"),BSr=o("xlm-roberta"),PSr=o(" \u2014 "),tY=a("a"),ISr=o("FlaxXLMRobertaForTokenClassification"),qSr=o(" (XLM-RoBERTa model)"),NSr=l(),F(j5.$$.fragment),kIe=l(),Gc=a("h2"),D5=a("a"),QTe=a("span"),F(ix.$$.fragment),jSr=l(),WTe=a("span"),DSr=o("FlaxAutoModelForMultipleChoice"),SIe=l(),br=a("div"),F(dx.$$.fragment),GSr=l(),Oc=a("p"),OSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aY=a("a"),VSr=o("from_pretrained()"),XSr=o(" class method or the "),nY=a("a"),zSr=o("from_config()"),QSr=o(` class
method.`),WSr=l(),cx=a("p"),HSr=o("This class cannot be instantiated directly using "),HTe=a("code"),USr=o("__init__()"),JSr=o(" (throws an error)."),YSr=l(),Xt=a("div"),F(fx.$$.fragment),KSr=l(),UTe=a("p"),ZSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eRr=l(),Vc=a("p"),oRr=o(`Note:
Loading a model from its configuration file does `),JTe=a("strong"),rRr=o("not"),tRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),aRr=o("from_pretrained()"),nRr=o(" to load the model weights."),sRr=l(),F(G5.$$.fragment),lRr=l(),zr=a("div"),F(mx.$$.fragment),iRr=l(),YTe=a("p"),dRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cRr=l(),_n=a("p"),fRr=o("The model class to instantiate is selected based on the "),KTe=a("code"),mRr=o("model_type"),gRr=o(` property of the config object (either
passed as an argument or loaded from `),ZTe=a("code"),hRr=o("pretrained_model_name_or_path"),pRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=a("code"),uRr=o("pretrained_model_name_or_path"),_Rr=o(":"),bRr=l(),Ge=a("ul"),O5=a("li"),o7e=a("strong"),vRr=o("albert"),FRr=o(" \u2014 "),lY=a("a"),TRr=o("FlaxAlbertForMultipleChoice"),MRr=o(" (ALBERT model)"),ERr=l(),V5=a("li"),r7e=a("strong"),CRr=o("bert"),wRr=o(" \u2014 "),iY=a("a"),ARr=o("FlaxBertForMultipleChoice"),yRr=o(" (BERT model)"),LRr=l(),X5=a("li"),t7e=a("strong"),xRr=o("big_bird"),$Rr=o(" \u2014 "),dY=a("a"),kRr=o("FlaxBigBirdForMultipleChoice"),SRr=o(" (BigBird model)"),RRr=l(),z5=a("li"),a7e=a("strong"),BRr=o("distilbert"),PRr=o(" \u2014 "),cY=a("a"),IRr=o("FlaxDistilBertForMultipleChoice"),qRr=o(" (DistilBERT model)"),NRr=l(),Q5=a("li"),n7e=a("strong"),jRr=o("electra"),DRr=o(" \u2014 "),fY=a("a"),GRr=o("FlaxElectraForMultipleChoice"),ORr=o(" (ELECTRA model)"),VRr=l(),W5=a("li"),s7e=a("strong"),XRr=o("roberta"),zRr=o(" \u2014 "),mY=a("a"),QRr=o("FlaxRobertaForMultipleChoice"),WRr=o(" (RoBERTa model)"),HRr=l(),H5=a("li"),l7e=a("strong"),URr=o("roformer"),JRr=o(" \u2014 "),gY=a("a"),YRr=o("FlaxRoFormerForMultipleChoice"),KRr=o(" (RoFormer model)"),ZRr=l(),U5=a("li"),i7e=a("strong"),eBr=o("xlm-roberta"),oBr=o(" \u2014 "),hY=a("a"),rBr=o("FlaxXLMRobertaForMultipleChoice"),tBr=o(" (XLM-RoBERTa model)"),aBr=l(),F(J5.$$.fragment),RIe=l(),Xc=a("h2"),Y5=a("a"),d7e=a("span"),F(gx.$$.fragment),nBr=l(),c7e=a("span"),sBr=o("FlaxAutoModelForNextSentencePrediction"),BIe=l(),vr=a("div"),F(hx.$$.fragment),lBr=l(),zc=a("p"),iBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pY=a("a"),dBr=o("from_pretrained()"),cBr=o(" class method or the "),uY=a("a"),fBr=o("from_config()"),mBr=o(` class
method.`),gBr=l(),px=a("p"),hBr=o("This class cannot be instantiated directly using "),f7e=a("code"),pBr=o("__init__()"),uBr=o(" (throws an error)."),_Br=l(),zt=a("div"),F(ux.$$.fragment),bBr=l(),m7e=a("p"),vBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FBr=l(),Qc=a("p"),TBr=o(`Note:
Loading a model from its configuration file does `),g7e=a("strong"),MBr=o("not"),EBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=a("a"),CBr=o("from_pretrained()"),wBr=o(" to load the model weights."),ABr=l(),F(K5.$$.fragment),yBr=l(),Qr=a("div"),F(_x.$$.fragment),LBr=l(),h7e=a("p"),xBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$Br=l(),bn=a("p"),kBr=o("The model class to instantiate is selected based on the "),p7e=a("code"),SBr=o("model_type"),RBr=o(` property of the config object (either
passed as an argument or loaded from `),u7e=a("code"),BBr=o("pretrained_model_name_or_path"),PBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_7e=a("code"),IBr=o("pretrained_model_name_or_path"),qBr=o(":"),NBr=l(),b7e=a("ul"),Z5=a("li"),v7e=a("strong"),jBr=o("bert"),DBr=o(" \u2014 "),bY=a("a"),GBr=o("FlaxBertForNextSentencePrediction"),OBr=o(" (BERT model)"),VBr=l(),F(eC.$$.fragment),PIe=l(),Wc=a("h2"),oC=a("a"),F7e=a("span"),F(bx.$$.fragment),XBr=l(),T7e=a("span"),zBr=o("FlaxAutoModelForImageClassification"),IIe=l(),Fr=a("div"),F(vx.$$.fragment),QBr=l(),Hc=a("p"),WBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vY=a("a"),HBr=o("from_pretrained()"),UBr=o(" class method or the "),FY=a("a"),JBr=o("from_config()"),YBr=o(` class
method.`),KBr=l(),Fx=a("p"),ZBr=o("This class cannot be instantiated directly using "),M7e=a("code"),ePr=o("__init__()"),oPr=o(" (throws an error)."),rPr=l(),Qt=a("div"),F(Tx.$$.fragment),tPr=l(),E7e=a("p"),aPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nPr=l(),Uc=a("p"),sPr=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),lPr=o("not"),iPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),dPr=o("from_pretrained()"),cPr=o(" to load the model weights."),fPr=l(),F(rC.$$.fragment),mPr=l(),Wr=a("div"),F(Mx.$$.fragment),gPr=l(),w7e=a("p"),hPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pPr=l(),vn=a("p"),uPr=o("The model class to instantiate is selected based on the "),A7e=a("code"),_Pr=o("model_type"),bPr=o(` property of the config object (either
passed as an argument or loaded from `),y7e=a("code"),vPr=o("pretrained_model_name_or_path"),FPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=a("code"),TPr=o("pretrained_model_name_or_path"),MPr=o(":"),EPr=l(),Ex=a("ul"),tC=a("li"),x7e=a("strong"),CPr=o("beit"),wPr=o(" \u2014 "),MY=a("a"),APr=o("FlaxBeitForImageClassification"),yPr=o(" (BEiT model)"),LPr=l(),aC=a("li"),$7e=a("strong"),xPr=o("vit"),$Pr=o(" \u2014 "),EY=a("a"),kPr=o("FlaxViTForImageClassification"),SPr=o(" (ViT model)"),RPr=l(),F(nC.$$.fragment),qIe=l(),Jc=a("h2"),sC=a("a"),k7e=a("span"),F(Cx.$$.fragment),BPr=l(),S7e=a("span"),PPr=o("FlaxAutoModelForVision2Seq"),NIe=l(),Tr=a("div"),F(wx.$$.fragment),IPr=l(),Yc=a("p"),qPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CY=a("a"),NPr=o("from_pretrained()"),jPr=o(" class method or the "),wY=a("a"),DPr=o("from_config()"),GPr=o(` class
method.`),OPr=l(),Ax=a("p"),VPr=o("This class cannot be instantiated directly using "),R7e=a("code"),XPr=o("__init__()"),zPr=o(" (throws an error)."),QPr=l(),Wt=a("div"),F(yx.$$.fragment),WPr=l(),B7e=a("p"),HPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UPr=l(),Kc=a("p"),JPr=o(`Note:
Loading a model from its configuration file does `),P7e=a("strong"),YPr=o("not"),KPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=a("a"),ZPr=o("from_pretrained()"),eIr=o(" to load the model weights."),oIr=l(),F(lC.$$.fragment),rIr=l(),Hr=a("div"),F(Lx.$$.fragment),tIr=l(),I7e=a("p"),aIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nIr=l(),Fn=a("p"),sIr=o("The model class to instantiate is selected based on the "),q7e=a("code"),lIr=o("model_type"),iIr=o(` property of the config object (either
passed as an argument or loaded from `),N7e=a("code"),dIr=o("pretrained_model_name_or_path"),cIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),fIr=o("pretrained_model_name_or_path"),mIr=o(":"),gIr=l(),D7e=a("ul"),iC=a("li"),G7e=a("strong"),hIr=o("vision-encoder-decoder"),pIr=o(" \u2014 "),yY=a("a"),uIr=o("FlaxVisionEncoderDecoderModel"),_Ir=o(" (Vision Encoder decoder model)"),bIr=l(),F(dC.$$.fragment),this.h()},l(f){const _=CCt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var xx=s(p);m=n(xx,"A",{id:!0,class:!0,href:!0});var O7e=s(m);u=n(O7e,"SPAN",{});var V7e=s(u);T(d.$$.fragment,V7e),V7e.forEach(t),O7e.forEach(t),h=i(xx),Mo=n(xx,"SPAN",{});var X7e=s(Mo);ri=r(X7e,"Auto Classes"),X7e.forEach(t),xx.forEach(t),rf=i(f),Kr=n(f,"P",{});var $x=s(Kr);ti=r($x,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=n($x,"CODE",{});var z7e=s(ai);ww=r(z7e,"from_pretrained()"),z7e.forEach(t),tf=r($x,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),$x.forEach(t),qe=i(f),Xe=n(f,"P",{});var Tn=s(Xe);ni=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var Q7e=s(Mn);Aw=r(Q7e,"AutoConfig"),Q7e.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var W7e=s(Cn);yw=r(W7e,"AutoModel"),W7e.forEach(t),si=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var H7e=s(wn);Lw=r(H7e,"AutoTokenizer"),H7e.forEach(t),li=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),af=i(f),T(va.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var kx=s(Ae);O9=r(kx,"will create a model that is an instance of "),ii=n(kx,"A",{href:!0});var U7e=s(ii);V9=r(U7e,"BertModel"),U7e.forEach(t),X9=r(kx,"."),kx.forEach(t),Eo=i(f),Fa=n(f,"P",{});var Sx=s(Fa);z9=r(Sx,"There is one class of "),nf=n(Sx,"CODE",{});var J7e=s(nf);Q9=r(J7e,"AutoModel"),J7e.forEach(t),zNe=r(Sx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Sx.forEach(t),NBe=i(f),di=n(f,"H2",{class:!0});var Rx=s(di);sf=n(Rx,"A",{id:!0,class:!0,href:!0});var Y7e=s(sf);bZ=n(Y7e,"SPAN",{});var K7e=s(bZ);T(xw.$$.fragment,K7e),K7e.forEach(t),Y7e.forEach(t),QNe=i(Rx),vZ=n(Rx,"SPAN",{});var Z7e=s(vZ);WNe=r(Z7e,"Extending the Auto Classes"),Z7e.forEach(t),Rx.forEach(t),jBe=i(f),An=n(f,"P",{});var Zc=s(An);HNe=r(Zc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),FZ=n(Zc,"CODE",{});var eMe=s(FZ);UNe=r(eMe,"NewModel"),eMe.forEach(t),JNe=r(Zc,", make sure you have a "),TZ=n(Zc,"CODE",{});var oMe=s(TZ);YNe=r(oMe,"NewModelConfig"),oMe.forEach(t),KNe=r(Zc,` then you can add those to the auto
classes like this:`),Zc.forEach(t),DBe=i(f),T($w.$$.fragment,f),GBe=i(f),W9=n(f,"P",{});var rMe=s(W9);ZNe=r(rMe,"You will then be able to use the auto classes like you would usually do!"),rMe.forEach(t),OBe=i(f),T(lf.$$.fragment,f),VBe=i(f),ci=n(f,"H2",{class:!0});var Bx=s(ci);df=n(Bx,"A",{id:!0,class:!0,href:!0});var tMe=s(df);MZ=n(tMe,"SPAN",{});var aMe=s(MZ);T(kw.$$.fragment,aMe),aMe.forEach(t),tMe.forEach(t),eje=i(Bx),EZ=n(Bx,"SPAN",{});var nMe=s(EZ);oje=r(nMe,"AutoConfig"),nMe.forEach(t),Bx.forEach(t),XBe=i(f),Co=n(f,"DIV",{class:!0});var Jr=s(Co);T(Sw.$$.fragment,Jr),rje=i(Jr),Rw=n(Jr,"P",{});var Px=s(Rw);tje=r(Px,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),H9=n(Px,"A",{href:!0});var sMe=s(H9);aje=r(sMe,"from_pretrained()"),sMe.forEach(t),nje=r(Px," class method."),Px.forEach(t),sje=i(Jr),Bw=n(Jr,"P",{});var Ix=s(Bw);lje=r(Ix,"This class cannot be instantiated directly using "),CZ=n(Ix,"CODE",{});var lMe=s(CZ);ije=r(lMe,"__init__()"),lMe.forEach(t),dje=r(Ix," (throws an error)."),Ix.forEach(t),cje=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T(Pw.$$.fragment,Yr),fje=i(Yr),wZ=n(Yr,"P",{});var iMe=s(wZ);mje=r(iMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),iMe.forEach(t),gje=i(Yr),fi=n(Yr,"P",{});var ef=s(fi);hje=r(ef,"The configuration class to instantiate is selected based on the "),AZ=n(ef,"CODE",{});var dMe=s(AZ);pje=r(dMe,"model_type"),dMe.forEach(t),uje=r(ef,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),yZ=n(ef,"CODE",{});var cMe=s(yZ);_je=r(cMe,"pretrained_model_name_or_path"),cMe.forEach(t),bje=r(ef,":"),ef.forEach(t),vje=i(Yr),A=n(Yr,"UL",{});var y=s(A);cf=n(y,"LI",{});var cC=s(cf);LZ=n(cC,"STRONG",{});var fMe=s(LZ);Fje=r(fMe,"albert"),fMe.forEach(t),Tje=r(cC," \u2014 "),U9=n(cC,"A",{href:!0});var mMe=s(U9);Mje=r(mMe,"AlbertConfig"),mMe.forEach(t),Eje=r(cC," (ALBERT model)"),cC.forEach(t),Cje=i(y),ff=n(y,"LI",{});var fC=s(ff);xZ=n(fC,"STRONG",{});var gMe=s(xZ);wje=r(gMe,"bart"),gMe.forEach(t),Aje=r(fC," \u2014 "),J9=n(fC,"A",{href:!0});var hMe=s(J9);yje=r(hMe,"BartConfig"),hMe.forEach(t),Lje=r(fC," (BART model)"),fC.forEach(t),xje=i(y),mf=n(y,"LI",{});var mC=s(mf);$Z=n(mC,"STRONG",{});var pMe=s($Z);$je=r(pMe,"beit"),pMe.forEach(t),kje=r(mC," \u2014 "),Y9=n(mC,"A",{href:!0});var uMe=s(Y9);Sje=r(uMe,"BeitConfig"),uMe.forEach(t),Rje=r(mC," (BEiT model)"),mC.forEach(t),Bje=i(y),gf=n(y,"LI",{});var gC=s(gf);kZ=n(gC,"STRONG",{});var _Me=s(kZ);Pje=r(_Me,"bert"),_Me.forEach(t),Ije=r(gC," \u2014 "),K9=n(gC,"A",{href:!0});var bMe=s(K9);qje=r(bMe,"BertConfig"),bMe.forEach(t),Nje=r(gC," (BERT model)"),gC.forEach(t),jje=i(y),hf=n(y,"LI",{});var hC=s(hf);SZ=n(hC,"STRONG",{});var vMe=s(SZ);Dje=r(vMe,"bert-generation"),vMe.forEach(t),Gje=r(hC," \u2014 "),Z9=n(hC,"A",{href:!0});var FMe=s(Z9);Oje=r(FMe,"BertGenerationConfig"),FMe.forEach(t),Vje=r(hC," (Bert Generation model)"),hC.forEach(t),Xje=i(y),pf=n(y,"LI",{});var pC=s(pf);RZ=n(pC,"STRONG",{});var TMe=s(RZ);zje=r(TMe,"big_bird"),TMe.forEach(t),Qje=r(pC," \u2014 "),e$=n(pC,"A",{href:!0});var MMe=s(e$);Wje=r(MMe,"BigBirdConfig"),MMe.forEach(t),Hje=r(pC," (BigBird model)"),pC.forEach(t),Uje=i(y),uf=n(y,"LI",{});var uC=s(uf);BZ=n(uC,"STRONG",{});var EMe=s(BZ);Jje=r(EMe,"bigbird_pegasus"),EMe.forEach(t),Yje=r(uC," \u2014 "),o$=n(uC,"A",{href:!0});var CMe=s(o$);Kje=r(CMe,"BigBirdPegasusConfig"),CMe.forEach(t),Zje=r(uC," (BigBirdPegasus model)"),uC.forEach(t),eDe=i(y),_f=n(y,"LI",{});var _C=s(_f);PZ=n(_C,"STRONG",{});var wMe=s(PZ);oDe=r(wMe,"blenderbot"),wMe.forEach(t),rDe=r(_C," \u2014 "),r$=n(_C,"A",{href:!0});var AMe=s(r$);tDe=r(AMe,"BlenderbotConfig"),AMe.forEach(t),aDe=r(_C," (Blenderbot model)"),_C.forEach(t),nDe=i(y),bf=n(y,"LI",{});var bC=s(bf);IZ=n(bC,"STRONG",{});var yMe=s(IZ);sDe=r(yMe,"blenderbot-small"),yMe.forEach(t),lDe=r(bC," \u2014 "),t$=n(bC,"A",{href:!0});var LMe=s(t$);iDe=r(LMe,"BlenderbotSmallConfig"),LMe.forEach(t),dDe=r(bC," (BlenderbotSmall model)"),bC.forEach(t),cDe=i(y),vf=n(y,"LI",{});var vC=s(vf);qZ=n(vC,"STRONG",{});var xMe=s(qZ);fDe=r(xMe,"camembert"),xMe.forEach(t),mDe=r(vC," \u2014 "),a$=n(vC,"A",{href:!0});var $Me=s(a$);gDe=r($Me,"CamembertConfig"),$Me.forEach(t),hDe=r(vC," (CamemBERT model)"),vC.forEach(t),pDe=i(y),Ff=n(y,"LI",{});var FC=s(Ff);NZ=n(FC,"STRONG",{});var kMe=s(NZ);uDe=r(kMe,"canine"),kMe.forEach(t),_De=r(FC," \u2014 "),n$=n(FC,"A",{href:!0});var SMe=s(n$);bDe=r(SMe,"CanineConfig"),SMe.forEach(t),vDe=r(FC," (Canine model)"),FC.forEach(t),FDe=i(y),Tf=n(y,"LI",{});var TC=s(Tf);jZ=n(TC,"STRONG",{});var RMe=s(jZ);TDe=r(RMe,"clip"),RMe.forEach(t),MDe=r(TC," \u2014 "),s$=n(TC,"A",{href:!0});var BMe=s(s$);EDe=r(BMe,"CLIPConfig"),BMe.forEach(t),CDe=r(TC," (CLIP model)"),TC.forEach(t),wDe=i(y),Mf=n(y,"LI",{});var MC=s(Mf);DZ=n(MC,"STRONG",{});var PMe=s(DZ);ADe=r(PMe,"convbert"),PMe.forEach(t),yDe=r(MC," \u2014 "),l$=n(MC,"A",{href:!0});var IMe=s(l$);LDe=r(IMe,"ConvBertConfig"),IMe.forEach(t),xDe=r(MC," (ConvBERT model)"),MC.forEach(t),$De=i(y),Ef=n(y,"LI",{});var EC=s(Ef);GZ=n(EC,"STRONG",{});var qMe=s(GZ);kDe=r(qMe,"convnext"),qMe.forEach(t),SDe=r(EC," \u2014 "),i$=n(EC,"A",{href:!0});var NMe=s(i$);RDe=r(NMe,"ConvNextConfig"),NMe.forEach(t),BDe=r(EC," (ConvNext model)"),EC.forEach(t),PDe=i(y),Cf=n(y,"LI",{});var CC=s(Cf);OZ=n(CC,"STRONG",{});var jMe=s(OZ);IDe=r(jMe,"ctrl"),jMe.forEach(t),qDe=r(CC," \u2014 "),d$=n(CC,"A",{href:!0});var DMe=s(d$);NDe=r(DMe,"CTRLConfig"),DMe.forEach(t),jDe=r(CC," (CTRL model)"),CC.forEach(t),DDe=i(y),wf=n(y,"LI",{});var wC=s(wf);VZ=n(wC,"STRONG",{});var GMe=s(VZ);GDe=r(GMe,"data2vec-audio"),GMe.forEach(t),ODe=r(wC," \u2014 "),c$=n(wC,"A",{href:!0});var OMe=s(c$);VDe=r(OMe,"Data2VecAudioConfig"),OMe.forEach(t),XDe=r(wC," (Data2VecAudio model)"),wC.forEach(t),zDe=i(y),Af=n(y,"LI",{});var AC=s(Af);XZ=n(AC,"STRONG",{});var VMe=s(XZ);QDe=r(VMe,"data2vec-text"),VMe.forEach(t),WDe=r(AC," \u2014 "),f$=n(AC,"A",{href:!0});var XMe=s(f$);HDe=r(XMe,"Data2VecTextConfig"),XMe.forEach(t),UDe=r(AC," (Data2VecText model)"),AC.forEach(t),JDe=i(y),yf=n(y,"LI",{});var yC=s(yf);zZ=n(yC,"STRONG",{});var zMe=s(zZ);YDe=r(zMe,"data2vec-vision"),zMe.forEach(t),KDe=r(yC," \u2014 "),m$=n(yC,"A",{href:!0});var QMe=s(m$);ZDe=r(QMe,"Data2VecVisionConfig"),QMe.forEach(t),eGe=r(yC," (Data2VecVision model)"),yC.forEach(t),oGe=i(y),Lf=n(y,"LI",{});var LC=s(Lf);QZ=n(LC,"STRONG",{});var WMe=s(QZ);rGe=r(WMe,"deberta"),WMe.forEach(t),tGe=r(LC," \u2014 "),g$=n(LC,"A",{href:!0});var HMe=s(g$);aGe=r(HMe,"DebertaConfig"),HMe.forEach(t),nGe=r(LC," (DeBERTa model)"),LC.forEach(t),sGe=i(y),xf=n(y,"LI",{});var xC=s(xf);WZ=n(xC,"STRONG",{});var UMe=s(WZ);lGe=r(UMe,"deberta-v2"),UMe.forEach(t),iGe=r(xC," \u2014 "),h$=n(xC,"A",{href:!0});var JMe=s(h$);dGe=r(JMe,"DebertaV2Config"),JMe.forEach(t),cGe=r(xC," (DeBERTa-v2 model)"),xC.forEach(t),fGe=i(y),$f=n(y,"LI",{});var $C=s($f);HZ=n($C,"STRONG",{});var YMe=s(HZ);mGe=r(YMe,"decision_transformer"),YMe.forEach(t),gGe=r($C," \u2014 "),p$=n($C,"A",{href:!0});var KMe=s(p$);hGe=r(KMe,"DecisionTransformerConfig"),KMe.forEach(t),pGe=r($C," (Decision Transformer model)"),$C.forEach(t),uGe=i(y),kf=n(y,"LI",{});var kC=s(kf);UZ=n(kC,"STRONG",{});var ZMe=s(UZ);_Ge=r(ZMe,"deit"),ZMe.forEach(t),bGe=r(kC," \u2014 "),u$=n(kC,"A",{href:!0});var e4e=s(u$);vGe=r(e4e,"DeiTConfig"),e4e.forEach(t),FGe=r(kC," (DeiT model)"),kC.forEach(t),TGe=i(y),Sf=n(y,"LI",{});var o4e=s(Sf);JZ=n(o4e,"STRONG",{});var FIr=s(JZ);MGe=r(FIr,"detr"),FIr.forEach(t),EGe=r(o4e," \u2014 "),_$=n(o4e,"A",{href:!0});var TIr=s(_$);CGe=r(TIr,"DetrConfig"),TIr.forEach(t),wGe=r(o4e," (DETR model)"),o4e.forEach(t),AGe=i(y),Rf=n(y,"LI",{});var r4e=s(Rf);YZ=n(r4e,"STRONG",{});var MIr=s(YZ);yGe=r(MIr,"distilbert"),MIr.forEach(t),LGe=r(r4e," \u2014 "),b$=n(r4e,"A",{href:!0});var EIr=s(b$);xGe=r(EIr,"DistilBertConfig"),EIr.forEach(t),$Ge=r(r4e," (DistilBERT model)"),r4e.forEach(t),kGe=i(y),Bf=n(y,"LI",{});var t4e=s(Bf);KZ=n(t4e,"STRONG",{});var CIr=s(KZ);SGe=r(CIr,"dpr"),CIr.forEach(t),RGe=r(t4e," \u2014 "),v$=n(t4e,"A",{href:!0});var wIr=s(v$);BGe=r(wIr,"DPRConfig"),wIr.forEach(t),PGe=r(t4e," (DPR model)"),t4e.forEach(t),IGe=i(y),Pf=n(y,"LI",{});var a4e=s(Pf);ZZ=n(a4e,"STRONG",{});var AIr=s(ZZ);qGe=r(AIr,"dpt"),AIr.forEach(t),NGe=r(a4e," \u2014 "),F$=n(a4e,"A",{href:!0});var yIr=s(F$);jGe=r(yIr,"DPTConfig"),yIr.forEach(t),DGe=r(a4e," (DPT model)"),a4e.forEach(t),GGe=i(y),If=n(y,"LI",{});var n4e=s(If);eee=n(n4e,"STRONG",{});var LIr=s(eee);OGe=r(LIr,"electra"),LIr.forEach(t),VGe=r(n4e," \u2014 "),T$=n(n4e,"A",{href:!0});var xIr=s(T$);XGe=r(xIr,"ElectraConfig"),xIr.forEach(t),zGe=r(n4e," (ELECTRA model)"),n4e.forEach(t),QGe=i(y),qf=n(y,"LI",{});var s4e=s(qf);oee=n(s4e,"STRONG",{});var $Ir=s(oee);WGe=r($Ir,"encoder-decoder"),$Ir.forEach(t),HGe=r(s4e," \u2014 "),M$=n(s4e,"A",{href:!0});var kIr=s(M$);UGe=r(kIr,"EncoderDecoderConfig"),kIr.forEach(t),JGe=r(s4e," (Encoder decoder model)"),s4e.forEach(t),YGe=i(y),Nf=n(y,"LI",{});var l4e=s(Nf);ree=n(l4e,"STRONG",{});var SIr=s(ree);KGe=r(SIr,"flaubert"),SIr.forEach(t),ZGe=r(l4e," \u2014 "),E$=n(l4e,"A",{href:!0});var RIr=s(E$);eOe=r(RIr,"FlaubertConfig"),RIr.forEach(t),oOe=r(l4e," (FlauBERT model)"),l4e.forEach(t),rOe=i(y),jf=n(y,"LI",{});var i4e=s(jf);tee=n(i4e,"STRONG",{});var BIr=s(tee);tOe=r(BIr,"fnet"),BIr.forEach(t),aOe=r(i4e," \u2014 "),C$=n(i4e,"A",{href:!0});var PIr=s(C$);nOe=r(PIr,"FNetConfig"),PIr.forEach(t),sOe=r(i4e," (FNet model)"),i4e.forEach(t),lOe=i(y),Df=n(y,"LI",{});var d4e=s(Df);aee=n(d4e,"STRONG",{});var IIr=s(aee);iOe=r(IIr,"fsmt"),IIr.forEach(t),dOe=r(d4e," \u2014 "),w$=n(d4e,"A",{href:!0});var qIr=s(w$);cOe=r(qIr,"FSMTConfig"),qIr.forEach(t),fOe=r(d4e," (FairSeq Machine-Translation model)"),d4e.forEach(t),mOe=i(y),Gf=n(y,"LI",{});var c4e=s(Gf);nee=n(c4e,"STRONG",{});var NIr=s(nee);gOe=r(NIr,"funnel"),NIr.forEach(t),hOe=r(c4e," \u2014 "),A$=n(c4e,"A",{href:!0});var jIr=s(A$);pOe=r(jIr,"FunnelConfig"),jIr.forEach(t),uOe=r(c4e," (Funnel Transformer model)"),c4e.forEach(t),_Oe=i(y),Of=n(y,"LI",{});var f4e=s(Of);see=n(f4e,"STRONG",{});var DIr=s(see);bOe=r(DIr,"glpn"),DIr.forEach(t),vOe=r(f4e," \u2014 "),y$=n(f4e,"A",{href:!0});var GIr=s(y$);FOe=r(GIr,"GLPNConfig"),GIr.forEach(t),TOe=r(f4e," (GLPN model)"),f4e.forEach(t),MOe=i(y),Vf=n(y,"LI",{});var m4e=s(Vf);lee=n(m4e,"STRONG",{});var OIr=s(lee);EOe=r(OIr,"gpt2"),OIr.forEach(t),COe=r(m4e," \u2014 "),L$=n(m4e,"A",{href:!0});var VIr=s(L$);wOe=r(VIr,"GPT2Config"),VIr.forEach(t),AOe=r(m4e," (OpenAI GPT-2 model)"),m4e.forEach(t),yOe=i(y),Xf=n(y,"LI",{});var g4e=s(Xf);iee=n(g4e,"STRONG",{});var XIr=s(iee);LOe=r(XIr,"gpt_neo"),XIr.forEach(t),xOe=r(g4e," \u2014 "),x$=n(g4e,"A",{href:!0});var zIr=s(x$);$Oe=r(zIr,"GPTNeoConfig"),zIr.forEach(t),kOe=r(g4e," (GPT Neo model)"),g4e.forEach(t),SOe=i(y),zf=n(y,"LI",{});var h4e=s(zf);dee=n(h4e,"STRONG",{});var QIr=s(dee);ROe=r(QIr,"gptj"),QIr.forEach(t),BOe=r(h4e," \u2014 "),$$=n(h4e,"A",{href:!0});var WIr=s($$);POe=r(WIr,"GPTJConfig"),WIr.forEach(t),IOe=r(h4e," (GPT-J model)"),h4e.forEach(t),qOe=i(y),Qf=n(y,"LI",{});var p4e=s(Qf);cee=n(p4e,"STRONG",{});var HIr=s(cee);NOe=r(HIr,"hubert"),HIr.forEach(t),jOe=r(p4e," \u2014 "),k$=n(p4e,"A",{href:!0});var UIr=s(k$);DOe=r(UIr,"HubertConfig"),UIr.forEach(t),GOe=r(p4e," (Hubert model)"),p4e.forEach(t),OOe=i(y),Wf=n(y,"LI",{});var u4e=s(Wf);fee=n(u4e,"STRONG",{});var JIr=s(fee);VOe=r(JIr,"ibert"),JIr.forEach(t),XOe=r(u4e," \u2014 "),S$=n(u4e,"A",{href:!0});var YIr=s(S$);zOe=r(YIr,"IBertConfig"),YIr.forEach(t),QOe=r(u4e," (I-BERT model)"),u4e.forEach(t),WOe=i(y),Hf=n(y,"LI",{});var _4e=s(Hf);mee=n(_4e,"STRONG",{});var KIr=s(mee);HOe=r(KIr,"imagegpt"),KIr.forEach(t),UOe=r(_4e," \u2014 "),R$=n(_4e,"A",{href:!0});var ZIr=s(R$);JOe=r(ZIr,"ImageGPTConfig"),ZIr.forEach(t),YOe=r(_4e," (ImageGPT model)"),_4e.forEach(t),KOe=i(y),Uf=n(y,"LI",{});var b4e=s(Uf);gee=n(b4e,"STRONG",{});var eqr=s(gee);ZOe=r(eqr,"layoutlm"),eqr.forEach(t),eVe=r(b4e," \u2014 "),B$=n(b4e,"A",{href:!0});var oqr=s(B$);oVe=r(oqr,"LayoutLMConfig"),oqr.forEach(t),rVe=r(b4e," (LayoutLM model)"),b4e.forEach(t),tVe=i(y),Jf=n(y,"LI",{});var v4e=s(Jf);hee=n(v4e,"STRONG",{});var rqr=s(hee);aVe=r(rqr,"layoutlmv2"),rqr.forEach(t),nVe=r(v4e," \u2014 "),P$=n(v4e,"A",{href:!0});var tqr=s(P$);sVe=r(tqr,"LayoutLMv2Config"),tqr.forEach(t),lVe=r(v4e," (LayoutLMv2 model)"),v4e.forEach(t),iVe=i(y),Yf=n(y,"LI",{});var F4e=s(Yf);pee=n(F4e,"STRONG",{});var aqr=s(pee);dVe=r(aqr,"layoutlmv3"),aqr.forEach(t),cVe=r(F4e," \u2014 "),I$=n(F4e,"A",{href:!0});var nqr=s(I$);fVe=r(nqr,"LayoutLMv3Config"),nqr.forEach(t),mVe=r(F4e," (LayoutLMv3 model)"),F4e.forEach(t),gVe=i(y),Kf=n(y,"LI",{});var T4e=s(Kf);uee=n(T4e,"STRONG",{});var sqr=s(uee);hVe=r(sqr,"led"),sqr.forEach(t),pVe=r(T4e," \u2014 "),q$=n(T4e,"A",{href:!0});var lqr=s(q$);uVe=r(lqr,"LEDConfig"),lqr.forEach(t),_Ve=r(T4e," (LED model)"),T4e.forEach(t),bVe=i(y),Zf=n(y,"LI",{});var M4e=s(Zf);_ee=n(M4e,"STRONG",{});var iqr=s(_ee);vVe=r(iqr,"longformer"),iqr.forEach(t),FVe=r(M4e," \u2014 "),N$=n(M4e,"A",{href:!0});var dqr=s(N$);TVe=r(dqr,"LongformerConfig"),dqr.forEach(t),MVe=r(M4e," (Longformer model)"),M4e.forEach(t),EVe=i(y),em=n(y,"LI",{});var E4e=s(em);bee=n(E4e,"STRONG",{});var cqr=s(bee);CVe=r(cqr,"luke"),cqr.forEach(t),wVe=r(E4e," \u2014 "),j$=n(E4e,"A",{href:!0});var fqr=s(j$);AVe=r(fqr,"LukeConfig"),fqr.forEach(t),yVe=r(E4e," (LUKE model)"),E4e.forEach(t),LVe=i(y),om=n(y,"LI",{});var C4e=s(om);vee=n(C4e,"STRONG",{});var mqr=s(vee);xVe=r(mqr,"lxmert"),mqr.forEach(t),$Ve=r(C4e," \u2014 "),D$=n(C4e,"A",{href:!0});var gqr=s(D$);kVe=r(gqr,"LxmertConfig"),gqr.forEach(t),SVe=r(C4e," (LXMERT model)"),C4e.forEach(t),RVe=i(y),rm=n(y,"LI",{});var w4e=s(rm);Fee=n(w4e,"STRONG",{});var hqr=s(Fee);BVe=r(hqr,"m2m_100"),hqr.forEach(t),PVe=r(w4e," \u2014 "),G$=n(w4e,"A",{href:!0});var pqr=s(G$);IVe=r(pqr,"M2M100Config"),pqr.forEach(t),qVe=r(w4e," (M2M100 model)"),w4e.forEach(t),NVe=i(y),tm=n(y,"LI",{});var A4e=s(tm);Tee=n(A4e,"STRONG",{});var uqr=s(Tee);jVe=r(uqr,"marian"),uqr.forEach(t),DVe=r(A4e," \u2014 "),O$=n(A4e,"A",{href:!0});var _qr=s(O$);GVe=r(_qr,"MarianConfig"),_qr.forEach(t),OVe=r(A4e," (Marian model)"),A4e.forEach(t),VVe=i(y),am=n(y,"LI",{});var y4e=s(am);Mee=n(y4e,"STRONG",{});var bqr=s(Mee);XVe=r(bqr,"maskformer"),bqr.forEach(t),zVe=r(y4e," \u2014 "),V$=n(y4e,"A",{href:!0});var vqr=s(V$);QVe=r(vqr,"MaskFormerConfig"),vqr.forEach(t),WVe=r(y4e," (MaskFormer model)"),y4e.forEach(t),HVe=i(y),nm=n(y,"LI",{});var L4e=s(nm);Eee=n(L4e,"STRONG",{});var Fqr=s(Eee);UVe=r(Fqr,"mbart"),Fqr.forEach(t),JVe=r(L4e," \u2014 "),X$=n(L4e,"A",{href:!0});var Tqr=s(X$);YVe=r(Tqr,"MBartConfig"),Tqr.forEach(t),KVe=r(L4e," (mBART model)"),L4e.forEach(t),ZVe=i(y),sm=n(y,"LI",{});var x4e=s(sm);Cee=n(x4e,"STRONG",{});var Mqr=s(Cee);eXe=r(Mqr,"megatron-bert"),Mqr.forEach(t),oXe=r(x4e," \u2014 "),z$=n(x4e,"A",{href:!0});var Eqr=s(z$);rXe=r(Eqr,"MegatronBertConfig"),Eqr.forEach(t),tXe=r(x4e," (MegatronBert model)"),x4e.forEach(t),aXe=i(y),lm=n(y,"LI",{});var $4e=s(lm);wee=n($4e,"STRONG",{});var Cqr=s(wee);nXe=r(Cqr,"mobilebert"),Cqr.forEach(t),sXe=r($4e," \u2014 "),Q$=n($4e,"A",{href:!0});var wqr=s(Q$);lXe=r(wqr,"MobileBertConfig"),wqr.forEach(t),iXe=r($4e," (MobileBERT model)"),$4e.forEach(t),dXe=i(y),im=n(y,"LI",{});var k4e=s(im);Aee=n(k4e,"STRONG",{});var Aqr=s(Aee);cXe=r(Aqr,"mpnet"),Aqr.forEach(t),fXe=r(k4e," \u2014 "),W$=n(k4e,"A",{href:!0});var yqr=s(W$);mXe=r(yqr,"MPNetConfig"),yqr.forEach(t),gXe=r(k4e," (MPNet model)"),k4e.forEach(t),hXe=i(y),dm=n(y,"LI",{});var S4e=s(dm);yee=n(S4e,"STRONG",{});var Lqr=s(yee);pXe=r(Lqr,"mt5"),Lqr.forEach(t),uXe=r(S4e," \u2014 "),H$=n(S4e,"A",{href:!0});var xqr=s(H$);_Xe=r(xqr,"MT5Config"),xqr.forEach(t),bXe=r(S4e," (mT5 model)"),S4e.forEach(t),vXe=i(y),cm=n(y,"LI",{});var R4e=s(cm);Lee=n(R4e,"STRONG",{});var $qr=s(Lee);FXe=r($qr,"nystromformer"),$qr.forEach(t),TXe=r(R4e," \u2014 "),U$=n(R4e,"A",{href:!0});var kqr=s(U$);MXe=r(kqr,"NystromformerConfig"),kqr.forEach(t),EXe=r(R4e," (Nystromformer model)"),R4e.forEach(t),CXe=i(y),fm=n(y,"LI",{});var B4e=s(fm);xee=n(B4e,"STRONG",{});var Sqr=s(xee);wXe=r(Sqr,"openai-gpt"),Sqr.forEach(t),AXe=r(B4e," \u2014 "),J$=n(B4e,"A",{href:!0});var Rqr=s(J$);yXe=r(Rqr,"OpenAIGPTConfig"),Rqr.forEach(t),LXe=r(B4e," (OpenAI GPT model)"),B4e.forEach(t),xXe=i(y),mm=n(y,"LI",{});var P4e=s(mm);$ee=n(P4e,"STRONG",{});var Bqr=s($ee);$Xe=r(Bqr,"pegasus"),Bqr.forEach(t),kXe=r(P4e," \u2014 "),Y$=n(P4e,"A",{href:!0});var Pqr=s(Y$);SXe=r(Pqr,"PegasusConfig"),Pqr.forEach(t),RXe=r(P4e," (Pegasus model)"),P4e.forEach(t),BXe=i(y),gm=n(y,"LI",{});var I4e=s(gm);kee=n(I4e,"STRONG",{});var Iqr=s(kee);PXe=r(Iqr,"perceiver"),Iqr.forEach(t),IXe=r(I4e," \u2014 "),K$=n(I4e,"A",{href:!0});var qqr=s(K$);qXe=r(qqr,"PerceiverConfig"),qqr.forEach(t),NXe=r(I4e," (Perceiver model)"),I4e.forEach(t),jXe=i(y),hm=n(y,"LI",{});var q4e=s(hm);See=n(q4e,"STRONG",{});var Nqr=s(See);DXe=r(Nqr,"plbart"),Nqr.forEach(t),GXe=r(q4e," \u2014 "),Z$=n(q4e,"A",{href:!0});var jqr=s(Z$);OXe=r(jqr,"PLBartConfig"),jqr.forEach(t),VXe=r(q4e," (PLBart model)"),q4e.forEach(t),XXe=i(y),pm=n(y,"LI",{});var N4e=s(pm);Ree=n(N4e,"STRONG",{});var Dqr=s(Ree);zXe=r(Dqr,"poolformer"),Dqr.forEach(t),QXe=r(N4e," \u2014 "),ek=n(N4e,"A",{href:!0});var Gqr=s(ek);WXe=r(Gqr,"PoolFormerConfig"),Gqr.forEach(t),HXe=r(N4e," (PoolFormer model)"),N4e.forEach(t),UXe=i(y),um=n(y,"LI",{});var j4e=s(um);Bee=n(j4e,"STRONG",{});var Oqr=s(Bee);JXe=r(Oqr,"prophetnet"),Oqr.forEach(t),YXe=r(j4e," \u2014 "),ok=n(j4e,"A",{href:!0});var Vqr=s(ok);KXe=r(Vqr,"ProphetNetConfig"),Vqr.forEach(t),ZXe=r(j4e," (ProphetNet model)"),j4e.forEach(t),eze=i(y),_m=n(y,"LI",{});var D4e=s(_m);Pee=n(D4e,"STRONG",{});var Xqr=s(Pee);oze=r(Xqr,"qdqbert"),Xqr.forEach(t),rze=r(D4e," \u2014 "),rk=n(D4e,"A",{href:!0});var zqr=s(rk);tze=r(zqr,"QDQBertConfig"),zqr.forEach(t),aze=r(D4e," (QDQBert model)"),D4e.forEach(t),nze=i(y),bm=n(y,"LI",{});var G4e=s(bm);Iee=n(G4e,"STRONG",{});var Qqr=s(Iee);sze=r(Qqr,"rag"),Qqr.forEach(t),lze=r(G4e," \u2014 "),tk=n(G4e,"A",{href:!0});var Wqr=s(tk);ize=r(Wqr,"RagConfig"),Wqr.forEach(t),dze=r(G4e," (RAG model)"),G4e.forEach(t),cze=i(y),vm=n(y,"LI",{});var O4e=s(vm);qee=n(O4e,"STRONG",{});var Hqr=s(qee);fze=r(Hqr,"realm"),Hqr.forEach(t),mze=r(O4e," \u2014 "),ak=n(O4e,"A",{href:!0});var Uqr=s(ak);gze=r(Uqr,"RealmConfig"),Uqr.forEach(t),hze=r(O4e," (Realm model)"),O4e.forEach(t),pze=i(y),Fm=n(y,"LI",{});var V4e=s(Fm);Nee=n(V4e,"STRONG",{});var Jqr=s(Nee);uze=r(Jqr,"reformer"),Jqr.forEach(t),_ze=r(V4e," \u2014 "),nk=n(V4e,"A",{href:!0});var Yqr=s(nk);bze=r(Yqr,"ReformerConfig"),Yqr.forEach(t),vze=r(V4e," (Reformer model)"),V4e.forEach(t),Fze=i(y),Tm=n(y,"LI",{});var X4e=s(Tm);jee=n(X4e,"STRONG",{});var Kqr=s(jee);Tze=r(Kqr,"regnet"),Kqr.forEach(t),Mze=r(X4e," \u2014 "),sk=n(X4e,"A",{href:!0});var Zqr=s(sk);Eze=r(Zqr,"RegNetConfig"),Zqr.forEach(t),Cze=r(X4e," (RegNet model)"),X4e.forEach(t),wze=i(y),Mm=n(y,"LI",{});var z4e=s(Mm);Dee=n(z4e,"STRONG",{});var eNr=s(Dee);Aze=r(eNr,"rembert"),eNr.forEach(t),yze=r(z4e," \u2014 "),lk=n(z4e,"A",{href:!0});var oNr=s(lk);Lze=r(oNr,"RemBertConfig"),oNr.forEach(t),xze=r(z4e," (RemBERT model)"),z4e.forEach(t),$ze=i(y),Em=n(y,"LI",{});var Q4e=s(Em);Gee=n(Q4e,"STRONG",{});var rNr=s(Gee);kze=r(rNr,"resnet"),rNr.forEach(t),Sze=r(Q4e," \u2014 "),ik=n(Q4e,"A",{href:!0});var tNr=s(ik);Rze=r(tNr,"ResNetConfig"),tNr.forEach(t),Bze=r(Q4e," (ResNet model)"),Q4e.forEach(t),Pze=i(y),Cm=n(y,"LI",{});var W4e=s(Cm);Oee=n(W4e,"STRONG",{});var aNr=s(Oee);Ize=r(aNr,"retribert"),aNr.forEach(t),qze=r(W4e," \u2014 "),dk=n(W4e,"A",{href:!0});var nNr=s(dk);Nze=r(nNr,"RetriBertConfig"),nNr.forEach(t),jze=r(W4e," (RetriBERT model)"),W4e.forEach(t),Dze=i(y),wm=n(y,"LI",{});var H4e=s(wm);Vee=n(H4e,"STRONG",{});var sNr=s(Vee);Gze=r(sNr,"roberta"),sNr.forEach(t),Oze=r(H4e," \u2014 "),ck=n(H4e,"A",{href:!0});var lNr=s(ck);Vze=r(lNr,"RobertaConfig"),lNr.forEach(t),Xze=r(H4e," (RoBERTa model)"),H4e.forEach(t),zze=i(y),Am=n(y,"LI",{});var U4e=s(Am);Xee=n(U4e,"STRONG",{});var iNr=s(Xee);Qze=r(iNr,"roformer"),iNr.forEach(t),Wze=r(U4e," \u2014 "),fk=n(U4e,"A",{href:!0});var dNr=s(fk);Hze=r(dNr,"RoFormerConfig"),dNr.forEach(t),Uze=r(U4e," (RoFormer model)"),U4e.forEach(t),Jze=i(y),ym=n(y,"LI",{});var J4e=s(ym);zee=n(J4e,"STRONG",{});var cNr=s(zee);Yze=r(cNr,"segformer"),cNr.forEach(t),Kze=r(J4e," \u2014 "),mk=n(J4e,"A",{href:!0});var fNr=s(mk);Zze=r(fNr,"SegformerConfig"),fNr.forEach(t),eQe=r(J4e," (SegFormer model)"),J4e.forEach(t),oQe=i(y),Lm=n(y,"LI",{});var Y4e=s(Lm);Qee=n(Y4e,"STRONG",{});var mNr=s(Qee);rQe=r(mNr,"sew"),mNr.forEach(t),tQe=r(Y4e," \u2014 "),gk=n(Y4e,"A",{href:!0});var gNr=s(gk);aQe=r(gNr,"SEWConfig"),gNr.forEach(t),nQe=r(Y4e," (SEW model)"),Y4e.forEach(t),sQe=i(y),xm=n(y,"LI",{});var K4e=s(xm);Wee=n(K4e,"STRONG",{});var hNr=s(Wee);lQe=r(hNr,"sew-d"),hNr.forEach(t),iQe=r(K4e," \u2014 "),hk=n(K4e,"A",{href:!0});var pNr=s(hk);dQe=r(pNr,"SEWDConfig"),pNr.forEach(t),cQe=r(K4e," (SEW-D model)"),K4e.forEach(t),fQe=i(y),$m=n(y,"LI",{});var Z4e=s($m);Hee=n(Z4e,"STRONG",{});var uNr=s(Hee);mQe=r(uNr,"speech-encoder-decoder"),uNr.forEach(t),gQe=r(Z4e," \u2014 "),pk=n(Z4e,"A",{href:!0});var _Nr=s(pk);hQe=r(_Nr,"SpeechEncoderDecoderConfig"),_Nr.forEach(t),pQe=r(Z4e," (Speech Encoder decoder model)"),Z4e.forEach(t),uQe=i(y),km=n(y,"LI",{});var eEe=s(km);Uee=n(eEe,"STRONG",{});var bNr=s(Uee);_Qe=r(bNr,"speech_to_text"),bNr.forEach(t),bQe=r(eEe," \u2014 "),uk=n(eEe,"A",{href:!0});var vNr=s(uk);vQe=r(vNr,"Speech2TextConfig"),vNr.forEach(t),FQe=r(eEe," (Speech2Text model)"),eEe.forEach(t),TQe=i(y),Sm=n(y,"LI",{});var oEe=s(Sm);Jee=n(oEe,"STRONG",{});var FNr=s(Jee);MQe=r(FNr,"speech_to_text_2"),FNr.forEach(t),EQe=r(oEe," \u2014 "),_k=n(oEe,"A",{href:!0});var TNr=s(_k);CQe=r(TNr,"Speech2Text2Config"),TNr.forEach(t),wQe=r(oEe," (Speech2Text2 model)"),oEe.forEach(t),AQe=i(y),Rm=n(y,"LI",{});var rEe=s(Rm);Yee=n(rEe,"STRONG",{});var MNr=s(Yee);yQe=r(MNr,"splinter"),MNr.forEach(t),LQe=r(rEe," \u2014 "),bk=n(rEe,"A",{href:!0});var ENr=s(bk);xQe=r(ENr,"SplinterConfig"),ENr.forEach(t),$Qe=r(rEe," (Splinter model)"),rEe.forEach(t),kQe=i(y),Bm=n(y,"LI",{});var tEe=s(Bm);Kee=n(tEe,"STRONG",{});var CNr=s(Kee);SQe=r(CNr,"squeezebert"),CNr.forEach(t),RQe=r(tEe," \u2014 "),vk=n(tEe,"A",{href:!0});var wNr=s(vk);BQe=r(wNr,"SqueezeBertConfig"),wNr.forEach(t),PQe=r(tEe," (SqueezeBERT model)"),tEe.forEach(t),IQe=i(y),Pm=n(y,"LI",{});var aEe=s(Pm);Zee=n(aEe,"STRONG",{});var ANr=s(Zee);qQe=r(ANr,"swin"),ANr.forEach(t),NQe=r(aEe," \u2014 "),Fk=n(aEe,"A",{href:!0});var yNr=s(Fk);jQe=r(yNr,"SwinConfig"),yNr.forEach(t),DQe=r(aEe," (Swin model)"),aEe.forEach(t),GQe=i(y),Im=n(y,"LI",{});var nEe=s(Im);eoe=n(nEe,"STRONG",{});var LNr=s(eoe);OQe=r(LNr,"t5"),LNr.forEach(t),VQe=r(nEe," \u2014 "),Tk=n(nEe,"A",{href:!0});var xNr=s(Tk);XQe=r(xNr,"T5Config"),xNr.forEach(t),zQe=r(nEe," (T5 model)"),nEe.forEach(t),QQe=i(y),qm=n(y,"LI",{});var sEe=s(qm);ooe=n(sEe,"STRONG",{});var $Nr=s(ooe);WQe=r($Nr,"tapas"),$Nr.forEach(t),HQe=r(sEe," \u2014 "),Mk=n(sEe,"A",{href:!0});var kNr=s(Mk);UQe=r(kNr,"TapasConfig"),kNr.forEach(t),JQe=r(sEe," (TAPAS model)"),sEe.forEach(t),YQe=i(y),Nm=n(y,"LI",{});var lEe=s(Nm);roe=n(lEe,"STRONG",{});var SNr=s(roe);KQe=r(SNr,"tapex"),SNr.forEach(t),ZQe=r(lEe," \u2014 "),Ek=n(lEe,"A",{href:!0});var RNr=s(Ek);eWe=r(RNr,"BartConfig"),RNr.forEach(t),oWe=r(lEe," (TAPEX model)"),lEe.forEach(t),rWe=i(y),jm=n(y,"LI",{});var iEe=s(jm);toe=n(iEe,"STRONG",{});var BNr=s(toe);tWe=r(BNr,"transfo-xl"),BNr.forEach(t),aWe=r(iEe," \u2014 "),Ck=n(iEe,"A",{href:!0});var PNr=s(Ck);nWe=r(PNr,"TransfoXLConfig"),PNr.forEach(t),sWe=r(iEe," (Transformer-XL model)"),iEe.forEach(t),lWe=i(y),Dm=n(y,"LI",{});var dEe=s(Dm);aoe=n(dEe,"STRONG",{});var INr=s(aoe);iWe=r(INr,"trocr"),INr.forEach(t),dWe=r(dEe," \u2014 "),wk=n(dEe,"A",{href:!0});var qNr=s(wk);cWe=r(qNr,"TrOCRConfig"),qNr.forEach(t),fWe=r(dEe," (TrOCR model)"),dEe.forEach(t),mWe=i(y),Gm=n(y,"LI",{});var cEe=s(Gm);noe=n(cEe,"STRONG",{});var NNr=s(noe);gWe=r(NNr,"unispeech"),NNr.forEach(t),hWe=r(cEe," \u2014 "),Ak=n(cEe,"A",{href:!0});var jNr=s(Ak);pWe=r(jNr,"UniSpeechConfig"),jNr.forEach(t),uWe=r(cEe," (UniSpeech model)"),cEe.forEach(t),_We=i(y),Om=n(y,"LI",{});var fEe=s(Om);soe=n(fEe,"STRONG",{});var DNr=s(soe);bWe=r(DNr,"unispeech-sat"),DNr.forEach(t),vWe=r(fEe," \u2014 "),yk=n(fEe,"A",{href:!0});var GNr=s(yk);FWe=r(GNr,"UniSpeechSatConfig"),GNr.forEach(t),TWe=r(fEe," (UniSpeechSat model)"),fEe.forEach(t),MWe=i(y),Vm=n(y,"LI",{});var mEe=s(Vm);loe=n(mEe,"STRONG",{});var ONr=s(loe);EWe=r(ONr,"van"),ONr.forEach(t),CWe=r(mEe," \u2014 "),Lk=n(mEe,"A",{href:!0});var VNr=s(Lk);wWe=r(VNr,"VanConfig"),VNr.forEach(t),AWe=r(mEe," (VAN model)"),mEe.forEach(t),yWe=i(y),Xm=n(y,"LI",{});var gEe=s(Xm);ioe=n(gEe,"STRONG",{});var XNr=s(ioe);LWe=r(XNr,"vilt"),XNr.forEach(t),xWe=r(gEe," \u2014 "),xk=n(gEe,"A",{href:!0});var zNr=s(xk);$We=r(zNr,"ViltConfig"),zNr.forEach(t),kWe=r(gEe," (ViLT model)"),gEe.forEach(t),SWe=i(y),zm=n(y,"LI",{});var hEe=s(zm);doe=n(hEe,"STRONG",{});var QNr=s(doe);RWe=r(QNr,"vision-encoder-decoder"),QNr.forEach(t),BWe=r(hEe," \u2014 "),$k=n(hEe,"A",{href:!0});var WNr=s($k);PWe=r(WNr,"VisionEncoderDecoderConfig"),WNr.forEach(t),IWe=r(hEe," (Vision Encoder decoder model)"),hEe.forEach(t),qWe=i(y),Qm=n(y,"LI",{});var pEe=s(Qm);coe=n(pEe,"STRONG",{});var HNr=s(coe);NWe=r(HNr,"vision-text-dual-encoder"),HNr.forEach(t),jWe=r(pEe," \u2014 "),kk=n(pEe,"A",{href:!0});var UNr=s(kk);DWe=r(UNr,"VisionTextDualEncoderConfig"),UNr.forEach(t),GWe=r(pEe," (VisionTextDualEncoder model)"),pEe.forEach(t),OWe=i(y),Wm=n(y,"LI",{});var uEe=s(Wm);foe=n(uEe,"STRONG",{});var JNr=s(foe);VWe=r(JNr,"visual_bert"),JNr.forEach(t),XWe=r(uEe," \u2014 "),Sk=n(uEe,"A",{href:!0});var YNr=s(Sk);zWe=r(YNr,"VisualBertConfig"),YNr.forEach(t),QWe=r(uEe," (VisualBert model)"),uEe.forEach(t),WWe=i(y),Hm=n(y,"LI",{});var _Ee=s(Hm);moe=n(_Ee,"STRONG",{});var KNr=s(moe);HWe=r(KNr,"vit"),KNr.forEach(t),UWe=r(_Ee," \u2014 "),Rk=n(_Ee,"A",{href:!0});var ZNr=s(Rk);JWe=r(ZNr,"ViTConfig"),ZNr.forEach(t),YWe=r(_Ee," (ViT model)"),_Ee.forEach(t),KWe=i(y),Um=n(y,"LI",{});var bEe=s(Um);goe=n(bEe,"STRONG",{});var ejr=s(goe);ZWe=r(ejr,"vit_mae"),ejr.forEach(t),eHe=r(bEe," \u2014 "),Bk=n(bEe,"A",{href:!0});var ojr=s(Bk);oHe=r(ojr,"ViTMAEConfig"),ojr.forEach(t),rHe=r(bEe," (ViTMAE model)"),bEe.forEach(t),tHe=i(y),Jm=n(y,"LI",{});var vEe=s(Jm);hoe=n(vEe,"STRONG",{});var rjr=s(hoe);aHe=r(rjr,"wav2vec2"),rjr.forEach(t),nHe=r(vEe," \u2014 "),Pk=n(vEe,"A",{href:!0});var tjr=s(Pk);sHe=r(tjr,"Wav2Vec2Config"),tjr.forEach(t),lHe=r(vEe," (Wav2Vec2 model)"),vEe.forEach(t),iHe=i(y),Ym=n(y,"LI",{});var FEe=s(Ym);poe=n(FEe,"STRONG",{});var ajr=s(poe);dHe=r(ajr,"wavlm"),ajr.forEach(t),cHe=r(FEe," \u2014 "),Ik=n(FEe,"A",{href:!0});var njr=s(Ik);fHe=r(njr,"WavLMConfig"),njr.forEach(t),mHe=r(FEe," (WavLM model)"),FEe.forEach(t),gHe=i(y),Km=n(y,"LI",{});var TEe=s(Km);uoe=n(TEe,"STRONG",{});var sjr=s(uoe);hHe=r(sjr,"xglm"),sjr.forEach(t),pHe=r(TEe," \u2014 "),qk=n(TEe,"A",{href:!0});var ljr=s(qk);uHe=r(ljr,"XGLMConfig"),ljr.forEach(t),_He=r(TEe," (XGLM model)"),TEe.forEach(t),bHe=i(y),Zm=n(y,"LI",{});var MEe=s(Zm);_oe=n(MEe,"STRONG",{});var ijr=s(_oe);vHe=r(ijr,"xlm"),ijr.forEach(t),FHe=r(MEe," \u2014 "),Nk=n(MEe,"A",{href:!0});var djr=s(Nk);THe=r(djr,"XLMConfig"),djr.forEach(t),MHe=r(MEe," (XLM model)"),MEe.forEach(t),EHe=i(y),eg=n(y,"LI",{});var EEe=s(eg);boe=n(EEe,"STRONG",{});var cjr=s(boe);CHe=r(cjr,"xlm-prophetnet"),cjr.forEach(t),wHe=r(EEe," \u2014 "),jk=n(EEe,"A",{href:!0});var fjr=s(jk);AHe=r(fjr,"XLMProphetNetConfig"),fjr.forEach(t),yHe=r(EEe," (XLMProphetNet model)"),EEe.forEach(t),LHe=i(y),og=n(y,"LI",{});var CEe=s(og);voe=n(CEe,"STRONG",{});var mjr=s(voe);xHe=r(mjr,"xlm-roberta"),mjr.forEach(t),$He=r(CEe," \u2014 "),Dk=n(CEe,"A",{href:!0});var gjr=s(Dk);kHe=r(gjr,"XLMRobertaConfig"),gjr.forEach(t),SHe=r(CEe," (XLM-RoBERTa model)"),CEe.forEach(t),RHe=i(y),rg=n(y,"LI",{});var wEe=s(rg);Foe=n(wEe,"STRONG",{});var hjr=s(Foe);BHe=r(hjr,"xlm-roberta-xl"),hjr.forEach(t),PHe=r(wEe," \u2014 "),Gk=n(wEe,"A",{href:!0});var pjr=s(Gk);IHe=r(pjr,"XLMRobertaXLConfig"),pjr.forEach(t),qHe=r(wEe," (XLM-RoBERTa-XL model)"),wEe.forEach(t),NHe=i(y),tg=n(y,"LI",{});var AEe=s(tg);Toe=n(AEe,"STRONG",{});var ujr=s(Toe);jHe=r(ujr,"xlnet"),ujr.forEach(t),DHe=r(AEe," \u2014 "),Ok=n(AEe,"A",{href:!0});var _jr=s(Ok);GHe=r(_jr,"XLNetConfig"),_jr.forEach(t),OHe=r(AEe," (XLNet model)"),AEe.forEach(t),VHe=i(y),ag=n(y,"LI",{});var yEe=s(ag);Moe=n(yEe,"STRONG",{});var bjr=s(Moe);XHe=r(bjr,"yolos"),bjr.forEach(t),zHe=r(yEe," \u2014 "),Vk=n(yEe,"A",{href:!0});var vjr=s(Vk);QHe=r(vjr,"YolosConfig"),vjr.forEach(t),WHe=r(yEe," (YOLOS model)"),yEe.forEach(t),HHe=i(y),ng=n(y,"LI",{});var LEe=s(ng);Eoe=n(LEe,"STRONG",{});var Fjr=s(Eoe);UHe=r(Fjr,"yoso"),Fjr.forEach(t),JHe=r(LEe," \u2014 "),Xk=n(LEe,"A",{href:!0});var Tjr=s(Xk);YHe=r(Tjr,"YosoConfig"),Tjr.forEach(t),KHe=r(LEe," (YOSO model)"),LEe.forEach(t),y.forEach(t),ZHe=i(Yr),T(sg.$$.fragment,Yr),Yr.forEach(t),eUe=i(Jr),lg=n(Jr,"DIV",{class:!0});var DIe=s(lg);T(Iw.$$.fragment,DIe),oUe=i(DIe),Coe=n(DIe,"P",{});var Mjr=s(Coe);rUe=r(Mjr,"Register a new configuration for this class."),Mjr.forEach(t),DIe.forEach(t),Jr.forEach(t),zBe=i(f),mi=n(f,"H2",{class:!0});var GIe=s(mi);ig=n(GIe,"A",{id:!0,class:!0,href:!0});var Ejr=s(ig);woe=n(Ejr,"SPAN",{});var Cjr=s(woe);T(qw.$$.fragment,Cjr),Cjr.forEach(t),Ejr.forEach(t),tUe=i(GIe),Aoe=n(GIe,"SPAN",{});var wjr=s(Aoe);aUe=r(wjr,"AutoTokenizer"),wjr.forEach(t),GIe.forEach(t),QBe=i(f),wo=n(f,"DIV",{class:!0});var Ss=s(wo);T(Nw.$$.fragment,Ss),nUe=i(Ss),jw=n(Ss,"P",{});var OIe=s(jw);sUe=r(OIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),zk=n(OIe,"A",{href:!0});var Ajr=s(zk);lUe=r(Ajr,"AutoTokenizer.from_pretrained()"),Ajr.forEach(t),iUe=r(OIe," class method."),OIe.forEach(t),dUe=i(Ss),Dw=n(Ss,"P",{});var VIe=s(Dw);cUe=r(VIe,"This class cannot be instantiated directly using "),yoe=n(VIe,"CODE",{});var yjr=s(yoe);fUe=r(yjr,"__init__()"),yjr.forEach(t),mUe=r(VIe," (throws an error)."),VIe.forEach(t),gUe=i(Ss),Er=n(Ss,"DIV",{class:!0});var Rs=s(Er);T(Gw.$$.fragment,Rs),hUe=i(Rs),Loe=n(Rs,"P",{});var Ljr=s(Loe);pUe=r(Ljr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ljr.forEach(t),uUe=i(Rs),Ta=n(Rs,"P",{});var SC=s(Ta);_Ue=r(SC,"The tokenizer class to instantiate is selected based on the "),xoe=n(SC,"CODE",{});var xjr=s(xoe);bUe=r(xjr,"model_type"),xjr.forEach(t),vUe=r(SC,` property of the config object (either
passed as an argument or loaded from `),$oe=n(SC,"CODE",{});var $jr=s($oe);FUe=r($jr,"pretrained_model_name_or_path"),$jr.forEach(t),TUe=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),koe=n(SC,"CODE",{});var kjr=s(koe);MUe=r(kjr,"pretrained_model_name_or_path"),kjr.forEach(t),EUe=r(SC,":"),SC.forEach(t),CUe=i(Rs),k=n(Rs,"UL",{});var S=s(k);yn=n(S,"LI",{});var qx=s(yn);Soe=n(qx,"STRONG",{});var Sjr=s(Soe);wUe=r(Sjr,"albert"),Sjr.forEach(t),AUe=r(qx," \u2014 "),Qk=n(qx,"A",{href:!0});var Rjr=s(Qk);yUe=r(Rjr,"AlbertTokenizer"),Rjr.forEach(t),LUe=r(qx," or "),Wk=n(qx,"A",{href:!0});var Bjr=s(Wk);xUe=r(Bjr,"AlbertTokenizerFast"),Bjr.forEach(t),$Ue=r(qx," (ALBERT model)"),qx.forEach(t),kUe=i(S),Ln=n(S,"LI",{});var Nx=s(Ln);Roe=n(Nx,"STRONG",{});var Pjr=s(Roe);SUe=r(Pjr,"bart"),Pjr.forEach(t),RUe=r(Nx," \u2014 "),Hk=n(Nx,"A",{href:!0});var Ijr=s(Hk);BUe=r(Ijr,"BartTokenizer"),Ijr.forEach(t),PUe=r(Nx," or "),Uk=n(Nx,"A",{href:!0});var qjr=s(Uk);IUe=r(qjr,"BartTokenizerFast"),qjr.forEach(t),qUe=r(Nx," (BART model)"),Nx.forEach(t),NUe=i(S),xn=n(S,"LI",{});var jx=s(xn);Boe=n(jx,"STRONG",{});var Njr=s(Boe);jUe=r(Njr,"barthez"),Njr.forEach(t),DUe=r(jx," \u2014 "),Jk=n(jx,"A",{href:!0});var jjr=s(Jk);GUe=r(jjr,"BarthezTokenizer"),jjr.forEach(t),OUe=r(jx," or "),Yk=n(jx,"A",{href:!0});var Djr=s(Yk);VUe=r(Djr,"BarthezTokenizerFast"),Djr.forEach(t),XUe=r(jx," (BARThez model)"),jx.forEach(t),zUe=i(S),dg=n(S,"LI",{});var xEe=s(dg);Poe=n(xEe,"STRONG",{});var Gjr=s(Poe);QUe=r(Gjr,"bartpho"),Gjr.forEach(t),WUe=r(xEe," \u2014 "),Kk=n(xEe,"A",{href:!0});var Ojr=s(Kk);HUe=r(Ojr,"BartphoTokenizer"),Ojr.forEach(t),UUe=r(xEe," (BARTpho model)"),xEe.forEach(t),JUe=i(S),$n=n(S,"LI",{});var Dx=s($n);Ioe=n(Dx,"STRONG",{});var Vjr=s(Ioe);YUe=r(Vjr,"bert"),Vjr.forEach(t),KUe=r(Dx," \u2014 "),Zk=n(Dx,"A",{href:!0});var Xjr=s(Zk);ZUe=r(Xjr,"BertTokenizer"),Xjr.forEach(t),eJe=r(Dx," or "),eS=n(Dx,"A",{href:!0});var zjr=s(eS);oJe=r(zjr,"BertTokenizerFast"),zjr.forEach(t),rJe=r(Dx," (BERT model)"),Dx.forEach(t),tJe=i(S),cg=n(S,"LI",{});var $Ee=s(cg);qoe=n($Ee,"STRONG",{});var Qjr=s(qoe);aJe=r(Qjr,"bert-generation"),Qjr.forEach(t),nJe=r($Ee," \u2014 "),oS=n($Ee,"A",{href:!0});var Wjr=s(oS);sJe=r(Wjr,"BertGenerationTokenizer"),Wjr.forEach(t),lJe=r($Ee," (Bert Generation model)"),$Ee.forEach(t),iJe=i(S),fg=n(S,"LI",{});var kEe=s(fg);Noe=n(kEe,"STRONG",{});var Hjr=s(Noe);dJe=r(Hjr,"bert-japanese"),Hjr.forEach(t),cJe=r(kEe," \u2014 "),rS=n(kEe,"A",{href:!0});var Ujr=s(rS);fJe=r(Ujr,"BertJapaneseTokenizer"),Ujr.forEach(t),mJe=r(kEe," (BertJapanese model)"),kEe.forEach(t),gJe=i(S),mg=n(S,"LI",{});var SEe=s(mg);joe=n(SEe,"STRONG",{});var Jjr=s(joe);hJe=r(Jjr,"bertweet"),Jjr.forEach(t),pJe=r(SEe," \u2014 "),tS=n(SEe,"A",{href:!0});var Yjr=s(tS);uJe=r(Yjr,"BertweetTokenizer"),Yjr.forEach(t),_Je=r(SEe," (Bertweet model)"),SEe.forEach(t),bJe=i(S),kn=n(S,"LI",{});var Gx=s(kn);Doe=n(Gx,"STRONG",{});var Kjr=s(Doe);vJe=r(Kjr,"big_bird"),Kjr.forEach(t),FJe=r(Gx," \u2014 "),aS=n(Gx,"A",{href:!0});var Zjr=s(aS);TJe=r(Zjr,"BigBirdTokenizer"),Zjr.forEach(t),MJe=r(Gx," or "),nS=n(Gx,"A",{href:!0});var eDr=s(nS);EJe=r(eDr,"BigBirdTokenizerFast"),eDr.forEach(t),CJe=r(Gx," (BigBird model)"),Gx.forEach(t),wJe=i(S),Sn=n(S,"LI",{});var Ox=s(Sn);Goe=n(Ox,"STRONG",{});var oDr=s(Goe);AJe=r(oDr,"bigbird_pegasus"),oDr.forEach(t),yJe=r(Ox," \u2014 "),sS=n(Ox,"A",{href:!0});var rDr=s(sS);LJe=r(rDr,"PegasusTokenizer"),rDr.forEach(t),xJe=r(Ox," or "),lS=n(Ox,"A",{href:!0});var tDr=s(lS);$Je=r(tDr,"PegasusTokenizerFast"),tDr.forEach(t),kJe=r(Ox," (BigBirdPegasus model)"),Ox.forEach(t),SJe=i(S),Rn=n(S,"LI",{});var Vx=s(Rn);Ooe=n(Vx,"STRONG",{});var aDr=s(Ooe);RJe=r(aDr,"blenderbot"),aDr.forEach(t),BJe=r(Vx," \u2014 "),iS=n(Vx,"A",{href:!0});var nDr=s(iS);PJe=r(nDr,"BlenderbotTokenizer"),nDr.forEach(t),IJe=r(Vx," or "),dS=n(Vx,"A",{href:!0});var sDr=s(dS);qJe=r(sDr,"BlenderbotTokenizerFast"),sDr.forEach(t),NJe=r(Vx," (Blenderbot model)"),Vx.forEach(t),jJe=i(S),gg=n(S,"LI",{});var REe=s(gg);Voe=n(REe,"STRONG",{});var lDr=s(Voe);DJe=r(lDr,"blenderbot-small"),lDr.forEach(t),GJe=r(REe," \u2014 "),cS=n(REe,"A",{href:!0});var iDr=s(cS);OJe=r(iDr,"BlenderbotSmallTokenizer"),iDr.forEach(t),VJe=r(REe," (BlenderbotSmall model)"),REe.forEach(t),XJe=i(S),hg=n(S,"LI",{});var BEe=s(hg);Xoe=n(BEe,"STRONG",{});var dDr=s(Xoe);zJe=r(dDr,"byt5"),dDr.forEach(t),QJe=r(BEe," \u2014 "),fS=n(BEe,"A",{href:!0});var cDr=s(fS);WJe=r(cDr,"ByT5Tokenizer"),cDr.forEach(t),HJe=r(BEe," (ByT5 model)"),BEe.forEach(t),UJe=i(S),Bn=n(S,"LI",{});var Xx=s(Bn);zoe=n(Xx,"STRONG",{});var fDr=s(zoe);JJe=r(fDr,"camembert"),fDr.forEach(t),YJe=r(Xx," \u2014 "),mS=n(Xx,"A",{href:!0});var mDr=s(mS);KJe=r(mDr,"CamembertTokenizer"),mDr.forEach(t),ZJe=r(Xx," or "),gS=n(Xx,"A",{href:!0});var gDr=s(gS);eYe=r(gDr,"CamembertTokenizerFast"),gDr.forEach(t),oYe=r(Xx," (CamemBERT model)"),Xx.forEach(t),rYe=i(S),pg=n(S,"LI",{});var PEe=s(pg);Qoe=n(PEe,"STRONG",{});var hDr=s(Qoe);tYe=r(hDr,"canine"),hDr.forEach(t),aYe=r(PEe," \u2014 "),hS=n(PEe,"A",{href:!0});var pDr=s(hS);nYe=r(pDr,"CanineTokenizer"),pDr.forEach(t),sYe=r(PEe," (Canine model)"),PEe.forEach(t),lYe=i(S),Pn=n(S,"LI",{});var zx=s(Pn);Woe=n(zx,"STRONG",{});var uDr=s(Woe);iYe=r(uDr,"clip"),uDr.forEach(t),dYe=r(zx," \u2014 "),pS=n(zx,"A",{href:!0});var _Dr=s(pS);cYe=r(_Dr,"CLIPTokenizer"),_Dr.forEach(t),fYe=r(zx," or "),uS=n(zx,"A",{href:!0});var bDr=s(uS);mYe=r(bDr,"CLIPTokenizerFast"),bDr.forEach(t),gYe=r(zx," (CLIP model)"),zx.forEach(t),hYe=i(S),In=n(S,"LI",{});var Qx=s(In);Hoe=n(Qx,"STRONG",{});var vDr=s(Hoe);pYe=r(vDr,"convbert"),vDr.forEach(t),uYe=r(Qx," \u2014 "),_S=n(Qx,"A",{href:!0});var FDr=s(_S);_Ye=r(FDr,"ConvBertTokenizer"),FDr.forEach(t),bYe=r(Qx," or "),bS=n(Qx,"A",{href:!0});var TDr=s(bS);vYe=r(TDr,"ConvBertTokenizerFast"),TDr.forEach(t),FYe=r(Qx," (ConvBERT model)"),Qx.forEach(t),TYe=i(S),qn=n(S,"LI",{});var Wx=s(qn);Uoe=n(Wx,"STRONG",{});var MDr=s(Uoe);MYe=r(MDr,"cpm"),MDr.forEach(t),EYe=r(Wx," \u2014 "),vS=n(Wx,"A",{href:!0});var EDr=s(vS);CYe=r(EDr,"CpmTokenizer"),EDr.forEach(t),wYe=r(Wx," or "),FS=n(Wx,"A",{href:!0});var CDr=s(FS);AYe=r(CDr,"CpmTokenizerFast"),CDr.forEach(t),yYe=r(Wx," (CPM model)"),Wx.forEach(t),LYe=i(S),ug=n(S,"LI",{});var IEe=s(ug);Joe=n(IEe,"STRONG",{});var wDr=s(Joe);xYe=r(wDr,"ctrl"),wDr.forEach(t),$Ye=r(IEe," \u2014 "),TS=n(IEe,"A",{href:!0});var ADr=s(TS);kYe=r(ADr,"CTRLTokenizer"),ADr.forEach(t),SYe=r(IEe," (CTRL model)"),IEe.forEach(t),RYe=i(S),Nn=n(S,"LI",{});var Hx=s(Nn);Yoe=n(Hx,"STRONG",{});var yDr=s(Yoe);BYe=r(yDr,"data2vec-text"),yDr.forEach(t),PYe=r(Hx," \u2014 "),MS=n(Hx,"A",{href:!0});var LDr=s(MS);IYe=r(LDr,"RobertaTokenizer"),LDr.forEach(t),qYe=r(Hx," or "),ES=n(Hx,"A",{href:!0});var xDr=s(ES);NYe=r(xDr,"RobertaTokenizerFast"),xDr.forEach(t),jYe=r(Hx," (Data2VecText model)"),Hx.forEach(t),DYe=i(S),jn=n(S,"LI",{});var Ux=s(jn);Koe=n(Ux,"STRONG",{});var $Dr=s(Koe);GYe=r($Dr,"deberta"),$Dr.forEach(t),OYe=r(Ux," \u2014 "),CS=n(Ux,"A",{href:!0});var kDr=s(CS);VYe=r(kDr,"DebertaTokenizer"),kDr.forEach(t),XYe=r(Ux," or "),wS=n(Ux,"A",{href:!0});var SDr=s(wS);zYe=r(SDr,"DebertaTokenizerFast"),SDr.forEach(t),QYe=r(Ux," (DeBERTa model)"),Ux.forEach(t),WYe=i(S),Dn=n(S,"LI",{});var Jx=s(Dn);Zoe=n(Jx,"STRONG",{});var RDr=s(Zoe);HYe=r(RDr,"deberta-v2"),RDr.forEach(t),UYe=r(Jx," \u2014 "),AS=n(Jx,"A",{href:!0});var BDr=s(AS);JYe=r(BDr,"DebertaV2Tokenizer"),BDr.forEach(t),YYe=r(Jx," or "),yS=n(Jx,"A",{href:!0});var PDr=s(yS);KYe=r(PDr,"DebertaV2TokenizerFast"),PDr.forEach(t),ZYe=r(Jx," (DeBERTa-v2 model)"),Jx.forEach(t),eKe=i(S),Gn=n(S,"LI",{});var Yx=s(Gn);ere=n(Yx,"STRONG",{});var IDr=s(ere);oKe=r(IDr,"distilbert"),IDr.forEach(t),rKe=r(Yx," \u2014 "),LS=n(Yx,"A",{href:!0});var qDr=s(LS);tKe=r(qDr,"DistilBertTokenizer"),qDr.forEach(t),aKe=r(Yx," or "),xS=n(Yx,"A",{href:!0});var NDr=s(xS);nKe=r(NDr,"DistilBertTokenizerFast"),NDr.forEach(t),sKe=r(Yx," (DistilBERT model)"),Yx.forEach(t),lKe=i(S),On=n(S,"LI",{});var Kx=s(On);ore=n(Kx,"STRONG",{});var jDr=s(ore);iKe=r(jDr,"dpr"),jDr.forEach(t),dKe=r(Kx," \u2014 "),$S=n(Kx,"A",{href:!0});var DDr=s($S);cKe=r(DDr,"DPRQuestionEncoderTokenizer"),DDr.forEach(t),fKe=r(Kx," or "),kS=n(Kx,"A",{href:!0});var GDr=s(kS);mKe=r(GDr,"DPRQuestionEncoderTokenizerFast"),GDr.forEach(t),gKe=r(Kx," (DPR model)"),Kx.forEach(t),hKe=i(S),Vn=n(S,"LI",{});var Zx=s(Vn);rre=n(Zx,"STRONG",{});var ODr=s(rre);pKe=r(ODr,"electra"),ODr.forEach(t),uKe=r(Zx," \u2014 "),SS=n(Zx,"A",{href:!0});var VDr=s(SS);_Ke=r(VDr,"ElectraTokenizer"),VDr.forEach(t),bKe=r(Zx," or "),RS=n(Zx,"A",{href:!0});var XDr=s(RS);vKe=r(XDr,"ElectraTokenizerFast"),XDr.forEach(t),FKe=r(Zx," (ELECTRA model)"),Zx.forEach(t),TKe=i(S),_g=n(S,"LI",{});var qEe=s(_g);tre=n(qEe,"STRONG",{});var zDr=s(tre);MKe=r(zDr,"flaubert"),zDr.forEach(t),EKe=r(qEe," \u2014 "),BS=n(qEe,"A",{href:!0});var QDr=s(BS);CKe=r(QDr,"FlaubertTokenizer"),QDr.forEach(t),wKe=r(qEe," (FlauBERT model)"),qEe.forEach(t),AKe=i(S),Xn=n(S,"LI",{});var e9=s(Xn);are=n(e9,"STRONG",{});var WDr=s(are);yKe=r(WDr,"fnet"),WDr.forEach(t),LKe=r(e9," \u2014 "),PS=n(e9,"A",{href:!0});var HDr=s(PS);xKe=r(HDr,"FNetTokenizer"),HDr.forEach(t),$Ke=r(e9," or "),IS=n(e9,"A",{href:!0});var UDr=s(IS);kKe=r(UDr,"FNetTokenizerFast"),UDr.forEach(t),SKe=r(e9," (FNet model)"),e9.forEach(t),RKe=i(S),bg=n(S,"LI",{});var NEe=s(bg);nre=n(NEe,"STRONG",{});var JDr=s(nre);BKe=r(JDr,"fsmt"),JDr.forEach(t),PKe=r(NEe," \u2014 "),qS=n(NEe,"A",{href:!0});var YDr=s(qS);IKe=r(YDr,"FSMTTokenizer"),YDr.forEach(t),qKe=r(NEe," (FairSeq Machine-Translation model)"),NEe.forEach(t),NKe=i(S),zn=n(S,"LI",{});var o9=s(zn);sre=n(o9,"STRONG",{});var KDr=s(sre);jKe=r(KDr,"funnel"),KDr.forEach(t),DKe=r(o9," \u2014 "),NS=n(o9,"A",{href:!0});var ZDr=s(NS);GKe=r(ZDr,"FunnelTokenizer"),ZDr.forEach(t),OKe=r(o9," or "),jS=n(o9,"A",{href:!0});var eGr=s(jS);VKe=r(eGr,"FunnelTokenizerFast"),eGr.forEach(t),XKe=r(o9," (Funnel Transformer model)"),o9.forEach(t),zKe=i(S),Qn=n(S,"LI",{});var r9=s(Qn);lre=n(r9,"STRONG",{});var oGr=s(lre);QKe=r(oGr,"gpt2"),oGr.forEach(t),WKe=r(r9," \u2014 "),DS=n(r9,"A",{href:!0});var rGr=s(DS);HKe=r(rGr,"GPT2Tokenizer"),rGr.forEach(t),UKe=r(r9," or "),GS=n(r9,"A",{href:!0});var tGr=s(GS);JKe=r(tGr,"GPT2TokenizerFast"),tGr.forEach(t),YKe=r(r9," (OpenAI GPT-2 model)"),r9.forEach(t),KKe=i(S),Wn=n(S,"LI",{});var t9=s(Wn);ire=n(t9,"STRONG",{});var aGr=s(ire);ZKe=r(aGr,"gpt_neo"),aGr.forEach(t),eZe=r(t9," \u2014 "),OS=n(t9,"A",{href:!0});var nGr=s(OS);oZe=r(nGr,"GPT2Tokenizer"),nGr.forEach(t),rZe=r(t9," or "),VS=n(t9,"A",{href:!0});var sGr=s(VS);tZe=r(sGr,"GPT2TokenizerFast"),sGr.forEach(t),aZe=r(t9," (GPT Neo model)"),t9.forEach(t),nZe=i(S),Hn=n(S,"LI",{});var a9=s(Hn);dre=n(a9,"STRONG",{});var lGr=s(dre);sZe=r(lGr,"gptj"),lGr.forEach(t),lZe=r(a9," \u2014 "),XS=n(a9,"A",{href:!0});var iGr=s(XS);iZe=r(iGr,"GPT2Tokenizer"),iGr.forEach(t),dZe=r(a9," or "),zS=n(a9,"A",{href:!0});var dGr=s(zS);cZe=r(dGr,"GPT2TokenizerFast"),dGr.forEach(t),fZe=r(a9," (GPT-J model)"),a9.forEach(t),mZe=i(S),Un=n(S,"LI",{});var n9=s(Un);cre=n(n9,"STRONG",{});var cGr=s(cre);gZe=r(cGr,"herbert"),cGr.forEach(t),hZe=r(n9," \u2014 "),QS=n(n9,"A",{href:!0});var fGr=s(QS);pZe=r(fGr,"HerbertTokenizer"),fGr.forEach(t),uZe=r(n9," or "),WS=n(n9,"A",{href:!0});var mGr=s(WS);_Ze=r(mGr,"HerbertTokenizerFast"),mGr.forEach(t),bZe=r(n9," (HerBERT model)"),n9.forEach(t),vZe=i(S),vg=n(S,"LI",{});var jEe=s(vg);fre=n(jEe,"STRONG",{});var gGr=s(fre);FZe=r(gGr,"hubert"),gGr.forEach(t),TZe=r(jEe," \u2014 "),HS=n(jEe,"A",{href:!0});var hGr=s(HS);MZe=r(hGr,"Wav2Vec2CTCTokenizer"),hGr.forEach(t),EZe=r(jEe," (Hubert model)"),jEe.forEach(t),CZe=i(S),Jn=n(S,"LI",{});var s9=s(Jn);mre=n(s9,"STRONG",{});var pGr=s(mre);wZe=r(pGr,"ibert"),pGr.forEach(t),AZe=r(s9," \u2014 "),US=n(s9,"A",{href:!0});var uGr=s(US);yZe=r(uGr,"RobertaTokenizer"),uGr.forEach(t),LZe=r(s9," or "),JS=n(s9,"A",{href:!0});var _Gr=s(JS);xZe=r(_Gr,"RobertaTokenizerFast"),_Gr.forEach(t),$Ze=r(s9," (I-BERT model)"),s9.forEach(t),kZe=i(S),Yn=n(S,"LI",{});var l9=s(Yn);gre=n(l9,"STRONG",{});var bGr=s(gre);SZe=r(bGr,"layoutlm"),bGr.forEach(t),RZe=r(l9," \u2014 "),YS=n(l9,"A",{href:!0});var vGr=s(YS);BZe=r(vGr,"LayoutLMTokenizer"),vGr.forEach(t),PZe=r(l9," or "),KS=n(l9,"A",{href:!0});var FGr=s(KS);IZe=r(FGr,"LayoutLMTokenizerFast"),FGr.forEach(t),qZe=r(l9," (LayoutLM model)"),l9.forEach(t),NZe=i(S),Kn=n(S,"LI",{});var i9=s(Kn);hre=n(i9,"STRONG",{});var TGr=s(hre);jZe=r(TGr,"layoutlmv2"),TGr.forEach(t),DZe=r(i9," \u2014 "),ZS=n(i9,"A",{href:!0});var MGr=s(ZS);GZe=r(MGr,"LayoutLMv2Tokenizer"),MGr.forEach(t),OZe=r(i9," or "),eR=n(i9,"A",{href:!0});var EGr=s(eR);VZe=r(EGr,"LayoutLMv2TokenizerFast"),EGr.forEach(t),XZe=r(i9," (LayoutLMv2 model)"),i9.forEach(t),zZe=i(S),Zn=n(S,"LI",{});var d9=s(Zn);pre=n(d9,"STRONG",{});var CGr=s(pre);QZe=r(CGr,"layoutlmv3"),CGr.forEach(t),WZe=r(d9," \u2014 "),oR=n(d9,"A",{href:!0});var wGr=s(oR);HZe=r(wGr,"LayoutLMv2Tokenizer"),wGr.forEach(t),UZe=r(d9," or "),rR=n(d9,"A",{href:!0});var AGr=s(rR);JZe=r(AGr,"LayoutLMv2TokenizerFast"),AGr.forEach(t),YZe=r(d9," (LayoutLMv3 model)"),d9.forEach(t),KZe=i(S),es=n(S,"LI",{});var c9=s(es);ure=n(c9,"STRONG",{});var yGr=s(ure);ZZe=r(yGr,"layoutxlm"),yGr.forEach(t),eeo=r(c9," \u2014 "),tR=n(c9,"A",{href:!0});var LGr=s(tR);oeo=r(LGr,"LayoutXLMTokenizer"),LGr.forEach(t),reo=r(c9," or "),aR=n(c9,"A",{href:!0});var xGr=s(aR);teo=r(xGr,"LayoutXLMTokenizerFast"),xGr.forEach(t),aeo=r(c9," (LayoutXLM model)"),c9.forEach(t),neo=i(S),os=n(S,"LI",{});var f9=s(os);_re=n(f9,"STRONG",{});var $Gr=s(_re);seo=r($Gr,"led"),$Gr.forEach(t),leo=r(f9," \u2014 "),nR=n(f9,"A",{href:!0});var kGr=s(nR);ieo=r(kGr,"LEDTokenizer"),kGr.forEach(t),deo=r(f9," or "),sR=n(f9,"A",{href:!0});var SGr=s(sR);ceo=r(SGr,"LEDTokenizerFast"),SGr.forEach(t),feo=r(f9," (LED model)"),f9.forEach(t),meo=i(S),rs=n(S,"LI",{});var m9=s(rs);bre=n(m9,"STRONG",{});var RGr=s(bre);geo=r(RGr,"longformer"),RGr.forEach(t),heo=r(m9," \u2014 "),lR=n(m9,"A",{href:!0});var BGr=s(lR);peo=r(BGr,"LongformerTokenizer"),BGr.forEach(t),ueo=r(m9," or "),iR=n(m9,"A",{href:!0});var PGr=s(iR);_eo=r(PGr,"LongformerTokenizerFast"),PGr.forEach(t),beo=r(m9," (Longformer model)"),m9.forEach(t),veo=i(S),Fg=n(S,"LI",{});var DEe=s(Fg);vre=n(DEe,"STRONG",{});var IGr=s(vre);Feo=r(IGr,"luke"),IGr.forEach(t),Teo=r(DEe," \u2014 "),dR=n(DEe,"A",{href:!0});var qGr=s(dR);Meo=r(qGr,"LukeTokenizer"),qGr.forEach(t),Eeo=r(DEe," (LUKE model)"),DEe.forEach(t),Ceo=i(S),ts=n(S,"LI",{});var g9=s(ts);Fre=n(g9,"STRONG",{});var NGr=s(Fre);weo=r(NGr,"lxmert"),NGr.forEach(t),Aeo=r(g9," \u2014 "),cR=n(g9,"A",{href:!0});var jGr=s(cR);yeo=r(jGr,"LxmertTokenizer"),jGr.forEach(t),Leo=r(g9," or "),fR=n(g9,"A",{href:!0});var DGr=s(fR);xeo=r(DGr,"LxmertTokenizerFast"),DGr.forEach(t),$eo=r(g9," (LXMERT model)"),g9.forEach(t),keo=i(S),Tg=n(S,"LI",{});var GEe=s(Tg);Tre=n(GEe,"STRONG",{});var GGr=s(Tre);Seo=r(GGr,"m2m_100"),GGr.forEach(t),Reo=r(GEe," \u2014 "),mR=n(GEe,"A",{href:!0});var OGr=s(mR);Beo=r(OGr,"M2M100Tokenizer"),OGr.forEach(t),Peo=r(GEe," (M2M100 model)"),GEe.forEach(t),Ieo=i(S),Mg=n(S,"LI",{});var OEe=s(Mg);Mre=n(OEe,"STRONG",{});var VGr=s(Mre);qeo=r(VGr,"marian"),VGr.forEach(t),Neo=r(OEe," \u2014 "),gR=n(OEe,"A",{href:!0});var XGr=s(gR);jeo=r(XGr,"MarianTokenizer"),XGr.forEach(t),Deo=r(OEe," (Marian model)"),OEe.forEach(t),Geo=i(S),as=n(S,"LI",{});var h9=s(as);Ere=n(h9,"STRONG",{});var zGr=s(Ere);Oeo=r(zGr,"mbart"),zGr.forEach(t),Veo=r(h9," \u2014 "),hR=n(h9,"A",{href:!0});var QGr=s(hR);Xeo=r(QGr,"MBartTokenizer"),QGr.forEach(t),zeo=r(h9," or "),pR=n(h9,"A",{href:!0});var WGr=s(pR);Qeo=r(WGr,"MBartTokenizerFast"),WGr.forEach(t),Weo=r(h9," (mBART model)"),h9.forEach(t),Heo=i(S),ns=n(S,"LI",{});var p9=s(ns);Cre=n(p9,"STRONG",{});var HGr=s(Cre);Ueo=r(HGr,"mbart50"),HGr.forEach(t),Jeo=r(p9," \u2014 "),uR=n(p9,"A",{href:!0});var UGr=s(uR);Yeo=r(UGr,"MBart50Tokenizer"),UGr.forEach(t),Keo=r(p9," or "),_R=n(p9,"A",{href:!0});var JGr=s(_R);Zeo=r(JGr,"MBart50TokenizerFast"),JGr.forEach(t),eoo=r(p9," (mBART-50 model)"),p9.forEach(t),ooo=i(S),ss=n(S,"LI",{});var u9=s(ss);wre=n(u9,"STRONG",{});var YGr=s(wre);roo=r(YGr,"megatron-bert"),YGr.forEach(t),too=r(u9," \u2014 "),bR=n(u9,"A",{href:!0});var KGr=s(bR);aoo=r(KGr,"BertTokenizer"),KGr.forEach(t),noo=r(u9," or "),vR=n(u9,"A",{href:!0});var ZGr=s(vR);soo=r(ZGr,"BertTokenizerFast"),ZGr.forEach(t),loo=r(u9," (MegatronBert model)"),u9.forEach(t),ioo=i(S),Eg=n(S,"LI",{});var VEe=s(Eg);Are=n(VEe,"STRONG",{});var eOr=s(Are);doo=r(eOr,"mluke"),eOr.forEach(t),coo=r(VEe," \u2014 "),FR=n(VEe,"A",{href:!0});var oOr=s(FR);foo=r(oOr,"MLukeTokenizer"),oOr.forEach(t),moo=r(VEe," (mLUKE model)"),VEe.forEach(t),goo=i(S),ls=n(S,"LI",{});var _9=s(ls);yre=n(_9,"STRONG",{});var rOr=s(yre);hoo=r(rOr,"mobilebert"),rOr.forEach(t),poo=r(_9," \u2014 "),TR=n(_9,"A",{href:!0});var tOr=s(TR);uoo=r(tOr,"MobileBertTokenizer"),tOr.forEach(t),_oo=r(_9," or "),MR=n(_9,"A",{href:!0});var aOr=s(MR);boo=r(aOr,"MobileBertTokenizerFast"),aOr.forEach(t),voo=r(_9," (MobileBERT model)"),_9.forEach(t),Foo=i(S),is=n(S,"LI",{});var b9=s(is);Lre=n(b9,"STRONG",{});var nOr=s(Lre);Too=r(nOr,"mpnet"),nOr.forEach(t),Moo=r(b9," \u2014 "),ER=n(b9,"A",{href:!0});var sOr=s(ER);Eoo=r(sOr,"MPNetTokenizer"),sOr.forEach(t),Coo=r(b9," or "),CR=n(b9,"A",{href:!0});var lOr=s(CR);woo=r(lOr,"MPNetTokenizerFast"),lOr.forEach(t),Aoo=r(b9," (MPNet model)"),b9.forEach(t),yoo=i(S),ds=n(S,"LI",{});var v9=s(ds);xre=n(v9,"STRONG",{});var iOr=s(xre);Loo=r(iOr,"mt5"),iOr.forEach(t),xoo=r(v9," \u2014 "),wR=n(v9,"A",{href:!0});var dOr=s(wR);$oo=r(dOr,"MT5Tokenizer"),dOr.forEach(t),koo=r(v9," or "),AR=n(v9,"A",{href:!0});var cOr=s(AR);Soo=r(cOr,"MT5TokenizerFast"),cOr.forEach(t),Roo=r(v9," (mT5 model)"),v9.forEach(t),Boo=i(S),cs=n(S,"LI",{});var F9=s(cs);$re=n(F9,"STRONG",{});var fOr=s($re);Poo=r(fOr,"nystromformer"),fOr.forEach(t),Ioo=r(F9," \u2014 "),yR=n(F9,"A",{href:!0});var mOr=s(yR);qoo=r(mOr,"AlbertTokenizer"),mOr.forEach(t),Noo=r(F9," or "),LR=n(F9,"A",{href:!0});var gOr=s(LR);joo=r(gOr,"AlbertTokenizerFast"),gOr.forEach(t),Doo=r(F9," (Nystromformer model)"),F9.forEach(t),Goo=i(S),fs=n(S,"LI",{});var T9=s(fs);kre=n(T9,"STRONG",{});var hOr=s(kre);Ooo=r(hOr,"openai-gpt"),hOr.forEach(t),Voo=r(T9," \u2014 "),xR=n(T9,"A",{href:!0});var pOr=s(xR);Xoo=r(pOr,"OpenAIGPTTokenizer"),pOr.forEach(t),zoo=r(T9," or "),$R=n(T9,"A",{href:!0});var uOr=s($R);Qoo=r(uOr,"OpenAIGPTTokenizerFast"),uOr.forEach(t),Woo=r(T9," (OpenAI GPT model)"),T9.forEach(t),Hoo=i(S),ms=n(S,"LI",{});var M9=s(ms);Sre=n(M9,"STRONG",{});var _Or=s(Sre);Uoo=r(_Or,"pegasus"),_Or.forEach(t),Joo=r(M9," \u2014 "),kR=n(M9,"A",{href:!0});var bOr=s(kR);Yoo=r(bOr,"PegasusTokenizer"),bOr.forEach(t),Koo=r(M9," or "),SR=n(M9,"A",{href:!0});var vOr=s(SR);Zoo=r(vOr,"PegasusTokenizerFast"),vOr.forEach(t),ero=r(M9," (Pegasus model)"),M9.forEach(t),oro=i(S),Cg=n(S,"LI",{});var XEe=s(Cg);Rre=n(XEe,"STRONG",{});var FOr=s(Rre);rro=r(FOr,"perceiver"),FOr.forEach(t),tro=r(XEe," \u2014 "),RR=n(XEe,"A",{href:!0});var TOr=s(RR);aro=r(TOr,"PerceiverTokenizer"),TOr.forEach(t),nro=r(XEe," (Perceiver model)"),XEe.forEach(t),sro=i(S),wg=n(S,"LI",{});var zEe=s(wg);Bre=n(zEe,"STRONG",{});var MOr=s(Bre);lro=r(MOr,"phobert"),MOr.forEach(t),iro=r(zEe," \u2014 "),BR=n(zEe,"A",{href:!0});var EOr=s(BR);dro=r(EOr,"PhobertTokenizer"),EOr.forEach(t),cro=r(zEe," (PhoBERT model)"),zEe.forEach(t),fro=i(S),Ag=n(S,"LI",{});var QEe=s(Ag);Pre=n(QEe,"STRONG",{});var COr=s(Pre);mro=r(COr,"plbart"),COr.forEach(t),gro=r(QEe," \u2014 "),PR=n(QEe,"A",{href:!0});var wOr=s(PR);hro=r(wOr,"PLBartTokenizer"),wOr.forEach(t),pro=r(QEe," (PLBart model)"),QEe.forEach(t),uro=i(S),yg=n(S,"LI",{});var WEe=s(yg);Ire=n(WEe,"STRONG",{});var AOr=s(Ire);_ro=r(AOr,"prophetnet"),AOr.forEach(t),bro=r(WEe," \u2014 "),IR=n(WEe,"A",{href:!0});var yOr=s(IR);vro=r(yOr,"ProphetNetTokenizer"),yOr.forEach(t),Fro=r(WEe," (ProphetNet model)"),WEe.forEach(t),Tro=i(S),gs=n(S,"LI",{});var E9=s(gs);qre=n(E9,"STRONG",{});var LOr=s(qre);Mro=r(LOr,"qdqbert"),LOr.forEach(t),Ero=r(E9," \u2014 "),qR=n(E9,"A",{href:!0});var xOr=s(qR);Cro=r(xOr,"BertTokenizer"),xOr.forEach(t),wro=r(E9," or "),NR=n(E9,"A",{href:!0});var $Or=s(NR);Aro=r($Or,"BertTokenizerFast"),$Or.forEach(t),yro=r(E9," (QDQBert model)"),E9.forEach(t),Lro=i(S),Lg=n(S,"LI",{});var HEe=s(Lg);Nre=n(HEe,"STRONG",{});var kOr=s(Nre);xro=r(kOr,"rag"),kOr.forEach(t),$ro=r(HEe," \u2014 "),jR=n(HEe,"A",{href:!0});var SOr=s(jR);kro=r(SOr,"RagTokenizer"),SOr.forEach(t),Sro=r(HEe," (RAG model)"),HEe.forEach(t),Rro=i(S),hs=n(S,"LI",{});var C9=s(hs);jre=n(C9,"STRONG",{});var ROr=s(jre);Bro=r(ROr,"realm"),ROr.forEach(t),Pro=r(C9," \u2014 "),DR=n(C9,"A",{href:!0});var BOr=s(DR);Iro=r(BOr,"RealmTokenizer"),BOr.forEach(t),qro=r(C9," or "),GR=n(C9,"A",{href:!0});var POr=s(GR);Nro=r(POr,"RealmTokenizerFast"),POr.forEach(t),jro=r(C9," (Realm model)"),C9.forEach(t),Dro=i(S),ps=n(S,"LI",{});var w9=s(ps);Dre=n(w9,"STRONG",{});var IOr=s(Dre);Gro=r(IOr,"reformer"),IOr.forEach(t),Oro=r(w9," \u2014 "),OR=n(w9,"A",{href:!0});var qOr=s(OR);Vro=r(qOr,"ReformerTokenizer"),qOr.forEach(t),Xro=r(w9," or "),VR=n(w9,"A",{href:!0});var NOr=s(VR);zro=r(NOr,"ReformerTokenizerFast"),NOr.forEach(t),Qro=r(w9," (Reformer model)"),w9.forEach(t),Wro=i(S),us=n(S,"LI",{});var A9=s(us);Gre=n(A9,"STRONG",{});var jOr=s(Gre);Hro=r(jOr,"rembert"),jOr.forEach(t),Uro=r(A9," \u2014 "),XR=n(A9,"A",{href:!0});var DOr=s(XR);Jro=r(DOr,"RemBertTokenizer"),DOr.forEach(t),Yro=r(A9," or "),zR=n(A9,"A",{href:!0});var GOr=s(zR);Kro=r(GOr,"RemBertTokenizerFast"),GOr.forEach(t),Zro=r(A9," (RemBERT model)"),A9.forEach(t),eto=i(S),_s=n(S,"LI",{});var y9=s(_s);Ore=n(y9,"STRONG",{});var OOr=s(Ore);oto=r(OOr,"retribert"),OOr.forEach(t),rto=r(y9," \u2014 "),QR=n(y9,"A",{href:!0});var VOr=s(QR);tto=r(VOr,"RetriBertTokenizer"),VOr.forEach(t),ato=r(y9," or "),WR=n(y9,"A",{href:!0});var XOr=s(WR);nto=r(XOr,"RetriBertTokenizerFast"),XOr.forEach(t),sto=r(y9," (RetriBERT model)"),y9.forEach(t),lto=i(S),bs=n(S,"LI",{});var L9=s(bs);Vre=n(L9,"STRONG",{});var zOr=s(Vre);ito=r(zOr,"roberta"),zOr.forEach(t),dto=r(L9," \u2014 "),HR=n(L9,"A",{href:!0});var QOr=s(HR);cto=r(QOr,"RobertaTokenizer"),QOr.forEach(t),fto=r(L9," or "),UR=n(L9,"A",{href:!0});var WOr=s(UR);mto=r(WOr,"RobertaTokenizerFast"),WOr.forEach(t),gto=r(L9," (RoBERTa model)"),L9.forEach(t),hto=i(S),vs=n(S,"LI",{});var x9=s(vs);Xre=n(x9,"STRONG",{});var HOr=s(Xre);pto=r(HOr,"roformer"),HOr.forEach(t),uto=r(x9," \u2014 "),JR=n(x9,"A",{href:!0});var UOr=s(JR);_to=r(UOr,"RoFormerTokenizer"),UOr.forEach(t),bto=r(x9," or "),YR=n(x9,"A",{href:!0});var JOr=s(YR);vto=r(JOr,"RoFormerTokenizerFast"),JOr.forEach(t),Fto=r(x9," (RoFormer model)"),x9.forEach(t),Tto=i(S),xg=n(S,"LI",{});var UEe=s(xg);zre=n(UEe,"STRONG",{});var YOr=s(zre);Mto=r(YOr,"speech_to_text"),YOr.forEach(t),Eto=r(UEe," \u2014 "),KR=n(UEe,"A",{href:!0});var KOr=s(KR);Cto=r(KOr,"Speech2TextTokenizer"),KOr.forEach(t),wto=r(UEe," (Speech2Text model)"),UEe.forEach(t),Ato=i(S),$g=n(S,"LI",{});var JEe=s($g);Qre=n(JEe,"STRONG",{});var ZOr=s(Qre);yto=r(ZOr,"speech_to_text_2"),ZOr.forEach(t),Lto=r(JEe," \u2014 "),ZR=n(JEe,"A",{href:!0});var eVr=s(ZR);xto=r(eVr,"Speech2Text2Tokenizer"),eVr.forEach(t),$to=r(JEe," (Speech2Text2 model)"),JEe.forEach(t),kto=i(S),Fs=n(S,"LI",{});var $9=s(Fs);Wre=n($9,"STRONG",{});var oVr=s(Wre);Sto=r(oVr,"splinter"),oVr.forEach(t),Rto=r($9," \u2014 "),eB=n($9,"A",{href:!0});var rVr=s(eB);Bto=r(rVr,"SplinterTokenizer"),rVr.forEach(t),Pto=r($9," or "),oB=n($9,"A",{href:!0});var tVr=s(oB);Ito=r(tVr,"SplinterTokenizerFast"),tVr.forEach(t),qto=r($9," (Splinter model)"),$9.forEach(t),Nto=i(S),Ts=n(S,"LI",{});var k9=s(Ts);Hre=n(k9,"STRONG",{});var aVr=s(Hre);jto=r(aVr,"squeezebert"),aVr.forEach(t),Dto=r(k9," \u2014 "),rB=n(k9,"A",{href:!0});var nVr=s(rB);Gto=r(nVr,"SqueezeBertTokenizer"),nVr.forEach(t),Oto=r(k9," or "),tB=n(k9,"A",{href:!0});var sVr=s(tB);Vto=r(sVr,"SqueezeBertTokenizerFast"),sVr.forEach(t),Xto=r(k9," (SqueezeBERT model)"),k9.forEach(t),zto=i(S),Ms=n(S,"LI",{});var S9=s(Ms);Ure=n(S9,"STRONG",{});var lVr=s(Ure);Qto=r(lVr,"t5"),lVr.forEach(t),Wto=r(S9," \u2014 "),aB=n(S9,"A",{href:!0});var iVr=s(aB);Hto=r(iVr,"T5Tokenizer"),iVr.forEach(t),Uto=r(S9," or "),nB=n(S9,"A",{href:!0});var dVr=s(nB);Jto=r(dVr,"T5TokenizerFast"),dVr.forEach(t),Yto=r(S9," (T5 model)"),S9.forEach(t),Kto=i(S),kg=n(S,"LI",{});var YEe=s(kg);Jre=n(YEe,"STRONG",{});var cVr=s(Jre);Zto=r(cVr,"tapas"),cVr.forEach(t),eao=r(YEe," \u2014 "),sB=n(YEe,"A",{href:!0});var fVr=s(sB);oao=r(fVr,"TapasTokenizer"),fVr.forEach(t),rao=r(YEe," (TAPAS model)"),YEe.forEach(t),tao=i(S),Sg=n(S,"LI",{});var KEe=s(Sg);Yre=n(KEe,"STRONG",{});var mVr=s(Yre);aao=r(mVr,"tapex"),mVr.forEach(t),nao=r(KEe," \u2014 "),lB=n(KEe,"A",{href:!0});var gVr=s(lB);sao=r(gVr,"TapexTokenizer"),gVr.forEach(t),lao=r(KEe," (TAPEX model)"),KEe.forEach(t),iao=i(S),Rg=n(S,"LI",{});var ZEe=s(Rg);Kre=n(ZEe,"STRONG",{});var hVr=s(Kre);dao=r(hVr,"transfo-xl"),hVr.forEach(t),cao=r(ZEe," \u2014 "),iB=n(ZEe,"A",{href:!0});var pVr=s(iB);fao=r(pVr,"TransfoXLTokenizer"),pVr.forEach(t),mao=r(ZEe," (Transformer-XL model)"),ZEe.forEach(t),gao=i(S),Es=n(S,"LI",{});var R9=s(Es);Zre=n(R9,"STRONG",{});var uVr=s(Zre);hao=r(uVr,"visual_bert"),uVr.forEach(t),pao=r(R9," \u2014 "),dB=n(R9,"A",{href:!0});var _Vr=s(dB);uao=r(_Vr,"BertTokenizer"),_Vr.forEach(t),_ao=r(R9," or "),cB=n(R9,"A",{href:!0});var bVr=s(cB);bao=r(bVr,"BertTokenizerFast"),bVr.forEach(t),vao=r(R9," (VisualBert model)"),R9.forEach(t),Fao=i(S),Bg=n(S,"LI",{});var e5e=s(Bg);ete=n(e5e,"STRONG",{});var vVr=s(ete);Tao=r(vVr,"wav2vec2"),vVr.forEach(t),Mao=r(e5e," \u2014 "),fB=n(e5e,"A",{href:!0});var FVr=s(fB);Eao=r(FVr,"Wav2Vec2CTCTokenizer"),FVr.forEach(t),Cao=r(e5e," (Wav2Vec2 model)"),e5e.forEach(t),wao=i(S),Pg=n(S,"LI",{});var o5e=s(Pg);ote=n(o5e,"STRONG",{});var TVr=s(ote);Aao=r(TVr,"wav2vec2_phoneme"),TVr.forEach(t),yao=r(o5e," \u2014 "),mB=n(o5e,"A",{href:!0});var MVr=s(mB);Lao=r(MVr,"Wav2Vec2PhonemeCTCTokenizer"),MVr.forEach(t),xao=r(o5e," (Wav2Vec2Phoneme model)"),o5e.forEach(t),$ao=i(S),Cs=n(S,"LI",{});var B9=s(Cs);rte=n(B9,"STRONG",{});var EVr=s(rte);kao=r(EVr,"xglm"),EVr.forEach(t),Sao=r(B9," \u2014 "),gB=n(B9,"A",{href:!0});var CVr=s(gB);Rao=r(CVr,"XGLMTokenizer"),CVr.forEach(t),Bao=r(B9," or "),hB=n(B9,"A",{href:!0});var wVr=s(hB);Pao=r(wVr,"XGLMTokenizerFast"),wVr.forEach(t),Iao=r(B9," (XGLM model)"),B9.forEach(t),qao=i(S),Ig=n(S,"LI",{});var r5e=s(Ig);tte=n(r5e,"STRONG",{});var AVr=s(tte);Nao=r(AVr,"xlm"),AVr.forEach(t),jao=r(r5e," \u2014 "),pB=n(r5e,"A",{href:!0});var yVr=s(pB);Dao=r(yVr,"XLMTokenizer"),yVr.forEach(t),Gao=r(r5e," (XLM model)"),r5e.forEach(t),Oao=i(S),qg=n(S,"LI",{});var t5e=s(qg);ate=n(t5e,"STRONG",{});var LVr=s(ate);Vao=r(LVr,"xlm-prophetnet"),LVr.forEach(t),Xao=r(t5e," \u2014 "),uB=n(t5e,"A",{href:!0});var xVr=s(uB);zao=r(xVr,"XLMProphetNetTokenizer"),xVr.forEach(t),Qao=r(t5e," (XLMProphetNet model)"),t5e.forEach(t),Wao=i(S),ws=n(S,"LI",{});var P9=s(ws);nte=n(P9,"STRONG",{});var $Vr=s(nte);Hao=r($Vr,"xlm-roberta"),$Vr.forEach(t),Uao=r(P9," \u2014 "),_B=n(P9,"A",{href:!0});var kVr=s(_B);Jao=r(kVr,"XLMRobertaTokenizer"),kVr.forEach(t),Yao=r(P9," or "),bB=n(P9,"A",{href:!0});var SVr=s(bB);Kao=r(SVr,"XLMRobertaTokenizerFast"),SVr.forEach(t),Zao=r(P9," (XLM-RoBERTa model)"),P9.forEach(t),eno=i(S),As=n(S,"LI",{});var I9=s(As);ste=n(I9,"STRONG",{});var RVr=s(ste);ono=r(RVr,"xlm-roberta-xl"),RVr.forEach(t),rno=r(I9," \u2014 "),vB=n(I9,"A",{href:!0});var BVr=s(vB);tno=r(BVr,"RobertaTokenizer"),BVr.forEach(t),ano=r(I9," or "),FB=n(I9,"A",{href:!0});var PVr=s(FB);nno=r(PVr,"RobertaTokenizerFast"),PVr.forEach(t),sno=r(I9," (XLM-RoBERTa-XL model)"),I9.forEach(t),lno=i(S),ys=n(S,"LI",{});var q9=s(ys);lte=n(q9,"STRONG",{});var IVr=s(lte);ino=r(IVr,"xlnet"),IVr.forEach(t),dno=r(q9," \u2014 "),TB=n(q9,"A",{href:!0});var qVr=s(TB);cno=r(qVr,"XLNetTokenizer"),qVr.forEach(t),fno=r(q9," or "),MB=n(q9,"A",{href:!0});var NVr=s(MB);mno=r(NVr,"XLNetTokenizerFast"),NVr.forEach(t),gno=r(q9," (XLNet model)"),q9.forEach(t),hno=i(S),Ls=n(S,"LI",{});var N9=s(Ls);ite=n(N9,"STRONG",{});var jVr=s(ite);pno=r(jVr,"yoso"),jVr.forEach(t),uno=r(N9," \u2014 "),EB=n(N9,"A",{href:!0});var DVr=s(EB);_no=r(DVr,"AlbertTokenizer"),DVr.forEach(t),bno=r(N9," or "),CB=n(N9,"A",{href:!0});var GVr=s(CB);vno=r(GVr,"AlbertTokenizerFast"),GVr.forEach(t),Fno=r(N9," (YOSO model)"),N9.forEach(t),S.forEach(t),Tno=i(Rs),T(Ng.$$.fragment,Rs),Rs.forEach(t),Mno=i(Ss),jg=n(Ss,"DIV",{class:!0});var XIe=s(jg);T(Ow.$$.fragment,XIe),Eno=i(XIe),dte=n(XIe,"P",{});var OVr=s(dte);Cno=r(OVr,"Register a new tokenizer in this mapping."),OVr.forEach(t),XIe.forEach(t),Ss.forEach(t),WBe=i(f),gi=n(f,"H2",{class:!0});var zIe=s(gi);Dg=n(zIe,"A",{id:!0,class:!0,href:!0});var VVr=s(Dg);cte=n(VVr,"SPAN",{});var XVr=s(cte);T(Vw.$$.fragment,XVr),XVr.forEach(t),VVr.forEach(t),wno=i(zIe),fte=n(zIe,"SPAN",{});var zVr=s(fte);Ano=r(zVr,"AutoFeatureExtractor"),zVr.forEach(t),zIe.forEach(t),HBe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(Xw.$$.fragment,Bs),yno=i(Bs),zw=n(Bs,"P",{});var QIe=s(zw);Lno=r(QIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),wB=n(QIe,"A",{href:!0});var QVr=s(wB);xno=r(QVr,"AutoFeatureExtractor.from_pretrained()"),QVr.forEach(t),$no=r(QIe," class method."),QIe.forEach(t),kno=i(Bs),Qw=n(Bs,"P",{});var WIe=s(Qw);Sno=r(WIe,"This class cannot be instantiated directly using "),mte=n(WIe,"CODE",{});var WVr=s(mte);Rno=r(WVr,"__init__()"),WVr.forEach(t),Bno=r(WIe," (throws an error)."),WIe.forEach(t),Pno=i(Bs),Qe=n(Bs,"DIV",{class:!0});var Ht=s(Qe);T(Ww.$$.fragment,Ht),Ino=i(Ht),gte=n(Ht,"P",{});var HVr=s(gte);qno=r(HVr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),HVr.forEach(t),Nno=i(Ht),Ma=n(Ht,"P",{});var RC=s(Ma);jno=r(RC,"The feature extractor class to instantiate is selected based on the "),hte=n(RC,"CODE",{});var UVr=s(hte);Dno=r(UVr,"model_type"),UVr.forEach(t),Gno=r(RC,` property of the config object
(either passed as an argument or loaded from `),pte=n(RC,"CODE",{});var JVr=s(pte);Ono=r(JVr,"pretrained_model_name_or_path"),JVr.forEach(t),Vno=r(RC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ute=n(RC,"CODE",{});var YVr=s(ute);Xno=r(YVr,"pretrained_model_name_or_path"),YVr.forEach(t),zno=r(RC,":"),RC.forEach(t),Qno=i(Ht),oe=n(Ht,"UL",{});var ae=s(oe);Gg=n(ae,"LI",{});var a5e=s(Gg);_te=n(a5e,"STRONG",{});var KVr=s(_te);Wno=r(KVr,"beit"),KVr.forEach(t),Hno=r(a5e," \u2014 "),AB=n(a5e,"A",{href:!0});var ZVr=s(AB);Uno=r(ZVr,"BeitFeatureExtractor"),ZVr.forEach(t),Jno=r(a5e," (BEiT model)"),a5e.forEach(t),Yno=i(ae),Og=n(ae,"LI",{});var n5e=s(Og);bte=n(n5e,"STRONG",{});var eXr=s(bte);Kno=r(eXr,"clip"),eXr.forEach(t),Zno=r(n5e," \u2014 "),yB=n(n5e,"A",{href:!0});var oXr=s(yB);eso=r(oXr,"CLIPFeatureExtractor"),oXr.forEach(t),oso=r(n5e," (CLIP model)"),n5e.forEach(t),rso=i(ae),Vg=n(ae,"LI",{});var s5e=s(Vg);vte=n(s5e,"STRONG",{});var rXr=s(vte);tso=r(rXr,"convnext"),rXr.forEach(t),aso=r(s5e," \u2014 "),LB=n(s5e,"A",{href:!0});var tXr=s(LB);nso=r(tXr,"ConvNextFeatureExtractor"),tXr.forEach(t),sso=r(s5e," (ConvNext model)"),s5e.forEach(t),lso=i(ae),Xg=n(ae,"LI",{});var l5e=s(Xg);Fte=n(l5e,"STRONG",{});var aXr=s(Fte);iso=r(aXr,"data2vec-audio"),aXr.forEach(t),dso=r(l5e," \u2014 "),xB=n(l5e,"A",{href:!0});var nXr=s(xB);cso=r(nXr,"Wav2Vec2FeatureExtractor"),nXr.forEach(t),fso=r(l5e," (Data2VecAudio model)"),l5e.forEach(t),mso=i(ae),zg=n(ae,"LI",{});var i5e=s(zg);Tte=n(i5e,"STRONG",{});var sXr=s(Tte);gso=r(sXr,"data2vec-vision"),sXr.forEach(t),hso=r(i5e," \u2014 "),$B=n(i5e,"A",{href:!0});var lXr=s($B);pso=r(lXr,"BeitFeatureExtractor"),lXr.forEach(t),uso=r(i5e," (Data2VecVision model)"),i5e.forEach(t),_so=i(ae),Qg=n(ae,"LI",{});var d5e=s(Qg);Mte=n(d5e,"STRONG",{});var iXr=s(Mte);bso=r(iXr,"deit"),iXr.forEach(t),vso=r(d5e," \u2014 "),kB=n(d5e,"A",{href:!0});var dXr=s(kB);Fso=r(dXr,"DeiTFeatureExtractor"),dXr.forEach(t),Tso=r(d5e," (DeiT model)"),d5e.forEach(t),Mso=i(ae),Wg=n(ae,"LI",{});var c5e=s(Wg);Ete=n(c5e,"STRONG",{});var cXr=s(Ete);Eso=r(cXr,"detr"),cXr.forEach(t),Cso=r(c5e," \u2014 "),SB=n(c5e,"A",{href:!0});var fXr=s(SB);wso=r(fXr,"DetrFeatureExtractor"),fXr.forEach(t),Aso=r(c5e," (DETR model)"),c5e.forEach(t),yso=i(ae),Hg=n(ae,"LI",{});var f5e=s(Hg);Cte=n(f5e,"STRONG",{});var mXr=s(Cte);Lso=r(mXr,"dpt"),mXr.forEach(t),xso=r(f5e," \u2014 "),RB=n(f5e,"A",{href:!0});var gXr=s(RB);$so=r(gXr,"DPTFeatureExtractor"),gXr.forEach(t),kso=r(f5e," (DPT model)"),f5e.forEach(t),Sso=i(ae),Ug=n(ae,"LI",{});var m5e=s(Ug);wte=n(m5e,"STRONG",{});var hXr=s(wte);Rso=r(hXr,"glpn"),hXr.forEach(t),Bso=r(m5e," \u2014 "),BB=n(m5e,"A",{href:!0});var pXr=s(BB);Pso=r(pXr,"GLPNFeatureExtractor"),pXr.forEach(t),Iso=r(m5e," (GLPN model)"),m5e.forEach(t),qso=i(ae),Jg=n(ae,"LI",{});var g5e=s(Jg);Ate=n(g5e,"STRONG",{});var uXr=s(Ate);Nso=r(uXr,"hubert"),uXr.forEach(t),jso=r(g5e," \u2014 "),PB=n(g5e,"A",{href:!0});var _Xr=s(PB);Dso=r(_Xr,"Wav2Vec2FeatureExtractor"),_Xr.forEach(t),Gso=r(g5e," (Hubert model)"),g5e.forEach(t),Oso=i(ae),Yg=n(ae,"LI",{});var h5e=s(Yg);yte=n(h5e,"STRONG",{});var bXr=s(yte);Vso=r(bXr,"layoutlmv2"),bXr.forEach(t),Xso=r(h5e," \u2014 "),IB=n(h5e,"A",{href:!0});var vXr=s(IB);zso=r(vXr,"LayoutLMv2FeatureExtractor"),vXr.forEach(t),Qso=r(h5e," (LayoutLMv2 model)"),h5e.forEach(t),Wso=i(ae),Kg=n(ae,"LI",{});var p5e=s(Kg);Lte=n(p5e,"STRONG",{});var FXr=s(Lte);Hso=r(FXr,"layoutlmv3"),FXr.forEach(t),Uso=r(p5e," \u2014 "),qB=n(p5e,"A",{href:!0});var TXr=s(qB);Jso=r(TXr,"LayoutLMv3FeatureExtractor"),TXr.forEach(t),Yso=r(p5e," (LayoutLMv3 model)"),p5e.forEach(t),Kso=i(ae),Zg=n(ae,"LI",{});var u5e=s(Zg);xte=n(u5e,"STRONG",{});var MXr=s(xte);Zso=r(MXr,"maskformer"),MXr.forEach(t),elo=r(u5e," \u2014 "),NB=n(u5e,"A",{href:!0});var EXr=s(NB);olo=r(EXr,"MaskFormerFeatureExtractor"),EXr.forEach(t),rlo=r(u5e," (MaskFormer model)"),u5e.forEach(t),tlo=i(ae),eh=n(ae,"LI",{});var _5e=s(eh);$te=n(_5e,"STRONG",{});var CXr=s($te);alo=r(CXr,"perceiver"),CXr.forEach(t),nlo=r(_5e," \u2014 "),jB=n(_5e,"A",{href:!0});var wXr=s(jB);slo=r(wXr,"PerceiverFeatureExtractor"),wXr.forEach(t),llo=r(_5e," (Perceiver model)"),_5e.forEach(t),ilo=i(ae),oh=n(ae,"LI",{});var b5e=s(oh);kte=n(b5e,"STRONG",{});var AXr=s(kte);dlo=r(AXr,"poolformer"),AXr.forEach(t),clo=r(b5e," \u2014 "),DB=n(b5e,"A",{href:!0});var yXr=s(DB);flo=r(yXr,"PoolFormerFeatureExtractor"),yXr.forEach(t),mlo=r(b5e," (PoolFormer model)"),b5e.forEach(t),glo=i(ae),rh=n(ae,"LI",{});var v5e=s(rh);Ste=n(v5e,"STRONG",{});var LXr=s(Ste);hlo=r(LXr,"regnet"),LXr.forEach(t),plo=r(v5e," \u2014 "),GB=n(v5e,"A",{href:!0});var xXr=s(GB);ulo=r(xXr,"ConvNextFeatureExtractor"),xXr.forEach(t),_lo=r(v5e," (RegNet model)"),v5e.forEach(t),blo=i(ae),th=n(ae,"LI",{});var F5e=s(th);Rte=n(F5e,"STRONG",{});var $Xr=s(Rte);vlo=r($Xr,"resnet"),$Xr.forEach(t),Flo=r(F5e," \u2014 "),OB=n(F5e,"A",{href:!0});var kXr=s(OB);Tlo=r(kXr,"ConvNextFeatureExtractor"),kXr.forEach(t),Mlo=r(F5e," (ResNet model)"),F5e.forEach(t),Elo=i(ae),ah=n(ae,"LI",{});var T5e=s(ah);Bte=n(T5e,"STRONG",{});var SXr=s(Bte);Clo=r(SXr,"segformer"),SXr.forEach(t),wlo=r(T5e," \u2014 "),VB=n(T5e,"A",{href:!0});var RXr=s(VB);Alo=r(RXr,"SegformerFeatureExtractor"),RXr.forEach(t),ylo=r(T5e," (SegFormer model)"),T5e.forEach(t),Llo=i(ae),nh=n(ae,"LI",{});var M5e=s(nh);Pte=n(M5e,"STRONG",{});var BXr=s(Pte);xlo=r(BXr,"speech_to_text"),BXr.forEach(t),$lo=r(M5e," \u2014 "),XB=n(M5e,"A",{href:!0});var PXr=s(XB);klo=r(PXr,"Speech2TextFeatureExtractor"),PXr.forEach(t),Slo=r(M5e," (Speech2Text model)"),M5e.forEach(t),Rlo=i(ae),sh=n(ae,"LI",{});var E5e=s(sh);Ite=n(E5e,"STRONG",{});var IXr=s(Ite);Blo=r(IXr,"swin"),IXr.forEach(t),Plo=r(E5e," \u2014 "),zB=n(E5e,"A",{href:!0});var qXr=s(zB);Ilo=r(qXr,"ViTFeatureExtractor"),qXr.forEach(t),qlo=r(E5e," (Swin model)"),E5e.forEach(t),Nlo=i(ae),lh=n(ae,"LI",{});var C5e=s(lh);qte=n(C5e,"STRONG",{});var NXr=s(qte);jlo=r(NXr,"van"),NXr.forEach(t),Dlo=r(C5e," \u2014 "),QB=n(C5e,"A",{href:!0});var jXr=s(QB);Glo=r(jXr,"ConvNextFeatureExtractor"),jXr.forEach(t),Olo=r(C5e," (VAN model)"),C5e.forEach(t),Vlo=i(ae),ih=n(ae,"LI",{});var w5e=s(ih);Nte=n(w5e,"STRONG",{});var DXr=s(Nte);Xlo=r(DXr,"vit"),DXr.forEach(t),zlo=r(w5e," \u2014 "),WB=n(w5e,"A",{href:!0});var GXr=s(WB);Qlo=r(GXr,"ViTFeatureExtractor"),GXr.forEach(t),Wlo=r(w5e," (ViT model)"),w5e.forEach(t),Hlo=i(ae),dh=n(ae,"LI",{});var A5e=s(dh);jte=n(A5e,"STRONG",{});var OXr=s(jte);Ulo=r(OXr,"vit_mae"),OXr.forEach(t),Jlo=r(A5e," \u2014 "),HB=n(A5e,"A",{href:!0});var VXr=s(HB);Ylo=r(VXr,"ViTFeatureExtractor"),VXr.forEach(t),Klo=r(A5e," (ViTMAE model)"),A5e.forEach(t),Zlo=i(ae),ch=n(ae,"LI",{});var y5e=s(ch);Dte=n(y5e,"STRONG",{});var XXr=s(Dte);eio=r(XXr,"wav2vec2"),XXr.forEach(t),oio=r(y5e," \u2014 "),UB=n(y5e,"A",{href:!0});var zXr=s(UB);rio=r(zXr,"Wav2Vec2FeatureExtractor"),zXr.forEach(t),tio=r(y5e," (Wav2Vec2 model)"),y5e.forEach(t),aio=i(ae),fh=n(ae,"LI",{});var L5e=s(fh);Gte=n(L5e,"STRONG",{});var QXr=s(Gte);nio=r(QXr,"yolos"),QXr.forEach(t),sio=r(L5e," \u2014 "),JB=n(L5e,"A",{href:!0});var WXr=s(JB);lio=r(WXr,"YolosFeatureExtractor"),WXr.forEach(t),iio=r(L5e," (YOLOS model)"),L5e.forEach(t),ae.forEach(t),dio=i(Ht),T(mh.$$.fragment,Ht),cio=i(Ht),T(gh.$$.fragment,Ht),Ht.forEach(t),fio=i(Bs),hh=n(Bs,"DIV",{class:!0});var HIe=s(hh);T(Hw.$$.fragment,HIe),mio=i(HIe),Ote=n(HIe,"P",{});var HXr=s(Ote);gio=r(HXr,"Register a new feature extractor for this class."),HXr.forEach(t),HIe.forEach(t),Bs.forEach(t),UBe=i(f),hi=n(f,"H2",{class:!0});var UIe=s(hi);ph=n(UIe,"A",{id:!0,class:!0,href:!0});var UXr=s(ph);Vte=n(UXr,"SPAN",{});var JXr=s(Vte);T(Uw.$$.fragment,JXr),JXr.forEach(t),UXr.forEach(t),hio=i(UIe),Xte=n(UIe,"SPAN",{});var YXr=s(Xte);pio=r(YXr,"AutoProcessor"),YXr.forEach(t),UIe.forEach(t),JBe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(Jw.$$.fragment,Ps),uio=i(Ps),Yw=n(Ps,"P",{});var JIe=s(Yw);_io=r(JIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),YB=n(JIe,"A",{href:!0});var KXr=s(YB);bio=r(KXr,"AutoProcessor.from_pretrained()"),KXr.forEach(t),vio=r(JIe," class method."),JIe.forEach(t),Fio=i(Ps),Kw=n(Ps,"P",{});var YIe=s(Kw);Tio=r(YIe,"This class cannot be instantiated directly using "),zte=n(YIe,"CODE",{});var ZXr=s(zte);Mio=r(ZXr,"__init__()"),ZXr.forEach(t),Eio=r(YIe," (throws an error)."),YIe.forEach(t),Cio=i(Ps),We=n(Ps,"DIV",{class:!0});var Ut=s(We);T(Zw.$$.fragment,Ut),wio=i(Ut),Qte=n(Ut,"P",{});var ezr=s(Qte);Aio=r(ezr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ezr.forEach(t),yio=i(Ut),pi=n(Ut,"P",{});var LY=s(pi);Lio=r(LY,"The processor class to instantiate is selected based on the "),Wte=n(LY,"CODE",{});var ozr=s(Wte);xio=r(ozr,"model_type"),ozr.forEach(t),$io=r(LY,` property of the config object (either
passed as an argument or loaded from `),Hte=n(LY,"CODE",{});var rzr=s(Hte);kio=r(rzr,"pretrained_model_name_or_path"),rzr.forEach(t),Sio=r(LY," if possible):"),LY.forEach(t),Rio=i(Ut),be=n(Ut,"UL",{});var ve=s(be);uh=n(ve,"LI",{});var x5e=s(uh);Ute=n(x5e,"STRONG",{});var tzr=s(Ute);Bio=r(tzr,"clip"),tzr.forEach(t),Pio=r(x5e," \u2014 "),KB=n(x5e,"A",{href:!0});var azr=s(KB);Iio=r(azr,"CLIPProcessor"),azr.forEach(t),qio=r(x5e," (CLIP model)"),x5e.forEach(t),Nio=i(ve),_h=n(ve,"LI",{});var $5e=s(_h);Jte=n($5e,"STRONG",{});var nzr=s(Jte);jio=r(nzr,"layoutlmv2"),nzr.forEach(t),Dio=r($5e," \u2014 "),ZB=n($5e,"A",{href:!0});var szr=s(ZB);Gio=r(szr,"LayoutLMv2Processor"),szr.forEach(t),Oio=r($5e," (LayoutLMv2 model)"),$5e.forEach(t),Vio=i(ve),bh=n(ve,"LI",{});var k5e=s(bh);Yte=n(k5e,"STRONG",{});var lzr=s(Yte);Xio=r(lzr,"layoutlmv3"),lzr.forEach(t),zio=r(k5e," \u2014 "),eP=n(k5e,"A",{href:!0});var izr=s(eP);Qio=r(izr,"LayoutLMv3Processor"),izr.forEach(t),Wio=r(k5e," (LayoutLMv3 model)"),k5e.forEach(t),Hio=i(ve),vh=n(ve,"LI",{});var S5e=s(vh);Kte=n(S5e,"STRONG",{});var dzr=s(Kte);Uio=r(dzr,"layoutxlm"),dzr.forEach(t),Jio=r(S5e," \u2014 "),oP=n(S5e,"A",{href:!0});var czr=s(oP);Yio=r(czr,"LayoutXLMProcessor"),czr.forEach(t),Kio=r(S5e," (LayoutXLM model)"),S5e.forEach(t),Zio=i(ve),Fh=n(ve,"LI",{});var R5e=s(Fh);Zte=n(R5e,"STRONG",{});var fzr=s(Zte);edo=r(fzr,"sew"),fzr.forEach(t),odo=r(R5e," \u2014 "),rP=n(R5e,"A",{href:!0});var mzr=s(rP);rdo=r(mzr,"Wav2Vec2Processor"),mzr.forEach(t),tdo=r(R5e," (SEW model)"),R5e.forEach(t),ado=i(ve),Th=n(ve,"LI",{});var B5e=s(Th);eae=n(B5e,"STRONG",{});var gzr=s(eae);ndo=r(gzr,"sew-d"),gzr.forEach(t),sdo=r(B5e," \u2014 "),tP=n(B5e,"A",{href:!0});var hzr=s(tP);ldo=r(hzr,"Wav2Vec2Processor"),hzr.forEach(t),ido=r(B5e," (SEW-D model)"),B5e.forEach(t),ddo=i(ve),Mh=n(ve,"LI",{});var P5e=s(Mh);oae=n(P5e,"STRONG",{});var pzr=s(oae);cdo=r(pzr,"speech_to_text"),pzr.forEach(t),fdo=r(P5e," \u2014 "),aP=n(P5e,"A",{href:!0});var uzr=s(aP);mdo=r(uzr,"Speech2TextProcessor"),uzr.forEach(t),gdo=r(P5e," (Speech2Text model)"),P5e.forEach(t),hdo=i(ve),Eh=n(ve,"LI",{});var I5e=s(Eh);rae=n(I5e,"STRONG",{});var _zr=s(rae);pdo=r(_zr,"speech_to_text_2"),_zr.forEach(t),udo=r(I5e," \u2014 "),nP=n(I5e,"A",{href:!0});var bzr=s(nP);_do=r(bzr,"Speech2Text2Processor"),bzr.forEach(t),bdo=r(I5e," (Speech2Text2 model)"),I5e.forEach(t),vdo=i(ve),Ch=n(ve,"LI",{});var q5e=s(Ch);tae=n(q5e,"STRONG",{});var vzr=s(tae);Fdo=r(vzr,"trocr"),vzr.forEach(t),Tdo=r(q5e," \u2014 "),sP=n(q5e,"A",{href:!0});var Fzr=s(sP);Mdo=r(Fzr,"TrOCRProcessor"),Fzr.forEach(t),Edo=r(q5e," (TrOCR model)"),q5e.forEach(t),Cdo=i(ve),wh=n(ve,"LI",{});var N5e=s(wh);aae=n(N5e,"STRONG",{});var Tzr=s(aae);wdo=r(Tzr,"unispeech"),Tzr.forEach(t),Ado=r(N5e," \u2014 "),lP=n(N5e,"A",{href:!0});var Mzr=s(lP);ydo=r(Mzr,"Wav2Vec2Processor"),Mzr.forEach(t),Ldo=r(N5e," (UniSpeech model)"),N5e.forEach(t),xdo=i(ve),Ah=n(ve,"LI",{});var j5e=s(Ah);nae=n(j5e,"STRONG",{});var Ezr=s(nae);$do=r(Ezr,"unispeech-sat"),Ezr.forEach(t),kdo=r(j5e," \u2014 "),iP=n(j5e,"A",{href:!0});var Czr=s(iP);Sdo=r(Czr,"Wav2Vec2Processor"),Czr.forEach(t),Rdo=r(j5e," (UniSpeechSat model)"),j5e.forEach(t),Bdo=i(ve),yh=n(ve,"LI",{});var D5e=s(yh);sae=n(D5e,"STRONG",{});var wzr=s(sae);Pdo=r(wzr,"vilt"),wzr.forEach(t),Ido=r(D5e," \u2014 "),dP=n(D5e,"A",{href:!0});var Azr=s(dP);qdo=r(Azr,"ViltProcessor"),Azr.forEach(t),Ndo=r(D5e," (ViLT model)"),D5e.forEach(t),jdo=i(ve),Lh=n(ve,"LI",{});var G5e=s(Lh);lae=n(G5e,"STRONG",{});var yzr=s(lae);Ddo=r(yzr,"vision-text-dual-encoder"),yzr.forEach(t),Gdo=r(G5e," \u2014 "),cP=n(G5e,"A",{href:!0});var Lzr=s(cP);Odo=r(Lzr,"VisionTextDualEncoderProcessor"),Lzr.forEach(t),Vdo=r(G5e," (VisionTextDualEncoder model)"),G5e.forEach(t),Xdo=i(ve),xh=n(ve,"LI",{});var O5e=s(xh);iae=n(O5e,"STRONG",{});var xzr=s(iae);zdo=r(xzr,"wav2vec2"),xzr.forEach(t),Qdo=r(O5e," \u2014 "),fP=n(O5e,"A",{href:!0});var $zr=s(fP);Wdo=r($zr,"Wav2Vec2Processor"),$zr.forEach(t),Hdo=r(O5e," (Wav2Vec2 model)"),O5e.forEach(t),Udo=i(ve),$h=n(ve,"LI",{});var V5e=s($h);dae=n(V5e,"STRONG",{});var kzr=s(dae);Jdo=r(kzr,"wavlm"),kzr.forEach(t),Ydo=r(V5e," \u2014 "),mP=n(V5e,"A",{href:!0});var Szr=s(mP);Kdo=r(Szr,"Wav2Vec2Processor"),Szr.forEach(t),Zdo=r(V5e," (WavLM model)"),V5e.forEach(t),ve.forEach(t),eco=i(Ut),T(kh.$$.fragment,Ut),oco=i(Ut),T(Sh.$$.fragment,Ut),Ut.forEach(t),rco=i(Ps),Rh=n(Ps,"DIV",{class:!0});var KIe=s(Rh);T(eA.$$.fragment,KIe),tco=i(KIe),cae=n(KIe,"P",{});var Rzr=s(cae);aco=r(Rzr,"Register a new processor for this class."),Rzr.forEach(t),KIe.forEach(t),Ps.forEach(t),YBe=i(f),ui=n(f,"H2",{class:!0});var ZIe=s(ui);Bh=n(ZIe,"A",{id:!0,class:!0,href:!0});var Bzr=s(Bh);fae=n(Bzr,"SPAN",{});var Pzr=s(fae);T(oA.$$.fragment,Pzr),Pzr.forEach(t),Bzr.forEach(t),nco=i(ZIe),mae=n(ZIe,"SPAN",{});var Izr=s(mae);sco=r(Izr,"AutoModel"),Izr.forEach(t),ZIe.forEach(t),KBe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(rA.$$.fragment,Is),lco=i(Is),_i=n(Is,"P",{});var xY=s(_i);ico=r(xY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gP=n(xY,"A",{href:!0});var qzr=s(gP);dco=r(qzr,"from_pretrained()"),qzr.forEach(t),cco=r(xY," class method or the "),hP=n(xY,"A",{href:!0});var Nzr=s(hP);fco=r(Nzr,"from_config()"),Nzr.forEach(t),mco=r(xY,` class
method.`),xY.forEach(t),gco=i(Is),tA=n(Is,"P",{});var eqe=s(tA);hco=r(eqe,"This class cannot be instantiated directly using "),gae=n(eqe,"CODE",{});var jzr=s(gae);pco=r(jzr,"__init__()"),jzr.forEach(t),uco=r(eqe," (throws an error)."),eqe.forEach(t),_co=i(Is),Zr=n(Is,"DIV",{class:!0});var BC=s(Zr);T(aA.$$.fragment,BC),bco=i(BC),hae=n(BC,"P",{});var Dzr=s(hae);vco=r(Dzr,"Instantiates one of the base model classes of the library from a configuration."),Dzr.forEach(t),Fco=i(BC),bi=n(BC,"P",{});var $Y=s(bi);Tco=r($Y,`Note:
Loading a model from its configuration file does `),pae=n($Y,"STRONG",{});var Gzr=s(pae);Mco=r(Gzr,"not"),Gzr.forEach(t),Eco=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),pP=n($Y,"A",{href:!0});var Ozr=s(pP);Cco=r(Ozr,"from_pretrained()"),Ozr.forEach(t),wco=r($Y," to load the model weights."),$Y.forEach(t),Aco=i(BC),T(Ph.$$.fragment,BC),BC.forEach(t),yco=i(Is),He=n(Is,"DIV",{class:!0});var Jt=s(He);T(nA.$$.fragment,Jt),Lco=i(Jt),uae=n(Jt,"P",{});var Vzr=s(uae);xco=r(Vzr,"Instantiate one of the base model classes of the library from a pretrained model."),Vzr.forEach(t),$co=i(Jt),Ea=n(Jt,"P",{});var PC=s(Ea);kco=r(PC,"The model class to instantiate is selected based on the "),_ae=n(PC,"CODE",{});var Xzr=s(_ae);Sco=r(Xzr,"model_type"),Xzr.forEach(t),Rco=r(PC,` property of the config object (either
passed as an argument or loaded from `),bae=n(PC,"CODE",{});var zzr=s(bae);Bco=r(zzr,"pretrained_model_name_or_path"),zzr.forEach(t),Pco=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vae=n(PC,"CODE",{});var Qzr=s(vae);Ico=r(Qzr,"pretrained_model_name_or_path"),Qzr.forEach(t),qco=r(PC,":"),PC.forEach(t),Nco=i(Jt),x=n(Jt,"UL",{});var $=s(x);Ih=n($,"LI",{});var X5e=s(Ih);Fae=n(X5e,"STRONG",{});var Wzr=s(Fae);jco=r(Wzr,"albert"),Wzr.forEach(t),Dco=r(X5e," \u2014 "),uP=n(X5e,"A",{href:!0});var Hzr=s(uP);Gco=r(Hzr,"AlbertModel"),Hzr.forEach(t),Oco=r(X5e," (ALBERT model)"),X5e.forEach(t),Vco=i($),qh=n($,"LI",{});var z5e=s(qh);Tae=n(z5e,"STRONG",{});var Uzr=s(Tae);Xco=r(Uzr,"bart"),Uzr.forEach(t),zco=r(z5e," \u2014 "),_P=n(z5e,"A",{href:!0});var Jzr=s(_P);Qco=r(Jzr,"BartModel"),Jzr.forEach(t),Wco=r(z5e," (BART model)"),z5e.forEach(t),Hco=i($),Nh=n($,"LI",{});var Q5e=s(Nh);Mae=n(Q5e,"STRONG",{});var Yzr=s(Mae);Uco=r(Yzr,"beit"),Yzr.forEach(t),Jco=r(Q5e," \u2014 "),bP=n(Q5e,"A",{href:!0});var Kzr=s(bP);Yco=r(Kzr,"BeitModel"),Kzr.forEach(t),Kco=r(Q5e," (BEiT model)"),Q5e.forEach(t),Zco=i($),jh=n($,"LI",{});var W5e=s(jh);Eae=n(W5e,"STRONG",{});var Zzr=s(Eae);efo=r(Zzr,"bert"),Zzr.forEach(t),ofo=r(W5e," \u2014 "),vP=n(W5e,"A",{href:!0});var eQr=s(vP);rfo=r(eQr,"BertModel"),eQr.forEach(t),tfo=r(W5e," (BERT model)"),W5e.forEach(t),afo=i($),Dh=n($,"LI",{});var H5e=s(Dh);Cae=n(H5e,"STRONG",{});var oQr=s(Cae);nfo=r(oQr,"bert-generation"),oQr.forEach(t),sfo=r(H5e," \u2014 "),FP=n(H5e,"A",{href:!0});var rQr=s(FP);lfo=r(rQr,"BertGenerationEncoder"),rQr.forEach(t),ifo=r(H5e," (Bert Generation model)"),H5e.forEach(t),dfo=i($),Gh=n($,"LI",{});var U5e=s(Gh);wae=n(U5e,"STRONG",{});var tQr=s(wae);cfo=r(tQr,"big_bird"),tQr.forEach(t),ffo=r(U5e," \u2014 "),TP=n(U5e,"A",{href:!0});var aQr=s(TP);mfo=r(aQr,"BigBirdModel"),aQr.forEach(t),gfo=r(U5e," (BigBird model)"),U5e.forEach(t),hfo=i($),Oh=n($,"LI",{});var J5e=s(Oh);Aae=n(J5e,"STRONG",{});var nQr=s(Aae);pfo=r(nQr,"bigbird_pegasus"),nQr.forEach(t),ufo=r(J5e," \u2014 "),MP=n(J5e,"A",{href:!0});var sQr=s(MP);_fo=r(sQr,"BigBirdPegasusModel"),sQr.forEach(t),bfo=r(J5e," (BigBirdPegasus model)"),J5e.forEach(t),vfo=i($),Vh=n($,"LI",{});var Y5e=s(Vh);yae=n(Y5e,"STRONG",{});var lQr=s(yae);Ffo=r(lQr,"blenderbot"),lQr.forEach(t),Tfo=r(Y5e," \u2014 "),EP=n(Y5e,"A",{href:!0});var iQr=s(EP);Mfo=r(iQr,"BlenderbotModel"),iQr.forEach(t),Efo=r(Y5e," (Blenderbot model)"),Y5e.forEach(t),Cfo=i($),Xh=n($,"LI",{});var K5e=s(Xh);Lae=n(K5e,"STRONG",{});var dQr=s(Lae);wfo=r(dQr,"blenderbot-small"),dQr.forEach(t),Afo=r(K5e," \u2014 "),CP=n(K5e,"A",{href:!0});var cQr=s(CP);yfo=r(cQr,"BlenderbotSmallModel"),cQr.forEach(t),Lfo=r(K5e," (BlenderbotSmall model)"),K5e.forEach(t),xfo=i($),zh=n($,"LI",{});var Z5e=s(zh);xae=n(Z5e,"STRONG",{});var fQr=s(xae);$fo=r(fQr,"camembert"),fQr.forEach(t),kfo=r(Z5e," \u2014 "),wP=n(Z5e,"A",{href:!0});var mQr=s(wP);Sfo=r(mQr,"CamembertModel"),mQr.forEach(t),Rfo=r(Z5e," (CamemBERT model)"),Z5e.forEach(t),Bfo=i($),Qh=n($,"LI",{});var eCe=s(Qh);$ae=n(eCe,"STRONG",{});var gQr=s($ae);Pfo=r(gQr,"canine"),gQr.forEach(t),Ifo=r(eCe," \u2014 "),AP=n(eCe,"A",{href:!0});var hQr=s(AP);qfo=r(hQr,"CanineModel"),hQr.forEach(t),Nfo=r(eCe," (Canine model)"),eCe.forEach(t),jfo=i($),Wh=n($,"LI",{});var oCe=s(Wh);kae=n(oCe,"STRONG",{});var pQr=s(kae);Dfo=r(pQr,"clip"),pQr.forEach(t),Gfo=r(oCe," \u2014 "),yP=n(oCe,"A",{href:!0});var uQr=s(yP);Ofo=r(uQr,"CLIPModel"),uQr.forEach(t),Vfo=r(oCe," (CLIP model)"),oCe.forEach(t),Xfo=i($),Hh=n($,"LI",{});var rCe=s(Hh);Sae=n(rCe,"STRONG",{});var _Qr=s(Sae);zfo=r(_Qr,"convbert"),_Qr.forEach(t),Qfo=r(rCe," \u2014 "),LP=n(rCe,"A",{href:!0});var bQr=s(LP);Wfo=r(bQr,"ConvBertModel"),bQr.forEach(t),Hfo=r(rCe," (ConvBERT model)"),rCe.forEach(t),Ufo=i($),Uh=n($,"LI",{});var tCe=s(Uh);Rae=n(tCe,"STRONG",{});var vQr=s(Rae);Jfo=r(vQr,"convnext"),vQr.forEach(t),Yfo=r(tCe," \u2014 "),xP=n(tCe,"A",{href:!0});var FQr=s(xP);Kfo=r(FQr,"ConvNextModel"),FQr.forEach(t),Zfo=r(tCe," (ConvNext model)"),tCe.forEach(t),emo=i($),Jh=n($,"LI",{});var aCe=s(Jh);Bae=n(aCe,"STRONG",{});var TQr=s(Bae);omo=r(TQr,"ctrl"),TQr.forEach(t),rmo=r(aCe," \u2014 "),$P=n(aCe,"A",{href:!0});var MQr=s($P);tmo=r(MQr,"CTRLModel"),MQr.forEach(t),amo=r(aCe," (CTRL model)"),aCe.forEach(t),nmo=i($),Yh=n($,"LI",{});var nCe=s(Yh);Pae=n(nCe,"STRONG",{});var EQr=s(Pae);smo=r(EQr,"data2vec-audio"),EQr.forEach(t),lmo=r(nCe," \u2014 "),kP=n(nCe,"A",{href:!0});var CQr=s(kP);imo=r(CQr,"Data2VecAudioModel"),CQr.forEach(t),dmo=r(nCe," (Data2VecAudio model)"),nCe.forEach(t),cmo=i($),Kh=n($,"LI",{});var sCe=s(Kh);Iae=n(sCe,"STRONG",{});var wQr=s(Iae);fmo=r(wQr,"data2vec-text"),wQr.forEach(t),mmo=r(sCe," \u2014 "),SP=n(sCe,"A",{href:!0});var AQr=s(SP);gmo=r(AQr,"Data2VecTextModel"),AQr.forEach(t),hmo=r(sCe," (Data2VecText model)"),sCe.forEach(t),pmo=i($),Zh=n($,"LI",{});var lCe=s(Zh);qae=n(lCe,"STRONG",{});var yQr=s(qae);umo=r(yQr,"data2vec-vision"),yQr.forEach(t),_mo=r(lCe," \u2014 "),RP=n(lCe,"A",{href:!0});var LQr=s(RP);bmo=r(LQr,"Data2VecVisionModel"),LQr.forEach(t),vmo=r(lCe," (Data2VecVision model)"),lCe.forEach(t),Fmo=i($),ep=n($,"LI",{});var iCe=s(ep);Nae=n(iCe,"STRONG",{});var xQr=s(Nae);Tmo=r(xQr,"deberta"),xQr.forEach(t),Mmo=r(iCe," \u2014 "),BP=n(iCe,"A",{href:!0});var $Qr=s(BP);Emo=r($Qr,"DebertaModel"),$Qr.forEach(t),Cmo=r(iCe," (DeBERTa model)"),iCe.forEach(t),wmo=i($),op=n($,"LI",{});var dCe=s(op);jae=n(dCe,"STRONG",{});var kQr=s(jae);Amo=r(kQr,"deberta-v2"),kQr.forEach(t),ymo=r(dCe," \u2014 "),PP=n(dCe,"A",{href:!0});var SQr=s(PP);Lmo=r(SQr,"DebertaV2Model"),SQr.forEach(t),xmo=r(dCe," (DeBERTa-v2 model)"),dCe.forEach(t),$mo=i($),rp=n($,"LI",{});var cCe=s(rp);Dae=n(cCe,"STRONG",{});var RQr=s(Dae);kmo=r(RQr,"decision_transformer"),RQr.forEach(t),Smo=r(cCe," \u2014 "),IP=n(cCe,"A",{href:!0});var BQr=s(IP);Rmo=r(BQr,"DecisionTransformerModel"),BQr.forEach(t),Bmo=r(cCe," (Decision Transformer model)"),cCe.forEach(t),Pmo=i($),tp=n($,"LI",{});var fCe=s(tp);Gae=n(fCe,"STRONG",{});var PQr=s(Gae);Imo=r(PQr,"deit"),PQr.forEach(t),qmo=r(fCe," \u2014 "),qP=n(fCe,"A",{href:!0});var IQr=s(qP);Nmo=r(IQr,"DeiTModel"),IQr.forEach(t),jmo=r(fCe," (DeiT model)"),fCe.forEach(t),Dmo=i($),ap=n($,"LI",{});var mCe=s(ap);Oae=n(mCe,"STRONG",{});var qQr=s(Oae);Gmo=r(qQr,"detr"),qQr.forEach(t),Omo=r(mCe," \u2014 "),NP=n(mCe,"A",{href:!0});var NQr=s(NP);Vmo=r(NQr,"DetrModel"),NQr.forEach(t),Xmo=r(mCe," (DETR model)"),mCe.forEach(t),zmo=i($),np=n($,"LI",{});var gCe=s(np);Vae=n(gCe,"STRONG",{});var jQr=s(Vae);Qmo=r(jQr,"distilbert"),jQr.forEach(t),Wmo=r(gCe," \u2014 "),jP=n(gCe,"A",{href:!0});var DQr=s(jP);Hmo=r(DQr,"DistilBertModel"),DQr.forEach(t),Umo=r(gCe," (DistilBERT model)"),gCe.forEach(t),Jmo=i($),sp=n($,"LI",{});var hCe=s(sp);Xae=n(hCe,"STRONG",{});var GQr=s(Xae);Ymo=r(GQr,"dpr"),GQr.forEach(t),Kmo=r(hCe," \u2014 "),DP=n(hCe,"A",{href:!0});var OQr=s(DP);Zmo=r(OQr,"DPRQuestionEncoder"),OQr.forEach(t),ego=r(hCe," (DPR model)"),hCe.forEach(t),ogo=i($),lp=n($,"LI",{});var pCe=s(lp);zae=n(pCe,"STRONG",{});var VQr=s(zae);rgo=r(VQr,"dpt"),VQr.forEach(t),tgo=r(pCe," \u2014 "),GP=n(pCe,"A",{href:!0});var XQr=s(GP);ago=r(XQr,"DPTModel"),XQr.forEach(t),ngo=r(pCe," (DPT model)"),pCe.forEach(t),sgo=i($),ip=n($,"LI",{});var uCe=s(ip);Qae=n(uCe,"STRONG",{});var zQr=s(Qae);lgo=r(zQr,"electra"),zQr.forEach(t),igo=r(uCe," \u2014 "),OP=n(uCe,"A",{href:!0});var QQr=s(OP);dgo=r(QQr,"ElectraModel"),QQr.forEach(t),cgo=r(uCe," (ELECTRA model)"),uCe.forEach(t),fgo=i($),dp=n($,"LI",{});var _Ce=s(dp);Wae=n(_Ce,"STRONG",{});var WQr=s(Wae);mgo=r(WQr,"flaubert"),WQr.forEach(t),ggo=r(_Ce," \u2014 "),VP=n(_Ce,"A",{href:!0});var HQr=s(VP);hgo=r(HQr,"FlaubertModel"),HQr.forEach(t),pgo=r(_Ce," (FlauBERT model)"),_Ce.forEach(t),ugo=i($),cp=n($,"LI",{});var bCe=s(cp);Hae=n(bCe,"STRONG",{});var UQr=s(Hae);_go=r(UQr,"fnet"),UQr.forEach(t),bgo=r(bCe," \u2014 "),XP=n(bCe,"A",{href:!0});var JQr=s(XP);vgo=r(JQr,"FNetModel"),JQr.forEach(t),Fgo=r(bCe," (FNet model)"),bCe.forEach(t),Tgo=i($),fp=n($,"LI",{});var vCe=s(fp);Uae=n(vCe,"STRONG",{});var YQr=s(Uae);Mgo=r(YQr,"fsmt"),YQr.forEach(t),Ego=r(vCe," \u2014 "),zP=n(vCe,"A",{href:!0});var KQr=s(zP);Cgo=r(KQr,"FSMTModel"),KQr.forEach(t),wgo=r(vCe," (FairSeq Machine-Translation model)"),vCe.forEach(t),Ago=i($),xs=n($,"LI",{});var j9=s(xs);Jae=n(j9,"STRONG",{});var ZQr=s(Jae);ygo=r(ZQr,"funnel"),ZQr.forEach(t),Lgo=r(j9," \u2014 "),QP=n(j9,"A",{href:!0});var eWr=s(QP);xgo=r(eWr,"FunnelModel"),eWr.forEach(t),$go=r(j9," or "),WP=n(j9,"A",{href:!0});var oWr=s(WP);kgo=r(oWr,"FunnelBaseModel"),oWr.forEach(t),Sgo=r(j9," (Funnel Transformer model)"),j9.forEach(t),Rgo=i($),mp=n($,"LI",{});var FCe=s(mp);Yae=n(FCe,"STRONG",{});var rWr=s(Yae);Bgo=r(rWr,"glpn"),rWr.forEach(t),Pgo=r(FCe," \u2014 "),HP=n(FCe,"A",{href:!0});var tWr=s(HP);Igo=r(tWr,"GLPNModel"),tWr.forEach(t),qgo=r(FCe," (GLPN model)"),FCe.forEach(t),Ngo=i($),gp=n($,"LI",{});var TCe=s(gp);Kae=n(TCe,"STRONG",{});var aWr=s(Kae);jgo=r(aWr,"gpt2"),aWr.forEach(t),Dgo=r(TCe," \u2014 "),UP=n(TCe,"A",{href:!0});var nWr=s(UP);Ggo=r(nWr,"GPT2Model"),nWr.forEach(t),Ogo=r(TCe," (OpenAI GPT-2 model)"),TCe.forEach(t),Vgo=i($),hp=n($,"LI",{});var MCe=s(hp);Zae=n(MCe,"STRONG",{});var sWr=s(Zae);Xgo=r(sWr,"gpt_neo"),sWr.forEach(t),zgo=r(MCe," \u2014 "),JP=n(MCe,"A",{href:!0});var lWr=s(JP);Qgo=r(lWr,"GPTNeoModel"),lWr.forEach(t),Wgo=r(MCe," (GPT Neo model)"),MCe.forEach(t),Hgo=i($),pp=n($,"LI",{});var ECe=s(pp);ene=n(ECe,"STRONG",{});var iWr=s(ene);Ugo=r(iWr,"gptj"),iWr.forEach(t),Jgo=r(ECe," \u2014 "),YP=n(ECe,"A",{href:!0});var dWr=s(YP);Ygo=r(dWr,"GPTJModel"),dWr.forEach(t),Kgo=r(ECe," (GPT-J model)"),ECe.forEach(t),Zgo=i($),up=n($,"LI",{});var CCe=s(up);one=n(CCe,"STRONG",{});var cWr=s(one);eho=r(cWr,"hubert"),cWr.forEach(t),oho=r(CCe," \u2014 "),KP=n(CCe,"A",{href:!0});var fWr=s(KP);rho=r(fWr,"HubertModel"),fWr.forEach(t),tho=r(CCe," (Hubert model)"),CCe.forEach(t),aho=i($),_p=n($,"LI",{});var wCe=s(_p);rne=n(wCe,"STRONG",{});var mWr=s(rne);nho=r(mWr,"ibert"),mWr.forEach(t),sho=r(wCe," \u2014 "),ZP=n(wCe,"A",{href:!0});var gWr=s(ZP);lho=r(gWr,"IBertModel"),gWr.forEach(t),iho=r(wCe," (I-BERT model)"),wCe.forEach(t),dho=i($),bp=n($,"LI",{});var ACe=s(bp);tne=n(ACe,"STRONG",{});var hWr=s(tne);cho=r(hWr,"imagegpt"),hWr.forEach(t),fho=r(ACe," \u2014 "),eI=n(ACe,"A",{href:!0});var pWr=s(eI);mho=r(pWr,"ImageGPTModel"),pWr.forEach(t),gho=r(ACe," (ImageGPT model)"),ACe.forEach(t),hho=i($),vp=n($,"LI",{});var yCe=s(vp);ane=n(yCe,"STRONG",{});var uWr=s(ane);pho=r(uWr,"layoutlm"),uWr.forEach(t),uho=r(yCe," \u2014 "),oI=n(yCe,"A",{href:!0});var _Wr=s(oI);_ho=r(_Wr,"LayoutLMModel"),_Wr.forEach(t),bho=r(yCe," (LayoutLM model)"),yCe.forEach(t),vho=i($),Fp=n($,"LI",{});var LCe=s(Fp);nne=n(LCe,"STRONG",{});var bWr=s(nne);Fho=r(bWr,"layoutlmv2"),bWr.forEach(t),Tho=r(LCe," \u2014 "),rI=n(LCe,"A",{href:!0});var vWr=s(rI);Mho=r(vWr,"LayoutLMv2Model"),vWr.forEach(t),Eho=r(LCe," (LayoutLMv2 model)"),LCe.forEach(t),Cho=i($),Tp=n($,"LI",{});var xCe=s(Tp);sne=n(xCe,"STRONG",{});var FWr=s(sne);who=r(FWr,"layoutlmv3"),FWr.forEach(t),Aho=r(xCe," \u2014 "),tI=n(xCe,"A",{href:!0});var TWr=s(tI);yho=r(TWr,"LayoutLMv3Model"),TWr.forEach(t),Lho=r(xCe," (LayoutLMv3 model)"),xCe.forEach(t),xho=i($),Mp=n($,"LI",{});var $Ce=s(Mp);lne=n($Ce,"STRONG",{});var MWr=s(lne);$ho=r(MWr,"led"),MWr.forEach(t),kho=r($Ce," \u2014 "),aI=n($Ce,"A",{href:!0});var EWr=s(aI);Sho=r(EWr,"LEDModel"),EWr.forEach(t),Rho=r($Ce," (LED model)"),$Ce.forEach(t),Bho=i($),Ep=n($,"LI",{});var kCe=s(Ep);ine=n(kCe,"STRONG",{});var CWr=s(ine);Pho=r(CWr,"longformer"),CWr.forEach(t),Iho=r(kCe," \u2014 "),nI=n(kCe,"A",{href:!0});var wWr=s(nI);qho=r(wWr,"LongformerModel"),wWr.forEach(t),Nho=r(kCe," (Longformer model)"),kCe.forEach(t),jho=i($),Cp=n($,"LI",{});var SCe=s(Cp);dne=n(SCe,"STRONG",{});var AWr=s(dne);Dho=r(AWr,"luke"),AWr.forEach(t),Gho=r(SCe," \u2014 "),sI=n(SCe,"A",{href:!0});var yWr=s(sI);Oho=r(yWr,"LukeModel"),yWr.forEach(t),Vho=r(SCe," (LUKE model)"),SCe.forEach(t),Xho=i($),wp=n($,"LI",{});var RCe=s(wp);cne=n(RCe,"STRONG",{});var LWr=s(cne);zho=r(LWr,"lxmert"),LWr.forEach(t),Qho=r(RCe," \u2014 "),lI=n(RCe,"A",{href:!0});var xWr=s(lI);Who=r(xWr,"LxmertModel"),xWr.forEach(t),Hho=r(RCe," (LXMERT model)"),RCe.forEach(t),Uho=i($),Ap=n($,"LI",{});var BCe=s(Ap);fne=n(BCe,"STRONG",{});var $Wr=s(fne);Jho=r($Wr,"m2m_100"),$Wr.forEach(t),Yho=r(BCe," \u2014 "),iI=n(BCe,"A",{href:!0});var kWr=s(iI);Kho=r(kWr,"M2M100Model"),kWr.forEach(t),Zho=r(BCe," (M2M100 model)"),BCe.forEach(t),epo=i($),yp=n($,"LI",{});var PCe=s(yp);mne=n(PCe,"STRONG",{});var SWr=s(mne);opo=r(SWr,"marian"),SWr.forEach(t),rpo=r(PCe," \u2014 "),dI=n(PCe,"A",{href:!0});var RWr=s(dI);tpo=r(RWr,"MarianModel"),RWr.forEach(t),apo=r(PCe," (Marian model)"),PCe.forEach(t),npo=i($),Lp=n($,"LI",{});var ICe=s(Lp);gne=n(ICe,"STRONG",{});var BWr=s(gne);spo=r(BWr,"maskformer"),BWr.forEach(t),lpo=r(ICe," \u2014 "),cI=n(ICe,"A",{href:!0});var PWr=s(cI);ipo=r(PWr,"MaskFormerModel"),PWr.forEach(t),dpo=r(ICe," (MaskFormer model)"),ICe.forEach(t),cpo=i($),xp=n($,"LI",{});var qCe=s(xp);hne=n(qCe,"STRONG",{});var IWr=s(hne);fpo=r(IWr,"mbart"),IWr.forEach(t),mpo=r(qCe," \u2014 "),fI=n(qCe,"A",{href:!0});var qWr=s(fI);gpo=r(qWr,"MBartModel"),qWr.forEach(t),hpo=r(qCe," (mBART model)"),qCe.forEach(t),ppo=i($),$p=n($,"LI",{});var NCe=s($p);pne=n(NCe,"STRONG",{});var NWr=s(pne);upo=r(NWr,"megatron-bert"),NWr.forEach(t),_po=r(NCe," \u2014 "),mI=n(NCe,"A",{href:!0});var jWr=s(mI);bpo=r(jWr,"MegatronBertModel"),jWr.forEach(t),vpo=r(NCe," (MegatronBert model)"),NCe.forEach(t),Fpo=i($),kp=n($,"LI",{});var jCe=s(kp);une=n(jCe,"STRONG",{});var DWr=s(une);Tpo=r(DWr,"mobilebert"),DWr.forEach(t),Mpo=r(jCe," \u2014 "),gI=n(jCe,"A",{href:!0});var GWr=s(gI);Epo=r(GWr,"MobileBertModel"),GWr.forEach(t),Cpo=r(jCe," (MobileBERT model)"),jCe.forEach(t),wpo=i($),Sp=n($,"LI",{});var DCe=s(Sp);_ne=n(DCe,"STRONG",{});var OWr=s(_ne);Apo=r(OWr,"mpnet"),OWr.forEach(t),ypo=r(DCe," \u2014 "),hI=n(DCe,"A",{href:!0});var VWr=s(hI);Lpo=r(VWr,"MPNetModel"),VWr.forEach(t),xpo=r(DCe," (MPNet model)"),DCe.forEach(t),$po=i($),Rp=n($,"LI",{});var GCe=s(Rp);bne=n(GCe,"STRONG",{});var XWr=s(bne);kpo=r(XWr,"mt5"),XWr.forEach(t),Spo=r(GCe," \u2014 "),pI=n(GCe,"A",{href:!0});var zWr=s(pI);Rpo=r(zWr,"MT5Model"),zWr.forEach(t),Bpo=r(GCe," (mT5 model)"),GCe.forEach(t),Ppo=i($),Bp=n($,"LI",{});var OCe=s(Bp);vne=n(OCe,"STRONG",{});var QWr=s(vne);Ipo=r(QWr,"nystromformer"),QWr.forEach(t),qpo=r(OCe," \u2014 "),uI=n(OCe,"A",{href:!0});var WWr=s(uI);Npo=r(WWr,"NystromformerModel"),WWr.forEach(t),jpo=r(OCe," (Nystromformer model)"),OCe.forEach(t),Dpo=i($),Pp=n($,"LI",{});var VCe=s(Pp);Fne=n(VCe,"STRONG",{});var HWr=s(Fne);Gpo=r(HWr,"openai-gpt"),HWr.forEach(t),Opo=r(VCe," \u2014 "),_I=n(VCe,"A",{href:!0});var UWr=s(_I);Vpo=r(UWr,"OpenAIGPTModel"),UWr.forEach(t),Xpo=r(VCe," (OpenAI GPT model)"),VCe.forEach(t),zpo=i($),Ip=n($,"LI",{});var XCe=s(Ip);Tne=n(XCe,"STRONG",{});var JWr=s(Tne);Qpo=r(JWr,"pegasus"),JWr.forEach(t),Wpo=r(XCe," \u2014 "),bI=n(XCe,"A",{href:!0});var YWr=s(bI);Hpo=r(YWr,"PegasusModel"),YWr.forEach(t),Upo=r(XCe," (Pegasus model)"),XCe.forEach(t),Jpo=i($),qp=n($,"LI",{});var zCe=s(qp);Mne=n(zCe,"STRONG",{});var KWr=s(Mne);Ypo=r(KWr,"perceiver"),KWr.forEach(t),Kpo=r(zCe," \u2014 "),vI=n(zCe,"A",{href:!0});var ZWr=s(vI);Zpo=r(ZWr,"PerceiverModel"),ZWr.forEach(t),euo=r(zCe," (Perceiver model)"),zCe.forEach(t),ouo=i($),Np=n($,"LI",{});var QCe=s(Np);Ene=n(QCe,"STRONG",{});var eHr=s(Ene);ruo=r(eHr,"plbart"),eHr.forEach(t),tuo=r(QCe," \u2014 "),FI=n(QCe,"A",{href:!0});var oHr=s(FI);auo=r(oHr,"PLBartModel"),oHr.forEach(t),nuo=r(QCe," (PLBart model)"),QCe.forEach(t),suo=i($),jp=n($,"LI",{});var WCe=s(jp);Cne=n(WCe,"STRONG",{});var rHr=s(Cne);luo=r(rHr,"poolformer"),rHr.forEach(t),iuo=r(WCe," \u2014 "),TI=n(WCe,"A",{href:!0});var tHr=s(TI);duo=r(tHr,"PoolFormerModel"),tHr.forEach(t),cuo=r(WCe," (PoolFormer model)"),WCe.forEach(t),fuo=i($),Dp=n($,"LI",{});var HCe=s(Dp);wne=n(HCe,"STRONG",{});var aHr=s(wne);muo=r(aHr,"prophetnet"),aHr.forEach(t),guo=r(HCe," \u2014 "),MI=n(HCe,"A",{href:!0});var nHr=s(MI);huo=r(nHr,"ProphetNetModel"),nHr.forEach(t),puo=r(HCe," (ProphetNet model)"),HCe.forEach(t),uuo=i($),Gp=n($,"LI",{});var UCe=s(Gp);Ane=n(UCe,"STRONG",{});var sHr=s(Ane);_uo=r(sHr,"qdqbert"),sHr.forEach(t),buo=r(UCe," \u2014 "),EI=n(UCe,"A",{href:!0});var lHr=s(EI);vuo=r(lHr,"QDQBertModel"),lHr.forEach(t),Fuo=r(UCe," (QDQBert model)"),UCe.forEach(t),Tuo=i($),Op=n($,"LI",{});var JCe=s(Op);yne=n(JCe,"STRONG",{});var iHr=s(yne);Muo=r(iHr,"reformer"),iHr.forEach(t),Euo=r(JCe," \u2014 "),CI=n(JCe,"A",{href:!0});var dHr=s(CI);Cuo=r(dHr,"ReformerModel"),dHr.forEach(t),wuo=r(JCe," (Reformer model)"),JCe.forEach(t),Auo=i($),Vp=n($,"LI",{});var YCe=s(Vp);Lne=n(YCe,"STRONG",{});var cHr=s(Lne);yuo=r(cHr,"regnet"),cHr.forEach(t),Luo=r(YCe," \u2014 "),wI=n(YCe,"A",{href:!0});var fHr=s(wI);xuo=r(fHr,"RegNetModel"),fHr.forEach(t),$uo=r(YCe," (RegNet model)"),YCe.forEach(t),kuo=i($),Xp=n($,"LI",{});var KCe=s(Xp);xne=n(KCe,"STRONG",{});var mHr=s(xne);Suo=r(mHr,"rembert"),mHr.forEach(t),Ruo=r(KCe," \u2014 "),AI=n(KCe,"A",{href:!0});var gHr=s(AI);Buo=r(gHr,"RemBertModel"),gHr.forEach(t),Puo=r(KCe," (RemBERT model)"),KCe.forEach(t),Iuo=i($),zp=n($,"LI",{});var ZCe=s(zp);$ne=n(ZCe,"STRONG",{});var hHr=s($ne);quo=r(hHr,"resnet"),hHr.forEach(t),Nuo=r(ZCe," \u2014 "),yI=n(ZCe,"A",{href:!0});var pHr=s(yI);juo=r(pHr,"ResNetModel"),pHr.forEach(t),Duo=r(ZCe," (ResNet model)"),ZCe.forEach(t),Guo=i($),Qp=n($,"LI",{});var e3e=s(Qp);kne=n(e3e,"STRONG",{});var uHr=s(kne);Ouo=r(uHr,"retribert"),uHr.forEach(t),Vuo=r(e3e," \u2014 "),LI=n(e3e,"A",{href:!0});var _Hr=s(LI);Xuo=r(_Hr,"RetriBertModel"),_Hr.forEach(t),zuo=r(e3e," (RetriBERT model)"),e3e.forEach(t),Quo=i($),Wp=n($,"LI",{});var o3e=s(Wp);Sne=n(o3e,"STRONG",{});var bHr=s(Sne);Wuo=r(bHr,"roberta"),bHr.forEach(t),Huo=r(o3e," \u2014 "),xI=n(o3e,"A",{href:!0});var vHr=s(xI);Uuo=r(vHr,"RobertaModel"),vHr.forEach(t),Juo=r(o3e," (RoBERTa model)"),o3e.forEach(t),Yuo=i($),Hp=n($,"LI",{});var r3e=s(Hp);Rne=n(r3e,"STRONG",{});var FHr=s(Rne);Kuo=r(FHr,"roformer"),FHr.forEach(t),Zuo=r(r3e," \u2014 "),$I=n(r3e,"A",{href:!0});var THr=s($I);e_o=r(THr,"RoFormerModel"),THr.forEach(t),o_o=r(r3e," (RoFormer model)"),r3e.forEach(t),r_o=i($),Up=n($,"LI",{});var t3e=s(Up);Bne=n(t3e,"STRONG",{});var MHr=s(Bne);t_o=r(MHr,"segformer"),MHr.forEach(t),a_o=r(t3e," \u2014 "),kI=n(t3e,"A",{href:!0});var EHr=s(kI);n_o=r(EHr,"SegformerModel"),EHr.forEach(t),s_o=r(t3e," (SegFormer model)"),t3e.forEach(t),l_o=i($),Jp=n($,"LI",{});var a3e=s(Jp);Pne=n(a3e,"STRONG",{});var CHr=s(Pne);i_o=r(CHr,"sew"),CHr.forEach(t),d_o=r(a3e," \u2014 "),SI=n(a3e,"A",{href:!0});var wHr=s(SI);c_o=r(wHr,"SEWModel"),wHr.forEach(t),f_o=r(a3e," (SEW model)"),a3e.forEach(t),m_o=i($),Yp=n($,"LI",{});var n3e=s(Yp);Ine=n(n3e,"STRONG",{});var AHr=s(Ine);g_o=r(AHr,"sew-d"),AHr.forEach(t),h_o=r(n3e," \u2014 "),RI=n(n3e,"A",{href:!0});var yHr=s(RI);p_o=r(yHr,"SEWDModel"),yHr.forEach(t),u_o=r(n3e," (SEW-D model)"),n3e.forEach(t),__o=i($),Kp=n($,"LI",{});var s3e=s(Kp);qne=n(s3e,"STRONG",{});var LHr=s(qne);b_o=r(LHr,"speech_to_text"),LHr.forEach(t),v_o=r(s3e," \u2014 "),BI=n(s3e,"A",{href:!0});var xHr=s(BI);F_o=r(xHr,"Speech2TextModel"),xHr.forEach(t),T_o=r(s3e," (Speech2Text model)"),s3e.forEach(t),M_o=i($),Zp=n($,"LI",{});var l3e=s(Zp);Nne=n(l3e,"STRONG",{});var $Hr=s(Nne);E_o=r($Hr,"splinter"),$Hr.forEach(t),C_o=r(l3e," \u2014 "),PI=n(l3e,"A",{href:!0});var kHr=s(PI);w_o=r(kHr,"SplinterModel"),kHr.forEach(t),A_o=r(l3e," (Splinter model)"),l3e.forEach(t),y_o=i($),eu=n($,"LI",{});var i3e=s(eu);jne=n(i3e,"STRONG",{});var SHr=s(jne);L_o=r(SHr,"squeezebert"),SHr.forEach(t),x_o=r(i3e," \u2014 "),II=n(i3e,"A",{href:!0});var RHr=s(II);$_o=r(RHr,"SqueezeBertModel"),RHr.forEach(t),k_o=r(i3e," (SqueezeBERT model)"),i3e.forEach(t),S_o=i($),ou=n($,"LI",{});var d3e=s(ou);Dne=n(d3e,"STRONG",{});var BHr=s(Dne);R_o=r(BHr,"swin"),BHr.forEach(t),B_o=r(d3e," \u2014 "),qI=n(d3e,"A",{href:!0});var PHr=s(qI);P_o=r(PHr,"SwinModel"),PHr.forEach(t),I_o=r(d3e," (Swin model)"),d3e.forEach(t),q_o=i($),ru=n($,"LI",{});var c3e=s(ru);Gne=n(c3e,"STRONG",{});var IHr=s(Gne);N_o=r(IHr,"t5"),IHr.forEach(t),j_o=r(c3e," \u2014 "),NI=n(c3e,"A",{href:!0});var qHr=s(NI);D_o=r(qHr,"T5Model"),qHr.forEach(t),G_o=r(c3e," (T5 model)"),c3e.forEach(t),O_o=i($),tu=n($,"LI",{});var f3e=s(tu);One=n(f3e,"STRONG",{});var NHr=s(One);V_o=r(NHr,"tapas"),NHr.forEach(t),X_o=r(f3e," \u2014 "),jI=n(f3e,"A",{href:!0});var jHr=s(jI);z_o=r(jHr,"TapasModel"),jHr.forEach(t),Q_o=r(f3e," (TAPAS model)"),f3e.forEach(t),W_o=i($),au=n($,"LI",{});var m3e=s(au);Vne=n(m3e,"STRONG",{});var DHr=s(Vne);H_o=r(DHr,"transfo-xl"),DHr.forEach(t),U_o=r(m3e," \u2014 "),DI=n(m3e,"A",{href:!0});var GHr=s(DI);J_o=r(GHr,"TransfoXLModel"),GHr.forEach(t),Y_o=r(m3e," (Transformer-XL model)"),m3e.forEach(t),K_o=i($),nu=n($,"LI",{});var g3e=s(nu);Xne=n(g3e,"STRONG",{});var OHr=s(Xne);Z_o=r(OHr,"unispeech"),OHr.forEach(t),e0o=r(g3e," \u2014 "),GI=n(g3e,"A",{href:!0});var VHr=s(GI);o0o=r(VHr,"UniSpeechModel"),VHr.forEach(t),r0o=r(g3e," (UniSpeech model)"),g3e.forEach(t),t0o=i($),su=n($,"LI",{});var h3e=s(su);zne=n(h3e,"STRONG",{});var XHr=s(zne);a0o=r(XHr,"unispeech-sat"),XHr.forEach(t),n0o=r(h3e," \u2014 "),OI=n(h3e,"A",{href:!0});var zHr=s(OI);s0o=r(zHr,"UniSpeechSatModel"),zHr.forEach(t),l0o=r(h3e," (UniSpeechSat model)"),h3e.forEach(t),i0o=i($),lu=n($,"LI",{});var p3e=s(lu);Qne=n(p3e,"STRONG",{});var QHr=s(Qne);d0o=r(QHr,"van"),QHr.forEach(t),c0o=r(p3e," \u2014 "),VI=n(p3e,"A",{href:!0});var WHr=s(VI);f0o=r(WHr,"VanModel"),WHr.forEach(t),m0o=r(p3e," (VAN model)"),p3e.forEach(t),g0o=i($),iu=n($,"LI",{});var u3e=s(iu);Wne=n(u3e,"STRONG",{});var HHr=s(Wne);h0o=r(HHr,"vilt"),HHr.forEach(t),p0o=r(u3e," \u2014 "),XI=n(u3e,"A",{href:!0});var UHr=s(XI);u0o=r(UHr,"ViltModel"),UHr.forEach(t),_0o=r(u3e," (ViLT model)"),u3e.forEach(t),b0o=i($),du=n($,"LI",{});var _3e=s(du);Hne=n(_3e,"STRONG",{});var JHr=s(Hne);v0o=r(JHr,"vision-text-dual-encoder"),JHr.forEach(t),F0o=r(_3e," \u2014 "),zI=n(_3e,"A",{href:!0});var YHr=s(zI);T0o=r(YHr,"VisionTextDualEncoderModel"),YHr.forEach(t),M0o=r(_3e," (VisionTextDualEncoder model)"),_3e.forEach(t),E0o=i($),cu=n($,"LI",{});var b3e=s(cu);Une=n(b3e,"STRONG",{});var KHr=s(Une);C0o=r(KHr,"visual_bert"),KHr.forEach(t),w0o=r(b3e," \u2014 "),QI=n(b3e,"A",{href:!0});var ZHr=s(QI);A0o=r(ZHr,"VisualBertModel"),ZHr.forEach(t),y0o=r(b3e," (VisualBert model)"),b3e.forEach(t),L0o=i($),fu=n($,"LI",{});var v3e=s(fu);Jne=n(v3e,"STRONG",{});var eUr=s(Jne);x0o=r(eUr,"vit"),eUr.forEach(t),$0o=r(v3e," \u2014 "),WI=n(v3e,"A",{href:!0});var oUr=s(WI);k0o=r(oUr,"ViTModel"),oUr.forEach(t),S0o=r(v3e," (ViT model)"),v3e.forEach(t),R0o=i($),mu=n($,"LI",{});var F3e=s(mu);Yne=n(F3e,"STRONG",{});var rUr=s(Yne);B0o=r(rUr,"vit_mae"),rUr.forEach(t),P0o=r(F3e," \u2014 "),HI=n(F3e,"A",{href:!0});var tUr=s(HI);I0o=r(tUr,"ViTMAEModel"),tUr.forEach(t),q0o=r(F3e," (ViTMAE model)"),F3e.forEach(t),N0o=i($),gu=n($,"LI",{});var T3e=s(gu);Kne=n(T3e,"STRONG",{});var aUr=s(Kne);j0o=r(aUr,"wav2vec2"),aUr.forEach(t),D0o=r(T3e," \u2014 "),UI=n(T3e,"A",{href:!0});var nUr=s(UI);G0o=r(nUr,"Wav2Vec2Model"),nUr.forEach(t),O0o=r(T3e," (Wav2Vec2 model)"),T3e.forEach(t),V0o=i($),hu=n($,"LI",{});var M3e=s(hu);Zne=n(M3e,"STRONG",{});var sUr=s(Zne);X0o=r(sUr,"wavlm"),sUr.forEach(t),z0o=r(M3e," \u2014 "),JI=n(M3e,"A",{href:!0});var lUr=s(JI);Q0o=r(lUr,"WavLMModel"),lUr.forEach(t),W0o=r(M3e," (WavLM model)"),M3e.forEach(t),H0o=i($),pu=n($,"LI",{});var E3e=s(pu);ese=n(E3e,"STRONG",{});var iUr=s(ese);U0o=r(iUr,"xglm"),iUr.forEach(t),J0o=r(E3e," \u2014 "),YI=n(E3e,"A",{href:!0});var dUr=s(YI);Y0o=r(dUr,"XGLMModel"),dUr.forEach(t),K0o=r(E3e," (XGLM model)"),E3e.forEach(t),Z0o=i($),uu=n($,"LI",{});var C3e=s(uu);ose=n(C3e,"STRONG",{});var cUr=s(ose);e1o=r(cUr,"xlm"),cUr.forEach(t),o1o=r(C3e," \u2014 "),KI=n(C3e,"A",{href:!0});var fUr=s(KI);r1o=r(fUr,"XLMModel"),fUr.forEach(t),t1o=r(C3e," (XLM model)"),C3e.forEach(t),a1o=i($),_u=n($,"LI",{});var w3e=s(_u);rse=n(w3e,"STRONG",{});var mUr=s(rse);n1o=r(mUr,"xlm-prophetnet"),mUr.forEach(t),s1o=r(w3e," \u2014 "),ZI=n(w3e,"A",{href:!0});var gUr=s(ZI);l1o=r(gUr,"XLMProphetNetModel"),gUr.forEach(t),i1o=r(w3e," (XLMProphetNet model)"),w3e.forEach(t),d1o=i($),bu=n($,"LI",{});var A3e=s(bu);tse=n(A3e,"STRONG",{});var hUr=s(tse);c1o=r(hUr,"xlm-roberta"),hUr.forEach(t),f1o=r(A3e," \u2014 "),eq=n(A3e,"A",{href:!0});var pUr=s(eq);m1o=r(pUr,"XLMRobertaModel"),pUr.forEach(t),g1o=r(A3e," (XLM-RoBERTa model)"),A3e.forEach(t),h1o=i($),vu=n($,"LI",{});var y3e=s(vu);ase=n(y3e,"STRONG",{});var uUr=s(ase);p1o=r(uUr,"xlm-roberta-xl"),uUr.forEach(t),u1o=r(y3e," \u2014 "),oq=n(y3e,"A",{href:!0});var _Ur=s(oq);_1o=r(_Ur,"XLMRobertaXLModel"),_Ur.forEach(t),b1o=r(y3e," (XLM-RoBERTa-XL model)"),y3e.forEach(t),v1o=i($),Fu=n($,"LI",{});var L3e=s(Fu);nse=n(L3e,"STRONG",{});var bUr=s(nse);F1o=r(bUr,"xlnet"),bUr.forEach(t),T1o=r(L3e," \u2014 "),rq=n(L3e,"A",{href:!0});var vUr=s(rq);M1o=r(vUr,"XLNetModel"),vUr.forEach(t),E1o=r(L3e," (XLNet model)"),L3e.forEach(t),C1o=i($),Tu=n($,"LI",{});var x3e=s(Tu);sse=n(x3e,"STRONG",{});var FUr=s(sse);w1o=r(FUr,"yolos"),FUr.forEach(t),A1o=r(x3e," \u2014 "),tq=n(x3e,"A",{href:!0});var TUr=s(tq);y1o=r(TUr,"YolosModel"),TUr.forEach(t),L1o=r(x3e," (YOLOS model)"),x3e.forEach(t),x1o=i($),Mu=n($,"LI",{});var $3e=s(Mu);lse=n($3e,"STRONG",{});var MUr=s(lse);$1o=r(MUr,"yoso"),MUr.forEach(t),k1o=r($3e," \u2014 "),aq=n($3e,"A",{href:!0});var EUr=s(aq);S1o=r(EUr,"YosoModel"),EUr.forEach(t),R1o=r($3e," (YOSO model)"),$3e.forEach(t),$.forEach(t),B1o=i(Jt),Eu=n(Jt,"P",{});var k3e=s(Eu);P1o=r(k3e,"The model is set in evaluation mode by default using "),ise=n(k3e,"CODE",{});var CUr=s(ise);I1o=r(CUr,"model.eval()"),CUr.forEach(t),q1o=r(k3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dse=n(k3e,"CODE",{});var wUr=s(dse);N1o=r(wUr,"model.train()"),wUr.forEach(t),k3e.forEach(t),j1o=i(Jt),T(Cu.$$.fragment,Jt),Jt.forEach(t),Is.forEach(t),ZBe=i(f),vi=n(f,"H2",{class:!0});var oqe=s(vi);wu=n(oqe,"A",{id:!0,class:!0,href:!0});var AUr=s(wu);cse=n(AUr,"SPAN",{});var yUr=s(cse);T(sA.$$.fragment,yUr),yUr.forEach(t),AUr.forEach(t),D1o=i(oqe),fse=n(oqe,"SPAN",{});var LUr=s(fse);G1o=r(LUr,"AutoModelForPreTraining"),LUr.forEach(t),oqe.forEach(t),ePe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(lA.$$.fragment,qs),O1o=i(qs),Fi=n(qs,"P",{});var kY=s(Fi);V1o=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nq=n(kY,"A",{href:!0});var xUr=s(nq);X1o=r(xUr,"from_pretrained()"),xUr.forEach(t),z1o=r(kY," class method or the "),sq=n(kY,"A",{href:!0});var $Ur=s(sq);Q1o=r($Ur,"from_config()"),$Ur.forEach(t),W1o=r(kY,` class
method.`),kY.forEach(t),H1o=i(qs),iA=n(qs,"P",{});var rqe=s(iA);U1o=r(rqe,"This class cannot be instantiated directly using "),mse=n(rqe,"CODE",{});var kUr=s(mse);J1o=r(kUr,"__init__()"),kUr.forEach(t),Y1o=r(rqe," (throws an error)."),rqe.forEach(t),K1o=i(qs),et=n(qs,"DIV",{class:!0});var IC=s(et);T(dA.$$.fragment,IC),Z1o=i(IC),gse=n(IC,"P",{});var SUr=s(gse);ebo=r(SUr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SUr.forEach(t),obo=i(IC),Ti=n(IC,"P",{});var SY=s(Ti);rbo=r(SY,`Note:
Loading a model from its configuration file does `),hse=n(SY,"STRONG",{});var RUr=s(hse);tbo=r(RUr,"not"),RUr.forEach(t),abo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),lq=n(SY,"A",{href:!0});var BUr=s(lq);nbo=r(BUr,"from_pretrained()"),BUr.forEach(t),sbo=r(SY," to load the model weights."),SY.forEach(t),lbo=i(IC),T(Au.$$.fragment,IC),IC.forEach(t),ibo=i(qs),Ue=n(qs,"DIV",{class:!0});var Yt=s(Ue);T(cA.$$.fragment,Yt),dbo=i(Yt),pse=n(Yt,"P",{});var PUr=s(pse);cbo=r(PUr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),PUr.forEach(t),fbo=i(Yt),Ca=n(Yt,"P",{});var qC=s(Ca);mbo=r(qC,"The model class to instantiate is selected based on the "),use=n(qC,"CODE",{});var IUr=s(use);gbo=r(IUr,"model_type"),IUr.forEach(t),hbo=r(qC,` property of the config object (either
passed as an argument or loaded from `),_se=n(qC,"CODE",{});var qUr=s(_se);pbo=r(qUr,"pretrained_model_name_or_path"),qUr.forEach(t),ubo=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bse=n(qC,"CODE",{});var NUr=s(bse);_bo=r(NUr,"pretrained_model_name_or_path"),NUr.forEach(t),bbo=r(qC,":"),qC.forEach(t),vbo=i(Yt),O=n(Yt,"UL",{});var X=s(O);yu=n(X,"LI",{});var S3e=s(yu);vse=n(S3e,"STRONG",{});var jUr=s(vse);Fbo=r(jUr,"albert"),jUr.forEach(t),Tbo=r(S3e," \u2014 "),iq=n(S3e,"A",{href:!0});var DUr=s(iq);Mbo=r(DUr,"AlbertForPreTraining"),DUr.forEach(t),Ebo=r(S3e," (ALBERT model)"),S3e.forEach(t),Cbo=i(X),Lu=n(X,"LI",{});var R3e=s(Lu);Fse=n(R3e,"STRONG",{});var GUr=s(Fse);wbo=r(GUr,"bart"),GUr.forEach(t),Abo=r(R3e," \u2014 "),dq=n(R3e,"A",{href:!0});var OUr=s(dq);ybo=r(OUr,"BartForConditionalGeneration"),OUr.forEach(t),Lbo=r(R3e," (BART model)"),R3e.forEach(t),xbo=i(X),xu=n(X,"LI",{});var B3e=s(xu);Tse=n(B3e,"STRONG",{});var VUr=s(Tse);$bo=r(VUr,"bert"),VUr.forEach(t),kbo=r(B3e," \u2014 "),cq=n(B3e,"A",{href:!0});var XUr=s(cq);Sbo=r(XUr,"BertForPreTraining"),XUr.forEach(t),Rbo=r(B3e," (BERT model)"),B3e.forEach(t),Bbo=i(X),$u=n(X,"LI",{});var P3e=s($u);Mse=n(P3e,"STRONG",{});var zUr=s(Mse);Pbo=r(zUr,"big_bird"),zUr.forEach(t),Ibo=r(P3e," \u2014 "),fq=n(P3e,"A",{href:!0});var QUr=s(fq);qbo=r(QUr,"BigBirdForPreTraining"),QUr.forEach(t),Nbo=r(P3e," (BigBird model)"),P3e.forEach(t),jbo=i(X),ku=n(X,"LI",{});var I3e=s(ku);Ese=n(I3e,"STRONG",{});var WUr=s(Ese);Dbo=r(WUr,"camembert"),WUr.forEach(t),Gbo=r(I3e," \u2014 "),mq=n(I3e,"A",{href:!0});var HUr=s(mq);Obo=r(HUr,"CamembertForMaskedLM"),HUr.forEach(t),Vbo=r(I3e," (CamemBERT model)"),I3e.forEach(t),Xbo=i(X),Su=n(X,"LI",{});var q3e=s(Su);Cse=n(q3e,"STRONG",{});var UUr=s(Cse);zbo=r(UUr,"ctrl"),UUr.forEach(t),Qbo=r(q3e," \u2014 "),gq=n(q3e,"A",{href:!0});var JUr=s(gq);Wbo=r(JUr,"CTRLLMHeadModel"),JUr.forEach(t),Hbo=r(q3e," (CTRL model)"),q3e.forEach(t),Ubo=i(X),Ru=n(X,"LI",{});var N3e=s(Ru);wse=n(N3e,"STRONG",{});var YUr=s(wse);Jbo=r(YUr,"data2vec-text"),YUr.forEach(t),Ybo=r(N3e," \u2014 "),hq=n(N3e,"A",{href:!0});var KUr=s(hq);Kbo=r(KUr,"Data2VecTextForMaskedLM"),KUr.forEach(t),Zbo=r(N3e," (Data2VecText model)"),N3e.forEach(t),e2o=i(X),Bu=n(X,"LI",{});var j3e=s(Bu);Ase=n(j3e,"STRONG",{});var ZUr=s(Ase);o2o=r(ZUr,"deberta"),ZUr.forEach(t),r2o=r(j3e," \u2014 "),pq=n(j3e,"A",{href:!0});var eJr=s(pq);t2o=r(eJr,"DebertaForMaskedLM"),eJr.forEach(t),a2o=r(j3e," (DeBERTa model)"),j3e.forEach(t),n2o=i(X),Pu=n(X,"LI",{});var D3e=s(Pu);yse=n(D3e,"STRONG",{});var oJr=s(yse);s2o=r(oJr,"deberta-v2"),oJr.forEach(t),l2o=r(D3e," \u2014 "),uq=n(D3e,"A",{href:!0});var rJr=s(uq);i2o=r(rJr,"DebertaV2ForMaskedLM"),rJr.forEach(t),d2o=r(D3e," (DeBERTa-v2 model)"),D3e.forEach(t),c2o=i(X),Iu=n(X,"LI",{});var G3e=s(Iu);Lse=n(G3e,"STRONG",{});var tJr=s(Lse);f2o=r(tJr,"distilbert"),tJr.forEach(t),m2o=r(G3e," \u2014 "),_q=n(G3e,"A",{href:!0});var aJr=s(_q);g2o=r(aJr,"DistilBertForMaskedLM"),aJr.forEach(t),h2o=r(G3e," (DistilBERT model)"),G3e.forEach(t),p2o=i(X),qu=n(X,"LI",{});var O3e=s(qu);xse=n(O3e,"STRONG",{});var nJr=s(xse);u2o=r(nJr,"electra"),nJr.forEach(t),_2o=r(O3e," \u2014 "),bq=n(O3e,"A",{href:!0});var sJr=s(bq);b2o=r(sJr,"ElectraForPreTraining"),sJr.forEach(t),v2o=r(O3e," (ELECTRA model)"),O3e.forEach(t),F2o=i(X),Nu=n(X,"LI",{});var V3e=s(Nu);$se=n(V3e,"STRONG",{});var lJr=s($se);T2o=r(lJr,"flaubert"),lJr.forEach(t),M2o=r(V3e," \u2014 "),vq=n(V3e,"A",{href:!0});var iJr=s(vq);E2o=r(iJr,"FlaubertWithLMHeadModel"),iJr.forEach(t),C2o=r(V3e," (FlauBERT model)"),V3e.forEach(t),w2o=i(X),ju=n(X,"LI",{});var X3e=s(ju);kse=n(X3e,"STRONG",{});var dJr=s(kse);A2o=r(dJr,"fnet"),dJr.forEach(t),y2o=r(X3e," \u2014 "),Fq=n(X3e,"A",{href:!0});var cJr=s(Fq);L2o=r(cJr,"FNetForPreTraining"),cJr.forEach(t),x2o=r(X3e," (FNet model)"),X3e.forEach(t),$2o=i(X),Du=n(X,"LI",{});var z3e=s(Du);Sse=n(z3e,"STRONG",{});var fJr=s(Sse);k2o=r(fJr,"fsmt"),fJr.forEach(t),S2o=r(z3e," \u2014 "),Tq=n(z3e,"A",{href:!0});var mJr=s(Tq);R2o=r(mJr,"FSMTForConditionalGeneration"),mJr.forEach(t),B2o=r(z3e," (FairSeq Machine-Translation model)"),z3e.forEach(t),P2o=i(X),Gu=n(X,"LI",{});var Q3e=s(Gu);Rse=n(Q3e,"STRONG",{});var gJr=s(Rse);I2o=r(gJr,"funnel"),gJr.forEach(t),q2o=r(Q3e," \u2014 "),Mq=n(Q3e,"A",{href:!0});var hJr=s(Mq);N2o=r(hJr,"FunnelForPreTraining"),hJr.forEach(t),j2o=r(Q3e," (Funnel Transformer model)"),Q3e.forEach(t),D2o=i(X),Ou=n(X,"LI",{});var W3e=s(Ou);Bse=n(W3e,"STRONG",{});var pJr=s(Bse);G2o=r(pJr,"gpt2"),pJr.forEach(t),O2o=r(W3e," \u2014 "),Eq=n(W3e,"A",{href:!0});var uJr=s(Eq);V2o=r(uJr,"GPT2LMHeadModel"),uJr.forEach(t),X2o=r(W3e," (OpenAI GPT-2 model)"),W3e.forEach(t),z2o=i(X),Vu=n(X,"LI",{});var H3e=s(Vu);Pse=n(H3e,"STRONG",{});var _Jr=s(Pse);Q2o=r(_Jr,"ibert"),_Jr.forEach(t),W2o=r(H3e," \u2014 "),Cq=n(H3e,"A",{href:!0});var bJr=s(Cq);H2o=r(bJr,"IBertForMaskedLM"),bJr.forEach(t),U2o=r(H3e," (I-BERT model)"),H3e.forEach(t),J2o=i(X),Xu=n(X,"LI",{});var U3e=s(Xu);Ise=n(U3e,"STRONG",{});var vJr=s(Ise);Y2o=r(vJr,"layoutlm"),vJr.forEach(t),K2o=r(U3e," \u2014 "),wq=n(U3e,"A",{href:!0});var FJr=s(wq);Z2o=r(FJr,"LayoutLMForMaskedLM"),FJr.forEach(t),evo=r(U3e," (LayoutLM model)"),U3e.forEach(t),ovo=i(X),zu=n(X,"LI",{});var J3e=s(zu);qse=n(J3e,"STRONG",{});var TJr=s(qse);rvo=r(TJr,"longformer"),TJr.forEach(t),tvo=r(J3e," \u2014 "),Aq=n(J3e,"A",{href:!0});var MJr=s(Aq);avo=r(MJr,"LongformerForMaskedLM"),MJr.forEach(t),nvo=r(J3e," (Longformer model)"),J3e.forEach(t),svo=i(X),Qu=n(X,"LI",{});var Y3e=s(Qu);Nse=n(Y3e,"STRONG",{});var EJr=s(Nse);lvo=r(EJr,"lxmert"),EJr.forEach(t),ivo=r(Y3e," \u2014 "),yq=n(Y3e,"A",{href:!0});var CJr=s(yq);dvo=r(CJr,"LxmertForPreTraining"),CJr.forEach(t),cvo=r(Y3e," (LXMERT model)"),Y3e.forEach(t),fvo=i(X),Wu=n(X,"LI",{});var K3e=s(Wu);jse=n(K3e,"STRONG",{});var wJr=s(jse);mvo=r(wJr,"megatron-bert"),wJr.forEach(t),gvo=r(K3e," \u2014 "),Lq=n(K3e,"A",{href:!0});var AJr=s(Lq);hvo=r(AJr,"MegatronBertForPreTraining"),AJr.forEach(t),pvo=r(K3e," (MegatronBert model)"),K3e.forEach(t),uvo=i(X),Hu=n(X,"LI",{});var Z3e=s(Hu);Dse=n(Z3e,"STRONG",{});var yJr=s(Dse);_vo=r(yJr,"mobilebert"),yJr.forEach(t),bvo=r(Z3e," \u2014 "),xq=n(Z3e,"A",{href:!0});var LJr=s(xq);vvo=r(LJr,"MobileBertForPreTraining"),LJr.forEach(t),Fvo=r(Z3e," (MobileBERT model)"),Z3e.forEach(t),Tvo=i(X),Uu=n(X,"LI",{});var ewe=s(Uu);Gse=n(ewe,"STRONG",{});var xJr=s(Gse);Mvo=r(xJr,"mpnet"),xJr.forEach(t),Evo=r(ewe," \u2014 "),$q=n(ewe,"A",{href:!0});var $Jr=s($q);Cvo=r($Jr,"MPNetForMaskedLM"),$Jr.forEach(t),wvo=r(ewe," (MPNet model)"),ewe.forEach(t),Avo=i(X),Ju=n(X,"LI",{});var owe=s(Ju);Ose=n(owe,"STRONG",{});var kJr=s(Ose);yvo=r(kJr,"openai-gpt"),kJr.forEach(t),Lvo=r(owe," \u2014 "),kq=n(owe,"A",{href:!0});var SJr=s(kq);xvo=r(SJr,"OpenAIGPTLMHeadModel"),SJr.forEach(t),$vo=r(owe," (OpenAI GPT model)"),owe.forEach(t),kvo=i(X),Yu=n(X,"LI",{});var rwe=s(Yu);Vse=n(rwe,"STRONG",{});var RJr=s(Vse);Svo=r(RJr,"retribert"),RJr.forEach(t),Rvo=r(rwe," \u2014 "),Sq=n(rwe,"A",{href:!0});var BJr=s(Sq);Bvo=r(BJr,"RetriBertModel"),BJr.forEach(t),Pvo=r(rwe," (RetriBERT model)"),rwe.forEach(t),Ivo=i(X),Ku=n(X,"LI",{});var twe=s(Ku);Xse=n(twe,"STRONG",{});var PJr=s(Xse);qvo=r(PJr,"roberta"),PJr.forEach(t),Nvo=r(twe," \u2014 "),Rq=n(twe,"A",{href:!0});var IJr=s(Rq);jvo=r(IJr,"RobertaForMaskedLM"),IJr.forEach(t),Dvo=r(twe," (RoBERTa model)"),twe.forEach(t),Gvo=i(X),Zu=n(X,"LI",{});var awe=s(Zu);zse=n(awe,"STRONG",{});var qJr=s(zse);Ovo=r(qJr,"squeezebert"),qJr.forEach(t),Vvo=r(awe," \u2014 "),Bq=n(awe,"A",{href:!0});var NJr=s(Bq);Xvo=r(NJr,"SqueezeBertForMaskedLM"),NJr.forEach(t),zvo=r(awe," (SqueezeBERT model)"),awe.forEach(t),Qvo=i(X),e_=n(X,"LI",{});var nwe=s(e_);Qse=n(nwe,"STRONG",{});var jJr=s(Qse);Wvo=r(jJr,"t5"),jJr.forEach(t),Hvo=r(nwe," \u2014 "),Pq=n(nwe,"A",{href:!0});var DJr=s(Pq);Uvo=r(DJr,"T5ForConditionalGeneration"),DJr.forEach(t),Jvo=r(nwe," (T5 model)"),nwe.forEach(t),Yvo=i(X),o_=n(X,"LI",{});var swe=s(o_);Wse=n(swe,"STRONG",{});var GJr=s(Wse);Kvo=r(GJr,"tapas"),GJr.forEach(t),Zvo=r(swe," \u2014 "),Iq=n(swe,"A",{href:!0});var OJr=s(Iq);eFo=r(OJr,"TapasForMaskedLM"),OJr.forEach(t),oFo=r(swe," (TAPAS model)"),swe.forEach(t),rFo=i(X),r_=n(X,"LI",{});var lwe=s(r_);Hse=n(lwe,"STRONG",{});var VJr=s(Hse);tFo=r(VJr,"transfo-xl"),VJr.forEach(t),aFo=r(lwe," \u2014 "),qq=n(lwe,"A",{href:!0});var XJr=s(qq);nFo=r(XJr,"TransfoXLLMHeadModel"),XJr.forEach(t),sFo=r(lwe," (Transformer-XL model)"),lwe.forEach(t),lFo=i(X),t_=n(X,"LI",{});var iwe=s(t_);Use=n(iwe,"STRONG",{});var zJr=s(Use);iFo=r(zJr,"unispeech"),zJr.forEach(t),dFo=r(iwe," \u2014 "),Nq=n(iwe,"A",{href:!0});var QJr=s(Nq);cFo=r(QJr,"UniSpeechForPreTraining"),QJr.forEach(t),fFo=r(iwe," (UniSpeech model)"),iwe.forEach(t),mFo=i(X),a_=n(X,"LI",{});var dwe=s(a_);Jse=n(dwe,"STRONG",{});var WJr=s(Jse);gFo=r(WJr,"unispeech-sat"),WJr.forEach(t),hFo=r(dwe," \u2014 "),jq=n(dwe,"A",{href:!0});var HJr=s(jq);pFo=r(HJr,"UniSpeechSatForPreTraining"),HJr.forEach(t),uFo=r(dwe," (UniSpeechSat model)"),dwe.forEach(t),_Fo=i(X),n_=n(X,"LI",{});var cwe=s(n_);Yse=n(cwe,"STRONG",{});var UJr=s(Yse);bFo=r(UJr,"visual_bert"),UJr.forEach(t),vFo=r(cwe," \u2014 "),Dq=n(cwe,"A",{href:!0});var JJr=s(Dq);FFo=r(JJr,"VisualBertForPreTraining"),JJr.forEach(t),TFo=r(cwe," (VisualBert model)"),cwe.forEach(t),MFo=i(X),s_=n(X,"LI",{});var fwe=s(s_);Kse=n(fwe,"STRONG",{});var YJr=s(Kse);EFo=r(YJr,"vit_mae"),YJr.forEach(t),CFo=r(fwe," \u2014 "),Gq=n(fwe,"A",{href:!0});var KJr=s(Gq);wFo=r(KJr,"ViTMAEForPreTraining"),KJr.forEach(t),AFo=r(fwe," (ViTMAE model)"),fwe.forEach(t),yFo=i(X),l_=n(X,"LI",{});var mwe=s(l_);Zse=n(mwe,"STRONG",{});var ZJr=s(Zse);LFo=r(ZJr,"wav2vec2"),ZJr.forEach(t),xFo=r(mwe," \u2014 "),Oq=n(mwe,"A",{href:!0});var eYr=s(Oq);$Fo=r(eYr,"Wav2Vec2ForPreTraining"),eYr.forEach(t),kFo=r(mwe," (Wav2Vec2 model)"),mwe.forEach(t),SFo=i(X),i_=n(X,"LI",{});var gwe=s(i_);ele=n(gwe,"STRONG",{});var oYr=s(ele);RFo=r(oYr,"xlm"),oYr.forEach(t),BFo=r(gwe," \u2014 "),Vq=n(gwe,"A",{href:!0});var rYr=s(Vq);PFo=r(rYr,"XLMWithLMHeadModel"),rYr.forEach(t),IFo=r(gwe," (XLM model)"),gwe.forEach(t),qFo=i(X),d_=n(X,"LI",{});var hwe=s(d_);ole=n(hwe,"STRONG",{});var tYr=s(ole);NFo=r(tYr,"xlm-roberta"),tYr.forEach(t),jFo=r(hwe," \u2014 "),Xq=n(hwe,"A",{href:!0});var aYr=s(Xq);DFo=r(aYr,"XLMRobertaForMaskedLM"),aYr.forEach(t),GFo=r(hwe," (XLM-RoBERTa model)"),hwe.forEach(t),OFo=i(X),c_=n(X,"LI",{});var pwe=s(c_);rle=n(pwe,"STRONG",{});var nYr=s(rle);VFo=r(nYr,"xlm-roberta-xl"),nYr.forEach(t),XFo=r(pwe," \u2014 "),zq=n(pwe,"A",{href:!0});var sYr=s(zq);zFo=r(sYr,"XLMRobertaXLForMaskedLM"),sYr.forEach(t),QFo=r(pwe," (XLM-RoBERTa-XL model)"),pwe.forEach(t),WFo=i(X),f_=n(X,"LI",{});var uwe=s(f_);tle=n(uwe,"STRONG",{});var lYr=s(tle);HFo=r(lYr,"xlnet"),lYr.forEach(t),UFo=r(uwe," \u2014 "),Qq=n(uwe,"A",{href:!0});var iYr=s(Qq);JFo=r(iYr,"XLNetLMHeadModel"),iYr.forEach(t),YFo=r(uwe," (XLNet model)"),uwe.forEach(t),X.forEach(t),KFo=i(Yt),m_=n(Yt,"P",{});var _we=s(m_);ZFo=r(_we,"The model is set in evaluation mode by default using "),ale=n(_we,"CODE",{});var dYr=s(ale);e6o=r(dYr,"model.eval()"),dYr.forEach(t),o6o=r(_we,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nle=n(_we,"CODE",{});var cYr=s(nle);r6o=r(cYr,"model.train()"),cYr.forEach(t),_we.forEach(t),t6o=i(Yt),T(g_.$$.fragment,Yt),Yt.forEach(t),qs.forEach(t),oPe=i(f),Mi=n(f,"H2",{class:!0});var tqe=s(Mi);h_=n(tqe,"A",{id:!0,class:!0,href:!0});var fYr=s(h_);sle=n(fYr,"SPAN",{});var mYr=s(sle);T(fA.$$.fragment,mYr),mYr.forEach(t),fYr.forEach(t),a6o=i(tqe),lle=n(tqe,"SPAN",{});var gYr=s(lle);n6o=r(gYr,"AutoModelForCausalLM"),gYr.forEach(t),tqe.forEach(t),rPe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(mA.$$.fragment,Ns),s6o=i(Ns),Ei=n(Ns,"P",{});var RY=s(Ei);l6o=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Wq=n(RY,"A",{href:!0});var hYr=s(Wq);i6o=r(hYr,"from_pretrained()"),hYr.forEach(t),d6o=r(RY," class method or the "),Hq=n(RY,"A",{href:!0});var pYr=s(Hq);c6o=r(pYr,"from_config()"),pYr.forEach(t),f6o=r(RY,` class
method.`),RY.forEach(t),m6o=i(Ns),gA=n(Ns,"P",{});var aqe=s(gA);g6o=r(aqe,"This class cannot be instantiated directly using "),ile=n(aqe,"CODE",{});var uYr=s(ile);h6o=r(uYr,"__init__()"),uYr.forEach(t),p6o=r(aqe," (throws an error)."),aqe.forEach(t),u6o=i(Ns),ot=n(Ns,"DIV",{class:!0});var NC=s(ot);T(hA.$$.fragment,NC),_6o=i(NC),dle=n(NC,"P",{});var _Yr=s(dle);b6o=r(_Yr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Yr.forEach(t),v6o=i(NC),Ci=n(NC,"P",{});var BY=s(Ci);F6o=r(BY,`Note:
Loading a model from its configuration file does `),cle=n(BY,"STRONG",{});var bYr=s(cle);T6o=r(bYr,"not"),bYr.forEach(t),M6o=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=n(BY,"A",{href:!0});var vYr=s(Uq);E6o=r(vYr,"from_pretrained()"),vYr.forEach(t),C6o=r(BY," to load the model weights."),BY.forEach(t),w6o=i(NC),T(p_.$$.fragment,NC),NC.forEach(t),A6o=i(Ns),Je=n(Ns,"DIV",{class:!0});var Kt=s(Je);T(pA.$$.fragment,Kt),y6o=i(Kt),fle=n(Kt,"P",{});var FYr=s(fle);L6o=r(FYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FYr.forEach(t),x6o=i(Kt),wa=n(Kt,"P",{});var jC=s(wa);$6o=r(jC,"The model class to instantiate is selected based on the "),mle=n(jC,"CODE",{});var TYr=s(mle);k6o=r(TYr,"model_type"),TYr.forEach(t),S6o=r(jC,` property of the config object (either
passed as an argument or loaded from `),gle=n(jC,"CODE",{});var MYr=s(gle);R6o=r(MYr,"pretrained_model_name_or_path"),MYr.forEach(t),B6o=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=n(jC,"CODE",{});var EYr=s(hle);P6o=r(EYr,"pretrained_model_name_or_path"),EYr.forEach(t),I6o=r(jC,":"),jC.forEach(t),q6o=i(Kt),z=n(Kt,"UL",{});var H=s(z);u_=n(H,"LI",{});var bwe=s(u_);ple=n(bwe,"STRONG",{});var CYr=s(ple);N6o=r(CYr,"bart"),CYr.forEach(t),j6o=r(bwe," \u2014 "),Jq=n(bwe,"A",{href:!0});var wYr=s(Jq);D6o=r(wYr,"BartForCausalLM"),wYr.forEach(t),G6o=r(bwe," (BART model)"),bwe.forEach(t),O6o=i(H),__=n(H,"LI",{});var vwe=s(__);ule=n(vwe,"STRONG",{});var AYr=s(ule);V6o=r(AYr,"bert"),AYr.forEach(t),X6o=r(vwe," \u2014 "),Yq=n(vwe,"A",{href:!0});var yYr=s(Yq);z6o=r(yYr,"BertLMHeadModel"),yYr.forEach(t),Q6o=r(vwe," (BERT model)"),vwe.forEach(t),W6o=i(H),b_=n(H,"LI",{});var Fwe=s(b_);_le=n(Fwe,"STRONG",{});var LYr=s(_le);H6o=r(LYr,"bert-generation"),LYr.forEach(t),U6o=r(Fwe," \u2014 "),Kq=n(Fwe,"A",{href:!0});var xYr=s(Kq);J6o=r(xYr,"BertGenerationDecoder"),xYr.forEach(t),Y6o=r(Fwe," (Bert Generation model)"),Fwe.forEach(t),K6o=i(H),v_=n(H,"LI",{});var Twe=s(v_);ble=n(Twe,"STRONG",{});var $Yr=s(ble);Z6o=r($Yr,"big_bird"),$Yr.forEach(t),eTo=r(Twe," \u2014 "),Zq=n(Twe,"A",{href:!0});var kYr=s(Zq);oTo=r(kYr,"BigBirdForCausalLM"),kYr.forEach(t),rTo=r(Twe," (BigBird model)"),Twe.forEach(t),tTo=i(H),F_=n(H,"LI",{});var Mwe=s(F_);vle=n(Mwe,"STRONG",{});var SYr=s(vle);aTo=r(SYr,"bigbird_pegasus"),SYr.forEach(t),nTo=r(Mwe," \u2014 "),eN=n(Mwe,"A",{href:!0});var RYr=s(eN);sTo=r(RYr,"BigBirdPegasusForCausalLM"),RYr.forEach(t),lTo=r(Mwe," (BigBirdPegasus model)"),Mwe.forEach(t),iTo=i(H),T_=n(H,"LI",{});var Ewe=s(T_);Fle=n(Ewe,"STRONG",{});var BYr=s(Fle);dTo=r(BYr,"blenderbot"),BYr.forEach(t),cTo=r(Ewe," \u2014 "),oN=n(Ewe,"A",{href:!0});var PYr=s(oN);fTo=r(PYr,"BlenderbotForCausalLM"),PYr.forEach(t),mTo=r(Ewe," (Blenderbot model)"),Ewe.forEach(t),gTo=i(H),M_=n(H,"LI",{});var Cwe=s(M_);Tle=n(Cwe,"STRONG",{});var IYr=s(Tle);hTo=r(IYr,"blenderbot-small"),IYr.forEach(t),pTo=r(Cwe," \u2014 "),rN=n(Cwe,"A",{href:!0});var qYr=s(rN);uTo=r(qYr,"BlenderbotSmallForCausalLM"),qYr.forEach(t),_To=r(Cwe," (BlenderbotSmall model)"),Cwe.forEach(t),bTo=i(H),E_=n(H,"LI",{});var wwe=s(E_);Mle=n(wwe,"STRONG",{});var NYr=s(Mle);vTo=r(NYr,"camembert"),NYr.forEach(t),FTo=r(wwe," \u2014 "),tN=n(wwe,"A",{href:!0});var jYr=s(tN);TTo=r(jYr,"CamembertForCausalLM"),jYr.forEach(t),MTo=r(wwe," (CamemBERT model)"),wwe.forEach(t),ETo=i(H),C_=n(H,"LI",{});var Awe=s(C_);Ele=n(Awe,"STRONG",{});var DYr=s(Ele);CTo=r(DYr,"ctrl"),DYr.forEach(t),wTo=r(Awe," \u2014 "),aN=n(Awe,"A",{href:!0});var GYr=s(aN);ATo=r(GYr,"CTRLLMHeadModel"),GYr.forEach(t),yTo=r(Awe," (CTRL model)"),Awe.forEach(t),LTo=i(H),w_=n(H,"LI",{});var ywe=s(w_);Cle=n(ywe,"STRONG",{});var OYr=s(Cle);xTo=r(OYr,"data2vec-text"),OYr.forEach(t),$To=r(ywe," \u2014 "),nN=n(ywe,"A",{href:!0});var VYr=s(nN);kTo=r(VYr,"Data2VecTextForCausalLM"),VYr.forEach(t),STo=r(ywe," (Data2VecText model)"),ywe.forEach(t),RTo=i(H),A_=n(H,"LI",{});var Lwe=s(A_);wle=n(Lwe,"STRONG",{});var XYr=s(wle);BTo=r(XYr,"electra"),XYr.forEach(t),PTo=r(Lwe," \u2014 "),sN=n(Lwe,"A",{href:!0});var zYr=s(sN);ITo=r(zYr,"ElectraForCausalLM"),zYr.forEach(t),qTo=r(Lwe," (ELECTRA model)"),Lwe.forEach(t),NTo=i(H),y_=n(H,"LI",{});var xwe=s(y_);Ale=n(xwe,"STRONG",{});var QYr=s(Ale);jTo=r(QYr,"gpt2"),QYr.forEach(t),DTo=r(xwe," \u2014 "),lN=n(xwe,"A",{href:!0});var WYr=s(lN);GTo=r(WYr,"GPT2LMHeadModel"),WYr.forEach(t),OTo=r(xwe," (OpenAI GPT-2 model)"),xwe.forEach(t),VTo=i(H),L_=n(H,"LI",{});var $we=s(L_);yle=n($we,"STRONG",{});var HYr=s(yle);XTo=r(HYr,"gpt_neo"),HYr.forEach(t),zTo=r($we," \u2014 "),iN=n($we,"A",{href:!0});var UYr=s(iN);QTo=r(UYr,"GPTNeoForCausalLM"),UYr.forEach(t),WTo=r($we," (GPT Neo model)"),$we.forEach(t),HTo=i(H),x_=n(H,"LI",{});var kwe=s(x_);Lle=n(kwe,"STRONG",{});var JYr=s(Lle);UTo=r(JYr,"gptj"),JYr.forEach(t),JTo=r(kwe," \u2014 "),dN=n(kwe,"A",{href:!0});var YYr=s(dN);YTo=r(YYr,"GPTJForCausalLM"),YYr.forEach(t),KTo=r(kwe," (GPT-J model)"),kwe.forEach(t),ZTo=i(H),$_=n(H,"LI",{});var Swe=s($_);xle=n(Swe,"STRONG",{});var KYr=s(xle);e7o=r(KYr,"marian"),KYr.forEach(t),o7o=r(Swe," \u2014 "),cN=n(Swe,"A",{href:!0});var ZYr=s(cN);r7o=r(ZYr,"MarianForCausalLM"),ZYr.forEach(t),t7o=r(Swe," (Marian model)"),Swe.forEach(t),a7o=i(H),k_=n(H,"LI",{});var Rwe=s(k_);$le=n(Rwe,"STRONG",{});var eKr=s($le);n7o=r(eKr,"mbart"),eKr.forEach(t),s7o=r(Rwe," \u2014 "),fN=n(Rwe,"A",{href:!0});var oKr=s(fN);l7o=r(oKr,"MBartForCausalLM"),oKr.forEach(t),i7o=r(Rwe," (mBART model)"),Rwe.forEach(t),d7o=i(H),S_=n(H,"LI",{});var Bwe=s(S_);kle=n(Bwe,"STRONG",{});var rKr=s(kle);c7o=r(rKr,"megatron-bert"),rKr.forEach(t),f7o=r(Bwe," \u2014 "),mN=n(Bwe,"A",{href:!0});var tKr=s(mN);m7o=r(tKr,"MegatronBertForCausalLM"),tKr.forEach(t),g7o=r(Bwe," (MegatronBert model)"),Bwe.forEach(t),h7o=i(H),R_=n(H,"LI",{});var Pwe=s(R_);Sle=n(Pwe,"STRONG",{});var aKr=s(Sle);p7o=r(aKr,"openai-gpt"),aKr.forEach(t),u7o=r(Pwe," \u2014 "),gN=n(Pwe,"A",{href:!0});var nKr=s(gN);_7o=r(nKr,"OpenAIGPTLMHeadModel"),nKr.forEach(t),b7o=r(Pwe," (OpenAI GPT model)"),Pwe.forEach(t),v7o=i(H),B_=n(H,"LI",{});var Iwe=s(B_);Rle=n(Iwe,"STRONG",{});var sKr=s(Rle);F7o=r(sKr,"pegasus"),sKr.forEach(t),T7o=r(Iwe," \u2014 "),hN=n(Iwe,"A",{href:!0});var lKr=s(hN);M7o=r(lKr,"PegasusForCausalLM"),lKr.forEach(t),E7o=r(Iwe," (Pegasus model)"),Iwe.forEach(t),C7o=i(H),P_=n(H,"LI",{});var qwe=s(P_);Ble=n(qwe,"STRONG",{});var iKr=s(Ble);w7o=r(iKr,"plbart"),iKr.forEach(t),A7o=r(qwe," \u2014 "),pN=n(qwe,"A",{href:!0});var dKr=s(pN);y7o=r(dKr,"PLBartForCausalLM"),dKr.forEach(t),L7o=r(qwe," (PLBart model)"),qwe.forEach(t),x7o=i(H),I_=n(H,"LI",{});var Nwe=s(I_);Ple=n(Nwe,"STRONG",{});var cKr=s(Ple);$7o=r(cKr,"prophetnet"),cKr.forEach(t),k7o=r(Nwe," \u2014 "),uN=n(Nwe,"A",{href:!0});var fKr=s(uN);S7o=r(fKr,"ProphetNetForCausalLM"),fKr.forEach(t),R7o=r(Nwe," (ProphetNet model)"),Nwe.forEach(t),B7o=i(H),q_=n(H,"LI",{});var jwe=s(q_);Ile=n(jwe,"STRONG",{});var mKr=s(Ile);P7o=r(mKr,"qdqbert"),mKr.forEach(t),I7o=r(jwe," \u2014 "),_N=n(jwe,"A",{href:!0});var gKr=s(_N);q7o=r(gKr,"QDQBertLMHeadModel"),gKr.forEach(t),N7o=r(jwe," (QDQBert model)"),jwe.forEach(t),j7o=i(H),N_=n(H,"LI",{});var Dwe=s(N_);qle=n(Dwe,"STRONG",{});var hKr=s(qle);D7o=r(hKr,"reformer"),hKr.forEach(t),G7o=r(Dwe," \u2014 "),bN=n(Dwe,"A",{href:!0});var pKr=s(bN);O7o=r(pKr,"ReformerModelWithLMHead"),pKr.forEach(t),V7o=r(Dwe," (Reformer model)"),Dwe.forEach(t),X7o=i(H),j_=n(H,"LI",{});var Gwe=s(j_);Nle=n(Gwe,"STRONG",{});var uKr=s(Nle);z7o=r(uKr,"rembert"),uKr.forEach(t),Q7o=r(Gwe," \u2014 "),vN=n(Gwe,"A",{href:!0});var _Kr=s(vN);W7o=r(_Kr,"RemBertForCausalLM"),_Kr.forEach(t),H7o=r(Gwe," (RemBERT model)"),Gwe.forEach(t),U7o=i(H),D_=n(H,"LI",{});var Owe=s(D_);jle=n(Owe,"STRONG",{});var bKr=s(jle);J7o=r(bKr,"roberta"),bKr.forEach(t),Y7o=r(Owe," \u2014 "),FN=n(Owe,"A",{href:!0});var vKr=s(FN);K7o=r(vKr,"RobertaForCausalLM"),vKr.forEach(t),Z7o=r(Owe," (RoBERTa model)"),Owe.forEach(t),eMo=i(H),G_=n(H,"LI",{});var Vwe=s(G_);Dle=n(Vwe,"STRONG",{});var FKr=s(Dle);oMo=r(FKr,"roformer"),FKr.forEach(t),rMo=r(Vwe," \u2014 "),TN=n(Vwe,"A",{href:!0});var TKr=s(TN);tMo=r(TKr,"RoFormerForCausalLM"),TKr.forEach(t),aMo=r(Vwe," (RoFormer model)"),Vwe.forEach(t),nMo=i(H),O_=n(H,"LI",{});var Xwe=s(O_);Gle=n(Xwe,"STRONG",{});var MKr=s(Gle);sMo=r(MKr,"speech_to_text_2"),MKr.forEach(t),lMo=r(Xwe," \u2014 "),MN=n(Xwe,"A",{href:!0});var EKr=s(MN);iMo=r(EKr,"Speech2Text2ForCausalLM"),EKr.forEach(t),dMo=r(Xwe," (Speech2Text2 model)"),Xwe.forEach(t),cMo=i(H),V_=n(H,"LI",{});var zwe=s(V_);Ole=n(zwe,"STRONG",{});var CKr=s(Ole);fMo=r(CKr,"transfo-xl"),CKr.forEach(t),mMo=r(zwe," \u2014 "),EN=n(zwe,"A",{href:!0});var wKr=s(EN);gMo=r(wKr,"TransfoXLLMHeadModel"),wKr.forEach(t),hMo=r(zwe," (Transformer-XL model)"),zwe.forEach(t),pMo=i(H),X_=n(H,"LI",{});var Qwe=s(X_);Vle=n(Qwe,"STRONG",{});var AKr=s(Vle);uMo=r(AKr,"trocr"),AKr.forEach(t),_Mo=r(Qwe," \u2014 "),CN=n(Qwe,"A",{href:!0});var yKr=s(CN);bMo=r(yKr,"TrOCRForCausalLM"),yKr.forEach(t),vMo=r(Qwe," (TrOCR model)"),Qwe.forEach(t),FMo=i(H),z_=n(H,"LI",{});var Wwe=s(z_);Xle=n(Wwe,"STRONG",{});var LKr=s(Xle);TMo=r(LKr,"xglm"),LKr.forEach(t),MMo=r(Wwe," \u2014 "),wN=n(Wwe,"A",{href:!0});var xKr=s(wN);EMo=r(xKr,"XGLMForCausalLM"),xKr.forEach(t),CMo=r(Wwe," (XGLM model)"),Wwe.forEach(t),wMo=i(H),Q_=n(H,"LI",{});var Hwe=s(Q_);zle=n(Hwe,"STRONG",{});var $Kr=s(zle);AMo=r($Kr,"xlm"),$Kr.forEach(t),yMo=r(Hwe," \u2014 "),AN=n(Hwe,"A",{href:!0});var kKr=s(AN);LMo=r(kKr,"XLMWithLMHeadModel"),kKr.forEach(t),xMo=r(Hwe," (XLM model)"),Hwe.forEach(t),$Mo=i(H),W_=n(H,"LI",{});var Uwe=s(W_);Qle=n(Uwe,"STRONG",{});var SKr=s(Qle);kMo=r(SKr,"xlm-prophetnet"),SKr.forEach(t),SMo=r(Uwe," \u2014 "),yN=n(Uwe,"A",{href:!0});var RKr=s(yN);RMo=r(RKr,"XLMProphetNetForCausalLM"),RKr.forEach(t),BMo=r(Uwe," (XLMProphetNet model)"),Uwe.forEach(t),PMo=i(H),H_=n(H,"LI",{});var Jwe=s(H_);Wle=n(Jwe,"STRONG",{});var BKr=s(Wle);IMo=r(BKr,"xlm-roberta"),BKr.forEach(t),qMo=r(Jwe," \u2014 "),LN=n(Jwe,"A",{href:!0});var PKr=s(LN);NMo=r(PKr,"XLMRobertaForCausalLM"),PKr.forEach(t),jMo=r(Jwe," (XLM-RoBERTa model)"),Jwe.forEach(t),DMo=i(H),U_=n(H,"LI",{});var Ywe=s(U_);Hle=n(Ywe,"STRONG",{});var IKr=s(Hle);GMo=r(IKr,"xlm-roberta-xl"),IKr.forEach(t),OMo=r(Ywe," \u2014 "),xN=n(Ywe,"A",{href:!0});var qKr=s(xN);VMo=r(qKr,"XLMRobertaXLForCausalLM"),qKr.forEach(t),XMo=r(Ywe," (XLM-RoBERTa-XL model)"),Ywe.forEach(t),zMo=i(H),J_=n(H,"LI",{});var Kwe=s(J_);Ule=n(Kwe,"STRONG",{});var NKr=s(Ule);QMo=r(NKr,"xlnet"),NKr.forEach(t),WMo=r(Kwe," \u2014 "),$N=n(Kwe,"A",{href:!0});var jKr=s($N);HMo=r(jKr,"XLNetLMHeadModel"),jKr.forEach(t),UMo=r(Kwe," (XLNet model)"),Kwe.forEach(t),H.forEach(t),JMo=i(Kt),Y_=n(Kt,"P",{});var Zwe=s(Y_);YMo=r(Zwe,"The model is set in evaluation mode by default using "),Jle=n(Zwe,"CODE",{});var DKr=s(Jle);KMo=r(DKr,"model.eval()"),DKr.forEach(t),ZMo=r(Zwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yle=n(Zwe,"CODE",{});var GKr=s(Yle);e4o=r(GKr,"model.train()"),GKr.forEach(t),Zwe.forEach(t),o4o=i(Kt),T(K_.$$.fragment,Kt),Kt.forEach(t),Ns.forEach(t),tPe=i(f),wi=n(f,"H2",{class:!0});var nqe=s(wi);Z_=n(nqe,"A",{id:!0,class:!0,href:!0});var OKr=s(Z_);Kle=n(OKr,"SPAN",{});var VKr=s(Kle);T(uA.$$.fragment,VKr),VKr.forEach(t),OKr.forEach(t),r4o=i(nqe),Zle=n(nqe,"SPAN",{});var XKr=s(Zle);t4o=r(XKr,"AutoModelForMaskedLM"),XKr.forEach(t),nqe.forEach(t),aPe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(_A.$$.fragment,js),a4o=i(js),Ai=n(js,"P",{});var PY=s(Ai);n4o=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kN=n(PY,"A",{href:!0});var zKr=s(kN);s4o=r(zKr,"from_pretrained()"),zKr.forEach(t),l4o=r(PY," class method or the "),SN=n(PY,"A",{href:!0});var QKr=s(SN);i4o=r(QKr,"from_config()"),QKr.forEach(t),d4o=r(PY,` class
method.`),PY.forEach(t),c4o=i(js),bA=n(js,"P",{});var sqe=s(bA);f4o=r(sqe,"This class cannot be instantiated directly using "),eie=n(sqe,"CODE",{});var WKr=s(eie);m4o=r(WKr,"__init__()"),WKr.forEach(t),g4o=r(sqe," (throws an error)."),sqe.forEach(t),h4o=i(js),rt=n(js,"DIV",{class:!0});var DC=s(rt);T(vA.$$.fragment,DC),p4o=i(DC),oie=n(DC,"P",{});var HKr=s(oie);u4o=r(HKr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HKr.forEach(t),_4o=i(DC),yi=n(DC,"P",{});var IY=s(yi);b4o=r(IY,`Note:
Loading a model from its configuration file does `),rie=n(IY,"STRONG",{});var UKr=s(rie);v4o=r(UKr,"not"),UKr.forEach(t),F4o=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RN=n(IY,"A",{href:!0});var JKr=s(RN);T4o=r(JKr,"from_pretrained()"),JKr.forEach(t),M4o=r(IY," to load the model weights."),IY.forEach(t),E4o=i(DC),T(e0.$$.fragment,DC),DC.forEach(t),C4o=i(js),Ye=n(js,"DIV",{class:!0});var Zt=s(Ye);T(FA.$$.fragment,Zt),w4o=i(Zt),tie=n(Zt,"P",{});var YKr=s(tie);A4o=r(YKr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),YKr.forEach(t),y4o=i(Zt),Aa=n(Zt,"P",{});var GC=s(Aa);L4o=r(GC,"The model class to instantiate is selected based on the "),aie=n(GC,"CODE",{});var KKr=s(aie);x4o=r(KKr,"model_type"),KKr.forEach(t),$4o=r(GC,` property of the config object (either
passed as an argument or loaded from `),nie=n(GC,"CODE",{});var ZKr=s(nie);k4o=r(ZKr,"pretrained_model_name_or_path"),ZKr.forEach(t),S4o=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sie=n(GC,"CODE",{});var eZr=s(sie);R4o=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),B4o=r(GC,":"),GC.forEach(t),P4o=i(Zt),Q=n(Zt,"UL",{});var U=s(Q);o0=n(U,"LI",{});var eAe=s(o0);lie=n(eAe,"STRONG",{});var oZr=s(lie);I4o=r(oZr,"albert"),oZr.forEach(t),q4o=r(eAe," \u2014 "),BN=n(eAe,"A",{href:!0});var rZr=s(BN);N4o=r(rZr,"AlbertForMaskedLM"),rZr.forEach(t),j4o=r(eAe," (ALBERT model)"),eAe.forEach(t),D4o=i(U),r0=n(U,"LI",{});var oAe=s(r0);iie=n(oAe,"STRONG",{});var tZr=s(iie);G4o=r(tZr,"bart"),tZr.forEach(t),O4o=r(oAe," \u2014 "),PN=n(oAe,"A",{href:!0});var aZr=s(PN);V4o=r(aZr,"BartForConditionalGeneration"),aZr.forEach(t),X4o=r(oAe," (BART model)"),oAe.forEach(t),z4o=i(U),t0=n(U,"LI",{});var rAe=s(t0);die=n(rAe,"STRONG",{});var nZr=s(die);Q4o=r(nZr,"bert"),nZr.forEach(t),W4o=r(rAe," \u2014 "),IN=n(rAe,"A",{href:!0});var sZr=s(IN);H4o=r(sZr,"BertForMaskedLM"),sZr.forEach(t),U4o=r(rAe," (BERT model)"),rAe.forEach(t),J4o=i(U),a0=n(U,"LI",{});var tAe=s(a0);cie=n(tAe,"STRONG",{});var lZr=s(cie);Y4o=r(lZr,"big_bird"),lZr.forEach(t),K4o=r(tAe," \u2014 "),qN=n(tAe,"A",{href:!0});var iZr=s(qN);Z4o=r(iZr,"BigBirdForMaskedLM"),iZr.forEach(t),eEo=r(tAe," (BigBird model)"),tAe.forEach(t),oEo=i(U),n0=n(U,"LI",{});var aAe=s(n0);fie=n(aAe,"STRONG",{});var dZr=s(fie);rEo=r(dZr,"camembert"),dZr.forEach(t),tEo=r(aAe," \u2014 "),NN=n(aAe,"A",{href:!0});var cZr=s(NN);aEo=r(cZr,"CamembertForMaskedLM"),cZr.forEach(t),nEo=r(aAe," (CamemBERT model)"),aAe.forEach(t),sEo=i(U),s0=n(U,"LI",{});var nAe=s(s0);mie=n(nAe,"STRONG",{});var fZr=s(mie);lEo=r(fZr,"convbert"),fZr.forEach(t),iEo=r(nAe," \u2014 "),jN=n(nAe,"A",{href:!0});var mZr=s(jN);dEo=r(mZr,"ConvBertForMaskedLM"),mZr.forEach(t),cEo=r(nAe," (ConvBERT model)"),nAe.forEach(t),fEo=i(U),l0=n(U,"LI",{});var sAe=s(l0);gie=n(sAe,"STRONG",{});var gZr=s(gie);mEo=r(gZr,"data2vec-text"),gZr.forEach(t),gEo=r(sAe," \u2014 "),DN=n(sAe,"A",{href:!0});var hZr=s(DN);hEo=r(hZr,"Data2VecTextForMaskedLM"),hZr.forEach(t),pEo=r(sAe," (Data2VecText model)"),sAe.forEach(t),uEo=i(U),i0=n(U,"LI",{});var lAe=s(i0);hie=n(lAe,"STRONG",{});var pZr=s(hie);_Eo=r(pZr,"deberta"),pZr.forEach(t),bEo=r(lAe," \u2014 "),GN=n(lAe,"A",{href:!0});var uZr=s(GN);vEo=r(uZr,"DebertaForMaskedLM"),uZr.forEach(t),FEo=r(lAe," (DeBERTa model)"),lAe.forEach(t),TEo=i(U),d0=n(U,"LI",{});var iAe=s(d0);pie=n(iAe,"STRONG",{});var _Zr=s(pie);MEo=r(_Zr,"deberta-v2"),_Zr.forEach(t),EEo=r(iAe," \u2014 "),ON=n(iAe,"A",{href:!0});var bZr=s(ON);CEo=r(bZr,"DebertaV2ForMaskedLM"),bZr.forEach(t),wEo=r(iAe," (DeBERTa-v2 model)"),iAe.forEach(t),AEo=i(U),c0=n(U,"LI",{});var dAe=s(c0);uie=n(dAe,"STRONG",{});var vZr=s(uie);yEo=r(vZr,"distilbert"),vZr.forEach(t),LEo=r(dAe," \u2014 "),VN=n(dAe,"A",{href:!0});var FZr=s(VN);xEo=r(FZr,"DistilBertForMaskedLM"),FZr.forEach(t),$Eo=r(dAe," (DistilBERT model)"),dAe.forEach(t),kEo=i(U),f0=n(U,"LI",{});var cAe=s(f0);_ie=n(cAe,"STRONG",{});var TZr=s(_ie);SEo=r(TZr,"electra"),TZr.forEach(t),REo=r(cAe," \u2014 "),XN=n(cAe,"A",{href:!0});var MZr=s(XN);BEo=r(MZr,"ElectraForMaskedLM"),MZr.forEach(t),PEo=r(cAe," (ELECTRA model)"),cAe.forEach(t),IEo=i(U),m0=n(U,"LI",{});var fAe=s(m0);bie=n(fAe,"STRONG",{});var EZr=s(bie);qEo=r(EZr,"flaubert"),EZr.forEach(t),NEo=r(fAe," \u2014 "),zN=n(fAe,"A",{href:!0});var CZr=s(zN);jEo=r(CZr,"FlaubertWithLMHeadModel"),CZr.forEach(t),DEo=r(fAe," (FlauBERT model)"),fAe.forEach(t),GEo=i(U),g0=n(U,"LI",{});var mAe=s(g0);vie=n(mAe,"STRONG",{});var wZr=s(vie);OEo=r(wZr,"fnet"),wZr.forEach(t),VEo=r(mAe," \u2014 "),QN=n(mAe,"A",{href:!0});var AZr=s(QN);XEo=r(AZr,"FNetForMaskedLM"),AZr.forEach(t),zEo=r(mAe," (FNet model)"),mAe.forEach(t),QEo=i(U),h0=n(U,"LI",{});var gAe=s(h0);Fie=n(gAe,"STRONG",{});var yZr=s(Fie);WEo=r(yZr,"funnel"),yZr.forEach(t),HEo=r(gAe," \u2014 "),WN=n(gAe,"A",{href:!0});var LZr=s(WN);UEo=r(LZr,"FunnelForMaskedLM"),LZr.forEach(t),JEo=r(gAe," (Funnel Transformer model)"),gAe.forEach(t),YEo=i(U),p0=n(U,"LI",{});var hAe=s(p0);Tie=n(hAe,"STRONG",{});var xZr=s(Tie);KEo=r(xZr,"ibert"),xZr.forEach(t),ZEo=r(hAe," \u2014 "),HN=n(hAe,"A",{href:!0});var $Zr=s(HN);e5o=r($Zr,"IBertForMaskedLM"),$Zr.forEach(t),o5o=r(hAe," (I-BERT model)"),hAe.forEach(t),r5o=i(U),u0=n(U,"LI",{});var pAe=s(u0);Mie=n(pAe,"STRONG",{});var kZr=s(Mie);t5o=r(kZr,"layoutlm"),kZr.forEach(t),a5o=r(pAe," \u2014 "),UN=n(pAe,"A",{href:!0});var SZr=s(UN);n5o=r(SZr,"LayoutLMForMaskedLM"),SZr.forEach(t),s5o=r(pAe," (LayoutLM model)"),pAe.forEach(t),l5o=i(U),_0=n(U,"LI",{});var uAe=s(_0);Eie=n(uAe,"STRONG",{});var RZr=s(Eie);i5o=r(RZr,"longformer"),RZr.forEach(t),d5o=r(uAe," \u2014 "),JN=n(uAe,"A",{href:!0});var BZr=s(JN);c5o=r(BZr,"LongformerForMaskedLM"),BZr.forEach(t),f5o=r(uAe," (Longformer model)"),uAe.forEach(t),m5o=i(U),b0=n(U,"LI",{});var _Ae=s(b0);Cie=n(_Ae,"STRONG",{});var PZr=s(Cie);g5o=r(PZr,"mbart"),PZr.forEach(t),h5o=r(_Ae," \u2014 "),YN=n(_Ae,"A",{href:!0});var IZr=s(YN);p5o=r(IZr,"MBartForConditionalGeneration"),IZr.forEach(t),u5o=r(_Ae," (mBART model)"),_Ae.forEach(t),_5o=i(U),v0=n(U,"LI",{});var bAe=s(v0);wie=n(bAe,"STRONG",{});var qZr=s(wie);b5o=r(qZr,"megatron-bert"),qZr.forEach(t),v5o=r(bAe," \u2014 "),KN=n(bAe,"A",{href:!0});var NZr=s(KN);F5o=r(NZr,"MegatronBertForMaskedLM"),NZr.forEach(t),T5o=r(bAe," (MegatronBert model)"),bAe.forEach(t),M5o=i(U),F0=n(U,"LI",{});var vAe=s(F0);Aie=n(vAe,"STRONG",{});var jZr=s(Aie);E5o=r(jZr,"mobilebert"),jZr.forEach(t),C5o=r(vAe," \u2014 "),ZN=n(vAe,"A",{href:!0});var DZr=s(ZN);w5o=r(DZr,"MobileBertForMaskedLM"),DZr.forEach(t),A5o=r(vAe," (MobileBERT model)"),vAe.forEach(t),y5o=i(U),T0=n(U,"LI",{});var FAe=s(T0);yie=n(FAe,"STRONG",{});var GZr=s(yie);L5o=r(GZr,"mpnet"),GZr.forEach(t),x5o=r(FAe," \u2014 "),ej=n(FAe,"A",{href:!0});var OZr=s(ej);$5o=r(OZr,"MPNetForMaskedLM"),OZr.forEach(t),k5o=r(FAe," (MPNet model)"),FAe.forEach(t),S5o=i(U),M0=n(U,"LI",{});var TAe=s(M0);Lie=n(TAe,"STRONG",{});var VZr=s(Lie);R5o=r(VZr,"nystromformer"),VZr.forEach(t),B5o=r(TAe," \u2014 "),oj=n(TAe,"A",{href:!0});var XZr=s(oj);P5o=r(XZr,"NystromformerForMaskedLM"),XZr.forEach(t),I5o=r(TAe," (Nystromformer model)"),TAe.forEach(t),q5o=i(U),E0=n(U,"LI",{});var MAe=s(E0);xie=n(MAe,"STRONG",{});var zZr=s(xie);N5o=r(zZr,"perceiver"),zZr.forEach(t),j5o=r(MAe," \u2014 "),rj=n(MAe,"A",{href:!0});var QZr=s(rj);D5o=r(QZr,"PerceiverForMaskedLM"),QZr.forEach(t),G5o=r(MAe," (Perceiver model)"),MAe.forEach(t),O5o=i(U),C0=n(U,"LI",{});var EAe=s(C0);$ie=n(EAe,"STRONG",{});var WZr=s($ie);V5o=r(WZr,"qdqbert"),WZr.forEach(t),X5o=r(EAe," \u2014 "),tj=n(EAe,"A",{href:!0});var HZr=s(tj);z5o=r(HZr,"QDQBertForMaskedLM"),HZr.forEach(t),Q5o=r(EAe," (QDQBert model)"),EAe.forEach(t),W5o=i(U),w0=n(U,"LI",{});var CAe=s(w0);kie=n(CAe,"STRONG",{});var UZr=s(kie);H5o=r(UZr,"reformer"),UZr.forEach(t),U5o=r(CAe," \u2014 "),aj=n(CAe,"A",{href:!0});var JZr=s(aj);J5o=r(JZr,"ReformerForMaskedLM"),JZr.forEach(t),Y5o=r(CAe," (Reformer model)"),CAe.forEach(t),K5o=i(U),A0=n(U,"LI",{});var wAe=s(A0);Sie=n(wAe,"STRONG",{});var YZr=s(Sie);Z5o=r(YZr,"rembert"),YZr.forEach(t),eCo=r(wAe," \u2014 "),nj=n(wAe,"A",{href:!0});var KZr=s(nj);oCo=r(KZr,"RemBertForMaskedLM"),KZr.forEach(t),rCo=r(wAe," (RemBERT model)"),wAe.forEach(t),tCo=i(U),y0=n(U,"LI",{});var AAe=s(y0);Rie=n(AAe,"STRONG",{});var ZZr=s(Rie);aCo=r(ZZr,"roberta"),ZZr.forEach(t),nCo=r(AAe," \u2014 "),sj=n(AAe,"A",{href:!0});var eet=s(sj);sCo=r(eet,"RobertaForMaskedLM"),eet.forEach(t),lCo=r(AAe," (RoBERTa model)"),AAe.forEach(t),iCo=i(U),L0=n(U,"LI",{});var yAe=s(L0);Bie=n(yAe,"STRONG",{});var oet=s(Bie);dCo=r(oet,"roformer"),oet.forEach(t),cCo=r(yAe," \u2014 "),lj=n(yAe,"A",{href:!0});var ret=s(lj);fCo=r(ret,"RoFormerForMaskedLM"),ret.forEach(t),mCo=r(yAe," (RoFormer model)"),yAe.forEach(t),gCo=i(U),x0=n(U,"LI",{});var LAe=s(x0);Pie=n(LAe,"STRONG",{});var tet=s(Pie);hCo=r(tet,"squeezebert"),tet.forEach(t),pCo=r(LAe," \u2014 "),ij=n(LAe,"A",{href:!0});var aet=s(ij);uCo=r(aet,"SqueezeBertForMaskedLM"),aet.forEach(t),_Co=r(LAe," (SqueezeBERT model)"),LAe.forEach(t),bCo=i(U),$0=n(U,"LI",{});var xAe=s($0);Iie=n(xAe,"STRONG",{});var net=s(Iie);vCo=r(net,"tapas"),net.forEach(t),FCo=r(xAe," \u2014 "),dj=n(xAe,"A",{href:!0});var set=s(dj);TCo=r(set,"TapasForMaskedLM"),set.forEach(t),MCo=r(xAe," (TAPAS model)"),xAe.forEach(t),ECo=i(U),k0=n(U,"LI",{});var $Ae=s(k0);qie=n($Ae,"STRONG",{});var iet=s(qie);CCo=r(iet,"wav2vec2"),iet.forEach(t),wCo=r($Ae," \u2014 "),Nie=n($Ae,"CODE",{});var det=s(Nie);ACo=r(det,"Wav2Vec2ForMaskedLM"),det.forEach(t),yCo=r($Ae," (Wav2Vec2 model)"),$Ae.forEach(t),LCo=i(U),S0=n(U,"LI",{});var kAe=s(S0);jie=n(kAe,"STRONG",{});var cet=s(jie);xCo=r(cet,"xlm"),cet.forEach(t),$Co=r(kAe," \u2014 "),cj=n(kAe,"A",{href:!0});var fet=s(cj);kCo=r(fet,"XLMWithLMHeadModel"),fet.forEach(t),SCo=r(kAe," (XLM model)"),kAe.forEach(t),RCo=i(U),R0=n(U,"LI",{});var SAe=s(R0);Die=n(SAe,"STRONG",{});var met=s(Die);BCo=r(met,"xlm-roberta"),met.forEach(t),PCo=r(SAe," \u2014 "),fj=n(SAe,"A",{href:!0});var get=s(fj);ICo=r(get,"XLMRobertaForMaskedLM"),get.forEach(t),qCo=r(SAe," (XLM-RoBERTa model)"),SAe.forEach(t),NCo=i(U),B0=n(U,"LI",{});var RAe=s(B0);Gie=n(RAe,"STRONG",{});var het=s(Gie);jCo=r(het,"xlm-roberta-xl"),het.forEach(t),DCo=r(RAe," \u2014 "),mj=n(RAe,"A",{href:!0});var pet=s(mj);GCo=r(pet,"XLMRobertaXLForMaskedLM"),pet.forEach(t),OCo=r(RAe," (XLM-RoBERTa-XL model)"),RAe.forEach(t),VCo=i(U),P0=n(U,"LI",{});var BAe=s(P0);Oie=n(BAe,"STRONG",{});var uet=s(Oie);XCo=r(uet,"yoso"),uet.forEach(t),zCo=r(BAe," \u2014 "),gj=n(BAe,"A",{href:!0});var _et=s(gj);QCo=r(_et,"YosoForMaskedLM"),_et.forEach(t),WCo=r(BAe," (YOSO model)"),BAe.forEach(t),U.forEach(t),HCo=i(Zt),I0=n(Zt,"P",{});var PAe=s(I0);UCo=r(PAe,"The model is set in evaluation mode by default using "),Vie=n(PAe,"CODE",{});var bet=s(Vie);JCo=r(bet,"model.eval()"),bet.forEach(t),YCo=r(PAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xie=n(PAe,"CODE",{});var vet=s(Xie);KCo=r(vet,"model.train()"),vet.forEach(t),PAe.forEach(t),ZCo=i(Zt),T(q0.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),nPe=i(f),Li=n(f,"H2",{class:!0});var lqe=s(Li);N0=n(lqe,"A",{id:!0,class:!0,href:!0});var Fet=s(N0);zie=n(Fet,"SPAN",{});var Tet=s(zie);T(TA.$$.fragment,Tet),Tet.forEach(t),Fet.forEach(t),e3o=i(lqe),Qie=n(lqe,"SPAN",{});var Met=s(Qie);o3o=r(Met,"AutoModelForSeq2SeqLM"),Met.forEach(t),lqe.forEach(t),sPe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(MA.$$.fragment,Ds),r3o=i(Ds),xi=n(Ds,"P",{});var qY=s(xi);t3o=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hj=n(qY,"A",{href:!0});var Eet=s(hj);a3o=r(Eet,"from_pretrained()"),Eet.forEach(t),n3o=r(qY," class method or the "),pj=n(qY,"A",{href:!0});var Cet=s(pj);s3o=r(Cet,"from_config()"),Cet.forEach(t),l3o=r(qY,` class
method.`),qY.forEach(t),i3o=i(Ds),EA=n(Ds,"P",{});var iqe=s(EA);d3o=r(iqe,"This class cannot be instantiated directly using "),Wie=n(iqe,"CODE",{});var wet=s(Wie);c3o=r(wet,"__init__()"),wet.forEach(t),f3o=r(iqe," (throws an error)."),iqe.forEach(t),m3o=i(Ds),tt=n(Ds,"DIV",{class:!0});var OC=s(tt);T(CA.$$.fragment,OC),g3o=i(OC),Hie=n(OC,"P",{});var Aet=s(Hie);h3o=r(Aet,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Aet.forEach(t),p3o=i(OC),$i=n(OC,"P",{});var NY=s($i);u3o=r(NY,`Note:
Loading a model from its configuration file does `),Uie=n(NY,"STRONG",{});var yet=s(Uie);_3o=r(yet,"not"),yet.forEach(t),b3o=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),uj=n(NY,"A",{href:!0});var Let=s(uj);v3o=r(Let,"from_pretrained()"),Let.forEach(t),F3o=r(NY," to load the model weights."),NY.forEach(t),T3o=i(OC),T(j0.$$.fragment,OC),OC.forEach(t),M3o=i(Ds),Ke=n(Ds,"DIV",{class:!0});var ea=s(Ke);T(wA.$$.fragment,ea),E3o=i(ea),Jie=n(ea,"P",{});var xet=s(Jie);C3o=r(xet,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xet.forEach(t),w3o=i(ea),ya=n(ea,"P",{});var VC=s(ya);A3o=r(VC,"The model class to instantiate is selected based on the "),Yie=n(VC,"CODE",{});var $et=s(Yie);y3o=r($et,"model_type"),$et.forEach(t),L3o=r(VC,` property of the config object (either
passed as an argument or loaded from `),Kie=n(VC,"CODE",{});var ket=s(Kie);x3o=r(ket,"pretrained_model_name_or_path"),ket.forEach(t),$3o=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zie=n(VC,"CODE",{});var Set=s(Zie);k3o=r(Set,"pretrained_model_name_or_path"),Set.forEach(t),S3o=r(VC,":"),VC.forEach(t),R3o=i(ea),he=n(ea,"UL",{});var ue=s(he);D0=n(ue,"LI",{});var IAe=s(D0);ede=n(IAe,"STRONG",{});var Ret=s(ede);B3o=r(Ret,"bart"),Ret.forEach(t),P3o=r(IAe," \u2014 "),_j=n(IAe,"A",{href:!0});var Bet=s(_j);I3o=r(Bet,"BartForConditionalGeneration"),Bet.forEach(t),q3o=r(IAe," (BART model)"),IAe.forEach(t),N3o=i(ue),G0=n(ue,"LI",{});var qAe=s(G0);ode=n(qAe,"STRONG",{});var Pet=s(ode);j3o=r(Pet,"bigbird_pegasus"),Pet.forEach(t),D3o=r(qAe," \u2014 "),bj=n(qAe,"A",{href:!0});var Iet=s(bj);G3o=r(Iet,"BigBirdPegasusForConditionalGeneration"),Iet.forEach(t),O3o=r(qAe," (BigBirdPegasus model)"),qAe.forEach(t),V3o=i(ue),O0=n(ue,"LI",{});var NAe=s(O0);rde=n(NAe,"STRONG",{});var qet=s(rde);X3o=r(qet,"blenderbot"),qet.forEach(t),z3o=r(NAe," \u2014 "),vj=n(NAe,"A",{href:!0});var Net=s(vj);Q3o=r(Net,"BlenderbotForConditionalGeneration"),Net.forEach(t),W3o=r(NAe," (Blenderbot model)"),NAe.forEach(t),H3o=i(ue),V0=n(ue,"LI",{});var jAe=s(V0);tde=n(jAe,"STRONG",{});var jet=s(tde);U3o=r(jet,"blenderbot-small"),jet.forEach(t),J3o=r(jAe," \u2014 "),Fj=n(jAe,"A",{href:!0});var Det=s(Fj);Y3o=r(Det,"BlenderbotSmallForConditionalGeneration"),Det.forEach(t),K3o=r(jAe," (BlenderbotSmall model)"),jAe.forEach(t),Z3o=i(ue),X0=n(ue,"LI",{});var DAe=s(X0);ade=n(DAe,"STRONG",{});var Get=s(ade);ewo=r(Get,"encoder-decoder"),Get.forEach(t),owo=r(DAe," \u2014 "),Tj=n(DAe,"A",{href:!0});var Oet=s(Tj);rwo=r(Oet,"EncoderDecoderModel"),Oet.forEach(t),two=r(DAe," (Encoder decoder model)"),DAe.forEach(t),awo=i(ue),z0=n(ue,"LI",{});var GAe=s(z0);nde=n(GAe,"STRONG",{});var Vet=s(nde);nwo=r(Vet,"fsmt"),Vet.forEach(t),swo=r(GAe," \u2014 "),Mj=n(GAe,"A",{href:!0});var Xet=s(Mj);lwo=r(Xet,"FSMTForConditionalGeneration"),Xet.forEach(t),iwo=r(GAe," (FairSeq Machine-Translation model)"),GAe.forEach(t),dwo=i(ue),Q0=n(ue,"LI",{});var OAe=s(Q0);sde=n(OAe,"STRONG",{});var zet=s(sde);cwo=r(zet,"led"),zet.forEach(t),fwo=r(OAe," \u2014 "),Ej=n(OAe,"A",{href:!0});var Qet=s(Ej);mwo=r(Qet,"LEDForConditionalGeneration"),Qet.forEach(t),gwo=r(OAe," (LED model)"),OAe.forEach(t),hwo=i(ue),W0=n(ue,"LI",{});var VAe=s(W0);lde=n(VAe,"STRONG",{});var Wet=s(lde);pwo=r(Wet,"m2m_100"),Wet.forEach(t),uwo=r(VAe," \u2014 "),Cj=n(VAe,"A",{href:!0});var Het=s(Cj);_wo=r(Het,"M2M100ForConditionalGeneration"),Het.forEach(t),bwo=r(VAe," (M2M100 model)"),VAe.forEach(t),vwo=i(ue),H0=n(ue,"LI",{});var XAe=s(H0);ide=n(XAe,"STRONG",{});var Uet=s(ide);Fwo=r(Uet,"marian"),Uet.forEach(t),Two=r(XAe," \u2014 "),wj=n(XAe,"A",{href:!0});var Jet=s(wj);Mwo=r(Jet,"MarianMTModel"),Jet.forEach(t),Ewo=r(XAe," (Marian model)"),XAe.forEach(t),Cwo=i(ue),U0=n(ue,"LI",{});var zAe=s(U0);dde=n(zAe,"STRONG",{});var Yet=s(dde);wwo=r(Yet,"mbart"),Yet.forEach(t),Awo=r(zAe," \u2014 "),Aj=n(zAe,"A",{href:!0});var Ket=s(Aj);ywo=r(Ket,"MBartForConditionalGeneration"),Ket.forEach(t),Lwo=r(zAe," (mBART model)"),zAe.forEach(t),xwo=i(ue),J0=n(ue,"LI",{});var QAe=s(J0);cde=n(QAe,"STRONG",{});var Zet=s(cde);$wo=r(Zet,"mt5"),Zet.forEach(t),kwo=r(QAe," \u2014 "),yj=n(QAe,"A",{href:!0});var eot=s(yj);Swo=r(eot,"MT5ForConditionalGeneration"),eot.forEach(t),Rwo=r(QAe," (mT5 model)"),QAe.forEach(t),Bwo=i(ue),Y0=n(ue,"LI",{});var WAe=s(Y0);fde=n(WAe,"STRONG",{});var oot=s(fde);Pwo=r(oot,"pegasus"),oot.forEach(t),Iwo=r(WAe," \u2014 "),Lj=n(WAe,"A",{href:!0});var rot=s(Lj);qwo=r(rot,"PegasusForConditionalGeneration"),rot.forEach(t),Nwo=r(WAe," (Pegasus model)"),WAe.forEach(t),jwo=i(ue),K0=n(ue,"LI",{});var HAe=s(K0);mde=n(HAe,"STRONG",{});var tot=s(mde);Dwo=r(tot,"plbart"),tot.forEach(t),Gwo=r(HAe," \u2014 "),xj=n(HAe,"A",{href:!0});var aot=s(xj);Owo=r(aot,"PLBartForConditionalGeneration"),aot.forEach(t),Vwo=r(HAe," (PLBart model)"),HAe.forEach(t),Xwo=i(ue),Z0=n(ue,"LI",{});var UAe=s(Z0);gde=n(UAe,"STRONG",{});var not=s(gde);zwo=r(not,"prophetnet"),not.forEach(t),Qwo=r(UAe," \u2014 "),$j=n(UAe,"A",{href:!0});var sot=s($j);Wwo=r(sot,"ProphetNetForConditionalGeneration"),sot.forEach(t),Hwo=r(UAe," (ProphetNet model)"),UAe.forEach(t),Uwo=i(ue),e1=n(ue,"LI",{});var JAe=s(e1);hde=n(JAe,"STRONG",{});var lot=s(hde);Jwo=r(lot,"t5"),lot.forEach(t),Ywo=r(JAe," \u2014 "),kj=n(JAe,"A",{href:!0});var iot=s(kj);Kwo=r(iot,"T5ForConditionalGeneration"),iot.forEach(t),Zwo=r(JAe," (T5 model)"),JAe.forEach(t),eAo=i(ue),o1=n(ue,"LI",{});var YAe=s(o1);pde=n(YAe,"STRONG",{});var dot=s(pde);oAo=r(dot,"tapex"),dot.forEach(t),rAo=r(YAe," \u2014 "),Sj=n(YAe,"A",{href:!0});var cot=s(Sj);tAo=r(cot,"BartForConditionalGeneration"),cot.forEach(t),aAo=r(YAe," (TAPEX model)"),YAe.forEach(t),nAo=i(ue),r1=n(ue,"LI",{});var KAe=s(r1);ude=n(KAe,"STRONG",{});var fot=s(ude);sAo=r(fot,"xlm-prophetnet"),fot.forEach(t),lAo=r(KAe," \u2014 "),Rj=n(KAe,"A",{href:!0});var mot=s(Rj);iAo=r(mot,"XLMProphetNetForConditionalGeneration"),mot.forEach(t),dAo=r(KAe," (XLMProphetNet model)"),KAe.forEach(t),ue.forEach(t),cAo=i(ea),t1=n(ea,"P",{});var ZAe=s(t1);fAo=r(ZAe,"The model is set in evaluation mode by default using "),_de=n(ZAe,"CODE",{});var got=s(_de);mAo=r(got,"model.eval()"),got.forEach(t),gAo=r(ZAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=n(ZAe,"CODE",{});var hot=s(bde);hAo=r(hot,"model.train()"),hot.forEach(t),ZAe.forEach(t),pAo=i(ea),T(a1.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),lPe=i(f),ki=n(f,"H2",{class:!0});var dqe=s(ki);n1=n(dqe,"A",{id:!0,class:!0,href:!0});var pot=s(n1);vde=n(pot,"SPAN",{});var uot=s(vde);T(AA.$$.fragment,uot),uot.forEach(t),pot.forEach(t),uAo=i(dqe),Fde=n(dqe,"SPAN",{});var _ot=s(Fde);_Ao=r(_ot,"AutoModelForSequenceClassification"),_ot.forEach(t),dqe.forEach(t),iPe=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T(yA.$$.fragment,Gs),bAo=i(Gs),Si=n(Gs,"P",{});var jY=s(Si);vAo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bj=n(jY,"A",{href:!0});var bot=s(Bj);FAo=r(bot,"from_pretrained()"),bot.forEach(t),TAo=r(jY," class method or the "),Pj=n(jY,"A",{href:!0});var vot=s(Pj);MAo=r(vot,"from_config()"),vot.forEach(t),EAo=r(jY,` class
method.`),jY.forEach(t),CAo=i(Gs),LA=n(Gs,"P",{});var cqe=s(LA);wAo=r(cqe,"This class cannot be instantiated directly using "),Tde=n(cqe,"CODE",{});var Fot=s(Tde);AAo=r(Fot,"__init__()"),Fot.forEach(t),yAo=r(cqe," (throws an error)."),cqe.forEach(t),LAo=i(Gs),at=n(Gs,"DIV",{class:!0});var XC=s(at);T(xA.$$.fragment,XC),xAo=i(XC),Mde=n(XC,"P",{});var Tot=s(Mde);$Ao=r(Tot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Tot.forEach(t),kAo=i(XC),Ri=n(XC,"P",{});var DY=s(Ri);SAo=r(DY,`Note:
Loading a model from its configuration file does `),Ede=n(DY,"STRONG",{});var Mot=s(Ede);RAo=r(Mot,"not"),Mot.forEach(t),BAo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ij=n(DY,"A",{href:!0});var Eot=s(Ij);PAo=r(Eot,"from_pretrained()"),Eot.forEach(t),IAo=r(DY," to load the model weights."),DY.forEach(t),qAo=i(XC),T(s1.$$.fragment,XC),XC.forEach(t),NAo=i(Gs),Ze=n(Gs,"DIV",{class:!0});var oa=s(Ze);T($A.$$.fragment,oa),jAo=i(oa),Cde=n(oa,"P",{});var Cot=s(Cde);DAo=r(Cot,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Cot.forEach(t),GAo=i(oa),La=n(oa,"P",{});var zC=s(La);OAo=r(zC,"The model class to instantiate is selected based on the "),wde=n(zC,"CODE",{});var wot=s(wde);VAo=r(wot,"model_type"),wot.forEach(t),XAo=r(zC,` property of the config object (either
passed as an argument or loaded from `),Ade=n(zC,"CODE",{});var Aot=s(Ade);zAo=r(Aot,"pretrained_model_name_or_path"),Aot.forEach(t),QAo=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=n(zC,"CODE",{});var yot=s(yde);WAo=r(yot,"pretrained_model_name_or_path"),yot.forEach(t),HAo=r(zC,":"),zC.forEach(t),UAo=i(oa),q=n(oa,"UL",{});var N=s(q);l1=n(N,"LI",{});var eye=s(l1);Lde=n(eye,"STRONG",{});var Lot=s(Lde);JAo=r(Lot,"albert"),Lot.forEach(t),YAo=r(eye," \u2014 "),qj=n(eye,"A",{href:!0});var xot=s(qj);KAo=r(xot,"AlbertForSequenceClassification"),xot.forEach(t),ZAo=r(eye," (ALBERT model)"),eye.forEach(t),eyo=i(N),i1=n(N,"LI",{});var oye=s(i1);xde=n(oye,"STRONG",{});var $ot=s(xde);oyo=r($ot,"bart"),$ot.forEach(t),ryo=r(oye," \u2014 "),Nj=n(oye,"A",{href:!0});var kot=s(Nj);tyo=r(kot,"BartForSequenceClassification"),kot.forEach(t),ayo=r(oye," (BART model)"),oye.forEach(t),nyo=i(N),d1=n(N,"LI",{});var rye=s(d1);$de=n(rye,"STRONG",{});var Sot=s($de);syo=r(Sot,"bert"),Sot.forEach(t),lyo=r(rye," \u2014 "),jj=n(rye,"A",{href:!0});var Rot=s(jj);iyo=r(Rot,"BertForSequenceClassification"),Rot.forEach(t),dyo=r(rye," (BERT model)"),rye.forEach(t),cyo=i(N),c1=n(N,"LI",{});var tye=s(c1);kde=n(tye,"STRONG",{});var Bot=s(kde);fyo=r(Bot,"big_bird"),Bot.forEach(t),myo=r(tye," \u2014 "),Dj=n(tye,"A",{href:!0});var Pot=s(Dj);gyo=r(Pot,"BigBirdForSequenceClassification"),Pot.forEach(t),hyo=r(tye," (BigBird model)"),tye.forEach(t),pyo=i(N),f1=n(N,"LI",{});var aye=s(f1);Sde=n(aye,"STRONG",{});var Iot=s(Sde);uyo=r(Iot,"bigbird_pegasus"),Iot.forEach(t),_yo=r(aye," \u2014 "),Gj=n(aye,"A",{href:!0});var qot=s(Gj);byo=r(qot,"BigBirdPegasusForSequenceClassification"),qot.forEach(t),vyo=r(aye," (BigBirdPegasus model)"),aye.forEach(t),Fyo=i(N),m1=n(N,"LI",{});var nye=s(m1);Rde=n(nye,"STRONG",{});var Not=s(Rde);Tyo=r(Not,"camembert"),Not.forEach(t),Myo=r(nye," \u2014 "),Oj=n(nye,"A",{href:!0});var jot=s(Oj);Eyo=r(jot,"CamembertForSequenceClassification"),jot.forEach(t),Cyo=r(nye," (CamemBERT model)"),nye.forEach(t),wyo=i(N),g1=n(N,"LI",{});var sye=s(g1);Bde=n(sye,"STRONG",{});var Dot=s(Bde);Ayo=r(Dot,"canine"),Dot.forEach(t),yyo=r(sye," \u2014 "),Vj=n(sye,"A",{href:!0});var Got=s(Vj);Lyo=r(Got,"CanineForSequenceClassification"),Got.forEach(t),xyo=r(sye," (Canine model)"),sye.forEach(t),$yo=i(N),h1=n(N,"LI",{});var lye=s(h1);Pde=n(lye,"STRONG",{});var Oot=s(Pde);kyo=r(Oot,"convbert"),Oot.forEach(t),Syo=r(lye," \u2014 "),Xj=n(lye,"A",{href:!0});var Vot=s(Xj);Ryo=r(Vot,"ConvBertForSequenceClassification"),Vot.forEach(t),Byo=r(lye," (ConvBERT model)"),lye.forEach(t),Pyo=i(N),p1=n(N,"LI",{});var iye=s(p1);Ide=n(iye,"STRONG",{});var Xot=s(Ide);Iyo=r(Xot,"ctrl"),Xot.forEach(t),qyo=r(iye," \u2014 "),zj=n(iye,"A",{href:!0});var zot=s(zj);Nyo=r(zot,"CTRLForSequenceClassification"),zot.forEach(t),jyo=r(iye," (CTRL model)"),iye.forEach(t),Dyo=i(N),u1=n(N,"LI",{});var dye=s(u1);qde=n(dye,"STRONG",{});var Qot=s(qde);Gyo=r(Qot,"data2vec-text"),Qot.forEach(t),Oyo=r(dye," \u2014 "),Qj=n(dye,"A",{href:!0});var Wot=s(Qj);Vyo=r(Wot,"Data2VecTextForSequenceClassification"),Wot.forEach(t),Xyo=r(dye," (Data2VecText model)"),dye.forEach(t),zyo=i(N),_1=n(N,"LI",{});var cye=s(_1);Nde=n(cye,"STRONG",{});var Hot=s(Nde);Qyo=r(Hot,"deberta"),Hot.forEach(t),Wyo=r(cye," \u2014 "),Wj=n(cye,"A",{href:!0});var Uot=s(Wj);Hyo=r(Uot,"DebertaForSequenceClassification"),Uot.forEach(t),Uyo=r(cye," (DeBERTa model)"),cye.forEach(t),Jyo=i(N),b1=n(N,"LI",{});var fye=s(b1);jde=n(fye,"STRONG",{});var Jot=s(jde);Yyo=r(Jot,"deberta-v2"),Jot.forEach(t),Kyo=r(fye," \u2014 "),Hj=n(fye,"A",{href:!0});var Yot=s(Hj);Zyo=r(Yot,"DebertaV2ForSequenceClassification"),Yot.forEach(t),eLo=r(fye," (DeBERTa-v2 model)"),fye.forEach(t),oLo=i(N),v1=n(N,"LI",{});var mye=s(v1);Dde=n(mye,"STRONG",{});var Kot=s(Dde);rLo=r(Kot,"distilbert"),Kot.forEach(t),tLo=r(mye," \u2014 "),Uj=n(mye,"A",{href:!0});var Zot=s(Uj);aLo=r(Zot,"DistilBertForSequenceClassification"),Zot.forEach(t),nLo=r(mye," (DistilBERT model)"),mye.forEach(t),sLo=i(N),F1=n(N,"LI",{});var gye=s(F1);Gde=n(gye,"STRONG",{});var ert=s(Gde);lLo=r(ert,"electra"),ert.forEach(t),iLo=r(gye," \u2014 "),Jj=n(gye,"A",{href:!0});var ort=s(Jj);dLo=r(ort,"ElectraForSequenceClassification"),ort.forEach(t),cLo=r(gye," (ELECTRA model)"),gye.forEach(t),fLo=i(N),T1=n(N,"LI",{});var hye=s(T1);Ode=n(hye,"STRONG",{});var rrt=s(Ode);mLo=r(rrt,"flaubert"),rrt.forEach(t),gLo=r(hye," \u2014 "),Yj=n(hye,"A",{href:!0});var trt=s(Yj);hLo=r(trt,"FlaubertForSequenceClassification"),trt.forEach(t),pLo=r(hye," (FlauBERT model)"),hye.forEach(t),uLo=i(N),M1=n(N,"LI",{});var pye=s(M1);Vde=n(pye,"STRONG",{});var art=s(Vde);_Lo=r(art,"fnet"),art.forEach(t),bLo=r(pye," \u2014 "),Kj=n(pye,"A",{href:!0});var nrt=s(Kj);vLo=r(nrt,"FNetForSequenceClassification"),nrt.forEach(t),FLo=r(pye," (FNet model)"),pye.forEach(t),TLo=i(N),E1=n(N,"LI",{});var uye=s(E1);Xde=n(uye,"STRONG",{});var srt=s(Xde);MLo=r(srt,"funnel"),srt.forEach(t),ELo=r(uye," \u2014 "),Zj=n(uye,"A",{href:!0});var lrt=s(Zj);CLo=r(lrt,"FunnelForSequenceClassification"),lrt.forEach(t),wLo=r(uye," (Funnel Transformer model)"),uye.forEach(t),ALo=i(N),C1=n(N,"LI",{});var _ye=s(C1);zde=n(_ye,"STRONG",{});var irt=s(zde);yLo=r(irt,"gpt2"),irt.forEach(t),LLo=r(_ye," \u2014 "),eD=n(_ye,"A",{href:!0});var drt=s(eD);xLo=r(drt,"GPT2ForSequenceClassification"),drt.forEach(t),$Lo=r(_ye," (OpenAI GPT-2 model)"),_ye.forEach(t),kLo=i(N),w1=n(N,"LI",{});var bye=s(w1);Qde=n(bye,"STRONG",{});var crt=s(Qde);SLo=r(crt,"gpt_neo"),crt.forEach(t),RLo=r(bye," \u2014 "),oD=n(bye,"A",{href:!0});var frt=s(oD);BLo=r(frt,"GPTNeoForSequenceClassification"),frt.forEach(t),PLo=r(bye," (GPT Neo model)"),bye.forEach(t),ILo=i(N),A1=n(N,"LI",{});var vye=s(A1);Wde=n(vye,"STRONG",{});var mrt=s(Wde);qLo=r(mrt,"gptj"),mrt.forEach(t),NLo=r(vye," \u2014 "),rD=n(vye,"A",{href:!0});var grt=s(rD);jLo=r(grt,"GPTJForSequenceClassification"),grt.forEach(t),DLo=r(vye," (GPT-J model)"),vye.forEach(t),GLo=i(N),y1=n(N,"LI",{});var Fye=s(y1);Hde=n(Fye,"STRONG",{});var hrt=s(Hde);OLo=r(hrt,"ibert"),hrt.forEach(t),VLo=r(Fye," \u2014 "),tD=n(Fye,"A",{href:!0});var prt=s(tD);XLo=r(prt,"IBertForSequenceClassification"),prt.forEach(t),zLo=r(Fye," (I-BERT model)"),Fye.forEach(t),QLo=i(N),L1=n(N,"LI",{});var Tye=s(L1);Ude=n(Tye,"STRONG",{});var urt=s(Ude);WLo=r(urt,"layoutlm"),urt.forEach(t),HLo=r(Tye," \u2014 "),aD=n(Tye,"A",{href:!0});var _rt=s(aD);ULo=r(_rt,"LayoutLMForSequenceClassification"),_rt.forEach(t),JLo=r(Tye," (LayoutLM model)"),Tye.forEach(t),YLo=i(N),x1=n(N,"LI",{});var Mye=s(x1);Jde=n(Mye,"STRONG",{});var brt=s(Jde);KLo=r(brt,"layoutlmv2"),brt.forEach(t),ZLo=r(Mye," \u2014 "),nD=n(Mye,"A",{href:!0});var vrt=s(nD);e8o=r(vrt,"LayoutLMv2ForSequenceClassification"),vrt.forEach(t),o8o=r(Mye," (LayoutLMv2 model)"),Mye.forEach(t),r8o=i(N),$1=n(N,"LI",{});var Eye=s($1);Yde=n(Eye,"STRONG",{});var Frt=s(Yde);t8o=r(Frt,"layoutlmv3"),Frt.forEach(t),a8o=r(Eye," \u2014 "),sD=n(Eye,"A",{href:!0});var Trt=s(sD);n8o=r(Trt,"LayoutLMv3ForSequenceClassification"),Trt.forEach(t),s8o=r(Eye," (LayoutLMv3 model)"),Eye.forEach(t),l8o=i(N),k1=n(N,"LI",{});var Cye=s(k1);Kde=n(Cye,"STRONG",{});var Mrt=s(Kde);i8o=r(Mrt,"led"),Mrt.forEach(t),d8o=r(Cye," \u2014 "),lD=n(Cye,"A",{href:!0});var Ert=s(lD);c8o=r(Ert,"LEDForSequenceClassification"),Ert.forEach(t),f8o=r(Cye," (LED model)"),Cye.forEach(t),m8o=i(N),S1=n(N,"LI",{});var wye=s(S1);Zde=n(wye,"STRONG",{});var Crt=s(Zde);g8o=r(Crt,"longformer"),Crt.forEach(t),h8o=r(wye," \u2014 "),iD=n(wye,"A",{href:!0});var wrt=s(iD);p8o=r(wrt,"LongformerForSequenceClassification"),wrt.forEach(t),u8o=r(wye," (Longformer model)"),wye.forEach(t),_8o=i(N),R1=n(N,"LI",{});var Aye=s(R1);ece=n(Aye,"STRONG",{});var Art=s(ece);b8o=r(Art,"mbart"),Art.forEach(t),v8o=r(Aye," \u2014 "),dD=n(Aye,"A",{href:!0});var yrt=s(dD);F8o=r(yrt,"MBartForSequenceClassification"),yrt.forEach(t),T8o=r(Aye," (mBART model)"),Aye.forEach(t),M8o=i(N),B1=n(N,"LI",{});var yye=s(B1);oce=n(yye,"STRONG",{});var Lrt=s(oce);E8o=r(Lrt,"megatron-bert"),Lrt.forEach(t),C8o=r(yye," \u2014 "),cD=n(yye,"A",{href:!0});var xrt=s(cD);w8o=r(xrt,"MegatronBertForSequenceClassification"),xrt.forEach(t),A8o=r(yye," (MegatronBert model)"),yye.forEach(t),y8o=i(N),P1=n(N,"LI",{});var Lye=s(P1);rce=n(Lye,"STRONG",{});var $rt=s(rce);L8o=r($rt,"mobilebert"),$rt.forEach(t),x8o=r(Lye," \u2014 "),fD=n(Lye,"A",{href:!0});var krt=s(fD);$8o=r(krt,"MobileBertForSequenceClassification"),krt.forEach(t),k8o=r(Lye," (MobileBERT model)"),Lye.forEach(t),S8o=i(N),I1=n(N,"LI",{});var xye=s(I1);tce=n(xye,"STRONG",{});var Srt=s(tce);R8o=r(Srt,"mpnet"),Srt.forEach(t),B8o=r(xye," \u2014 "),mD=n(xye,"A",{href:!0});var Rrt=s(mD);P8o=r(Rrt,"MPNetForSequenceClassification"),Rrt.forEach(t),I8o=r(xye," (MPNet model)"),xye.forEach(t),q8o=i(N),q1=n(N,"LI",{});var $ye=s(q1);ace=n($ye,"STRONG",{});var Brt=s(ace);N8o=r(Brt,"nystromformer"),Brt.forEach(t),j8o=r($ye," \u2014 "),gD=n($ye,"A",{href:!0});var Prt=s(gD);D8o=r(Prt,"NystromformerForSequenceClassification"),Prt.forEach(t),G8o=r($ye," (Nystromformer model)"),$ye.forEach(t),O8o=i(N),N1=n(N,"LI",{});var kye=s(N1);nce=n(kye,"STRONG",{});var Irt=s(nce);V8o=r(Irt,"openai-gpt"),Irt.forEach(t),X8o=r(kye," \u2014 "),hD=n(kye,"A",{href:!0});var qrt=s(hD);z8o=r(qrt,"OpenAIGPTForSequenceClassification"),qrt.forEach(t),Q8o=r(kye," (OpenAI GPT model)"),kye.forEach(t),W8o=i(N),j1=n(N,"LI",{});var Sye=s(j1);sce=n(Sye,"STRONG",{});var Nrt=s(sce);H8o=r(Nrt,"perceiver"),Nrt.forEach(t),U8o=r(Sye," \u2014 "),pD=n(Sye,"A",{href:!0});var jrt=s(pD);J8o=r(jrt,"PerceiverForSequenceClassification"),jrt.forEach(t),Y8o=r(Sye," (Perceiver model)"),Sye.forEach(t),K8o=i(N),D1=n(N,"LI",{});var Rye=s(D1);lce=n(Rye,"STRONG",{});var Drt=s(lce);Z8o=r(Drt,"plbart"),Drt.forEach(t),exo=r(Rye," \u2014 "),uD=n(Rye,"A",{href:!0});var Grt=s(uD);oxo=r(Grt,"PLBartForSequenceClassification"),Grt.forEach(t),rxo=r(Rye," (PLBart model)"),Rye.forEach(t),txo=i(N),G1=n(N,"LI",{});var Bye=s(G1);ice=n(Bye,"STRONG",{});var Ort=s(ice);axo=r(Ort,"qdqbert"),Ort.forEach(t),nxo=r(Bye," \u2014 "),_D=n(Bye,"A",{href:!0});var Vrt=s(_D);sxo=r(Vrt,"QDQBertForSequenceClassification"),Vrt.forEach(t),lxo=r(Bye," (QDQBert model)"),Bye.forEach(t),ixo=i(N),O1=n(N,"LI",{});var Pye=s(O1);dce=n(Pye,"STRONG",{});var Xrt=s(dce);dxo=r(Xrt,"reformer"),Xrt.forEach(t),cxo=r(Pye," \u2014 "),bD=n(Pye,"A",{href:!0});var zrt=s(bD);fxo=r(zrt,"ReformerForSequenceClassification"),zrt.forEach(t),mxo=r(Pye," (Reformer model)"),Pye.forEach(t),gxo=i(N),V1=n(N,"LI",{});var Iye=s(V1);cce=n(Iye,"STRONG",{});var Qrt=s(cce);hxo=r(Qrt,"rembert"),Qrt.forEach(t),pxo=r(Iye," \u2014 "),vD=n(Iye,"A",{href:!0});var Wrt=s(vD);uxo=r(Wrt,"RemBertForSequenceClassification"),Wrt.forEach(t),_xo=r(Iye," (RemBERT model)"),Iye.forEach(t),bxo=i(N),X1=n(N,"LI",{});var qye=s(X1);fce=n(qye,"STRONG",{});var Hrt=s(fce);vxo=r(Hrt,"roberta"),Hrt.forEach(t),Fxo=r(qye," \u2014 "),FD=n(qye,"A",{href:!0});var Urt=s(FD);Txo=r(Urt,"RobertaForSequenceClassification"),Urt.forEach(t),Mxo=r(qye," (RoBERTa model)"),qye.forEach(t),Exo=i(N),z1=n(N,"LI",{});var Nye=s(z1);mce=n(Nye,"STRONG",{});var Jrt=s(mce);Cxo=r(Jrt,"roformer"),Jrt.forEach(t),wxo=r(Nye," \u2014 "),TD=n(Nye,"A",{href:!0});var Yrt=s(TD);Axo=r(Yrt,"RoFormerForSequenceClassification"),Yrt.forEach(t),yxo=r(Nye," (RoFormer model)"),Nye.forEach(t),Lxo=i(N),Q1=n(N,"LI",{});var jye=s(Q1);gce=n(jye,"STRONG",{});var Krt=s(gce);xxo=r(Krt,"squeezebert"),Krt.forEach(t),$xo=r(jye," \u2014 "),MD=n(jye,"A",{href:!0});var Zrt=s(MD);kxo=r(Zrt,"SqueezeBertForSequenceClassification"),Zrt.forEach(t),Sxo=r(jye," (SqueezeBERT model)"),jye.forEach(t),Rxo=i(N),W1=n(N,"LI",{});var Dye=s(W1);hce=n(Dye,"STRONG",{});var ett=s(hce);Bxo=r(ett,"tapas"),ett.forEach(t),Pxo=r(Dye," \u2014 "),ED=n(Dye,"A",{href:!0});var ott=s(ED);Ixo=r(ott,"TapasForSequenceClassification"),ott.forEach(t),qxo=r(Dye," (TAPAS model)"),Dye.forEach(t),Nxo=i(N),H1=n(N,"LI",{});var Gye=s(H1);pce=n(Gye,"STRONG",{});var rtt=s(pce);jxo=r(rtt,"tapex"),rtt.forEach(t),Dxo=r(Gye," \u2014 "),CD=n(Gye,"A",{href:!0});var ttt=s(CD);Gxo=r(ttt,"BartForSequenceClassification"),ttt.forEach(t),Oxo=r(Gye," (TAPEX model)"),Gye.forEach(t),Vxo=i(N),U1=n(N,"LI",{});var Oye=s(U1);uce=n(Oye,"STRONG",{});var att=s(uce);Xxo=r(att,"transfo-xl"),att.forEach(t),zxo=r(Oye," \u2014 "),wD=n(Oye,"A",{href:!0});var ntt=s(wD);Qxo=r(ntt,"TransfoXLForSequenceClassification"),ntt.forEach(t),Wxo=r(Oye," (Transformer-XL model)"),Oye.forEach(t),Hxo=i(N),J1=n(N,"LI",{});var Vye=s(J1);_ce=n(Vye,"STRONG",{});var stt=s(_ce);Uxo=r(stt,"xlm"),stt.forEach(t),Jxo=r(Vye," \u2014 "),AD=n(Vye,"A",{href:!0});var ltt=s(AD);Yxo=r(ltt,"XLMForSequenceClassification"),ltt.forEach(t),Kxo=r(Vye," (XLM model)"),Vye.forEach(t),Zxo=i(N),Y1=n(N,"LI",{});var Xye=s(Y1);bce=n(Xye,"STRONG",{});var itt=s(bce);e9o=r(itt,"xlm-roberta"),itt.forEach(t),o9o=r(Xye," \u2014 "),yD=n(Xye,"A",{href:!0});var dtt=s(yD);r9o=r(dtt,"XLMRobertaForSequenceClassification"),dtt.forEach(t),t9o=r(Xye," (XLM-RoBERTa model)"),Xye.forEach(t),a9o=i(N),K1=n(N,"LI",{});var zye=s(K1);vce=n(zye,"STRONG",{});var ctt=s(vce);n9o=r(ctt,"xlm-roberta-xl"),ctt.forEach(t),s9o=r(zye," \u2014 "),LD=n(zye,"A",{href:!0});var ftt=s(LD);l9o=r(ftt,"XLMRobertaXLForSequenceClassification"),ftt.forEach(t),i9o=r(zye," (XLM-RoBERTa-XL model)"),zye.forEach(t),d9o=i(N),Z1=n(N,"LI",{});var Qye=s(Z1);Fce=n(Qye,"STRONG",{});var mtt=s(Fce);c9o=r(mtt,"xlnet"),mtt.forEach(t),f9o=r(Qye," \u2014 "),xD=n(Qye,"A",{href:!0});var gtt=s(xD);m9o=r(gtt,"XLNetForSequenceClassification"),gtt.forEach(t),g9o=r(Qye," (XLNet model)"),Qye.forEach(t),h9o=i(N),eb=n(N,"LI",{});var Wye=s(eb);Tce=n(Wye,"STRONG",{});var htt=s(Tce);p9o=r(htt,"yoso"),htt.forEach(t),u9o=r(Wye," \u2014 "),$D=n(Wye,"A",{href:!0});var ptt=s($D);_9o=r(ptt,"YosoForSequenceClassification"),ptt.forEach(t),b9o=r(Wye," (YOSO model)"),Wye.forEach(t),N.forEach(t),v9o=i(oa),ob=n(oa,"P",{});var Hye=s(ob);F9o=r(Hye,"The model is set in evaluation mode by default using "),Mce=n(Hye,"CODE",{});var utt=s(Mce);T9o=r(utt,"model.eval()"),utt.forEach(t),M9o=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=n(Hye,"CODE",{});var _tt=s(Ece);E9o=r(_tt,"model.train()"),_tt.forEach(t),Hye.forEach(t),C9o=i(oa),T(rb.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),dPe=i(f),Bi=n(f,"H2",{class:!0});var fqe=s(Bi);tb=n(fqe,"A",{id:!0,class:!0,href:!0});var btt=s(tb);Cce=n(btt,"SPAN",{});var vtt=s(Cce);T(kA.$$.fragment,vtt),vtt.forEach(t),btt.forEach(t),w9o=i(fqe),wce=n(fqe,"SPAN",{});var Ftt=s(wce);A9o=r(Ftt,"AutoModelForMultipleChoice"),Ftt.forEach(t),fqe.forEach(t),cPe=i(f),Bo=n(f,"DIV",{class:!0});var Os=s(Bo);T(SA.$$.fragment,Os),y9o=i(Os),Pi=n(Os,"P",{});var GY=s(Pi);L9o=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kD=n(GY,"A",{href:!0});var Ttt=s(kD);x9o=r(Ttt,"from_pretrained()"),Ttt.forEach(t),$9o=r(GY," class method or the "),SD=n(GY,"A",{href:!0});var Mtt=s(SD);k9o=r(Mtt,"from_config()"),Mtt.forEach(t),S9o=r(GY,` class
method.`),GY.forEach(t),R9o=i(Os),RA=n(Os,"P",{});var mqe=s(RA);B9o=r(mqe,"This class cannot be instantiated directly using "),Ace=n(mqe,"CODE",{});var Ett=s(Ace);P9o=r(Ett,"__init__()"),Ett.forEach(t),I9o=r(mqe," (throws an error)."),mqe.forEach(t),q9o=i(Os),nt=n(Os,"DIV",{class:!0});var QC=s(nt);T(BA.$$.fragment,QC),N9o=i(QC),yce=n(QC,"P",{});var Ctt=s(yce);j9o=r(Ctt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ctt.forEach(t),D9o=i(QC),Ii=n(QC,"P",{});var OY=s(Ii);G9o=r(OY,`Note:
Loading a model from its configuration file does `),Lce=n(OY,"STRONG",{});var wtt=s(Lce);O9o=r(wtt,"not"),wtt.forEach(t),V9o=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RD=n(OY,"A",{href:!0});var Att=s(RD);X9o=r(Att,"from_pretrained()"),Att.forEach(t),z9o=r(OY," to load the model weights."),OY.forEach(t),Q9o=i(QC),T(ab.$$.fragment,QC),QC.forEach(t),W9o=i(Os),eo=n(Os,"DIV",{class:!0});var ra=s(eo);T(PA.$$.fragment,ra),H9o=i(ra),xce=n(ra,"P",{});var ytt=s(xce);U9o=r(ytt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ytt.forEach(t),J9o=i(ra),xa=n(ra,"P",{});var WC=s(xa);Y9o=r(WC,"The model class to instantiate is selected based on the "),$ce=n(WC,"CODE",{});var Ltt=s($ce);K9o=r(Ltt,"model_type"),Ltt.forEach(t),Z9o=r(WC,` property of the config object (either
passed as an argument or loaded from `),kce=n(WC,"CODE",{});var xtt=s(kce);e$o=r(xtt,"pretrained_model_name_or_path"),xtt.forEach(t),o$o=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=n(WC,"CODE",{});var $tt=s(Sce);r$o=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),t$o=r(WC,":"),WC.forEach(t),a$o=i(ra),Y=n(ra,"UL",{});var K=s(Y);nb=n(K,"LI",{});var Uye=s(nb);Rce=n(Uye,"STRONG",{});var ktt=s(Rce);n$o=r(ktt,"albert"),ktt.forEach(t),s$o=r(Uye," \u2014 "),BD=n(Uye,"A",{href:!0});var Stt=s(BD);l$o=r(Stt,"AlbertForMultipleChoice"),Stt.forEach(t),i$o=r(Uye," (ALBERT model)"),Uye.forEach(t),d$o=i(K),sb=n(K,"LI",{});var Jye=s(sb);Bce=n(Jye,"STRONG",{});var Rtt=s(Bce);c$o=r(Rtt,"bert"),Rtt.forEach(t),f$o=r(Jye," \u2014 "),PD=n(Jye,"A",{href:!0});var Btt=s(PD);m$o=r(Btt,"BertForMultipleChoice"),Btt.forEach(t),g$o=r(Jye," (BERT model)"),Jye.forEach(t),h$o=i(K),lb=n(K,"LI",{});var Yye=s(lb);Pce=n(Yye,"STRONG",{});var Ptt=s(Pce);p$o=r(Ptt,"big_bird"),Ptt.forEach(t),u$o=r(Yye," \u2014 "),ID=n(Yye,"A",{href:!0});var Itt=s(ID);_$o=r(Itt,"BigBirdForMultipleChoice"),Itt.forEach(t),b$o=r(Yye," (BigBird model)"),Yye.forEach(t),v$o=i(K),ib=n(K,"LI",{});var Kye=s(ib);Ice=n(Kye,"STRONG",{});var qtt=s(Ice);F$o=r(qtt,"camembert"),qtt.forEach(t),T$o=r(Kye," \u2014 "),qD=n(Kye,"A",{href:!0});var Ntt=s(qD);M$o=r(Ntt,"CamembertForMultipleChoice"),Ntt.forEach(t),E$o=r(Kye," (CamemBERT model)"),Kye.forEach(t),C$o=i(K),db=n(K,"LI",{});var Zye=s(db);qce=n(Zye,"STRONG",{});var jtt=s(qce);w$o=r(jtt,"canine"),jtt.forEach(t),A$o=r(Zye," \u2014 "),ND=n(Zye,"A",{href:!0});var Dtt=s(ND);y$o=r(Dtt,"CanineForMultipleChoice"),Dtt.forEach(t),L$o=r(Zye," (Canine model)"),Zye.forEach(t),x$o=i(K),cb=n(K,"LI",{});var eLe=s(cb);Nce=n(eLe,"STRONG",{});var Gtt=s(Nce);$$o=r(Gtt,"convbert"),Gtt.forEach(t),k$o=r(eLe," \u2014 "),jD=n(eLe,"A",{href:!0});var Ott=s(jD);S$o=r(Ott,"ConvBertForMultipleChoice"),Ott.forEach(t),R$o=r(eLe," (ConvBERT model)"),eLe.forEach(t),B$o=i(K),fb=n(K,"LI",{});var oLe=s(fb);jce=n(oLe,"STRONG",{});var Vtt=s(jce);P$o=r(Vtt,"data2vec-text"),Vtt.forEach(t),I$o=r(oLe," \u2014 "),DD=n(oLe,"A",{href:!0});var Xtt=s(DD);q$o=r(Xtt,"Data2VecTextForMultipleChoice"),Xtt.forEach(t),N$o=r(oLe," (Data2VecText model)"),oLe.forEach(t),j$o=i(K),mb=n(K,"LI",{});var rLe=s(mb);Dce=n(rLe,"STRONG",{});var ztt=s(Dce);D$o=r(ztt,"distilbert"),ztt.forEach(t),G$o=r(rLe," \u2014 "),GD=n(rLe,"A",{href:!0});var Qtt=s(GD);O$o=r(Qtt,"DistilBertForMultipleChoice"),Qtt.forEach(t),V$o=r(rLe," (DistilBERT model)"),rLe.forEach(t),X$o=i(K),gb=n(K,"LI",{});var tLe=s(gb);Gce=n(tLe,"STRONG",{});var Wtt=s(Gce);z$o=r(Wtt,"electra"),Wtt.forEach(t),Q$o=r(tLe," \u2014 "),OD=n(tLe,"A",{href:!0});var Htt=s(OD);W$o=r(Htt,"ElectraForMultipleChoice"),Htt.forEach(t),H$o=r(tLe," (ELECTRA model)"),tLe.forEach(t),U$o=i(K),hb=n(K,"LI",{});var aLe=s(hb);Oce=n(aLe,"STRONG",{});var Utt=s(Oce);J$o=r(Utt,"flaubert"),Utt.forEach(t),Y$o=r(aLe," \u2014 "),VD=n(aLe,"A",{href:!0});var Jtt=s(VD);K$o=r(Jtt,"FlaubertForMultipleChoice"),Jtt.forEach(t),Z$o=r(aLe," (FlauBERT model)"),aLe.forEach(t),eko=i(K),pb=n(K,"LI",{});var nLe=s(pb);Vce=n(nLe,"STRONG",{});var Ytt=s(Vce);oko=r(Ytt,"fnet"),Ytt.forEach(t),rko=r(nLe," \u2014 "),XD=n(nLe,"A",{href:!0});var Ktt=s(XD);tko=r(Ktt,"FNetForMultipleChoice"),Ktt.forEach(t),ako=r(nLe," (FNet model)"),nLe.forEach(t),nko=i(K),ub=n(K,"LI",{});var sLe=s(ub);Xce=n(sLe,"STRONG",{});var Ztt=s(Xce);sko=r(Ztt,"funnel"),Ztt.forEach(t),lko=r(sLe," \u2014 "),zD=n(sLe,"A",{href:!0});var eat=s(zD);iko=r(eat,"FunnelForMultipleChoice"),eat.forEach(t),dko=r(sLe," (Funnel Transformer model)"),sLe.forEach(t),cko=i(K),_b=n(K,"LI",{});var lLe=s(_b);zce=n(lLe,"STRONG",{});var oat=s(zce);fko=r(oat,"ibert"),oat.forEach(t),mko=r(lLe," \u2014 "),QD=n(lLe,"A",{href:!0});var rat=s(QD);gko=r(rat,"IBertForMultipleChoice"),rat.forEach(t),hko=r(lLe," (I-BERT model)"),lLe.forEach(t),pko=i(K),bb=n(K,"LI",{});var iLe=s(bb);Qce=n(iLe,"STRONG",{});var tat=s(Qce);uko=r(tat,"longformer"),tat.forEach(t),_ko=r(iLe," \u2014 "),WD=n(iLe,"A",{href:!0});var aat=s(WD);bko=r(aat,"LongformerForMultipleChoice"),aat.forEach(t),vko=r(iLe," (Longformer model)"),iLe.forEach(t),Fko=i(K),vb=n(K,"LI",{});var dLe=s(vb);Wce=n(dLe,"STRONG",{});var nat=s(Wce);Tko=r(nat,"megatron-bert"),nat.forEach(t),Mko=r(dLe," \u2014 "),HD=n(dLe,"A",{href:!0});var sat=s(HD);Eko=r(sat,"MegatronBertForMultipleChoice"),sat.forEach(t),Cko=r(dLe," (MegatronBert model)"),dLe.forEach(t),wko=i(K),Fb=n(K,"LI",{});var cLe=s(Fb);Hce=n(cLe,"STRONG",{});var lat=s(Hce);Ako=r(lat,"mobilebert"),lat.forEach(t),yko=r(cLe," \u2014 "),UD=n(cLe,"A",{href:!0});var iat=s(UD);Lko=r(iat,"MobileBertForMultipleChoice"),iat.forEach(t),xko=r(cLe," (MobileBERT model)"),cLe.forEach(t),$ko=i(K),Tb=n(K,"LI",{});var fLe=s(Tb);Uce=n(fLe,"STRONG",{});var dat=s(Uce);kko=r(dat,"mpnet"),dat.forEach(t),Sko=r(fLe," \u2014 "),JD=n(fLe,"A",{href:!0});var cat=s(JD);Rko=r(cat,"MPNetForMultipleChoice"),cat.forEach(t),Bko=r(fLe," (MPNet model)"),fLe.forEach(t),Pko=i(K),Mb=n(K,"LI",{});var mLe=s(Mb);Jce=n(mLe,"STRONG",{});var fat=s(Jce);Iko=r(fat,"nystromformer"),fat.forEach(t),qko=r(mLe," \u2014 "),YD=n(mLe,"A",{href:!0});var mat=s(YD);Nko=r(mat,"NystromformerForMultipleChoice"),mat.forEach(t),jko=r(mLe," (Nystromformer model)"),mLe.forEach(t),Dko=i(K),Eb=n(K,"LI",{});var gLe=s(Eb);Yce=n(gLe,"STRONG",{});var gat=s(Yce);Gko=r(gat,"qdqbert"),gat.forEach(t),Oko=r(gLe," \u2014 "),KD=n(gLe,"A",{href:!0});var hat=s(KD);Vko=r(hat,"QDQBertForMultipleChoice"),hat.forEach(t),Xko=r(gLe," (QDQBert model)"),gLe.forEach(t),zko=i(K),Cb=n(K,"LI",{});var hLe=s(Cb);Kce=n(hLe,"STRONG",{});var pat=s(Kce);Qko=r(pat,"rembert"),pat.forEach(t),Wko=r(hLe," \u2014 "),ZD=n(hLe,"A",{href:!0});var uat=s(ZD);Hko=r(uat,"RemBertForMultipleChoice"),uat.forEach(t),Uko=r(hLe," (RemBERT model)"),hLe.forEach(t),Jko=i(K),wb=n(K,"LI",{});var pLe=s(wb);Zce=n(pLe,"STRONG",{});var _at=s(Zce);Yko=r(_at,"roberta"),_at.forEach(t),Kko=r(pLe," \u2014 "),eG=n(pLe,"A",{href:!0});var bat=s(eG);Zko=r(bat,"RobertaForMultipleChoice"),bat.forEach(t),eSo=r(pLe," (RoBERTa model)"),pLe.forEach(t),oSo=i(K),Ab=n(K,"LI",{});var uLe=s(Ab);efe=n(uLe,"STRONG",{});var vat=s(efe);rSo=r(vat,"roformer"),vat.forEach(t),tSo=r(uLe," \u2014 "),oG=n(uLe,"A",{href:!0});var Fat=s(oG);aSo=r(Fat,"RoFormerForMultipleChoice"),Fat.forEach(t),nSo=r(uLe," (RoFormer model)"),uLe.forEach(t),sSo=i(K),yb=n(K,"LI",{});var _Le=s(yb);ofe=n(_Le,"STRONG",{});var Tat=s(ofe);lSo=r(Tat,"squeezebert"),Tat.forEach(t),iSo=r(_Le," \u2014 "),rG=n(_Le,"A",{href:!0});var Mat=s(rG);dSo=r(Mat,"SqueezeBertForMultipleChoice"),Mat.forEach(t),cSo=r(_Le," (SqueezeBERT model)"),_Le.forEach(t),fSo=i(K),Lb=n(K,"LI",{});var bLe=s(Lb);rfe=n(bLe,"STRONG",{});var Eat=s(rfe);mSo=r(Eat,"xlm"),Eat.forEach(t),gSo=r(bLe," \u2014 "),tG=n(bLe,"A",{href:!0});var Cat=s(tG);hSo=r(Cat,"XLMForMultipleChoice"),Cat.forEach(t),pSo=r(bLe," (XLM model)"),bLe.forEach(t),uSo=i(K),xb=n(K,"LI",{});var vLe=s(xb);tfe=n(vLe,"STRONG",{});var wat=s(tfe);_So=r(wat,"xlm-roberta"),wat.forEach(t),bSo=r(vLe," \u2014 "),aG=n(vLe,"A",{href:!0});var Aat=s(aG);vSo=r(Aat,"XLMRobertaForMultipleChoice"),Aat.forEach(t),FSo=r(vLe," (XLM-RoBERTa model)"),vLe.forEach(t),TSo=i(K),$b=n(K,"LI",{});var FLe=s($b);afe=n(FLe,"STRONG",{});var yat=s(afe);MSo=r(yat,"xlm-roberta-xl"),yat.forEach(t),ESo=r(FLe," \u2014 "),nG=n(FLe,"A",{href:!0});var Lat=s(nG);CSo=r(Lat,"XLMRobertaXLForMultipleChoice"),Lat.forEach(t),wSo=r(FLe," (XLM-RoBERTa-XL model)"),FLe.forEach(t),ASo=i(K),kb=n(K,"LI",{});var TLe=s(kb);nfe=n(TLe,"STRONG",{});var xat=s(nfe);ySo=r(xat,"xlnet"),xat.forEach(t),LSo=r(TLe," \u2014 "),sG=n(TLe,"A",{href:!0});var $at=s(sG);xSo=r($at,"XLNetForMultipleChoice"),$at.forEach(t),$So=r(TLe," (XLNet model)"),TLe.forEach(t),kSo=i(K),Sb=n(K,"LI",{});var MLe=s(Sb);sfe=n(MLe,"STRONG",{});var kat=s(sfe);SSo=r(kat,"yoso"),kat.forEach(t),RSo=r(MLe," \u2014 "),lG=n(MLe,"A",{href:!0});var Sat=s(lG);BSo=r(Sat,"YosoForMultipleChoice"),Sat.forEach(t),PSo=r(MLe," (YOSO model)"),MLe.forEach(t),K.forEach(t),ISo=i(ra),Rb=n(ra,"P",{});var ELe=s(Rb);qSo=r(ELe,"The model is set in evaluation mode by default using "),lfe=n(ELe,"CODE",{});var Rat=s(lfe);NSo=r(Rat,"model.eval()"),Rat.forEach(t),jSo=r(ELe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(ELe,"CODE",{});var Bat=s(ife);DSo=r(Bat,"model.train()"),Bat.forEach(t),ELe.forEach(t),GSo=i(ra),T(Bb.$$.fragment,ra),ra.forEach(t),Os.forEach(t),fPe=i(f),qi=n(f,"H2",{class:!0});var gqe=s(qi);Pb=n(gqe,"A",{id:!0,class:!0,href:!0});var Pat=s(Pb);dfe=n(Pat,"SPAN",{});var Iat=s(dfe);T(IA.$$.fragment,Iat),Iat.forEach(t),Pat.forEach(t),OSo=i(gqe),cfe=n(gqe,"SPAN",{});var qat=s(cfe);VSo=r(qat,"AutoModelForNextSentencePrediction"),qat.forEach(t),gqe.forEach(t),mPe=i(f),Po=n(f,"DIV",{class:!0});var Vs=s(Po);T(qA.$$.fragment,Vs),XSo=i(Vs),Ni=n(Vs,"P",{});var VY=s(Ni);zSo=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iG=n(VY,"A",{href:!0});var Nat=s(iG);QSo=r(Nat,"from_pretrained()"),Nat.forEach(t),WSo=r(VY," class method or the "),dG=n(VY,"A",{href:!0});var jat=s(dG);HSo=r(jat,"from_config()"),jat.forEach(t),USo=r(VY,` class
method.`),VY.forEach(t),JSo=i(Vs),NA=n(Vs,"P",{});var hqe=s(NA);YSo=r(hqe,"This class cannot be instantiated directly using "),ffe=n(hqe,"CODE",{});var Dat=s(ffe);KSo=r(Dat,"__init__()"),Dat.forEach(t),ZSo=r(hqe," (throws an error)."),hqe.forEach(t),eRo=i(Vs),st=n(Vs,"DIV",{class:!0});var HC=s(st);T(jA.$$.fragment,HC),oRo=i(HC),mfe=n(HC,"P",{});var Gat=s(mfe);rRo=r(Gat,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Gat.forEach(t),tRo=i(HC),ji=n(HC,"P",{});var XY=s(ji);aRo=r(XY,`Note:
Loading a model from its configuration file does `),gfe=n(XY,"STRONG",{});var Oat=s(gfe);nRo=r(Oat,"not"),Oat.forEach(t),sRo=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n(XY,"A",{href:!0});var Vat=s(cG);lRo=r(Vat,"from_pretrained()"),Vat.forEach(t),iRo=r(XY," to load the model weights."),XY.forEach(t),dRo=i(HC),T(Ib.$$.fragment,HC),HC.forEach(t),cRo=i(Vs),oo=n(Vs,"DIV",{class:!0});var ta=s(oo);T(DA.$$.fragment,ta),fRo=i(ta),hfe=n(ta,"P",{});var Xat=s(hfe);mRo=r(Xat,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xat.forEach(t),gRo=i(ta),$a=n(ta,"P",{});var UC=s($a);hRo=r(UC,"The model class to instantiate is selected based on the "),pfe=n(UC,"CODE",{});var zat=s(pfe);pRo=r(zat,"model_type"),zat.forEach(t),uRo=r(UC,` property of the config object (either
passed as an argument or loaded from `),ufe=n(UC,"CODE",{});var Qat=s(ufe);_Ro=r(Qat,"pretrained_model_name_or_path"),Qat.forEach(t),bRo=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_fe=n(UC,"CODE",{});var Wat=s(_fe);vRo=r(Wat,"pretrained_model_name_or_path"),Wat.forEach(t),FRo=r(UC,":"),UC.forEach(t),TRo=i(ta),Ur=n(ta,"UL",{});var Xs=s(Ur);qb=n(Xs,"LI",{});var CLe=s(qb);bfe=n(CLe,"STRONG",{});var Hat=s(bfe);MRo=r(Hat,"bert"),Hat.forEach(t),ERo=r(CLe," \u2014 "),fG=n(CLe,"A",{href:!0});var Uat=s(fG);CRo=r(Uat,"BertForNextSentencePrediction"),Uat.forEach(t),wRo=r(CLe," (BERT model)"),CLe.forEach(t),ARo=i(Xs),Nb=n(Xs,"LI",{});var wLe=s(Nb);vfe=n(wLe,"STRONG",{});var Jat=s(vfe);yRo=r(Jat,"fnet"),Jat.forEach(t),LRo=r(wLe," \u2014 "),mG=n(wLe,"A",{href:!0});var Yat=s(mG);xRo=r(Yat,"FNetForNextSentencePrediction"),Yat.forEach(t),$Ro=r(wLe," (FNet model)"),wLe.forEach(t),kRo=i(Xs),jb=n(Xs,"LI",{});var ALe=s(jb);Ffe=n(ALe,"STRONG",{});var Kat=s(Ffe);SRo=r(Kat,"megatron-bert"),Kat.forEach(t),RRo=r(ALe," \u2014 "),gG=n(ALe,"A",{href:!0});var Zat=s(gG);BRo=r(Zat,"MegatronBertForNextSentencePrediction"),Zat.forEach(t),PRo=r(ALe," (MegatronBert model)"),ALe.forEach(t),IRo=i(Xs),Db=n(Xs,"LI",{});var yLe=s(Db);Tfe=n(yLe,"STRONG",{});var ent=s(Tfe);qRo=r(ent,"mobilebert"),ent.forEach(t),NRo=r(yLe," \u2014 "),hG=n(yLe,"A",{href:!0});var ont=s(hG);jRo=r(ont,"MobileBertForNextSentencePrediction"),ont.forEach(t),DRo=r(yLe," (MobileBERT model)"),yLe.forEach(t),GRo=i(Xs),Gb=n(Xs,"LI",{});var LLe=s(Gb);Mfe=n(LLe,"STRONG",{});var rnt=s(Mfe);ORo=r(rnt,"qdqbert"),rnt.forEach(t),VRo=r(LLe," \u2014 "),pG=n(LLe,"A",{href:!0});var tnt=s(pG);XRo=r(tnt,"QDQBertForNextSentencePrediction"),tnt.forEach(t),zRo=r(LLe," (QDQBert model)"),LLe.forEach(t),Xs.forEach(t),QRo=i(ta),Ob=n(ta,"P",{});var xLe=s(Ob);WRo=r(xLe,"The model is set in evaluation mode by default using "),Efe=n(xLe,"CODE",{});var ant=s(Efe);HRo=r(ant,"model.eval()"),ant.forEach(t),URo=r(xLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=n(xLe,"CODE",{});var nnt=s(Cfe);JRo=r(nnt,"model.train()"),nnt.forEach(t),xLe.forEach(t),YRo=i(ta),T(Vb.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),gPe=i(f),Di=n(f,"H2",{class:!0});var pqe=s(Di);Xb=n(pqe,"A",{id:!0,class:!0,href:!0});var snt=s(Xb);wfe=n(snt,"SPAN",{});var lnt=s(wfe);T(GA.$$.fragment,lnt),lnt.forEach(t),snt.forEach(t),KRo=i(pqe),Afe=n(pqe,"SPAN",{});var int=s(Afe);ZRo=r(int,"AutoModelForTokenClassification"),int.forEach(t),pqe.forEach(t),hPe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(OA.$$.fragment,zs),eBo=i(zs),Gi=n(zs,"P",{});var zY=s(Gi);oBo=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uG=n(zY,"A",{href:!0});var dnt=s(uG);rBo=r(dnt,"from_pretrained()"),dnt.forEach(t),tBo=r(zY," class method or the "),_G=n(zY,"A",{href:!0});var cnt=s(_G);aBo=r(cnt,"from_config()"),cnt.forEach(t),nBo=r(zY,` class
method.`),zY.forEach(t),sBo=i(zs),VA=n(zs,"P",{});var uqe=s(VA);lBo=r(uqe,"This class cannot be instantiated directly using "),yfe=n(uqe,"CODE",{});var fnt=s(yfe);iBo=r(fnt,"__init__()"),fnt.forEach(t),dBo=r(uqe," (throws an error)."),uqe.forEach(t),cBo=i(zs),lt=n(zs,"DIV",{class:!0});var JC=s(lt);T(XA.$$.fragment,JC),fBo=i(JC),Lfe=n(JC,"P",{});var mnt=s(Lfe);mBo=r(mnt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mnt.forEach(t),gBo=i(JC),Oi=n(JC,"P",{});var QY=s(Oi);hBo=r(QY,`Note:
Loading a model from its configuration file does `),xfe=n(QY,"STRONG",{});var gnt=s(xfe);pBo=r(gnt,"not"),gnt.forEach(t),uBo=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=n(QY,"A",{href:!0});var hnt=s(bG);_Bo=r(hnt,"from_pretrained()"),hnt.forEach(t),bBo=r(QY," to load the model weights."),QY.forEach(t),vBo=i(JC),T(zb.$$.fragment,JC),JC.forEach(t),FBo=i(zs),ro=n(zs,"DIV",{class:!0});var aa=s(ro);T(zA.$$.fragment,aa),TBo=i(aa),$fe=n(aa,"P",{});var pnt=s($fe);MBo=r(pnt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pnt.forEach(t),EBo=i(aa),ka=n(aa,"P",{});var YC=s(ka);CBo=r(YC,"The model class to instantiate is selected based on the "),kfe=n(YC,"CODE",{});var unt=s(kfe);wBo=r(unt,"model_type"),unt.forEach(t),ABo=r(YC,` property of the config object (either
passed as an argument or loaded from `),Sfe=n(YC,"CODE",{});var _nt=s(Sfe);yBo=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),LBo=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rfe=n(YC,"CODE",{});var bnt=s(Rfe);xBo=r(bnt,"pretrained_model_name_or_path"),bnt.forEach(t),$Bo=r(YC,":"),YC.forEach(t),kBo=i(aa),W=n(aa,"UL",{});var J=s(W);Qb=n(J,"LI",{});var $Le=s(Qb);Bfe=n($Le,"STRONG",{});var vnt=s(Bfe);SBo=r(vnt,"albert"),vnt.forEach(t),RBo=r($Le," \u2014 "),vG=n($Le,"A",{href:!0});var Fnt=s(vG);BBo=r(Fnt,"AlbertForTokenClassification"),Fnt.forEach(t),PBo=r($Le," (ALBERT model)"),$Le.forEach(t),IBo=i(J),Wb=n(J,"LI",{});var kLe=s(Wb);Pfe=n(kLe,"STRONG",{});var Tnt=s(Pfe);qBo=r(Tnt,"bert"),Tnt.forEach(t),NBo=r(kLe," \u2014 "),FG=n(kLe,"A",{href:!0});var Mnt=s(FG);jBo=r(Mnt,"BertForTokenClassification"),Mnt.forEach(t),DBo=r(kLe," (BERT model)"),kLe.forEach(t),GBo=i(J),Hb=n(J,"LI",{});var SLe=s(Hb);Ife=n(SLe,"STRONG",{});var Ent=s(Ife);OBo=r(Ent,"big_bird"),Ent.forEach(t),VBo=r(SLe," \u2014 "),TG=n(SLe,"A",{href:!0});var Cnt=s(TG);XBo=r(Cnt,"BigBirdForTokenClassification"),Cnt.forEach(t),zBo=r(SLe," (BigBird model)"),SLe.forEach(t),QBo=i(J),Ub=n(J,"LI",{});var RLe=s(Ub);qfe=n(RLe,"STRONG",{});var wnt=s(qfe);WBo=r(wnt,"camembert"),wnt.forEach(t),HBo=r(RLe," \u2014 "),MG=n(RLe,"A",{href:!0});var Ant=s(MG);UBo=r(Ant,"CamembertForTokenClassification"),Ant.forEach(t),JBo=r(RLe," (CamemBERT model)"),RLe.forEach(t),YBo=i(J),Jb=n(J,"LI",{});var BLe=s(Jb);Nfe=n(BLe,"STRONG",{});var ynt=s(Nfe);KBo=r(ynt,"canine"),ynt.forEach(t),ZBo=r(BLe," \u2014 "),EG=n(BLe,"A",{href:!0});var Lnt=s(EG);ePo=r(Lnt,"CanineForTokenClassification"),Lnt.forEach(t),oPo=r(BLe," (Canine model)"),BLe.forEach(t),rPo=i(J),Yb=n(J,"LI",{});var PLe=s(Yb);jfe=n(PLe,"STRONG",{});var xnt=s(jfe);tPo=r(xnt,"convbert"),xnt.forEach(t),aPo=r(PLe," \u2014 "),CG=n(PLe,"A",{href:!0});var $nt=s(CG);nPo=r($nt,"ConvBertForTokenClassification"),$nt.forEach(t),sPo=r(PLe," (ConvBERT model)"),PLe.forEach(t),lPo=i(J),Kb=n(J,"LI",{});var ILe=s(Kb);Dfe=n(ILe,"STRONG",{});var knt=s(Dfe);iPo=r(knt,"data2vec-text"),knt.forEach(t),dPo=r(ILe," \u2014 "),wG=n(ILe,"A",{href:!0});var Snt=s(wG);cPo=r(Snt,"Data2VecTextForTokenClassification"),Snt.forEach(t),fPo=r(ILe," (Data2VecText model)"),ILe.forEach(t),mPo=i(J),Zb=n(J,"LI",{});var qLe=s(Zb);Gfe=n(qLe,"STRONG",{});var Rnt=s(Gfe);gPo=r(Rnt,"deberta"),Rnt.forEach(t),hPo=r(qLe," \u2014 "),AG=n(qLe,"A",{href:!0});var Bnt=s(AG);pPo=r(Bnt,"DebertaForTokenClassification"),Bnt.forEach(t),uPo=r(qLe," (DeBERTa model)"),qLe.forEach(t),_Po=i(J),e2=n(J,"LI",{});var NLe=s(e2);Ofe=n(NLe,"STRONG",{});var Pnt=s(Ofe);bPo=r(Pnt,"deberta-v2"),Pnt.forEach(t),vPo=r(NLe," \u2014 "),yG=n(NLe,"A",{href:!0});var Int=s(yG);FPo=r(Int,"DebertaV2ForTokenClassification"),Int.forEach(t),TPo=r(NLe," (DeBERTa-v2 model)"),NLe.forEach(t),MPo=i(J),o2=n(J,"LI",{});var jLe=s(o2);Vfe=n(jLe,"STRONG",{});var qnt=s(Vfe);EPo=r(qnt,"distilbert"),qnt.forEach(t),CPo=r(jLe," \u2014 "),LG=n(jLe,"A",{href:!0});var Nnt=s(LG);wPo=r(Nnt,"DistilBertForTokenClassification"),Nnt.forEach(t),APo=r(jLe," (DistilBERT model)"),jLe.forEach(t),yPo=i(J),r2=n(J,"LI",{});var DLe=s(r2);Xfe=n(DLe,"STRONG",{});var jnt=s(Xfe);LPo=r(jnt,"electra"),jnt.forEach(t),xPo=r(DLe," \u2014 "),xG=n(DLe,"A",{href:!0});var Dnt=s(xG);$Po=r(Dnt,"ElectraForTokenClassification"),Dnt.forEach(t),kPo=r(DLe," (ELECTRA model)"),DLe.forEach(t),SPo=i(J),t2=n(J,"LI",{});var GLe=s(t2);zfe=n(GLe,"STRONG",{});var Gnt=s(zfe);RPo=r(Gnt,"flaubert"),Gnt.forEach(t),BPo=r(GLe," \u2014 "),$G=n(GLe,"A",{href:!0});var Ont=s($G);PPo=r(Ont,"FlaubertForTokenClassification"),Ont.forEach(t),IPo=r(GLe," (FlauBERT model)"),GLe.forEach(t),qPo=i(J),a2=n(J,"LI",{});var OLe=s(a2);Qfe=n(OLe,"STRONG",{});var Vnt=s(Qfe);NPo=r(Vnt,"fnet"),Vnt.forEach(t),jPo=r(OLe," \u2014 "),kG=n(OLe,"A",{href:!0});var Xnt=s(kG);DPo=r(Xnt,"FNetForTokenClassification"),Xnt.forEach(t),GPo=r(OLe," (FNet model)"),OLe.forEach(t),OPo=i(J),n2=n(J,"LI",{});var VLe=s(n2);Wfe=n(VLe,"STRONG",{});var znt=s(Wfe);VPo=r(znt,"funnel"),znt.forEach(t),XPo=r(VLe," \u2014 "),SG=n(VLe,"A",{href:!0});var Qnt=s(SG);zPo=r(Qnt,"FunnelForTokenClassification"),Qnt.forEach(t),QPo=r(VLe," (Funnel Transformer model)"),VLe.forEach(t),WPo=i(J),s2=n(J,"LI",{});var XLe=s(s2);Hfe=n(XLe,"STRONG",{});var Wnt=s(Hfe);HPo=r(Wnt,"gpt2"),Wnt.forEach(t),UPo=r(XLe," \u2014 "),RG=n(XLe,"A",{href:!0});var Hnt=s(RG);JPo=r(Hnt,"GPT2ForTokenClassification"),Hnt.forEach(t),YPo=r(XLe," (OpenAI GPT-2 model)"),XLe.forEach(t),KPo=i(J),l2=n(J,"LI",{});var zLe=s(l2);Ufe=n(zLe,"STRONG",{});var Unt=s(Ufe);ZPo=r(Unt,"ibert"),Unt.forEach(t),eIo=r(zLe," \u2014 "),BG=n(zLe,"A",{href:!0});var Jnt=s(BG);oIo=r(Jnt,"IBertForTokenClassification"),Jnt.forEach(t),rIo=r(zLe," (I-BERT model)"),zLe.forEach(t),tIo=i(J),i2=n(J,"LI",{});var QLe=s(i2);Jfe=n(QLe,"STRONG",{});var Ynt=s(Jfe);aIo=r(Ynt,"layoutlm"),Ynt.forEach(t),nIo=r(QLe," \u2014 "),PG=n(QLe,"A",{href:!0});var Knt=s(PG);sIo=r(Knt,"LayoutLMForTokenClassification"),Knt.forEach(t),lIo=r(QLe," (LayoutLM model)"),QLe.forEach(t),iIo=i(J),d2=n(J,"LI",{});var WLe=s(d2);Yfe=n(WLe,"STRONG",{});var Znt=s(Yfe);dIo=r(Znt,"layoutlmv2"),Znt.forEach(t),cIo=r(WLe," \u2014 "),IG=n(WLe,"A",{href:!0});var est=s(IG);fIo=r(est,"LayoutLMv2ForTokenClassification"),est.forEach(t),mIo=r(WLe," (LayoutLMv2 model)"),WLe.forEach(t),gIo=i(J),c2=n(J,"LI",{});var HLe=s(c2);Kfe=n(HLe,"STRONG",{});var ost=s(Kfe);hIo=r(ost,"layoutlmv3"),ost.forEach(t),pIo=r(HLe," \u2014 "),qG=n(HLe,"A",{href:!0});var rst=s(qG);uIo=r(rst,"LayoutLMv3ForTokenClassification"),rst.forEach(t),_Io=r(HLe," (LayoutLMv3 model)"),HLe.forEach(t),bIo=i(J),f2=n(J,"LI",{});var ULe=s(f2);Zfe=n(ULe,"STRONG",{});var tst=s(Zfe);vIo=r(tst,"longformer"),tst.forEach(t),FIo=r(ULe," \u2014 "),NG=n(ULe,"A",{href:!0});var ast=s(NG);TIo=r(ast,"LongformerForTokenClassification"),ast.forEach(t),MIo=r(ULe," (Longformer model)"),ULe.forEach(t),EIo=i(J),m2=n(J,"LI",{});var JLe=s(m2);eme=n(JLe,"STRONG",{});var nst=s(eme);CIo=r(nst,"megatron-bert"),nst.forEach(t),wIo=r(JLe," \u2014 "),jG=n(JLe,"A",{href:!0});var sst=s(jG);AIo=r(sst,"MegatronBertForTokenClassification"),sst.forEach(t),yIo=r(JLe," (MegatronBert model)"),JLe.forEach(t),LIo=i(J),g2=n(J,"LI",{});var YLe=s(g2);ome=n(YLe,"STRONG",{});var lst=s(ome);xIo=r(lst,"mobilebert"),lst.forEach(t),$Io=r(YLe," \u2014 "),DG=n(YLe,"A",{href:!0});var ist=s(DG);kIo=r(ist,"MobileBertForTokenClassification"),ist.forEach(t),SIo=r(YLe," (MobileBERT model)"),YLe.forEach(t),RIo=i(J),h2=n(J,"LI",{});var KLe=s(h2);rme=n(KLe,"STRONG",{});var dst=s(rme);BIo=r(dst,"mpnet"),dst.forEach(t),PIo=r(KLe," \u2014 "),GG=n(KLe,"A",{href:!0});var cst=s(GG);IIo=r(cst,"MPNetForTokenClassification"),cst.forEach(t),qIo=r(KLe," (MPNet model)"),KLe.forEach(t),NIo=i(J),p2=n(J,"LI",{});var ZLe=s(p2);tme=n(ZLe,"STRONG",{});var fst=s(tme);jIo=r(fst,"nystromformer"),fst.forEach(t),DIo=r(ZLe," \u2014 "),OG=n(ZLe,"A",{href:!0});var mst=s(OG);GIo=r(mst,"NystromformerForTokenClassification"),mst.forEach(t),OIo=r(ZLe," (Nystromformer model)"),ZLe.forEach(t),VIo=i(J),u2=n(J,"LI",{});var e8e=s(u2);ame=n(e8e,"STRONG",{});var gst=s(ame);XIo=r(gst,"qdqbert"),gst.forEach(t),zIo=r(e8e," \u2014 "),VG=n(e8e,"A",{href:!0});var hst=s(VG);QIo=r(hst,"QDQBertForTokenClassification"),hst.forEach(t),WIo=r(e8e," (QDQBert model)"),e8e.forEach(t),HIo=i(J),_2=n(J,"LI",{});var o8e=s(_2);nme=n(o8e,"STRONG",{});var pst=s(nme);UIo=r(pst,"rembert"),pst.forEach(t),JIo=r(o8e," \u2014 "),XG=n(o8e,"A",{href:!0});var ust=s(XG);YIo=r(ust,"RemBertForTokenClassification"),ust.forEach(t),KIo=r(o8e," (RemBERT model)"),o8e.forEach(t),ZIo=i(J),b2=n(J,"LI",{});var r8e=s(b2);sme=n(r8e,"STRONG",{});var _st=s(sme);eqo=r(_st,"roberta"),_st.forEach(t),oqo=r(r8e," \u2014 "),zG=n(r8e,"A",{href:!0});var bst=s(zG);rqo=r(bst,"RobertaForTokenClassification"),bst.forEach(t),tqo=r(r8e," (RoBERTa model)"),r8e.forEach(t),aqo=i(J),v2=n(J,"LI",{});var t8e=s(v2);lme=n(t8e,"STRONG",{});var vst=s(lme);nqo=r(vst,"roformer"),vst.forEach(t),sqo=r(t8e," \u2014 "),QG=n(t8e,"A",{href:!0});var Fst=s(QG);lqo=r(Fst,"RoFormerForTokenClassification"),Fst.forEach(t),iqo=r(t8e," (RoFormer model)"),t8e.forEach(t),dqo=i(J),F2=n(J,"LI",{});var a8e=s(F2);ime=n(a8e,"STRONG",{});var Tst=s(ime);cqo=r(Tst,"squeezebert"),Tst.forEach(t),fqo=r(a8e," \u2014 "),WG=n(a8e,"A",{href:!0});var Mst=s(WG);mqo=r(Mst,"SqueezeBertForTokenClassification"),Mst.forEach(t),gqo=r(a8e," (SqueezeBERT model)"),a8e.forEach(t),hqo=i(J),T2=n(J,"LI",{});var n8e=s(T2);dme=n(n8e,"STRONG",{});var Est=s(dme);pqo=r(Est,"xlm"),Est.forEach(t),uqo=r(n8e," \u2014 "),HG=n(n8e,"A",{href:!0});var Cst=s(HG);_qo=r(Cst,"XLMForTokenClassification"),Cst.forEach(t),bqo=r(n8e," (XLM model)"),n8e.forEach(t),vqo=i(J),M2=n(J,"LI",{});var s8e=s(M2);cme=n(s8e,"STRONG",{});var wst=s(cme);Fqo=r(wst,"xlm-roberta"),wst.forEach(t),Tqo=r(s8e," \u2014 "),UG=n(s8e,"A",{href:!0});var Ast=s(UG);Mqo=r(Ast,"XLMRobertaForTokenClassification"),Ast.forEach(t),Eqo=r(s8e," (XLM-RoBERTa model)"),s8e.forEach(t),Cqo=i(J),E2=n(J,"LI",{});var l8e=s(E2);fme=n(l8e,"STRONG",{});var yst=s(fme);wqo=r(yst,"xlm-roberta-xl"),yst.forEach(t),Aqo=r(l8e," \u2014 "),JG=n(l8e,"A",{href:!0});var Lst=s(JG);yqo=r(Lst,"XLMRobertaXLForTokenClassification"),Lst.forEach(t),Lqo=r(l8e," (XLM-RoBERTa-XL model)"),l8e.forEach(t),xqo=i(J),C2=n(J,"LI",{});var i8e=s(C2);mme=n(i8e,"STRONG",{});var xst=s(mme);$qo=r(xst,"xlnet"),xst.forEach(t),kqo=r(i8e," \u2014 "),YG=n(i8e,"A",{href:!0});var $st=s(YG);Sqo=r($st,"XLNetForTokenClassification"),$st.forEach(t),Rqo=r(i8e," (XLNet model)"),i8e.forEach(t),Bqo=i(J),w2=n(J,"LI",{});var d8e=s(w2);gme=n(d8e,"STRONG",{});var kst=s(gme);Pqo=r(kst,"yoso"),kst.forEach(t),Iqo=r(d8e," \u2014 "),KG=n(d8e,"A",{href:!0});var Sst=s(KG);qqo=r(Sst,"YosoForTokenClassification"),Sst.forEach(t),Nqo=r(d8e," (YOSO model)"),d8e.forEach(t),J.forEach(t),jqo=i(aa),A2=n(aa,"P",{});var c8e=s(A2);Dqo=r(c8e,"The model is set in evaluation mode by default using "),hme=n(c8e,"CODE",{});var Rst=s(hme);Gqo=r(Rst,"model.eval()"),Rst.forEach(t),Oqo=r(c8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=n(c8e,"CODE",{});var Bst=s(pme);Vqo=r(Bst,"model.train()"),Bst.forEach(t),c8e.forEach(t),Xqo=i(aa),T(y2.$$.fragment,aa),aa.forEach(t),zs.forEach(t),pPe=i(f),Vi=n(f,"H2",{class:!0});var _qe=s(Vi);L2=n(_qe,"A",{id:!0,class:!0,href:!0});var Pst=s(L2);ume=n(Pst,"SPAN",{});var Ist=s(ume);T(QA.$$.fragment,Ist),Ist.forEach(t),Pst.forEach(t),zqo=i(_qe),_me=n(_qe,"SPAN",{});var qst=s(_me);Qqo=r(qst,"AutoModelForQuestionAnswering"),qst.forEach(t),_qe.forEach(t),uPe=i(f),qo=n(f,"DIV",{class:!0});var Qs=s(qo);T(WA.$$.fragment,Qs),Wqo=i(Qs),Xi=n(Qs,"P",{});var WY=s(Xi);Hqo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZG=n(WY,"A",{href:!0});var Nst=s(ZG);Uqo=r(Nst,"from_pretrained()"),Nst.forEach(t),Jqo=r(WY," class method or the "),eO=n(WY,"A",{href:!0});var jst=s(eO);Yqo=r(jst,"from_config()"),jst.forEach(t),Kqo=r(WY,` class
method.`),WY.forEach(t),Zqo=i(Qs),HA=n(Qs,"P",{});var bqe=s(HA);eNo=r(bqe,"This class cannot be instantiated directly using "),bme=n(bqe,"CODE",{});var Dst=s(bme);oNo=r(Dst,"__init__()"),Dst.forEach(t),rNo=r(bqe," (throws an error)."),bqe.forEach(t),tNo=i(Qs),it=n(Qs,"DIV",{class:!0});var KC=s(it);T(UA.$$.fragment,KC),aNo=i(KC),vme=n(KC,"P",{});var Gst=s(vme);nNo=r(Gst,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gst.forEach(t),sNo=i(KC),zi=n(KC,"P",{});var HY=s(zi);lNo=r(HY,`Note:
Loading a model from its configuration file does `),Fme=n(HY,"STRONG",{});var Ost=s(Fme);iNo=r(Ost,"not"),Ost.forEach(t),dNo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oO=n(HY,"A",{href:!0});var Vst=s(oO);cNo=r(Vst,"from_pretrained()"),Vst.forEach(t),fNo=r(HY," to load the model weights."),HY.forEach(t),mNo=i(KC),T(x2.$$.fragment,KC),KC.forEach(t),gNo=i(Qs),to=n(Qs,"DIV",{class:!0});var na=s(to);T(JA.$$.fragment,na),hNo=i(na),Tme=n(na,"P",{});var Xst=s(Tme);pNo=r(Xst,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xst.forEach(t),uNo=i(na),Sa=n(na,"P",{});var ZC=s(Sa);_No=r(ZC,"The model class to instantiate is selected based on the "),Mme=n(ZC,"CODE",{});var zst=s(Mme);bNo=r(zst,"model_type"),zst.forEach(t),vNo=r(ZC,` property of the config object (either
passed as an argument or loaded from `),Eme=n(ZC,"CODE",{});var Qst=s(Eme);FNo=r(Qst,"pretrained_model_name_or_path"),Qst.forEach(t),TNo=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(ZC,"CODE",{});var Wst=s(Cme);MNo=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),ENo=r(ZC,":"),ZC.forEach(t),CNo=i(na),G=n(na,"UL",{});var V=s(G);$2=n(V,"LI",{});var f8e=s($2);wme=n(f8e,"STRONG",{});var Hst=s(wme);wNo=r(Hst,"albert"),Hst.forEach(t),ANo=r(f8e," \u2014 "),rO=n(f8e,"A",{href:!0});var Ust=s(rO);yNo=r(Ust,"AlbertForQuestionAnswering"),Ust.forEach(t),LNo=r(f8e," (ALBERT model)"),f8e.forEach(t),xNo=i(V),k2=n(V,"LI",{});var m8e=s(k2);Ame=n(m8e,"STRONG",{});var Jst=s(Ame);$No=r(Jst,"bart"),Jst.forEach(t),kNo=r(m8e," \u2014 "),tO=n(m8e,"A",{href:!0});var Yst=s(tO);SNo=r(Yst,"BartForQuestionAnswering"),Yst.forEach(t),RNo=r(m8e," (BART model)"),m8e.forEach(t),BNo=i(V),S2=n(V,"LI",{});var g8e=s(S2);yme=n(g8e,"STRONG",{});var Kst=s(yme);PNo=r(Kst,"bert"),Kst.forEach(t),INo=r(g8e," \u2014 "),aO=n(g8e,"A",{href:!0});var Zst=s(aO);qNo=r(Zst,"BertForQuestionAnswering"),Zst.forEach(t),NNo=r(g8e," (BERT model)"),g8e.forEach(t),jNo=i(V),R2=n(V,"LI",{});var h8e=s(R2);Lme=n(h8e,"STRONG",{});var elt=s(Lme);DNo=r(elt,"big_bird"),elt.forEach(t),GNo=r(h8e," \u2014 "),nO=n(h8e,"A",{href:!0});var olt=s(nO);ONo=r(olt,"BigBirdForQuestionAnswering"),olt.forEach(t),VNo=r(h8e," (BigBird model)"),h8e.forEach(t),XNo=i(V),B2=n(V,"LI",{});var p8e=s(B2);xme=n(p8e,"STRONG",{});var rlt=s(xme);zNo=r(rlt,"bigbird_pegasus"),rlt.forEach(t),QNo=r(p8e," \u2014 "),sO=n(p8e,"A",{href:!0});var tlt=s(sO);WNo=r(tlt,"BigBirdPegasusForQuestionAnswering"),tlt.forEach(t),HNo=r(p8e," (BigBirdPegasus model)"),p8e.forEach(t),UNo=i(V),P2=n(V,"LI",{});var u8e=s(P2);$me=n(u8e,"STRONG",{});var alt=s($me);JNo=r(alt,"camembert"),alt.forEach(t),YNo=r(u8e," \u2014 "),lO=n(u8e,"A",{href:!0});var nlt=s(lO);KNo=r(nlt,"CamembertForQuestionAnswering"),nlt.forEach(t),ZNo=r(u8e," (CamemBERT model)"),u8e.forEach(t),ejo=i(V),I2=n(V,"LI",{});var _8e=s(I2);kme=n(_8e,"STRONG",{});var slt=s(kme);ojo=r(slt,"canine"),slt.forEach(t),rjo=r(_8e," \u2014 "),iO=n(_8e,"A",{href:!0});var llt=s(iO);tjo=r(llt,"CanineForQuestionAnswering"),llt.forEach(t),ajo=r(_8e," (Canine model)"),_8e.forEach(t),njo=i(V),q2=n(V,"LI",{});var b8e=s(q2);Sme=n(b8e,"STRONG",{});var ilt=s(Sme);sjo=r(ilt,"convbert"),ilt.forEach(t),ljo=r(b8e," \u2014 "),dO=n(b8e,"A",{href:!0});var dlt=s(dO);ijo=r(dlt,"ConvBertForQuestionAnswering"),dlt.forEach(t),djo=r(b8e," (ConvBERT model)"),b8e.forEach(t),cjo=i(V),N2=n(V,"LI",{});var v8e=s(N2);Rme=n(v8e,"STRONG",{});var clt=s(Rme);fjo=r(clt,"data2vec-text"),clt.forEach(t),mjo=r(v8e," \u2014 "),cO=n(v8e,"A",{href:!0});var flt=s(cO);gjo=r(flt,"Data2VecTextForQuestionAnswering"),flt.forEach(t),hjo=r(v8e," (Data2VecText model)"),v8e.forEach(t),pjo=i(V),j2=n(V,"LI",{});var F8e=s(j2);Bme=n(F8e,"STRONG",{});var mlt=s(Bme);ujo=r(mlt,"deberta"),mlt.forEach(t),_jo=r(F8e," \u2014 "),fO=n(F8e,"A",{href:!0});var glt=s(fO);bjo=r(glt,"DebertaForQuestionAnswering"),glt.forEach(t),vjo=r(F8e," (DeBERTa model)"),F8e.forEach(t),Fjo=i(V),D2=n(V,"LI",{});var T8e=s(D2);Pme=n(T8e,"STRONG",{});var hlt=s(Pme);Tjo=r(hlt,"deberta-v2"),hlt.forEach(t),Mjo=r(T8e," \u2014 "),mO=n(T8e,"A",{href:!0});var plt=s(mO);Ejo=r(plt,"DebertaV2ForQuestionAnswering"),plt.forEach(t),Cjo=r(T8e," (DeBERTa-v2 model)"),T8e.forEach(t),wjo=i(V),G2=n(V,"LI",{});var M8e=s(G2);Ime=n(M8e,"STRONG",{});var ult=s(Ime);Ajo=r(ult,"distilbert"),ult.forEach(t),yjo=r(M8e," \u2014 "),gO=n(M8e,"A",{href:!0});var _lt=s(gO);Ljo=r(_lt,"DistilBertForQuestionAnswering"),_lt.forEach(t),xjo=r(M8e," (DistilBERT model)"),M8e.forEach(t),$jo=i(V),O2=n(V,"LI",{});var E8e=s(O2);qme=n(E8e,"STRONG",{});var blt=s(qme);kjo=r(blt,"electra"),blt.forEach(t),Sjo=r(E8e," \u2014 "),hO=n(E8e,"A",{href:!0});var vlt=s(hO);Rjo=r(vlt,"ElectraForQuestionAnswering"),vlt.forEach(t),Bjo=r(E8e," (ELECTRA model)"),E8e.forEach(t),Pjo=i(V),V2=n(V,"LI",{});var C8e=s(V2);Nme=n(C8e,"STRONG",{});var Flt=s(Nme);Ijo=r(Flt,"flaubert"),Flt.forEach(t),qjo=r(C8e," \u2014 "),pO=n(C8e,"A",{href:!0});var Tlt=s(pO);Njo=r(Tlt,"FlaubertForQuestionAnsweringSimple"),Tlt.forEach(t),jjo=r(C8e," (FlauBERT model)"),C8e.forEach(t),Djo=i(V),X2=n(V,"LI",{});var w8e=s(X2);jme=n(w8e,"STRONG",{});var Mlt=s(jme);Gjo=r(Mlt,"fnet"),Mlt.forEach(t),Ojo=r(w8e," \u2014 "),uO=n(w8e,"A",{href:!0});var Elt=s(uO);Vjo=r(Elt,"FNetForQuestionAnswering"),Elt.forEach(t),Xjo=r(w8e," (FNet model)"),w8e.forEach(t),zjo=i(V),z2=n(V,"LI",{});var A8e=s(z2);Dme=n(A8e,"STRONG",{});var Clt=s(Dme);Qjo=r(Clt,"funnel"),Clt.forEach(t),Wjo=r(A8e," \u2014 "),_O=n(A8e,"A",{href:!0});var wlt=s(_O);Hjo=r(wlt,"FunnelForQuestionAnswering"),wlt.forEach(t),Ujo=r(A8e," (Funnel Transformer model)"),A8e.forEach(t),Jjo=i(V),Q2=n(V,"LI",{});var y8e=s(Q2);Gme=n(y8e,"STRONG",{});var Alt=s(Gme);Yjo=r(Alt,"gptj"),Alt.forEach(t),Kjo=r(y8e," \u2014 "),bO=n(y8e,"A",{href:!0});var ylt=s(bO);Zjo=r(ylt,"GPTJForQuestionAnswering"),ylt.forEach(t),eDo=r(y8e," (GPT-J model)"),y8e.forEach(t),oDo=i(V),W2=n(V,"LI",{});var L8e=s(W2);Ome=n(L8e,"STRONG",{});var Llt=s(Ome);rDo=r(Llt,"ibert"),Llt.forEach(t),tDo=r(L8e," \u2014 "),vO=n(L8e,"A",{href:!0});var xlt=s(vO);aDo=r(xlt,"IBertForQuestionAnswering"),xlt.forEach(t),nDo=r(L8e," (I-BERT model)"),L8e.forEach(t),sDo=i(V),H2=n(V,"LI",{});var x8e=s(H2);Vme=n(x8e,"STRONG",{});var $lt=s(Vme);lDo=r($lt,"layoutlmv2"),$lt.forEach(t),iDo=r(x8e," \u2014 "),FO=n(x8e,"A",{href:!0});var klt=s(FO);dDo=r(klt,"LayoutLMv2ForQuestionAnswering"),klt.forEach(t),cDo=r(x8e," (LayoutLMv2 model)"),x8e.forEach(t),fDo=i(V),U2=n(V,"LI",{});var $8e=s(U2);Xme=n($8e,"STRONG",{});var Slt=s(Xme);mDo=r(Slt,"layoutlmv3"),Slt.forEach(t),gDo=r($8e," \u2014 "),TO=n($8e,"A",{href:!0});var Rlt=s(TO);hDo=r(Rlt,"LayoutLMv3ForQuestionAnswering"),Rlt.forEach(t),pDo=r($8e," (LayoutLMv3 model)"),$8e.forEach(t),uDo=i(V),J2=n(V,"LI",{});var k8e=s(J2);zme=n(k8e,"STRONG",{});var Blt=s(zme);_Do=r(Blt,"led"),Blt.forEach(t),bDo=r(k8e," \u2014 "),MO=n(k8e,"A",{href:!0});var Plt=s(MO);vDo=r(Plt,"LEDForQuestionAnswering"),Plt.forEach(t),FDo=r(k8e," (LED model)"),k8e.forEach(t),TDo=i(V),Y2=n(V,"LI",{});var S8e=s(Y2);Qme=n(S8e,"STRONG",{});var Ilt=s(Qme);MDo=r(Ilt,"longformer"),Ilt.forEach(t),EDo=r(S8e," \u2014 "),EO=n(S8e,"A",{href:!0});var qlt=s(EO);CDo=r(qlt,"LongformerForQuestionAnswering"),qlt.forEach(t),wDo=r(S8e," (Longformer model)"),S8e.forEach(t),ADo=i(V),K2=n(V,"LI",{});var R8e=s(K2);Wme=n(R8e,"STRONG",{});var Nlt=s(Wme);yDo=r(Nlt,"lxmert"),Nlt.forEach(t),LDo=r(R8e," \u2014 "),CO=n(R8e,"A",{href:!0});var jlt=s(CO);xDo=r(jlt,"LxmertForQuestionAnswering"),jlt.forEach(t),$Do=r(R8e," (LXMERT model)"),R8e.forEach(t),kDo=i(V),Z2=n(V,"LI",{});var B8e=s(Z2);Hme=n(B8e,"STRONG",{});var Dlt=s(Hme);SDo=r(Dlt,"mbart"),Dlt.forEach(t),RDo=r(B8e," \u2014 "),wO=n(B8e,"A",{href:!0});var Glt=s(wO);BDo=r(Glt,"MBartForQuestionAnswering"),Glt.forEach(t),PDo=r(B8e," (mBART model)"),B8e.forEach(t),IDo=i(V),ev=n(V,"LI",{});var P8e=s(ev);Ume=n(P8e,"STRONG",{});var Olt=s(Ume);qDo=r(Olt,"megatron-bert"),Olt.forEach(t),NDo=r(P8e," \u2014 "),AO=n(P8e,"A",{href:!0});var Vlt=s(AO);jDo=r(Vlt,"MegatronBertForQuestionAnswering"),Vlt.forEach(t),DDo=r(P8e," (MegatronBert model)"),P8e.forEach(t),GDo=i(V),ov=n(V,"LI",{});var I8e=s(ov);Jme=n(I8e,"STRONG",{});var Xlt=s(Jme);ODo=r(Xlt,"mobilebert"),Xlt.forEach(t),VDo=r(I8e," \u2014 "),yO=n(I8e,"A",{href:!0});var zlt=s(yO);XDo=r(zlt,"MobileBertForQuestionAnswering"),zlt.forEach(t),zDo=r(I8e," (MobileBERT model)"),I8e.forEach(t),QDo=i(V),rv=n(V,"LI",{});var q8e=s(rv);Yme=n(q8e,"STRONG",{});var Qlt=s(Yme);WDo=r(Qlt,"mpnet"),Qlt.forEach(t),HDo=r(q8e," \u2014 "),LO=n(q8e,"A",{href:!0});var Wlt=s(LO);UDo=r(Wlt,"MPNetForQuestionAnswering"),Wlt.forEach(t),JDo=r(q8e," (MPNet model)"),q8e.forEach(t),YDo=i(V),tv=n(V,"LI",{});var N8e=s(tv);Kme=n(N8e,"STRONG",{});var Hlt=s(Kme);KDo=r(Hlt,"nystromformer"),Hlt.forEach(t),ZDo=r(N8e," \u2014 "),xO=n(N8e,"A",{href:!0});var Ult=s(xO);eGo=r(Ult,"NystromformerForQuestionAnswering"),Ult.forEach(t),oGo=r(N8e," (Nystromformer model)"),N8e.forEach(t),rGo=i(V),av=n(V,"LI",{});var j8e=s(av);Zme=n(j8e,"STRONG",{});var Jlt=s(Zme);tGo=r(Jlt,"qdqbert"),Jlt.forEach(t),aGo=r(j8e," \u2014 "),$O=n(j8e,"A",{href:!0});var Ylt=s($O);nGo=r(Ylt,"QDQBertForQuestionAnswering"),Ylt.forEach(t),sGo=r(j8e," (QDQBert model)"),j8e.forEach(t),lGo=i(V),nv=n(V,"LI",{});var D8e=s(nv);ege=n(D8e,"STRONG",{});var Klt=s(ege);iGo=r(Klt,"reformer"),Klt.forEach(t),dGo=r(D8e," \u2014 "),kO=n(D8e,"A",{href:!0});var Zlt=s(kO);cGo=r(Zlt,"ReformerForQuestionAnswering"),Zlt.forEach(t),fGo=r(D8e," (Reformer model)"),D8e.forEach(t),mGo=i(V),sv=n(V,"LI",{});var G8e=s(sv);oge=n(G8e,"STRONG",{});var eit=s(oge);gGo=r(eit,"rembert"),eit.forEach(t),hGo=r(G8e," \u2014 "),SO=n(G8e,"A",{href:!0});var oit=s(SO);pGo=r(oit,"RemBertForQuestionAnswering"),oit.forEach(t),uGo=r(G8e," (RemBERT model)"),G8e.forEach(t),_Go=i(V),lv=n(V,"LI",{});var O8e=s(lv);rge=n(O8e,"STRONG",{});var rit=s(rge);bGo=r(rit,"roberta"),rit.forEach(t),vGo=r(O8e," \u2014 "),RO=n(O8e,"A",{href:!0});var tit=s(RO);FGo=r(tit,"RobertaForQuestionAnswering"),tit.forEach(t),TGo=r(O8e," (RoBERTa model)"),O8e.forEach(t),MGo=i(V),iv=n(V,"LI",{});var V8e=s(iv);tge=n(V8e,"STRONG",{});var ait=s(tge);EGo=r(ait,"roformer"),ait.forEach(t),CGo=r(V8e," \u2014 "),BO=n(V8e,"A",{href:!0});var nit=s(BO);wGo=r(nit,"RoFormerForQuestionAnswering"),nit.forEach(t),AGo=r(V8e," (RoFormer model)"),V8e.forEach(t),yGo=i(V),dv=n(V,"LI",{});var X8e=s(dv);age=n(X8e,"STRONG",{});var sit=s(age);LGo=r(sit,"splinter"),sit.forEach(t),xGo=r(X8e," \u2014 "),PO=n(X8e,"A",{href:!0});var lit=s(PO);$Go=r(lit,"SplinterForQuestionAnswering"),lit.forEach(t),kGo=r(X8e," (Splinter model)"),X8e.forEach(t),SGo=i(V),cv=n(V,"LI",{});var z8e=s(cv);nge=n(z8e,"STRONG",{});var iit=s(nge);RGo=r(iit,"squeezebert"),iit.forEach(t),BGo=r(z8e," \u2014 "),IO=n(z8e,"A",{href:!0});var dit=s(IO);PGo=r(dit,"SqueezeBertForQuestionAnswering"),dit.forEach(t),IGo=r(z8e," (SqueezeBERT model)"),z8e.forEach(t),qGo=i(V),fv=n(V,"LI",{});var Q8e=s(fv);sge=n(Q8e,"STRONG",{});var cit=s(sge);NGo=r(cit,"xlm"),cit.forEach(t),jGo=r(Q8e," \u2014 "),qO=n(Q8e,"A",{href:!0});var fit=s(qO);DGo=r(fit,"XLMForQuestionAnsweringSimple"),fit.forEach(t),GGo=r(Q8e," (XLM model)"),Q8e.forEach(t),OGo=i(V),mv=n(V,"LI",{});var W8e=s(mv);lge=n(W8e,"STRONG",{});var mit=s(lge);VGo=r(mit,"xlm-roberta"),mit.forEach(t),XGo=r(W8e," \u2014 "),NO=n(W8e,"A",{href:!0});var git=s(NO);zGo=r(git,"XLMRobertaForQuestionAnswering"),git.forEach(t),QGo=r(W8e," (XLM-RoBERTa model)"),W8e.forEach(t),WGo=i(V),gv=n(V,"LI",{});var H8e=s(gv);ige=n(H8e,"STRONG",{});var hit=s(ige);HGo=r(hit,"xlm-roberta-xl"),hit.forEach(t),UGo=r(H8e," \u2014 "),jO=n(H8e,"A",{href:!0});var pit=s(jO);JGo=r(pit,"XLMRobertaXLForQuestionAnswering"),pit.forEach(t),YGo=r(H8e," (XLM-RoBERTa-XL model)"),H8e.forEach(t),KGo=i(V),hv=n(V,"LI",{});var U8e=s(hv);dge=n(U8e,"STRONG",{});var uit=s(dge);ZGo=r(uit,"xlnet"),uit.forEach(t),eOo=r(U8e," \u2014 "),DO=n(U8e,"A",{href:!0});var _it=s(DO);oOo=r(_it,"XLNetForQuestionAnsweringSimple"),_it.forEach(t),rOo=r(U8e," (XLNet model)"),U8e.forEach(t),tOo=i(V),pv=n(V,"LI",{});var J8e=s(pv);cge=n(J8e,"STRONG",{});var bit=s(cge);aOo=r(bit,"yoso"),bit.forEach(t),nOo=r(J8e," \u2014 "),GO=n(J8e,"A",{href:!0});var vit=s(GO);sOo=r(vit,"YosoForQuestionAnswering"),vit.forEach(t),lOo=r(J8e," (YOSO model)"),J8e.forEach(t),V.forEach(t),iOo=i(na),uv=n(na,"P",{});var Y8e=s(uv);dOo=r(Y8e,"The model is set in evaluation mode by default using "),fge=n(Y8e,"CODE",{});var Fit=s(fge);cOo=r(Fit,"model.eval()"),Fit.forEach(t),fOo=r(Y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=n(Y8e,"CODE",{});var Tit=s(mge);mOo=r(Tit,"model.train()"),Tit.forEach(t),Y8e.forEach(t),gOo=i(na),T(_v.$$.fragment,na),na.forEach(t),Qs.forEach(t),_Pe=i(f),Qi=n(f,"H2",{class:!0});var vqe=s(Qi);bv=n(vqe,"A",{id:!0,class:!0,href:!0});var Mit=s(bv);gge=n(Mit,"SPAN",{});var Eit=s(gge);T(YA.$$.fragment,Eit),Eit.forEach(t),Mit.forEach(t),hOo=i(vqe),hge=n(vqe,"SPAN",{});var Cit=s(hge);pOo=r(Cit,"AutoModelForTableQuestionAnswering"),Cit.forEach(t),vqe.forEach(t),bPe=i(f),No=n(f,"DIV",{class:!0});var Ws=s(No);T(KA.$$.fragment,Ws),uOo=i(Ws),Wi=n(Ws,"P",{});var UY=s(Wi);_Oo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OO=n(UY,"A",{href:!0});var wit=s(OO);bOo=r(wit,"from_pretrained()"),wit.forEach(t),vOo=r(UY," class method or the "),VO=n(UY,"A",{href:!0});var Ait=s(VO);FOo=r(Ait,"from_config()"),Ait.forEach(t),TOo=r(UY,` class
method.`),UY.forEach(t),MOo=i(Ws),ZA=n(Ws,"P",{});var Fqe=s(ZA);EOo=r(Fqe,"This class cannot be instantiated directly using "),pge=n(Fqe,"CODE",{});var yit=s(pge);COo=r(yit,"__init__()"),yit.forEach(t),wOo=r(Fqe," (throws an error)."),Fqe.forEach(t),AOo=i(Ws),dt=n(Ws,"DIV",{class:!0});var e3=s(dt);T(ey.$$.fragment,e3),yOo=i(e3),uge=n(e3,"P",{});var Lit=s(uge);LOo=r(Lit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lit.forEach(t),xOo=i(e3),Hi=n(e3,"P",{});var JY=s(Hi);$Oo=r(JY,`Note:
Loading a model from its configuration file does `),_ge=n(JY,"STRONG",{});var xit=s(_ge);kOo=r(xit,"not"),xit.forEach(t),SOo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=n(JY,"A",{href:!0});var $it=s(XO);ROo=r($it,"from_pretrained()"),$it.forEach(t),BOo=r(JY," to load the model weights."),JY.forEach(t),POo=i(e3),T(vv.$$.fragment,e3),e3.forEach(t),IOo=i(Ws),ao=n(Ws,"DIV",{class:!0});var sa=s(ao);T(oy.$$.fragment,sa),qOo=i(sa),bge=n(sa,"P",{});var kit=s(bge);NOo=r(kit,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kit.forEach(t),jOo=i(sa),Ra=n(sa,"P",{});var o3=s(Ra);DOo=r(o3,"The model class to instantiate is selected based on the "),vge=n(o3,"CODE",{});var Sit=s(vge);GOo=r(Sit,"model_type"),Sit.forEach(t),OOo=r(o3,` property of the config object (either
passed as an argument or loaded from `),Fge=n(o3,"CODE",{});var Rit=s(Fge);VOo=r(Rit,"pretrained_model_name_or_path"),Rit.forEach(t),XOo=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=n(o3,"CODE",{});var Bit=s(Tge);zOo=r(Bit,"pretrained_model_name_or_path"),Bit.forEach(t),QOo=r(o3,":"),o3.forEach(t),WOo=i(sa),Mge=n(sa,"UL",{});var Pit=s(Mge);Fv=n(Pit,"LI",{});var K8e=s(Fv);Ege=n(K8e,"STRONG",{});var Iit=s(Ege);HOo=r(Iit,"tapas"),Iit.forEach(t),UOo=r(K8e," \u2014 "),zO=n(K8e,"A",{href:!0});var qit=s(zO);JOo=r(qit,"TapasForQuestionAnswering"),qit.forEach(t),YOo=r(K8e," (TAPAS model)"),K8e.forEach(t),Pit.forEach(t),KOo=i(sa),Tv=n(sa,"P",{});var Z8e=s(Tv);ZOo=r(Z8e,"The model is set in evaluation mode by default using "),Cge=n(Z8e,"CODE",{});var Nit=s(Cge);eVo=r(Nit,"model.eval()"),Nit.forEach(t),oVo=r(Z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=n(Z8e,"CODE",{});var jit=s(wge);rVo=r(jit,"model.train()"),jit.forEach(t),Z8e.forEach(t),tVo=i(sa),T(Mv.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),vPe=i(f),Ui=n(f,"H2",{class:!0});var Tqe=s(Ui);Ev=n(Tqe,"A",{id:!0,class:!0,href:!0});var Dit=s(Ev);Age=n(Dit,"SPAN",{});var Git=s(Age);T(ry.$$.fragment,Git),Git.forEach(t),Dit.forEach(t),aVo=i(Tqe),yge=n(Tqe,"SPAN",{});var Oit=s(yge);nVo=r(Oit,"AutoModelForImageClassification"),Oit.forEach(t),Tqe.forEach(t),FPe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(ty.$$.fragment,Hs),sVo=i(Hs),Ji=n(Hs,"P",{});var YY=s(Ji);lVo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QO=n(YY,"A",{href:!0});var Vit=s(QO);iVo=r(Vit,"from_pretrained()"),Vit.forEach(t),dVo=r(YY," class method or the "),WO=n(YY,"A",{href:!0});var Xit=s(WO);cVo=r(Xit,"from_config()"),Xit.forEach(t),fVo=r(YY,` class
method.`),YY.forEach(t),mVo=i(Hs),ay=n(Hs,"P",{});var Mqe=s(ay);gVo=r(Mqe,"This class cannot be instantiated directly using "),Lge=n(Mqe,"CODE",{});var zit=s(Lge);hVo=r(zit,"__init__()"),zit.forEach(t),pVo=r(Mqe," (throws an error)."),Mqe.forEach(t),uVo=i(Hs),ct=n(Hs,"DIV",{class:!0});var r3=s(ct);T(ny.$$.fragment,r3),_Vo=i(r3),xge=n(r3,"P",{});var Qit=s(xge);bVo=r(Qit,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Qit.forEach(t),vVo=i(r3),Yi=n(r3,"P",{});var KY=s(Yi);FVo=r(KY,`Note:
Loading a model from its configuration file does `),$ge=n(KY,"STRONG",{});var Wit=s($ge);TVo=r(Wit,"not"),Wit.forEach(t),MVo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(KY,"A",{href:!0});var Hit=s(HO);EVo=r(Hit,"from_pretrained()"),Hit.forEach(t),CVo=r(KY," to load the model weights."),KY.forEach(t),wVo=i(r3),T(Cv.$$.fragment,r3),r3.forEach(t),AVo=i(Hs),no=n(Hs,"DIV",{class:!0});var la=s(no);T(sy.$$.fragment,la),yVo=i(la),kge=n(la,"P",{});var Uit=s(kge);LVo=r(Uit,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Uit.forEach(t),xVo=i(la),Ba=n(la,"P",{});var t3=s(Ba);$Vo=r(t3,"The model class to instantiate is selected based on the "),Sge=n(t3,"CODE",{});var Jit=s(Sge);kVo=r(Jit,"model_type"),Jit.forEach(t),SVo=r(t3,` property of the config object (either
passed as an argument or loaded from `),Rge=n(t3,"CODE",{});var Yit=s(Rge);RVo=r(Yit,"pretrained_model_name_or_path"),Yit.forEach(t),BVo=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=n(t3,"CODE",{});var Kit=s(Bge);PVo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),IVo=r(t3,":"),t3.forEach(t),qVo=i(la),Fe=n(la,"UL",{});var Ee=s(Fe);wv=n(Ee,"LI",{});var exe=s(wv);Pge=n(exe,"STRONG",{});var Zit=s(Pge);NVo=r(Zit,"beit"),Zit.forEach(t),jVo=r(exe," \u2014 "),UO=n(exe,"A",{href:!0});var edt=s(UO);DVo=r(edt,"BeitForImageClassification"),edt.forEach(t),GVo=r(exe," (BEiT model)"),exe.forEach(t),OVo=i(Ee),Av=n(Ee,"LI",{});var oxe=s(Av);Ige=n(oxe,"STRONG",{});var odt=s(Ige);VVo=r(odt,"convnext"),odt.forEach(t),XVo=r(oxe," \u2014 "),JO=n(oxe,"A",{href:!0});var rdt=s(JO);zVo=r(rdt,"ConvNextForImageClassification"),rdt.forEach(t),QVo=r(oxe," (ConvNext model)"),oxe.forEach(t),WVo=i(Ee),yv=n(Ee,"LI",{});var rxe=s(yv);qge=n(rxe,"STRONG",{});var tdt=s(qge);HVo=r(tdt,"data2vec-vision"),tdt.forEach(t),UVo=r(rxe," \u2014 "),YO=n(rxe,"A",{href:!0});var adt=s(YO);JVo=r(adt,"Data2VecVisionForImageClassification"),adt.forEach(t),YVo=r(rxe," (Data2VecVision model)"),rxe.forEach(t),KVo=i(Ee),$s=n(Ee,"LI",{});var D9=s($s);Nge=n(D9,"STRONG",{});var ndt=s(Nge);ZVo=r(ndt,"deit"),ndt.forEach(t),eXo=r(D9," \u2014 "),KO=n(D9,"A",{href:!0});var sdt=s(KO);oXo=r(sdt,"DeiTForImageClassification"),sdt.forEach(t),rXo=r(D9," or "),ZO=n(D9,"A",{href:!0});var ldt=s(ZO);tXo=r(ldt,"DeiTForImageClassificationWithTeacher"),ldt.forEach(t),aXo=r(D9," (DeiT model)"),D9.forEach(t),nXo=i(Ee),Lv=n(Ee,"LI",{});var txe=s(Lv);jge=n(txe,"STRONG",{});var idt=s(jge);sXo=r(idt,"imagegpt"),idt.forEach(t),lXo=r(txe," \u2014 "),eV=n(txe,"A",{href:!0});var ddt=s(eV);iXo=r(ddt,"ImageGPTForImageClassification"),ddt.forEach(t),dXo=r(txe," (ImageGPT model)"),txe.forEach(t),cXo=i(Ee),ft=n(Ee,"LI",{});var of=s(ft);Dge=n(of,"STRONG",{});var cdt=s(Dge);fXo=r(cdt,"perceiver"),cdt.forEach(t),mXo=r(of," \u2014 "),oV=n(of,"A",{href:!0});var fdt=s(oV);gXo=r(fdt,"PerceiverForImageClassificationLearned"),fdt.forEach(t),hXo=r(of," or "),rV=n(of,"A",{href:!0});var mdt=s(rV);pXo=r(mdt,"PerceiverForImageClassificationFourier"),mdt.forEach(t),uXo=r(of," or "),tV=n(of,"A",{href:!0});var gdt=s(tV);_Xo=r(gdt,"PerceiverForImageClassificationConvProcessing"),gdt.forEach(t),bXo=r(of," (Perceiver model)"),of.forEach(t),vXo=i(Ee),xv=n(Ee,"LI",{});var axe=s(xv);Gge=n(axe,"STRONG",{});var hdt=s(Gge);FXo=r(hdt,"poolformer"),hdt.forEach(t),TXo=r(axe," \u2014 "),aV=n(axe,"A",{href:!0});var pdt=s(aV);MXo=r(pdt,"PoolFormerForImageClassification"),pdt.forEach(t),EXo=r(axe," (PoolFormer model)"),axe.forEach(t),CXo=i(Ee),$v=n(Ee,"LI",{});var nxe=s($v);Oge=n(nxe,"STRONG",{});var udt=s(Oge);wXo=r(udt,"regnet"),udt.forEach(t),AXo=r(nxe," \u2014 "),nV=n(nxe,"A",{href:!0});var _dt=s(nV);yXo=r(_dt,"RegNetForImageClassification"),_dt.forEach(t),LXo=r(nxe," (RegNet model)"),nxe.forEach(t),xXo=i(Ee),kv=n(Ee,"LI",{});var sxe=s(kv);Vge=n(sxe,"STRONG",{});var bdt=s(Vge);$Xo=r(bdt,"resnet"),bdt.forEach(t),kXo=r(sxe," \u2014 "),sV=n(sxe,"A",{href:!0});var vdt=s(sV);SXo=r(vdt,"ResNetForImageClassification"),vdt.forEach(t),RXo=r(sxe," (ResNet model)"),sxe.forEach(t),BXo=i(Ee),Sv=n(Ee,"LI",{});var lxe=s(Sv);Xge=n(lxe,"STRONG",{});var Fdt=s(Xge);PXo=r(Fdt,"segformer"),Fdt.forEach(t),IXo=r(lxe," \u2014 "),lV=n(lxe,"A",{href:!0});var Tdt=s(lV);qXo=r(Tdt,"SegformerForImageClassification"),Tdt.forEach(t),NXo=r(lxe," (SegFormer model)"),lxe.forEach(t),jXo=i(Ee),Rv=n(Ee,"LI",{});var ixe=s(Rv);zge=n(ixe,"STRONG",{});var Mdt=s(zge);DXo=r(Mdt,"swin"),Mdt.forEach(t),GXo=r(ixe," \u2014 "),iV=n(ixe,"A",{href:!0});var Edt=s(iV);OXo=r(Edt,"SwinForImageClassification"),Edt.forEach(t),VXo=r(ixe," (Swin model)"),ixe.forEach(t),XXo=i(Ee),Bv=n(Ee,"LI",{});var dxe=s(Bv);Qge=n(dxe,"STRONG",{});var Cdt=s(Qge);zXo=r(Cdt,"van"),Cdt.forEach(t),QXo=r(dxe," \u2014 "),dV=n(dxe,"A",{href:!0});var wdt=s(dV);WXo=r(wdt,"VanForImageClassification"),wdt.forEach(t),HXo=r(dxe," (VAN model)"),dxe.forEach(t),UXo=i(Ee),Pv=n(Ee,"LI",{});var cxe=s(Pv);Wge=n(cxe,"STRONG",{});var Adt=s(Wge);JXo=r(Adt,"vit"),Adt.forEach(t),YXo=r(cxe," \u2014 "),cV=n(cxe,"A",{href:!0});var ydt=s(cV);KXo=r(ydt,"ViTForImageClassification"),ydt.forEach(t),ZXo=r(cxe," (ViT model)"),cxe.forEach(t),Ee.forEach(t),ezo=i(la),Iv=n(la,"P",{});var fxe=s(Iv);ozo=r(fxe,"The model is set in evaluation mode by default using "),Hge=n(fxe,"CODE",{});var Ldt=s(Hge);rzo=r(Ldt,"model.eval()"),Ldt.forEach(t),tzo=r(fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=n(fxe,"CODE",{});var xdt=s(Uge);azo=r(xdt,"model.train()"),xdt.forEach(t),fxe.forEach(t),nzo=i(la),T(qv.$$.fragment,la),la.forEach(t),Hs.forEach(t),TPe=i(f),Ki=n(f,"H2",{class:!0});var Eqe=s(Ki);Nv=n(Eqe,"A",{id:!0,class:!0,href:!0});var $dt=s(Nv);Jge=n($dt,"SPAN",{});var kdt=s(Jge);T(ly.$$.fragment,kdt),kdt.forEach(t),$dt.forEach(t),szo=i(Eqe),Yge=n(Eqe,"SPAN",{});var Sdt=s(Yge);lzo=r(Sdt,"AutoModelForVision2Seq"),Sdt.forEach(t),Eqe.forEach(t),MPe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(iy.$$.fragment,Us),izo=i(Us),Zi=n(Us,"P",{});var ZY=s(Zi);dzo=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fV=n(ZY,"A",{href:!0});var Rdt=s(fV);czo=r(Rdt,"from_pretrained()"),Rdt.forEach(t),fzo=r(ZY," class method or the "),mV=n(ZY,"A",{href:!0});var Bdt=s(mV);mzo=r(Bdt,"from_config()"),Bdt.forEach(t),gzo=r(ZY,` class
method.`),ZY.forEach(t),hzo=i(Us),dy=n(Us,"P",{});var Cqe=s(dy);pzo=r(Cqe,"This class cannot be instantiated directly using "),Kge=n(Cqe,"CODE",{});var Pdt=s(Kge);uzo=r(Pdt,"__init__()"),Pdt.forEach(t),_zo=r(Cqe," (throws an error)."),Cqe.forEach(t),bzo=i(Us),mt=n(Us,"DIV",{class:!0});var a3=s(mt);T(cy.$$.fragment,a3),vzo=i(a3),Zge=n(a3,"P",{});var Idt=s(Zge);Fzo=r(Idt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Idt.forEach(t),Tzo=i(a3),ed=n(a3,"P",{});var eK=s(ed);Mzo=r(eK,`Note:
Loading a model from its configuration file does `),ehe=n(eK,"STRONG",{});var qdt=s(ehe);Ezo=r(qdt,"not"),qdt.forEach(t),Czo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=n(eK,"A",{href:!0});var Ndt=s(gV);wzo=r(Ndt,"from_pretrained()"),Ndt.forEach(t),Azo=r(eK," to load the model weights."),eK.forEach(t),yzo=i(a3),T(jv.$$.fragment,a3),a3.forEach(t),Lzo=i(Us),so=n(Us,"DIV",{class:!0});var ia=s(so);T(fy.$$.fragment,ia),xzo=i(ia),ohe=n(ia,"P",{});var jdt=s(ohe);$zo=r(jdt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jdt.forEach(t),kzo=i(ia),Pa=n(ia,"P",{});var n3=s(Pa);Szo=r(n3,"The model class to instantiate is selected based on the "),rhe=n(n3,"CODE",{});var Ddt=s(rhe);Rzo=r(Ddt,"model_type"),Ddt.forEach(t),Bzo=r(n3,` property of the config object (either
passed as an argument or loaded from `),the=n(n3,"CODE",{});var Gdt=s(the);Pzo=r(Gdt,"pretrained_model_name_or_path"),Gdt.forEach(t),Izo=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=n(n3,"CODE",{});var Odt=s(ahe);qzo=r(Odt,"pretrained_model_name_or_path"),Odt.forEach(t),Nzo=r(n3,":"),n3.forEach(t),jzo=i(ia),nhe=n(ia,"UL",{});var Vdt=s(nhe);Dv=n(Vdt,"LI",{});var mxe=s(Dv);she=n(mxe,"STRONG",{});var Xdt=s(she);Dzo=r(Xdt,"vision-encoder-decoder"),Xdt.forEach(t),Gzo=r(mxe," \u2014 "),hV=n(mxe,"A",{href:!0});var zdt=s(hV);Ozo=r(zdt,"VisionEncoderDecoderModel"),zdt.forEach(t),Vzo=r(mxe," (Vision Encoder decoder model)"),mxe.forEach(t),Vdt.forEach(t),Xzo=i(ia),Gv=n(ia,"P",{});var gxe=s(Gv);zzo=r(gxe,"The model is set in evaluation mode by default using "),lhe=n(gxe,"CODE",{});var Qdt=s(lhe);Qzo=r(Qdt,"model.eval()"),Qdt.forEach(t),Wzo=r(gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=n(gxe,"CODE",{});var Wdt=s(ihe);Hzo=r(Wdt,"model.train()"),Wdt.forEach(t),gxe.forEach(t),Uzo=i(ia),T(Ov.$$.fragment,ia),ia.forEach(t),Us.forEach(t),EPe=i(f),od=n(f,"H2",{class:!0});var wqe=s(od);Vv=n(wqe,"A",{id:!0,class:!0,href:!0});var Hdt=s(Vv);dhe=n(Hdt,"SPAN",{});var Udt=s(dhe);T(my.$$.fragment,Udt),Udt.forEach(t),Hdt.forEach(t),Jzo=i(wqe),che=n(wqe,"SPAN",{});var Jdt=s(che);Yzo=r(Jdt,"AutoModelForAudioClassification"),Jdt.forEach(t),wqe.forEach(t),CPe=i(f),Go=n(f,"DIV",{class:!0});var Js=s(Go);T(gy.$$.fragment,Js),Kzo=i(Js),rd=n(Js,"P",{});var oK=s(rd);Zzo=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),pV=n(oK,"A",{href:!0});var Ydt=s(pV);eQo=r(Ydt,"from_pretrained()"),Ydt.forEach(t),oQo=r(oK," class method or the "),uV=n(oK,"A",{href:!0});var Kdt=s(uV);rQo=r(Kdt,"from_config()"),Kdt.forEach(t),tQo=r(oK,` class
method.`),oK.forEach(t),aQo=i(Js),hy=n(Js,"P",{});var Aqe=s(hy);nQo=r(Aqe,"This class cannot be instantiated directly using "),fhe=n(Aqe,"CODE",{});var Zdt=s(fhe);sQo=r(Zdt,"__init__()"),Zdt.forEach(t),lQo=r(Aqe," (throws an error)."),Aqe.forEach(t),iQo=i(Js),gt=n(Js,"DIV",{class:!0});var s3=s(gt);T(py.$$.fragment,s3),dQo=i(s3),mhe=n(s3,"P",{});var ect=s(mhe);cQo=r(ect,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ect.forEach(t),fQo=i(s3),td=n(s3,"P",{});var rK=s(td);mQo=r(rK,`Note:
Loading a model from its configuration file does `),ghe=n(rK,"STRONG",{});var oct=s(ghe);gQo=r(oct,"not"),oct.forEach(t),hQo=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(rK,"A",{href:!0});var rct=s(_V);pQo=r(rct,"from_pretrained()"),rct.forEach(t),uQo=r(rK," to load the model weights."),rK.forEach(t),_Qo=i(s3),T(Xv.$$.fragment,s3),s3.forEach(t),bQo=i(Js),lo=n(Js,"DIV",{class:!0});var da=s(lo);T(uy.$$.fragment,da),vQo=i(da),hhe=n(da,"P",{});var tct=s(hhe);FQo=r(tct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),tct.forEach(t),TQo=i(da),Ia=n(da,"P",{});var l3=s(Ia);MQo=r(l3,"The model class to instantiate is selected based on the "),phe=n(l3,"CODE",{});var act=s(phe);EQo=r(act,"model_type"),act.forEach(t),CQo=r(l3,` property of the config object (either
passed as an argument or loaded from `),uhe=n(l3,"CODE",{});var nct=s(uhe);wQo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),AQo=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(l3,"CODE",{});var sct=s(_he);yQo=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),LQo=r(l3,":"),l3.forEach(t),xQo=i(da),Ne=n(da,"UL",{});var bo=s(Ne);zv=n(bo,"LI",{});var hxe=s(zv);bhe=n(hxe,"STRONG",{});var lct=s(bhe);$Qo=r(lct,"data2vec-audio"),lct.forEach(t),kQo=r(hxe," \u2014 "),bV=n(hxe,"A",{href:!0});var ict=s(bV);SQo=r(ict,"Data2VecAudioForSequenceClassification"),ict.forEach(t),RQo=r(hxe," (Data2VecAudio model)"),hxe.forEach(t),BQo=i(bo),Qv=n(bo,"LI",{});var pxe=s(Qv);vhe=n(pxe,"STRONG",{});var dct=s(vhe);PQo=r(dct,"hubert"),dct.forEach(t),IQo=r(pxe," \u2014 "),vV=n(pxe,"A",{href:!0});var cct=s(vV);qQo=r(cct,"HubertForSequenceClassification"),cct.forEach(t),NQo=r(pxe," (Hubert model)"),pxe.forEach(t),jQo=i(bo),Wv=n(bo,"LI",{});var uxe=s(Wv);Fhe=n(uxe,"STRONG",{});var fct=s(Fhe);DQo=r(fct,"sew"),fct.forEach(t),GQo=r(uxe," \u2014 "),FV=n(uxe,"A",{href:!0});var mct=s(FV);OQo=r(mct,"SEWForSequenceClassification"),mct.forEach(t),VQo=r(uxe," (SEW model)"),uxe.forEach(t),XQo=i(bo),Hv=n(bo,"LI",{});var _xe=s(Hv);The=n(_xe,"STRONG",{});var gct=s(The);zQo=r(gct,"sew-d"),gct.forEach(t),QQo=r(_xe," \u2014 "),TV=n(_xe,"A",{href:!0});var hct=s(TV);WQo=r(hct,"SEWDForSequenceClassification"),hct.forEach(t),HQo=r(_xe," (SEW-D model)"),_xe.forEach(t),UQo=i(bo),Uv=n(bo,"LI",{});var bxe=s(Uv);Mhe=n(bxe,"STRONG",{});var pct=s(Mhe);JQo=r(pct,"unispeech"),pct.forEach(t),YQo=r(bxe," \u2014 "),MV=n(bxe,"A",{href:!0});var uct=s(MV);KQo=r(uct,"UniSpeechForSequenceClassification"),uct.forEach(t),ZQo=r(bxe," (UniSpeech model)"),bxe.forEach(t),eWo=i(bo),Jv=n(bo,"LI",{});var vxe=s(Jv);Ehe=n(vxe,"STRONG",{});var _ct=s(Ehe);oWo=r(_ct,"unispeech-sat"),_ct.forEach(t),rWo=r(vxe," \u2014 "),EV=n(vxe,"A",{href:!0});var bct=s(EV);tWo=r(bct,"UniSpeechSatForSequenceClassification"),bct.forEach(t),aWo=r(vxe," (UniSpeechSat model)"),vxe.forEach(t),nWo=i(bo),Yv=n(bo,"LI",{});var Fxe=s(Yv);Che=n(Fxe,"STRONG",{});var vct=s(Che);sWo=r(vct,"wav2vec2"),vct.forEach(t),lWo=r(Fxe," \u2014 "),CV=n(Fxe,"A",{href:!0});var Fct=s(CV);iWo=r(Fct,"Wav2Vec2ForSequenceClassification"),Fct.forEach(t),dWo=r(Fxe," (Wav2Vec2 model)"),Fxe.forEach(t),cWo=i(bo),Kv=n(bo,"LI",{});var Txe=s(Kv);whe=n(Txe,"STRONG",{});var Tct=s(whe);fWo=r(Tct,"wavlm"),Tct.forEach(t),mWo=r(Txe," \u2014 "),wV=n(Txe,"A",{href:!0});var Mct=s(wV);gWo=r(Mct,"WavLMForSequenceClassification"),Mct.forEach(t),hWo=r(Txe," (WavLM model)"),Txe.forEach(t),bo.forEach(t),pWo=i(da),Zv=n(da,"P",{});var Mxe=s(Zv);uWo=r(Mxe,"The model is set in evaluation mode by default using "),Ahe=n(Mxe,"CODE",{});var Ect=s(Ahe);_Wo=r(Ect,"model.eval()"),Ect.forEach(t),bWo=r(Mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(Mxe,"CODE",{});var Cct=s(yhe);vWo=r(Cct,"model.train()"),Cct.forEach(t),Mxe.forEach(t),FWo=i(da),T(eF.$$.fragment,da),da.forEach(t),Js.forEach(t),wPe=i(f),ad=n(f,"H2",{class:!0});var yqe=s(ad);oF=n(yqe,"A",{id:!0,class:!0,href:!0});var wct=s(oF);Lhe=n(wct,"SPAN",{});var Act=s(Lhe);T(_y.$$.fragment,Act),Act.forEach(t),wct.forEach(t),TWo=i(yqe),xhe=n(yqe,"SPAN",{});var yct=s(xhe);MWo=r(yct,"AutoModelForAudioFrameClassification"),yct.forEach(t),yqe.forEach(t),APe=i(f),Oo=n(f,"DIV",{class:!0});var Ys=s(Oo);T(by.$$.fragment,Ys),EWo=i(Ys),nd=n(Ys,"P",{});var tK=s(nd);CWo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AV=n(tK,"A",{href:!0});var Lct=s(AV);wWo=r(Lct,"from_pretrained()"),Lct.forEach(t),AWo=r(tK," class method or the "),yV=n(tK,"A",{href:!0});var xct=s(yV);yWo=r(xct,"from_config()"),xct.forEach(t),LWo=r(tK,` class
method.`),tK.forEach(t),xWo=i(Ys),vy=n(Ys,"P",{});var Lqe=s(vy);$Wo=r(Lqe,"This class cannot be instantiated directly using "),$he=n(Lqe,"CODE",{});var $ct=s($he);kWo=r($ct,"__init__()"),$ct.forEach(t),SWo=r(Lqe," (throws an error)."),Lqe.forEach(t),RWo=i(Ys),ht=n(Ys,"DIV",{class:!0});var i3=s(ht);T(Fy.$$.fragment,i3),BWo=i(i3),khe=n(i3,"P",{});var kct=s(khe);PWo=r(kct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),kct.forEach(t),IWo=i(i3),sd=n(i3,"P",{});var aK=s(sd);qWo=r(aK,`Note:
Loading a model from its configuration file does `),She=n(aK,"STRONG",{});var Sct=s(She);NWo=r(Sct,"not"),Sct.forEach(t),jWo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(aK,"A",{href:!0});var Rct=s(LV);DWo=r(Rct,"from_pretrained()"),Rct.forEach(t),GWo=r(aK," to load the model weights."),aK.forEach(t),OWo=i(i3),T(rF.$$.fragment,i3),i3.forEach(t),VWo=i(Ys),io=n(Ys,"DIV",{class:!0});var ca=s(io);T(Ty.$$.fragment,ca),XWo=i(ca),Rhe=n(ca,"P",{});var Bct=s(Rhe);zWo=r(Bct,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Bct.forEach(t),QWo=i(ca),qa=n(ca,"P",{});var d3=s(qa);WWo=r(d3,"The model class to instantiate is selected based on the "),Bhe=n(d3,"CODE",{});var Pct=s(Bhe);HWo=r(Pct,"model_type"),Pct.forEach(t),UWo=r(d3,` property of the config object (either
passed as an argument or loaded from `),Phe=n(d3,"CODE",{});var Ict=s(Phe);JWo=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),YWo=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(d3,"CODE",{});var qct=s(Ihe);KWo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),ZWo=r(d3,":"),d3.forEach(t),eHo=i(ca),Na=n(ca,"UL",{});var c3=s(Na);tF=n(c3,"LI",{});var Exe=s(tF);qhe=n(Exe,"STRONG",{});var Nct=s(qhe);oHo=r(Nct,"data2vec-audio"),Nct.forEach(t),rHo=r(Exe," \u2014 "),xV=n(Exe,"A",{href:!0});var jct=s(xV);tHo=r(jct,"Data2VecAudioForAudioFrameClassification"),jct.forEach(t),aHo=r(Exe," (Data2VecAudio model)"),Exe.forEach(t),nHo=i(c3),aF=n(c3,"LI",{});var Cxe=s(aF);Nhe=n(Cxe,"STRONG",{});var Dct=s(Nhe);sHo=r(Dct,"unispeech-sat"),Dct.forEach(t),lHo=r(Cxe," \u2014 "),$V=n(Cxe,"A",{href:!0});var Gct=s($V);iHo=r(Gct,"UniSpeechSatForAudioFrameClassification"),Gct.forEach(t),dHo=r(Cxe," (UniSpeechSat model)"),Cxe.forEach(t),cHo=i(c3),nF=n(c3,"LI",{});var wxe=s(nF);jhe=n(wxe,"STRONG",{});var Oct=s(jhe);fHo=r(Oct,"wav2vec2"),Oct.forEach(t),mHo=r(wxe," \u2014 "),kV=n(wxe,"A",{href:!0});var Vct=s(kV);gHo=r(Vct,"Wav2Vec2ForAudioFrameClassification"),Vct.forEach(t),hHo=r(wxe," (Wav2Vec2 model)"),wxe.forEach(t),pHo=i(c3),sF=n(c3,"LI",{});var Axe=s(sF);Dhe=n(Axe,"STRONG",{});var Xct=s(Dhe);uHo=r(Xct,"wavlm"),Xct.forEach(t),_Ho=r(Axe," \u2014 "),SV=n(Axe,"A",{href:!0});var zct=s(SV);bHo=r(zct,"WavLMForAudioFrameClassification"),zct.forEach(t),vHo=r(Axe," (WavLM model)"),Axe.forEach(t),c3.forEach(t),FHo=i(ca),lF=n(ca,"P",{});var yxe=s(lF);THo=r(yxe,"The model is set in evaluation mode by default using "),Ghe=n(yxe,"CODE",{});var Qct=s(Ghe);MHo=r(Qct,"model.eval()"),Qct.forEach(t),EHo=r(yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=n(yxe,"CODE",{});var Wct=s(Ohe);CHo=r(Wct,"model.train()"),Wct.forEach(t),yxe.forEach(t),wHo=i(ca),T(iF.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),yPe=i(f),ld=n(f,"H2",{class:!0});var xqe=s(ld);dF=n(xqe,"A",{id:!0,class:!0,href:!0});var Hct=s(dF);Vhe=n(Hct,"SPAN",{});var Uct=s(Vhe);T(My.$$.fragment,Uct),Uct.forEach(t),Hct.forEach(t),AHo=i(xqe),Xhe=n(xqe,"SPAN",{});var Jct=s(Xhe);yHo=r(Jct,"AutoModelForCTC"),Jct.forEach(t),xqe.forEach(t),LPe=i(f),Vo=n(f,"DIV",{class:!0});var Ks=s(Vo);T(Ey.$$.fragment,Ks),LHo=i(Ks),id=n(Ks,"P",{});var nK=s(id);xHo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),RV=n(nK,"A",{href:!0});var Yct=s(RV);$Ho=r(Yct,"from_pretrained()"),Yct.forEach(t),kHo=r(nK," class method or the "),BV=n(nK,"A",{href:!0});var Kct=s(BV);SHo=r(Kct,"from_config()"),Kct.forEach(t),RHo=r(nK,` class
method.`),nK.forEach(t),BHo=i(Ks),Cy=n(Ks,"P",{});var $qe=s(Cy);PHo=r($qe,"This class cannot be instantiated directly using "),zhe=n($qe,"CODE",{});var Zct=s(zhe);IHo=r(Zct,"__init__()"),Zct.forEach(t),qHo=r($qe," (throws an error)."),$qe.forEach(t),NHo=i(Ks),pt=n(Ks,"DIV",{class:!0});var f3=s(pt);T(wy.$$.fragment,f3),jHo=i(f3),Qhe=n(f3,"P",{});var eft=s(Qhe);DHo=r(eft,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),eft.forEach(t),GHo=i(f3),dd=n(f3,"P",{});var sK=s(dd);OHo=r(sK,`Note:
Loading a model from its configuration file does `),Whe=n(sK,"STRONG",{});var oft=s(Whe);VHo=r(oft,"not"),oft.forEach(t),XHo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(sK,"A",{href:!0});var rft=s(PV);zHo=r(rft,"from_pretrained()"),rft.forEach(t),QHo=r(sK," to load the model weights."),sK.forEach(t),WHo=i(f3),T(cF.$$.fragment,f3),f3.forEach(t),HHo=i(Ks),co=n(Ks,"DIV",{class:!0});var fa=s(co);T(Ay.$$.fragment,fa),UHo=i(fa),Hhe=n(fa,"P",{});var tft=s(Hhe);JHo=r(tft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tft.forEach(t),YHo=i(fa),ja=n(fa,"P",{});var m3=s(ja);KHo=r(m3,"The model class to instantiate is selected based on the "),Uhe=n(m3,"CODE",{});var aft=s(Uhe);ZHo=r(aft,"model_type"),aft.forEach(t),eUo=r(m3,` property of the config object (either
passed as an argument or loaded from `),Jhe=n(m3,"CODE",{});var nft=s(Jhe);oUo=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),rUo=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=n(m3,"CODE",{});var sft=s(Yhe);tUo=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),aUo=r(m3,":"),m3.forEach(t),nUo=i(fa),je=n(fa,"UL",{});var vo=s(je);fF=n(vo,"LI",{});var Lxe=s(fF);Khe=n(Lxe,"STRONG",{});var lft=s(Khe);sUo=r(lft,"data2vec-audio"),lft.forEach(t),lUo=r(Lxe," \u2014 "),IV=n(Lxe,"A",{href:!0});var ift=s(IV);iUo=r(ift,"Data2VecAudioForCTC"),ift.forEach(t),dUo=r(Lxe," (Data2VecAudio model)"),Lxe.forEach(t),cUo=i(vo),mF=n(vo,"LI",{});var xxe=s(mF);Zhe=n(xxe,"STRONG",{});var dft=s(Zhe);fUo=r(dft,"hubert"),dft.forEach(t),mUo=r(xxe," \u2014 "),qV=n(xxe,"A",{href:!0});var cft=s(qV);gUo=r(cft,"HubertForCTC"),cft.forEach(t),hUo=r(xxe," (Hubert model)"),xxe.forEach(t),pUo=i(vo),gF=n(vo,"LI",{});var $xe=s(gF);epe=n($xe,"STRONG",{});var fft=s(epe);uUo=r(fft,"sew"),fft.forEach(t),_Uo=r($xe," \u2014 "),NV=n($xe,"A",{href:!0});var mft=s(NV);bUo=r(mft,"SEWForCTC"),mft.forEach(t),vUo=r($xe," (SEW model)"),$xe.forEach(t),FUo=i(vo),hF=n(vo,"LI",{});var kxe=s(hF);ope=n(kxe,"STRONG",{});var gft=s(ope);TUo=r(gft,"sew-d"),gft.forEach(t),MUo=r(kxe," \u2014 "),jV=n(kxe,"A",{href:!0});var hft=s(jV);EUo=r(hft,"SEWDForCTC"),hft.forEach(t),CUo=r(kxe," (SEW-D model)"),kxe.forEach(t),wUo=i(vo),pF=n(vo,"LI",{});var Sxe=s(pF);rpe=n(Sxe,"STRONG",{});var pft=s(rpe);AUo=r(pft,"unispeech"),pft.forEach(t),yUo=r(Sxe," \u2014 "),DV=n(Sxe,"A",{href:!0});var uft=s(DV);LUo=r(uft,"UniSpeechForCTC"),uft.forEach(t),xUo=r(Sxe," (UniSpeech model)"),Sxe.forEach(t),$Uo=i(vo),uF=n(vo,"LI",{});var Rxe=s(uF);tpe=n(Rxe,"STRONG",{});var _ft=s(tpe);kUo=r(_ft,"unispeech-sat"),_ft.forEach(t),SUo=r(Rxe," \u2014 "),GV=n(Rxe,"A",{href:!0});var bft=s(GV);RUo=r(bft,"UniSpeechSatForCTC"),bft.forEach(t),BUo=r(Rxe," (UniSpeechSat model)"),Rxe.forEach(t),PUo=i(vo),_F=n(vo,"LI",{});var Bxe=s(_F);ape=n(Bxe,"STRONG",{});var vft=s(ape);IUo=r(vft,"wav2vec2"),vft.forEach(t),qUo=r(Bxe," \u2014 "),OV=n(Bxe,"A",{href:!0});var Fft=s(OV);NUo=r(Fft,"Wav2Vec2ForCTC"),Fft.forEach(t),jUo=r(Bxe," (Wav2Vec2 model)"),Bxe.forEach(t),DUo=i(vo),bF=n(vo,"LI",{});var Pxe=s(bF);npe=n(Pxe,"STRONG",{});var Tft=s(npe);GUo=r(Tft,"wavlm"),Tft.forEach(t),OUo=r(Pxe," \u2014 "),VV=n(Pxe,"A",{href:!0});var Mft=s(VV);VUo=r(Mft,"WavLMForCTC"),Mft.forEach(t),XUo=r(Pxe," (WavLM model)"),Pxe.forEach(t),vo.forEach(t),zUo=i(fa),vF=n(fa,"P",{});var Ixe=s(vF);QUo=r(Ixe,"The model is set in evaluation mode by default using "),spe=n(Ixe,"CODE",{});var Eft=s(spe);WUo=r(Eft,"model.eval()"),Eft.forEach(t),HUo=r(Ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=n(Ixe,"CODE",{});var Cft=s(lpe);UUo=r(Cft,"model.train()"),Cft.forEach(t),Ixe.forEach(t),JUo=i(fa),T(FF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),xPe=i(f),cd=n(f,"H2",{class:!0});var kqe=s(cd);TF=n(kqe,"A",{id:!0,class:!0,href:!0});var wft=s(TF);ipe=n(wft,"SPAN",{});var Aft=s(ipe);T(yy.$$.fragment,Aft),Aft.forEach(t),wft.forEach(t),YUo=i(kqe),dpe=n(kqe,"SPAN",{});var yft=s(dpe);KUo=r(yft,"AutoModelForSpeechSeq2Seq"),yft.forEach(t),kqe.forEach(t),$Pe=i(f),Xo=n(f,"DIV",{class:!0});var Zs=s(Xo);T(Ly.$$.fragment,Zs),ZUo=i(Zs),fd=n(Zs,"P",{});var lK=s(fd);eJo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XV=n(lK,"A",{href:!0});var Lft=s(XV);oJo=r(Lft,"from_pretrained()"),Lft.forEach(t),rJo=r(lK," class method or the "),zV=n(lK,"A",{href:!0});var xft=s(zV);tJo=r(xft,"from_config()"),xft.forEach(t),aJo=r(lK,` class
method.`),lK.forEach(t),nJo=i(Zs),xy=n(Zs,"P",{});var Sqe=s(xy);sJo=r(Sqe,"This class cannot be instantiated directly using "),cpe=n(Sqe,"CODE",{});var $ft=s(cpe);lJo=r($ft,"__init__()"),$ft.forEach(t),iJo=r(Sqe," (throws an error)."),Sqe.forEach(t),dJo=i(Zs),ut=n(Zs,"DIV",{class:!0});var g3=s(ut);T($y.$$.fragment,g3),cJo=i(g3),fpe=n(g3,"P",{});var kft=s(fpe);fJo=r(kft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kft.forEach(t),mJo=i(g3),md=n(g3,"P",{});var iK=s(md);gJo=r(iK,`Note:
Loading a model from its configuration file does `),mpe=n(iK,"STRONG",{});var Sft=s(mpe);hJo=r(Sft,"not"),Sft.forEach(t),pJo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=n(iK,"A",{href:!0});var Rft=s(QV);uJo=r(Rft,"from_pretrained()"),Rft.forEach(t),_Jo=r(iK," to load the model weights."),iK.forEach(t),bJo=i(g3),T(MF.$$.fragment,g3),g3.forEach(t),vJo=i(Zs),fo=n(Zs,"DIV",{class:!0});var ma=s(fo);T(ky.$$.fragment,ma),FJo=i(ma),gpe=n(ma,"P",{});var Bft=s(gpe);TJo=r(Bft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Bft.forEach(t),MJo=i(ma),Da=n(ma,"P",{});var h3=s(Da);EJo=r(h3,"The model class to instantiate is selected based on the "),hpe=n(h3,"CODE",{});var Pft=s(hpe);CJo=r(Pft,"model_type"),Pft.forEach(t),wJo=r(h3,` property of the config object (either
passed as an argument or loaded from `),ppe=n(h3,"CODE",{});var Ift=s(ppe);AJo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),yJo=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=n(h3,"CODE",{});var qft=s(upe);LJo=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),xJo=r(h3,":"),h3.forEach(t),$Jo=i(ma),Sy=n(ma,"UL",{});var Rqe=s(Sy);EF=n(Rqe,"LI",{});var qxe=s(EF);_pe=n(qxe,"STRONG",{});var Nft=s(_pe);kJo=r(Nft,"speech-encoder-decoder"),Nft.forEach(t),SJo=r(qxe," \u2014 "),WV=n(qxe,"A",{href:!0});var jft=s(WV);RJo=r(jft,"SpeechEncoderDecoderModel"),jft.forEach(t),BJo=r(qxe," (Speech Encoder decoder model)"),qxe.forEach(t),PJo=i(Rqe),CF=n(Rqe,"LI",{});var Nxe=s(CF);bpe=n(Nxe,"STRONG",{});var Dft=s(bpe);IJo=r(Dft,"speech_to_text"),Dft.forEach(t),qJo=r(Nxe," \u2014 "),HV=n(Nxe,"A",{href:!0});var Gft=s(HV);NJo=r(Gft,"Speech2TextForConditionalGeneration"),Gft.forEach(t),jJo=r(Nxe," (Speech2Text model)"),Nxe.forEach(t),Rqe.forEach(t),DJo=i(ma),wF=n(ma,"P",{});var jxe=s(wF);GJo=r(jxe,"The model is set in evaluation mode by default using "),vpe=n(jxe,"CODE",{});var Oft=s(vpe);OJo=r(Oft,"model.eval()"),Oft.forEach(t),VJo=r(jxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=n(jxe,"CODE",{});var Vft=s(Fpe);XJo=r(Vft,"model.train()"),Vft.forEach(t),jxe.forEach(t),zJo=i(ma),T(AF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),kPe=i(f),gd=n(f,"H2",{class:!0});var Bqe=s(gd);yF=n(Bqe,"A",{id:!0,class:!0,href:!0});var Xft=s(yF);Tpe=n(Xft,"SPAN",{});var zft=s(Tpe);T(Ry.$$.fragment,zft),zft.forEach(t),Xft.forEach(t),QJo=i(Bqe),Mpe=n(Bqe,"SPAN",{});var Qft=s(Mpe);WJo=r(Qft,"AutoModelForAudioXVector"),Qft.forEach(t),Bqe.forEach(t),SPe=i(f),zo=n(f,"DIV",{class:!0});var el=s(zo);T(By.$$.fragment,el),HJo=i(el),hd=n(el,"P",{});var dK=s(hd);UJo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),UV=n(dK,"A",{href:!0});var Wft=s(UV);JJo=r(Wft,"from_pretrained()"),Wft.forEach(t),YJo=r(dK," class method or the "),JV=n(dK,"A",{href:!0});var Hft=s(JV);KJo=r(Hft,"from_config()"),Hft.forEach(t),ZJo=r(dK,` class
method.`),dK.forEach(t),eYo=i(el),Py=n(el,"P",{});var Pqe=s(Py);oYo=r(Pqe,"This class cannot be instantiated directly using "),Epe=n(Pqe,"CODE",{});var Uft=s(Epe);rYo=r(Uft,"__init__()"),Uft.forEach(t),tYo=r(Pqe," (throws an error)."),Pqe.forEach(t),aYo=i(el),_t=n(el,"DIV",{class:!0});var p3=s(_t);T(Iy.$$.fragment,p3),nYo=i(p3),Cpe=n(p3,"P",{});var Jft=s(Cpe);sYo=r(Jft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Jft.forEach(t),lYo=i(p3),pd=n(p3,"P",{});var cK=s(pd);iYo=r(cK,`Note:
Loading a model from its configuration file does `),wpe=n(cK,"STRONG",{});var Yft=s(wpe);dYo=r(Yft,"not"),Yft.forEach(t),cYo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(cK,"A",{href:!0});var Kft=s(YV);fYo=r(Kft,"from_pretrained()"),Kft.forEach(t),mYo=r(cK," to load the model weights."),cK.forEach(t),gYo=i(p3),T(LF.$$.fragment,p3),p3.forEach(t),hYo=i(el),mo=n(el,"DIV",{class:!0});var ga=s(mo);T(qy.$$.fragment,ga),pYo=i(ga),Ape=n(ga,"P",{});var Zft=s(Ape);uYo=r(Zft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Zft.forEach(t),_Yo=i(ga),Ga=n(ga,"P",{});var u3=s(Ga);bYo=r(u3,"The model class to instantiate is selected based on the "),ype=n(u3,"CODE",{});var emt=s(ype);vYo=r(emt,"model_type"),emt.forEach(t),FYo=r(u3,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(u3,"CODE",{});var omt=s(Lpe);TYo=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),MYo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=n(u3,"CODE",{});var rmt=s(xpe);EYo=r(rmt,"pretrained_model_name_or_path"),rmt.forEach(t),CYo=r(u3,":"),u3.forEach(t),wYo=i(ga),Oa=n(ga,"UL",{});var _3=s(Oa);xF=n(_3,"LI",{});var Dxe=s(xF);$pe=n(Dxe,"STRONG",{});var tmt=s($pe);AYo=r(tmt,"data2vec-audio"),tmt.forEach(t),yYo=r(Dxe," \u2014 "),KV=n(Dxe,"A",{href:!0});var amt=s(KV);LYo=r(amt,"Data2VecAudioForXVector"),amt.forEach(t),xYo=r(Dxe," (Data2VecAudio model)"),Dxe.forEach(t),$Yo=i(_3),$F=n(_3,"LI",{});var Gxe=s($F);kpe=n(Gxe,"STRONG",{});var nmt=s(kpe);kYo=r(nmt,"unispeech-sat"),nmt.forEach(t),SYo=r(Gxe," \u2014 "),ZV=n(Gxe,"A",{href:!0});var smt=s(ZV);RYo=r(smt,"UniSpeechSatForXVector"),smt.forEach(t),BYo=r(Gxe," (UniSpeechSat model)"),Gxe.forEach(t),PYo=i(_3),kF=n(_3,"LI",{});var Oxe=s(kF);Spe=n(Oxe,"STRONG",{});var lmt=s(Spe);IYo=r(lmt,"wav2vec2"),lmt.forEach(t),qYo=r(Oxe," \u2014 "),eX=n(Oxe,"A",{href:!0});var imt=s(eX);NYo=r(imt,"Wav2Vec2ForXVector"),imt.forEach(t),jYo=r(Oxe," (Wav2Vec2 model)"),Oxe.forEach(t),DYo=i(_3),SF=n(_3,"LI",{});var Vxe=s(SF);Rpe=n(Vxe,"STRONG",{});var dmt=s(Rpe);GYo=r(dmt,"wavlm"),dmt.forEach(t),OYo=r(Vxe," \u2014 "),oX=n(Vxe,"A",{href:!0});var cmt=s(oX);VYo=r(cmt,"WavLMForXVector"),cmt.forEach(t),XYo=r(Vxe," (WavLM model)"),Vxe.forEach(t),_3.forEach(t),zYo=i(ga),RF=n(ga,"P",{});var Xxe=s(RF);QYo=r(Xxe,"The model is set in evaluation mode by default using "),Bpe=n(Xxe,"CODE",{});var fmt=s(Bpe);WYo=r(fmt,"model.eval()"),fmt.forEach(t),HYo=r(Xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ppe=n(Xxe,"CODE",{});var mmt=s(Ppe);UYo=r(mmt,"model.train()"),mmt.forEach(t),Xxe.forEach(t),JYo=i(ga),T(BF.$$.fragment,ga),ga.forEach(t),el.forEach(t),RPe=i(f),ud=n(f,"H2",{class:!0});var Iqe=s(ud);PF=n(Iqe,"A",{id:!0,class:!0,href:!0});var gmt=s(PF);Ipe=n(gmt,"SPAN",{});var hmt=s(Ipe);T(Ny.$$.fragment,hmt),hmt.forEach(t),gmt.forEach(t),YYo=i(Iqe),qpe=n(Iqe,"SPAN",{});var pmt=s(qpe);KYo=r(pmt,"AutoModelForMaskedImageModeling"),pmt.forEach(t),Iqe.forEach(t),BPe=i(f),Qo=n(f,"DIV",{class:!0});var ol=s(Qo);T(jy.$$.fragment,ol),ZYo=i(ol),_d=n(ol,"P",{});var fK=s(_d);eKo=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),rX=n(fK,"A",{href:!0});var umt=s(rX);oKo=r(umt,"from_pretrained()"),umt.forEach(t),rKo=r(fK," class method or the "),tX=n(fK,"A",{href:!0});var _mt=s(tX);tKo=r(_mt,"from_config()"),_mt.forEach(t),aKo=r(fK,` class
method.`),fK.forEach(t),nKo=i(ol),Dy=n(ol,"P",{});var qqe=s(Dy);sKo=r(qqe,"This class cannot be instantiated directly using "),Npe=n(qqe,"CODE",{});var bmt=s(Npe);lKo=r(bmt,"__init__()"),bmt.forEach(t),iKo=r(qqe," (throws an error)."),qqe.forEach(t),dKo=i(ol),bt=n(ol,"DIV",{class:!0});var b3=s(bt);T(Gy.$$.fragment,b3),cKo=i(b3),jpe=n(b3,"P",{});var vmt=s(jpe);fKo=r(vmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),vmt.forEach(t),mKo=i(b3),bd=n(b3,"P",{});var mK=s(bd);gKo=r(mK,`Note:
Loading a model from its configuration file does `),Dpe=n(mK,"STRONG",{});var Fmt=s(Dpe);hKo=r(Fmt,"not"),Fmt.forEach(t),pKo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(mK,"A",{href:!0});var Tmt=s(aX);uKo=r(Tmt,"from_pretrained()"),Tmt.forEach(t),_Ko=r(mK," to load the model weights."),mK.forEach(t),bKo=i(b3),T(IF.$$.fragment,b3),b3.forEach(t),vKo=i(ol),go=n(ol,"DIV",{class:!0});var ha=s(go);T(Oy.$$.fragment,ha),FKo=i(ha),Gpe=n(ha,"P",{});var Mmt=s(Gpe);TKo=r(Mmt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Mmt.forEach(t),MKo=i(ha),Va=n(ha,"P",{});var v3=s(Va);EKo=r(v3,"The model class to instantiate is selected based on the "),Ope=n(v3,"CODE",{});var Emt=s(Ope);CKo=r(Emt,"model_type"),Emt.forEach(t),wKo=r(v3,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(v3,"CODE",{});var Cmt=s(Vpe);AKo=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),yKo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=n(v3,"CODE",{});var wmt=s(Xpe);LKo=r(wmt,"pretrained_model_name_or_path"),wmt.forEach(t),xKo=r(v3,":"),v3.forEach(t),$Ko=i(ha),vd=n(ha,"UL",{});var gK=s(vd);qF=n(gK,"LI",{});var zxe=s(qF);zpe=n(zxe,"STRONG",{});var Amt=s(zpe);kKo=r(Amt,"deit"),Amt.forEach(t),SKo=r(zxe," \u2014 "),nX=n(zxe,"A",{href:!0});var ymt=s(nX);RKo=r(ymt,"DeiTForMaskedImageModeling"),ymt.forEach(t),BKo=r(zxe," (DeiT model)"),zxe.forEach(t),PKo=i(gK),NF=n(gK,"LI",{});var Qxe=s(NF);Qpe=n(Qxe,"STRONG",{});var Lmt=s(Qpe);IKo=r(Lmt,"swin"),Lmt.forEach(t),qKo=r(Qxe," \u2014 "),sX=n(Qxe,"A",{href:!0});var xmt=s(sX);NKo=r(xmt,"SwinForMaskedImageModeling"),xmt.forEach(t),jKo=r(Qxe," (Swin model)"),Qxe.forEach(t),DKo=i(gK),jF=n(gK,"LI",{});var Wxe=s(jF);Wpe=n(Wxe,"STRONG",{});var $mt=s(Wpe);GKo=r($mt,"vit"),$mt.forEach(t),OKo=r(Wxe," \u2014 "),lX=n(Wxe,"A",{href:!0});var kmt=s(lX);VKo=r(kmt,"ViTForMaskedImageModeling"),kmt.forEach(t),XKo=r(Wxe," (ViT model)"),Wxe.forEach(t),gK.forEach(t),zKo=i(ha),DF=n(ha,"P",{});var Hxe=s(DF);QKo=r(Hxe,"The model is set in evaluation mode by default using "),Hpe=n(Hxe,"CODE",{});var Smt=s(Hpe);WKo=r(Smt,"model.eval()"),Smt.forEach(t),HKo=r(Hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=n(Hxe,"CODE",{});var Rmt=s(Upe);UKo=r(Rmt,"model.train()"),Rmt.forEach(t),Hxe.forEach(t),JKo=i(ha),T(GF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),PPe=i(f),Fd=n(f,"H2",{class:!0});var Nqe=s(Fd);OF=n(Nqe,"A",{id:!0,class:!0,href:!0});var Bmt=s(OF);Jpe=n(Bmt,"SPAN",{});var Pmt=s(Jpe);T(Vy.$$.fragment,Pmt),Pmt.forEach(t),Bmt.forEach(t),YKo=i(Nqe),Ype=n(Nqe,"SPAN",{});var Imt=s(Ype);KKo=r(Imt,"AutoModelForObjectDetection"),Imt.forEach(t),Nqe.forEach(t),IPe=i(f),Wo=n(f,"DIV",{class:!0});var rl=s(Wo);T(Xy.$$.fragment,rl),ZKo=i(rl),Td=n(rl,"P",{});var hK=s(Td);eZo=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iX=n(hK,"A",{href:!0});var qmt=s(iX);oZo=r(qmt,"from_pretrained()"),qmt.forEach(t),rZo=r(hK," class method or the "),dX=n(hK,"A",{href:!0});var Nmt=s(dX);tZo=r(Nmt,"from_config()"),Nmt.forEach(t),aZo=r(hK,` class
method.`),hK.forEach(t),nZo=i(rl),zy=n(rl,"P",{});var jqe=s(zy);sZo=r(jqe,"This class cannot be instantiated directly using "),Kpe=n(jqe,"CODE",{});var jmt=s(Kpe);lZo=r(jmt,"__init__()"),jmt.forEach(t),iZo=r(jqe," (throws an error)."),jqe.forEach(t),dZo=i(rl),vt=n(rl,"DIV",{class:!0});var F3=s(vt);T(Qy.$$.fragment,F3),cZo=i(F3),Zpe=n(F3,"P",{});var Dmt=s(Zpe);fZo=r(Dmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Dmt.forEach(t),mZo=i(F3),Md=n(F3,"P",{});var pK=s(Md);gZo=r(pK,`Note:
Loading a model from its configuration file does `),eue=n(pK,"STRONG",{});var Gmt=s(eue);hZo=r(Gmt,"not"),Gmt.forEach(t),pZo=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(pK,"A",{href:!0});var Omt=s(cX);uZo=r(Omt,"from_pretrained()"),Omt.forEach(t),_Zo=r(pK," to load the model weights."),pK.forEach(t),bZo=i(F3),T(VF.$$.fragment,F3),F3.forEach(t),vZo=i(rl),ho=n(rl,"DIV",{class:!0});var pa=s(ho);T(Wy.$$.fragment,pa),FZo=i(pa),oue=n(pa,"P",{});var Vmt=s(oue);TZo=r(Vmt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Vmt.forEach(t),MZo=i(pa),Xa=n(pa,"P",{});var T3=s(Xa);EZo=r(T3,"The model class to instantiate is selected based on the "),rue=n(T3,"CODE",{});var Xmt=s(rue);CZo=r(Xmt,"model_type"),Xmt.forEach(t),wZo=r(T3,` property of the config object (either
passed as an argument or loaded from `),tue=n(T3,"CODE",{});var zmt=s(tue);AZo=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),yZo=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=n(T3,"CODE",{});var Qmt=s(aue);LZo=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),xZo=r(T3,":"),T3.forEach(t),$Zo=i(pa),Hy=n(pa,"UL",{});var Dqe=s(Hy);XF=n(Dqe,"LI",{});var Uxe=s(XF);nue=n(Uxe,"STRONG",{});var Wmt=s(nue);kZo=r(Wmt,"detr"),Wmt.forEach(t),SZo=r(Uxe," \u2014 "),fX=n(Uxe,"A",{href:!0});var Hmt=s(fX);RZo=r(Hmt,"DetrForObjectDetection"),Hmt.forEach(t),BZo=r(Uxe," (DETR model)"),Uxe.forEach(t),PZo=i(Dqe),zF=n(Dqe,"LI",{});var Jxe=s(zF);sue=n(Jxe,"STRONG",{});var Umt=s(sue);IZo=r(Umt,"yolos"),Umt.forEach(t),qZo=r(Jxe," \u2014 "),mX=n(Jxe,"A",{href:!0});var Jmt=s(mX);NZo=r(Jmt,"YolosForObjectDetection"),Jmt.forEach(t),jZo=r(Jxe," (YOLOS model)"),Jxe.forEach(t),Dqe.forEach(t),DZo=i(pa),QF=n(pa,"P",{});var Yxe=s(QF);GZo=r(Yxe,"The model is set in evaluation mode by default using "),lue=n(Yxe,"CODE",{});var Ymt=s(lue);OZo=r(Ymt,"model.eval()"),Ymt.forEach(t),VZo=r(Yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(Yxe,"CODE",{});var Kmt=s(iue);XZo=r(Kmt,"model.train()"),Kmt.forEach(t),Yxe.forEach(t),zZo=i(pa),T(WF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),qPe=i(f),Ed=n(f,"H2",{class:!0});var Gqe=s(Ed);HF=n(Gqe,"A",{id:!0,class:!0,href:!0});var Zmt=s(HF);due=n(Zmt,"SPAN",{});var egt=s(due);T(Uy.$$.fragment,egt),egt.forEach(t),Zmt.forEach(t),QZo=i(Gqe),cue=n(Gqe,"SPAN",{});var ogt=s(cue);WZo=r(ogt,"AutoModelForImageSegmentation"),ogt.forEach(t),Gqe.forEach(t),NPe=i(f),Ho=n(f,"DIV",{class:!0});var tl=s(Ho);T(Jy.$$.fragment,tl),HZo=i(tl),Cd=n(tl,"P",{});var uK=s(Cd);UZo=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),gX=n(uK,"A",{href:!0});var rgt=s(gX);JZo=r(rgt,"from_pretrained()"),rgt.forEach(t),YZo=r(uK," class method or the "),hX=n(uK,"A",{href:!0});var tgt=s(hX);KZo=r(tgt,"from_config()"),tgt.forEach(t),ZZo=r(uK,` class
method.`),uK.forEach(t),eer=i(tl),Yy=n(tl,"P",{});var Oqe=s(Yy);oer=r(Oqe,"This class cannot be instantiated directly using "),fue=n(Oqe,"CODE",{});var agt=s(fue);rer=r(agt,"__init__()"),agt.forEach(t),ter=r(Oqe," (throws an error)."),Oqe.forEach(t),aer=i(tl),Ft=n(tl,"DIV",{class:!0});var M3=s(Ft);T(Ky.$$.fragment,M3),ner=i(M3),mue=n(M3,"P",{});var ngt=s(mue);ser=r(ngt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ngt.forEach(t),ler=i(M3),wd=n(M3,"P",{});var _K=s(wd);ier=r(_K,`Note:
Loading a model from its configuration file does `),gue=n(_K,"STRONG",{});var sgt=s(gue);der=r(sgt,"not"),sgt.forEach(t),cer=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(_K,"A",{href:!0});var lgt=s(pX);fer=r(lgt,"from_pretrained()"),lgt.forEach(t),mer=r(_K," to load the model weights."),_K.forEach(t),ger=i(M3),T(UF.$$.fragment,M3),M3.forEach(t),her=i(tl),po=n(tl,"DIV",{class:!0});var ua=s(po);T(Zy.$$.fragment,ua),per=i(ua),hue=n(ua,"P",{});var igt=s(hue);uer=r(igt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),igt.forEach(t),_er=i(ua),za=n(ua,"P",{});var E3=s(za);ber=r(E3,"The model class to instantiate is selected based on the "),pue=n(E3,"CODE",{});var dgt=s(pue);ver=r(dgt,"model_type"),dgt.forEach(t),Fer=r(E3,` property of the config object (either
passed as an argument or loaded from `),uue=n(E3,"CODE",{});var cgt=s(uue);Ter=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),Mer=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=n(E3,"CODE",{});var fgt=s(_ue);Eer=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),Cer=r(E3,":"),E3.forEach(t),wer=i(ua),bue=n(ua,"UL",{});var mgt=s(bue);JF=n(mgt,"LI",{});var Kxe=s(JF);vue=n(Kxe,"STRONG",{});var ggt=s(vue);Aer=r(ggt,"detr"),ggt.forEach(t),yer=r(Kxe," \u2014 "),uX=n(Kxe,"A",{href:!0});var hgt=s(uX);Ler=r(hgt,"DetrForSegmentation"),hgt.forEach(t),xer=r(Kxe," (DETR model)"),Kxe.forEach(t),mgt.forEach(t),$er=i(ua),YF=n(ua,"P",{});var Zxe=s(YF);ker=r(Zxe,"The model is set in evaluation mode by default using "),Fue=n(Zxe,"CODE",{});var pgt=s(Fue);Ser=r(pgt,"model.eval()"),pgt.forEach(t),Rer=r(Zxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=n(Zxe,"CODE",{});var ugt=s(Tue);Ber=r(ugt,"model.train()"),ugt.forEach(t),Zxe.forEach(t),Per=i(ua),T(KF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),jPe=i(f),Ad=n(f,"H2",{class:!0});var Vqe=s(Ad);ZF=n(Vqe,"A",{id:!0,class:!0,href:!0});var _gt=s(ZF);Mue=n(_gt,"SPAN",{});var bgt=s(Mue);T(eL.$$.fragment,bgt),bgt.forEach(t),_gt.forEach(t),Ier=i(Vqe),Eue=n(Vqe,"SPAN",{});var vgt=s(Eue);qer=r(vgt,"AutoModelForSemanticSegmentation"),vgt.forEach(t),Vqe.forEach(t),DPe=i(f),Uo=n(f,"DIV",{class:!0});var al=s(Uo);T(oL.$$.fragment,al),Ner=i(al),yd=n(al,"P",{});var bK=s(yd);jer=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_X=n(bK,"A",{href:!0});var Fgt=s(_X);Der=r(Fgt,"from_pretrained()"),Fgt.forEach(t),Ger=r(bK," class method or the "),bX=n(bK,"A",{href:!0});var Tgt=s(bX);Oer=r(Tgt,"from_config()"),Tgt.forEach(t),Ver=r(bK,` class
method.`),bK.forEach(t),Xer=i(al),rL=n(al,"P",{});var Xqe=s(rL);zer=r(Xqe,"This class cannot be instantiated directly using "),Cue=n(Xqe,"CODE",{});var Mgt=s(Cue);Qer=r(Mgt,"__init__()"),Mgt.forEach(t),Wer=r(Xqe," (throws an error)."),Xqe.forEach(t),Her=i(al),Tt=n(al,"DIV",{class:!0});var C3=s(Tt);T(tL.$$.fragment,C3),Uer=i(C3),wue=n(C3,"P",{});var Egt=s(wue);Jer=r(Egt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Egt.forEach(t),Yer=i(C3),Ld=n(C3,"P",{});var vK=s(Ld);Ker=r(vK,`Note:
Loading a model from its configuration file does `),Aue=n(vK,"STRONG",{});var Cgt=s(Aue);Zer=r(Cgt,"not"),Cgt.forEach(t),eor=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(vK,"A",{href:!0});var wgt=s(vX);oor=r(wgt,"from_pretrained()"),wgt.forEach(t),ror=r(vK," to load the model weights."),vK.forEach(t),tor=i(C3),T(e6.$$.fragment,C3),C3.forEach(t),aor=i(al),uo=n(al,"DIV",{class:!0});var _a=s(uo);T(aL.$$.fragment,_a),nor=i(_a),yue=n(_a,"P",{});var Agt=s(yue);sor=r(Agt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Agt.forEach(t),lor=i(_a),Qa=n(_a,"P",{});var w3=s(Qa);ior=r(w3,"The model class to instantiate is selected based on the "),Lue=n(w3,"CODE",{});var ygt=s(Lue);dor=r(ygt,"model_type"),ygt.forEach(t),cor=r(w3,` property of the config object (either
passed as an argument or loaded from `),xue=n(w3,"CODE",{});var Lgt=s(xue);mor=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),gor=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=n(w3,"CODE",{});var xgt=s($ue);hor=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),por=r(w3,":"),w3.forEach(t),uor=i(_a),Wa=n(_a,"UL",{});var A3=s(Wa);o6=n(A3,"LI",{});var e9e=s(o6);kue=n(e9e,"STRONG",{});var $gt=s(kue);_or=r($gt,"beit"),$gt.forEach(t),bor=r(e9e," \u2014 "),FX=n(e9e,"A",{href:!0});var kgt=s(FX);vor=r(kgt,"BeitForSemanticSegmentation"),kgt.forEach(t),For=r(e9e," (BEiT model)"),e9e.forEach(t),Tor=i(A3),r6=n(A3,"LI",{});var o9e=s(r6);Sue=n(o9e,"STRONG",{});var Sgt=s(Sue);Mor=r(Sgt,"data2vec-vision"),Sgt.forEach(t),Eor=r(o9e," \u2014 "),TX=n(o9e,"A",{href:!0});var Rgt=s(TX);Cor=r(Rgt,"Data2VecVisionForSemanticSegmentation"),Rgt.forEach(t),wor=r(o9e," (Data2VecVision model)"),o9e.forEach(t),Aor=i(A3),t6=n(A3,"LI",{});var r9e=s(t6);Rue=n(r9e,"STRONG",{});var Bgt=s(Rue);yor=r(Bgt,"dpt"),Bgt.forEach(t),Lor=r(r9e," \u2014 "),MX=n(r9e,"A",{href:!0});var Pgt=s(MX);xor=r(Pgt,"DPTForSemanticSegmentation"),Pgt.forEach(t),$or=r(r9e," (DPT model)"),r9e.forEach(t),kor=i(A3),a6=n(A3,"LI",{});var t9e=s(a6);Bue=n(t9e,"STRONG",{});var Igt=s(Bue);Sor=r(Igt,"segformer"),Igt.forEach(t),Ror=r(t9e," \u2014 "),EX=n(t9e,"A",{href:!0});var qgt=s(EX);Bor=r(qgt,"SegformerForSemanticSegmentation"),qgt.forEach(t),Por=r(t9e," (SegFormer model)"),t9e.forEach(t),A3.forEach(t),Ior=i(_a),n6=n(_a,"P",{});var a9e=s(n6);qor=r(a9e,"The model is set in evaluation mode by default using "),Pue=n(a9e,"CODE",{});var Ngt=s(Pue);Nor=r(Ngt,"model.eval()"),Ngt.forEach(t),jor=r(a9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iue=n(a9e,"CODE",{});var jgt=s(Iue);Dor=r(jgt,"model.train()"),jgt.forEach(t),a9e.forEach(t),Gor=i(_a),T(s6.$$.fragment,_a),_a.forEach(t),al.forEach(t),GPe=i(f),xd=n(f,"H2",{class:!0});var zqe=s(xd);l6=n(zqe,"A",{id:!0,class:!0,href:!0});var Dgt=s(l6);que=n(Dgt,"SPAN",{});var Ggt=s(que);T(nL.$$.fragment,Ggt),Ggt.forEach(t),Dgt.forEach(t),Oor=i(zqe),Nue=n(zqe,"SPAN",{});var Ogt=s(Nue);Vor=r(Ogt,"AutoModelForInstanceSegmentation"),Ogt.forEach(t),zqe.forEach(t),OPe=i(f),Jo=n(f,"DIV",{class:!0});var nl=s(Jo);T(sL.$$.fragment,nl),Xor=i(nl),$d=n(nl,"P",{});var FK=s($d);zor=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),CX=n(FK,"A",{href:!0});var Vgt=s(CX);Qor=r(Vgt,"from_pretrained()"),Vgt.forEach(t),Wor=r(FK," class method or the "),wX=n(FK,"A",{href:!0});var Xgt=s(wX);Hor=r(Xgt,"from_config()"),Xgt.forEach(t),Uor=r(FK,` class
method.`),FK.forEach(t),Jor=i(nl),lL=n(nl,"P",{});var Qqe=s(lL);Yor=r(Qqe,"This class cannot be instantiated directly using "),jue=n(Qqe,"CODE",{});var zgt=s(jue);Kor=r(zgt,"__init__()"),zgt.forEach(t),Zor=r(Qqe," (throws an error)."),Qqe.forEach(t),err=i(nl),Mt=n(nl,"DIV",{class:!0});var y3=s(Mt);T(iL.$$.fragment,y3),orr=i(y3),Due=n(y3,"P",{});var Qgt=s(Due);rrr=r(Qgt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Qgt.forEach(t),trr=i(y3),kd=n(y3,"P",{});var TK=s(kd);arr=r(TK,`Note:
Loading a model from its configuration file does `),Gue=n(TK,"STRONG",{});var Wgt=s(Gue);nrr=r(Wgt,"not"),Wgt.forEach(t),srr=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(TK,"A",{href:!0});var Hgt=s(AX);lrr=r(Hgt,"from_pretrained()"),Hgt.forEach(t),irr=r(TK," to load the model weights."),TK.forEach(t),drr=i(y3),T(i6.$$.fragment,y3),y3.forEach(t),crr=i(nl),_o=n(nl,"DIV",{class:!0});var ba=s(_o);T(dL.$$.fragment,ba),frr=i(ba),Oue=n(ba,"P",{});var Ugt=s(Oue);mrr=r(Ugt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ugt.forEach(t),grr=i(ba),Ha=n(ba,"P",{});var L3=s(Ha);hrr=r(L3,"The model class to instantiate is selected based on the "),Vue=n(L3,"CODE",{});var Jgt=s(Vue);prr=r(Jgt,"model_type"),Jgt.forEach(t),urr=r(L3,` property of the config object (either
passed as an argument or loaded from `),Xue=n(L3,"CODE",{});var Ygt=s(Xue);_rr=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),brr=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=n(L3,"CODE",{});var Kgt=s(zue);vrr=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),Frr=r(L3,":"),L3.forEach(t),Trr=i(ba),Que=n(ba,"UL",{});var Zgt=s(Que);d6=n(Zgt,"LI",{});var n9e=s(d6);Wue=n(n9e,"STRONG",{});var eht=s(Wue);Mrr=r(eht,"maskformer"),eht.forEach(t),Err=r(n9e," \u2014 "),yX=n(n9e,"A",{href:!0});var oht=s(yX);Crr=r(oht,"MaskFormerForInstanceSegmentation"),oht.forEach(t),wrr=r(n9e," (MaskFormer model)"),n9e.forEach(t),Zgt.forEach(t),Arr=i(ba),c6=n(ba,"P",{});var s9e=s(c6);yrr=r(s9e,"The model is set in evaluation mode by default using "),Hue=n(s9e,"CODE",{});var rht=s(Hue);Lrr=r(rht,"model.eval()"),rht.forEach(t),xrr=r(s9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(s9e,"CODE",{});var tht=s(Uue);$rr=r(tht,"model.train()"),tht.forEach(t),s9e.forEach(t),krr=i(ba),T(f6.$$.fragment,ba),ba.forEach(t),nl.forEach(t),VPe=i(f),Sd=n(f,"H2",{class:!0});var Wqe=s(Sd);m6=n(Wqe,"A",{id:!0,class:!0,href:!0});var aht=s(m6);Jue=n(aht,"SPAN",{});var nht=s(Jue);T(cL.$$.fragment,nht),nht.forEach(t),aht.forEach(t),Srr=i(Wqe),Yue=n(Wqe,"SPAN",{});var sht=s(Yue);Rrr=r(sht,"TFAutoModel"),sht.forEach(t),Wqe.forEach(t),XPe=i(f),Yo=n(f,"DIV",{class:!0});var sl=s(Yo);T(fL.$$.fragment,sl),Brr=i(sl),Rd=n(sl,"P",{});var MK=s(Rd);Prr=r(MK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LX=n(MK,"A",{href:!0});var lht=s(LX);Irr=r(lht,"from_pretrained()"),lht.forEach(t),qrr=r(MK," class method or the "),xX=n(MK,"A",{href:!0});var iht=s(xX);Nrr=r(iht,"from_config()"),iht.forEach(t),jrr=r(MK,` class
method.`),MK.forEach(t),Drr=i(sl),mL=n(sl,"P",{});var Hqe=s(mL);Grr=r(Hqe,"This class cannot be instantiated directly using "),Kue=n(Hqe,"CODE",{});var dht=s(Kue);Orr=r(dht,"__init__()"),dht.forEach(t),Vrr=r(Hqe," (throws an error)."),Hqe.forEach(t),Xrr=i(sl),Et=n(sl,"DIV",{class:!0});var x3=s(Et);T(gL.$$.fragment,x3),zrr=i(x3),Zue=n(x3,"P",{});var cht=s(Zue);Qrr=r(cht,"Instantiates one of the base model classes of the library from a configuration."),cht.forEach(t),Wrr=i(x3),Bd=n(x3,"P",{});var EK=s(Bd);Hrr=r(EK,`Note:
Loading a model from its configuration file does `),e_e=n(EK,"STRONG",{});var fht=s(e_e);Urr=r(fht,"not"),fht.forEach(t),Jrr=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(EK,"A",{href:!0});var mht=s($X);Yrr=r(mht,"from_pretrained()"),mht.forEach(t),Krr=r(EK," to load the model weights."),EK.forEach(t),Zrr=i(x3),T(g6.$$.fragment,x3),x3.forEach(t),etr=i(sl),Cr=n(sl,"DIV",{class:!0});var ll=s(Cr);T(hL.$$.fragment,ll),otr=i(ll),o_e=n(ll,"P",{});var ght=s(o_e);rtr=r(ght,"Instantiate one of the base model classes of the library from a pretrained model."),ght.forEach(t),ttr=i(ll),Ua=n(ll,"P",{});var $3=s(Ua);atr=r($3,"The model class to instantiate is selected based on the "),r_e=n($3,"CODE",{});var hht=s(r_e);ntr=r(hht,"model_type"),hht.forEach(t),str=r($3,` property of the config object (either
passed as an argument or loaded from `),t_e=n($3,"CODE",{});var pht=s(t_e);ltr=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),itr=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n($3,"CODE",{});var uht=s(a_e);dtr=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),ctr=r($3,":"),$3.forEach(t),ftr=i(ll),j=n(ll,"UL",{});var D=s(j);h6=n(D,"LI",{});var l9e=s(h6);n_e=n(l9e,"STRONG",{});var _ht=s(n_e);mtr=r(_ht,"albert"),_ht.forEach(t),gtr=r(l9e," \u2014 "),kX=n(l9e,"A",{href:!0});var bht=s(kX);htr=r(bht,"TFAlbertModel"),bht.forEach(t),ptr=r(l9e," (ALBERT model)"),l9e.forEach(t),utr=i(D),p6=n(D,"LI",{});var i9e=s(p6);s_e=n(i9e,"STRONG",{});var vht=s(s_e);_tr=r(vht,"bart"),vht.forEach(t),btr=r(i9e," \u2014 "),SX=n(i9e,"A",{href:!0});var Fht=s(SX);vtr=r(Fht,"TFBartModel"),Fht.forEach(t),Ftr=r(i9e," (BART model)"),i9e.forEach(t),Ttr=i(D),u6=n(D,"LI",{});var d9e=s(u6);l_e=n(d9e,"STRONG",{});var Tht=s(l_e);Mtr=r(Tht,"bert"),Tht.forEach(t),Etr=r(d9e," \u2014 "),RX=n(d9e,"A",{href:!0});var Mht=s(RX);Ctr=r(Mht,"TFBertModel"),Mht.forEach(t),wtr=r(d9e," (BERT model)"),d9e.forEach(t),Atr=i(D),_6=n(D,"LI",{});var c9e=s(_6);i_e=n(c9e,"STRONG",{});var Eht=s(i_e);ytr=r(Eht,"blenderbot"),Eht.forEach(t),Ltr=r(c9e," \u2014 "),BX=n(c9e,"A",{href:!0});var Cht=s(BX);xtr=r(Cht,"TFBlenderbotModel"),Cht.forEach(t),$tr=r(c9e," (Blenderbot model)"),c9e.forEach(t),ktr=i(D),b6=n(D,"LI",{});var f9e=s(b6);d_e=n(f9e,"STRONG",{});var wht=s(d_e);Str=r(wht,"blenderbot-small"),wht.forEach(t),Rtr=r(f9e," \u2014 "),PX=n(f9e,"A",{href:!0});var Aht=s(PX);Btr=r(Aht,"TFBlenderbotSmallModel"),Aht.forEach(t),Ptr=r(f9e," (BlenderbotSmall model)"),f9e.forEach(t),Itr=i(D),v6=n(D,"LI",{});var m9e=s(v6);c_e=n(m9e,"STRONG",{});var yht=s(c_e);qtr=r(yht,"camembert"),yht.forEach(t),Ntr=r(m9e," \u2014 "),IX=n(m9e,"A",{href:!0});var Lht=s(IX);jtr=r(Lht,"TFCamembertModel"),Lht.forEach(t),Dtr=r(m9e," (CamemBERT model)"),m9e.forEach(t),Gtr=i(D),F6=n(D,"LI",{});var g9e=s(F6);f_e=n(g9e,"STRONG",{});var xht=s(f_e);Otr=r(xht,"clip"),xht.forEach(t),Vtr=r(g9e," \u2014 "),qX=n(g9e,"A",{href:!0});var $ht=s(qX);Xtr=r($ht,"TFCLIPModel"),$ht.forEach(t),ztr=r(g9e," (CLIP model)"),g9e.forEach(t),Qtr=i(D),T6=n(D,"LI",{});var h9e=s(T6);m_e=n(h9e,"STRONG",{});var kht=s(m_e);Wtr=r(kht,"convbert"),kht.forEach(t),Htr=r(h9e," \u2014 "),NX=n(h9e,"A",{href:!0});var Sht=s(NX);Utr=r(Sht,"TFConvBertModel"),Sht.forEach(t),Jtr=r(h9e," (ConvBERT model)"),h9e.forEach(t),Ytr=i(D),M6=n(D,"LI",{});var p9e=s(M6);g_e=n(p9e,"STRONG",{});var Rht=s(g_e);Ktr=r(Rht,"convnext"),Rht.forEach(t),Ztr=r(p9e," \u2014 "),jX=n(p9e,"A",{href:!0});var Bht=s(jX);ear=r(Bht,"TFConvNextModel"),Bht.forEach(t),oar=r(p9e," (ConvNext model)"),p9e.forEach(t),rar=i(D),E6=n(D,"LI",{});var u9e=s(E6);h_e=n(u9e,"STRONG",{});var Pht=s(h_e);tar=r(Pht,"ctrl"),Pht.forEach(t),aar=r(u9e," \u2014 "),DX=n(u9e,"A",{href:!0});var Iht=s(DX);nar=r(Iht,"TFCTRLModel"),Iht.forEach(t),sar=r(u9e," (CTRL model)"),u9e.forEach(t),lar=i(D),C6=n(D,"LI",{});var _9e=s(C6);p_e=n(_9e,"STRONG",{});var qht=s(p_e);iar=r(qht,"deberta"),qht.forEach(t),dar=r(_9e," \u2014 "),GX=n(_9e,"A",{href:!0});var Nht=s(GX);car=r(Nht,"TFDebertaModel"),Nht.forEach(t),far=r(_9e," (DeBERTa model)"),_9e.forEach(t),mar=i(D),w6=n(D,"LI",{});var b9e=s(w6);u_e=n(b9e,"STRONG",{});var jht=s(u_e);gar=r(jht,"deberta-v2"),jht.forEach(t),har=r(b9e," \u2014 "),OX=n(b9e,"A",{href:!0});var Dht=s(OX);par=r(Dht,"TFDebertaV2Model"),Dht.forEach(t),uar=r(b9e," (DeBERTa-v2 model)"),b9e.forEach(t),_ar=i(D),A6=n(D,"LI",{});var v9e=s(A6);__e=n(v9e,"STRONG",{});var Ght=s(__e);bar=r(Ght,"distilbert"),Ght.forEach(t),Far=r(v9e," \u2014 "),VX=n(v9e,"A",{href:!0});var Oht=s(VX);Tar=r(Oht,"TFDistilBertModel"),Oht.forEach(t),Mar=r(v9e," (DistilBERT model)"),v9e.forEach(t),Ear=i(D),y6=n(D,"LI",{});var F9e=s(y6);b_e=n(F9e,"STRONG",{});var Vht=s(b_e);Car=r(Vht,"dpr"),Vht.forEach(t),war=r(F9e," \u2014 "),XX=n(F9e,"A",{href:!0});var Xht=s(XX);Aar=r(Xht,"TFDPRQuestionEncoder"),Xht.forEach(t),yar=r(F9e," (DPR model)"),F9e.forEach(t),Lar=i(D),L6=n(D,"LI",{});var T9e=s(L6);v_e=n(T9e,"STRONG",{});var zht=s(v_e);xar=r(zht,"electra"),zht.forEach(t),$ar=r(T9e," \u2014 "),zX=n(T9e,"A",{href:!0});var Qht=s(zX);kar=r(Qht,"TFElectraModel"),Qht.forEach(t),Sar=r(T9e," (ELECTRA model)"),T9e.forEach(t),Rar=i(D),x6=n(D,"LI",{});var M9e=s(x6);F_e=n(M9e,"STRONG",{});var Wht=s(F_e);Bar=r(Wht,"flaubert"),Wht.forEach(t),Par=r(M9e," \u2014 "),QX=n(M9e,"A",{href:!0});var Hht=s(QX);Iar=r(Hht,"TFFlaubertModel"),Hht.forEach(t),qar=r(M9e," (FlauBERT model)"),M9e.forEach(t),Nar=i(D),ks=n(D,"LI",{});var G9=s(ks);T_e=n(G9,"STRONG",{});var Uht=s(T_e);jar=r(Uht,"funnel"),Uht.forEach(t),Dar=r(G9," \u2014 "),WX=n(G9,"A",{href:!0});var Jht=s(WX);Gar=r(Jht,"TFFunnelModel"),Jht.forEach(t),Oar=r(G9," or "),HX=n(G9,"A",{href:!0});var Yht=s(HX);Var=r(Yht,"TFFunnelBaseModel"),Yht.forEach(t),Xar=r(G9," (Funnel Transformer model)"),G9.forEach(t),zar=i(D),$6=n(D,"LI",{});var E9e=s($6);M_e=n(E9e,"STRONG",{});var Kht=s(M_e);Qar=r(Kht,"gpt2"),Kht.forEach(t),War=r(E9e," \u2014 "),UX=n(E9e,"A",{href:!0});var Zht=s(UX);Har=r(Zht,"TFGPT2Model"),Zht.forEach(t),Uar=r(E9e," (OpenAI GPT-2 model)"),E9e.forEach(t),Jar=i(D),k6=n(D,"LI",{});var C9e=s(k6);E_e=n(C9e,"STRONG",{});var ept=s(E_e);Yar=r(ept,"gptj"),ept.forEach(t),Kar=r(C9e," \u2014 "),JX=n(C9e,"A",{href:!0});var opt=s(JX);Zar=r(opt,"TFGPTJModel"),opt.forEach(t),enr=r(C9e," (GPT-J model)"),C9e.forEach(t),onr=i(D),S6=n(D,"LI",{});var w9e=s(S6);C_e=n(w9e,"STRONG",{});var rpt=s(C_e);rnr=r(rpt,"hubert"),rpt.forEach(t),tnr=r(w9e," \u2014 "),YX=n(w9e,"A",{href:!0});var tpt=s(YX);anr=r(tpt,"TFHubertModel"),tpt.forEach(t),nnr=r(w9e," (Hubert model)"),w9e.forEach(t),snr=i(D),R6=n(D,"LI",{});var A9e=s(R6);w_e=n(A9e,"STRONG",{});var apt=s(w_e);lnr=r(apt,"layoutlm"),apt.forEach(t),inr=r(A9e," \u2014 "),KX=n(A9e,"A",{href:!0});var npt=s(KX);dnr=r(npt,"TFLayoutLMModel"),npt.forEach(t),cnr=r(A9e," (LayoutLM model)"),A9e.forEach(t),fnr=i(D),B6=n(D,"LI",{});var y9e=s(B6);A_e=n(y9e,"STRONG",{});var spt=s(A_e);mnr=r(spt,"led"),spt.forEach(t),gnr=r(y9e," \u2014 "),ZX=n(y9e,"A",{href:!0});var lpt=s(ZX);hnr=r(lpt,"TFLEDModel"),lpt.forEach(t),pnr=r(y9e," (LED model)"),y9e.forEach(t),unr=i(D),P6=n(D,"LI",{});var L9e=s(P6);y_e=n(L9e,"STRONG",{});var ipt=s(y_e);_nr=r(ipt,"longformer"),ipt.forEach(t),bnr=r(L9e," \u2014 "),ez=n(L9e,"A",{href:!0});var dpt=s(ez);vnr=r(dpt,"TFLongformerModel"),dpt.forEach(t),Fnr=r(L9e," (Longformer model)"),L9e.forEach(t),Tnr=i(D),I6=n(D,"LI",{});var x9e=s(I6);L_e=n(x9e,"STRONG",{});var cpt=s(L_e);Mnr=r(cpt,"lxmert"),cpt.forEach(t),Enr=r(x9e," \u2014 "),oz=n(x9e,"A",{href:!0});var fpt=s(oz);Cnr=r(fpt,"TFLxmertModel"),fpt.forEach(t),wnr=r(x9e," (LXMERT model)"),x9e.forEach(t),Anr=i(D),q6=n(D,"LI",{});var $9e=s(q6);x_e=n($9e,"STRONG",{});var mpt=s(x_e);ynr=r(mpt,"marian"),mpt.forEach(t),Lnr=r($9e," \u2014 "),rz=n($9e,"A",{href:!0});var gpt=s(rz);xnr=r(gpt,"TFMarianModel"),gpt.forEach(t),$nr=r($9e," (Marian model)"),$9e.forEach(t),knr=i(D),N6=n(D,"LI",{});var k9e=s(N6);$_e=n(k9e,"STRONG",{});var hpt=s($_e);Snr=r(hpt,"mbart"),hpt.forEach(t),Rnr=r(k9e," \u2014 "),tz=n(k9e,"A",{href:!0});var ppt=s(tz);Bnr=r(ppt,"TFMBartModel"),ppt.forEach(t),Pnr=r(k9e," (mBART model)"),k9e.forEach(t),Inr=i(D),j6=n(D,"LI",{});var S9e=s(j6);k_e=n(S9e,"STRONG",{});var upt=s(k_e);qnr=r(upt,"mobilebert"),upt.forEach(t),Nnr=r(S9e," \u2014 "),az=n(S9e,"A",{href:!0});var _pt=s(az);jnr=r(_pt,"TFMobileBertModel"),_pt.forEach(t),Dnr=r(S9e," (MobileBERT model)"),S9e.forEach(t),Gnr=i(D),D6=n(D,"LI",{});var R9e=s(D6);S_e=n(R9e,"STRONG",{});var bpt=s(S_e);Onr=r(bpt,"mpnet"),bpt.forEach(t),Vnr=r(R9e," \u2014 "),nz=n(R9e,"A",{href:!0});var vpt=s(nz);Xnr=r(vpt,"TFMPNetModel"),vpt.forEach(t),znr=r(R9e," (MPNet model)"),R9e.forEach(t),Qnr=i(D),G6=n(D,"LI",{});var B9e=s(G6);R_e=n(B9e,"STRONG",{});var Fpt=s(R_e);Wnr=r(Fpt,"mt5"),Fpt.forEach(t),Hnr=r(B9e," \u2014 "),sz=n(B9e,"A",{href:!0});var Tpt=s(sz);Unr=r(Tpt,"TFMT5Model"),Tpt.forEach(t),Jnr=r(B9e," (mT5 model)"),B9e.forEach(t),Ynr=i(D),O6=n(D,"LI",{});var P9e=s(O6);B_e=n(P9e,"STRONG",{});var Mpt=s(B_e);Knr=r(Mpt,"openai-gpt"),Mpt.forEach(t),Znr=r(P9e," \u2014 "),lz=n(P9e,"A",{href:!0});var Ept=s(lz);esr=r(Ept,"TFOpenAIGPTModel"),Ept.forEach(t),osr=r(P9e," (OpenAI GPT model)"),P9e.forEach(t),rsr=i(D),V6=n(D,"LI",{});var I9e=s(V6);P_e=n(I9e,"STRONG",{});var Cpt=s(P_e);tsr=r(Cpt,"pegasus"),Cpt.forEach(t),asr=r(I9e," \u2014 "),iz=n(I9e,"A",{href:!0});var wpt=s(iz);nsr=r(wpt,"TFPegasusModel"),wpt.forEach(t),ssr=r(I9e," (Pegasus model)"),I9e.forEach(t),lsr=i(D),X6=n(D,"LI",{});var q9e=s(X6);I_e=n(q9e,"STRONG",{});var Apt=s(I_e);isr=r(Apt,"rembert"),Apt.forEach(t),dsr=r(q9e," \u2014 "),dz=n(q9e,"A",{href:!0});var ypt=s(dz);csr=r(ypt,"TFRemBertModel"),ypt.forEach(t),fsr=r(q9e," (RemBERT model)"),q9e.forEach(t),msr=i(D),z6=n(D,"LI",{});var N9e=s(z6);q_e=n(N9e,"STRONG",{});var Lpt=s(q_e);gsr=r(Lpt,"roberta"),Lpt.forEach(t),hsr=r(N9e," \u2014 "),cz=n(N9e,"A",{href:!0});var xpt=s(cz);psr=r(xpt,"TFRobertaModel"),xpt.forEach(t),usr=r(N9e," (RoBERTa model)"),N9e.forEach(t),_sr=i(D),Q6=n(D,"LI",{});var j9e=s(Q6);N_e=n(j9e,"STRONG",{});var $pt=s(N_e);bsr=r($pt,"roformer"),$pt.forEach(t),vsr=r(j9e," \u2014 "),fz=n(j9e,"A",{href:!0});var kpt=s(fz);Fsr=r(kpt,"TFRoFormerModel"),kpt.forEach(t),Tsr=r(j9e," (RoFormer model)"),j9e.forEach(t),Msr=i(D),W6=n(D,"LI",{});var D9e=s(W6);j_e=n(D9e,"STRONG",{});var Spt=s(j_e);Esr=r(Spt,"speech_to_text"),Spt.forEach(t),Csr=r(D9e," \u2014 "),mz=n(D9e,"A",{href:!0});var Rpt=s(mz);wsr=r(Rpt,"TFSpeech2TextModel"),Rpt.forEach(t),Asr=r(D9e," (Speech2Text model)"),D9e.forEach(t),ysr=i(D),H6=n(D,"LI",{});var G9e=s(H6);D_e=n(G9e,"STRONG",{});var Bpt=s(D_e);Lsr=r(Bpt,"t5"),Bpt.forEach(t),xsr=r(G9e," \u2014 "),gz=n(G9e,"A",{href:!0});var Ppt=s(gz);$sr=r(Ppt,"TFT5Model"),Ppt.forEach(t),ksr=r(G9e," (T5 model)"),G9e.forEach(t),Ssr=i(D),U6=n(D,"LI",{});var O9e=s(U6);G_e=n(O9e,"STRONG",{});var Ipt=s(G_e);Rsr=r(Ipt,"tapas"),Ipt.forEach(t),Bsr=r(O9e," \u2014 "),hz=n(O9e,"A",{href:!0});var qpt=s(hz);Psr=r(qpt,"TFTapasModel"),qpt.forEach(t),Isr=r(O9e," (TAPAS model)"),O9e.forEach(t),qsr=i(D),J6=n(D,"LI",{});var V9e=s(J6);O_e=n(V9e,"STRONG",{});var Npt=s(O_e);Nsr=r(Npt,"transfo-xl"),Npt.forEach(t),jsr=r(V9e," \u2014 "),pz=n(V9e,"A",{href:!0});var jpt=s(pz);Dsr=r(jpt,"TFTransfoXLModel"),jpt.forEach(t),Gsr=r(V9e," (Transformer-XL model)"),V9e.forEach(t),Osr=i(D),Y6=n(D,"LI",{});var X9e=s(Y6);V_e=n(X9e,"STRONG",{});var Dpt=s(V_e);Vsr=r(Dpt,"vit"),Dpt.forEach(t),Xsr=r(X9e," \u2014 "),uz=n(X9e,"A",{href:!0});var Gpt=s(uz);zsr=r(Gpt,"TFViTModel"),Gpt.forEach(t),Qsr=r(X9e," (ViT model)"),X9e.forEach(t),Wsr=i(D),K6=n(D,"LI",{});var z9e=s(K6);X_e=n(z9e,"STRONG",{});var Opt=s(X_e);Hsr=r(Opt,"vit_mae"),Opt.forEach(t),Usr=r(z9e," \u2014 "),_z=n(z9e,"A",{href:!0});var Vpt=s(_z);Jsr=r(Vpt,"TFViTMAEModel"),Vpt.forEach(t),Ysr=r(z9e," (ViTMAE model)"),z9e.forEach(t),Ksr=i(D),Z6=n(D,"LI",{});var Q9e=s(Z6);z_e=n(Q9e,"STRONG",{});var Xpt=s(z_e);Zsr=r(Xpt,"wav2vec2"),Xpt.forEach(t),elr=r(Q9e," \u2014 "),bz=n(Q9e,"A",{href:!0});var zpt=s(bz);olr=r(zpt,"TFWav2Vec2Model"),zpt.forEach(t),rlr=r(Q9e," (Wav2Vec2 model)"),Q9e.forEach(t),tlr=i(D),eT=n(D,"LI",{});var W9e=s(eT);Q_e=n(W9e,"STRONG",{});var Qpt=s(Q_e);alr=r(Qpt,"xlm"),Qpt.forEach(t),nlr=r(W9e," \u2014 "),vz=n(W9e,"A",{href:!0});var Wpt=s(vz);slr=r(Wpt,"TFXLMModel"),Wpt.forEach(t),llr=r(W9e," (XLM model)"),W9e.forEach(t),ilr=i(D),oT=n(D,"LI",{});var H9e=s(oT);W_e=n(H9e,"STRONG",{});var Hpt=s(W_e);dlr=r(Hpt,"xlm-roberta"),Hpt.forEach(t),clr=r(H9e," \u2014 "),Fz=n(H9e,"A",{href:!0});var Upt=s(Fz);flr=r(Upt,"TFXLMRobertaModel"),Upt.forEach(t),mlr=r(H9e," (XLM-RoBERTa model)"),H9e.forEach(t),glr=i(D),rT=n(D,"LI",{});var U9e=s(rT);H_e=n(U9e,"STRONG",{});var Jpt=s(H_e);hlr=r(Jpt,"xlnet"),Jpt.forEach(t),plr=r(U9e," \u2014 "),Tz=n(U9e,"A",{href:!0});var Ypt=s(Tz);ulr=r(Ypt,"TFXLNetModel"),Ypt.forEach(t),_lr=r(U9e," (XLNet model)"),U9e.forEach(t),D.forEach(t),blr=i(ll),T(tT.$$.fragment,ll),ll.forEach(t),sl.forEach(t),zPe=i(f),Pd=n(f,"H2",{class:!0});var Uqe=s(Pd);aT=n(Uqe,"A",{id:!0,class:!0,href:!0});var Kpt=s(aT);U_e=n(Kpt,"SPAN",{});var Zpt=s(U_e);T(pL.$$.fragment,Zpt),Zpt.forEach(t),Kpt.forEach(t),vlr=i(Uqe),J_e=n(Uqe,"SPAN",{});var eut=s(J_e);Flr=r(eut,"TFAutoModelForPreTraining"),eut.forEach(t),Uqe.forEach(t),QPe=i(f),Ko=n(f,"DIV",{class:!0});var il=s(Ko);T(uL.$$.fragment,il),Tlr=i(il),Id=n(il,"P",{});var CK=s(Id);Mlr=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Mz=n(CK,"A",{href:!0});var out=s(Mz);Elr=r(out,"from_pretrained()"),out.forEach(t),Clr=r(CK," class method or the "),Ez=n(CK,"A",{href:!0});var rut=s(Ez);wlr=r(rut,"from_config()"),rut.forEach(t),Alr=r(CK,` class
method.`),CK.forEach(t),ylr=i(il),_L=n(il,"P",{});var Jqe=s(_L);Llr=r(Jqe,"This class cannot be instantiated directly using "),Y_e=n(Jqe,"CODE",{});var tut=s(Y_e);xlr=r(tut,"__init__()"),tut.forEach(t),$lr=r(Jqe," (throws an error)."),Jqe.forEach(t),klr=i(il),Ct=n(il,"DIV",{class:!0});var k3=s(Ct);T(bL.$$.fragment,k3),Slr=i(k3),K_e=n(k3,"P",{});var aut=s(K_e);Rlr=r(aut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aut.forEach(t),Blr=i(k3),qd=n(k3,"P",{});var wK=s(qd);Plr=r(wK,`Note:
Loading a model from its configuration file does `),Z_e=n(wK,"STRONG",{});var nut=s(Z_e);Ilr=r(nut,"not"),nut.forEach(t),qlr=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(wK,"A",{href:!0});var sut=s(Cz);Nlr=r(sut,"from_pretrained()"),sut.forEach(t),jlr=r(wK," to load the model weights."),wK.forEach(t),Dlr=i(k3),T(nT.$$.fragment,k3),k3.forEach(t),Glr=i(il),wr=n(il,"DIV",{class:!0});var dl=s(wr);T(vL.$$.fragment,dl),Olr=i(dl),e0e=n(dl,"P",{});var lut=s(e0e);Vlr=r(lut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lut.forEach(t),Xlr=i(dl),Ja=n(dl,"P",{});var S3=s(Ja);zlr=r(S3,"The model class to instantiate is selected based on the "),o0e=n(S3,"CODE",{});var iut=s(o0e);Qlr=r(iut,"model_type"),iut.forEach(t),Wlr=r(S3,` property of the config object (either
passed as an argument or loaded from `),r0e=n(S3,"CODE",{});var dut=s(r0e);Hlr=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),Ulr=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=n(S3,"CODE",{});var cut=s(t0e);Jlr=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),Ylr=r(S3,":"),S3.forEach(t),Klr=i(dl),se=n(dl,"UL",{});var le=s(se);sT=n(le,"LI",{});var J9e=s(sT);a0e=n(J9e,"STRONG",{});var fut=s(a0e);Zlr=r(fut,"albert"),fut.forEach(t),eir=r(J9e," \u2014 "),wz=n(J9e,"A",{href:!0});var mut=s(wz);oir=r(mut,"TFAlbertForPreTraining"),mut.forEach(t),rir=r(J9e," (ALBERT model)"),J9e.forEach(t),tir=i(le),lT=n(le,"LI",{});var Y9e=s(lT);n0e=n(Y9e,"STRONG",{});var gut=s(n0e);air=r(gut,"bart"),gut.forEach(t),nir=r(Y9e," \u2014 "),Az=n(Y9e,"A",{href:!0});var hut=s(Az);sir=r(hut,"TFBartForConditionalGeneration"),hut.forEach(t),lir=r(Y9e," (BART model)"),Y9e.forEach(t),iir=i(le),iT=n(le,"LI",{});var K9e=s(iT);s0e=n(K9e,"STRONG",{});var put=s(s0e);dir=r(put,"bert"),put.forEach(t),cir=r(K9e," \u2014 "),yz=n(K9e,"A",{href:!0});var uut=s(yz);fir=r(uut,"TFBertForPreTraining"),uut.forEach(t),mir=r(K9e," (BERT model)"),K9e.forEach(t),gir=i(le),dT=n(le,"LI",{});var Z9e=s(dT);l0e=n(Z9e,"STRONG",{});var _ut=s(l0e);hir=r(_ut,"camembert"),_ut.forEach(t),pir=r(Z9e," \u2014 "),Lz=n(Z9e,"A",{href:!0});var but=s(Lz);uir=r(but,"TFCamembertForMaskedLM"),but.forEach(t),_ir=r(Z9e," (CamemBERT model)"),Z9e.forEach(t),bir=i(le),cT=n(le,"LI",{});var e$e=s(cT);i0e=n(e$e,"STRONG",{});var vut=s(i0e);vir=r(vut,"ctrl"),vut.forEach(t),Fir=r(e$e," \u2014 "),xz=n(e$e,"A",{href:!0});var Fut=s(xz);Tir=r(Fut,"TFCTRLLMHeadModel"),Fut.forEach(t),Mir=r(e$e," (CTRL model)"),e$e.forEach(t),Eir=i(le),fT=n(le,"LI",{});var o$e=s(fT);d0e=n(o$e,"STRONG",{});var Tut=s(d0e);Cir=r(Tut,"distilbert"),Tut.forEach(t),wir=r(o$e," \u2014 "),$z=n(o$e,"A",{href:!0});var Mut=s($z);Air=r(Mut,"TFDistilBertForMaskedLM"),Mut.forEach(t),yir=r(o$e," (DistilBERT model)"),o$e.forEach(t),Lir=i(le),mT=n(le,"LI",{});var r$e=s(mT);c0e=n(r$e,"STRONG",{});var Eut=s(c0e);xir=r(Eut,"electra"),Eut.forEach(t),$ir=r(r$e," \u2014 "),kz=n(r$e,"A",{href:!0});var Cut=s(kz);kir=r(Cut,"TFElectraForPreTraining"),Cut.forEach(t),Sir=r(r$e," (ELECTRA model)"),r$e.forEach(t),Rir=i(le),gT=n(le,"LI",{});var t$e=s(gT);f0e=n(t$e,"STRONG",{});var wut=s(f0e);Bir=r(wut,"flaubert"),wut.forEach(t),Pir=r(t$e," \u2014 "),Sz=n(t$e,"A",{href:!0});var Aut=s(Sz);Iir=r(Aut,"TFFlaubertWithLMHeadModel"),Aut.forEach(t),qir=r(t$e," (FlauBERT model)"),t$e.forEach(t),Nir=i(le),hT=n(le,"LI",{});var a$e=s(hT);m0e=n(a$e,"STRONG",{});var yut=s(m0e);jir=r(yut,"funnel"),yut.forEach(t),Dir=r(a$e," \u2014 "),Rz=n(a$e,"A",{href:!0});var Lut=s(Rz);Gir=r(Lut,"TFFunnelForPreTraining"),Lut.forEach(t),Oir=r(a$e," (Funnel Transformer model)"),a$e.forEach(t),Vir=i(le),pT=n(le,"LI",{});var n$e=s(pT);g0e=n(n$e,"STRONG",{});var xut=s(g0e);Xir=r(xut,"gpt2"),xut.forEach(t),zir=r(n$e," \u2014 "),Bz=n(n$e,"A",{href:!0});var $ut=s(Bz);Qir=r($ut,"TFGPT2LMHeadModel"),$ut.forEach(t),Wir=r(n$e," (OpenAI GPT-2 model)"),n$e.forEach(t),Hir=i(le),uT=n(le,"LI",{});var s$e=s(uT);h0e=n(s$e,"STRONG",{});var kut=s(h0e);Uir=r(kut,"layoutlm"),kut.forEach(t),Jir=r(s$e," \u2014 "),Pz=n(s$e,"A",{href:!0});var Sut=s(Pz);Yir=r(Sut,"TFLayoutLMForMaskedLM"),Sut.forEach(t),Kir=r(s$e," (LayoutLM model)"),s$e.forEach(t),Zir=i(le),_T=n(le,"LI",{});var l$e=s(_T);p0e=n(l$e,"STRONG",{});var Rut=s(p0e);edr=r(Rut,"lxmert"),Rut.forEach(t),odr=r(l$e," \u2014 "),Iz=n(l$e,"A",{href:!0});var But=s(Iz);rdr=r(But,"TFLxmertForPreTraining"),But.forEach(t),tdr=r(l$e," (LXMERT model)"),l$e.forEach(t),adr=i(le),bT=n(le,"LI",{});var i$e=s(bT);u0e=n(i$e,"STRONG",{});var Put=s(u0e);ndr=r(Put,"mobilebert"),Put.forEach(t),sdr=r(i$e," \u2014 "),qz=n(i$e,"A",{href:!0});var Iut=s(qz);ldr=r(Iut,"TFMobileBertForPreTraining"),Iut.forEach(t),idr=r(i$e," (MobileBERT model)"),i$e.forEach(t),ddr=i(le),vT=n(le,"LI",{});var d$e=s(vT);_0e=n(d$e,"STRONG",{});var qut=s(_0e);cdr=r(qut,"mpnet"),qut.forEach(t),fdr=r(d$e," \u2014 "),Nz=n(d$e,"A",{href:!0});var Nut=s(Nz);mdr=r(Nut,"TFMPNetForMaskedLM"),Nut.forEach(t),gdr=r(d$e," (MPNet model)"),d$e.forEach(t),hdr=i(le),FT=n(le,"LI",{});var c$e=s(FT);b0e=n(c$e,"STRONG",{});var jut=s(b0e);pdr=r(jut,"openai-gpt"),jut.forEach(t),udr=r(c$e," \u2014 "),jz=n(c$e,"A",{href:!0});var Dut=s(jz);_dr=r(Dut,"TFOpenAIGPTLMHeadModel"),Dut.forEach(t),bdr=r(c$e," (OpenAI GPT model)"),c$e.forEach(t),vdr=i(le),TT=n(le,"LI",{});var f$e=s(TT);v0e=n(f$e,"STRONG",{});var Gut=s(v0e);Fdr=r(Gut,"roberta"),Gut.forEach(t),Tdr=r(f$e," \u2014 "),Dz=n(f$e,"A",{href:!0});var Out=s(Dz);Mdr=r(Out,"TFRobertaForMaskedLM"),Out.forEach(t),Edr=r(f$e," (RoBERTa model)"),f$e.forEach(t),Cdr=i(le),MT=n(le,"LI",{});var m$e=s(MT);F0e=n(m$e,"STRONG",{});var Vut=s(F0e);wdr=r(Vut,"t5"),Vut.forEach(t),Adr=r(m$e," \u2014 "),Gz=n(m$e,"A",{href:!0});var Xut=s(Gz);ydr=r(Xut,"TFT5ForConditionalGeneration"),Xut.forEach(t),Ldr=r(m$e," (T5 model)"),m$e.forEach(t),xdr=i(le),ET=n(le,"LI",{});var g$e=s(ET);T0e=n(g$e,"STRONG",{});var zut=s(T0e);$dr=r(zut,"tapas"),zut.forEach(t),kdr=r(g$e," \u2014 "),Oz=n(g$e,"A",{href:!0});var Qut=s(Oz);Sdr=r(Qut,"TFTapasForMaskedLM"),Qut.forEach(t),Rdr=r(g$e," (TAPAS model)"),g$e.forEach(t),Bdr=i(le),CT=n(le,"LI",{});var h$e=s(CT);M0e=n(h$e,"STRONG",{});var Wut=s(M0e);Pdr=r(Wut,"transfo-xl"),Wut.forEach(t),Idr=r(h$e," \u2014 "),Vz=n(h$e,"A",{href:!0});var Hut=s(Vz);qdr=r(Hut,"TFTransfoXLLMHeadModel"),Hut.forEach(t),Ndr=r(h$e," (Transformer-XL model)"),h$e.forEach(t),jdr=i(le),wT=n(le,"LI",{});var p$e=s(wT);E0e=n(p$e,"STRONG",{});var Uut=s(E0e);Ddr=r(Uut,"vit_mae"),Uut.forEach(t),Gdr=r(p$e," \u2014 "),Xz=n(p$e,"A",{href:!0});var Jut=s(Xz);Odr=r(Jut,"TFViTMAEForPreTraining"),Jut.forEach(t),Vdr=r(p$e," (ViTMAE model)"),p$e.forEach(t),Xdr=i(le),AT=n(le,"LI",{});var u$e=s(AT);C0e=n(u$e,"STRONG",{});var Yut=s(C0e);zdr=r(Yut,"xlm"),Yut.forEach(t),Qdr=r(u$e," \u2014 "),zz=n(u$e,"A",{href:!0});var Kut=s(zz);Wdr=r(Kut,"TFXLMWithLMHeadModel"),Kut.forEach(t),Hdr=r(u$e," (XLM model)"),u$e.forEach(t),Udr=i(le),yT=n(le,"LI",{});var _$e=s(yT);w0e=n(_$e,"STRONG",{});var Zut=s(w0e);Jdr=r(Zut,"xlm-roberta"),Zut.forEach(t),Ydr=r(_$e," \u2014 "),Qz=n(_$e,"A",{href:!0});var e_t=s(Qz);Kdr=r(e_t,"TFXLMRobertaForMaskedLM"),e_t.forEach(t),Zdr=r(_$e," (XLM-RoBERTa model)"),_$e.forEach(t),ecr=i(le),LT=n(le,"LI",{});var b$e=s(LT);A0e=n(b$e,"STRONG",{});var o_t=s(A0e);ocr=r(o_t,"xlnet"),o_t.forEach(t),rcr=r(b$e," \u2014 "),Wz=n(b$e,"A",{href:!0});var r_t=s(Wz);tcr=r(r_t,"TFXLNetLMHeadModel"),r_t.forEach(t),acr=r(b$e," (XLNet model)"),b$e.forEach(t),le.forEach(t),ncr=i(dl),T(xT.$$.fragment,dl),dl.forEach(t),il.forEach(t),WPe=i(f),Nd=n(f,"H2",{class:!0});var Yqe=s(Nd);$T=n(Yqe,"A",{id:!0,class:!0,href:!0});var t_t=s($T);y0e=n(t_t,"SPAN",{});var a_t=s(y0e);T(FL.$$.fragment,a_t),a_t.forEach(t),t_t.forEach(t),scr=i(Yqe),L0e=n(Yqe,"SPAN",{});var n_t=s(L0e);lcr=r(n_t,"TFAutoModelForCausalLM"),n_t.forEach(t),Yqe.forEach(t),HPe=i(f),Zo=n(f,"DIV",{class:!0});var cl=s(Zo);T(TL.$$.fragment,cl),icr=i(cl),jd=n(cl,"P",{});var AK=s(jd);dcr=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Hz=n(AK,"A",{href:!0});var s_t=s(Hz);ccr=r(s_t,"from_pretrained()"),s_t.forEach(t),fcr=r(AK," class method or the "),Uz=n(AK,"A",{href:!0});var l_t=s(Uz);mcr=r(l_t,"from_config()"),l_t.forEach(t),gcr=r(AK,` class
method.`),AK.forEach(t),hcr=i(cl),ML=n(cl,"P",{});var Kqe=s(ML);pcr=r(Kqe,"This class cannot be instantiated directly using "),x0e=n(Kqe,"CODE",{});var i_t=s(x0e);ucr=r(i_t,"__init__()"),i_t.forEach(t),_cr=r(Kqe," (throws an error)."),Kqe.forEach(t),bcr=i(cl),wt=n(cl,"DIV",{class:!0});var R3=s(wt);T(EL.$$.fragment,R3),vcr=i(R3),$0e=n(R3,"P",{});var d_t=s($0e);Fcr=r(d_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),d_t.forEach(t),Tcr=i(R3),Dd=n(R3,"P",{});var yK=s(Dd);Mcr=r(yK,`Note:
Loading a model from its configuration file does `),k0e=n(yK,"STRONG",{});var c_t=s(k0e);Ecr=r(c_t,"not"),c_t.forEach(t),Ccr=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(yK,"A",{href:!0});var f_t=s(Jz);wcr=r(f_t,"from_pretrained()"),f_t.forEach(t),Acr=r(yK," to load the model weights."),yK.forEach(t),ycr=i(R3),T(kT.$$.fragment,R3),R3.forEach(t),Lcr=i(cl),Ar=n(cl,"DIV",{class:!0});var fl=s(Ar);T(CL.$$.fragment,fl),xcr=i(fl),S0e=n(fl,"P",{});var m_t=s(S0e);$cr=r(m_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),m_t.forEach(t),kcr=i(fl),Ya=n(fl,"P",{});var B3=s(Ya);Scr=r(B3,"The model class to instantiate is selected based on the "),R0e=n(B3,"CODE",{});var g_t=s(R0e);Rcr=r(g_t,"model_type"),g_t.forEach(t),Bcr=r(B3,` property of the config object (either
passed as an argument or loaded from `),B0e=n(B3,"CODE",{});var h_t=s(B0e);Pcr=r(h_t,"pretrained_model_name_or_path"),h_t.forEach(t),Icr=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=n(B3,"CODE",{});var p_t=s(P0e);qcr=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),Ncr=r(B3,":"),B3.forEach(t),jcr=i(fl),Te=n(fl,"UL",{});var Ce=s(Te);ST=n(Ce,"LI",{});var v$e=s(ST);I0e=n(v$e,"STRONG",{});var u_t=s(I0e);Dcr=r(u_t,"bert"),u_t.forEach(t),Gcr=r(v$e," \u2014 "),Yz=n(v$e,"A",{href:!0});var __t=s(Yz);Ocr=r(__t,"TFBertLMHeadModel"),__t.forEach(t),Vcr=r(v$e," (BERT model)"),v$e.forEach(t),Xcr=i(Ce),RT=n(Ce,"LI",{});var F$e=s(RT);q0e=n(F$e,"STRONG",{});var b_t=s(q0e);zcr=r(b_t,"camembert"),b_t.forEach(t),Qcr=r(F$e," \u2014 "),Kz=n(F$e,"A",{href:!0});var v_t=s(Kz);Wcr=r(v_t,"TFCamembertForCausalLM"),v_t.forEach(t),Hcr=r(F$e," (CamemBERT model)"),F$e.forEach(t),Ucr=i(Ce),BT=n(Ce,"LI",{});var T$e=s(BT);N0e=n(T$e,"STRONG",{});var F_t=s(N0e);Jcr=r(F_t,"ctrl"),F_t.forEach(t),Ycr=r(T$e," \u2014 "),Zz=n(T$e,"A",{href:!0});var T_t=s(Zz);Kcr=r(T_t,"TFCTRLLMHeadModel"),T_t.forEach(t),Zcr=r(T$e," (CTRL model)"),T$e.forEach(t),efr=i(Ce),PT=n(Ce,"LI",{});var M$e=s(PT);j0e=n(M$e,"STRONG",{});var M_t=s(j0e);ofr=r(M_t,"gpt2"),M_t.forEach(t),rfr=r(M$e," \u2014 "),eQ=n(M$e,"A",{href:!0});var E_t=s(eQ);tfr=r(E_t,"TFGPT2LMHeadModel"),E_t.forEach(t),afr=r(M$e," (OpenAI GPT-2 model)"),M$e.forEach(t),nfr=i(Ce),IT=n(Ce,"LI",{});var E$e=s(IT);D0e=n(E$e,"STRONG",{});var C_t=s(D0e);sfr=r(C_t,"gptj"),C_t.forEach(t),lfr=r(E$e," \u2014 "),oQ=n(E$e,"A",{href:!0});var w_t=s(oQ);ifr=r(w_t,"TFGPTJForCausalLM"),w_t.forEach(t),dfr=r(E$e," (GPT-J model)"),E$e.forEach(t),cfr=i(Ce),qT=n(Ce,"LI",{});var C$e=s(qT);G0e=n(C$e,"STRONG",{});var A_t=s(G0e);ffr=r(A_t,"openai-gpt"),A_t.forEach(t),mfr=r(C$e," \u2014 "),rQ=n(C$e,"A",{href:!0});var y_t=s(rQ);gfr=r(y_t,"TFOpenAIGPTLMHeadModel"),y_t.forEach(t),hfr=r(C$e," (OpenAI GPT model)"),C$e.forEach(t),pfr=i(Ce),NT=n(Ce,"LI",{});var w$e=s(NT);O0e=n(w$e,"STRONG",{});var L_t=s(O0e);ufr=r(L_t,"rembert"),L_t.forEach(t),_fr=r(w$e," \u2014 "),tQ=n(w$e,"A",{href:!0});var x_t=s(tQ);bfr=r(x_t,"TFRemBertForCausalLM"),x_t.forEach(t),vfr=r(w$e," (RemBERT model)"),w$e.forEach(t),Ffr=i(Ce),jT=n(Ce,"LI",{});var A$e=s(jT);V0e=n(A$e,"STRONG",{});var $_t=s(V0e);Tfr=r($_t,"roberta"),$_t.forEach(t),Mfr=r(A$e," \u2014 "),aQ=n(A$e,"A",{href:!0});var k_t=s(aQ);Efr=r(k_t,"TFRobertaForCausalLM"),k_t.forEach(t),Cfr=r(A$e," (RoBERTa model)"),A$e.forEach(t),wfr=i(Ce),DT=n(Ce,"LI",{});var y$e=s(DT);X0e=n(y$e,"STRONG",{});var S_t=s(X0e);Afr=r(S_t,"roformer"),S_t.forEach(t),yfr=r(y$e," \u2014 "),nQ=n(y$e,"A",{href:!0});var R_t=s(nQ);Lfr=r(R_t,"TFRoFormerForCausalLM"),R_t.forEach(t),xfr=r(y$e," (RoFormer model)"),y$e.forEach(t),$fr=i(Ce),GT=n(Ce,"LI",{});var L$e=s(GT);z0e=n(L$e,"STRONG",{});var B_t=s(z0e);kfr=r(B_t,"transfo-xl"),B_t.forEach(t),Sfr=r(L$e," \u2014 "),sQ=n(L$e,"A",{href:!0});var P_t=s(sQ);Rfr=r(P_t,"TFTransfoXLLMHeadModel"),P_t.forEach(t),Bfr=r(L$e," (Transformer-XL model)"),L$e.forEach(t),Pfr=i(Ce),OT=n(Ce,"LI",{});var x$e=s(OT);Q0e=n(x$e,"STRONG",{});var I_t=s(Q0e);Ifr=r(I_t,"xlm"),I_t.forEach(t),qfr=r(x$e," \u2014 "),lQ=n(x$e,"A",{href:!0});var q_t=s(lQ);Nfr=r(q_t,"TFXLMWithLMHeadModel"),q_t.forEach(t),jfr=r(x$e," (XLM model)"),x$e.forEach(t),Dfr=i(Ce),VT=n(Ce,"LI",{});var $$e=s(VT);W0e=n($$e,"STRONG",{});var N_t=s(W0e);Gfr=r(N_t,"xlnet"),N_t.forEach(t),Ofr=r($$e," \u2014 "),iQ=n($$e,"A",{href:!0});var j_t=s(iQ);Vfr=r(j_t,"TFXLNetLMHeadModel"),j_t.forEach(t),Xfr=r($$e," (XLNet model)"),$$e.forEach(t),Ce.forEach(t),zfr=i(fl),T(XT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),UPe=i(f),Gd=n(f,"H2",{class:!0});var Zqe=s(Gd);zT=n(Zqe,"A",{id:!0,class:!0,href:!0});var D_t=s(zT);H0e=n(D_t,"SPAN",{});var G_t=s(H0e);T(wL.$$.fragment,G_t),G_t.forEach(t),D_t.forEach(t),Qfr=i(Zqe),U0e=n(Zqe,"SPAN",{});var O_t=s(U0e);Wfr=r(O_t,"TFAutoModelForImageClassification"),O_t.forEach(t),Zqe.forEach(t),JPe=i(f),er=n(f,"DIV",{class:!0});var ml=s(er);T(AL.$$.fragment,ml),Hfr=i(ml),Od=n(ml,"P",{});var LK=s(Od);Ufr=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dQ=n(LK,"A",{href:!0});var V_t=s(dQ);Jfr=r(V_t,"from_pretrained()"),V_t.forEach(t),Yfr=r(LK," class method or the "),cQ=n(LK,"A",{href:!0});var X_t=s(cQ);Kfr=r(X_t,"from_config()"),X_t.forEach(t),Zfr=r(LK,` class
method.`),LK.forEach(t),emr=i(ml),yL=n(ml,"P",{});var eNe=s(yL);omr=r(eNe,"This class cannot be instantiated directly using "),J0e=n(eNe,"CODE",{});var z_t=s(J0e);rmr=r(z_t,"__init__()"),z_t.forEach(t),tmr=r(eNe," (throws an error)."),eNe.forEach(t),amr=i(ml),At=n(ml,"DIV",{class:!0});var P3=s(At);T(LL.$$.fragment,P3),nmr=i(P3),Y0e=n(P3,"P",{});var Q_t=s(Y0e);smr=r(Q_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Q_t.forEach(t),lmr=i(P3),Vd=n(P3,"P",{});var xK=s(Vd);imr=r(xK,`Note:
Loading a model from its configuration file does `),K0e=n(xK,"STRONG",{});var W_t=s(K0e);dmr=r(W_t,"not"),W_t.forEach(t),cmr=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(xK,"A",{href:!0});var H_t=s(fQ);fmr=r(H_t,"from_pretrained()"),H_t.forEach(t),mmr=r(xK," to load the model weights."),xK.forEach(t),gmr=i(P3),T(QT.$$.fragment,P3),P3.forEach(t),hmr=i(ml),yr=n(ml,"DIV",{class:!0});var gl=s(yr);T(xL.$$.fragment,gl),pmr=i(gl),Z0e=n(gl,"P",{});var U_t=s(Z0e);umr=r(U_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),U_t.forEach(t),_mr=i(gl),Ka=n(gl,"P",{});var I3=s(Ka);bmr=r(I3,"The model class to instantiate is selected based on the "),e1e=n(I3,"CODE",{});var J_t=s(e1e);vmr=r(J_t,"model_type"),J_t.forEach(t),Fmr=r(I3,` property of the config object (either
passed as an argument or loaded from `),o1e=n(I3,"CODE",{});var Y_t=s(o1e);Tmr=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),Mmr=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=n(I3,"CODE",{});var K_t=s(r1e);Emr=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),Cmr=r(I3,":"),I3.forEach(t),wmr=i(gl),$L=n(gl,"UL",{});var oNe=s($L);WT=n(oNe,"LI",{});var k$e=s(WT);t1e=n(k$e,"STRONG",{});var Z_t=s(t1e);Amr=r(Z_t,"convnext"),Z_t.forEach(t),ymr=r(k$e," \u2014 "),mQ=n(k$e,"A",{href:!0});var e0t=s(mQ);Lmr=r(e0t,"TFConvNextForImageClassification"),e0t.forEach(t),xmr=r(k$e," (ConvNext model)"),k$e.forEach(t),$mr=i(oNe),HT=n(oNe,"LI",{});var S$e=s(HT);a1e=n(S$e,"STRONG",{});var o0t=s(a1e);kmr=r(o0t,"vit"),o0t.forEach(t),Smr=r(S$e," \u2014 "),gQ=n(S$e,"A",{href:!0});var r0t=s(gQ);Rmr=r(r0t,"TFViTForImageClassification"),r0t.forEach(t),Bmr=r(S$e," (ViT model)"),S$e.forEach(t),oNe.forEach(t),Pmr=i(gl),T(UT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),YPe=i(f),Xd=n(f,"H2",{class:!0});var rNe=s(Xd);JT=n(rNe,"A",{id:!0,class:!0,href:!0});var t0t=s(JT);n1e=n(t0t,"SPAN",{});var a0t=s(n1e);T(kL.$$.fragment,a0t),a0t.forEach(t),t0t.forEach(t),Imr=i(rNe),s1e=n(rNe,"SPAN",{});var n0t=s(s1e);qmr=r(n0t,"TFAutoModelForMaskedLM"),n0t.forEach(t),rNe.forEach(t),KPe=i(f),or=n(f,"DIV",{class:!0});var hl=s(or);T(SL.$$.fragment,hl),Nmr=i(hl),zd=n(hl,"P",{});var $K=s(zd);jmr=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hQ=n($K,"A",{href:!0});var s0t=s(hQ);Dmr=r(s0t,"from_pretrained()"),s0t.forEach(t),Gmr=r($K," class method or the "),pQ=n($K,"A",{href:!0});var l0t=s(pQ);Omr=r(l0t,"from_config()"),l0t.forEach(t),Vmr=r($K,` class
method.`),$K.forEach(t),Xmr=i(hl),RL=n(hl,"P",{});var tNe=s(RL);zmr=r(tNe,"This class cannot be instantiated directly using "),l1e=n(tNe,"CODE",{});var i0t=s(l1e);Qmr=r(i0t,"__init__()"),i0t.forEach(t),Wmr=r(tNe," (throws an error)."),tNe.forEach(t),Hmr=i(hl),yt=n(hl,"DIV",{class:!0});var q3=s(yt);T(BL.$$.fragment,q3),Umr=i(q3),i1e=n(q3,"P",{});var d0t=s(i1e);Jmr=r(d0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),d0t.forEach(t),Ymr=i(q3),Qd=n(q3,"P",{});var kK=s(Qd);Kmr=r(kK,`Note:
Loading a model from its configuration file does `),d1e=n(kK,"STRONG",{});var c0t=s(d1e);Zmr=r(c0t,"not"),c0t.forEach(t),egr=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(kK,"A",{href:!0});var f0t=s(uQ);ogr=r(f0t,"from_pretrained()"),f0t.forEach(t),rgr=r(kK," to load the model weights."),kK.forEach(t),tgr=i(q3),T(YT.$$.fragment,q3),q3.forEach(t),agr=i(hl),Lr=n(hl,"DIV",{class:!0});var pl=s(Lr);T(PL.$$.fragment,pl),ngr=i(pl),c1e=n(pl,"P",{});var m0t=s(c1e);sgr=r(m0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),m0t.forEach(t),lgr=i(pl),Za=n(pl,"P",{});var N3=s(Za);igr=r(N3,"The model class to instantiate is selected based on the "),f1e=n(N3,"CODE",{});var g0t=s(f1e);dgr=r(g0t,"model_type"),g0t.forEach(t),cgr=r(N3,` property of the config object (either
passed as an argument or loaded from `),m1e=n(N3,"CODE",{});var h0t=s(m1e);fgr=r(h0t,"pretrained_model_name_or_path"),h0t.forEach(t),mgr=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=n(N3,"CODE",{});var p0t=s(g1e);ggr=r(p0t,"pretrained_model_name_or_path"),p0t.forEach(t),hgr=r(N3,":"),N3.forEach(t),pgr=i(pl),ie=n(pl,"UL",{});var fe=s(ie);KT=n(fe,"LI",{});var R$e=s(KT);h1e=n(R$e,"STRONG",{});var u0t=s(h1e);ugr=r(u0t,"albert"),u0t.forEach(t),_gr=r(R$e," \u2014 "),_Q=n(R$e,"A",{href:!0});var _0t=s(_Q);bgr=r(_0t,"TFAlbertForMaskedLM"),_0t.forEach(t),vgr=r(R$e," (ALBERT model)"),R$e.forEach(t),Fgr=i(fe),ZT=n(fe,"LI",{});var B$e=s(ZT);p1e=n(B$e,"STRONG",{});var b0t=s(p1e);Tgr=r(b0t,"bert"),b0t.forEach(t),Mgr=r(B$e," \u2014 "),bQ=n(B$e,"A",{href:!0});var v0t=s(bQ);Egr=r(v0t,"TFBertForMaskedLM"),v0t.forEach(t),Cgr=r(B$e," (BERT model)"),B$e.forEach(t),wgr=i(fe),e7=n(fe,"LI",{});var P$e=s(e7);u1e=n(P$e,"STRONG",{});var F0t=s(u1e);Agr=r(F0t,"camembert"),F0t.forEach(t),ygr=r(P$e," \u2014 "),vQ=n(P$e,"A",{href:!0});var T0t=s(vQ);Lgr=r(T0t,"TFCamembertForMaskedLM"),T0t.forEach(t),xgr=r(P$e," (CamemBERT model)"),P$e.forEach(t),$gr=i(fe),o7=n(fe,"LI",{});var I$e=s(o7);_1e=n(I$e,"STRONG",{});var M0t=s(_1e);kgr=r(M0t,"convbert"),M0t.forEach(t),Sgr=r(I$e," \u2014 "),FQ=n(I$e,"A",{href:!0});var E0t=s(FQ);Rgr=r(E0t,"TFConvBertForMaskedLM"),E0t.forEach(t),Bgr=r(I$e," (ConvBERT model)"),I$e.forEach(t),Pgr=i(fe),r7=n(fe,"LI",{});var q$e=s(r7);b1e=n(q$e,"STRONG",{});var C0t=s(b1e);Igr=r(C0t,"deberta"),C0t.forEach(t),qgr=r(q$e," \u2014 "),TQ=n(q$e,"A",{href:!0});var w0t=s(TQ);Ngr=r(w0t,"TFDebertaForMaskedLM"),w0t.forEach(t),jgr=r(q$e," (DeBERTa model)"),q$e.forEach(t),Dgr=i(fe),t7=n(fe,"LI",{});var N$e=s(t7);v1e=n(N$e,"STRONG",{});var A0t=s(v1e);Ggr=r(A0t,"deberta-v2"),A0t.forEach(t),Ogr=r(N$e," \u2014 "),MQ=n(N$e,"A",{href:!0});var y0t=s(MQ);Vgr=r(y0t,"TFDebertaV2ForMaskedLM"),y0t.forEach(t),Xgr=r(N$e," (DeBERTa-v2 model)"),N$e.forEach(t),zgr=i(fe),a7=n(fe,"LI",{});var j$e=s(a7);F1e=n(j$e,"STRONG",{});var L0t=s(F1e);Qgr=r(L0t,"distilbert"),L0t.forEach(t),Wgr=r(j$e," \u2014 "),EQ=n(j$e,"A",{href:!0});var x0t=s(EQ);Hgr=r(x0t,"TFDistilBertForMaskedLM"),x0t.forEach(t),Ugr=r(j$e," (DistilBERT model)"),j$e.forEach(t),Jgr=i(fe),n7=n(fe,"LI",{});var D$e=s(n7);T1e=n(D$e,"STRONG",{});var $0t=s(T1e);Ygr=r($0t,"electra"),$0t.forEach(t),Kgr=r(D$e," \u2014 "),CQ=n(D$e,"A",{href:!0});var k0t=s(CQ);Zgr=r(k0t,"TFElectraForMaskedLM"),k0t.forEach(t),ehr=r(D$e," (ELECTRA model)"),D$e.forEach(t),ohr=i(fe),s7=n(fe,"LI",{});var G$e=s(s7);M1e=n(G$e,"STRONG",{});var S0t=s(M1e);rhr=r(S0t,"flaubert"),S0t.forEach(t),thr=r(G$e," \u2014 "),wQ=n(G$e,"A",{href:!0});var R0t=s(wQ);ahr=r(R0t,"TFFlaubertWithLMHeadModel"),R0t.forEach(t),nhr=r(G$e," (FlauBERT model)"),G$e.forEach(t),shr=i(fe),l7=n(fe,"LI",{});var O$e=s(l7);E1e=n(O$e,"STRONG",{});var B0t=s(E1e);lhr=r(B0t,"funnel"),B0t.forEach(t),ihr=r(O$e," \u2014 "),AQ=n(O$e,"A",{href:!0});var P0t=s(AQ);dhr=r(P0t,"TFFunnelForMaskedLM"),P0t.forEach(t),chr=r(O$e," (Funnel Transformer model)"),O$e.forEach(t),fhr=i(fe),i7=n(fe,"LI",{});var V$e=s(i7);C1e=n(V$e,"STRONG",{});var I0t=s(C1e);mhr=r(I0t,"layoutlm"),I0t.forEach(t),ghr=r(V$e," \u2014 "),yQ=n(V$e,"A",{href:!0});var q0t=s(yQ);hhr=r(q0t,"TFLayoutLMForMaskedLM"),q0t.forEach(t),phr=r(V$e," (LayoutLM model)"),V$e.forEach(t),uhr=i(fe),d7=n(fe,"LI",{});var X$e=s(d7);w1e=n(X$e,"STRONG",{});var N0t=s(w1e);_hr=r(N0t,"longformer"),N0t.forEach(t),bhr=r(X$e," \u2014 "),LQ=n(X$e,"A",{href:!0});var j0t=s(LQ);vhr=r(j0t,"TFLongformerForMaskedLM"),j0t.forEach(t),Fhr=r(X$e," (Longformer model)"),X$e.forEach(t),Thr=i(fe),c7=n(fe,"LI",{});var z$e=s(c7);A1e=n(z$e,"STRONG",{});var D0t=s(A1e);Mhr=r(D0t,"mobilebert"),D0t.forEach(t),Ehr=r(z$e," \u2014 "),xQ=n(z$e,"A",{href:!0});var G0t=s(xQ);Chr=r(G0t,"TFMobileBertForMaskedLM"),G0t.forEach(t),whr=r(z$e," (MobileBERT model)"),z$e.forEach(t),Ahr=i(fe),f7=n(fe,"LI",{});var Q$e=s(f7);y1e=n(Q$e,"STRONG",{});var O0t=s(y1e);yhr=r(O0t,"mpnet"),O0t.forEach(t),Lhr=r(Q$e," \u2014 "),$Q=n(Q$e,"A",{href:!0});var V0t=s($Q);xhr=r(V0t,"TFMPNetForMaskedLM"),V0t.forEach(t),$hr=r(Q$e," (MPNet model)"),Q$e.forEach(t),khr=i(fe),m7=n(fe,"LI",{});var W$e=s(m7);L1e=n(W$e,"STRONG",{});var X0t=s(L1e);Shr=r(X0t,"rembert"),X0t.forEach(t),Rhr=r(W$e," \u2014 "),kQ=n(W$e,"A",{href:!0});var z0t=s(kQ);Bhr=r(z0t,"TFRemBertForMaskedLM"),z0t.forEach(t),Phr=r(W$e," (RemBERT model)"),W$e.forEach(t),Ihr=i(fe),g7=n(fe,"LI",{});var H$e=s(g7);x1e=n(H$e,"STRONG",{});var Q0t=s(x1e);qhr=r(Q0t,"roberta"),Q0t.forEach(t),Nhr=r(H$e," \u2014 "),SQ=n(H$e,"A",{href:!0});var W0t=s(SQ);jhr=r(W0t,"TFRobertaForMaskedLM"),W0t.forEach(t),Dhr=r(H$e," (RoBERTa model)"),H$e.forEach(t),Ghr=i(fe),h7=n(fe,"LI",{});var U$e=s(h7);$1e=n(U$e,"STRONG",{});var H0t=s($1e);Ohr=r(H0t,"roformer"),H0t.forEach(t),Vhr=r(U$e," \u2014 "),RQ=n(U$e,"A",{href:!0});var U0t=s(RQ);Xhr=r(U0t,"TFRoFormerForMaskedLM"),U0t.forEach(t),zhr=r(U$e," (RoFormer model)"),U$e.forEach(t),Qhr=i(fe),p7=n(fe,"LI",{});var J$e=s(p7);k1e=n(J$e,"STRONG",{});var J0t=s(k1e);Whr=r(J0t,"tapas"),J0t.forEach(t),Hhr=r(J$e," \u2014 "),BQ=n(J$e,"A",{href:!0});var Y0t=s(BQ);Uhr=r(Y0t,"TFTapasForMaskedLM"),Y0t.forEach(t),Jhr=r(J$e," (TAPAS model)"),J$e.forEach(t),Yhr=i(fe),u7=n(fe,"LI",{});var Y$e=s(u7);S1e=n(Y$e,"STRONG",{});var K0t=s(S1e);Khr=r(K0t,"xlm"),K0t.forEach(t),Zhr=r(Y$e," \u2014 "),PQ=n(Y$e,"A",{href:!0});var Z0t=s(PQ);epr=r(Z0t,"TFXLMWithLMHeadModel"),Z0t.forEach(t),opr=r(Y$e," (XLM model)"),Y$e.forEach(t),rpr=i(fe),_7=n(fe,"LI",{});var K$e=s(_7);R1e=n(K$e,"STRONG",{});var e1t=s(R1e);tpr=r(e1t,"xlm-roberta"),e1t.forEach(t),apr=r(K$e," \u2014 "),IQ=n(K$e,"A",{href:!0});var o1t=s(IQ);npr=r(o1t,"TFXLMRobertaForMaskedLM"),o1t.forEach(t),spr=r(K$e," (XLM-RoBERTa model)"),K$e.forEach(t),fe.forEach(t),lpr=i(pl),T(b7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),ZPe=i(f),Wd=n(f,"H2",{class:!0});var aNe=s(Wd);v7=n(aNe,"A",{id:!0,class:!0,href:!0});var r1t=s(v7);B1e=n(r1t,"SPAN",{});var t1t=s(B1e);T(IL.$$.fragment,t1t),t1t.forEach(t),r1t.forEach(t),ipr=i(aNe),P1e=n(aNe,"SPAN",{});var a1t=s(P1e);dpr=r(a1t,"TFAutoModelForSeq2SeqLM"),a1t.forEach(t),aNe.forEach(t),eIe=i(f),rr=n(f,"DIV",{class:!0});var ul=s(rr);T(qL.$$.fragment,ul),cpr=i(ul),Hd=n(ul,"P",{});var SK=s(Hd);fpr=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qQ=n(SK,"A",{href:!0});var n1t=s(qQ);mpr=r(n1t,"from_pretrained()"),n1t.forEach(t),gpr=r(SK," class method or the "),NQ=n(SK,"A",{href:!0});var s1t=s(NQ);hpr=r(s1t,"from_config()"),s1t.forEach(t),ppr=r(SK,` class
method.`),SK.forEach(t),upr=i(ul),NL=n(ul,"P",{});var nNe=s(NL);_pr=r(nNe,"This class cannot be instantiated directly using "),I1e=n(nNe,"CODE",{});var l1t=s(I1e);bpr=r(l1t,"__init__()"),l1t.forEach(t),vpr=r(nNe," (throws an error)."),nNe.forEach(t),Fpr=i(ul),Lt=n(ul,"DIV",{class:!0});var j3=s(Lt);T(jL.$$.fragment,j3),Tpr=i(j3),q1e=n(j3,"P",{});var i1t=s(q1e);Mpr=r(i1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i1t.forEach(t),Epr=i(j3),Ud=n(j3,"P",{});var RK=s(Ud);Cpr=r(RK,`Note:
Loading a model from its configuration file does `),N1e=n(RK,"STRONG",{});var d1t=s(N1e);wpr=r(d1t,"not"),d1t.forEach(t),Apr=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=n(RK,"A",{href:!0});var c1t=s(jQ);ypr=r(c1t,"from_pretrained()"),c1t.forEach(t),Lpr=r(RK," to load the model weights."),RK.forEach(t),xpr=i(j3),T(F7.$$.fragment,j3),j3.forEach(t),$pr=i(ul),xr=n(ul,"DIV",{class:!0});var _l=s(xr);T(DL.$$.fragment,_l),kpr=i(_l),j1e=n(_l,"P",{});var f1t=s(j1e);Spr=r(f1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),f1t.forEach(t),Rpr=i(_l),en=n(_l,"P",{});var D3=s(en);Bpr=r(D3,"The model class to instantiate is selected based on the "),D1e=n(D3,"CODE",{});var m1t=s(D1e);Ppr=r(m1t,"model_type"),m1t.forEach(t),Ipr=r(D3,` property of the config object (either
passed as an argument or loaded from `),G1e=n(D3,"CODE",{});var g1t=s(G1e);qpr=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),Npr=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(D3,"CODE",{});var h1t=s(O1e);jpr=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),Dpr=r(D3,":"),D3.forEach(t),Gpr=i(_l),ye=n(_l,"UL",{});var Re=s(ye);T7=n(Re,"LI",{});var Z$e=s(T7);V1e=n(Z$e,"STRONG",{});var p1t=s(V1e);Opr=r(p1t,"bart"),p1t.forEach(t),Vpr=r(Z$e," \u2014 "),DQ=n(Z$e,"A",{href:!0});var u1t=s(DQ);Xpr=r(u1t,"TFBartForConditionalGeneration"),u1t.forEach(t),zpr=r(Z$e," (BART model)"),Z$e.forEach(t),Qpr=i(Re),M7=n(Re,"LI",{});var eke=s(M7);X1e=n(eke,"STRONG",{});var _1t=s(X1e);Wpr=r(_1t,"blenderbot"),_1t.forEach(t),Hpr=r(eke," \u2014 "),GQ=n(eke,"A",{href:!0});var b1t=s(GQ);Upr=r(b1t,"TFBlenderbotForConditionalGeneration"),b1t.forEach(t),Jpr=r(eke," (Blenderbot model)"),eke.forEach(t),Ypr=i(Re),E7=n(Re,"LI",{});var oke=s(E7);z1e=n(oke,"STRONG",{});var v1t=s(z1e);Kpr=r(v1t,"blenderbot-small"),v1t.forEach(t),Zpr=r(oke," \u2014 "),OQ=n(oke,"A",{href:!0});var F1t=s(OQ);eur=r(F1t,"TFBlenderbotSmallForConditionalGeneration"),F1t.forEach(t),our=r(oke," (BlenderbotSmall model)"),oke.forEach(t),rur=i(Re),C7=n(Re,"LI",{});var rke=s(C7);Q1e=n(rke,"STRONG",{});var T1t=s(Q1e);tur=r(T1t,"encoder-decoder"),T1t.forEach(t),aur=r(rke," \u2014 "),VQ=n(rke,"A",{href:!0});var M1t=s(VQ);nur=r(M1t,"TFEncoderDecoderModel"),M1t.forEach(t),sur=r(rke," (Encoder decoder model)"),rke.forEach(t),lur=i(Re),w7=n(Re,"LI",{});var tke=s(w7);W1e=n(tke,"STRONG",{});var E1t=s(W1e);iur=r(E1t,"led"),E1t.forEach(t),dur=r(tke," \u2014 "),XQ=n(tke,"A",{href:!0});var C1t=s(XQ);cur=r(C1t,"TFLEDForConditionalGeneration"),C1t.forEach(t),fur=r(tke," (LED model)"),tke.forEach(t),mur=i(Re),A7=n(Re,"LI",{});var ake=s(A7);H1e=n(ake,"STRONG",{});var w1t=s(H1e);gur=r(w1t,"marian"),w1t.forEach(t),hur=r(ake," \u2014 "),zQ=n(ake,"A",{href:!0});var A1t=s(zQ);pur=r(A1t,"TFMarianMTModel"),A1t.forEach(t),uur=r(ake," (Marian model)"),ake.forEach(t),_ur=i(Re),y7=n(Re,"LI",{});var nke=s(y7);U1e=n(nke,"STRONG",{});var y1t=s(U1e);bur=r(y1t,"mbart"),y1t.forEach(t),vur=r(nke," \u2014 "),QQ=n(nke,"A",{href:!0});var L1t=s(QQ);Fur=r(L1t,"TFMBartForConditionalGeneration"),L1t.forEach(t),Tur=r(nke," (mBART model)"),nke.forEach(t),Mur=i(Re),L7=n(Re,"LI",{});var ske=s(L7);J1e=n(ske,"STRONG",{});var x1t=s(J1e);Eur=r(x1t,"mt5"),x1t.forEach(t),Cur=r(ske," \u2014 "),WQ=n(ske,"A",{href:!0});var $1t=s(WQ);wur=r($1t,"TFMT5ForConditionalGeneration"),$1t.forEach(t),Aur=r(ske," (mT5 model)"),ske.forEach(t),yur=i(Re),x7=n(Re,"LI",{});var lke=s(x7);Y1e=n(lke,"STRONG",{});var k1t=s(Y1e);Lur=r(k1t,"pegasus"),k1t.forEach(t),xur=r(lke," \u2014 "),HQ=n(lke,"A",{href:!0});var S1t=s(HQ);$ur=r(S1t,"TFPegasusForConditionalGeneration"),S1t.forEach(t),kur=r(lke," (Pegasus model)"),lke.forEach(t),Sur=i(Re),$7=n(Re,"LI",{});var ike=s($7);K1e=n(ike,"STRONG",{});var R1t=s(K1e);Rur=r(R1t,"t5"),R1t.forEach(t),Bur=r(ike," \u2014 "),UQ=n(ike,"A",{href:!0});var B1t=s(UQ);Pur=r(B1t,"TFT5ForConditionalGeneration"),B1t.forEach(t),Iur=r(ike," (T5 model)"),ike.forEach(t),Re.forEach(t),qur=i(_l),T(k7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),oIe=i(f),Jd=n(f,"H2",{class:!0});var sNe=s(Jd);S7=n(sNe,"A",{id:!0,class:!0,href:!0});var P1t=s(S7);Z1e=n(P1t,"SPAN",{});var I1t=s(Z1e);T(GL.$$.fragment,I1t),I1t.forEach(t),P1t.forEach(t),Nur=i(sNe),ebe=n(sNe,"SPAN",{});var q1t=s(ebe);jur=r(q1t,"TFAutoModelForSequenceClassification"),q1t.forEach(t),sNe.forEach(t),rIe=i(f),tr=n(f,"DIV",{class:!0});var bl=s(tr);T(OL.$$.fragment,bl),Dur=i(bl),Yd=n(bl,"P",{});var BK=s(Yd);Gur=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JQ=n(BK,"A",{href:!0});var N1t=s(JQ);Our=r(N1t,"from_pretrained()"),N1t.forEach(t),Vur=r(BK," class method or the "),YQ=n(BK,"A",{href:!0});var j1t=s(YQ);Xur=r(j1t,"from_config()"),j1t.forEach(t),zur=r(BK,` class
method.`),BK.forEach(t),Qur=i(bl),VL=n(bl,"P",{});var lNe=s(VL);Wur=r(lNe,"This class cannot be instantiated directly using "),obe=n(lNe,"CODE",{});var D1t=s(obe);Hur=r(D1t,"__init__()"),D1t.forEach(t),Uur=r(lNe," (throws an error)."),lNe.forEach(t),Jur=i(bl),xt=n(bl,"DIV",{class:!0});var G3=s(xt);T(XL.$$.fragment,G3),Yur=i(G3),rbe=n(G3,"P",{});var G1t=s(rbe);Kur=r(G1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),G1t.forEach(t),Zur=i(G3),Kd=n(G3,"P",{});var PK=s(Kd);e_r=r(PK,`Note:
Loading a model from its configuration file does `),tbe=n(PK,"STRONG",{});var O1t=s(tbe);o_r=r(O1t,"not"),O1t.forEach(t),r_r=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(PK,"A",{href:!0});var V1t=s(KQ);t_r=r(V1t,"from_pretrained()"),V1t.forEach(t),a_r=r(PK," to load the model weights."),PK.forEach(t),n_r=i(G3),T(R7.$$.fragment,G3),G3.forEach(t),s_r=i(bl),$r=n(bl,"DIV",{class:!0});var vl=s($r);T(zL.$$.fragment,vl),l_r=i(vl),abe=n(vl,"P",{});var X1t=s(abe);i_r=r(X1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),X1t.forEach(t),d_r=i(vl),on=n(vl,"P",{});var O3=s(on);c_r=r(O3,"The model class to instantiate is selected based on the "),nbe=n(O3,"CODE",{});var z1t=s(nbe);f_r=r(z1t,"model_type"),z1t.forEach(t),m_r=r(O3,` property of the config object (either
passed as an argument or loaded from `),sbe=n(O3,"CODE",{});var Q1t=s(sbe);g_r=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),h_r=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(O3,"CODE",{});var W1t=s(lbe);p_r=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),u_r=r(O3,":"),O3.forEach(t),__r=i(vl),Z=n(vl,"UL",{});var te=s(Z);B7=n(te,"LI",{});var dke=s(B7);ibe=n(dke,"STRONG",{});var H1t=s(ibe);b_r=r(H1t,"albert"),H1t.forEach(t),v_r=r(dke," \u2014 "),ZQ=n(dke,"A",{href:!0});var U1t=s(ZQ);F_r=r(U1t,"TFAlbertForSequenceClassification"),U1t.forEach(t),T_r=r(dke," (ALBERT model)"),dke.forEach(t),M_r=i(te),P7=n(te,"LI",{});var cke=s(P7);dbe=n(cke,"STRONG",{});var J1t=s(dbe);E_r=r(J1t,"bert"),J1t.forEach(t),C_r=r(cke," \u2014 "),eW=n(cke,"A",{href:!0});var Y1t=s(eW);w_r=r(Y1t,"TFBertForSequenceClassification"),Y1t.forEach(t),A_r=r(cke," (BERT model)"),cke.forEach(t),y_r=i(te),I7=n(te,"LI",{});var fke=s(I7);cbe=n(fke,"STRONG",{});var K1t=s(cbe);L_r=r(K1t,"camembert"),K1t.forEach(t),x_r=r(fke," \u2014 "),oW=n(fke,"A",{href:!0});var Z1t=s(oW);$_r=r(Z1t,"TFCamembertForSequenceClassification"),Z1t.forEach(t),k_r=r(fke," (CamemBERT model)"),fke.forEach(t),S_r=i(te),q7=n(te,"LI",{});var mke=s(q7);fbe=n(mke,"STRONG",{});var ebt=s(fbe);R_r=r(ebt,"convbert"),ebt.forEach(t),B_r=r(mke," \u2014 "),rW=n(mke,"A",{href:!0});var obt=s(rW);P_r=r(obt,"TFConvBertForSequenceClassification"),obt.forEach(t),I_r=r(mke," (ConvBERT model)"),mke.forEach(t),q_r=i(te),N7=n(te,"LI",{});var gke=s(N7);mbe=n(gke,"STRONG",{});var rbt=s(mbe);N_r=r(rbt,"ctrl"),rbt.forEach(t),j_r=r(gke," \u2014 "),tW=n(gke,"A",{href:!0});var tbt=s(tW);D_r=r(tbt,"TFCTRLForSequenceClassification"),tbt.forEach(t),G_r=r(gke," (CTRL model)"),gke.forEach(t),O_r=i(te),j7=n(te,"LI",{});var hke=s(j7);gbe=n(hke,"STRONG",{});var abt=s(gbe);V_r=r(abt,"deberta"),abt.forEach(t),X_r=r(hke," \u2014 "),aW=n(hke,"A",{href:!0});var nbt=s(aW);z_r=r(nbt,"TFDebertaForSequenceClassification"),nbt.forEach(t),Q_r=r(hke," (DeBERTa model)"),hke.forEach(t),W_r=i(te),D7=n(te,"LI",{});var pke=s(D7);hbe=n(pke,"STRONG",{});var sbt=s(hbe);H_r=r(sbt,"deberta-v2"),sbt.forEach(t),U_r=r(pke," \u2014 "),nW=n(pke,"A",{href:!0});var lbt=s(nW);J_r=r(lbt,"TFDebertaV2ForSequenceClassification"),lbt.forEach(t),Y_r=r(pke," (DeBERTa-v2 model)"),pke.forEach(t),K_r=i(te),G7=n(te,"LI",{});var uke=s(G7);pbe=n(uke,"STRONG",{});var ibt=s(pbe);Z_r=r(ibt,"distilbert"),ibt.forEach(t),e0r=r(uke," \u2014 "),sW=n(uke,"A",{href:!0});var dbt=s(sW);o0r=r(dbt,"TFDistilBertForSequenceClassification"),dbt.forEach(t),r0r=r(uke," (DistilBERT model)"),uke.forEach(t),t0r=i(te),O7=n(te,"LI",{});var _ke=s(O7);ube=n(_ke,"STRONG",{});var cbt=s(ube);a0r=r(cbt,"electra"),cbt.forEach(t),n0r=r(_ke," \u2014 "),lW=n(_ke,"A",{href:!0});var fbt=s(lW);s0r=r(fbt,"TFElectraForSequenceClassification"),fbt.forEach(t),l0r=r(_ke," (ELECTRA model)"),_ke.forEach(t),i0r=i(te),V7=n(te,"LI",{});var bke=s(V7);_be=n(bke,"STRONG",{});var mbt=s(_be);d0r=r(mbt,"flaubert"),mbt.forEach(t),c0r=r(bke," \u2014 "),iW=n(bke,"A",{href:!0});var gbt=s(iW);f0r=r(gbt,"TFFlaubertForSequenceClassification"),gbt.forEach(t),m0r=r(bke," (FlauBERT model)"),bke.forEach(t),g0r=i(te),X7=n(te,"LI",{});var vke=s(X7);bbe=n(vke,"STRONG",{});var hbt=s(bbe);h0r=r(hbt,"funnel"),hbt.forEach(t),p0r=r(vke," \u2014 "),dW=n(vke,"A",{href:!0});var pbt=s(dW);u0r=r(pbt,"TFFunnelForSequenceClassification"),pbt.forEach(t),_0r=r(vke," (Funnel Transformer model)"),vke.forEach(t),b0r=i(te),z7=n(te,"LI",{});var Fke=s(z7);vbe=n(Fke,"STRONG",{});var ubt=s(vbe);v0r=r(ubt,"gpt2"),ubt.forEach(t),F0r=r(Fke," \u2014 "),cW=n(Fke,"A",{href:!0});var _bt=s(cW);T0r=r(_bt,"TFGPT2ForSequenceClassification"),_bt.forEach(t),M0r=r(Fke," (OpenAI GPT-2 model)"),Fke.forEach(t),E0r=i(te),Q7=n(te,"LI",{});var Tke=s(Q7);Fbe=n(Tke,"STRONG",{});var bbt=s(Fbe);C0r=r(bbt,"gptj"),bbt.forEach(t),w0r=r(Tke," \u2014 "),fW=n(Tke,"A",{href:!0});var vbt=s(fW);A0r=r(vbt,"TFGPTJForSequenceClassification"),vbt.forEach(t),y0r=r(Tke," (GPT-J model)"),Tke.forEach(t),L0r=i(te),W7=n(te,"LI",{});var Mke=s(W7);Tbe=n(Mke,"STRONG",{});var Fbt=s(Tbe);x0r=r(Fbt,"layoutlm"),Fbt.forEach(t),$0r=r(Mke," \u2014 "),mW=n(Mke,"A",{href:!0});var Tbt=s(mW);k0r=r(Tbt,"TFLayoutLMForSequenceClassification"),Tbt.forEach(t),S0r=r(Mke," (LayoutLM model)"),Mke.forEach(t),R0r=i(te),H7=n(te,"LI",{});var Eke=s(H7);Mbe=n(Eke,"STRONG",{});var Mbt=s(Mbe);B0r=r(Mbt,"longformer"),Mbt.forEach(t),P0r=r(Eke," \u2014 "),gW=n(Eke,"A",{href:!0});var Ebt=s(gW);I0r=r(Ebt,"TFLongformerForSequenceClassification"),Ebt.forEach(t),q0r=r(Eke," (Longformer model)"),Eke.forEach(t),N0r=i(te),U7=n(te,"LI",{});var Cke=s(U7);Ebe=n(Cke,"STRONG",{});var Cbt=s(Ebe);j0r=r(Cbt,"mobilebert"),Cbt.forEach(t),D0r=r(Cke," \u2014 "),hW=n(Cke,"A",{href:!0});var wbt=s(hW);G0r=r(wbt,"TFMobileBertForSequenceClassification"),wbt.forEach(t),O0r=r(Cke," (MobileBERT model)"),Cke.forEach(t),V0r=i(te),J7=n(te,"LI",{});var wke=s(J7);Cbe=n(wke,"STRONG",{});var Abt=s(Cbe);X0r=r(Abt,"mpnet"),Abt.forEach(t),z0r=r(wke," \u2014 "),pW=n(wke,"A",{href:!0});var ybt=s(pW);Q0r=r(ybt,"TFMPNetForSequenceClassification"),ybt.forEach(t),W0r=r(wke," (MPNet model)"),wke.forEach(t),H0r=i(te),Y7=n(te,"LI",{});var Ake=s(Y7);wbe=n(Ake,"STRONG",{});var Lbt=s(wbe);U0r=r(Lbt,"openai-gpt"),Lbt.forEach(t),J0r=r(Ake," \u2014 "),uW=n(Ake,"A",{href:!0});var xbt=s(uW);Y0r=r(xbt,"TFOpenAIGPTForSequenceClassification"),xbt.forEach(t),K0r=r(Ake," (OpenAI GPT model)"),Ake.forEach(t),Z0r=i(te),K7=n(te,"LI",{});var yke=s(K7);Abe=n(yke,"STRONG",{});var $bt=s(Abe);e1r=r($bt,"rembert"),$bt.forEach(t),o1r=r(yke," \u2014 "),_W=n(yke,"A",{href:!0});var kbt=s(_W);r1r=r(kbt,"TFRemBertForSequenceClassification"),kbt.forEach(t),t1r=r(yke," (RemBERT model)"),yke.forEach(t),a1r=i(te),Z7=n(te,"LI",{});var Lke=s(Z7);ybe=n(Lke,"STRONG",{});var Sbt=s(ybe);n1r=r(Sbt,"roberta"),Sbt.forEach(t),s1r=r(Lke," \u2014 "),bW=n(Lke,"A",{href:!0});var Rbt=s(bW);l1r=r(Rbt,"TFRobertaForSequenceClassification"),Rbt.forEach(t),i1r=r(Lke," (RoBERTa model)"),Lke.forEach(t),d1r=i(te),eM=n(te,"LI",{});var xke=s(eM);Lbe=n(xke,"STRONG",{});var Bbt=s(Lbe);c1r=r(Bbt,"roformer"),Bbt.forEach(t),f1r=r(xke," \u2014 "),vW=n(xke,"A",{href:!0});var Pbt=s(vW);m1r=r(Pbt,"TFRoFormerForSequenceClassification"),Pbt.forEach(t),g1r=r(xke," (RoFormer model)"),xke.forEach(t),h1r=i(te),oM=n(te,"LI",{});var $ke=s(oM);xbe=n($ke,"STRONG",{});var Ibt=s(xbe);p1r=r(Ibt,"tapas"),Ibt.forEach(t),u1r=r($ke," \u2014 "),FW=n($ke,"A",{href:!0});var qbt=s(FW);_1r=r(qbt,"TFTapasForSequenceClassification"),qbt.forEach(t),b1r=r($ke," (TAPAS model)"),$ke.forEach(t),v1r=i(te),rM=n(te,"LI",{});var kke=s(rM);$be=n(kke,"STRONG",{});var Nbt=s($be);F1r=r(Nbt,"transfo-xl"),Nbt.forEach(t),T1r=r(kke," \u2014 "),TW=n(kke,"A",{href:!0});var jbt=s(TW);M1r=r(jbt,"TFTransfoXLForSequenceClassification"),jbt.forEach(t),E1r=r(kke," (Transformer-XL model)"),kke.forEach(t),C1r=i(te),tM=n(te,"LI",{});var Ske=s(tM);kbe=n(Ske,"STRONG",{});var Dbt=s(kbe);w1r=r(Dbt,"xlm"),Dbt.forEach(t),A1r=r(Ske," \u2014 "),MW=n(Ske,"A",{href:!0});var Gbt=s(MW);y1r=r(Gbt,"TFXLMForSequenceClassification"),Gbt.forEach(t),L1r=r(Ske," (XLM model)"),Ske.forEach(t),x1r=i(te),aM=n(te,"LI",{});var Rke=s(aM);Sbe=n(Rke,"STRONG",{});var Obt=s(Sbe);$1r=r(Obt,"xlm-roberta"),Obt.forEach(t),k1r=r(Rke," \u2014 "),EW=n(Rke,"A",{href:!0});var Vbt=s(EW);S1r=r(Vbt,"TFXLMRobertaForSequenceClassification"),Vbt.forEach(t),R1r=r(Rke," (XLM-RoBERTa model)"),Rke.forEach(t),B1r=i(te),nM=n(te,"LI",{});var Bke=s(nM);Rbe=n(Bke,"STRONG",{});var Xbt=s(Rbe);P1r=r(Xbt,"xlnet"),Xbt.forEach(t),I1r=r(Bke," \u2014 "),CW=n(Bke,"A",{href:!0});var zbt=s(CW);q1r=r(zbt,"TFXLNetForSequenceClassification"),zbt.forEach(t),N1r=r(Bke," (XLNet model)"),Bke.forEach(t),te.forEach(t),j1r=i(vl),T(sM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),tIe=i(f),Zd=n(f,"H2",{class:!0});var iNe=s(Zd);lM=n(iNe,"A",{id:!0,class:!0,href:!0});var Qbt=s(lM);Bbe=n(Qbt,"SPAN",{});var Wbt=s(Bbe);T(QL.$$.fragment,Wbt),Wbt.forEach(t),Qbt.forEach(t),D1r=i(iNe),Pbe=n(iNe,"SPAN",{});var Hbt=s(Pbe);G1r=r(Hbt,"TFAutoModelForMultipleChoice"),Hbt.forEach(t),iNe.forEach(t),aIe=i(f),ar=n(f,"DIV",{class:!0});var Fl=s(ar);T(WL.$$.fragment,Fl),O1r=i(Fl),ec=n(Fl,"P",{});var IK=s(ec);V1r=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wW=n(IK,"A",{href:!0});var Ubt=s(wW);X1r=r(Ubt,"from_pretrained()"),Ubt.forEach(t),z1r=r(IK," class method or the "),AW=n(IK,"A",{href:!0});var Jbt=s(AW);Q1r=r(Jbt,"from_config()"),Jbt.forEach(t),W1r=r(IK,` class
method.`),IK.forEach(t),H1r=i(Fl),HL=n(Fl,"P",{});var dNe=s(HL);U1r=r(dNe,"This class cannot be instantiated directly using "),Ibe=n(dNe,"CODE",{});var Ybt=s(Ibe);J1r=r(Ybt,"__init__()"),Ybt.forEach(t),Y1r=r(dNe," (throws an error)."),dNe.forEach(t),K1r=i(Fl),$t=n(Fl,"DIV",{class:!0});var V3=s($t);T(UL.$$.fragment,V3),Z1r=i(V3),qbe=n(V3,"P",{});var Kbt=s(qbe);ebr=r(Kbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kbt.forEach(t),obr=i(V3),oc=n(V3,"P",{});var qK=s(oc);rbr=r(qK,`Note:
Loading a model from its configuration file does `),Nbe=n(qK,"STRONG",{});var Zbt=s(Nbe);tbr=r(Zbt,"not"),Zbt.forEach(t),abr=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(qK,"A",{href:!0});var e2t=s(yW);nbr=r(e2t,"from_pretrained()"),e2t.forEach(t),sbr=r(qK," to load the model weights."),qK.forEach(t),lbr=i(V3),T(iM.$$.fragment,V3),V3.forEach(t),ibr=i(Fl),kr=n(Fl,"DIV",{class:!0});var Tl=s(kr);T(JL.$$.fragment,Tl),dbr=i(Tl),jbe=n(Tl,"P",{});var o2t=s(jbe);cbr=r(o2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),o2t.forEach(t),fbr=i(Tl),rn=n(Tl,"P",{});var X3=s(rn);mbr=r(X3,"The model class to instantiate is selected based on the "),Dbe=n(X3,"CODE",{});var r2t=s(Dbe);gbr=r(r2t,"model_type"),r2t.forEach(t),hbr=r(X3,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(X3,"CODE",{});var t2t=s(Gbe);pbr=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),ubr=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(X3,"CODE",{});var a2t=s(Obe);_br=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),bbr=r(X3,":"),X3.forEach(t),vbr=i(Tl),pe=n(Tl,"UL",{});var _e=s(pe);dM=n(_e,"LI",{});var Pke=s(dM);Vbe=n(Pke,"STRONG",{});var n2t=s(Vbe);Fbr=r(n2t,"albert"),n2t.forEach(t),Tbr=r(Pke," \u2014 "),LW=n(Pke,"A",{href:!0});var s2t=s(LW);Mbr=r(s2t,"TFAlbertForMultipleChoice"),s2t.forEach(t),Ebr=r(Pke," (ALBERT model)"),Pke.forEach(t),Cbr=i(_e),cM=n(_e,"LI",{});var Ike=s(cM);Xbe=n(Ike,"STRONG",{});var l2t=s(Xbe);wbr=r(l2t,"bert"),l2t.forEach(t),Abr=r(Ike," \u2014 "),xW=n(Ike,"A",{href:!0});var i2t=s(xW);ybr=r(i2t,"TFBertForMultipleChoice"),i2t.forEach(t),Lbr=r(Ike," (BERT model)"),Ike.forEach(t),xbr=i(_e),fM=n(_e,"LI",{});var qke=s(fM);zbe=n(qke,"STRONG",{});var d2t=s(zbe);$br=r(d2t,"camembert"),d2t.forEach(t),kbr=r(qke," \u2014 "),$W=n(qke,"A",{href:!0});var c2t=s($W);Sbr=r(c2t,"TFCamembertForMultipleChoice"),c2t.forEach(t),Rbr=r(qke," (CamemBERT model)"),qke.forEach(t),Bbr=i(_e),mM=n(_e,"LI",{});var Nke=s(mM);Qbe=n(Nke,"STRONG",{});var f2t=s(Qbe);Pbr=r(f2t,"convbert"),f2t.forEach(t),Ibr=r(Nke," \u2014 "),kW=n(Nke,"A",{href:!0});var m2t=s(kW);qbr=r(m2t,"TFConvBertForMultipleChoice"),m2t.forEach(t),Nbr=r(Nke," (ConvBERT model)"),Nke.forEach(t),jbr=i(_e),gM=n(_e,"LI",{});var jke=s(gM);Wbe=n(jke,"STRONG",{});var g2t=s(Wbe);Dbr=r(g2t,"distilbert"),g2t.forEach(t),Gbr=r(jke," \u2014 "),SW=n(jke,"A",{href:!0});var h2t=s(SW);Obr=r(h2t,"TFDistilBertForMultipleChoice"),h2t.forEach(t),Vbr=r(jke," (DistilBERT model)"),jke.forEach(t),Xbr=i(_e),hM=n(_e,"LI",{});var Dke=s(hM);Hbe=n(Dke,"STRONG",{});var p2t=s(Hbe);zbr=r(p2t,"electra"),p2t.forEach(t),Qbr=r(Dke," \u2014 "),RW=n(Dke,"A",{href:!0});var u2t=s(RW);Wbr=r(u2t,"TFElectraForMultipleChoice"),u2t.forEach(t),Hbr=r(Dke," (ELECTRA model)"),Dke.forEach(t),Ubr=i(_e),pM=n(_e,"LI",{});var Gke=s(pM);Ube=n(Gke,"STRONG",{});var _2t=s(Ube);Jbr=r(_2t,"flaubert"),_2t.forEach(t),Ybr=r(Gke," \u2014 "),BW=n(Gke,"A",{href:!0});var b2t=s(BW);Kbr=r(b2t,"TFFlaubertForMultipleChoice"),b2t.forEach(t),Zbr=r(Gke," (FlauBERT model)"),Gke.forEach(t),e2r=i(_e),uM=n(_e,"LI",{});var Oke=s(uM);Jbe=n(Oke,"STRONG",{});var v2t=s(Jbe);o2r=r(v2t,"funnel"),v2t.forEach(t),r2r=r(Oke," \u2014 "),PW=n(Oke,"A",{href:!0});var F2t=s(PW);t2r=r(F2t,"TFFunnelForMultipleChoice"),F2t.forEach(t),a2r=r(Oke," (Funnel Transformer model)"),Oke.forEach(t),n2r=i(_e),_M=n(_e,"LI",{});var Vke=s(_M);Ybe=n(Vke,"STRONG",{});var T2t=s(Ybe);s2r=r(T2t,"longformer"),T2t.forEach(t),l2r=r(Vke," \u2014 "),IW=n(Vke,"A",{href:!0});var M2t=s(IW);i2r=r(M2t,"TFLongformerForMultipleChoice"),M2t.forEach(t),d2r=r(Vke," (Longformer model)"),Vke.forEach(t),c2r=i(_e),bM=n(_e,"LI",{});var Xke=s(bM);Kbe=n(Xke,"STRONG",{});var E2t=s(Kbe);f2r=r(E2t,"mobilebert"),E2t.forEach(t),m2r=r(Xke," \u2014 "),qW=n(Xke,"A",{href:!0});var C2t=s(qW);g2r=r(C2t,"TFMobileBertForMultipleChoice"),C2t.forEach(t),h2r=r(Xke," (MobileBERT model)"),Xke.forEach(t),p2r=i(_e),vM=n(_e,"LI",{});var zke=s(vM);Zbe=n(zke,"STRONG",{});var w2t=s(Zbe);u2r=r(w2t,"mpnet"),w2t.forEach(t),_2r=r(zke," \u2014 "),NW=n(zke,"A",{href:!0});var A2t=s(NW);b2r=r(A2t,"TFMPNetForMultipleChoice"),A2t.forEach(t),v2r=r(zke," (MPNet model)"),zke.forEach(t),F2r=i(_e),FM=n(_e,"LI",{});var Qke=s(FM);e2e=n(Qke,"STRONG",{});var y2t=s(e2e);T2r=r(y2t,"rembert"),y2t.forEach(t),M2r=r(Qke," \u2014 "),jW=n(Qke,"A",{href:!0});var L2t=s(jW);E2r=r(L2t,"TFRemBertForMultipleChoice"),L2t.forEach(t),C2r=r(Qke," (RemBERT model)"),Qke.forEach(t),w2r=i(_e),TM=n(_e,"LI",{});var Wke=s(TM);o2e=n(Wke,"STRONG",{});var x2t=s(o2e);A2r=r(x2t,"roberta"),x2t.forEach(t),y2r=r(Wke," \u2014 "),DW=n(Wke,"A",{href:!0});var $2t=s(DW);L2r=r($2t,"TFRobertaForMultipleChoice"),$2t.forEach(t),x2r=r(Wke," (RoBERTa model)"),Wke.forEach(t),$2r=i(_e),MM=n(_e,"LI",{});var Hke=s(MM);r2e=n(Hke,"STRONG",{});var k2t=s(r2e);k2r=r(k2t,"roformer"),k2t.forEach(t),S2r=r(Hke," \u2014 "),GW=n(Hke,"A",{href:!0});var S2t=s(GW);R2r=r(S2t,"TFRoFormerForMultipleChoice"),S2t.forEach(t),B2r=r(Hke," (RoFormer model)"),Hke.forEach(t),P2r=i(_e),EM=n(_e,"LI",{});var Uke=s(EM);t2e=n(Uke,"STRONG",{});var R2t=s(t2e);I2r=r(R2t,"xlm"),R2t.forEach(t),q2r=r(Uke," \u2014 "),OW=n(Uke,"A",{href:!0});var B2t=s(OW);N2r=r(B2t,"TFXLMForMultipleChoice"),B2t.forEach(t),j2r=r(Uke," (XLM model)"),Uke.forEach(t),D2r=i(_e),CM=n(_e,"LI",{});var Jke=s(CM);a2e=n(Jke,"STRONG",{});var P2t=s(a2e);G2r=r(P2t,"xlm-roberta"),P2t.forEach(t),O2r=r(Jke," \u2014 "),VW=n(Jke,"A",{href:!0});var I2t=s(VW);V2r=r(I2t,"TFXLMRobertaForMultipleChoice"),I2t.forEach(t),X2r=r(Jke," (XLM-RoBERTa model)"),Jke.forEach(t),z2r=i(_e),wM=n(_e,"LI",{});var Yke=s(wM);n2e=n(Yke,"STRONG",{});var q2t=s(n2e);Q2r=r(q2t,"xlnet"),q2t.forEach(t),W2r=r(Yke," \u2014 "),XW=n(Yke,"A",{href:!0});var N2t=s(XW);H2r=r(N2t,"TFXLNetForMultipleChoice"),N2t.forEach(t),U2r=r(Yke," (XLNet model)"),Yke.forEach(t),_e.forEach(t),J2r=i(Tl),T(AM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),nIe=i(f),rc=n(f,"H2",{class:!0});var cNe=s(rc);yM=n(cNe,"A",{id:!0,class:!0,href:!0});var j2t=s(yM);s2e=n(j2t,"SPAN",{});var D2t=s(s2e);T(YL.$$.fragment,D2t),D2t.forEach(t),j2t.forEach(t),Y2r=i(cNe),l2e=n(cNe,"SPAN",{});var G2t=s(l2e);K2r=r(G2t,"TFAutoModelForTableQuestionAnswering"),G2t.forEach(t),cNe.forEach(t),sIe=i(f),nr=n(f,"DIV",{class:!0});var Ml=s(nr);T(KL.$$.fragment,Ml),Z2r=i(Ml),tc=n(Ml,"P",{});var NK=s(tc);evr=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zW=n(NK,"A",{href:!0});var O2t=s(zW);ovr=r(O2t,"from_pretrained()"),O2t.forEach(t),rvr=r(NK," class method or the "),QW=n(NK,"A",{href:!0});var V2t=s(QW);tvr=r(V2t,"from_config()"),V2t.forEach(t),avr=r(NK,` class
method.`),NK.forEach(t),nvr=i(Ml),ZL=n(Ml,"P",{});var fNe=s(ZL);svr=r(fNe,"This class cannot be instantiated directly using "),i2e=n(fNe,"CODE",{});var X2t=s(i2e);lvr=r(X2t,"__init__()"),X2t.forEach(t),ivr=r(fNe," (throws an error)."),fNe.forEach(t),dvr=i(Ml),kt=n(Ml,"DIV",{class:!0});var z3=s(kt);T(e8.$$.fragment,z3),cvr=i(z3),d2e=n(z3,"P",{});var z2t=s(d2e);fvr=r(z2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),z2t.forEach(t),mvr=i(z3),ac=n(z3,"P",{});var jK=s(ac);gvr=r(jK,`Note:
Loading a model from its configuration file does `),c2e=n(jK,"STRONG",{});var Q2t=s(c2e);hvr=r(Q2t,"not"),Q2t.forEach(t),pvr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(jK,"A",{href:!0});var W2t=s(WW);uvr=r(W2t,"from_pretrained()"),W2t.forEach(t),_vr=r(jK," to load the model weights."),jK.forEach(t),bvr=i(z3),T(LM.$$.fragment,z3),z3.forEach(t),vvr=i(Ml),Sr=n(Ml,"DIV",{class:!0});var El=s(Sr);T(o8.$$.fragment,El),Fvr=i(El),f2e=n(El,"P",{});var H2t=s(f2e);Tvr=r(H2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),H2t.forEach(t),Mvr=i(El),tn=n(El,"P",{});var Q3=s(tn);Evr=r(Q3,"The model class to instantiate is selected based on the "),m2e=n(Q3,"CODE",{});var U2t=s(m2e);Cvr=r(U2t,"model_type"),U2t.forEach(t),wvr=r(Q3,` property of the config object (either
passed as an argument or loaded from `),g2e=n(Q3,"CODE",{});var J2t=s(g2e);Avr=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),yvr=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=n(Q3,"CODE",{});var Y2t=s(h2e);Lvr=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),xvr=r(Q3,":"),Q3.forEach(t),$vr=i(El),p2e=n(El,"UL",{});var K2t=s(p2e);xM=n(K2t,"LI",{});var Kke=s(xM);u2e=n(Kke,"STRONG",{});var Z2t=s(u2e);kvr=r(Z2t,"tapas"),Z2t.forEach(t),Svr=r(Kke," \u2014 "),HW=n(Kke,"A",{href:!0});var evt=s(HW);Rvr=r(evt,"TFTapasForQuestionAnswering"),evt.forEach(t),Bvr=r(Kke," (TAPAS model)"),Kke.forEach(t),K2t.forEach(t),Pvr=i(El),T($M.$$.fragment,El),El.forEach(t),Ml.forEach(t),lIe=i(f),nc=n(f,"H2",{class:!0});var mNe=s(nc);kM=n(mNe,"A",{id:!0,class:!0,href:!0});var ovt=s(kM);_2e=n(ovt,"SPAN",{});var rvt=s(_2e);T(r8.$$.fragment,rvt),rvt.forEach(t),ovt.forEach(t),Ivr=i(mNe),b2e=n(mNe,"SPAN",{});var tvt=s(b2e);qvr=r(tvt,"TFAutoModelForTokenClassification"),tvt.forEach(t),mNe.forEach(t),iIe=i(f),sr=n(f,"DIV",{class:!0});var Cl=s(sr);T(t8.$$.fragment,Cl),Nvr=i(Cl),sc=n(Cl,"P",{});var DK=s(sc);jvr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UW=n(DK,"A",{href:!0});var avt=s(UW);Dvr=r(avt,"from_pretrained()"),avt.forEach(t),Gvr=r(DK," class method or the "),JW=n(DK,"A",{href:!0});var nvt=s(JW);Ovr=r(nvt,"from_config()"),nvt.forEach(t),Vvr=r(DK,` class
method.`),DK.forEach(t),Xvr=i(Cl),a8=n(Cl,"P",{});var gNe=s(a8);zvr=r(gNe,"This class cannot be instantiated directly using "),v2e=n(gNe,"CODE",{});var svt=s(v2e);Qvr=r(svt,"__init__()"),svt.forEach(t),Wvr=r(gNe," (throws an error)."),gNe.forEach(t),Hvr=i(Cl),St=n(Cl,"DIV",{class:!0});var W3=s(St);T(n8.$$.fragment,W3),Uvr=i(W3),F2e=n(W3,"P",{});var lvt=s(F2e);Jvr=r(lvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lvt.forEach(t),Yvr=i(W3),lc=n(W3,"P",{});var GK=s(lc);Kvr=r(GK,`Note:
Loading a model from its configuration file does `),T2e=n(GK,"STRONG",{});var ivt=s(T2e);Zvr=r(ivt,"not"),ivt.forEach(t),eFr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(GK,"A",{href:!0});var dvt=s(YW);oFr=r(dvt,"from_pretrained()"),dvt.forEach(t),rFr=r(GK," to load the model weights."),GK.forEach(t),tFr=i(W3),T(SM.$$.fragment,W3),W3.forEach(t),aFr=i(Cl),Rr=n(Cl,"DIV",{class:!0});var wl=s(Rr);T(s8.$$.fragment,wl),nFr=i(wl),M2e=n(wl,"P",{});var cvt=s(M2e);sFr=r(cvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cvt.forEach(t),lFr=i(wl),an=n(wl,"P",{});var H3=s(an);iFr=r(H3,"The model class to instantiate is selected based on the "),E2e=n(H3,"CODE",{});var fvt=s(E2e);dFr=r(fvt,"model_type"),fvt.forEach(t),cFr=r(H3,` property of the config object (either
passed as an argument or loaded from `),C2e=n(H3,"CODE",{});var mvt=s(C2e);fFr=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),mFr=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(H3,"CODE",{});var gvt=s(w2e);gFr=r(gvt,"pretrained_model_name_or_path"),gvt.forEach(t),hFr=r(H3,":"),H3.forEach(t),pFr=i(wl),de=n(wl,"UL",{});var me=s(de);RM=n(me,"LI",{});var Zke=s(RM);A2e=n(Zke,"STRONG",{});var hvt=s(A2e);uFr=r(hvt,"albert"),hvt.forEach(t),_Fr=r(Zke," \u2014 "),KW=n(Zke,"A",{href:!0});var pvt=s(KW);bFr=r(pvt,"TFAlbertForTokenClassification"),pvt.forEach(t),vFr=r(Zke," (ALBERT model)"),Zke.forEach(t),FFr=i(me),BM=n(me,"LI",{});var eSe=s(BM);y2e=n(eSe,"STRONG",{});var uvt=s(y2e);TFr=r(uvt,"bert"),uvt.forEach(t),MFr=r(eSe," \u2014 "),ZW=n(eSe,"A",{href:!0});var _vt=s(ZW);EFr=r(_vt,"TFBertForTokenClassification"),_vt.forEach(t),CFr=r(eSe," (BERT model)"),eSe.forEach(t),wFr=i(me),PM=n(me,"LI",{});var oSe=s(PM);L2e=n(oSe,"STRONG",{});var bvt=s(L2e);AFr=r(bvt,"camembert"),bvt.forEach(t),yFr=r(oSe," \u2014 "),eH=n(oSe,"A",{href:!0});var vvt=s(eH);LFr=r(vvt,"TFCamembertForTokenClassification"),vvt.forEach(t),xFr=r(oSe," (CamemBERT model)"),oSe.forEach(t),$Fr=i(me),IM=n(me,"LI",{});var rSe=s(IM);x2e=n(rSe,"STRONG",{});var Fvt=s(x2e);kFr=r(Fvt,"convbert"),Fvt.forEach(t),SFr=r(rSe," \u2014 "),oH=n(rSe,"A",{href:!0});var Tvt=s(oH);RFr=r(Tvt,"TFConvBertForTokenClassification"),Tvt.forEach(t),BFr=r(rSe," (ConvBERT model)"),rSe.forEach(t),PFr=i(me),qM=n(me,"LI",{});var tSe=s(qM);$2e=n(tSe,"STRONG",{});var Mvt=s($2e);IFr=r(Mvt,"deberta"),Mvt.forEach(t),qFr=r(tSe," \u2014 "),rH=n(tSe,"A",{href:!0});var Evt=s(rH);NFr=r(Evt,"TFDebertaForTokenClassification"),Evt.forEach(t),jFr=r(tSe," (DeBERTa model)"),tSe.forEach(t),DFr=i(me),NM=n(me,"LI",{});var aSe=s(NM);k2e=n(aSe,"STRONG",{});var Cvt=s(k2e);GFr=r(Cvt,"deberta-v2"),Cvt.forEach(t),OFr=r(aSe," \u2014 "),tH=n(aSe,"A",{href:!0});var wvt=s(tH);VFr=r(wvt,"TFDebertaV2ForTokenClassification"),wvt.forEach(t),XFr=r(aSe," (DeBERTa-v2 model)"),aSe.forEach(t),zFr=i(me),jM=n(me,"LI",{});var nSe=s(jM);S2e=n(nSe,"STRONG",{});var Avt=s(S2e);QFr=r(Avt,"distilbert"),Avt.forEach(t),WFr=r(nSe," \u2014 "),aH=n(nSe,"A",{href:!0});var yvt=s(aH);HFr=r(yvt,"TFDistilBertForTokenClassification"),yvt.forEach(t),UFr=r(nSe," (DistilBERT model)"),nSe.forEach(t),JFr=i(me),DM=n(me,"LI",{});var sSe=s(DM);R2e=n(sSe,"STRONG",{});var Lvt=s(R2e);YFr=r(Lvt,"electra"),Lvt.forEach(t),KFr=r(sSe," \u2014 "),nH=n(sSe,"A",{href:!0});var xvt=s(nH);ZFr=r(xvt,"TFElectraForTokenClassification"),xvt.forEach(t),e6r=r(sSe," (ELECTRA model)"),sSe.forEach(t),o6r=i(me),GM=n(me,"LI",{});var lSe=s(GM);B2e=n(lSe,"STRONG",{});var $vt=s(B2e);r6r=r($vt,"flaubert"),$vt.forEach(t),t6r=r(lSe," \u2014 "),sH=n(lSe,"A",{href:!0});var kvt=s(sH);a6r=r(kvt,"TFFlaubertForTokenClassification"),kvt.forEach(t),n6r=r(lSe," (FlauBERT model)"),lSe.forEach(t),s6r=i(me),OM=n(me,"LI",{});var iSe=s(OM);P2e=n(iSe,"STRONG",{});var Svt=s(P2e);l6r=r(Svt,"funnel"),Svt.forEach(t),i6r=r(iSe," \u2014 "),lH=n(iSe,"A",{href:!0});var Rvt=s(lH);d6r=r(Rvt,"TFFunnelForTokenClassification"),Rvt.forEach(t),c6r=r(iSe," (Funnel Transformer model)"),iSe.forEach(t),f6r=i(me),VM=n(me,"LI",{});var dSe=s(VM);I2e=n(dSe,"STRONG",{});var Bvt=s(I2e);m6r=r(Bvt,"layoutlm"),Bvt.forEach(t),g6r=r(dSe," \u2014 "),iH=n(dSe,"A",{href:!0});var Pvt=s(iH);h6r=r(Pvt,"TFLayoutLMForTokenClassification"),Pvt.forEach(t),p6r=r(dSe," (LayoutLM model)"),dSe.forEach(t),u6r=i(me),XM=n(me,"LI",{});var cSe=s(XM);q2e=n(cSe,"STRONG",{});var Ivt=s(q2e);_6r=r(Ivt,"longformer"),Ivt.forEach(t),b6r=r(cSe," \u2014 "),dH=n(cSe,"A",{href:!0});var qvt=s(dH);v6r=r(qvt,"TFLongformerForTokenClassification"),qvt.forEach(t),F6r=r(cSe," (Longformer model)"),cSe.forEach(t),T6r=i(me),zM=n(me,"LI",{});var fSe=s(zM);N2e=n(fSe,"STRONG",{});var Nvt=s(N2e);M6r=r(Nvt,"mobilebert"),Nvt.forEach(t),E6r=r(fSe," \u2014 "),cH=n(fSe,"A",{href:!0});var jvt=s(cH);C6r=r(jvt,"TFMobileBertForTokenClassification"),jvt.forEach(t),w6r=r(fSe," (MobileBERT model)"),fSe.forEach(t),A6r=i(me),QM=n(me,"LI",{});var mSe=s(QM);j2e=n(mSe,"STRONG",{});var Dvt=s(j2e);y6r=r(Dvt,"mpnet"),Dvt.forEach(t),L6r=r(mSe," \u2014 "),fH=n(mSe,"A",{href:!0});var Gvt=s(fH);x6r=r(Gvt,"TFMPNetForTokenClassification"),Gvt.forEach(t),$6r=r(mSe," (MPNet model)"),mSe.forEach(t),k6r=i(me),WM=n(me,"LI",{});var gSe=s(WM);D2e=n(gSe,"STRONG",{});var Ovt=s(D2e);S6r=r(Ovt,"rembert"),Ovt.forEach(t),R6r=r(gSe," \u2014 "),mH=n(gSe,"A",{href:!0});var Vvt=s(mH);B6r=r(Vvt,"TFRemBertForTokenClassification"),Vvt.forEach(t),P6r=r(gSe," (RemBERT model)"),gSe.forEach(t),I6r=i(me),HM=n(me,"LI",{});var hSe=s(HM);G2e=n(hSe,"STRONG",{});var Xvt=s(G2e);q6r=r(Xvt,"roberta"),Xvt.forEach(t),N6r=r(hSe," \u2014 "),gH=n(hSe,"A",{href:!0});var zvt=s(gH);j6r=r(zvt,"TFRobertaForTokenClassification"),zvt.forEach(t),D6r=r(hSe," (RoBERTa model)"),hSe.forEach(t),G6r=i(me),UM=n(me,"LI",{});var pSe=s(UM);O2e=n(pSe,"STRONG",{});var Qvt=s(O2e);O6r=r(Qvt,"roformer"),Qvt.forEach(t),V6r=r(pSe," \u2014 "),hH=n(pSe,"A",{href:!0});var Wvt=s(hH);X6r=r(Wvt,"TFRoFormerForTokenClassification"),Wvt.forEach(t),z6r=r(pSe," (RoFormer model)"),pSe.forEach(t),Q6r=i(me),JM=n(me,"LI",{});var uSe=s(JM);V2e=n(uSe,"STRONG",{});var Hvt=s(V2e);W6r=r(Hvt,"xlm"),Hvt.forEach(t),H6r=r(uSe," \u2014 "),pH=n(uSe,"A",{href:!0});var Uvt=s(pH);U6r=r(Uvt,"TFXLMForTokenClassification"),Uvt.forEach(t),J6r=r(uSe," (XLM model)"),uSe.forEach(t),Y6r=i(me),YM=n(me,"LI",{});var _Se=s(YM);X2e=n(_Se,"STRONG",{});var Jvt=s(X2e);K6r=r(Jvt,"xlm-roberta"),Jvt.forEach(t),Z6r=r(_Se," \u2014 "),uH=n(_Se,"A",{href:!0});var Yvt=s(uH);eTr=r(Yvt,"TFXLMRobertaForTokenClassification"),Yvt.forEach(t),oTr=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),rTr=i(me),KM=n(me,"LI",{});var bSe=s(KM);z2e=n(bSe,"STRONG",{});var Kvt=s(z2e);tTr=r(Kvt,"xlnet"),Kvt.forEach(t),aTr=r(bSe," \u2014 "),_H=n(bSe,"A",{href:!0});var Zvt=s(_H);nTr=r(Zvt,"TFXLNetForTokenClassification"),Zvt.forEach(t),sTr=r(bSe," (XLNet model)"),bSe.forEach(t),me.forEach(t),lTr=i(wl),T(ZM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),dIe=i(f),ic=n(f,"H2",{class:!0});var hNe=s(ic);e4=n(hNe,"A",{id:!0,class:!0,href:!0});var eFt=s(e4);Q2e=n(eFt,"SPAN",{});var oFt=s(Q2e);T(l8.$$.fragment,oFt),oFt.forEach(t),eFt.forEach(t),iTr=i(hNe),W2e=n(hNe,"SPAN",{});var rFt=s(W2e);dTr=r(rFt,"TFAutoModelForQuestionAnswering"),rFt.forEach(t),hNe.forEach(t),cIe=i(f),lr=n(f,"DIV",{class:!0});var Al=s(lr);T(i8.$$.fragment,Al),cTr=i(Al),dc=n(Al,"P",{});var OK=s(dc);fTr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bH=n(OK,"A",{href:!0});var tFt=s(bH);mTr=r(tFt,"from_pretrained()"),tFt.forEach(t),gTr=r(OK," class method or the "),vH=n(OK,"A",{href:!0});var aFt=s(vH);hTr=r(aFt,"from_config()"),aFt.forEach(t),pTr=r(OK,` class
method.`),OK.forEach(t),uTr=i(Al),d8=n(Al,"P",{});var pNe=s(d8);_Tr=r(pNe,"This class cannot be instantiated directly using "),H2e=n(pNe,"CODE",{});var nFt=s(H2e);bTr=r(nFt,"__init__()"),nFt.forEach(t),vTr=r(pNe," (throws an error)."),pNe.forEach(t),FTr=i(Al),Rt=n(Al,"DIV",{class:!0});var U3=s(Rt);T(c8.$$.fragment,U3),TTr=i(U3),U2e=n(U3,"P",{});var sFt=s(U2e);MTr=r(sFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sFt.forEach(t),ETr=i(U3),cc=n(U3,"P",{});var VK=s(cc);CTr=r(VK,`Note:
Loading a model from its configuration file does `),J2e=n(VK,"STRONG",{});var lFt=s(J2e);wTr=r(lFt,"not"),lFt.forEach(t),ATr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(VK,"A",{href:!0});var iFt=s(FH);yTr=r(iFt,"from_pretrained()"),iFt.forEach(t),LTr=r(VK," to load the model weights."),VK.forEach(t),xTr=i(U3),T(o4.$$.fragment,U3),U3.forEach(t),$Tr=i(Al),Br=n(Al,"DIV",{class:!0});var yl=s(Br);T(f8.$$.fragment,yl),kTr=i(yl),Y2e=n(yl,"P",{});var dFt=s(Y2e);STr=r(dFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dFt.forEach(t),RTr=i(yl),nn=n(yl,"P",{});var J3=s(nn);BTr=r(J3,"The model class to instantiate is selected based on the "),K2e=n(J3,"CODE",{});var cFt=s(K2e);PTr=r(cFt,"model_type"),cFt.forEach(t),ITr=r(J3,` property of the config object (either
passed as an argument or loaded from `),Z2e=n(J3,"CODE",{});var fFt=s(Z2e);qTr=r(fFt,"pretrained_model_name_or_path"),fFt.forEach(t),NTr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(J3,"CODE",{});var mFt=s(eve);jTr=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),DTr=r(J3,":"),J3.forEach(t),GTr=i(yl),ce=n(yl,"UL",{});var ge=s(ce);r4=n(ge,"LI",{});var vSe=s(r4);ove=n(vSe,"STRONG",{});var gFt=s(ove);OTr=r(gFt,"albert"),gFt.forEach(t),VTr=r(vSe," \u2014 "),TH=n(vSe,"A",{href:!0});var hFt=s(TH);XTr=r(hFt,"TFAlbertForQuestionAnswering"),hFt.forEach(t),zTr=r(vSe," (ALBERT model)"),vSe.forEach(t),QTr=i(ge),t4=n(ge,"LI",{});var FSe=s(t4);rve=n(FSe,"STRONG",{});var pFt=s(rve);WTr=r(pFt,"bert"),pFt.forEach(t),HTr=r(FSe," \u2014 "),MH=n(FSe,"A",{href:!0});var uFt=s(MH);UTr=r(uFt,"TFBertForQuestionAnswering"),uFt.forEach(t),JTr=r(FSe," (BERT model)"),FSe.forEach(t),YTr=i(ge),a4=n(ge,"LI",{});var TSe=s(a4);tve=n(TSe,"STRONG",{});var _Ft=s(tve);KTr=r(_Ft,"camembert"),_Ft.forEach(t),ZTr=r(TSe," \u2014 "),EH=n(TSe,"A",{href:!0});var bFt=s(EH);e7r=r(bFt,"TFCamembertForQuestionAnswering"),bFt.forEach(t),o7r=r(TSe," (CamemBERT model)"),TSe.forEach(t),r7r=i(ge),n4=n(ge,"LI",{});var MSe=s(n4);ave=n(MSe,"STRONG",{});var vFt=s(ave);t7r=r(vFt,"convbert"),vFt.forEach(t),a7r=r(MSe," \u2014 "),CH=n(MSe,"A",{href:!0});var FFt=s(CH);n7r=r(FFt,"TFConvBertForQuestionAnswering"),FFt.forEach(t),s7r=r(MSe," (ConvBERT model)"),MSe.forEach(t),l7r=i(ge),s4=n(ge,"LI",{});var ESe=s(s4);nve=n(ESe,"STRONG",{});var TFt=s(nve);i7r=r(TFt,"deberta"),TFt.forEach(t),d7r=r(ESe," \u2014 "),wH=n(ESe,"A",{href:!0});var MFt=s(wH);c7r=r(MFt,"TFDebertaForQuestionAnswering"),MFt.forEach(t),f7r=r(ESe," (DeBERTa model)"),ESe.forEach(t),m7r=i(ge),l4=n(ge,"LI",{});var CSe=s(l4);sve=n(CSe,"STRONG",{});var EFt=s(sve);g7r=r(EFt,"deberta-v2"),EFt.forEach(t),h7r=r(CSe," \u2014 "),AH=n(CSe,"A",{href:!0});var CFt=s(AH);p7r=r(CFt,"TFDebertaV2ForQuestionAnswering"),CFt.forEach(t),u7r=r(CSe," (DeBERTa-v2 model)"),CSe.forEach(t),_7r=i(ge),i4=n(ge,"LI",{});var wSe=s(i4);lve=n(wSe,"STRONG",{});var wFt=s(lve);b7r=r(wFt,"distilbert"),wFt.forEach(t),v7r=r(wSe," \u2014 "),yH=n(wSe,"A",{href:!0});var AFt=s(yH);F7r=r(AFt,"TFDistilBertForQuestionAnswering"),AFt.forEach(t),T7r=r(wSe," (DistilBERT model)"),wSe.forEach(t),M7r=i(ge),d4=n(ge,"LI",{});var ASe=s(d4);ive=n(ASe,"STRONG",{});var yFt=s(ive);E7r=r(yFt,"electra"),yFt.forEach(t),C7r=r(ASe," \u2014 "),LH=n(ASe,"A",{href:!0});var LFt=s(LH);w7r=r(LFt,"TFElectraForQuestionAnswering"),LFt.forEach(t),A7r=r(ASe," (ELECTRA model)"),ASe.forEach(t),y7r=i(ge),c4=n(ge,"LI",{});var ySe=s(c4);dve=n(ySe,"STRONG",{});var xFt=s(dve);L7r=r(xFt,"flaubert"),xFt.forEach(t),x7r=r(ySe," \u2014 "),xH=n(ySe,"A",{href:!0});var $Ft=s(xH);$7r=r($Ft,"TFFlaubertForQuestionAnsweringSimple"),$Ft.forEach(t),k7r=r(ySe," (FlauBERT model)"),ySe.forEach(t),S7r=i(ge),f4=n(ge,"LI",{});var LSe=s(f4);cve=n(LSe,"STRONG",{});var kFt=s(cve);R7r=r(kFt,"funnel"),kFt.forEach(t),B7r=r(LSe," \u2014 "),$H=n(LSe,"A",{href:!0});var SFt=s($H);P7r=r(SFt,"TFFunnelForQuestionAnswering"),SFt.forEach(t),I7r=r(LSe," (Funnel Transformer model)"),LSe.forEach(t),q7r=i(ge),m4=n(ge,"LI",{});var xSe=s(m4);fve=n(xSe,"STRONG",{});var RFt=s(fve);N7r=r(RFt,"gptj"),RFt.forEach(t),j7r=r(xSe," \u2014 "),kH=n(xSe,"A",{href:!0});var BFt=s(kH);D7r=r(BFt,"TFGPTJForQuestionAnswering"),BFt.forEach(t),G7r=r(xSe," (GPT-J model)"),xSe.forEach(t),O7r=i(ge),g4=n(ge,"LI",{});var $Se=s(g4);mve=n($Se,"STRONG",{});var PFt=s(mve);V7r=r(PFt,"longformer"),PFt.forEach(t),X7r=r($Se," \u2014 "),SH=n($Se,"A",{href:!0});var IFt=s(SH);z7r=r(IFt,"TFLongformerForQuestionAnswering"),IFt.forEach(t),Q7r=r($Se," (Longformer model)"),$Se.forEach(t),W7r=i(ge),h4=n(ge,"LI",{});var kSe=s(h4);gve=n(kSe,"STRONG",{});var qFt=s(gve);H7r=r(qFt,"mobilebert"),qFt.forEach(t),U7r=r(kSe," \u2014 "),RH=n(kSe,"A",{href:!0});var NFt=s(RH);J7r=r(NFt,"TFMobileBertForQuestionAnswering"),NFt.forEach(t),Y7r=r(kSe," (MobileBERT model)"),kSe.forEach(t),K7r=i(ge),p4=n(ge,"LI",{});var SSe=s(p4);hve=n(SSe,"STRONG",{});var jFt=s(hve);Z7r=r(jFt,"mpnet"),jFt.forEach(t),eMr=r(SSe," \u2014 "),BH=n(SSe,"A",{href:!0});var DFt=s(BH);oMr=r(DFt,"TFMPNetForQuestionAnswering"),DFt.forEach(t),rMr=r(SSe," (MPNet model)"),SSe.forEach(t),tMr=i(ge),u4=n(ge,"LI",{});var RSe=s(u4);pve=n(RSe,"STRONG",{});var GFt=s(pve);aMr=r(GFt,"rembert"),GFt.forEach(t),nMr=r(RSe," \u2014 "),PH=n(RSe,"A",{href:!0});var OFt=s(PH);sMr=r(OFt,"TFRemBertForQuestionAnswering"),OFt.forEach(t),lMr=r(RSe," (RemBERT model)"),RSe.forEach(t),iMr=i(ge),_4=n(ge,"LI",{});var BSe=s(_4);uve=n(BSe,"STRONG",{});var VFt=s(uve);dMr=r(VFt,"roberta"),VFt.forEach(t),cMr=r(BSe," \u2014 "),IH=n(BSe,"A",{href:!0});var XFt=s(IH);fMr=r(XFt,"TFRobertaForQuestionAnswering"),XFt.forEach(t),mMr=r(BSe," (RoBERTa model)"),BSe.forEach(t),gMr=i(ge),b4=n(ge,"LI",{});var PSe=s(b4);_ve=n(PSe,"STRONG",{});var zFt=s(_ve);hMr=r(zFt,"roformer"),zFt.forEach(t),pMr=r(PSe," \u2014 "),qH=n(PSe,"A",{href:!0});var QFt=s(qH);uMr=r(QFt,"TFRoFormerForQuestionAnswering"),QFt.forEach(t),_Mr=r(PSe," (RoFormer model)"),PSe.forEach(t),bMr=i(ge),v4=n(ge,"LI",{});var ISe=s(v4);bve=n(ISe,"STRONG",{});var WFt=s(bve);vMr=r(WFt,"xlm"),WFt.forEach(t),FMr=r(ISe," \u2014 "),NH=n(ISe,"A",{href:!0});var HFt=s(NH);TMr=r(HFt,"TFXLMForQuestionAnsweringSimple"),HFt.forEach(t),MMr=r(ISe," (XLM model)"),ISe.forEach(t),EMr=i(ge),F4=n(ge,"LI",{});var qSe=s(F4);vve=n(qSe,"STRONG",{});var UFt=s(vve);CMr=r(UFt,"xlm-roberta"),UFt.forEach(t),wMr=r(qSe," \u2014 "),jH=n(qSe,"A",{href:!0});var JFt=s(jH);AMr=r(JFt,"TFXLMRobertaForQuestionAnswering"),JFt.forEach(t),yMr=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),LMr=i(ge),T4=n(ge,"LI",{});var NSe=s(T4);Fve=n(NSe,"STRONG",{});var YFt=s(Fve);xMr=r(YFt,"xlnet"),YFt.forEach(t),$Mr=r(NSe," \u2014 "),DH=n(NSe,"A",{href:!0});var KFt=s(DH);kMr=r(KFt,"TFXLNetForQuestionAnsweringSimple"),KFt.forEach(t),SMr=r(NSe," (XLNet model)"),NSe.forEach(t),ge.forEach(t),RMr=i(yl),T(M4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),fIe=i(f),fc=n(f,"H2",{class:!0});var uNe=s(fc);E4=n(uNe,"A",{id:!0,class:!0,href:!0});var ZFt=s(E4);Tve=n(ZFt,"SPAN",{});var e6t=s(Tve);T(m8.$$.fragment,e6t),e6t.forEach(t),ZFt.forEach(t),BMr=i(uNe),Mve=n(uNe,"SPAN",{});var o6t=s(Mve);PMr=r(o6t,"TFAutoModelForVision2Seq"),o6t.forEach(t),uNe.forEach(t),mIe=i(f),ir=n(f,"DIV",{class:!0});var Ll=s(ir);T(g8.$$.fragment,Ll),IMr=i(Ll),mc=n(Ll,"P",{});var XK=s(mc);qMr=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GH=n(XK,"A",{href:!0});var r6t=s(GH);NMr=r(r6t,"from_pretrained()"),r6t.forEach(t),jMr=r(XK," class method or the "),OH=n(XK,"A",{href:!0});var t6t=s(OH);DMr=r(t6t,"from_config()"),t6t.forEach(t),GMr=r(XK,` class
method.`),XK.forEach(t),OMr=i(Ll),h8=n(Ll,"P",{});var _Ne=s(h8);VMr=r(_Ne,"This class cannot be instantiated directly using "),Eve=n(_Ne,"CODE",{});var a6t=s(Eve);XMr=r(a6t,"__init__()"),a6t.forEach(t),zMr=r(_Ne," (throws an error)."),_Ne.forEach(t),QMr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var Y3=s(Bt);T(p8.$$.fragment,Y3),WMr=i(Y3),Cve=n(Y3,"P",{});var n6t=s(Cve);HMr=r(n6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),n6t.forEach(t),UMr=i(Y3),gc=n(Y3,"P",{});var zK=s(gc);JMr=r(zK,`Note:
Loading a model from its configuration file does `),wve=n(zK,"STRONG",{});var s6t=s(wve);YMr=r(s6t,"not"),s6t.forEach(t),KMr=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(zK,"A",{href:!0});var l6t=s(VH);ZMr=r(l6t,"from_pretrained()"),l6t.forEach(t),e4r=r(zK," to load the model weights."),zK.forEach(t),o4r=i(Y3),T(C4.$$.fragment,Y3),Y3.forEach(t),r4r=i(Ll),Pr=n(Ll,"DIV",{class:!0});var xl=s(Pr);T(u8.$$.fragment,xl),t4r=i(xl),Ave=n(xl,"P",{});var i6t=s(Ave);a4r=r(i6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),i6t.forEach(t),n4r=i(xl),sn=n(xl,"P",{});var K3=s(sn);s4r=r(K3,"The model class to instantiate is selected based on the "),yve=n(K3,"CODE",{});var d6t=s(yve);l4r=r(d6t,"model_type"),d6t.forEach(t),i4r=r(K3,` property of the config object (either
passed as an argument or loaded from `),Lve=n(K3,"CODE",{});var c6t=s(Lve);d4r=r(c6t,"pretrained_model_name_or_path"),c6t.forEach(t),c4r=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(K3,"CODE",{});var f6t=s(xve);f4r=r(f6t,"pretrained_model_name_or_path"),f6t.forEach(t),m4r=r(K3,":"),K3.forEach(t),g4r=i(xl),$ve=n(xl,"UL",{});var m6t=s($ve);w4=n(m6t,"LI",{});var jSe=s(w4);kve=n(jSe,"STRONG",{});var g6t=s(kve);h4r=r(g6t,"vision-encoder-decoder"),g6t.forEach(t),p4r=r(jSe," \u2014 "),XH=n(jSe,"A",{href:!0});var h6t=s(XH);u4r=r(h6t,"TFVisionEncoderDecoderModel"),h6t.forEach(t),_4r=r(jSe," (Vision Encoder decoder model)"),jSe.forEach(t),m6t.forEach(t),b4r=i(xl),T(A4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),gIe=i(f),hc=n(f,"H2",{class:!0});var bNe=s(hc);y4=n(bNe,"A",{id:!0,class:!0,href:!0});var p6t=s(y4);Sve=n(p6t,"SPAN",{});var u6t=s(Sve);T(_8.$$.fragment,u6t),u6t.forEach(t),p6t.forEach(t),v4r=i(bNe),Rve=n(bNe,"SPAN",{});var _6t=s(Rve);F4r=r(_6t,"TFAutoModelForSpeechSeq2Seq"),_6t.forEach(t),bNe.forEach(t),hIe=i(f),dr=n(f,"DIV",{class:!0});var $l=s(dr);T(b8.$$.fragment,$l),T4r=i($l),pc=n($l,"P",{});var QK=s(pc);M4r=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zH=n(QK,"A",{href:!0});var b6t=s(zH);E4r=r(b6t,"from_pretrained()"),b6t.forEach(t),C4r=r(QK," class method or the "),QH=n(QK,"A",{href:!0});var v6t=s(QH);w4r=r(v6t,"from_config()"),v6t.forEach(t),A4r=r(QK,` class
method.`),QK.forEach(t),y4r=i($l),v8=n($l,"P",{});var vNe=s(v8);L4r=r(vNe,"This class cannot be instantiated directly using "),Bve=n(vNe,"CODE",{});var F6t=s(Bve);x4r=r(F6t,"__init__()"),F6t.forEach(t),$4r=r(vNe," (throws an error)."),vNe.forEach(t),k4r=i($l),Pt=n($l,"DIV",{class:!0});var Z3=s(Pt);T(F8.$$.fragment,Z3),S4r=i(Z3),Pve=n(Z3,"P",{});var T6t=s(Pve);R4r=r(T6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),T6t.forEach(t),B4r=i(Z3),uc=n(Z3,"P",{});var WK=s(uc);P4r=r(WK,`Note:
Loading a model from its configuration file does `),Ive=n(WK,"STRONG",{});var M6t=s(Ive);I4r=r(M6t,"not"),M6t.forEach(t),q4r=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(WK,"A",{href:!0});var E6t=s(WH);N4r=r(E6t,"from_pretrained()"),E6t.forEach(t),j4r=r(WK," to load the model weights."),WK.forEach(t),D4r=i(Z3),T(L4.$$.fragment,Z3),Z3.forEach(t),G4r=i($l),Ir=n($l,"DIV",{class:!0});var kl=s(Ir);T(T8.$$.fragment,kl),O4r=i(kl),qve=n(kl,"P",{});var C6t=s(qve);V4r=r(C6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),C6t.forEach(t),X4r=i(kl),ln=n(kl,"P",{});var ew=s(ln);z4r=r(ew,"The model class to instantiate is selected based on the "),Nve=n(ew,"CODE",{});var w6t=s(Nve);Q4r=r(w6t,"model_type"),w6t.forEach(t),W4r=r(ew,` property of the config object (either
passed as an argument or loaded from `),jve=n(ew,"CODE",{});var A6t=s(jve);H4r=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),U4r=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(ew,"CODE",{});var y6t=s(Dve);J4r=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),Y4r=r(ew,":"),ew.forEach(t),K4r=i(kl),Gve=n(kl,"UL",{});var L6t=s(Gve);x4=n(L6t,"LI",{});var DSe=s(x4);Ove=n(DSe,"STRONG",{});var x6t=s(Ove);Z4r=r(x6t,"speech_to_text"),x6t.forEach(t),eEr=r(DSe," \u2014 "),HH=n(DSe,"A",{href:!0});var $6t=s(HH);oEr=r($6t,"TFSpeech2TextForConditionalGeneration"),$6t.forEach(t),rEr=r(DSe," (Speech2Text model)"),DSe.forEach(t),L6t.forEach(t),tEr=i(kl),T($4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),pIe=i(f),_c=n(f,"H2",{class:!0});var FNe=s(_c);k4=n(FNe,"A",{id:!0,class:!0,href:!0});var k6t=s(k4);Vve=n(k6t,"SPAN",{});var S6t=s(Vve);T(M8.$$.fragment,S6t),S6t.forEach(t),k6t.forEach(t),aEr=i(FNe),Xve=n(FNe,"SPAN",{});var R6t=s(Xve);nEr=r(R6t,"FlaxAutoModel"),R6t.forEach(t),FNe.forEach(t),uIe=i(f),cr=n(f,"DIV",{class:!0});var Sl=s(cr);T(E8.$$.fragment,Sl),sEr=i(Sl),bc=n(Sl,"P",{});var HK=s(bc);lEr=r(HK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UH=n(HK,"A",{href:!0});var B6t=s(UH);iEr=r(B6t,"from_pretrained()"),B6t.forEach(t),dEr=r(HK," class method or the "),JH=n(HK,"A",{href:!0});var P6t=s(JH);cEr=r(P6t,"from_config()"),P6t.forEach(t),fEr=r(HK,` class
method.`),HK.forEach(t),mEr=i(Sl),C8=n(Sl,"P",{});var TNe=s(C8);gEr=r(TNe,"This class cannot be instantiated directly using "),zve=n(TNe,"CODE",{});var I6t=s(zve);hEr=r(I6t,"__init__()"),I6t.forEach(t),pEr=r(TNe," (throws an error)."),TNe.forEach(t),uEr=i(Sl),It=n(Sl,"DIV",{class:!0});var ow=s(It);T(w8.$$.fragment,ow),_Er=i(ow),Qve=n(ow,"P",{});var q6t=s(Qve);bEr=r(q6t,"Instantiates one of the base model classes of the library from a configuration."),q6t.forEach(t),vEr=i(ow),vc=n(ow,"P",{});var UK=s(vc);FEr=r(UK,`Note:
Loading a model from its configuration file does `),Wve=n(UK,"STRONG",{});var N6t=s(Wve);TEr=r(N6t,"not"),N6t.forEach(t),MEr=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(UK,"A",{href:!0});var j6t=s(YH);EEr=r(j6t,"from_pretrained()"),j6t.forEach(t),CEr=r(UK," to load the model weights."),UK.forEach(t),wEr=i(ow),T(S4.$$.fragment,ow),ow.forEach(t),AEr=i(Sl),qr=n(Sl,"DIV",{class:!0});var Rl=s(qr);T(A8.$$.fragment,Rl),yEr=i(Rl),Hve=n(Rl,"P",{});var D6t=s(Hve);LEr=r(D6t,"Instantiate one of the base model classes of the library from a pretrained model."),D6t.forEach(t),xEr=i(Rl),dn=n(Rl,"P",{});var rw=s(dn);$Er=r(rw,"The model class to instantiate is selected based on the "),Uve=n(rw,"CODE",{});var G6t=s(Uve);kEr=r(G6t,"model_type"),G6t.forEach(t),SEr=r(rw,` property of the config object (either
passed as an argument or loaded from `),Jve=n(rw,"CODE",{});var O6t=s(Jve);REr=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),BEr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(rw,"CODE",{});var V6t=s(Yve);PEr=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),IEr=r(rw,":"),rw.forEach(t),qEr=i(Rl),re=n(Rl,"UL",{});var ne=s(re);R4=n(ne,"LI",{});var GSe=s(R4);Kve=n(GSe,"STRONG",{});var X6t=s(Kve);NEr=r(X6t,"albert"),X6t.forEach(t),jEr=r(GSe," \u2014 "),KH=n(GSe,"A",{href:!0});var z6t=s(KH);DEr=r(z6t,"FlaxAlbertModel"),z6t.forEach(t),GEr=r(GSe," (ALBERT model)"),GSe.forEach(t),OEr=i(ne),B4=n(ne,"LI",{});var OSe=s(B4);Zve=n(OSe,"STRONG",{});var Q6t=s(Zve);VEr=r(Q6t,"bart"),Q6t.forEach(t),XEr=r(OSe," \u2014 "),ZH=n(OSe,"A",{href:!0});var W6t=s(ZH);zEr=r(W6t,"FlaxBartModel"),W6t.forEach(t),QEr=r(OSe," (BART model)"),OSe.forEach(t),WEr=i(ne),P4=n(ne,"LI",{});var VSe=s(P4);eFe=n(VSe,"STRONG",{});var H6t=s(eFe);HEr=r(H6t,"beit"),H6t.forEach(t),UEr=r(VSe," \u2014 "),eU=n(VSe,"A",{href:!0});var U6t=s(eU);JEr=r(U6t,"FlaxBeitModel"),U6t.forEach(t),YEr=r(VSe," (BEiT model)"),VSe.forEach(t),KEr=i(ne),I4=n(ne,"LI",{});var XSe=s(I4);oFe=n(XSe,"STRONG",{});var J6t=s(oFe);ZEr=r(J6t,"bert"),J6t.forEach(t),e5r=r(XSe," \u2014 "),oU=n(XSe,"A",{href:!0});var Y6t=s(oU);o5r=r(Y6t,"FlaxBertModel"),Y6t.forEach(t),r5r=r(XSe," (BERT model)"),XSe.forEach(t),t5r=i(ne),q4=n(ne,"LI",{});var zSe=s(q4);rFe=n(zSe,"STRONG",{});var K6t=s(rFe);a5r=r(K6t,"big_bird"),K6t.forEach(t),n5r=r(zSe," \u2014 "),rU=n(zSe,"A",{href:!0});var Z6t=s(rU);s5r=r(Z6t,"FlaxBigBirdModel"),Z6t.forEach(t),l5r=r(zSe," (BigBird model)"),zSe.forEach(t),i5r=i(ne),N4=n(ne,"LI",{});var QSe=s(N4);tFe=n(QSe,"STRONG",{});var eTt=s(tFe);d5r=r(eTt,"blenderbot"),eTt.forEach(t),c5r=r(QSe," \u2014 "),tU=n(QSe,"A",{href:!0});var oTt=s(tU);f5r=r(oTt,"FlaxBlenderbotModel"),oTt.forEach(t),m5r=r(QSe," (Blenderbot model)"),QSe.forEach(t),g5r=i(ne),j4=n(ne,"LI",{});var WSe=s(j4);aFe=n(WSe,"STRONG",{});var rTt=s(aFe);h5r=r(rTt,"blenderbot-small"),rTt.forEach(t),p5r=r(WSe," \u2014 "),aU=n(WSe,"A",{href:!0});var tTt=s(aU);u5r=r(tTt,"FlaxBlenderbotSmallModel"),tTt.forEach(t),_5r=r(WSe," (BlenderbotSmall model)"),WSe.forEach(t),b5r=i(ne),D4=n(ne,"LI",{});var HSe=s(D4);nFe=n(HSe,"STRONG",{});var aTt=s(nFe);v5r=r(aTt,"clip"),aTt.forEach(t),F5r=r(HSe," \u2014 "),nU=n(HSe,"A",{href:!0});var nTt=s(nU);T5r=r(nTt,"FlaxCLIPModel"),nTt.forEach(t),M5r=r(HSe," (CLIP model)"),HSe.forEach(t),E5r=i(ne),G4=n(ne,"LI",{});var USe=s(G4);sFe=n(USe,"STRONG",{});var sTt=s(sFe);C5r=r(sTt,"distilbert"),sTt.forEach(t),w5r=r(USe," \u2014 "),sU=n(USe,"A",{href:!0});var lTt=s(sU);A5r=r(lTt,"FlaxDistilBertModel"),lTt.forEach(t),y5r=r(USe," (DistilBERT model)"),USe.forEach(t),L5r=i(ne),O4=n(ne,"LI",{});var JSe=s(O4);lFe=n(JSe,"STRONG",{});var iTt=s(lFe);x5r=r(iTt,"electra"),iTt.forEach(t),$5r=r(JSe," \u2014 "),lU=n(JSe,"A",{href:!0});var dTt=s(lU);k5r=r(dTt,"FlaxElectraModel"),dTt.forEach(t),S5r=r(JSe," (ELECTRA model)"),JSe.forEach(t),R5r=i(ne),V4=n(ne,"LI",{});var YSe=s(V4);iFe=n(YSe,"STRONG",{});var cTt=s(iFe);B5r=r(cTt,"gpt2"),cTt.forEach(t),P5r=r(YSe," \u2014 "),iU=n(YSe,"A",{href:!0});var fTt=s(iU);I5r=r(fTt,"FlaxGPT2Model"),fTt.forEach(t),q5r=r(YSe," (OpenAI GPT-2 model)"),YSe.forEach(t),N5r=i(ne),X4=n(ne,"LI",{});var KSe=s(X4);dFe=n(KSe,"STRONG",{});var mTt=s(dFe);j5r=r(mTt,"gpt_neo"),mTt.forEach(t),D5r=r(KSe," \u2014 "),dU=n(KSe,"A",{href:!0});var gTt=s(dU);G5r=r(gTt,"FlaxGPTNeoModel"),gTt.forEach(t),O5r=r(KSe," (GPT Neo model)"),KSe.forEach(t),V5r=i(ne),z4=n(ne,"LI",{});var ZSe=s(z4);cFe=n(ZSe,"STRONG",{});var hTt=s(cFe);X5r=r(hTt,"gptj"),hTt.forEach(t),z5r=r(ZSe," \u2014 "),cU=n(ZSe,"A",{href:!0});var pTt=s(cU);Q5r=r(pTt,"FlaxGPTJModel"),pTt.forEach(t),W5r=r(ZSe," (GPT-J model)"),ZSe.forEach(t),H5r=i(ne),Q4=n(ne,"LI",{});var eRe=s(Q4);fFe=n(eRe,"STRONG",{});var uTt=s(fFe);U5r=r(uTt,"marian"),uTt.forEach(t),J5r=r(eRe," \u2014 "),fU=n(eRe,"A",{href:!0});var _Tt=s(fU);Y5r=r(_Tt,"FlaxMarianModel"),_Tt.forEach(t),K5r=r(eRe," (Marian model)"),eRe.forEach(t),Z5r=i(ne),W4=n(ne,"LI",{});var oRe=s(W4);mFe=n(oRe,"STRONG",{});var bTt=s(mFe);eCr=r(bTt,"mbart"),bTt.forEach(t),oCr=r(oRe," \u2014 "),mU=n(oRe,"A",{href:!0});var vTt=s(mU);rCr=r(vTt,"FlaxMBartModel"),vTt.forEach(t),tCr=r(oRe," (mBART model)"),oRe.forEach(t),aCr=i(ne),H4=n(ne,"LI",{});var rRe=s(H4);gFe=n(rRe,"STRONG",{});var FTt=s(gFe);nCr=r(FTt,"mt5"),FTt.forEach(t),sCr=r(rRe," \u2014 "),gU=n(rRe,"A",{href:!0});var TTt=s(gU);lCr=r(TTt,"FlaxMT5Model"),TTt.forEach(t),iCr=r(rRe," (mT5 model)"),rRe.forEach(t),dCr=i(ne),U4=n(ne,"LI",{});var tRe=s(U4);hFe=n(tRe,"STRONG",{});var MTt=s(hFe);cCr=r(MTt,"pegasus"),MTt.forEach(t),fCr=r(tRe," \u2014 "),hU=n(tRe,"A",{href:!0});var ETt=s(hU);mCr=r(ETt,"FlaxPegasusModel"),ETt.forEach(t),gCr=r(tRe," (Pegasus model)"),tRe.forEach(t),hCr=i(ne),J4=n(ne,"LI",{});var aRe=s(J4);pFe=n(aRe,"STRONG",{});var CTt=s(pFe);pCr=r(CTt,"roberta"),CTt.forEach(t),uCr=r(aRe," \u2014 "),pU=n(aRe,"A",{href:!0});var wTt=s(pU);_Cr=r(wTt,"FlaxRobertaModel"),wTt.forEach(t),bCr=r(aRe," (RoBERTa model)"),aRe.forEach(t),vCr=i(ne),Y4=n(ne,"LI",{});var nRe=s(Y4);uFe=n(nRe,"STRONG",{});var ATt=s(uFe);FCr=r(ATt,"roformer"),ATt.forEach(t),TCr=r(nRe," \u2014 "),uU=n(nRe,"A",{href:!0});var yTt=s(uU);MCr=r(yTt,"FlaxRoFormerModel"),yTt.forEach(t),ECr=r(nRe," (RoFormer model)"),nRe.forEach(t),CCr=i(ne),K4=n(ne,"LI",{});var sRe=s(K4);_Fe=n(sRe,"STRONG",{});var LTt=s(_Fe);wCr=r(LTt,"t5"),LTt.forEach(t),ACr=r(sRe," \u2014 "),_U=n(sRe,"A",{href:!0});var xTt=s(_U);yCr=r(xTt,"FlaxT5Model"),xTt.forEach(t),LCr=r(sRe," (T5 model)"),sRe.forEach(t),xCr=i(ne),Z4=n(ne,"LI",{});var lRe=s(Z4);bFe=n(lRe,"STRONG",{});var $Tt=s(bFe);$Cr=r($Tt,"vision-text-dual-encoder"),$Tt.forEach(t),kCr=r(lRe," \u2014 "),bU=n(lRe,"A",{href:!0});var kTt=s(bU);SCr=r(kTt,"FlaxVisionTextDualEncoderModel"),kTt.forEach(t),RCr=r(lRe," (VisionTextDualEncoder model)"),lRe.forEach(t),BCr=i(ne),eE=n(ne,"LI",{});var iRe=s(eE);vFe=n(iRe,"STRONG",{});var STt=s(vFe);PCr=r(STt,"vit"),STt.forEach(t),ICr=r(iRe," \u2014 "),vU=n(iRe,"A",{href:!0});var RTt=s(vU);qCr=r(RTt,"FlaxViTModel"),RTt.forEach(t),NCr=r(iRe," (ViT model)"),iRe.forEach(t),jCr=i(ne),oE=n(ne,"LI",{});var dRe=s(oE);FFe=n(dRe,"STRONG",{});var BTt=s(FFe);DCr=r(BTt,"wav2vec2"),BTt.forEach(t),GCr=r(dRe," \u2014 "),FU=n(dRe,"A",{href:!0});var PTt=s(FU);OCr=r(PTt,"FlaxWav2Vec2Model"),PTt.forEach(t),VCr=r(dRe," (Wav2Vec2 model)"),dRe.forEach(t),XCr=i(ne),rE=n(ne,"LI",{});var cRe=s(rE);TFe=n(cRe,"STRONG",{});var ITt=s(TFe);zCr=r(ITt,"xglm"),ITt.forEach(t),QCr=r(cRe," \u2014 "),TU=n(cRe,"A",{href:!0});var qTt=s(TU);WCr=r(qTt,"FlaxXGLMModel"),qTt.forEach(t),HCr=r(cRe," (XGLM model)"),cRe.forEach(t),UCr=i(ne),tE=n(ne,"LI",{});var fRe=s(tE);MFe=n(fRe,"STRONG",{});var NTt=s(MFe);JCr=r(NTt,"xlm-roberta"),NTt.forEach(t),YCr=r(fRe," \u2014 "),MU=n(fRe,"A",{href:!0});var jTt=s(MU);KCr=r(jTt,"FlaxXLMRobertaModel"),jTt.forEach(t),ZCr=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),ne.forEach(t),e3r=i(Rl),T(aE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),_Ie=i(f),Fc=n(f,"H2",{class:!0});var MNe=s(Fc);nE=n(MNe,"A",{id:!0,class:!0,href:!0});var DTt=s(nE);EFe=n(DTt,"SPAN",{});var GTt=s(EFe);T(y8.$$.fragment,GTt),GTt.forEach(t),DTt.forEach(t),o3r=i(MNe),CFe=n(MNe,"SPAN",{});var OTt=s(CFe);r3r=r(OTt,"FlaxAutoModelForCausalLM"),OTt.forEach(t),MNe.forEach(t),bIe=i(f),fr=n(f,"DIV",{class:!0});var Bl=s(fr);T(L8.$$.fragment,Bl),t3r=i(Bl),Tc=n(Bl,"P",{});var JK=s(Tc);a3r=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EU=n(JK,"A",{href:!0});var VTt=s(EU);n3r=r(VTt,"from_pretrained()"),VTt.forEach(t),s3r=r(JK," class method or the "),CU=n(JK,"A",{href:!0});var XTt=s(CU);l3r=r(XTt,"from_config()"),XTt.forEach(t),i3r=r(JK,` class
method.`),JK.forEach(t),d3r=i(Bl),x8=n(Bl,"P",{});var ENe=s(x8);c3r=r(ENe,"This class cannot be instantiated directly using "),wFe=n(ENe,"CODE",{});var zTt=s(wFe);f3r=r(zTt,"__init__()"),zTt.forEach(t),m3r=r(ENe," (throws an error)."),ENe.forEach(t),g3r=i(Bl),qt=n(Bl,"DIV",{class:!0});var tw=s(qt);T($8.$$.fragment,tw),h3r=i(tw),AFe=n(tw,"P",{});var QTt=s(AFe);p3r=r(QTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QTt.forEach(t),u3r=i(tw),Mc=n(tw,"P",{});var YK=s(Mc);_3r=r(YK,`Note:
Loading a model from its configuration file does `),yFe=n(YK,"STRONG",{});var WTt=s(yFe);b3r=r(WTt,"not"),WTt.forEach(t),v3r=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(YK,"A",{href:!0});var HTt=s(wU);F3r=r(HTt,"from_pretrained()"),HTt.forEach(t),T3r=r(YK," to load the model weights."),YK.forEach(t),M3r=i(tw),T(sE.$$.fragment,tw),tw.forEach(t),E3r=i(Bl),Nr=n(Bl,"DIV",{class:!0});var Pl=s(Nr);T(k8.$$.fragment,Pl),C3r=i(Pl),LFe=n(Pl,"P",{});var UTt=s(LFe);w3r=r(UTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),UTt.forEach(t),A3r=i(Pl),cn=n(Pl,"P",{});var aw=s(cn);y3r=r(aw,"The model class to instantiate is selected based on the "),xFe=n(aw,"CODE",{});var JTt=s(xFe);L3r=r(JTt,"model_type"),JTt.forEach(t),x3r=r(aw,` property of the config object (either
passed as an argument or loaded from `),$Fe=n(aw,"CODE",{});var YTt=s($Fe);$3r=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),k3r=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=n(aw,"CODE",{});var KTt=s(kFe);S3r=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),R3r=r(aw,":"),aw.forEach(t),B3r=i(Pl),ke=n(Pl,"UL",{});var Oe=s(ke);lE=n(Oe,"LI",{});var mRe=s(lE);SFe=n(mRe,"STRONG",{});var ZTt=s(SFe);P3r=r(ZTt,"bart"),ZTt.forEach(t),I3r=r(mRe," \u2014 "),AU=n(mRe,"A",{href:!0});var e7t=s(AU);q3r=r(e7t,"FlaxBartForCausalLM"),e7t.forEach(t),N3r=r(mRe," (BART model)"),mRe.forEach(t),j3r=i(Oe),iE=n(Oe,"LI",{});var gRe=s(iE);RFe=n(gRe,"STRONG",{});var o7t=s(RFe);D3r=r(o7t,"bert"),o7t.forEach(t),G3r=r(gRe," \u2014 "),yU=n(gRe,"A",{href:!0});var r7t=s(yU);O3r=r(r7t,"FlaxBertForCausalLM"),r7t.forEach(t),V3r=r(gRe," (BERT model)"),gRe.forEach(t),X3r=i(Oe),dE=n(Oe,"LI",{});var hRe=s(dE);BFe=n(hRe,"STRONG",{});var t7t=s(BFe);z3r=r(t7t,"big_bird"),t7t.forEach(t),Q3r=r(hRe," \u2014 "),LU=n(hRe,"A",{href:!0});var a7t=s(LU);W3r=r(a7t,"FlaxBigBirdForCausalLM"),a7t.forEach(t),H3r=r(hRe," (BigBird model)"),hRe.forEach(t),U3r=i(Oe),cE=n(Oe,"LI",{});var pRe=s(cE);PFe=n(pRe,"STRONG",{});var n7t=s(PFe);J3r=r(n7t,"electra"),n7t.forEach(t),Y3r=r(pRe," \u2014 "),xU=n(pRe,"A",{href:!0});var s7t=s(xU);K3r=r(s7t,"FlaxElectraForCausalLM"),s7t.forEach(t),Z3r=r(pRe," (ELECTRA model)"),pRe.forEach(t),ewr=i(Oe),fE=n(Oe,"LI",{});var uRe=s(fE);IFe=n(uRe,"STRONG",{});var l7t=s(IFe);owr=r(l7t,"gpt2"),l7t.forEach(t),rwr=r(uRe," \u2014 "),$U=n(uRe,"A",{href:!0});var i7t=s($U);twr=r(i7t,"FlaxGPT2LMHeadModel"),i7t.forEach(t),awr=r(uRe," (OpenAI GPT-2 model)"),uRe.forEach(t),nwr=i(Oe),mE=n(Oe,"LI",{});var _Re=s(mE);qFe=n(_Re,"STRONG",{});var d7t=s(qFe);swr=r(d7t,"gpt_neo"),d7t.forEach(t),lwr=r(_Re," \u2014 "),kU=n(_Re,"A",{href:!0});var c7t=s(kU);iwr=r(c7t,"FlaxGPTNeoForCausalLM"),c7t.forEach(t),dwr=r(_Re," (GPT Neo model)"),_Re.forEach(t),cwr=i(Oe),gE=n(Oe,"LI",{});var bRe=s(gE);NFe=n(bRe,"STRONG",{});var f7t=s(NFe);fwr=r(f7t,"gptj"),f7t.forEach(t),mwr=r(bRe," \u2014 "),SU=n(bRe,"A",{href:!0});var m7t=s(SU);gwr=r(m7t,"FlaxGPTJForCausalLM"),m7t.forEach(t),hwr=r(bRe," (GPT-J model)"),bRe.forEach(t),pwr=i(Oe),hE=n(Oe,"LI",{});var vRe=s(hE);jFe=n(vRe,"STRONG",{});var g7t=s(jFe);uwr=r(g7t,"roberta"),g7t.forEach(t),_wr=r(vRe," \u2014 "),RU=n(vRe,"A",{href:!0});var h7t=s(RU);bwr=r(h7t,"FlaxRobertaForCausalLM"),h7t.forEach(t),vwr=r(vRe," (RoBERTa model)"),vRe.forEach(t),Fwr=i(Oe),pE=n(Oe,"LI",{});var FRe=s(pE);DFe=n(FRe,"STRONG",{});var p7t=s(DFe);Twr=r(p7t,"xglm"),p7t.forEach(t),Mwr=r(FRe," \u2014 "),BU=n(FRe,"A",{href:!0});var u7t=s(BU);Ewr=r(u7t,"FlaxXGLMForCausalLM"),u7t.forEach(t),Cwr=r(FRe," (XGLM model)"),FRe.forEach(t),Oe.forEach(t),wwr=i(Pl),T(uE.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),vIe=i(f),Ec=n(f,"H2",{class:!0});var CNe=s(Ec);_E=n(CNe,"A",{id:!0,class:!0,href:!0});var _7t=s(_E);GFe=n(_7t,"SPAN",{});var b7t=s(GFe);T(S8.$$.fragment,b7t),b7t.forEach(t),_7t.forEach(t),Awr=i(CNe),OFe=n(CNe,"SPAN",{});var v7t=s(OFe);ywr=r(v7t,"FlaxAutoModelForPreTraining"),v7t.forEach(t),CNe.forEach(t),FIe=i(f),mr=n(f,"DIV",{class:!0});var Il=s(mr);T(R8.$$.fragment,Il),Lwr=i(Il),Cc=n(Il,"P",{});var KK=s(Cc);xwr=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PU=n(KK,"A",{href:!0});var F7t=s(PU);$wr=r(F7t,"from_pretrained()"),F7t.forEach(t),kwr=r(KK," class method or the "),IU=n(KK,"A",{href:!0});var T7t=s(IU);Swr=r(T7t,"from_config()"),T7t.forEach(t),Rwr=r(KK,` class
method.`),KK.forEach(t),Bwr=i(Il),B8=n(Il,"P",{});var wNe=s(B8);Pwr=r(wNe,"This class cannot be instantiated directly using "),VFe=n(wNe,"CODE",{});var M7t=s(VFe);Iwr=r(M7t,"__init__()"),M7t.forEach(t),qwr=r(wNe," (throws an error)."),wNe.forEach(t),Nwr=i(Il),Nt=n(Il,"DIV",{class:!0});var nw=s(Nt);T(P8.$$.fragment,nw),jwr=i(nw),XFe=n(nw,"P",{});var E7t=s(XFe);Dwr=r(E7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),E7t.forEach(t),Gwr=i(nw),wc=n(nw,"P",{});var ZK=s(wc);Owr=r(ZK,`Note:
Loading a model from its configuration file does `),zFe=n(ZK,"STRONG",{});var C7t=s(zFe);Vwr=r(C7t,"not"),C7t.forEach(t),Xwr=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(ZK,"A",{href:!0});var w7t=s(qU);zwr=r(w7t,"from_pretrained()"),w7t.forEach(t),Qwr=r(ZK," to load the model weights."),ZK.forEach(t),Wwr=i(nw),T(bE.$$.fragment,nw),nw.forEach(t),Hwr=i(Il),jr=n(Il,"DIV",{class:!0});var ql=s(jr);T(I8.$$.fragment,ql),Uwr=i(ql),QFe=n(ql,"P",{});var A7t=s(QFe);Jwr=r(A7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),A7t.forEach(t),Ywr=i(ql),fn=n(ql,"P",{});var sw=s(fn);Kwr=r(sw,"The model class to instantiate is selected based on the "),WFe=n(sw,"CODE",{});var y7t=s(WFe);Zwr=r(y7t,"model_type"),y7t.forEach(t),eAr=r(sw,` property of the config object (either
passed as an argument or loaded from `),HFe=n(sw,"CODE",{});var L7t=s(HFe);oAr=r(L7t,"pretrained_model_name_or_path"),L7t.forEach(t),rAr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(sw,"CODE",{});var x7t=s(UFe);tAr=r(x7t,"pretrained_model_name_or_path"),x7t.forEach(t),aAr=r(sw,":"),sw.forEach(t),nAr=i(ql),Me=n(ql,"UL",{});var we=s(Me);vE=n(we,"LI",{});var TRe=s(vE);JFe=n(TRe,"STRONG",{});var $7t=s(JFe);sAr=r($7t,"albert"),$7t.forEach(t),lAr=r(TRe," \u2014 "),NU=n(TRe,"A",{href:!0});var k7t=s(NU);iAr=r(k7t,"FlaxAlbertForPreTraining"),k7t.forEach(t),dAr=r(TRe," (ALBERT model)"),TRe.forEach(t),cAr=i(we),FE=n(we,"LI",{});var MRe=s(FE);YFe=n(MRe,"STRONG",{});var S7t=s(YFe);fAr=r(S7t,"bart"),S7t.forEach(t),mAr=r(MRe," \u2014 "),jU=n(MRe,"A",{href:!0});var R7t=s(jU);gAr=r(R7t,"FlaxBartForConditionalGeneration"),R7t.forEach(t),hAr=r(MRe," (BART model)"),MRe.forEach(t),pAr=i(we),TE=n(we,"LI",{});var ERe=s(TE);KFe=n(ERe,"STRONG",{});var B7t=s(KFe);uAr=r(B7t,"bert"),B7t.forEach(t),_Ar=r(ERe," \u2014 "),DU=n(ERe,"A",{href:!0});var P7t=s(DU);bAr=r(P7t,"FlaxBertForPreTraining"),P7t.forEach(t),vAr=r(ERe," (BERT model)"),ERe.forEach(t),FAr=i(we),ME=n(we,"LI",{});var CRe=s(ME);ZFe=n(CRe,"STRONG",{});var I7t=s(ZFe);TAr=r(I7t,"big_bird"),I7t.forEach(t),MAr=r(CRe," \u2014 "),GU=n(CRe,"A",{href:!0});var q7t=s(GU);EAr=r(q7t,"FlaxBigBirdForPreTraining"),q7t.forEach(t),CAr=r(CRe," (BigBird model)"),CRe.forEach(t),wAr=i(we),EE=n(we,"LI",{});var wRe=s(EE);e6e=n(wRe,"STRONG",{});var N7t=s(e6e);AAr=r(N7t,"electra"),N7t.forEach(t),yAr=r(wRe," \u2014 "),OU=n(wRe,"A",{href:!0});var j7t=s(OU);LAr=r(j7t,"FlaxElectraForPreTraining"),j7t.forEach(t),xAr=r(wRe," (ELECTRA model)"),wRe.forEach(t),$Ar=i(we),CE=n(we,"LI",{});var ARe=s(CE);o6e=n(ARe,"STRONG",{});var D7t=s(o6e);kAr=r(D7t,"mbart"),D7t.forEach(t),SAr=r(ARe," \u2014 "),VU=n(ARe,"A",{href:!0});var G7t=s(VU);RAr=r(G7t,"FlaxMBartForConditionalGeneration"),G7t.forEach(t),BAr=r(ARe," (mBART model)"),ARe.forEach(t),PAr=i(we),wE=n(we,"LI",{});var yRe=s(wE);r6e=n(yRe,"STRONG",{});var O7t=s(r6e);IAr=r(O7t,"mt5"),O7t.forEach(t),qAr=r(yRe," \u2014 "),XU=n(yRe,"A",{href:!0});var V7t=s(XU);NAr=r(V7t,"FlaxMT5ForConditionalGeneration"),V7t.forEach(t),jAr=r(yRe," (mT5 model)"),yRe.forEach(t),DAr=i(we),AE=n(we,"LI",{});var LRe=s(AE);t6e=n(LRe,"STRONG",{});var X7t=s(t6e);GAr=r(X7t,"roberta"),X7t.forEach(t),OAr=r(LRe," \u2014 "),zU=n(LRe,"A",{href:!0});var z7t=s(zU);VAr=r(z7t,"FlaxRobertaForMaskedLM"),z7t.forEach(t),XAr=r(LRe," (RoBERTa model)"),LRe.forEach(t),zAr=i(we),yE=n(we,"LI",{});var xRe=s(yE);a6e=n(xRe,"STRONG",{});var Q7t=s(a6e);QAr=r(Q7t,"roformer"),Q7t.forEach(t),WAr=r(xRe," \u2014 "),QU=n(xRe,"A",{href:!0});var W7t=s(QU);HAr=r(W7t,"FlaxRoFormerForMaskedLM"),W7t.forEach(t),UAr=r(xRe," (RoFormer model)"),xRe.forEach(t),JAr=i(we),LE=n(we,"LI",{});var $Re=s(LE);n6e=n($Re,"STRONG",{});var H7t=s(n6e);YAr=r(H7t,"t5"),H7t.forEach(t),KAr=r($Re," \u2014 "),WU=n($Re,"A",{href:!0});var U7t=s(WU);ZAr=r(U7t,"FlaxT5ForConditionalGeneration"),U7t.forEach(t),eyr=r($Re," (T5 model)"),$Re.forEach(t),oyr=i(we),xE=n(we,"LI",{});var kRe=s(xE);s6e=n(kRe,"STRONG",{});var J7t=s(s6e);ryr=r(J7t,"wav2vec2"),J7t.forEach(t),tyr=r(kRe," \u2014 "),HU=n(kRe,"A",{href:!0});var Y7t=s(HU);ayr=r(Y7t,"FlaxWav2Vec2ForPreTraining"),Y7t.forEach(t),nyr=r(kRe," (Wav2Vec2 model)"),kRe.forEach(t),syr=i(we),$E=n(we,"LI",{});var SRe=s($E);l6e=n(SRe,"STRONG",{});var K7t=s(l6e);lyr=r(K7t,"xlm-roberta"),K7t.forEach(t),iyr=r(SRe," \u2014 "),UU=n(SRe,"A",{href:!0});var Z7t=s(UU);dyr=r(Z7t,"FlaxXLMRobertaForMaskedLM"),Z7t.forEach(t),cyr=r(SRe," (XLM-RoBERTa model)"),SRe.forEach(t),we.forEach(t),fyr=i(ql),T(kE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),TIe=i(f),Ac=n(f,"H2",{class:!0});var ANe=s(Ac);SE=n(ANe,"A",{id:!0,class:!0,href:!0});var eMt=s(SE);i6e=n(eMt,"SPAN",{});var oMt=s(i6e);T(q8.$$.fragment,oMt),oMt.forEach(t),eMt.forEach(t),myr=i(ANe),d6e=n(ANe,"SPAN",{});var rMt=s(d6e);gyr=r(rMt,"FlaxAutoModelForMaskedLM"),rMt.forEach(t),ANe.forEach(t),MIe=i(f),gr=n(f,"DIV",{class:!0});var Nl=s(gr);T(N8.$$.fragment,Nl),hyr=i(Nl),yc=n(Nl,"P",{});var eZ=s(yc);pyr=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JU=n(eZ,"A",{href:!0});var tMt=s(JU);uyr=r(tMt,"from_pretrained()"),tMt.forEach(t),_yr=r(eZ," class method or the "),YU=n(eZ,"A",{href:!0});var aMt=s(YU);byr=r(aMt,"from_config()"),aMt.forEach(t),vyr=r(eZ,` class
method.`),eZ.forEach(t),Fyr=i(Nl),j8=n(Nl,"P",{});var yNe=s(j8);Tyr=r(yNe,"This class cannot be instantiated directly using "),c6e=n(yNe,"CODE",{});var nMt=s(c6e);Myr=r(nMt,"__init__()"),nMt.forEach(t),Eyr=r(yNe," (throws an error)."),yNe.forEach(t),Cyr=i(Nl),jt=n(Nl,"DIV",{class:!0});var lw=s(jt);T(D8.$$.fragment,lw),wyr=i(lw),f6e=n(lw,"P",{});var sMt=s(f6e);Ayr=r(sMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sMt.forEach(t),yyr=i(lw),Lc=n(lw,"P",{});var oZ=s(Lc);Lyr=r(oZ,`Note:
Loading a model from its configuration file does `),m6e=n(oZ,"STRONG",{});var lMt=s(m6e);xyr=r(lMt,"not"),lMt.forEach(t),$yr=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(oZ,"A",{href:!0});var iMt=s(KU);kyr=r(iMt,"from_pretrained()"),iMt.forEach(t),Syr=r(oZ," to load the model weights."),oZ.forEach(t),Ryr=i(lw),T(RE.$$.fragment,lw),lw.forEach(t),Byr=i(Nl),Dr=n(Nl,"DIV",{class:!0});var jl=s(Dr);T(G8.$$.fragment,jl),Pyr=i(jl),g6e=n(jl,"P",{});var dMt=s(g6e);Iyr=r(dMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dMt.forEach(t),qyr=i(jl),mn=n(jl,"P",{});var iw=s(mn);Nyr=r(iw,"The model class to instantiate is selected based on the "),h6e=n(iw,"CODE",{});var cMt=s(h6e);jyr=r(cMt,"model_type"),cMt.forEach(t),Dyr=r(iw,` property of the config object (either
passed as an argument or loaded from `),p6e=n(iw,"CODE",{});var fMt=s(p6e);Gyr=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),Oyr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=n(iw,"CODE",{});var mMt=s(u6e);Vyr=r(mMt,"pretrained_model_name_or_path"),mMt.forEach(t),Xyr=r(iw,":"),iw.forEach(t),zyr=i(jl),Le=n(jl,"UL",{});var Be=s(Le);BE=n(Be,"LI",{});var RRe=s(BE);_6e=n(RRe,"STRONG",{});var gMt=s(_6e);Qyr=r(gMt,"albert"),gMt.forEach(t),Wyr=r(RRe," \u2014 "),ZU=n(RRe,"A",{href:!0});var hMt=s(ZU);Hyr=r(hMt,"FlaxAlbertForMaskedLM"),hMt.forEach(t),Uyr=r(RRe," (ALBERT model)"),RRe.forEach(t),Jyr=i(Be),PE=n(Be,"LI",{});var BRe=s(PE);b6e=n(BRe,"STRONG",{});var pMt=s(b6e);Yyr=r(pMt,"bart"),pMt.forEach(t),Kyr=r(BRe," \u2014 "),eJ=n(BRe,"A",{href:!0});var uMt=s(eJ);Zyr=r(uMt,"FlaxBartForConditionalGeneration"),uMt.forEach(t),eLr=r(BRe," (BART model)"),BRe.forEach(t),oLr=i(Be),IE=n(Be,"LI",{});var PRe=s(IE);v6e=n(PRe,"STRONG",{});var _Mt=s(v6e);rLr=r(_Mt,"bert"),_Mt.forEach(t),tLr=r(PRe," \u2014 "),oJ=n(PRe,"A",{href:!0});var bMt=s(oJ);aLr=r(bMt,"FlaxBertForMaskedLM"),bMt.forEach(t),nLr=r(PRe," (BERT model)"),PRe.forEach(t),sLr=i(Be),qE=n(Be,"LI",{});var IRe=s(qE);F6e=n(IRe,"STRONG",{});var vMt=s(F6e);lLr=r(vMt,"big_bird"),vMt.forEach(t),iLr=r(IRe," \u2014 "),rJ=n(IRe,"A",{href:!0});var FMt=s(rJ);dLr=r(FMt,"FlaxBigBirdForMaskedLM"),FMt.forEach(t),cLr=r(IRe," (BigBird model)"),IRe.forEach(t),fLr=i(Be),NE=n(Be,"LI",{});var qRe=s(NE);T6e=n(qRe,"STRONG",{});var TMt=s(T6e);mLr=r(TMt,"distilbert"),TMt.forEach(t),gLr=r(qRe," \u2014 "),tJ=n(qRe,"A",{href:!0});var MMt=s(tJ);hLr=r(MMt,"FlaxDistilBertForMaskedLM"),MMt.forEach(t),pLr=r(qRe," (DistilBERT model)"),qRe.forEach(t),uLr=i(Be),jE=n(Be,"LI",{});var NRe=s(jE);M6e=n(NRe,"STRONG",{});var EMt=s(M6e);_Lr=r(EMt,"electra"),EMt.forEach(t),bLr=r(NRe," \u2014 "),aJ=n(NRe,"A",{href:!0});var CMt=s(aJ);vLr=r(CMt,"FlaxElectraForMaskedLM"),CMt.forEach(t),FLr=r(NRe," (ELECTRA model)"),NRe.forEach(t),TLr=i(Be),DE=n(Be,"LI",{});var jRe=s(DE);E6e=n(jRe,"STRONG",{});var wMt=s(E6e);MLr=r(wMt,"mbart"),wMt.forEach(t),ELr=r(jRe," \u2014 "),nJ=n(jRe,"A",{href:!0});var AMt=s(nJ);CLr=r(AMt,"FlaxMBartForConditionalGeneration"),AMt.forEach(t),wLr=r(jRe," (mBART model)"),jRe.forEach(t),ALr=i(Be),GE=n(Be,"LI",{});var DRe=s(GE);C6e=n(DRe,"STRONG",{});var yMt=s(C6e);yLr=r(yMt,"roberta"),yMt.forEach(t),LLr=r(DRe," \u2014 "),sJ=n(DRe,"A",{href:!0});var LMt=s(sJ);xLr=r(LMt,"FlaxRobertaForMaskedLM"),LMt.forEach(t),$Lr=r(DRe," (RoBERTa model)"),DRe.forEach(t),kLr=i(Be),OE=n(Be,"LI",{});var GRe=s(OE);w6e=n(GRe,"STRONG",{});var xMt=s(w6e);SLr=r(xMt,"roformer"),xMt.forEach(t),RLr=r(GRe," \u2014 "),lJ=n(GRe,"A",{href:!0});var $Mt=s(lJ);BLr=r($Mt,"FlaxRoFormerForMaskedLM"),$Mt.forEach(t),PLr=r(GRe," (RoFormer model)"),GRe.forEach(t),ILr=i(Be),VE=n(Be,"LI",{});var ORe=s(VE);A6e=n(ORe,"STRONG",{});var kMt=s(A6e);qLr=r(kMt,"xlm-roberta"),kMt.forEach(t),NLr=r(ORe," \u2014 "),iJ=n(ORe,"A",{href:!0});var SMt=s(iJ);jLr=r(SMt,"FlaxXLMRobertaForMaskedLM"),SMt.forEach(t),DLr=r(ORe," (XLM-RoBERTa model)"),ORe.forEach(t),Be.forEach(t),GLr=i(jl),T(XE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),EIe=i(f),xc=n(f,"H2",{class:!0});var LNe=s(xc);zE=n(LNe,"A",{id:!0,class:!0,href:!0});var RMt=s(zE);y6e=n(RMt,"SPAN",{});var BMt=s(y6e);T(O8.$$.fragment,BMt),BMt.forEach(t),RMt.forEach(t),OLr=i(LNe),L6e=n(LNe,"SPAN",{});var PMt=s(L6e);VLr=r(PMt,"FlaxAutoModelForSeq2SeqLM"),PMt.forEach(t),LNe.forEach(t),CIe=i(f),hr=n(f,"DIV",{class:!0});var Dl=s(hr);T(V8.$$.fragment,Dl),XLr=i(Dl),$c=n(Dl,"P",{});var rZ=s($c);zLr=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dJ=n(rZ,"A",{href:!0});var IMt=s(dJ);QLr=r(IMt,"from_pretrained()"),IMt.forEach(t),WLr=r(rZ," class method or the "),cJ=n(rZ,"A",{href:!0});var qMt=s(cJ);HLr=r(qMt,"from_config()"),qMt.forEach(t),ULr=r(rZ,` class
method.`),rZ.forEach(t),JLr=i(Dl),X8=n(Dl,"P",{});var xNe=s(X8);YLr=r(xNe,"This class cannot be instantiated directly using "),x6e=n(xNe,"CODE",{});var NMt=s(x6e);KLr=r(NMt,"__init__()"),NMt.forEach(t),ZLr=r(xNe," (throws an error)."),xNe.forEach(t),e8r=i(Dl),Dt=n(Dl,"DIV",{class:!0});var dw=s(Dt);T(z8.$$.fragment,dw),o8r=i(dw),$6e=n(dw,"P",{});var jMt=s($6e);r8r=r(jMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jMt.forEach(t),t8r=i(dw),kc=n(dw,"P",{});var tZ=s(kc);a8r=r(tZ,`Note:
Loading a model from its configuration file does `),k6e=n(tZ,"STRONG",{});var DMt=s(k6e);n8r=r(DMt,"not"),DMt.forEach(t),s8r=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(tZ,"A",{href:!0});var GMt=s(fJ);l8r=r(GMt,"from_pretrained()"),GMt.forEach(t),i8r=r(tZ," to load the model weights."),tZ.forEach(t),d8r=i(dw),T(QE.$$.fragment,dw),dw.forEach(t),c8r=i(Dl),Gr=n(Dl,"DIV",{class:!0});var Gl=s(Gr);T(Q8.$$.fragment,Gl),f8r=i(Gl),S6e=n(Gl,"P",{});var OMt=s(S6e);m8r=r(OMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OMt.forEach(t),g8r=i(Gl),gn=n(Gl,"P",{});var cw=s(gn);h8r=r(cw,"The model class to instantiate is selected based on the "),R6e=n(cw,"CODE",{});var VMt=s(R6e);p8r=r(VMt,"model_type"),VMt.forEach(t),u8r=r(cw,` property of the config object (either
passed as an argument or loaded from `),B6e=n(cw,"CODE",{});var XMt=s(B6e);_8r=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),b8r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(cw,"CODE",{});var zMt=s(P6e);v8r=r(zMt,"pretrained_model_name_or_path"),zMt.forEach(t),F8r=r(cw,":"),cw.forEach(t),T8r=i(Gl),Se=n(Gl,"UL",{});var Ve=s(Se);WE=n(Ve,"LI",{});var VRe=s(WE);I6e=n(VRe,"STRONG",{});var QMt=s(I6e);M8r=r(QMt,"bart"),QMt.forEach(t),E8r=r(VRe," \u2014 "),mJ=n(VRe,"A",{href:!0});var WMt=s(mJ);C8r=r(WMt,"FlaxBartForConditionalGeneration"),WMt.forEach(t),w8r=r(VRe," (BART model)"),VRe.forEach(t),A8r=i(Ve),HE=n(Ve,"LI",{});var XRe=s(HE);q6e=n(XRe,"STRONG",{});var HMt=s(q6e);y8r=r(HMt,"blenderbot"),HMt.forEach(t),L8r=r(XRe," \u2014 "),gJ=n(XRe,"A",{href:!0});var UMt=s(gJ);x8r=r(UMt,"FlaxBlenderbotForConditionalGeneration"),UMt.forEach(t),$8r=r(XRe," (Blenderbot model)"),XRe.forEach(t),k8r=i(Ve),UE=n(Ve,"LI",{});var zRe=s(UE);N6e=n(zRe,"STRONG",{});var JMt=s(N6e);S8r=r(JMt,"blenderbot-small"),JMt.forEach(t),R8r=r(zRe," \u2014 "),hJ=n(zRe,"A",{href:!0});var YMt=s(hJ);B8r=r(YMt,"FlaxBlenderbotSmallForConditionalGeneration"),YMt.forEach(t),P8r=r(zRe," (BlenderbotSmall model)"),zRe.forEach(t),I8r=i(Ve),JE=n(Ve,"LI",{});var QRe=s(JE);j6e=n(QRe,"STRONG",{});var KMt=s(j6e);q8r=r(KMt,"encoder-decoder"),KMt.forEach(t),N8r=r(QRe," \u2014 "),pJ=n(QRe,"A",{href:!0});var ZMt=s(pJ);j8r=r(ZMt,"FlaxEncoderDecoderModel"),ZMt.forEach(t),D8r=r(QRe," (Encoder decoder model)"),QRe.forEach(t),G8r=i(Ve),YE=n(Ve,"LI",{});var WRe=s(YE);D6e=n(WRe,"STRONG",{});var e4t=s(D6e);O8r=r(e4t,"marian"),e4t.forEach(t),V8r=r(WRe," \u2014 "),uJ=n(WRe,"A",{href:!0});var o4t=s(uJ);X8r=r(o4t,"FlaxMarianMTModel"),o4t.forEach(t),z8r=r(WRe," (Marian model)"),WRe.forEach(t),Q8r=i(Ve),KE=n(Ve,"LI",{});var HRe=s(KE);G6e=n(HRe,"STRONG",{});var r4t=s(G6e);W8r=r(r4t,"mbart"),r4t.forEach(t),H8r=r(HRe," \u2014 "),_J=n(HRe,"A",{href:!0});var t4t=s(_J);U8r=r(t4t,"FlaxMBartForConditionalGeneration"),t4t.forEach(t),J8r=r(HRe," (mBART model)"),HRe.forEach(t),Y8r=i(Ve),ZE=n(Ve,"LI",{});var URe=s(ZE);O6e=n(URe,"STRONG",{});var a4t=s(O6e);K8r=r(a4t,"mt5"),a4t.forEach(t),Z8r=r(URe," \u2014 "),bJ=n(URe,"A",{href:!0});var n4t=s(bJ);exr=r(n4t,"FlaxMT5ForConditionalGeneration"),n4t.forEach(t),oxr=r(URe," (mT5 model)"),URe.forEach(t),rxr=i(Ve),e5=n(Ve,"LI",{});var JRe=s(e5);V6e=n(JRe,"STRONG",{});var s4t=s(V6e);txr=r(s4t,"pegasus"),s4t.forEach(t),axr=r(JRe," \u2014 "),vJ=n(JRe,"A",{href:!0});var l4t=s(vJ);nxr=r(l4t,"FlaxPegasusForConditionalGeneration"),l4t.forEach(t),sxr=r(JRe," (Pegasus model)"),JRe.forEach(t),lxr=i(Ve),o5=n(Ve,"LI",{});var YRe=s(o5);X6e=n(YRe,"STRONG",{});var i4t=s(X6e);ixr=r(i4t,"t5"),i4t.forEach(t),dxr=r(YRe," \u2014 "),FJ=n(YRe,"A",{href:!0});var d4t=s(FJ);cxr=r(d4t,"FlaxT5ForConditionalGeneration"),d4t.forEach(t),fxr=r(YRe," (T5 model)"),YRe.forEach(t),Ve.forEach(t),mxr=i(Gl),T(r5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),wIe=i(f),Sc=n(f,"H2",{class:!0});var $Ne=s(Sc);t5=n($Ne,"A",{id:!0,class:!0,href:!0});var c4t=s(t5);z6e=n(c4t,"SPAN",{});var f4t=s(z6e);T(W8.$$.fragment,f4t),f4t.forEach(t),c4t.forEach(t),gxr=i($Ne),Q6e=n($Ne,"SPAN",{});var m4t=s(Q6e);hxr=r(m4t,"FlaxAutoModelForSequenceClassification"),m4t.forEach(t),$Ne.forEach(t),AIe=i(f),pr=n(f,"DIV",{class:!0});var Ol=s(pr);T(H8.$$.fragment,Ol),pxr=i(Ol),Rc=n(Ol,"P",{});var aZ=s(Rc);uxr=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TJ=n(aZ,"A",{href:!0});var g4t=s(TJ);_xr=r(g4t,"from_pretrained()"),g4t.forEach(t),bxr=r(aZ," class method or the "),MJ=n(aZ,"A",{href:!0});var h4t=s(MJ);vxr=r(h4t,"from_config()"),h4t.forEach(t),Fxr=r(aZ,` class
method.`),aZ.forEach(t),Txr=i(Ol),U8=n(Ol,"P",{});var kNe=s(U8);Mxr=r(kNe,"This class cannot be instantiated directly using "),W6e=n(kNe,"CODE",{});var p4t=s(W6e);Exr=r(p4t,"__init__()"),p4t.forEach(t),Cxr=r(kNe," (throws an error)."),kNe.forEach(t),wxr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var fw=s(Gt);T(J8.$$.fragment,fw),Axr=i(fw),H6e=n(fw,"P",{});var u4t=s(H6e);yxr=r(u4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),u4t.forEach(t),Lxr=i(fw),Bc=n(fw,"P",{});var nZ=s(Bc);xxr=r(nZ,`Note:
Loading a model from its configuration file does `),U6e=n(nZ,"STRONG",{});var _4t=s(U6e);$xr=r(_4t,"not"),_4t.forEach(t),kxr=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(nZ,"A",{href:!0});var b4t=s(EJ);Sxr=r(b4t,"from_pretrained()"),b4t.forEach(t),Rxr=r(nZ," to load the model weights."),nZ.forEach(t),Bxr=i(fw),T(a5.$$.fragment,fw),fw.forEach(t),Pxr=i(Ol),Or=n(Ol,"DIV",{class:!0});var Vl=s(Or);T(Y8.$$.fragment,Vl),Ixr=i(Vl),J6e=n(Vl,"P",{});var v4t=s(J6e);qxr=r(v4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),v4t.forEach(t),Nxr=i(Vl),hn=n(Vl,"P",{});var mw=s(hn);jxr=r(mw,"The model class to instantiate is selected based on the "),Y6e=n(mw,"CODE",{});var F4t=s(Y6e);Dxr=r(F4t,"model_type"),F4t.forEach(t),Gxr=r(mw,` property of the config object (either
passed as an argument or loaded from `),K6e=n(mw,"CODE",{});var T4t=s(K6e);Oxr=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),Vxr=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=n(mw,"CODE",{});var M4t=s(Z6e);Xxr=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),zxr=r(mw,":"),mw.forEach(t),Qxr=i(Vl),xe=n(Vl,"UL",{});var Pe=s(xe);n5=n(Pe,"LI",{});var KRe=s(n5);eTe=n(KRe,"STRONG",{});var E4t=s(eTe);Wxr=r(E4t,"albert"),E4t.forEach(t),Hxr=r(KRe," \u2014 "),CJ=n(KRe,"A",{href:!0});var C4t=s(CJ);Uxr=r(C4t,"FlaxAlbertForSequenceClassification"),C4t.forEach(t),Jxr=r(KRe," (ALBERT model)"),KRe.forEach(t),Yxr=i(Pe),s5=n(Pe,"LI",{});var ZRe=s(s5);oTe=n(ZRe,"STRONG",{});var w4t=s(oTe);Kxr=r(w4t,"bart"),w4t.forEach(t),Zxr=r(ZRe," \u2014 "),wJ=n(ZRe,"A",{href:!0});var A4t=s(wJ);e9r=r(A4t,"FlaxBartForSequenceClassification"),A4t.forEach(t),o9r=r(ZRe," (BART model)"),ZRe.forEach(t),r9r=i(Pe),l5=n(Pe,"LI",{});var eBe=s(l5);rTe=n(eBe,"STRONG",{});var y4t=s(rTe);t9r=r(y4t,"bert"),y4t.forEach(t),a9r=r(eBe," \u2014 "),AJ=n(eBe,"A",{href:!0});var L4t=s(AJ);n9r=r(L4t,"FlaxBertForSequenceClassification"),L4t.forEach(t),s9r=r(eBe," (BERT model)"),eBe.forEach(t),l9r=i(Pe),i5=n(Pe,"LI",{});var oBe=s(i5);tTe=n(oBe,"STRONG",{});var x4t=s(tTe);i9r=r(x4t,"big_bird"),x4t.forEach(t),d9r=r(oBe," \u2014 "),yJ=n(oBe,"A",{href:!0});var $4t=s(yJ);c9r=r($4t,"FlaxBigBirdForSequenceClassification"),$4t.forEach(t),f9r=r(oBe," (BigBird model)"),oBe.forEach(t),m9r=i(Pe),d5=n(Pe,"LI",{});var rBe=s(d5);aTe=n(rBe,"STRONG",{});var k4t=s(aTe);g9r=r(k4t,"distilbert"),k4t.forEach(t),h9r=r(rBe," \u2014 "),LJ=n(rBe,"A",{href:!0});var S4t=s(LJ);p9r=r(S4t,"FlaxDistilBertForSequenceClassification"),S4t.forEach(t),u9r=r(rBe," (DistilBERT model)"),rBe.forEach(t),_9r=i(Pe),c5=n(Pe,"LI",{});var tBe=s(c5);nTe=n(tBe,"STRONG",{});var R4t=s(nTe);b9r=r(R4t,"electra"),R4t.forEach(t),v9r=r(tBe," \u2014 "),xJ=n(tBe,"A",{href:!0});var B4t=s(xJ);F9r=r(B4t,"FlaxElectraForSequenceClassification"),B4t.forEach(t),T9r=r(tBe," (ELECTRA model)"),tBe.forEach(t),M9r=i(Pe),f5=n(Pe,"LI",{});var aBe=s(f5);sTe=n(aBe,"STRONG",{});var P4t=s(sTe);E9r=r(P4t,"mbart"),P4t.forEach(t),C9r=r(aBe," \u2014 "),$J=n(aBe,"A",{href:!0});var I4t=s($J);w9r=r(I4t,"FlaxMBartForSequenceClassification"),I4t.forEach(t),A9r=r(aBe," (mBART model)"),aBe.forEach(t),y9r=i(Pe),m5=n(Pe,"LI",{});var nBe=s(m5);lTe=n(nBe,"STRONG",{});var q4t=s(lTe);L9r=r(q4t,"roberta"),q4t.forEach(t),x9r=r(nBe," \u2014 "),kJ=n(nBe,"A",{href:!0});var N4t=s(kJ);$9r=r(N4t,"FlaxRobertaForSequenceClassification"),N4t.forEach(t),k9r=r(nBe," (RoBERTa model)"),nBe.forEach(t),S9r=i(Pe),g5=n(Pe,"LI",{});var sBe=s(g5);iTe=n(sBe,"STRONG",{});var j4t=s(iTe);R9r=r(j4t,"roformer"),j4t.forEach(t),B9r=r(sBe," \u2014 "),SJ=n(sBe,"A",{href:!0});var D4t=s(SJ);P9r=r(D4t,"FlaxRoFormerForSequenceClassification"),D4t.forEach(t),I9r=r(sBe," (RoFormer model)"),sBe.forEach(t),q9r=i(Pe),h5=n(Pe,"LI",{});var lBe=s(h5);dTe=n(lBe,"STRONG",{});var G4t=s(dTe);N9r=r(G4t,"xlm-roberta"),G4t.forEach(t),j9r=r(lBe," \u2014 "),RJ=n(lBe,"A",{href:!0});var O4t=s(RJ);D9r=r(O4t,"FlaxXLMRobertaForSequenceClassification"),O4t.forEach(t),G9r=r(lBe," (XLM-RoBERTa model)"),lBe.forEach(t),Pe.forEach(t),O9r=i(Vl),T(p5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),yIe=i(f),Pc=n(f,"H2",{class:!0});var SNe=s(Pc);u5=n(SNe,"A",{id:!0,class:!0,href:!0});var V4t=s(u5);cTe=n(V4t,"SPAN",{});var X4t=s(cTe);T(K8.$$.fragment,X4t),X4t.forEach(t),V4t.forEach(t),V9r=i(SNe),fTe=n(SNe,"SPAN",{});var z4t=s(fTe);X9r=r(z4t,"FlaxAutoModelForQuestionAnswering"),z4t.forEach(t),SNe.forEach(t),LIe=i(f),ur=n(f,"DIV",{class:!0});var Xl=s(ur);T(Z8.$$.fragment,Xl),z9r=i(Xl),Ic=n(Xl,"P",{});var sZ=s(Ic);Q9r=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BJ=n(sZ,"A",{href:!0});var Q4t=s(BJ);W9r=r(Q4t,"from_pretrained()"),Q4t.forEach(t),H9r=r(sZ," class method or the "),PJ=n(sZ,"A",{href:!0});var W4t=s(PJ);U9r=r(W4t,"from_config()"),W4t.forEach(t),J9r=r(sZ,` class
method.`),sZ.forEach(t),Y9r=i(Xl),ex=n(Xl,"P",{});var RNe=s(ex);K9r=r(RNe,"This class cannot be instantiated directly using "),mTe=n(RNe,"CODE",{});var H4t=s(mTe);Z9r=r(H4t,"__init__()"),H4t.forEach(t),e$r=r(RNe," (throws an error)."),RNe.forEach(t),o$r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var gw=s(Ot);T(ox.$$.fragment,gw),r$r=i(gw),gTe=n(gw,"P",{});var U4t=s(gTe);t$r=r(U4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),U4t.forEach(t),a$r=i(gw),qc=n(gw,"P",{});var lZ=s(qc);n$r=r(lZ,`Note:
Loading a model from its configuration file does `),hTe=n(lZ,"STRONG",{});var J4t=s(hTe);s$r=r(J4t,"not"),J4t.forEach(t),l$r=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=n(lZ,"A",{href:!0});var Y4t=s(IJ);i$r=r(Y4t,"from_pretrained()"),Y4t.forEach(t),d$r=r(lZ," to load the model weights."),lZ.forEach(t),c$r=i(gw),T(_5.$$.fragment,gw),gw.forEach(t),f$r=i(Xl),Vr=n(Xl,"DIV",{class:!0});var zl=s(Vr);T(rx.$$.fragment,zl),m$r=i(zl),pTe=n(zl,"P",{});var K4t=s(pTe);g$r=r(K4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),K4t.forEach(t),h$r=i(zl),pn=n(zl,"P",{});var hw=s(pn);p$r=r(hw,"The model class to instantiate is selected based on the "),uTe=n(hw,"CODE",{});var Z4t=s(uTe);u$r=r(Z4t,"model_type"),Z4t.forEach(t),_$r=r(hw,` property of the config object (either
passed as an argument or loaded from `),_Te=n(hw,"CODE",{});var eEt=s(_Te);b$r=r(eEt,"pretrained_model_name_or_path"),eEt.forEach(t),v$r=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(hw,"CODE",{});var oEt=s(bTe);F$r=r(oEt,"pretrained_model_name_or_path"),oEt.forEach(t),T$r=r(hw,":"),hw.forEach(t),M$r=i(zl),$e=n(zl,"UL",{});var Ie=s($e);b5=n(Ie,"LI",{});var iBe=s(b5);vTe=n(iBe,"STRONG",{});var rEt=s(vTe);E$r=r(rEt,"albert"),rEt.forEach(t),C$r=r(iBe," \u2014 "),qJ=n(iBe,"A",{href:!0});var tEt=s(qJ);w$r=r(tEt,"FlaxAlbertForQuestionAnswering"),tEt.forEach(t),A$r=r(iBe," (ALBERT model)"),iBe.forEach(t),y$r=i(Ie),v5=n(Ie,"LI",{});var dBe=s(v5);FTe=n(dBe,"STRONG",{});var aEt=s(FTe);L$r=r(aEt,"bart"),aEt.forEach(t),x$r=r(dBe," \u2014 "),NJ=n(dBe,"A",{href:!0});var nEt=s(NJ);$$r=r(nEt,"FlaxBartForQuestionAnswering"),nEt.forEach(t),k$r=r(dBe," (BART model)"),dBe.forEach(t),S$r=i(Ie),F5=n(Ie,"LI",{});var cBe=s(F5);TTe=n(cBe,"STRONG",{});var sEt=s(TTe);R$r=r(sEt,"bert"),sEt.forEach(t),B$r=r(cBe," \u2014 "),jJ=n(cBe,"A",{href:!0});var lEt=s(jJ);P$r=r(lEt,"FlaxBertForQuestionAnswering"),lEt.forEach(t),I$r=r(cBe," (BERT model)"),cBe.forEach(t),q$r=i(Ie),T5=n(Ie,"LI",{});var fBe=s(T5);MTe=n(fBe,"STRONG",{});var iEt=s(MTe);N$r=r(iEt,"big_bird"),iEt.forEach(t),j$r=r(fBe," \u2014 "),DJ=n(fBe,"A",{href:!0});var dEt=s(DJ);D$r=r(dEt,"FlaxBigBirdForQuestionAnswering"),dEt.forEach(t),G$r=r(fBe," (BigBird model)"),fBe.forEach(t),O$r=i(Ie),M5=n(Ie,"LI",{});var mBe=s(M5);ETe=n(mBe,"STRONG",{});var cEt=s(ETe);V$r=r(cEt,"distilbert"),cEt.forEach(t),X$r=r(mBe," \u2014 "),GJ=n(mBe,"A",{href:!0});var fEt=s(GJ);z$r=r(fEt,"FlaxDistilBertForQuestionAnswering"),fEt.forEach(t),Q$r=r(mBe," (DistilBERT model)"),mBe.forEach(t),W$r=i(Ie),E5=n(Ie,"LI",{});var gBe=s(E5);CTe=n(gBe,"STRONG",{});var mEt=s(CTe);H$r=r(mEt,"electra"),mEt.forEach(t),U$r=r(gBe," \u2014 "),OJ=n(gBe,"A",{href:!0});var gEt=s(OJ);J$r=r(gEt,"FlaxElectraForQuestionAnswering"),gEt.forEach(t),Y$r=r(gBe," (ELECTRA model)"),gBe.forEach(t),K$r=i(Ie),C5=n(Ie,"LI",{});var hBe=s(C5);wTe=n(hBe,"STRONG",{});var hEt=s(wTe);Z$r=r(hEt,"mbart"),hEt.forEach(t),ekr=r(hBe," \u2014 "),VJ=n(hBe,"A",{href:!0});var pEt=s(VJ);okr=r(pEt,"FlaxMBartForQuestionAnswering"),pEt.forEach(t),rkr=r(hBe," (mBART model)"),hBe.forEach(t),tkr=i(Ie),w5=n(Ie,"LI",{});var pBe=s(w5);ATe=n(pBe,"STRONG",{});var uEt=s(ATe);akr=r(uEt,"roberta"),uEt.forEach(t),nkr=r(pBe," \u2014 "),XJ=n(pBe,"A",{href:!0});var _Et=s(XJ);skr=r(_Et,"FlaxRobertaForQuestionAnswering"),_Et.forEach(t),lkr=r(pBe," (RoBERTa model)"),pBe.forEach(t),ikr=i(Ie),A5=n(Ie,"LI",{});var uBe=s(A5);yTe=n(uBe,"STRONG",{});var bEt=s(yTe);dkr=r(bEt,"roformer"),bEt.forEach(t),ckr=r(uBe," \u2014 "),zJ=n(uBe,"A",{href:!0});var vEt=s(zJ);fkr=r(vEt,"FlaxRoFormerForQuestionAnswering"),vEt.forEach(t),mkr=r(uBe," (RoFormer model)"),uBe.forEach(t),gkr=i(Ie),y5=n(Ie,"LI",{});var _Be=s(y5);LTe=n(_Be,"STRONG",{});var FEt=s(LTe);hkr=r(FEt,"xlm-roberta"),FEt.forEach(t),pkr=r(_Be," \u2014 "),QJ=n(_Be,"A",{href:!0});var TEt=s(QJ);ukr=r(TEt,"FlaxXLMRobertaForQuestionAnswering"),TEt.forEach(t),_kr=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),Ie.forEach(t),bkr=i(zl),T(L5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),xIe=i(f),Nc=n(f,"H2",{class:!0});var BNe=s(Nc);x5=n(BNe,"A",{id:!0,class:!0,href:!0});var MEt=s(x5);xTe=n(MEt,"SPAN",{});var EEt=s(xTe);T(tx.$$.fragment,EEt),EEt.forEach(t),MEt.forEach(t),vkr=i(BNe),$Te=n(BNe,"SPAN",{});var CEt=s($Te);Fkr=r(CEt,"FlaxAutoModelForTokenClassification"),CEt.forEach(t),BNe.forEach(t),$Ie=i(f),_r=n(f,"DIV",{class:!0});var Ql=s(_r);T(ax.$$.fragment,Ql),Tkr=i(Ql),jc=n(Ql,"P",{});var iZ=s(jc);Mkr=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WJ=n(iZ,"A",{href:!0});var wEt=s(WJ);Ekr=r(wEt,"from_pretrained()"),wEt.forEach(t),Ckr=r(iZ," class method or the "),HJ=n(iZ,"A",{href:!0});var AEt=s(HJ);wkr=r(AEt,"from_config()"),AEt.forEach(t),Akr=r(iZ,` class
method.`),iZ.forEach(t),ykr=i(Ql),nx=n(Ql,"P",{});var PNe=s(nx);Lkr=r(PNe,"This class cannot be instantiated directly using "),kTe=n(PNe,"CODE",{});var yEt=s(kTe);xkr=r(yEt,"__init__()"),yEt.forEach(t),$kr=r(PNe," (throws an error)."),PNe.forEach(t),kkr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var pw=s(Vt);T(sx.$$.fragment,pw),Skr=i(pw),STe=n(pw,"P",{});var LEt=s(STe);Rkr=r(LEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),LEt.forEach(t),Bkr=i(pw),Dc=n(pw,"P",{});var dZ=s(Dc);Pkr=r(dZ,`Note:
Loading a model from its configuration file does `),RTe=n(dZ,"STRONG",{});var xEt=s(RTe);Ikr=r(xEt,"not"),xEt.forEach(t),qkr=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(dZ,"A",{href:!0});var $Et=s(UJ);Nkr=r($Et,"from_pretrained()"),$Et.forEach(t),jkr=r(dZ," to load the model weights."),dZ.forEach(t),Dkr=i(pw),T($5.$$.fragment,pw),pw.forEach(t),Gkr=i(Ql),Xr=n(Ql,"DIV",{class:!0});var Wl=s(Xr);T(lx.$$.fragment,Wl),Okr=i(Wl),BTe=n(Wl,"P",{});var kEt=s(BTe);Vkr=r(kEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kEt.forEach(t),Xkr=i(Wl),un=n(Wl,"P",{});var uw=s(un);zkr=r(uw,"The model class to instantiate is selected based on the "),PTe=n(uw,"CODE",{});var SEt=s(PTe);Qkr=r(SEt,"model_type"),SEt.forEach(t),Wkr=r(uw,` property of the config object (either
passed as an argument or loaded from `),ITe=n(uw,"CODE",{});var REt=s(ITe);Hkr=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),Ukr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=n(uw,"CODE",{});var BEt=s(qTe);Jkr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),Ykr=r(uw,":"),uw.forEach(t),Kkr=i(Wl),De=n(Wl,"UL",{});var Fo=s(De);k5=n(Fo,"LI",{});var bBe=s(k5);NTe=n(bBe,"STRONG",{});var PEt=s(NTe);Zkr=r(PEt,"albert"),PEt.forEach(t),eSr=r(bBe," \u2014 "),JJ=n(bBe,"A",{href:!0});var IEt=s(JJ);oSr=r(IEt,"FlaxAlbertForTokenClassification"),IEt.forEach(t),rSr=r(bBe," (ALBERT model)"),bBe.forEach(t),tSr=i(Fo),S5=n(Fo,"LI",{});var vBe=s(S5);jTe=n(vBe,"STRONG",{});var qEt=s(jTe);aSr=r(qEt,"bert"),qEt.forEach(t),nSr=r(vBe," \u2014 "),YJ=n(vBe,"A",{href:!0});var NEt=s(YJ);sSr=r(NEt,"FlaxBertForTokenClassification"),NEt.forEach(t),lSr=r(vBe," (BERT model)"),vBe.forEach(t),iSr=i(Fo),R5=n(Fo,"LI",{});var FBe=s(R5);DTe=n(FBe,"STRONG",{});var jEt=s(DTe);dSr=r(jEt,"big_bird"),jEt.forEach(t),cSr=r(FBe," \u2014 "),KJ=n(FBe,"A",{href:!0});var DEt=s(KJ);fSr=r(DEt,"FlaxBigBirdForTokenClassification"),DEt.forEach(t),mSr=r(FBe," (BigBird model)"),FBe.forEach(t),gSr=i(Fo),B5=n(Fo,"LI",{});var TBe=s(B5);GTe=n(TBe,"STRONG",{});var GEt=s(GTe);hSr=r(GEt,"distilbert"),GEt.forEach(t),pSr=r(TBe," \u2014 "),ZJ=n(TBe,"A",{href:!0});var OEt=s(ZJ);uSr=r(OEt,"FlaxDistilBertForTokenClassification"),OEt.forEach(t),_Sr=r(TBe," (DistilBERT model)"),TBe.forEach(t),bSr=i(Fo),P5=n(Fo,"LI",{});var MBe=s(P5);OTe=n(MBe,"STRONG",{});var VEt=s(OTe);vSr=r(VEt,"electra"),VEt.forEach(t),FSr=r(MBe," \u2014 "),eY=n(MBe,"A",{href:!0});var XEt=s(eY);TSr=r(XEt,"FlaxElectraForTokenClassification"),XEt.forEach(t),MSr=r(MBe," (ELECTRA model)"),MBe.forEach(t),ESr=i(Fo),I5=n(Fo,"LI",{});var EBe=s(I5);VTe=n(EBe,"STRONG",{});var zEt=s(VTe);CSr=r(zEt,"roberta"),zEt.forEach(t),wSr=r(EBe," \u2014 "),oY=n(EBe,"A",{href:!0});var QEt=s(oY);ASr=r(QEt,"FlaxRobertaForTokenClassification"),QEt.forEach(t),ySr=r(EBe," (RoBERTa model)"),EBe.forEach(t),LSr=i(Fo),q5=n(Fo,"LI",{});var CBe=s(q5);XTe=n(CBe,"STRONG",{});var WEt=s(XTe);xSr=r(WEt,"roformer"),WEt.forEach(t),$Sr=r(CBe," \u2014 "),rY=n(CBe,"A",{href:!0});var HEt=s(rY);kSr=r(HEt,"FlaxRoFormerForTokenClassification"),HEt.forEach(t),SSr=r(CBe," (RoFormer model)"),CBe.forEach(t),RSr=i(Fo),N5=n(Fo,"LI",{});var wBe=s(N5);zTe=n(wBe,"STRONG",{});var UEt=s(zTe);BSr=r(UEt,"xlm-roberta"),UEt.forEach(t),PSr=r(wBe," \u2014 "),tY=n(wBe,"A",{href:!0});var JEt=s(tY);ISr=r(JEt,"FlaxXLMRobertaForTokenClassification"),JEt.forEach(t),qSr=r(wBe," (XLM-RoBERTa model)"),wBe.forEach(t),Fo.forEach(t),NSr=i(Wl),T(j5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),kIe=i(f),Gc=n(f,"H2",{class:!0});var INe=s(Gc);D5=n(INe,"A",{id:!0,class:!0,href:!0});var YEt=s(D5);QTe=n(YEt,"SPAN",{});var KEt=s(QTe);T(ix.$$.fragment,KEt),KEt.forEach(t),YEt.forEach(t),jSr=i(INe),WTe=n(INe,"SPAN",{});var ZEt=s(WTe);DSr=r(ZEt,"FlaxAutoModelForMultipleChoice"),ZEt.forEach(t),INe.forEach(t),SIe=i(f),br=n(f,"DIV",{class:!0});var Hl=s(br);T(dx.$$.fragment,Hl),GSr=i(Hl),Oc=n(Hl,"P",{});var cZ=s(Oc);OSr=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aY=n(cZ,"A",{href:!0});var e5t=s(aY);VSr=r(e5t,"from_pretrained()"),e5t.forEach(t),XSr=r(cZ," class method or the "),nY=n(cZ,"A",{href:!0});var o5t=s(nY);zSr=r(o5t,"from_config()"),o5t.forEach(t),QSr=r(cZ,` class
method.`),cZ.forEach(t),WSr=i(Hl),cx=n(Hl,"P",{});var qNe=s(cx);HSr=r(qNe,"This class cannot be instantiated directly using "),HTe=n(qNe,"CODE",{});var r5t=s(HTe);USr=r(r5t,"__init__()"),r5t.forEach(t),JSr=r(qNe," (throws an error)."),qNe.forEach(t),YSr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var _w=s(Xt);T(fx.$$.fragment,_w),KSr=i(_w),UTe=n(_w,"P",{});var t5t=s(UTe);ZSr=r(t5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),t5t.forEach(t),eRr=i(_w),Vc=n(_w,"P",{});var fZ=s(Vc);oRr=r(fZ,`Note:
Loading a model from its configuration file does `),JTe=n(fZ,"STRONG",{});var a5t=s(JTe);rRr=r(a5t,"not"),a5t.forEach(t),tRr=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(fZ,"A",{href:!0});var n5t=s(sY);aRr=r(n5t,"from_pretrained()"),n5t.forEach(t),nRr=r(fZ," to load the model weights."),fZ.forEach(t),sRr=i(_w),T(G5.$$.fragment,_w),_w.forEach(t),lRr=i(Hl),zr=n(Hl,"DIV",{class:!0});var Ul=s(zr);T(mx.$$.fragment,Ul),iRr=i(Ul),YTe=n(Ul,"P",{});var s5t=s(YTe);dRr=r(s5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),s5t.forEach(t),cRr=i(Ul),_n=n(Ul,"P",{});var bw=s(_n);fRr=r(bw,"The model class to instantiate is selected based on the "),KTe=n(bw,"CODE",{});var l5t=s(KTe);mRr=r(l5t,"model_type"),l5t.forEach(t),gRr=r(bw,` property of the config object (either
passed as an argument or loaded from `),ZTe=n(bw,"CODE",{});var i5t=s(ZTe);hRr=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),pRr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=n(bw,"CODE",{});var d5t=s(e7e);uRr=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),_Rr=r(bw,":"),bw.forEach(t),bRr=i(Ul),Ge=n(Ul,"UL",{});var To=s(Ge);O5=n(To,"LI",{});var ABe=s(O5);o7e=n(ABe,"STRONG",{});var c5t=s(o7e);vRr=r(c5t,"albert"),c5t.forEach(t),FRr=r(ABe," \u2014 "),lY=n(ABe,"A",{href:!0});var f5t=s(lY);TRr=r(f5t,"FlaxAlbertForMultipleChoice"),f5t.forEach(t),MRr=r(ABe," (ALBERT model)"),ABe.forEach(t),ERr=i(To),V5=n(To,"LI",{});var yBe=s(V5);r7e=n(yBe,"STRONG",{});var m5t=s(r7e);CRr=r(m5t,"bert"),m5t.forEach(t),wRr=r(yBe," \u2014 "),iY=n(yBe,"A",{href:!0});var g5t=s(iY);ARr=r(g5t,"FlaxBertForMultipleChoice"),g5t.forEach(t),yRr=r(yBe," (BERT model)"),yBe.forEach(t),LRr=i(To),X5=n(To,"LI",{});var LBe=s(X5);t7e=n(LBe,"STRONG",{});var h5t=s(t7e);xRr=r(h5t,"big_bird"),h5t.forEach(t),$Rr=r(LBe," \u2014 "),dY=n(LBe,"A",{href:!0});var p5t=s(dY);kRr=r(p5t,"FlaxBigBirdForMultipleChoice"),p5t.forEach(t),SRr=r(LBe," (BigBird model)"),LBe.forEach(t),RRr=i(To),z5=n(To,"LI",{});var xBe=s(z5);a7e=n(xBe,"STRONG",{});var u5t=s(a7e);BRr=r(u5t,"distilbert"),u5t.forEach(t),PRr=r(xBe," \u2014 "),cY=n(xBe,"A",{href:!0});var _5t=s(cY);IRr=r(_5t,"FlaxDistilBertForMultipleChoice"),_5t.forEach(t),qRr=r(xBe," (DistilBERT model)"),xBe.forEach(t),NRr=i(To),Q5=n(To,"LI",{});var $Be=s(Q5);n7e=n($Be,"STRONG",{});var b5t=s(n7e);jRr=r(b5t,"electra"),b5t.forEach(t),DRr=r($Be," \u2014 "),fY=n($Be,"A",{href:!0});var v5t=s(fY);GRr=r(v5t,"FlaxElectraForMultipleChoice"),v5t.forEach(t),ORr=r($Be," (ELECTRA model)"),$Be.forEach(t),VRr=i(To),W5=n(To,"LI",{});var kBe=s(W5);s7e=n(kBe,"STRONG",{});var F5t=s(s7e);XRr=r(F5t,"roberta"),F5t.forEach(t),zRr=r(kBe," \u2014 "),mY=n(kBe,"A",{href:!0});var T5t=s(mY);QRr=r(T5t,"FlaxRobertaForMultipleChoice"),T5t.forEach(t),WRr=r(kBe," (RoBERTa model)"),kBe.forEach(t),HRr=i(To),H5=n(To,"LI",{});var SBe=s(H5);l7e=n(SBe,"STRONG",{});var M5t=s(l7e);URr=r(M5t,"roformer"),M5t.forEach(t),JRr=r(SBe," \u2014 "),gY=n(SBe,"A",{href:!0});var E5t=s(gY);YRr=r(E5t,"FlaxRoFormerForMultipleChoice"),E5t.forEach(t),KRr=r(SBe," (RoFormer model)"),SBe.forEach(t),ZRr=i(To),U5=n(To,"LI",{});var RBe=s(U5);i7e=n(RBe,"STRONG",{});var C5t=s(i7e);eBr=r(C5t,"xlm-roberta"),C5t.forEach(t),oBr=r(RBe," \u2014 "),hY=n(RBe,"A",{href:!0});var w5t=s(hY);rBr=r(w5t,"FlaxXLMRobertaForMultipleChoice"),w5t.forEach(t),tBr=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),To.forEach(t),aBr=i(Ul),T(J5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),RIe=i(f),Xc=n(f,"H2",{class:!0});var NNe=s(Xc);Y5=n(NNe,"A",{id:!0,class:!0,href:!0});var A5t=s(Y5);d7e=n(A5t,"SPAN",{});var y5t=s(d7e);T(gx.$$.fragment,y5t),y5t.forEach(t),A5t.forEach(t),nBr=i(NNe),c7e=n(NNe,"SPAN",{});var L5t=s(c7e);sBr=r(L5t,"FlaxAutoModelForNextSentencePrediction"),L5t.forEach(t),NNe.forEach(t),BIe=i(f),vr=n(f,"DIV",{class:!0});var Jl=s(vr);T(hx.$$.fragment,Jl),lBr=i(Jl),zc=n(Jl,"P",{});var mZ=s(zc);iBr=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pY=n(mZ,"A",{href:!0});var x5t=s(pY);dBr=r(x5t,"from_pretrained()"),x5t.forEach(t),cBr=r(mZ," class method or the "),uY=n(mZ,"A",{href:!0});var $5t=s(uY);fBr=r($5t,"from_config()"),$5t.forEach(t),mBr=r(mZ,` class
method.`),mZ.forEach(t),gBr=i(Jl),px=n(Jl,"P",{});var jNe=s(px);hBr=r(jNe,"This class cannot be instantiated directly using "),f7e=n(jNe,"CODE",{});var k5t=s(f7e);pBr=r(k5t,"__init__()"),k5t.forEach(t),uBr=r(jNe," (throws an error)."),jNe.forEach(t),_Br=i(Jl),zt=n(Jl,"DIV",{class:!0});var vw=s(zt);T(ux.$$.fragment,vw),bBr=i(vw),m7e=n(vw,"P",{});var S5t=s(m7e);vBr=r(S5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),S5t.forEach(t),FBr=i(vw),Qc=n(vw,"P",{});var gZ=s(Qc);TBr=r(gZ,`Note:
Loading a model from its configuration file does `),g7e=n(gZ,"STRONG",{});var R5t=s(g7e);MBr=r(R5t,"not"),R5t.forEach(t),EBr=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=n(gZ,"A",{href:!0});var B5t=s(_Y);CBr=r(B5t,"from_pretrained()"),B5t.forEach(t),wBr=r(gZ," to load the model weights."),gZ.forEach(t),ABr=i(vw),T(K5.$$.fragment,vw),vw.forEach(t),yBr=i(Jl),Qr=n(Jl,"DIV",{class:!0});var Yl=s(Qr);T(_x.$$.fragment,Yl),LBr=i(Yl),h7e=n(Yl,"P",{});var P5t=s(h7e);xBr=r(P5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),P5t.forEach(t),$Br=i(Yl),bn=n(Yl,"P",{});var Fw=s(bn);kBr=r(Fw,"The model class to instantiate is selected based on the "),p7e=n(Fw,"CODE",{});var I5t=s(p7e);SBr=r(I5t,"model_type"),I5t.forEach(t),RBr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),u7e=n(Fw,"CODE",{});var q5t=s(u7e);BBr=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),PBr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_7e=n(Fw,"CODE",{});var N5t=s(_7e);IBr=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),qBr=r(Fw,":"),Fw.forEach(t),NBr=i(Yl),b7e=n(Yl,"UL",{});var j5t=s(b7e);Z5=n(j5t,"LI",{});var BBe=s(Z5);v7e=n(BBe,"STRONG",{});var D5t=s(v7e);jBr=r(D5t,"bert"),D5t.forEach(t),DBr=r(BBe," \u2014 "),bY=n(BBe,"A",{href:!0});var G5t=s(bY);GBr=r(G5t,"FlaxBertForNextSentencePrediction"),G5t.forEach(t),OBr=r(BBe," (BERT model)"),BBe.forEach(t),j5t.forEach(t),VBr=i(Yl),T(eC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),PIe=i(f),Wc=n(f,"H2",{class:!0});var DNe=s(Wc);oC=n(DNe,"A",{id:!0,class:!0,href:!0});var O5t=s(oC);F7e=n(O5t,"SPAN",{});var V5t=s(F7e);T(bx.$$.fragment,V5t),V5t.forEach(t),O5t.forEach(t),XBr=i(DNe),T7e=n(DNe,"SPAN",{});var X5t=s(T7e);zBr=r(X5t,"FlaxAutoModelForImageClassification"),X5t.forEach(t),DNe.forEach(t),IIe=i(f),Fr=n(f,"DIV",{class:!0});var Kl=s(Fr);T(vx.$$.fragment,Kl),QBr=i(Kl),Hc=n(Kl,"P",{});var hZ=s(Hc);WBr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vY=n(hZ,"A",{href:!0});var z5t=s(vY);HBr=r(z5t,"from_pretrained()"),z5t.forEach(t),UBr=r(hZ," class method or the "),FY=n(hZ,"A",{href:!0});var Q5t=s(FY);JBr=r(Q5t,"from_config()"),Q5t.forEach(t),YBr=r(hZ,` class
method.`),hZ.forEach(t),KBr=i(Kl),Fx=n(Kl,"P",{});var GNe=s(Fx);ZBr=r(GNe,"This class cannot be instantiated directly using "),M7e=n(GNe,"CODE",{});var W5t=s(M7e);ePr=r(W5t,"__init__()"),W5t.forEach(t),oPr=r(GNe," (throws an error)."),GNe.forEach(t),rPr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var Tw=s(Qt);T(Tx.$$.fragment,Tw),tPr=i(Tw),E7e=n(Tw,"P",{});var H5t=s(E7e);aPr=r(H5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),H5t.forEach(t),nPr=i(Tw),Uc=n(Tw,"P",{});var pZ=s(Uc);sPr=r(pZ,`Note:
Loading a model from its configuration file does `),C7e=n(pZ,"STRONG",{});var U5t=s(C7e);lPr=r(U5t,"not"),U5t.forEach(t),iPr=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(pZ,"A",{href:!0});var J5t=s(TY);dPr=r(J5t,"from_pretrained()"),J5t.forEach(t),cPr=r(pZ," to load the model weights."),pZ.forEach(t),fPr=i(Tw),T(rC.$$.fragment,Tw),Tw.forEach(t),mPr=i(Kl),Wr=n(Kl,"DIV",{class:!0});var Zl=s(Wr);T(Mx.$$.fragment,Zl),gPr=i(Zl),w7e=n(Zl,"P",{});var Y5t=s(w7e);hPr=r(Y5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Y5t.forEach(t),pPr=i(Zl),vn=n(Zl,"P",{});var Mw=s(vn);uPr=r(Mw,"The model class to instantiate is selected based on the "),A7e=n(Mw,"CODE",{});var K5t=s(A7e);_Pr=r(K5t,"model_type"),K5t.forEach(t),bPr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),y7e=n(Mw,"CODE",{});var Z5t=s(y7e);vPr=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),FPr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=n(Mw,"CODE",{});var eCt=s(L7e);TPr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),MPr=r(Mw,":"),Mw.forEach(t),EPr=i(Zl),Ex=n(Zl,"UL",{});var ONe=s(Ex);tC=n(ONe,"LI",{});var PBe=s(tC);x7e=n(PBe,"STRONG",{});var oCt=s(x7e);CPr=r(oCt,"beit"),oCt.forEach(t),wPr=r(PBe," \u2014 "),MY=n(PBe,"A",{href:!0});var rCt=s(MY);APr=r(rCt,"FlaxBeitForImageClassification"),rCt.forEach(t),yPr=r(PBe," (BEiT model)"),PBe.forEach(t),LPr=i(ONe),aC=n(ONe,"LI",{});var IBe=s(aC);$7e=n(IBe,"STRONG",{});var tCt=s($7e);xPr=r(tCt,"vit"),tCt.forEach(t),$Pr=r(IBe," \u2014 "),EY=n(IBe,"A",{href:!0});var aCt=s(EY);kPr=r(aCt,"FlaxViTForImageClassification"),aCt.forEach(t),SPr=r(IBe," (ViT model)"),IBe.forEach(t),ONe.forEach(t),RPr=i(Zl),T(nC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),qIe=i(f),Jc=n(f,"H2",{class:!0});var VNe=s(Jc);sC=n(VNe,"A",{id:!0,class:!0,href:!0});var nCt=s(sC);k7e=n(nCt,"SPAN",{});var sCt=s(k7e);T(Cx.$$.fragment,sCt),sCt.forEach(t),nCt.forEach(t),BPr=i(VNe),S7e=n(VNe,"SPAN",{});var lCt=s(S7e);PPr=r(lCt,"FlaxAutoModelForVision2Seq"),lCt.forEach(t),VNe.forEach(t),NIe=i(f),Tr=n(f,"DIV",{class:!0});var ei=s(Tr);T(wx.$$.fragment,ei),IPr=i(ei),Yc=n(ei,"P",{});var uZ=s(Yc);qPr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CY=n(uZ,"A",{href:!0});var iCt=s(CY);NPr=r(iCt,"from_pretrained()"),iCt.forEach(t),jPr=r(uZ," class method or the "),wY=n(uZ,"A",{href:!0});var dCt=s(wY);DPr=r(dCt,"from_config()"),dCt.forEach(t),GPr=r(uZ,` class
method.`),uZ.forEach(t),OPr=i(ei),Ax=n(ei,"P",{});var XNe=s(Ax);VPr=r(XNe,"This class cannot be instantiated directly using "),R7e=n(XNe,"CODE",{});var cCt=s(R7e);XPr=r(cCt,"__init__()"),cCt.forEach(t),zPr=r(XNe," (throws an error)."),XNe.forEach(t),QPr=i(ei),Wt=n(ei,"DIV",{class:!0});var Ew=s(Wt);T(yx.$$.fragment,Ew),WPr=i(Ew),B7e=n(Ew,"P",{});var fCt=s(B7e);HPr=r(fCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fCt.forEach(t),UPr=i(Ew),Kc=n(Ew,"P",{});var _Z=s(Kc);JPr=r(_Z,`Note:
Loading a model from its configuration file does `),P7e=n(_Z,"STRONG",{});var mCt=s(P7e);YPr=r(mCt,"not"),mCt.forEach(t),KPr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=n(_Z,"A",{href:!0});var gCt=s(AY);ZPr=r(gCt,"from_pretrained()"),gCt.forEach(t),eIr=r(_Z," to load the model weights."),_Z.forEach(t),oIr=i(Ew),T(lC.$$.fragment,Ew),Ew.forEach(t),rIr=i(ei),Hr=n(ei,"DIV",{class:!0});var oi=s(Hr);T(Lx.$$.fragment,oi),tIr=i(oi),I7e=n(oi,"P",{});var hCt=s(I7e);aIr=r(hCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hCt.forEach(t),nIr=i(oi),Fn=n(oi,"P",{});var Cw=s(Fn);sIr=r(Cw,"The model class to instantiate is selected based on the "),q7e=n(Cw,"CODE",{});var pCt=s(q7e);lIr=r(pCt,"model_type"),pCt.forEach(t),iIr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),N7e=n(Cw,"CODE",{});var uCt=s(N7e);dIr=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),cIr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(Cw,"CODE",{});var _Ct=s(j7e);fIr=r(_Ct,"pretrained_model_name_or_path"),_Ct.forEach(t),mIr=r(Cw,":"),Cw.forEach(t),gIr=i(oi),D7e=n(oi,"UL",{});var bCt=s(D7e);iC=n(bCt,"LI",{});var qBe=s(iC);G7e=n(qBe,"STRONG",{});var vCt=s(G7e);hIr=r(vCt,"vision-encoder-decoder"),vCt.forEach(t),pIr=r(qBe," \u2014 "),yY=n(qBe,"A",{href:!0});var FCt=s(yY);uIr=r(FCt,"FlaxVisionEncoderDecoderModel"),FCt.forEach(t),_Ir=r(qBe," (Vision Encoder decoder model)"),qBe.forEach(t),bCt.forEach(t),bIr=i(oi),T(dC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Mwt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer"),c(ii,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(sf,"id","extending-the-auto-classes"),c(sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sf,"href","#extending-the-auto-classes"),c(di,"class","relative group"),c(df,"id","transformers.AutoConfig"),c(df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(df,"href","#transformers.AutoConfig"),c(ci,"class","relative group"),c(H9,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(U9,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig"),c(J9,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig"),c(Y9,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig"),c(K9,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig"),c(Z9,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(e$,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig"),c(o$,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(r$,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(t$,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(a$,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig"),c(n$,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig"),c(s$,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig"),c(l$,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig"),c(i$,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig"),c(d$,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig"),c(c$,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(f$,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(m$,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(g$,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig"),c(h$,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(p$,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(u$,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig"),c(_$,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig"),c(b$,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig"),c(v$,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig"),c(F$,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig"),c(T$,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig"),c(M$,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(E$,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig"),c(C$,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig"),c(w$,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig"),c(A$,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig"),c(y$,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig"),c(L$,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config"),c(x$,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c($$,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig"),c(k$,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig"),c(S$,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig"),c(R$,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(B$,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(P$,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(I$,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(q$,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig"),c(N$,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig"),c(j$,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig"),c(D$,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig"),c(G$,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config"),c(O$,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig"),c(V$,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(X$,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig"),c(z$,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Q$,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(W$,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig"),c(H$,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config"),c(U$,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(J$,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Y$,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig"),c(K$,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Z$,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig"),c(ek,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(ok,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(rk,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(tk,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagConfig"),c(ak,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmConfig"),c(nk,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig"),c(sk,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig"),c(lk,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig"),c(ik,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig"),c(dk,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig"),c(ck,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig"),c(fk,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig"),c(mk,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig"),c(gk,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig"),c(hk,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig"),c(pk,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(uk,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(_k,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(bk,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig"),c(vk,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Fk,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig"),c(Tk,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config"),c(Mk,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig"),c(Ek,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig"),c(Ck,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(wk,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig"),c(Ak,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(yk,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Lk,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig"),c(xk,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig"),c($k,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(kk,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Sk,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Rk,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig"),c(Bk,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Pk,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Ik,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig"),c(qk,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig"),c(Nk,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig"),c(jk,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Dk,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Gk,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Ok,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig"),c(Vk,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig"),c(Xk,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ig,"id","transformers.AutoTokenizer"),c(ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ig,"href","#transformers.AutoTokenizer"),c(mi,"class","relative group"),c(zk,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Qk,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(Wk,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Hk,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizer"),c(Uk,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizerFast"),c(Jk,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Yk,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Kk,"href","/docs/transformers/pr_17060/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Zk,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(eS,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(oS,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(rS,"href","/docs/transformers/pr_17060/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(tS,"href","/docs/transformers/pr_17060/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(aS,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(nS,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(sS,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(lS,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(iS,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(dS,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(cS,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(fS,"href","/docs/transformers/pr_17060/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(mS,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizer"),c(gS,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(hS,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineTokenizer"),c(pS,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizer"),c(uS,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(_S,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(bS,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(vS,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizer"),c(FS,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(TS,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(MS,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ES,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(CS,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizer"),c(wS,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(AS,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(yS,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(LS,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(xS,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c($S,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(kS,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(SS,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizer"),c(RS,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(BS,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(PS,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizer"),c(IS,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(qS,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(NS,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizer"),c(jS,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(DS,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(GS,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(OS,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VS,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(XS,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zS,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(QS,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizer"),c(WS,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(HS,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(US,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(JS,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(YS,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(KS,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(eR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(oR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(rR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(tR,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(aR,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(nR,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizer"),c(sR,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizerFast"),c(lR,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizer"),c(iR,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(dR,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeTokenizer"),c(cR,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(fR,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(mR,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(gR,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianTokenizer"),c(hR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizer"),c(pR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(uR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(_R,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(bR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(vR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(FR,"href","/docs/transformers/pr_17060/en/model_doc/mluke#transformers.MLukeTokenizer"),c(TR,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(MR,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(ER,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(CR,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(wR,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5Tokenizer"),c(AR,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5TokenizerFast"),c(yR,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(LR,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(xR,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c($R,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(kR,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(SR,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(RR,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(BR,"href","/docs/transformers/pr_17060/en/model_doc/phobert#transformers.PhobertTokenizer"),c(PR,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartTokenizer"),c(IR,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(qR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(NR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(jR,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagTokenizer"),c(DR,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizer"),c(GR,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizerFast"),c(OR,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizer"),c(VR,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(XR,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizer"),c(zR,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(QR,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(WR,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(HR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JR,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(YR,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(KR,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(ZR,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(eB,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizer"),c(oB,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(rB,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(tB,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5Tokenizer"),c(nB,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5TokenizerFast"),c(sB,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasTokenizer"),c(lB,"href","/docs/transformers/pr_17060/en/model_doc/tapex#transformers.TapexTokenizer"),c(iB,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(dB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(cB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(gB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizer"),c(hB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(pB,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMTokenizer"),c(uB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(_B,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(bB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(vB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TB,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(MB,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(EB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(CB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"id","transformers.AutoFeatureExtractor"),c(Dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dg,"href","#transformers.AutoFeatureExtractor"),c(gi,"class","relative group"),c(wB,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(AB,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($B,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(IB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(qB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(NB,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JB,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ph,"id","transformers.AutoProcessor"),c(ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ph,"href","#transformers.AutoProcessor"),c(hi,"class","relative group"),c(YB,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(KB,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPProcessor"),c(ZB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(eP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(oP,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(rP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(nP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(sP,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRProcessor"),c(lP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dP,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltProcessor"),c(cP,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(fP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"id","transformers.AutoModel"),c(Bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bh,"href","#transformers.AutoModel"),c(ui,"class","relative group"),c(gP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uP,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel"),c(_P,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel"),c(bP,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel"),c(vP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(FP,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(TP,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel"),c(MP,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(EP,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(CP,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(wP,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel"),c(AP,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel"),c(yP,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel"),c(LP,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel"),c(xP,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel"),c($P,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel"),c(kP,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(SP,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(RP,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(BP,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel"),c(PP,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(IP,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(qP,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel"),c(NP,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel"),c(jP,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel"),c(DP,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(GP,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel"),c(OP,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel"),c(VP,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel"),c(XP,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel"),c(zP,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel"),c(QP,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel"),c(WP,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel"),c(HP,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel"),c(UP,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model"),c(JP,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(YP,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel"),c(KP,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel"),c(ZP,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel"),c(eI,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(oI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(rI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(tI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(aI,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel"),c(nI,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel"),c(sI,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel"),c(lI,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel"),c(iI,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model"),c(dI,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel"),c(cI,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel"),c(fI,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel"),c(mI,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(gI,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel"),c(hI,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel"),c(pI,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model"),c(uI,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel"),c(_I,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(bI,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel"),c(vI,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel"),c(FI,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel"),c(TI,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel"),c(MI,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(EI,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel"),c(CI,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel"),c(wI,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel"),c(AI,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel"),c(yI,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel"),c(LI,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(xI,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel"),c($I,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel"),c(kI,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel"),c(SI,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel"),c(RI,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel"),c(BI,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(PI,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel"),c(II,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(qI,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel"),c(NI,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model"),c(jI,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel"),c(DI,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(GI,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel"),c(OI,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(VI,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel"),c(XI,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel"),c(zI,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(QI,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel"),c(WI,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel"),c(HI,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(UI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(JI,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel"),c(YI,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel"),c(KI,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel"),c(ZI,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(eq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(oq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(rq,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel"),c(tq,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel"),c(aq,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wu,"id","transformers.AutoModelForPreTraining"),c(wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wu,"href","#transformers.AutoModelForPreTraining"),c(vi,"class","relative group"),c(nq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iq,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining"),c(dq,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cq,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining"),c(fq,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(mq,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gq,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(hq,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pq,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(uq,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_q,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bq,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining"),c(vq,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Fq,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Tq,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Mq,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Eq,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Cq,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(wq,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Aq,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yq,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Lq,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(xq,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c($q,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kq,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Sq,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(Rq,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Bq,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Pq,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Iq,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qq,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Nq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(jq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Dq,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Gq,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Oq,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Vq,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Xq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h_,"id","transformers.AutoModelForCausalLM"),c(h_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h_,"href","#transformers.AutoModelForCausalLM"),c(Mi,"class","relative group"),c(Wq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jq,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM"),c(Yq,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel"),c(Kq,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Zq,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(eN,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(oN,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(rN,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(tN,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(aN,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(nN,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(sN,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM"),c(lN,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iN,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(dN,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(cN,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM"),c(fN,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM"),c(mN,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(gN,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hN,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(pN,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(uN,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(_N,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(bN,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(vN,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(FN,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(TN,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(MN,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(EN,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(CN,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(wN,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(AN,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(LN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(xN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c($N,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z_,"id","transformers.AutoModelForMaskedLM"),c(Z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z_,"href","#transformers.AutoModelForMaskedLM"),c(wi,"class","relative group"),c(kN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BN,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(PN,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(IN,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM"),c(qN,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(NN,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(jN,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(DN,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(GN,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ON,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(VN,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(XN,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(zN,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(QN,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(WN,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(HN,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(UN,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(JN,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(YN,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(KN,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(ZN,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ej,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(oj,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(rj,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(tj,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(aj,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(nj,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(lj,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(ij,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(cj,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(fj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(mj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(gj,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N0,"id","transformers.AutoModelForSeq2SeqLM"),c(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N0,"href","#transformers.AutoModelForSeq2SeqLM"),c(Li,"class","relative group"),c(hj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_j,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Tj,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Mj,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Ej,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Cj,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(wj,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel"),c(Aj,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Lj,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(xj,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c($j,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Sj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Rj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n1,"id","transformers.AutoModelForSequenceClassification"),c(n1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n1,"href","#transformers.AutoModelForSequenceClassification"),c(ki,"class","relative group"),c(Bj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ij,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qj,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification"),c(jj,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(zj,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(eD,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(oD,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(rD,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(tD,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(aD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(nD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(sD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c($D,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tb,"id","transformers.AutoModelForMultipleChoice"),c(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tb,"href","#transformers.AutoModelForMultipleChoice"),c(Bi,"class","relative group"),c(kD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BD,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(PD,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice"),c(ID,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(qD,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(ND,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(jD,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(DD,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(GD,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(OD,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(VD,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(XD,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(zD,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(QD,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(WD,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(HD,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(UD,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(JD,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(YD,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(KD,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(eG,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(oG,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(rG,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(tG,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(aG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pb,"id","transformers.AutoModelForNextSentencePrediction"),c(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pb,"href","#transformers.AutoModelForNextSentencePrediction"),c(qi,"class","relative group"),c(iG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(mG,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(gG,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(hG,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(pG,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForTokenClassification"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForTokenClassification"),c(Di,"class","relative group"),c(uG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_G,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vG,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(FG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification"),c(TG,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(MG,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(EG,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification"),c(CG,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(wG,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(AG,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(yG,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(LG,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(xG,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification"),c($G,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(kG,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(SG,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(RG,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(BG,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(PG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(IG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(qG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(NG,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(jG,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(DG,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(GG,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(OG,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(VG,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(XG,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(zG,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(QG,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(WG,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(HG,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(UG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(JG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(YG,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(KG,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L2,"id","transformers.AutoModelForQuestionAnswering"),c(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L2,"href","#transformers.AutoModelForQuestionAnswering"),c(Vi,"class","relative group"),c(ZG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rO,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(uO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(NO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(GO,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bv,"id","transformers.AutoModelForTableQuestionAnswering"),c(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Qi,"class","relative group"),c(OO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zO,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ev,"id","transformers.AutoModelForImageClassification"),c(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ev,"href","#transformers.AutoModelForImageClassification"),c(Ui,"class","relative group"),c(QO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification"),c(JO,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(YO,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(KO,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification"),c(ZO,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(eV,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(oV,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(rV,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(tV,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(aV,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(nV,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(sV,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(lV,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(iV,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification"),c(dV,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification"),c(cV,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForVision2Seq"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForVision2Seq"),c(Ki,"class","relative group"),c(fV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hV,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vv,"id","transformers.AutoModelForAudioClassification"),c(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vv,"href","#transformers.AutoModelForAudioClassification"),c(od,"class","relative group"),c(pV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForAudioFrameClassification"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForAudioFrameClassification"),c(ad,"class","relative group"),c(AV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c($V,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(kV,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(SV,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForCTC"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForCTC"),c(ld,"class","relative group"),c(RV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(qV,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC"),c(NV,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC"),c(jV,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC"),c(DV,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(GV,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(OV,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(VV,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(cd,"class","relative group"),c(XV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WV,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(HV,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForAudioXVector"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForAudioXVector"),c(gd,"class","relative group"),c(UV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(ZV,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(eX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(oX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForMaskedImageModeling"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForMaskedImageModeling"),c(ud,"class","relative group"),c(rX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(sX,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(lX,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.AutoModelForObjectDetection"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.AutoModelForObjectDetection"),c(Fd,"class","relative group"),c(iX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection"),c(mX,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForImageSegmentation"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForImageSegmentation"),c(Ed,"class","relative group"),c(gX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uX,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForSemanticSegmentation"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ad,"class","relative group"),c(_X,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(TX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(MX,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(EX,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l6,"id","transformers.AutoModelForInstanceSegmentation"),c(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l6,"href","#transformers.AutoModelForInstanceSegmentation"),c(xd,"class","relative group"),c(CX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m6,"id","transformers.TFAutoModel"),c(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m6,"href","#transformers.TFAutoModel"),c(Sd,"class","relative group"),c(LX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel"),c(SX,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel"),c(RX,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel"),c(BX,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(PX,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(IX,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel"),c(qX,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel"),c(NX,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel"),c(jX,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel"),c(DX,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel"),c(GX,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel"),c(OX,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(VX,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(XX,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(zX,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel"),c(QX,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(WX,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel"),c(HX,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(UX,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model"),c(JX,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel"),c(YX,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel"),c(KX,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(ZX,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel"),c(ez,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel"),c(oz,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel"),c(rz,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel"),c(tz,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel"),c(az,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(nz,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel"),c(sz,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model"),c(lz,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(iz,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel"),c(dz,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel"),c(cz,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel"),c(fz,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel"),c(mz,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(gz,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model"),c(hz,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel"),c(pz,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(uz,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel"),c(_z,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(bz,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(vz,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel"),c(Fz,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Tz,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.TFAutoModelForPreTraining"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.TFAutoModelForPreTraining"),c(Pd,"class","relative group"),c(Mz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Az,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(yz,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Lz,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(xz,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c($z,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kz,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Sz,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Rz,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Bz,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Pz,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Iz,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(qz,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Nz,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(jz,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Dz,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Gz,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Oz,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Vz,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Xz,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(zz,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Qz,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Wz,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.TFAutoModelForCausalLM"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.TFAutoModelForCausalLM"),c(Nd,"class","relative group"),c(Hz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Kz,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Zz,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(eQ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(oQ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(rQ,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tQ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(aQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(nQ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(sQ,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iQ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.TFAutoModelForImageClassification"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.TFAutoModelForImageClassification"),c(Gd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(gQ,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.TFAutoModelForMaskedLM"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.TFAutoModelForMaskedLM"),c(Xd,"class","relative group"),c(hQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Q,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c($Q,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Wd,"class","relative group"),c(qQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DQ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(GQ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(VQ,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(XQ,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(zQ,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel"),c(QQ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(WQ,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(UQ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.TFAutoModelForSequenceClassification"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.TFAutoModelForSequenceClassification"),c(Jd,"class","relative group"),c(JQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(eW,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(oW,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(rW,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(tW,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(aW,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(iW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(dW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(cW,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(fW,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(gW,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(hW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(pW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(uW,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(_W,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(bW,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(vW,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForMultipleChoice"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Zd,"class","relative group"),c(wW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(xW,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c($W,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(kW,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(SW,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(RW,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(BW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(PW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(IW,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(qW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(NW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(jW,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(DW,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(GW,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(OW,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(VW,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(XW,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(rc,"class","relative group"),c(zW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.TFAutoModelForTokenClassification"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.TFAutoModelForTokenClassification"),c(nc,"class","relative group"),c(UW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(ZW,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(eH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(oH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(rH,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(tH,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(aH,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(nH,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(sH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(lH,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(iH,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(dH,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(cH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(fH,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(mH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(gH,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(hH,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(pH,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(uH,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_H,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.TFAutoModelForQuestionAnswering"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(ic,"class","relative group"),c(bH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(CH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(wH,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(AH,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(yH,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LH,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(xH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c($H,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(kH,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(SH,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(RH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(BH,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(PH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(IH,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(qH,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(NH,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(jH,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(DH,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForVision2Seq"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForVision2Seq"),c(fc,"class","relative group"),c(GH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(hc,"class","relative group"),c(zH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.FlaxAutoModel"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.FlaxAutoModel"),c(_c,"class","relative group"),c(UH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel"),c(ZH,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel"),c(eU,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel"),c(oU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel"),c(rU,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(tU,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(aU,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(nU,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel"),c(sU,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(lU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel"),c(iU,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(dU,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(cU,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(fU,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel"),c(mU,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gU,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hU,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(pU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(uU,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(_U,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model"),c(bU,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(vU,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel"),c(FU,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(TU,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(MU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.FlaxAutoModelForCausalLM"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Fc,"class","relative group"),c(EU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(yU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(LU,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(xU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c($U,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(kU,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(SU,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(RU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(BU,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_E,"id","transformers.FlaxAutoModelForPreTraining"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ec,"class","relative group"),c(PU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(jU,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(GU,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(OU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(VU,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XU,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(QU,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(WU,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(HU,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(UU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.FlaxAutoModelForMaskedLM"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ac,"class","relative group"),c(JU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(eJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(oJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(rJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(tJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(aJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(nJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(lJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(iJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(xc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(hJ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(uJ,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(_J,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bJ,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vJ,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Sc,"class","relative group"),c(TJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c($J,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(VJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(XJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(zJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(QJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.FlaxAutoModelForTokenClassification"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(WJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(YJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(KJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(ZJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(eY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(oY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(rY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(tY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Gc,"class","relative group"),c(aY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(iY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(dY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(cY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(fY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(mY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(gY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(hY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Xc,"class","relative group"),c(pY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Y,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.FlaxAutoModelForImageClassification"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Wc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(EY,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.FlaxAutoModelForVision2Seq"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Jc,"class","relative group"),c(CY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yY,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ri),b(f,rf,_),b(f,Kr,_),e(Kr,ti),e(Kr,ai),e(ai,ww),e(Kr,tf),b(f,qe,_),b(f,Xe,_),e(Xe,ni),e(Xe,Mn),e(Mn,Aw),e(Xe,En),e(Xe,Cn),e(Cn,yw),e(Xe,si),e(Xe,wn),e(wn,Lw),e(Xe,li),b(f,af,_),M(va,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,O9),e(Ae,ii),e(ii,V9),e(Ae,X9),b(f,Eo,_),b(f,Fa,_),e(Fa,z9),e(Fa,nf),e(nf,Q9),e(Fa,zNe),b(f,NBe,_),b(f,di,_),e(di,sf),e(sf,bZ),M(xw,bZ,null),e(di,QNe),e(di,vZ),e(vZ,WNe),b(f,jBe,_),b(f,An,_),e(An,HNe),e(An,FZ),e(FZ,UNe),e(An,JNe),e(An,TZ),e(TZ,YNe),e(An,KNe),b(f,DBe,_),M($w,f,_),b(f,GBe,_),b(f,W9,_),e(W9,ZNe),b(f,OBe,_),M(lf,f,_),b(f,VBe,_),b(f,ci,_),e(ci,df),e(df,MZ),M(kw,MZ,null),e(ci,eje),e(ci,EZ),e(EZ,oje),b(f,XBe,_),b(f,Co,_),M(Sw,Co,null),e(Co,rje),e(Co,Rw),e(Rw,tje),e(Rw,H9),e(H9,aje),e(Rw,nje),e(Co,sje),e(Co,Bw),e(Bw,lje),e(Bw,CZ),e(CZ,ije),e(Bw,dje),e(Co,cje),e(Co,Mr),M(Pw,Mr,null),e(Mr,fje),e(Mr,wZ),e(wZ,mje),e(Mr,gje),e(Mr,fi),e(fi,hje),e(fi,AZ),e(AZ,pje),e(fi,uje),e(fi,yZ),e(yZ,_je),e(fi,bje),e(Mr,vje),e(Mr,A),e(A,cf),e(cf,LZ),e(LZ,Fje),e(cf,Tje),e(cf,U9),e(U9,Mje),e(cf,Eje),e(A,Cje),e(A,ff),e(ff,xZ),e(xZ,wje),e(ff,Aje),e(ff,J9),e(J9,yje),e(ff,Lje),e(A,xje),e(A,mf),e(mf,$Z),e($Z,$je),e(mf,kje),e(mf,Y9),e(Y9,Sje),e(mf,Rje),e(A,Bje),e(A,gf),e(gf,kZ),e(kZ,Pje),e(gf,Ije),e(gf,K9),e(K9,qje),e(gf,Nje),e(A,jje),e(A,hf),e(hf,SZ),e(SZ,Dje),e(hf,Gje),e(hf,Z9),e(Z9,Oje),e(hf,Vje),e(A,Xje),e(A,pf),e(pf,RZ),e(RZ,zje),e(pf,Qje),e(pf,e$),e(e$,Wje),e(pf,Hje),e(A,Uje),e(A,uf),e(uf,BZ),e(BZ,Jje),e(uf,Yje),e(uf,o$),e(o$,Kje),e(uf,Zje),e(A,eDe),e(A,_f),e(_f,PZ),e(PZ,oDe),e(_f,rDe),e(_f,r$),e(r$,tDe),e(_f,aDe),e(A,nDe),e(A,bf),e(bf,IZ),e(IZ,sDe),e(bf,lDe),e(bf,t$),e(t$,iDe),e(bf,dDe),e(A,cDe),e(A,vf),e(vf,qZ),e(qZ,fDe),e(vf,mDe),e(vf,a$),e(a$,gDe),e(vf,hDe),e(A,pDe),e(A,Ff),e(Ff,NZ),e(NZ,uDe),e(Ff,_De),e(Ff,n$),e(n$,bDe),e(Ff,vDe),e(A,FDe),e(A,Tf),e(Tf,jZ),e(jZ,TDe),e(Tf,MDe),e(Tf,s$),e(s$,EDe),e(Tf,CDe),e(A,wDe),e(A,Mf),e(Mf,DZ),e(DZ,ADe),e(Mf,yDe),e(Mf,l$),e(l$,LDe),e(Mf,xDe),e(A,$De),e(A,Ef),e(Ef,GZ),e(GZ,kDe),e(Ef,SDe),e(Ef,i$),e(i$,RDe),e(Ef,BDe),e(A,PDe),e(A,Cf),e(Cf,OZ),e(OZ,IDe),e(Cf,qDe),e(Cf,d$),e(d$,NDe),e(Cf,jDe),e(A,DDe),e(A,wf),e(wf,VZ),e(VZ,GDe),e(wf,ODe),e(wf,c$),e(c$,VDe),e(wf,XDe),e(A,zDe),e(A,Af),e(Af,XZ),e(XZ,QDe),e(Af,WDe),e(Af,f$),e(f$,HDe),e(Af,UDe),e(A,JDe),e(A,yf),e(yf,zZ),e(zZ,YDe),e(yf,KDe),e(yf,m$),e(m$,ZDe),e(yf,eGe),e(A,oGe),e(A,Lf),e(Lf,QZ),e(QZ,rGe),e(Lf,tGe),e(Lf,g$),e(g$,aGe),e(Lf,nGe),e(A,sGe),e(A,xf),e(xf,WZ),e(WZ,lGe),e(xf,iGe),e(xf,h$),e(h$,dGe),e(xf,cGe),e(A,fGe),e(A,$f),e($f,HZ),e(HZ,mGe),e($f,gGe),e($f,p$),e(p$,hGe),e($f,pGe),e(A,uGe),e(A,kf),e(kf,UZ),e(UZ,_Ge),e(kf,bGe),e(kf,u$),e(u$,vGe),e(kf,FGe),e(A,TGe),e(A,Sf),e(Sf,JZ),e(JZ,MGe),e(Sf,EGe),e(Sf,_$),e(_$,CGe),e(Sf,wGe),e(A,AGe),e(A,Rf),e(Rf,YZ),e(YZ,yGe),e(Rf,LGe),e(Rf,b$),e(b$,xGe),e(Rf,$Ge),e(A,kGe),e(A,Bf),e(Bf,KZ),e(KZ,SGe),e(Bf,RGe),e(Bf,v$),e(v$,BGe),e(Bf,PGe),e(A,IGe),e(A,Pf),e(Pf,ZZ),e(ZZ,qGe),e(Pf,NGe),e(Pf,F$),e(F$,jGe),e(Pf,DGe),e(A,GGe),e(A,If),e(If,eee),e(eee,OGe),e(If,VGe),e(If,T$),e(T$,XGe),e(If,zGe),e(A,QGe),e(A,qf),e(qf,oee),e(oee,WGe),e(qf,HGe),e(qf,M$),e(M$,UGe),e(qf,JGe),e(A,YGe),e(A,Nf),e(Nf,ree),e(ree,KGe),e(Nf,ZGe),e(Nf,E$),e(E$,eOe),e(Nf,oOe),e(A,rOe),e(A,jf),e(jf,tee),e(tee,tOe),e(jf,aOe),e(jf,C$),e(C$,nOe),e(jf,sOe),e(A,lOe),e(A,Df),e(Df,aee),e(aee,iOe),e(Df,dOe),e(Df,w$),e(w$,cOe),e(Df,fOe),e(A,mOe),e(A,Gf),e(Gf,nee),e(nee,gOe),e(Gf,hOe),e(Gf,A$),e(A$,pOe),e(Gf,uOe),e(A,_Oe),e(A,Of),e(Of,see),e(see,bOe),e(Of,vOe),e(Of,y$),e(y$,FOe),e(Of,TOe),e(A,MOe),e(A,Vf),e(Vf,lee),e(lee,EOe),e(Vf,COe),e(Vf,L$),e(L$,wOe),e(Vf,AOe),e(A,yOe),e(A,Xf),e(Xf,iee),e(iee,LOe),e(Xf,xOe),e(Xf,x$),e(x$,$Oe),e(Xf,kOe),e(A,SOe),e(A,zf),e(zf,dee),e(dee,ROe),e(zf,BOe),e(zf,$$),e($$,POe),e(zf,IOe),e(A,qOe),e(A,Qf),e(Qf,cee),e(cee,NOe),e(Qf,jOe),e(Qf,k$),e(k$,DOe),e(Qf,GOe),e(A,OOe),e(A,Wf),e(Wf,fee),e(fee,VOe),e(Wf,XOe),e(Wf,S$),e(S$,zOe),e(Wf,QOe),e(A,WOe),e(A,Hf),e(Hf,mee),e(mee,HOe),e(Hf,UOe),e(Hf,R$),e(R$,JOe),e(Hf,YOe),e(A,KOe),e(A,Uf),e(Uf,gee),e(gee,ZOe),e(Uf,eVe),e(Uf,B$),e(B$,oVe),e(Uf,rVe),e(A,tVe),e(A,Jf),e(Jf,hee),e(hee,aVe),e(Jf,nVe),e(Jf,P$),e(P$,sVe),e(Jf,lVe),e(A,iVe),e(A,Yf),e(Yf,pee),e(pee,dVe),e(Yf,cVe),e(Yf,I$),e(I$,fVe),e(Yf,mVe),e(A,gVe),e(A,Kf),e(Kf,uee),e(uee,hVe),e(Kf,pVe),e(Kf,q$),e(q$,uVe),e(Kf,_Ve),e(A,bVe),e(A,Zf),e(Zf,_ee),e(_ee,vVe),e(Zf,FVe),e(Zf,N$),e(N$,TVe),e(Zf,MVe),e(A,EVe),e(A,em),e(em,bee),e(bee,CVe),e(em,wVe),e(em,j$),e(j$,AVe),e(em,yVe),e(A,LVe),e(A,om),e(om,vee),e(vee,xVe),e(om,$Ve),e(om,D$),e(D$,kVe),e(om,SVe),e(A,RVe),e(A,rm),e(rm,Fee),e(Fee,BVe),e(rm,PVe),e(rm,G$),e(G$,IVe),e(rm,qVe),e(A,NVe),e(A,tm),e(tm,Tee),e(Tee,jVe),e(tm,DVe),e(tm,O$),e(O$,GVe),e(tm,OVe),e(A,VVe),e(A,am),e(am,Mee),e(Mee,XVe),e(am,zVe),e(am,V$),e(V$,QVe),e(am,WVe),e(A,HVe),e(A,nm),e(nm,Eee),e(Eee,UVe),e(nm,JVe),e(nm,X$),e(X$,YVe),e(nm,KVe),e(A,ZVe),e(A,sm),e(sm,Cee),e(Cee,eXe),e(sm,oXe),e(sm,z$),e(z$,rXe),e(sm,tXe),e(A,aXe),e(A,lm),e(lm,wee),e(wee,nXe),e(lm,sXe),e(lm,Q$),e(Q$,lXe),e(lm,iXe),e(A,dXe),e(A,im),e(im,Aee),e(Aee,cXe),e(im,fXe),e(im,W$),e(W$,mXe),e(im,gXe),e(A,hXe),e(A,dm),e(dm,yee),e(yee,pXe),e(dm,uXe),e(dm,H$),e(H$,_Xe),e(dm,bXe),e(A,vXe),e(A,cm),e(cm,Lee),e(Lee,FXe),e(cm,TXe),e(cm,U$),e(U$,MXe),e(cm,EXe),e(A,CXe),e(A,fm),e(fm,xee),e(xee,wXe),e(fm,AXe),e(fm,J$),e(J$,yXe),e(fm,LXe),e(A,xXe),e(A,mm),e(mm,$ee),e($ee,$Xe),e(mm,kXe),e(mm,Y$),e(Y$,SXe),e(mm,RXe),e(A,BXe),e(A,gm),e(gm,kee),e(kee,PXe),e(gm,IXe),e(gm,K$),e(K$,qXe),e(gm,NXe),e(A,jXe),e(A,hm),e(hm,See),e(See,DXe),e(hm,GXe),e(hm,Z$),e(Z$,OXe),e(hm,VXe),e(A,XXe),e(A,pm),e(pm,Ree),e(Ree,zXe),e(pm,QXe),e(pm,ek),e(ek,WXe),e(pm,HXe),e(A,UXe),e(A,um),e(um,Bee),e(Bee,JXe),e(um,YXe),e(um,ok),e(ok,KXe),e(um,ZXe),e(A,eze),e(A,_m),e(_m,Pee),e(Pee,oze),e(_m,rze),e(_m,rk),e(rk,tze),e(_m,aze),e(A,nze),e(A,bm),e(bm,Iee),e(Iee,sze),e(bm,lze),e(bm,tk),e(tk,ize),e(bm,dze),e(A,cze),e(A,vm),e(vm,qee),e(qee,fze),e(vm,mze),e(vm,ak),e(ak,gze),e(vm,hze),e(A,pze),e(A,Fm),e(Fm,Nee),e(Nee,uze),e(Fm,_ze),e(Fm,nk),e(nk,bze),e(Fm,vze),e(A,Fze),e(A,Tm),e(Tm,jee),e(jee,Tze),e(Tm,Mze),e(Tm,sk),e(sk,Eze),e(Tm,Cze),e(A,wze),e(A,Mm),e(Mm,Dee),e(Dee,Aze),e(Mm,yze),e(Mm,lk),e(lk,Lze),e(Mm,xze),e(A,$ze),e(A,Em),e(Em,Gee),e(Gee,kze),e(Em,Sze),e(Em,ik),e(ik,Rze),e(Em,Bze),e(A,Pze),e(A,Cm),e(Cm,Oee),e(Oee,Ize),e(Cm,qze),e(Cm,dk),e(dk,Nze),e(Cm,jze),e(A,Dze),e(A,wm),e(wm,Vee),e(Vee,Gze),e(wm,Oze),e(wm,ck),e(ck,Vze),e(wm,Xze),e(A,zze),e(A,Am),e(Am,Xee),e(Xee,Qze),e(Am,Wze),e(Am,fk),e(fk,Hze),e(Am,Uze),e(A,Jze),e(A,ym),e(ym,zee),e(zee,Yze),e(ym,Kze),e(ym,mk),e(mk,Zze),e(ym,eQe),e(A,oQe),e(A,Lm),e(Lm,Qee),e(Qee,rQe),e(Lm,tQe),e(Lm,gk),e(gk,aQe),e(Lm,nQe),e(A,sQe),e(A,xm),e(xm,Wee),e(Wee,lQe),e(xm,iQe),e(xm,hk),e(hk,dQe),e(xm,cQe),e(A,fQe),e(A,$m),e($m,Hee),e(Hee,mQe),e($m,gQe),e($m,pk),e(pk,hQe),e($m,pQe),e(A,uQe),e(A,km),e(km,Uee),e(Uee,_Qe),e(km,bQe),e(km,uk),e(uk,vQe),e(km,FQe),e(A,TQe),e(A,Sm),e(Sm,Jee),e(Jee,MQe),e(Sm,EQe),e(Sm,_k),e(_k,CQe),e(Sm,wQe),e(A,AQe),e(A,Rm),e(Rm,Yee),e(Yee,yQe),e(Rm,LQe),e(Rm,bk),e(bk,xQe),e(Rm,$Qe),e(A,kQe),e(A,Bm),e(Bm,Kee),e(Kee,SQe),e(Bm,RQe),e(Bm,vk),e(vk,BQe),e(Bm,PQe),e(A,IQe),e(A,Pm),e(Pm,Zee),e(Zee,qQe),e(Pm,NQe),e(Pm,Fk),e(Fk,jQe),e(Pm,DQe),e(A,GQe),e(A,Im),e(Im,eoe),e(eoe,OQe),e(Im,VQe),e(Im,Tk),e(Tk,XQe),e(Im,zQe),e(A,QQe),e(A,qm),e(qm,ooe),e(ooe,WQe),e(qm,HQe),e(qm,Mk),e(Mk,UQe),e(qm,JQe),e(A,YQe),e(A,Nm),e(Nm,roe),e(roe,KQe),e(Nm,ZQe),e(Nm,Ek),e(Ek,eWe),e(Nm,oWe),e(A,rWe),e(A,jm),e(jm,toe),e(toe,tWe),e(jm,aWe),e(jm,Ck),e(Ck,nWe),e(jm,sWe),e(A,lWe),e(A,Dm),e(Dm,aoe),e(aoe,iWe),e(Dm,dWe),e(Dm,wk),e(wk,cWe),e(Dm,fWe),e(A,mWe),e(A,Gm),e(Gm,noe),e(noe,gWe),e(Gm,hWe),e(Gm,Ak),e(Ak,pWe),e(Gm,uWe),e(A,_We),e(A,Om),e(Om,soe),e(soe,bWe),e(Om,vWe),e(Om,yk),e(yk,FWe),e(Om,TWe),e(A,MWe),e(A,Vm),e(Vm,loe),e(loe,EWe),e(Vm,CWe),e(Vm,Lk),e(Lk,wWe),e(Vm,AWe),e(A,yWe),e(A,Xm),e(Xm,ioe),e(ioe,LWe),e(Xm,xWe),e(Xm,xk),e(xk,$We),e(Xm,kWe),e(A,SWe),e(A,zm),e(zm,doe),e(doe,RWe),e(zm,BWe),e(zm,$k),e($k,PWe),e(zm,IWe),e(A,qWe),e(A,Qm),e(Qm,coe),e(coe,NWe),e(Qm,jWe),e(Qm,kk),e(kk,DWe),e(Qm,GWe),e(A,OWe),e(A,Wm),e(Wm,foe),e(foe,VWe),e(Wm,XWe),e(Wm,Sk),e(Sk,zWe),e(Wm,QWe),e(A,WWe),e(A,Hm),e(Hm,moe),e(moe,HWe),e(Hm,UWe),e(Hm,Rk),e(Rk,JWe),e(Hm,YWe),e(A,KWe),e(A,Um),e(Um,goe),e(goe,ZWe),e(Um,eHe),e(Um,Bk),e(Bk,oHe),e(Um,rHe),e(A,tHe),e(A,Jm),e(Jm,hoe),e(hoe,aHe),e(Jm,nHe),e(Jm,Pk),e(Pk,sHe),e(Jm,lHe),e(A,iHe),e(A,Ym),e(Ym,poe),e(poe,dHe),e(Ym,cHe),e(Ym,Ik),e(Ik,fHe),e(Ym,mHe),e(A,gHe),e(A,Km),e(Km,uoe),e(uoe,hHe),e(Km,pHe),e(Km,qk),e(qk,uHe),e(Km,_He),e(A,bHe),e(A,Zm),e(Zm,_oe),e(_oe,vHe),e(Zm,FHe),e(Zm,Nk),e(Nk,THe),e(Zm,MHe),e(A,EHe),e(A,eg),e(eg,boe),e(boe,CHe),e(eg,wHe),e(eg,jk),e(jk,AHe),e(eg,yHe),e(A,LHe),e(A,og),e(og,voe),e(voe,xHe),e(og,$He),e(og,Dk),e(Dk,kHe),e(og,SHe),e(A,RHe),e(A,rg),e(rg,Foe),e(Foe,BHe),e(rg,PHe),e(rg,Gk),e(Gk,IHe),e(rg,qHe),e(A,NHe),e(A,tg),e(tg,Toe),e(Toe,jHe),e(tg,DHe),e(tg,Ok),e(Ok,GHe),e(tg,OHe),e(A,VHe),e(A,ag),e(ag,Moe),e(Moe,XHe),e(ag,zHe),e(ag,Vk),e(Vk,QHe),e(ag,WHe),e(A,HHe),e(A,ng),e(ng,Eoe),e(Eoe,UHe),e(ng,JHe),e(ng,Xk),e(Xk,YHe),e(ng,KHe),e(Mr,ZHe),M(sg,Mr,null),e(Co,eUe),e(Co,lg),M(Iw,lg,null),e(lg,oUe),e(lg,Coe),e(Coe,rUe),b(f,zBe,_),b(f,mi,_),e(mi,ig),e(ig,woe),M(qw,woe,null),e(mi,tUe),e(mi,Aoe),e(Aoe,aUe),b(f,QBe,_),b(f,wo,_),M(Nw,wo,null),e(wo,nUe),e(wo,jw),e(jw,sUe),e(jw,zk),e(zk,lUe),e(jw,iUe),e(wo,dUe),e(wo,Dw),e(Dw,cUe),e(Dw,yoe),e(yoe,fUe),e(Dw,mUe),e(wo,gUe),e(wo,Er),M(Gw,Er,null),e(Er,hUe),e(Er,Loe),e(Loe,pUe),e(Er,uUe),e(Er,Ta),e(Ta,_Ue),e(Ta,xoe),e(xoe,bUe),e(Ta,vUe),e(Ta,$oe),e($oe,FUe),e(Ta,TUe),e(Ta,koe),e(koe,MUe),e(Ta,EUe),e(Er,CUe),e(Er,k),e(k,yn),e(yn,Soe),e(Soe,wUe),e(yn,AUe),e(yn,Qk),e(Qk,yUe),e(yn,LUe),e(yn,Wk),e(Wk,xUe),e(yn,$Ue),e(k,kUe),e(k,Ln),e(Ln,Roe),e(Roe,SUe),e(Ln,RUe),e(Ln,Hk),e(Hk,BUe),e(Ln,PUe),e(Ln,Uk),e(Uk,IUe),e(Ln,qUe),e(k,NUe),e(k,xn),e(xn,Boe),e(Boe,jUe),e(xn,DUe),e(xn,Jk),e(Jk,GUe),e(xn,OUe),e(xn,Yk),e(Yk,VUe),e(xn,XUe),e(k,zUe),e(k,dg),e(dg,Poe),e(Poe,QUe),e(dg,WUe),e(dg,Kk),e(Kk,HUe),e(dg,UUe),e(k,JUe),e(k,$n),e($n,Ioe),e(Ioe,YUe),e($n,KUe),e($n,Zk),e(Zk,ZUe),e($n,eJe),e($n,eS),e(eS,oJe),e($n,rJe),e(k,tJe),e(k,cg),e(cg,qoe),e(qoe,aJe),e(cg,nJe),e(cg,oS),e(oS,sJe),e(cg,lJe),e(k,iJe),e(k,fg),e(fg,Noe),e(Noe,dJe),e(fg,cJe),e(fg,rS),e(rS,fJe),e(fg,mJe),e(k,gJe),e(k,mg),e(mg,joe),e(joe,hJe),e(mg,pJe),e(mg,tS),e(tS,uJe),e(mg,_Je),e(k,bJe),e(k,kn),e(kn,Doe),e(Doe,vJe),e(kn,FJe),e(kn,aS),e(aS,TJe),e(kn,MJe),e(kn,nS),e(nS,EJe),e(kn,CJe),e(k,wJe),e(k,Sn),e(Sn,Goe),e(Goe,AJe),e(Sn,yJe),e(Sn,sS),e(sS,LJe),e(Sn,xJe),e(Sn,lS),e(lS,$Je),e(Sn,kJe),e(k,SJe),e(k,Rn),e(Rn,Ooe),e(Ooe,RJe),e(Rn,BJe),e(Rn,iS),e(iS,PJe),e(Rn,IJe),e(Rn,dS),e(dS,qJe),e(Rn,NJe),e(k,jJe),e(k,gg),e(gg,Voe),e(Voe,DJe),e(gg,GJe),e(gg,cS),e(cS,OJe),e(gg,VJe),e(k,XJe),e(k,hg),e(hg,Xoe),e(Xoe,zJe),e(hg,QJe),e(hg,fS),e(fS,WJe),e(hg,HJe),e(k,UJe),e(k,Bn),e(Bn,zoe),e(zoe,JJe),e(Bn,YJe),e(Bn,mS),e(mS,KJe),e(Bn,ZJe),e(Bn,gS),e(gS,eYe),e(Bn,oYe),e(k,rYe),e(k,pg),e(pg,Qoe),e(Qoe,tYe),e(pg,aYe),e(pg,hS),e(hS,nYe),e(pg,sYe),e(k,lYe),e(k,Pn),e(Pn,Woe),e(Woe,iYe),e(Pn,dYe),e(Pn,pS),e(pS,cYe),e(Pn,fYe),e(Pn,uS),e(uS,mYe),e(Pn,gYe),e(k,hYe),e(k,In),e(In,Hoe),e(Hoe,pYe),e(In,uYe),e(In,_S),e(_S,_Ye),e(In,bYe),e(In,bS),e(bS,vYe),e(In,FYe),e(k,TYe),e(k,qn),e(qn,Uoe),e(Uoe,MYe),e(qn,EYe),e(qn,vS),e(vS,CYe),e(qn,wYe),e(qn,FS),e(FS,AYe),e(qn,yYe),e(k,LYe),e(k,ug),e(ug,Joe),e(Joe,xYe),e(ug,$Ye),e(ug,TS),e(TS,kYe),e(ug,SYe),e(k,RYe),e(k,Nn),e(Nn,Yoe),e(Yoe,BYe),e(Nn,PYe),e(Nn,MS),e(MS,IYe),e(Nn,qYe),e(Nn,ES),e(ES,NYe),e(Nn,jYe),e(k,DYe),e(k,jn),e(jn,Koe),e(Koe,GYe),e(jn,OYe),e(jn,CS),e(CS,VYe),e(jn,XYe),e(jn,wS),e(wS,zYe),e(jn,QYe),e(k,WYe),e(k,Dn),e(Dn,Zoe),e(Zoe,HYe),e(Dn,UYe),e(Dn,AS),e(AS,JYe),e(Dn,YYe),e(Dn,yS),e(yS,KYe),e(Dn,ZYe),e(k,eKe),e(k,Gn),e(Gn,ere),e(ere,oKe),e(Gn,rKe),e(Gn,LS),e(LS,tKe),e(Gn,aKe),e(Gn,xS),e(xS,nKe),e(Gn,sKe),e(k,lKe),e(k,On),e(On,ore),e(ore,iKe),e(On,dKe),e(On,$S),e($S,cKe),e(On,fKe),e(On,kS),e(kS,mKe),e(On,gKe),e(k,hKe),e(k,Vn),e(Vn,rre),e(rre,pKe),e(Vn,uKe),e(Vn,SS),e(SS,_Ke),e(Vn,bKe),e(Vn,RS),e(RS,vKe),e(Vn,FKe),e(k,TKe),e(k,_g),e(_g,tre),e(tre,MKe),e(_g,EKe),e(_g,BS),e(BS,CKe),e(_g,wKe),e(k,AKe),e(k,Xn),e(Xn,are),e(are,yKe),e(Xn,LKe),e(Xn,PS),e(PS,xKe),e(Xn,$Ke),e(Xn,IS),e(IS,kKe),e(Xn,SKe),e(k,RKe),e(k,bg),e(bg,nre),e(nre,BKe),e(bg,PKe),e(bg,qS),e(qS,IKe),e(bg,qKe),e(k,NKe),e(k,zn),e(zn,sre),e(sre,jKe),e(zn,DKe),e(zn,NS),e(NS,GKe),e(zn,OKe),e(zn,jS),e(jS,VKe),e(zn,XKe),e(k,zKe),e(k,Qn),e(Qn,lre),e(lre,QKe),e(Qn,WKe),e(Qn,DS),e(DS,HKe),e(Qn,UKe),e(Qn,GS),e(GS,JKe),e(Qn,YKe),e(k,KKe),e(k,Wn),e(Wn,ire),e(ire,ZKe),e(Wn,eZe),e(Wn,OS),e(OS,oZe),e(Wn,rZe),e(Wn,VS),e(VS,tZe),e(Wn,aZe),e(k,nZe),e(k,Hn),e(Hn,dre),e(dre,sZe),e(Hn,lZe),e(Hn,XS),e(XS,iZe),e(Hn,dZe),e(Hn,zS),e(zS,cZe),e(Hn,fZe),e(k,mZe),e(k,Un),e(Un,cre),e(cre,gZe),e(Un,hZe),e(Un,QS),e(QS,pZe),e(Un,uZe),e(Un,WS),e(WS,_Ze),e(Un,bZe),e(k,vZe),e(k,vg),e(vg,fre),e(fre,FZe),e(vg,TZe),e(vg,HS),e(HS,MZe),e(vg,EZe),e(k,CZe),e(k,Jn),e(Jn,mre),e(mre,wZe),e(Jn,AZe),e(Jn,US),e(US,yZe),e(Jn,LZe),e(Jn,JS),e(JS,xZe),e(Jn,$Ze),e(k,kZe),e(k,Yn),e(Yn,gre),e(gre,SZe),e(Yn,RZe),e(Yn,YS),e(YS,BZe),e(Yn,PZe),e(Yn,KS),e(KS,IZe),e(Yn,qZe),e(k,NZe),e(k,Kn),e(Kn,hre),e(hre,jZe),e(Kn,DZe),e(Kn,ZS),e(ZS,GZe),e(Kn,OZe),e(Kn,eR),e(eR,VZe),e(Kn,XZe),e(k,zZe),e(k,Zn),e(Zn,pre),e(pre,QZe),e(Zn,WZe),e(Zn,oR),e(oR,HZe),e(Zn,UZe),e(Zn,rR),e(rR,JZe),e(Zn,YZe),e(k,KZe),e(k,es),e(es,ure),e(ure,ZZe),e(es,eeo),e(es,tR),e(tR,oeo),e(es,reo),e(es,aR),e(aR,teo),e(es,aeo),e(k,neo),e(k,os),e(os,_re),e(_re,seo),e(os,leo),e(os,nR),e(nR,ieo),e(os,deo),e(os,sR),e(sR,ceo),e(os,feo),e(k,meo),e(k,rs),e(rs,bre),e(bre,geo),e(rs,heo),e(rs,lR),e(lR,peo),e(rs,ueo),e(rs,iR),e(iR,_eo),e(rs,beo),e(k,veo),e(k,Fg),e(Fg,vre),e(vre,Feo),e(Fg,Teo),e(Fg,dR),e(dR,Meo),e(Fg,Eeo),e(k,Ceo),e(k,ts),e(ts,Fre),e(Fre,weo),e(ts,Aeo),e(ts,cR),e(cR,yeo),e(ts,Leo),e(ts,fR),e(fR,xeo),e(ts,$eo),e(k,keo),e(k,Tg),e(Tg,Tre),e(Tre,Seo),e(Tg,Reo),e(Tg,mR),e(mR,Beo),e(Tg,Peo),e(k,Ieo),e(k,Mg),e(Mg,Mre),e(Mre,qeo),e(Mg,Neo),e(Mg,gR),e(gR,jeo),e(Mg,Deo),e(k,Geo),e(k,as),e(as,Ere),e(Ere,Oeo),e(as,Veo),e(as,hR),e(hR,Xeo),e(as,zeo),e(as,pR),e(pR,Qeo),e(as,Weo),e(k,Heo),e(k,ns),e(ns,Cre),e(Cre,Ueo),e(ns,Jeo),e(ns,uR),e(uR,Yeo),e(ns,Keo),e(ns,_R),e(_R,Zeo),e(ns,eoo),e(k,ooo),e(k,ss),e(ss,wre),e(wre,roo),e(ss,too),e(ss,bR),e(bR,aoo),e(ss,noo),e(ss,vR),e(vR,soo),e(ss,loo),e(k,ioo),e(k,Eg),e(Eg,Are),e(Are,doo),e(Eg,coo),e(Eg,FR),e(FR,foo),e(Eg,moo),e(k,goo),e(k,ls),e(ls,yre),e(yre,hoo),e(ls,poo),e(ls,TR),e(TR,uoo),e(ls,_oo),e(ls,MR),e(MR,boo),e(ls,voo),e(k,Foo),e(k,is),e(is,Lre),e(Lre,Too),e(is,Moo),e(is,ER),e(ER,Eoo),e(is,Coo),e(is,CR),e(CR,woo),e(is,Aoo),e(k,yoo),e(k,ds),e(ds,xre),e(xre,Loo),e(ds,xoo),e(ds,wR),e(wR,$oo),e(ds,koo),e(ds,AR),e(AR,Soo),e(ds,Roo),e(k,Boo),e(k,cs),e(cs,$re),e($re,Poo),e(cs,Ioo),e(cs,yR),e(yR,qoo),e(cs,Noo),e(cs,LR),e(LR,joo),e(cs,Doo),e(k,Goo),e(k,fs),e(fs,kre),e(kre,Ooo),e(fs,Voo),e(fs,xR),e(xR,Xoo),e(fs,zoo),e(fs,$R),e($R,Qoo),e(fs,Woo),e(k,Hoo),e(k,ms),e(ms,Sre),e(Sre,Uoo),e(ms,Joo),e(ms,kR),e(kR,Yoo),e(ms,Koo),e(ms,SR),e(SR,Zoo),e(ms,ero),e(k,oro),e(k,Cg),e(Cg,Rre),e(Rre,rro),e(Cg,tro),e(Cg,RR),e(RR,aro),e(Cg,nro),e(k,sro),e(k,wg),e(wg,Bre),e(Bre,lro),e(wg,iro),e(wg,BR),e(BR,dro),e(wg,cro),e(k,fro),e(k,Ag),e(Ag,Pre),e(Pre,mro),e(Ag,gro),e(Ag,PR),e(PR,hro),e(Ag,pro),e(k,uro),e(k,yg),e(yg,Ire),e(Ire,_ro),e(yg,bro),e(yg,IR),e(IR,vro),e(yg,Fro),e(k,Tro),e(k,gs),e(gs,qre),e(qre,Mro),e(gs,Ero),e(gs,qR),e(qR,Cro),e(gs,wro),e(gs,NR),e(NR,Aro),e(gs,yro),e(k,Lro),e(k,Lg),e(Lg,Nre),e(Nre,xro),e(Lg,$ro),e(Lg,jR),e(jR,kro),e(Lg,Sro),e(k,Rro),e(k,hs),e(hs,jre),e(jre,Bro),e(hs,Pro),e(hs,DR),e(DR,Iro),e(hs,qro),e(hs,GR),e(GR,Nro),e(hs,jro),e(k,Dro),e(k,ps),e(ps,Dre),e(Dre,Gro),e(ps,Oro),e(ps,OR),e(OR,Vro),e(ps,Xro),e(ps,VR),e(VR,zro),e(ps,Qro),e(k,Wro),e(k,us),e(us,Gre),e(Gre,Hro),e(us,Uro),e(us,XR),e(XR,Jro),e(us,Yro),e(us,zR),e(zR,Kro),e(us,Zro),e(k,eto),e(k,_s),e(_s,Ore),e(Ore,oto),e(_s,rto),e(_s,QR),e(QR,tto),e(_s,ato),e(_s,WR),e(WR,nto),e(_s,sto),e(k,lto),e(k,bs),e(bs,Vre),e(Vre,ito),e(bs,dto),e(bs,HR),e(HR,cto),e(bs,fto),e(bs,UR),e(UR,mto),e(bs,gto),e(k,hto),e(k,vs),e(vs,Xre),e(Xre,pto),e(vs,uto),e(vs,JR),e(JR,_to),e(vs,bto),e(vs,YR),e(YR,vto),e(vs,Fto),e(k,Tto),e(k,xg),e(xg,zre),e(zre,Mto),e(xg,Eto),e(xg,KR),e(KR,Cto),e(xg,wto),e(k,Ato),e(k,$g),e($g,Qre),e(Qre,yto),e($g,Lto),e($g,ZR),e(ZR,xto),e($g,$to),e(k,kto),e(k,Fs),e(Fs,Wre),e(Wre,Sto),e(Fs,Rto),e(Fs,eB),e(eB,Bto),e(Fs,Pto),e(Fs,oB),e(oB,Ito),e(Fs,qto),e(k,Nto),e(k,Ts),e(Ts,Hre),e(Hre,jto),e(Ts,Dto),e(Ts,rB),e(rB,Gto),e(Ts,Oto),e(Ts,tB),e(tB,Vto),e(Ts,Xto),e(k,zto),e(k,Ms),e(Ms,Ure),e(Ure,Qto),e(Ms,Wto),e(Ms,aB),e(aB,Hto),e(Ms,Uto),e(Ms,nB),e(nB,Jto),e(Ms,Yto),e(k,Kto),e(k,kg),e(kg,Jre),e(Jre,Zto),e(kg,eao),e(kg,sB),e(sB,oao),e(kg,rao),e(k,tao),e(k,Sg),e(Sg,Yre),e(Yre,aao),e(Sg,nao),e(Sg,lB),e(lB,sao),e(Sg,lao),e(k,iao),e(k,Rg),e(Rg,Kre),e(Kre,dao),e(Rg,cao),e(Rg,iB),e(iB,fao),e(Rg,mao),e(k,gao),e(k,Es),e(Es,Zre),e(Zre,hao),e(Es,pao),e(Es,dB),e(dB,uao),e(Es,_ao),e(Es,cB),e(cB,bao),e(Es,vao),e(k,Fao),e(k,Bg),e(Bg,ete),e(ete,Tao),e(Bg,Mao),e(Bg,fB),e(fB,Eao),e(Bg,Cao),e(k,wao),e(k,Pg),e(Pg,ote),e(ote,Aao),e(Pg,yao),e(Pg,mB),e(mB,Lao),e(Pg,xao),e(k,$ao),e(k,Cs),e(Cs,rte),e(rte,kao),e(Cs,Sao),e(Cs,gB),e(gB,Rao),e(Cs,Bao),e(Cs,hB),e(hB,Pao),e(Cs,Iao),e(k,qao),e(k,Ig),e(Ig,tte),e(tte,Nao),e(Ig,jao),e(Ig,pB),e(pB,Dao),e(Ig,Gao),e(k,Oao),e(k,qg),e(qg,ate),e(ate,Vao),e(qg,Xao),e(qg,uB),e(uB,zao),e(qg,Qao),e(k,Wao),e(k,ws),e(ws,nte),e(nte,Hao),e(ws,Uao),e(ws,_B),e(_B,Jao),e(ws,Yao),e(ws,bB),e(bB,Kao),e(ws,Zao),e(k,eno),e(k,As),e(As,ste),e(ste,ono),e(As,rno),e(As,vB),e(vB,tno),e(As,ano),e(As,FB),e(FB,nno),e(As,sno),e(k,lno),e(k,ys),e(ys,lte),e(lte,ino),e(ys,dno),e(ys,TB),e(TB,cno),e(ys,fno),e(ys,MB),e(MB,mno),e(ys,gno),e(k,hno),e(k,Ls),e(Ls,ite),e(ite,pno),e(Ls,uno),e(Ls,EB),e(EB,_no),e(Ls,bno),e(Ls,CB),e(CB,vno),e(Ls,Fno),e(Er,Tno),M(Ng,Er,null),e(wo,Mno),e(wo,jg),M(Ow,jg,null),e(jg,Eno),e(jg,dte),e(dte,Cno),b(f,WBe,_),b(f,gi,_),e(gi,Dg),e(Dg,cte),M(Vw,cte,null),e(gi,wno),e(gi,fte),e(fte,Ano),b(f,HBe,_),b(f,Ao,_),M(Xw,Ao,null),e(Ao,yno),e(Ao,zw),e(zw,Lno),e(zw,wB),e(wB,xno),e(zw,$no),e(Ao,kno),e(Ao,Qw),e(Qw,Sno),e(Qw,mte),e(mte,Rno),e(Qw,Bno),e(Ao,Pno),e(Ao,Qe),M(Ww,Qe,null),e(Qe,Ino),e(Qe,gte),e(gte,qno),e(Qe,Nno),e(Qe,Ma),e(Ma,jno),e(Ma,hte),e(hte,Dno),e(Ma,Gno),e(Ma,pte),e(pte,Ono),e(Ma,Vno),e(Ma,ute),e(ute,Xno),e(Ma,zno),e(Qe,Qno),e(Qe,oe),e(oe,Gg),e(Gg,_te),e(_te,Wno),e(Gg,Hno),e(Gg,AB),e(AB,Uno),e(Gg,Jno),e(oe,Yno),e(oe,Og),e(Og,bte),e(bte,Kno),e(Og,Zno),e(Og,yB),e(yB,eso),e(Og,oso),e(oe,rso),e(oe,Vg),e(Vg,vte),e(vte,tso),e(Vg,aso),e(Vg,LB),e(LB,nso),e(Vg,sso),e(oe,lso),e(oe,Xg),e(Xg,Fte),e(Fte,iso),e(Xg,dso),e(Xg,xB),e(xB,cso),e(Xg,fso),e(oe,mso),e(oe,zg),e(zg,Tte),e(Tte,gso),e(zg,hso),e(zg,$B),e($B,pso),e(zg,uso),e(oe,_so),e(oe,Qg),e(Qg,Mte),e(Mte,bso),e(Qg,vso),e(Qg,kB),e(kB,Fso),e(Qg,Tso),e(oe,Mso),e(oe,Wg),e(Wg,Ete),e(Ete,Eso),e(Wg,Cso),e(Wg,SB),e(SB,wso),e(Wg,Aso),e(oe,yso),e(oe,Hg),e(Hg,Cte),e(Cte,Lso),e(Hg,xso),e(Hg,RB),e(RB,$so),e(Hg,kso),e(oe,Sso),e(oe,Ug),e(Ug,wte),e(wte,Rso),e(Ug,Bso),e(Ug,BB),e(BB,Pso),e(Ug,Iso),e(oe,qso),e(oe,Jg),e(Jg,Ate),e(Ate,Nso),e(Jg,jso),e(Jg,PB),e(PB,Dso),e(Jg,Gso),e(oe,Oso),e(oe,Yg),e(Yg,yte),e(yte,Vso),e(Yg,Xso),e(Yg,IB),e(IB,zso),e(Yg,Qso),e(oe,Wso),e(oe,Kg),e(Kg,Lte),e(Lte,Hso),e(Kg,Uso),e(Kg,qB),e(qB,Jso),e(Kg,Yso),e(oe,Kso),e(oe,Zg),e(Zg,xte),e(xte,Zso),e(Zg,elo),e(Zg,NB),e(NB,olo),e(Zg,rlo),e(oe,tlo),e(oe,eh),e(eh,$te),e($te,alo),e(eh,nlo),e(eh,jB),e(jB,slo),e(eh,llo),e(oe,ilo),e(oe,oh),e(oh,kte),e(kte,dlo),e(oh,clo),e(oh,DB),e(DB,flo),e(oh,mlo),e(oe,glo),e(oe,rh),e(rh,Ste),e(Ste,hlo),e(rh,plo),e(rh,GB),e(GB,ulo),e(rh,_lo),e(oe,blo),e(oe,th),e(th,Rte),e(Rte,vlo),e(th,Flo),e(th,OB),e(OB,Tlo),e(th,Mlo),e(oe,Elo),e(oe,ah),e(ah,Bte),e(Bte,Clo),e(ah,wlo),e(ah,VB),e(VB,Alo),e(ah,ylo),e(oe,Llo),e(oe,nh),e(nh,Pte),e(Pte,xlo),e(nh,$lo),e(nh,XB),e(XB,klo),e(nh,Slo),e(oe,Rlo),e(oe,sh),e(sh,Ite),e(Ite,Blo),e(sh,Plo),e(sh,zB),e(zB,Ilo),e(sh,qlo),e(oe,Nlo),e(oe,lh),e(lh,qte),e(qte,jlo),e(lh,Dlo),e(lh,QB),e(QB,Glo),e(lh,Olo),e(oe,Vlo),e(oe,ih),e(ih,Nte),e(Nte,Xlo),e(ih,zlo),e(ih,WB),e(WB,Qlo),e(ih,Wlo),e(oe,Hlo),e(oe,dh),e(dh,jte),e(jte,Ulo),e(dh,Jlo),e(dh,HB),e(HB,Ylo),e(dh,Klo),e(oe,Zlo),e(oe,ch),e(ch,Dte),e(Dte,eio),e(ch,oio),e(ch,UB),e(UB,rio),e(ch,tio),e(oe,aio),e(oe,fh),e(fh,Gte),e(Gte,nio),e(fh,sio),e(fh,JB),e(JB,lio),e(fh,iio),e(Qe,dio),M(mh,Qe,null),e(Qe,cio),M(gh,Qe,null),e(Ao,fio),e(Ao,hh),M(Hw,hh,null),e(hh,mio),e(hh,Ote),e(Ote,gio),b(f,UBe,_),b(f,hi,_),e(hi,ph),e(ph,Vte),M(Uw,Vte,null),e(hi,hio),e(hi,Xte),e(Xte,pio),b(f,JBe,_),b(f,yo,_),M(Jw,yo,null),e(yo,uio),e(yo,Yw),e(Yw,_io),e(Yw,YB),e(YB,bio),e(Yw,vio),e(yo,Fio),e(yo,Kw),e(Kw,Tio),e(Kw,zte),e(zte,Mio),e(Kw,Eio),e(yo,Cio),e(yo,We),M(Zw,We,null),e(We,wio),e(We,Qte),e(Qte,Aio),e(We,yio),e(We,pi),e(pi,Lio),e(pi,Wte),e(Wte,xio),e(pi,$io),e(pi,Hte),e(Hte,kio),e(pi,Sio),e(We,Rio),e(We,be),e(be,uh),e(uh,Ute),e(Ute,Bio),e(uh,Pio),e(uh,KB),e(KB,Iio),e(uh,qio),e(be,Nio),e(be,_h),e(_h,Jte),e(Jte,jio),e(_h,Dio),e(_h,ZB),e(ZB,Gio),e(_h,Oio),e(be,Vio),e(be,bh),e(bh,Yte),e(Yte,Xio),e(bh,zio),e(bh,eP),e(eP,Qio),e(bh,Wio),e(be,Hio),e(be,vh),e(vh,Kte),e(Kte,Uio),e(vh,Jio),e(vh,oP),e(oP,Yio),e(vh,Kio),e(be,Zio),e(be,Fh),e(Fh,Zte),e(Zte,edo),e(Fh,odo),e(Fh,rP),e(rP,rdo),e(Fh,tdo),e(be,ado),e(be,Th),e(Th,eae),e(eae,ndo),e(Th,sdo),e(Th,tP),e(tP,ldo),e(Th,ido),e(be,ddo),e(be,Mh),e(Mh,oae),e(oae,cdo),e(Mh,fdo),e(Mh,aP),e(aP,mdo),e(Mh,gdo),e(be,hdo),e(be,Eh),e(Eh,rae),e(rae,pdo),e(Eh,udo),e(Eh,nP),e(nP,_do),e(Eh,bdo),e(be,vdo),e(be,Ch),e(Ch,tae),e(tae,Fdo),e(Ch,Tdo),e(Ch,sP),e(sP,Mdo),e(Ch,Edo),e(be,Cdo),e(be,wh),e(wh,aae),e(aae,wdo),e(wh,Ado),e(wh,lP),e(lP,ydo),e(wh,Ldo),e(be,xdo),e(be,Ah),e(Ah,nae),e(nae,$do),e(Ah,kdo),e(Ah,iP),e(iP,Sdo),e(Ah,Rdo),e(be,Bdo),e(be,yh),e(yh,sae),e(sae,Pdo),e(yh,Ido),e(yh,dP),e(dP,qdo),e(yh,Ndo),e(be,jdo),e(be,Lh),e(Lh,lae),e(lae,Ddo),e(Lh,Gdo),e(Lh,cP),e(cP,Odo),e(Lh,Vdo),e(be,Xdo),e(be,xh),e(xh,iae),e(iae,zdo),e(xh,Qdo),e(xh,fP),e(fP,Wdo),e(xh,Hdo),e(be,Udo),e(be,$h),e($h,dae),e(dae,Jdo),e($h,Ydo),e($h,mP),e(mP,Kdo),e($h,Zdo),e(We,eco),M(kh,We,null),e(We,oco),M(Sh,We,null),e(yo,rco),e(yo,Rh),M(eA,Rh,null),e(Rh,tco),e(Rh,cae),e(cae,aco),b(f,YBe,_),b(f,ui,_),e(ui,Bh),e(Bh,fae),M(oA,fae,null),e(ui,nco),e(ui,mae),e(mae,sco),b(f,KBe,_),b(f,Lo,_),M(rA,Lo,null),e(Lo,lco),e(Lo,_i),e(_i,ico),e(_i,gP),e(gP,dco),e(_i,cco),e(_i,hP),e(hP,fco),e(_i,mco),e(Lo,gco),e(Lo,tA),e(tA,hco),e(tA,gae),e(gae,pco),e(tA,uco),e(Lo,_co),e(Lo,Zr),M(aA,Zr,null),e(Zr,bco),e(Zr,hae),e(hae,vco),e(Zr,Fco),e(Zr,bi),e(bi,Tco),e(bi,pae),e(pae,Mco),e(bi,Eco),e(bi,pP),e(pP,Cco),e(bi,wco),e(Zr,Aco),M(Ph,Zr,null),e(Lo,yco),e(Lo,He),M(nA,He,null),e(He,Lco),e(He,uae),e(uae,xco),e(He,$co),e(He,Ea),e(Ea,kco),e(Ea,_ae),e(_ae,Sco),e(Ea,Rco),e(Ea,bae),e(bae,Bco),e(Ea,Pco),e(Ea,vae),e(vae,Ico),e(Ea,qco),e(He,Nco),e(He,x),e(x,Ih),e(Ih,Fae),e(Fae,jco),e(Ih,Dco),e(Ih,uP),e(uP,Gco),e(Ih,Oco),e(x,Vco),e(x,qh),e(qh,Tae),e(Tae,Xco),e(qh,zco),e(qh,_P),e(_P,Qco),e(qh,Wco),e(x,Hco),e(x,Nh),e(Nh,Mae),e(Mae,Uco),e(Nh,Jco),e(Nh,bP),e(bP,Yco),e(Nh,Kco),e(x,Zco),e(x,jh),e(jh,Eae),e(Eae,efo),e(jh,ofo),e(jh,vP),e(vP,rfo),e(jh,tfo),e(x,afo),e(x,Dh),e(Dh,Cae),e(Cae,nfo),e(Dh,sfo),e(Dh,FP),e(FP,lfo),e(Dh,ifo),e(x,dfo),e(x,Gh),e(Gh,wae),e(wae,cfo),e(Gh,ffo),e(Gh,TP),e(TP,mfo),e(Gh,gfo),e(x,hfo),e(x,Oh),e(Oh,Aae),e(Aae,pfo),e(Oh,ufo),e(Oh,MP),e(MP,_fo),e(Oh,bfo),e(x,vfo),e(x,Vh),e(Vh,yae),e(yae,Ffo),e(Vh,Tfo),e(Vh,EP),e(EP,Mfo),e(Vh,Efo),e(x,Cfo),e(x,Xh),e(Xh,Lae),e(Lae,wfo),e(Xh,Afo),e(Xh,CP),e(CP,yfo),e(Xh,Lfo),e(x,xfo),e(x,zh),e(zh,xae),e(xae,$fo),e(zh,kfo),e(zh,wP),e(wP,Sfo),e(zh,Rfo),e(x,Bfo),e(x,Qh),e(Qh,$ae),e($ae,Pfo),e(Qh,Ifo),e(Qh,AP),e(AP,qfo),e(Qh,Nfo),e(x,jfo),e(x,Wh),e(Wh,kae),e(kae,Dfo),e(Wh,Gfo),e(Wh,yP),e(yP,Ofo),e(Wh,Vfo),e(x,Xfo),e(x,Hh),e(Hh,Sae),e(Sae,zfo),e(Hh,Qfo),e(Hh,LP),e(LP,Wfo),e(Hh,Hfo),e(x,Ufo),e(x,Uh),e(Uh,Rae),e(Rae,Jfo),e(Uh,Yfo),e(Uh,xP),e(xP,Kfo),e(Uh,Zfo),e(x,emo),e(x,Jh),e(Jh,Bae),e(Bae,omo),e(Jh,rmo),e(Jh,$P),e($P,tmo),e(Jh,amo),e(x,nmo),e(x,Yh),e(Yh,Pae),e(Pae,smo),e(Yh,lmo),e(Yh,kP),e(kP,imo),e(Yh,dmo),e(x,cmo),e(x,Kh),e(Kh,Iae),e(Iae,fmo),e(Kh,mmo),e(Kh,SP),e(SP,gmo),e(Kh,hmo),e(x,pmo),e(x,Zh),e(Zh,qae),e(qae,umo),e(Zh,_mo),e(Zh,RP),e(RP,bmo),e(Zh,vmo),e(x,Fmo),e(x,ep),e(ep,Nae),e(Nae,Tmo),e(ep,Mmo),e(ep,BP),e(BP,Emo),e(ep,Cmo),e(x,wmo),e(x,op),e(op,jae),e(jae,Amo),e(op,ymo),e(op,PP),e(PP,Lmo),e(op,xmo),e(x,$mo),e(x,rp),e(rp,Dae),e(Dae,kmo),e(rp,Smo),e(rp,IP),e(IP,Rmo),e(rp,Bmo),e(x,Pmo),e(x,tp),e(tp,Gae),e(Gae,Imo),e(tp,qmo),e(tp,qP),e(qP,Nmo),e(tp,jmo),e(x,Dmo),e(x,ap),e(ap,Oae),e(Oae,Gmo),e(ap,Omo),e(ap,NP),e(NP,Vmo),e(ap,Xmo),e(x,zmo),e(x,np),e(np,Vae),e(Vae,Qmo),e(np,Wmo),e(np,jP),e(jP,Hmo),e(np,Umo),e(x,Jmo),e(x,sp),e(sp,Xae),e(Xae,Ymo),e(sp,Kmo),e(sp,DP),e(DP,Zmo),e(sp,ego),e(x,ogo),e(x,lp),e(lp,zae),e(zae,rgo),e(lp,tgo),e(lp,GP),e(GP,ago),e(lp,ngo),e(x,sgo),e(x,ip),e(ip,Qae),e(Qae,lgo),e(ip,igo),e(ip,OP),e(OP,dgo),e(ip,cgo),e(x,fgo),e(x,dp),e(dp,Wae),e(Wae,mgo),e(dp,ggo),e(dp,VP),e(VP,hgo),e(dp,pgo),e(x,ugo),e(x,cp),e(cp,Hae),e(Hae,_go),e(cp,bgo),e(cp,XP),e(XP,vgo),e(cp,Fgo),e(x,Tgo),e(x,fp),e(fp,Uae),e(Uae,Mgo),e(fp,Ego),e(fp,zP),e(zP,Cgo),e(fp,wgo),e(x,Ago),e(x,xs),e(xs,Jae),e(Jae,ygo),e(xs,Lgo),e(xs,QP),e(QP,xgo),e(xs,$go),e(xs,WP),e(WP,kgo),e(xs,Sgo),e(x,Rgo),e(x,mp),e(mp,Yae),e(Yae,Bgo),e(mp,Pgo),e(mp,HP),e(HP,Igo),e(mp,qgo),e(x,Ngo),e(x,gp),e(gp,Kae),e(Kae,jgo),e(gp,Dgo),e(gp,UP),e(UP,Ggo),e(gp,Ogo),e(x,Vgo),e(x,hp),e(hp,Zae),e(Zae,Xgo),e(hp,zgo),e(hp,JP),e(JP,Qgo),e(hp,Wgo),e(x,Hgo),e(x,pp),e(pp,ene),e(ene,Ugo),e(pp,Jgo),e(pp,YP),e(YP,Ygo),e(pp,Kgo),e(x,Zgo),e(x,up),e(up,one),e(one,eho),e(up,oho),e(up,KP),e(KP,rho),e(up,tho),e(x,aho),e(x,_p),e(_p,rne),e(rne,nho),e(_p,sho),e(_p,ZP),e(ZP,lho),e(_p,iho),e(x,dho),e(x,bp),e(bp,tne),e(tne,cho),e(bp,fho),e(bp,eI),e(eI,mho),e(bp,gho),e(x,hho),e(x,vp),e(vp,ane),e(ane,pho),e(vp,uho),e(vp,oI),e(oI,_ho),e(vp,bho),e(x,vho),e(x,Fp),e(Fp,nne),e(nne,Fho),e(Fp,Tho),e(Fp,rI),e(rI,Mho),e(Fp,Eho),e(x,Cho),e(x,Tp),e(Tp,sne),e(sne,who),e(Tp,Aho),e(Tp,tI),e(tI,yho),e(Tp,Lho),e(x,xho),e(x,Mp),e(Mp,lne),e(lne,$ho),e(Mp,kho),e(Mp,aI),e(aI,Sho),e(Mp,Rho),e(x,Bho),e(x,Ep),e(Ep,ine),e(ine,Pho),e(Ep,Iho),e(Ep,nI),e(nI,qho),e(Ep,Nho),e(x,jho),e(x,Cp),e(Cp,dne),e(dne,Dho),e(Cp,Gho),e(Cp,sI),e(sI,Oho),e(Cp,Vho),e(x,Xho),e(x,wp),e(wp,cne),e(cne,zho),e(wp,Qho),e(wp,lI),e(lI,Who),e(wp,Hho),e(x,Uho),e(x,Ap),e(Ap,fne),e(fne,Jho),e(Ap,Yho),e(Ap,iI),e(iI,Kho),e(Ap,Zho),e(x,epo),e(x,yp),e(yp,mne),e(mne,opo),e(yp,rpo),e(yp,dI),e(dI,tpo),e(yp,apo),e(x,npo),e(x,Lp),e(Lp,gne),e(gne,spo),e(Lp,lpo),e(Lp,cI),e(cI,ipo),e(Lp,dpo),e(x,cpo),e(x,xp),e(xp,hne),e(hne,fpo),e(xp,mpo),e(xp,fI),e(fI,gpo),e(xp,hpo),e(x,ppo),e(x,$p),e($p,pne),e(pne,upo),e($p,_po),e($p,mI),e(mI,bpo),e($p,vpo),e(x,Fpo),e(x,kp),e(kp,une),e(une,Tpo),e(kp,Mpo),e(kp,gI),e(gI,Epo),e(kp,Cpo),e(x,wpo),e(x,Sp),e(Sp,_ne),e(_ne,Apo),e(Sp,ypo),e(Sp,hI),e(hI,Lpo),e(Sp,xpo),e(x,$po),e(x,Rp),e(Rp,bne),e(bne,kpo),e(Rp,Spo),e(Rp,pI),e(pI,Rpo),e(Rp,Bpo),e(x,Ppo),e(x,Bp),e(Bp,vne),e(vne,Ipo),e(Bp,qpo),e(Bp,uI),e(uI,Npo),e(Bp,jpo),e(x,Dpo),e(x,Pp),e(Pp,Fne),e(Fne,Gpo),e(Pp,Opo),e(Pp,_I),e(_I,Vpo),e(Pp,Xpo),e(x,zpo),e(x,Ip),e(Ip,Tne),e(Tne,Qpo),e(Ip,Wpo),e(Ip,bI),e(bI,Hpo),e(Ip,Upo),e(x,Jpo),e(x,qp),e(qp,Mne),e(Mne,Ypo),e(qp,Kpo),e(qp,vI),e(vI,Zpo),e(qp,euo),e(x,ouo),e(x,Np),e(Np,Ene),e(Ene,ruo),e(Np,tuo),e(Np,FI),e(FI,auo),e(Np,nuo),e(x,suo),e(x,jp),e(jp,Cne),e(Cne,luo),e(jp,iuo),e(jp,TI),e(TI,duo),e(jp,cuo),e(x,fuo),e(x,Dp),e(Dp,wne),e(wne,muo),e(Dp,guo),e(Dp,MI),e(MI,huo),e(Dp,puo),e(x,uuo),e(x,Gp),e(Gp,Ane),e(Ane,_uo),e(Gp,buo),e(Gp,EI),e(EI,vuo),e(Gp,Fuo),e(x,Tuo),e(x,Op),e(Op,yne),e(yne,Muo),e(Op,Euo),e(Op,CI),e(CI,Cuo),e(Op,wuo),e(x,Auo),e(x,Vp),e(Vp,Lne),e(Lne,yuo),e(Vp,Luo),e(Vp,wI),e(wI,xuo),e(Vp,$uo),e(x,kuo),e(x,Xp),e(Xp,xne),e(xne,Suo),e(Xp,Ruo),e(Xp,AI),e(AI,Buo),e(Xp,Puo),e(x,Iuo),e(x,zp),e(zp,$ne),e($ne,quo),e(zp,Nuo),e(zp,yI),e(yI,juo),e(zp,Duo),e(x,Guo),e(x,Qp),e(Qp,kne),e(kne,Ouo),e(Qp,Vuo),e(Qp,LI),e(LI,Xuo),e(Qp,zuo),e(x,Quo),e(x,Wp),e(Wp,Sne),e(Sne,Wuo),e(Wp,Huo),e(Wp,xI),e(xI,Uuo),e(Wp,Juo),e(x,Yuo),e(x,Hp),e(Hp,Rne),e(Rne,Kuo),e(Hp,Zuo),e(Hp,$I),e($I,e_o),e(Hp,o_o),e(x,r_o),e(x,Up),e(Up,Bne),e(Bne,t_o),e(Up,a_o),e(Up,kI),e(kI,n_o),e(Up,s_o),e(x,l_o),e(x,Jp),e(Jp,Pne),e(Pne,i_o),e(Jp,d_o),e(Jp,SI),e(SI,c_o),e(Jp,f_o),e(x,m_o),e(x,Yp),e(Yp,Ine),e(Ine,g_o),e(Yp,h_o),e(Yp,RI),e(RI,p_o),e(Yp,u_o),e(x,__o),e(x,Kp),e(Kp,qne),e(qne,b_o),e(Kp,v_o),e(Kp,BI),e(BI,F_o),e(Kp,T_o),e(x,M_o),e(x,Zp),e(Zp,Nne),e(Nne,E_o),e(Zp,C_o),e(Zp,PI),e(PI,w_o),e(Zp,A_o),e(x,y_o),e(x,eu),e(eu,jne),e(jne,L_o),e(eu,x_o),e(eu,II),e(II,$_o),e(eu,k_o),e(x,S_o),e(x,ou),e(ou,Dne),e(Dne,R_o),e(ou,B_o),e(ou,qI),e(qI,P_o),e(ou,I_o),e(x,q_o),e(x,ru),e(ru,Gne),e(Gne,N_o),e(ru,j_o),e(ru,NI),e(NI,D_o),e(ru,G_o),e(x,O_o),e(x,tu),e(tu,One),e(One,V_o),e(tu,X_o),e(tu,jI),e(jI,z_o),e(tu,Q_o),e(x,W_o),e(x,au),e(au,Vne),e(Vne,H_o),e(au,U_o),e(au,DI),e(DI,J_o),e(au,Y_o),e(x,K_o),e(x,nu),e(nu,Xne),e(Xne,Z_o),e(nu,e0o),e(nu,GI),e(GI,o0o),e(nu,r0o),e(x,t0o),e(x,su),e(su,zne),e(zne,a0o),e(su,n0o),e(su,OI),e(OI,s0o),e(su,l0o),e(x,i0o),e(x,lu),e(lu,Qne),e(Qne,d0o),e(lu,c0o),e(lu,VI),e(VI,f0o),e(lu,m0o),e(x,g0o),e(x,iu),e(iu,Wne),e(Wne,h0o),e(iu,p0o),e(iu,XI),e(XI,u0o),e(iu,_0o),e(x,b0o),e(x,du),e(du,Hne),e(Hne,v0o),e(du,F0o),e(du,zI),e(zI,T0o),e(du,M0o),e(x,E0o),e(x,cu),e(cu,Une),e(Une,C0o),e(cu,w0o),e(cu,QI),e(QI,A0o),e(cu,y0o),e(x,L0o),e(x,fu),e(fu,Jne),e(Jne,x0o),e(fu,$0o),e(fu,WI),e(WI,k0o),e(fu,S0o),e(x,R0o),e(x,mu),e(mu,Yne),e(Yne,B0o),e(mu,P0o),e(mu,HI),e(HI,I0o),e(mu,q0o),e(x,N0o),e(x,gu),e(gu,Kne),e(Kne,j0o),e(gu,D0o),e(gu,UI),e(UI,G0o),e(gu,O0o),e(x,V0o),e(x,hu),e(hu,Zne),e(Zne,X0o),e(hu,z0o),e(hu,JI),e(JI,Q0o),e(hu,W0o),e(x,H0o),e(x,pu),e(pu,ese),e(ese,U0o),e(pu,J0o),e(pu,YI),e(YI,Y0o),e(pu,K0o),e(x,Z0o),e(x,uu),e(uu,ose),e(ose,e1o),e(uu,o1o),e(uu,KI),e(KI,r1o),e(uu,t1o),e(x,a1o),e(x,_u),e(_u,rse),e(rse,n1o),e(_u,s1o),e(_u,ZI),e(ZI,l1o),e(_u,i1o),e(x,d1o),e(x,bu),e(bu,tse),e(tse,c1o),e(bu,f1o),e(bu,eq),e(eq,m1o),e(bu,g1o),e(x,h1o),e(x,vu),e(vu,ase),e(ase,p1o),e(vu,u1o),e(vu,oq),e(oq,_1o),e(vu,b1o),e(x,v1o),e(x,Fu),e(Fu,nse),e(nse,F1o),e(Fu,T1o),e(Fu,rq),e(rq,M1o),e(Fu,E1o),e(x,C1o),e(x,Tu),e(Tu,sse),e(sse,w1o),e(Tu,A1o),e(Tu,tq),e(tq,y1o),e(Tu,L1o),e(x,x1o),e(x,Mu),e(Mu,lse),e(lse,$1o),e(Mu,k1o),e(Mu,aq),e(aq,S1o),e(Mu,R1o),e(He,B1o),e(He,Eu),e(Eu,P1o),e(Eu,ise),e(ise,I1o),e(Eu,q1o),e(Eu,dse),e(dse,N1o),e(He,j1o),M(Cu,He,null),b(f,ZBe,_),b(f,vi,_),e(vi,wu),e(wu,cse),M(sA,cse,null),e(vi,D1o),e(vi,fse),e(fse,G1o),b(f,ePe,_),b(f,xo,_),M(lA,xo,null),e(xo,O1o),e(xo,Fi),e(Fi,V1o),e(Fi,nq),e(nq,X1o),e(Fi,z1o),e(Fi,sq),e(sq,Q1o),e(Fi,W1o),e(xo,H1o),e(xo,iA),e(iA,U1o),e(iA,mse),e(mse,J1o),e(iA,Y1o),e(xo,K1o),e(xo,et),M(dA,et,null),e(et,Z1o),e(et,gse),e(gse,ebo),e(et,obo),e(et,Ti),e(Ti,rbo),e(Ti,hse),e(hse,tbo),e(Ti,abo),e(Ti,lq),e(lq,nbo),e(Ti,sbo),e(et,lbo),M(Au,et,null),e(xo,ibo),e(xo,Ue),M(cA,Ue,null),e(Ue,dbo),e(Ue,pse),e(pse,cbo),e(Ue,fbo),e(Ue,Ca),e(Ca,mbo),e(Ca,use),e(use,gbo),e(Ca,hbo),e(Ca,_se),e(_se,pbo),e(Ca,ubo),e(Ca,bse),e(bse,_bo),e(Ca,bbo),e(Ue,vbo),e(Ue,O),e(O,yu),e(yu,vse),e(vse,Fbo),e(yu,Tbo),e(yu,iq),e(iq,Mbo),e(yu,Ebo),e(O,Cbo),e(O,Lu),e(Lu,Fse),e(Fse,wbo),e(Lu,Abo),e(Lu,dq),e(dq,ybo),e(Lu,Lbo),e(O,xbo),e(O,xu),e(xu,Tse),e(Tse,$bo),e(xu,kbo),e(xu,cq),e(cq,Sbo),e(xu,Rbo),e(O,Bbo),e(O,$u),e($u,Mse),e(Mse,Pbo),e($u,Ibo),e($u,fq),e(fq,qbo),e($u,Nbo),e(O,jbo),e(O,ku),e(ku,Ese),e(Ese,Dbo),e(ku,Gbo),e(ku,mq),e(mq,Obo),e(ku,Vbo),e(O,Xbo),e(O,Su),e(Su,Cse),e(Cse,zbo),e(Su,Qbo),e(Su,gq),e(gq,Wbo),e(Su,Hbo),e(O,Ubo),e(O,Ru),e(Ru,wse),e(wse,Jbo),e(Ru,Ybo),e(Ru,hq),e(hq,Kbo),e(Ru,Zbo),e(O,e2o),e(O,Bu),e(Bu,Ase),e(Ase,o2o),e(Bu,r2o),e(Bu,pq),e(pq,t2o),e(Bu,a2o),e(O,n2o),e(O,Pu),e(Pu,yse),e(yse,s2o),e(Pu,l2o),e(Pu,uq),e(uq,i2o),e(Pu,d2o),e(O,c2o),e(O,Iu),e(Iu,Lse),e(Lse,f2o),e(Iu,m2o),e(Iu,_q),e(_q,g2o),e(Iu,h2o),e(O,p2o),e(O,qu),e(qu,xse),e(xse,u2o),e(qu,_2o),e(qu,bq),e(bq,b2o),e(qu,v2o),e(O,F2o),e(O,Nu),e(Nu,$se),e($se,T2o),e(Nu,M2o),e(Nu,vq),e(vq,E2o),e(Nu,C2o),e(O,w2o),e(O,ju),e(ju,kse),e(kse,A2o),e(ju,y2o),e(ju,Fq),e(Fq,L2o),e(ju,x2o),e(O,$2o),e(O,Du),e(Du,Sse),e(Sse,k2o),e(Du,S2o),e(Du,Tq),e(Tq,R2o),e(Du,B2o),e(O,P2o),e(O,Gu),e(Gu,Rse),e(Rse,I2o),e(Gu,q2o),e(Gu,Mq),e(Mq,N2o),e(Gu,j2o),e(O,D2o),e(O,Ou),e(Ou,Bse),e(Bse,G2o),e(Ou,O2o),e(Ou,Eq),e(Eq,V2o),e(Ou,X2o),e(O,z2o),e(O,Vu),e(Vu,Pse),e(Pse,Q2o),e(Vu,W2o),e(Vu,Cq),e(Cq,H2o),e(Vu,U2o),e(O,J2o),e(O,Xu),e(Xu,Ise),e(Ise,Y2o),e(Xu,K2o),e(Xu,wq),e(wq,Z2o),e(Xu,evo),e(O,ovo),e(O,zu),e(zu,qse),e(qse,rvo),e(zu,tvo),e(zu,Aq),e(Aq,avo),e(zu,nvo),e(O,svo),e(O,Qu),e(Qu,Nse),e(Nse,lvo),e(Qu,ivo),e(Qu,yq),e(yq,dvo),e(Qu,cvo),e(O,fvo),e(O,Wu),e(Wu,jse),e(jse,mvo),e(Wu,gvo),e(Wu,Lq),e(Lq,hvo),e(Wu,pvo),e(O,uvo),e(O,Hu),e(Hu,Dse),e(Dse,_vo),e(Hu,bvo),e(Hu,xq),e(xq,vvo),e(Hu,Fvo),e(O,Tvo),e(O,Uu),e(Uu,Gse),e(Gse,Mvo),e(Uu,Evo),e(Uu,$q),e($q,Cvo),e(Uu,wvo),e(O,Avo),e(O,Ju),e(Ju,Ose),e(Ose,yvo),e(Ju,Lvo),e(Ju,kq),e(kq,xvo),e(Ju,$vo),e(O,kvo),e(O,Yu),e(Yu,Vse),e(Vse,Svo),e(Yu,Rvo),e(Yu,Sq),e(Sq,Bvo),e(Yu,Pvo),e(O,Ivo),e(O,Ku),e(Ku,Xse),e(Xse,qvo),e(Ku,Nvo),e(Ku,Rq),e(Rq,jvo),e(Ku,Dvo),e(O,Gvo),e(O,Zu),e(Zu,zse),e(zse,Ovo),e(Zu,Vvo),e(Zu,Bq),e(Bq,Xvo),e(Zu,zvo),e(O,Qvo),e(O,e_),e(e_,Qse),e(Qse,Wvo),e(e_,Hvo),e(e_,Pq),e(Pq,Uvo),e(e_,Jvo),e(O,Yvo),e(O,o_),e(o_,Wse),e(Wse,Kvo),e(o_,Zvo),e(o_,Iq),e(Iq,eFo),e(o_,oFo),e(O,rFo),e(O,r_),e(r_,Hse),e(Hse,tFo),e(r_,aFo),e(r_,qq),e(qq,nFo),e(r_,sFo),e(O,lFo),e(O,t_),e(t_,Use),e(Use,iFo),e(t_,dFo),e(t_,Nq),e(Nq,cFo),e(t_,fFo),e(O,mFo),e(O,a_),e(a_,Jse),e(Jse,gFo),e(a_,hFo),e(a_,jq),e(jq,pFo),e(a_,uFo),e(O,_Fo),e(O,n_),e(n_,Yse),e(Yse,bFo),e(n_,vFo),e(n_,Dq),e(Dq,FFo),e(n_,TFo),e(O,MFo),e(O,s_),e(s_,Kse),e(Kse,EFo),e(s_,CFo),e(s_,Gq),e(Gq,wFo),e(s_,AFo),e(O,yFo),e(O,l_),e(l_,Zse),e(Zse,LFo),e(l_,xFo),e(l_,Oq),e(Oq,$Fo),e(l_,kFo),e(O,SFo),e(O,i_),e(i_,ele),e(ele,RFo),e(i_,BFo),e(i_,Vq),e(Vq,PFo),e(i_,IFo),e(O,qFo),e(O,d_),e(d_,ole),e(ole,NFo),e(d_,jFo),e(d_,Xq),e(Xq,DFo),e(d_,GFo),e(O,OFo),e(O,c_),e(c_,rle),e(rle,VFo),e(c_,XFo),e(c_,zq),e(zq,zFo),e(c_,QFo),e(O,WFo),e(O,f_),e(f_,tle),e(tle,HFo),e(f_,UFo),e(f_,Qq),e(Qq,JFo),e(f_,YFo),e(Ue,KFo),e(Ue,m_),e(m_,ZFo),e(m_,ale),e(ale,e6o),e(m_,o6o),e(m_,nle),e(nle,r6o),e(Ue,t6o),M(g_,Ue,null),b(f,oPe,_),b(f,Mi,_),e(Mi,h_),e(h_,sle),M(fA,sle,null),e(Mi,a6o),e(Mi,lle),e(lle,n6o),b(f,rPe,_),b(f,$o,_),M(mA,$o,null),e($o,s6o),e($o,Ei),e(Ei,l6o),e(Ei,Wq),e(Wq,i6o),e(Ei,d6o),e(Ei,Hq),e(Hq,c6o),e(Ei,f6o),e($o,m6o),e($o,gA),e(gA,g6o),e(gA,ile),e(ile,h6o),e(gA,p6o),e($o,u6o),e($o,ot),M(hA,ot,null),e(ot,_6o),e(ot,dle),e(dle,b6o),e(ot,v6o),e(ot,Ci),e(Ci,F6o),e(Ci,cle),e(cle,T6o),e(Ci,M6o),e(Ci,Uq),e(Uq,E6o),e(Ci,C6o),e(ot,w6o),M(p_,ot,null),e($o,A6o),e($o,Je),M(pA,Je,null),e(Je,y6o),e(Je,fle),e(fle,L6o),e(Je,x6o),e(Je,wa),e(wa,$6o),e(wa,mle),e(mle,k6o),e(wa,S6o),e(wa,gle),e(gle,R6o),e(wa,B6o),e(wa,hle),e(hle,P6o),e(wa,I6o),e(Je,q6o),e(Je,z),e(z,u_),e(u_,ple),e(ple,N6o),e(u_,j6o),e(u_,Jq),e(Jq,D6o),e(u_,G6o),e(z,O6o),e(z,__),e(__,ule),e(ule,V6o),e(__,X6o),e(__,Yq),e(Yq,z6o),e(__,Q6o),e(z,W6o),e(z,b_),e(b_,_le),e(_le,H6o),e(b_,U6o),e(b_,Kq),e(Kq,J6o),e(b_,Y6o),e(z,K6o),e(z,v_),e(v_,ble),e(ble,Z6o),e(v_,eTo),e(v_,Zq),e(Zq,oTo),e(v_,rTo),e(z,tTo),e(z,F_),e(F_,vle),e(vle,aTo),e(F_,nTo),e(F_,eN),e(eN,sTo),e(F_,lTo),e(z,iTo),e(z,T_),e(T_,Fle),e(Fle,dTo),e(T_,cTo),e(T_,oN),e(oN,fTo),e(T_,mTo),e(z,gTo),e(z,M_),e(M_,Tle),e(Tle,hTo),e(M_,pTo),e(M_,rN),e(rN,uTo),e(M_,_To),e(z,bTo),e(z,E_),e(E_,Mle),e(Mle,vTo),e(E_,FTo),e(E_,tN),e(tN,TTo),e(E_,MTo),e(z,ETo),e(z,C_),e(C_,Ele),e(Ele,CTo),e(C_,wTo),e(C_,aN),e(aN,ATo),e(C_,yTo),e(z,LTo),e(z,w_),e(w_,Cle),e(Cle,xTo),e(w_,$To),e(w_,nN),e(nN,kTo),e(w_,STo),e(z,RTo),e(z,A_),e(A_,wle),e(wle,BTo),e(A_,PTo),e(A_,sN),e(sN,ITo),e(A_,qTo),e(z,NTo),e(z,y_),e(y_,Ale),e(Ale,jTo),e(y_,DTo),e(y_,lN),e(lN,GTo),e(y_,OTo),e(z,VTo),e(z,L_),e(L_,yle),e(yle,XTo),e(L_,zTo),e(L_,iN),e(iN,QTo),e(L_,WTo),e(z,HTo),e(z,x_),e(x_,Lle),e(Lle,UTo),e(x_,JTo),e(x_,dN),e(dN,YTo),e(x_,KTo),e(z,ZTo),e(z,$_),e($_,xle),e(xle,e7o),e($_,o7o),e($_,cN),e(cN,r7o),e($_,t7o),e(z,a7o),e(z,k_),e(k_,$le),e($le,n7o),e(k_,s7o),e(k_,fN),e(fN,l7o),e(k_,i7o),e(z,d7o),e(z,S_),e(S_,kle),e(kle,c7o),e(S_,f7o),e(S_,mN),e(mN,m7o),e(S_,g7o),e(z,h7o),e(z,R_),e(R_,Sle),e(Sle,p7o),e(R_,u7o),e(R_,gN),e(gN,_7o),e(R_,b7o),e(z,v7o),e(z,B_),e(B_,Rle),e(Rle,F7o),e(B_,T7o),e(B_,hN),e(hN,M7o),e(B_,E7o),e(z,C7o),e(z,P_),e(P_,Ble),e(Ble,w7o),e(P_,A7o),e(P_,pN),e(pN,y7o),e(P_,L7o),e(z,x7o),e(z,I_),e(I_,Ple),e(Ple,$7o),e(I_,k7o),e(I_,uN),e(uN,S7o),e(I_,R7o),e(z,B7o),e(z,q_),e(q_,Ile),e(Ile,P7o),e(q_,I7o),e(q_,_N),e(_N,q7o),e(q_,N7o),e(z,j7o),e(z,N_),e(N_,qle),e(qle,D7o),e(N_,G7o),e(N_,bN),e(bN,O7o),e(N_,V7o),e(z,X7o),e(z,j_),e(j_,Nle),e(Nle,z7o),e(j_,Q7o),e(j_,vN),e(vN,W7o),e(j_,H7o),e(z,U7o),e(z,D_),e(D_,jle),e(jle,J7o),e(D_,Y7o),e(D_,FN),e(FN,K7o),e(D_,Z7o),e(z,eMo),e(z,G_),e(G_,Dle),e(Dle,oMo),e(G_,rMo),e(G_,TN),e(TN,tMo),e(G_,aMo),e(z,nMo),e(z,O_),e(O_,Gle),e(Gle,sMo),e(O_,lMo),e(O_,MN),e(MN,iMo),e(O_,dMo),e(z,cMo),e(z,V_),e(V_,Ole),e(Ole,fMo),e(V_,mMo),e(V_,EN),e(EN,gMo),e(V_,hMo),e(z,pMo),e(z,X_),e(X_,Vle),e(Vle,uMo),e(X_,_Mo),e(X_,CN),e(CN,bMo),e(X_,vMo),e(z,FMo),e(z,z_),e(z_,Xle),e(Xle,TMo),e(z_,MMo),e(z_,wN),e(wN,EMo),e(z_,CMo),e(z,wMo),e(z,Q_),e(Q_,zle),e(zle,AMo),e(Q_,yMo),e(Q_,AN),e(AN,LMo),e(Q_,xMo),e(z,$Mo),e(z,W_),e(W_,Qle),e(Qle,kMo),e(W_,SMo),e(W_,yN),e(yN,RMo),e(W_,BMo),e(z,PMo),e(z,H_),e(H_,Wle),e(Wle,IMo),e(H_,qMo),e(H_,LN),e(LN,NMo),e(H_,jMo),e(z,DMo),e(z,U_),e(U_,Hle),e(Hle,GMo),e(U_,OMo),e(U_,xN),e(xN,VMo),e(U_,XMo),e(z,zMo),e(z,J_),e(J_,Ule),e(Ule,QMo),e(J_,WMo),e(J_,$N),e($N,HMo),e(J_,UMo),e(Je,JMo),e(Je,Y_),e(Y_,YMo),e(Y_,Jle),e(Jle,KMo),e(Y_,ZMo),e(Y_,Yle),e(Yle,e4o),e(Je,o4o),M(K_,Je,null),b(f,tPe,_),b(f,wi,_),e(wi,Z_),e(Z_,Kle),M(uA,Kle,null),e(wi,r4o),e(wi,Zle),e(Zle,t4o),b(f,aPe,_),b(f,ko,_),M(_A,ko,null),e(ko,a4o),e(ko,Ai),e(Ai,n4o),e(Ai,kN),e(kN,s4o),e(Ai,l4o),e(Ai,SN),e(SN,i4o),e(Ai,d4o),e(ko,c4o),e(ko,bA),e(bA,f4o),e(bA,eie),e(eie,m4o),e(bA,g4o),e(ko,h4o),e(ko,rt),M(vA,rt,null),e(rt,p4o),e(rt,oie),e(oie,u4o),e(rt,_4o),e(rt,yi),e(yi,b4o),e(yi,rie),e(rie,v4o),e(yi,F4o),e(yi,RN),e(RN,T4o),e(yi,M4o),e(rt,E4o),M(e0,rt,null),e(ko,C4o),e(ko,Ye),M(FA,Ye,null),e(Ye,w4o),e(Ye,tie),e(tie,A4o),e(Ye,y4o),e(Ye,Aa),e(Aa,L4o),e(Aa,aie),e(aie,x4o),e(Aa,$4o),e(Aa,nie),e(nie,k4o),e(Aa,S4o),e(Aa,sie),e(sie,R4o),e(Aa,B4o),e(Ye,P4o),e(Ye,Q),e(Q,o0),e(o0,lie),e(lie,I4o),e(o0,q4o),e(o0,BN),e(BN,N4o),e(o0,j4o),e(Q,D4o),e(Q,r0),e(r0,iie),e(iie,G4o),e(r0,O4o),e(r0,PN),e(PN,V4o),e(r0,X4o),e(Q,z4o),e(Q,t0),e(t0,die),e(die,Q4o),e(t0,W4o),e(t0,IN),e(IN,H4o),e(t0,U4o),e(Q,J4o),e(Q,a0),e(a0,cie),e(cie,Y4o),e(a0,K4o),e(a0,qN),e(qN,Z4o),e(a0,eEo),e(Q,oEo),e(Q,n0),e(n0,fie),e(fie,rEo),e(n0,tEo),e(n0,NN),e(NN,aEo),e(n0,nEo),e(Q,sEo),e(Q,s0),e(s0,mie),e(mie,lEo),e(s0,iEo),e(s0,jN),e(jN,dEo),e(s0,cEo),e(Q,fEo),e(Q,l0),e(l0,gie),e(gie,mEo),e(l0,gEo),e(l0,DN),e(DN,hEo),e(l0,pEo),e(Q,uEo),e(Q,i0),e(i0,hie),e(hie,_Eo),e(i0,bEo),e(i0,GN),e(GN,vEo),e(i0,FEo),e(Q,TEo),e(Q,d0),e(d0,pie),e(pie,MEo),e(d0,EEo),e(d0,ON),e(ON,CEo),e(d0,wEo),e(Q,AEo),e(Q,c0),e(c0,uie),e(uie,yEo),e(c0,LEo),e(c0,VN),e(VN,xEo),e(c0,$Eo),e(Q,kEo),e(Q,f0),e(f0,_ie),e(_ie,SEo),e(f0,REo),e(f0,XN),e(XN,BEo),e(f0,PEo),e(Q,IEo),e(Q,m0),e(m0,bie),e(bie,qEo),e(m0,NEo),e(m0,zN),e(zN,jEo),e(m0,DEo),e(Q,GEo),e(Q,g0),e(g0,vie),e(vie,OEo),e(g0,VEo),e(g0,QN),e(QN,XEo),e(g0,zEo),e(Q,QEo),e(Q,h0),e(h0,Fie),e(Fie,WEo),e(h0,HEo),e(h0,WN),e(WN,UEo),e(h0,JEo),e(Q,YEo),e(Q,p0),e(p0,Tie),e(Tie,KEo),e(p0,ZEo),e(p0,HN),e(HN,e5o),e(p0,o5o),e(Q,r5o),e(Q,u0),e(u0,Mie),e(Mie,t5o),e(u0,a5o),e(u0,UN),e(UN,n5o),e(u0,s5o),e(Q,l5o),e(Q,_0),e(_0,Eie),e(Eie,i5o),e(_0,d5o),e(_0,JN),e(JN,c5o),e(_0,f5o),e(Q,m5o),e(Q,b0),e(b0,Cie),e(Cie,g5o),e(b0,h5o),e(b0,YN),e(YN,p5o),e(b0,u5o),e(Q,_5o),e(Q,v0),e(v0,wie),e(wie,b5o),e(v0,v5o),e(v0,KN),e(KN,F5o),e(v0,T5o),e(Q,M5o),e(Q,F0),e(F0,Aie),e(Aie,E5o),e(F0,C5o),e(F0,ZN),e(ZN,w5o),e(F0,A5o),e(Q,y5o),e(Q,T0),e(T0,yie),e(yie,L5o),e(T0,x5o),e(T0,ej),e(ej,$5o),e(T0,k5o),e(Q,S5o),e(Q,M0),e(M0,Lie),e(Lie,R5o),e(M0,B5o),e(M0,oj),e(oj,P5o),e(M0,I5o),e(Q,q5o),e(Q,E0),e(E0,xie),e(xie,N5o),e(E0,j5o),e(E0,rj),e(rj,D5o),e(E0,G5o),e(Q,O5o),e(Q,C0),e(C0,$ie),e($ie,V5o),e(C0,X5o),e(C0,tj),e(tj,z5o),e(C0,Q5o),e(Q,W5o),e(Q,w0),e(w0,kie),e(kie,H5o),e(w0,U5o),e(w0,aj),e(aj,J5o),e(w0,Y5o),e(Q,K5o),e(Q,A0),e(A0,Sie),e(Sie,Z5o),e(A0,eCo),e(A0,nj),e(nj,oCo),e(A0,rCo),e(Q,tCo),e(Q,y0),e(y0,Rie),e(Rie,aCo),e(y0,nCo),e(y0,sj),e(sj,sCo),e(y0,lCo),e(Q,iCo),e(Q,L0),e(L0,Bie),e(Bie,dCo),e(L0,cCo),e(L0,lj),e(lj,fCo),e(L0,mCo),e(Q,gCo),e(Q,x0),e(x0,Pie),e(Pie,hCo),e(x0,pCo),e(x0,ij),e(ij,uCo),e(x0,_Co),e(Q,bCo),e(Q,$0),e($0,Iie),e(Iie,vCo),e($0,FCo),e($0,dj),e(dj,TCo),e($0,MCo),e(Q,ECo),e(Q,k0),e(k0,qie),e(qie,CCo),e(k0,wCo),e(k0,Nie),e(Nie,ACo),e(k0,yCo),e(Q,LCo),e(Q,S0),e(S0,jie),e(jie,xCo),e(S0,$Co),e(S0,cj),e(cj,kCo),e(S0,SCo),e(Q,RCo),e(Q,R0),e(R0,Die),e(Die,BCo),e(R0,PCo),e(R0,fj),e(fj,ICo),e(R0,qCo),e(Q,NCo),e(Q,B0),e(B0,Gie),e(Gie,jCo),e(B0,DCo),e(B0,mj),e(mj,GCo),e(B0,OCo),e(Q,VCo),e(Q,P0),e(P0,Oie),e(Oie,XCo),e(P0,zCo),e(P0,gj),e(gj,QCo),e(P0,WCo),e(Ye,HCo),e(Ye,I0),e(I0,UCo),e(I0,Vie),e(Vie,JCo),e(I0,YCo),e(I0,Xie),e(Xie,KCo),e(Ye,ZCo),M(q0,Ye,null),b(f,nPe,_),b(f,Li,_),e(Li,N0),e(N0,zie),M(TA,zie,null),e(Li,e3o),e(Li,Qie),e(Qie,o3o),b(f,sPe,_),b(f,So,_),M(MA,So,null),e(So,r3o),e(So,xi),e(xi,t3o),e(xi,hj),e(hj,a3o),e(xi,n3o),e(xi,pj),e(pj,s3o),e(xi,l3o),e(So,i3o),e(So,EA),e(EA,d3o),e(EA,Wie),e(Wie,c3o),e(EA,f3o),e(So,m3o),e(So,tt),M(CA,tt,null),e(tt,g3o),e(tt,Hie),e(Hie,h3o),e(tt,p3o),e(tt,$i),e($i,u3o),e($i,Uie),e(Uie,_3o),e($i,b3o),e($i,uj),e(uj,v3o),e($i,F3o),e(tt,T3o),M(j0,tt,null),e(So,M3o),e(So,Ke),M(wA,Ke,null),e(Ke,E3o),e(Ke,Jie),e(Jie,C3o),e(Ke,w3o),e(Ke,ya),e(ya,A3o),e(ya,Yie),e(Yie,y3o),e(ya,L3o),e(ya,Kie),e(Kie,x3o),e(ya,$3o),e(ya,Zie),e(Zie,k3o),e(ya,S3o),e(Ke,R3o),e(Ke,he),e(he,D0),e(D0,ede),e(ede,B3o),e(D0,P3o),e(D0,_j),e(_j,I3o),e(D0,q3o),e(he,N3o),e(he,G0),e(G0,ode),e(ode,j3o),e(G0,D3o),e(G0,bj),e(bj,G3o),e(G0,O3o),e(he,V3o),e(he,O0),e(O0,rde),e(rde,X3o),e(O0,z3o),e(O0,vj),e(vj,Q3o),e(O0,W3o),e(he,H3o),e(he,V0),e(V0,tde),e(tde,U3o),e(V0,J3o),e(V0,Fj),e(Fj,Y3o),e(V0,K3o),e(he,Z3o),e(he,X0),e(X0,ade),e(ade,ewo),e(X0,owo),e(X0,Tj),e(Tj,rwo),e(X0,two),e(he,awo),e(he,z0),e(z0,nde),e(nde,nwo),e(z0,swo),e(z0,Mj),e(Mj,lwo),e(z0,iwo),e(he,dwo),e(he,Q0),e(Q0,sde),e(sde,cwo),e(Q0,fwo),e(Q0,Ej),e(Ej,mwo),e(Q0,gwo),e(he,hwo),e(he,W0),e(W0,lde),e(lde,pwo),e(W0,uwo),e(W0,Cj),e(Cj,_wo),e(W0,bwo),e(he,vwo),e(he,H0),e(H0,ide),e(ide,Fwo),e(H0,Two),e(H0,wj),e(wj,Mwo),e(H0,Ewo),e(he,Cwo),e(he,U0),e(U0,dde),e(dde,wwo),e(U0,Awo),e(U0,Aj),e(Aj,ywo),e(U0,Lwo),e(he,xwo),e(he,J0),e(J0,cde),e(cde,$wo),e(J0,kwo),e(J0,yj),e(yj,Swo),e(J0,Rwo),e(he,Bwo),e(he,Y0),e(Y0,fde),e(fde,Pwo),e(Y0,Iwo),e(Y0,Lj),e(Lj,qwo),e(Y0,Nwo),e(he,jwo),e(he,K0),e(K0,mde),e(mde,Dwo),e(K0,Gwo),e(K0,xj),e(xj,Owo),e(K0,Vwo),e(he,Xwo),e(he,Z0),e(Z0,gde),e(gde,zwo),e(Z0,Qwo),e(Z0,$j),e($j,Wwo),e(Z0,Hwo),e(he,Uwo),e(he,e1),e(e1,hde),e(hde,Jwo),e(e1,Ywo),e(e1,kj),e(kj,Kwo),e(e1,Zwo),e(he,eAo),e(he,o1),e(o1,pde),e(pde,oAo),e(o1,rAo),e(o1,Sj),e(Sj,tAo),e(o1,aAo),e(he,nAo),e(he,r1),e(r1,ude),e(ude,sAo),e(r1,lAo),e(r1,Rj),e(Rj,iAo),e(r1,dAo),e(Ke,cAo),e(Ke,t1),e(t1,fAo),e(t1,_de),e(_de,mAo),e(t1,gAo),e(t1,bde),e(bde,hAo),e(Ke,pAo),M(a1,Ke,null),b(f,lPe,_),b(f,ki,_),e(ki,n1),e(n1,vde),M(AA,vde,null),e(ki,uAo),e(ki,Fde),e(Fde,_Ao),b(f,iPe,_),b(f,Ro,_),M(yA,Ro,null),e(Ro,bAo),e(Ro,Si),e(Si,vAo),e(Si,Bj),e(Bj,FAo),e(Si,TAo),e(Si,Pj),e(Pj,MAo),e(Si,EAo),e(Ro,CAo),e(Ro,LA),e(LA,wAo),e(LA,Tde),e(Tde,AAo),e(LA,yAo),e(Ro,LAo),e(Ro,at),M(xA,at,null),e(at,xAo),e(at,Mde),e(Mde,$Ao),e(at,kAo),e(at,Ri),e(Ri,SAo),e(Ri,Ede),e(Ede,RAo),e(Ri,BAo),e(Ri,Ij),e(Ij,PAo),e(Ri,IAo),e(at,qAo),M(s1,at,null),e(Ro,NAo),e(Ro,Ze),M($A,Ze,null),e(Ze,jAo),e(Ze,Cde),e(Cde,DAo),e(Ze,GAo),e(Ze,La),e(La,OAo),e(La,wde),e(wde,VAo),e(La,XAo),e(La,Ade),e(Ade,zAo),e(La,QAo),e(La,yde),e(yde,WAo),e(La,HAo),e(Ze,UAo),e(Ze,q),e(q,l1),e(l1,Lde),e(Lde,JAo),e(l1,YAo),e(l1,qj),e(qj,KAo),e(l1,ZAo),e(q,eyo),e(q,i1),e(i1,xde),e(xde,oyo),e(i1,ryo),e(i1,Nj),e(Nj,tyo),e(i1,ayo),e(q,nyo),e(q,d1),e(d1,$de),e($de,syo),e(d1,lyo),e(d1,jj),e(jj,iyo),e(d1,dyo),e(q,cyo),e(q,c1),e(c1,kde),e(kde,fyo),e(c1,myo),e(c1,Dj),e(Dj,gyo),e(c1,hyo),e(q,pyo),e(q,f1),e(f1,Sde),e(Sde,uyo),e(f1,_yo),e(f1,Gj),e(Gj,byo),e(f1,vyo),e(q,Fyo),e(q,m1),e(m1,Rde),e(Rde,Tyo),e(m1,Myo),e(m1,Oj),e(Oj,Eyo),e(m1,Cyo),e(q,wyo),e(q,g1),e(g1,Bde),e(Bde,Ayo),e(g1,yyo),e(g1,Vj),e(Vj,Lyo),e(g1,xyo),e(q,$yo),e(q,h1),e(h1,Pde),e(Pde,kyo),e(h1,Syo),e(h1,Xj),e(Xj,Ryo),e(h1,Byo),e(q,Pyo),e(q,p1),e(p1,Ide),e(Ide,Iyo),e(p1,qyo),e(p1,zj),e(zj,Nyo),e(p1,jyo),e(q,Dyo),e(q,u1),e(u1,qde),e(qde,Gyo),e(u1,Oyo),e(u1,Qj),e(Qj,Vyo),e(u1,Xyo),e(q,zyo),e(q,_1),e(_1,Nde),e(Nde,Qyo),e(_1,Wyo),e(_1,Wj),e(Wj,Hyo),e(_1,Uyo),e(q,Jyo),e(q,b1),e(b1,jde),e(jde,Yyo),e(b1,Kyo),e(b1,Hj),e(Hj,Zyo),e(b1,eLo),e(q,oLo),e(q,v1),e(v1,Dde),e(Dde,rLo),e(v1,tLo),e(v1,Uj),e(Uj,aLo),e(v1,nLo),e(q,sLo),e(q,F1),e(F1,Gde),e(Gde,lLo),e(F1,iLo),e(F1,Jj),e(Jj,dLo),e(F1,cLo),e(q,fLo),e(q,T1),e(T1,Ode),e(Ode,mLo),e(T1,gLo),e(T1,Yj),e(Yj,hLo),e(T1,pLo),e(q,uLo),e(q,M1),e(M1,Vde),e(Vde,_Lo),e(M1,bLo),e(M1,Kj),e(Kj,vLo),e(M1,FLo),e(q,TLo),e(q,E1),e(E1,Xde),e(Xde,MLo),e(E1,ELo),e(E1,Zj),e(Zj,CLo),e(E1,wLo),e(q,ALo),e(q,C1),e(C1,zde),e(zde,yLo),e(C1,LLo),e(C1,eD),e(eD,xLo),e(C1,$Lo),e(q,kLo),e(q,w1),e(w1,Qde),e(Qde,SLo),e(w1,RLo),e(w1,oD),e(oD,BLo),e(w1,PLo),e(q,ILo),e(q,A1),e(A1,Wde),e(Wde,qLo),e(A1,NLo),e(A1,rD),e(rD,jLo),e(A1,DLo),e(q,GLo),e(q,y1),e(y1,Hde),e(Hde,OLo),e(y1,VLo),e(y1,tD),e(tD,XLo),e(y1,zLo),e(q,QLo),e(q,L1),e(L1,Ude),e(Ude,WLo),e(L1,HLo),e(L1,aD),e(aD,ULo),e(L1,JLo),e(q,YLo),e(q,x1),e(x1,Jde),e(Jde,KLo),e(x1,ZLo),e(x1,nD),e(nD,e8o),e(x1,o8o),e(q,r8o),e(q,$1),e($1,Yde),e(Yde,t8o),e($1,a8o),e($1,sD),e(sD,n8o),e($1,s8o),e(q,l8o),e(q,k1),e(k1,Kde),e(Kde,i8o),e(k1,d8o),e(k1,lD),e(lD,c8o),e(k1,f8o),e(q,m8o),e(q,S1),e(S1,Zde),e(Zde,g8o),e(S1,h8o),e(S1,iD),e(iD,p8o),e(S1,u8o),e(q,_8o),e(q,R1),e(R1,ece),e(ece,b8o),e(R1,v8o),e(R1,dD),e(dD,F8o),e(R1,T8o),e(q,M8o),e(q,B1),e(B1,oce),e(oce,E8o),e(B1,C8o),e(B1,cD),e(cD,w8o),e(B1,A8o),e(q,y8o),e(q,P1),e(P1,rce),e(rce,L8o),e(P1,x8o),e(P1,fD),e(fD,$8o),e(P1,k8o),e(q,S8o),e(q,I1),e(I1,tce),e(tce,R8o),e(I1,B8o),e(I1,mD),e(mD,P8o),e(I1,I8o),e(q,q8o),e(q,q1),e(q1,ace),e(ace,N8o),e(q1,j8o),e(q1,gD),e(gD,D8o),e(q1,G8o),e(q,O8o),e(q,N1),e(N1,nce),e(nce,V8o),e(N1,X8o),e(N1,hD),e(hD,z8o),e(N1,Q8o),e(q,W8o),e(q,j1),e(j1,sce),e(sce,H8o),e(j1,U8o),e(j1,pD),e(pD,J8o),e(j1,Y8o),e(q,K8o),e(q,D1),e(D1,lce),e(lce,Z8o),e(D1,exo),e(D1,uD),e(uD,oxo),e(D1,rxo),e(q,txo),e(q,G1),e(G1,ice),e(ice,axo),e(G1,nxo),e(G1,_D),e(_D,sxo),e(G1,lxo),e(q,ixo),e(q,O1),e(O1,dce),e(dce,dxo),e(O1,cxo),e(O1,bD),e(bD,fxo),e(O1,mxo),e(q,gxo),e(q,V1),e(V1,cce),e(cce,hxo),e(V1,pxo),e(V1,vD),e(vD,uxo),e(V1,_xo),e(q,bxo),e(q,X1),e(X1,fce),e(fce,vxo),e(X1,Fxo),e(X1,FD),e(FD,Txo),e(X1,Mxo),e(q,Exo),e(q,z1),e(z1,mce),e(mce,Cxo),e(z1,wxo),e(z1,TD),e(TD,Axo),e(z1,yxo),e(q,Lxo),e(q,Q1),e(Q1,gce),e(gce,xxo),e(Q1,$xo),e(Q1,MD),e(MD,kxo),e(Q1,Sxo),e(q,Rxo),e(q,W1),e(W1,hce),e(hce,Bxo),e(W1,Pxo),e(W1,ED),e(ED,Ixo),e(W1,qxo),e(q,Nxo),e(q,H1),e(H1,pce),e(pce,jxo),e(H1,Dxo),e(H1,CD),e(CD,Gxo),e(H1,Oxo),e(q,Vxo),e(q,U1),e(U1,uce),e(uce,Xxo),e(U1,zxo),e(U1,wD),e(wD,Qxo),e(U1,Wxo),e(q,Hxo),e(q,J1),e(J1,_ce),e(_ce,Uxo),e(J1,Jxo),e(J1,AD),e(AD,Yxo),e(J1,Kxo),e(q,Zxo),e(q,Y1),e(Y1,bce),e(bce,e9o),e(Y1,o9o),e(Y1,yD),e(yD,r9o),e(Y1,t9o),e(q,a9o),e(q,K1),e(K1,vce),e(vce,n9o),e(K1,s9o),e(K1,LD),e(LD,l9o),e(K1,i9o),e(q,d9o),e(q,Z1),e(Z1,Fce),e(Fce,c9o),e(Z1,f9o),e(Z1,xD),e(xD,m9o),e(Z1,g9o),e(q,h9o),e(q,eb),e(eb,Tce),e(Tce,p9o),e(eb,u9o),e(eb,$D),e($D,_9o),e(eb,b9o),e(Ze,v9o),e(Ze,ob),e(ob,F9o),e(ob,Mce),e(Mce,T9o),e(ob,M9o),e(ob,Ece),e(Ece,E9o),e(Ze,C9o),M(rb,Ze,null),b(f,dPe,_),b(f,Bi,_),e(Bi,tb),e(tb,Cce),M(kA,Cce,null),e(Bi,w9o),e(Bi,wce),e(wce,A9o),b(f,cPe,_),b(f,Bo,_),M(SA,Bo,null),e(Bo,y9o),e(Bo,Pi),e(Pi,L9o),e(Pi,kD),e(kD,x9o),e(Pi,$9o),e(Pi,SD),e(SD,k9o),e(Pi,S9o),e(Bo,R9o),e(Bo,RA),e(RA,B9o),e(RA,Ace),e(Ace,P9o),e(RA,I9o),e(Bo,q9o),e(Bo,nt),M(BA,nt,null),e(nt,N9o),e(nt,yce),e(yce,j9o),e(nt,D9o),e(nt,Ii),e(Ii,G9o),e(Ii,Lce),e(Lce,O9o),e(Ii,V9o),e(Ii,RD),e(RD,X9o),e(Ii,z9o),e(nt,Q9o),M(ab,nt,null),e(Bo,W9o),e(Bo,eo),M(PA,eo,null),e(eo,H9o),e(eo,xce),e(xce,U9o),e(eo,J9o),e(eo,xa),e(xa,Y9o),e(xa,$ce),e($ce,K9o),e(xa,Z9o),e(xa,kce),e(kce,e$o),e(xa,o$o),e(xa,Sce),e(Sce,r$o),e(xa,t$o),e(eo,a$o),e(eo,Y),e(Y,nb),e(nb,Rce),e(Rce,n$o),e(nb,s$o),e(nb,BD),e(BD,l$o),e(nb,i$o),e(Y,d$o),e(Y,sb),e(sb,Bce),e(Bce,c$o),e(sb,f$o),e(sb,PD),e(PD,m$o),e(sb,g$o),e(Y,h$o),e(Y,lb),e(lb,Pce),e(Pce,p$o),e(lb,u$o),e(lb,ID),e(ID,_$o),e(lb,b$o),e(Y,v$o),e(Y,ib),e(ib,Ice),e(Ice,F$o),e(ib,T$o),e(ib,qD),e(qD,M$o),e(ib,E$o),e(Y,C$o),e(Y,db),e(db,qce),e(qce,w$o),e(db,A$o),e(db,ND),e(ND,y$o),e(db,L$o),e(Y,x$o),e(Y,cb),e(cb,Nce),e(Nce,$$o),e(cb,k$o),e(cb,jD),e(jD,S$o),e(cb,R$o),e(Y,B$o),e(Y,fb),e(fb,jce),e(jce,P$o),e(fb,I$o),e(fb,DD),e(DD,q$o),e(fb,N$o),e(Y,j$o),e(Y,mb),e(mb,Dce),e(Dce,D$o),e(mb,G$o),e(mb,GD),e(GD,O$o),e(mb,V$o),e(Y,X$o),e(Y,gb),e(gb,Gce),e(Gce,z$o),e(gb,Q$o),e(gb,OD),e(OD,W$o),e(gb,H$o),e(Y,U$o),e(Y,hb),e(hb,Oce),e(Oce,J$o),e(hb,Y$o),e(hb,VD),e(VD,K$o),e(hb,Z$o),e(Y,eko),e(Y,pb),e(pb,Vce),e(Vce,oko),e(pb,rko),e(pb,XD),e(XD,tko),e(pb,ako),e(Y,nko),e(Y,ub),e(ub,Xce),e(Xce,sko),e(ub,lko),e(ub,zD),e(zD,iko),e(ub,dko),e(Y,cko),e(Y,_b),e(_b,zce),e(zce,fko),e(_b,mko),e(_b,QD),e(QD,gko),e(_b,hko),e(Y,pko),e(Y,bb),e(bb,Qce),e(Qce,uko),e(bb,_ko),e(bb,WD),e(WD,bko),e(bb,vko),e(Y,Fko),e(Y,vb),e(vb,Wce),e(Wce,Tko),e(vb,Mko),e(vb,HD),e(HD,Eko),e(vb,Cko),e(Y,wko),e(Y,Fb),e(Fb,Hce),e(Hce,Ako),e(Fb,yko),e(Fb,UD),e(UD,Lko),e(Fb,xko),e(Y,$ko),e(Y,Tb),e(Tb,Uce),e(Uce,kko),e(Tb,Sko),e(Tb,JD),e(JD,Rko),e(Tb,Bko),e(Y,Pko),e(Y,Mb),e(Mb,Jce),e(Jce,Iko),e(Mb,qko),e(Mb,YD),e(YD,Nko),e(Mb,jko),e(Y,Dko),e(Y,Eb),e(Eb,Yce),e(Yce,Gko),e(Eb,Oko),e(Eb,KD),e(KD,Vko),e(Eb,Xko),e(Y,zko),e(Y,Cb),e(Cb,Kce),e(Kce,Qko),e(Cb,Wko),e(Cb,ZD),e(ZD,Hko),e(Cb,Uko),e(Y,Jko),e(Y,wb),e(wb,Zce),e(Zce,Yko),e(wb,Kko),e(wb,eG),e(eG,Zko),e(wb,eSo),e(Y,oSo),e(Y,Ab),e(Ab,efe),e(efe,rSo),e(Ab,tSo),e(Ab,oG),e(oG,aSo),e(Ab,nSo),e(Y,sSo),e(Y,yb),e(yb,ofe),e(ofe,lSo),e(yb,iSo),e(yb,rG),e(rG,dSo),e(yb,cSo),e(Y,fSo),e(Y,Lb),e(Lb,rfe),e(rfe,mSo),e(Lb,gSo),e(Lb,tG),e(tG,hSo),e(Lb,pSo),e(Y,uSo),e(Y,xb),e(xb,tfe),e(tfe,_So),e(xb,bSo),e(xb,aG),e(aG,vSo),e(xb,FSo),e(Y,TSo),e(Y,$b),e($b,afe),e(afe,MSo),e($b,ESo),e($b,nG),e(nG,CSo),e($b,wSo),e(Y,ASo),e(Y,kb),e(kb,nfe),e(nfe,ySo),e(kb,LSo),e(kb,sG),e(sG,xSo),e(kb,$So),e(Y,kSo),e(Y,Sb),e(Sb,sfe),e(sfe,SSo),e(Sb,RSo),e(Sb,lG),e(lG,BSo),e(Sb,PSo),e(eo,ISo),e(eo,Rb),e(Rb,qSo),e(Rb,lfe),e(lfe,NSo),e(Rb,jSo),e(Rb,ife),e(ife,DSo),e(eo,GSo),M(Bb,eo,null),b(f,fPe,_),b(f,qi,_),e(qi,Pb),e(Pb,dfe),M(IA,dfe,null),e(qi,OSo),e(qi,cfe),e(cfe,VSo),b(f,mPe,_),b(f,Po,_),M(qA,Po,null),e(Po,XSo),e(Po,Ni),e(Ni,zSo),e(Ni,iG),e(iG,QSo),e(Ni,WSo),e(Ni,dG),e(dG,HSo),e(Ni,USo),e(Po,JSo),e(Po,NA),e(NA,YSo),e(NA,ffe),e(ffe,KSo),e(NA,ZSo),e(Po,eRo),e(Po,st),M(jA,st,null),e(st,oRo),e(st,mfe),e(mfe,rRo),e(st,tRo),e(st,ji),e(ji,aRo),e(ji,gfe),e(gfe,nRo),e(ji,sRo),e(ji,cG),e(cG,lRo),e(ji,iRo),e(st,dRo),M(Ib,st,null),e(Po,cRo),e(Po,oo),M(DA,oo,null),e(oo,fRo),e(oo,hfe),e(hfe,mRo),e(oo,gRo),e(oo,$a),e($a,hRo),e($a,pfe),e(pfe,pRo),e($a,uRo),e($a,ufe),e(ufe,_Ro),e($a,bRo),e($a,_fe),e(_fe,vRo),e($a,FRo),e(oo,TRo),e(oo,Ur),e(Ur,qb),e(qb,bfe),e(bfe,MRo),e(qb,ERo),e(qb,fG),e(fG,CRo),e(qb,wRo),e(Ur,ARo),e(Ur,Nb),e(Nb,vfe),e(vfe,yRo),e(Nb,LRo),e(Nb,mG),e(mG,xRo),e(Nb,$Ro),e(Ur,kRo),e(Ur,jb),e(jb,Ffe),e(Ffe,SRo),e(jb,RRo),e(jb,gG),e(gG,BRo),e(jb,PRo),e(Ur,IRo),e(Ur,Db),e(Db,Tfe),e(Tfe,qRo),e(Db,NRo),e(Db,hG),e(hG,jRo),e(Db,DRo),e(Ur,GRo),e(Ur,Gb),e(Gb,Mfe),e(Mfe,ORo),e(Gb,VRo),e(Gb,pG),e(pG,XRo),e(Gb,zRo),e(oo,QRo),e(oo,Ob),e(Ob,WRo),e(Ob,Efe),e(Efe,HRo),e(Ob,URo),e(Ob,Cfe),e(Cfe,JRo),e(oo,YRo),M(Vb,oo,null),b(f,gPe,_),b(f,Di,_),e(Di,Xb),e(Xb,wfe),M(GA,wfe,null),e(Di,KRo),e(Di,Afe),e(Afe,ZRo),b(f,hPe,_),b(f,Io,_),M(OA,Io,null),e(Io,eBo),e(Io,Gi),e(Gi,oBo),e(Gi,uG),e(uG,rBo),e(Gi,tBo),e(Gi,_G),e(_G,aBo),e(Gi,nBo),e(Io,sBo),e(Io,VA),e(VA,lBo),e(VA,yfe),e(yfe,iBo),e(VA,dBo),e(Io,cBo),e(Io,lt),M(XA,lt,null),e(lt,fBo),e(lt,Lfe),e(Lfe,mBo),e(lt,gBo),e(lt,Oi),e(Oi,hBo),e(Oi,xfe),e(xfe,pBo),e(Oi,uBo),e(Oi,bG),e(bG,_Bo),e(Oi,bBo),e(lt,vBo),M(zb,lt,null),e(Io,FBo),e(Io,ro),M(zA,ro,null),e(ro,TBo),e(ro,$fe),e($fe,MBo),e(ro,EBo),e(ro,ka),e(ka,CBo),e(ka,kfe),e(kfe,wBo),e(ka,ABo),e(ka,Sfe),e(Sfe,yBo),e(ka,LBo),e(ka,Rfe),e(Rfe,xBo),e(ka,$Bo),e(ro,kBo),e(ro,W),e(W,Qb),e(Qb,Bfe),e(Bfe,SBo),e(Qb,RBo),e(Qb,vG),e(vG,BBo),e(Qb,PBo),e(W,IBo),e(W,Wb),e(Wb,Pfe),e(Pfe,qBo),e(Wb,NBo),e(Wb,FG),e(FG,jBo),e(Wb,DBo),e(W,GBo),e(W,Hb),e(Hb,Ife),e(Ife,OBo),e(Hb,VBo),e(Hb,TG),e(TG,XBo),e(Hb,zBo),e(W,QBo),e(W,Ub),e(Ub,qfe),e(qfe,WBo),e(Ub,HBo),e(Ub,MG),e(MG,UBo),e(Ub,JBo),e(W,YBo),e(W,Jb),e(Jb,Nfe),e(Nfe,KBo),e(Jb,ZBo),e(Jb,EG),e(EG,ePo),e(Jb,oPo),e(W,rPo),e(W,Yb),e(Yb,jfe),e(jfe,tPo),e(Yb,aPo),e(Yb,CG),e(CG,nPo),e(Yb,sPo),e(W,lPo),e(W,Kb),e(Kb,Dfe),e(Dfe,iPo),e(Kb,dPo),e(Kb,wG),e(wG,cPo),e(Kb,fPo),e(W,mPo),e(W,Zb),e(Zb,Gfe),e(Gfe,gPo),e(Zb,hPo),e(Zb,AG),e(AG,pPo),e(Zb,uPo),e(W,_Po),e(W,e2),e(e2,Ofe),e(Ofe,bPo),e(e2,vPo),e(e2,yG),e(yG,FPo),e(e2,TPo),e(W,MPo),e(W,o2),e(o2,Vfe),e(Vfe,EPo),e(o2,CPo),e(o2,LG),e(LG,wPo),e(o2,APo),e(W,yPo),e(W,r2),e(r2,Xfe),e(Xfe,LPo),e(r2,xPo),e(r2,xG),e(xG,$Po),e(r2,kPo),e(W,SPo),e(W,t2),e(t2,zfe),e(zfe,RPo),e(t2,BPo),e(t2,$G),e($G,PPo),e(t2,IPo),e(W,qPo),e(W,a2),e(a2,Qfe),e(Qfe,NPo),e(a2,jPo),e(a2,kG),e(kG,DPo),e(a2,GPo),e(W,OPo),e(W,n2),e(n2,Wfe),e(Wfe,VPo),e(n2,XPo),e(n2,SG),e(SG,zPo),e(n2,QPo),e(W,WPo),e(W,s2),e(s2,Hfe),e(Hfe,HPo),e(s2,UPo),e(s2,RG),e(RG,JPo),e(s2,YPo),e(W,KPo),e(W,l2),e(l2,Ufe),e(Ufe,ZPo),e(l2,eIo),e(l2,BG),e(BG,oIo),e(l2,rIo),e(W,tIo),e(W,i2),e(i2,Jfe),e(Jfe,aIo),e(i2,nIo),e(i2,PG),e(PG,sIo),e(i2,lIo),e(W,iIo),e(W,d2),e(d2,Yfe),e(Yfe,dIo),e(d2,cIo),e(d2,IG),e(IG,fIo),e(d2,mIo),e(W,gIo),e(W,c2),e(c2,Kfe),e(Kfe,hIo),e(c2,pIo),e(c2,qG),e(qG,uIo),e(c2,_Io),e(W,bIo),e(W,f2),e(f2,Zfe),e(Zfe,vIo),e(f2,FIo),e(f2,NG),e(NG,TIo),e(f2,MIo),e(W,EIo),e(W,m2),e(m2,eme),e(eme,CIo),e(m2,wIo),e(m2,jG),e(jG,AIo),e(m2,yIo),e(W,LIo),e(W,g2),e(g2,ome),e(ome,xIo),e(g2,$Io),e(g2,DG),e(DG,kIo),e(g2,SIo),e(W,RIo),e(W,h2),e(h2,rme),e(rme,BIo),e(h2,PIo),e(h2,GG),e(GG,IIo),e(h2,qIo),e(W,NIo),e(W,p2),e(p2,tme),e(tme,jIo),e(p2,DIo),e(p2,OG),e(OG,GIo),e(p2,OIo),e(W,VIo),e(W,u2),e(u2,ame),e(ame,XIo),e(u2,zIo),e(u2,VG),e(VG,QIo),e(u2,WIo),e(W,HIo),e(W,_2),e(_2,nme),e(nme,UIo),e(_2,JIo),e(_2,XG),e(XG,YIo),e(_2,KIo),e(W,ZIo),e(W,b2),e(b2,sme),e(sme,eqo),e(b2,oqo),e(b2,zG),e(zG,rqo),e(b2,tqo),e(W,aqo),e(W,v2),e(v2,lme),e(lme,nqo),e(v2,sqo),e(v2,QG),e(QG,lqo),e(v2,iqo),e(W,dqo),e(W,F2),e(F2,ime),e(ime,cqo),e(F2,fqo),e(F2,WG),e(WG,mqo),e(F2,gqo),e(W,hqo),e(W,T2),e(T2,dme),e(dme,pqo),e(T2,uqo),e(T2,HG),e(HG,_qo),e(T2,bqo),e(W,vqo),e(W,M2),e(M2,cme),e(cme,Fqo),e(M2,Tqo),e(M2,UG),e(UG,Mqo),e(M2,Eqo),e(W,Cqo),e(W,E2),e(E2,fme),e(fme,wqo),e(E2,Aqo),e(E2,JG),e(JG,yqo),e(E2,Lqo),e(W,xqo),e(W,C2),e(C2,mme),e(mme,$qo),e(C2,kqo),e(C2,YG),e(YG,Sqo),e(C2,Rqo),e(W,Bqo),e(W,w2),e(w2,gme),e(gme,Pqo),e(w2,Iqo),e(w2,KG),e(KG,qqo),e(w2,Nqo),e(ro,jqo),e(ro,A2),e(A2,Dqo),e(A2,hme),e(hme,Gqo),e(A2,Oqo),e(A2,pme),e(pme,Vqo),e(ro,Xqo),M(y2,ro,null),b(f,pPe,_),b(f,Vi,_),e(Vi,L2),e(L2,ume),M(QA,ume,null),e(Vi,zqo),e(Vi,_me),e(_me,Qqo),b(f,uPe,_),b(f,qo,_),M(WA,qo,null),e(qo,Wqo),e(qo,Xi),e(Xi,Hqo),e(Xi,ZG),e(ZG,Uqo),e(Xi,Jqo),e(Xi,eO),e(eO,Yqo),e(Xi,Kqo),e(qo,Zqo),e(qo,HA),e(HA,eNo),e(HA,bme),e(bme,oNo),e(HA,rNo),e(qo,tNo),e(qo,it),M(UA,it,null),e(it,aNo),e(it,vme),e(vme,nNo),e(it,sNo),e(it,zi),e(zi,lNo),e(zi,Fme),e(Fme,iNo),e(zi,dNo),e(zi,oO),e(oO,cNo),e(zi,fNo),e(it,mNo),M(x2,it,null),e(qo,gNo),e(qo,to),M(JA,to,null),e(to,hNo),e(to,Tme),e(Tme,pNo),e(to,uNo),e(to,Sa),e(Sa,_No),e(Sa,Mme),e(Mme,bNo),e(Sa,vNo),e(Sa,Eme),e(Eme,FNo),e(Sa,TNo),e(Sa,Cme),e(Cme,MNo),e(Sa,ENo),e(to,CNo),e(to,G),e(G,$2),e($2,wme),e(wme,wNo),e($2,ANo),e($2,rO),e(rO,yNo),e($2,LNo),e(G,xNo),e(G,k2),e(k2,Ame),e(Ame,$No),e(k2,kNo),e(k2,tO),e(tO,SNo),e(k2,RNo),e(G,BNo),e(G,S2),e(S2,yme),e(yme,PNo),e(S2,INo),e(S2,aO),e(aO,qNo),e(S2,NNo),e(G,jNo),e(G,R2),e(R2,Lme),e(Lme,DNo),e(R2,GNo),e(R2,nO),e(nO,ONo),e(R2,VNo),e(G,XNo),e(G,B2),e(B2,xme),e(xme,zNo),e(B2,QNo),e(B2,sO),e(sO,WNo),e(B2,HNo),e(G,UNo),e(G,P2),e(P2,$me),e($me,JNo),e(P2,YNo),e(P2,lO),e(lO,KNo),e(P2,ZNo),e(G,ejo),e(G,I2),e(I2,kme),e(kme,ojo),e(I2,rjo),e(I2,iO),e(iO,tjo),e(I2,ajo),e(G,njo),e(G,q2),e(q2,Sme),e(Sme,sjo),e(q2,ljo),e(q2,dO),e(dO,ijo),e(q2,djo),e(G,cjo),e(G,N2),e(N2,Rme),e(Rme,fjo),e(N2,mjo),e(N2,cO),e(cO,gjo),e(N2,hjo),e(G,pjo),e(G,j2),e(j2,Bme),e(Bme,ujo),e(j2,_jo),e(j2,fO),e(fO,bjo),e(j2,vjo),e(G,Fjo),e(G,D2),e(D2,Pme),e(Pme,Tjo),e(D2,Mjo),e(D2,mO),e(mO,Ejo),e(D2,Cjo),e(G,wjo),e(G,G2),e(G2,Ime),e(Ime,Ajo),e(G2,yjo),e(G2,gO),e(gO,Ljo),e(G2,xjo),e(G,$jo),e(G,O2),e(O2,qme),e(qme,kjo),e(O2,Sjo),e(O2,hO),e(hO,Rjo),e(O2,Bjo),e(G,Pjo),e(G,V2),e(V2,Nme),e(Nme,Ijo),e(V2,qjo),e(V2,pO),e(pO,Njo),e(V2,jjo),e(G,Djo),e(G,X2),e(X2,jme),e(jme,Gjo),e(X2,Ojo),e(X2,uO),e(uO,Vjo),e(X2,Xjo),e(G,zjo),e(G,z2),e(z2,Dme),e(Dme,Qjo),e(z2,Wjo),e(z2,_O),e(_O,Hjo),e(z2,Ujo),e(G,Jjo),e(G,Q2),e(Q2,Gme),e(Gme,Yjo),e(Q2,Kjo),e(Q2,bO),e(bO,Zjo),e(Q2,eDo),e(G,oDo),e(G,W2),e(W2,Ome),e(Ome,rDo),e(W2,tDo),e(W2,vO),e(vO,aDo),e(W2,nDo),e(G,sDo),e(G,H2),e(H2,Vme),e(Vme,lDo),e(H2,iDo),e(H2,FO),e(FO,dDo),e(H2,cDo),e(G,fDo),e(G,U2),e(U2,Xme),e(Xme,mDo),e(U2,gDo),e(U2,TO),e(TO,hDo),e(U2,pDo),e(G,uDo),e(G,J2),e(J2,zme),e(zme,_Do),e(J2,bDo),e(J2,MO),e(MO,vDo),e(J2,FDo),e(G,TDo),e(G,Y2),e(Y2,Qme),e(Qme,MDo),e(Y2,EDo),e(Y2,EO),e(EO,CDo),e(Y2,wDo),e(G,ADo),e(G,K2),e(K2,Wme),e(Wme,yDo),e(K2,LDo),e(K2,CO),e(CO,xDo),e(K2,$Do),e(G,kDo),e(G,Z2),e(Z2,Hme),e(Hme,SDo),e(Z2,RDo),e(Z2,wO),e(wO,BDo),e(Z2,PDo),e(G,IDo),e(G,ev),e(ev,Ume),e(Ume,qDo),e(ev,NDo),e(ev,AO),e(AO,jDo),e(ev,DDo),e(G,GDo),e(G,ov),e(ov,Jme),e(Jme,ODo),e(ov,VDo),e(ov,yO),e(yO,XDo),e(ov,zDo),e(G,QDo),e(G,rv),e(rv,Yme),e(Yme,WDo),e(rv,HDo),e(rv,LO),e(LO,UDo),e(rv,JDo),e(G,YDo),e(G,tv),e(tv,Kme),e(Kme,KDo),e(tv,ZDo),e(tv,xO),e(xO,eGo),e(tv,oGo),e(G,rGo),e(G,av),e(av,Zme),e(Zme,tGo),e(av,aGo),e(av,$O),e($O,nGo),e(av,sGo),e(G,lGo),e(G,nv),e(nv,ege),e(ege,iGo),e(nv,dGo),e(nv,kO),e(kO,cGo),e(nv,fGo),e(G,mGo),e(G,sv),e(sv,oge),e(oge,gGo),e(sv,hGo),e(sv,SO),e(SO,pGo),e(sv,uGo),e(G,_Go),e(G,lv),e(lv,rge),e(rge,bGo),e(lv,vGo),e(lv,RO),e(RO,FGo),e(lv,TGo),e(G,MGo),e(G,iv),e(iv,tge),e(tge,EGo),e(iv,CGo),e(iv,BO),e(BO,wGo),e(iv,AGo),e(G,yGo),e(G,dv),e(dv,age),e(age,LGo),e(dv,xGo),e(dv,PO),e(PO,$Go),e(dv,kGo),e(G,SGo),e(G,cv),e(cv,nge),e(nge,RGo),e(cv,BGo),e(cv,IO),e(IO,PGo),e(cv,IGo),e(G,qGo),e(G,fv),e(fv,sge),e(sge,NGo),e(fv,jGo),e(fv,qO),e(qO,DGo),e(fv,GGo),e(G,OGo),e(G,mv),e(mv,lge),e(lge,VGo),e(mv,XGo),e(mv,NO),e(NO,zGo),e(mv,QGo),e(G,WGo),e(G,gv),e(gv,ige),e(ige,HGo),e(gv,UGo),e(gv,jO),e(jO,JGo),e(gv,YGo),e(G,KGo),e(G,hv),e(hv,dge),e(dge,ZGo),e(hv,eOo),e(hv,DO),e(DO,oOo),e(hv,rOo),e(G,tOo),e(G,pv),e(pv,cge),e(cge,aOo),e(pv,nOo),e(pv,GO),e(GO,sOo),e(pv,lOo),e(to,iOo),e(to,uv),e(uv,dOo),e(uv,fge),e(fge,cOo),e(uv,fOo),e(uv,mge),e(mge,mOo),e(to,gOo),M(_v,to,null),b(f,_Pe,_),b(f,Qi,_),e(Qi,bv),e(bv,gge),M(YA,gge,null),e(Qi,hOo),e(Qi,hge),e(hge,pOo),b(f,bPe,_),b(f,No,_),M(KA,No,null),e(No,uOo),e(No,Wi),e(Wi,_Oo),e(Wi,OO),e(OO,bOo),e(Wi,vOo),e(Wi,VO),e(VO,FOo),e(Wi,TOo),e(No,MOo),e(No,ZA),e(ZA,EOo),e(ZA,pge),e(pge,COo),e(ZA,wOo),e(No,AOo),e(No,dt),M(ey,dt,null),e(dt,yOo),e(dt,uge),e(uge,LOo),e(dt,xOo),e(dt,Hi),e(Hi,$Oo),e(Hi,_ge),e(_ge,kOo),e(Hi,SOo),e(Hi,XO),e(XO,ROo),e(Hi,BOo),e(dt,POo),M(vv,dt,null),e(No,IOo),e(No,ao),M(oy,ao,null),e(ao,qOo),e(ao,bge),e(bge,NOo),e(ao,jOo),e(ao,Ra),e(Ra,DOo),e(Ra,vge),e(vge,GOo),e(Ra,OOo),e(Ra,Fge),e(Fge,VOo),e(Ra,XOo),e(Ra,Tge),e(Tge,zOo),e(Ra,QOo),e(ao,WOo),e(ao,Mge),e(Mge,Fv),e(Fv,Ege),e(Ege,HOo),e(Fv,UOo),e(Fv,zO),e(zO,JOo),e(Fv,YOo),e(ao,KOo),e(ao,Tv),e(Tv,ZOo),e(Tv,Cge),e(Cge,eVo),e(Tv,oVo),e(Tv,wge),e(wge,rVo),e(ao,tVo),M(Mv,ao,null),b(f,vPe,_),b(f,Ui,_),e(Ui,Ev),e(Ev,Age),M(ry,Age,null),e(Ui,aVo),e(Ui,yge),e(yge,nVo),b(f,FPe,_),b(f,jo,_),M(ty,jo,null),e(jo,sVo),e(jo,Ji),e(Ji,lVo),e(Ji,QO),e(QO,iVo),e(Ji,dVo),e(Ji,WO),e(WO,cVo),e(Ji,fVo),e(jo,mVo),e(jo,ay),e(ay,gVo),e(ay,Lge),e(Lge,hVo),e(ay,pVo),e(jo,uVo),e(jo,ct),M(ny,ct,null),e(ct,_Vo),e(ct,xge),e(xge,bVo),e(ct,vVo),e(ct,Yi),e(Yi,FVo),e(Yi,$ge),e($ge,TVo),e(Yi,MVo),e(Yi,HO),e(HO,EVo),e(Yi,CVo),e(ct,wVo),M(Cv,ct,null),e(jo,AVo),e(jo,no),M(sy,no,null),e(no,yVo),e(no,kge),e(kge,LVo),e(no,xVo),e(no,Ba),e(Ba,$Vo),e(Ba,Sge),e(Sge,kVo),e(Ba,SVo),e(Ba,Rge),e(Rge,RVo),e(Ba,BVo),e(Ba,Bge),e(Bge,PVo),e(Ba,IVo),e(no,qVo),e(no,Fe),e(Fe,wv),e(wv,Pge),e(Pge,NVo),e(wv,jVo),e(wv,UO),e(UO,DVo),e(wv,GVo),e(Fe,OVo),e(Fe,Av),e(Av,Ige),e(Ige,VVo),e(Av,XVo),e(Av,JO),e(JO,zVo),e(Av,QVo),e(Fe,WVo),e(Fe,yv),e(yv,qge),e(qge,HVo),e(yv,UVo),e(yv,YO),e(YO,JVo),e(yv,YVo),e(Fe,KVo),e(Fe,$s),e($s,Nge),e(Nge,ZVo),e($s,eXo),e($s,KO),e(KO,oXo),e($s,rXo),e($s,ZO),e(ZO,tXo),e($s,aXo),e(Fe,nXo),e(Fe,Lv),e(Lv,jge),e(jge,sXo),e(Lv,lXo),e(Lv,eV),e(eV,iXo),e(Lv,dXo),e(Fe,cXo),e(Fe,ft),e(ft,Dge),e(Dge,fXo),e(ft,mXo),e(ft,oV),e(oV,gXo),e(ft,hXo),e(ft,rV),e(rV,pXo),e(ft,uXo),e(ft,tV),e(tV,_Xo),e(ft,bXo),e(Fe,vXo),e(Fe,xv),e(xv,Gge),e(Gge,FXo),e(xv,TXo),e(xv,aV),e(aV,MXo),e(xv,EXo),e(Fe,CXo),e(Fe,$v),e($v,Oge),e(Oge,wXo),e($v,AXo),e($v,nV),e(nV,yXo),e($v,LXo),e(Fe,xXo),e(Fe,kv),e(kv,Vge),e(Vge,$Xo),e(kv,kXo),e(kv,sV),e(sV,SXo),e(kv,RXo),e(Fe,BXo),e(Fe,Sv),e(Sv,Xge),e(Xge,PXo),e(Sv,IXo),e(Sv,lV),e(lV,qXo),e(Sv,NXo),e(Fe,jXo),e(Fe,Rv),e(Rv,zge),e(zge,DXo),e(Rv,GXo),e(Rv,iV),e(iV,OXo),e(Rv,VXo),e(Fe,XXo),e(Fe,Bv),e(Bv,Qge),e(Qge,zXo),e(Bv,QXo),e(Bv,dV),e(dV,WXo),e(Bv,HXo),e(Fe,UXo),e(Fe,Pv),e(Pv,Wge),e(Wge,JXo),e(Pv,YXo),e(Pv,cV),e(cV,KXo),e(Pv,ZXo),e(no,ezo),e(no,Iv),e(Iv,ozo),e(Iv,Hge),e(Hge,rzo),e(Iv,tzo),e(Iv,Uge),e(Uge,azo),e(no,nzo),M(qv,no,null),b(f,TPe,_),b(f,Ki,_),e(Ki,Nv),e(Nv,Jge),M(ly,Jge,null),e(Ki,szo),e(Ki,Yge),e(Yge,lzo),b(f,MPe,_),b(f,Do,_),M(iy,Do,null),e(Do,izo),e(Do,Zi),e(Zi,dzo),e(Zi,fV),e(fV,czo),e(Zi,fzo),e(Zi,mV),e(mV,mzo),e(Zi,gzo),e(Do,hzo),e(Do,dy),e(dy,pzo),e(dy,Kge),e(Kge,uzo),e(dy,_zo),e(Do,bzo),e(Do,mt),M(cy,mt,null),e(mt,vzo),e(mt,Zge),e(Zge,Fzo),e(mt,Tzo),e(mt,ed),e(ed,Mzo),e(ed,ehe),e(ehe,Ezo),e(ed,Czo),e(ed,gV),e(gV,wzo),e(ed,Azo),e(mt,yzo),M(jv,mt,null),e(Do,Lzo),e(Do,so),M(fy,so,null),e(so,xzo),e(so,ohe),e(ohe,$zo),e(so,kzo),e(so,Pa),e(Pa,Szo),e(Pa,rhe),e(rhe,Rzo),e(Pa,Bzo),e(Pa,the),e(the,Pzo),e(Pa,Izo),e(Pa,ahe),e(ahe,qzo),e(Pa,Nzo),e(so,jzo),e(so,nhe),e(nhe,Dv),e(Dv,she),e(she,Dzo),e(Dv,Gzo),e(Dv,hV),e(hV,Ozo),e(Dv,Vzo),e(so,Xzo),e(so,Gv),e(Gv,zzo),e(Gv,lhe),e(lhe,Qzo),e(Gv,Wzo),e(Gv,ihe),e(ihe,Hzo),e(so,Uzo),M(Ov,so,null),b(f,EPe,_),b(f,od,_),e(od,Vv),e(Vv,dhe),M(my,dhe,null),e(od,Jzo),e(od,che),e(che,Yzo),b(f,CPe,_),b(f,Go,_),M(gy,Go,null),e(Go,Kzo),e(Go,rd),e(rd,Zzo),e(rd,pV),e(pV,eQo),e(rd,oQo),e(rd,uV),e(uV,rQo),e(rd,tQo),e(Go,aQo),e(Go,hy),e(hy,nQo),e(hy,fhe),e(fhe,sQo),e(hy,lQo),e(Go,iQo),e(Go,gt),M(py,gt,null),e(gt,dQo),e(gt,mhe),e(mhe,cQo),e(gt,fQo),e(gt,td),e(td,mQo),e(td,ghe),e(ghe,gQo),e(td,hQo),e(td,_V),e(_V,pQo),e(td,uQo),e(gt,_Qo),M(Xv,gt,null),e(Go,bQo),e(Go,lo),M(uy,lo,null),e(lo,vQo),e(lo,hhe),e(hhe,FQo),e(lo,TQo),e(lo,Ia),e(Ia,MQo),e(Ia,phe),e(phe,EQo),e(Ia,CQo),e(Ia,uhe),e(uhe,wQo),e(Ia,AQo),e(Ia,_he),e(_he,yQo),e(Ia,LQo),e(lo,xQo),e(lo,Ne),e(Ne,zv),e(zv,bhe),e(bhe,$Qo),e(zv,kQo),e(zv,bV),e(bV,SQo),e(zv,RQo),e(Ne,BQo),e(Ne,Qv),e(Qv,vhe),e(vhe,PQo),e(Qv,IQo),e(Qv,vV),e(vV,qQo),e(Qv,NQo),e(Ne,jQo),e(Ne,Wv),e(Wv,Fhe),e(Fhe,DQo),e(Wv,GQo),e(Wv,FV),e(FV,OQo),e(Wv,VQo),e(Ne,XQo),e(Ne,Hv),e(Hv,The),e(The,zQo),e(Hv,QQo),e(Hv,TV),e(TV,WQo),e(Hv,HQo),e(Ne,UQo),e(Ne,Uv),e(Uv,Mhe),e(Mhe,JQo),e(Uv,YQo),e(Uv,MV),e(MV,KQo),e(Uv,ZQo),e(Ne,eWo),e(Ne,Jv),e(Jv,Ehe),e(Ehe,oWo),e(Jv,rWo),e(Jv,EV),e(EV,tWo),e(Jv,aWo),e(Ne,nWo),e(Ne,Yv),e(Yv,Che),e(Che,sWo),e(Yv,lWo),e(Yv,CV),e(CV,iWo),e(Yv,dWo),e(Ne,cWo),e(Ne,Kv),e(Kv,whe),e(whe,fWo),e(Kv,mWo),e(Kv,wV),e(wV,gWo),e(Kv,hWo),e(lo,pWo),e(lo,Zv),e(Zv,uWo),e(Zv,Ahe),e(Ahe,_Wo),e(Zv,bWo),e(Zv,yhe),e(yhe,vWo),e(lo,FWo),M(eF,lo,null),b(f,wPe,_),b(f,ad,_),e(ad,oF),e(oF,Lhe),M(_y,Lhe,null),e(ad,TWo),e(ad,xhe),e(xhe,MWo),b(f,APe,_),b(f,Oo,_),M(by,Oo,null),e(Oo,EWo),e(Oo,nd),e(nd,CWo),e(nd,AV),e(AV,wWo),e(nd,AWo),e(nd,yV),e(yV,yWo),e(nd,LWo),e(Oo,xWo),e(Oo,vy),e(vy,$Wo),e(vy,$he),e($he,kWo),e(vy,SWo),e(Oo,RWo),e(Oo,ht),M(Fy,ht,null),e(ht,BWo),e(ht,khe),e(khe,PWo),e(ht,IWo),e(ht,sd),e(sd,qWo),e(sd,She),e(She,NWo),e(sd,jWo),e(sd,LV),e(LV,DWo),e(sd,GWo),e(ht,OWo),M(rF,ht,null),e(Oo,VWo),e(Oo,io),M(Ty,io,null),e(io,XWo),e(io,Rhe),e(Rhe,zWo),e(io,QWo),e(io,qa),e(qa,WWo),e(qa,Bhe),e(Bhe,HWo),e(qa,UWo),e(qa,Phe),e(Phe,JWo),e(qa,YWo),e(qa,Ihe),e(Ihe,KWo),e(qa,ZWo),e(io,eHo),e(io,Na),e(Na,tF),e(tF,qhe),e(qhe,oHo),e(tF,rHo),e(tF,xV),e(xV,tHo),e(tF,aHo),e(Na,nHo),e(Na,aF),e(aF,Nhe),e(Nhe,sHo),e(aF,lHo),e(aF,$V),e($V,iHo),e(aF,dHo),e(Na,cHo),e(Na,nF),e(nF,jhe),e(jhe,fHo),e(nF,mHo),e(nF,kV),e(kV,gHo),e(nF,hHo),e(Na,pHo),e(Na,sF),e(sF,Dhe),e(Dhe,uHo),e(sF,_Ho),e(sF,SV),e(SV,bHo),e(sF,vHo),e(io,FHo),e(io,lF),e(lF,THo),e(lF,Ghe),e(Ghe,MHo),e(lF,EHo),e(lF,Ohe),e(Ohe,CHo),e(io,wHo),M(iF,io,null),b(f,yPe,_),b(f,ld,_),e(ld,dF),e(dF,Vhe),M(My,Vhe,null),e(ld,AHo),e(ld,Xhe),e(Xhe,yHo),b(f,LPe,_),b(f,Vo,_),M(Ey,Vo,null),e(Vo,LHo),e(Vo,id),e(id,xHo),e(id,RV),e(RV,$Ho),e(id,kHo),e(id,BV),e(BV,SHo),e(id,RHo),e(Vo,BHo),e(Vo,Cy),e(Cy,PHo),e(Cy,zhe),e(zhe,IHo),e(Cy,qHo),e(Vo,NHo),e(Vo,pt),M(wy,pt,null),e(pt,jHo),e(pt,Qhe),e(Qhe,DHo),e(pt,GHo),e(pt,dd),e(dd,OHo),e(dd,Whe),e(Whe,VHo),e(dd,XHo),e(dd,PV),e(PV,zHo),e(dd,QHo),e(pt,WHo),M(cF,pt,null),e(Vo,HHo),e(Vo,co),M(Ay,co,null),e(co,UHo),e(co,Hhe),e(Hhe,JHo),e(co,YHo),e(co,ja),e(ja,KHo),e(ja,Uhe),e(Uhe,ZHo),e(ja,eUo),e(ja,Jhe),e(Jhe,oUo),e(ja,rUo),e(ja,Yhe),e(Yhe,tUo),e(ja,aUo),e(co,nUo),e(co,je),e(je,fF),e(fF,Khe),e(Khe,sUo),e(fF,lUo),e(fF,IV),e(IV,iUo),e(fF,dUo),e(je,cUo),e(je,mF),e(mF,Zhe),e(Zhe,fUo),e(mF,mUo),e(mF,qV),e(qV,gUo),e(mF,hUo),e(je,pUo),e(je,gF),e(gF,epe),e(epe,uUo),e(gF,_Uo),e(gF,NV),e(NV,bUo),e(gF,vUo),e(je,FUo),e(je,hF),e(hF,ope),e(ope,TUo),e(hF,MUo),e(hF,jV),e(jV,EUo),e(hF,CUo),e(je,wUo),e(je,pF),e(pF,rpe),e(rpe,AUo),e(pF,yUo),e(pF,DV),e(DV,LUo),e(pF,xUo),e(je,$Uo),e(je,uF),e(uF,tpe),e(tpe,kUo),e(uF,SUo),e(uF,GV),e(GV,RUo),e(uF,BUo),e(je,PUo),e(je,_F),e(_F,ape),e(ape,IUo),e(_F,qUo),e(_F,OV),e(OV,NUo),e(_F,jUo),e(je,DUo),e(je,bF),e(bF,npe),e(npe,GUo),e(bF,OUo),e(bF,VV),e(VV,VUo),e(bF,XUo),e(co,zUo),e(co,vF),e(vF,QUo),e(vF,spe),e(spe,WUo),e(vF,HUo),e(vF,lpe),e(lpe,UUo),e(co,JUo),M(FF,co,null),b(f,xPe,_),b(f,cd,_),e(cd,TF),e(TF,ipe),M(yy,ipe,null),e(cd,YUo),e(cd,dpe),e(dpe,KUo),b(f,$Pe,_),b(f,Xo,_),M(Ly,Xo,null),e(Xo,ZUo),e(Xo,fd),e(fd,eJo),e(fd,XV),e(XV,oJo),e(fd,rJo),e(fd,zV),e(zV,tJo),e(fd,aJo),e(Xo,nJo),e(Xo,xy),e(xy,sJo),e(xy,cpe),e(cpe,lJo),e(xy,iJo),e(Xo,dJo),e(Xo,ut),M($y,ut,null),e(ut,cJo),e(ut,fpe),e(fpe,fJo),e(ut,mJo),e(ut,md),e(md,gJo),e(md,mpe),e(mpe,hJo),e(md,pJo),e(md,QV),e(QV,uJo),e(md,_Jo),e(ut,bJo),M(MF,ut,null),e(Xo,vJo),e(Xo,fo),M(ky,fo,null),e(fo,FJo),e(fo,gpe),e(gpe,TJo),e(fo,MJo),e(fo,Da),e(Da,EJo),e(Da,hpe),e(hpe,CJo),e(Da,wJo),e(Da,ppe),e(ppe,AJo),e(Da,yJo),e(Da,upe),e(upe,LJo),e(Da,xJo),e(fo,$Jo),e(fo,Sy),e(Sy,EF),e(EF,_pe),e(_pe,kJo),e(EF,SJo),e(EF,WV),e(WV,RJo),e(EF,BJo),e(Sy,PJo),e(Sy,CF),e(CF,bpe),e(bpe,IJo),e(CF,qJo),e(CF,HV),e(HV,NJo),e(CF,jJo),e(fo,DJo),e(fo,wF),e(wF,GJo),e(wF,vpe),e(vpe,OJo),e(wF,VJo),e(wF,Fpe),e(Fpe,XJo),e(fo,zJo),M(AF,fo,null),b(f,kPe,_),b(f,gd,_),e(gd,yF),e(yF,Tpe),M(Ry,Tpe,null),e(gd,QJo),e(gd,Mpe),e(Mpe,WJo),b(f,SPe,_),b(f,zo,_),M(By,zo,null),e(zo,HJo),e(zo,hd),e(hd,UJo),e(hd,UV),e(UV,JJo),e(hd,YJo),e(hd,JV),e(JV,KJo),e(hd,ZJo),e(zo,eYo),e(zo,Py),e(Py,oYo),e(Py,Epe),e(Epe,rYo),e(Py,tYo),e(zo,aYo),e(zo,_t),M(Iy,_t,null),e(_t,nYo),e(_t,Cpe),e(Cpe,sYo),e(_t,lYo),e(_t,pd),e(pd,iYo),e(pd,wpe),e(wpe,dYo),e(pd,cYo),e(pd,YV),e(YV,fYo),e(pd,mYo),e(_t,gYo),M(LF,_t,null),e(zo,hYo),e(zo,mo),M(qy,mo,null),e(mo,pYo),e(mo,Ape),e(Ape,uYo),e(mo,_Yo),e(mo,Ga),e(Ga,bYo),e(Ga,ype),e(ype,vYo),e(Ga,FYo),e(Ga,Lpe),e(Lpe,TYo),e(Ga,MYo),e(Ga,xpe),e(xpe,EYo),e(Ga,CYo),e(mo,wYo),e(mo,Oa),e(Oa,xF),e(xF,$pe),e($pe,AYo),e(xF,yYo),e(xF,KV),e(KV,LYo),e(xF,xYo),e(Oa,$Yo),e(Oa,$F),e($F,kpe),e(kpe,kYo),e($F,SYo),e($F,ZV),e(ZV,RYo),e($F,BYo),e(Oa,PYo),e(Oa,kF),e(kF,Spe),e(Spe,IYo),e(kF,qYo),e(kF,eX),e(eX,NYo),e(kF,jYo),e(Oa,DYo),e(Oa,SF),e(SF,Rpe),e(Rpe,GYo),e(SF,OYo),e(SF,oX),e(oX,VYo),e(SF,XYo),e(mo,zYo),e(mo,RF),e(RF,QYo),e(RF,Bpe),e(Bpe,WYo),e(RF,HYo),e(RF,Ppe),e(Ppe,UYo),e(mo,JYo),M(BF,mo,null),b(f,RPe,_),b(f,ud,_),e(ud,PF),e(PF,Ipe),M(Ny,Ipe,null),e(ud,YYo),e(ud,qpe),e(qpe,KYo),b(f,BPe,_),b(f,Qo,_),M(jy,Qo,null),e(Qo,ZYo),e(Qo,_d),e(_d,eKo),e(_d,rX),e(rX,oKo),e(_d,rKo),e(_d,tX),e(tX,tKo),e(_d,aKo),e(Qo,nKo),e(Qo,Dy),e(Dy,sKo),e(Dy,Npe),e(Npe,lKo),e(Dy,iKo),e(Qo,dKo),e(Qo,bt),M(Gy,bt,null),e(bt,cKo),e(bt,jpe),e(jpe,fKo),e(bt,mKo),e(bt,bd),e(bd,gKo),e(bd,Dpe),e(Dpe,hKo),e(bd,pKo),e(bd,aX),e(aX,uKo),e(bd,_Ko),e(bt,bKo),M(IF,bt,null),e(Qo,vKo),e(Qo,go),M(Oy,go,null),e(go,FKo),e(go,Gpe),e(Gpe,TKo),e(go,MKo),e(go,Va),e(Va,EKo),e(Va,Ope),e(Ope,CKo),e(Va,wKo),e(Va,Vpe),e(Vpe,AKo),e(Va,yKo),e(Va,Xpe),e(Xpe,LKo),e(Va,xKo),e(go,$Ko),e(go,vd),e(vd,qF),e(qF,zpe),e(zpe,kKo),e(qF,SKo),e(qF,nX),e(nX,RKo),e(qF,BKo),e(vd,PKo),e(vd,NF),e(NF,Qpe),e(Qpe,IKo),e(NF,qKo),e(NF,sX),e(sX,NKo),e(NF,jKo),e(vd,DKo),e(vd,jF),e(jF,Wpe),e(Wpe,GKo),e(jF,OKo),e(jF,lX),e(lX,VKo),e(jF,XKo),e(go,zKo),e(go,DF),e(DF,QKo),e(DF,Hpe),e(Hpe,WKo),e(DF,HKo),e(DF,Upe),e(Upe,UKo),e(go,JKo),M(GF,go,null),b(f,PPe,_),b(f,Fd,_),e(Fd,OF),e(OF,Jpe),M(Vy,Jpe,null),e(Fd,YKo),e(Fd,Ype),e(Ype,KKo),b(f,IPe,_),b(f,Wo,_),M(Xy,Wo,null),e(Wo,ZKo),e(Wo,Td),e(Td,eZo),e(Td,iX),e(iX,oZo),e(Td,rZo),e(Td,dX),e(dX,tZo),e(Td,aZo),e(Wo,nZo),e(Wo,zy),e(zy,sZo),e(zy,Kpe),e(Kpe,lZo),e(zy,iZo),e(Wo,dZo),e(Wo,vt),M(Qy,vt,null),e(vt,cZo),e(vt,Zpe),e(Zpe,fZo),e(vt,mZo),e(vt,Md),e(Md,gZo),e(Md,eue),e(eue,hZo),e(Md,pZo),e(Md,cX),e(cX,uZo),e(Md,_Zo),e(vt,bZo),M(VF,vt,null),e(Wo,vZo),e(Wo,ho),M(Wy,ho,null),e(ho,FZo),e(ho,oue),e(oue,TZo),e(ho,MZo),e(ho,Xa),e(Xa,EZo),e(Xa,rue),e(rue,CZo),e(Xa,wZo),e(Xa,tue),e(tue,AZo),e(Xa,yZo),e(Xa,aue),e(aue,LZo),e(Xa,xZo),e(ho,$Zo),e(ho,Hy),e(Hy,XF),e(XF,nue),e(nue,kZo),e(XF,SZo),e(XF,fX),e(fX,RZo),e(XF,BZo),e(Hy,PZo),e(Hy,zF),e(zF,sue),e(sue,IZo),e(zF,qZo),e(zF,mX),e(mX,NZo),e(zF,jZo),e(ho,DZo),e(ho,QF),e(QF,GZo),e(QF,lue),e(lue,OZo),e(QF,VZo),e(QF,iue),e(iue,XZo),e(ho,zZo),M(WF,ho,null),b(f,qPe,_),b(f,Ed,_),e(Ed,HF),e(HF,due),M(Uy,due,null),e(Ed,QZo),e(Ed,cue),e(cue,WZo),b(f,NPe,_),b(f,Ho,_),M(Jy,Ho,null),e(Ho,HZo),e(Ho,Cd),e(Cd,UZo),e(Cd,gX),e(gX,JZo),e(Cd,YZo),e(Cd,hX),e(hX,KZo),e(Cd,ZZo),e(Ho,eer),e(Ho,Yy),e(Yy,oer),e(Yy,fue),e(fue,rer),e(Yy,ter),e(Ho,aer),e(Ho,Ft),M(Ky,Ft,null),e(Ft,ner),e(Ft,mue),e(mue,ser),e(Ft,ler),e(Ft,wd),e(wd,ier),e(wd,gue),e(gue,der),e(wd,cer),e(wd,pX),e(pX,fer),e(wd,mer),e(Ft,ger),M(UF,Ft,null),e(Ho,her),e(Ho,po),M(Zy,po,null),e(po,per),e(po,hue),e(hue,uer),e(po,_er),e(po,za),e(za,ber),e(za,pue),e(pue,ver),e(za,Fer),e(za,uue),e(uue,Ter),e(za,Mer),e(za,_ue),e(_ue,Eer),e(za,Cer),e(po,wer),e(po,bue),e(bue,JF),e(JF,vue),e(vue,Aer),e(JF,yer),e(JF,uX),e(uX,Ler),e(JF,xer),e(po,$er),e(po,YF),e(YF,ker),e(YF,Fue),e(Fue,Ser),e(YF,Rer),e(YF,Tue),e(Tue,Ber),e(po,Per),M(KF,po,null),b(f,jPe,_),b(f,Ad,_),e(Ad,ZF),e(ZF,Mue),M(eL,Mue,null),e(Ad,Ier),e(Ad,Eue),e(Eue,qer),b(f,DPe,_),b(f,Uo,_),M(oL,Uo,null),e(Uo,Ner),e(Uo,yd),e(yd,jer),e(yd,_X),e(_X,Der),e(yd,Ger),e(yd,bX),e(bX,Oer),e(yd,Ver),e(Uo,Xer),e(Uo,rL),e(rL,zer),e(rL,Cue),e(Cue,Qer),e(rL,Wer),e(Uo,Her),e(Uo,Tt),M(tL,Tt,null),e(Tt,Uer),e(Tt,wue),e(wue,Jer),e(Tt,Yer),e(Tt,Ld),e(Ld,Ker),e(Ld,Aue),e(Aue,Zer),e(Ld,eor),e(Ld,vX),e(vX,oor),e(Ld,ror),e(Tt,tor),M(e6,Tt,null),e(Uo,aor),e(Uo,uo),M(aL,uo,null),e(uo,nor),e(uo,yue),e(yue,sor),e(uo,lor),e(uo,Qa),e(Qa,ior),e(Qa,Lue),e(Lue,dor),e(Qa,cor),e(Qa,xue),e(xue,mor),e(Qa,gor),e(Qa,$ue),e($ue,hor),e(Qa,por),e(uo,uor),e(uo,Wa),e(Wa,o6),e(o6,kue),e(kue,_or),e(o6,bor),e(o6,FX),e(FX,vor),e(o6,For),e(Wa,Tor),e(Wa,r6),e(r6,Sue),e(Sue,Mor),e(r6,Eor),e(r6,TX),e(TX,Cor),e(r6,wor),e(Wa,Aor),e(Wa,t6),e(t6,Rue),e(Rue,yor),e(t6,Lor),e(t6,MX),e(MX,xor),e(t6,$or),e(Wa,kor),e(Wa,a6),e(a6,Bue),e(Bue,Sor),e(a6,Ror),e(a6,EX),e(EX,Bor),e(a6,Por),e(uo,Ior),e(uo,n6),e(n6,qor),e(n6,Pue),e(Pue,Nor),e(n6,jor),e(n6,Iue),e(Iue,Dor),e(uo,Gor),M(s6,uo,null),b(f,GPe,_),b(f,xd,_),e(xd,l6),e(l6,que),M(nL,que,null),e(xd,Oor),e(xd,Nue),e(Nue,Vor),b(f,OPe,_),b(f,Jo,_),M(sL,Jo,null),e(Jo,Xor),e(Jo,$d),e($d,zor),e($d,CX),e(CX,Qor),e($d,Wor),e($d,wX),e(wX,Hor),e($d,Uor),e(Jo,Jor),e(Jo,lL),e(lL,Yor),e(lL,jue),e(jue,Kor),e(lL,Zor),e(Jo,err),e(Jo,Mt),M(iL,Mt,null),e(Mt,orr),e(Mt,Due),e(Due,rrr),e(Mt,trr),e(Mt,kd),e(kd,arr),e(kd,Gue),e(Gue,nrr),e(kd,srr),e(kd,AX),e(AX,lrr),e(kd,irr),e(Mt,drr),M(i6,Mt,null),e(Jo,crr),e(Jo,_o),M(dL,_o,null),e(_o,frr),e(_o,Oue),e(Oue,mrr),e(_o,grr),e(_o,Ha),e(Ha,hrr),e(Ha,Vue),e(Vue,prr),e(Ha,urr),e(Ha,Xue),e(Xue,_rr),e(Ha,brr),e(Ha,zue),e(zue,vrr),e(Ha,Frr),e(_o,Trr),e(_o,Que),e(Que,d6),e(d6,Wue),e(Wue,Mrr),e(d6,Err),e(d6,yX),e(yX,Crr),e(d6,wrr),e(_o,Arr),e(_o,c6),e(c6,yrr),e(c6,Hue),e(Hue,Lrr),e(c6,xrr),e(c6,Uue),e(Uue,$rr),e(_o,krr),M(f6,_o,null),b(f,VPe,_),b(f,Sd,_),e(Sd,m6),e(m6,Jue),M(cL,Jue,null),e(Sd,Srr),e(Sd,Yue),e(Yue,Rrr),b(f,XPe,_),b(f,Yo,_),M(fL,Yo,null),e(Yo,Brr),e(Yo,Rd),e(Rd,Prr),e(Rd,LX),e(LX,Irr),e(Rd,qrr),e(Rd,xX),e(xX,Nrr),e(Rd,jrr),e(Yo,Drr),e(Yo,mL),e(mL,Grr),e(mL,Kue),e(Kue,Orr),e(mL,Vrr),e(Yo,Xrr),e(Yo,Et),M(gL,Et,null),e(Et,zrr),e(Et,Zue),e(Zue,Qrr),e(Et,Wrr),e(Et,Bd),e(Bd,Hrr),e(Bd,e_e),e(e_e,Urr),e(Bd,Jrr),e(Bd,$X),e($X,Yrr),e(Bd,Krr),e(Et,Zrr),M(g6,Et,null),e(Yo,etr),e(Yo,Cr),M(hL,Cr,null),e(Cr,otr),e(Cr,o_e),e(o_e,rtr),e(Cr,ttr),e(Cr,Ua),e(Ua,atr),e(Ua,r_e),e(r_e,ntr),e(Ua,str),e(Ua,t_e),e(t_e,ltr),e(Ua,itr),e(Ua,a_e),e(a_e,dtr),e(Ua,ctr),e(Cr,ftr),e(Cr,j),e(j,h6),e(h6,n_e),e(n_e,mtr),e(h6,gtr),e(h6,kX),e(kX,htr),e(h6,ptr),e(j,utr),e(j,p6),e(p6,s_e),e(s_e,_tr),e(p6,btr),e(p6,SX),e(SX,vtr),e(p6,Ftr),e(j,Ttr),e(j,u6),e(u6,l_e),e(l_e,Mtr),e(u6,Etr),e(u6,RX),e(RX,Ctr),e(u6,wtr),e(j,Atr),e(j,_6),e(_6,i_e),e(i_e,ytr),e(_6,Ltr),e(_6,BX),e(BX,xtr),e(_6,$tr),e(j,ktr),e(j,b6),e(b6,d_e),e(d_e,Str),e(b6,Rtr),e(b6,PX),e(PX,Btr),e(b6,Ptr),e(j,Itr),e(j,v6),e(v6,c_e),e(c_e,qtr),e(v6,Ntr),e(v6,IX),e(IX,jtr),e(v6,Dtr),e(j,Gtr),e(j,F6),e(F6,f_e),e(f_e,Otr),e(F6,Vtr),e(F6,qX),e(qX,Xtr),e(F6,ztr),e(j,Qtr),e(j,T6),e(T6,m_e),e(m_e,Wtr),e(T6,Htr),e(T6,NX),e(NX,Utr),e(T6,Jtr),e(j,Ytr),e(j,M6),e(M6,g_e),e(g_e,Ktr),e(M6,Ztr),e(M6,jX),e(jX,ear),e(M6,oar),e(j,rar),e(j,E6),e(E6,h_e),e(h_e,tar),e(E6,aar),e(E6,DX),e(DX,nar),e(E6,sar),e(j,lar),e(j,C6),e(C6,p_e),e(p_e,iar),e(C6,dar),e(C6,GX),e(GX,car),e(C6,far),e(j,mar),e(j,w6),e(w6,u_e),e(u_e,gar),e(w6,har),e(w6,OX),e(OX,par),e(w6,uar),e(j,_ar),e(j,A6),e(A6,__e),e(__e,bar),e(A6,Far),e(A6,VX),e(VX,Tar),e(A6,Mar),e(j,Ear),e(j,y6),e(y6,b_e),e(b_e,Car),e(y6,war),e(y6,XX),e(XX,Aar),e(y6,yar),e(j,Lar),e(j,L6),e(L6,v_e),e(v_e,xar),e(L6,$ar),e(L6,zX),e(zX,kar),e(L6,Sar),e(j,Rar),e(j,x6),e(x6,F_e),e(F_e,Bar),e(x6,Par),e(x6,QX),e(QX,Iar),e(x6,qar),e(j,Nar),e(j,ks),e(ks,T_e),e(T_e,jar),e(ks,Dar),e(ks,WX),e(WX,Gar),e(ks,Oar),e(ks,HX),e(HX,Var),e(ks,Xar),e(j,zar),e(j,$6),e($6,M_e),e(M_e,Qar),e($6,War),e($6,UX),e(UX,Har),e($6,Uar),e(j,Jar),e(j,k6),e(k6,E_e),e(E_e,Yar),e(k6,Kar),e(k6,JX),e(JX,Zar),e(k6,enr),e(j,onr),e(j,S6),e(S6,C_e),e(C_e,rnr),e(S6,tnr),e(S6,YX),e(YX,anr),e(S6,nnr),e(j,snr),e(j,R6),e(R6,w_e),e(w_e,lnr),e(R6,inr),e(R6,KX),e(KX,dnr),e(R6,cnr),e(j,fnr),e(j,B6),e(B6,A_e),e(A_e,mnr),e(B6,gnr),e(B6,ZX),e(ZX,hnr),e(B6,pnr),e(j,unr),e(j,P6),e(P6,y_e),e(y_e,_nr),e(P6,bnr),e(P6,ez),e(ez,vnr),e(P6,Fnr),e(j,Tnr),e(j,I6),e(I6,L_e),e(L_e,Mnr),e(I6,Enr),e(I6,oz),e(oz,Cnr),e(I6,wnr),e(j,Anr),e(j,q6),e(q6,x_e),e(x_e,ynr),e(q6,Lnr),e(q6,rz),e(rz,xnr),e(q6,$nr),e(j,knr),e(j,N6),e(N6,$_e),e($_e,Snr),e(N6,Rnr),e(N6,tz),e(tz,Bnr),e(N6,Pnr),e(j,Inr),e(j,j6),e(j6,k_e),e(k_e,qnr),e(j6,Nnr),e(j6,az),e(az,jnr),e(j6,Dnr),e(j,Gnr),e(j,D6),e(D6,S_e),e(S_e,Onr),e(D6,Vnr),e(D6,nz),e(nz,Xnr),e(D6,znr),e(j,Qnr),e(j,G6),e(G6,R_e),e(R_e,Wnr),e(G6,Hnr),e(G6,sz),e(sz,Unr),e(G6,Jnr),e(j,Ynr),e(j,O6),e(O6,B_e),e(B_e,Knr),e(O6,Znr),e(O6,lz),e(lz,esr),e(O6,osr),e(j,rsr),e(j,V6),e(V6,P_e),e(P_e,tsr),e(V6,asr),e(V6,iz),e(iz,nsr),e(V6,ssr),e(j,lsr),e(j,X6),e(X6,I_e),e(I_e,isr),e(X6,dsr),e(X6,dz),e(dz,csr),e(X6,fsr),e(j,msr),e(j,z6),e(z6,q_e),e(q_e,gsr),e(z6,hsr),e(z6,cz),e(cz,psr),e(z6,usr),e(j,_sr),e(j,Q6),e(Q6,N_e),e(N_e,bsr),e(Q6,vsr),e(Q6,fz),e(fz,Fsr),e(Q6,Tsr),e(j,Msr),e(j,W6),e(W6,j_e),e(j_e,Esr),e(W6,Csr),e(W6,mz),e(mz,wsr),e(W6,Asr),e(j,ysr),e(j,H6),e(H6,D_e),e(D_e,Lsr),e(H6,xsr),e(H6,gz),e(gz,$sr),e(H6,ksr),e(j,Ssr),e(j,U6),e(U6,G_e),e(G_e,Rsr),e(U6,Bsr),e(U6,hz),e(hz,Psr),e(U6,Isr),e(j,qsr),e(j,J6),e(J6,O_e),e(O_e,Nsr),e(J6,jsr),e(J6,pz),e(pz,Dsr),e(J6,Gsr),e(j,Osr),e(j,Y6),e(Y6,V_e),e(V_e,Vsr),e(Y6,Xsr),e(Y6,uz),e(uz,zsr),e(Y6,Qsr),e(j,Wsr),e(j,K6),e(K6,X_e),e(X_e,Hsr),e(K6,Usr),e(K6,_z),e(_z,Jsr),e(K6,Ysr),e(j,Ksr),e(j,Z6),e(Z6,z_e),e(z_e,Zsr),e(Z6,elr),e(Z6,bz),e(bz,olr),e(Z6,rlr),e(j,tlr),e(j,eT),e(eT,Q_e),e(Q_e,alr),e(eT,nlr),e(eT,vz),e(vz,slr),e(eT,llr),e(j,ilr),e(j,oT),e(oT,W_e),e(W_e,dlr),e(oT,clr),e(oT,Fz),e(Fz,flr),e(oT,mlr),e(j,glr),e(j,rT),e(rT,H_e),e(H_e,hlr),e(rT,plr),e(rT,Tz),e(Tz,ulr),e(rT,_lr),e(Cr,blr),M(tT,Cr,null),b(f,zPe,_),b(f,Pd,_),e(Pd,aT),e(aT,U_e),M(pL,U_e,null),e(Pd,vlr),e(Pd,J_e),e(J_e,Flr),b(f,QPe,_),b(f,Ko,_),M(uL,Ko,null),e(Ko,Tlr),e(Ko,Id),e(Id,Mlr),e(Id,Mz),e(Mz,Elr),e(Id,Clr),e(Id,Ez),e(Ez,wlr),e(Id,Alr),e(Ko,ylr),e(Ko,_L),e(_L,Llr),e(_L,Y_e),e(Y_e,xlr),e(_L,$lr),e(Ko,klr),e(Ko,Ct),M(bL,Ct,null),e(Ct,Slr),e(Ct,K_e),e(K_e,Rlr),e(Ct,Blr),e(Ct,qd),e(qd,Plr),e(qd,Z_e),e(Z_e,Ilr),e(qd,qlr),e(qd,Cz),e(Cz,Nlr),e(qd,jlr),e(Ct,Dlr),M(nT,Ct,null),e(Ko,Glr),e(Ko,wr),M(vL,wr,null),e(wr,Olr),e(wr,e0e),e(e0e,Vlr),e(wr,Xlr),e(wr,Ja),e(Ja,zlr),e(Ja,o0e),e(o0e,Qlr),e(Ja,Wlr),e(Ja,r0e),e(r0e,Hlr),e(Ja,Ulr),e(Ja,t0e),e(t0e,Jlr),e(Ja,Ylr),e(wr,Klr),e(wr,se),e(se,sT),e(sT,a0e),e(a0e,Zlr),e(sT,eir),e(sT,wz),e(wz,oir),e(sT,rir),e(se,tir),e(se,lT),e(lT,n0e),e(n0e,air),e(lT,nir),e(lT,Az),e(Az,sir),e(lT,lir),e(se,iir),e(se,iT),e(iT,s0e),e(s0e,dir),e(iT,cir),e(iT,yz),e(yz,fir),e(iT,mir),e(se,gir),e(se,dT),e(dT,l0e),e(l0e,hir),e(dT,pir),e(dT,Lz),e(Lz,uir),e(dT,_ir),e(se,bir),e(se,cT),e(cT,i0e),e(i0e,vir),e(cT,Fir),e(cT,xz),e(xz,Tir),e(cT,Mir),e(se,Eir),e(se,fT),e(fT,d0e),e(d0e,Cir),e(fT,wir),e(fT,$z),e($z,Air),e(fT,yir),e(se,Lir),e(se,mT),e(mT,c0e),e(c0e,xir),e(mT,$ir),e(mT,kz),e(kz,kir),e(mT,Sir),e(se,Rir),e(se,gT),e(gT,f0e),e(f0e,Bir),e(gT,Pir),e(gT,Sz),e(Sz,Iir),e(gT,qir),e(se,Nir),e(se,hT),e(hT,m0e),e(m0e,jir),e(hT,Dir),e(hT,Rz),e(Rz,Gir),e(hT,Oir),e(se,Vir),e(se,pT),e(pT,g0e),e(g0e,Xir),e(pT,zir),e(pT,Bz),e(Bz,Qir),e(pT,Wir),e(se,Hir),e(se,uT),e(uT,h0e),e(h0e,Uir),e(uT,Jir),e(uT,Pz),e(Pz,Yir),e(uT,Kir),e(se,Zir),e(se,_T),e(_T,p0e),e(p0e,edr),e(_T,odr),e(_T,Iz),e(Iz,rdr),e(_T,tdr),e(se,adr),e(se,bT),e(bT,u0e),e(u0e,ndr),e(bT,sdr),e(bT,qz),e(qz,ldr),e(bT,idr),e(se,ddr),e(se,vT),e(vT,_0e),e(_0e,cdr),e(vT,fdr),e(vT,Nz),e(Nz,mdr),e(vT,gdr),e(se,hdr),e(se,FT),e(FT,b0e),e(b0e,pdr),e(FT,udr),e(FT,jz),e(jz,_dr),e(FT,bdr),e(se,vdr),e(se,TT),e(TT,v0e),e(v0e,Fdr),e(TT,Tdr),e(TT,Dz),e(Dz,Mdr),e(TT,Edr),e(se,Cdr),e(se,MT),e(MT,F0e),e(F0e,wdr),e(MT,Adr),e(MT,Gz),e(Gz,ydr),e(MT,Ldr),e(se,xdr),e(se,ET),e(ET,T0e),e(T0e,$dr),e(ET,kdr),e(ET,Oz),e(Oz,Sdr),e(ET,Rdr),e(se,Bdr),e(se,CT),e(CT,M0e),e(M0e,Pdr),e(CT,Idr),e(CT,Vz),e(Vz,qdr),e(CT,Ndr),e(se,jdr),e(se,wT),e(wT,E0e),e(E0e,Ddr),e(wT,Gdr),e(wT,Xz),e(Xz,Odr),e(wT,Vdr),e(se,Xdr),e(se,AT),e(AT,C0e),e(C0e,zdr),e(AT,Qdr),e(AT,zz),e(zz,Wdr),e(AT,Hdr),e(se,Udr),e(se,yT),e(yT,w0e),e(w0e,Jdr),e(yT,Ydr),e(yT,Qz),e(Qz,Kdr),e(yT,Zdr),e(se,ecr),e(se,LT),e(LT,A0e),e(A0e,ocr),e(LT,rcr),e(LT,Wz),e(Wz,tcr),e(LT,acr),e(wr,ncr),M(xT,wr,null),b(f,WPe,_),b(f,Nd,_),e(Nd,$T),e($T,y0e),M(FL,y0e,null),e(Nd,scr),e(Nd,L0e),e(L0e,lcr),b(f,HPe,_),b(f,Zo,_),M(TL,Zo,null),e(Zo,icr),e(Zo,jd),e(jd,dcr),e(jd,Hz),e(Hz,ccr),e(jd,fcr),e(jd,Uz),e(Uz,mcr),e(jd,gcr),e(Zo,hcr),e(Zo,ML),e(ML,pcr),e(ML,x0e),e(x0e,ucr),e(ML,_cr),e(Zo,bcr),e(Zo,wt),M(EL,wt,null),e(wt,vcr),e(wt,$0e),e($0e,Fcr),e(wt,Tcr),e(wt,Dd),e(Dd,Mcr),e(Dd,k0e),e(k0e,Ecr),e(Dd,Ccr),e(Dd,Jz),e(Jz,wcr),e(Dd,Acr),e(wt,ycr),M(kT,wt,null),e(Zo,Lcr),e(Zo,Ar),M(CL,Ar,null),e(Ar,xcr),e(Ar,S0e),e(S0e,$cr),e(Ar,kcr),e(Ar,Ya),e(Ya,Scr),e(Ya,R0e),e(R0e,Rcr),e(Ya,Bcr),e(Ya,B0e),e(B0e,Pcr),e(Ya,Icr),e(Ya,P0e),e(P0e,qcr),e(Ya,Ncr),e(Ar,jcr),e(Ar,Te),e(Te,ST),e(ST,I0e),e(I0e,Dcr),e(ST,Gcr),e(ST,Yz),e(Yz,Ocr),e(ST,Vcr),e(Te,Xcr),e(Te,RT),e(RT,q0e),e(q0e,zcr),e(RT,Qcr),e(RT,Kz),e(Kz,Wcr),e(RT,Hcr),e(Te,Ucr),e(Te,BT),e(BT,N0e),e(N0e,Jcr),e(BT,Ycr),e(BT,Zz),e(Zz,Kcr),e(BT,Zcr),e(Te,efr),e(Te,PT),e(PT,j0e),e(j0e,ofr),e(PT,rfr),e(PT,eQ),e(eQ,tfr),e(PT,afr),e(Te,nfr),e(Te,IT),e(IT,D0e),e(D0e,sfr),e(IT,lfr),e(IT,oQ),e(oQ,ifr),e(IT,dfr),e(Te,cfr),e(Te,qT),e(qT,G0e),e(G0e,ffr),e(qT,mfr),e(qT,rQ),e(rQ,gfr),e(qT,hfr),e(Te,pfr),e(Te,NT),e(NT,O0e),e(O0e,ufr),e(NT,_fr),e(NT,tQ),e(tQ,bfr),e(NT,vfr),e(Te,Ffr),e(Te,jT),e(jT,V0e),e(V0e,Tfr),e(jT,Mfr),e(jT,aQ),e(aQ,Efr),e(jT,Cfr),e(Te,wfr),e(Te,DT),e(DT,X0e),e(X0e,Afr),e(DT,yfr),e(DT,nQ),e(nQ,Lfr),e(DT,xfr),e(Te,$fr),e(Te,GT),e(GT,z0e),e(z0e,kfr),e(GT,Sfr),e(GT,sQ),e(sQ,Rfr),e(GT,Bfr),e(Te,Pfr),e(Te,OT),e(OT,Q0e),e(Q0e,Ifr),e(OT,qfr),e(OT,lQ),e(lQ,Nfr),e(OT,jfr),e(Te,Dfr),e(Te,VT),e(VT,W0e),e(W0e,Gfr),e(VT,Ofr),e(VT,iQ),e(iQ,Vfr),e(VT,Xfr),e(Ar,zfr),M(XT,Ar,null),b(f,UPe,_),b(f,Gd,_),e(Gd,zT),e(zT,H0e),M(wL,H0e,null),e(Gd,Qfr),e(Gd,U0e),e(U0e,Wfr),b(f,JPe,_),b(f,er,_),M(AL,er,null),e(er,Hfr),e(er,Od),e(Od,Ufr),e(Od,dQ),e(dQ,Jfr),e(Od,Yfr),e(Od,cQ),e(cQ,Kfr),e(Od,Zfr),e(er,emr),e(er,yL),e(yL,omr),e(yL,J0e),e(J0e,rmr),e(yL,tmr),e(er,amr),e(er,At),M(LL,At,null),e(At,nmr),e(At,Y0e),e(Y0e,smr),e(At,lmr),e(At,Vd),e(Vd,imr),e(Vd,K0e),e(K0e,dmr),e(Vd,cmr),e(Vd,fQ),e(fQ,fmr),e(Vd,mmr),e(At,gmr),M(QT,At,null),e(er,hmr),e(er,yr),M(xL,yr,null),e(yr,pmr),e(yr,Z0e),e(Z0e,umr),e(yr,_mr),e(yr,Ka),e(Ka,bmr),e(Ka,e1e),e(e1e,vmr),e(Ka,Fmr),e(Ka,o1e),e(o1e,Tmr),e(Ka,Mmr),e(Ka,r1e),e(r1e,Emr),e(Ka,Cmr),e(yr,wmr),e(yr,$L),e($L,WT),e(WT,t1e),e(t1e,Amr),e(WT,ymr),e(WT,mQ),e(mQ,Lmr),e(WT,xmr),e($L,$mr),e($L,HT),e(HT,a1e),e(a1e,kmr),e(HT,Smr),e(HT,gQ),e(gQ,Rmr),e(HT,Bmr),e(yr,Pmr),M(UT,yr,null),b(f,YPe,_),b(f,Xd,_),e(Xd,JT),e(JT,n1e),M(kL,n1e,null),e(Xd,Imr),e(Xd,s1e),e(s1e,qmr),b(f,KPe,_),b(f,or,_),M(SL,or,null),e(or,Nmr),e(or,zd),e(zd,jmr),e(zd,hQ),e(hQ,Dmr),e(zd,Gmr),e(zd,pQ),e(pQ,Omr),e(zd,Vmr),e(or,Xmr),e(or,RL),e(RL,zmr),e(RL,l1e),e(l1e,Qmr),e(RL,Wmr),e(or,Hmr),e(or,yt),M(BL,yt,null),e(yt,Umr),e(yt,i1e),e(i1e,Jmr),e(yt,Ymr),e(yt,Qd),e(Qd,Kmr),e(Qd,d1e),e(d1e,Zmr),e(Qd,egr),e(Qd,uQ),e(uQ,ogr),e(Qd,rgr),e(yt,tgr),M(YT,yt,null),e(or,agr),e(or,Lr),M(PL,Lr,null),e(Lr,ngr),e(Lr,c1e),e(c1e,sgr),e(Lr,lgr),e(Lr,Za),e(Za,igr),e(Za,f1e),e(f1e,dgr),e(Za,cgr),e(Za,m1e),e(m1e,fgr),e(Za,mgr),e(Za,g1e),e(g1e,ggr),e(Za,hgr),e(Lr,pgr),e(Lr,ie),e(ie,KT),e(KT,h1e),e(h1e,ugr),e(KT,_gr),e(KT,_Q),e(_Q,bgr),e(KT,vgr),e(ie,Fgr),e(ie,ZT),e(ZT,p1e),e(p1e,Tgr),e(ZT,Mgr),e(ZT,bQ),e(bQ,Egr),e(ZT,Cgr),e(ie,wgr),e(ie,e7),e(e7,u1e),e(u1e,Agr),e(e7,ygr),e(e7,vQ),e(vQ,Lgr),e(e7,xgr),e(ie,$gr),e(ie,o7),e(o7,_1e),e(_1e,kgr),e(o7,Sgr),e(o7,FQ),e(FQ,Rgr),e(o7,Bgr),e(ie,Pgr),e(ie,r7),e(r7,b1e),e(b1e,Igr),e(r7,qgr),e(r7,TQ),e(TQ,Ngr),e(r7,jgr),e(ie,Dgr),e(ie,t7),e(t7,v1e),e(v1e,Ggr),e(t7,Ogr),e(t7,MQ),e(MQ,Vgr),e(t7,Xgr),e(ie,zgr),e(ie,a7),e(a7,F1e),e(F1e,Qgr),e(a7,Wgr),e(a7,EQ),e(EQ,Hgr),e(a7,Ugr),e(ie,Jgr),e(ie,n7),e(n7,T1e),e(T1e,Ygr),e(n7,Kgr),e(n7,CQ),e(CQ,Zgr),e(n7,ehr),e(ie,ohr),e(ie,s7),e(s7,M1e),e(M1e,rhr),e(s7,thr),e(s7,wQ),e(wQ,ahr),e(s7,nhr),e(ie,shr),e(ie,l7),e(l7,E1e),e(E1e,lhr),e(l7,ihr),e(l7,AQ),e(AQ,dhr),e(l7,chr),e(ie,fhr),e(ie,i7),e(i7,C1e),e(C1e,mhr),e(i7,ghr),e(i7,yQ),e(yQ,hhr),e(i7,phr),e(ie,uhr),e(ie,d7),e(d7,w1e),e(w1e,_hr),e(d7,bhr),e(d7,LQ),e(LQ,vhr),e(d7,Fhr),e(ie,Thr),e(ie,c7),e(c7,A1e),e(A1e,Mhr),e(c7,Ehr),e(c7,xQ),e(xQ,Chr),e(c7,whr),e(ie,Ahr),e(ie,f7),e(f7,y1e),e(y1e,yhr),e(f7,Lhr),e(f7,$Q),e($Q,xhr),e(f7,$hr),e(ie,khr),e(ie,m7),e(m7,L1e),e(L1e,Shr),e(m7,Rhr),e(m7,kQ),e(kQ,Bhr),e(m7,Phr),e(ie,Ihr),e(ie,g7),e(g7,x1e),e(x1e,qhr),e(g7,Nhr),e(g7,SQ),e(SQ,jhr),e(g7,Dhr),e(ie,Ghr),e(ie,h7),e(h7,$1e),e($1e,Ohr),e(h7,Vhr),e(h7,RQ),e(RQ,Xhr),e(h7,zhr),e(ie,Qhr),e(ie,p7),e(p7,k1e),e(k1e,Whr),e(p7,Hhr),e(p7,BQ),e(BQ,Uhr),e(p7,Jhr),e(ie,Yhr),e(ie,u7),e(u7,S1e),e(S1e,Khr),e(u7,Zhr),e(u7,PQ),e(PQ,epr),e(u7,opr),e(ie,rpr),e(ie,_7),e(_7,R1e),e(R1e,tpr),e(_7,apr),e(_7,IQ),e(IQ,npr),e(_7,spr),e(Lr,lpr),M(b7,Lr,null),b(f,ZPe,_),b(f,Wd,_),e(Wd,v7),e(v7,B1e),M(IL,B1e,null),e(Wd,ipr),e(Wd,P1e),e(P1e,dpr),b(f,eIe,_),b(f,rr,_),M(qL,rr,null),e(rr,cpr),e(rr,Hd),e(Hd,fpr),e(Hd,qQ),e(qQ,mpr),e(Hd,gpr),e(Hd,NQ),e(NQ,hpr),e(Hd,ppr),e(rr,upr),e(rr,NL),e(NL,_pr),e(NL,I1e),e(I1e,bpr),e(NL,vpr),e(rr,Fpr),e(rr,Lt),M(jL,Lt,null),e(Lt,Tpr),e(Lt,q1e),e(q1e,Mpr),e(Lt,Epr),e(Lt,Ud),e(Ud,Cpr),e(Ud,N1e),e(N1e,wpr),e(Ud,Apr),e(Ud,jQ),e(jQ,ypr),e(Ud,Lpr),e(Lt,xpr),M(F7,Lt,null),e(rr,$pr),e(rr,xr),M(DL,xr,null),e(xr,kpr),e(xr,j1e),e(j1e,Spr),e(xr,Rpr),e(xr,en),e(en,Bpr),e(en,D1e),e(D1e,Ppr),e(en,Ipr),e(en,G1e),e(G1e,qpr),e(en,Npr),e(en,O1e),e(O1e,jpr),e(en,Dpr),e(xr,Gpr),e(xr,ye),e(ye,T7),e(T7,V1e),e(V1e,Opr),e(T7,Vpr),e(T7,DQ),e(DQ,Xpr),e(T7,zpr),e(ye,Qpr),e(ye,M7),e(M7,X1e),e(X1e,Wpr),e(M7,Hpr),e(M7,GQ),e(GQ,Upr),e(M7,Jpr),e(ye,Ypr),e(ye,E7),e(E7,z1e),e(z1e,Kpr),e(E7,Zpr),e(E7,OQ),e(OQ,eur),e(E7,our),e(ye,rur),e(ye,C7),e(C7,Q1e),e(Q1e,tur),e(C7,aur),e(C7,VQ),e(VQ,nur),e(C7,sur),e(ye,lur),e(ye,w7),e(w7,W1e),e(W1e,iur),e(w7,dur),e(w7,XQ),e(XQ,cur),e(w7,fur),e(ye,mur),e(ye,A7),e(A7,H1e),e(H1e,gur),e(A7,hur),e(A7,zQ),e(zQ,pur),e(A7,uur),e(ye,_ur),e(ye,y7),e(y7,U1e),e(U1e,bur),e(y7,vur),e(y7,QQ),e(QQ,Fur),e(y7,Tur),e(ye,Mur),e(ye,L7),e(L7,J1e),e(J1e,Eur),e(L7,Cur),e(L7,WQ),e(WQ,wur),e(L7,Aur),e(ye,yur),e(ye,x7),e(x7,Y1e),e(Y1e,Lur),e(x7,xur),e(x7,HQ),e(HQ,$ur),e(x7,kur),e(ye,Sur),e(ye,$7),e($7,K1e),e(K1e,Rur),e($7,Bur),e($7,UQ),e(UQ,Pur),e($7,Iur),e(xr,qur),M(k7,xr,null),b(f,oIe,_),b(f,Jd,_),e(Jd,S7),e(S7,Z1e),M(GL,Z1e,null),e(Jd,Nur),e(Jd,ebe),e(ebe,jur),b(f,rIe,_),b(f,tr,_),M(OL,tr,null),e(tr,Dur),e(tr,Yd),e(Yd,Gur),e(Yd,JQ),e(JQ,Our),e(Yd,Vur),e(Yd,YQ),e(YQ,Xur),e(Yd,zur),e(tr,Qur),e(tr,VL),e(VL,Wur),e(VL,obe),e(obe,Hur),e(VL,Uur),e(tr,Jur),e(tr,xt),M(XL,xt,null),e(xt,Yur),e(xt,rbe),e(rbe,Kur),e(xt,Zur),e(xt,Kd),e(Kd,e_r),e(Kd,tbe),e(tbe,o_r),e(Kd,r_r),e(Kd,KQ),e(KQ,t_r),e(Kd,a_r),e(xt,n_r),M(R7,xt,null),e(tr,s_r),e(tr,$r),M(zL,$r,null),e($r,l_r),e($r,abe),e(abe,i_r),e($r,d_r),e($r,on),e(on,c_r),e(on,nbe),e(nbe,f_r),e(on,m_r),e(on,sbe),e(sbe,g_r),e(on,h_r),e(on,lbe),e(lbe,p_r),e(on,u_r),e($r,__r),e($r,Z),e(Z,B7),e(B7,ibe),e(ibe,b_r),e(B7,v_r),e(B7,ZQ),e(ZQ,F_r),e(B7,T_r),e(Z,M_r),e(Z,P7),e(P7,dbe),e(dbe,E_r),e(P7,C_r),e(P7,eW),e(eW,w_r),e(P7,A_r),e(Z,y_r),e(Z,I7),e(I7,cbe),e(cbe,L_r),e(I7,x_r),e(I7,oW),e(oW,$_r),e(I7,k_r),e(Z,S_r),e(Z,q7),e(q7,fbe),e(fbe,R_r),e(q7,B_r),e(q7,rW),e(rW,P_r),e(q7,I_r),e(Z,q_r),e(Z,N7),e(N7,mbe),e(mbe,N_r),e(N7,j_r),e(N7,tW),e(tW,D_r),e(N7,G_r),e(Z,O_r),e(Z,j7),e(j7,gbe),e(gbe,V_r),e(j7,X_r),e(j7,aW),e(aW,z_r),e(j7,Q_r),e(Z,W_r),e(Z,D7),e(D7,hbe),e(hbe,H_r),e(D7,U_r),e(D7,nW),e(nW,J_r),e(D7,Y_r),e(Z,K_r),e(Z,G7),e(G7,pbe),e(pbe,Z_r),e(G7,e0r),e(G7,sW),e(sW,o0r),e(G7,r0r),e(Z,t0r),e(Z,O7),e(O7,ube),e(ube,a0r),e(O7,n0r),e(O7,lW),e(lW,s0r),e(O7,l0r),e(Z,i0r),e(Z,V7),e(V7,_be),e(_be,d0r),e(V7,c0r),e(V7,iW),e(iW,f0r),e(V7,m0r),e(Z,g0r),e(Z,X7),e(X7,bbe),e(bbe,h0r),e(X7,p0r),e(X7,dW),e(dW,u0r),e(X7,_0r),e(Z,b0r),e(Z,z7),e(z7,vbe),e(vbe,v0r),e(z7,F0r),e(z7,cW),e(cW,T0r),e(z7,M0r),e(Z,E0r),e(Z,Q7),e(Q7,Fbe),e(Fbe,C0r),e(Q7,w0r),e(Q7,fW),e(fW,A0r),e(Q7,y0r),e(Z,L0r),e(Z,W7),e(W7,Tbe),e(Tbe,x0r),e(W7,$0r),e(W7,mW),e(mW,k0r),e(W7,S0r),e(Z,R0r),e(Z,H7),e(H7,Mbe),e(Mbe,B0r),e(H7,P0r),e(H7,gW),e(gW,I0r),e(H7,q0r),e(Z,N0r),e(Z,U7),e(U7,Ebe),e(Ebe,j0r),e(U7,D0r),e(U7,hW),e(hW,G0r),e(U7,O0r),e(Z,V0r),e(Z,J7),e(J7,Cbe),e(Cbe,X0r),e(J7,z0r),e(J7,pW),e(pW,Q0r),e(J7,W0r),e(Z,H0r),e(Z,Y7),e(Y7,wbe),e(wbe,U0r),e(Y7,J0r),e(Y7,uW),e(uW,Y0r),e(Y7,K0r),e(Z,Z0r),e(Z,K7),e(K7,Abe),e(Abe,e1r),e(K7,o1r),e(K7,_W),e(_W,r1r),e(K7,t1r),e(Z,a1r),e(Z,Z7),e(Z7,ybe),e(ybe,n1r),e(Z7,s1r),e(Z7,bW),e(bW,l1r),e(Z7,i1r),e(Z,d1r),e(Z,eM),e(eM,Lbe),e(Lbe,c1r),e(eM,f1r),e(eM,vW),e(vW,m1r),e(eM,g1r),e(Z,h1r),e(Z,oM),e(oM,xbe),e(xbe,p1r),e(oM,u1r),e(oM,FW),e(FW,_1r),e(oM,b1r),e(Z,v1r),e(Z,rM),e(rM,$be),e($be,F1r),e(rM,T1r),e(rM,TW),e(TW,M1r),e(rM,E1r),e(Z,C1r),e(Z,tM),e(tM,kbe),e(kbe,w1r),e(tM,A1r),e(tM,MW),e(MW,y1r),e(tM,L1r),e(Z,x1r),e(Z,aM),e(aM,Sbe),e(Sbe,$1r),e(aM,k1r),e(aM,EW),e(EW,S1r),e(aM,R1r),e(Z,B1r),e(Z,nM),e(nM,Rbe),e(Rbe,P1r),e(nM,I1r),e(nM,CW),e(CW,q1r),e(nM,N1r),e($r,j1r),M(sM,$r,null),b(f,tIe,_),b(f,Zd,_),e(Zd,lM),e(lM,Bbe),M(QL,Bbe,null),e(Zd,D1r),e(Zd,Pbe),e(Pbe,G1r),b(f,aIe,_),b(f,ar,_),M(WL,ar,null),e(ar,O1r),e(ar,ec),e(ec,V1r),e(ec,wW),e(wW,X1r),e(ec,z1r),e(ec,AW),e(AW,Q1r),e(ec,W1r),e(ar,H1r),e(ar,HL),e(HL,U1r),e(HL,Ibe),e(Ibe,J1r),e(HL,Y1r),e(ar,K1r),e(ar,$t),M(UL,$t,null),e($t,Z1r),e($t,qbe),e(qbe,ebr),e($t,obr),e($t,oc),e(oc,rbr),e(oc,Nbe),e(Nbe,tbr),e(oc,abr),e(oc,yW),e(yW,nbr),e(oc,sbr),e($t,lbr),M(iM,$t,null),e(ar,ibr),e(ar,kr),M(JL,kr,null),e(kr,dbr),e(kr,jbe),e(jbe,cbr),e(kr,fbr),e(kr,rn),e(rn,mbr),e(rn,Dbe),e(Dbe,gbr),e(rn,hbr),e(rn,Gbe),e(Gbe,pbr),e(rn,ubr),e(rn,Obe),e(Obe,_br),e(rn,bbr),e(kr,vbr),e(kr,pe),e(pe,dM),e(dM,Vbe),e(Vbe,Fbr),e(dM,Tbr),e(dM,LW),e(LW,Mbr),e(dM,Ebr),e(pe,Cbr),e(pe,cM),e(cM,Xbe),e(Xbe,wbr),e(cM,Abr),e(cM,xW),e(xW,ybr),e(cM,Lbr),e(pe,xbr),e(pe,fM),e(fM,zbe),e(zbe,$br),e(fM,kbr),e(fM,$W),e($W,Sbr),e(fM,Rbr),e(pe,Bbr),e(pe,mM),e(mM,Qbe),e(Qbe,Pbr),e(mM,Ibr),e(mM,kW),e(kW,qbr),e(mM,Nbr),e(pe,jbr),e(pe,gM),e(gM,Wbe),e(Wbe,Dbr),e(gM,Gbr),e(gM,SW),e(SW,Obr),e(gM,Vbr),e(pe,Xbr),e(pe,hM),e(hM,Hbe),e(Hbe,zbr),e(hM,Qbr),e(hM,RW),e(RW,Wbr),e(hM,Hbr),e(pe,Ubr),e(pe,pM),e(pM,Ube),e(Ube,Jbr),e(pM,Ybr),e(pM,BW),e(BW,Kbr),e(pM,Zbr),e(pe,e2r),e(pe,uM),e(uM,Jbe),e(Jbe,o2r),e(uM,r2r),e(uM,PW),e(PW,t2r),e(uM,a2r),e(pe,n2r),e(pe,_M),e(_M,Ybe),e(Ybe,s2r),e(_M,l2r),e(_M,IW),e(IW,i2r),e(_M,d2r),e(pe,c2r),e(pe,bM),e(bM,Kbe),e(Kbe,f2r),e(bM,m2r),e(bM,qW),e(qW,g2r),e(bM,h2r),e(pe,p2r),e(pe,vM),e(vM,Zbe),e(Zbe,u2r),e(vM,_2r),e(vM,NW),e(NW,b2r),e(vM,v2r),e(pe,F2r),e(pe,FM),e(FM,e2e),e(e2e,T2r),e(FM,M2r),e(FM,jW),e(jW,E2r),e(FM,C2r),e(pe,w2r),e(pe,TM),e(TM,o2e),e(o2e,A2r),e(TM,y2r),e(TM,DW),e(DW,L2r),e(TM,x2r),e(pe,$2r),e(pe,MM),e(MM,r2e),e(r2e,k2r),e(MM,S2r),e(MM,GW),e(GW,R2r),e(MM,B2r),e(pe,P2r),e(pe,EM),e(EM,t2e),e(t2e,I2r),e(EM,q2r),e(EM,OW),e(OW,N2r),e(EM,j2r),e(pe,D2r),e(pe,CM),e(CM,a2e),e(a2e,G2r),e(CM,O2r),e(CM,VW),e(VW,V2r),e(CM,X2r),e(pe,z2r),e(pe,wM),e(wM,n2e),e(n2e,Q2r),e(wM,W2r),e(wM,XW),e(XW,H2r),e(wM,U2r),e(kr,J2r),M(AM,kr,null),b(f,nIe,_),b(f,rc,_),e(rc,yM),e(yM,s2e),M(YL,s2e,null),e(rc,Y2r),e(rc,l2e),e(l2e,K2r),b(f,sIe,_),b(f,nr,_),M(KL,nr,null),e(nr,Z2r),e(nr,tc),e(tc,evr),e(tc,zW),e(zW,ovr),e(tc,rvr),e(tc,QW),e(QW,tvr),e(tc,avr),e(nr,nvr),e(nr,ZL),e(ZL,svr),e(ZL,i2e),e(i2e,lvr),e(ZL,ivr),e(nr,dvr),e(nr,kt),M(e8,kt,null),e(kt,cvr),e(kt,d2e),e(d2e,fvr),e(kt,mvr),e(kt,ac),e(ac,gvr),e(ac,c2e),e(c2e,hvr),e(ac,pvr),e(ac,WW),e(WW,uvr),e(ac,_vr),e(kt,bvr),M(LM,kt,null),e(nr,vvr),e(nr,Sr),M(o8,Sr,null),e(Sr,Fvr),e(Sr,f2e),e(f2e,Tvr),e(Sr,Mvr),e(Sr,tn),e(tn,Evr),e(tn,m2e),e(m2e,Cvr),e(tn,wvr),e(tn,g2e),e(g2e,Avr),e(tn,yvr),e(tn,h2e),e(h2e,Lvr),e(tn,xvr),e(Sr,$vr),e(Sr,p2e),e(p2e,xM),e(xM,u2e),e(u2e,kvr),e(xM,Svr),e(xM,HW),e(HW,Rvr),e(xM,Bvr),e(Sr,Pvr),M($M,Sr,null),b(f,lIe,_),b(f,nc,_),e(nc,kM),e(kM,_2e),M(r8,_2e,null),e(nc,Ivr),e(nc,b2e),e(b2e,qvr),b(f,iIe,_),b(f,sr,_),M(t8,sr,null),e(sr,Nvr),e(sr,sc),e(sc,jvr),e(sc,UW),e(UW,Dvr),e(sc,Gvr),e(sc,JW),e(JW,Ovr),e(sc,Vvr),e(sr,Xvr),e(sr,a8),e(a8,zvr),e(a8,v2e),e(v2e,Qvr),e(a8,Wvr),e(sr,Hvr),e(sr,St),M(n8,St,null),e(St,Uvr),e(St,F2e),e(F2e,Jvr),e(St,Yvr),e(St,lc),e(lc,Kvr),e(lc,T2e),e(T2e,Zvr),e(lc,eFr),e(lc,YW),e(YW,oFr),e(lc,rFr),e(St,tFr),M(SM,St,null),e(sr,aFr),e(sr,Rr),M(s8,Rr,null),e(Rr,nFr),e(Rr,M2e),e(M2e,sFr),e(Rr,lFr),e(Rr,an),e(an,iFr),e(an,E2e),e(E2e,dFr),e(an,cFr),e(an,C2e),e(C2e,fFr),e(an,mFr),e(an,w2e),e(w2e,gFr),e(an,hFr),e(Rr,pFr),e(Rr,de),e(de,RM),e(RM,A2e),e(A2e,uFr),e(RM,_Fr),e(RM,KW),e(KW,bFr),e(RM,vFr),e(de,FFr),e(de,BM),e(BM,y2e),e(y2e,TFr),e(BM,MFr),e(BM,ZW),e(ZW,EFr),e(BM,CFr),e(de,wFr),e(de,PM),e(PM,L2e),e(L2e,AFr),e(PM,yFr),e(PM,eH),e(eH,LFr),e(PM,xFr),e(de,$Fr),e(de,IM),e(IM,x2e),e(x2e,kFr),e(IM,SFr),e(IM,oH),e(oH,RFr),e(IM,BFr),e(de,PFr),e(de,qM),e(qM,$2e),e($2e,IFr),e(qM,qFr),e(qM,rH),e(rH,NFr),e(qM,jFr),e(de,DFr),e(de,NM),e(NM,k2e),e(k2e,GFr),e(NM,OFr),e(NM,tH),e(tH,VFr),e(NM,XFr),e(de,zFr),e(de,jM),e(jM,S2e),e(S2e,QFr),e(jM,WFr),e(jM,aH),e(aH,HFr),e(jM,UFr),e(de,JFr),e(de,DM),e(DM,R2e),e(R2e,YFr),e(DM,KFr),e(DM,nH),e(nH,ZFr),e(DM,e6r),e(de,o6r),e(de,GM),e(GM,B2e),e(B2e,r6r),e(GM,t6r),e(GM,sH),e(sH,a6r),e(GM,n6r),e(de,s6r),e(de,OM),e(OM,P2e),e(P2e,l6r),e(OM,i6r),e(OM,lH),e(lH,d6r),e(OM,c6r),e(de,f6r),e(de,VM),e(VM,I2e),e(I2e,m6r),e(VM,g6r),e(VM,iH),e(iH,h6r),e(VM,p6r),e(de,u6r),e(de,XM),e(XM,q2e),e(q2e,_6r),e(XM,b6r),e(XM,dH),e(dH,v6r),e(XM,F6r),e(de,T6r),e(de,zM),e(zM,N2e),e(N2e,M6r),e(zM,E6r),e(zM,cH),e(cH,C6r),e(zM,w6r),e(de,A6r),e(de,QM),e(QM,j2e),e(j2e,y6r),e(QM,L6r),e(QM,fH),e(fH,x6r),e(QM,$6r),e(de,k6r),e(de,WM),e(WM,D2e),e(D2e,S6r),e(WM,R6r),e(WM,mH),e(mH,B6r),e(WM,P6r),e(de,I6r),e(de,HM),e(HM,G2e),e(G2e,q6r),e(HM,N6r),e(HM,gH),e(gH,j6r),e(HM,D6r),e(de,G6r),e(de,UM),e(UM,O2e),e(O2e,O6r),e(UM,V6r),e(UM,hH),e(hH,X6r),e(UM,z6r),e(de,Q6r),e(de,JM),e(JM,V2e),e(V2e,W6r),e(JM,H6r),e(JM,pH),e(pH,U6r),e(JM,J6r),e(de,Y6r),e(de,YM),e(YM,X2e),e(X2e,K6r),e(YM,Z6r),e(YM,uH),e(uH,eTr),e(YM,oTr),e(de,rTr),e(de,KM),e(KM,z2e),e(z2e,tTr),e(KM,aTr),e(KM,_H),e(_H,nTr),e(KM,sTr),e(Rr,lTr),M(ZM,Rr,null),b(f,dIe,_),b(f,ic,_),e(ic,e4),e(e4,Q2e),M(l8,Q2e,null),e(ic,iTr),e(ic,W2e),e(W2e,dTr),b(f,cIe,_),b(f,lr,_),M(i8,lr,null),e(lr,cTr),e(lr,dc),e(dc,fTr),e(dc,bH),e(bH,mTr),e(dc,gTr),e(dc,vH),e(vH,hTr),e(dc,pTr),e(lr,uTr),e(lr,d8),e(d8,_Tr),e(d8,H2e),e(H2e,bTr),e(d8,vTr),e(lr,FTr),e(lr,Rt),M(c8,Rt,null),e(Rt,TTr),e(Rt,U2e),e(U2e,MTr),e(Rt,ETr),e(Rt,cc),e(cc,CTr),e(cc,J2e),e(J2e,wTr),e(cc,ATr),e(cc,FH),e(FH,yTr),e(cc,LTr),e(Rt,xTr),M(o4,Rt,null),e(lr,$Tr),e(lr,Br),M(f8,Br,null),e(Br,kTr),e(Br,Y2e),e(Y2e,STr),e(Br,RTr),e(Br,nn),e(nn,BTr),e(nn,K2e),e(K2e,PTr),e(nn,ITr),e(nn,Z2e),e(Z2e,qTr),e(nn,NTr),e(nn,eve),e(eve,jTr),e(nn,DTr),e(Br,GTr),e(Br,ce),e(ce,r4),e(r4,ove),e(ove,OTr),e(r4,VTr),e(r4,TH),e(TH,XTr),e(r4,zTr),e(ce,QTr),e(ce,t4),e(t4,rve),e(rve,WTr),e(t4,HTr),e(t4,MH),e(MH,UTr),e(t4,JTr),e(ce,YTr),e(ce,a4),e(a4,tve),e(tve,KTr),e(a4,ZTr),e(a4,EH),e(EH,e7r),e(a4,o7r),e(ce,r7r),e(ce,n4),e(n4,ave),e(ave,t7r),e(n4,a7r),e(n4,CH),e(CH,n7r),e(n4,s7r),e(ce,l7r),e(ce,s4),e(s4,nve),e(nve,i7r),e(s4,d7r),e(s4,wH),e(wH,c7r),e(s4,f7r),e(ce,m7r),e(ce,l4),e(l4,sve),e(sve,g7r),e(l4,h7r),e(l4,AH),e(AH,p7r),e(l4,u7r),e(ce,_7r),e(ce,i4),e(i4,lve),e(lve,b7r),e(i4,v7r),e(i4,yH),e(yH,F7r),e(i4,T7r),e(ce,M7r),e(ce,d4),e(d4,ive),e(ive,E7r),e(d4,C7r),e(d4,LH),e(LH,w7r),e(d4,A7r),e(ce,y7r),e(ce,c4),e(c4,dve),e(dve,L7r),e(c4,x7r),e(c4,xH),e(xH,$7r),e(c4,k7r),e(ce,S7r),e(ce,f4),e(f4,cve),e(cve,R7r),e(f4,B7r),e(f4,$H),e($H,P7r),e(f4,I7r),e(ce,q7r),e(ce,m4),e(m4,fve),e(fve,N7r),e(m4,j7r),e(m4,kH),e(kH,D7r),e(m4,G7r),e(ce,O7r),e(ce,g4),e(g4,mve),e(mve,V7r),e(g4,X7r),e(g4,SH),e(SH,z7r),e(g4,Q7r),e(ce,W7r),e(ce,h4),e(h4,gve),e(gve,H7r),e(h4,U7r),e(h4,RH),e(RH,J7r),e(h4,Y7r),e(ce,K7r),e(ce,p4),e(p4,hve),e(hve,Z7r),e(p4,eMr),e(p4,BH),e(BH,oMr),e(p4,rMr),e(ce,tMr),e(ce,u4),e(u4,pve),e(pve,aMr),e(u4,nMr),e(u4,PH),e(PH,sMr),e(u4,lMr),e(ce,iMr),e(ce,_4),e(_4,uve),e(uve,dMr),e(_4,cMr),e(_4,IH),e(IH,fMr),e(_4,mMr),e(ce,gMr),e(ce,b4),e(b4,_ve),e(_ve,hMr),e(b4,pMr),e(b4,qH),e(qH,uMr),e(b4,_Mr),e(ce,bMr),e(ce,v4),e(v4,bve),e(bve,vMr),e(v4,FMr),e(v4,NH),e(NH,TMr),e(v4,MMr),e(ce,EMr),e(ce,F4),e(F4,vve),e(vve,CMr),e(F4,wMr),e(F4,jH),e(jH,AMr),e(F4,yMr),e(ce,LMr),e(ce,T4),e(T4,Fve),e(Fve,xMr),e(T4,$Mr),e(T4,DH),e(DH,kMr),e(T4,SMr),e(Br,RMr),M(M4,Br,null),b(f,fIe,_),b(f,fc,_),e(fc,E4),e(E4,Tve),M(m8,Tve,null),e(fc,BMr),e(fc,Mve),e(Mve,PMr),b(f,mIe,_),b(f,ir,_),M(g8,ir,null),e(ir,IMr),e(ir,mc),e(mc,qMr),e(mc,GH),e(GH,NMr),e(mc,jMr),e(mc,OH),e(OH,DMr),e(mc,GMr),e(ir,OMr),e(ir,h8),e(h8,VMr),e(h8,Eve),e(Eve,XMr),e(h8,zMr),e(ir,QMr),e(ir,Bt),M(p8,Bt,null),e(Bt,WMr),e(Bt,Cve),e(Cve,HMr),e(Bt,UMr),e(Bt,gc),e(gc,JMr),e(gc,wve),e(wve,YMr),e(gc,KMr),e(gc,VH),e(VH,ZMr),e(gc,e4r),e(Bt,o4r),M(C4,Bt,null),e(ir,r4r),e(ir,Pr),M(u8,Pr,null),e(Pr,t4r),e(Pr,Ave),e(Ave,a4r),e(Pr,n4r),e(Pr,sn),e(sn,s4r),e(sn,yve),e(yve,l4r),e(sn,i4r),e(sn,Lve),e(Lve,d4r),e(sn,c4r),e(sn,xve),e(xve,f4r),e(sn,m4r),e(Pr,g4r),e(Pr,$ve),e($ve,w4),e(w4,kve),e(kve,h4r),e(w4,p4r),e(w4,XH),e(XH,u4r),e(w4,_4r),e(Pr,b4r),M(A4,Pr,null),b(f,gIe,_),b(f,hc,_),e(hc,y4),e(y4,Sve),M(_8,Sve,null),e(hc,v4r),e(hc,Rve),e(Rve,F4r),b(f,hIe,_),b(f,dr,_),M(b8,dr,null),e(dr,T4r),e(dr,pc),e(pc,M4r),e(pc,zH),e(zH,E4r),e(pc,C4r),e(pc,QH),e(QH,w4r),e(pc,A4r),e(dr,y4r),e(dr,v8),e(v8,L4r),e(v8,Bve),e(Bve,x4r),e(v8,$4r),e(dr,k4r),e(dr,Pt),M(F8,Pt,null),e(Pt,S4r),e(Pt,Pve),e(Pve,R4r),e(Pt,B4r),e(Pt,uc),e(uc,P4r),e(uc,Ive),e(Ive,I4r),e(uc,q4r),e(uc,WH),e(WH,N4r),e(uc,j4r),e(Pt,D4r),M(L4,Pt,null),e(dr,G4r),e(dr,Ir),M(T8,Ir,null),e(Ir,O4r),e(Ir,qve),e(qve,V4r),e(Ir,X4r),e(Ir,ln),e(ln,z4r),e(ln,Nve),e(Nve,Q4r),e(ln,W4r),e(ln,jve),e(jve,H4r),e(ln,U4r),e(ln,Dve),e(Dve,J4r),e(ln,Y4r),e(Ir,K4r),e(Ir,Gve),e(Gve,x4),e(x4,Ove),e(Ove,Z4r),e(x4,eEr),e(x4,HH),e(HH,oEr),e(x4,rEr),e(Ir,tEr),M($4,Ir,null),b(f,pIe,_),b(f,_c,_),e(_c,k4),e(k4,Vve),M(M8,Vve,null),e(_c,aEr),e(_c,Xve),e(Xve,nEr),b(f,uIe,_),b(f,cr,_),M(E8,cr,null),e(cr,sEr),e(cr,bc),e(bc,lEr),e(bc,UH),e(UH,iEr),e(bc,dEr),e(bc,JH),e(JH,cEr),e(bc,fEr),e(cr,mEr),e(cr,C8),e(C8,gEr),e(C8,zve),e(zve,hEr),e(C8,pEr),e(cr,uEr),e(cr,It),M(w8,It,null),e(It,_Er),e(It,Qve),e(Qve,bEr),e(It,vEr),e(It,vc),e(vc,FEr),e(vc,Wve),e(Wve,TEr),e(vc,MEr),e(vc,YH),e(YH,EEr),e(vc,CEr),e(It,wEr),M(S4,It,null),e(cr,AEr),e(cr,qr),M(A8,qr,null),e(qr,yEr),e(qr,Hve),e(Hve,LEr),e(qr,xEr),e(qr,dn),e(dn,$Er),e(dn,Uve),e(Uve,kEr),e(dn,SEr),e(dn,Jve),e(Jve,REr),e(dn,BEr),e(dn,Yve),e(Yve,PEr),e(dn,IEr),e(qr,qEr),e(qr,re),e(re,R4),e(R4,Kve),e(Kve,NEr),e(R4,jEr),e(R4,KH),e(KH,DEr),e(R4,GEr),e(re,OEr),e(re,B4),e(B4,Zve),e(Zve,VEr),e(B4,XEr),e(B4,ZH),e(ZH,zEr),e(B4,QEr),e(re,WEr),e(re,P4),e(P4,eFe),e(eFe,HEr),e(P4,UEr),e(P4,eU),e(eU,JEr),e(P4,YEr),e(re,KEr),e(re,I4),e(I4,oFe),e(oFe,ZEr),e(I4,e5r),e(I4,oU),e(oU,o5r),e(I4,r5r),e(re,t5r),e(re,q4),e(q4,rFe),e(rFe,a5r),e(q4,n5r),e(q4,rU),e(rU,s5r),e(q4,l5r),e(re,i5r),e(re,N4),e(N4,tFe),e(tFe,d5r),e(N4,c5r),e(N4,tU),e(tU,f5r),e(N4,m5r),e(re,g5r),e(re,j4),e(j4,aFe),e(aFe,h5r),e(j4,p5r),e(j4,aU),e(aU,u5r),e(j4,_5r),e(re,b5r),e(re,D4),e(D4,nFe),e(nFe,v5r),e(D4,F5r),e(D4,nU),e(nU,T5r),e(D4,M5r),e(re,E5r),e(re,G4),e(G4,sFe),e(sFe,C5r),e(G4,w5r),e(G4,sU),e(sU,A5r),e(G4,y5r),e(re,L5r),e(re,O4),e(O4,lFe),e(lFe,x5r),e(O4,$5r),e(O4,lU),e(lU,k5r),e(O4,S5r),e(re,R5r),e(re,V4),e(V4,iFe),e(iFe,B5r),e(V4,P5r),e(V4,iU),e(iU,I5r),e(V4,q5r),e(re,N5r),e(re,X4),e(X4,dFe),e(dFe,j5r),e(X4,D5r),e(X4,dU),e(dU,G5r),e(X4,O5r),e(re,V5r),e(re,z4),e(z4,cFe),e(cFe,X5r),e(z4,z5r),e(z4,cU),e(cU,Q5r),e(z4,W5r),e(re,H5r),e(re,Q4),e(Q4,fFe),e(fFe,U5r),e(Q4,J5r),e(Q4,fU),e(fU,Y5r),e(Q4,K5r),e(re,Z5r),e(re,W4),e(W4,mFe),e(mFe,eCr),e(W4,oCr),e(W4,mU),e(mU,rCr),e(W4,tCr),e(re,aCr),e(re,H4),e(H4,gFe),e(gFe,nCr),e(H4,sCr),e(H4,gU),e(gU,lCr),e(H4,iCr),e(re,dCr),e(re,U4),e(U4,hFe),e(hFe,cCr),e(U4,fCr),e(U4,hU),e(hU,mCr),e(U4,gCr),e(re,hCr),e(re,J4),e(J4,pFe),e(pFe,pCr),e(J4,uCr),e(J4,pU),e(pU,_Cr),e(J4,bCr),e(re,vCr),e(re,Y4),e(Y4,uFe),e(uFe,FCr),e(Y4,TCr),e(Y4,uU),e(uU,MCr),e(Y4,ECr),e(re,CCr),e(re,K4),e(K4,_Fe),e(_Fe,wCr),e(K4,ACr),e(K4,_U),e(_U,yCr),e(K4,LCr),e(re,xCr),e(re,Z4),e(Z4,bFe),e(bFe,$Cr),e(Z4,kCr),e(Z4,bU),e(bU,SCr),e(Z4,RCr),e(re,BCr),e(re,eE),e(eE,vFe),e(vFe,PCr),e(eE,ICr),e(eE,vU),e(vU,qCr),e(eE,NCr),e(re,jCr),e(re,oE),e(oE,FFe),e(FFe,DCr),e(oE,GCr),e(oE,FU),e(FU,OCr),e(oE,VCr),e(re,XCr),e(re,rE),e(rE,TFe),e(TFe,zCr),e(rE,QCr),e(rE,TU),e(TU,WCr),e(rE,HCr),e(re,UCr),e(re,tE),e(tE,MFe),e(MFe,JCr),e(tE,YCr),e(tE,MU),e(MU,KCr),e(tE,ZCr),e(qr,e3r),M(aE,qr,null),b(f,_Ie,_),b(f,Fc,_),e(Fc,nE),e(nE,EFe),M(y8,EFe,null),e(Fc,o3r),e(Fc,CFe),e(CFe,r3r),b(f,bIe,_),b(f,fr,_),M(L8,fr,null),e(fr,t3r),e(fr,Tc),e(Tc,a3r),e(Tc,EU),e(EU,n3r),e(Tc,s3r),e(Tc,CU),e(CU,l3r),e(Tc,i3r),e(fr,d3r),e(fr,x8),e(x8,c3r),e(x8,wFe),e(wFe,f3r),e(x8,m3r),e(fr,g3r),e(fr,qt),M($8,qt,null),e(qt,h3r),e(qt,AFe),e(AFe,p3r),e(qt,u3r),e(qt,Mc),e(Mc,_3r),e(Mc,yFe),e(yFe,b3r),e(Mc,v3r),e(Mc,wU),e(wU,F3r),e(Mc,T3r),e(qt,M3r),M(sE,qt,null),e(fr,E3r),e(fr,Nr),M(k8,Nr,null),e(Nr,C3r),e(Nr,LFe),e(LFe,w3r),e(Nr,A3r),e(Nr,cn),e(cn,y3r),e(cn,xFe),e(xFe,L3r),e(cn,x3r),e(cn,$Fe),e($Fe,$3r),e(cn,k3r),e(cn,kFe),e(kFe,S3r),e(cn,R3r),e(Nr,B3r),e(Nr,ke),e(ke,lE),e(lE,SFe),e(SFe,P3r),e(lE,I3r),e(lE,AU),e(AU,q3r),e(lE,N3r),e(ke,j3r),e(ke,iE),e(iE,RFe),e(RFe,D3r),e(iE,G3r),e(iE,yU),e(yU,O3r),e(iE,V3r),e(ke,X3r),e(ke,dE),e(dE,BFe),e(BFe,z3r),e(dE,Q3r),e(dE,LU),e(LU,W3r),e(dE,H3r),e(ke,U3r),e(ke,cE),e(cE,PFe),e(PFe,J3r),e(cE,Y3r),e(cE,xU),e(xU,K3r),e(cE,Z3r),e(ke,ewr),e(ke,fE),e(fE,IFe),e(IFe,owr),e(fE,rwr),e(fE,$U),e($U,twr),e(fE,awr),e(ke,nwr),e(ke,mE),e(mE,qFe),e(qFe,swr),e(mE,lwr),e(mE,kU),e(kU,iwr),e(mE,dwr),e(ke,cwr),e(ke,gE),e(gE,NFe),e(NFe,fwr),e(gE,mwr),e(gE,SU),e(SU,gwr),e(gE,hwr),e(ke,pwr),e(ke,hE),e(hE,jFe),e(jFe,uwr),e(hE,_wr),e(hE,RU),e(RU,bwr),e(hE,vwr),e(ke,Fwr),e(ke,pE),e(pE,DFe),e(DFe,Twr),e(pE,Mwr),e(pE,BU),e(BU,Ewr),e(pE,Cwr),e(Nr,wwr),M(uE,Nr,null),b(f,vIe,_),b(f,Ec,_),e(Ec,_E),e(_E,GFe),M(S8,GFe,null),e(Ec,Awr),e(Ec,OFe),e(OFe,ywr),b(f,FIe,_),b(f,mr,_),M(R8,mr,null),e(mr,Lwr),e(mr,Cc),e(Cc,xwr),e(Cc,PU),e(PU,$wr),e(Cc,kwr),e(Cc,IU),e(IU,Swr),e(Cc,Rwr),e(mr,Bwr),e(mr,B8),e(B8,Pwr),e(B8,VFe),e(VFe,Iwr),e(B8,qwr),e(mr,Nwr),e(mr,Nt),M(P8,Nt,null),e(Nt,jwr),e(Nt,XFe),e(XFe,Dwr),e(Nt,Gwr),e(Nt,wc),e(wc,Owr),e(wc,zFe),e(zFe,Vwr),e(wc,Xwr),e(wc,qU),e(qU,zwr),e(wc,Qwr),e(Nt,Wwr),M(bE,Nt,null),e(mr,Hwr),e(mr,jr),M(I8,jr,null),e(jr,Uwr),e(jr,QFe),e(QFe,Jwr),e(jr,Ywr),e(jr,fn),e(fn,Kwr),e(fn,WFe),e(WFe,Zwr),e(fn,eAr),e(fn,HFe),e(HFe,oAr),e(fn,rAr),e(fn,UFe),e(UFe,tAr),e(fn,aAr),e(jr,nAr),e(jr,Me),e(Me,vE),e(vE,JFe),e(JFe,sAr),e(vE,lAr),e(vE,NU),e(NU,iAr),e(vE,dAr),e(Me,cAr),e(Me,FE),e(FE,YFe),e(YFe,fAr),e(FE,mAr),e(FE,jU),e(jU,gAr),e(FE,hAr),e(Me,pAr),e(Me,TE),e(TE,KFe),e(KFe,uAr),e(TE,_Ar),e(TE,DU),e(DU,bAr),e(TE,vAr),e(Me,FAr),e(Me,ME),e(ME,ZFe),e(ZFe,TAr),e(ME,MAr),e(ME,GU),e(GU,EAr),e(ME,CAr),e(Me,wAr),e(Me,EE),e(EE,e6e),e(e6e,AAr),e(EE,yAr),e(EE,OU),e(OU,LAr),e(EE,xAr),e(Me,$Ar),e(Me,CE),e(CE,o6e),e(o6e,kAr),e(CE,SAr),e(CE,VU),e(VU,RAr),e(CE,BAr),e(Me,PAr),e(Me,wE),e(wE,r6e),e(r6e,IAr),e(wE,qAr),e(wE,XU),e(XU,NAr),e(wE,jAr),e(Me,DAr),e(Me,AE),e(AE,t6e),e(t6e,GAr),e(AE,OAr),e(AE,zU),e(zU,VAr),e(AE,XAr),e(Me,zAr),e(Me,yE),e(yE,a6e),e(a6e,QAr),e(yE,WAr),e(yE,QU),e(QU,HAr),e(yE,UAr),e(Me,JAr),e(Me,LE),e(LE,n6e),e(n6e,YAr),e(LE,KAr),e(LE,WU),e(WU,ZAr),e(LE,eyr),e(Me,oyr),e(Me,xE),e(xE,s6e),e(s6e,ryr),e(xE,tyr),e(xE,HU),e(HU,ayr),e(xE,nyr),e(Me,syr),e(Me,$E),e($E,l6e),e(l6e,lyr),e($E,iyr),e($E,UU),e(UU,dyr),e($E,cyr),e(jr,fyr),M(kE,jr,null),b(f,TIe,_),b(f,Ac,_),e(Ac,SE),e(SE,i6e),M(q8,i6e,null),e(Ac,myr),e(Ac,d6e),e(d6e,gyr),b(f,MIe,_),b(f,gr,_),M(N8,gr,null),e(gr,hyr),e(gr,yc),e(yc,pyr),e(yc,JU),e(JU,uyr),e(yc,_yr),e(yc,YU),e(YU,byr),e(yc,vyr),e(gr,Fyr),e(gr,j8),e(j8,Tyr),e(j8,c6e),e(c6e,Myr),e(j8,Eyr),e(gr,Cyr),e(gr,jt),M(D8,jt,null),e(jt,wyr),e(jt,f6e),e(f6e,Ayr),e(jt,yyr),e(jt,Lc),e(Lc,Lyr),e(Lc,m6e),e(m6e,xyr),e(Lc,$yr),e(Lc,KU),e(KU,kyr),e(Lc,Syr),e(jt,Ryr),M(RE,jt,null),e(gr,Byr),e(gr,Dr),M(G8,Dr,null),e(Dr,Pyr),e(Dr,g6e),e(g6e,Iyr),e(Dr,qyr),e(Dr,mn),e(mn,Nyr),e(mn,h6e),e(h6e,jyr),e(mn,Dyr),e(mn,p6e),e(p6e,Gyr),e(mn,Oyr),e(mn,u6e),e(u6e,Vyr),e(mn,Xyr),e(Dr,zyr),e(Dr,Le),e(Le,BE),e(BE,_6e),e(_6e,Qyr),e(BE,Wyr),e(BE,ZU),e(ZU,Hyr),e(BE,Uyr),e(Le,Jyr),e(Le,PE),e(PE,b6e),e(b6e,Yyr),e(PE,Kyr),e(PE,eJ),e(eJ,Zyr),e(PE,eLr),e(Le,oLr),e(Le,IE),e(IE,v6e),e(v6e,rLr),e(IE,tLr),e(IE,oJ),e(oJ,aLr),e(IE,nLr),e(Le,sLr),e(Le,qE),e(qE,F6e),e(F6e,lLr),e(qE,iLr),e(qE,rJ),e(rJ,dLr),e(qE,cLr),e(Le,fLr),e(Le,NE),e(NE,T6e),e(T6e,mLr),e(NE,gLr),e(NE,tJ),e(tJ,hLr),e(NE,pLr),e(Le,uLr),e(Le,jE),e(jE,M6e),e(M6e,_Lr),e(jE,bLr),e(jE,aJ),e(aJ,vLr),e(jE,FLr),e(Le,TLr),e(Le,DE),e(DE,E6e),e(E6e,MLr),e(DE,ELr),e(DE,nJ),e(nJ,CLr),e(DE,wLr),e(Le,ALr),e(Le,GE),e(GE,C6e),e(C6e,yLr),e(GE,LLr),e(GE,sJ),e(sJ,xLr),e(GE,$Lr),e(Le,kLr),e(Le,OE),e(OE,w6e),e(w6e,SLr),e(OE,RLr),e(OE,lJ),e(lJ,BLr),e(OE,PLr),e(Le,ILr),e(Le,VE),e(VE,A6e),e(A6e,qLr),e(VE,NLr),e(VE,iJ),e(iJ,jLr),e(VE,DLr),e(Dr,GLr),M(XE,Dr,null),b(f,EIe,_),b(f,xc,_),e(xc,zE),e(zE,y6e),M(O8,y6e,null),e(xc,OLr),e(xc,L6e),e(L6e,VLr),b(f,CIe,_),b(f,hr,_),M(V8,hr,null),e(hr,XLr),e(hr,$c),e($c,zLr),e($c,dJ),e(dJ,QLr),e($c,WLr),e($c,cJ),e(cJ,HLr),e($c,ULr),e(hr,JLr),e(hr,X8),e(X8,YLr),e(X8,x6e),e(x6e,KLr),e(X8,ZLr),e(hr,e8r),e(hr,Dt),M(z8,Dt,null),e(Dt,o8r),e(Dt,$6e),e($6e,r8r),e(Dt,t8r),e(Dt,kc),e(kc,a8r),e(kc,k6e),e(k6e,n8r),e(kc,s8r),e(kc,fJ),e(fJ,l8r),e(kc,i8r),e(Dt,d8r),M(QE,Dt,null),e(hr,c8r),e(hr,Gr),M(Q8,Gr,null),e(Gr,f8r),e(Gr,S6e),e(S6e,m8r),e(Gr,g8r),e(Gr,gn),e(gn,h8r),e(gn,R6e),e(R6e,p8r),e(gn,u8r),e(gn,B6e),e(B6e,_8r),e(gn,b8r),e(gn,P6e),e(P6e,v8r),e(gn,F8r),e(Gr,T8r),e(Gr,Se),e(Se,WE),e(WE,I6e),e(I6e,M8r),e(WE,E8r),e(WE,mJ),e(mJ,C8r),e(WE,w8r),e(Se,A8r),e(Se,HE),e(HE,q6e),e(q6e,y8r),e(HE,L8r),e(HE,gJ),e(gJ,x8r),e(HE,$8r),e(Se,k8r),e(Se,UE),e(UE,N6e),e(N6e,S8r),e(UE,R8r),e(UE,hJ),e(hJ,B8r),e(UE,P8r),e(Se,I8r),e(Se,JE),e(JE,j6e),e(j6e,q8r),e(JE,N8r),e(JE,pJ),e(pJ,j8r),e(JE,D8r),e(Se,G8r),e(Se,YE),e(YE,D6e),e(D6e,O8r),e(YE,V8r),e(YE,uJ),e(uJ,X8r),e(YE,z8r),e(Se,Q8r),e(Se,KE),e(KE,G6e),e(G6e,W8r),e(KE,H8r),e(KE,_J),e(_J,U8r),e(KE,J8r),e(Se,Y8r),e(Se,ZE),e(ZE,O6e),e(O6e,K8r),e(ZE,Z8r),e(ZE,bJ),e(bJ,exr),e(ZE,oxr),e(Se,rxr),e(Se,e5),e(e5,V6e),e(V6e,txr),e(e5,axr),e(e5,vJ),e(vJ,nxr),e(e5,sxr),e(Se,lxr),e(Se,o5),e(o5,X6e),e(X6e,ixr),e(o5,dxr),e(o5,FJ),e(FJ,cxr),e(o5,fxr),e(Gr,mxr),M(r5,Gr,null),b(f,wIe,_),b(f,Sc,_),e(Sc,t5),e(t5,z6e),M(W8,z6e,null),e(Sc,gxr),e(Sc,Q6e),e(Q6e,hxr),b(f,AIe,_),b(f,pr,_),M(H8,pr,null),e(pr,pxr),e(pr,Rc),e(Rc,uxr),e(Rc,TJ),e(TJ,_xr),e(Rc,bxr),e(Rc,MJ),e(MJ,vxr),e(Rc,Fxr),e(pr,Txr),e(pr,U8),e(U8,Mxr),e(U8,W6e),e(W6e,Exr),e(U8,Cxr),e(pr,wxr),e(pr,Gt),M(J8,Gt,null),e(Gt,Axr),e(Gt,H6e),e(H6e,yxr),e(Gt,Lxr),e(Gt,Bc),e(Bc,xxr),e(Bc,U6e),e(U6e,$xr),e(Bc,kxr),e(Bc,EJ),e(EJ,Sxr),e(Bc,Rxr),e(Gt,Bxr),M(a5,Gt,null),e(pr,Pxr),e(pr,Or),M(Y8,Or,null),e(Or,Ixr),e(Or,J6e),e(J6e,qxr),e(Or,Nxr),e(Or,hn),e(hn,jxr),e(hn,Y6e),e(Y6e,Dxr),e(hn,Gxr),e(hn,K6e),e(K6e,Oxr),e(hn,Vxr),e(hn,Z6e),e(Z6e,Xxr),e(hn,zxr),e(Or,Qxr),e(Or,xe),e(xe,n5),e(n5,eTe),e(eTe,Wxr),e(n5,Hxr),e(n5,CJ),e(CJ,Uxr),e(n5,Jxr),e(xe,Yxr),e(xe,s5),e(s5,oTe),e(oTe,Kxr),e(s5,Zxr),e(s5,wJ),e(wJ,e9r),e(s5,o9r),e(xe,r9r),e(xe,l5),e(l5,rTe),e(rTe,t9r),e(l5,a9r),e(l5,AJ),e(AJ,n9r),e(l5,s9r),e(xe,l9r),e(xe,i5),e(i5,tTe),e(tTe,i9r),e(i5,d9r),e(i5,yJ),e(yJ,c9r),e(i5,f9r),e(xe,m9r),e(xe,d5),e(d5,aTe),e(aTe,g9r),e(d5,h9r),e(d5,LJ),e(LJ,p9r),e(d5,u9r),e(xe,_9r),e(xe,c5),e(c5,nTe),e(nTe,b9r),e(c5,v9r),e(c5,xJ),e(xJ,F9r),e(c5,T9r),e(xe,M9r),e(xe,f5),e(f5,sTe),e(sTe,E9r),e(f5,C9r),e(f5,$J),e($J,w9r),e(f5,A9r),e(xe,y9r),e(xe,m5),e(m5,lTe),e(lTe,L9r),e(m5,x9r),e(m5,kJ),e(kJ,$9r),e(m5,k9r),e(xe,S9r),e(xe,g5),e(g5,iTe),e(iTe,R9r),e(g5,B9r),e(g5,SJ),e(SJ,P9r),e(g5,I9r),e(xe,q9r),e(xe,h5),e(h5,dTe),e(dTe,N9r),e(h5,j9r),e(h5,RJ),e(RJ,D9r),e(h5,G9r),e(Or,O9r),M(p5,Or,null),b(f,yIe,_),b(f,Pc,_),e(Pc,u5),e(u5,cTe),M(K8,cTe,null),e(Pc,V9r),e(Pc,fTe),e(fTe,X9r),b(f,LIe,_),b(f,ur,_),M(Z8,ur,null),e(ur,z9r),e(ur,Ic),e(Ic,Q9r),e(Ic,BJ),e(BJ,W9r),e(Ic,H9r),e(Ic,PJ),e(PJ,U9r),e(Ic,J9r),e(ur,Y9r),e(ur,ex),e(ex,K9r),e(ex,mTe),e(mTe,Z9r),e(ex,e$r),e(ur,o$r),e(ur,Ot),M(ox,Ot,null),e(Ot,r$r),e(Ot,gTe),e(gTe,t$r),e(Ot,a$r),e(Ot,qc),e(qc,n$r),e(qc,hTe),e(hTe,s$r),e(qc,l$r),e(qc,IJ),e(IJ,i$r),e(qc,d$r),e(Ot,c$r),M(_5,Ot,null),e(ur,f$r),e(ur,Vr),M(rx,Vr,null),e(Vr,m$r),e(Vr,pTe),e(pTe,g$r),e(Vr,h$r),e(Vr,pn),e(pn,p$r),e(pn,uTe),e(uTe,u$r),e(pn,_$r),e(pn,_Te),e(_Te,b$r),e(pn,v$r),e(pn,bTe),e(bTe,F$r),e(pn,T$r),e(Vr,M$r),e(Vr,$e),e($e,b5),e(b5,vTe),e(vTe,E$r),e(b5,C$r),e(b5,qJ),e(qJ,w$r),e(b5,A$r),e($e,y$r),e($e,v5),e(v5,FTe),e(FTe,L$r),e(v5,x$r),e(v5,NJ),e(NJ,$$r),e(v5,k$r),e($e,S$r),e($e,F5),e(F5,TTe),e(TTe,R$r),e(F5,B$r),e(F5,jJ),e(jJ,P$r),e(F5,I$r),e($e,q$r),e($e,T5),e(T5,MTe),e(MTe,N$r),e(T5,j$r),e(T5,DJ),e(DJ,D$r),e(T5,G$r),e($e,O$r),e($e,M5),e(M5,ETe),e(ETe,V$r),e(M5,X$r),e(M5,GJ),e(GJ,z$r),e(M5,Q$r),e($e,W$r),e($e,E5),e(E5,CTe),e(CTe,H$r),e(E5,U$r),e(E5,OJ),e(OJ,J$r),e(E5,Y$r),e($e,K$r),e($e,C5),e(C5,wTe),e(wTe,Z$r),e(C5,ekr),e(C5,VJ),e(VJ,okr),e(C5,rkr),e($e,tkr),e($e,w5),e(w5,ATe),e(ATe,akr),e(w5,nkr),e(w5,XJ),e(XJ,skr),e(w5,lkr),e($e,ikr),e($e,A5),e(A5,yTe),e(yTe,dkr),e(A5,ckr),e(A5,zJ),e(zJ,fkr),e(A5,mkr),e($e,gkr),e($e,y5),e(y5,LTe),e(LTe,hkr),e(y5,pkr),e(y5,QJ),e(QJ,ukr),e(y5,_kr),e(Vr,bkr),M(L5,Vr,null),b(f,xIe,_),b(f,Nc,_),e(Nc,x5),e(x5,xTe),M(tx,xTe,null),e(Nc,vkr),e(Nc,$Te),e($Te,Fkr),b(f,$Ie,_),b(f,_r,_),M(ax,_r,null),e(_r,Tkr),e(_r,jc),e(jc,Mkr),e(jc,WJ),e(WJ,Ekr),e(jc,Ckr),e(jc,HJ),e(HJ,wkr),e(jc,Akr),e(_r,ykr),e(_r,nx),e(nx,Lkr),e(nx,kTe),e(kTe,xkr),e(nx,$kr),e(_r,kkr),e(_r,Vt),M(sx,Vt,null),e(Vt,Skr),e(Vt,STe),e(STe,Rkr),e(Vt,Bkr),e(Vt,Dc),e(Dc,Pkr),e(Dc,RTe),e(RTe,Ikr),e(Dc,qkr),e(Dc,UJ),e(UJ,Nkr),e(Dc,jkr),e(Vt,Dkr),M($5,Vt,null),e(_r,Gkr),e(_r,Xr),M(lx,Xr,null),e(Xr,Okr),e(Xr,BTe),e(BTe,Vkr),e(Xr,Xkr),e(Xr,un),e(un,zkr),e(un,PTe),e(PTe,Qkr),e(un,Wkr),e(un,ITe),e(ITe,Hkr),e(un,Ukr),e(un,qTe),e(qTe,Jkr),e(un,Ykr),e(Xr,Kkr),e(Xr,De),e(De,k5),e(k5,NTe),e(NTe,Zkr),e(k5,eSr),e(k5,JJ),e(JJ,oSr),e(k5,rSr),e(De,tSr),e(De,S5),e(S5,jTe),e(jTe,aSr),e(S5,nSr),e(S5,YJ),e(YJ,sSr),e(S5,lSr),e(De,iSr),e(De,R5),e(R5,DTe),e(DTe,dSr),e(R5,cSr),e(R5,KJ),e(KJ,fSr),e(R5,mSr),e(De,gSr),e(De,B5),e(B5,GTe),e(GTe,hSr),e(B5,pSr),e(B5,ZJ),e(ZJ,uSr),e(B5,_Sr),e(De,bSr),e(De,P5),e(P5,OTe),e(OTe,vSr),e(P5,FSr),e(P5,eY),e(eY,TSr),e(P5,MSr),e(De,ESr),e(De,I5),e(I5,VTe),e(VTe,CSr),e(I5,wSr),e(I5,oY),e(oY,ASr),e(I5,ySr),e(De,LSr),e(De,q5),e(q5,XTe),e(XTe,xSr),e(q5,$Sr),e(q5,rY),e(rY,kSr),e(q5,SSr),e(De,RSr),e(De,N5),e(N5,zTe),e(zTe,BSr),e(N5,PSr),e(N5,tY),e(tY,ISr),e(N5,qSr),e(Xr,NSr),M(j5,Xr,null),b(f,kIe,_),b(f,Gc,_),e(Gc,D5),e(D5,QTe),M(ix,QTe,null),e(Gc,jSr),e(Gc,WTe),e(WTe,DSr),b(f,SIe,_),b(f,br,_),M(dx,br,null),e(br,GSr),e(br,Oc),e(Oc,OSr),e(Oc,aY),e(aY,VSr),e(Oc,XSr),e(Oc,nY),e(nY,zSr),e(Oc,QSr),e(br,WSr),e(br,cx),e(cx,HSr),e(cx,HTe),e(HTe,USr),e(cx,JSr),e(br,YSr),e(br,Xt),M(fx,Xt,null),e(Xt,KSr),e(Xt,UTe),e(UTe,ZSr),e(Xt,eRr),e(Xt,Vc),e(Vc,oRr),e(Vc,JTe),e(JTe,rRr),e(Vc,tRr),e(Vc,sY),e(sY,aRr),e(Vc,nRr),e(Xt,sRr),M(G5,Xt,null),e(br,lRr),e(br,zr),M(mx,zr,null),e(zr,iRr),e(zr,YTe),e(YTe,dRr),e(zr,cRr),e(zr,_n),e(_n,fRr),e(_n,KTe),e(KTe,mRr),e(_n,gRr),e(_n,ZTe),e(ZTe,hRr),e(_n,pRr),e(_n,e7e),e(e7e,uRr),e(_n,_Rr),e(zr,bRr),e(zr,Ge),e(Ge,O5),e(O5,o7e),e(o7e,vRr),e(O5,FRr),e(O5,lY),e(lY,TRr),e(O5,MRr),e(Ge,ERr),e(Ge,V5),e(V5,r7e),e(r7e,CRr),e(V5,wRr),e(V5,iY),e(iY,ARr),e(V5,yRr),e(Ge,LRr),e(Ge,X5),e(X5,t7e),e(t7e,xRr),e(X5,$Rr),e(X5,dY),e(dY,kRr),e(X5,SRr),e(Ge,RRr),e(Ge,z5),e(z5,a7e),e(a7e,BRr),e(z5,PRr),e(z5,cY),e(cY,IRr),e(z5,qRr),e(Ge,NRr),e(Ge,Q5),e(Q5,n7e),e(n7e,jRr),e(Q5,DRr),e(Q5,fY),e(fY,GRr),e(Q5,ORr),e(Ge,VRr),e(Ge,W5),e(W5,s7e),e(s7e,XRr),e(W5,zRr),e(W5,mY),e(mY,QRr),e(W5,WRr),e(Ge,HRr),e(Ge,H5),e(H5,l7e),e(l7e,URr),e(H5,JRr),e(H5,gY),e(gY,YRr),e(H5,KRr),e(Ge,ZRr),e(Ge,U5),e(U5,i7e),e(i7e,eBr),e(U5,oBr),e(U5,hY),e(hY,rBr),e(U5,tBr),e(zr,aBr),M(J5,zr,null),b(f,RIe,_),b(f,Xc,_),e(Xc,Y5),e(Y5,d7e),M(gx,d7e,null),e(Xc,nBr),e(Xc,c7e),e(c7e,sBr),b(f,BIe,_),b(f,vr,_),M(hx,vr,null),e(vr,lBr),e(vr,zc),e(zc,iBr),e(zc,pY),e(pY,dBr),e(zc,cBr),e(zc,uY),e(uY,fBr),e(zc,mBr),e(vr,gBr),e(vr,px),e(px,hBr),e(px,f7e),e(f7e,pBr),e(px,uBr),e(vr,_Br),e(vr,zt),M(ux,zt,null),e(zt,bBr),e(zt,m7e),e(m7e,vBr),e(zt,FBr),e(zt,Qc),e(Qc,TBr),e(Qc,g7e),e(g7e,MBr),e(Qc,EBr),e(Qc,_Y),e(_Y,CBr),e(Qc,wBr),e(zt,ABr),M(K5,zt,null),e(vr,yBr),e(vr,Qr),M(_x,Qr,null),e(Qr,LBr),e(Qr,h7e),e(h7e,xBr),e(Qr,$Br),e(Qr,bn),e(bn,kBr),e(bn,p7e),e(p7e,SBr),e(bn,RBr),e(bn,u7e),e(u7e,BBr),e(bn,PBr),e(bn,_7e),e(_7e,IBr),e(bn,qBr),e(Qr,NBr),e(Qr,b7e),e(b7e,Z5),e(Z5,v7e),e(v7e,jBr),e(Z5,DBr),e(Z5,bY),e(bY,GBr),e(Z5,OBr),e(Qr,VBr),M(eC,Qr,null),b(f,PIe,_),b(f,Wc,_),e(Wc,oC),e(oC,F7e),M(bx,F7e,null),e(Wc,XBr),e(Wc,T7e),e(T7e,zBr),b(f,IIe,_),b(f,Fr,_),M(vx,Fr,null),e(Fr,QBr),e(Fr,Hc),e(Hc,WBr),e(Hc,vY),e(vY,HBr),e(Hc,UBr),e(Hc,FY),e(FY,JBr),e(Hc,YBr),e(Fr,KBr),e(Fr,Fx),e(Fx,ZBr),e(Fx,M7e),e(M7e,ePr),e(Fx,oPr),e(Fr,rPr),e(Fr,Qt),M(Tx,Qt,null),e(Qt,tPr),e(Qt,E7e),e(E7e,aPr),e(Qt,nPr),e(Qt,Uc),e(Uc,sPr),e(Uc,C7e),e(C7e,lPr),e(Uc,iPr),e(Uc,TY),e(TY,dPr),e(Uc,cPr),e(Qt,fPr),M(rC,Qt,null),e(Fr,mPr),e(Fr,Wr),M(Mx,Wr,null),e(Wr,gPr),e(Wr,w7e),e(w7e,hPr),e(Wr,pPr),e(Wr,vn),e(vn,uPr),e(vn,A7e),e(A7e,_Pr),e(vn,bPr),e(vn,y7e),e(y7e,vPr),e(vn,FPr),e(vn,L7e),e(L7e,TPr),e(vn,MPr),e(Wr,EPr),e(Wr,Ex),e(Ex,tC),e(tC,x7e),e(x7e,CPr),e(tC,wPr),e(tC,MY),e(MY,APr),e(tC,yPr),e(Ex,LPr),e(Ex,aC),e(aC,$7e),e($7e,xPr),e(aC,$Pr),e(aC,EY),e(EY,kPr),e(aC,SPr),e(Wr,RPr),M(nC,Wr,null),b(f,qIe,_),b(f,Jc,_),e(Jc,sC),e(sC,k7e),M(Cx,k7e,null),e(Jc,BPr),e(Jc,S7e),e(S7e,PPr),b(f,NIe,_),b(f,Tr,_),M(wx,Tr,null),e(Tr,IPr),e(Tr,Yc),e(Yc,qPr),e(Yc,CY),e(CY,NPr),e(Yc,jPr),e(Yc,wY),e(wY,DPr),e(Yc,GPr),e(Tr,OPr),e(Tr,Ax),e(Ax,VPr),e(Ax,R7e),e(R7e,XPr),e(Ax,zPr),e(Tr,QPr),e(Tr,Wt),M(yx,Wt,null),e(Wt,WPr),e(Wt,B7e),e(B7e,HPr),e(Wt,UPr),e(Wt,Kc),e(Kc,JPr),e(Kc,P7e),e(P7e,YPr),e(Kc,KPr),e(Kc,AY),e(AY,ZPr),e(Kc,eIr),e(Wt,oIr),M(lC,Wt,null),e(Tr,rIr),e(Tr,Hr),M(Lx,Hr,null),e(Hr,tIr),e(Hr,I7e),e(I7e,aIr),e(Hr,nIr),e(Hr,Fn),e(Fn,sIr),e(Fn,q7e),e(q7e,lIr),e(Fn,iIr),e(Fn,N7e),e(N7e,dIr),e(Fn,cIr),e(Fn,j7e),e(j7e,fIr),e(Fn,mIr),e(Hr,gIr),e(Hr,D7e),e(D7e,iC),e(iC,G7e),e(G7e,hIr),e(iC,pIr),e(iC,yY),e(yY,uIr),e(iC,_Ir),e(Hr,bIr),M(dC,Hr,null),jIe=!0},p(f,[_]){const xx={};_&2&&(xx.$$scope={dirty:_,ctx:f}),lf.$set(xx);const O7e={};_&2&&(O7e.$$scope={dirty:_,ctx:f}),sg.$set(O7e);const V7e={};_&2&&(V7e.$$scope={dirty:_,ctx:f}),Ng.$set(V7e);const X7e={};_&2&&(X7e.$$scope={dirty:_,ctx:f}),mh.$set(X7e);const $x={};_&2&&($x.$$scope={dirty:_,ctx:f}),gh.$set($x);const z7e={};_&2&&(z7e.$$scope={dirty:_,ctx:f}),kh.$set(z7e);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),Sh.$set(Tn);const Q7e={};_&2&&(Q7e.$$scope={dirty:_,ctx:f}),Ph.$set(Q7e);const W7e={};_&2&&(W7e.$$scope={dirty:_,ctx:f}),Cu.$set(W7e);const H7e={};_&2&&(H7e.$$scope={dirty:_,ctx:f}),Au.$set(H7e);const kx={};_&2&&(kx.$$scope={dirty:_,ctx:f}),g_.$set(kx);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:f}),p_.$set(U7e);const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),K_.$set(Sx);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:f}),e0.$set(J7e);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),q0.$set(Rx);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:f}),j0.$set(Y7e);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:f}),a1.$set(K7e);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:f}),s1.$set(Z7e);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),rb.$set(Zc);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),ab.$set(eMe);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),Bb.$set(oMe);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),Ib.$set(rMe);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),Vb.$set(Bx);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),zb.$set(tMe);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),y2.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),x2.$set(nMe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),_v.$set(Jr);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),vv.$set(Px);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),Mv.$set(sMe);const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:f}),Cv.$set(Ix);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),qv.$set(lMe);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),jv.$set(Yr);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),Ov.$set(iMe);const ef={};_&2&&(ef.$$scope={dirty:_,ctx:f}),Xv.$set(ef);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),eF.$set(dMe);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),rF.$set(cMe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),iF.$set(y);const cC={};_&2&&(cC.$$scope={dirty:_,ctx:f}),cF.$set(cC);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),FF.$set(fMe);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),MF.$set(mMe);const fC={};_&2&&(fC.$$scope={dirty:_,ctx:f}),AF.$set(fC);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),LF.$set(gMe);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),BF.$set(hMe);const mC={};_&2&&(mC.$$scope={dirty:_,ctx:f}),IF.$set(mC);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),GF.$set(pMe);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),VF.$set(uMe);const gC={};_&2&&(gC.$$scope={dirty:_,ctx:f}),WF.$set(gC);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),UF.$set(_Me);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),KF.$set(bMe);const hC={};_&2&&(hC.$$scope={dirty:_,ctx:f}),e6.$set(hC);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),s6.$set(vMe);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),i6.$set(FMe);const pC={};_&2&&(pC.$$scope={dirty:_,ctx:f}),f6.$set(pC);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),g6.$set(TMe);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),tT.$set(MMe);const uC={};_&2&&(uC.$$scope={dirty:_,ctx:f}),nT.$set(uC);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),xT.$set(EMe);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),kT.$set(CMe);const _C={};_&2&&(_C.$$scope={dirty:_,ctx:f}),XT.$set(_C);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),QT.$set(wMe);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),UT.$set(AMe);const bC={};_&2&&(bC.$$scope={dirty:_,ctx:f}),YT.$set(bC);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),b7.$set(yMe);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),F7.$set(LMe);const vC={};_&2&&(vC.$$scope={dirty:_,ctx:f}),k7.$set(vC);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),R7.$set(xMe);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),sM.$set($Me);const FC={};_&2&&(FC.$$scope={dirty:_,ctx:f}),iM.$set(FC);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),AM.$set(kMe);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),LM.$set(SMe);const TC={};_&2&&(TC.$$scope={dirty:_,ctx:f}),$M.$set(TC);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),SM.$set(RMe);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),ZM.$set(BMe);const MC={};_&2&&(MC.$$scope={dirty:_,ctx:f}),o4.$set(MC);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),M4.$set(PMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),C4.$set(IMe);const EC={};_&2&&(EC.$$scope={dirty:_,ctx:f}),A4.$set(EC);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),L4.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),$4.$set(NMe);const CC={};_&2&&(CC.$$scope={dirty:_,ctx:f}),S4.$set(CC);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),aE.$set(jMe);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),sE.$set(DMe);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),uE.$set(wC);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),bE.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),kE.$set(OMe);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),RE.$set(AC);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),XE.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),QE.$set(XMe);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),r5.$set(yC);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),a5.$set(zMe);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),p5.$set(QMe);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),_5.$set(LC);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),L5.$set(WMe);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),$5.$set(HMe);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),j5.$set(xC);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),G5.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),J5.$set(JMe);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),K5.$set($C);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),eC.$set(YMe);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),rC.$set(KMe);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),nC.$set(kC);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),lC.$set(ZMe);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),dC.$set(e4e)},i(f){jIe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(xw.$$.fragment,f),E($w.$$.fragment,f),E(lf.$$.fragment,f),E(kw.$$.fragment,f),E(Sw.$$.fragment,f),E(Pw.$$.fragment,f),E(sg.$$.fragment,f),E(Iw.$$.fragment,f),E(qw.$$.fragment,f),E(Nw.$$.fragment,f),E(Gw.$$.fragment,f),E(Ng.$$.fragment,f),E(Ow.$$.fragment,f),E(Vw.$$.fragment,f),E(Xw.$$.fragment,f),E(Ww.$$.fragment,f),E(mh.$$.fragment,f),E(gh.$$.fragment,f),E(Hw.$$.fragment,f),E(Uw.$$.fragment,f),E(Jw.$$.fragment,f),E(Zw.$$.fragment,f),E(kh.$$.fragment,f),E(Sh.$$.fragment,f),E(eA.$$.fragment,f),E(oA.$$.fragment,f),E(rA.$$.fragment,f),E(aA.$$.fragment,f),E(Ph.$$.fragment,f),E(nA.$$.fragment,f),E(Cu.$$.fragment,f),E(sA.$$.fragment,f),E(lA.$$.fragment,f),E(dA.$$.fragment,f),E(Au.$$.fragment,f),E(cA.$$.fragment,f),E(g_.$$.fragment,f),E(fA.$$.fragment,f),E(mA.$$.fragment,f),E(hA.$$.fragment,f),E(p_.$$.fragment,f),E(pA.$$.fragment,f),E(K_.$$.fragment,f),E(uA.$$.fragment,f),E(_A.$$.fragment,f),E(vA.$$.fragment,f),E(e0.$$.fragment,f),E(FA.$$.fragment,f),E(q0.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(CA.$$.fragment,f),E(j0.$$.fragment,f),E(wA.$$.fragment,f),E(a1.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E(xA.$$.fragment,f),E(s1.$$.fragment,f),E($A.$$.fragment,f),E(rb.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(BA.$$.fragment,f),E(ab.$$.fragment,f),E(PA.$$.fragment,f),E(Bb.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(jA.$$.fragment,f),E(Ib.$$.fragment,f),E(DA.$$.fragment,f),E(Vb.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(XA.$$.fragment,f),E(zb.$$.fragment,f),E(zA.$$.fragment,f),E(y2.$$.fragment,f),E(QA.$$.fragment,f),E(WA.$$.fragment,f),E(UA.$$.fragment,f),E(x2.$$.fragment,f),E(JA.$$.fragment,f),E(_v.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(ey.$$.fragment,f),E(vv.$$.fragment,f),E(oy.$$.fragment,f),E(Mv.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(Cv.$$.fragment,f),E(sy.$$.fragment,f),E(qv.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(jv.$$.fragment,f),E(fy.$$.fragment,f),E(Ov.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(Xv.$$.fragment,f),E(uy.$$.fragment,f),E(eF.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(rF.$$.fragment,f),E(Ty.$$.fragment,f),E(iF.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(cF.$$.fragment,f),E(Ay.$$.fragment,f),E(FF.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(MF.$$.fragment,f),E(ky.$$.fragment,f),E(AF.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(LF.$$.fragment,f),E(qy.$$.fragment,f),E(BF.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(IF.$$.fragment,f),E(Oy.$$.fragment,f),E(GF.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(VF.$$.fragment,f),E(Wy.$$.fragment,f),E(WF.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(UF.$$.fragment,f),E(Zy.$$.fragment,f),E(KF.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(e6.$$.fragment,f),E(aL.$$.fragment,f),E(s6.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(i6.$$.fragment,f),E(dL.$$.fragment,f),E(f6.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(g6.$$.fragment,f),E(hL.$$.fragment,f),E(tT.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(nT.$$.fragment,f),E(vL.$$.fragment,f),E(xT.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(kT.$$.fragment,f),E(CL.$$.fragment,f),E(XT.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(QT.$$.fragment,f),E(xL.$$.fragment,f),E(UT.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(BL.$$.fragment,f),E(YT.$$.fragment,f),E(PL.$$.fragment,f),E(b7.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(F7.$$.fragment,f),E(DL.$$.fragment,f),E(k7.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(R7.$$.fragment,f),E(zL.$$.fragment,f),E(sM.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(iM.$$.fragment,f),E(JL.$$.fragment,f),E(AM.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(LM.$$.fragment,f),E(o8.$$.fragment,f),E($M.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(SM.$$.fragment,f),E(s8.$$.fragment,f),E(ZM.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(o4.$$.fragment,f),E(f8.$$.fragment,f),E(M4.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(C4.$$.fragment,f),E(u8.$$.fragment,f),E(A4.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(L4.$$.fragment,f),E(T8.$$.fragment,f),E($4.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(S4.$$.fragment,f),E(A8.$$.fragment,f),E(aE.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(sE.$$.fragment,f),E(k8.$$.fragment,f),E(uE.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(bE.$$.fragment,f),E(I8.$$.fragment,f),E(kE.$$.fragment,f),E(q8.$$.fragment,f),E(N8.$$.fragment,f),E(D8.$$.fragment,f),E(RE.$$.fragment,f),E(G8.$$.fragment,f),E(XE.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(QE.$$.fragment,f),E(Q8.$$.fragment,f),E(r5.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(a5.$$.fragment,f),E(Y8.$$.fragment,f),E(p5.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(ox.$$.fragment,f),E(_5.$$.fragment,f),E(rx.$$.fragment,f),E(L5.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E($5.$$.fragment,f),E(lx.$$.fragment,f),E(j5.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(G5.$$.fragment,f),E(mx.$$.fragment,f),E(J5.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(ux.$$.fragment,f),E(K5.$$.fragment,f),E(_x.$$.fragment,f),E(eC.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(rC.$$.fragment,f),E(Mx.$$.fragment,f),E(nC.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(yx.$$.fragment,f),E(lC.$$.fragment,f),E(Lx.$$.fragment,f),E(dC.$$.fragment,f),jIe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(xw.$$.fragment,f),C($w.$$.fragment,f),C(lf.$$.fragment,f),C(kw.$$.fragment,f),C(Sw.$$.fragment,f),C(Pw.$$.fragment,f),C(sg.$$.fragment,f),C(Iw.$$.fragment,f),C(qw.$$.fragment,f),C(Nw.$$.fragment,f),C(Gw.$$.fragment,f),C(Ng.$$.fragment,f),C(Ow.$$.fragment,f),C(Vw.$$.fragment,f),C(Xw.$$.fragment,f),C(Ww.$$.fragment,f),C(mh.$$.fragment,f),C(gh.$$.fragment,f),C(Hw.$$.fragment,f),C(Uw.$$.fragment,f),C(Jw.$$.fragment,f),C(Zw.$$.fragment,f),C(kh.$$.fragment,f),C(Sh.$$.fragment,f),C(eA.$$.fragment,f),C(oA.$$.fragment,f),C(rA.$$.fragment,f),C(aA.$$.fragment,f),C(Ph.$$.fragment,f),C(nA.$$.fragment,f),C(Cu.$$.fragment,f),C(sA.$$.fragment,f),C(lA.$$.fragment,f),C(dA.$$.fragment,f),C(Au.$$.fragment,f),C(cA.$$.fragment,f),C(g_.$$.fragment,f),C(fA.$$.fragment,f),C(mA.$$.fragment,f),C(hA.$$.fragment,f),C(p_.$$.fragment,f),C(pA.$$.fragment,f),C(K_.$$.fragment,f),C(uA.$$.fragment,f),C(_A.$$.fragment,f),C(vA.$$.fragment,f),C(e0.$$.fragment,f),C(FA.$$.fragment,f),C(q0.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(CA.$$.fragment,f),C(j0.$$.fragment,f),C(wA.$$.fragment,f),C(a1.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C(xA.$$.fragment,f),C(s1.$$.fragment,f),C($A.$$.fragment,f),C(rb.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(BA.$$.fragment,f),C(ab.$$.fragment,f),C(PA.$$.fragment,f),C(Bb.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(jA.$$.fragment,f),C(Ib.$$.fragment,f),C(DA.$$.fragment,f),C(Vb.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(XA.$$.fragment,f),C(zb.$$.fragment,f),C(zA.$$.fragment,f),C(y2.$$.fragment,f),C(QA.$$.fragment,f),C(WA.$$.fragment,f),C(UA.$$.fragment,f),C(x2.$$.fragment,f),C(JA.$$.fragment,f),C(_v.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(ey.$$.fragment,f),C(vv.$$.fragment,f),C(oy.$$.fragment,f),C(Mv.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(Cv.$$.fragment,f),C(sy.$$.fragment,f),C(qv.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(jv.$$.fragment,f),C(fy.$$.fragment,f),C(Ov.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(Xv.$$.fragment,f),C(uy.$$.fragment,f),C(eF.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(rF.$$.fragment,f),C(Ty.$$.fragment,f),C(iF.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(cF.$$.fragment,f),C(Ay.$$.fragment,f),C(FF.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(MF.$$.fragment,f),C(ky.$$.fragment,f),C(AF.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(LF.$$.fragment,f),C(qy.$$.fragment,f),C(BF.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(IF.$$.fragment,f),C(Oy.$$.fragment,f),C(GF.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(VF.$$.fragment,f),C(Wy.$$.fragment,f),C(WF.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(UF.$$.fragment,f),C(Zy.$$.fragment,f),C(KF.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(e6.$$.fragment,f),C(aL.$$.fragment,f),C(s6.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(i6.$$.fragment,f),C(dL.$$.fragment,f),C(f6.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(g6.$$.fragment,f),C(hL.$$.fragment,f),C(tT.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(nT.$$.fragment,f),C(vL.$$.fragment,f),C(xT.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(kT.$$.fragment,f),C(CL.$$.fragment,f),C(XT.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(QT.$$.fragment,f),C(xL.$$.fragment,f),C(UT.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(BL.$$.fragment,f),C(YT.$$.fragment,f),C(PL.$$.fragment,f),C(b7.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(F7.$$.fragment,f),C(DL.$$.fragment,f),C(k7.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(R7.$$.fragment,f),C(zL.$$.fragment,f),C(sM.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(iM.$$.fragment,f),C(JL.$$.fragment,f),C(AM.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(LM.$$.fragment,f),C(o8.$$.fragment,f),C($M.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(SM.$$.fragment,f),C(s8.$$.fragment,f),C(ZM.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(o4.$$.fragment,f),C(f8.$$.fragment,f),C(M4.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(C4.$$.fragment,f),C(u8.$$.fragment,f),C(A4.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(L4.$$.fragment,f),C(T8.$$.fragment,f),C($4.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(S4.$$.fragment,f),C(A8.$$.fragment,f),C(aE.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(sE.$$.fragment,f),C(k8.$$.fragment,f),C(uE.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(bE.$$.fragment,f),C(I8.$$.fragment,f),C(kE.$$.fragment,f),C(q8.$$.fragment,f),C(N8.$$.fragment,f),C(D8.$$.fragment,f),C(RE.$$.fragment,f),C(G8.$$.fragment,f),C(XE.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(QE.$$.fragment,f),C(Q8.$$.fragment,f),C(r5.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(a5.$$.fragment,f),C(Y8.$$.fragment,f),C(p5.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(ox.$$.fragment,f),C(_5.$$.fragment,f),C(rx.$$.fragment,f),C(L5.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C($5.$$.fragment,f),C(lx.$$.fragment,f),C(j5.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(G5.$$.fragment,f),C(mx.$$.fragment,f),C(J5.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(ux.$$.fragment,f),C(K5.$$.fragment,f),C(_x.$$.fragment,f),C(eC.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(rC.$$.fragment,f),C(Mx.$$.fragment,f),C(nC.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(yx.$$.fragment,f),C(lC.$$.fragment,f),C(Lx.$$.fragment,f),C(dC.$$.fragment,f),jIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(rf),f&&t(Kr),f&&t(qe),f&&t(Xe),f&&t(af),w(va,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Fa),f&&t(NBe),f&&t(di),w(xw),f&&t(jBe),f&&t(An),f&&t(DBe),w($w,f),f&&t(GBe),f&&t(W9),f&&t(OBe),w(lf,f),f&&t(VBe),f&&t(ci),w(kw),f&&t(XBe),f&&t(Co),w(Sw),w(Pw),w(sg),w(Iw),f&&t(zBe),f&&t(mi),w(qw),f&&t(QBe),f&&t(wo),w(Nw),w(Gw),w(Ng),w(Ow),f&&t(WBe),f&&t(gi),w(Vw),f&&t(HBe),f&&t(Ao),w(Xw),w(Ww),w(mh),w(gh),w(Hw),f&&t(UBe),f&&t(hi),w(Uw),f&&t(JBe),f&&t(yo),w(Jw),w(Zw),w(kh),w(Sh),w(eA),f&&t(YBe),f&&t(ui),w(oA),f&&t(KBe),f&&t(Lo),w(rA),w(aA),w(Ph),w(nA),w(Cu),f&&t(ZBe),f&&t(vi),w(sA),f&&t(ePe),f&&t(xo),w(lA),w(dA),w(Au),w(cA),w(g_),f&&t(oPe),f&&t(Mi),w(fA),f&&t(rPe),f&&t($o),w(mA),w(hA),w(p_),w(pA),w(K_),f&&t(tPe),f&&t(wi),w(uA),f&&t(aPe),f&&t(ko),w(_A),w(vA),w(e0),w(FA),w(q0),f&&t(nPe),f&&t(Li),w(TA),f&&t(sPe),f&&t(So),w(MA),w(CA),w(j0),w(wA),w(a1),f&&t(lPe),f&&t(ki),w(AA),f&&t(iPe),f&&t(Ro),w(yA),w(xA),w(s1),w($A),w(rb),f&&t(dPe),f&&t(Bi),w(kA),f&&t(cPe),f&&t(Bo),w(SA),w(BA),w(ab),w(PA),w(Bb),f&&t(fPe),f&&t(qi),w(IA),f&&t(mPe),f&&t(Po),w(qA),w(jA),w(Ib),w(DA),w(Vb),f&&t(gPe),f&&t(Di),w(GA),f&&t(hPe),f&&t(Io),w(OA),w(XA),w(zb),w(zA),w(y2),f&&t(pPe),f&&t(Vi),w(QA),f&&t(uPe),f&&t(qo),w(WA),w(UA),w(x2),w(JA),w(_v),f&&t(_Pe),f&&t(Qi),w(YA),f&&t(bPe),f&&t(No),w(KA),w(ey),w(vv),w(oy),w(Mv),f&&t(vPe),f&&t(Ui),w(ry),f&&t(FPe),f&&t(jo),w(ty),w(ny),w(Cv),w(sy),w(qv),f&&t(TPe),f&&t(Ki),w(ly),f&&t(MPe),f&&t(Do),w(iy),w(cy),w(jv),w(fy),w(Ov),f&&t(EPe),f&&t(od),w(my),f&&t(CPe),f&&t(Go),w(gy),w(py),w(Xv),w(uy),w(eF),f&&t(wPe),f&&t(ad),w(_y),f&&t(APe),f&&t(Oo),w(by),w(Fy),w(rF),w(Ty),w(iF),f&&t(yPe),f&&t(ld),w(My),f&&t(LPe),f&&t(Vo),w(Ey),w(wy),w(cF),w(Ay),w(FF),f&&t(xPe),f&&t(cd),w(yy),f&&t($Pe),f&&t(Xo),w(Ly),w($y),w(MF),w(ky),w(AF),f&&t(kPe),f&&t(gd),w(Ry),f&&t(SPe),f&&t(zo),w(By),w(Iy),w(LF),w(qy),w(BF),f&&t(RPe),f&&t(ud),w(Ny),f&&t(BPe),f&&t(Qo),w(jy),w(Gy),w(IF),w(Oy),w(GF),f&&t(PPe),f&&t(Fd),w(Vy),f&&t(IPe),f&&t(Wo),w(Xy),w(Qy),w(VF),w(Wy),w(WF),f&&t(qPe),f&&t(Ed),w(Uy),f&&t(NPe),f&&t(Ho),w(Jy),w(Ky),w(UF),w(Zy),w(KF),f&&t(jPe),f&&t(Ad),w(eL),f&&t(DPe),f&&t(Uo),w(oL),w(tL),w(e6),w(aL),w(s6),f&&t(GPe),f&&t(xd),w(nL),f&&t(OPe),f&&t(Jo),w(sL),w(iL),w(i6),w(dL),w(f6),f&&t(VPe),f&&t(Sd),w(cL),f&&t(XPe),f&&t(Yo),w(fL),w(gL),w(g6),w(hL),w(tT),f&&t(zPe),f&&t(Pd),w(pL),f&&t(QPe),f&&t(Ko),w(uL),w(bL),w(nT),w(vL),w(xT),f&&t(WPe),f&&t(Nd),w(FL),f&&t(HPe),f&&t(Zo),w(TL),w(EL),w(kT),w(CL),w(XT),f&&t(UPe),f&&t(Gd),w(wL),f&&t(JPe),f&&t(er),w(AL),w(LL),w(QT),w(xL),w(UT),f&&t(YPe),f&&t(Xd),w(kL),f&&t(KPe),f&&t(or),w(SL),w(BL),w(YT),w(PL),w(b7),f&&t(ZPe),f&&t(Wd),w(IL),f&&t(eIe),f&&t(rr),w(qL),w(jL),w(F7),w(DL),w(k7),f&&t(oIe),f&&t(Jd),w(GL),f&&t(rIe),f&&t(tr),w(OL),w(XL),w(R7),w(zL),w(sM),f&&t(tIe),f&&t(Zd),w(QL),f&&t(aIe),f&&t(ar),w(WL),w(UL),w(iM),w(JL),w(AM),f&&t(nIe),f&&t(rc),w(YL),f&&t(sIe),f&&t(nr),w(KL),w(e8),w(LM),w(o8),w($M),f&&t(lIe),f&&t(nc),w(r8),f&&t(iIe),f&&t(sr),w(t8),w(n8),w(SM),w(s8),w(ZM),f&&t(dIe),f&&t(ic),w(l8),f&&t(cIe),f&&t(lr),w(i8),w(c8),w(o4),w(f8),w(M4),f&&t(fIe),f&&t(fc),w(m8),f&&t(mIe),f&&t(ir),w(g8),w(p8),w(C4),w(u8),w(A4),f&&t(gIe),f&&t(hc),w(_8),f&&t(hIe),f&&t(dr),w(b8),w(F8),w(L4),w(T8),w($4),f&&t(pIe),f&&t(_c),w(M8),f&&t(uIe),f&&t(cr),w(E8),w(w8),w(S4),w(A8),w(aE),f&&t(_Ie),f&&t(Fc),w(y8),f&&t(bIe),f&&t(fr),w(L8),w($8),w(sE),w(k8),w(uE),f&&t(vIe),f&&t(Ec),w(S8),f&&t(FIe),f&&t(mr),w(R8),w(P8),w(bE),w(I8),w(kE),f&&t(TIe),f&&t(Ac),w(q8),f&&t(MIe),f&&t(gr),w(N8),w(D8),w(RE),w(G8),w(XE),f&&t(EIe),f&&t(xc),w(O8),f&&t(CIe),f&&t(hr),w(V8),w(z8),w(QE),w(Q8),w(r5),f&&t(wIe),f&&t(Sc),w(W8),f&&t(AIe),f&&t(pr),w(H8),w(J8),w(a5),w(Y8),w(p5),f&&t(yIe),f&&t(Pc),w(K8),f&&t(LIe),f&&t(ur),w(Z8),w(ox),w(_5),w(rx),w(L5),f&&t(xIe),f&&t(Nc),w(tx),f&&t($Ie),f&&t(_r),w(ax),w(sx),w($5),w(lx),w(j5),f&&t(kIe),f&&t(Gc),w(ix),f&&t(SIe),f&&t(br),w(dx),w(fx),w(G5),w(mx),w(J5),f&&t(RIe),f&&t(Xc),w(gx),f&&t(BIe),f&&t(vr),w(hx),w(ux),w(K5),w(_x),w(eC),f&&t(PIe),f&&t(Wc),w(bx),f&&t(IIe),f&&t(Fr),w(vx),w(Tx),w(rC),w(Mx),w(nC),f&&t(qIe),f&&t(Jc),w(Cx),f&&t(NIe),f&&t(Tr),w(wx),w(yx),w(lC),w(Lx),w(dC)}}}const Mwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Ewt(L){return wCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class $wt extends TCt{constructor(g){super();MCt(this,g,Ewt,Twt,ECt,{})}}export{$wt as default,Mwt as metadata};
