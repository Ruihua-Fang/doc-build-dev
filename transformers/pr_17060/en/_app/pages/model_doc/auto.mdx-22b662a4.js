import{S as eAt,i as oAt,s as rAt,e as a,k as l,w as F,t as o,M as tAt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as aAt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as $Nr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function nAt(A){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,Qw,hf,qe,Xe,fi,An,Ww,yn,Ln,Hw,mi,xn,Uw,gi,pf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),gf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),Qw=o(")."),hf=l(),qe=a("p"),Xe=o("Likewise, if your "),fi=a("code"),An=o("NewModel"),Ww=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),Hw=o(`, make sure its
`),mi=a("code"),xn=o("config_class"),Uw=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),pf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var h$=s(p);m=r(h$,"NewModelConfig"),h$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var p$=s(ii);gf=r(p$,"model_type"),p$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var u$=s(di);ci=r(u$,'"new-model"'),u$.forEach(t),Qw=r(Ae,")."),Ae.forEach(t),hf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),fi=n(Eo,"CODE",{});var Ea=s(fi);An=r(Ea,"NewModel"),Ea.forEach(t),Ww=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var _$=s(yn);Ln=r(_$,"PreTrainedModel"),_$.forEach(t),Hw=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var uf=s(mi);xn=r(uf,"config_class"),uf.forEach(t),Uw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var b$=s(gi);pf=r(b$,"NewModelConfig"),b$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,gf),e(g,et),e(g,di),e(di,ci),e(g,Qw),b(ze,hf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,fi),e(fi,An),e(qe,Ww),e(qe,yn),e(yn,Ln),e(qe,Hw),e(qe,mi),e(mi,xn),e(qe,Uw),e(qe,gi),e(gi,pf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(hf),ze&&t(qe)}}}function sAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function dAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function fAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(A){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,Qw,hf,qe,Xe,fi,An,Ww,yn,Ln,Hw,mi,xn,Uw,gi,pf,Ma,ze,Ae,h$,hi,p$,u$,Eo,Ea,_$,uf,b$,Yje,DPe,pi,_f,oee,Jw,Kje,ree,Zje,GPe,$n,eDe,tee,oDe,rDe,aee,tDe,aDe,OPe,Yw,VPe,v$,nDe,XPe,bf,zPe,ui,vf,nee,Kw,sDe,see,lDe,QPe,Co,Zw,iDe,eA,dDe,F$,cDe,fDe,mDe,oA,gDe,lee,hDe,pDe,uDe,Er,rA,_De,iee,bDe,vDe,_i,FDe,dee,TDe,MDe,cee,EDe,CDe,wDe,y,Ff,fee,ADe,yDe,T$,LDe,xDe,$De,Tf,mee,kDe,SDe,M$,RDe,BDe,PDe,Mf,gee,IDe,qDe,E$,NDe,jDe,DDe,Ef,hee,GDe,ODe,C$,VDe,XDe,zDe,Cf,pee,QDe,WDe,w$,HDe,UDe,JDe,wf,uee,YDe,KDe,A$,ZDe,eGe,oGe,Af,_ee,rGe,tGe,y$,aGe,nGe,sGe,yf,bee,lGe,iGe,L$,dGe,cGe,fGe,Lf,vee,mGe,gGe,x$,hGe,pGe,uGe,xf,Fee,_Ge,bGe,$$,vGe,FGe,TGe,$f,Tee,MGe,EGe,k$,CGe,wGe,AGe,kf,Mee,yGe,LGe,S$,xGe,$Ge,kGe,Sf,Eee,SGe,RGe,R$,BGe,PGe,IGe,Rf,Cee,qGe,NGe,B$,jGe,DGe,GGe,Bf,wee,OGe,VGe,P$,XGe,zGe,QGe,Pf,Aee,WGe,HGe,I$,UGe,JGe,YGe,If,yee,KGe,ZGe,q$,eOe,oOe,rOe,qf,Lee,tOe,aOe,N$,nOe,sOe,lOe,Nf,xee,iOe,dOe,j$,cOe,fOe,mOe,jf,$ee,gOe,hOe,D$,pOe,uOe,_Oe,Df,kee,bOe,vOe,G$,FOe,TOe,MOe,Gf,See,EOe,COe,O$,wOe,AOe,yOe,Of,Ree,LOe,xOe,V$,$Oe,kOe,SOe,Vf,Bee,ROe,BOe,X$,POe,IOe,qOe,Xf,Pee,NOe,jOe,z$,DOe,GOe,OOe,zf,Iee,VOe,XOe,Q$,zOe,QOe,WOe,Qf,qee,HOe,UOe,W$,JOe,YOe,KOe,Wf,Nee,ZOe,eVe,H$,oVe,rVe,tVe,Hf,jee,aVe,nVe,U$,sVe,lVe,iVe,Uf,Dee,dVe,cVe,J$,fVe,mVe,gVe,Jf,Gee,hVe,pVe,Y$,uVe,_Ve,bVe,Yf,Oee,vVe,FVe,K$,TVe,MVe,EVe,Kf,Vee,CVe,wVe,Z$,AVe,yVe,LVe,Zf,Xee,xVe,$Ve,ek,kVe,SVe,RVe,em,zee,BVe,PVe,ok,IVe,qVe,NVe,om,Qee,jVe,DVe,rk,GVe,OVe,VVe,rm,Wee,XVe,zVe,tk,QVe,WVe,HVe,tm,Hee,UVe,JVe,ak,YVe,KVe,ZVe,am,Uee,eXe,oXe,nk,rXe,tXe,aXe,nm,Jee,nXe,sXe,sk,lXe,iXe,dXe,sm,Yee,cXe,fXe,lk,mXe,gXe,hXe,lm,Kee,pXe,uXe,ik,_Xe,bXe,vXe,im,Zee,FXe,TXe,dk,MXe,EXe,CXe,dm,eoe,wXe,AXe,ck,yXe,LXe,xXe,cm,ooe,$Xe,kXe,fk,SXe,RXe,BXe,fm,roe,PXe,IXe,mk,qXe,NXe,jXe,mm,toe,DXe,GXe,gk,OXe,VXe,XXe,gm,aoe,zXe,QXe,hk,WXe,HXe,UXe,hm,noe,JXe,YXe,pk,KXe,ZXe,eze,pm,soe,oze,rze,uk,tze,aze,nze,um,loe,sze,lze,_k,ize,dze,cze,_m,ioe,fze,mze,bk,gze,hze,pze,bm,doe,uze,_ze,vk,bze,vze,Fze,vm,coe,Tze,Mze,Fk,Eze,Cze,wze,Fm,foe,Aze,yze,Tk,Lze,xze,$ze,Tm,moe,kze,Sze,Mk,Rze,Bze,Pze,Mm,goe,Ize,qze,Ek,Nze,jze,Dze,Em,hoe,Gze,Oze,Ck,Vze,Xze,zze,Cm,poe,Qze,Wze,wk,Hze,Uze,Jze,wm,uoe,Yze,Kze,Ak,Zze,eQe,oQe,Am,_oe,rQe,tQe,yk,aQe,nQe,sQe,ym,boe,lQe,iQe,Lk,dQe,cQe,fQe,Lm,voe,mQe,gQe,xk,hQe,pQe,uQe,xm,Foe,_Qe,bQe,$k,vQe,FQe,TQe,$m,Toe,MQe,EQe,kk,CQe,wQe,AQe,km,Moe,yQe,LQe,Sk,xQe,$Qe,kQe,Sm,Eoe,SQe,RQe,Rk,BQe,PQe,IQe,Rm,Coe,qQe,NQe,Bk,jQe,DQe,GQe,Bm,woe,OQe,VQe,Pk,XQe,zQe,QQe,Pm,Aoe,WQe,HQe,Ik,UQe,JQe,YQe,Im,yoe,KQe,ZQe,qk,eWe,oWe,rWe,qm,Loe,tWe,aWe,Nk,nWe,sWe,lWe,Nm,xoe,iWe,dWe,jk,cWe,fWe,mWe,jm,$oe,gWe,hWe,Dk,pWe,uWe,_We,Dm,koe,bWe,vWe,Gk,FWe,TWe,MWe,Gm,Soe,EWe,CWe,Ok,wWe,AWe,yWe,Om,Roe,LWe,xWe,Vk,$We,kWe,SWe,Vm,Boe,RWe,BWe,Xk,PWe,IWe,qWe,Xm,Poe,NWe,jWe,zk,DWe,GWe,OWe,zm,Ioe,VWe,XWe,Qk,zWe,QWe,WWe,Qm,qoe,HWe,UWe,Wk,JWe,YWe,KWe,Wm,Noe,ZWe,eHe,Hk,oHe,rHe,tHe,Hm,joe,aHe,nHe,Uk,sHe,lHe,iHe,Um,Doe,dHe,cHe,Jk,fHe,mHe,gHe,Jm,Goe,hHe,pHe,Yk,uHe,_He,bHe,Ym,Ooe,vHe,FHe,Kk,THe,MHe,EHe,Km,Voe,CHe,wHe,Zk,AHe,yHe,LHe,Zm,Xoe,xHe,$He,eS,kHe,SHe,RHe,eg,zoe,BHe,PHe,oS,IHe,qHe,NHe,og,Qoe,jHe,DHe,rS,GHe,OHe,VHe,rg,Woe,XHe,zHe,tS,QHe,WHe,HHe,tg,Hoe,UHe,JHe,aS,YHe,KHe,ZHe,ag,Uoe,eUe,oUe,nS,rUe,tUe,aUe,ng,Joe,nUe,sUe,sS,lUe,iUe,dUe,sg,Yoe,cUe,fUe,lS,mUe,gUe,hUe,lg,Koe,pUe,uUe,iS,_Ue,bUe,vUe,ig,Zoe,FUe,TUe,dS,MUe,EUe,CUe,dg,ere,wUe,AUe,cS,yUe,LUe,xUe,cg,ore,$Ue,kUe,fS,SUe,RUe,BUe,fg,rre,PUe,IUe,mS,qUe,NUe,jUe,mg,tre,DUe,GUe,gS,OUe,VUe,XUe,gg,are,zUe,QUe,hS,WUe,HUe,UUe,hg,nre,JUe,YUe,pS,KUe,ZUe,eJe,pg,sre,oJe,rJe,uS,tJe,aJe,nJe,ug,sJe,_g,tA,lJe,lre,iJe,WPe,bi,bg,ire,aA,dJe,dre,cJe,HPe,wo,nA,fJe,sA,mJe,_S,gJe,hJe,pJe,lA,uJe,cre,_Je,bJe,vJe,Cr,iA,FJe,fre,TJe,MJe,Ca,EJe,mre,CJe,wJe,gre,AJe,yJe,hre,LJe,xJe,$Je,k,kn,pre,kJe,SJe,bS,RJe,BJe,vS,PJe,IJe,qJe,Sn,ure,NJe,jJe,FS,DJe,GJe,TS,OJe,VJe,XJe,Rn,_re,zJe,QJe,MS,WJe,HJe,ES,UJe,JJe,YJe,vg,bre,KJe,ZJe,CS,eYe,oYe,rYe,Bn,vre,tYe,aYe,wS,nYe,sYe,AS,lYe,iYe,dYe,Fg,Fre,cYe,fYe,yS,mYe,gYe,hYe,Tg,Tre,pYe,uYe,LS,_Ye,bYe,vYe,Mg,Mre,FYe,TYe,xS,MYe,EYe,CYe,Pn,Ere,wYe,AYe,$S,yYe,LYe,kS,xYe,$Ye,kYe,In,Cre,SYe,RYe,SS,BYe,PYe,RS,IYe,qYe,NYe,qn,wre,jYe,DYe,BS,GYe,OYe,PS,VYe,XYe,zYe,Eg,Are,QYe,WYe,IS,HYe,UYe,JYe,Cg,yre,YYe,KYe,qS,ZYe,eKe,oKe,Nn,Lre,rKe,tKe,NS,aKe,nKe,jS,sKe,lKe,iKe,wg,xre,dKe,cKe,DS,fKe,mKe,gKe,jn,$re,hKe,pKe,GS,uKe,_Ke,OS,bKe,vKe,FKe,Dn,kre,TKe,MKe,VS,EKe,CKe,XS,wKe,AKe,yKe,Gn,Sre,LKe,xKe,zS,$Ke,kKe,QS,SKe,RKe,BKe,Ag,Rre,PKe,IKe,WS,qKe,NKe,jKe,On,Bre,DKe,GKe,HS,OKe,VKe,US,XKe,zKe,QKe,Vn,Pre,WKe,HKe,JS,UKe,JKe,YS,YKe,KKe,ZKe,Xn,Ire,eZe,oZe,KS,rZe,tZe,ZS,aZe,nZe,sZe,zn,qre,lZe,iZe,eR,dZe,cZe,oR,fZe,mZe,gZe,Qn,Nre,hZe,pZe,rR,uZe,_Ze,tR,bZe,vZe,FZe,Wn,jre,TZe,MZe,aR,EZe,CZe,nR,wZe,AZe,yZe,yg,Dre,LZe,xZe,sR,$Ze,kZe,SZe,Hn,Gre,RZe,BZe,lR,PZe,IZe,iR,qZe,NZe,jZe,Lg,Ore,DZe,GZe,dR,OZe,VZe,XZe,Un,Vre,zZe,QZe,cR,WZe,HZe,fR,UZe,JZe,YZe,Jn,Xre,KZe,ZZe,mR,eeo,oeo,gR,reo,teo,aeo,Yn,zre,neo,seo,hR,leo,ieo,pR,deo,ceo,feo,Kn,Qre,meo,geo,uR,heo,peo,_R,ueo,_eo,beo,Zn,Wre,veo,Feo,bR,Teo,Meo,vR,Eeo,Ceo,weo,xg,Hre,Aeo,yeo,FR,Leo,xeo,$eo,es,Ure,keo,Seo,TR,Reo,Beo,MR,Peo,Ieo,qeo,os,Jre,Neo,jeo,ER,Deo,Geo,CR,Oeo,Veo,Xeo,rs,Yre,zeo,Qeo,wR,Weo,Heo,AR,Ueo,Jeo,Yeo,ts,Kre,Keo,Zeo,yR,eoo,ooo,LR,roo,too,aoo,as,Zre,noo,soo,xR,loo,ioo,$R,doo,coo,foo,ns,ete,moo,goo,kR,hoo,poo,SR,uoo,_oo,boo,ss,ote,voo,Foo,RR,Too,Moo,BR,Eoo,Coo,woo,$g,rte,Aoo,yoo,PR,Loo,xoo,$oo,ls,tte,koo,Soo,IR,Roo,Boo,qR,Poo,Ioo,qoo,kg,ate,Noo,joo,NR,Doo,Goo,Ooo,Sg,nte,Voo,Xoo,jR,zoo,Qoo,Woo,is,ste,Hoo,Uoo,DR,Joo,Yoo,GR,Koo,Zoo,ero,ds,lte,oro,rro,OR,tro,aro,VR,nro,sro,lro,cs,ite,iro,dro,XR,cro,fro,zR,mro,gro,hro,Rg,dte,pro,uro,QR,_ro,bro,vro,fs,cte,Fro,Tro,WR,Mro,Ero,HR,Cro,wro,Aro,ms,fte,yro,Lro,UR,xro,$ro,JR,kro,Sro,Rro,gs,mte,Bro,Pro,YR,Iro,qro,KR,Nro,jro,Dro,hs,gte,Gro,Oro,ZR,Vro,Xro,eB,zro,Qro,Wro,ps,hte,Hro,Uro,oB,Jro,Yro,rB,Kro,Zro,eto,us,pte,oto,rto,tB,tto,ato,aB,nto,sto,lto,Bg,ute,ito,dto,nB,cto,fto,mto,Pg,_te,gto,hto,sB,pto,uto,_to,Ig,bte,bto,vto,lB,Fto,Tto,Mto,qg,vte,Eto,Cto,iB,wto,Ato,yto,_s,Fte,Lto,xto,dB,$to,kto,cB,Sto,Rto,Bto,Ng,Tte,Pto,Ito,fB,qto,Nto,jto,bs,Mte,Dto,Gto,mB,Oto,Vto,gB,Xto,zto,Qto,vs,Ete,Wto,Hto,hB,Uto,Jto,pB,Yto,Kto,Zto,Fs,Cte,eao,oao,uB,rao,tao,_B,aao,nao,sao,Ts,wte,lao,iao,bB,dao,cao,vB,fao,mao,gao,Ms,Ate,hao,pao,FB,uao,_ao,TB,bao,vao,Fao,Es,yte,Tao,Mao,MB,Eao,Cao,EB,wao,Aao,yao,jg,Lte,Lao,xao,CB,$ao,kao,Sao,Dg,xte,Rao,Bao,wB,Pao,Iao,qao,Cs,$te,Nao,jao,AB,Dao,Gao,yB,Oao,Vao,Xao,ws,kte,zao,Qao,LB,Wao,Hao,xB,Uao,Jao,Yao,As,Ste,Kao,Zao,$B,eno,ono,kB,rno,tno,ano,Gg,Rte,nno,sno,SB,lno,ino,dno,Og,Bte,cno,fno,RB,mno,gno,hno,Vg,Pte,pno,uno,BB,_no,bno,vno,ys,Ite,Fno,Tno,PB,Mno,Eno,IB,Cno,wno,Ano,Xg,qte,yno,Lno,qB,xno,$no,kno,zg,Nte,Sno,Rno,NB,Bno,Pno,Ino,Ls,jte,qno,Nno,jB,jno,Dno,DB,Gno,Ono,Vno,Qg,Dte,Xno,zno,GB,Qno,Wno,Hno,Wg,Gte,Uno,Jno,OB,Yno,Kno,Zno,xs,Ote,eso,oso,VB,rso,tso,XB,aso,nso,sso,$s,Vte,lso,iso,zB,dso,cso,QB,fso,mso,gso,ks,Xte,hso,pso,WB,uso,_so,HB,bso,vso,Fso,Ss,zte,Tso,Mso,UB,Eso,Cso,JB,wso,Aso,yso,Hg,Lso,Ug,dA,xso,Qte,$so,UPe,vi,Jg,Wte,cA,kso,Hte,Sso,JPe,Ao,fA,Rso,mA,Bso,YB,Pso,Iso,qso,gA,Nso,Ute,jso,Dso,Gso,Qe,hA,Oso,Jte,Vso,Xso,wa,zso,Yte,Qso,Wso,Kte,Hso,Uso,Zte,Jso,Yso,Kso,oe,Yg,eae,Zso,elo,KB,olo,rlo,tlo,Kg,oae,alo,nlo,ZB,slo,llo,ilo,Zg,rae,dlo,clo,eP,flo,mlo,glo,eh,tae,hlo,plo,oP,ulo,_lo,blo,oh,aae,vlo,Flo,rP,Tlo,Mlo,Elo,rh,nae,Clo,wlo,tP,Alo,ylo,Llo,th,sae,xlo,$lo,aP,klo,Slo,Rlo,ah,lae,Blo,Plo,nP,Ilo,qlo,Nlo,nh,iae,jlo,Dlo,sP,Glo,Olo,Vlo,sh,dae,Xlo,zlo,lP,Qlo,Wlo,Hlo,lh,cae,Ulo,Jlo,iP,Ylo,Klo,Zlo,ih,fae,eio,oio,dP,rio,tio,aio,dh,mae,nio,sio,cP,lio,iio,dio,ch,gae,cio,fio,fP,mio,gio,hio,fh,hae,pio,uio,mP,_io,bio,vio,mh,pae,Fio,Tio,gP,Mio,Eio,Cio,gh,uae,wio,Aio,hP,yio,Lio,xio,hh,_ae,$io,kio,pP,Sio,Rio,Bio,ph,bae,Pio,Iio,uP,qio,Nio,jio,uh,vae,Dio,Gio,_P,Oio,Vio,Xio,_h,Fae,zio,Qio,bP,Wio,Hio,Uio,bh,Tae,Jio,Yio,vP,Kio,Zio,edo,vh,Mae,odo,rdo,FP,tdo,ado,ndo,Fh,Eae,sdo,ldo,TP,ido,ddo,cdo,Th,Cae,fdo,mdo,MP,gdo,hdo,pdo,Mh,udo,Eh,_do,Ch,pA,bdo,wae,vdo,YPe,Fi,wh,Aae,uA,Fdo,yae,Tdo,KPe,yo,_A,Mdo,bA,Edo,EP,Cdo,wdo,Ado,vA,ydo,Lae,Ldo,xdo,$do,We,FA,kdo,xae,Sdo,Rdo,Ti,Bdo,$ae,Pdo,Ido,kae,qdo,Ndo,jdo,be,Ah,Sae,Ddo,Gdo,CP,Odo,Vdo,Xdo,yh,Rae,zdo,Qdo,wP,Wdo,Hdo,Udo,Lh,Bae,Jdo,Ydo,AP,Kdo,Zdo,eco,xh,Pae,oco,rco,yP,tco,aco,nco,$h,Iae,sco,lco,LP,ico,dco,cco,kh,qae,fco,mco,xP,gco,hco,pco,Sh,Nae,uco,_co,$P,bco,vco,Fco,Rh,jae,Tco,Mco,kP,Eco,Cco,wco,Bh,Dae,Aco,yco,SP,Lco,xco,$co,Ph,Gae,kco,Sco,RP,Rco,Bco,Pco,Ih,Oae,Ico,qco,BP,Nco,jco,Dco,qh,Vae,Gco,Oco,PP,Vco,Xco,zco,Nh,Xae,Qco,Wco,IP,Hco,Uco,Jco,jh,zae,Yco,Kco,qP,Zco,efo,ofo,Dh,Qae,rfo,tfo,NP,afo,nfo,sfo,Gh,lfo,Oh,ifo,Vh,TA,dfo,Wae,cfo,ZPe,Mi,Xh,Hae,MA,ffo,Uae,mfo,eIe,Lo,EA,gfo,Ei,hfo,jP,pfo,ufo,DP,_fo,bfo,vfo,CA,Ffo,Jae,Tfo,Mfo,Efo,ot,wA,Cfo,Yae,wfo,Afo,Ci,yfo,Kae,Lfo,xfo,GP,$fo,kfo,Sfo,zh,Rfo,He,AA,Bfo,Zae,Pfo,Ifo,Aa,qfo,ene,Nfo,jfo,one,Dfo,Gfo,rne,Ofo,Vfo,Xfo,x,Qh,tne,zfo,Qfo,OP,Wfo,Hfo,Ufo,Wh,ane,Jfo,Yfo,VP,Kfo,Zfo,emo,Hh,nne,omo,rmo,XP,tmo,amo,nmo,Uh,sne,smo,lmo,zP,imo,dmo,cmo,Jh,lne,fmo,mmo,QP,gmo,hmo,pmo,Yh,ine,umo,_mo,WP,bmo,vmo,Fmo,Kh,dne,Tmo,Mmo,HP,Emo,Cmo,wmo,Zh,cne,Amo,ymo,UP,Lmo,xmo,$mo,ep,fne,kmo,Smo,JP,Rmo,Bmo,Pmo,op,mne,Imo,qmo,YP,Nmo,jmo,Dmo,rp,gne,Gmo,Omo,KP,Vmo,Xmo,zmo,tp,hne,Qmo,Wmo,ZP,Hmo,Umo,Jmo,ap,pne,Ymo,Kmo,eI,Zmo,ego,ogo,np,une,rgo,tgo,oI,ago,ngo,sgo,sp,_ne,lgo,igo,rI,dgo,cgo,fgo,lp,bne,mgo,ggo,tI,hgo,pgo,ugo,ip,vne,_go,bgo,aI,vgo,Fgo,Tgo,dp,Fne,Mgo,Ego,nI,Cgo,wgo,Ago,cp,Tne,ygo,Lgo,sI,xgo,$go,kgo,fp,Mne,Sgo,Rgo,lI,Bgo,Pgo,Igo,mp,Ene,qgo,Ngo,iI,jgo,Dgo,Ggo,gp,Cne,Ogo,Vgo,dI,Xgo,zgo,Qgo,hp,wne,Wgo,Hgo,cI,Ugo,Jgo,Ygo,pp,Ane,Kgo,Zgo,fI,eho,oho,rho,up,yne,tho,aho,mI,nho,sho,lho,_p,Lne,iho,dho,gI,cho,fho,mho,bp,xne,gho,hho,hI,pho,uho,_ho,vp,$ne,bho,vho,pI,Fho,Tho,Mho,Fp,kne,Eho,Cho,uI,who,Aho,yho,Tp,Sne,Lho,xho,_I,$ho,kho,Sho,Rs,Rne,Rho,Bho,bI,Pho,Iho,vI,qho,Nho,jho,Mp,Bne,Dho,Gho,FI,Oho,Vho,Xho,Ep,Pne,zho,Qho,TI,Who,Hho,Uho,Cp,Ine,Jho,Yho,MI,Kho,Zho,epo,wp,qne,opo,rpo,EI,tpo,apo,npo,Ap,Nne,spo,lpo,CI,ipo,dpo,cpo,yp,jne,fpo,mpo,wI,gpo,hpo,ppo,Lp,Dne,upo,_po,AI,bpo,vpo,Fpo,xp,Gne,Tpo,Mpo,yI,Epo,Cpo,wpo,$p,One,Apo,ypo,LI,Lpo,xpo,$po,kp,Vne,kpo,Spo,xI,Rpo,Bpo,Ppo,Sp,Xne,Ipo,qpo,$I,Npo,jpo,Dpo,Rp,zne,Gpo,Opo,kI,Vpo,Xpo,zpo,Bp,Qne,Qpo,Wpo,SI,Hpo,Upo,Jpo,Pp,Wne,Ypo,Kpo,RI,Zpo,euo,ouo,Ip,Hne,ruo,tuo,BI,auo,nuo,suo,qp,Une,luo,iuo,PI,duo,cuo,fuo,Np,Jne,muo,guo,II,huo,puo,uuo,jp,Yne,_uo,buo,qI,vuo,Fuo,Tuo,Dp,Kne,Muo,Euo,NI,Cuo,wuo,Auo,Gp,Zne,yuo,Luo,jI,xuo,$uo,kuo,Op,ese,Suo,Ruo,DI,Buo,Puo,Iuo,Vp,ose,quo,Nuo,GI,juo,Duo,Guo,Xp,rse,Ouo,Vuo,OI,Xuo,zuo,Quo,zp,tse,Wuo,Huo,VI,Uuo,Juo,Yuo,Qp,ase,Kuo,Zuo,XI,e_o,o_o,r_o,Wp,nse,t_o,a_o,zI,n_o,s_o,l_o,Hp,sse,i_o,d_o,QI,c_o,f_o,m_o,Up,lse,g_o,h_o,WI,p_o,u_o,__o,Jp,ise,b_o,v_o,HI,F_o,T_o,M_o,Yp,dse,E_o,C_o,UI,w_o,A_o,y_o,Kp,cse,L_o,x_o,JI,$_o,k_o,S_o,Zp,fse,R_o,B_o,YI,P_o,I_o,q_o,eu,mse,N_o,j_o,KI,D_o,G_o,O_o,ou,gse,V_o,X_o,ZI,z_o,Q_o,W_o,ru,hse,H_o,U_o,eq,J_o,Y_o,K_o,tu,pse,Z_o,e0o,oq,o0o,r0o,t0o,au,use,a0o,n0o,rq,s0o,l0o,i0o,nu,_se,d0o,c0o,tq,f0o,m0o,g0o,su,bse,h0o,p0o,aq,u0o,_0o,b0o,lu,vse,v0o,F0o,nq,T0o,M0o,E0o,iu,Fse,C0o,w0o,sq,A0o,y0o,L0o,du,Tse,x0o,$0o,lq,k0o,S0o,R0o,cu,Mse,B0o,P0o,iq,I0o,q0o,N0o,fu,Ese,j0o,D0o,dq,G0o,O0o,V0o,mu,Cse,X0o,z0o,cq,Q0o,W0o,H0o,gu,wse,U0o,J0o,fq,Y0o,K0o,Z0o,hu,Ase,e1o,o1o,mq,r1o,t1o,a1o,pu,yse,n1o,s1o,gq,l1o,i1o,d1o,uu,Lse,c1o,f1o,hq,m1o,g1o,h1o,_u,xse,p1o,u1o,pq,_1o,b1o,v1o,bu,$se,F1o,T1o,uq,M1o,E1o,C1o,vu,kse,w1o,A1o,_q,y1o,L1o,x1o,Fu,Sse,$1o,k1o,bq,S1o,R1o,B1o,Tu,Rse,P1o,I1o,vq,q1o,N1o,j1o,Mu,Bse,D1o,G1o,Fq,O1o,V1o,X1o,Eu,Pse,z1o,Q1o,Tq,W1o,H1o,U1o,Cu,Ise,J1o,Y1o,Mq,K1o,Z1o,ebo,wu,qse,obo,rbo,Eq,tbo,abo,nbo,Au,Nse,sbo,lbo,Cq,ibo,dbo,cbo,yu,jse,fbo,mbo,wq,gbo,hbo,pbo,Lu,Dse,ubo,_bo,Aq,bbo,vbo,Fbo,xu,Gse,Tbo,Mbo,yq,Ebo,Cbo,wbo,$u,Ose,Abo,ybo,Lq,Lbo,xbo,$bo,ku,Vse,kbo,Sbo,xq,Rbo,Bbo,Pbo,Su,Xse,Ibo,qbo,$q,Nbo,jbo,Dbo,Ru,Gbo,zse,Obo,Vbo,Qse,Xbo,zbo,Bu,oIe,wi,Pu,Wse,yA,Qbo,Hse,Wbo,rIe,xo,LA,Hbo,Ai,Ubo,kq,Jbo,Ybo,Sq,Kbo,Zbo,e2o,xA,o2o,Use,r2o,t2o,a2o,rt,$A,n2o,Jse,s2o,l2o,yi,i2o,Yse,d2o,c2o,Rq,f2o,m2o,g2o,Iu,h2o,Ue,kA,p2o,Kse,u2o,_2o,ya,b2o,Zse,v2o,F2o,ele,T2o,M2o,ole,E2o,C2o,w2o,O,qu,rle,A2o,y2o,Bq,L2o,x2o,$2o,Nu,tle,k2o,S2o,Pq,R2o,B2o,P2o,ju,ale,I2o,q2o,Iq,N2o,j2o,D2o,Du,nle,G2o,O2o,qq,V2o,X2o,z2o,Gu,sle,Q2o,W2o,Nq,H2o,U2o,J2o,Ou,lle,Y2o,K2o,jq,Z2o,evo,ovo,Vu,ile,rvo,tvo,Dq,avo,nvo,svo,Xu,dle,lvo,ivo,Gq,dvo,cvo,fvo,zu,cle,mvo,gvo,Oq,hvo,pvo,uvo,Qu,fle,_vo,bvo,Vq,vvo,Fvo,Tvo,Wu,mle,Mvo,Evo,Xq,Cvo,wvo,Avo,Hu,gle,yvo,Lvo,zq,xvo,$vo,kvo,Uu,hle,Svo,Rvo,Qq,Bvo,Pvo,Ivo,Ju,ple,qvo,Nvo,Wq,jvo,Dvo,Gvo,Yu,ule,Ovo,Vvo,Hq,Xvo,zvo,Qvo,Ku,_le,Wvo,Hvo,Uq,Uvo,Jvo,Yvo,Zu,ble,Kvo,Zvo,Jq,eFo,oFo,rFo,e_,vle,tFo,aFo,Yq,nFo,sFo,lFo,o_,Fle,iFo,dFo,Kq,cFo,fFo,mFo,r_,Tle,gFo,hFo,Zq,pFo,uFo,_Fo,t_,Mle,bFo,vFo,eN,FFo,TFo,MFo,a_,Ele,EFo,CFo,oN,wFo,AFo,yFo,n_,Cle,LFo,xFo,rN,$Fo,kFo,SFo,s_,wle,RFo,BFo,tN,PFo,IFo,qFo,l_,Ale,NFo,jFo,aN,DFo,GFo,OFo,i_,yle,VFo,XFo,nN,zFo,QFo,WFo,d_,Lle,HFo,UFo,sN,JFo,YFo,KFo,c_,xle,ZFo,e6o,lN,o6o,r6o,t6o,f_,$le,a6o,n6o,iN,s6o,l6o,i6o,m_,kle,d6o,c6o,dN,f6o,m6o,g6o,g_,Sle,h6o,p6o,cN,u6o,_6o,b6o,h_,Rle,v6o,F6o,fN,T6o,M6o,E6o,p_,Ble,C6o,w6o,mN,A6o,y6o,L6o,u_,Ple,x6o,$6o,gN,k6o,S6o,R6o,__,Ile,B6o,P6o,hN,I6o,q6o,N6o,b_,qle,j6o,D6o,pN,G6o,O6o,V6o,v_,Nle,X6o,z6o,uN,Q6o,W6o,H6o,F_,jle,U6o,J6o,_N,Y6o,K6o,Z6o,T_,Dle,eTo,oTo,bN,rTo,tTo,aTo,M_,nTo,Gle,sTo,lTo,Ole,iTo,dTo,E_,tIe,Li,C_,Vle,SA,cTo,Xle,fTo,aIe,$o,RA,mTo,xi,gTo,vN,hTo,pTo,FN,uTo,_To,bTo,BA,vTo,zle,FTo,TTo,MTo,tt,PA,ETo,Qle,CTo,wTo,$i,ATo,Wle,yTo,LTo,TN,xTo,$To,kTo,w_,STo,Je,IA,RTo,Hle,BTo,PTo,La,ITo,Ule,qTo,NTo,Jle,jTo,DTo,Yle,GTo,OTo,VTo,z,A_,Kle,XTo,zTo,MN,QTo,WTo,HTo,y_,Zle,UTo,JTo,EN,YTo,KTo,ZTo,L_,eie,e7o,o7o,CN,r7o,t7o,a7o,x_,oie,n7o,s7o,wN,l7o,i7o,d7o,$_,rie,c7o,f7o,AN,m7o,g7o,h7o,k_,tie,p7o,u7o,yN,_7o,b7o,v7o,S_,aie,F7o,T7o,LN,M7o,E7o,C7o,R_,nie,w7o,A7o,xN,y7o,L7o,x7o,B_,sie,$7o,k7o,$N,S7o,R7o,B7o,P_,lie,P7o,I7o,kN,q7o,N7o,j7o,I_,iie,D7o,G7o,SN,O7o,V7o,X7o,q_,die,z7o,Q7o,RN,W7o,H7o,U7o,N_,cie,J7o,Y7o,BN,K7o,Z7o,eMo,j_,fie,oMo,rMo,PN,tMo,aMo,nMo,D_,mie,sMo,lMo,IN,iMo,dMo,cMo,G_,gie,fMo,mMo,qN,gMo,hMo,pMo,O_,hie,uMo,_Mo,NN,bMo,vMo,FMo,V_,pie,TMo,MMo,jN,EMo,CMo,wMo,X_,uie,AMo,yMo,DN,LMo,xMo,$Mo,z_,_ie,kMo,SMo,GN,RMo,BMo,PMo,Q_,bie,IMo,qMo,ON,NMo,jMo,DMo,W_,vie,GMo,OMo,VN,VMo,XMo,zMo,H_,Fie,QMo,WMo,XN,HMo,UMo,JMo,U_,Tie,YMo,KMo,zN,ZMo,e4o,o4o,J_,Mie,r4o,t4o,QN,a4o,n4o,s4o,Y_,Eie,l4o,i4o,WN,d4o,c4o,f4o,K_,Cie,m4o,g4o,HN,h4o,p4o,u4o,Z_,wie,_4o,b4o,UN,v4o,F4o,T4o,e0,Aie,M4o,E4o,JN,C4o,w4o,A4o,o0,yie,y4o,L4o,YN,x4o,$4o,k4o,r0,Lie,S4o,R4o,KN,B4o,P4o,I4o,t0,xie,q4o,N4o,ZN,j4o,D4o,G4o,a0,$ie,O4o,V4o,ej,X4o,z4o,Q4o,n0,kie,W4o,H4o,oj,U4o,J4o,Y4o,s0,Sie,K4o,Z4o,rj,eEo,oEo,rEo,l0,tEo,Rie,aEo,nEo,Bie,sEo,lEo,i0,nIe,ki,d0,Pie,qA,iEo,Iie,dEo,sIe,ko,NA,cEo,Si,fEo,tj,mEo,gEo,aj,hEo,pEo,uEo,jA,_Eo,qie,bEo,vEo,FEo,at,DA,TEo,Nie,MEo,EEo,Ri,CEo,jie,wEo,AEo,nj,yEo,LEo,xEo,c0,$Eo,Ye,GA,kEo,Die,SEo,REo,xa,BEo,Gie,PEo,IEo,Oie,qEo,NEo,Vie,jEo,DEo,GEo,Q,f0,Xie,OEo,VEo,sj,XEo,zEo,QEo,m0,zie,WEo,HEo,lj,UEo,JEo,YEo,g0,Qie,KEo,ZEo,ij,e5o,o5o,r5o,h0,Wie,t5o,a5o,dj,n5o,s5o,l5o,p0,Hie,i5o,d5o,cj,c5o,f5o,m5o,u0,Uie,g5o,h5o,fj,p5o,u5o,_5o,_0,Jie,b5o,v5o,mj,F5o,T5o,M5o,b0,Yie,E5o,C5o,gj,w5o,A5o,y5o,v0,Kie,L5o,x5o,hj,$5o,k5o,S5o,F0,Zie,R5o,B5o,pj,P5o,I5o,q5o,T0,ede,N5o,j5o,uj,D5o,G5o,O5o,M0,ode,V5o,X5o,_j,z5o,Q5o,W5o,E0,rde,H5o,U5o,bj,J5o,Y5o,K5o,C0,tde,Z5o,eCo,vj,oCo,rCo,tCo,w0,ade,aCo,nCo,Fj,sCo,lCo,iCo,A0,nde,dCo,cCo,Tj,fCo,mCo,gCo,y0,sde,hCo,pCo,Mj,uCo,_Co,bCo,L0,lde,vCo,FCo,Ej,TCo,MCo,ECo,x0,ide,CCo,wCo,Cj,ACo,yCo,LCo,$0,dde,xCo,$Co,wj,kCo,SCo,RCo,k0,cde,BCo,PCo,Aj,ICo,qCo,NCo,S0,fde,jCo,DCo,yj,GCo,OCo,VCo,R0,mde,XCo,zCo,Lj,QCo,WCo,HCo,B0,gde,UCo,JCo,xj,YCo,KCo,ZCo,P0,hde,e3o,o3o,$j,r3o,t3o,a3o,I0,pde,n3o,s3o,kj,l3o,i3o,d3o,q0,ude,c3o,f3o,Sj,m3o,g3o,h3o,N0,_de,p3o,u3o,Rj,_3o,b3o,v3o,j0,bde,F3o,T3o,Bj,M3o,E3o,C3o,D0,vde,w3o,A3o,Pj,y3o,L3o,x3o,G0,Fde,$3o,k3o,Tde,S3o,R3o,B3o,O0,Mde,P3o,I3o,Ij,q3o,N3o,j3o,V0,Ede,D3o,G3o,qj,O3o,V3o,X3o,X0,Cde,z3o,Q3o,Nj,W3o,H3o,U3o,z0,wde,J3o,Y3o,jj,K3o,Z3o,ewo,Q0,owo,Ade,rwo,two,yde,awo,nwo,W0,lIe,Bi,H0,Lde,OA,swo,xde,lwo,iIe,So,VA,iwo,Pi,dwo,Dj,cwo,fwo,Gj,mwo,gwo,hwo,XA,pwo,$de,uwo,_wo,bwo,nt,zA,vwo,kde,Fwo,Two,Ii,Mwo,Sde,Ewo,Cwo,Oj,wwo,Awo,ywo,U0,Lwo,Ke,QA,xwo,Rde,$wo,kwo,$a,Swo,Bde,Rwo,Bwo,Pde,Pwo,Iwo,Ide,qwo,Nwo,jwo,he,J0,qde,Dwo,Gwo,Vj,Owo,Vwo,Xwo,Y0,Nde,zwo,Qwo,Xj,Wwo,Hwo,Uwo,K0,jde,Jwo,Ywo,zj,Kwo,Zwo,eAo,Z0,Dde,oAo,rAo,Qj,tAo,aAo,nAo,e1,Gde,sAo,lAo,Wj,iAo,dAo,cAo,o1,Ode,fAo,mAo,Hj,gAo,hAo,pAo,r1,Vde,uAo,_Ao,Uj,bAo,vAo,FAo,t1,Xde,TAo,MAo,Jj,EAo,CAo,wAo,a1,zde,AAo,yAo,Yj,LAo,xAo,$Ao,n1,Qde,kAo,SAo,Kj,RAo,BAo,PAo,s1,Wde,IAo,qAo,Zj,NAo,jAo,DAo,l1,Hde,GAo,OAo,eD,VAo,XAo,zAo,i1,Ude,QAo,WAo,oD,HAo,UAo,JAo,d1,Jde,YAo,KAo,rD,ZAo,eyo,oyo,c1,Yde,ryo,tyo,tD,ayo,nyo,syo,f1,Kde,lyo,iyo,aD,dyo,cyo,fyo,m1,Zde,myo,gyo,nD,hyo,pyo,uyo,g1,_yo,ece,byo,vyo,oce,Fyo,Tyo,h1,dIe,qi,p1,rce,WA,Myo,tce,Eyo,cIe,Ro,HA,Cyo,Ni,wyo,sD,Ayo,yyo,lD,Lyo,xyo,$yo,UA,kyo,ace,Syo,Ryo,Byo,st,JA,Pyo,nce,Iyo,qyo,ji,Nyo,sce,jyo,Dyo,iD,Gyo,Oyo,Vyo,u1,Xyo,Ze,YA,zyo,lce,Qyo,Wyo,ka,Hyo,ice,Uyo,Jyo,dce,Yyo,Kyo,cce,Zyo,eLo,oLo,q,_1,fce,rLo,tLo,dD,aLo,nLo,sLo,b1,mce,lLo,iLo,cD,dLo,cLo,fLo,v1,gce,mLo,gLo,fD,hLo,pLo,uLo,F1,hce,_Lo,bLo,mD,vLo,FLo,TLo,T1,pce,MLo,ELo,gD,CLo,wLo,ALo,M1,uce,yLo,LLo,hD,xLo,$Lo,kLo,E1,_ce,SLo,RLo,pD,BLo,PLo,ILo,C1,bce,qLo,NLo,uD,jLo,DLo,GLo,w1,vce,OLo,VLo,_D,XLo,zLo,QLo,A1,Fce,WLo,HLo,bD,ULo,JLo,YLo,y1,Tce,KLo,ZLo,vD,e8o,o8o,r8o,L1,Mce,t8o,a8o,FD,n8o,s8o,l8o,x1,Ece,i8o,d8o,TD,c8o,f8o,m8o,$1,Cce,g8o,h8o,MD,p8o,u8o,_8o,k1,wce,b8o,v8o,ED,F8o,T8o,M8o,S1,Ace,E8o,C8o,CD,w8o,A8o,y8o,R1,yce,L8o,x8o,wD,$8o,k8o,S8o,B1,Lce,R8o,B8o,AD,P8o,I8o,q8o,P1,xce,N8o,j8o,yD,D8o,G8o,O8o,I1,$ce,V8o,X8o,LD,z8o,Q8o,W8o,q1,kce,H8o,U8o,xD,J8o,Y8o,K8o,N1,Sce,Z8o,exo,$D,oxo,rxo,txo,j1,Rce,axo,nxo,kD,sxo,lxo,ixo,D1,Bce,dxo,cxo,SD,fxo,mxo,gxo,G1,Pce,hxo,pxo,RD,uxo,_xo,bxo,O1,Ice,vxo,Fxo,BD,Txo,Mxo,Exo,V1,qce,Cxo,wxo,PD,Axo,yxo,Lxo,X1,Nce,xxo,$xo,ID,kxo,Sxo,Rxo,z1,jce,Bxo,Pxo,qD,Ixo,qxo,Nxo,Q1,Dce,jxo,Dxo,ND,Gxo,Oxo,Vxo,W1,Gce,Xxo,zxo,jD,Qxo,Wxo,Hxo,H1,Oce,Uxo,Jxo,DD,Yxo,Kxo,Zxo,U1,Vce,e9o,o9o,GD,r9o,t9o,a9o,J1,Xce,n9o,s9o,OD,l9o,i9o,d9o,Y1,zce,c9o,f9o,VD,m9o,g9o,h9o,K1,Qce,p9o,u9o,XD,_9o,b9o,v9o,Z1,Wce,F9o,T9o,zD,M9o,E9o,C9o,eb,Hce,w9o,A9o,QD,y9o,L9o,x9o,ob,Uce,$9o,k9o,WD,S9o,R9o,B9o,rb,Jce,P9o,I9o,HD,q9o,N9o,j9o,tb,Yce,D9o,G9o,UD,O9o,V9o,X9o,ab,Kce,z9o,Q9o,JD,W9o,H9o,U9o,nb,Zce,J9o,Y9o,YD,K9o,Z9o,e$o,sb,efe,o$o,r$o,KD,t$o,a$o,n$o,lb,ofe,s$o,l$o,ZD,i$o,d$o,c$o,ib,rfe,f$o,m$o,eG,g$o,h$o,p$o,db,tfe,u$o,_$o,oG,b$o,v$o,F$o,cb,afe,T$o,M$o,rG,E$o,C$o,w$o,fb,A$o,nfe,y$o,L$o,sfe,x$o,$$o,mb,fIe,Di,gb,lfe,KA,k$o,ife,S$o,mIe,Bo,ZA,R$o,Gi,B$o,tG,P$o,I$o,aG,q$o,N$o,j$o,ey,D$o,dfe,G$o,O$o,V$o,lt,oy,X$o,cfe,z$o,Q$o,Oi,W$o,ffe,H$o,U$o,nG,J$o,Y$o,K$o,hb,Z$o,eo,ry,eko,mfe,oko,rko,Sa,tko,gfe,ako,nko,hfe,sko,lko,pfe,iko,dko,cko,Y,pb,ufe,fko,mko,sG,gko,hko,pko,ub,_fe,uko,_ko,lG,bko,vko,Fko,_b,bfe,Tko,Mko,iG,Eko,Cko,wko,bb,vfe,Ako,yko,dG,Lko,xko,$ko,vb,Ffe,kko,Sko,cG,Rko,Bko,Pko,Fb,Tfe,Iko,qko,fG,Nko,jko,Dko,Tb,Mfe,Gko,Oko,mG,Vko,Xko,zko,Mb,Efe,Qko,Wko,gG,Hko,Uko,Jko,Eb,Cfe,Yko,Kko,hG,Zko,eSo,oSo,Cb,wfe,rSo,tSo,pG,aSo,nSo,sSo,wb,Afe,lSo,iSo,uG,dSo,cSo,fSo,Ab,yfe,mSo,gSo,_G,hSo,pSo,uSo,yb,Lfe,_So,bSo,bG,vSo,FSo,TSo,Lb,xfe,MSo,ESo,vG,CSo,wSo,ASo,xb,$fe,ySo,LSo,FG,xSo,$So,kSo,$b,kfe,SSo,RSo,TG,BSo,PSo,ISo,kb,Sfe,qSo,NSo,MG,jSo,DSo,GSo,Sb,Rfe,OSo,VSo,EG,XSo,zSo,QSo,Rb,Bfe,WSo,HSo,CG,USo,JSo,YSo,Bb,Pfe,KSo,ZSo,wG,eRo,oRo,rRo,Pb,Ife,tRo,aRo,AG,nRo,sRo,lRo,Ib,qfe,iRo,dRo,yG,cRo,fRo,mRo,qb,Nfe,gRo,hRo,LG,pRo,uRo,_Ro,Nb,jfe,bRo,vRo,xG,FRo,TRo,MRo,jb,Dfe,ERo,CRo,$G,wRo,ARo,yRo,Db,Gfe,LRo,xRo,kG,$Ro,kRo,SRo,Gb,Ofe,RRo,BRo,SG,PRo,IRo,qRo,Ob,Vfe,NRo,jRo,RG,DRo,GRo,ORo,Vb,Xfe,VRo,XRo,BG,zRo,QRo,WRo,Xb,HRo,zfe,URo,JRo,Qfe,YRo,KRo,zb,gIe,Vi,Qb,Wfe,ty,ZRo,Hfe,eBo,hIe,Po,ay,oBo,Xi,rBo,PG,tBo,aBo,IG,nBo,sBo,lBo,ny,iBo,Ufe,dBo,cBo,fBo,it,sy,mBo,Jfe,gBo,hBo,zi,pBo,Yfe,uBo,_Bo,qG,bBo,vBo,FBo,Wb,TBo,oo,ly,MBo,Kfe,EBo,CBo,Ra,wBo,Zfe,ABo,yBo,eme,LBo,xBo,ome,$Bo,kBo,SBo,Yr,Hb,rme,RBo,BBo,NG,PBo,IBo,qBo,Ub,tme,NBo,jBo,jG,DBo,GBo,OBo,Jb,ame,VBo,XBo,DG,zBo,QBo,WBo,Yb,nme,HBo,UBo,GG,JBo,YBo,KBo,Kb,sme,ZBo,ePo,OG,oPo,rPo,tPo,Zb,aPo,lme,nPo,sPo,ime,lPo,iPo,e2,pIe,Qi,o2,dme,iy,dPo,cme,cPo,uIe,Io,dy,fPo,Wi,mPo,VG,gPo,hPo,XG,pPo,uPo,_Po,cy,bPo,fme,vPo,FPo,TPo,dt,fy,MPo,mme,EPo,CPo,Hi,wPo,gme,APo,yPo,zG,LPo,xPo,$Po,r2,kPo,ro,my,SPo,hme,RPo,BPo,Ba,PPo,pme,IPo,qPo,ume,NPo,jPo,_me,DPo,GPo,OPo,W,t2,bme,VPo,XPo,QG,zPo,QPo,WPo,a2,vme,HPo,UPo,WG,JPo,YPo,KPo,n2,Fme,ZPo,eIo,HG,oIo,rIo,tIo,s2,Tme,aIo,nIo,UG,sIo,lIo,iIo,l2,Mme,dIo,cIo,JG,fIo,mIo,gIo,i2,Eme,hIo,pIo,YG,uIo,_Io,bIo,d2,Cme,vIo,FIo,KG,TIo,MIo,EIo,c2,wme,CIo,wIo,ZG,AIo,yIo,LIo,f2,Ame,xIo,$Io,eO,kIo,SIo,RIo,m2,yme,BIo,PIo,oO,IIo,qIo,NIo,g2,Lme,jIo,DIo,rO,GIo,OIo,VIo,h2,xme,XIo,zIo,tO,QIo,WIo,HIo,p2,$me,UIo,JIo,aO,YIo,KIo,ZIo,u2,kme,eqo,oqo,nO,rqo,tqo,aqo,_2,Sme,nqo,sqo,sO,lqo,iqo,dqo,b2,Rme,cqo,fqo,lO,mqo,gqo,hqo,v2,Bme,pqo,uqo,iO,_qo,bqo,vqo,F2,Pme,Fqo,Tqo,dO,Mqo,Eqo,Cqo,T2,Ime,wqo,Aqo,cO,yqo,Lqo,xqo,M2,qme,$qo,kqo,fO,Sqo,Rqo,Bqo,E2,Nme,Pqo,Iqo,mO,qqo,Nqo,jqo,C2,jme,Dqo,Gqo,gO,Oqo,Vqo,Xqo,w2,Dme,zqo,Qqo,hO,Wqo,Hqo,Uqo,A2,Gme,Jqo,Yqo,pO,Kqo,Zqo,eNo,y2,Ome,oNo,rNo,uO,tNo,aNo,nNo,L2,Vme,sNo,lNo,_O,iNo,dNo,cNo,x2,Xme,fNo,mNo,bO,gNo,hNo,pNo,$2,zme,uNo,_No,vO,bNo,vNo,FNo,k2,Qme,TNo,MNo,FO,ENo,CNo,wNo,S2,Wme,ANo,yNo,TO,LNo,xNo,$No,R2,Hme,kNo,SNo,MO,RNo,BNo,PNo,B2,Ume,INo,qNo,EO,NNo,jNo,DNo,P2,Jme,GNo,ONo,CO,VNo,XNo,zNo,I2,Yme,QNo,WNo,wO,HNo,UNo,JNo,q2,YNo,Kme,KNo,ZNo,Zme,ejo,ojo,N2,_Ie,Ui,j2,ege,gy,rjo,oge,tjo,bIe,qo,hy,ajo,Ji,njo,AO,sjo,ljo,yO,ijo,djo,cjo,py,fjo,rge,mjo,gjo,hjo,ct,uy,pjo,tge,ujo,_jo,Yi,bjo,age,vjo,Fjo,LO,Tjo,Mjo,Ejo,D2,Cjo,to,_y,wjo,nge,Ajo,yjo,Pa,Ljo,sge,xjo,$jo,lge,kjo,Sjo,ige,Rjo,Bjo,Pjo,G,G2,dge,Ijo,qjo,xO,Njo,jjo,Djo,O2,cge,Gjo,Ojo,$O,Vjo,Xjo,zjo,V2,fge,Qjo,Wjo,kO,Hjo,Ujo,Jjo,X2,mge,Yjo,Kjo,SO,Zjo,eDo,oDo,z2,gge,rDo,tDo,RO,aDo,nDo,sDo,Q2,hge,lDo,iDo,BO,dDo,cDo,fDo,W2,pge,mDo,gDo,PO,hDo,pDo,uDo,H2,uge,_Do,bDo,IO,vDo,FDo,TDo,U2,_ge,MDo,EDo,qO,CDo,wDo,ADo,J2,bge,yDo,LDo,NO,xDo,$Do,kDo,Y2,vge,SDo,RDo,jO,BDo,PDo,IDo,K2,Fge,qDo,NDo,DO,jDo,DDo,GDo,Z2,Tge,ODo,VDo,GO,XDo,zDo,QDo,ev,Mge,WDo,HDo,OO,UDo,JDo,YDo,ov,Ege,KDo,ZDo,VO,eGo,oGo,rGo,rv,Cge,tGo,aGo,XO,nGo,sGo,lGo,tv,wge,iGo,dGo,zO,cGo,fGo,mGo,av,Age,gGo,hGo,QO,pGo,uGo,_Go,nv,yge,bGo,vGo,WO,FGo,TGo,MGo,sv,Lge,EGo,CGo,HO,wGo,AGo,yGo,lv,xge,LGo,xGo,UO,$Go,kGo,SGo,iv,$ge,RGo,BGo,JO,PGo,IGo,qGo,dv,kge,NGo,jGo,YO,DGo,GGo,OGo,cv,Sge,VGo,XGo,KO,zGo,QGo,WGo,fv,Rge,HGo,UGo,ZO,JGo,YGo,KGo,mv,Bge,ZGo,eOo,eV,oOo,rOo,tOo,gv,Pge,aOo,nOo,oV,sOo,lOo,iOo,hv,Ige,dOo,cOo,rV,fOo,mOo,gOo,pv,qge,hOo,pOo,tV,uOo,_Oo,bOo,uv,Nge,vOo,FOo,aV,TOo,MOo,EOo,_v,jge,COo,wOo,nV,AOo,yOo,LOo,bv,Dge,xOo,$Oo,sV,kOo,SOo,ROo,vv,Gge,BOo,POo,lV,IOo,qOo,NOo,Fv,Oge,jOo,DOo,iV,GOo,OOo,VOo,Tv,Vge,XOo,zOo,dV,QOo,WOo,HOo,Mv,Xge,UOo,JOo,cV,YOo,KOo,ZOo,Ev,zge,eVo,oVo,fV,rVo,tVo,aVo,Cv,Qge,nVo,sVo,mV,lVo,iVo,dVo,wv,Wge,cVo,fVo,gV,mVo,gVo,hVo,Av,Hge,pVo,uVo,hV,_Vo,bVo,vVo,yv,FVo,Uge,TVo,MVo,Jge,EVo,CVo,Lv,vIe,Ki,xv,Yge,by,wVo,Kge,AVo,FIe,No,vy,yVo,Zi,LVo,pV,xVo,$Vo,uV,kVo,SVo,RVo,Fy,BVo,Zge,PVo,IVo,qVo,ft,Ty,NVo,ehe,jVo,DVo,ed,GVo,ohe,OVo,VVo,_V,XVo,zVo,QVo,$v,WVo,ao,My,HVo,rhe,UVo,JVo,Ia,YVo,the,KVo,ZVo,ahe,eXo,oXo,nhe,rXo,tXo,aXo,she,kv,lhe,nXo,sXo,bV,lXo,iXo,dXo,Sv,cXo,ihe,fXo,mXo,dhe,gXo,hXo,Rv,TIe,od,Bv,che,Ey,pXo,fhe,uXo,MIe,jo,Cy,_Xo,rd,bXo,vV,vXo,FXo,FV,TXo,MXo,EXo,wy,CXo,mhe,wXo,AXo,yXo,mt,Ay,LXo,ghe,xXo,$Xo,td,kXo,hhe,SXo,RXo,TV,BXo,PXo,IXo,Pv,qXo,no,yy,NXo,phe,jXo,DXo,qa,GXo,uhe,OXo,VXo,_he,XXo,zXo,bhe,QXo,WXo,HXo,Fe,Iv,vhe,UXo,JXo,MV,YXo,KXo,ZXo,qv,Fhe,ezo,ozo,EV,rzo,tzo,azo,Nv,The,nzo,szo,CV,lzo,izo,dzo,Bs,Mhe,czo,fzo,wV,mzo,gzo,AV,hzo,pzo,uzo,jv,Ehe,_zo,bzo,yV,vzo,Fzo,Tzo,gt,Che,Mzo,Ezo,LV,Czo,wzo,xV,Azo,yzo,$V,Lzo,xzo,$zo,Dv,whe,kzo,Szo,kV,Rzo,Bzo,Pzo,Gv,Ahe,Izo,qzo,SV,Nzo,jzo,Dzo,Ov,yhe,Gzo,Ozo,RV,Vzo,Xzo,zzo,Vv,Lhe,Qzo,Wzo,BV,Hzo,Uzo,Jzo,Xv,xhe,Yzo,Kzo,PV,Zzo,eQo,oQo,zv,$he,rQo,tQo,IV,aQo,nQo,sQo,Qv,khe,lQo,iQo,qV,dQo,cQo,fQo,Wv,mQo,She,gQo,hQo,Rhe,pQo,uQo,Hv,EIe,ad,Uv,Bhe,Ly,_Qo,Phe,bQo,CIe,Do,xy,vQo,nd,FQo,NV,TQo,MQo,jV,EQo,CQo,wQo,$y,AQo,Ihe,yQo,LQo,xQo,ht,ky,$Qo,qhe,kQo,SQo,sd,RQo,Nhe,BQo,PQo,DV,IQo,qQo,NQo,Jv,jQo,so,Sy,DQo,jhe,GQo,OQo,Na,VQo,Dhe,XQo,zQo,Ghe,QQo,WQo,Ohe,HQo,UQo,JQo,Vhe,Yv,Xhe,YQo,KQo,GV,ZQo,eWo,oWo,Kv,rWo,zhe,tWo,aWo,Qhe,nWo,sWo,Zv,wIe,ld,eF,Whe,Ry,lWo,Hhe,iWo,AIe,Go,By,dWo,id,cWo,OV,fWo,mWo,VV,gWo,hWo,pWo,Py,uWo,Uhe,_Wo,bWo,vWo,pt,Iy,FWo,Jhe,TWo,MWo,dd,EWo,Yhe,CWo,wWo,XV,AWo,yWo,LWo,oF,xWo,lo,qy,$Wo,Khe,kWo,SWo,ja,RWo,Zhe,BWo,PWo,epe,IWo,qWo,ope,NWo,jWo,DWo,Ne,rF,rpe,GWo,OWo,zV,VWo,XWo,zWo,tF,tpe,QWo,WWo,QV,HWo,UWo,JWo,aF,ape,YWo,KWo,WV,ZWo,eHo,oHo,nF,npe,rHo,tHo,HV,aHo,nHo,sHo,sF,spe,lHo,iHo,UV,dHo,cHo,fHo,lF,lpe,mHo,gHo,JV,hHo,pHo,uHo,iF,ipe,_Ho,bHo,YV,vHo,FHo,THo,dF,dpe,MHo,EHo,KV,CHo,wHo,AHo,cF,yHo,cpe,LHo,xHo,fpe,$Ho,kHo,fF,yIe,cd,mF,mpe,Ny,SHo,gpe,RHo,LIe,Oo,jy,BHo,fd,PHo,ZV,IHo,qHo,eX,NHo,jHo,DHo,Dy,GHo,hpe,OHo,VHo,XHo,ut,Gy,zHo,ppe,QHo,WHo,md,HHo,upe,UHo,JHo,oX,YHo,KHo,ZHo,gF,eUo,io,Oy,oUo,_pe,rUo,tUo,Da,aUo,bpe,nUo,sUo,vpe,lUo,iUo,Fpe,dUo,cUo,fUo,Ga,hF,Tpe,mUo,gUo,rX,hUo,pUo,uUo,pF,Mpe,_Uo,bUo,tX,vUo,FUo,TUo,uF,Epe,MUo,EUo,aX,CUo,wUo,AUo,_F,Cpe,yUo,LUo,nX,xUo,$Uo,kUo,bF,SUo,wpe,RUo,BUo,Ape,PUo,IUo,vF,xIe,gd,FF,ype,Vy,qUo,Lpe,NUo,$Ie,Vo,Xy,jUo,hd,DUo,sX,GUo,OUo,lX,VUo,XUo,zUo,zy,QUo,xpe,WUo,HUo,UUo,_t,Qy,JUo,$pe,YUo,KUo,pd,ZUo,kpe,eJo,oJo,iX,rJo,tJo,aJo,TF,nJo,co,Wy,sJo,Spe,lJo,iJo,Oa,dJo,Rpe,cJo,fJo,Bpe,mJo,gJo,Ppe,hJo,pJo,uJo,je,MF,Ipe,_Jo,bJo,dX,vJo,FJo,TJo,EF,qpe,MJo,EJo,cX,CJo,wJo,AJo,CF,Npe,yJo,LJo,fX,xJo,$Jo,kJo,wF,jpe,SJo,RJo,mX,BJo,PJo,IJo,AF,Dpe,qJo,NJo,gX,jJo,DJo,GJo,yF,Gpe,OJo,VJo,hX,XJo,zJo,QJo,LF,Ope,WJo,HJo,pX,UJo,JJo,YJo,xF,Vpe,KJo,ZJo,uX,eYo,oYo,rYo,$F,tYo,Xpe,aYo,nYo,zpe,sYo,lYo,kF,kIe,ud,SF,Qpe,Hy,iYo,Wpe,dYo,SIe,Xo,Uy,cYo,_d,fYo,_X,mYo,gYo,bX,hYo,pYo,uYo,Jy,_Yo,Hpe,bYo,vYo,FYo,bt,Yy,TYo,Upe,MYo,EYo,bd,CYo,Jpe,wYo,AYo,vX,yYo,LYo,xYo,RF,$Yo,fo,Ky,kYo,Ype,SYo,RYo,Va,BYo,Kpe,PYo,IYo,Zpe,qYo,NYo,eue,jYo,DYo,GYo,Zy,BF,oue,OYo,VYo,FX,XYo,zYo,QYo,PF,rue,WYo,HYo,TX,UYo,JYo,YYo,IF,KYo,tue,ZYo,eKo,aue,oKo,rKo,qF,RIe,vd,NF,nue,eL,tKo,sue,aKo,BIe,zo,oL,nKo,Fd,sKo,MX,lKo,iKo,EX,dKo,cKo,fKo,rL,mKo,lue,gKo,hKo,pKo,vt,tL,uKo,iue,_Ko,bKo,Td,vKo,due,FKo,TKo,CX,MKo,EKo,CKo,jF,wKo,mo,aL,AKo,cue,yKo,LKo,Xa,xKo,fue,$Ko,kKo,mue,SKo,RKo,gue,BKo,PKo,IKo,za,DF,hue,qKo,NKo,wX,jKo,DKo,GKo,GF,pue,OKo,VKo,AX,XKo,zKo,QKo,OF,uue,WKo,HKo,yX,UKo,JKo,YKo,VF,_ue,KKo,ZKo,LX,eZo,oZo,rZo,XF,tZo,bue,aZo,nZo,vue,sZo,lZo,zF,PIe,Md,QF,Fue,nL,iZo,Tue,dZo,IIe,Qo,sL,cZo,Ed,fZo,xX,mZo,gZo,$X,hZo,pZo,uZo,lL,_Zo,Mue,bZo,vZo,FZo,Ft,iL,TZo,Eue,MZo,EZo,Cd,CZo,Cue,wZo,AZo,kX,yZo,LZo,xZo,WF,$Zo,go,dL,kZo,wue,SZo,RZo,Qa,BZo,Aue,PZo,IZo,yue,qZo,NZo,Lue,jZo,DZo,GZo,wd,HF,xue,OZo,VZo,SX,XZo,zZo,QZo,UF,$ue,WZo,HZo,RX,UZo,JZo,YZo,JF,kue,KZo,ZZo,BX,eer,oer,rer,YF,ter,Sue,aer,ner,Rue,ser,ler,KF,qIe,Ad,ZF,Bue,cL,ier,Pue,der,NIe,Wo,fL,cer,yd,fer,PX,mer,ger,IX,her,per,uer,mL,_er,Iue,ber,ver,Fer,Tt,gL,Ter,que,Mer,Eer,Ld,Cer,Nue,wer,Aer,qX,yer,Ler,xer,e6,$er,ho,hL,ker,jue,Ser,Rer,Wa,Ber,Due,Per,Ier,Gue,qer,Ner,Oue,jer,Der,Ger,pL,o6,Vue,Oer,Ver,NX,Xer,zer,Qer,r6,Xue,Wer,Her,jX,Uer,Jer,Yer,t6,Ker,zue,Zer,eor,Que,oor,ror,a6,jIe,xd,n6,Wue,uL,tor,Hue,aor,DIe,Ho,_L,nor,$d,sor,DX,lor,ior,GX,dor,cor,mor,bL,gor,Uue,hor,por,uor,Mt,vL,_or,Jue,bor,vor,kd,For,Yue,Tor,Mor,OX,Eor,Cor,wor,s6,Aor,po,FL,yor,Kue,Lor,xor,Ha,$or,Zue,kor,Sor,e_e,Ror,Bor,o_e,Por,Ior,qor,r_e,l6,t_e,Nor,jor,VX,Dor,Gor,Oor,i6,Vor,a_e,Xor,zor,n_e,Qor,Wor,d6,GIe,Sd,c6,s_e,TL,Hor,l_e,Uor,OIe,Uo,ML,Jor,Rd,Yor,XX,Kor,Zor,zX,err,orr,rrr,EL,trr,i_e,arr,nrr,srr,Et,CL,lrr,d_e,irr,drr,Bd,crr,c_e,frr,mrr,QX,grr,hrr,prr,f6,urr,uo,wL,_rr,f_e,brr,vrr,Ua,Frr,m_e,Trr,Mrr,g_e,Err,Crr,h_e,wrr,Arr,yrr,Ja,m6,p_e,Lrr,xrr,WX,$rr,krr,Srr,g6,u_e,Rrr,Brr,HX,Prr,Irr,qrr,h6,__e,Nrr,jrr,UX,Drr,Grr,Orr,p6,b_e,Vrr,Xrr,JX,zrr,Qrr,Wrr,u6,Hrr,v_e,Urr,Jrr,F_e,Yrr,Krr,_6,VIe,Pd,b6,T_e,AL,Zrr,M_e,etr,XIe,Jo,yL,otr,Id,rtr,YX,ttr,atr,KX,ntr,str,ltr,LL,itr,E_e,dtr,ctr,ftr,Ct,xL,mtr,C_e,gtr,htr,qd,ptr,w_e,utr,_tr,ZX,btr,vtr,Ftr,v6,Ttr,_o,$L,Mtr,A_e,Etr,Ctr,Ya,wtr,y_e,Atr,ytr,L_e,Ltr,xtr,x_e,$tr,ktr,Str,$_e,F6,k_e,Rtr,Btr,ez,Ptr,Itr,qtr,T6,Ntr,S_e,jtr,Dtr,R_e,Gtr,Otr,M6,zIe,Nd,E6,B_e,kL,Vtr,P_e,Xtr,QIe,Yo,SL,ztr,jd,Qtr,oz,Wtr,Htr,rz,Utr,Jtr,Ytr,RL,Ktr,I_e,Ztr,ear,oar,wt,BL,rar,q_e,tar,aar,Dd,nar,N_e,sar,lar,tz,iar,dar,car,C6,far,wr,PL,mar,j_e,gar,har,Ka,par,D_e,uar,_ar,G_e,bar,Far,O_e,Tar,Mar,Ear,j,w6,V_e,Car,war,az,Aar,yar,Lar,A6,X_e,xar,$ar,nz,kar,Sar,Rar,y6,z_e,Bar,Par,sz,Iar,qar,Nar,L6,Q_e,jar,Dar,lz,Gar,Oar,Var,x6,W_e,Xar,zar,iz,Qar,War,Har,$6,H_e,Uar,Jar,dz,Yar,Kar,Zar,k6,U_e,enr,onr,cz,rnr,tnr,anr,S6,J_e,nnr,snr,fz,lnr,inr,dnr,R6,Y_e,cnr,fnr,mz,mnr,gnr,hnr,B6,K_e,pnr,unr,gz,_nr,bnr,vnr,P6,Z_e,Fnr,Tnr,hz,Mnr,Enr,Cnr,I6,e0e,wnr,Anr,pz,ynr,Lnr,xnr,q6,o0e,$nr,knr,uz,Snr,Rnr,Bnr,N6,r0e,Pnr,Inr,_z,qnr,Nnr,jnr,j6,t0e,Dnr,Gnr,bz,Onr,Vnr,Xnr,D6,a0e,znr,Qnr,vz,Wnr,Hnr,Unr,G6,n0e,Jnr,Ynr,Fz,Knr,Znr,esr,Ps,s0e,osr,rsr,Tz,tsr,asr,Mz,nsr,ssr,lsr,O6,l0e,isr,dsr,Ez,csr,fsr,msr,V6,i0e,gsr,hsr,Cz,psr,usr,_sr,X6,d0e,bsr,vsr,wz,Fsr,Tsr,Msr,z6,c0e,Esr,Csr,Az,wsr,Asr,ysr,Q6,f0e,Lsr,xsr,yz,$sr,ksr,Ssr,W6,m0e,Rsr,Bsr,Lz,Psr,Isr,qsr,H6,g0e,Nsr,jsr,xz,Dsr,Gsr,Osr,U6,h0e,Vsr,Xsr,$z,zsr,Qsr,Wsr,J6,p0e,Hsr,Usr,kz,Jsr,Ysr,Ksr,Y6,u0e,Zsr,elr,Sz,olr,rlr,tlr,K6,_0e,alr,nlr,Rz,slr,llr,ilr,Z6,b0e,dlr,clr,Bz,flr,mlr,glr,eT,v0e,hlr,plr,Pz,ulr,_lr,blr,oT,F0e,vlr,Flr,Iz,Tlr,Mlr,Elr,rT,T0e,Clr,wlr,qz,Alr,ylr,Llr,tT,M0e,xlr,$lr,Nz,klr,Slr,Rlr,aT,E0e,Blr,Plr,jz,Ilr,qlr,Nlr,nT,C0e,jlr,Dlr,Dz,Glr,Olr,Vlr,sT,w0e,Xlr,zlr,Gz,Qlr,Wlr,Hlr,lT,A0e,Ulr,Jlr,Oz,Ylr,Klr,Zlr,iT,y0e,eir,oir,Vz,rir,tir,air,dT,L0e,nir,sir,Xz,lir,iir,dir,cT,x0e,cir,fir,zz,mir,gir,hir,fT,$0e,pir,uir,Qz,_ir,bir,vir,mT,k0e,Fir,Tir,Wz,Mir,Eir,Cir,gT,S0e,wir,Air,Hz,yir,Lir,xir,hT,R0e,$ir,kir,Uz,Sir,Rir,Bir,pT,WIe,Gd,uT,B0e,IL,Pir,P0e,Iir,HIe,Ko,qL,qir,Od,Nir,Jz,jir,Dir,Yz,Gir,Oir,Vir,NL,Xir,I0e,zir,Qir,Wir,At,jL,Hir,q0e,Uir,Jir,Vd,Yir,N0e,Kir,Zir,Kz,edr,odr,rdr,_T,tdr,Ar,DL,adr,j0e,ndr,sdr,Za,ldr,D0e,idr,ddr,G0e,cdr,fdr,O0e,mdr,gdr,hdr,se,bT,V0e,pdr,udr,Zz,_dr,bdr,vdr,vT,X0e,Fdr,Tdr,eQ,Mdr,Edr,Cdr,FT,z0e,wdr,Adr,oQ,ydr,Ldr,xdr,TT,Q0e,$dr,kdr,rQ,Sdr,Rdr,Bdr,MT,W0e,Pdr,Idr,tQ,qdr,Ndr,jdr,ET,H0e,Ddr,Gdr,aQ,Odr,Vdr,Xdr,CT,U0e,zdr,Qdr,nQ,Wdr,Hdr,Udr,wT,J0e,Jdr,Ydr,sQ,Kdr,Zdr,ecr,AT,Y0e,ocr,rcr,lQ,tcr,acr,ncr,yT,K0e,scr,lcr,iQ,icr,dcr,ccr,LT,Z0e,fcr,mcr,dQ,gcr,hcr,pcr,xT,e1e,ucr,_cr,cQ,bcr,vcr,Fcr,$T,o1e,Tcr,Mcr,fQ,Ecr,Ccr,wcr,kT,r1e,Acr,ycr,mQ,Lcr,xcr,$cr,ST,t1e,kcr,Scr,gQ,Rcr,Bcr,Pcr,RT,a1e,Icr,qcr,hQ,Ncr,jcr,Dcr,BT,n1e,Gcr,Ocr,pQ,Vcr,Xcr,zcr,PT,s1e,Qcr,Wcr,uQ,Hcr,Ucr,Jcr,IT,l1e,Ycr,Kcr,_Q,Zcr,efr,ofr,qT,i1e,rfr,tfr,bQ,afr,nfr,sfr,NT,d1e,lfr,ifr,vQ,dfr,cfr,ffr,jT,c1e,mfr,gfr,FQ,hfr,pfr,ufr,DT,f1e,_fr,bfr,TQ,vfr,Ffr,Tfr,GT,UIe,Xd,OT,m1e,GL,Mfr,g1e,Efr,JIe,Zo,OL,Cfr,zd,wfr,MQ,Afr,yfr,EQ,Lfr,xfr,$fr,VL,kfr,h1e,Sfr,Rfr,Bfr,yt,XL,Pfr,p1e,Ifr,qfr,Qd,Nfr,u1e,jfr,Dfr,CQ,Gfr,Ofr,Vfr,VT,Xfr,yr,zL,zfr,_1e,Qfr,Wfr,en,Hfr,b1e,Ufr,Jfr,v1e,Yfr,Kfr,F1e,Zfr,emr,omr,Te,XT,T1e,rmr,tmr,wQ,amr,nmr,smr,zT,M1e,lmr,imr,AQ,dmr,cmr,fmr,QT,E1e,mmr,gmr,yQ,hmr,pmr,umr,WT,C1e,_mr,bmr,LQ,vmr,Fmr,Tmr,HT,w1e,Mmr,Emr,xQ,Cmr,wmr,Amr,UT,A1e,ymr,Lmr,$Q,xmr,$mr,kmr,JT,y1e,Smr,Rmr,kQ,Bmr,Pmr,Imr,YT,L1e,qmr,Nmr,SQ,jmr,Dmr,Gmr,KT,x1e,Omr,Vmr,RQ,Xmr,zmr,Qmr,ZT,$1e,Wmr,Hmr,BQ,Umr,Jmr,Ymr,e7,k1e,Kmr,Zmr,PQ,egr,ogr,rgr,o7,S1e,tgr,agr,IQ,ngr,sgr,lgr,r7,YIe,Wd,t7,R1e,QL,igr,B1e,dgr,KIe,er,WL,cgr,Hd,fgr,qQ,mgr,ggr,NQ,hgr,pgr,ugr,HL,_gr,P1e,bgr,vgr,Fgr,Lt,UL,Tgr,I1e,Mgr,Egr,Ud,Cgr,q1e,wgr,Agr,jQ,ygr,Lgr,xgr,a7,$gr,Lr,JL,kgr,N1e,Sgr,Rgr,on,Bgr,j1e,Pgr,Igr,D1e,qgr,Ngr,G1e,jgr,Dgr,Ggr,Jd,n7,O1e,Ogr,Vgr,DQ,Xgr,zgr,Qgr,s7,V1e,Wgr,Hgr,GQ,Ugr,Jgr,Ygr,l7,X1e,Kgr,Zgr,OQ,ehr,ohr,rhr,i7,ZIe,Yd,d7,z1e,YL,thr,Q1e,ahr,eqe,or,KL,nhr,Kd,shr,VQ,lhr,ihr,XQ,dhr,chr,fhr,ZL,mhr,W1e,ghr,hhr,phr,xt,e8,uhr,H1e,_hr,bhr,Zd,vhr,U1e,Fhr,Thr,zQ,Mhr,Ehr,Chr,c7,whr,xr,o8,Ahr,J1e,yhr,Lhr,rn,xhr,Y1e,$hr,khr,K1e,Shr,Rhr,Z1e,Bhr,Phr,Ihr,ie,f7,ebe,qhr,Nhr,QQ,jhr,Dhr,Ghr,m7,obe,Ohr,Vhr,WQ,Xhr,zhr,Qhr,g7,rbe,Whr,Hhr,HQ,Uhr,Jhr,Yhr,h7,tbe,Khr,Zhr,UQ,epr,opr,rpr,p7,abe,tpr,apr,JQ,npr,spr,lpr,u7,nbe,ipr,dpr,YQ,cpr,fpr,mpr,_7,sbe,gpr,hpr,KQ,ppr,upr,_pr,b7,lbe,bpr,vpr,ZQ,Fpr,Tpr,Mpr,v7,ibe,Epr,Cpr,eW,wpr,Apr,ypr,F7,dbe,Lpr,xpr,oW,$pr,kpr,Spr,T7,cbe,Rpr,Bpr,rW,Ppr,Ipr,qpr,M7,fbe,Npr,jpr,tW,Dpr,Gpr,Opr,E7,mbe,Vpr,Xpr,aW,zpr,Qpr,Wpr,C7,gbe,Hpr,Upr,nW,Jpr,Ypr,Kpr,w7,hbe,Zpr,eur,sW,our,rur,tur,A7,pbe,aur,nur,lW,sur,lur,iur,y7,ube,dur,cur,iW,fur,mur,gur,L7,_be,hur,pur,dW,uur,_ur,bur,x7,bbe,vur,Fur,cW,Tur,Mur,Eur,$7,vbe,Cur,wur,fW,Aur,yur,Lur,k7,oqe,ec,S7,Fbe,r8,xur,Tbe,$ur,rqe,rr,t8,kur,oc,Sur,mW,Rur,Bur,gW,Pur,Iur,qur,a8,Nur,Mbe,jur,Dur,Gur,$t,n8,Our,Ebe,Vur,Xur,rc,zur,Cbe,Qur,Wur,hW,Hur,Uur,Jur,R7,Yur,$r,s8,Kur,wbe,Zur,e_r,tn,o_r,Abe,r_r,t_r,ybe,a_r,n_r,Lbe,s_r,l_r,i_r,ye,B7,xbe,d_r,c_r,pW,f_r,m_r,g_r,P7,$be,h_r,p_r,uW,u_r,__r,b_r,I7,kbe,v_r,F_r,_W,T_r,M_r,E_r,q7,Sbe,C_r,w_r,bW,A_r,y_r,L_r,N7,Rbe,x_r,$_r,vW,k_r,S_r,R_r,j7,Bbe,B_r,P_r,FW,I_r,q_r,N_r,D7,Pbe,j_r,D_r,TW,G_r,O_r,V_r,G7,Ibe,X_r,z_r,MW,Q_r,W_r,H_r,O7,qbe,U_r,J_r,EW,Y_r,K_r,Z_r,V7,Nbe,e0r,o0r,CW,r0r,t0r,a0r,X7,tqe,tc,z7,jbe,l8,n0r,Dbe,s0r,aqe,tr,i8,l0r,ac,i0r,wW,d0r,c0r,AW,f0r,m0r,g0r,d8,h0r,Gbe,p0r,u0r,_0r,kt,c8,b0r,Obe,v0r,F0r,nc,T0r,Vbe,M0r,E0r,yW,C0r,w0r,A0r,Q7,y0r,kr,f8,L0r,Xbe,x0r,$0r,an,k0r,zbe,S0r,R0r,Qbe,B0r,P0r,Wbe,I0r,q0r,N0r,Z,W7,Hbe,j0r,D0r,LW,G0r,O0r,V0r,H7,Ube,X0r,z0r,xW,Q0r,W0r,H0r,U7,Jbe,U0r,J0r,$W,Y0r,K0r,Z0r,J7,Ybe,e1r,o1r,kW,r1r,t1r,a1r,Y7,Kbe,n1r,s1r,SW,l1r,i1r,d1r,K7,Zbe,c1r,f1r,RW,m1r,g1r,h1r,Z7,e2e,p1r,u1r,BW,_1r,b1r,v1r,eM,o2e,F1r,T1r,PW,M1r,E1r,C1r,oM,r2e,w1r,A1r,IW,y1r,L1r,x1r,rM,t2e,$1r,k1r,qW,S1r,R1r,B1r,tM,a2e,P1r,I1r,NW,q1r,N1r,j1r,aM,n2e,D1r,G1r,jW,O1r,V1r,X1r,nM,s2e,z1r,Q1r,DW,W1r,H1r,U1r,sM,l2e,J1r,Y1r,GW,K1r,Z1r,ebr,lM,i2e,obr,rbr,OW,tbr,abr,nbr,iM,d2e,sbr,lbr,VW,ibr,dbr,cbr,dM,c2e,fbr,mbr,XW,gbr,hbr,pbr,cM,f2e,ubr,_br,zW,bbr,vbr,Fbr,fM,m2e,Tbr,Mbr,QW,Ebr,Cbr,wbr,mM,g2e,Abr,ybr,WW,Lbr,xbr,$br,gM,h2e,kbr,Sbr,HW,Rbr,Bbr,Pbr,hM,p2e,Ibr,qbr,UW,Nbr,jbr,Dbr,pM,u2e,Gbr,Obr,JW,Vbr,Xbr,zbr,uM,_2e,Qbr,Wbr,YW,Hbr,Ubr,Jbr,_M,b2e,Ybr,Kbr,KW,Zbr,e2r,o2r,bM,v2e,r2r,t2r,ZW,a2r,n2r,s2r,vM,nqe,sc,FM,F2e,m8,l2r,T2e,i2r,sqe,ar,g8,d2r,lc,c2r,eH,f2r,m2r,oH,g2r,h2r,p2r,h8,u2r,M2e,_2r,b2r,v2r,St,p8,F2r,E2e,T2r,M2r,ic,E2r,C2e,C2r,w2r,rH,A2r,y2r,L2r,TM,x2r,Sr,u8,$2r,w2e,k2r,S2r,nn,R2r,A2e,B2r,P2r,y2e,I2r,q2r,L2e,N2r,j2r,D2r,pe,MM,x2e,G2r,O2r,tH,V2r,X2r,z2r,EM,$2e,Q2r,W2r,aH,H2r,U2r,J2r,CM,k2e,Y2r,K2r,nH,Z2r,evr,ovr,wM,S2e,rvr,tvr,sH,avr,nvr,svr,AM,R2e,lvr,ivr,lH,dvr,cvr,fvr,yM,B2e,mvr,gvr,iH,hvr,pvr,uvr,LM,P2e,_vr,bvr,dH,vvr,Fvr,Tvr,xM,I2e,Mvr,Evr,cH,Cvr,wvr,Avr,$M,q2e,yvr,Lvr,fH,xvr,$vr,kvr,kM,N2e,Svr,Rvr,mH,Bvr,Pvr,Ivr,SM,j2e,qvr,Nvr,gH,jvr,Dvr,Gvr,RM,D2e,Ovr,Vvr,hH,Xvr,zvr,Qvr,BM,G2e,Wvr,Hvr,pH,Uvr,Jvr,Yvr,PM,O2e,Kvr,Zvr,uH,eFr,oFr,rFr,IM,V2e,tFr,aFr,_H,nFr,sFr,lFr,qM,X2e,iFr,dFr,bH,cFr,fFr,mFr,NM,z2e,gFr,hFr,vH,pFr,uFr,_Fr,jM,lqe,dc,DM,Q2e,_8,bFr,W2e,vFr,iqe,nr,b8,FFr,cc,TFr,FH,MFr,EFr,TH,CFr,wFr,AFr,v8,yFr,H2e,LFr,xFr,$Fr,Rt,F8,kFr,U2e,SFr,RFr,fc,BFr,J2e,PFr,IFr,MH,qFr,NFr,jFr,GM,DFr,Rr,T8,GFr,Y2e,OFr,VFr,sn,XFr,K2e,zFr,QFr,Z2e,WFr,HFr,eve,UFr,JFr,YFr,M8,OM,ove,KFr,ZFr,EH,e6r,o6r,r6r,VM,rve,t6r,a6r,CH,n6r,s6r,l6r,XM,dqe,mc,zM,tve,E8,i6r,ave,d6r,cqe,sr,C8,c6r,gc,f6r,wH,m6r,g6r,AH,h6r,p6r,u6r,w8,_6r,nve,b6r,v6r,F6r,Bt,A8,T6r,sve,M6r,E6r,hc,C6r,lve,w6r,A6r,yH,y6r,L6r,x6r,QM,$6r,Br,y8,k6r,ive,S6r,R6r,ln,B6r,dve,P6r,I6r,cve,q6r,N6r,fve,j6r,D6r,G6r,mve,WM,gve,O6r,V6r,LH,X6r,z6r,Q6r,HM,fqe,pc,UM,hve,L8,W6r,pve,H6r,mqe,lr,x8,U6r,uc,J6r,xH,Y6r,K6r,$H,Z6r,eTr,oTr,$8,rTr,uve,tTr,aTr,nTr,Pt,k8,sTr,_ve,lTr,iTr,_c,dTr,bve,cTr,fTr,kH,mTr,gTr,hTr,JM,pTr,Pr,S8,uTr,vve,_Tr,bTr,dn,vTr,Fve,FTr,TTr,Tve,MTr,ETr,Mve,CTr,wTr,ATr,de,YM,Eve,yTr,LTr,SH,xTr,$Tr,kTr,KM,Cve,STr,RTr,RH,BTr,PTr,ITr,ZM,wve,qTr,NTr,BH,jTr,DTr,GTr,e4,Ave,OTr,VTr,PH,XTr,zTr,QTr,o4,yve,WTr,HTr,IH,UTr,JTr,YTr,r4,Lve,KTr,ZTr,qH,e7r,o7r,r7r,t4,xve,t7r,a7r,NH,n7r,s7r,l7r,a4,$ve,i7r,d7r,jH,c7r,f7r,m7r,n4,kve,g7r,h7r,DH,p7r,u7r,_7r,s4,Sve,b7r,v7r,GH,F7r,T7r,M7r,l4,Rve,E7r,C7r,OH,w7r,A7r,y7r,i4,Bve,L7r,x7r,VH,$7r,k7r,S7r,d4,Pve,R7r,B7r,XH,P7r,I7r,q7r,c4,Ive,N7r,j7r,zH,D7r,G7r,O7r,f4,qve,V7r,X7r,QH,z7r,Q7r,W7r,m4,Nve,H7r,U7r,WH,J7r,Y7r,K7r,g4,jve,Z7r,eMr,HH,oMr,rMr,tMr,h4,Dve,aMr,nMr,UH,sMr,lMr,iMr,p4,Gve,dMr,cMr,JH,fMr,mMr,gMr,u4,Ove,hMr,pMr,YH,uMr,_Mr,bMr,_4,gqe,bc,b4,Vve,R8,vMr,Xve,FMr,hqe,ir,B8,TMr,vc,MMr,KH,EMr,CMr,ZH,wMr,AMr,yMr,P8,LMr,zve,xMr,$Mr,kMr,It,I8,SMr,Qve,RMr,BMr,Fc,PMr,Wve,IMr,qMr,eU,NMr,jMr,DMr,v4,GMr,Ir,q8,OMr,Hve,VMr,XMr,cn,zMr,Uve,QMr,WMr,Jve,HMr,UMr,Yve,JMr,YMr,KMr,ce,F4,Kve,ZMr,e4r,oU,o4r,r4r,t4r,T4,Zve,a4r,n4r,rU,s4r,l4r,i4r,M4,eFe,d4r,c4r,tU,f4r,m4r,g4r,E4,oFe,h4r,p4r,aU,u4r,_4r,b4r,C4,rFe,v4r,F4r,nU,T4r,M4r,E4r,w4,tFe,C4r,w4r,sU,A4r,y4r,L4r,A4,aFe,x4r,$4r,lU,k4r,S4r,R4r,y4,nFe,B4r,P4r,iU,I4r,q4r,N4r,L4,sFe,j4r,D4r,dU,G4r,O4r,V4r,x4,lFe,X4r,z4r,cU,Q4r,W4r,H4r,$4,iFe,U4r,J4r,fU,Y4r,K4r,Z4r,k4,dFe,eEr,oEr,mU,rEr,tEr,aEr,S4,cFe,nEr,sEr,gU,lEr,iEr,dEr,R4,fFe,cEr,fEr,hU,mEr,gEr,hEr,B4,mFe,pEr,uEr,pU,_Er,bEr,vEr,P4,gFe,FEr,TEr,uU,MEr,EEr,CEr,I4,hFe,wEr,AEr,_U,yEr,LEr,xEr,q4,pFe,$Er,kEr,bU,SEr,REr,BEr,N4,uFe,PEr,IEr,vU,qEr,NEr,jEr,j4,_Fe,DEr,GEr,FU,OEr,VEr,XEr,D4,pqe,Tc,G4,bFe,N8,zEr,vFe,QEr,uqe,dr,j8,WEr,Mc,HEr,TU,UEr,JEr,MU,YEr,KEr,ZEr,D8,e5r,FFe,o5r,r5r,t5r,qt,G8,a5r,TFe,n5r,s5r,Ec,l5r,MFe,i5r,d5r,EU,c5r,f5r,m5r,O4,g5r,qr,O8,h5r,EFe,p5r,u5r,fn,_5r,CFe,b5r,v5r,wFe,F5r,T5r,AFe,M5r,E5r,C5r,yFe,V4,LFe,w5r,A5r,CU,y5r,L5r,x5r,X4,_qe,Cc,z4,xFe,V8,$5r,$Fe,k5r,bqe,cr,X8,S5r,wc,R5r,wU,B5r,P5r,AU,I5r,q5r,N5r,z8,j5r,kFe,D5r,G5r,O5r,Nt,Q8,V5r,SFe,X5r,z5r,Ac,Q5r,RFe,W5r,H5r,yU,U5r,J5r,Y5r,Q4,K5r,Nr,W8,Z5r,BFe,eCr,oCr,mn,rCr,PFe,tCr,aCr,IFe,nCr,sCr,qFe,lCr,iCr,dCr,NFe,W4,jFe,cCr,fCr,LU,mCr,gCr,hCr,H4,vqe,yc,U4,DFe,H8,pCr,GFe,uCr,Fqe,fr,U8,_Cr,Lc,bCr,xU,vCr,FCr,$U,TCr,MCr,ECr,J8,CCr,OFe,wCr,ACr,yCr,jt,Y8,LCr,VFe,xCr,$Cr,xc,kCr,XFe,SCr,RCr,kU,BCr,PCr,ICr,J4,qCr,jr,K8,NCr,zFe,jCr,DCr,gn,GCr,QFe,OCr,VCr,WFe,XCr,zCr,HFe,QCr,WCr,HCr,re,Y4,UFe,UCr,JCr,SU,YCr,KCr,ZCr,K4,JFe,e3r,o3r,RU,r3r,t3r,a3r,Z4,YFe,n3r,s3r,BU,l3r,i3r,d3r,eE,KFe,c3r,f3r,PU,m3r,g3r,h3r,oE,ZFe,p3r,u3r,IU,_3r,b3r,v3r,rE,e6e,F3r,T3r,qU,M3r,E3r,C3r,tE,o6e,w3r,A3r,NU,y3r,L3r,x3r,aE,r6e,$3r,k3r,jU,S3r,R3r,B3r,nE,t6e,P3r,I3r,DU,q3r,N3r,j3r,sE,a6e,D3r,G3r,GU,O3r,V3r,X3r,lE,n6e,z3r,Q3r,OU,W3r,H3r,U3r,iE,s6e,J3r,Y3r,VU,K3r,Z3r,ewr,dE,l6e,owr,rwr,XU,twr,awr,nwr,cE,i6e,swr,lwr,zU,iwr,dwr,cwr,fE,d6e,fwr,mwr,QU,gwr,hwr,pwr,mE,c6e,uwr,_wr,WU,bwr,vwr,Fwr,gE,f6e,Twr,Mwr,HU,Ewr,Cwr,wwr,hE,m6e,Awr,ywr,UU,Lwr,xwr,$wr,pE,g6e,kwr,Swr,JU,Rwr,Bwr,Pwr,uE,h6e,Iwr,qwr,YU,Nwr,jwr,Dwr,_E,p6e,Gwr,Owr,KU,Vwr,Xwr,zwr,bE,u6e,Qwr,Wwr,ZU,Hwr,Uwr,Jwr,vE,_6e,Ywr,Kwr,eJ,Zwr,eAr,oAr,FE,b6e,rAr,tAr,oJ,aAr,nAr,sAr,TE,v6e,lAr,iAr,rJ,dAr,cAr,fAr,ME,Tqe,$c,EE,F6e,Z8,mAr,T6e,gAr,Mqe,mr,ex,hAr,kc,pAr,tJ,uAr,_Ar,aJ,bAr,vAr,FAr,ox,TAr,M6e,MAr,EAr,CAr,Dt,rx,wAr,E6e,AAr,yAr,Sc,LAr,C6e,xAr,$Ar,nJ,kAr,SAr,RAr,CE,BAr,Dr,tx,PAr,w6e,IAr,qAr,hn,NAr,A6e,jAr,DAr,y6e,GAr,OAr,L6e,VAr,XAr,zAr,ke,wE,x6e,QAr,WAr,sJ,HAr,UAr,JAr,AE,$6e,YAr,KAr,lJ,ZAr,eyr,oyr,yE,k6e,ryr,tyr,iJ,ayr,nyr,syr,LE,S6e,lyr,iyr,dJ,dyr,cyr,fyr,xE,R6e,myr,gyr,cJ,hyr,pyr,uyr,$E,B6e,_yr,byr,fJ,vyr,Fyr,Tyr,kE,P6e,Myr,Eyr,mJ,Cyr,wyr,Ayr,SE,I6e,yyr,Lyr,gJ,xyr,$yr,kyr,RE,q6e,Syr,Ryr,hJ,Byr,Pyr,Iyr,BE,Eqe,Rc,PE,N6e,ax,qyr,j6e,Nyr,Cqe,gr,nx,jyr,Bc,Dyr,pJ,Gyr,Oyr,uJ,Vyr,Xyr,zyr,sx,Qyr,D6e,Wyr,Hyr,Uyr,Gt,lx,Jyr,G6e,Yyr,Kyr,Pc,Zyr,O6e,eLr,oLr,_J,rLr,tLr,aLr,IE,nLr,Gr,ix,sLr,V6e,lLr,iLr,pn,dLr,X6e,cLr,fLr,z6e,mLr,gLr,Q6e,hLr,pLr,uLr,Me,qE,W6e,_Lr,bLr,bJ,vLr,FLr,TLr,NE,H6e,MLr,ELr,vJ,CLr,wLr,ALr,jE,U6e,yLr,LLr,FJ,xLr,$Lr,kLr,DE,J6e,SLr,RLr,TJ,BLr,PLr,ILr,GE,Y6e,qLr,NLr,MJ,jLr,DLr,GLr,OE,K6e,OLr,VLr,EJ,XLr,zLr,QLr,VE,Z6e,WLr,HLr,CJ,ULr,JLr,YLr,XE,eTe,KLr,ZLr,wJ,e8r,o8r,r8r,zE,oTe,t8r,a8r,AJ,n8r,s8r,l8r,QE,rTe,i8r,d8r,yJ,c8r,f8r,m8r,WE,tTe,g8r,h8r,LJ,p8r,u8r,_8r,HE,aTe,b8r,v8r,xJ,F8r,T8r,M8r,UE,wqe,Ic,JE,nTe,dx,E8r,sTe,C8r,Aqe,hr,cx,w8r,qc,A8r,$J,y8r,L8r,kJ,x8r,$8r,k8r,fx,S8r,lTe,R8r,B8r,P8r,Ot,mx,I8r,iTe,q8r,N8r,Nc,j8r,dTe,D8r,G8r,SJ,O8r,V8r,X8r,YE,z8r,Or,gx,Q8r,cTe,W8r,H8r,un,U8r,fTe,J8r,Y8r,mTe,K8r,Z8r,gTe,exr,oxr,rxr,Le,KE,hTe,txr,axr,RJ,nxr,sxr,lxr,ZE,pTe,ixr,dxr,BJ,cxr,fxr,mxr,e5,uTe,gxr,hxr,PJ,pxr,uxr,_xr,o5,_Te,bxr,vxr,IJ,Fxr,Txr,Mxr,r5,bTe,Exr,Cxr,qJ,wxr,Axr,yxr,t5,vTe,Lxr,xxr,NJ,$xr,kxr,Sxr,a5,FTe,Rxr,Bxr,jJ,Pxr,Ixr,qxr,n5,TTe,Nxr,jxr,DJ,Dxr,Gxr,Oxr,s5,MTe,Vxr,Xxr,GJ,zxr,Qxr,Wxr,l5,ETe,Hxr,Uxr,OJ,Jxr,Yxr,Kxr,i5,yqe,jc,d5,CTe,hx,Zxr,wTe,e9r,Lqe,pr,px,o9r,Dc,r9r,VJ,t9r,a9r,XJ,n9r,s9r,l9r,ux,i9r,ATe,d9r,c9r,f9r,Vt,_x,m9r,yTe,g9r,h9r,Gc,p9r,LTe,u9r,_9r,zJ,b9r,v9r,F9r,c5,T9r,Vr,bx,M9r,xTe,E9r,C9r,_n,w9r,$Te,A9r,y9r,kTe,L9r,x9r,STe,$9r,k9r,S9r,Se,f5,RTe,R9r,B9r,QJ,P9r,I9r,q9r,m5,BTe,N9r,j9r,WJ,D9r,G9r,O9r,g5,PTe,V9r,X9r,HJ,z9r,Q9r,W9r,h5,ITe,H9r,U9r,UJ,J9r,Y9r,K9r,p5,qTe,Z9r,e$r,JJ,o$r,r$r,t$r,u5,NTe,a$r,n$r,YJ,s$r,l$r,i$r,_5,jTe,d$r,c$r,KJ,f$r,m$r,g$r,b5,DTe,h$r,p$r,ZJ,u$r,_$r,b$r,v5,GTe,v$r,F$r,eY,T$r,M$r,E$r,F5,xqe,Oc,T5,OTe,vx,C$r,VTe,w$r,$qe,ur,Fx,A$r,Vc,y$r,oY,L$r,x$r,rY,$$r,k$r,S$r,Tx,R$r,XTe,B$r,P$r,I$r,Xt,Mx,q$r,zTe,N$r,j$r,Xc,D$r,QTe,G$r,O$r,tY,V$r,X$r,z$r,M5,Q$r,Xr,Ex,W$r,WTe,H$r,U$r,bn,J$r,HTe,Y$r,K$r,UTe,Z$r,ekr,JTe,okr,rkr,tkr,xe,E5,YTe,akr,nkr,aY,skr,lkr,ikr,C5,KTe,dkr,ckr,nY,fkr,mkr,gkr,w5,ZTe,hkr,pkr,sY,ukr,_kr,bkr,A5,e7e,vkr,Fkr,lY,Tkr,Mkr,Ekr,y5,o7e,Ckr,wkr,iY,Akr,ykr,Lkr,L5,r7e,xkr,$kr,dY,kkr,Skr,Rkr,x5,t7e,Bkr,Pkr,cY,Ikr,qkr,Nkr,$5,a7e,jkr,Dkr,fY,Gkr,Okr,Vkr,k5,n7e,Xkr,zkr,mY,Qkr,Wkr,Hkr,S5,s7e,Ukr,Jkr,gY,Ykr,Kkr,Zkr,R5,kqe,zc,B5,l7e,Cx,eSr,i7e,oSr,Sqe,_r,wx,rSr,Qc,tSr,hY,aSr,nSr,pY,sSr,lSr,iSr,Ax,dSr,d7e,cSr,fSr,mSr,zt,yx,gSr,c7e,hSr,pSr,Wc,uSr,f7e,_Sr,bSr,uY,vSr,FSr,TSr,P5,MSr,zr,Lx,ESr,m7e,CSr,wSr,vn,ASr,g7e,ySr,LSr,h7e,xSr,$Sr,p7e,kSr,SSr,RSr,$e,I5,u7e,BSr,PSr,_Y,ISr,qSr,NSr,q5,_7e,jSr,DSr,bY,GSr,OSr,VSr,N5,b7e,XSr,zSr,vY,QSr,WSr,HSr,j5,v7e,USr,JSr,FY,YSr,KSr,ZSr,D5,F7e,eRr,oRr,TY,rRr,tRr,aRr,G5,T7e,nRr,sRr,MY,lRr,iRr,dRr,O5,M7e,cRr,fRr,EY,mRr,gRr,hRr,V5,E7e,pRr,uRr,CY,_Rr,bRr,vRr,X5,C7e,FRr,TRr,wY,MRr,ERr,CRr,z5,w7e,wRr,ARr,AY,yRr,LRr,xRr,Q5,Rqe,Hc,W5,A7e,xx,$Rr,y7e,kRr,Bqe,br,$x,SRr,Uc,RRr,yY,BRr,PRr,LY,IRr,qRr,NRr,kx,jRr,L7e,DRr,GRr,ORr,Qt,Sx,VRr,x7e,XRr,zRr,Jc,QRr,$7e,WRr,HRr,xY,URr,JRr,YRr,H5,KRr,Qr,Rx,ZRr,k7e,eBr,oBr,Fn,rBr,S7e,tBr,aBr,R7e,nBr,sBr,B7e,lBr,iBr,dBr,De,U5,P7e,cBr,fBr,$Y,mBr,gBr,hBr,J5,I7e,pBr,uBr,kY,_Br,bBr,vBr,Y5,q7e,FBr,TBr,SY,MBr,EBr,CBr,K5,N7e,wBr,ABr,RY,yBr,LBr,xBr,Z5,j7e,$Br,kBr,BY,SBr,RBr,BBr,eC,D7e,PBr,IBr,PY,qBr,NBr,jBr,oC,G7e,DBr,GBr,IY,OBr,VBr,XBr,rC,O7e,zBr,QBr,qY,WBr,HBr,UBr,tC,Pqe,Yc,aC,V7e,Bx,JBr,X7e,YBr,Iqe,vr,Px,KBr,Kc,ZBr,NY,ePr,oPr,jY,rPr,tPr,aPr,Ix,nPr,z7e,sPr,lPr,iPr,Wt,qx,dPr,Q7e,cPr,fPr,Zc,mPr,W7e,gPr,hPr,DY,pPr,uPr,_Pr,nC,bPr,Wr,Nx,vPr,H7e,FPr,TPr,Tn,MPr,U7e,EPr,CPr,J7e,wPr,APr,Y7e,yPr,LPr,xPr,Ge,sC,K7e,$Pr,kPr,GY,SPr,RPr,BPr,lC,Z7e,PPr,IPr,OY,qPr,NPr,jPr,iC,eMe,DPr,GPr,VY,OPr,VPr,XPr,dC,oMe,zPr,QPr,XY,WPr,HPr,UPr,cC,rMe,JPr,YPr,zY,KPr,ZPr,eIr,fC,tMe,oIr,rIr,QY,tIr,aIr,nIr,mC,aMe,sIr,lIr,WY,iIr,dIr,cIr,gC,nMe,fIr,mIr,HY,gIr,hIr,pIr,hC,qqe,ef,pC,sMe,jx,uIr,lMe,_Ir,Nqe,Fr,Dx,bIr,of,vIr,UY,FIr,TIr,JY,MIr,EIr,CIr,Gx,wIr,iMe,AIr,yIr,LIr,Ht,Ox,xIr,dMe,$Ir,kIr,rf,SIr,cMe,RIr,BIr,YY,PIr,IIr,qIr,uC,NIr,Hr,Vx,jIr,fMe,DIr,GIr,Mn,OIr,mMe,VIr,XIr,gMe,zIr,QIr,hMe,WIr,HIr,UIr,pMe,_C,uMe,JIr,YIr,KY,KIr,ZIr,eqr,bC,jqe,tf,vC,_Me,Xx,oqr,bMe,rqr,Dqe,Tr,zx,tqr,af,aqr,ZY,nqr,sqr,eK,lqr,iqr,dqr,Qx,cqr,vMe,fqr,mqr,gqr,Ut,Wx,hqr,FMe,pqr,uqr,nf,_qr,TMe,bqr,vqr,oK,Fqr,Tqr,Mqr,FC,Eqr,Ur,Hx,Cqr,MMe,wqr,Aqr,En,yqr,EMe,Lqr,xqr,CMe,$qr,kqr,wMe,Sqr,Rqr,Bqr,Ux,TC,AMe,Pqr,Iqr,rK,qqr,Nqr,jqr,MC,yMe,Dqr,Gqr,tK,Oqr,Vqr,Xqr,EC,Gqe,sf,CC,LMe,Jx,zqr,xMe,Qqr,Oqe,Mr,Yx,Wqr,lf,Hqr,aK,Uqr,Jqr,nK,Yqr,Kqr,Zqr,Kx,eNr,$Me,oNr,rNr,tNr,Jt,Zx,aNr,kMe,nNr,sNr,df,lNr,SMe,iNr,dNr,sK,cNr,fNr,mNr,wC,gNr,Jr,e9,hNr,RMe,pNr,uNr,Cn,_Nr,BMe,bNr,vNr,PMe,FNr,TNr,IMe,MNr,ENr,CNr,qMe,AC,NMe,wNr,ANr,lK,yNr,LNr,xNr,yC,Vqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Jw=new ee({}),Yw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),bf=new $Nr({props:{warning:!0,$$slots:{default:[nAt]},$$scope:{ctx:A}}}),Kw=new ee({}),Zw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L566"}}),rA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L589"}}),ug=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[sAt]},$$scope:{ctx:A}}}),tA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L711"}}),aA=new ee({}),nA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L378"}}),iA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17060/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L392"}}),Hg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[lAt]},$$scope:{ctx:A}}}),dA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L588"}}),cA=new ee({}),fA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),hA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),Mh=new $Nr({props:{$$slots:{default:[iAt]},$$scope:{ctx:A}}}),Eh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[dAt]},$$scope:{ctx:A}}}),pA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),uA=new ee({}),_A=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L77"}}),FA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L91"}}),Gh=new $Nr({props:{$$slots:{default:[cAt]},$$scope:{ctx:A}}}),Oh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[fAt]},$$scope:{ctx:A}}}),TA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L244"}}),MA=new ee({}),EA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L721"}}),wA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),zh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[mAt]},$$scope:{ctx:A}}}),AA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Bu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[gAt]},$$scope:{ctx:A}}}),yA=new ee({}),LA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L728"}}),$A=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Iu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[hAt]},$$scope:{ctx:A}}}),kA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),E_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[pAt]},$$scope:{ctx:A}}}),SA=new ee({}),RA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L743"}}),PA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),w_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[uAt]},$$scope:{ctx:A}}}),IA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_At]},$$scope:{ctx:A}}}),qA=new ee({}),NA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L750"}}),DA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[bAt]},$$scope:{ctx:A}}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vAt]},$$scope:{ctx:A}}}),OA=new ee({}),VA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L757"}}),zA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),U0=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[FAt]},$$scope:{ctx:A}}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),h1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[TAt]},$$scope:{ctx:A}}}),WA=new ee({}),HA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L766"}}),JA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),u1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[MAt]},$$scope:{ctx:A}}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),mb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[EAt]},$$scope:{ctx:A}}}),KA=new ee({}),ZA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L800"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),hb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[CAt]},$$scope:{ctx:A}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wAt]},$$scope:{ctx:A}}}),ty=new ee({}),ay=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L807"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Wb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[AAt]},$$scope:{ctx:A}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),e2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[yAt]},$$scope:{ctx:A}}}),iy=new ee({}),dy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L793"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),r2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[LAt]},$$scope:{ctx:A}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),N2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[xAt]},$$scope:{ctx:A}}}),gy=new ee({}),hy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L775"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),D2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[$At]},$$scope:{ctx:A}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Lv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[kAt]},$$scope:{ctx:A}}}),by=new ee({}),vy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L782"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),$v=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[SAt]},$$scope:{ctx:A}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[RAt]},$$scope:{ctx:A}}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L816"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Pv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[BAt]},$$scope:{ctx:A}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[PAt]},$$scope:{ctx:A}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L855"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[IAt]},$$scope:{ctx:A}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qAt]},$$scope:{ctx:A}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L862"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[NAt]},$$scope:{ctx:A}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),fF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[jAt]},$$scope:{ctx:A}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L885"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),gF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[DAt]},$$scope:{ctx:A}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[GAt]},$$scope:{ctx:A}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L869"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[OAt]},$$scope:{ctx:A}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[VAt]},$$scope:{ctx:A}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L876"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[XAt]},$$scope:{ctx:A}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[zAt]},$$scope:{ctx:A}}}),eL=new ee({}),oL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L894"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),jF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[QAt]},$$scope:{ctx:A}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[WAt]},$$scope:{ctx:A}}}),nL=new ee({}),sL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L901"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[HAt]},$$scope:{ctx:A}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[UAt]},$$scope:{ctx:A}}}),cL=new ee({}),fL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L848"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),e6=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[JAt]},$$scope:{ctx:A}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),a6=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[YAt]},$$scope:{ctx:A}}}),uL=new ee({}),_L=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L823"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),s6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[KAt]},$$scope:{ctx:A}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),d6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ZAt]},$$scope:{ctx:A}}}),TL=new ee({}),ML=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L830"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),f6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[eyt]},$$scope:{ctx:A}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),_6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[oyt]},$$scope:{ctx:A}}}),AL=new ee({}),yL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L839"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),v6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[ryt]},$$scope:{ctx:A}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[tyt]},$$scope:{ctx:A}}}),kL=new ee({}),SL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),BL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[ayt]},$$scope:{ctx:A}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[nyt]},$$scope:{ctx:A}}}),IL=new ee({}),qL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[syt]},$$scope:{ctx:A}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[lyt]},$$scope:{ctx:A}}}),GL=new ee({}),OL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),XL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[iyt]},$$scope:{ctx:A}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dyt]},$$scope:{ctx:A}}}),QL=new ee({}),WL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),UL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),a7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[cyt]},$$scope:{ctx:A}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),i7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[fyt]},$$scope:{ctx:A}}}),YL=new ee({}),KL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),e8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),c7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[myt]},$$scope:{ctx:A}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gyt]},$$scope:{ctx:A}}}),r8=new ee({}),t8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),n8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hyt]},$$scope:{ctx:A}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pyt]},$$scope:{ctx:A}}}),l8=new ee({}),i8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),c8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Q7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[uyt]},$$scope:{ctx:A}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[_yt]},$$scope:{ctx:A}}}),m8=new ee({}),g8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),p8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[byt]},$$scope:{ctx:A}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[vyt]},$$scope:{ctx:A}}}),_8=new ee({}),b8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),F8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Fyt]},$$scope:{ctx:A}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Tyt]},$$scope:{ctx:A}}}),E8=new ee({}),C8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Myt]},$$scope:{ctx:A}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Eyt]},$$scope:{ctx:A}}}),L8=new ee({}),x8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Cyt]},$$scope:{ctx:A}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wyt]},$$scope:{ctx:A}}}),R8=new ee({}),B8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Ayt]},$$scope:{ctx:A}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yyt]},$$scope:{ctx:A}}}),N8=new ee({}),j8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Lyt]},$$scope:{ctx:A}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xyt]},$$scope:{ctx:A}}}),V8=new ee({}),X8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[$yt]},$$scope:{ctx:A}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[kyt]},$$scope:{ctx:A}}}),H8=new ee({}),U8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Syt]},$$scope:{ctx:A}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Ryt]},$$scope:{ctx:A}}}),Z8=new ee({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Byt]},$$scope:{ctx:A}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Pyt]},$$scope:{ctx:A}}}),ax=new ee({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Iyt]},$$scope:{ctx:A}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[qyt]},$$scope:{ctx:A}}}),dx=new ee({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Nyt]},$$scope:{ctx:A}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),i5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[jyt]},$$scope:{ctx:A}}}),hx=new ee({}),px=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Dyt]},$$scope:{ctx:A}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Gyt]},$$scope:{ctx:A}}}),vx=new ee({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Oyt]},$$scope:{ctx:A}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Vyt]},$$scope:{ctx:A}}}),Cx=new ee({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Xyt]},$$scope:{ctx:A}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zyt]},$$scope:{ctx:A}}}),xx=new ee({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Qyt]},$$scope:{ctx:A}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Wyt]},$$scope:{ctx:A}}}),Bx=new ee({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Hyt]},$$scope:{ctx:A}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Uyt]},$$scope:{ctx:A}}}),jx=new ee({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Jyt]},$$scope:{ctx:A}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Yyt]},$$scope:{ctx:A}}}),Xx=new ee({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Kyt]},$$scope:{ctx:A}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Zyt]},$$scope:{ctx:A}}}),Jx=new ee({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[eLt]},$$scope:{ctx:A}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oLt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),gf=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),Qw=o("from_pretrained()"),hf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),fi=o("Instantiating one of "),An=a("a"),Ww=o("AutoConfig"),yn=o(", "),Ln=a("a"),Hw=o("AutoModel"),mi=o(`, and
`),xn=a("a"),Uw=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),pf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),h$=o("will create a model that is an instance of "),hi=a("a"),p$=o("BertModel"),u$=o("."),Eo=l(),Ea=a("p"),_$=o("There is one class of "),uf=a("code"),b$=o("AutoModel"),Yje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),DPe=l(),pi=a("h2"),_f=a("a"),oee=a("span"),F(Jw.$$.fragment),Kje=l(),ree=a("span"),Zje=o("Extending the Auto Classes"),GPe=l(),$n=a("p"),eDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tee=a("code"),oDe=o("NewModel"),rDe=o(", make sure you have a "),aee=a("code"),tDe=o("NewModelConfig"),aDe=o(` then you can add those to the auto
classes like this:`),OPe=l(),F(Yw.$$.fragment),VPe=l(),v$=a("p"),nDe=o("You will then be able to use the auto classes like you would usually do!"),XPe=l(),F(bf.$$.fragment),zPe=l(),ui=a("h2"),vf=a("a"),nee=a("span"),F(Kw.$$.fragment),sDe=l(),see=a("span"),lDe=o("AutoConfig"),QPe=l(),Co=a("div"),F(Zw.$$.fragment),iDe=l(),eA=a("p"),dDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),F$=a("a"),cDe=o("from_pretrained()"),fDe=o(" class method."),mDe=l(),oA=a("p"),gDe=o("This class cannot be instantiated directly using "),lee=a("code"),hDe=o("__init__()"),pDe=o(" (throws an error)."),uDe=l(),Er=a("div"),F(rA.$$.fragment),_De=l(),iee=a("p"),bDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),vDe=l(),_i=a("p"),FDe=o("The configuration class to instantiate is selected based on the "),dee=a("code"),TDe=o("model_type"),MDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cee=a("code"),EDe=o("pretrained_model_name_or_path"),CDe=o(":"),wDe=l(),y=a("ul"),Ff=a("li"),fee=a("strong"),ADe=o("albert"),yDe=o(" \u2014 "),T$=a("a"),LDe=o("AlbertConfig"),xDe=o(" (ALBERT model)"),$De=l(),Tf=a("li"),mee=a("strong"),kDe=o("bart"),SDe=o(" \u2014 "),M$=a("a"),RDe=o("BartConfig"),BDe=o(" (BART model)"),PDe=l(),Mf=a("li"),gee=a("strong"),IDe=o("beit"),qDe=o(" \u2014 "),E$=a("a"),NDe=o("BeitConfig"),jDe=o(" (BEiT model)"),DDe=l(),Ef=a("li"),hee=a("strong"),GDe=o("bert"),ODe=o(" \u2014 "),C$=a("a"),VDe=o("BertConfig"),XDe=o(" (BERT model)"),zDe=l(),Cf=a("li"),pee=a("strong"),QDe=o("bert-generation"),WDe=o(" \u2014 "),w$=a("a"),HDe=o("BertGenerationConfig"),UDe=o(" (Bert Generation model)"),JDe=l(),wf=a("li"),uee=a("strong"),YDe=o("big_bird"),KDe=o(" \u2014 "),A$=a("a"),ZDe=o("BigBirdConfig"),eGe=o(" (BigBird model)"),oGe=l(),Af=a("li"),_ee=a("strong"),rGe=o("bigbird_pegasus"),tGe=o(" \u2014 "),y$=a("a"),aGe=o("BigBirdPegasusConfig"),nGe=o(" (BigBirdPegasus model)"),sGe=l(),yf=a("li"),bee=a("strong"),lGe=o("blenderbot"),iGe=o(" \u2014 "),L$=a("a"),dGe=o("BlenderbotConfig"),cGe=o(" (Blenderbot model)"),fGe=l(),Lf=a("li"),vee=a("strong"),mGe=o("blenderbot-small"),gGe=o(" \u2014 "),x$=a("a"),hGe=o("BlenderbotSmallConfig"),pGe=o(" (BlenderbotSmall model)"),uGe=l(),xf=a("li"),Fee=a("strong"),_Ge=o("camembert"),bGe=o(" \u2014 "),$$=a("a"),vGe=o("CamembertConfig"),FGe=o(" (CamemBERT model)"),TGe=l(),$f=a("li"),Tee=a("strong"),MGe=o("canine"),EGe=o(" \u2014 "),k$=a("a"),CGe=o("CanineConfig"),wGe=o(" (Canine model)"),AGe=l(),kf=a("li"),Mee=a("strong"),yGe=o("clip"),LGe=o(" \u2014 "),S$=a("a"),xGe=o("CLIPConfig"),$Ge=o(" (CLIP model)"),kGe=l(),Sf=a("li"),Eee=a("strong"),SGe=o("convbert"),RGe=o(" \u2014 "),R$=a("a"),BGe=o("ConvBertConfig"),PGe=o(" (ConvBERT model)"),IGe=l(),Rf=a("li"),Cee=a("strong"),qGe=o("convnext"),NGe=o(" \u2014 "),B$=a("a"),jGe=o("ConvNextConfig"),DGe=o(" (ConvNext model)"),GGe=l(),Bf=a("li"),wee=a("strong"),OGe=o("ctrl"),VGe=o(" \u2014 "),P$=a("a"),XGe=o("CTRLConfig"),zGe=o(" (CTRL model)"),QGe=l(),Pf=a("li"),Aee=a("strong"),WGe=o("data2vec-audio"),HGe=o(" \u2014 "),I$=a("a"),UGe=o("Data2VecAudioConfig"),JGe=o(" (Data2VecAudio model)"),YGe=l(),If=a("li"),yee=a("strong"),KGe=o("data2vec-text"),ZGe=o(" \u2014 "),q$=a("a"),eOe=o("Data2VecTextConfig"),oOe=o(" (Data2VecText model)"),rOe=l(),qf=a("li"),Lee=a("strong"),tOe=o("data2vec-vision"),aOe=o(" \u2014 "),N$=a("a"),nOe=o("Data2VecVisionConfig"),sOe=o(" (Data2VecVision model)"),lOe=l(),Nf=a("li"),xee=a("strong"),iOe=o("deberta"),dOe=o(" \u2014 "),j$=a("a"),cOe=o("DebertaConfig"),fOe=o(" (DeBERTa model)"),mOe=l(),jf=a("li"),$ee=a("strong"),gOe=o("deberta-v2"),hOe=o(" \u2014 "),D$=a("a"),pOe=o("DebertaV2Config"),uOe=o(" (DeBERTa-v2 model)"),_Oe=l(),Df=a("li"),kee=a("strong"),bOe=o("decision_transformer"),vOe=o(" \u2014 "),G$=a("a"),FOe=o("DecisionTransformerConfig"),TOe=o(" (Decision Transformer model)"),MOe=l(),Gf=a("li"),See=a("strong"),EOe=o("deit"),COe=o(" \u2014 "),O$=a("a"),wOe=o("DeiTConfig"),AOe=o(" (DeiT model)"),yOe=l(),Of=a("li"),Ree=a("strong"),LOe=o("detr"),xOe=o(" \u2014 "),V$=a("a"),$Oe=o("DetrConfig"),kOe=o(" (DETR model)"),SOe=l(),Vf=a("li"),Bee=a("strong"),ROe=o("distilbert"),BOe=o(" \u2014 "),X$=a("a"),POe=o("DistilBertConfig"),IOe=o(" (DistilBERT model)"),qOe=l(),Xf=a("li"),Pee=a("strong"),NOe=o("dpr"),jOe=o(" \u2014 "),z$=a("a"),DOe=o("DPRConfig"),GOe=o(" (DPR model)"),OOe=l(),zf=a("li"),Iee=a("strong"),VOe=o("dpt"),XOe=o(" \u2014 "),Q$=a("a"),zOe=o("DPTConfig"),QOe=o(" (DPT model)"),WOe=l(),Qf=a("li"),qee=a("strong"),HOe=o("electra"),UOe=o(" \u2014 "),W$=a("a"),JOe=o("ElectraConfig"),YOe=o(" (ELECTRA model)"),KOe=l(),Wf=a("li"),Nee=a("strong"),ZOe=o("encoder-decoder"),eVe=o(" \u2014 "),H$=a("a"),oVe=o("EncoderDecoderConfig"),rVe=o(" (Encoder decoder model)"),tVe=l(),Hf=a("li"),jee=a("strong"),aVe=o("flaubert"),nVe=o(" \u2014 "),U$=a("a"),sVe=o("FlaubertConfig"),lVe=o(" (FlauBERT model)"),iVe=l(),Uf=a("li"),Dee=a("strong"),dVe=o("fnet"),cVe=o(" \u2014 "),J$=a("a"),fVe=o("FNetConfig"),mVe=o(" (FNet model)"),gVe=l(),Jf=a("li"),Gee=a("strong"),hVe=o("fsmt"),pVe=o(" \u2014 "),Y$=a("a"),uVe=o("FSMTConfig"),_Ve=o(" (FairSeq Machine-Translation model)"),bVe=l(),Yf=a("li"),Oee=a("strong"),vVe=o("funnel"),FVe=o(" \u2014 "),K$=a("a"),TVe=o("FunnelConfig"),MVe=o(" (Funnel Transformer model)"),EVe=l(),Kf=a("li"),Vee=a("strong"),CVe=o("glpn"),wVe=o(" \u2014 "),Z$=a("a"),AVe=o("GLPNConfig"),yVe=o(" (GLPN model)"),LVe=l(),Zf=a("li"),Xee=a("strong"),xVe=o("gpt2"),$Ve=o(" \u2014 "),ek=a("a"),kVe=o("GPT2Config"),SVe=o(" (OpenAI GPT-2 model)"),RVe=l(),em=a("li"),zee=a("strong"),BVe=o("gpt_neo"),PVe=o(" \u2014 "),ok=a("a"),IVe=o("GPTNeoConfig"),qVe=o(" (GPT Neo model)"),NVe=l(),om=a("li"),Qee=a("strong"),jVe=o("gptj"),DVe=o(" \u2014 "),rk=a("a"),GVe=o("GPTJConfig"),OVe=o(" (GPT-J model)"),VVe=l(),rm=a("li"),Wee=a("strong"),XVe=o("hubert"),zVe=o(" \u2014 "),tk=a("a"),QVe=o("HubertConfig"),WVe=o(" (Hubert model)"),HVe=l(),tm=a("li"),Hee=a("strong"),UVe=o("ibert"),JVe=o(" \u2014 "),ak=a("a"),YVe=o("IBertConfig"),KVe=o(" (I-BERT model)"),ZVe=l(),am=a("li"),Uee=a("strong"),eXe=o("imagegpt"),oXe=o(" \u2014 "),nk=a("a"),rXe=o("ImageGPTConfig"),tXe=o(" (ImageGPT model)"),aXe=l(),nm=a("li"),Jee=a("strong"),nXe=o("layoutlm"),sXe=o(" \u2014 "),sk=a("a"),lXe=o("LayoutLMConfig"),iXe=o(" (LayoutLM model)"),dXe=l(),sm=a("li"),Yee=a("strong"),cXe=o("layoutlmv2"),fXe=o(" \u2014 "),lk=a("a"),mXe=o("LayoutLMv2Config"),gXe=o(" (LayoutLMv2 model)"),hXe=l(),lm=a("li"),Kee=a("strong"),pXe=o("layoutlmv3"),uXe=o(" \u2014 "),ik=a("a"),_Xe=o("LayoutLMv3Config"),bXe=o(" (LayoutLMv3 model)"),vXe=l(),im=a("li"),Zee=a("strong"),FXe=o("led"),TXe=o(" \u2014 "),dk=a("a"),MXe=o("LEDConfig"),EXe=o(" (LED model)"),CXe=l(),dm=a("li"),eoe=a("strong"),wXe=o("longformer"),AXe=o(" \u2014 "),ck=a("a"),yXe=o("LongformerConfig"),LXe=o(" (Longformer model)"),xXe=l(),cm=a("li"),ooe=a("strong"),$Xe=o("luke"),kXe=o(" \u2014 "),fk=a("a"),SXe=o("LukeConfig"),RXe=o(" (LUKE model)"),BXe=l(),fm=a("li"),roe=a("strong"),PXe=o("lxmert"),IXe=o(" \u2014 "),mk=a("a"),qXe=o("LxmertConfig"),NXe=o(" (LXMERT model)"),jXe=l(),mm=a("li"),toe=a("strong"),DXe=o("m2m_100"),GXe=o(" \u2014 "),gk=a("a"),OXe=o("M2M100Config"),VXe=o(" (M2M100 model)"),XXe=l(),gm=a("li"),aoe=a("strong"),zXe=o("marian"),QXe=o(" \u2014 "),hk=a("a"),WXe=o("MarianConfig"),HXe=o(" (Marian model)"),UXe=l(),hm=a("li"),noe=a("strong"),JXe=o("maskformer"),YXe=o(" \u2014 "),pk=a("a"),KXe=o("MaskFormerConfig"),ZXe=o(" (MaskFormer model)"),eze=l(),pm=a("li"),soe=a("strong"),oze=o("mbart"),rze=o(" \u2014 "),uk=a("a"),tze=o("MBartConfig"),aze=o(" (mBART model)"),nze=l(),um=a("li"),loe=a("strong"),sze=o("megatron-bert"),lze=o(" \u2014 "),_k=a("a"),ize=o("MegatronBertConfig"),dze=o(" (MegatronBert model)"),cze=l(),_m=a("li"),ioe=a("strong"),fze=o("mobilebert"),mze=o(" \u2014 "),bk=a("a"),gze=o("MobileBertConfig"),hze=o(" (MobileBERT model)"),pze=l(),bm=a("li"),doe=a("strong"),uze=o("mpnet"),_ze=o(" \u2014 "),vk=a("a"),bze=o("MPNetConfig"),vze=o(" (MPNet model)"),Fze=l(),vm=a("li"),coe=a("strong"),Tze=o("mt5"),Mze=o(" \u2014 "),Fk=a("a"),Eze=o("MT5Config"),Cze=o(" (mT5 model)"),wze=l(),Fm=a("li"),foe=a("strong"),Aze=o("nystromformer"),yze=o(" \u2014 "),Tk=a("a"),Lze=o("NystromformerConfig"),xze=o(" (Nystromformer model)"),$ze=l(),Tm=a("li"),moe=a("strong"),kze=o("openai-gpt"),Sze=o(" \u2014 "),Mk=a("a"),Rze=o("OpenAIGPTConfig"),Bze=o(" (OpenAI GPT model)"),Pze=l(),Mm=a("li"),goe=a("strong"),Ize=o("pegasus"),qze=o(" \u2014 "),Ek=a("a"),Nze=o("PegasusConfig"),jze=o(" (Pegasus model)"),Dze=l(),Em=a("li"),hoe=a("strong"),Gze=o("perceiver"),Oze=o(" \u2014 "),Ck=a("a"),Vze=o("PerceiverConfig"),Xze=o(" (Perceiver model)"),zze=l(),Cm=a("li"),poe=a("strong"),Qze=o("plbart"),Wze=o(" \u2014 "),wk=a("a"),Hze=o("PLBartConfig"),Uze=o(" (PLBart model)"),Jze=l(),wm=a("li"),uoe=a("strong"),Yze=o("poolformer"),Kze=o(" \u2014 "),Ak=a("a"),Zze=o("PoolFormerConfig"),eQe=o(" (PoolFormer model)"),oQe=l(),Am=a("li"),_oe=a("strong"),rQe=o("prophetnet"),tQe=o(" \u2014 "),yk=a("a"),aQe=o("ProphetNetConfig"),nQe=o(" (ProphetNet model)"),sQe=l(),ym=a("li"),boe=a("strong"),lQe=o("qdqbert"),iQe=o(" \u2014 "),Lk=a("a"),dQe=o("QDQBertConfig"),cQe=o(" (QDQBert model)"),fQe=l(),Lm=a("li"),voe=a("strong"),mQe=o("rag"),gQe=o(" \u2014 "),xk=a("a"),hQe=o("RagConfig"),pQe=o(" (RAG model)"),uQe=l(),xm=a("li"),Foe=a("strong"),_Qe=o("realm"),bQe=o(" \u2014 "),$k=a("a"),vQe=o("RealmConfig"),FQe=o(" (Realm model)"),TQe=l(),$m=a("li"),Toe=a("strong"),MQe=o("reformer"),EQe=o(" \u2014 "),kk=a("a"),CQe=o("ReformerConfig"),wQe=o(" (Reformer model)"),AQe=l(),km=a("li"),Moe=a("strong"),yQe=o("regnet"),LQe=o(" \u2014 "),Sk=a("a"),xQe=o("RegNetConfig"),$Qe=o(" (RegNet model)"),kQe=l(),Sm=a("li"),Eoe=a("strong"),SQe=o("rembert"),RQe=o(" \u2014 "),Rk=a("a"),BQe=o("RemBertConfig"),PQe=o(" (RemBERT model)"),IQe=l(),Rm=a("li"),Coe=a("strong"),qQe=o("resnet"),NQe=o(" \u2014 "),Bk=a("a"),jQe=o("ResNetConfig"),DQe=o(" (ResNet model)"),GQe=l(),Bm=a("li"),woe=a("strong"),OQe=o("retribert"),VQe=o(" \u2014 "),Pk=a("a"),XQe=o("RetriBertConfig"),zQe=o(" (RetriBERT model)"),QQe=l(),Pm=a("li"),Aoe=a("strong"),WQe=o("roberta"),HQe=o(" \u2014 "),Ik=a("a"),UQe=o("RobertaConfig"),JQe=o(" (RoBERTa model)"),YQe=l(),Im=a("li"),yoe=a("strong"),KQe=o("roformer"),ZQe=o(" \u2014 "),qk=a("a"),eWe=o("RoFormerConfig"),oWe=o(" (RoFormer model)"),rWe=l(),qm=a("li"),Loe=a("strong"),tWe=o("segformer"),aWe=o(" \u2014 "),Nk=a("a"),nWe=o("SegformerConfig"),sWe=o(" (SegFormer model)"),lWe=l(),Nm=a("li"),xoe=a("strong"),iWe=o("sew"),dWe=o(" \u2014 "),jk=a("a"),cWe=o("SEWConfig"),fWe=o(" (SEW model)"),mWe=l(),jm=a("li"),$oe=a("strong"),gWe=o("sew-d"),hWe=o(" \u2014 "),Dk=a("a"),pWe=o("SEWDConfig"),uWe=o(" (SEW-D model)"),_We=l(),Dm=a("li"),koe=a("strong"),bWe=o("speech-encoder-decoder"),vWe=o(" \u2014 "),Gk=a("a"),FWe=o("SpeechEncoderDecoderConfig"),TWe=o(" (Speech Encoder decoder model)"),MWe=l(),Gm=a("li"),Soe=a("strong"),EWe=o("speech_to_text"),CWe=o(" \u2014 "),Ok=a("a"),wWe=o("Speech2TextConfig"),AWe=o(" (Speech2Text model)"),yWe=l(),Om=a("li"),Roe=a("strong"),LWe=o("speech_to_text_2"),xWe=o(" \u2014 "),Vk=a("a"),$We=o("Speech2Text2Config"),kWe=o(" (Speech2Text2 model)"),SWe=l(),Vm=a("li"),Boe=a("strong"),RWe=o("splinter"),BWe=o(" \u2014 "),Xk=a("a"),PWe=o("SplinterConfig"),IWe=o(" (Splinter model)"),qWe=l(),Xm=a("li"),Poe=a("strong"),NWe=o("squeezebert"),jWe=o(" \u2014 "),zk=a("a"),DWe=o("SqueezeBertConfig"),GWe=o(" (SqueezeBERT model)"),OWe=l(),zm=a("li"),Ioe=a("strong"),VWe=o("swin"),XWe=o(" \u2014 "),Qk=a("a"),zWe=o("SwinConfig"),QWe=o(" (Swin model)"),WWe=l(),Qm=a("li"),qoe=a("strong"),HWe=o("t5"),UWe=o(" \u2014 "),Wk=a("a"),JWe=o("T5Config"),YWe=o(" (T5 model)"),KWe=l(),Wm=a("li"),Noe=a("strong"),ZWe=o("tapas"),eHe=o(" \u2014 "),Hk=a("a"),oHe=o("TapasConfig"),rHe=o(" (TAPAS model)"),tHe=l(),Hm=a("li"),joe=a("strong"),aHe=o("tapex"),nHe=o(" \u2014 "),Uk=a("a"),sHe=o("BartConfig"),lHe=o(" (TAPEX model)"),iHe=l(),Um=a("li"),Doe=a("strong"),dHe=o("transfo-xl"),cHe=o(" \u2014 "),Jk=a("a"),fHe=o("TransfoXLConfig"),mHe=o(" (Transformer-XL model)"),gHe=l(),Jm=a("li"),Goe=a("strong"),hHe=o("trocr"),pHe=o(" \u2014 "),Yk=a("a"),uHe=o("TrOCRConfig"),_He=o(" (TrOCR model)"),bHe=l(),Ym=a("li"),Ooe=a("strong"),vHe=o("unispeech"),FHe=o(" \u2014 "),Kk=a("a"),THe=o("UniSpeechConfig"),MHe=o(" (UniSpeech model)"),EHe=l(),Km=a("li"),Voe=a("strong"),CHe=o("unispeech-sat"),wHe=o(" \u2014 "),Zk=a("a"),AHe=o("UniSpeechSatConfig"),yHe=o(" (UniSpeechSat model)"),LHe=l(),Zm=a("li"),Xoe=a("strong"),xHe=o("van"),$He=o(" \u2014 "),eS=a("a"),kHe=o("VanConfig"),SHe=o(" (VAN model)"),RHe=l(),eg=a("li"),zoe=a("strong"),BHe=o("vilt"),PHe=o(" \u2014 "),oS=a("a"),IHe=o("ViltConfig"),qHe=o(" (ViLT model)"),NHe=l(),og=a("li"),Qoe=a("strong"),jHe=o("vision-encoder-decoder"),DHe=o(" \u2014 "),rS=a("a"),GHe=o("VisionEncoderDecoderConfig"),OHe=o(" (Vision Encoder decoder model)"),VHe=l(),rg=a("li"),Woe=a("strong"),XHe=o("vision-text-dual-encoder"),zHe=o(" \u2014 "),tS=a("a"),QHe=o("VisionTextDualEncoderConfig"),WHe=o(" (VisionTextDualEncoder model)"),HHe=l(),tg=a("li"),Hoe=a("strong"),UHe=o("visual_bert"),JHe=o(" \u2014 "),aS=a("a"),YHe=o("VisualBertConfig"),KHe=o(" (VisualBert model)"),ZHe=l(),ag=a("li"),Uoe=a("strong"),eUe=o("vit"),oUe=o(" \u2014 "),nS=a("a"),rUe=o("ViTConfig"),tUe=o(" (ViT model)"),aUe=l(),ng=a("li"),Joe=a("strong"),nUe=o("vit_mae"),sUe=o(" \u2014 "),sS=a("a"),lUe=o("ViTMAEConfig"),iUe=o(" (ViTMAE model)"),dUe=l(),sg=a("li"),Yoe=a("strong"),cUe=o("wav2vec2"),fUe=o(" \u2014 "),lS=a("a"),mUe=o("Wav2Vec2Config"),gUe=o(" (Wav2Vec2 model)"),hUe=l(),lg=a("li"),Koe=a("strong"),pUe=o("wavlm"),uUe=o(" \u2014 "),iS=a("a"),_Ue=o("WavLMConfig"),bUe=o(" (WavLM model)"),vUe=l(),ig=a("li"),Zoe=a("strong"),FUe=o("xglm"),TUe=o(" \u2014 "),dS=a("a"),MUe=o("XGLMConfig"),EUe=o(" (XGLM model)"),CUe=l(),dg=a("li"),ere=a("strong"),wUe=o("xlm"),AUe=o(" \u2014 "),cS=a("a"),yUe=o("XLMConfig"),LUe=o(" (XLM model)"),xUe=l(),cg=a("li"),ore=a("strong"),$Ue=o("xlm-prophetnet"),kUe=o(" \u2014 "),fS=a("a"),SUe=o("XLMProphetNetConfig"),RUe=o(" (XLMProphetNet model)"),BUe=l(),fg=a("li"),rre=a("strong"),PUe=o("xlm-roberta"),IUe=o(" \u2014 "),mS=a("a"),qUe=o("XLMRobertaConfig"),NUe=o(" (XLM-RoBERTa model)"),jUe=l(),mg=a("li"),tre=a("strong"),DUe=o("xlm-roberta-xl"),GUe=o(" \u2014 "),gS=a("a"),OUe=o("XLMRobertaXLConfig"),VUe=o(" (XLM-RoBERTa-XL model)"),XUe=l(),gg=a("li"),are=a("strong"),zUe=o("xlnet"),QUe=o(" \u2014 "),hS=a("a"),WUe=o("XLNetConfig"),HUe=o(" (XLNet model)"),UUe=l(),hg=a("li"),nre=a("strong"),JUe=o("yolos"),YUe=o(" \u2014 "),pS=a("a"),KUe=o("YolosConfig"),ZUe=o(" (YOLOS model)"),eJe=l(),pg=a("li"),sre=a("strong"),oJe=o("yoso"),rJe=o(" \u2014 "),uS=a("a"),tJe=o("YosoConfig"),aJe=o(" (YOSO model)"),nJe=l(),F(ug.$$.fragment),sJe=l(),_g=a("div"),F(tA.$$.fragment),lJe=l(),lre=a("p"),iJe=o("Register a new configuration for this class."),WPe=l(),bi=a("h2"),bg=a("a"),ire=a("span"),F(aA.$$.fragment),dJe=l(),dre=a("span"),cJe=o("AutoTokenizer"),HPe=l(),wo=a("div"),F(nA.$$.fragment),fJe=l(),sA=a("p"),mJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_S=a("a"),gJe=o("AutoTokenizer.from_pretrained()"),hJe=o(" class method."),pJe=l(),lA=a("p"),uJe=o("This class cannot be instantiated directly using "),cre=a("code"),_Je=o("__init__()"),bJe=o(" (throws an error)."),vJe=l(),Cr=a("div"),F(iA.$$.fragment),FJe=l(),fre=a("p"),TJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),MJe=l(),Ca=a("p"),EJe=o("The tokenizer class to instantiate is selected based on the "),mre=a("code"),CJe=o("model_type"),wJe=o(` property of the config object (either
passed as an argument or loaded from `),gre=a("code"),AJe=o("pretrained_model_name_or_path"),yJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hre=a("code"),LJe=o("pretrained_model_name_or_path"),xJe=o(":"),$Je=l(),k=a("ul"),kn=a("li"),pre=a("strong"),kJe=o("albert"),SJe=o(" \u2014 "),bS=a("a"),RJe=o("AlbertTokenizer"),BJe=o(" or "),vS=a("a"),PJe=o("AlbertTokenizerFast"),IJe=o(" (ALBERT model)"),qJe=l(),Sn=a("li"),ure=a("strong"),NJe=o("bart"),jJe=o(" \u2014 "),FS=a("a"),DJe=o("BartTokenizer"),GJe=o(" or "),TS=a("a"),OJe=o("BartTokenizerFast"),VJe=o(" (BART model)"),XJe=l(),Rn=a("li"),_re=a("strong"),zJe=o("barthez"),QJe=o(" \u2014 "),MS=a("a"),WJe=o("BarthezTokenizer"),HJe=o(" or "),ES=a("a"),UJe=o("BarthezTokenizerFast"),JJe=o(" (BARThez model)"),YJe=l(),vg=a("li"),bre=a("strong"),KJe=o("bartpho"),ZJe=o(" \u2014 "),CS=a("a"),eYe=o("BartphoTokenizer"),oYe=o(" (BARTpho model)"),rYe=l(),Bn=a("li"),vre=a("strong"),tYe=o("bert"),aYe=o(" \u2014 "),wS=a("a"),nYe=o("BertTokenizer"),sYe=o(" or "),AS=a("a"),lYe=o("BertTokenizerFast"),iYe=o(" (BERT model)"),dYe=l(),Fg=a("li"),Fre=a("strong"),cYe=o("bert-generation"),fYe=o(" \u2014 "),yS=a("a"),mYe=o("BertGenerationTokenizer"),gYe=o(" (Bert Generation model)"),hYe=l(),Tg=a("li"),Tre=a("strong"),pYe=o("bert-japanese"),uYe=o(" \u2014 "),LS=a("a"),_Ye=o("BertJapaneseTokenizer"),bYe=o(" (BertJapanese model)"),vYe=l(),Mg=a("li"),Mre=a("strong"),FYe=o("bertweet"),TYe=o(" \u2014 "),xS=a("a"),MYe=o("BertweetTokenizer"),EYe=o(" (Bertweet model)"),CYe=l(),Pn=a("li"),Ere=a("strong"),wYe=o("big_bird"),AYe=o(" \u2014 "),$S=a("a"),yYe=o("BigBirdTokenizer"),LYe=o(" or "),kS=a("a"),xYe=o("BigBirdTokenizerFast"),$Ye=o(" (BigBird model)"),kYe=l(),In=a("li"),Cre=a("strong"),SYe=o("bigbird_pegasus"),RYe=o(" \u2014 "),SS=a("a"),BYe=o("PegasusTokenizer"),PYe=o(" or "),RS=a("a"),IYe=o("PegasusTokenizerFast"),qYe=o(" (BigBirdPegasus model)"),NYe=l(),qn=a("li"),wre=a("strong"),jYe=o("blenderbot"),DYe=o(" \u2014 "),BS=a("a"),GYe=o("BlenderbotTokenizer"),OYe=o(" or "),PS=a("a"),VYe=o("BlenderbotTokenizerFast"),XYe=o(" (Blenderbot model)"),zYe=l(),Eg=a("li"),Are=a("strong"),QYe=o("blenderbot-small"),WYe=o(" \u2014 "),IS=a("a"),HYe=o("BlenderbotSmallTokenizer"),UYe=o(" (BlenderbotSmall model)"),JYe=l(),Cg=a("li"),yre=a("strong"),YYe=o("byt5"),KYe=o(" \u2014 "),qS=a("a"),ZYe=o("ByT5Tokenizer"),eKe=o(" (ByT5 model)"),oKe=l(),Nn=a("li"),Lre=a("strong"),rKe=o("camembert"),tKe=o(" \u2014 "),NS=a("a"),aKe=o("CamembertTokenizer"),nKe=o(" or "),jS=a("a"),sKe=o("CamembertTokenizerFast"),lKe=o(" (CamemBERT model)"),iKe=l(),wg=a("li"),xre=a("strong"),dKe=o("canine"),cKe=o(" \u2014 "),DS=a("a"),fKe=o("CanineTokenizer"),mKe=o(" (Canine model)"),gKe=l(),jn=a("li"),$re=a("strong"),hKe=o("clip"),pKe=o(" \u2014 "),GS=a("a"),uKe=o("CLIPTokenizer"),_Ke=o(" or "),OS=a("a"),bKe=o("CLIPTokenizerFast"),vKe=o(" (CLIP model)"),FKe=l(),Dn=a("li"),kre=a("strong"),TKe=o("convbert"),MKe=o(" \u2014 "),VS=a("a"),EKe=o("ConvBertTokenizer"),CKe=o(" or "),XS=a("a"),wKe=o("ConvBertTokenizerFast"),AKe=o(" (ConvBERT model)"),yKe=l(),Gn=a("li"),Sre=a("strong"),LKe=o("cpm"),xKe=o(" \u2014 "),zS=a("a"),$Ke=o("CpmTokenizer"),kKe=o(" or "),QS=a("a"),SKe=o("CpmTokenizerFast"),RKe=o(" (CPM model)"),BKe=l(),Ag=a("li"),Rre=a("strong"),PKe=o("ctrl"),IKe=o(" \u2014 "),WS=a("a"),qKe=o("CTRLTokenizer"),NKe=o(" (CTRL model)"),jKe=l(),On=a("li"),Bre=a("strong"),DKe=o("data2vec-text"),GKe=o(" \u2014 "),HS=a("a"),OKe=o("RobertaTokenizer"),VKe=o(" or "),US=a("a"),XKe=o("RobertaTokenizerFast"),zKe=o(" (Data2VecText model)"),QKe=l(),Vn=a("li"),Pre=a("strong"),WKe=o("deberta"),HKe=o(" \u2014 "),JS=a("a"),UKe=o("DebertaTokenizer"),JKe=o(" or "),YS=a("a"),YKe=o("DebertaTokenizerFast"),KKe=o(" (DeBERTa model)"),ZKe=l(),Xn=a("li"),Ire=a("strong"),eZe=o("deberta-v2"),oZe=o(" \u2014 "),KS=a("a"),rZe=o("DebertaV2Tokenizer"),tZe=o(" or "),ZS=a("a"),aZe=o("DebertaV2TokenizerFast"),nZe=o(" (DeBERTa-v2 model)"),sZe=l(),zn=a("li"),qre=a("strong"),lZe=o("distilbert"),iZe=o(" \u2014 "),eR=a("a"),dZe=o("DistilBertTokenizer"),cZe=o(" or "),oR=a("a"),fZe=o("DistilBertTokenizerFast"),mZe=o(" (DistilBERT model)"),gZe=l(),Qn=a("li"),Nre=a("strong"),hZe=o("dpr"),pZe=o(" \u2014 "),rR=a("a"),uZe=o("DPRQuestionEncoderTokenizer"),_Ze=o(" or "),tR=a("a"),bZe=o("DPRQuestionEncoderTokenizerFast"),vZe=o(" (DPR model)"),FZe=l(),Wn=a("li"),jre=a("strong"),TZe=o("electra"),MZe=o(" \u2014 "),aR=a("a"),EZe=o("ElectraTokenizer"),CZe=o(" or "),nR=a("a"),wZe=o("ElectraTokenizerFast"),AZe=o(" (ELECTRA model)"),yZe=l(),yg=a("li"),Dre=a("strong"),LZe=o("flaubert"),xZe=o(" \u2014 "),sR=a("a"),$Ze=o("FlaubertTokenizer"),kZe=o(" (FlauBERT model)"),SZe=l(),Hn=a("li"),Gre=a("strong"),RZe=o("fnet"),BZe=o(" \u2014 "),lR=a("a"),PZe=o("FNetTokenizer"),IZe=o(" or "),iR=a("a"),qZe=o("FNetTokenizerFast"),NZe=o(" (FNet model)"),jZe=l(),Lg=a("li"),Ore=a("strong"),DZe=o("fsmt"),GZe=o(" \u2014 "),dR=a("a"),OZe=o("FSMTTokenizer"),VZe=o(" (FairSeq Machine-Translation model)"),XZe=l(),Un=a("li"),Vre=a("strong"),zZe=o("funnel"),QZe=o(" \u2014 "),cR=a("a"),WZe=o("FunnelTokenizer"),HZe=o(" or "),fR=a("a"),UZe=o("FunnelTokenizerFast"),JZe=o(" (Funnel Transformer model)"),YZe=l(),Jn=a("li"),Xre=a("strong"),KZe=o("gpt2"),ZZe=o(" \u2014 "),mR=a("a"),eeo=o("GPT2Tokenizer"),oeo=o(" or "),gR=a("a"),reo=o("GPT2TokenizerFast"),teo=o(" (OpenAI GPT-2 model)"),aeo=l(),Yn=a("li"),zre=a("strong"),neo=o("gpt_neo"),seo=o(" \u2014 "),hR=a("a"),leo=o("GPT2Tokenizer"),ieo=o(" or "),pR=a("a"),deo=o("GPT2TokenizerFast"),ceo=o(" (GPT Neo model)"),feo=l(),Kn=a("li"),Qre=a("strong"),meo=o("gptj"),geo=o(" \u2014 "),uR=a("a"),heo=o("GPT2Tokenizer"),peo=o(" or "),_R=a("a"),ueo=o("GPT2TokenizerFast"),_eo=o(" (GPT-J model)"),beo=l(),Zn=a("li"),Wre=a("strong"),veo=o("herbert"),Feo=o(" \u2014 "),bR=a("a"),Teo=o("HerbertTokenizer"),Meo=o(" or "),vR=a("a"),Eeo=o("HerbertTokenizerFast"),Ceo=o(" (HerBERT model)"),weo=l(),xg=a("li"),Hre=a("strong"),Aeo=o("hubert"),yeo=o(" \u2014 "),FR=a("a"),Leo=o("Wav2Vec2CTCTokenizer"),xeo=o(" (Hubert model)"),$eo=l(),es=a("li"),Ure=a("strong"),keo=o("ibert"),Seo=o(" \u2014 "),TR=a("a"),Reo=o("RobertaTokenizer"),Beo=o(" or "),MR=a("a"),Peo=o("RobertaTokenizerFast"),Ieo=o(" (I-BERT model)"),qeo=l(),os=a("li"),Jre=a("strong"),Neo=o("layoutlm"),jeo=o(" \u2014 "),ER=a("a"),Deo=o("LayoutLMTokenizer"),Geo=o(" or "),CR=a("a"),Oeo=o("LayoutLMTokenizerFast"),Veo=o(" (LayoutLM model)"),Xeo=l(),rs=a("li"),Yre=a("strong"),zeo=o("layoutlmv2"),Qeo=o(" \u2014 "),wR=a("a"),Weo=o("LayoutLMv2Tokenizer"),Heo=o(" or "),AR=a("a"),Ueo=o("LayoutLMv2TokenizerFast"),Jeo=o(" (LayoutLMv2 model)"),Yeo=l(),ts=a("li"),Kre=a("strong"),Keo=o("layoutlmv3"),Zeo=o(" \u2014 "),yR=a("a"),eoo=o("LayoutLMv3Tokenizer"),ooo=o(" or "),LR=a("a"),roo=o("LayoutLMv3TokenizerFast"),too=o(" (LayoutLMv3 model)"),aoo=l(),as=a("li"),Zre=a("strong"),noo=o("layoutxlm"),soo=o(" \u2014 "),xR=a("a"),loo=o("LayoutXLMTokenizer"),ioo=o(" or "),$R=a("a"),doo=o("LayoutXLMTokenizerFast"),coo=o(" (LayoutXLM model)"),foo=l(),ns=a("li"),ete=a("strong"),moo=o("led"),goo=o(" \u2014 "),kR=a("a"),hoo=o("LEDTokenizer"),poo=o(" or "),SR=a("a"),uoo=o("LEDTokenizerFast"),_oo=o(" (LED model)"),boo=l(),ss=a("li"),ote=a("strong"),voo=o("longformer"),Foo=o(" \u2014 "),RR=a("a"),Too=o("LongformerTokenizer"),Moo=o(" or "),BR=a("a"),Eoo=o("LongformerTokenizerFast"),Coo=o(" (Longformer model)"),woo=l(),$g=a("li"),rte=a("strong"),Aoo=o("luke"),yoo=o(" \u2014 "),PR=a("a"),Loo=o("LukeTokenizer"),xoo=o(" (LUKE model)"),$oo=l(),ls=a("li"),tte=a("strong"),koo=o("lxmert"),Soo=o(" \u2014 "),IR=a("a"),Roo=o("LxmertTokenizer"),Boo=o(" or "),qR=a("a"),Poo=o("LxmertTokenizerFast"),Ioo=o(" (LXMERT model)"),qoo=l(),kg=a("li"),ate=a("strong"),Noo=o("m2m_100"),joo=o(" \u2014 "),NR=a("a"),Doo=o("M2M100Tokenizer"),Goo=o(" (M2M100 model)"),Ooo=l(),Sg=a("li"),nte=a("strong"),Voo=o("marian"),Xoo=o(" \u2014 "),jR=a("a"),zoo=o("MarianTokenizer"),Qoo=o(" (Marian model)"),Woo=l(),is=a("li"),ste=a("strong"),Hoo=o("mbart"),Uoo=o(" \u2014 "),DR=a("a"),Joo=o("MBartTokenizer"),Yoo=o(" or "),GR=a("a"),Koo=o("MBartTokenizerFast"),Zoo=o(" (mBART model)"),ero=l(),ds=a("li"),lte=a("strong"),oro=o("mbart50"),rro=o(" \u2014 "),OR=a("a"),tro=o("MBart50Tokenizer"),aro=o(" or "),VR=a("a"),nro=o("MBart50TokenizerFast"),sro=o(" (mBART-50 model)"),lro=l(),cs=a("li"),ite=a("strong"),iro=o("megatron-bert"),dro=o(" \u2014 "),XR=a("a"),cro=o("BertTokenizer"),fro=o(" or "),zR=a("a"),mro=o("BertTokenizerFast"),gro=o(" (MegatronBert model)"),hro=l(),Rg=a("li"),dte=a("strong"),pro=o("mluke"),uro=o(" \u2014 "),QR=a("a"),_ro=o("MLukeTokenizer"),bro=o(" (mLUKE model)"),vro=l(),fs=a("li"),cte=a("strong"),Fro=o("mobilebert"),Tro=o(" \u2014 "),WR=a("a"),Mro=o("MobileBertTokenizer"),Ero=o(" or "),HR=a("a"),Cro=o("MobileBertTokenizerFast"),wro=o(" (MobileBERT model)"),Aro=l(),ms=a("li"),fte=a("strong"),yro=o("mpnet"),Lro=o(" \u2014 "),UR=a("a"),xro=o("MPNetTokenizer"),$ro=o(" or "),JR=a("a"),kro=o("MPNetTokenizerFast"),Sro=o(" (MPNet model)"),Rro=l(),gs=a("li"),mte=a("strong"),Bro=o("mt5"),Pro=o(" \u2014 "),YR=a("a"),Iro=o("MT5Tokenizer"),qro=o(" or "),KR=a("a"),Nro=o("MT5TokenizerFast"),jro=o(" (mT5 model)"),Dro=l(),hs=a("li"),gte=a("strong"),Gro=o("nystromformer"),Oro=o(" \u2014 "),ZR=a("a"),Vro=o("AlbertTokenizer"),Xro=o(" or "),eB=a("a"),zro=o("AlbertTokenizerFast"),Qro=o(" (Nystromformer model)"),Wro=l(),ps=a("li"),hte=a("strong"),Hro=o("openai-gpt"),Uro=o(" \u2014 "),oB=a("a"),Jro=o("OpenAIGPTTokenizer"),Yro=o(" or "),rB=a("a"),Kro=o("OpenAIGPTTokenizerFast"),Zro=o(" (OpenAI GPT model)"),eto=l(),us=a("li"),pte=a("strong"),oto=o("pegasus"),rto=o(" \u2014 "),tB=a("a"),tto=o("PegasusTokenizer"),ato=o(" or "),aB=a("a"),nto=o("PegasusTokenizerFast"),sto=o(" (Pegasus model)"),lto=l(),Bg=a("li"),ute=a("strong"),ito=o("perceiver"),dto=o(" \u2014 "),nB=a("a"),cto=o("PerceiverTokenizer"),fto=o(" (Perceiver model)"),mto=l(),Pg=a("li"),_te=a("strong"),gto=o("phobert"),hto=o(" \u2014 "),sB=a("a"),pto=o("PhobertTokenizer"),uto=o(" (PhoBERT model)"),_to=l(),Ig=a("li"),bte=a("strong"),bto=o("plbart"),vto=o(" \u2014 "),lB=a("a"),Fto=o("PLBartTokenizer"),Tto=o(" (PLBart model)"),Mto=l(),qg=a("li"),vte=a("strong"),Eto=o("prophetnet"),Cto=o(" \u2014 "),iB=a("a"),wto=o("ProphetNetTokenizer"),Ato=o(" (ProphetNet model)"),yto=l(),_s=a("li"),Fte=a("strong"),Lto=o("qdqbert"),xto=o(" \u2014 "),dB=a("a"),$to=o("BertTokenizer"),kto=o(" or "),cB=a("a"),Sto=o("BertTokenizerFast"),Rto=o(" (QDQBert model)"),Bto=l(),Ng=a("li"),Tte=a("strong"),Pto=o("rag"),Ito=o(" \u2014 "),fB=a("a"),qto=o("RagTokenizer"),Nto=o(" (RAG model)"),jto=l(),bs=a("li"),Mte=a("strong"),Dto=o("realm"),Gto=o(" \u2014 "),mB=a("a"),Oto=o("RealmTokenizer"),Vto=o(" or "),gB=a("a"),Xto=o("RealmTokenizerFast"),zto=o(" (Realm model)"),Qto=l(),vs=a("li"),Ete=a("strong"),Wto=o("reformer"),Hto=o(" \u2014 "),hB=a("a"),Uto=o("ReformerTokenizer"),Jto=o(" or "),pB=a("a"),Yto=o("ReformerTokenizerFast"),Kto=o(" (Reformer model)"),Zto=l(),Fs=a("li"),Cte=a("strong"),eao=o("rembert"),oao=o(" \u2014 "),uB=a("a"),rao=o("RemBertTokenizer"),tao=o(" or "),_B=a("a"),aao=o("RemBertTokenizerFast"),nao=o(" (RemBERT model)"),sao=l(),Ts=a("li"),wte=a("strong"),lao=o("retribert"),iao=o(" \u2014 "),bB=a("a"),dao=o("RetriBertTokenizer"),cao=o(" or "),vB=a("a"),fao=o("RetriBertTokenizerFast"),mao=o(" (RetriBERT model)"),gao=l(),Ms=a("li"),Ate=a("strong"),hao=o("roberta"),pao=o(" \u2014 "),FB=a("a"),uao=o("RobertaTokenizer"),_ao=o(" or "),TB=a("a"),bao=o("RobertaTokenizerFast"),vao=o(" (RoBERTa model)"),Fao=l(),Es=a("li"),yte=a("strong"),Tao=o("roformer"),Mao=o(" \u2014 "),MB=a("a"),Eao=o("RoFormerTokenizer"),Cao=o(" or "),EB=a("a"),wao=o("RoFormerTokenizerFast"),Aao=o(" (RoFormer model)"),yao=l(),jg=a("li"),Lte=a("strong"),Lao=o("speech_to_text"),xao=o(" \u2014 "),CB=a("a"),$ao=o("Speech2TextTokenizer"),kao=o(" (Speech2Text model)"),Sao=l(),Dg=a("li"),xte=a("strong"),Rao=o("speech_to_text_2"),Bao=o(" \u2014 "),wB=a("a"),Pao=o("Speech2Text2Tokenizer"),Iao=o(" (Speech2Text2 model)"),qao=l(),Cs=a("li"),$te=a("strong"),Nao=o("splinter"),jao=o(" \u2014 "),AB=a("a"),Dao=o("SplinterTokenizer"),Gao=o(" or "),yB=a("a"),Oao=o("SplinterTokenizerFast"),Vao=o(" (Splinter model)"),Xao=l(),ws=a("li"),kte=a("strong"),zao=o("squeezebert"),Qao=o(" \u2014 "),LB=a("a"),Wao=o("SqueezeBertTokenizer"),Hao=o(" or "),xB=a("a"),Uao=o("SqueezeBertTokenizerFast"),Jao=o(" (SqueezeBERT model)"),Yao=l(),As=a("li"),Ste=a("strong"),Kao=o("t5"),Zao=o(" \u2014 "),$B=a("a"),eno=o("T5Tokenizer"),ono=o(" or "),kB=a("a"),rno=o("T5TokenizerFast"),tno=o(" (T5 model)"),ano=l(),Gg=a("li"),Rte=a("strong"),nno=o("tapas"),sno=o(" \u2014 "),SB=a("a"),lno=o("TapasTokenizer"),ino=o(" (TAPAS model)"),dno=l(),Og=a("li"),Bte=a("strong"),cno=o("tapex"),fno=o(" \u2014 "),RB=a("a"),mno=o("TapexTokenizer"),gno=o(" (TAPEX model)"),hno=l(),Vg=a("li"),Pte=a("strong"),pno=o("transfo-xl"),uno=o(" \u2014 "),BB=a("a"),_no=o("TransfoXLTokenizer"),bno=o(" (Transformer-XL model)"),vno=l(),ys=a("li"),Ite=a("strong"),Fno=o("visual_bert"),Tno=o(" \u2014 "),PB=a("a"),Mno=o("BertTokenizer"),Eno=o(" or "),IB=a("a"),Cno=o("BertTokenizerFast"),wno=o(" (VisualBert model)"),Ano=l(),Xg=a("li"),qte=a("strong"),yno=o("wav2vec2"),Lno=o(" \u2014 "),qB=a("a"),xno=o("Wav2Vec2CTCTokenizer"),$no=o(" (Wav2Vec2 model)"),kno=l(),zg=a("li"),Nte=a("strong"),Sno=o("wav2vec2_phoneme"),Rno=o(" \u2014 "),NB=a("a"),Bno=o("Wav2Vec2PhonemeCTCTokenizer"),Pno=o(" (Wav2Vec2Phoneme model)"),Ino=l(),Ls=a("li"),jte=a("strong"),qno=o("xglm"),Nno=o(" \u2014 "),jB=a("a"),jno=o("XGLMTokenizer"),Dno=o(" or "),DB=a("a"),Gno=o("XGLMTokenizerFast"),Ono=o(" (XGLM model)"),Vno=l(),Qg=a("li"),Dte=a("strong"),Xno=o("xlm"),zno=o(" \u2014 "),GB=a("a"),Qno=o("XLMTokenizer"),Wno=o(" (XLM model)"),Hno=l(),Wg=a("li"),Gte=a("strong"),Uno=o("xlm-prophetnet"),Jno=o(" \u2014 "),OB=a("a"),Yno=o("XLMProphetNetTokenizer"),Kno=o(" (XLMProphetNet model)"),Zno=l(),xs=a("li"),Ote=a("strong"),eso=o("xlm-roberta"),oso=o(" \u2014 "),VB=a("a"),rso=o("XLMRobertaTokenizer"),tso=o(" or "),XB=a("a"),aso=o("XLMRobertaTokenizerFast"),nso=o(" (XLM-RoBERTa model)"),sso=l(),$s=a("li"),Vte=a("strong"),lso=o("xlm-roberta-xl"),iso=o(" \u2014 "),zB=a("a"),dso=o("RobertaTokenizer"),cso=o(" or "),QB=a("a"),fso=o("RobertaTokenizerFast"),mso=o(" (XLM-RoBERTa-XL model)"),gso=l(),ks=a("li"),Xte=a("strong"),hso=o("xlnet"),pso=o(" \u2014 "),WB=a("a"),uso=o("XLNetTokenizer"),_so=o(" or "),HB=a("a"),bso=o("XLNetTokenizerFast"),vso=o(" (XLNet model)"),Fso=l(),Ss=a("li"),zte=a("strong"),Tso=o("yoso"),Mso=o(" \u2014 "),UB=a("a"),Eso=o("AlbertTokenizer"),Cso=o(" or "),JB=a("a"),wso=o("AlbertTokenizerFast"),Aso=o(" (YOSO model)"),yso=l(),F(Hg.$$.fragment),Lso=l(),Ug=a("div"),F(dA.$$.fragment),xso=l(),Qte=a("p"),$so=o("Register a new tokenizer in this mapping."),UPe=l(),vi=a("h2"),Jg=a("a"),Wte=a("span"),F(cA.$$.fragment),kso=l(),Hte=a("span"),Sso=o("AutoFeatureExtractor"),JPe=l(),Ao=a("div"),F(fA.$$.fragment),Rso=l(),mA=a("p"),Bso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),YB=a("a"),Pso=o("AutoFeatureExtractor.from_pretrained()"),Iso=o(" class method."),qso=l(),gA=a("p"),Nso=o("This class cannot be instantiated directly using "),Ute=a("code"),jso=o("__init__()"),Dso=o(" (throws an error)."),Gso=l(),Qe=a("div"),F(hA.$$.fragment),Oso=l(),Jte=a("p"),Vso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Xso=l(),wa=a("p"),zso=o("The feature extractor class to instantiate is selected based on the "),Yte=a("code"),Qso=o("model_type"),Wso=o(` property of the config object
(either passed as an argument or loaded from `),Kte=a("code"),Hso=o("pretrained_model_name_or_path"),Uso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zte=a("code"),Jso=o("pretrained_model_name_or_path"),Yso=o(":"),Kso=l(),oe=a("ul"),Yg=a("li"),eae=a("strong"),Zso=o("beit"),elo=o(" \u2014 "),KB=a("a"),olo=o("BeitFeatureExtractor"),rlo=o(" (BEiT model)"),tlo=l(),Kg=a("li"),oae=a("strong"),alo=o("clip"),nlo=o(" \u2014 "),ZB=a("a"),slo=o("CLIPFeatureExtractor"),llo=o(" (CLIP model)"),ilo=l(),Zg=a("li"),rae=a("strong"),dlo=o("convnext"),clo=o(" \u2014 "),eP=a("a"),flo=o("ConvNextFeatureExtractor"),mlo=o(" (ConvNext model)"),glo=l(),eh=a("li"),tae=a("strong"),hlo=o("data2vec-audio"),plo=o(" \u2014 "),oP=a("a"),ulo=o("Wav2Vec2FeatureExtractor"),_lo=o(" (Data2VecAudio model)"),blo=l(),oh=a("li"),aae=a("strong"),vlo=o("data2vec-vision"),Flo=o(" \u2014 "),rP=a("a"),Tlo=o("BeitFeatureExtractor"),Mlo=o(" (Data2VecVision model)"),Elo=l(),rh=a("li"),nae=a("strong"),Clo=o("deit"),wlo=o(" \u2014 "),tP=a("a"),Alo=o("DeiTFeatureExtractor"),ylo=o(" (DeiT model)"),Llo=l(),th=a("li"),sae=a("strong"),xlo=o("detr"),$lo=o(" \u2014 "),aP=a("a"),klo=o("DetrFeatureExtractor"),Slo=o(" (DETR model)"),Rlo=l(),ah=a("li"),lae=a("strong"),Blo=o("dpt"),Plo=o(" \u2014 "),nP=a("a"),Ilo=o("DPTFeatureExtractor"),qlo=o(" (DPT model)"),Nlo=l(),nh=a("li"),iae=a("strong"),jlo=o("glpn"),Dlo=o(" \u2014 "),sP=a("a"),Glo=o("GLPNFeatureExtractor"),Olo=o(" (GLPN model)"),Vlo=l(),sh=a("li"),dae=a("strong"),Xlo=o("hubert"),zlo=o(" \u2014 "),lP=a("a"),Qlo=o("Wav2Vec2FeatureExtractor"),Wlo=o(" (Hubert model)"),Hlo=l(),lh=a("li"),cae=a("strong"),Ulo=o("layoutlmv2"),Jlo=o(" \u2014 "),iP=a("a"),Ylo=o("LayoutLMv2FeatureExtractor"),Klo=o(" (LayoutLMv2 model)"),Zlo=l(),ih=a("li"),fae=a("strong"),eio=o("layoutlmv3"),oio=o(" \u2014 "),dP=a("a"),rio=o("LayoutLMv3FeatureExtractor"),tio=o(" (LayoutLMv3 model)"),aio=l(),dh=a("li"),mae=a("strong"),nio=o("maskformer"),sio=o(" \u2014 "),cP=a("a"),lio=o("MaskFormerFeatureExtractor"),iio=o(" (MaskFormer model)"),dio=l(),ch=a("li"),gae=a("strong"),cio=o("perceiver"),fio=o(" \u2014 "),fP=a("a"),mio=o("PerceiverFeatureExtractor"),gio=o(" (Perceiver model)"),hio=l(),fh=a("li"),hae=a("strong"),pio=o("poolformer"),uio=o(" \u2014 "),mP=a("a"),_io=o("PoolFormerFeatureExtractor"),bio=o(" (PoolFormer model)"),vio=l(),mh=a("li"),pae=a("strong"),Fio=o("regnet"),Tio=o(" \u2014 "),gP=a("a"),Mio=o("ConvNextFeatureExtractor"),Eio=o(" (RegNet model)"),Cio=l(),gh=a("li"),uae=a("strong"),wio=o("resnet"),Aio=o(" \u2014 "),hP=a("a"),yio=o("ConvNextFeatureExtractor"),Lio=o(" (ResNet model)"),xio=l(),hh=a("li"),_ae=a("strong"),$io=o("segformer"),kio=o(" \u2014 "),pP=a("a"),Sio=o("SegformerFeatureExtractor"),Rio=o(" (SegFormer model)"),Bio=l(),ph=a("li"),bae=a("strong"),Pio=o("speech_to_text"),Iio=o(" \u2014 "),uP=a("a"),qio=o("Speech2TextFeatureExtractor"),Nio=o(" (Speech2Text model)"),jio=l(),uh=a("li"),vae=a("strong"),Dio=o("swin"),Gio=o(" \u2014 "),_P=a("a"),Oio=o("ViTFeatureExtractor"),Vio=o(" (Swin model)"),Xio=l(),_h=a("li"),Fae=a("strong"),zio=o("van"),Qio=o(" \u2014 "),bP=a("a"),Wio=o("ConvNextFeatureExtractor"),Hio=o(" (VAN model)"),Uio=l(),bh=a("li"),Tae=a("strong"),Jio=o("vit"),Yio=o(" \u2014 "),vP=a("a"),Kio=o("ViTFeatureExtractor"),Zio=o(" (ViT model)"),edo=l(),vh=a("li"),Mae=a("strong"),odo=o("vit_mae"),rdo=o(" \u2014 "),FP=a("a"),tdo=o("ViTFeatureExtractor"),ado=o(" (ViTMAE model)"),ndo=l(),Fh=a("li"),Eae=a("strong"),sdo=o("wav2vec2"),ldo=o(" \u2014 "),TP=a("a"),ido=o("Wav2Vec2FeatureExtractor"),ddo=o(" (Wav2Vec2 model)"),cdo=l(),Th=a("li"),Cae=a("strong"),fdo=o("yolos"),mdo=o(" \u2014 "),MP=a("a"),gdo=o("YolosFeatureExtractor"),hdo=o(" (YOLOS model)"),pdo=l(),F(Mh.$$.fragment),udo=l(),F(Eh.$$.fragment),_do=l(),Ch=a("div"),F(pA.$$.fragment),bdo=l(),wae=a("p"),vdo=o("Register a new feature extractor for this class."),YPe=l(),Fi=a("h2"),wh=a("a"),Aae=a("span"),F(uA.$$.fragment),Fdo=l(),yae=a("span"),Tdo=o("AutoProcessor"),KPe=l(),yo=a("div"),F(_A.$$.fragment),Mdo=l(),bA=a("p"),Edo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EP=a("a"),Cdo=o("AutoProcessor.from_pretrained()"),wdo=o(" class method."),Ado=l(),vA=a("p"),ydo=o("This class cannot be instantiated directly using "),Lae=a("code"),Ldo=o("__init__()"),xdo=o(" (throws an error)."),$do=l(),We=a("div"),F(FA.$$.fragment),kdo=l(),xae=a("p"),Sdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Rdo=l(),Ti=a("p"),Bdo=o("The processor class to instantiate is selected based on the "),$ae=a("code"),Pdo=o("model_type"),Ido=o(` property of the config object (either
passed as an argument or loaded from `),kae=a("code"),qdo=o("pretrained_model_name_or_path"),Ndo=o(" if possible):"),jdo=l(),be=a("ul"),Ah=a("li"),Sae=a("strong"),Ddo=o("clip"),Gdo=o(" \u2014 "),CP=a("a"),Odo=o("CLIPProcessor"),Vdo=o(" (CLIP model)"),Xdo=l(),yh=a("li"),Rae=a("strong"),zdo=o("layoutlmv2"),Qdo=o(" \u2014 "),wP=a("a"),Wdo=o("LayoutLMv2Processor"),Hdo=o(" (LayoutLMv2 model)"),Udo=l(),Lh=a("li"),Bae=a("strong"),Jdo=o("layoutlmv3"),Ydo=o(" \u2014 "),AP=a("a"),Kdo=o("LayoutLMv3Processor"),Zdo=o(" (LayoutLMv3 model)"),eco=l(),xh=a("li"),Pae=a("strong"),oco=o("layoutxlm"),rco=o(" \u2014 "),yP=a("a"),tco=o("LayoutXLMProcessor"),aco=o(" (LayoutXLM model)"),nco=l(),$h=a("li"),Iae=a("strong"),sco=o("sew"),lco=o(" \u2014 "),LP=a("a"),ico=o("Wav2Vec2Processor"),dco=o(" (SEW model)"),cco=l(),kh=a("li"),qae=a("strong"),fco=o("sew-d"),mco=o(" \u2014 "),xP=a("a"),gco=o("Wav2Vec2Processor"),hco=o(" (SEW-D model)"),pco=l(),Sh=a("li"),Nae=a("strong"),uco=o("speech_to_text"),_co=o(" \u2014 "),$P=a("a"),bco=o("Speech2TextProcessor"),vco=o(" (Speech2Text model)"),Fco=l(),Rh=a("li"),jae=a("strong"),Tco=o("speech_to_text_2"),Mco=o(" \u2014 "),kP=a("a"),Eco=o("Speech2Text2Processor"),Cco=o(" (Speech2Text2 model)"),wco=l(),Bh=a("li"),Dae=a("strong"),Aco=o("trocr"),yco=o(" \u2014 "),SP=a("a"),Lco=o("TrOCRProcessor"),xco=o(" (TrOCR model)"),$co=l(),Ph=a("li"),Gae=a("strong"),kco=o("unispeech"),Sco=o(" \u2014 "),RP=a("a"),Rco=o("Wav2Vec2Processor"),Bco=o(" (UniSpeech model)"),Pco=l(),Ih=a("li"),Oae=a("strong"),Ico=o("unispeech-sat"),qco=o(" \u2014 "),BP=a("a"),Nco=o("Wav2Vec2Processor"),jco=o(" (UniSpeechSat model)"),Dco=l(),qh=a("li"),Vae=a("strong"),Gco=o("vilt"),Oco=o(" \u2014 "),PP=a("a"),Vco=o("ViltProcessor"),Xco=o(" (ViLT model)"),zco=l(),Nh=a("li"),Xae=a("strong"),Qco=o("vision-text-dual-encoder"),Wco=o(" \u2014 "),IP=a("a"),Hco=o("VisionTextDualEncoderProcessor"),Uco=o(" (VisionTextDualEncoder model)"),Jco=l(),jh=a("li"),zae=a("strong"),Yco=o("wav2vec2"),Kco=o(" \u2014 "),qP=a("a"),Zco=o("Wav2Vec2Processor"),efo=o(" (Wav2Vec2 model)"),ofo=l(),Dh=a("li"),Qae=a("strong"),rfo=o("wavlm"),tfo=o(" \u2014 "),NP=a("a"),afo=o("Wav2Vec2Processor"),nfo=o(" (WavLM model)"),sfo=l(),F(Gh.$$.fragment),lfo=l(),F(Oh.$$.fragment),ifo=l(),Vh=a("div"),F(TA.$$.fragment),dfo=l(),Wae=a("p"),cfo=o("Register a new processor for this class."),ZPe=l(),Mi=a("h2"),Xh=a("a"),Hae=a("span"),F(MA.$$.fragment),ffo=l(),Uae=a("span"),mfo=o("AutoModel"),eIe=l(),Lo=a("div"),F(EA.$$.fragment),gfo=l(),Ei=a("p"),hfo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jP=a("a"),pfo=o("from_pretrained()"),ufo=o(" class method or the "),DP=a("a"),_fo=o("from_config()"),bfo=o(` class
method.`),vfo=l(),CA=a("p"),Ffo=o("This class cannot be instantiated directly using "),Jae=a("code"),Tfo=o("__init__()"),Mfo=o(" (throws an error)."),Efo=l(),ot=a("div"),F(wA.$$.fragment),Cfo=l(),Yae=a("p"),wfo=o("Instantiates one of the base model classes of the library from a configuration."),Afo=l(),Ci=a("p"),yfo=o(`Note:
Loading a model from its configuration file does `),Kae=a("strong"),Lfo=o("not"),xfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GP=a("a"),$fo=o("from_pretrained()"),kfo=o(" to load the model weights."),Sfo=l(),F(zh.$$.fragment),Rfo=l(),He=a("div"),F(AA.$$.fragment),Bfo=l(),Zae=a("p"),Pfo=o("Instantiate one of the base model classes of the library from a pretrained model."),Ifo=l(),Aa=a("p"),qfo=o("The model class to instantiate is selected based on the "),ene=a("code"),Nfo=o("model_type"),jfo=o(` property of the config object (either
passed as an argument or loaded from `),one=a("code"),Dfo=o("pretrained_model_name_or_path"),Gfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rne=a("code"),Ofo=o("pretrained_model_name_or_path"),Vfo=o(":"),Xfo=l(),x=a("ul"),Qh=a("li"),tne=a("strong"),zfo=o("albert"),Qfo=o(" \u2014 "),OP=a("a"),Wfo=o("AlbertModel"),Hfo=o(" (ALBERT model)"),Ufo=l(),Wh=a("li"),ane=a("strong"),Jfo=o("bart"),Yfo=o(" \u2014 "),VP=a("a"),Kfo=o("BartModel"),Zfo=o(" (BART model)"),emo=l(),Hh=a("li"),nne=a("strong"),omo=o("beit"),rmo=o(" \u2014 "),XP=a("a"),tmo=o("BeitModel"),amo=o(" (BEiT model)"),nmo=l(),Uh=a("li"),sne=a("strong"),smo=o("bert"),lmo=o(" \u2014 "),zP=a("a"),imo=o("BertModel"),dmo=o(" (BERT model)"),cmo=l(),Jh=a("li"),lne=a("strong"),fmo=o("bert-generation"),mmo=o(" \u2014 "),QP=a("a"),gmo=o("BertGenerationEncoder"),hmo=o(" (Bert Generation model)"),pmo=l(),Yh=a("li"),ine=a("strong"),umo=o("big_bird"),_mo=o(" \u2014 "),WP=a("a"),bmo=o("BigBirdModel"),vmo=o(" (BigBird model)"),Fmo=l(),Kh=a("li"),dne=a("strong"),Tmo=o("bigbird_pegasus"),Mmo=o(" \u2014 "),HP=a("a"),Emo=o("BigBirdPegasusModel"),Cmo=o(" (BigBirdPegasus model)"),wmo=l(),Zh=a("li"),cne=a("strong"),Amo=o("blenderbot"),ymo=o(" \u2014 "),UP=a("a"),Lmo=o("BlenderbotModel"),xmo=o(" (Blenderbot model)"),$mo=l(),ep=a("li"),fne=a("strong"),kmo=o("blenderbot-small"),Smo=o(" \u2014 "),JP=a("a"),Rmo=o("BlenderbotSmallModel"),Bmo=o(" (BlenderbotSmall model)"),Pmo=l(),op=a("li"),mne=a("strong"),Imo=o("camembert"),qmo=o(" \u2014 "),YP=a("a"),Nmo=o("CamembertModel"),jmo=o(" (CamemBERT model)"),Dmo=l(),rp=a("li"),gne=a("strong"),Gmo=o("canine"),Omo=o(" \u2014 "),KP=a("a"),Vmo=o("CanineModel"),Xmo=o(" (Canine model)"),zmo=l(),tp=a("li"),hne=a("strong"),Qmo=o("clip"),Wmo=o(" \u2014 "),ZP=a("a"),Hmo=o("CLIPModel"),Umo=o(" (CLIP model)"),Jmo=l(),ap=a("li"),pne=a("strong"),Ymo=o("convbert"),Kmo=o(" \u2014 "),eI=a("a"),Zmo=o("ConvBertModel"),ego=o(" (ConvBERT model)"),ogo=l(),np=a("li"),une=a("strong"),rgo=o("convnext"),tgo=o(" \u2014 "),oI=a("a"),ago=o("ConvNextModel"),ngo=o(" (ConvNext model)"),sgo=l(),sp=a("li"),_ne=a("strong"),lgo=o("ctrl"),igo=o(" \u2014 "),rI=a("a"),dgo=o("CTRLModel"),cgo=o(" (CTRL model)"),fgo=l(),lp=a("li"),bne=a("strong"),mgo=o("data2vec-audio"),ggo=o(" \u2014 "),tI=a("a"),hgo=o("Data2VecAudioModel"),pgo=o(" (Data2VecAudio model)"),ugo=l(),ip=a("li"),vne=a("strong"),_go=o("data2vec-text"),bgo=o(" \u2014 "),aI=a("a"),vgo=o("Data2VecTextModel"),Fgo=o(" (Data2VecText model)"),Tgo=l(),dp=a("li"),Fne=a("strong"),Mgo=o("data2vec-vision"),Ego=o(" \u2014 "),nI=a("a"),Cgo=o("Data2VecVisionModel"),wgo=o(" (Data2VecVision model)"),Ago=l(),cp=a("li"),Tne=a("strong"),ygo=o("deberta"),Lgo=o(" \u2014 "),sI=a("a"),xgo=o("DebertaModel"),$go=o(" (DeBERTa model)"),kgo=l(),fp=a("li"),Mne=a("strong"),Sgo=o("deberta-v2"),Rgo=o(" \u2014 "),lI=a("a"),Bgo=o("DebertaV2Model"),Pgo=o(" (DeBERTa-v2 model)"),Igo=l(),mp=a("li"),Ene=a("strong"),qgo=o("decision_transformer"),Ngo=o(" \u2014 "),iI=a("a"),jgo=o("DecisionTransformerModel"),Dgo=o(" (Decision Transformer model)"),Ggo=l(),gp=a("li"),Cne=a("strong"),Ogo=o("deit"),Vgo=o(" \u2014 "),dI=a("a"),Xgo=o("DeiTModel"),zgo=o(" (DeiT model)"),Qgo=l(),hp=a("li"),wne=a("strong"),Wgo=o("detr"),Hgo=o(" \u2014 "),cI=a("a"),Ugo=o("DetrModel"),Jgo=o(" (DETR model)"),Ygo=l(),pp=a("li"),Ane=a("strong"),Kgo=o("distilbert"),Zgo=o(" \u2014 "),fI=a("a"),eho=o("DistilBertModel"),oho=o(" (DistilBERT model)"),rho=l(),up=a("li"),yne=a("strong"),tho=o("dpr"),aho=o(" \u2014 "),mI=a("a"),nho=o("DPRQuestionEncoder"),sho=o(" (DPR model)"),lho=l(),_p=a("li"),Lne=a("strong"),iho=o("dpt"),dho=o(" \u2014 "),gI=a("a"),cho=o("DPTModel"),fho=o(" (DPT model)"),mho=l(),bp=a("li"),xne=a("strong"),gho=o("electra"),hho=o(" \u2014 "),hI=a("a"),pho=o("ElectraModel"),uho=o(" (ELECTRA model)"),_ho=l(),vp=a("li"),$ne=a("strong"),bho=o("flaubert"),vho=o(" \u2014 "),pI=a("a"),Fho=o("FlaubertModel"),Tho=o(" (FlauBERT model)"),Mho=l(),Fp=a("li"),kne=a("strong"),Eho=o("fnet"),Cho=o(" \u2014 "),uI=a("a"),who=o("FNetModel"),Aho=o(" (FNet model)"),yho=l(),Tp=a("li"),Sne=a("strong"),Lho=o("fsmt"),xho=o(" \u2014 "),_I=a("a"),$ho=o("FSMTModel"),kho=o(" (FairSeq Machine-Translation model)"),Sho=l(),Rs=a("li"),Rne=a("strong"),Rho=o("funnel"),Bho=o(" \u2014 "),bI=a("a"),Pho=o("FunnelModel"),Iho=o(" or "),vI=a("a"),qho=o("FunnelBaseModel"),Nho=o(" (Funnel Transformer model)"),jho=l(),Mp=a("li"),Bne=a("strong"),Dho=o("glpn"),Gho=o(" \u2014 "),FI=a("a"),Oho=o("GLPNModel"),Vho=o(" (GLPN model)"),Xho=l(),Ep=a("li"),Pne=a("strong"),zho=o("gpt2"),Qho=o(" \u2014 "),TI=a("a"),Who=o("GPT2Model"),Hho=o(" (OpenAI GPT-2 model)"),Uho=l(),Cp=a("li"),Ine=a("strong"),Jho=o("gpt_neo"),Yho=o(" \u2014 "),MI=a("a"),Kho=o("GPTNeoModel"),Zho=o(" (GPT Neo model)"),epo=l(),wp=a("li"),qne=a("strong"),opo=o("gptj"),rpo=o(" \u2014 "),EI=a("a"),tpo=o("GPTJModel"),apo=o(" (GPT-J model)"),npo=l(),Ap=a("li"),Nne=a("strong"),spo=o("hubert"),lpo=o(" \u2014 "),CI=a("a"),ipo=o("HubertModel"),dpo=o(" (Hubert model)"),cpo=l(),yp=a("li"),jne=a("strong"),fpo=o("ibert"),mpo=o(" \u2014 "),wI=a("a"),gpo=o("IBertModel"),hpo=o(" (I-BERT model)"),ppo=l(),Lp=a("li"),Dne=a("strong"),upo=o("imagegpt"),_po=o(" \u2014 "),AI=a("a"),bpo=o("ImageGPTModel"),vpo=o(" (ImageGPT model)"),Fpo=l(),xp=a("li"),Gne=a("strong"),Tpo=o("layoutlm"),Mpo=o(" \u2014 "),yI=a("a"),Epo=o("LayoutLMModel"),Cpo=o(" (LayoutLM model)"),wpo=l(),$p=a("li"),One=a("strong"),Apo=o("layoutlmv2"),ypo=o(" \u2014 "),LI=a("a"),Lpo=o("LayoutLMv2Model"),xpo=o(" (LayoutLMv2 model)"),$po=l(),kp=a("li"),Vne=a("strong"),kpo=o("layoutlmv3"),Spo=o(" \u2014 "),xI=a("a"),Rpo=o("LayoutLMv3Model"),Bpo=o(" (LayoutLMv3 model)"),Ppo=l(),Sp=a("li"),Xne=a("strong"),Ipo=o("led"),qpo=o(" \u2014 "),$I=a("a"),Npo=o("LEDModel"),jpo=o(" (LED model)"),Dpo=l(),Rp=a("li"),zne=a("strong"),Gpo=o("longformer"),Opo=o(" \u2014 "),kI=a("a"),Vpo=o("LongformerModel"),Xpo=o(" (Longformer model)"),zpo=l(),Bp=a("li"),Qne=a("strong"),Qpo=o("luke"),Wpo=o(" \u2014 "),SI=a("a"),Hpo=o("LukeModel"),Upo=o(" (LUKE model)"),Jpo=l(),Pp=a("li"),Wne=a("strong"),Ypo=o("lxmert"),Kpo=o(" \u2014 "),RI=a("a"),Zpo=o("LxmertModel"),euo=o(" (LXMERT model)"),ouo=l(),Ip=a("li"),Hne=a("strong"),ruo=o("m2m_100"),tuo=o(" \u2014 "),BI=a("a"),auo=o("M2M100Model"),nuo=o(" (M2M100 model)"),suo=l(),qp=a("li"),Une=a("strong"),luo=o("marian"),iuo=o(" \u2014 "),PI=a("a"),duo=o("MarianModel"),cuo=o(" (Marian model)"),fuo=l(),Np=a("li"),Jne=a("strong"),muo=o("maskformer"),guo=o(" \u2014 "),II=a("a"),huo=o("MaskFormerModel"),puo=o(" (MaskFormer model)"),uuo=l(),jp=a("li"),Yne=a("strong"),_uo=o("mbart"),buo=o(" \u2014 "),qI=a("a"),vuo=o("MBartModel"),Fuo=o(" (mBART model)"),Tuo=l(),Dp=a("li"),Kne=a("strong"),Muo=o("megatron-bert"),Euo=o(" \u2014 "),NI=a("a"),Cuo=o("MegatronBertModel"),wuo=o(" (MegatronBert model)"),Auo=l(),Gp=a("li"),Zne=a("strong"),yuo=o("mobilebert"),Luo=o(" \u2014 "),jI=a("a"),xuo=o("MobileBertModel"),$uo=o(" (MobileBERT model)"),kuo=l(),Op=a("li"),ese=a("strong"),Suo=o("mpnet"),Ruo=o(" \u2014 "),DI=a("a"),Buo=o("MPNetModel"),Puo=o(" (MPNet model)"),Iuo=l(),Vp=a("li"),ose=a("strong"),quo=o("mt5"),Nuo=o(" \u2014 "),GI=a("a"),juo=o("MT5Model"),Duo=o(" (mT5 model)"),Guo=l(),Xp=a("li"),rse=a("strong"),Ouo=o("nystromformer"),Vuo=o(" \u2014 "),OI=a("a"),Xuo=o("NystromformerModel"),zuo=o(" (Nystromformer model)"),Quo=l(),zp=a("li"),tse=a("strong"),Wuo=o("openai-gpt"),Huo=o(" \u2014 "),VI=a("a"),Uuo=o("OpenAIGPTModel"),Juo=o(" (OpenAI GPT model)"),Yuo=l(),Qp=a("li"),ase=a("strong"),Kuo=o("pegasus"),Zuo=o(" \u2014 "),XI=a("a"),e_o=o("PegasusModel"),o_o=o(" (Pegasus model)"),r_o=l(),Wp=a("li"),nse=a("strong"),t_o=o("perceiver"),a_o=o(" \u2014 "),zI=a("a"),n_o=o("PerceiverModel"),s_o=o(" (Perceiver model)"),l_o=l(),Hp=a("li"),sse=a("strong"),i_o=o("plbart"),d_o=o(" \u2014 "),QI=a("a"),c_o=o("PLBartModel"),f_o=o(" (PLBart model)"),m_o=l(),Up=a("li"),lse=a("strong"),g_o=o("poolformer"),h_o=o(" \u2014 "),WI=a("a"),p_o=o("PoolFormerModel"),u_o=o(" (PoolFormer model)"),__o=l(),Jp=a("li"),ise=a("strong"),b_o=o("prophetnet"),v_o=o(" \u2014 "),HI=a("a"),F_o=o("ProphetNetModel"),T_o=o(" (ProphetNet model)"),M_o=l(),Yp=a("li"),dse=a("strong"),E_o=o("qdqbert"),C_o=o(" \u2014 "),UI=a("a"),w_o=o("QDQBertModel"),A_o=o(" (QDQBert model)"),y_o=l(),Kp=a("li"),cse=a("strong"),L_o=o("reformer"),x_o=o(" \u2014 "),JI=a("a"),$_o=o("ReformerModel"),k_o=o(" (Reformer model)"),S_o=l(),Zp=a("li"),fse=a("strong"),R_o=o("regnet"),B_o=o(" \u2014 "),YI=a("a"),P_o=o("RegNetModel"),I_o=o(" (RegNet model)"),q_o=l(),eu=a("li"),mse=a("strong"),N_o=o("rembert"),j_o=o(" \u2014 "),KI=a("a"),D_o=o("RemBertModel"),G_o=o(" (RemBERT model)"),O_o=l(),ou=a("li"),gse=a("strong"),V_o=o("resnet"),X_o=o(" \u2014 "),ZI=a("a"),z_o=o("ResNetModel"),Q_o=o(" (ResNet model)"),W_o=l(),ru=a("li"),hse=a("strong"),H_o=o("retribert"),U_o=o(" \u2014 "),eq=a("a"),J_o=o("RetriBertModel"),Y_o=o(" (RetriBERT model)"),K_o=l(),tu=a("li"),pse=a("strong"),Z_o=o("roberta"),e0o=o(" \u2014 "),oq=a("a"),o0o=o("RobertaModel"),r0o=o(" (RoBERTa model)"),t0o=l(),au=a("li"),use=a("strong"),a0o=o("roformer"),n0o=o(" \u2014 "),rq=a("a"),s0o=o("RoFormerModel"),l0o=o(" (RoFormer model)"),i0o=l(),nu=a("li"),_se=a("strong"),d0o=o("segformer"),c0o=o(" \u2014 "),tq=a("a"),f0o=o("SegformerModel"),m0o=o(" (SegFormer model)"),g0o=l(),su=a("li"),bse=a("strong"),h0o=o("sew"),p0o=o(" \u2014 "),aq=a("a"),u0o=o("SEWModel"),_0o=o(" (SEW model)"),b0o=l(),lu=a("li"),vse=a("strong"),v0o=o("sew-d"),F0o=o(" \u2014 "),nq=a("a"),T0o=o("SEWDModel"),M0o=o(" (SEW-D model)"),E0o=l(),iu=a("li"),Fse=a("strong"),C0o=o("speech_to_text"),w0o=o(" \u2014 "),sq=a("a"),A0o=o("Speech2TextModel"),y0o=o(" (Speech2Text model)"),L0o=l(),du=a("li"),Tse=a("strong"),x0o=o("splinter"),$0o=o(" \u2014 "),lq=a("a"),k0o=o("SplinterModel"),S0o=o(" (Splinter model)"),R0o=l(),cu=a("li"),Mse=a("strong"),B0o=o("squeezebert"),P0o=o(" \u2014 "),iq=a("a"),I0o=o("SqueezeBertModel"),q0o=o(" (SqueezeBERT model)"),N0o=l(),fu=a("li"),Ese=a("strong"),j0o=o("swin"),D0o=o(" \u2014 "),dq=a("a"),G0o=o("SwinModel"),O0o=o(" (Swin model)"),V0o=l(),mu=a("li"),Cse=a("strong"),X0o=o("t5"),z0o=o(" \u2014 "),cq=a("a"),Q0o=o("T5Model"),W0o=o(" (T5 model)"),H0o=l(),gu=a("li"),wse=a("strong"),U0o=o("tapas"),J0o=o(" \u2014 "),fq=a("a"),Y0o=o("TapasModel"),K0o=o(" (TAPAS model)"),Z0o=l(),hu=a("li"),Ase=a("strong"),e1o=o("transfo-xl"),o1o=o(" \u2014 "),mq=a("a"),r1o=o("TransfoXLModel"),t1o=o(" (Transformer-XL model)"),a1o=l(),pu=a("li"),yse=a("strong"),n1o=o("unispeech"),s1o=o(" \u2014 "),gq=a("a"),l1o=o("UniSpeechModel"),i1o=o(" (UniSpeech model)"),d1o=l(),uu=a("li"),Lse=a("strong"),c1o=o("unispeech-sat"),f1o=o(" \u2014 "),hq=a("a"),m1o=o("UniSpeechSatModel"),g1o=o(" (UniSpeechSat model)"),h1o=l(),_u=a("li"),xse=a("strong"),p1o=o("van"),u1o=o(" \u2014 "),pq=a("a"),_1o=o("VanModel"),b1o=o(" (VAN model)"),v1o=l(),bu=a("li"),$se=a("strong"),F1o=o("vilt"),T1o=o(" \u2014 "),uq=a("a"),M1o=o("ViltModel"),E1o=o(" (ViLT model)"),C1o=l(),vu=a("li"),kse=a("strong"),w1o=o("vision-text-dual-encoder"),A1o=o(" \u2014 "),_q=a("a"),y1o=o("VisionTextDualEncoderModel"),L1o=o(" (VisionTextDualEncoder model)"),x1o=l(),Fu=a("li"),Sse=a("strong"),$1o=o("visual_bert"),k1o=o(" \u2014 "),bq=a("a"),S1o=o("VisualBertModel"),R1o=o(" (VisualBert model)"),B1o=l(),Tu=a("li"),Rse=a("strong"),P1o=o("vit"),I1o=o(" \u2014 "),vq=a("a"),q1o=o("ViTModel"),N1o=o(" (ViT model)"),j1o=l(),Mu=a("li"),Bse=a("strong"),D1o=o("vit_mae"),G1o=o(" \u2014 "),Fq=a("a"),O1o=o("ViTMAEModel"),V1o=o(" (ViTMAE model)"),X1o=l(),Eu=a("li"),Pse=a("strong"),z1o=o("wav2vec2"),Q1o=o(" \u2014 "),Tq=a("a"),W1o=o("Wav2Vec2Model"),H1o=o(" (Wav2Vec2 model)"),U1o=l(),Cu=a("li"),Ise=a("strong"),J1o=o("wavlm"),Y1o=o(" \u2014 "),Mq=a("a"),K1o=o("WavLMModel"),Z1o=o(" (WavLM model)"),ebo=l(),wu=a("li"),qse=a("strong"),obo=o("xglm"),rbo=o(" \u2014 "),Eq=a("a"),tbo=o("XGLMModel"),abo=o(" (XGLM model)"),nbo=l(),Au=a("li"),Nse=a("strong"),sbo=o("xlm"),lbo=o(" \u2014 "),Cq=a("a"),ibo=o("XLMModel"),dbo=o(" (XLM model)"),cbo=l(),yu=a("li"),jse=a("strong"),fbo=o("xlm-prophetnet"),mbo=o(" \u2014 "),wq=a("a"),gbo=o("XLMProphetNetModel"),hbo=o(" (XLMProphetNet model)"),pbo=l(),Lu=a("li"),Dse=a("strong"),ubo=o("xlm-roberta"),_bo=o(" \u2014 "),Aq=a("a"),bbo=o("XLMRobertaModel"),vbo=o(" (XLM-RoBERTa model)"),Fbo=l(),xu=a("li"),Gse=a("strong"),Tbo=o("xlm-roberta-xl"),Mbo=o(" \u2014 "),yq=a("a"),Ebo=o("XLMRobertaXLModel"),Cbo=o(" (XLM-RoBERTa-XL model)"),wbo=l(),$u=a("li"),Ose=a("strong"),Abo=o("xlnet"),ybo=o(" \u2014 "),Lq=a("a"),Lbo=o("XLNetModel"),xbo=o(" (XLNet model)"),$bo=l(),ku=a("li"),Vse=a("strong"),kbo=o("yolos"),Sbo=o(" \u2014 "),xq=a("a"),Rbo=o("YolosModel"),Bbo=o(" (YOLOS model)"),Pbo=l(),Su=a("li"),Xse=a("strong"),Ibo=o("yoso"),qbo=o(" \u2014 "),$q=a("a"),Nbo=o("YosoModel"),jbo=o(" (YOSO model)"),Dbo=l(),Ru=a("p"),Gbo=o("The model is set in evaluation mode by default using "),zse=a("code"),Obo=o("model.eval()"),Vbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qse=a("code"),Xbo=o("model.train()"),zbo=l(),F(Bu.$$.fragment),oIe=l(),wi=a("h2"),Pu=a("a"),Wse=a("span"),F(yA.$$.fragment),Qbo=l(),Hse=a("span"),Wbo=o("AutoModelForPreTraining"),rIe=l(),xo=a("div"),F(LA.$$.fragment),Hbo=l(),Ai=a("p"),Ubo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kq=a("a"),Jbo=o("from_pretrained()"),Ybo=o(" class method or the "),Sq=a("a"),Kbo=o("from_config()"),Zbo=o(` class
method.`),e2o=l(),xA=a("p"),o2o=o("This class cannot be instantiated directly using "),Use=a("code"),r2o=o("__init__()"),t2o=o(" (throws an error)."),a2o=l(),rt=a("div"),F($A.$$.fragment),n2o=l(),Jse=a("p"),s2o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),l2o=l(),yi=a("p"),i2o=o(`Note:
Loading a model from its configuration file does `),Yse=a("strong"),d2o=o("not"),c2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=a("a"),f2o=o("from_pretrained()"),m2o=o(" to load the model weights."),g2o=l(),F(Iu.$$.fragment),h2o=l(),Ue=a("div"),F(kA.$$.fragment),p2o=l(),Kse=a("p"),u2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_2o=l(),ya=a("p"),b2o=o("The model class to instantiate is selected based on the "),Zse=a("code"),v2o=o("model_type"),F2o=o(` property of the config object (either
passed as an argument or loaded from `),ele=a("code"),T2o=o("pretrained_model_name_or_path"),M2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=a("code"),E2o=o("pretrained_model_name_or_path"),C2o=o(":"),w2o=l(),O=a("ul"),qu=a("li"),rle=a("strong"),A2o=o("albert"),y2o=o(" \u2014 "),Bq=a("a"),L2o=o("AlbertForPreTraining"),x2o=o(" (ALBERT model)"),$2o=l(),Nu=a("li"),tle=a("strong"),k2o=o("bart"),S2o=o(" \u2014 "),Pq=a("a"),R2o=o("BartForConditionalGeneration"),B2o=o(" (BART model)"),P2o=l(),ju=a("li"),ale=a("strong"),I2o=o("bert"),q2o=o(" \u2014 "),Iq=a("a"),N2o=o("BertForPreTraining"),j2o=o(" (BERT model)"),D2o=l(),Du=a("li"),nle=a("strong"),G2o=o("big_bird"),O2o=o(" \u2014 "),qq=a("a"),V2o=o("BigBirdForPreTraining"),X2o=o(" (BigBird model)"),z2o=l(),Gu=a("li"),sle=a("strong"),Q2o=o("camembert"),W2o=o(" \u2014 "),Nq=a("a"),H2o=o("CamembertForMaskedLM"),U2o=o(" (CamemBERT model)"),J2o=l(),Ou=a("li"),lle=a("strong"),Y2o=o("ctrl"),K2o=o(" \u2014 "),jq=a("a"),Z2o=o("CTRLLMHeadModel"),evo=o(" (CTRL model)"),ovo=l(),Vu=a("li"),ile=a("strong"),rvo=o("data2vec-text"),tvo=o(" \u2014 "),Dq=a("a"),avo=o("Data2VecTextForMaskedLM"),nvo=o(" (Data2VecText model)"),svo=l(),Xu=a("li"),dle=a("strong"),lvo=o("deberta"),ivo=o(" \u2014 "),Gq=a("a"),dvo=o("DebertaForMaskedLM"),cvo=o(" (DeBERTa model)"),fvo=l(),zu=a("li"),cle=a("strong"),mvo=o("deberta-v2"),gvo=o(" \u2014 "),Oq=a("a"),hvo=o("DebertaV2ForMaskedLM"),pvo=o(" (DeBERTa-v2 model)"),uvo=l(),Qu=a("li"),fle=a("strong"),_vo=o("distilbert"),bvo=o(" \u2014 "),Vq=a("a"),vvo=o("DistilBertForMaskedLM"),Fvo=o(" (DistilBERT model)"),Tvo=l(),Wu=a("li"),mle=a("strong"),Mvo=o("electra"),Evo=o(" \u2014 "),Xq=a("a"),Cvo=o("ElectraForPreTraining"),wvo=o(" (ELECTRA model)"),Avo=l(),Hu=a("li"),gle=a("strong"),yvo=o("flaubert"),Lvo=o(" \u2014 "),zq=a("a"),xvo=o("FlaubertWithLMHeadModel"),$vo=o(" (FlauBERT model)"),kvo=l(),Uu=a("li"),hle=a("strong"),Svo=o("fnet"),Rvo=o(" \u2014 "),Qq=a("a"),Bvo=o("FNetForPreTraining"),Pvo=o(" (FNet model)"),Ivo=l(),Ju=a("li"),ple=a("strong"),qvo=o("fsmt"),Nvo=o(" \u2014 "),Wq=a("a"),jvo=o("FSMTForConditionalGeneration"),Dvo=o(" (FairSeq Machine-Translation model)"),Gvo=l(),Yu=a("li"),ule=a("strong"),Ovo=o("funnel"),Vvo=o(" \u2014 "),Hq=a("a"),Xvo=o("FunnelForPreTraining"),zvo=o(" (Funnel Transformer model)"),Qvo=l(),Ku=a("li"),_le=a("strong"),Wvo=o("gpt2"),Hvo=o(" \u2014 "),Uq=a("a"),Uvo=o("GPT2LMHeadModel"),Jvo=o(" (OpenAI GPT-2 model)"),Yvo=l(),Zu=a("li"),ble=a("strong"),Kvo=o("ibert"),Zvo=o(" \u2014 "),Jq=a("a"),eFo=o("IBertForMaskedLM"),oFo=o(" (I-BERT model)"),rFo=l(),e_=a("li"),vle=a("strong"),tFo=o("layoutlm"),aFo=o(" \u2014 "),Yq=a("a"),nFo=o("LayoutLMForMaskedLM"),sFo=o(" (LayoutLM model)"),lFo=l(),o_=a("li"),Fle=a("strong"),iFo=o("longformer"),dFo=o(" \u2014 "),Kq=a("a"),cFo=o("LongformerForMaskedLM"),fFo=o(" (Longformer model)"),mFo=l(),r_=a("li"),Tle=a("strong"),gFo=o("lxmert"),hFo=o(" \u2014 "),Zq=a("a"),pFo=o("LxmertForPreTraining"),uFo=o(" (LXMERT model)"),_Fo=l(),t_=a("li"),Mle=a("strong"),bFo=o("megatron-bert"),vFo=o(" \u2014 "),eN=a("a"),FFo=o("MegatronBertForPreTraining"),TFo=o(" (MegatronBert model)"),MFo=l(),a_=a("li"),Ele=a("strong"),EFo=o("mobilebert"),CFo=o(" \u2014 "),oN=a("a"),wFo=o("MobileBertForPreTraining"),AFo=o(" (MobileBERT model)"),yFo=l(),n_=a("li"),Cle=a("strong"),LFo=o("mpnet"),xFo=o(" \u2014 "),rN=a("a"),$Fo=o("MPNetForMaskedLM"),kFo=o(" (MPNet model)"),SFo=l(),s_=a("li"),wle=a("strong"),RFo=o("openai-gpt"),BFo=o(" \u2014 "),tN=a("a"),PFo=o("OpenAIGPTLMHeadModel"),IFo=o(" (OpenAI GPT model)"),qFo=l(),l_=a("li"),Ale=a("strong"),NFo=o("retribert"),jFo=o(" \u2014 "),aN=a("a"),DFo=o("RetriBertModel"),GFo=o(" (RetriBERT model)"),OFo=l(),i_=a("li"),yle=a("strong"),VFo=o("roberta"),XFo=o(" \u2014 "),nN=a("a"),zFo=o("RobertaForMaskedLM"),QFo=o(" (RoBERTa model)"),WFo=l(),d_=a("li"),Lle=a("strong"),HFo=o("squeezebert"),UFo=o(" \u2014 "),sN=a("a"),JFo=o("SqueezeBertForMaskedLM"),YFo=o(" (SqueezeBERT model)"),KFo=l(),c_=a("li"),xle=a("strong"),ZFo=o("t5"),e6o=o(" \u2014 "),lN=a("a"),o6o=o("T5ForConditionalGeneration"),r6o=o(" (T5 model)"),t6o=l(),f_=a("li"),$le=a("strong"),a6o=o("tapas"),n6o=o(" \u2014 "),iN=a("a"),s6o=o("TapasForMaskedLM"),l6o=o(" (TAPAS model)"),i6o=l(),m_=a("li"),kle=a("strong"),d6o=o("transfo-xl"),c6o=o(" \u2014 "),dN=a("a"),f6o=o("TransfoXLLMHeadModel"),m6o=o(" (Transformer-XL model)"),g6o=l(),g_=a("li"),Sle=a("strong"),h6o=o("unispeech"),p6o=o(" \u2014 "),cN=a("a"),u6o=o("UniSpeechForPreTraining"),_6o=o(" (UniSpeech model)"),b6o=l(),h_=a("li"),Rle=a("strong"),v6o=o("unispeech-sat"),F6o=o(" \u2014 "),fN=a("a"),T6o=o("UniSpeechSatForPreTraining"),M6o=o(" (UniSpeechSat model)"),E6o=l(),p_=a("li"),Ble=a("strong"),C6o=o("visual_bert"),w6o=o(" \u2014 "),mN=a("a"),A6o=o("VisualBertForPreTraining"),y6o=o(" (VisualBert model)"),L6o=l(),u_=a("li"),Ple=a("strong"),x6o=o("vit_mae"),$6o=o(" \u2014 "),gN=a("a"),k6o=o("ViTMAEForPreTraining"),S6o=o(" (ViTMAE model)"),R6o=l(),__=a("li"),Ile=a("strong"),B6o=o("wav2vec2"),P6o=o(" \u2014 "),hN=a("a"),I6o=o("Wav2Vec2ForPreTraining"),q6o=o(" (Wav2Vec2 model)"),N6o=l(),b_=a("li"),qle=a("strong"),j6o=o("xlm"),D6o=o(" \u2014 "),pN=a("a"),G6o=o("XLMWithLMHeadModel"),O6o=o(" (XLM model)"),V6o=l(),v_=a("li"),Nle=a("strong"),X6o=o("xlm-roberta"),z6o=o(" \u2014 "),uN=a("a"),Q6o=o("XLMRobertaForMaskedLM"),W6o=o(" (XLM-RoBERTa model)"),H6o=l(),F_=a("li"),jle=a("strong"),U6o=o("xlm-roberta-xl"),J6o=o(" \u2014 "),_N=a("a"),Y6o=o("XLMRobertaXLForMaskedLM"),K6o=o(" (XLM-RoBERTa-XL model)"),Z6o=l(),T_=a("li"),Dle=a("strong"),eTo=o("xlnet"),oTo=o(" \u2014 "),bN=a("a"),rTo=o("XLNetLMHeadModel"),tTo=o(" (XLNet model)"),aTo=l(),M_=a("p"),nTo=o("The model is set in evaluation mode by default using "),Gle=a("code"),sTo=o("model.eval()"),lTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=a("code"),iTo=o("model.train()"),dTo=l(),F(E_.$$.fragment),tIe=l(),Li=a("h2"),C_=a("a"),Vle=a("span"),F(SA.$$.fragment),cTo=l(),Xle=a("span"),fTo=o("AutoModelForCausalLM"),aIe=l(),$o=a("div"),F(RA.$$.fragment),mTo=l(),xi=a("p"),gTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vN=a("a"),hTo=o("from_pretrained()"),pTo=o(" class method or the "),FN=a("a"),uTo=o("from_config()"),_To=o(` class
method.`),bTo=l(),BA=a("p"),vTo=o("This class cannot be instantiated directly using "),zle=a("code"),FTo=o("__init__()"),TTo=o(" (throws an error)."),MTo=l(),tt=a("div"),F(PA.$$.fragment),ETo=l(),Qle=a("p"),CTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wTo=l(),$i=a("p"),ATo=o(`Note:
Loading a model from its configuration file does `),Wle=a("strong"),yTo=o("not"),LTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=a("a"),xTo=o("from_pretrained()"),$To=o(" to load the model weights."),kTo=l(),F(w_.$$.fragment),STo=l(),Je=a("div"),F(IA.$$.fragment),RTo=l(),Hle=a("p"),BTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PTo=l(),La=a("p"),ITo=o("The model class to instantiate is selected based on the "),Ule=a("code"),qTo=o("model_type"),NTo=o(` property of the config object (either
passed as an argument or loaded from `),Jle=a("code"),jTo=o("pretrained_model_name_or_path"),DTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=a("code"),GTo=o("pretrained_model_name_or_path"),OTo=o(":"),VTo=l(),z=a("ul"),A_=a("li"),Kle=a("strong"),XTo=o("bart"),zTo=o(" \u2014 "),MN=a("a"),QTo=o("BartForCausalLM"),WTo=o(" (BART model)"),HTo=l(),y_=a("li"),Zle=a("strong"),UTo=o("bert"),JTo=o(" \u2014 "),EN=a("a"),YTo=o("BertLMHeadModel"),KTo=o(" (BERT model)"),ZTo=l(),L_=a("li"),eie=a("strong"),e7o=o("bert-generation"),o7o=o(" \u2014 "),CN=a("a"),r7o=o("BertGenerationDecoder"),t7o=o(" (Bert Generation model)"),a7o=l(),x_=a("li"),oie=a("strong"),n7o=o("big_bird"),s7o=o(" \u2014 "),wN=a("a"),l7o=o("BigBirdForCausalLM"),i7o=o(" (BigBird model)"),d7o=l(),$_=a("li"),rie=a("strong"),c7o=o("bigbird_pegasus"),f7o=o(" \u2014 "),AN=a("a"),m7o=o("BigBirdPegasusForCausalLM"),g7o=o(" (BigBirdPegasus model)"),h7o=l(),k_=a("li"),tie=a("strong"),p7o=o("blenderbot"),u7o=o(" \u2014 "),yN=a("a"),_7o=o("BlenderbotForCausalLM"),b7o=o(" (Blenderbot model)"),v7o=l(),S_=a("li"),aie=a("strong"),F7o=o("blenderbot-small"),T7o=o(" \u2014 "),LN=a("a"),M7o=o("BlenderbotSmallForCausalLM"),E7o=o(" (BlenderbotSmall model)"),C7o=l(),R_=a("li"),nie=a("strong"),w7o=o("camembert"),A7o=o(" \u2014 "),xN=a("a"),y7o=o("CamembertForCausalLM"),L7o=o(" (CamemBERT model)"),x7o=l(),B_=a("li"),sie=a("strong"),$7o=o("ctrl"),k7o=o(" \u2014 "),$N=a("a"),S7o=o("CTRLLMHeadModel"),R7o=o(" (CTRL model)"),B7o=l(),P_=a("li"),lie=a("strong"),P7o=o("data2vec-text"),I7o=o(" \u2014 "),kN=a("a"),q7o=o("Data2VecTextForCausalLM"),N7o=o(" (Data2VecText model)"),j7o=l(),I_=a("li"),iie=a("strong"),D7o=o("electra"),G7o=o(" \u2014 "),SN=a("a"),O7o=o("ElectraForCausalLM"),V7o=o(" (ELECTRA model)"),X7o=l(),q_=a("li"),die=a("strong"),z7o=o("gpt2"),Q7o=o(" \u2014 "),RN=a("a"),W7o=o("GPT2LMHeadModel"),H7o=o(" (OpenAI GPT-2 model)"),U7o=l(),N_=a("li"),cie=a("strong"),J7o=o("gpt_neo"),Y7o=o(" \u2014 "),BN=a("a"),K7o=o("GPTNeoForCausalLM"),Z7o=o(" (GPT Neo model)"),eMo=l(),j_=a("li"),fie=a("strong"),oMo=o("gptj"),rMo=o(" \u2014 "),PN=a("a"),tMo=o("GPTJForCausalLM"),aMo=o(" (GPT-J model)"),nMo=l(),D_=a("li"),mie=a("strong"),sMo=o("marian"),lMo=o(" \u2014 "),IN=a("a"),iMo=o("MarianForCausalLM"),dMo=o(" (Marian model)"),cMo=l(),G_=a("li"),gie=a("strong"),fMo=o("mbart"),mMo=o(" \u2014 "),qN=a("a"),gMo=o("MBartForCausalLM"),hMo=o(" (mBART model)"),pMo=l(),O_=a("li"),hie=a("strong"),uMo=o("megatron-bert"),_Mo=o(" \u2014 "),NN=a("a"),bMo=o("MegatronBertForCausalLM"),vMo=o(" (MegatronBert model)"),FMo=l(),V_=a("li"),pie=a("strong"),TMo=o("openai-gpt"),MMo=o(" \u2014 "),jN=a("a"),EMo=o("OpenAIGPTLMHeadModel"),CMo=o(" (OpenAI GPT model)"),wMo=l(),X_=a("li"),uie=a("strong"),AMo=o("pegasus"),yMo=o(" \u2014 "),DN=a("a"),LMo=o("PegasusForCausalLM"),xMo=o(" (Pegasus model)"),$Mo=l(),z_=a("li"),_ie=a("strong"),kMo=o("plbart"),SMo=o(" \u2014 "),GN=a("a"),RMo=o("PLBartForCausalLM"),BMo=o(" (PLBart model)"),PMo=l(),Q_=a("li"),bie=a("strong"),IMo=o("prophetnet"),qMo=o(" \u2014 "),ON=a("a"),NMo=o("ProphetNetForCausalLM"),jMo=o(" (ProphetNet model)"),DMo=l(),W_=a("li"),vie=a("strong"),GMo=o("qdqbert"),OMo=o(" \u2014 "),VN=a("a"),VMo=o("QDQBertLMHeadModel"),XMo=o(" (QDQBert model)"),zMo=l(),H_=a("li"),Fie=a("strong"),QMo=o("reformer"),WMo=o(" \u2014 "),XN=a("a"),HMo=o("ReformerModelWithLMHead"),UMo=o(" (Reformer model)"),JMo=l(),U_=a("li"),Tie=a("strong"),YMo=o("rembert"),KMo=o(" \u2014 "),zN=a("a"),ZMo=o("RemBertForCausalLM"),e4o=o(" (RemBERT model)"),o4o=l(),J_=a("li"),Mie=a("strong"),r4o=o("roberta"),t4o=o(" \u2014 "),QN=a("a"),a4o=o("RobertaForCausalLM"),n4o=o(" (RoBERTa model)"),s4o=l(),Y_=a("li"),Eie=a("strong"),l4o=o("roformer"),i4o=o(" \u2014 "),WN=a("a"),d4o=o("RoFormerForCausalLM"),c4o=o(" (RoFormer model)"),f4o=l(),K_=a("li"),Cie=a("strong"),m4o=o("speech_to_text_2"),g4o=o(" \u2014 "),HN=a("a"),h4o=o("Speech2Text2ForCausalLM"),p4o=o(" (Speech2Text2 model)"),u4o=l(),Z_=a("li"),wie=a("strong"),_4o=o("transfo-xl"),b4o=o(" \u2014 "),UN=a("a"),v4o=o("TransfoXLLMHeadModel"),F4o=o(" (Transformer-XL model)"),T4o=l(),e0=a("li"),Aie=a("strong"),M4o=o("trocr"),E4o=o(" \u2014 "),JN=a("a"),C4o=o("TrOCRForCausalLM"),w4o=o(" (TrOCR model)"),A4o=l(),o0=a("li"),yie=a("strong"),y4o=o("xglm"),L4o=o(" \u2014 "),YN=a("a"),x4o=o("XGLMForCausalLM"),$4o=o(" (XGLM model)"),k4o=l(),r0=a("li"),Lie=a("strong"),S4o=o("xlm"),R4o=o(" \u2014 "),KN=a("a"),B4o=o("XLMWithLMHeadModel"),P4o=o(" (XLM model)"),I4o=l(),t0=a("li"),xie=a("strong"),q4o=o("xlm-prophetnet"),N4o=o(" \u2014 "),ZN=a("a"),j4o=o("XLMProphetNetForCausalLM"),D4o=o(" (XLMProphetNet model)"),G4o=l(),a0=a("li"),$ie=a("strong"),O4o=o("xlm-roberta"),V4o=o(" \u2014 "),ej=a("a"),X4o=o("XLMRobertaForCausalLM"),z4o=o(" (XLM-RoBERTa model)"),Q4o=l(),n0=a("li"),kie=a("strong"),W4o=o("xlm-roberta-xl"),H4o=o(" \u2014 "),oj=a("a"),U4o=o("XLMRobertaXLForCausalLM"),J4o=o(" (XLM-RoBERTa-XL model)"),Y4o=l(),s0=a("li"),Sie=a("strong"),K4o=o("xlnet"),Z4o=o(" \u2014 "),rj=a("a"),eEo=o("XLNetLMHeadModel"),oEo=o(" (XLNet model)"),rEo=l(),l0=a("p"),tEo=o("The model is set in evaluation mode by default using "),Rie=a("code"),aEo=o("model.eval()"),nEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bie=a("code"),sEo=o("model.train()"),lEo=l(),F(i0.$$.fragment),nIe=l(),ki=a("h2"),d0=a("a"),Pie=a("span"),F(qA.$$.fragment),iEo=l(),Iie=a("span"),dEo=o("AutoModelForMaskedLM"),sIe=l(),ko=a("div"),F(NA.$$.fragment),cEo=l(),Si=a("p"),fEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tj=a("a"),mEo=o("from_pretrained()"),gEo=o(" class method or the "),aj=a("a"),hEo=o("from_config()"),pEo=o(` class
method.`),uEo=l(),jA=a("p"),_Eo=o("This class cannot be instantiated directly using "),qie=a("code"),bEo=o("__init__()"),vEo=o(" (throws an error)."),FEo=l(),at=a("div"),F(DA.$$.fragment),TEo=l(),Nie=a("p"),MEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),EEo=l(),Ri=a("p"),CEo=o(`Note:
Loading a model from its configuration file does `),jie=a("strong"),wEo=o("not"),AEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=a("a"),yEo=o("from_pretrained()"),LEo=o(" to load the model weights."),xEo=l(),F(c0.$$.fragment),$Eo=l(),Ye=a("div"),F(GA.$$.fragment),kEo=l(),Die=a("p"),SEo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),REo=l(),xa=a("p"),BEo=o("The model class to instantiate is selected based on the "),Gie=a("code"),PEo=o("model_type"),IEo=o(` property of the config object (either
passed as an argument or loaded from `),Oie=a("code"),qEo=o("pretrained_model_name_or_path"),NEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=a("code"),jEo=o("pretrained_model_name_or_path"),DEo=o(":"),GEo=l(),Q=a("ul"),f0=a("li"),Xie=a("strong"),OEo=o("albert"),VEo=o(" \u2014 "),sj=a("a"),XEo=o("AlbertForMaskedLM"),zEo=o(" (ALBERT model)"),QEo=l(),m0=a("li"),zie=a("strong"),WEo=o("bart"),HEo=o(" \u2014 "),lj=a("a"),UEo=o("BartForConditionalGeneration"),JEo=o(" (BART model)"),YEo=l(),g0=a("li"),Qie=a("strong"),KEo=o("bert"),ZEo=o(" \u2014 "),ij=a("a"),e5o=o("BertForMaskedLM"),o5o=o(" (BERT model)"),r5o=l(),h0=a("li"),Wie=a("strong"),t5o=o("big_bird"),a5o=o(" \u2014 "),dj=a("a"),n5o=o("BigBirdForMaskedLM"),s5o=o(" (BigBird model)"),l5o=l(),p0=a("li"),Hie=a("strong"),i5o=o("camembert"),d5o=o(" \u2014 "),cj=a("a"),c5o=o("CamembertForMaskedLM"),f5o=o(" (CamemBERT model)"),m5o=l(),u0=a("li"),Uie=a("strong"),g5o=o("convbert"),h5o=o(" \u2014 "),fj=a("a"),p5o=o("ConvBertForMaskedLM"),u5o=o(" (ConvBERT model)"),_5o=l(),_0=a("li"),Jie=a("strong"),b5o=o("data2vec-text"),v5o=o(" \u2014 "),mj=a("a"),F5o=o("Data2VecTextForMaskedLM"),T5o=o(" (Data2VecText model)"),M5o=l(),b0=a("li"),Yie=a("strong"),E5o=o("deberta"),C5o=o(" \u2014 "),gj=a("a"),w5o=o("DebertaForMaskedLM"),A5o=o(" (DeBERTa model)"),y5o=l(),v0=a("li"),Kie=a("strong"),L5o=o("deberta-v2"),x5o=o(" \u2014 "),hj=a("a"),$5o=o("DebertaV2ForMaskedLM"),k5o=o(" (DeBERTa-v2 model)"),S5o=l(),F0=a("li"),Zie=a("strong"),R5o=o("distilbert"),B5o=o(" \u2014 "),pj=a("a"),P5o=o("DistilBertForMaskedLM"),I5o=o(" (DistilBERT model)"),q5o=l(),T0=a("li"),ede=a("strong"),N5o=o("electra"),j5o=o(" \u2014 "),uj=a("a"),D5o=o("ElectraForMaskedLM"),G5o=o(" (ELECTRA model)"),O5o=l(),M0=a("li"),ode=a("strong"),V5o=o("flaubert"),X5o=o(" \u2014 "),_j=a("a"),z5o=o("FlaubertWithLMHeadModel"),Q5o=o(" (FlauBERT model)"),W5o=l(),E0=a("li"),rde=a("strong"),H5o=o("fnet"),U5o=o(" \u2014 "),bj=a("a"),J5o=o("FNetForMaskedLM"),Y5o=o(" (FNet model)"),K5o=l(),C0=a("li"),tde=a("strong"),Z5o=o("funnel"),eCo=o(" \u2014 "),vj=a("a"),oCo=o("FunnelForMaskedLM"),rCo=o(" (Funnel Transformer model)"),tCo=l(),w0=a("li"),ade=a("strong"),aCo=o("ibert"),nCo=o(" \u2014 "),Fj=a("a"),sCo=o("IBertForMaskedLM"),lCo=o(" (I-BERT model)"),iCo=l(),A0=a("li"),nde=a("strong"),dCo=o("layoutlm"),cCo=o(" \u2014 "),Tj=a("a"),fCo=o("LayoutLMForMaskedLM"),mCo=o(" (LayoutLM model)"),gCo=l(),y0=a("li"),sde=a("strong"),hCo=o("longformer"),pCo=o(" \u2014 "),Mj=a("a"),uCo=o("LongformerForMaskedLM"),_Co=o(" (Longformer model)"),bCo=l(),L0=a("li"),lde=a("strong"),vCo=o("mbart"),FCo=o(" \u2014 "),Ej=a("a"),TCo=o("MBartForConditionalGeneration"),MCo=o(" (mBART model)"),ECo=l(),x0=a("li"),ide=a("strong"),CCo=o("megatron-bert"),wCo=o(" \u2014 "),Cj=a("a"),ACo=o("MegatronBertForMaskedLM"),yCo=o(" (MegatronBert model)"),LCo=l(),$0=a("li"),dde=a("strong"),xCo=o("mobilebert"),$Co=o(" \u2014 "),wj=a("a"),kCo=o("MobileBertForMaskedLM"),SCo=o(" (MobileBERT model)"),RCo=l(),k0=a("li"),cde=a("strong"),BCo=o("mpnet"),PCo=o(" \u2014 "),Aj=a("a"),ICo=o("MPNetForMaskedLM"),qCo=o(" (MPNet model)"),NCo=l(),S0=a("li"),fde=a("strong"),jCo=o("nystromformer"),DCo=o(" \u2014 "),yj=a("a"),GCo=o("NystromformerForMaskedLM"),OCo=o(" (Nystromformer model)"),VCo=l(),R0=a("li"),mde=a("strong"),XCo=o("perceiver"),zCo=o(" \u2014 "),Lj=a("a"),QCo=o("PerceiverForMaskedLM"),WCo=o(" (Perceiver model)"),HCo=l(),B0=a("li"),gde=a("strong"),UCo=o("qdqbert"),JCo=o(" \u2014 "),xj=a("a"),YCo=o("QDQBertForMaskedLM"),KCo=o(" (QDQBert model)"),ZCo=l(),P0=a("li"),hde=a("strong"),e3o=o("reformer"),o3o=o(" \u2014 "),$j=a("a"),r3o=o("ReformerForMaskedLM"),t3o=o(" (Reformer model)"),a3o=l(),I0=a("li"),pde=a("strong"),n3o=o("rembert"),s3o=o(" \u2014 "),kj=a("a"),l3o=o("RemBertForMaskedLM"),i3o=o(" (RemBERT model)"),d3o=l(),q0=a("li"),ude=a("strong"),c3o=o("roberta"),f3o=o(" \u2014 "),Sj=a("a"),m3o=o("RobertaForMaskedLM"),g3o=o(" (RoBERTa model)"),h3o=l(),N0=a("li"),_de=a("strong"),p3o=o("roformer"),u3o=o(" \u2014 "),Rj=a("a"),_3o=o("RoFormerForMaskedLM"),b3o=o(" (RoFormer model)"),v3o=l(),j0=a("li"),bde=a("strong"),F3o=o("squeezebert"),T3o=o(" \u2014 "),Bj=a("a"),M3o=o("SqueezeBertForMaskedLM"),E3o=o(" (SqueezeBERT model)"),C3o=l(),D0=a("li"),vde=a("strong"),w3o=o("tapas"),A3o=o(" \u2014 "),Pj=a("a"),y3o=o("TapasForMaskedLM"),L3o=o(" (TAPAS model)"),x3o=l(),G0=a("li"),Fde=a("strong"),$3o=o("wav2vec2"),k3o=o(" \u2014 "),Tde=a("code"),S3o=o("Wav2Vec2ForMaskedLM"),R3o=o(" (Wav2Vec2 model)"),B3o=l(),O0=a("li"),Mde=a("strong"),P3o=o("xlm"),I3o=o(" \u2014 "),Ij=a("a"),q3o=o("XLMWithLMHeadModel"),N3o=o(" (XLM model)"),j3o=l(),V0=a("li"),Ede=a("strong"),D3o=o("xlm-roberta"),G3o=o(" \u2014 "),qj=a("a"),O3o=o("XLMRobertaForMaskedLM"),V3o=o(" (XLM-RoBERTa model)"),X3o=l(),X0=a("li"),Cde=a("strong"),z3o=o("xlm-roberta-xl"),Q3o=o(" \u2014 "),Nj=a("a"),W3o=o("XLMRobertaXLForMaskedLM"),H3o=o(" (XLM-RoBERTa-XL model)"),U3o=l(),z0=a("li"),wde=a("strong"),J3o=o("yoso"),Y3o=o(" \u2014 "),jj=a("a"),K3o=o("YosoForMaskedLM"),Z3o=o(" (YOSO model)"),ewo=l(),Q0=a("p"),owo=o("The model is set in evaluation mode by default using "),Ade=a("code"),rwo=o("model.eval()"),two=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=a("code"),awo=o("model.train()"),nwo=l(),F(W0.$$.fragment),lIe=l(),Bi=a("h2"),H0=a("a"),Lde=a("span"),F(OA.$$.fragment),swo=l(),xde=a("span"),lwo=o("AutoModelForSeq2SeqLM"),iIe=l(),So=a("div"),F(VA.$$.fragment),iwo=l(),Pi=a("p"),dwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dj=a("a"),cwo=o("from_pretrained()"),fwo=o(" class method or the "),Gj=a("a"),mwo=o("from_config()"),gwo=o(` class
method.`),hwo=l(),XA=a("p"),pwo=o("This class cannot be instantiated directly using "),$de=a("code"),uwo=o("__init__()"),_wo=o(" (throws an error)."),bwo=l(),nt=a("div"),F(zA.$$.fragment),vwo=l(),kde=a("p"),Fwo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Two=l(),Ii=a("p"),Mwo=o(`Note:
Loading a model from its configuration file does `),Sde=a("strong"),Ewo=o("not"),Cwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oj=a("a"),wwo=o("from_pretrained()"),Awo=o(" to load the model weights."),ywo=l(),F(U0.$$.fragment),Lwo=l(),Ke=a("div"),F(QA.$$.fragment),xwo=l(),Rde=a("p"),$wo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kwo=l(),$a=a("p"),Swo=o("The model class to instantiate is selected based on the "),Bde=a("code"),Rwo=o("model_type"),Bwo=o(` property of the config object (either
passed as an argument or loaded from `),Pde=a("code"),Pwo=o("pretrained_model_name_or_path"),Iwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),qwo=o("pretrained_model_name_or_path"),Nwo=o(":"),jwo=l(),he=a("ul"),J0=a("li"),qde=a("strong"),Dwo=o("bart"),Gwo=o(" \u2014 "),Vj=a("a"),Owo=o("BartForConditionalGeneration"),Vwo=o(" (BART model)"),Xwo=l(),Y0=a("li"),Nde=a("strong"),zwo=o("bigbird_pegasus"),Qwo=o(" \u2014 "),Xj=a("a"),Wwo=o("BigBirdPegasusForConditionalGeneration"),Hwo=o(" (BigBirdPegasus model)"),Uwo=l(),K0=a("li"),jde=a("strong"),Jwo=o("blenderbot"),Ywo=o(" \u2014 "),zj=a("a"),Kwo=o("BlenderbotForConditionalGeneration"),Zwo=o(" (Blenderbot model)"),eAo=l(),Z0=a("li"),Dde=a("strong"),oAo=o("blenderbot-small"),rAo=o(" \u2014 "),Qj=a("a"),tAo=o("BlenderbotSmallForConditionalGeneration"),aAo=o(" (BlenderbotSmall model)"),nAo=l(),e1=a("li"),Gde=a("strong"),sAo=o("encoder-decoder"),lAo=o(" \u2014 "),Wj=a("a"),iAo=o("EncoderDecoderModel"),dAo=o(" (Encoder decoder model)"),cAo=l(),o1=a("li"),Ode=a("strong"),fAo=o("fsmt"),mAo=o(" \u2014 "),Hj=a("a"),gAo=o("FSMTForConditionalGeneration"),hAo=o(" (FairSeq Machine-Translation model)"),pAo=l(),r1=a("li"),Vde=a("strong"),uAo=o("led"),_Ao=o(" \u2014 "),Uj=a("a"),bAo=o("LEDForConditionalGeneration"),vAo=o(" (LED model)"),FAo=l(),t1=a("li"),Xde=a("strong"),TAo=o("m2m_100"),MAo=o(" \u2014 "),Jj=a("a"),EAo=o("M2M100ForConditionalGeneration"),CAo=o(" (M2M100 model)"),wAo=l(),a1=a("li"),zde=a("strong"),AAo=o("marian"),yAo=o(" \u2014 "),Yj=a("a"),LAo=o("MarianMTModel"),xAo=o(" (Marian model)"),$Ao=l(),n1=a("li"),Qde=a("strong"),kAo=o("mbart"),SAo=o(" \u2014 "),Kj=a("a"),RAo=o("MBartForConditionalGeneration"),BAo=o(" (mBART model)"),PAo=l(),s1=a("li"),Wde=a("strong"),IAo=o("mt5"),qAo=o(" \u2014 "),Zj=a("a"),NAo=o("MT5ForConditionalGeneration"),jAo=o(" (mT5 model)"),DAo=l(),l1=a("li"),Hde=a("strong"),GAo=o("pegasus"),OAo=o(" \u2014 "),eD=a("a"),VAo=o("PegasusForConditionalGeneration"),XAo=o(" (Pegasus model)"),zAo=l(),i1=a("li"),Ude=a("strong"),QAo=o("plbart"),WAo=o(" \u2014 "),oD=a("a"),HAo=o("PLBartForConditionalGeneration"),UAo=o(" (PLBart model)"),JAo=l(),d1=a("li"),Jde=a("strong"),YAo=o("prophetnet"),KAo=o(" \u2014 "),rD=a("a"),ZAo=o("ProphetNetForConditionalGeneration"),eyo=o(" (ProphetNet model)"),oyo=l(),c1=a("li"),Yde=a("strong"),ryo=o("t5"),tyo=o(" \u2014 "),tD=a("a"),ayo=o("T5ForConditionalGeneration"),nyo=o(" (T5 model)"),syo=l(),f1=a("li"),Kde=a("strong"),lyo=o("tapex"),iyo=o(" \u2014 "),aD=a("a"),dyo=o("BartForConditionalGeneration"),cyo=o(" (TAPEX model)"),fyo=l(),m1=a("li"),Zde=a("strong"),myo=o("xlm-prophetnet"),gyo=o(" \u2014 "),nD=a("a"),hyo=o("XLMProphetNetForConditionalGeneration"),pyo=o(" (XLMProphetNet model)"),uyo=l(),g1=a("p"),_yo=o("The model is set in evaluation mode by default using "),ece=a("code"),byo=o("model.eval()"),vyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=a("code"),Fyo=o("model.train()"),Tyo=l(),F(h1.$$.fragment),dIe=l(),qi=a("h2"),p1=a("a"),rce=a("span"),F(WA.$$.fragment),Myo=l(),tce=a("span"),Eyo=o("AutoModelForSequenceClassification"),cIe=l(),Ro=a("div"),F(HA.$$.fragment),Cyo=l(),Ni=a("p"),wyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sD=a("a"),Ayo=o("from_pretrained()"),yyo=o(" class method or the "),lD=a("a"),Lyo=o("from_config()"),xyo=o(` class
method.`),$yo=l(),UA=a("p"),kyo=o("This class cannot be instantiated directly using "),ace=a("code"),Syo=o("__init__()"),Ryo=o(" (throws an error)."),Byo=l(),st=a("div"),F(JA.$$.fragment),Pyo=l(),nce=a("p"),Iyo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qyo=l(),ji=a("p"),Nyo=o(`Note:
Loading a model from its configuration file does `),sce=a("strong"),jyo=o("not"),Dyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=a("a"),Gyo=o("from_pretrained()"),Oyo=o(" to load the model weights."),Vyo=l(),F(u1.$$.fragment),Xyo=l(),Ze=a("div"),F(YA.$$.fragment),zyo=l(),lce=a("p"),Qyo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wyo=l(),ka=a("p"),Hyo=o("The model class to instantiate is selected based on the "),ice=a("code"),Uyo=o("model_type"),Jyo=o(` property of the config object (either
passed as an argument or loaded from `),dce=a("code"),Yyo=o("pretrained_model_name_or_path"),Kyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=a("code"),Zyo=o("pretrained_model_name_or_path"),eLo=o(":"),oLo=l(),q=a("ul"),_1=a("li"),fce=a("strong"),rLo=o("albert"),tLo=o(" \u2014 "),dD=a("a"),aLo=o("AlbertForSequenceClassification"),nLo=o(" (ALBERT model)"),sLo=l(),b1=a("li"),mce=a("strong"),lLo=o("bart"),iLo=o(" \u2014 "),cD=a("a"),dLo=o("BartForSequenceClassification"),cLo=o(" (BART model)"),fLo=l(),v1=a("li"),gce=a("strong"),mLo=o("bert"),gLo=o(" \u2014 "),fD=a("a"),hLo=o("BertForSequenceClassification"),pLo=o(" (BERT model)"),uLo=l(),F1=a("li"),hce=a("strong"),_Lo=o("big_bird"),bLo=o(" \u2014 "),mD=a("a"),vLo=o("BigBirdForSequenceClassification"),FLo=o(" (BigBird model)"),TLo=l(),T1=a("li"),pce=a("strong"),MLo=o("bigbird_pegasus"),ELo=o(" \u2014 "),gD=a("a"),CLo=o("BigBirdPegasusForSequenceClassification"),wLo=o(" (BigBirdPegasus model)"),ALo=l(),M1=a("li"),uce=a("strong"),yLo=o("camembert"),LLo=o(" \u2014 "),hD=a("a"),xLo=o("CamembertForSequenceClassification"),$Lo=o(" (CamemBERT model)"),kLo=l(),E1=a("li"),_ce=a("strong"),SLo=o("canine"),RLo=o(" \u2014 "),pD=a("a"),BLo=o("CanineForSequenceClassification"),PLo=o(" (Canine model)"),ILo=l(),C1=a("li"),bce=a("strong"),qLo=o("convbert"),NLo=o(" \u2014 "),uD=a("a"),jLo=o("ConvBertForSequenceClassification"),DLo=o(" (ConvBERT model)"),GLo=l(),w1=a("li"),vce=a("strong"),OLo=o("ctrl"),VLo=o(" \u2014 "),_D=a("a"),XLo=o("CTRLForSequenceClassification"),zLo=o(" (CTRL model)"),QLo=l(),A1=a("li"),Fce=a("strong"),WLo=o("data2vec-text"),HLo=o(" \u2014 "),bD=a("a"),ULo=o("Data2VecTextForSequenceClassification"),JLo=o(" (Data2VecText model)"),YLo=l(),y1=a("li"),Tce=a("strong"),KLo=o("deberta"),ZLo=o(" \u2014 "),vD=a("a"),e8o=o("DebertaForSequenceClassification"),o8o=o(" (DeBERTa model)"),r8o=l(),L1=a("li"),Mce=a("strong"),t8o=o("deberta-v2"),a8o=o(" \u2014 "),FD=a("a"),n8o=o("DebertaV2ForSequenceClassification"),s8o=o(" (DeBERTa-v2 model)"),l8o=l(),x1=a("li"),Ece=a("strong"),i8o=o("distilbert"),d8o=o(" \u2014 "),TD=a("a"),c8o=o("DistilBertForSequenceClassification"),f8o=o(" (DistilBERT model)"),m8o=l(),$1=a("li"),Cce=a("strong"),g8o=o("electra"),h8o=o(" \u2014 "),MD=a("a"),p8o=o("ElectraForSequenceClassification"),u8o=o(" (ELECTRA model)"),_8o=l(),k1=a("li"),wce=a("strong"),b8o=o("flaubert"),v8o=o(" \u2014 "),ED=a("a"),F8o=o("FlaubertForSequenceClassification"),T8o=o(" (FlauBERT model)"),M8o=l(),S1=a("li"),Ace=a("strong"),E8o=o("fnet"),C8o=o(" \u2014 "),CD=a("a"),w8o=o("FNetForSequenceClassification"),A8o=o(" (FNet model)"),y8o=l(),R1=a("li"),yce=a("strong"),L8o=o("funnel"),x8o=o(" \u2014 "),wD=a("a"),$8o=o("FunnelForSequenceClassification"),k8o=o(" (Funnel Transformer model)"),S8o=l(),B1=a("li"),Lce=a("strong"),R8o=o("gpt2"),B8o=o(" \u2014 "),AD=a("a"),P8o=o("GPT2ForSequenceClassification"),I8o=o(" (OpenAI GPT-2 model)"),q8o=l(),P1=a("li"),xce=a("strong"),N8o=o("gpt_neo"),j8o=o(" \u2014 "),yD=a("a"),D8o=o("GPTNeoForSequenceClassification"),G8o=o(" (GPT Neo model)"),O8o=l(),I1=a("li"),$ce=a("strong"),V8o=o("gptj"),X8o=o(" \u2014 "),LD=a("a"),z8o=o("GPTJForSequenceClassification"),Q8o=o(" (GPT-J model)"),W8o=l(),q1=a("li"),kce=a("strong"),H8o=o("ibert"),U8o=o(" \u2014 "),xD=a("a"),J8o=o("IBertForSequenceClassification"),Y8o=o(" (I-BERT model)"),K8o=l(),N1=a("li"),Sce=a("strong"),Z8o=o("layoutlm"),exo=o(" \u2014 "),$D=a("a"),oxo=o("LayoutLMForSequenceClassification"),rxo=o(" (LayoutLM model)"),txo=l(),j1=a("li"),Rce=a("strong"),axo=o("layoutlmv2"),nxo=o(" \u2014 "),kD=a("a"),sxo=o("LayoutLMv2ForSequenceClassification"),lxo=o(" (LayoutLMv2 model)"),ixo=l(),D1=a("li"),Bce=a("strong"),dxo=o("layoutlmv3"),cxo=o(" \u2014 "),SD=a("a"),fxo=o("LayoutLMv3ForSequenceClassification"),mxo=o(" (LayoutLMv3 model)"),gxo=l(),G1=a("li"),Pce=a("strong"),hxo=o("led"),pxo=o(" \u2014 "),RD=a("a"),uxo=o("LEDForSequenceClassification"),_xo=o(" (LED model)"),bxo=l(),O1=a("li"),Ice=a("strong"),vxo=o("longformer"),Fxo=o(" \u2014 "),BD=a("a"),Txo=o("LongformerForSequenceClassification"),Mxo=o(" (Longformer model)"),Exo=l(),V1=a("li"),qce=a("strong"),Cxo=o("mbart"),wxo=o(" \u2014 "),PD=a("a"),Axo=o("MBartForSequenceClassification"),yxo=o(" (mBART model)"),Lxo=l(),X1=a("li"),Nce=a("strong"),xxo=o("megatron-bert"),$xo=o(" \u2014 "),ID=a("a"),kxo=o("MegatronBertForSequenceClassification"),Sxo=o(" (MegatronBert model)"),Rxo=l(),z1=a("li"),jce=a("strong"),Bxo=o("mobilebert"),Pxo=o(" \u2014 "),qD=a("a"),Ixo=o("MobileBertForSequenceClassification"),qxo=o(" (MobileBERT model)"),Nxo=l(),Q1=a("li"),Dce=a("strong"),jxo=o("mpnet"),Dxo=o(" \u2014 "),ND=a("a"),Gxo=o("MPNetForSequenceClassification"),Oxo=o(" (MPNet model)"),Vxo=l(),W1=a("li"),Gce=a("strong"),Xxo=o("nystromformer"),zxo=o(" \u2014 "),jD=a("a"),Qxo=o("NystromformerForSequenceClassification"),Wxo=o(" (Nystromformer model)"),Hxo=l(),H1=a("li"),Oce=a("strong"),Uxo=o("openai-gpt"),Jxo=o(" \u2014 "),DD=a("a"),Yxo=o("OpenAIGPTForSequenceClassification"),Kxo=o(" (OpenAI GPT model)"),Zxo=l(),U1=a("li"),Vce=a("strong"),e9o=o("perceiver"),o9o=o(" \u2014 "),GD=a("a"),r9o=o("PerceiverForSequenceClassification"),t9o=o(" (Perceiver model)"),a9o=l(),J1=a("li"),Xce=a("strong"),n9o=o("plbart"),s9o=o(" \u2014 "),OD=a("a"),l9o=o("PLBartForSequenceClassification"),i9o=o(" (PLBart model)"),d9o=l(),Y1=a("li"),zce=a("strong"),c9o=o("qdqbert"),f9o=o(" \u2014 "),VD=a("a"),m9o=o("QDQBertForSequenceClassification"),g9o=o(" (QDQBert model)"),h9o=l(),K1=a("li"),Qce=a("strong"),p9o=o("reformer"),u9o=o(" \u2014 "),XD=a("a"),_9o=o("ReformerForSequenceClassification"),b9o=o(" (Reformer model)"),v9o=l(),Z1=a("li"),Wce=a("strong"),F9o=o("rembert"),T9o=o(" \u2014 "),zD=a("a"),M9o=o("RemBertForSequenceClassification"),E9o=o(" (RemBERT model)"),C9o=l(),eb=a("li"),Hce=a("strong"),w9o=o("roberta"),A9o=o(" \u2014 "),QD=a("a"),y9o=o("RobertaForSequenceClassification"),L9o=o(" (RoBERTa model)"),x9o=l(),ob=a("li"),Uce=a("strong"),$9o=o("roformer"),k9o=o(" \u2014 "),WD=a("a"),S9o=o("RoFormerForSequenceClassification"),R9o=o(" (RoFormer model)"),B9o=l(),rb=a("li"),Jce=a("strong"),P9o=o("squeezebert"),I9o=o(" \u2014 "),HD=a("a"),q9o=o("SqueezeBertForSequenceClassification"),N9o=o(" (SqueezeBERT model)"),j9o=l(),tb=a("li"),Yce=a("strong"),D9o=o("tapas"),G9o=o(" \u2014 "),UD=a("a"),O9o=o("TapasForSequenceClassification"),V9o=o(" (TAPAS model)"),X9o=l(),ab=a("li"),Kce=a("strong"),z9o=o("tapex"),Q9o=o(" \u2014 "),JD=a("a"),W9o=o("BartForSequenceClassification"),H9o=o(" (TAPEX model)"),U9o=l(),nb=a("li"),Zce=a("strong"),J9o=o("transfo-xl"),Y9o=o(" \u2014 "),YD=a("a"),K9o=o("TransfoXLForSequenceClassification"),Z9o=o(" (Transformer-XL model)"),e$o=l(),sb=a("li"),efe=a("strong"),o$o=o("xlm"),r$o=o(" \u2014 "),KD=a("a"),t$o=o("XLMForSequenceClassification"),a$o=o(" (XLM model)"),n$o=l(),lb=a("li"),ofe=a("strong"),s$o=o("xlm-roberta"),l$o=o(" \u2014 "),ZD=a("a"),i$o=o("XLMRobertaForSequenceClassification"),d$o=o(" (XLM-RoBERTa model)"),c$o=l(),ib=a("li"),rfe=a("strong"),f$o=o("xlm-roberta-xl"),m$o=o(" \u2014 "),eG=a("a"),g$o=o("XLMRobertaXLForSequenceClassification"),h$o=o(" (XLM-RoBERTa-XL model)"),p$o=l(),db=a("li"),tfe=a("strong"),u$o=o("xlnet"),_$o=o(" \u2014 "),oG=a("a"),b$o=o("XLNetForSequenceClassification"),v$o=o(" (XLNet model)"),F$o=l(),cb=a("li"),afe=a("strong"),T$o=o("yoso"),M$o=o(" \u2014 "),rG=a("a"),E$o=o("YosoForSequenceClassification"),C$o=o(" (YOSO model)"),w$o=l(),fb=a("p"),A$o=o("The model is set in evaluation mode by default using "),nfe=a("code"),y$o=o("model.eval()"),L$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=a("code"),x$o=o("model.train()"),$$o=l(),F(mb.$$.fragment),fIe=l(),Di=a("h2"),gb=a("a"),lfe=a("span"),F(KA.$$.fragment),k$o=l(),ife=a("span"),S$o=o("AutoModelForMultipleChoice"),mIe=l(),Bo=a("div"),F(ZA.$$.fragment),R$o=l(),Gi=a("p"),B$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tG=a("a"),P$o=o("from_pretrained()"),I$o=o(" class method or the "),aG=a("a"),q$o=o("from_config()"),N$o=o(` class
method.`),j$o=l(),ey=a("p"),D$o=o("This class cannot be instantiated directly using "),dfe=a("code"),G$o=o("__init__()"),O$o=o(" (throws an error)."),V$o=l(),lt=a("div"),F(oy.$$.fragment),X$o=l(),cfe=a("p"),z$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q$o=l(),Oi=a("p"),W$o=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),H$o=o("not"),U$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),J$o=o("from_pretrained()"),Y$o=o(" to load the model weights."),K$o=l(),F(hb.$$.fragment),Z$o=l(),eo=a("div"),F(ry.$$.fragment),eko=l(),mfe=a("p"),oko=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rko=l(),Sa=a("p"),tko=o("The model class to instantiate is selected based on the "),gfe=a("code"),ako=o("model_type"),nko=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),sko=o("pretrained_model_name_or_path"),lko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),iko=o("pretrained_model_name_or_path"),dko=o(":"),cko=l(),Y=a("ul"),pb=a("li"),ufe=a("strong"),fko=o("albert"),mko=o(" \u2014 "),sG=a("a"),gko=o("AlbertForMultipleChoice"),hko=o(" (ALBERT model)"),pko=l(),ub=a("li"),_fe=a("strong"),uko=o("bert"),_ko=o(" \u2014 "),lG=a("a"),bko=o("BertForMultipleChoice"),vko=o(" (BERT model)"),Fko=l(),_b=a("li"),bfe=a("strong"),Tko=o("big_bird"),Mko=o(" \u2014 "),iG=a("a"),Eko=o("BigBirdForMultipleChoice"),Cko=o(" (BigBird model)"),wko=l(),bb=a("li"),vfe=a("strong"),Ako=o("camembert"),yko=o(" \u2014 "),dG=a("a"),Lko=o("CamembertForMultipleChoice"),xko=o(" (CamemBERT model)"),$ko=l(),vb=a("li"),Ffe=a("strong"),kko=o("canine"),Sko=o(" \u2014 "),cG=a("a"),Rko=o("CanineForMultipleChoice"),Bko=o(" (Canine model)"),Pko=l(),Fb=a("li"),Tfe=a("strong"),Iko=o("convbert"),qko=o(" \u2014 "),fG=a("a"),Nko=o("ConvBertForMultipleChoice"),jko=o(" (ConvBERT model)"),Dko=l(),Tb=a("li"),Mfe=a("strong"),Gko=o("data2vec-text"),Oko=o(" \u2014 "),mG=a("a"),Vko=o("Data2VecTextForMultipleChoice"),Xko=o(" (Data2VecText model)"),zko=l(),Mb=a("li"),Efe=a("strong"),Qko=o("deberta-v2"),Wko=o(" \u2014 "),gG=a("a"),Hko=o("DebertaV2ForMultipleChoice"),Uko=o(" (DeBERTa-v2 model)"),Jko=l(),Eb=a("li"),Cfe=a("strong"),Yko=o("distilbert"),Kko=o(" \u2014 "),hG=a("a"),Zko=o("DistilBertForMultipleChoice"),eSo=o(" (DistilBERT model)"),oSo=l(),Cb=a("li"),wfe=a("strong"),rSo=o("electra"),tSo=o(" \u2014 "),pG=a("a"),aSo=o("ElectraForMultipleChoice"),nSo=o(" (ELECTRA model)"),sSo=l(),wb=a("li"),Afe=a("strong"),lSo=o("flaubert"),iSo=o(" \u2014 "),uG=a("a"),dSo=o("FlaubertForMultipleChoice"),cSo=o(" (FlauBERT model)"),fSo=l(),Ab=a("li"),yfe=a("strong"),mSo=o("fnet"),gSo=o(" \u2014 "),_G=a("a"),hSo=o("FNetForMultipleChoice"),pSo=o(" (FNet model)"),uSo=l(),yb=a("li"),Lfe=a("strong"),_So=o("funnel"),bSo=o(" \u2014 "),bG=a("a"),vSo=o("FunnelForMultipleChoice"),FSo=o(" (Funnel Transformer model)"),TSo=l(),Lb=a("li"),xfe=a("strong"),MSo=o("ibert"),ESo=o(" \u2014 "),vG=a("a"),CSo=o("IBertForMultipleChoice"),wSo=o(" (I-BERT model)"),ASo=l(),xb=a("li"),$fe=a("strong"),ySo=o("longformer"),LSo=o(" \u2014 "),FG=a("a"),xSo=o("LongformerForMultipleChoice"),$So=o(" (Longformer model)"),kSo=l(),$b=a("li"),kfe=a("strong"),SSo=o("megatron-bert"),RSo=o(" \u2014 "),TG=a("a"),BSo=o("MegatronBertForMultipleChoice"),PSo=o(" (MegatronBert model)"),ISo=l(),kb=a("li"),Sfe=a("strong"),qSo=o("mobilebert"),NSo=o(" \u2014 "),MG=a("a"),jSo=o("MobileBertForMultipleChoice"),DSo=o(" (MobileBERT model)"),GSo=l(),Sb=a("li"),Rfe=a("strong"),OSo=o("mpnet"),VSo=o(" \u2014 "),EG=a("a"),XSo=o("MPNetForMultipleChoice"),zSo=o(" (MPNet model)"),QSo=l(),Rb=a("li"),Bfe=a("strong"),WSo=o("nystromformer"),HSo=o(" \u2014 "),CG=a("a"),USo=o("NystromformerForMultipleChoice"),JSo=o(" (Nystromformer model)"),YSo=l(),Bb=a("li"),Pfe=a("strong"),KSo=o("qdqbert"),ZSo=o(" \u2014 "),wG=a("a"),eRo=o("QDQBertForMultipleChoice"),oRo=o(" (QDQBert model)"),rRo=l(),Pb=a("li"),Ife=a("strong"),tRo=o("rembert"),aRo=o(" \u2014 "),AG=a("a"),nRo=o("RemBertForMultipleChoice"),sRo=o(" (RemBERT model)"),lRo=l(),Ib=a("li"),qfe=a("strong"),iRo=o("roberta"),dRo=o(" \u2014 "),yG=a("a"),cRo=o("RobertaForMultipleChoice"),fRo=o(" (RoBERTa model)"),mRo=l(),qb=a("li"),Nfe=a("strong"),gRo=o("roformer"),hRo=o(" \u2014 "),LG=a("a"),pRo=o("RoFormerForMultipleChoice"),uRo=o(" (RoFormer model)"),_Ro=l(),Nb=a("li"),jfe=a("strong"),bRo=o("squeezebert"),vRo=o(" \u2014 "),xG=a("a"),FRo=o("SqueezeBertForMultipleChoice"),TRo=o(" (SqueezeBERT model)"),MRo=l(),jb=a("li"),Dfe=a("strong"),ERo=o("xlm"),CRo=o(" \u2014 "),$G=a("a"),wRo=o("XLMForMultipleChoice"),ARo=o(" (XLM model)"),yRo=l(),Db=a("li"),Gfe=a("strong"),LRo=o("xlm-roberta"),xRo=o(" \u2014 "),kG=a("a"),$Ro=o("XLMRobertaForMultipleChoice"),kRo=o(" (XLM-RoBERTa model)"),SRo=l(),Gb=a("li"),Ofe=a("strong"),RRo=o("xlm-roberta-xl"),BRo=o(" \u2014 "),SG=a("a"),PRo=o("XLMRobertaXLForMultipleChoice"),IRo=o(" (XLM-RoBERTa-XL model)"),qRo=l(),Ob=a("li"),Vfe=a("strong"),NRo=o("xlnet"),jRo=o(" \u2014 "),RG=a("a"),DRo=o("XLNetForMultipleChoice"),GRo=o(" (XLNet model)"),ORo=l(),Vb=a("li"),Xfe=a("strong"),VRo=o("yoso"),XRo=o(" \u2014 "),BG=a("a"),zRo=o("YosoForMultipleChoice"),QRo=o(" (YOSO model)"),WRo=l(),Xb=a("p"),HRo=o("The model is set in evaluation mode by default using "),zfe=a("code"),URo=o("model.eval()"),JRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=a("code"),YRo=o("model.train()"),KRo=l(),F(zb.$$.fragment),gIe=l(),Vi=a("h2"),Qb=a("a"),Wfe=a("span"),F(ty.$$.fragment),ZRo=l(),Hfe=a("span"),eBo=o("AutoModelForNextSentencePrediction"),hIe=l(),Po=a("div"),F(ay.$$.fragment),oBo=l(),Xi=a("p"),rBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PG=a("a"),tBo=o("from_pretrained()"),aBo=o(" class method or the "),IG=a("a"),nBo=o("from_config()"),sBo=o(` class
method.`),lBo=l(),ny=a("p"),iBo=o("This class cannot be instantiated directly using "),Ufe=a("code"),dBo=o("__init__()"),cBo=o(" (throws an error)."),fBo=l(),it=a("div"),F(sy.$$.fragment),mBo=l(),Jfe=a("p"),gBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hBo=l(),zi=a("p"),pBo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),uBo=o("not"),_Bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=a("a"),bBo=o("from_pretrained()"),vBo=o(" to load the model weights."),FBo=l(),F(Wb.$$.fragment),TBo=l(),oo=a("div"),F(ly.$$.fragment),MBo=l(),Kfe=a("p"),EBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CBo=l(),Ra=a("p"),wBo=o("The model class to instantiate is selected based on the "),Zfe=a("code"),ABo=o("model_type"),yBo=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),LBo=o("pretrained_model_name_or_path"),xBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),$Bo=o("pretrained_model_name_or_path"),kBo=o(":"),SBo=l(),Yr=a("ul"),Hb=a("li"),rme=a("strong"),RBo=o("bert"),BBo=o(" \u2014 "),NG=a("a"),PBo=o("BertForNextSentencePrediction"),IBo=o(" (BERT model)"),qBo=l(),Ub=a("li"),tme=a("strong"),NBo=o("fnet"),jBo=o(" \u2014 "),jG=a("a"),DBo=o("FNetForNextSentencePrediction"),GBo=o(" (FNet model)"),OBo=l(),Jb=a("li"),ame=a("strong"),VBo=o("megatron-bert"),XBo=o(" \u2014 "),DG=a("a"),zBo=o("MegatronBertForNextSentencePrediction"),QBo=o(" (MegatronBert model)"),WBo=l(),Yb=a("li"),nme=a("strong"),HBo=o("mobilebert"),UBo=o(" \u2014 "),GG=a("a"),JBo=o("MobileBertForNextSentencePrediction"),YBo=o(" (MobileBERT model)"),KBo=l(),Kb=a("li"),sme=a("strong"),ZBo=o("qdqbert"),ePo=o(" \u2014 "),OG=a("a"),oPo=o("QDQBertForNextSentencePrediction"),rPo=o(" (QDQBert model)"),tPo=l(),Zb=a("p"),aPo=o("The model is set in evaluation mode by default using "),lme=a("code"),nPo=o("model.eval()"),sPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ime=a("code"),lPo=o("model.train()"),iPo=l(),F(e2.$$.fragment),pIe=l(),Qi=a("h2"),o2=a("a"),dme=a("span"),F(iy.$$.fragment),dPo=l(),cme=a("span"),cPo=o("AutoModelForTokenClassification"),uIe=l(),Io=a("div"),F(dy.$$.fragment),fPo=l(),Wi=a("p"),mPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VG=a("a"),gPo=o("from_pretrained()"),hPo=o(" class method or the "),XG=a("a"),pPo=o("from_config()"),uPo=o(` class
method.`),_Po=l(),cy=a("p"),bPo=o("This class cannot be instantiated directly using "),fme=a("code"),vPo=o("__init__()"),FPo=o(" (throws an error)."),TPo=l(),dt=a("div"),F(fy.$$.fragment),MPo=l(),mme=a("p"),EPo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CPo=l(),Hi=a("p"),wPo=o(`Note:
Loading a model from its configuration file does `),gme=a("strong"),APo=o("not"),yPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=a("a"),LPo=o("from_pretrained()"),xPo=o(" to load the model weights."),$Po=l(),F(r2.$$.fragment),kPo=l(),ro=a("div"),F(my.$$.fragment),SPo=l(),hme=a("p"),RPo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BPo=l(),Ba=a("p"),PPo=o("The model class to instantiate is selected based on the "),pme=a("code"),IPo=o("model_type"),qPo=o(` property of the config object (either
passed as an argument or loaded from `),ume=a("code"),NPo=o("pretrained_model_name_or_path"),jPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_me=a("code"),DPo=o("pretrained_model_name_or_path"),GPo=o(":"),OPo=l(),W=a("ul"),t2=a("li"),bme=a("strong"),VPo=o("albert"),XPo=o(" \u2014 "),QG=a("a"),zPo=o("AlbertForTokenClassification"),QPo=o(" (ALBERT model)"),WPo=l(),a2=a("li"),vme=a("strong"),HPo=o("bert"),UPo=o(" \u2014 "),WG=a("a"),JPo=o("BertForTokenClassification"),YPo=o(" (BERT model)"),KPo=l(),n2=a("li"),Fme=a("strong"),ZPo=o("big_bird"),eIo=o(" \u2014 "),HG=a("a"),oIo=o("BigBirdForTokenClassification"),rIo=o(" (BigBird model)"),tIo=l(),s2=a("li"),Tme=a("strong"),aIo=o("camembert"),nIo=o(" \u2014 "),UG=a("a"),sIo=o("CamembertForTokenClassification"),lIo=o(" (CamemBERT model)"),iIo=l(),l2=a("li"),Mme=a("strong"),dIo=o("canine"),cIo=o(" \u2014 "),JG=a("a"),fIo=o("CanineForTokenClassification"),mIo=o(" (Canine model)"),gIo=l(),i2=a("li"),Eme=a("strong"),hIo=o("convbert"),pIo=o(" \u2014 "),YG=a("a"),uIo=o("ConvBertForTokenClassification"),_Io=o(" (ConvBERT model)"),bIo=l(),d2=a("li"),Cme=a("strong"),vIo=o("data2vec-text"),FIo=o(" \u2014 "),KG=a("a"),TIo=o("Data2VecTextForTokenClassification"),MIo=o(" (Data2VecText model)"),EIo=l(),c2=a("li"),wme=a("strong"),CIo=o("deberta"),wIo=o(" \u2014 "),ZG=a("a"),AIo=o("DebertaForTokenClassification"),yIo=o(" (DeBERTa model)"),LIo=l(),f2=a("li"),Ame=a("strong"),xIo=o("deberta-v2"),$Io=o(" \u2014 "),eO=a("a"),kIo=o("DebertaV2ForTokenClassification"),SIo=o(" (DeBERTa-v2 model)"),RIo=l(),m2=a("li"),yme=a("strong"),BIo=o("distilbert"),PIo=o(" \u2014 "),oO=a("a"),IIo=o("DistilBertForTokenClassification"),qIo=o(" (DistilBERT model)"),NIo=l(),g2=a("li"),Lme=a("strong"),jIo=o("electra"),DIo=o(" \u2014 "),rO=a("a"),GIo=o("ElectraForTokenClassification"),OIo=o(" (ELECTRA model)"),VIo=l(),h2=a("li"),xme=a("strong"),XIo=o("flaubert"),zIo=o(" \u2014 "),tO=a("a"),QIo=o("FlaubertForTokenClassification"),WIo=o(" (FlauBERT model)"),HIo=l(),p2=a("li"),$me=a("strong"),UIo=o("fnet"),JIo=o(" \u2014 "),aO=a("a"),YIo=o("FNetForTokenClassification"),KIo=o(" (FNet model)"),ZIo=l(),u2=a("li"),kme=a("strong"),eqo=o("funnel"),oqo=o(" \u2014 "),nO=a("a"),rqo=o("FunnelForTokenClassification"),tqo=o(" (Funnel Transformer model)"),aqo=l(),_2=a("li"),Sme=a("strong"),nqo=o("gpt2"),sqo=o(" \u2014 "),sO=a("a"),lqo=o("GPT2ForTokenClassification"),iqo=o(" (OpenAI GPT-2 model)"),dqo=l(),b2=a("li"),Rme=a("strong"),cqo=o("ibert"),fqo=o(" \u2014 "),lO=a("a"),mqo=o("IBertForTokenClassification"),gqo=o(" (I-BERT model)"),hqo=l(),v2=a("li"),Bme=a("strong"),pqo=o("layoutlm"),uqo=o(" \u2014 "),iO=a("a"),_qo=o("LayoutLMForTokenClassification"),bqo=o(" (LayoutLM model)"),vqo=l(),F2=a("li"),Pme=a("strong"),Fqo=o("layoutlmv2"),Tqo=o(" \u2014 "),dO=a("a"),Mqo=o("LayoutLMv2ForTokenClassification"),Eqo=o(" (LayoutLMv2 model)"),Cqo=l(),T2=a("li"),Ime=a("strong"),wqo=o("layoutlmv3"),Aqo=o(" \u2014 "),cO=a("a"),yqo=o("LayoutLMv3ForTokenClassification"),Lqo=o(" (LayoutLMv3 model)"),xqo=l(),M2=a("li"),qme=a("strong"),$qo=o("longformer"),kqo=o(" \u2014 "),fO=a("a"),Sqo=o("LongformerForTokenClassification"),Rqo=o(" (Longformer model)"),Bqo=l(),E2=a("li"),Nme=a("strong"),Pqo=o("megatron-bert"),Iqo=o(" \u2014 "),mO=a("a"),qqo=o("MegatronBertForTokenClassification"),Nqo=o(" (MegatronBert model)"),jqo=l(),C2=a("li"),jme=a("strong"),Dqo=o("mobilebert"),Gqo=o(" \u2014 "),gO=a("a"),Oqo=o("MobileBertForTokenClassification"),Vqo=o(" (MobileBERT model)"),Xqo=l(),w2=a("li"),Dme=a("strong"),zqo=o("mpnet"),Qqo=o(" \u2014 "),hO=a("a"),Wqo=o("MPNetForTokenClassification"),Hqo=o(" (MPNet model)"),Uqo=l(),A2=a("li"),Gme=a("strong"),Jqo=o("nystromformer"),Yqo=o(" \u2014 "),pO=a("a"),Kqo=o("NystromformerForTokenClassification"),Zqo=o(" (Nystromformer model)"),eNo=l(),y2=a("li"),Ome=a("strong"),oNo=o("qdqbert"),rNo=o(" \u2014 "),uO=a("a"),tNo=o("QDQBertForTokenClassification"),aNo=o(" (QDQBert model)"),nNo=l(),L2=a("li"),Vme=a("strong"),sNo=o("rembert"),lNo=o(" \u2014 "),_O=a("a"),iNo=o("RemBertForTokenClassification"),dNo=o(" (RemBERT model)"),cNo=l(),x2=a("li"),Xme=a("strong"),fNo=o("roberta"),mNo=o(" \u2014 "),bO=a("a"),gNo=o("RobertaForTokenClassification"),hNo=o(" (RoBERTa model)"),pNo=l(),$2=a("li"),zme=a("strong"),uNo=o("roformer"),_No=o(" \u2014 "),vO=a("a"),bNo=o("RoFormerForTokenClassification"),vNo=o(" (RoFormer model)"),FNo=l(),k2=a("li"),Qme=a("strong"),TNo=o("squeezebert"),MNo=o(" \u2014 "),FO=a("a"),ENo=o("SqueezeBertForTokenClassification"),CNo=o(" (SqueezeBERT model)"),wNo=l(),S2=a("li"),Wme=a("strong"),ANo=o("xlm"),yNo=o(" \u2014 "),TO=a("a"),LNo=o("XLMForTokenClassification"),xNo=o(" (XLM model)"),$No=l(),R2=a("li"),Hme=a("strong"),kNo=o("xlm-roberta"),SNo=o(" \u2014 "),MO=a("a"),RNo=o("XLMRobertaForTokenClassification"),BNo=o(" (XLM-RoBERTa model)"),PNo=l(),B2=a("li"),Ume=a("strong"),INo=o("xlm-roberta-xl"),qNo=o(" \u2014 "),EO=a("a"),NNo=o("XLMRobertaXLForTokenClassification"),jNo=o(" (XLM-RoBERTa-XL model)"),DNo=l(),P2=a("li"),Jme=a("strong"),GNo=o("xlnet"),ONo=o(" \u2014 "),CO=a("a"),VNo=o("XLNetForTokenClassification"),XNo=o(" (XLNet model)"),zNo=l(),I2=a("li"),Yme=a("strong"),QNo=o("yoso"),WNo=o(" \u2014 "),wO=a("a"),HNo=o("YosoForTokenClassification"),UNo=o(" (YOSO model)"),JNo=l(),q2=a("p"),YNo=o("The model is set in evaluation mode by default using "),Kme=a("code"),KNo=o("model.eval()"),ZNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=a("code"),ejo=o("model.train()"),ojo=l(),F(N2.$$.fragment),_Ie=l(),Ui=a("h2"),j2=a("a"),ege=a("span"),F(gy.$$.fragment),rjo=l(),oge=a("span"),tjo=o("AutoModelForQuestionAnswering"),bIe=l(),qo=a("div"),F(hy.$$.fragment),ajo=l(),Ji=a("p"),njo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AO=a("a"),sjo=o("from_pretrained()"),ljo=o(" class method or the "),yO=a("a"),ijo=o("from_config()"),djo=o(` class
method.`),cjo=l(),py=a("p"),fjo=o("This class cannot be instantiated directly using "),rge=a("code"),mjo=o("__init__()"),gjo=o(" (throws an error)."),hjo=l(),ct=a("div"),F(uy.$$.fragment),pjo=l(),tge=a("p"),ujo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_jo=l(),Yi=a("p"),bjo=o(`Note:
Loading a model from its configuration file does `),age=a("strong"),vjo=o("not"),Fjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=a("a"),Tjo=o("from_pretrained()"),Mjo=o(" to load the model weights."),Ejo=l(),F(D2.$$.fragment),Cjo=l(),to=a("div"),F(_y.$$.fragment),wjo=l(),nge=a("p"),Ajo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yjo=l(),Pa=a("p"),Ljo=o("The model class to instantiate is selected based on the "),sge=a("code"),xjo=o("model_type"),$jo=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),kjo=o("pretrained_model_name_or_path"),Sjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),Rjo=o("pretrained_model_name_or_path"),Bjo=o(":"),Pjo=l(),G=a("ul"),G2=a("li"),dge=a("strong"),Ijo=o("albert"),qjo=o(" \u2014 "),xO=a("a"),Njo=o("AlbertForQuestionAnswering"),jjo=o(" (ALBERT model)"),Djo=l(),O2=a("li"),cge=a("strong"),Gjo=o("bart"),Ojo=o(" \u2014 "),$O=a("a"),Vjo=o("BartForQuestionAnswering"),Xjo=o(" (BART model)"),zjo=l(),V2=a("li"),fge=a("strong"),Qjo=o("bert"),Wjo=o(" \u2014 "),kO=a("a"),Hjo=o("BertForQuestionAnswering"),Ujo=o(" (BERT model)"),Jjo=l(),X2=a("li"),mge=a("strong"),Yjo=o("big_bird"),Kjo=o(" \u2014 "),SO=a("a"),Zjo=o("BigBirdForQuestionAnswering"),eDo=o(" (BigBird model)"),oDo=l(),z2=a("li"),gge=a("strong"),rDo=o("bigbird_pegasus"),tDo=o(" \u2014 "),RO=a("a"),aDo=o("BigBirdPegasusForQuestionAnswering"),nDo=o(" (BigBirdPegasus model)"),sDo=l(),Q2=a("li"),hge=a("strong"),lDo=o("camembert"),iDo=o(" \u2014 "),BO=a("a"),dDo=o("CamembertForQuestionAnswering"),cDo=o(" (CamemBERT model)"),fDo=l(),W2=a("li"),pge=a("strong"),mDo=o("canine"),gDo=o(" \u2014 "),PO=a("a"),hDo=o("CanineForQuestionAnswering"),pDo=o(" (Canine model)"),uDo=l(),H2=a("li"),uge=a("strong"),_Do=o("convbert"),bDo=o(" \u2014 "),IO=a("a"),vDo=o("ConvBertForQuestionAnswering"),FDo=o(" (ConvBERT model)"),TDo=l(),U2=a("li"),_ge=a("strong"),MDo=o("data2vec-text"),EDo=o(" \u2014 "),qO=a("a"),CDo=o("Data2VecTextForQuestionAnswering"),wDo=o(" (Data2VecText model)"),ADo=l(),J2=a("li"),bge=a("strong"),yDo=o("deberta"),LDo=o(" \u2014 "),NO=a("a"),xDo=o("DebertaForQuestionAnswering"),$Do=o(" (DeBERTa model)"),kDo=l(),Y2=a("li"),vge=a("strong"),SDo=o("deberta-v2"),RDo=o(" \u2014 "),jO=a("a"),BDo=o("DebertaV2ForQuestionAnswering"),PDo=o(" (DeBERTa-v2 model)"),IDo=l(),K2=a("li"),Fge=a("strong"),qDo=o("distilbert"),NDo=o(" \u2014 "),DO=a("a"),jDo=o("DistilBertForQuestionAnswering"),DDo=o(" (DistilBERT model)"),GDo=l(),Z2=a("li"),Tge=a("strong"),ODo=o("electra"),VDo=o(" \u2014 "),GO=a("a"),XDo=o("ElectraForQuestionAnswering"),zDo=o(" (ELECTRA model)"),QDo=l(),ev=a("li"),Mge=a("strong"),WDo=o("flaubert"),HDo=o(" \u2014 "),OO=a("a"),UDo=o("FlaubertForQuestionAnsweringSimple"),JDo=o(" (FlauBERT model)"),YDo=l(),ov=a("li"),Ege=a("strong"),KDo=o("fnet"),ZDo=o(" \u2014 "),VO=a("a"),eGo=o("FNetForQuestionAnswering"),oGo=o(" (FNet model)"),rGo=l(),rv=a("li"),Cge=a("strong"),tGo=o("funnel"),aGo=o(" \u2014 "),XO=a("a"),nGo=o("FunnelForQuestionAnswering"),sGo=o(" (Funnel Transformer model)"),lGo=l(),tv=a("li"),wge=a("strong"),iGo=o("gptj"),dGo=o(" \u2014 "),zO=a("a"),cGo=o("GPTJForQuestionAnswering"),fGo=o(" (GPT-J model)"),mGo=l(),av=a("li"),Age=a("strong"),gGo=o("ibert"),hGo=o(" \u2014 "),QO=a("a"),pGo=o("IBertForQuestionAnswering"),uGo=o(" (I-BERT model)"),_Go=l(),nv=a("li"),yge=a("strong"),bGo=o("layoutlmv2"),vGo=o(" \u2014 "),WO=a("a"),FGo=o("LayoutLMv2ForQuestionAnswering"),TGo=o(" (LayoutLMv2 model)"),MGo=l(),sv=a("li"),Lge=a("strong"),EGo=o("layoutlmv3"),CGo=o(" \u2014 "),HO=a("a"),wGo=o("LayoutLMv3ForQuestionAnswering"),AGo=o(" (LayoutLMv3 model)"),yGo=l(),lv=a("li"),xge=a("strong"),LGo=o("led"),xGo=o(" \u2014 "),UO=a("a"),$Go=o("LEDForQuestionAnswering"),kGo=o(" (LED model)"),SGo=l(),iv=a("li"),$ge=a("strong"),RGo=o("longformer"),BGo=o(" \u2014 "),JO=a("a"),PGo=o("LongformerForQuestionAnswering"),IGo=o(" (Longformer model)"),qGo=l(),dv=a("li"),kge=a("strong"),NGo=o("lxmert"),jGo=o(" \u2014 "),YO=a("a"),DGo=o("LxmertForQuestionAnswering"),GGo=o(" (LXMERT model)"),OGo=l(),cv=a("li"),Sge=a("strong"),VGo=o("mbart"),XGo=o(" \u2014 "),KO=a("a"),zGo=o("MBartForQuestionAnswering"),QGo=o(" (mBART model)"),WGo=l(),fv=a("li"),Rge=a("strong"),HGo=o("megatron-bert"),UGo=o(" \u2014 "),ZO=a("a"),JGo=o("MegatronBertForQuestionAnswering"),YGo=o(" (MegatronBert model)"),KGo=l(),mv=a("li"),Bge=a("strong"),ZGo=o("mobilebert"),eOo=o(" \u2014 "),eV=a("a"),oOo=o("MobileBertForQuestionAnswering"),rOo=o(" (MobileBERT model)"),tOo=l(),gv=a("li"),Pge=a("strong"),aOo=o("mpnet"),nOo=o(" \u2014 "),oV=a("a"),sOo=o("MPNetForQuestionAnswering"),lOo=o(" (MPNet model)"),iOo=l(),hv=a("li"),Ige=a("strong"),dOo=o("nystromformer"),cOo=o(" \u2014 "),rV=a("a"),fOo=o("NystromformerForQuestionAnswering"),mOo=o(" (Nystromformer model)"),gOo=l(),pv=a("li"),qge=a("strong"),hOo=o("qdqbert"),pOo=o(" \u2014 "),tV=a("a"),uOo=o("QDQBertForQuestionAnswering"),_Oo=o(" (QDQBert model)"),bOo=l(),uv=a("li"),Nge=a("strong"),vOo=o("reformer"),FOo=o(" \u2014 "),aV=a("a"),TOo=o("ReformerForQuestionAnswering"),MOo=o(" (Reformer model)"),EOo=l(),_v=a("li"),jge=a("strong"),COo=o("rembert"),wOo=o(" \u2014 "),nV=a("a"),AOo=o("RemBertForQuestionAnswering"),yOo=o(" (RemBERT model)"),LOo=l(),bv=a("li"),Dge=a("strong"),xOo=o("roberta"),$Oo=o(" \u2014 "),sV=a("a"),kOo=o("RobertaForQuestionAnswering"),SOo=o(" (RoBERTa model)"),ROo=l(),vv=a("li"),Gge=a("strong"),BOo=o("roformer"),POo=o(" \u2014 "),lV=a("a"),IOo=o("RoFormerForQuestionAnswering"),qOo=o(" (RoFormer model)"),NOo=l(),Fv=a("li"),Oge=a("strong"),jOo=o("splinter"),DOo=o(" \u2014 "),iV=a("a"),GOo=o("SplinterForQuestionAnswering"),OOo=o(" (Splinter model)"),VOo=l(),Tv=a("li"),Vge=a("strong"),XOo=o("squeezebert"),zOo=o(" \u2014 "),dV=a("a"),QOo=o("SqueezeBertForQuestionAnswering"),WOo=o(" (SqueezeBERT model)"),HOo=l(),Mv=a("li"),Xge=a("strong"),UOo=o("xlm"),JOo=o(" \u2014 "),cV=a("a"),YOo=o("XLMForQuestionAnsweringSimple"),KOo=o(" (XLM model)"),ZOo=l(),Ev=a("li"),zge=a("strong"),eVo=o("xlm-roberta"),oVo=o(" \u2014 "),fV=a("a"),rVo=o("XLMRobertaForQuestionAnswering"),tVo=o(" (XLM-RoBERTa model)"),aVo=l(),Cv=a("li"),Qge=a("strong"),nVo=o("xlm-roberta-xl"),sVo=o(" \u2014 "),mV=a("a"),lVo=o("XLMRobertaXLForQuestionAnswering"),iVo=o(" (XLM-RoBERTa-XL model)"),dVo=l(),wv=a("li"),Wge=a("strong"),cVo=o("xlnet"),fVo=o(" \u2014 "),gV=a("a"),mVo=o("XLNetForQuestionAnsweringSimple"),gVo=o(" (XLNet model)"),hVo=l(),Av=a("li"),Hge=a("strong"),pVo=o("yoso"),uVo=o(" \u2014 "),hV=a("a"),_Vo=o("YosoForQuestionAnswering"),bVo=o(" (YOSO model)"),vVo=l(),yv=a("p"),FVo=o("The model is set in evaluation mode by default using "),Uge=a("code"),TVo=o("model.eval()"),MVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=a("code"),EVo=o("model.train()"),CVo=l(),F(Lv.$$.fragment),vIe=l(),Ki=a("h2"),xv=a("a"),Yge=a("span"),F(by.$$.fragment),wVo=l(),Kge=a("span"),AVo=o("AutoModelForTableQuestionAnswering"),FIe=l(),No=a("div"),F(vy.$$.fragment),yVo=l(),Zi=a("p"),LVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pV=a("a"),xVo=o("from_pretrained()"),$Vo=o(" class method or the "),uV=a("a"),kVo=o("from_config()"),SVo=o(` class
method.`),RVo=l(),Fy=a("p"),BVo=o("This class cannot be instantiated directly using "),Zge=a("code"),PVo=o("__init__()"),IVo=o(" (throws an error)."),qVo=l(),ft=a("div"),F(Ty.$$.fragment),NVo=l(),ehe=a("p"),jVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),DVo=l(),ed=a("p"),GVo=o(`Note:
Loading a model from its configuration file does `),ohe=a("strong"),OVo=o("not"),VVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),XVo=o("from_pretrained()"),zVo=o(" to load the model weights."),QVo=l(),F($v.$$.fragment),WVo=l(),ao=a("div"),F(My.$$.fragment),HVo=l(),rhe=a("p"),UVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),JVo=l(),Ia=a("p"),YVo=o("The model class to instantiate is selected based on the "),the=a("code"),KVo=o("model_type"),ZVo=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),eXo=o("pretrained_model_name_or_path"),oXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),rXo=o("pretrained_model_name_or_path"),tXo=o(":"),aXo=l(),she=a("ul"),kv=a("li"),lhe=a("strong"),nXo=o("tapas"),sXo=o(" \u2014 "),bV=a("a"),lXo=o("TapasForQuestionAnswering"),iXo=o(" (TAPAS model)"),dXo=l(),Sv=a("p"),cXo=o("The model is set in evaluation mode by default using "),ihe=a("code"),fXo=o("model.eval()"),mXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=a("code"),gXo=o("model.train()"),hXo=l(),F(Rv.$$.fragment),TIe=l(),od=a("h2"),Bv=a("a"),che=a("span"),F(Ey.$$.fragment),pXo=l(),fhe=a("span"),uXo=o("AutoModelForImageClassification"),MIe=l(),jo=a("div"),F(Cy.$$.fragment),_Xo=l(),rd=a("p"),bXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vV=a("a"),vXo=o("from_pretrained()"),FXo=o(" class method or the "),FV=a("a"),TXo=o("from_config()"),MXo=o(` class
method.`),EXo=l(),wy=a("p"),CXo=o("This class cannot be instantiated directly using "),mhe=a("code"),wXo=o("__init__()"),AXo=o(" (throws an error)."),yXo=l(),mt=a("div"),F(Ay.$$.fragment),LXo=l(),ghe=a("p"),xXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Xo=l(),td=a("p"),kXo=o(`Note:
Loading a model from its configuration file does `),hhe=a("strong"),SXo=o("not"),RXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),BXo=o("from_pretrained()"),PXo=o(" to load the model weights."),IXo=l(),F(Pv.$$.fragment),qXo=l(),no=a("div"),F(yy.$$.fragment),NXo=l(),phe=a("p"),jXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DXo=l(),qa=a("p"),GXo=o("The model class to instantiate is selected based on the "),uhe=a("code"),OXo=o("model_type"),VXo=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),XXo=o("pretrained_model_name_or_path"),zXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),QXo=o("pretrained_model_name_or_path"),WXo=o(":"),HXo=l(),Fe=a("ul"),Iv=a("li"),vhe=a("strong"),UXo=o("beit"),JXo=o(" \u2014 "),MV=a("a"),YXo=o("BeitForImageClassification"),KXo=o(" (BEiT model)"),ZXo=l(),qv=a("li"),Fhe=a("strong"),ezo=o("convnext"),ozo=o(" \u2014 "),EV=a("a"),rzo=o("ConvNextForImageClassification"),tzo=o(" (ConvNext model)"),azo=l(),Nv=a("li"),The=a("strong"),nzo=o("data2vec-vision"),szo=o(" \u2014 "),CV=a("a"),lzo=o("Data2VecVisionForImageClassification"),izo=o(" (Data2VecVision model)"),dzo=l(),Bs=a("li"),Mhe=a("strong"),czo=o("deit"),fzo=o(" \u2014 "),wV=a("a"),mzo=o("DeiTForImageClassification"),gzo=o(" or "),AV=a("a"),hzo=o("DeiTForImageClassificationWithTeacher"),pzo=o(" (DeiT model)"),uzo=l(),jv=a("li"),Ehe=a("strong"),_zo=o("imagegpt"),bzo=o(" \u2014 "),yV=a("a"),vzo=o("ImageGPTForImageClassification"),Fzo=o(" (ImageGPT model)"),Tzo=l(),gt=a("li"),Che=a("strong"),Mzo=o("perceiver"),Ezo=o(" \u2014 "),LV=a("a"),Czo=o("PerceiverForImageClassificationLearned"),wzo=o(" or "),xV=a("a"),Azo=o("PerceiverForImageClassificationFourier"),yzo=o(" or "),$V=a("a"),Lzo=o("PerceiverForImageClassificationConvProcessing"),xzo=o(" (Perceiver model)"),$zo=l(),Dv=a("li"),whe=a("strong"),kzo=o("poolformer"),Szo=o(" \u2014 "),kV=a("a"),Rzo=o("PoolFormerForImageClassification"),Bzo=o(" (PoolFormer model)"),Pzo=l(),Gv=a("li"),Ahe=a("strong"),Izo=o("regnet"),qzo=o(" \u2014 "),SV=a("a"),Nzo=o("RegNetForImageClassification"),jzo=o(" (RegNet model)"),Dzo=l(),Ov=a("li"),yhe=a("strong"),Gzo=o("resnet"),Ozo=o(" \u2014 "),RV=a("a"),Vzo=o("ResNetForImageClassification"),Xzo=o(" (ResNet model)"),zzo=l(),Vv=a("li"),Lhe=a("strong"),Qzo=o("segformer"),Wzo=o(" \u2014 "),BV=a("a"),Hzo=o("SegformerForImageClassification"),Uzo=o(" (SegFormer model)"),Jzo=l(),Xv=a("li"),xhe=a("strong"),Yzo=o("swin"),Kzo=o(" \u2014 "),PV=a("a"),Zzo=o("SwinForImageClassification"),eQo=o(" (Swin model)"),oQo=l(),zv=a("li"),$he=a("strong"),rQo=o("van"),tQo=o(" \u2014 "),IV=a("a"),aQo=o("VanForImageClassification"),nQo=o(" (VAN model)"),sQo=l(),Qv=a("li"),khe=a("strong"),lQo=o("vit"),iQo=o(" \u2014 "),qV=a("a"),dQo=o("ViTForImageClassification"),cQo=o(" (ViT model)"),fQo=l(),Wv=a("p"),mQo=o("The model is set in evaluation mode by default using "),She=a("code"),gQo=o("model.eval()"),hQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=a("code"),pQo=o("model.train()"),uQo=l(),F(Hv.$$.fragment),EIe=l(),ad=a("h2"),Uv=a("a"),Bhe=a("span"),F(Ly.$$.fragment),_Qo=l(),Phe=a("span"),bQo=o("AutoModelForVision2Seq"),CIe=l(),Do=a("div"),F(xy.$$.fragment),vQo=l(),nd=a("p"),FQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NV=a("a"),TQo=o("from_pretrained()"),MQo=o(" class method or the "),jV=a("a"),EQo=o("from_config()"),CQo=o(` class
method.`),wQo=l(),$y=a("p"),AQo=o("This class cannot be instantiated directly using "),Ihe=a("code"),yQo=o("__init__()"),LQo=o(" (throws an error)."),xQo=l(),ht=a("div"),F(ky.$$.fragment),$Qo=l(),qhe=a("p"),kQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SQo=l(),sd=a("p"),RQo=o(`Note:
Loading a model from its configuration file does `),Nhe=a("strong"),BQo=o("not"),PQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),IQo=o("from_pretrained()"),qQo=o(" to load the model weights."),NQo=l(),F(Jv.$$.fragment),jQo=l(),so=a("div"),F(Sy.$$.fragment),DQo=l(),jhe=a("p"),GQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OQo=l(),Na=a("p"),VQo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),XQo=o("model_type"),zQo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),QQo=o("pretrained_model_name_or_path"),WQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),HQo=o("pretrained_model_name_or_path"),UQo=o(":"),JQo=l(),Vhe=a("ul"),Yv=a("li"),Xhe=a("strong"),YQo=o("vision-encoder-decoder"),KQo=o(" \u2014 "),GV=a("a"),ZQo=o("VisionEncoderDecoderModel"),eWo=o(" (Vision Encoder decoder model)"),oWo=l(),Kv=a("p"),rWo=o("The model is set in evaluation mode by default using "),zhe=a("code"),tWo=o("model.eval()"),aWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=a("code"),nWo=o("model.train()"),sWo=l(),F(Zv.$$.fragment),wIe=l(),ld=a("h2"),eF=a("a"),Whe=a("span"),F(Ry.$$.fragment),lWo=l(),Hhe=a("span"),iWo=o("AutoModelForAudioClassification"),AIe=l(),Go=a("div"),F(By.$$.fragment),dWo=l(),id=a("p"),cWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OV=a("a"),fWo=o("from_pretrained()"),mWo=o(" class method or the "),VV=a("a"),gWo=o("from_config()"),hWo=o(` class
method.`),pWo=l(),Py=a("p"),uWo=o("This class cannot be instantiated directly using "),Uhe=a("code"),_Wo=o("__init__()"),bWo=o(" (throws an error)."),vWo=l(),pt=a("div"),F(Iy.$$.fragment),FWo=l(),Jhe=a("p"),TWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),MWo=l(),dd=a("p"),EWo=o(`Note:
Loading a model from its configuration file does `),Yhe=a("strong"),CWo=o("not"),wWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),AWo=o("from_pretrained()"),yWo=o(" to load the model weights."),LWo=l(),F(oF.$$.fragment),xWo=l(),lo=a("div"),F(qy.$$.fragment),$Wo=l(),Khe=a("p"),kWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),SWo=l(),ja=a("p"),RWo=o("The model class to instantiate is selected based on the "),Zhe=a("code"),BWo=o("model_type"),PWo=o(` property of the config object (either
passed as an argument or loaded from `),epe=a("code"),IWo=o("pretrained_model_name_or_path"),qWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=a("code"),NWo=o("pretrained_model_name_or_path"),jWo=o(":"),DWo=l(),Ne=a("ul"),rF=a("li"),rpe=a("strong"),GWo=o("data2vec-audio"),OWo=o(" \u2014 "),zV=a("a"),VWo=o("Data2VecAudioForSequenceClassification"),XWo=o(" (Data2VecAudio model)"),zWo=l(),tF=a("li"),tpe=a("strong"),QWo=o("hubert"),WWo=o(" \u2014 "),QV=a("a"),HWo=o("HubertForSequenceClassification"),UWo=o(" (Hubert model)"),JWo=l(),aF=a("li"),ape=a("strong"),YWo=o("sew"),KWo=o(" \u2014 "),WV=a("a"),ZWo=o("SEWForSequenceClassification"),eHo=o(" (SEW model)"),oHo=l(),nF=a("li"),npe=a("strong"),rHo=o("sew-d"),tHo=o(" \u2014 "),HV=a("a"),aHo=o("SEWDForSequenceClassification"),nHo=o(" (SEW-D model)"),sHo=l(),sF=a("li"),spe=a("strong"),lHo=o("unispeech"),iHo=o(" \u2014 "),UV=a("a"),dHo=o("UniSpeechForSequenceClassification"),cHo=o(" (UniSpeech model)"),fHo=l(),lF=a("li"),lpe=a("strong"),mHo=o("unispeech-sat"),gHo=o(" \u2014 "),JV=a("a"),hHo=o("UniSpeechSatForSequenceClassification"),pHo=o(" (UniSpeechSat model)"),uHo=l(),iF=a("li"),ipe=a("strong"),_Ho=o("wav2vec2"),bHo=o(" \u2014 "),YV=a("a"),vHo=o("Wav2Vec2ForSequenceClassification"),FHo=o(" (Wav2Vec2 model)"),THo=l(),dF=a("li"),dpe=a("strong"),MHo=o("wavlm"),EHo=o(" \u2014 "),KV=a("a"),CHo=o("WavLMForSequenceClassification"),wHo=o(" (WavLM model)"),AHo=l(),cF=a("p"),yHo=o("The model is set in evaluation mode by default using "),cpe=a("code"),LHo=o("model.eval()"),xHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=a("code"),$Ho=o("model.train()"),kHo=l(),F(fF.$$.fragment),yIe=l(),cd=a("h2"),mF=a("a"),mpe=a("span"),F(Ny.$$.fragment),SHo=l(),gpe=a("span"),RHo=o("AutoModelForAudioFrameClassification"),LIe=l(),Oo=a("div"),F(jy.$$.fragment),BHo=l(),fd=a("p"),PHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZV=a("a"),IHo=o("from_pretrained()"),qHo=o(" class method or the "),eX=a("a"),NHo=o("from_config()"),jHo=o(` class
method.`),DHo=l(),Dy=a("p"),GHo=o("This class cannot be instantiated directly using "),hpe=a("code"),OHo=o("__init__()"),VHo=o(" (throws an error)."),XHo=l(),ut=a("div"),F(Gy.$$.fragment),zHo=l(),ppe=a("p"),QHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),WHo=l(),md=a("p"),HHo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),UHo=o("not"),JHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),YHo=o("from_pretrained()"),KHo=o(" to load the model weights."),ZHo=l(),F(gF.$$.fragment),eUo=l(),io=a("div"),F(Oy.$$.fragment),oUo=l(),_pe=a("p"),rUo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),tUo=l(),Da=a("p"),aUo=o("The model class to instantiate is selected based on the "),bpe=a("code"),nUo=o("model_type"),sUo=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),lUo=o("pretrained_model_name_or_path"),iUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),dUo=o("pretrained_model_name_or_path"),cUo=o(":"),fUo=l(),Ga=a("ul"),hF=a("li"),Tpe=a("strong"),mUo=o("data2vec-audio"),gUo=o(" \u2014 "),rX=a("a"),hUo=o("Data2VecAudioForAudioFrameClassification"),pUo=o(" (Data2VecAudio model)"),uUo=l(),pF=a("li"),Mpe=a("strong"),_Uo=o("unispeech-sat"),bUo=o(" \u2014 "),tX=a("a"),vUo=o("UniSpeechSatForAudioFrameClassification"),FUo=o(" (UniSpeechSat model)"),TUo=l(),uF=a("li"),Epe=a("strong"),MUo=o("wav2vec2"),EUo=o(" \u2014 "),aX=a("a"),CUo=o("Wav2Vec2ForAudioFrameClassification"),wUo=o(" (Wav2Vec2 model)"),AUo=l(),_F=a("li"),Cpe=a("strong"),yUo=o("wavlm"),LUo=o(" \u2014 "),nX=a("a"),xUo=o("WavLMForAudioFrameClassification"),$Uo=o(" (WavLM model)"),kUo=l(),bF=a("p"),SUo=o("The model is set in evaluation mode by default using "),wpe=a("code"),RUo=o("model.eval()"),BUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=a("code"),PUo=o("model.train()"),IUo=l(),F(vF.$$.fragment),xIe=l(),gd=a("h2"),FF=a("a"),ype=a("span"),F(Vy.$$.fragment),qUo=l(),Lpe=a("span"),NUo=o("AutoModelForCTC"),$Ie=l(),Vo=a("div"),F(Xy.$$.fragment),jUo=l(),hd=a("p"),DUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),sX=a("a"),GUo=o("from_pretrained()"),OUo=o(" class method or the "),lX=a("a"),VUo=o("from_config()"),XUo=o(` class
method.`),zUo=l(),zy=a("p"),QUo=o("This class cannot be instantiated directly using "),xpe=a("code"),WUo=o("__init__()"),HUo=o(" (throws an error)."),UUo=l(),_t=a("div"),F(Qy.$$.fragment),JUo=l(),$pe=a("p"),YUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),KUo=l(),pd=a("p"),ZUo=o(`Note:
Loading a model from its configuration file does `),kpe=a("strong"),eJo=o("not"),oJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),rJo=o("from_pretrained()"),tJo=o(" to load the model weights."),aJo=l(),F(TF.$$.fragment),nJo=l(),co=a("div"),F(Wy.$$.fragment),sJo=l(),Spe=a("p"),lJo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),iJo=l(),Oa=a("p"),dJo=o("The model class to instantiate is selected based on the "),Rpe=a("code"),cJo=o("model_type"),fJo=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=a("code"),hJo=o("pretrained_model_name_or_path"),pJo=o(":"),uJo=l(),je=a("ul"),MF=a("li"),Ipe=a("strong"),_Jo=o("data2vec-audio"),bJo=o(" \u2014 "),dX=a("a"),vJo=o("Data2VecAudioForCTC"),FJo=o(" (Data2VecAudio model)"),TJo=l(),EF=a("li"),qpe=a("strong"),MJo=o("hubert"),EJo=o(" \u2014 "),cX=a("a"),CJo=o("HubertForCTC"),wJo=o(" (Hubert model)"),AJo=l(),CF=a("li"),Npe=a("strong"),yJo=o("sew"),LJo=o(" \u2014 "),fX=a("a"),xJo=o("SEWForCTC"),$Jo=o(" (SEW model)"),kJo=l(),wF=a("li"),jpe=a("strong"),SJo=o("sew-d"),RJo=o(" \u2014 "),mX=a("a"),BJo=o("SEWDForCTC"),PJo=o(" (SEW-D model)"),IJo=l(),AF=a("li"),Dpe=a("strong"),qJo=o("unispeech"),NJo=o(" \u2014 "),gX=a("a"),jJo=o("UniSpeechForCTC"),DJo=o(" (UniSpeech model)"),GJo=l(),yF=a("li"),Gpe=a("strong"),OJo=o("unispeech-sat"),VJo=o(" \u2014 "),hX=a("a"),XJo=o("UniSpeechSatForCTC"),zJo=o(" (UniSpeechSat model)"),QJo=l(),LF=a("li"),Ope=a("strong"),WJo=o("wav2vec2"),HJo=o(" \u2014 "),pX=a("a"),UJo=o("Wav2Vec2ForCTC"),JJo=o(" (Wav2Vec2 model)"),YJo=l(),xF=a("li"),Vpe=a("strong"),KJo=o("wavlm"),ZJo=o(" \u2014 "),uX=a("a"),eYo=o("WavLMForCTC"),oYo=o(" (WavLM model)"),rYo=l(),$F=a("p"),tYo=o("The model is set in evaluation mode by default using "),Xpe=a("code"),aYo=o("model.eval()"),nYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),sYo=o("model.train()"),lYo=l(),F(kF.$$.fragment),kIe=l(),ud=a("h2"),SF=a("a"),Qpe=a("span"),F(Hy.$$.fragment),iYo=l(),Wpe=a("span"),dYo=o("AutoModelForSpeechSeq2Seq"),SIe=l(),Xo=a("div"),F(Uy.$$.fragment),cYo=l(),_d=a("p"),fYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_X=a("a"),mYo=o("from_pretrained()"),gYo=o(" class method or the "),bX=a("a"),hYo=o("from_config()"),pYo=o(` class
method.`),uYo=l(),Jy=a("p"),_Yo=o("This class cannot be instantiated directly using "),Hpe=a("code"),bYo=o("__init__()"),vYo=o(" (throws an error)."),FYo=l(),bt=a("div"),F(Yy.$$.fragment),TYo=l(),Upe=a("p"),MYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),EYo=l(),bd=a("p"),CYo=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),wYo=o("not"),AYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),yYo=o("from_pretrained()"),LYo=o(" to load the model weights."),xYo=l(),F(RF.$$.fragment),$Yo=l(),fo=a("div"),F(Ky.$$.fragment),kYo=l(),Ype=a("p"),SYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),RYo=l(),Va=a("p"),BYo=o("The model class to instantiate is selected based on the "),Kpe=a("code"),PYo=o("model_type"),IYo=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),qYo=o("pretrained_model_name_or_path"),NYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),jYo=o("pretrained_model_name_or_path"),DYo=o(":"),GYo=l(),Zy=a("ul"),BF=a("li"),oue=a("strong"),OYo=o("speech-encoder-decoder"),VYo=o(" \u2014 "),FX=a("a"),XYo=o("SpeechEncoderDecoderModel"),zYo=o(" (Speech Encoder decoder model)"),QYo=l(),PF=a("li"),rue=a("strong"),WYo=o("speech_to_text"),HYo=o(" \u2014 "),TX=a("a"),UYo=o("Speech2TextForConditionalGeneration"),JYo=o(" (Speech2Text model)"),YYo=l(),IF=a("p"),KYo=o("The model is set in evaluation mode by default using "),tue=a("code"),ZYo=o("model.eval()"),eKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),oKo=o("model.train()"),rKo=l(),F(qF.$$.fragment),RIe=l(),vd=a("h2"),NF=a("a"),nue=a("span"),F(eL.$$.fragment),tKo=l(),sue=a("span"),aKo=o("AutoModelForAudioXVector"),BIe=l(),zo=a("div"),F(oL.$$.fragment),nKo=l(),Fd=a("p"),sKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),MX=a("a"),lKo=o("from_pretrained()"),iKo=o(" class method or the "),EX=a("a"),dKo=o("from_config()"),cKo=o(` class
method.`),fKo=l(),rL=a("p"),mKo=o("This class cannot be instantiated directly using "),lue=a("code"),gKo=o("__init__()"),hKo=o(" (throws an error)."),pKo=l(),vt=a("div"),F(tL.$$.fragment),uKo=l(),iue=a("p"),_Ko=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),bKo=l(),Td=a("p"),vKo=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),FKo=o("not"),TKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),MKo=o("from_pretrained()"),EKo=o(" to load the model weights."),CKo=l(),F(jF.$$.fragment),wKo=l(),mo=a("div"),F(aL.$$.fragment),AKo=l(),cue=a("p"),yKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),LKo=l(),Xa=a("p"),xKo=o("The model class to instantiate is selected based on the "),fue=a("code"),$Ko=o("model_type"),kKo=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),SKo=o("pretrained_model_name_or_path"),RKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),BKo=o("pretrained_model_name_or_path"),PKo=o(":"),IKo=l(),za=a("ul"),DF=a("li"),hue=a("strong"),qKo=o("data2vec-audio"),NKo=o(" \u2014 "),wX=a("a"),jKo=o("Data2VecAudioForXVector"),DKo=o(" (Data2VecAudio model)"),GKo=l(),GF=a("li"),pue=a("strong"),OKo=o("unispeech-sat"),VKo=o(" \u2014 "),AX=a("a"),XKo=o("UniSpeechSatForXVector"),zKo=o(" (UniSpeechSat model)"),QKo=l(),OF=a("li"),uue=a("strong"),WKo=o("wav2vec2"),HKo=o(" \u2014 "),yX=a("a"),UKo=o("Wav2Vec2ForXVector"),JKo=o(" (Wav2Vec2 model)"),YKo=l(),VF=a("li"),_ue=a("strong"),KKo=o("wavlm"),ZKo=o(" \u2014 "),LX=a("a"),eZo=o("WavLMForXVector"),oZo=o(" (WavLM model)"),rZo=l(),XF=a("p"),tZo=o("The model is set in evaluation mode by default using "),bue=a("code"),aZo=o("model.eval()"),nZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=a("code"),sZo=o("model.train()"),lZo=l(),F(zF.$$.fragment),PIe=l(),Md=a("h2"),QF=a("a"),Fue=a("span"),F(nL.$$.fragment),iZo=l(),Tue=a("span"),dZo=o("AutoModelForMaskedImageModeling"),IIe=l(),Qo=a("div"),F(sL.$$.fragment),cZo=l(),Ed=a("p"),fZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),xX=a("a"),mZo=o("from_pretrained()"),gZo=o(" class method or the "),$X=a("a"),hZo=o("from_config()"),pZo=o(` class
method.`),uZo=l(),lL=a("p"),_Zo=o("This class cannot be instantiated directly using "),Mue=a("code"),bZo=o("__init__()"),vZo=o(" (throws an error)."),FZo=l(),Ft=a("div"),F(iL.$$.fragment),TZo=l(),Eue=a("p"),MZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),EZo=l(),Cd=a("p"),CZo=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),wZo=o("not"),AZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=a("a"),yZo=o("from_pretrained()"),LZo=o(" to load the model weights."),xZo=l(),F(WF.$$.fragment),$Zo=l(),go=a("div"),F(dL.$$.fragment),kZo=l(),wue=a("p"),SZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),RZo=l(),Qa=a("p"),BZo=o("The model class to instantiate is selected based on the "),Aue=a("code"),PZo=o("model_type"),IZo=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),qZo=o("pretrained_model_name_or_path"),NZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),jZo=o("pretrained_model_name_or_path"),DZo=o(":"),GZo=l(),wd=a("ul"),HF=a("li"),xue=a("strong"),OZo=o("deit"),VZo=o(" \u2014 "),SX=a("a"),XZo=o("DeiTForMaskedImageModeling"),zZo=o(" (DeiT model)"),QZo=l(),UF=a("li"),$ue=a("strong"),WZo=o("swin"),HZo=o(" \u2014 "),RX=a("a"),UZo=o("SwinForMaskedImageModeling"),JZo=o(" (Swin model)"),YZo=l(),JF=a("li"),kue=a("strong"),KZo=o("vit"),ZZo=o(" \u2014 "),BX=a("a"),eer=o("ViTForMaskedImageModeling"),oer=o(" (ViT model)"),rer=l(),YF=a("p"),ter=o("The model is set in evaluation mode by default using "),Sue=a("code"),aer=o("model.eval()"),ner=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),ser=o("model.train()"),ler=l(),F(KF.$$.fragment),qIe=l(),Ad=a("h2"),ZF=a("a"),Bue=a("span"),F(cL.$$.fragment),ier=l(),Pue=a("span"),der=o("AutoModelForObjectDetection"),NIe=l(),Wo=a("div"),F(fL.$$.fragment),cer=l(),yd=a("p"),fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PX=a("a"),mer=o("from_pretrained()"),ger=o(" class method or the "),IX=a("a"),her=o("from_config()"),per=o(` class
method.`),uer=l(),mL=a("p"),_er=o("This class cannot be instantiated directly using "),Iue=a("code"),ber=o("__init__()"),ver=o(" (throws an error)."),Fer=l(),Tt=a("div"),F(gL.$$.fragment),Ter=l(),que=a("p"),Mer=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Eer=l(),Ld=a("p"),Cer=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),wer=o("not"),Aer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),yer=o("from_pretrained()"),Ler=o(" to load the model weights."),xer=l(),F(e6.$$.fragment),$er=l(),ho=a("div"),F(hL.$$.fragment),ker=l(),jue=a("p"),Ser=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Rer=l(),Wa=a("p"),Ber=o("The model class to instantiate is selected based on the "),Due=a("code"),Per=o("model_type"),Ier=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),qer=o("pretrained_model_name_or_path"),Ner=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),jer=o("pretrained_model_name_or_path"),Der=o(":"),Ger=l(),pL=a("ul"),o6=a("li"),Vue=a("strong"),Oer=o("detr"),Ver=o(" \u2014 "),NX=a("a"),Xer=o("DetrForObjectDetection"),zer=o(" (DETR model)"),Qer=l(),r6=a("li"),Xue=a("strong"),Wer=o("yolos"),Her=o(" \u2014 "),jX=a("a"),Uer=o("YolosForObjectDetection"),Jer=o(" (YOLOS model)"),Yer=l(),t6=a("p"),Ker=o("The model is set in evaluation mode by default using "),zue=a("code"),Zer=o("model.eval()"),eor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=a("code"),oor=o("model.train()"),ror=l(),F(a6.$$.fragment),jIe=l(),xd=a("h2"),n6=a("a"),Wue=a("span"),F(uL.$$.fragment),tor=l(),Hue=a("span"),aor=o("AutoModelForImageSegmentation"),DIe=l(),Ho=a("div"),F(_L.$$.fragment),nor=l(),$d=a("p"),sor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),DX=a("a"),lor=o("from_pretrained()"),ior=o(" class method or the "),GX=a("a"),dor=o("from_config()"),cor=o(` class
method.`),mor=l(),bL=a("p"),gor=o("This class cannot be instantiated directly using "),Uue=a("code"),hor=o("__init__()"),por=o(" (throws an error)."),uor=l(),Mt=a("div"),F(vL.$$.fragment),_or=l(),Jue=a("p"),bor=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),vor=l(),kd=a("p"),For=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),Tor=o("not"),Mor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),Eor=o("from_pretrained()"),Cor=o(" to load the model weights."),wor=l(),F(s6.$$.fragment),Aor=l(),po=a("div"),F(FL.$$.fragment),yor=l(),Kue=a("p"),Lor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),xor=l(),Ha=a("p"),$or=o("The model class to instantiate is selected based on the "),Zue=a("code"),kor=o("model_type"),Sor=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),Ror=o("pretrained_model_name_or_path"),Bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),Por=o("pretrained_model_name_or_path"),Ior=o(":"),qor=l(),r_e=a("ul"),l6=a("li"),t_e=a("strong"),Nor=o("detr"),jor=o(" \u2014 "),VX=a("a"),Dor=o("DetrForSegmentation"),Gor=o(" (DETR model)"),Oor=l(),i6=a("p"),Vor=o("The model is set in evaluation mode by default using "),a_e=a("code"),Xor=o("model.eval()"),zor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=a("code"),Qor=o("model.train()"),Wor=l(),F(d6.$$.fragment),GIe=l(),Sd=a("h2"),c6=a("a"),s_e=a("span"),F(TL.$$.fragment),Hor=l(),l_e=a("span"),Uor=o("AutoModelForSemanticSegmentation"),OIe=l(),Uo=a("div"),F(ML.$$.fragment),Jor=l(),Rd=a("p"),Yor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),XX=a("a"),Kor=o("from_pretrained()"),Zor=o(" class method or the "),zX=a("a"),err=o("from_config()"),orr=o(` class
method.`),rrr=l(),EL=a("p"),trr=o("This class cannot be instantiated directly using "),i_e=a("code"),arr=o("__init__()"),nrr=o(" (throws an error)."),srr=l(),Et=a("div"),F(CL.$$.fragment),lrr=l(),d_e=a("p"),irr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),drr=l(),Bd=a("p"),crr=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),frr=o("not"),mrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),grr=o("from_pretrained()"),hrr=o(" to load the model weights."),prr=l(),F(f6.$$.fragment),urr=l(),uo=a("div"),F(wL.$$.fragment),_rr=l(),f_e=a("p"),brr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),vrr=l(),Ua=a("p"),Frr=o("The model class to instantiate is selected based on the "),m_e=a("code"),Trr=o("model_type"),Mrr=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),Err=o("pretrained_model_name_or_path"),Crr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(":"),yrr=l(),Ja=a("ul"),m6=a("li"),p_e=a("strong"),Lrr=o("beit"),xrr=o(" \u2014 "),WX=a("a"),$rr=o("BeitForSemanticSegmentation"),krr=o(" (BEiT model)"),Srr=l(),g6=a("li"),u_e=a("strong"),Rrr=o("data2vec-vision"),Brr=o(" \u2014 "),HX=a("a"),Prr=o("Data2VecVisionForSemanticSegmentation"),Irr=o(" (Data2VecVision model)"),qrr=l(),h6=a("li"),__e=a("strong"),Nrr=o("dpt"),jrr=o(" \u2014 "),UX=a("a"),Drr=o("DPTForSemanticSegmentation"),Grr=o(" (DPT model)"),Orr=l(),p6=a("li"),b_e=a("strong"),Vrr=o("segformer"),Xrr=o(" \u2014 "),JX=a("a"),zrr=o("SegformerForSemanticSegmentation"),Qrr=o(" (SegFormer model)"),Wrr=l(),u6=a("p"),Hrr=o("The model is set in evaluation mode by default using "),v_e=a("code"),Urr=o("model.eval()"),Jrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=a("code"),Yrr=o("model.train()"),Krr=l(),F(_6.$$.fragment),VIe=l(),Pd=a("h2"),b6=a("a"),T_e=a("span"),F(AL.$$.fragment),Zrr=l(),M_e=a("span"),etr=o("AutoModelForInstanceSegmentation"),XIe=l(),Jo=a("div"),F(yL.$$.fragment),otr=l(),Id=a("p"),rtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),YX=a("a"),ttr=o("from_pretrained()"),atr=o(" class method or the "),KX=a("a"),ntr=o("from_config()"),str=o(` class
method.`),ltr=l(),LL=a("p"),itr=o("This class cannot be instantiated directly using "),E_e=a("code"),dtr=o("__init__()"),ctr=o(" (throws an error)."),ftr=l(),Ct=a("div"),F(xL.$$.fragment),mtr=l(),C_e=a("p"),gtr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),htr=l(),qd=a("p"),ptr=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),utr=o("not"),_tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),btr=o("from_pretrained()"),vtr=o(" to load the model weights."),Ftr=l(),F(v6.$$.fragment),Ttr=l(),_o=a("div"),F($L.$$.fragment),Mtr=l(),A_e=a("p"),Etr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ctr=l(),Ya=a("p"),wtr=o("The model class to instantiate is selected based on the "),y_e=a("code"),Atr=o("model_type"),ytr=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),Ltr=o("pretrained_model_name_or_path"),xtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),$tr=o("pretrained_model_name_or_path"),ktr=o(":"),Str=l(),$_e=a("ul"),F6=a("li"),k_e=a("strong"),Rtr=o("maskformer"),Btr=o(" \u2014 "),ez=a("a"),Ptr=o("MaskFormerForInstanceSegmentation"),Itr=o(" (MaskFormer model)"),qtr=l(),T6=a("p"),Ntr=o("The model is set in evaluation mode by default using "),S_e=a("code"),jtr=o("model.eval()"),Dtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=a("code"),Gtr=o("model.train()"),Otr=l(),F(M6.$$.fragment),zIe=l(),Nd=a("h2"),E6=a("a"),B_e=a("span"),F(kL.$$.fragment),Vtr=l(),P_e=a("span"),Xtr=o("TFAutoModel"),QIe=l(),Yo=a("div"),F(SL.$$.fragment),ztr=l(),jd=a("p"),Qtr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oz=a("a"),Wtr=o("from_pretrained()"),Htr=o(" class method or the "),rz=a("a"),Utr=o("from_config()"),Jtr=o(` class
method.`),Ytr=l(),RL=a("p"),Ktr=o("This class cannot be instantiated directly using "),I_e=a("code"),Ztr=o("__init__()"),ear=o(" (throws an error)."),oar=l(),wt=a("div"),F(BL.$$.fragment),rar=l(),q_e=a("p"),tar=o("Instantiates one of the base model classes of the library from a configuration."),aar=l(),Dd=a("p"),nar=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),sar=o("not"),lar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),iar=o("from_pretrained()"),dar=o(" to load the model weights."),car=l(),F(C6.$$.fragment),far=l(),wr=a("div"),F(PL.$$.fragment),mar=l(),j_e=a("p"),gar=o("Instantiate one of the base model classes of the library from a pretrained model."),har=l(),Ka=a("p"),par=o("The model class to instantiate is selected based on the "),D_e=a("code"),uar=o("model_type"),_ar=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),bar=o("pretrained_model_name_or_path"),Far=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),Tar=o("pretrained_model_name_or_path"),Mar=o(":"),Ear=l(),j=a("ul"),w6=a("li"),V_e=a("strong"),Car=o("albert"),war=o(" \u2014 "),az=a("a"),Aar=o("TFAlbertModel"),yar=o(" (ALBERT model)"),Lar=l(),A6=a("li"),X_e=a("strong"),xar=o("bart"),$ar=o(" \u2014 "),nz=a("a"),kar=o("TFBartModel"),Sar=o(" (BART model)"),Rar=l(),y6=a("li"),z_e=a("strong"),Bar=o("bert"),Par=o(" \u2014 "),sz=a("a"),Iar=o("TFBertModel"),qar=o(" (BERT model)"),Nar=l(),L6=a("li"),Q_e=a("strong"),jar=o("blenderbot"),Dar=o(" \u2014 "),lz=a("a"),Gar=o("TFBlenderbotModel"),Oar=o(" (Blenderbot model)"),Var=l(),x6=a("li"),W_e=a("strong"),Xar=o("blenderbot-small"),zar=o(" \u2014 "),iz=a("a"),Qar=o("TFBlenderbotSmallModel"),War=o(" (BlenderbotSmall model)"),Har=l(),$6=a("li"),H_e=a("strong"),Uar=o("camembert"),Jar=o(" \u2014 "),dz=a("a"),Yar=o("TFCamembertModel"),Kar=o(" (CamemBERT model)"),Zar=l(),k6=a("li"),U_e=a("strong"),enr=o("clip"),onr=o(" \u2014 "),cz=a("a"),rnr=o("TFCLIPModel"),tnr=o(" (CLIP model)"),anr=l(),S6=a("li"),J_e=a("strong"),nnr=o("convbert"),snr=o(" \u2014 "),fz=a("a"),lnr=o("TFConvBertModel"),inr=o(" (ConvBERT model)"),dnr=l(),R6=a("li"),Y_e=a("strong"),cnr=o("convnext"),fnr=o(" \u2014 "),mz=a("a"),mnr=o("TFConvNextModel"),gnr=o(" (ConvNext model)"),hnr=l(),B6=a("li"),K_e=a("strong"),pnr=o("ctrl"),unr=o(" \u2014 "),gz=a("a"),_nr=o("TFCTRLModel"),bnr=o(" (CTRL model)"),vnr=l(),P6=a("li"),Z_e=a("strong"),Fnr=o("data2vec-vision"),Tnr=o(" \u2014 "),hz=a("a"),Mnr=o("TFData2VecVisionModel"),Enr=o(" (Data2VecVision model)"),Cnr=l(),I6=a("li"),e0e=a("strong"),wnr=o("deberta"),Anr=o(" \u2014 "),pz=a("a"),ynr=o("TFDebertaModel"),Lnr=o(" (DeBERTa model)"),xnr=l(),q6=a("li"),o0e=a("strong"),$nr=o("deberta-v2"),knr=o(" \u2014 "),uz=a("a"),Snr=o("TFDebertaV2Model"),Rnr=o(" (DeBERTa-v2 model)"),Bnr=l(),N6=a("li"),r0e=a("strong"),Pnr=o("distilbert"),Inr=o(" \u2014 "),_z=a("a"),qnr=o("TFDistilBertModel"),Nnr=o(" (DistilBERT model)"),jnr=l(),j6=a("li"),t0e=a("strong"),Dnr=o("dpr"),Gnr=o(" \u2014 "),bz=a("a"),Onr=o("TFDPRQuestionEncoder"),Vnr=o(" (DPR model)"),Xnr=l(),D6=a("li"),a0e=a("strong"),znr=o("electra"),Qnr=o(" \u2014 "),vz=a("a"),Wnr=o("TFElectraModel"),Hnr=o(" (ELECTRA model)"),Unr=l(),G6=a("li"),n0e=a("strong"),Jnr=o("flaubert"),Ynr=o(" \u2014 "),Fz=a("a"),Knr=o("TFFlaubertModel"),Znr=o(" (FlauBERT model)"),esr=l(),Ps=a("li"),s0e=a("strong"),osr=o("funnel"),rsr=o(" \u2014 "),Tz=a("a"),tsr=o("TFFunnelModel"),asr=o(" or "),Mz=a("a"),nsr=o("TFFunnelBaseModel"),ssr=o(" (Funnel Transformer model)"),lsr=l(),O6=a("li"),l0e=a("strong"),isr=o("gpt2"),dsr=o(" \u2014 "),Ez=a("a"),csr=o("TFGPT2Model"),fsr=o(" (OpenAI GPT-2 model)"),msr=l(),V6=a("li"),i0e=a("strong"),gsr=o("gptj"),hsr=o(" \u2014 "),Cz=a("a"),psr=o("TFGPTJModel"),usr=o(" (GPT-J model)"),_sr=l(),X6=a("li"),d0e=a("strong"),bsr=o("hubert"),vsr=o(" \u2014 "),wz=a("a"),Fsr=o("TFHubertModel"),Tsr=o(" (Hubert model)"),Msr=l(),z6=a("li"),c0e=a("strong"),Esr=o("layoutlm"),Csr=o(" \u2014 "),Az=a("a"),wsr=o("TFLayoutLMModel"),Asr=o(" (LayoutLM model)"),ysr=l(),Q6=a("li"),f0e=a("strong"),Lsr=o("led"),xsr=o(" \u2014 "),yz=a("a"),$sr=o("TFLEDModel"),ksr=o(" (LED model)"),Ssr=l(),W6=a("li"),m0e=a("strong"),Rsr=o("longformer"),Bsr=o(" \u2014 "),Lz=a("a"),Psr=o("TFLongformerModel"),Isr=o(" (Longformer model)"),qsr=l(),H6=a("li"),g0e=a("strong"),Nsr=o("lxmert"),jsr=o(" \u2014 "),xz=a("a"),Dsr=o("TFLxmertModel"),Gsr=o(" (LXMERT model)"),Osr=l(),U6=a("li"),h0e=a("strong"),Vsr=o("marian"),Xsr=o(" \u2014 "),$z=a("a"),zsr=o("TFMarianModel"),Qsr=o(" (Marian model)"),Wsr=l(),J6=a("li"),p0e=a("strong"),Hsr=o("mbart"),Usr=o(" \u2014 "),kz=a("a"),Jsr=o("TFMBartModel"),Ysr=o(" (mBART model)"),Ksr=l(),Y6=a("li"),u0e=a("strong"),Zsr=o("mobilebert"),elr=o(" \u2014 "),Sz=a("a"),olr=o("TFMobileBertModel"),rlr=o(" (MobileBERT model)"),tlr=l(),K6=a("li"),_0e=a("strong"),alr=o("mpnet"),nlr=o(" \u2014 "),Rz=a("a"),slr=o("TFMPNetModel"),llr=o(" (MPNet model)"),ilr=l(),Z6=a("li"),b0e=a("strong"),dlr=o("mt5"),clr=o(" \u2014 "),Bz=a("a"),flr=o("TFMT5Model"),mlr=o(" (mT5 model)"),glr=l(),eT=a("li"),v0e=a("strong"),hlr=o("openai-gpt"),plr=o(" \u2014 "),Pz=a("a"),ulr=o("TFOpenAIGPTModel"),_lr=o(" (OpenAI GPT model)"),blr=l(),oT=a("li"),F0e=a("strong"),vlr=o("pegasus"),Flr=o(" \u2014 "),Iz=a("a"),Tlr=o("TFPegasusModel"),Mlr=o(" (Pegasus model)"),Elr=l(),rT=a("li"),T0e=a("strong"),Clr=o("rembert"),wlr=o(" \u2014 "),qz=a("a"),Alr=o("TFRemBertModel"),ylr=o(" (RemBERT model)"),Llr=l(),tT=a("li"),M0e=a("strong"),xlr=o("roberta"),$lr=o(" \u2014 "),Nz=a("a"),klr=o("TFRobertaModel"),Slr=o(" (RoBERTa model)"),Rlr=l(),aT=a("li"),E0e=a("strong"),Blr=o("roformer"),Plr=o(" \u2014 "),jz=a("a"),Ilr=o("TFRoFormerModel"),qlr=o(" (RoFormer model)"),Nlr=l(),nT=a("li"),C0e=a("strong"),jlr=o("speech_to_text"),Dlr=o(" \u2014 "),Dz=a("a"),Glr=o("TFSpeech2TextModel"),Olr=o(" (Speech2Text model)"),Vlr=l(),sT=a("li"),w0e=a("strong"),Xlr=o("t5"),zlr=o(" \u2014 "),Gz=a("a"),Qlr=o("TFT5Model"),Wlr=o(" (T5 model)"),Hlr=l(),lT=a("li"),A0e=a("strong"),Ulr=o("tapas"),Jlr=o(" \u2014 "),Oz=a("a"),Ylr=o("TFTapasModel"),Klr=o(" (TAPAS model)"),Zlr=l(),iT=a("li"),y0e=a("strong"),eir=o("transfo-xl"),oir=o(" \u2014 "),Vz=a("a"),rir=o("TFTransfoXLModel"),tir=o(" (Transformer-XL model)"),air=l(),dT=a("li"),L0e=a("strong"),nir=o("vit"),sir=o(" \u2014 "),Xz=a("a"),lir=o("TFViTModel"),iir=o(" (ViT model)"),dir=l(),cT=a("li"),x0e=a("strong"),cir=o("vit_mae"),fir=o(" \u2014 "),zz=a("a"),mir=o("TFViTMAEModel"),gir=o(" (ViTMAE model)"),hir=l(),fT=a("li"),$0e=a("strong"),pir=o("wav2vec2"),uir=o(" \u2014 "),Qz=a("a"),_ir=o("TFWav2Vec2Model"),bir=o(" (Wav2Vec2 model)"),vir=l(),mT=a("li"),k0e=a("strong"),Fir=o("xlm"),Tir=o(" \u2014 "),Wz=a("a"),Mir=o("TFXLMModel"),Eir=o(" (XLM model)"),Cir=l(),gT=a("li"),S0e=a("strong"),wir=o("xlm-roberta"),Air=o(" \u2014 "),Hz=a("a"),yir=o("TFXLMRobertaModel"),Lir=o(" (XLM-RoBERTa model)"),xir=l(),hT=a("li"),R0e=a("strong"),$ir=o("xlnet"),kir=o(" \u2014 "),Uz=a("a"),Sir=o("TFXLNetModel"),Rir=o(" (XLNet model)"),Bir=l(),F(pT.$$.fragment),WIe=l(),Gd=a("h2"),uT=a("a"),B0e=a("span"),F(IL.$$.fragment),Pir=l(),P0e=a("span"),Iir=o("TFAutoModelForPreTraining"),HIe=l(),Ko=a("div"),F(qL.$$.fragment),qir=l(),Od=a("p"),Nir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jz=a("a"),jir=o("from_pretrained()"),Dir=o(" class method or the "),Yz=a("a"),Gir=o("from_config()"),Oir=o(` class
method.`),Vir=l(),NL=a("p"),Xir=o("This class cannot be instantiated directly using "),I0e=a("code"),zir=o("__init__()"),Qir=o(" (throws an error)."),Wir=l(),At=a("div"),F(jL.$$.fragment),Hir=l(),q0e=a("p"),Uir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jir=l(),Vd=a("p"),Yir=o(`Note:
Loading a model from its configuration file does `),N0e=a("strong"),Kir=o("not"),Zir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),edr=o("from_pretrained()"),odr=o(" to load the model weights."),rdr=l(),F(_T.$$.fragment),tdr=l(),Ar=a("div"),F(DL.$$.fragment),adr=l(),j0e=a("p"),ndr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sdr=l(),Za=a("p"),ldr=o("The model class to instantiate is selected based on the "),D0e=a("code"),idr=o("model_type"),ddr=o(` property of the config object (either
passed as an argument or loaded from `),G0e=a("code"),cdr=o("pretrained_model_name_or_path"),fdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=a("code"),mdr=o("pretrained_model_name_or_path"),gdr=o(":"),hdr=l(),se=a("ul"),bT=a("li"),V0e=a("strong"),pdr=o("albert"),udr=o(" \u2014 "),Zz=a("a"),_dr=o("TFAlbertForPreTraining"),bdr=o(" (ALBERT model)"),vdr=l(),vT=a("li"),X0e=a("strong"),Fdr=o("bart"),Tdr=o(" \u2014 "),eQ=a("a"),Mdr=o("TFBartForConditionalGeneration"),Edr=o(" (BART model)"),Cdr=l(),FT=a("li"),z0e=a("strong"),wdr=o("bert"),Adr=o(" \u2014 "),oQ=a("a"),ydr=o("TFBertForPreTraining"),Ldr=o(" (BERT model)"),xdr=l(),TT=a("li"),Q0e=a("strong"),$dr=o("camembert"),kdr=o(" \u2014 "),rQ=a("a"),Sdr=o("TFCamembertForMaskedLM"),Rdr=o(" (CamemBERT model)"),Bdr=l(),MT=a("li"),W0e=a("strong"),Pdr=o("ctrl"),Idr=o(" \u2014 "),tQ=a("a"),qdr=o("TFCTRLLMHeadModel"),Ndr=o(" (CTRL model)"),jdr=l(),ET=a("li"),H0e=a("strong"),Ddr=o("distilbert"),Gdr=o(" \u2014 "),aQ=a("a"),Odr=o("TFDistilBertForMaskedLM"),Vdr=o(" (DistilBERT model)"),Xdr=l(),CT=a("li"),U0e=a("strong"),zdr=o("electra"),Qdr=o(" \u2014 "),nQ=a("a"),Wdr=o("TFElectraForPreTraining"),Hdr=o(" (ELECTRA model)"),Udr=l(),wT=a("li"),J0e=a("strong"),Jdr=o("flaubert"),Ydr=o(" \u2014 "),sQ=a("a"),Kdr=o("TFFlaubertWithLMHeadModel"),Zdr=o(" (FlauBERT model)"),ecr=l(),AT=a("li"),Y0e=a("strong"),ocr=o("funnel"),rcr=o(" \u2014 "),lQ=a("a"),tcr=o("TFFunnelForPreTraining"),acr=o(" (Funnel Transformer model)"),ncr=l(),yT=a("li"),K0e=a("strong"),scr=o("gpt2"),lcr=o(" \u2014 "),iQ=a("a"),icr=o("TFGPT2LMHeadModel"),dcr=o(" (OpenAI GPT-2 model)"),ccr=l(),LT=a("li"),Z0e=a("strong"),fcr=o("layoutlm"),mcr=o(" \u2014 "),dQ=a("a"),gcr=o("TFLayoutLMForMaskedLM"),hcr=o(" (LayoutLM model)"),pcr=l(),xT=a("li"),e1e=a("strong"),ucr=o("lxmert"),_cr=o(" \u2014 "),cQ=a("a"),bcr=o("TFLxmertForPreTraining"),vcr=o(" (LXMERT model)"),Fcr=l(),$T=a("li"),o1e=a("strong"),Tcr=o("mobilebert"),Mcr=o(" \u2014 "),fQ=a("a"),Ecr=o("TFMobileBertForPreTraining"),Ccr=o(" (MobileBERT model)"),wcr=l(),kT=a("li"),r1e=a("strong"),Acr=o("mpnet"),ycr=o(" \u2014 "),mQ=a("a"),Lcr=o("TFMPNetForMaskedLM"),xcr=o(" (MPNet model)"),$cr=l(),ST=a("li"),t1e=a("strong"),kcr=o("openai-gpt"),Scr=o(" \u2014 "),gQ=a("a"),Rcr=o("TFOpenAIGPTLMHeadModel"),Bcr=o(" (OpenAI GPT model)"),Pcr=l(),RT=a("li"),a1e=a("strong"),Icr=o("roberta"),qcr=o(" \u2014 "),hQ=a("a"),Ncr=o("TFRobertaForMaskedLM"),jcr=o(" (RoBERTa model)"),Dcr=l(),BT=a("li"),n1e=a("strong"),Gcr=o("t5"),Ocr=o(" \u2014 "),pQ=a("a"),Vcr=o("TFT5ForConditionalGeneration"),Xcr=o(" (T5 model)"),zcr=l(),PT=a("li"),s1e=a("strong"),Qcr=o("tapas"),Wcr=o(" \u2014 "),uQ=a("a"),Hcr=o("TFTapasForMaskedLM"),Ucr=o(" (TAPAS model)"),Jcr=l(),IT=a("li"),l1e=a("strong"),Ycr=o("transfo-xl"),Kcr=o(" \u2014 "),_Q=a("a"),Zcr=o("TFTransfoXLLMHeadModel"),efr=o(" (Transformer-XL model)"),ofr=l(),qT=a("li"),i1e=a("strong"),rfr=o("vit_mae"),tfr=o(" \u2014 "),bQ=a("a"),afr=o("TFViTMAEForPreTraining"),nfr=o(" (ViTMAE model)"),sfr=l(),NT=a("li"),d1e=a("strong"),lfr=o("xlm"),ifr=o(" \u2014 "),vQ=a("a"),dfr=o("TFXLMWithLMHeadModel"),cfr=o(" (XLM model)"),ffr=l(),jT=a("li"),c1e=a("strong"),mfr=o("xlm-roberta"),gfr=o(" \u2014 "),FQ=a("a"),hfr=o("TFXLMRobertaForMaskedLM"),pfr=o(" (XLM-RoBERTa model)"),ufr=l(),DT=a("li"),f1e=a("strong"),_fr=o("xlnet"),bfr=o(" \u2014 "),TQ=a("a"),vfr=o("TFXLNetLMHeadModel"),Ffr=o(" (XLNet model)"),Tfr=l(),F(GT.$$.fragment),UIe=l(),Xd=a("h2"),OT=a("a"),m1e=a("span"),F(GL.$$.fragment),Mfr=l(),g1e=a("span"),Efr=o("TFAutoModelForCausalLM"),JIe=l(),Zo=a("div"),F(OL.$$.fragment),Cfr=l(),zd=a("p"),wfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MQ=a("a"),Afr=o("from_pretrained()"),yfr=o(" class method or the "),EQ=a("a"),Lfr=o("from_config()"),xfr=o(` class
method.`),$fr=l(),VL=a("p"),kfr=o("This class cannot be instantiated directly using "),h1e=a("code"),Sfr=o("__init__()"),Rfr=o(" (throws an error)."),Bfr=l(),yt=a("div"),F(XL.$$.fragment),Pfr=l(),p1e=a("p"),Ifr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qfr=l(),Qd=a("p"),Nfr=o(`Note:
Loading a model from its configuration file does `),u1e=a("strong"),jfr=o("not"),Dfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),Gfr=o("from_pretrained()"),Ofr=o(" to load the model weights."),Vfr=l(),F(VT.$$.fragment),Xfr=l(),yr=a("div"),F(zL.$$.fragment),zfr=l(),_1e=a("p"),Qfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wfr=l(),en=a("p"),Hfr=o("The model class to instantiate is selected based on the "),b1e=a("code"),Ufr=o("model_type"),Jfr=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),Yfr=o("pretrained_model_name_or_path"),Kfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),Zfr=o("pretrained_model_name_or_path"),emr=o(":"),omr=l(),Te=a("ul"),XT=a("li"),T1e=a("strong"),rmr=o("bert"),tmr=o(" \u2014 "),wQ=a("a"),amr=o("TFBertLMHeadModel"),nmr=o(" (BERT model)"),smr=l(),zT=a("li"),M1e=a("strong"),lmr=o("camembert"),imr=o(" \u2014 "),AQ=a("a"),dmr=o("TFCamembertForCausalLM"),cmr=o(" (CamemBERT model)"),fmr=l(),QT=a("li"),E1e=a("strong"),mmr=o("ctrl"),gmr=o(" \u2014 "),yQ=a("a"),hmr=o("TFCTRLLMHeadModel"),pmr=o(" (CTRL model)"),umr=l(),WT=a("li"),C1e=a("strong"),_mr=o("gpt2"),bmr=o(" \u2014 "),LQ=a("a"),vmr=o("TFGPT2LMHeadModel"),Fmr=o(" (OpenAI GPT-2 model)"),Tmr=l(),HT=a("li"),w1e=a("strong"),Mmr=o("gptj"),Emr=o(" \u2014 "),xQ=a("a"),Cmr=o("TFGPTJForCausalLM"),wmr=o(" (GPT-J model)"),Amr=l(),UT=a("li"),A1e=a("strong"),ymr=o("openai-gpt"),Lmr=o(" \u2014 "),$Q=a("a"),xmr=o("TFOpenAIGPTLMHeadModel"),$mr=o(" (OpenAI GPT model)"),kmr=l(),JT=a("li"),y1e=a("strong"),Smr=o("rembert"),Rmr=o(" \u2014 "),kQ=a("a"),Bmr=o("TFRemBertForCausalLM"),Pmr=o(" (RemBERT model)"),Imr=l(),YT=a("li"),L1e=a("strong"),qmr=o("roberta"),Nmr=o(" \u2014 "),SQ=a("a"),jmr=o("TFRobertaForCausalLM"),Dmr=o(" (RoBERTa model)"),Gmr=l(),KT=a("li"),x1e=a("strong"),Omr=o("roformer"),Vmr=o(" \u2014 "),RQ=a("a"),Xmr=o("TFRoFormerForCausalLM"),zmr=o(" (RoFormer model)"),Qmr=l(),ZT=a("li"),$1e=a("strong"),Wmr=o("transfo-xl"),Hmr=o(" \u2014 "),BQ=a("a"),Umr=o("TFTransfoXLLMHeadModel"),Jmr=o(" (Transformer-XL model)"),Ymr=l(),e7=a("li"),k1e=a("strong"),Kmr=o("xlm"),Zmr=o(" \u2014 "),PQ=a("a"),egr=o("TFXLMWithLMHeadModel"),ogr=o(" (XLM model)"),rgr=l(),o7=a("li"),S1e=a("strong"),tgr=o("xlnet"),agr=o(" \u2014 "),IQ=a("a"),ngr=o("TFXLNetLMHeadModel"),sgr=o(" (XLNet model)"),lgr=l(),F(r7.$$.fragment),YIe=l(),Wd=a("h2"),t7=a("a"),R1e=a("span"),F(QL.$$.fragment),igr=l(),B1e=a("span"),dgr=o("TFAutoModelForImageClassification"),KIe=l(),er=a("div"),F(WL.$$.fragment),cgr=l(),Hd=a("p"),fgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qQ=a("a"),mgr=o("from_pretrained()"),ggr=o(" class method or the "),NQ=a("a"),hgr=o("from_config()"),pgr=o(` class
method.`),ugr=l(),HL=a("p"),_gr=o("This class cannot be instantiated directly using "),P1e=a("code"),bgr=o("__init__()"),vgr=o(" (throws an error)."),Fgr=l(),Lt=a("div"),F(UL.$$.fragment),Tgr=l(),I1e=a("p"),Mgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Egr=l(),Ud=a("p"),Cgr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),wgr=o("not"),Agr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=a("a"),ygr=o("from_pretrained()"),Lgr=o(" to load the model weights."),xgr=l(),F(a7.$$.fragment),$gr=l(),Lr=a("div"),F(JL.$$.fragment),kgr=l(),N1e=a("p"),Sgr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rgr=l(),on=a("p"),Bgr=o("The model class to instantiate is selected based on the "),j1e=a("code"),Pgr=o("model_type"),Igr=o(` property of the config object (either
passed as an argument or loaded from `),D1e=a("code"),qgr=o("pretrained_model_name_or_path"),Ngr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),jgr=o("pretrained_model_name_or_path"),Dgr=o(":"),Ggr=l(),Jd=a("ul"),n7=a("li"),O1e=a("strong"),Ogr=o("convnext"),Vgr=o(" \u2014 "),DQ=a("a"),Xgr=o("TFConvNextForImageClassification"),zgr=o(" (ConvNext model)"),Qgr=l(),s7=a("li"),V1e=a("strong"),Wgr=o("data2vec-vision"),Hgr=o(" \u2014 "),GQ=a("a"),Ugr=o("TFData2VecVisionForImageClassification"),Jgr=o(" (Data2VecVision model)"),Ygr=l(),l7=a("li"),X1e=a("strong"),Kgr=o("vit"),Zgr=o(" \u2014 "),OQ=a("a"),ehr=o("TFViTForImageClassification"),ohr=o(" (ViT model)"),rhr=l(),F(i7.$$.fragment),ZIe=l(),Yd=a("h2"),d7=a("a"),z1e=a("span"),F(YL.$$.fragment),thr=l(),Q1e=a("span"),ahr=o("TFAutoModelForMaskedLM"),eqe=l(),or=a("div"),F(KL.$$.fragment),nhr=l(),Kd=a("p"),shr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),VQ=a("a"),lhr=o("from_pretrained()"),ihr=o(" class method or the "),XQ=a("a"),dhr=o("from_config()"),chr=o(` class
method.`),fhr=l(),ZL=a("p"),mhr=o("This class cannot be instantiated directly using "),W1e=a("code"),ghr=o("__init__()"),hhr=o(" (throws an error)."),phr=l(),xt=a("div"),F(e8.$$.fragment),uhr=l(),H1e=a("p"),_hr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bhr=l(),Zd=a("p"),vhr=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),Fhr=o("not"),Thr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=a("a"),Mhr=o("from_pretrained()"),Ehr=o(" to load the model weights."),Chr=l(),F(c7.$$.fragment),whr=l(),xr=a("div"),F(o8.$$.fragment),Ahr=l(),J1e=a("p"),yhr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lhr=l(),rn=a("p"),xhr=o("The model class to instantiate is selected based on the "),Y1e=a("code"),$hr=o("model_type"),khr=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),Shr=o("pretrained_model_name_or_path"),Rhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),Bhr=o("pretrained_model_name_or_path"),Phr=o(":"),Ihr=l(),ie=a("ul"),f7=a("li"),ebe=a("strong"),qhr=o("albert"),Nhr=o(" \u2014 "),QQ=a("a"),jhr=o("TFAlbertForMaskedLM"),Dhr=o(" (ALBERT model)"),Ghr=l(),m7=a("li"),obe=a("strong"),Ohr=o("bert"),Vhr=o(" \u2014 "),WQ=a("a"),Xhr=o("TFBertForMaskedLM"),zhr=o(" (BERT model)"),Qhr=l(),g7=a("li"),rbe=a("strong"),Whr=o("camembert"),Hhr=o(" \u2014 "),HQ=a("a"),Uhr=o("TFCamembertForMaskedLM"),Jhr=o(" (CamemBERT model)"),Yhr=l(),h7=a("li"),tbe=a("strong"),Khr=o("convbert"),Zhr=o(" \u2014 "),UQ=a("a"),epr=o("TFConvBertForMaskedLM"),opr=o(" (ConvBERT model)"),rpr=l(),p7=a("li"),abe=a("strong"),tpr=o("deberta"),apr=o(" \u2014 "),JQ=a("a"),npr=o("TFDebertaForMaskedLM"),spr=o(" (DeBERTa model)"),lpr=l(),u7=a("li"),nbe=a("strong"),ipr=o("deberta-v2"),dpr=o(" \u2014 "),YQ=a("a"),cpr=o("TFDebertaV2ForMaskedLM"),fpr=o(" (DeBERTa-v2 model)"),mpr=l(),_7=a("li"),sbe=a("strong"),gpr=o("distilbert"),hpr=o(" \u2014 "),KQ=a("a"),ppr=o("TFDistilBertForMaskedLM"),upr=o(" (DistilBERT model)"),_pr=l(),b7=a("li"),lbe=a("strong"),bpr=o("electra"),vpr=o(" \u2014 "),ZQ=a("a"),Fpr=o("TFElectraForMaskedLM"),Tpr=o(" (ELECTRA model)"),Mpr=l(),v7=a("li"),ibe=a("strong"),Epr=o("flaubert"),Cpr=o(" \u2014 "),eW=a("a"),wpr=o("TFFlaubertWithLMHeadModel"),Apr=o(" (FlauBERT model)"),ypr=l(),F7=a("li"),dbe=a("strong"),Lpr=o("funnel"),xpr=o(" \u2014 "),oW=a("a"),$pr=o("TFFunnelForMaskedLM"),kpr=o(" (Funnel Transformer model)"),Spr=l(),T7=a("li"),cbe=a("strong"),Rpr=o("layoutlm"),Bpr=o(" \u2014 "),rW=a("a"),Ppr=o("TFLayoutLMForMaskedLM"),Ipr=o(" (LayoutLM model)"),qpr=l(),M7=a("li"),fbe=a("strong"),Npr=o("longformer"),jpr=o(" \u2014 "),tW=a("a"),Dpr=o("TFLongformerForMaskedLM"),Gpr=o(" (Longformer model)"),Opr=l(),E7=a("li"),mbe=a("strong"),Vpr=o("mobilebert"),Xpr=o(" \u2014 "),aW=a("a"),zpr=o("TFMobileBertForMaskedLM"),Qpr=o(" (MobileBERT model)"),Wpr=l(),C7=a("li"),gbe=a("strong"),Hpr=o("mpnet"),Upr=o(" \u2014 "),nW=a("a"),Jpr=o("TFMPNetForMaskedLM"),Ypr=o(" (MPNet model)"),Kpr=l(),w7=a("li"),hbe=a("strong"),Zpr=o("rembert"),eur=o(" \u2014 "),sW=a("a"),our=o("TFRemBertForMaskedLM"),rur=o(" (RemBERT model)"),tur=l(),A7=a("li"),pbe=a("strong"),aur=o("roberta"),nur=o(" \u2014 "),lW=a("a"),sur=o("TFRobertaForMaskedLM"),lur=o(" (RoBERTa model)"),iur=l(),y7=a("li"),ube=a("strong"),dur=o("roformer"),cur=o(" \u2014 "),iW=a("a"),fur=o("TFRoFormerForMaskedLM"),mur=o(" (RoFormer model)"),gur=l(),L7=a("li"),_be=a("strong"),hur=o("tapas"),pur=o(" \u2014 "),dW=a("a"),uur=o("TFTapasForMaskedLM"),_ur=o(" (TAPAS model)"),bur=l(),x7=a("li"),bbe=a("strong"),vur=o("xlm"),Fur=o(" \u2014 "),cW=a("a"),Tur=o("TFXLMWithLMHeadModel"),Mur=o(" (XLM model)"),Eur=l(),$7=a("li"),vbe=a("strong"),Cur=o("xlm-roberta"),wur=o(" \u2014 "),fW=a("a"),Aur=o("TFXLMRobertaForMaskedLM"),yur=o(" (XLM-RoBERTa model)"),Lur=l(),F(k7.$$.fragment),oqe=l(),ec=a("h2"),S7=a("a"),Fbe=a("span"),F(r8.$$.fragment),xur=l(),Tbe=a("span"),$ur=o("TFAutoModelForSeq2SeqLM"),rqe=l(),rr=a("div"),F(t8.$$.fragment),kur=l(),oc=a("p"),Sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mW=a("a"),Rur=o("from_pretrained()"),Bur=o(" class method or the "),gW=a("a"),Pur=o("from_config()"),Iur=o(` class
method.`),qur=l(),a8=a("p"),Nur=o("This class cannot be instantiated directly using "),Mbe=a("code"),jur=o("__init__()"),Dur=o(" (throws an error)."),Gur=l(),$t=a("div"),F(n8.$$.fragment),Our=l(),Ebe=a("p"),Vur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Xur=l(),rc=a("p"),zur=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),Qur=o("not"),Wur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=a("a"),Hur=o("from_pretrained()"),Uur=o(" to load the model weights."),Jur=l(),F(R7.$$.fragment),Yur=l(),$r=a("div"),F(s8.$$.fragment),Kur=l(),wbe=a("p"),Zur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),e_r=l(),tn=a("p"),o_r=o("The model class to instantiate is selected based on the "),Abe=a("code"),r_r=o("model_type"),t_r=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=a("code"),s_r=o("pretrained_model_name_or_path"),l_r=o(":"),i_r=l(),ye=a("ul"),B7=a("li"),xbe=a("strong"),d_r=o("bart"),c_r=o(" \u2014 "),pW=a("a"),f_r=o("TFBartForConditionalGeneration"),m_r=o(" (BART model)"),g_r=l(),P7=a("li"),$be=a("strong"),h_r=o("blenderbot"),p_r=o(" \u2014 "),uW=a("a"),u_r=o("TFBlenderbotForConditionalGeneration"),__r=o(" (Blenderbot model)"),b_r=l(),I7=a("li"),kbe=a("strong"),v_r=o("blenderbot-small"),F_r=o(" \u2014 "),_W=a("a"),T_r=o("TFBlenderbotSmallForConditionalGeneration"),M_r=o(" (BlenderbotSmall model)"),E_r=l(),q7=a("li"),Sbe=a("strong"),C_r=o("encoder-decoder"),w_r=o(" \u2014 "),bW=a("a"),A_r=o("TFEncoderDecoderModel"),y_r=o(" (Encoder decoder model)"),L_r=l(),N7=a("li"),Rbe=a("strong"),x_r=o("led"),$_r=o(" \u2014 "),vW=a("a"),k_r=o("TFLEDForConditionalGeneration"),S_r=o(" (LED model)"),R_r=l(),j7=a("li"),Bbe=a("strong"),B_r=o("marian"),P_r=o(" \u2014 "),FW=a("a"),I_r=o("TFMarianMTModel"),q_r=o(" (Marian model)"),N_r=l(),D7=a("li"),Pbe=a("strong"),j_r=o("mbart"),D_r=o(" \u2014 "),TW=a("a"),G_r=o("TFMBartForConditionalGeneration"),O_r=o(" (mBART model)"),V_r=l(),G7=a("li"),Ibe=a("strong"),X_r=o("mt5"),z_r=o(" \u2014 "),MW=a("a"),Q_r=o("TFMT5ForConditionalGeneration"),W_r=o(" (mT5 model)"),H_r=l(),O7=a("li"),qbe=a("strong"),U_r=o("pegasus"),J_r=o(" \u2014 "),EW=a("a"),Y_r=o("TFPegasusForConditionalGeneration"),K_r=o(" (Pegasus model)"),Z_r=l(),V7=a("li"),Nbe=a("strong"),e0r=o("t5"),o0r=o(" \u2014 "),CW=a("a"),r0r=o("TFT5ForConditionalGeneration"),t0r=o(" (T5 model)"),a0r=l(),F(X7.$$.fragment),tqe=l(),tc=a("h2"),z7=a("a"),jbe=a("span"),F(l8.$$.fragment),n0r=l(),Dbe=a("span"),s0r=o("TFAutoModelForSequenceClassification"),aqe=l(),tr=a("div"),F(i8.$$.fragment),l0r=l(),ac=a("p"),i0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wW=a("a"),d0r=o("from_pretrained()"),c0r=o(" class method or the "),AW=a("a"),f0r=o("from_config()"),m0r=o(` class
method.`),g0r=l(),d8=a("p"),h0r=o("This class cannot be instantiated directly using "),Gbe=a("code"),p0r=o("__init__()"),u0r=o(" (throws an error)."),_0r=l(),kt=a("div"),F(c8.$$.fragment),b0r=l(),Obe=a("p"),v0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),F0r=l(),nc=a("p"),T0r=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),M0r=o("not"),E0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),C0r=o("from_pretrained()"),w0r=o(" to load the model weights."),A0r=l(),F(Q7.$$.fragment),y0r=l(),kr=a("div"),F(f8.$$.fragment),L0r=l(),Xbe=a("p"),x0r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$0r=l(),an=a("p"),k0r=o("The model class to instantiate is selected based on the "),zbe=a("code"),S0r=o("model_type"),R0r=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),B0r=o("pretrained_model_name_or_path"),P0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),I0r=o("pretrained_model_name_or_path"),q0r=o(":"),N0r=l(),Z=a("ul"),W7=a("li"),Hbe=a("strong"),j0r=o("albert"),D0r=o(" \u2014 "),LW=a("a"),G0r=o("TFAlbertForSequenceClassification"),O0r=o(" (ALBERT model)"),V0r=l(),H7=a("li"),Ube=a("strong"),X0r=o("bert"),z0r=o(" \u2014 "),xW=a("a"),Q0r=o("TFBertForSequenceClassification"),W0r=o(" (BERT model)"),H0r=l(),U7=a("li"),Jbe=a("strong"),U0r=o("camembert"),J0r=o(" \u2014 "),$W=a("a"),Y0r=o("TFCamembertForSequenceClassification"),K0r=o(" (CamemBERT model)"),Z0r=l(),J7=a("li"),Ybe=a("strong"),e1r=o("convbert"),o1r=o(" \u2014 "),kW=a("a"),r1r=o("TFConvBertForSequenceClassification"),t1r=o(" (ConvBERT model)"),a1r=l(),Y7=a("li"),Kbe=a("strong"),n1r=o("ctrl"),s1r=o(" \u2014 "),SW=a("a"),l1r=o("TFCTRLForSequenceClassification"),i1r=o(" (CTRL model)"),d1r=l(),K7=a("li"),Zbe=a("strong"),c1r=o("deberta"),f1r=o(" \u2014 "),RW=a("a"),m1r=o("TFDebertaForSequenceClassification"),g1r=o(" (DeBERTa model)"),h1r=l(),Z7=a("li"),e2e=a("strong"),p1r=o("deberta-v2"),u1r=o(" \u2014 "),BW=a("a"),_1r=o("TFDebertaV2ForSequenceClassification"),b1r=o(" (DeBERTa-v2 model)"),v1r=l(),eM=a("li"),o2e=a("strong"),F1r=o("distilbert"),T1r=o(" \u2014 "),PW=a("a"),M1r=o("TFDistilBertForSequenceClassification"),E1r=o(" (DistilBERT model)"),C1r=l(),oM=a("li"),r2e=a("strong"),w1r=o("electra"),A1r=o(" \u2014 "),IW=a("a"),y1r=o("TFElectraForSequenceClassification"),L1r=o(" (ELECTRA model)"),x1r=l(),rM=a("li"),t2e=a("strong"),$1r=o("flaubert"),k1r=o(" \u2014 "),qW=a("a"),S1r=o("TFFlaubertForSequenceClassification"),R1r=o(" (FlauBERT model)"),B1r=l(),tM=a("li"),a2e=a("strong"),P1r=o("funnel"),I1r=o(" \u2014 "),NW=a("a"),q1r=o("TFFunnelForSequenceClassification"),N1r=o(" (Funnel Transformer model)"),j1r=l(),aM=a("li"),n2e=a("strong"),D1r=o("gpt2"),G1r=o(" \u2014 "),jW=a("a"),O1r=o("TFGPT2ForSequenceClassification"),V1r=o(" (OpenAI GPT-2 model)"),X1r=l(),nM=a("li"),s2e=a("strong"),z1r=o("gptj"),Q1r=o(" \u2014 "),DW=a("a"),W1r=o("TFGPTJForSequenceClassification"),H1r=o(" (GPT-J model)"),U1r=l(),sM=a("li"),l2e=a("strong"),J1r=o("layoutlm"),Y1r=o(" \u2014 "),GW=a("a"),K1r=o("TFLayoutLMForSequenceClassification"),Z1r=o(" (LayoutLM model)"),ebr=l(),lM=a("li"),i2e=a("strong"),obr=o("longformer"),rbr=o(" \u2014 "),OW=a("a"),tbr=o("TFLongformerForSequenceClassification"),abr=o(" (Longformer model)"),nbr=l(),iM=a("li"),d2e=a("strong"),sbr=o("mobilebert"),lbr=o(" \u2014 "),VW=a("a"),ibr=o("TFMobileBertForSequenceClassification"),dbr=o(" (MobileBERT model)"),cbr=l(),dM=a("li"),c2e=a("strong"),fbr=o("mpnet"),mbr=o(" \u2014 "),XW=a("a"),gbr=o("TFMPNetForSequenceClassification"),hbr=o(" (MPNet model)"),pbr=l(),cM=a("li"),f2e=a("strong"),ubr=o("openai-gpt"),_br=o(" \u2014 "),zW=a("a"),bbr=o("TFOpenAIGPTForSequenceClassification"),vbr=o(" (OpenAI GPT model)"),Fbr=l(),fM=a("li"),m2e=a("strong"),Tbr=o("rembert"),Mbr=o(" \u2014 "),QW=a("a"),Ebr=o("TFRemBertForSequenceClassification"),Cbr=o(" (RemBERT model)"),wbr=l(),mM=a("li"),g2e=a("strong"),Abr=o("roberta"),ybr=o(" \u2014 "),WW=a("a"),Lbr=o("TFRobertaForSequenceClassification"),xbr=o(" (RoBERTa model)"),$br=l(),gM=a("li"),h2e=a("strong"),kbr=o("roformer"),Sbr=o(" \u2014 "),HW=a("a"),Rbr=o("TFRoFormerForSequenceClassification"),Bbr=o(" (RoFormer model)"),Pbr=l(),hM=a("li"),p2e=a("strong"),Ibr=o("tapas"),qbr=o(" \u2014 "),UW=a("a"),Nbr=o("TFTapasForSequenceClassification"),jbr=o(" (TAPAS model)"),Dbr=l(),pM=a("li"),u2e=a("strong"),Gbr=o("transfo-xl"),Obr=o(" \u2014 "),JW=a("a"),Vbr=o("TFTransfoXLForSequenceClassification"),Xbr=o(" (Transformer-XL model)"),zbr=l(),uM=a("li"),_2e=a("strong"),Qbr=o("xlm"),Wbr=o(" \u2014 "),YW=a("a"),Hbr=o("TFXLMForSequenceClassification"),Ubr=o(" (XLM model)"),Jbr=l(),_M=a("li"),b2e=a("strong"),Ybr=o("xlm-roberta"),Kbr=o(" \u2014 "),KW=a("a"),Zbr=o("TFXLMRobertaForSequenceClassification"),e2r=o(" (XLM-RoBERTa model)"),o2r=l(),bM=a("li"),v2e=a("strong"),r2r=o("xlnet"),t2r=o(" \u2014 "),ZW=a("a"),a2r=o("TFXLNetForSequenceClassification"),n2r=o(" (XLNet model)"),s2r=l(),F(vM.$$.fragment),nqe=l(),sc=a("h2"),FM=a("a"),F2e=a("span"),F(m8.$$.fragment),l2r=l(),T2e=a("span"),i2r=o("TFAutoModelForMultipleChoice"),sqe=l(),ar=a("div"),F(g8.$$.fragment),d2r=l(),lc=a("p"),c2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eH=a("a"),f2r=o("from_pretrained()"),m2r=o(" class method or the "),oH=a("a"),g2r=o("from_config()"),h2r=o(` class
method.`),p2r=l(),h8=a("p"),u2r=o("This class cannot be instantiated directly using "),M2e=a("code"),_2r=o("__init__()"),b2r=o(" (throws an error)."),v2r=l(),St=a("div"),F(p8.$$.fragment),F2r=l(),E2e=a("p"),T2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),M2r=l(),ic=a("p"),E2r=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),C2r=o("not"),w2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),A2r=o("from_pretrained()"),y2r=o(" to load the model weights."),L2r=l(),F(TM.$$.fragment),x2r=l(),Sr=a("div"),F(u8.$$.fragment),$2r=l(),w2e=a("p"),k2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),S2r=l(),nn=a("p"),R2r=o("The model class to instantiate is selected based on the "),A2e=a("code"),B2r=o("model_type"),P2r=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),I2r=o("pretrained_model_name_or_path"),q2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),N2r=o("pretrained_model_name_or_path"),j2r=o(":"),D2r=l(),pe=a("ul"),MM=a("li"),x2e=a("strong"),G2r=o("albert"),O2r=o(" \u2014 "),tH=a("a"),V2r=o("TFAlbertForMultipleChoice"),X2r=o(" (ALBERT model)"),z2r=l(),EM=a("li"),$2e=a("strong"),Q2r=o("bert"),W2r=o(" \u2014 "),aH=a("a"),H2r=o("TFBertForMultipleChoice"),U2r=o(" (BERT model)"),J2r=l(),CM=a("li"),k2e=a("strong"),Y2r=o("camembert"),K2r=o(" \u2014 "),nH=a("a"),Z2r=o("TFCamembertForMultipleChoice"),evr=o(" (CamemBERT model)"),ovr=l(),wM=a("li"),S2e=a("strong"),rvr=o("convbert"),tvr=o(" \u2014 "),sH=a("a"),avr=o("TFConvBertForMultipleChoice"),nvr=o(" (ConvBERT model)"),svr=l(),AM=a("li"),R2e=a("strong"),lvr=o("distilbert"),ivr=o(" \u2014 "),lH=a("a"),dvr=o("TFDistilBertForMultipleChoice"),cvr=o(" (DistilBERT model)"),fvr=l(),yM=a("li"),B2e=a("strong"),mvr=o("electra"),gvr=o(" \u2014 "),iH=a("a"),hvr=o("TFElectraForMultipleChoice"),pvr=o(" (ELECTRA model)"),uvr=l(),LM=a("li"),P2e=a("strong"),_vr=o("flaubert"),bvr=o(" \u2014 "),dH=a("a"),vvr=o("TFFlaubertForMultipleChoice"),Fvr=o(" (FlauBERT model)"),Tvr=l(),xM=a("li"),I2e=a("strong"),Mvr=o("funnel"),Evr=o(" \u2014 "),cH=a("a"),Cvr=o("TFFunnelForMultipleChoice"),wvr=o(" (Funnel Transformer model)"),Avr=l(),$M=a("li"),q2e=a("strong"),yvr=o("longformer"),Lvr=o(" \u2014 "),fH=a("a"),xvr=o("TFLongformerForMultipleChoice"),$vr=o(" (Longformer model)"),kvr=l(),kM=a("li"),N2e=a("strong"),Svr=o("mobilebert"),Rvr=o(" \u2014 "),mH=a("a"),Bvr=o("TFMobileBertForMultipleChoice"),Pvr=o(" (MobileBERT model)"),Ivr=l(),SM=a("li"),j2e=a("strong"),qvr=o("mpnet"),Nvr=o(" \u2014 "),gH=a("a"),jvr=o("TFMPNetForMultipleChoice"),Dvr=o(" (MPNet model)"),Gvr=l(),RM=a("li"),D2e=a("strong"),Ovr=o("rembert"),Vvr=o(" \u2014 "),hH=a("a"),Xvr=o("TFRemBertForMultipleChoice"),zvr=o(" (RemBERT model)"),Qvr=l(),BM=a("li"),G2e=a("strong"),Wvr=o("roberta"),Hvr=o(" \u2014 "),pH=a("a"),Uvr=o("TFRobertaForMultipleChoice"),Jvr=o(" (RoBERTa model)"),Yvr=l(),PM=a("li"),O2e=a("strong"),Kvr=o("roformer"),Zvr=o(" \u2014 "),uH=a("a"),eFr=o("TFRoFormerForMultipleChoice"),oFr=o(" (RoFormer model)"),rFr=l(),IM=a("li"),V2e=a("strong"),tFr=o("xlm"),aFr=o(" \u2014 "),_H=a("a"),nFr=o("TFXLMForMultipleChoice"),sFr=o(" (XLM model)"),lFr=l(),qM=a("li"),X2e=a("strong"),iFr=o("xlm-roberta"),dFr=o(" \u2014 "),bH=a("a"),cFr=o("TFXLMRobertaForMultipleChoice"),fFr=o(" (XLM-RoBERTa model)"),mFr=l(),NM=a("li"),z2e=a("strong"),gFr=o("xlnet"),hFr=o(" \u2014 "),vH=a("a"),pFr=o("TFXLNetForMultipleChoice"),uFr=o(" (XLNet model)"),_Fr=l(),F(jM.$$.fragment),lqe=l(),dc=a("h2"),DM=a("a"),Q2e=a("span"),F(_8.$$.fragment),bFr=l(),W2e=a("span"),vFr=o("TFAutoModelForNextSentencePrediction"),iqe=l(),nr=a("div"),F(b8.$$.fragment),FFr=l(),cc=a("p"),TFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FH=a("a"),MFr=o("from_pretrained()"),EFr=o(" class method or the "),TH=a("a"),CFr=o("from_config()"),wFr=o(` class
method.`),AFr=l(),v8=a("p"),yFr=o("This class cannot be instantiated directly using "),H2e=a("code"),LFr=o("__init__()"),xFr=o(" (throws an error)."),$Fr=l(),Rt=a("div"),F(F8.$$.fragment),kFr=l(),U2e=a("p"),SFr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),RFr=l(),fc=a("p"),BFr=o(`Note:
Loading a model from its configuration file does `),J2e=a("strong"),PFr=o("not"),IFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),qFr=o("from_pretrained()"),NFr=o(" to load the model weights."),jFr=l(),F(GM.$$.fragment),DFr=l(),Rr=a("div"),F(T8.$$.fragment),GFr=l(),Y2e=a("p"),OFr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VFr=l(),sn=a("p"),XFr=o("The model class to instantiate is selected based on the "),K2e=a("code"),zFr=o("model_type"),QFr=o(` property of the config object (either
passed as an argument or loaded from `),Z2e=a("code"),WFr=o("pretrained_model_name_or_path"),HFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),UFr=o("pretrained_model_name_or_path"),JFr=o(":"),YFr=l(),M8=a("ul"),OM=a("li"),ove=a("strong"),KFr=o("bert"),ZFr=o(" \u2014 "),EH=a("a"),e6r=o("TFBertForNextSentencePrediction"),o6r=o(" (BERT model)"),r6r=l(),VM=a("li"),rve=a("strong"),t6r=o("mobilebert"),a6r=o(" \u2014 "),CH=a("a"),n6r=o("TFMobileBertForNextSentencePrediction"),s6r=o(" (MobileBERT model)"),l6r=l(),F(XM.$$.fragment),dqe=l(),mc=a("h2"),zM=a("a"),tve=a("span"),F(E8.$$.fragment),i6r=l(),ave=a("span"),d6r=o("TFAutoModelForTableQuestionAnswering"),cqe=l(),sr=a("div"),F(C8.$$.fragment),c6r=l(),gc=a("p"),f6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),wH=a("a"),m6r=o("from_pretrained()"),g6r=o(" class method or the "),AH=a("a"),h6r=o("from_config()"),p6r=o(` class
method.`),u6r=l(),w8=a("p"),_6r=o("This class cannot be instantiated directly using "),nve=a("code"),b6r=o("__init__()"),v6r=o(" (throws an error)."),F6r=l(),Bt=a("div"),F(A8.$$.fragment),T6r=l(),sve=a("p"),M6r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),E6r=l(),hc=a("p"),C6r=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),w6r=o("not"),A6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),y6r=o("from_pretrained()"),L6r=o(" to load the model weights."),x6r=l(),F(QM.$$.fragment),$6r=l(),Br=a("div"),F(y8.$$.fragment),k6r=l(),ive=a("p"),S6r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),R6r=l(),ln=a("p"),B6r=o("The model class to instantiate is selected based on the "),dve=a("code"),P6r=o("model_type"),I6r=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),q6r=o("pretrained_model_name_or_path"),N6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),j6r=o("pretrained_model_name_or_path"),D6r=o(":"),G6r=l(),mve=a("ul"),WM=a("li"),gve=a("strong"),O6r=o("tapas"),V6r=o(" \u2014 "),LH=a("a"),X6r=o("TFTapasForQuestionAnswering"),z6r=o(" (TAPAS model)"),Q6r=l(),F(HM.$$.fragment),fqe=l(),pc=a("h2"),UM=a("a"),hve=a("span"),F(L8.$$.fragment),W6r=l(),pve=a("span"),H6r=o("TFAutoModelForTokenClassification"),mqe=l(),lr=a("div"),F(x8.$$.fragment),U6r=l(),uc=a("p"),J6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xH=a("a"),Y6r=o("from_pretrained()"),K6r=o(" class method or the "),$H=a("a"),Z6r=o("from_config()"),eTr=o(` class
method.`),oTr=l(),$8=a("p"),rTr=o("This class cannot be instantiated directly using "),uve=a("code"),tTr=o("__init__()"),aTr=o(" (throws an error)."),nTr=l(),Pt=a("div"),F(k8.$$.fragment),sTr=l(),_ve=a("p"),lTr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iTr=l(),_c=a("p"),dTr=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),cTr=o("not"),fTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),mTr=o("from_pretrained()"),gTr=o(" to load the model weights."),hTr=l(),F(JM.$$.fragment),pTr=l(),Pr=a("div"),F(S8.$$.fragment),uTr=l(),vve=a("p"),_Tr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bTr=l(),dn=a("p"),vTr=o("The model class to instantiate is selected based on the "),Fve=a("code"),FTr=o("model_type"),TTr=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),MTr=o("pretrained_model_name_or_path"),ETr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),CTr=o("pretrained_model_name_or_path"),wTr=o(":"),ATr=l(),de=a("ul"),YM=a("li"),Eve=a("strong"),yTr=o("albert"),LTr=o(" \u2014 "),SH=a("a"),xTr=o("TFAlbertForTokenClassification"),$Tr=o(" (ALBERT model)"),kTr=l(),KM=a("li"),Cve=a("strong"),STr=o("bert"),RTr=o(" \u2014 "),RH=a("a"),BTr=o("TFBertForTokenClassification"),PTr=o(" (BERT model)"),ITr=l(),ZM=a("li"),wve=a("strong"),qTr=o("camembert"),NTr=o(" \u2014 "),BH=a("a"),jTr=o("TFCamembertForTokenClassification"),DTr=o(" (CamemBERT model)"),GTr=l(),e4=a("li"),Ave=a("strong"),OTr=o("convbert"),VTr=o(" \u2014 "),PH=a("a"),XTr=o("TFConvBertForTokenClassification"),zTr=o(" (ConvBERT model)"),QTr=l(),o4=a("li"),yve=a("strong"),WTr=o("deberta"),HTr=o(" \u2014 "),IH=a("a"),UTr=o("TFDebertaForTokenClassification"),JTr=o(" (DeBERTa model)"),YTr=l(),r4=a("li"),Lve=a("strong"),KTr=o("deberta-v2"),ZTr=o(" \u2014 "),qH=a("a"),e7r=o("TFDebertaV2ForTokenClassification"),o7r=o(" (DeBERTa-v2 model)"),r7r=l(),t4=a("li"),xve=a("strong"),t7r=o("distilbert"),a7r=o(" \u2014 "),NH=a("a"),n7r=o("TFDistilBertForTokenClassification"),s7r=o(" (DistilBERT model)"),l7r=l(),a4=a("li"),$ve=a("strong"),i7r=o("electra"),d7r=o(" \u2014 "),jH=a("a"),c7r=o("TFElectraForTokenClassification"),f7r=o(" (ELECTRA model)"),m7r=l(),n4=a("li"),kve=a("strong"),g7r=o("flaubert"),h7r=o(" \u2014 "),DH=a("a"),p7r=o("TFFlaubertForTokenClassification"),u7r=o(" (FlauBERT model)"),_7r=l(),s4=a("li"),Sve=a("strong"),b7r=o("funnel"),v7r=o(" \u2014 "),GH=a("a"),F7r=o("TFFunnelForTokenClassification"),T7r=o(" (Funnel Transformer model)"),M7r=l(),l4=a("li"),Rve=a("strong"),E7r=o("layoutlm"),C7r=o(" \u2014 "),OH=a("a"),w7r=o("TFLayoutLMForTokenClassification"),A7r=o(" (LayoutLM model)"),y7r=l(),i4=a("li"),Bve=a("strong"),L7r=o("longformer"),x7r=o(" \u2014 "),VH=a("a"),$7r=o("TFLongformerForTokenClassification"),k7r=o(" (Longformer model)"),S7r=l(),d4=a("li"),Pve=a("strong"),R7r=o("mobilebert"),B7r=o(" \u2014 "),XH=a("a"),P7r=o("TFMobileBertForTokenClassification"),I7r=o(" (MobileBERT model)"),q7r=l(),c4=a("li"),Ive=a("strong"),N7r=o("mpnet"),j7r=o(" \u2014 "),zH=a("a"),D7r=o("TFMPNetForTokenClassification"),G7r=o(" (MPNet model)"),O7r=l(),f4=a("li"),qve=a("strong"),V7r=o("rembert"),X7r=o(" \u2014 "),QH=a("a"),z7r=o("TFRemBertForTokenClassification"),Q7r=o(" (RemBERT model)"),W7r=l(),m4=a("li"),Nve=a("strong"),H7r=o("roberta"),U7r=o(" \u2014 "),WH=a("a"),J7r=o("TFRobertaForTokenClassification"),Y7r=o(" (RoBERTa model)"),K7r=l(),g4=a("li"),jve=a("strong"),Z7r=o("roformer"),eMr=o(" \u2014 "),HH=a("a"),oMr=o("TFRoFormerForTokenClassification"),rMr=o(" (RoFormer model)"),tMr=l(),h4=a("li"),Dve=a("strong"),aMr=o("xlm"),nMr=o(" \u2014 "),UH=a("a"),sMr=o("TFXLMForTokenClassification"),lMr=o(" (XLM model)"),iMr=l(),p4=a("li"),Gve=a("strong"),dMr=o("xlm-roberta"),cMr=o(" \u2014 "),JH=a("a"),fMr=o("TFXLMRobertaForTokenClassification"),mMr=o(" (XLM-RoBERTa model)"),gMr=l(),u4=a("li"),Ove=a("strong"),hMr=o("xlnet"),pMr=o(" \u2014 "),YH=a("a"),uMr=o("TFXLNetForTokenClassification"),_Mr=o(" (XLNet model)"),bMr=l(),F(_4.$$.fragment),gqe=l(),bc=a("h2"),b4=a("a"),Vve=a("span"),F(R8.$$.fragment),vMr=l(),Xve=a("span"),FMr=o("TFAutoModelForQuestionAnswering"),hqe=l(),ir=a("div"),F(B8.$$.fragment),TMr=l(),vc=a("p"),MMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KH=a("a"),EMr=o("from_pretrained()"),CMr=o(" class method or the "),ZH=a("a"),wMr=o("from_config()"),AMr=o(` class
method.`),yMr=l(),P8=a("p"),LMr=o("This class cannot be instantiated directly using "),zve=a("code"),xMr=o("__init__()"),$Mr=o(" (throws an error)."),kMr=l(),It=a("div"),F(I8.$$.fragment),SMr=l(),Qve=a("p"),RMr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),BMr=l(),Fc=a("p"),PMr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),IMr=o("not"),qMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=a("a"),NMr=o("from_pretrained()"),jMr=o(" to load the model weights."),DMr=l(),F(v4.$$.fragment),GMr=l(),Ir=a("div"),F(q8.$$.fragment),OMr=l(),Hve=a("p"),VMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XMr=l(),cn=a("p"),zMr=o("The model class to instantiate is selected based on the "),Uve=a("code"),QMr=o("model_type"),WMr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),HMr=o("pretrained_model_name_or_path"),UMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),JMr=o("pretrained_model_name_or_path"),YMr=o(":"),KMr=l(),ce=a("ul"),F4=a("li"),Kve=a("strong"),ZMr=o("albert"),e4r=o(" \u2014 "),oU=a("a"),o4r=o("TFAlbertForQuestionAnswering"),r4r=o(" (ALBERT model)"),t4r=l(),T4=a("li"),Zve=a("strong"),a4r=o("bert"),n4r=o(" \u2014 "),rU=a("a"),s4r=o("TFBertForQuestionAnswering"),l4r=o(" (BERT model)"),i4r=l(),M4=a("li"),eFe=a("strong"),d4r=o("camembert"),c4r=o(" \u2014 "),tU=a("a"),f4r=o("TFCamembertForQuestionAnswering"),m4r=o(" (CamemBERT model)"),g4r=l(),E4=a("li"),oFe=a("strong"),h4r=o("convbert"),p4r=o(" \u2014 "),aU=a("a"),u4r=o("TFConvBertForQuestionAnswering"),_4r=o(" (ConvBERT model)"),b4r=l(),C4=a("li"),rFe=a("strong"),v4r=o("deberta"),F4r=o(" \u2014 "),nU=a("a"),T4r=o("TFDebertaForQuestionAnswering"),M4r=o(" (DeBERTa model)"),E4r=l(),w4=a("li"),tFe=a("strong"),C4r=o("deberta-v2"),w4r=o(" \u2014 "),sU=a("a"),A4r=o("TFDebertaV2ForQuestionAnswering"),y4r=o(" (DeBERTa-v2 model)"),L4r=l(),A4=a("li"),aFe=a("strong"),x4r=o("distilbert"),$4r=o(" \u2014 "),lU=a("a"),k4r=o("TFDistilBertForQuestionAnswering"),S4r=o(" (DistilBERT model)"),R4r=l(),y4=a("li"),nFe=a("strong"),B4r=o("electra"),P4r=o(" \u2014 "),iU=a("a"),I4r=o("TFElectraForQuestionAnswering"),q4r=o(" (ELECTRA model)"),N4r=l(),L4=a("li"),sFe=a("strong"),j4r=o("flaubert"),D4r=o(" \u2014 "),dU=a("a"),G4r=o("TFFlaubertForQuestionAnsweringSimple"),O4r=o(" (FlauBERT model)"),V4r=l(),x4=a("li"),lFe=a("strong"),X4r=o("funnel"),z4r=o(" \u2014 "),cU=a("a"),Q4r=o("TFFunnelForQuestionAnswering"),W4r=o(" (Funnel Transformer model)"),H4r=l(),$4=a("li"),iFe=a("strong"),U4r=o("gptj"),J4r=o(" \u2014 "),fU=a("a"),Y4r=o("TFGPTJForQuestionAnswering"),K4r=o(" (GPT-J model)"),Z4r=l(),k4=a("li"),dFe=a("strong"),eEr=o("longformer"),oEr=o(" \u2014 "),mU=a("a"),rEr=o("TFLongformerForQuestionAnswering"),tEr=o(" (Longformer model)"),aEr=l(),S4=a("li"),cFe=a("strong"),nEr=o("mobilebert"),sEr=o(" \u2014 "),gU=a("a"),lEr=o("TFMobileBertForQuestionAnswering"),iEr=o(" (MobileBERT model)"),dEr=l(),R4=a("li"),fFe=a("strong"),cEr=o("mpnet"),fEr=o(" \u2014 "),hU=a("a"),mEr=o("TFMPNetForQuestionAnswering"),gEr=o(" (MPNet model)"),hEr=l(),B4=a("li"),mFe=a("strong"),pEr=o("rembert"),uEr=o(" \u2014 "),pU=a("a"),_Er=o("TFRemBertForQuestionAnswering"),bEr=o(" (RemBERT model)"),vEr=l(),P4=a("li"),gFe=a("strong"),FEr=o("roberta"),TEr=o(" \u2014 "),uU=a("a"),MEr=o("TFRobertaForQuestionAnswering"),EEr=o(" (RoBERTa model)"),CEr=l(),I4=a("li"),hFe=a("strong"),wEr=o("roformer"),AEr=o(" \u2014 "),_U=a("a"),yEr=o("TFRoFormerForQuestionAnswering"),LEr=o(" (RoFormer model)"),xEr=l(),q4=a("li"),pFe=a("strong"),$Er=o("xlm"),kEr=o(" \u2014 "),bU=a("a"),SEr=o("TFXLMForQuestionAnsweringSimple"),REr=o(" (XLM model)"),BEr=l(),N4=a("li"),uFe=a("strong"),PEr=o("xlm-roberta"),IEr=o(" \u2014 "),vU=a("a"),qEr=o("TFXLMRobertaForQuestionAnswering"),NEr=o(" (XLM-RoBERTa model)"),jEr=l(),j4=a("li"),_Fe=a("strong"),DEr=o("xlnet"),GEr=o(" \u2014 "),FU=a("a"),OEr=o("TFXLNetForQuestionAnsweringSimple"),VEr=o(" (XLNet model)"),XEr=l(),F(D4.$$.fragment),pqe=l(),Tc=a("h2"),G4=a("a"),bFe=a("span"),F(N8.$$.fragment),zEr=l(),vFe=a("span"),QEr=o("TFAutoModelForVision2Seq"),uqe=l(),dr=a("div"),F(j8.$$.fragment),WEr=l(),Mc=a("p"),HEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),TU=a("a"),UEr=o("from_pretrained()"),JEr=o(" class method or the "),MU=a("a"),YEr=o("from_config()"),KEr=o(` class
method.`),ZEr=l(),D8=a("p"),e5r=o("This class cannot be instantiated directly using "),FFe=a("code"),o5r=o("__init__()"),r5r=o(" (throws an error)."),t5r=l(),qt=a("div"),F(G8.$$.fragment),a5r=l(),TFe=a("p"),n5r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),s5r=l(),Ec=a("p"),l5r=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),i5r=o("not"),d5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),c5r=o("from_pretrained()"),f5r=o(" to load the model weights."),m5r=l(),F(O4.$$.fragment),g5r=l(),qr=a("div"),F(O8.$$.fragment),h5r=l(),EFe=a("p"),p5r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),u5r=l(),fn=a("p"),_5r=o("The model class to instantiate is selected based on the "),CFe=a("code"),b5r=o("model_type"),v5r=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),F5r=o("pretrained_model_name_or_path"),T5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(":"),C5r=l(),yFe=a("ul"),V4=a("li"),LFe=a("strong"),w5r=o("vision-encoder-decoder"),A5r=o(" \u2014 "),CU=a("a"),y5r=o("TFVisionEncoderDecoderModel"),L5r=o(" (Vision Encoder decoder model)"),x5r=l(),F(X4.$$.fragment),_qe=l(),Cc=a("h2"),z4=a("a"),xFe=a("span"),F(V8.$$.fragment),$5r=l(),$Fe=a("span"),k5r=o("TFAutoModelForSpeechSeq2Seq"),bqe=l(),cr=a("div"),F(X8.$$.fragment),S5r=l(),wc=a("p"),R5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wU=a("a"),B5r=o("from_pretrained()"),P5r=o(" class method or the "),AU=a("a"),I5r=o("from_config()"),q5r=o(` class
method.`),N5r=l(),z8=a("p"),j5r=o("This class cannot be instantiated directly using "),kFe=a("code"),D5r=o("__init__()"),G5r=o(" (throws an error)."),O5r=l(),Nt=a("div"),F(Q8.$$.fragment),V5r=l(),SFe=a("p"),X5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),z5r=l(),Ac=a("p"),Q5r=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),W5r=o("not"),H5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),U5r=o("from_pretrained()"),J5r=o(" to load the model weights."),Y5r=l(),F(Q4.$$.fragment),K5r=l(),Nr=a("div"),F(W8.$$.fragment),Z5r=l(),BFe=a("p"),eCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oCr=l(),mn=a("p"),rCr=o("The model class to instantiate is selected based on the "),PFe=a("code"),tCr=o("model_type"),aCr=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),nCr=o("pretrained_model_name_or_path"),sCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),lCr=o("pretrained_model_name_or_path"),iCr=o(":"),dCr=l(),NFe=a("ul"),W4=a("li"),jFe=a("strong"),cCr=o("speech_to_text"),fCr=o(" \u2014 "),LU=a("a"),mCr=o("TFSpeech2TextForConditionalGeneration"),gCr=o(" (Speech2Text model)"),hCr=l(),F(H4.$$.fragment),vqe=l(),yc=a("h2"),U4=a("a"),DFe=a("span"),F(H8.$$.fragment),pCr=l(),GFe=a("span"),uCr=o("FlaxAutoModel"),Fqe=l(),fr=a("div"),F(U8.$$.fragment),_Cr=l(),Lc=a("p"),bCr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xU=a("a"),vCr=o("from_pretrained()"),FCr=o(" class method or the "),$U=a("a"),TCr=o("from_config()"),MCr=o(` class
method.`),ECr=l(),J8=a("p"),CCr=o("This class cannot be instantiated directly using "),OFe=a("code"),wCr=o("__init__()"),ACr=o(" (throws an error)."),yCr=l(),jt=a("div"),F(Y8.$$.fragment),LCr=l(),VFe=a("p"),xCr=o("Instantiates one of the base model classes of the library from a configuration."),$Cr=l(),xc=a("p"),kCr=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),SCr=o("not"),RCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),BCr=o("from_pretrained()"),PCr=o(" to load the model weights."),ICr=l(),F(J4.$$.fragment),qCr=l(),jr=a("div"),F(K8.$$.fragment),NCr=l(),zFe=a("p"),jCr=o("Instantiate one of the base model classes of the library from a pretrained model."),DCr=l(),gn=a("p"),GCr=o("The model class to instantiate is selected based on the "),QFe=a("code"),OCr=o("model_type"),VCr=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),XCr=o("pretrained_model_name_or_path"),zCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),QCr=o("pretrained_model_name_or_path"),WCr=o(":"),HCr=l(),re=a("ul"),Y4=a("li"),UFe=a("strong"),UCr=o("albert"),JCr=o(" \u2014 "),SU=a("a"),YCr=o("FlaxAlbertModel"),KCr=o(" (ALBERT model)"),ZCr=l(),K4=a("li"),JFe=a("strong"),e3r=o("bart"),o3r=o(" \u2014 "),RU=a("a"),r3r=o("FlaxBartModel"),t3r=o(" (BART model)"),a3r=l(),Z4=a("li"),YFe=a("strong"),n3r=o("beit"),s3r=o(" \u2014 "),BU=a("a"),l3r=o("FlaxBeitModel"),i3r=o(" (BEiT model)"),d3r=l(),eE=a("li"),KFe=a("strong"),c3r=o("bert"),f3r=o(" \u2014 "),PU=a("a"),m3r=o("FlaxBertModel"),g3r=o(" (BERT model)"),h3r=l(),oE=a("li"),ZFe=a("strong"),p3r=o("big_bird"),u3r=o(" \u2014 "),IU=a("a"),_3r=o("FlaxBigBirdModel"),b3r=o(" (BigBird model)"),v3r=l(),rE=a("li"),e6e=a("strong"),F3r=o("blenderbot"),T3r=o(" \u2014 "),qU=a("a"),M3r=o("FlaxBlenderbotModel"),E3r=o(" (Blenderbot model)"),C3r=l(),tE=a("li"),o6e=a("strong"),w3r=o("blenderbot-small"),A3r=o(" \u2014 "),NU=a("a"),y3r=o("FlaxBlenderbotSmallModel"),L3r=o(" (BlenderbotSmall model)"),x3r=l(),aE=a("li"),r6e=a("strong"),$3r=o("clip"),k3r=o(" \u2014 "),jU=a("a"),S3r=o("FlaxCLIPModel"),R3r=o(" (CLIP model)"),B3r=l(),nE=a("li"),t6e=a("strong"),P3r=o("distilbert"),I3r=o(" \u2014 "),DU=a("a"),q3r=o("FlaxDistilBertModel"),N3r=o(" (DistilBERT model)"),j3r=l(),sE=a("li"),a6e=a("strong"),D3r=o("electra"),G3r=o(" \u2014 "),GU=a("a"),O3r=o("FlaxElectraModel"),V3r=o(" (ELECTRA model)"),X3r=l(),lE=a("li"),n6e=a("strong"),z3r=o("gpt2"),Q3r=o(" \u2014 "),OU=a("a"),W3r=o("FlaxGPT2Model"),H3r=o(" (OpenAI GPT-2 model)"),U3r=l(),iE=a("li"),s6e=a("strong"),J3r=o("gpt_neo"),Y3r=o(" \u2014 "),VU=a("a"),K3r=o("FlaxGPTNeoModel"),Z3r=o(" (GPT Neo model)"),ewr=l(),dE=a("li"),l6e=a("strong"),owr=o("gptj"),rwr=o(" \u2014 "),XU=a("a"),twr=o("FlaxGPTJModel"),awr=o(" (GPT-J model)"),nwr=l(),cE=a("li"),i6e=a("strong"),swr=o("marian"),lwr=o(" \u2014 "),zU=a("a"),iwr=o("FlaxMarianModel"),dwr=o(" (Marian model)"),cwr=l(),fE=a("li"),d6e=a("strong"),fwr=o("mbart"),mwr=o(" \u2014 "),QU=a("a"),gwr=o("FlaxMBartModel"),hwr=o(" (mBART model)"),pwr=l(),mE=a("li"),c6e=a("strong"),uwr=o("mt5"),_wr=o(" \u2014 "),WU=a("a"),bwr=o("FlaxMT5Model"),vwr=o(" (mT5 model)"),Fwr=l(),gE=a("li"),f6e=a("strong"),Twr=o("pegasus"),Mwr=o(" \u2014 "),HU=a("a"),Ewr=o("FlaxPegasusModel"),Cwr=o(" (Pegasus model)"),wwr=l(),hE=a("li"),m6e=a("strong"),Awr=o("roberta"),ywr=o(" \u2014 "),UU=a("a"),Lwr=o("FlaxRobertaModel"),xwr=o(" (RoBERTa model)"),$wr=l(),pE=a("li"),g6e=a("strong"),kwr=o("roformer"),Swr=o(" \u2014 "),JU=a("a"),Rwr=o("FlaxRoFormerModel"),Bwr=o(" (RoFormer model)"),Pwr=l(),uE=a("li"),h6e=a("strong"),Iwr=o("t5"),qwr=o(" \u2014 "),YU=a("a"),Nwr=o("FlaxT5Model"),jwr=o(" (T5 model)"),Dwr=l(),_E=a("li"),p6e=a("strong"),Gwr=o("vision-text-dual-encoder"),Owr=o(" \u2014 "),KU=a("a"),Vwr=o("FlaxVisionTextDualEncoderModel"),Xwr=o(" (VisionTextDualEncoder model)"),zwr=l(),bE=a("li"),u6e=a("strong"),Qwr=o("vit"),Wwr=o(" \u2014 "),ZU=a("a"),Hwr=o("FlaxViTModel"),Uwr=o(" (ViT model)"),Jwr=l(),vE=a("li"),_6e=a("strong"),Ywr=o("wav2vec2"),Kwr=o(" \u2014 "),eJ=a("a"),Zwr=o("FlaxWav2Vec2Model"),eAr=o(" (Wav2Vec2 model)"),oAr=l(),FE=a("li"),b6e=a("strong"),rAr=o("xglm"),tAr=o(" \u2014 "),oJ=a("a"),aAr=o("FlaxXGLMModel"),nAr=o(" (XGLM model)"),sAr=l(),TE=a("li"),v6e=a("strong"),lAr=o("xlm-roberta"),iAr=o(" \u2014 "),rJ=a("a"),dAr=o("FlaxXLMRobertaModel"),cAr=o(" (XLM-RoBERTa model)"),fAr=l(),F(ME.$$.fragment),Tqe=l(),$c=a("h2"),EE=a("a"),F6e=a("span"),F(Z8.$$.fragment),mAr=l(),T6e=a("span"),gAr=o("FlaxAutoModelForCausalLM"),Mqe=l(),mr=a("div"),F(ex.$$.fragment),hAr=l(),kc=a("p"),pAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tJ=a("a"),uAr=o("from_pretrained()"),_Ar=o(" class method or the "),aJ=a("a"),bAr=o("from_config()"),vAr=o(` class
method.`),FAr=l(),ox=a("p"),TAr=o("This class cannot be instantiated directly using "),M6e=a("code"),MAr=o("__init__()"),EAr=o(" (throws an error)."),CAr=l(),Dt=a("div"),F(rx.$$.fragment),wAr=l(),E6e=a("p"),AAr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yAr=l(),Sc=a("p"),LAr=o(`Note:
Loading a model from its configuration file does `),C6e=a("strong"),xAr=o("not"),$Ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),kAr=o("from_pretrained()"),SAr=o(" to load the model weights."),RAr=l(),F(CE.$$.fragment),BAr=l(),Dr=a("div"),F(tx.$$.fragment),PAr=l(),w6e=a("p"),IAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qAr=l(),hn=a("p"),NAr=o("The model class to instantiate is selected based on the "),A6e=a("code"),jAr=o("model_type"),DAr=o(` property of the config object (either
passed as an argument or loaded from `),y6e=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=a("code"),VAr=o("pretrained_model_name_or_path"),XAr=o(":"),zAr=l(),ke=a("ul"),wE=a("li"),x6e=a("strong"),QAr=o("bart"),WAr=o(" \u2014 "),sJ=a("a"),HAr=o("FlaxBartForCausalLM"),UAr=o(" (BART model)"),JAr=l(),AE=a("li"),$6e=a("strong"),YAr=o("bert"),KAr=o(" \u2014 "),lJ=a("a"),ZAr=o("FlaxBertForCausalLM"),eyr=o(" (BERT model)"),oyr=l(),yE=a("li"),k6e=a("strong"),ryr=o("big_bird"),tyr=o(" \u2014 "),iJ=a("a"),ayr=o("FlaxBigBirdForCausalLM"),nyr=o(" (BigBird model)"),syr=l(),LE=a("li"),S6e=a("strong"),lyr=o("electra"),iyr=o(" \u2014 "),dJ=a("a"),dyr=o("FlaxElectraForCausalLM"),cyr=o(" (ELECTRA model)"),fyr=l(),xE=a("li"),R6e=a("strong"),myr=o("gpt2"),gyr=o(" \u2014 "),cJ=a("a"),hyr=o("FlaxGPT2LMHeadModel"),pyr=o(" (OpenAI GPT-2 model)"),uyr=l(),$E=a("li"),B6e=a("strong"),_yr=o("gpt_neo"),byr=o(" \u2014 "),fJ=a("a"),vyr=o("FlaxGPTNeoForCausalLM"),Fyr=o(" (GPT Neo model)"),Tyr=l(),kE=a("li"),P6e=a("strong"),Myr=o("gptj"),Eyr=o(" \u2014 "),mJ=a("a"),Cyr=o("FlaxGPTJForCausalLM"),wyr=o(" (GPT-J model)"),Ayr=l(),SE=a("li"),I6e=a("strong"),yyr=o("roberta"),Lyr=o(" \u2014 "),gJ=a("a"),xyr=o("FlaxRobertaForCausalLM"),$yr=o(" (RoBERTa model)"),kyr=l(),RE=a("li"),q6e=a("strong"),Syr=o("xglm"),Ryr=o(" \u2014 "),hJ=a("a"),Byr=o("FlaxXGLMForCausalLM"),Pyr=o(" (XGLM model)"),Iyr=l(),F(BE.$$.fragment),Eqe=l(),Rc=a("h2"),PE=a("a"),N6e=a("span"),F(ax.$$.fragment),qyr=l(),j6e=a("span"),Nyr=o("FlaxAutoModelForPreTraining"),Cqe=l(),gr=a("div"),F(nx.$$.fragment),jyr=l(),Bc=a("p"),Dyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pJ=a("a"),Gyr=o("from_pretrained()"),Oyr=o(" class method or the "),uJ=a("a"),Vyr=o("from_config()"),Xyr=o(` class
method.`),zyr=l(),sx=a("p"),Qyr=o("This class cannot be instantiated directly using "),D6e=a("code"),Wyr=o("__init__()"),Hyr=o(" (throws an error)."),Uyr=l(),Gt=a("div"),F(lx.$$.fragment),Jyr=l(),G6e=a("p"),Yyr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Kyr=l(),Pc=a("p"),Zyr=o(`Note:
Loading a model from its configuration file does `),O6e=a("strong"),eLr=o("not"),oLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),rLr=o("from_pretrained()"),tLr=o(" to load the model weights."),aLr=l(),F(IE.$$.fragment),nLr=l(),Gr=a("div"),F(ix.$$.fragment),sLr=l(),V6e=a("p"),lLr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),iLr=l(),pn=a("p"),dLr=o("The model class to instantiate is selected based on the "),X6e=a("code"),cLr=o("model_type"),fLr=o(` property of the config object (either
passed as an argument or loaded from `),z6e=a("code"),mLr=o("pretrained_model_name_or_path"),gLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=a("code"),hLr=o("pretrained_model_name_or_path"),pLr=o(":"),uLr=l(),Me=a("ul"),qE=a("li"),W6e=a("strong"),_Lr=o("albert"),bLr=o(" \u2014 "),bJ=a("a"),vLr=o("FlaxAlbertForPreTraining"),FLr=o(" (ALBERT model)"),TLr=l(),NE=a("li"),H6e=a("strong"),MLr=o("bart"),ELr=o(" \u2014 "),vJ=a("a"),CLr=o("FlaxBartForConditionalGeneration"),wLr=o(" (BART model)"),ALr=l(),jE=a("li"),U6e=a("strong"),yLr=o("bert"),LLr=o(" \u2014 "),FJ=a("a"),xLr=o("FlaxBertForPreTraining"),$Lr=o(" (BERT model)"),kLr=l(),DE=a("li"),J6e=a("strong"),SLr=o("big_bird"),RLr=o(" \u2014 "),TJ=a("a"),BLr=o("FlaxBigBirdForPreTraining"),PLr=o(" (BigBird model)"),ILr=l(),GE=a("li"),Y6e=a("strong"),qLr=o("electra"),NLr=o(" \u2014 "),MJ=a("a"),jLr=o("FlaxElectraForPreTraining"),DLr=o(" (ELECTRA model)"),GLr=l(),OE=a("li"),K6e=a("strong"),OLr=o("mbart"),VLr=o(" \u2014 "),EJ=a("a"),XLr=o("FlaxMBartForConditionalGeneration"),zLr=o(" (mBART model)"),QLr=l(),VE=a("li"),Z6e=a("strong"),WLr=o("mt5"),HLr=o(" \u2014 "),CJ=a("a"),ULr=o("FlaxMT5ForConditionalGeneration"),JLr=o(" (mT5 model)"),YLr=l(),XE=a("li"),eTe=a("strong"),KLr=o("roberta"),ZLr=o(" \u2014 "),wJ=a("a"),e8r=o("FlaxRobertaForMaskedLM"),o8r=o(" (RoBERTa model)"),r8r=l(),zE=a("li"),oTe=a("strong"),t8r=o("roformer"),a8r=o(" \u2014 "),AJ=a("a"),n8r=o("FlaxRoFormerForMaskedLM"),s8r=o(" (RoFormer model)"),l8r=l(),QE=a("li"),rTe=a("strong"),i8r=o("t5"),d8r=o(" \u2014 "),yJ=a("a"),c8r=o("FlaxT5ForConditionalGeneration"),f8r=o(" (T5 model)"),m8r=l(),WE=a("li"),tTe=a("strong"),g8r=o("wav2vec2"),h8r=o(" \u2014 "),LJ=a("a"),p8r=o("FlaxWav2Vec2ForPreTraining"),u8r=o(" (Wav2Vec2 model)"),_8r=l(),HE=a("li"),aTe=a("strong"),b8r=o("xlm-roberta"),v8r=o(" \u2014 "),xJ=a("a"),F8r=o("FlaxXLMRobertaForMaskedLM"),T8r=o(" (XLM-RoBERTa model)"),M8r=l(),F(UE.$$.fragment),wqe=l(),Ic=a("h2"),JE=a("a"),nTe=a("span"),F(dx.$$.fragment),E8r=l(),sTe=a("span"),C8r=o("FlaxAutoModelForMaskedLM"),Aqe=l(),hr=a("div"),F(cx.$$.fragment),w8r=l(),qc=a("p"),A8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$J=a("a"),y8r=o("from_pretrained()"),L8r=o(" class method or the "),kJ=a("a"),x8r=o("from_config()"),$8r=o(` class
method.`),k8r=l(),fx=a("p"),S8r=o("This class cannot be instantiated directly using "),lTe=a("code"),R8r=o("__init__()"),B8r=o(" (throws an error)."),P8r=l(),Ot=a("div"),F(mx.$$.fragment),I8r=l(),iTe=a("p"),q8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),N8r=l(),Nc=a("p"),j8r=o(`Note:
Loading a model from its configuration file does `),dTe=a("strong"),D8r=o("not"),G8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=a("a"),O8r=o("from_pretrained()"),V8r=o(" to load the model weights."),X8r=l(),F(YE.$$.fragment),z8r=l(),Or=a("div"),F(gx.$$.fragment),Q8r=l(),cTe=a("p"),W8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),H8r=l(),un=a("p"),U8r=o("The model class to instantiate is selected based on the "),fTe=a("code"),J8r=o("model_type"),Y8r=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),K8r=o("pretrained_model_name_or_path"),Z8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=a("code"),exr=o("pretrained_model_name_or_path"),oxr=o(":"),rxr=l(),Le=a("ul"),KE=a("li"),hTe=a("strong"),txr=o("albert"),axr=o(" \u2014 "),RJ=a("a"),nxr=o("FlaxAlbertForMaskedLM"),sxr=o(" (ALBERT model)"),lxr=l(),ZE=a("li"),pTe=a("strong"),ixr=o("bart"),dxr=o(" \u2014 "),BJ=a("a"),cxr=o("FlaxBartForConditionalGeneration"),fxr=o(" (BART model)"),mxr=l(),e5=a("li"),uTe=a("strong"),gxr=o("bert"),hxr=o(" \u2014 "),PJ=a("a"),pxr=o("FlaxBertForMaskedLM"),uxr=o(" (BERT model)"),_xr=l(),o5=a("li"),_Te=a("strong"),bxr=o("big_bird"),vxr=o(" \u2014 "),IJ=a("a"),Fxr=o("FlaxBigBirdForMaskedLM"),Txr=o(" (BigBird model)"),Mxr=l(),r5=a("li"),bTe=a("strong"),Exr=o("distilbert"),Cxr=o(" \u2014 "),qJ=a("a"),wxr=o("FlaxDistilBertForMaskedLM"),Axr=o(" (DistilBERT model)"),yxr=l(),t5=a("li"),vTe=a("strong"),Lxr=o("electra"),xxr=o(" \u2014 "),NJ=a("a"),$xr=o("FlaxElectraForMaskedLM"),kxr=o(" (ELECTRA model)"),Sxr=l(),a5=a("li"),FTe=a("strong"),Rxr=o("mbart"),Bxr=o(" \u2014 "),jJ=a("a"),Pxr=o("FlaxMBartForConditionalGeneration"),Ixr=o(" (mBART model)"),qxr=l(),n5=a("li"),TTe=a("strong"),Nxr=o("roberta"),jxr=o(" \u2014 "),DJ=a("a"),Dxr=o("FlaxRobertaForMaskedLM"),Gxr=o(" (RoBERTa model)"),Oxr=l(),s5=a("li"),MTe=a("strong"),Vxr=o("roformer"),Xxr=o(" \u2014 "),GJ=a("a"),zxr=o("FlaxRoFormerForMaskedLM"),Qxr=o(" (RoFormer model)"),Wxr=l(),l5=a("li"),ETe=a("strong"),Hxr=o("xlm-roberta"),Uxr=o(" \u2014 "),OJ=a("a"),Jxr=o("FlaxXLMRobertaForMaskedLM"),Yxr=o(" (XLM-RoBERTa model)"),Kxr=l(),F(i5.$$.fragment),yqe=l(),jc=a("h2"),d5=a("a"),CTe=a("span"),F(hx.$$.fragment),Zxr=l(),wTe=a("span"),e9r=o("FlaxAutoModelForSeq2SeqLM"),Lqe=l(),pr=a("div"),F(px.$$.fragment),o9r=l(),Dc=a("p"),r9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VJ=a("a"),t9r=o("from_pretrained()"),a9r=o(" class method or the "),XJ=a("a"),n9r=o("from_config()"),s9r=o(` class
method.`),l9r=l(),ux=a("p"),i9r=o("This class cannot be instantiated directly using "),ATe=a("code"),d9r=o("__init__()"),c9r=o(" (throws an error)."),f9r=l(),Vt=a("div"),F(_x.$$.fragment),m9r=l(),yTe=a("p"),g9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h9r=l(),Gc=a("p"),p9r=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),u9r=o("not"),_9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),b9r=o("from_pretrained()"),v9r=o(" to load the model weights."),F9r=l(),F(c5.$$.fragment),T9r=l(),Vr=a("div"),F(bx.$$.fragment),M9r=l(),xTe=a("p"),E9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C9r=l(),_n=a("p"),w9r=o("The model class to instantiate is selected based on the "),$Te=a("code"),A9r=o("model_type"),y9r=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),L9r=o("pretrained_model_name_or_path"),x9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),$9r=o("pretrained_model_name_or_path"),k9r=o(":"),S9r=l(),Se=a("ul"),f5=a("li"),RTe=a("strong"),R9r=o("bart"),B9r=o(" \u2014 "),QJ=a("a"),P9r=o("FlaxBartForConditionalGeneration"),I9r=o(" (BART model)"),q9r=l(),m5=a("li"),BTe=a("strong"),N9r=o("blenderbot"),j9r=o(" \u2014 "),WJ=a("a"),D9r=o("FlaxBlenderbotForConditionalGeneration"),G9r=o(" (Blenderbot model)"),O9r=l(),g5=a("li"),PTe=a("strong"),V9r=o("blenderbot-small"),X9r=o(" \u2014 "),HJ=a("a"),z9r=o("FlaxBlenderbotSmallForConditionalGeneration"),Q9r=o(" (BlenderbotSmall model)"),W9r=l(),h5=a("li"),ITe=a("strong"),H9r=o("encoder-decoder"),U9r=o(" \u2014 "),UJ=a("a"),J9r=o("FlaxEncoderDecoderModel"),Y9r=o(" (Encoder decoder model)"),K9r=l(),p5=a("li"),qTe=a("strong"),Z9r=o("marian"),e$r=o(" \u2014 "),JJ=a("a"),o$r=o("FlaxMarianMTModel"),r$r=o(" (Marian model)"),t$r=l(),u5=a("li"),NTe=a("strong"),a$r=o("mbart"),n$r=o(" \u2014 "),YJ=a("a"),s$r=o("FlaxMBartForConditionalGeneration"),l$r=o(" (mBART model)"),i$r=l(),_5=a("li"),jTe=a("strong"),d$r=o("mt5"),c$r=o(" \u2014 "),KJ=a("a"),f$r=o("FlaxMT5ForConditionalGeneration"),m$r=o(" (mT5 model)"),g$r=l(),b5=a("li"),DTe=a("strong"),h$r=o("pegasus"),p$r=o(" \u2014 "),ZJ=a("a"),u$r=o("FlaxPegasusForConditionalGeneration"),_$r=o(" (Pegasus model)"),b$r=l(),v5=a("li"),GTe=a("strong"),v$r=o("t5"),F$r=o(" \u2014 "),eY=a("a"),T$r=o("FlaxT5ForConditionalGeneration"),M$r=o(" (T5 model)"),E$r=l(),F(F5.$$.fragment),xqe=l(),Oc=a("h2"),T5=a("a"),OTe=a("span"),F(vx.$$.fragment),C$r=l(),VTe=a("span"),w$r=o("FlaxAutoModelForSequenceClassification"),$qe=l(),ur=a("div"),F(Fx.$$.fragment),A$r=l(),Vc=a("p"),y$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oY=a("a"),L$r=o("from_pretrained()"),x$r=o(" class method or the "),rY=a("a"),$$r=o("from_config()"),k$r=o(` class
method.`),S$r=l(),Tx=a("p"),R$r=o("This class cannot be instantiated directly using "),XTe=a("code"),B$r=o("__init__()"),P$r=o(" (throws an error)."),I$r=l(),Xt=a("div"),F(Mx.$$.fragment),q$r=l(),zTe=a("p"),N$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),j$r=l(),Xc=a("p"),D$r=o(`Note:
Loading a model from its configuration file does `),QTe=a("strong"),G$r=o("not"),O$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),V$r=o("from_pretrained()"),X$r=o(" to load the model weights."),z$r=l(),F(M5.$$.fragment),Q$r=l(),Xr=a("div"),F(Ex.$$.fragment),W$r=l(),WTe=a("p"),H$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),U$r=l(),bn=a("p"),J$r=o("The model class to instantiate is selected based on the "),HTe=a("code"),Y$r=o("model_type"),K$r=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),Z$r=o("pretrained_model_name_or_path"),ekr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),okr=o("pretrained_model_name_or_path"),rkr=o(":"),tkr=l(),xe=a("ul"),E5=a("li"),YTe=a("strong"),akr=o("albert"),nkr=o(" \u2014 "),aY=a("a"),skr=o("FlaxAlbertForSequenceClassification"),lkr=o(" (ALBERT model)"),ikr=l(),C5=a("li"),KTe=a("strong"),dkr=o("bart"),ckr=o(" \u2014 "),nY=a("a"),fkr=o("FlaxBartForSequenceClassification"),mkr=o(" (BART model)"),gkr=l(),w5=a("li"),ZTe=a("strong"),hkr=o("bert"),pkr=o(" \u2014 "),sY=a("a"),ukr=o("FlaxBertForSequenceClassification"),_kr=o(" (BERT model)"),bkr=l(),A5=a("li"),e7e=a("strong"),vkr=o("big_bird"),Fkr=o(" \u2014 "),lY=a("a"),Tkr=o("FlaxBigBirdForSequenceClassification"),Mkr=o(" (BigBird model)"),Ekr=l(),y5=a("li"),o7e=a("strong"),Ckr=o("distilbert"),wkr=o(" \u2014 "),iY=a("a"),Akr=o("FlaxDistilBertForSequenceClassification"),ykr=o(" (DistilBERT model)"),Lkr=l(),L5=a("li"),r7e=a("strong"),xkr=o("electra"),$kr=o(" \u2014 "),dY=a("a"),kkr=o("FlaxElectraForSequenceClassification"),Skr=o(" (ELECTRA model)"),Rkr=l(),x5=a("li"),t7e=a("strong"),Bkr=o("mbart"),Pkr=o(" \u2014 "),cY=a("a"),Ikr=o("FlaxMBartForSequenceClassification"),qkr=o(" (mBART model)"),Nkr=l(),$5=a("li"),a7e=a("strong"),jkr=o("roberta"),Dkr=o(" \u2014 "),fY=a("a"),Gkr=o("FlaxRobertaForSequenceClassification"),Okr=o(" (RoBERTa model)"),Vkr=l(),k5=a("li"),n7e=a("strong"),Xkr=o("roformer"),zkr=o(" \u2014 "),mY=a("a"),Qkr=o("FlaxRoFormerForSequenceClassification"),Wkr=o(" (RoFormer model)"),Hkr=l(),S5=a("li"),s7e=a("strong"),Ukr=o("xlm-roberta"),Jkr=o(" \u2014 "),gY=a("a"),Ykr=o("FlaxXLMRobertaForSequenceClassification"),Kkr=o(" (XLM-RoBERTa model)"),Zkr=l(),F(R5.$$.fragment),kqe=l(),zc=a("h2"),B5=a("a"),l7e=a("span"),F(Cx.$$.fragment),eSr=l(),i7e=a("span"),oSr=o("FlaxAutoModelForQuestionAnswering"),Sqe=l(),_r=a("div"),F(wx.$$.fragment),rSr=l(),Qc=a("p"),tSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hY=a("a"),aSr=o("from_pretrained()"),nSr=o(" class method or the "),pY=a("a"),sSr=o("from_config()"),lSr=o(` class
method.`),iSr=l(),Ax=a("p"),dSr=o("This class cannot be instantiated directly using "),d7e=a("code"),cSr=o("__init__()"),fSr=o(" (throws an error)."),mSr=l(),zt=a("div"),F(yx.$$.fragment),gSr=l(),c7e=a("p"),hSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pSr=l(),Wc=a("p"),uSr=o(`Note:
Loading a model from its configuration file does `),f7e=a("strong"),_Sr=o("not"),bSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),vSr=o("from_pretrained()"),FSr=o(" to load the model weights."),TSr=l(),F(P5.$$.fragment),MSr=l(),zr=a("div"),F(Lx.$$.fragment),ESr=l(),m7e=a("p"),CSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wSr=l(),vn=a("p"),ASr=o("The model class to instantiate is selected based on the "),g7e=a("code"),ySr=o("model_type"),LSr=o(` property of the config object (either
passed as an argument or loaded from `),h7e=a("code"),xSr=o("pretrained_model_name_or_path"),$Sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=a("code"),kSr=o("pretrained_model_name_or_path"),SSr=o(":"),RSr=l(),$e=a("ul"),I5=a("li"),u7e=a("strong"),BSr=o("albert"),PSr=o(" \u2014 "),_Y=a("a"),ISr=o("FlaxAlbertForQuestionAnswering"),qSr=o(" (ALBERT model)"),NSr=l(),q5=a("li"),_7e=a("strong"),jSr=o("bart"),DSr=o(" \u2014 "),bY=a("a"),GSr=o("FlaxBartForQuestionAnswering"),OSr=o(" (BART model)"),VSr=l(),N5=a("li"),b7e=a("strong"),XSr=o("bert"),zSr=o(" \u2014 "),vY=a("a"),QSr=o("FlaxBertForQuestionAnswering"),WSr=o(" (BERT model)"),HSr=l(),j5=a("li"),v7e=a("strong"),USr=o("big_bird"),JSr=o(" \u2014 "),FY=a("a"),YSr=o("FlaxBigBirdForQuestionAnswering"),KSr=o(" (BigBird model)"),ZSr=l(),D5=a("li"),F7e=a("strong"),eRr=o("distilbert"),oRr=o(" \u2014 "),TY=a("a"),rRr=o("FlaxDistilBertForQuestionAnswering"),tRr=o(" (DistilBERT model)"),aRr=l(),G5=a("li"),T7e=a("strong"),nRr=o("electra"),sRr=o(" \u2014 "),MY=a("a"),lRr=o("FlaxElectraForQuestionAnswering"),iRr=o(" (ELECTRA model)"),dRr=l(),O5=a("li"),M7e=a("strong"),cRr=o("mbart"),fRr=o(" \u2014 "),EY=a("a"),mRr=o("FlaxMBartForQuestionAnswering"),gRr=o(" (mBART model)"),hRr=l(),V5=a("li"),E7e=a("strong"),pRr=o("roberta"),uRr=o(" \u2014 "),CY=a("a"),_Rr=o("FlaxRobertaForQuestionAnswering"),bRr=o(" (RoBERTa model)"),vRr=l(),X5=a("li"),C7e=a("strong"),FRr=o("roformer"),TRr=o(" \u2014 "),wY=a("a"),MRr=o("FlaxRoFormerForQuestionAnswering"),ERr=o(" (RoFormer model)"),CRr=l(),z5=a("li"),w7e=a("strong"),wRr=o("xlm-roberta"),ARr=o(" \u2014 "),AY=a("a"),yRr=o("FlaxXLMRobertaForQuestionAnswering"),LRr=o(" (XLM-RoBERTa model)"),xRr=l(),F(Q5.$$.fragment),Rqe=l(),Hc=a("h2"),W5=a("a"),A7e=a("span"),F(xx.$$.fragment),$Rr=l(),y7e=a("span"),kRr=o("FlaxAutoModelForTokenClassification"),Bqe=l(),br=a("div"),F($x.$$.fragment),SRr=l(),Uc=a("p"),RRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yY=a("a"),BRr=o("from_pretrained()"),PRr=o(" class method or the "),LY=a("a"),IRr=o("from_config()"),qRr=o(` class
method.`),NRr=l(),kx=a("p"),jRr=o("This class cannot be instantiated directly using "),L7e=a("code"),DRr=o("__init__()"),GRr=o(" (throws an error)."),ORr=l(),Qt=a("div"),F(Sx.$$.fragment),VRr=l(),x7e=a("p"),XRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zRr=l(),Jc=a("p"),QRr=o(`Note:
Loading a model from its configuration file does `),$7e=a("strong"),WRr=o("not"),HRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),URr=o("from_pretrained()"),JRr=o(" to load the model weights."),YRr=l(),F(H5.$$.fragment),KRr=l(),Qr=a("div"),F(Rx.$$.fragment),ZRr=l(),k7e=a("p"),eBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oBr=l(),Fn=a("p"),rBr=o("The model class to instantiate is selected based on the "),S7e=a("code"),tBr=o("model_type"),aBr=o(` property of the config object (either
passed as an argument or loaded from `),R7e=a("code"),nBr=o("pretrained_model_name_or_path"),sBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B7e=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(":"),dBr=l(),De=a("ul"),U5=a("li"),P7e=a("strong"),cBr=o("albert"),fBr=o(" \u2014 "),$Y=a("a"),mBr=o("FlaxAlbertForTokenClassification"),gBr=o(" (ALBERT model)"),hBr=l(),J5=a("li"),I7e=a("strong"),pBr=o("bert"),uBr=o(" \u2014 "),kY=a("a"),_Br=o("FlaxBertForTokenClassification"),bBr=o(" (BERT model)"),vBr=l(),Y5=a("li"),q7e=a("strong"),FBr=o("big_bird"),TBr=o(" \u2014 "),SY=a("a"),MBr=o("FlaxBigBirdForTokenClassification"),EBr=o(" (BigBird model)"),CBr=l(),K5=a("li"),N7e=a("strong"),wBr=o("distilbert"),ABr=o(" \u2014 "),RY=a("a"),yBr=o("FlaxDistilBertForTokenClassification"),LBr=o(" (DistilBERT model)"),xBr=l(),Z5=a("li"),j7e=a("strong"),$Br=o("electra"),kBr=o(" \u2014 "),BY=a("a"),SBr=o("FlaxElectraForTokenClassification"),RBr=o(" (ELECTRA model)"),BBr=l(),eC=a("li"),D7e=a("strong"),PBr=o("roberta"),IBr=o(" \u2014 "),PY=a("a"),qBr=o("FlaxRobertaForTokenClassification"),NBr=o(" (RoBERTa model)"),jBr=l(),oC=a("li"),G7e=a("strong"),DBr=o("roformer"),GBr=o(" \u2014 "),IY=a("a"),OBr=o("FlaxRoFormerForTokenClassification"),VBr=o(" (RoFormer model)"),XBr=l(),rC=a("li"),O7e=a("strong"),zBr=o("xlm-roberta"),QBr=o(" \u2014 "),qY=a("a"),WBr=o("FlaxXLMRobertaForTokenClassification"),HBr=o(" (XLM-RoBERTa model)"),UBr=l(),F(tC.$$.fragment),Pqe=l(),Yc=a("h2"),aC=a("a"),V7e=a("span"),F(Bx.$$.fragment),JBr=l(),X7e=a("span"),YBr=o("FlaxAutoModelForMultipleChoice"),Iqe=l(),vr=a("div"),F(Px.$$.fragment),KBr=l(),Kc=a("p"),ZBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NY=a("a"),ePr=o("from_pretrained()"),oPr=o(" class method or the "),jY=a("a"),rPr=o("from_config()"),tPr=o(` class
method.`),aPr=l(),Ix=a("p"),nPr=o("This class cannot be instantiated directly using "),z7e=a("code"),sPr=o("__init__()"),lPr=o(" (throws an error)."),iPr=l(),Wt=a("div"),F(qx.$$.fragment),dPr=l(),Q7e=a("p"),cPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fPr=l(),Zc=a("p"),mPr=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),gPr=o("not"),hPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),pPr=o("from_pretrained()"),uPr=o(" to load the model weights."),_Pr=l(),F(nC.$$.fragment),bPr=l(),Wr=a("div"),F(Nx.$$.fragment),vPr=l(),H7e=a("p"),FPr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TPr=l(),Tn=a("p"),MPr=o("The model class to instantiate is selected based on the "),U7e=a("code"),EPr=o("model_type"),CPr=o(` property of the config object (either
passed as an argument or loaded from `),J7e=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=a("code"),yPr=o("pretrained_model_name_or_path"),LPr=o(":"),xPr=l(),Ge=a("ul"),sC=a("li"),K7e=a("strong"),$Pr=o("albert"),kPr=o(" \u2014 "),GY=a("a"),SPr=o("FlaxAlbertForMultipleChoice"),RPr=o(" (ALBERT model)"),BPr=l(),lC=a("li"),Z7e=a("strong"),PPr=o("bert"),IPr=o(" \u2014 "),OY=a("a"),qPr=o("FlaxBertForMultipleChoice"),NPr=o(" (BERT model)"),jPr=l(),iC=a("li"),eMe=a("strong"),DPr=o("big_bird"),GPr=o(" \u2014 "),VY=a("a"),OPr=o("FlaxBigBirdForMultipleChoice"),VPr=o(" (BigBird model)"),XPr=l(),dC=a("li"),oMe=a("strong"),zPr=o("distilbert"),QPr=o(" \u2014 "),XY=a("a"),WPr=o("FlaxDistilBertForMultipleChoice"),HPr=o(" (DistilBERT model)"),UPr=l(),cC=a("li"),rMe=a("strong"),JPr=o("electra"),YPr=o(" \u2014 "),zY=a("a"),KPr=o("FlaxElectraForMultipleChoice"),ZPr=o(" (ELECTRA model)"),eIr=l(),fC=a("li"),tMe=a("strong"),oIr=o("roberta"),rIr=o(" \u2014 "),QY=a("a"),tIr=o("FlaxRobertaForMultipleChoice"),aIr=o(" (RoBERTa model)"),nIr=l(),mC=a("li"),aMe=a("strong"),sIr=o("roformer"),lIr=o(" \u2014 "),WY=a("a"),iIr=o("FlaxRoFormerForMultipleChoice"),dIr=o(" (RoFormer model)"),cIr=l(),gC=a("li"),nMe=a("strong"),fIr=o("xlm-roberta"),mIr=o(" \u2014 "),HY=a("a"),gIr=o("FlaxXLMRobertaForMultipleChoice"),hIr=o(" (XLM-RoBERTa model)"),pIr=l(),F(hC.$$.fragment),qqe=l(),ef=a("h2"),pC=a("a"),sMe=a("span"),F(jx.$$.fragment),uIr=l(),lMe=a("span"),_Ir=o("FlaxAutoModelForNextSentencePrediction"),Nqe=l(),Fr=a("div"),F(Dx.$$.fragment),bIr=l(),of=a("p"),vIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UY=a("a"),FIr=o("from_pretrained()"),TIr=o(" class method or the "),JY=a("a"),MIr=o("from_config()"),EIr=o(` class
method.`),CIr=l(),Gx=a("p"),wIr=o("This class cannot be instantiated directly using "),iMe=a("code"),AIr=o("__init__()"),yIr=o(" (throws an error)."),LIr=l(),Ht=a("div"),F(Ox.$$.fragment),xIr=l(),dMe=a("p"),$Ir=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kIr=l(),rf=a("p"),SIr=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),RIr=o("not"),BIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),PIr=o("from_pretrained()"),IIr=o(" to load the model weights."),qIr=l(),F(uC.$$.fragment),NIr=l(),Hr=a("div"),F(Vx.$$.fragment),jIr=l(),fMe=a("p"),DIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GIr=l(),Mn=a("p"),OIr=o("The model class to instantiate is selected based on the "),mMe=a("code"),VIr=o("model_type"),XIr=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),zIr=o("pretrained_model_name_or_path"),QIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),WIr=o("pretrained_model_name_or_path"),HIr=o(":"),UIr=l(),pMe=a("ul"),_C=a("li"),uMe=a("strong"),JIr=o("bert"),YIr=o(" \u2014 "),KY=a("a"),KIr=o("FlaxBertForNextSentencePrediction"),ZIr=o(" (BERT model)"),eqr=l(),F(bC.$$.fragment),jqe=l(),tf=a("h2"),vC=a("a"),_Me=a("span"),F(Xx.$$.fragment),oqr=l(),bMe=a("span"),rqr=o("FlaxAutoModelForImageClassification"),Dqe=l(),Tr=a("div"),F(zx.$$.fragment),tqr=l(),af=a("p"),aqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZY=a("a"),nqr=o("from_pretrained()"),sqr=o(" class method or the "),eK=a("a"),lqr=o("from_config()"),iqr=o(` class
method.`),dqr=l(),Qx=a("p"),cqr=o("This class cannot be instantiated directly using "),vMe=a("code"),fqr=o("__init__()"),mqr=o(" (throws an error)."),gqr=l(),Ut=a("div"),F(Wx.$$.fragment),hqr=l(),FMe=a("p"),pqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uqr=l(),nf=a("p"),_qr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),bqr=o("not"),vqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),Fqr=o("from_pretrained()"),Tqr=o(" to load the model weights."),Mqr=l(),F(FC.$$.fragment),Eqr=l(),Ur=a("div"),F(Hx.$$.fragment),Cqr=l(),MMe=a("p"),wqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Aqr=l(),En=a("p"),yqr=o("The model class to instantiate is selected based on the "),EMe=a("code"),Lqr=o("model_type"),xqr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),$qr=o("pretrained_model_name_or_path"),kqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),Sqr=o("pretrained_model_name_or_path"),Rqr=o(":"),Bqr=l(),Ux=a("ul"),TC=a("li"),AMe=a("strong"),Pqr=o("beit"),Iqr=o(" \u2014 "),rK=a("a"),qqr=o("FlaxBeitForImageClassification"),Nqr=o(" (BEiT model)"),jqr=l(),MC=a("li"),yMe=a("strong"),Dqr=o("vit"),Gqr=o(" \u2014 "),tK=a("a"),Oqr=o("FlaxViTForImageClassification"),Vqr=o(" (ViT model)"),Xqr=l(),F(EC.$$.fragment),Gqe=l(),sf=a("h2"),CC=a("a"),LMe=a("span"),F(Jx.$$.fragment),zqr=l(),xMe=a("span"),Qqr=o("FlaxAutoModelForVision2Seq"),Oqe=l(),Mr=a("div"),F(Yx.$$.fragment),Wqr=l(),lf=a("p"),Hqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aK=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" class method or the "),nK=a("a"),Yqr=o("from_config()"),Kqr=o(` class
method.`),Zqr=l(),Kx=a("p"),eNr=o("This class cannot be instantiated directly using "),$Me=a("code"),oNr=o("__init__()"),rNr=o(" (throws an error)."),tNr=l(),Jt=a("div"),F(Zx.$$.fragment),aNr=l(),kMe=a("p"),nNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sNr=l(),df=a("p"),lNr=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),iNr=o("not"),dNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),cNr=o("from_pretrained()"),fNr=o(" to load the model weights."),mNr=l(),F(wC.$$.fragment),gNr=l(),Jr=a("div"),F(e9.$$.fragment),hNr=l(),RMe=a("p"),pNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uNr=l(),Cn=a("p"),_Nr=o("The model class to instantiate is selected based on the "),BMe=a("code"),bNr=o("model_type"),vNr=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),FNr=o("pretrained_model_name_or_path"),TNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=a("code"),MNr=o("pretrained_model_name_or_path"),ENr=o(":"),CNr=l(),qMe=a("ul"),AC=a("li"),NMe=a("strong"),wNr=o("vision-encoder-decoder"),ANr=o(" \u2014 "),lK=a("a"),yNr=o("FlaxVisionEncoderDecoderModel"),LNr=o(" (Vision Encoder decoder model)"),xNr=l(),F(yC.$$.fragment),this.h()},l(f){const _=tAt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var o9=s(p);m=n(o9,"A",{id:!0,class:!0,href:!0});var jMe=s(m);u=n(jMe,"SPAN",{});var DMe=s(u);T(d.$$.fragment,DMe),DMe.forEach(t),jMe.forEach(t),h=i(o9),Mo=n(o9,"SPAN",{});var GMe=s(Mo);ii=r(GMe,"Auto Classes"),GMe.forEach(t),o9.forEach(t),gf=i(f),et=n(f,"P",{});var r9=s(et);di=r(r9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(r9,"CODE",{});var OMe=s(ci);Qw=r(OMe,"from_pretrained()"),OMe.forEach(t),hf=r(r9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),r9.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);fi=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var VMe=s(An);Ww=r(VMe,"AutoConfig"),VMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var XMe=s(Ln);Hw=r(XMe,"AutoModel"),XMe.forEach(t),mi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var zMe=s(xn);Uw=r(zMe,"AutoTokenizer"),zMe.forEach(t),gi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),pf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var t9=s(Ae);h$=r(t9,"will create a model that is an instance of "),hi=n(t9,"A",{href:!0});var QMe=s(hi);p$=r(QMe,"BertModel"),QMe.forEach(t),u$=r(t9,"."),t9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var a9=s(Ea);_$=r(a9,"There is one class of "),uf=n(a9,"CODE",{});var WMe=s(uf);b$=r(WMe,"AutoModel"),WMe.forEach(t),Yje=r(a9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),a9.forEach(t),DPe=i(f),pi=n(f,"H2",{class:!0});var n9=s(pi);_f=n(n9,"A",{id:!0,class:!0,href:!0});var HMe=s(_f);oee=n(HMe,"SPAN",{});var UMe=s(oee);T(Jw.$$.fragment,UMe),UMe.forEach(t),HMe.forEach(t),Kje=i(n9),ree=n(n9,"SPAN",{});var JMe=s(ree);Zje=r(JMe,"Extending the Auto Classes"),JMe.forEach(t),n9.forEach(t),GPe=i(f),$n=n(f,"P",{});var cf=s($n);eDe=r(cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tee=n(cf,"CODE",{});var YMe=s(tee);oDe=r(YMe,"NewModel"),YMe.forEach(t),rDe=r(cf,", make sure you have a "),aee=n(cf,"CODE",{});var KMe=s(aee);tDe=r(KMe,"NewModelConfig"),KMe.forEach(t),aDe=r(cf,` then you can add those to the auto
classes like this:`),cf.forEach(t),OPe=i(f),T(Yw.$$.fragment,f),VPe=i(f),v$=n(f,"P",{});var ZMe=s(v$);nDe=r(ZMe,"You will then be able to use the auto classes like you would usually do!"),ZMe.forEach(t),XPe=i(f),T(bf.$$.fragment,f),zPe=i(f),ui=n(f,"H2",{class:!0});var s9=s(ui);vf=n(s9,"A",{id:!0,class:!0,href:!0});var e4e=s(vf);nee=n(e4e,"SPAN",{});var o4e=s(nee);T(Kw.$$.fragment,o4e),o4e.forEach(t),e4e.forEach(t),sDe=i(s9),see=n(s9,"SPAN",{});var r4e=s(see);lDe=r(r4e,"AutoConfig"),r4e.forEach(t),s9.forEach(t),QPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(Zw.$$.fragment,Kr),iDe=i(Kr),eA=n(Kr,"P",{});var l9=s(eA);dDe=r(l9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),F$=n(l9,"A",{href:!0});var t4e=s(F$);cDe=r(t4e,"from_pretrained()"),t4e.forEach(t),fDe=r(l9," class method."),l9.forEach(t),mDe=i(Kr),oA=n(Kr,"P",{});var i9=s(oA);gDe=r(i9,"This class cannot be instantiated directly using "),lee=n(i9,"CODE",{});var a4e=s(lee);hDe=r(a4e,"__init__()"),a4e.forEach(t),pDe=r(i9," (throws an error)."),i9.forEach(t),uDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(rA.$$.fragment,Zr),_De=i(Zr),iee=n(Zr,"P",{});var n4e=s(iee);bDe=r(n4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),n4e.forEach(t),vDe=i(Zr),_i=n(Zr,"P",{});var ff=s(_i);FDe=r(ff,"The configuration class to instantiate is selected based on the "),dee=n(ff,"CODE",{});var s4e=s(dee);TDe=r(s4e,"model_type"),s4e.forEach(t),MDe=r(ff,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cee=n(ff,"CODE",{});var l4e=s(cee);EDe=r(l4e,"pretrained_model_name_or_path"),l4e.forEach(t),CDe=r(ff,":"),ff.forEach(t),wDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);Ff=n(L,"LI",{});var LC=s(Ff);fee=n(LC,"STRONG",{});var i4e=s(fee);ADe=r(i4e,"albert"),i4e.forEach(t),yDe=r(LC," \u2014 "),T$=n(LC,"A",{href:!0});var d4e=s(T$);LDe=r(d4e,"AlbertConfig"),d4e.forEach(t),xDe=r(LC," (ALBERT model)"),LC.forEach(t),$De=i(L),Tf=n(L,"LI",{});var xC=s(Tf);mee=n(xC,"STRONG",{});var c4e=s(mee);kDe=r(c4e,"bart"),c4e.forEach(t),SDe=r(xC," \u2014 "),M$=n(xC,"A",{href:!0});var f4e=s(M$);RDe=r(f4e,"BartConfig"),f4e.forEach(t),BDe=r(xC," (BART model)"),xC.forEach(t),PDe=i(L),Mf=n(L,"LI",{});var $C=s(Mf);gee=n($C,"STRONG",{});var m4e=s(gee);IDe=r(m4e,"beit"),m4e.forEach(t),qDe=r($C," \u2014 "),E$=n($C,"A",{href:!0});var g4e=s(E$);NDe=r(g4e,"BeitConfig"),g4e.forEach(t),jDe=r($C," (BEiT model)"),$C.forEach(t),DDe=i(L),Ef=n(L,"LI",{});var kC=s(Ef);hee=n(kC,"STRONG",{});var h4e=s(hee);GDe=r(h4e,"bert"),h4e.forEach(t),ODe=r(kC," \u2014 "),C$=n(kC,"A",{href:!0});var p4e=s(C$);VDe=r(p4e,"BertConfig"),p4e.forEach(t),XDe=r(kC," (BERT model)"),kC.forEach(t),zDe=i(L),Cf=n(L,"LI",{});var SC=s(Cf);pee=n(SC,"STRONG",{});var u4e=s(pee);QDe=r(u4e,"bert-generation"),u4e.forEach(t),WDe=r(SC," \u2014 "),w$=n(SC,"A",{href:!0});var _4e=s(w$);HDe=r(_4e,"BertGenerationConfig"),_4e.forEach(t),UDe=r(SC," (Bert Generation model)"),SC.forEach(t),JDe=i(L),wf=n(L,"LI",{});var RC=s(wf);uee=n(RC,"STRONG",{});var b4e=s(uee);YDe=r(b4e,"big_bird"),b4e.forEach(t),KDe=r(RC," \u2014 "),A$=n(RC,"A",{href:!0});var v4e=s(A$);ZDe=r(v4e,"BigBirdConfig"),v4e.forEach(t),eGe=r(RC," (BigBird model)"),RC.forEach(t),oGe=i(L),Af=n(L,"LI",{});var BC=s(Af);_ee=n(BC,"STRONG",{});var F4e=s(_ee);rGe=r(F4e,"bigbird_pegasus"),F4e.forEach(t),tGe=r(BC," \u2014 "),y$=n(BC,"A",{href:!0});var T4e=s(y$);aGe=r(T4e,"BigBirdPegasusConfig"),T4e.forEach(t),nGe=r(BC," (BigBirdPegasus model)"),BC.forEach(t),sGe=i(L),yf=n(L,"LI",{});var PC=s(yf);bee=n(PC,"STRONG",{});var M4e=s(bee);lGe=r(M4e,"blenderbot"),M4e.forEach(t),iGe=r(PC," \u2014 "),L$=n(PC,"A",{href:!0});var E4e=s(L$);dGe=r(E4e,"BlenderbotConfig"),E4e.forEach(t),cGe=r(PC," (Blenderbot model)"),PC.forEach(t),fGe=i(L),Lf=n(L,"LI",{});var IC=s(Lf);vee=n(IC,"STRONG",{});var C4e=s(vee);mGe=r(C4e,"blenderbot-small"),C4e.forEach(t),gGe=r(IC," \u2014 "),x$=n(IC,"A",{href:!0});var w4e=s(x$);hGe=r(w4e,"BlenderbotSmallConfig"),w4e.forEach(t),pGe=r(IC," (BlenderbotSmall model)"),IC.forEach(t),uGe=i(L),xf=n(L,"LI",{});var qC=s(xf);Fee=n(qC,"STRONG",{});var A4e=s(Fee);_Ge=r(A4e,"camembert"),A4e.forEach(t),bGe=r(qC," \u2014 "),$$=n(qC,"A",{href:!0});var y4e=s($$);vGe=r(y4e,"CamembertConfig"),y4e.forEach(t),FGe=r(qC," (CamemBERT model)"),qC.forEach(t),TGe=i(L),$f=n(L,"LI",{});var NC=s($f);Tee=n(NC,"STRONG",{});var L4e=s(Tee);MGe=r(L4e,"canine"),L4e.forEach(t),EGe=r(NC," \u2014 "),k$=n(NC,"A",{href:!0});var x4e=s(k$);CGe=r(x4e,"CanineConfig"),x4e.forEach(t),wGe=r(NC," (Canine model)"),NC.forEach(t),AGe=i(L),kf=n(L,"LI",{});var jC=s(kf);Mee=n(jC,"STRONG",{});var $4e=s(Mee);yGe=r($4e,"clip"),$4e.forEach(t),LGe=r(jC," \u2014 "),S$=n(jC,"A",{href:!0});var k4e=s(S$);xGe=r(k4e,"CLIPConfig"),k4e.forEach(t),$Ge=r(jC," (CLIP model)"),jC.forEach(t),kGe=i(L),Sf=n(L,"LI",{});var DC=s(Sf);Eee=n(DC,"STRONG",{});var S4e=s(Eee);SGe=r(S4e,"convbert"),S4e.forEach(t),RGe=r(DC," \u2014 "),R$=n(DC,"A",{href:!0});var R4e=s(R$);BGe=r(R4e,"ConvBertConfig"),R4e.forEach(t),PGe=r(DC," (ConvBERT model)"),DC.forEach(t),IGe=i(L),Rf=n(L,"LI",{});var GC=s(Rf);Cee=n(GC,"STRONG",{});var B4e=s(Cee);qGe=r(B4e,"convnext"),B4e.forEach(t),NGe=r(GC," \u2014 "),B$=n(GC,"A",{href:!0});var P4e=s(B$);jGe=r(P4e,"ConvNextConfig"),P4e.forEach(t),DGe=r(GC," (ConvNext model)"),GC.forEach(t),GGe=i(L),Bf=n(L,"LI",{});var OC=s(Bf);wee=n(OC,"STRONG",{});var I4e=s(wee);OGe=r(I4e,"ctrl"),I4e.forEach(t),VGe=r(OC," \u2014 "),P$=n(OC,"A",{href:!0});var q4e=s(P$);XGe=r(q4e,"CTRLConfig"),q4e.forEach(t),zGe=r(OC," (CTRL model)"),OC.forEach(t),QGe=i(L),Pf=n(L,"LI",{});var VC=s(Pf);Aee=n(VC,"STRONG",{});var N4e=s(Aee);WGe=r(N4e,"data2vec-audio"),N4e.forEach(t),HGe=r(VC," \u2014 "),I$=n(VC,"A",{href:!0});var j4e=s(I$);UGe=r(j4e,"Data2VecAudioConfig"),j4e.forEach(t),JGe=r(VC," (Data2VecAudio model)"),VC.forEach(t),YGe=i(L),If=n(L,"LI",{});var XC=s(If);yee=n(XC,"STRONG",{});var D4e=s(yee);KGe=r(D4e,"data2vec-text"),D4e.forEach(t),ZGe=r(XC," \u2014 "),q$=n(XC,"A",{href:!0});var G4e=s(q$);eOe=r(G4e,"Data2VecTextConfig"),G4e.forEach(t),oOe=r(XC," (Data2VecText model)"),XC.forEach(t),rOe=i(L),qf=n(L,"LI",{});var zC=s(qf);Lee=n(zC,"STRONG",{});var O4e=s(Lee);tOe=r(O4e,"data2vec-vision"),O4e.forEach(t),aOe=r(zC," \u2014 "),N$=n(zC,"A",{href:!0});var V4e=s(N$);nOe=r(V4e,"Data2VecVisionConfig"),V4e.forEach(t),sOe=r(zC," (Data2VecVision model)"),zC.forEach(t),lOe=i(L),Nf=n(L,"LI",{});var QC=s(Nf);xee=n(QC,"STRONG",{});var X4e=s(xee);iOe=r(X4e,"deberta"),X4e.forEach(t),dOe=r(QC," \u2014 "),j$=n(QC,"A",{href:!0});var z4e=s(j$);cOe=r(z4e,"DebertaConfig"),z4e.forEach(t),fOe=r(QC," (DeBERTa model)"),QC.forEach(t),mOe=i(L),jf=n(L,"LI",{});var WC=s(jf);$ee=n(WC,"STRONG",{});var Q4e=s($ee);gOe=r(Q4e,"deberta-v2"),Q4e.forEach(t),hOe=r(WC," \u2014 "),D$=n(WC,"A",{href:!0});var W4e=s(D$);pOe=r(W4e,"DebertaV2Config"),W4e.forEach(t),uOe=r(WC," (DeBERTa-v2 model)"),WC.forEach(t),_Oe=i(L),Df=n(L,"LI",{});var HC=s(Df);kee=n(HC,"STRONG",{});var H4e=s(kee);bOe=r(H4e,"decision_transformer"),H4e.forEach(t),vOe=r(HC," \u2014 "),G$=n(HC,"A",{href:!0});var U4e=s(G$);FOe=r(U4e,"DecisionTransformerConfig"),U4e.forEach(t),TOe=r(HC," (Decision Transformer model)"),HC.forEach(t),MOe=i(L),Gf=n(L,"LI",{});var UC=s(Gf);See=n(UC,"STRONG",{});var J4e=s(See);EOe=r(J4e,"deit"),J4e.forEach(t),COe=r(UC," \u2014 "),O$=n(UC,"A",{href:!0});var Y4e=s(O$);wOe=r(Y4e,"DeiTConfig"),Y4e.forEach(t),AOe=r(UC," (DeiT model)"),UC.forEach(t),yOe=i(L),Of=n(L,"LI",{});var JC=s(Of);Ree=n(JC,"STRONG",{});var K4e=s(Ree);LOe=r(K4e,"detr"),K4e.forEach(t),xOe=r(JC," \u2014 "),V$=n(JC,"A",{href:!0});var kNr=s(V$);$Oe=r(kNr,"DetrConfig"),kNr.forEach(t),kOe=r(JC," (DETR model)"),JC.forEach(t),SOe=i(L),Vf=n(L,"LI",{});var Z4e=s(Vf);Bee=n(Z4e,"STRONG",{});var SNr=s(Bee);ROe=r(SNr,"distilbert"),SNr.forEach(t),BOe=r(Z4e," \u2014 "),X$=n(Z4e,"A",{href:!0});var RNr=s(X$);POe=r(RNr,"DistilBertConfig"),RNr.forEach(t),IOe=r(Z4e," (DistilBERT model)"),Z4e.forEach(t),qOe=i(L),Xf=n(L,"LI",{});var eEe=s(Xf);Pee=n(eEe,"STRONG",{});var BNr=s(Pee);NOe=r(BNr,"dpr"),BNr.forEach(t),jOe=r(eEe," \u2014 "),z$=n(eEe,"A",{href:!0});var PNr=s(z$);DOe=r(PNr,"DPRConfig"),PNr.forEach(t),GOe=r(eEe," (DPR model)"),eEe.forEach(t),OOe=i(L),zf=n(L,"LI",{});var oEe=s(zf);Iee=n(oEe,"STRONG",{});var INr=s(Iee);VOe=r(INr,"dpt"),INr.forEach(t),XOe=r(oEe," \u2014 "),Q$=n(oEe,"A",{href:!0});var qNr=s(Q$);zOe=r(qNr,"DPTConfig"),qNr.forEach(t),QOe=r(oEe," (DPT model)"),oEe.forEach(t),WOe=i(L),Qf=n(L,"LI",{});var rEe=s(Qf);qee=n(rEe,"STRONG",{});var NNr=s(qee);HOe=r(NNr,"electra"),NNr.forEach(t),UOe=r(rEe," \u2014 "),W$=n(rEe,"A",{href:!0});var jNr=s(W$);JOe=r(jNr,"ElectraConfig"),jNr.forEach(t),YOe=r(rEe," (ELECTRA model)"),rEe.forEach(t),KOe=i(L),Wf=n(L,"LI",{});var tEe=s(Wf);Nee=n(tEe,"STRONG",{});var DNr=s(Nee);ZOe=r(DNr,"encoder-decoder"),DNr.forEach(t),eVe=r(tEe," \u2014 "),H$=n(tEe,"A",{href:!0});var GNr=s(H$);oVe=r(GNr,"EncoderDecoderConfig"),GNr.forEach(t),rVe=r(tEe," (Encoder decoder model)"),tEe.forEach(t),tVe=i(L),Hf=n(L,"LI",{});var aEe=s(Hf);jee=n(aEe,"STRONG",{});var ONr=s(jee);aVe=r(ONr,"flaubert"),ONr.forEach(t),nVe=r(aEe," \u2014 "),U$=n(aEe,"A",{href:!0});var VNr=s(U$);sVe=r(VNr,"FlaubertConfig"),VNr.forEach(t),lVe=r(aEe," (FlauBERT model)"),aEe.forEach(t),iVe=i(L),Uf=n(L,"LI",{});var nEe=s(Uf);Dee=n(nEe,"STRONG",{});var XNr=s(Dee);dVe=r(XNr,"fnet"),XNr.forEach(t),cVe=r(nEe," \u2014 "),J$=n(nEe,"A",{href:!0});var zNr=s(J$);fVe=r(zNr,"FNetConfig"),zNr.forEach(t),mVe=r(nEe," (FNet model)"),nEe.forEach(t),gVe=i(L),Jf=n(L,"LI",{});var sEe=s(Jf);Gee=n(sEe,"STRONG",{});var QNr=s(Gee);hVe=r(QNr,"fsmt"),QNr.forEach(t),pVe=r(sEe," \u2014 "),Y$=n(sEe,"A",{href:!0});var WNr=s(Y$);uVe=r(WNr,"FSMTConfig"),WNr.forEach(t),_Ve=r(sEe," (FairSeq Machine-Translation model)"),sEe.forEach(t),bVe=i(L),Yf=n(L,"LI",{});var lEe=s(Yf);Oee=n(lEe,"STRONG",{});var HNr=s(Oee);vVe=r(HNr,"funnel"),HNr.forEach(t),FVe=r(lEe," \u2014 "),K$=n(lEe,"A",{href:!0});var UNr=s(K$);TVe=r(UNr,"FunnelConfig"),UNr.forEach(t),MVe=r(lEe," (Funnel Transformer model)"),lEe.forEach(t),EVe=i(L),Kf=n(L,"LI",{});var iEe=s(Kf);Vee=n(iEe,"STRONG",{});var JNr=s(Vee);CVe=r(JNr,"glpn"),JNr.forEach(t),wVe=r(iEe," \u2014 "),Z$=n(iEe,"A",{href:!0});var YNr=s(Z$);AVe=r(YNr,"GLPNConfig"),YNr.forEach(t),yVe=r(iEe," (GLPN model)"),iEe.forEach(t),LVe=i(L),Zf=n(L,"LI",{});var dEe=s(Zf);Xee=n(dEe,"STRONG",{});var KNr=s(Xee);xVe=r(KNr,"gpt2"),KNr.forEach(t),$Ve=r(dEe," \u2014 "),ek=n(dEe,"A",{href:!0});var ZNr=s(ek);kVe=r(ZNr,"GPT2Config"),ZNr.forEach(t),SVe=r(dEe," (OpenAI GPT-2 model)"),dEe.forEach(t),RVe=i(L),em=n(L,"LI",{});var cEe=s(em);zee=n(cEe,"STRONG",{});var ejr=s(zee);BVe=r(ejr,"gpt_neo"),ejr.forEach(t),PVe=r(cEe," \u2014 "),ok=n(cEe,"A",{href:!0});var ojr=s(ok);IVe=r(ojr,"GPTNeoConfig"),ojr.forEach(t),qVe=r(cEe," (GPT Neo model)"),cEe.forEach(t),NVe=i(L),om=n(L,"LI",{});var fEe=s(om);Qee=n(fEe,"STRONG",{});var rjr=s(Qee);jVe=r(rjr,"gptj"),rjr.forEach(t),DVe=r(fEe," \u2014 "),rk=n(fEe,"A",{href:!0});var tjr=s(rk);GVe=r(tjr,"GPTJConfig"),tjr.forEach(t),OVe=r(fEe," (GPT-J model)"),fEe.forEach(t),VVe=i(L),rm=n(L,"LI",{});var mEe=s(rm);Wee=n(mEe,"STRONG",{});var ajr=s(Wee);XVe=r(ajr,"hubert"),ajr.forEach(t),zVe=r(mEe," \u2014 "),tk=n(mEe,"A",{href:!0});var njr=s(tk);QVe=r(njr,"HubertConfig"),njr.forEach(t),WVe=r(mEe," (Hubert model)"),mEe.forEach(t),HVe=i(L),tm=n(L,"LI",{});var gEe=s(tm);Hee=n(gEe,"STRONG",{});var sjr=s(Hee);UVe=r(sjr,"ibert"),sjr.forEach(t),JVe=r(gEe," \u2014 "),ak=n(gEe,"A",{href:!0});var ljr=s(ak);YVe=r(ljr,"IBertConfig"),ljr.forEach(t),KVe=r(gEe," (I-BERT model)"),gEe.forEach(t),ZVe=i(L),am=n(L,"LI",{});var hEe=s(am);Uee=n(hEe,"STRONG",{});var ijr=s(Uee);eXe=r(ijr,"imagegpt"),ijr.forEach(t),oXe=r(hEe," \u2014 "),nk=n(hEe,"A",{href:!0});var djr=s(nk);rXe=r(djr,"ImageGPTConfig"),djr.forEach(t),tXe=r(hEe," (ImageGPT model)"),hEe.forEach(t),aXe=i(L),nm=n(L,"LI",{});var pEe=s(nm);Jee=n(pEe,"STRONG",{});var cjr=s(Jee);nXe=r(cjr,"layoutlm"),cjr.forEach(t),sXe=r(pEe," \u2014 "),sk=n(pEe,"A",{href:!0});var fjr=s(sk);lXe=r(fjr,"LayoutLMConfig"),fjr.forEach(t),iXe=r(pEe," (LayoutLM model)"),pEe.forEach(t),dXe=i(L),sm=n(L,"LI",{});var uEe=s(sm);Yee=n(uEe,"STRONG",{});var mjr=s(Yee);cXe=r(mjr,"layoutlmv2"),mjr.forEach(t),fXe=r(uEe," \u2014 "),lk=n(uEe,"A",{href:!0});var gjr=s(lk);mXe=r(gjr,"LayoutLMv2Config"),gjr.forEach(t),gXe=r(uEe," (LayoutLMv2 model)"),uEe.forEach(t),hXe=i(L),lm=n(L,"LI",{});var _Ee=s(lm);Kee=n(_Ee,"STRONG",{});var hjr=s(Kee);pXe=r(hjr,"layoutlmv3"),hjr.forEach(t),uXe=r(_Ee," \u2014 "),ik=n(_Ee,"A",{href:!0});var pjr=s(ik);_Xe=r(pjr,"LayoutLMv3Config"),pjr.forEach(t),bXe=r(_Ee," (LayoutLMv3 model)"),_Ee.forEach(t),vXe=i(L),im=n(L,"LI",{});var bEe=s(im);Zee=n(bEe,"STRONG",{});var ujr=s(Zee);FXe=r(ujr,"led"),ujr.forEach(t),TXe=r(bEe," \u2014 "),dk=n(bEe,"A",{href:!0});var _jr=s(dk);MXe=r(_jr,"LEDConfig"),_jr.forEach(t),EXe=r(bEe," (LED model)"),bEe.forEach(t),CXe=i(L),dm=n(L,"LI",{});var vEe=s(dm);eoe=n(vEe,"STRONG",{});var bjr=s(eoe);wXe=r(bjr,"longformer"),bjr.forEach(t),AXe=r(vEe," \u2014 "),ck=n(vEe,"A",{href:!0});var vjr=s(ck);yXe=r(vjr,"LongformerConfig"),vjr.forEach(t),LXe=r(vEe," (Longformer model)"),vEe.forEach(t),xXe=i(L),cm=n(L,"LI",{});var FEe=s(cm);ooe=n(FEe,"STRONG",{});var Fjr=s(ooe);$Xe=r(Fjr,"luke"),Fjr.forEach(t),kXe=r(FEe," \u2014 "),fk=n(FEe,"A",{href:!0});var Tjr=s(fk);SXe=r(Tjr,"LukeConfig"),Tjr.forEach(t),RXe=r(FEe," (LUKE model)"),FEe.forEach(t),BXe=i(L),fm=n(L,"LI",{});var TEe=s(fm);roe=n(TEe,"STRONG",{});var Mjr=s(roe);PXe=r(Mjr,"lxmert"),Mjr.forEach(t),IXe=r(TEe," \u2014 "),mk=n(TEe,"A",{href:!0});var Ejr=s(mk);qXe=r(Ejr,"LxmertConfig"),Ejr.forEach(t),NXe=r(TEe," (LXMERT model)"),TEe.forEach(t),jXe=i(L),mm=n(L,"LI",{});var MEe=s(mm);toe=n(MEe,"STRONG",{});var Cjr=s(toe);DXe=r(Cjr,"m2m_100"),Cjr.forEach(t),GXe=r(MEe," \u2014 "),gk=n(MEe,"A",{href:!0});var wjr=s(gk);OXe=r(wjr,"M2M100Config"),wjr.forEach(t),VXe=r(MEe," (M2M100 model)"),MEe.forEach(t),XXe=i(L),gm=n(L,"LI",{});var EEe=s(gm);aoe=n(EEe,"STRONG",{});var Ajr=s(aoe);zXe=r(Ajr,"marian"),Ajr.forEach(t),QXe=r(EEe," \u2014 "),hk=n(EEe,"A",{href:!0});var yjr=s(hk);WXe=r(yjr,"MarianConfig"),yjr.forEach(t),HXe=r(EEe," (Marian model)"),EEe.forEach(t),UXe=i(L),hm=n(L,"LI",{});var CEe=s(hm);noe=n(CEe,"STRONG",{});var Ljr=s(noe);JXe=r(Ljr,"maskformer"),Ljr.forEach(t),YXe=r(CEe," \u2014 "),pk=n(CEe,"A",{href:!0});var xjr=s(pk);KXe=r(xjr,"MaskFormerConfig"),xjr.forEach(t),ZXe=r(CEe," (MaskFormer model)"),CEe.forEach(t),eze=i(L),pm=n(L,"LI",{});var wEe=s(pm);soe=n(wEe,"STRONG",{});var $jr=s(soe);oze=r($jr,"mbart"),$jr.forEach(t),rze=r(wEe," \u2014 "),uk=n(wEe,"A",{href:!0});var kjr=s(uk);tze=r(kjr,"MBartConfig"),kjr.forEach(t),aze=r(wEe," (mBART model)"),wEe.forEach(t),nze=i(L),um=n(L,"LI",{});var AEe=s(um);loe=n(AEe,"STRONG",{});var Sjr=s(loe);sze=r(Sjr,"megatron-bert"),Sjr.forEach(t),lze=r(AEe," \u2014 "),_k=n(AEe,"A",{href:!0});var Rjr=s(_k);ize=r(Rjr,"MegatronBertConfig"),Rjr.forEach(t),dze=r(AEe," (MegatronBert model)"),AEe.forEach(t),cze=i(L),_m=n(L,"LI",{});var yEe=s(_m);ioe=n(yEe,"STRONG",{});var Bjr=s(ioe);fze=r(Bjr,"mobilebert"),Bjr.forEach(t),mze=r(yEe," \u2014 "),bk=n(yEe,"A",{href:!0});var Pjr=s(bk);gze=r(Pjr,"MobileBertConfig"),Pjr.forEach(t),hze=r(yEe," (MobileBERT model)"),yEe.forEach(t),pze=i(L),bm=n(L,"LI",{});var LEe=s(bm);doe=n(LEe,"STRONG",{});var Ijr=s(doe);uze=r(Ijr,"mpnet"),Ijr.forEach(t),_ze=r(LEe," \u2014 "),vk=n(LEe,"A",{href:!0});var qjr=s(vk);bze=r(qjr,"MPNetConfig"),qjr.forEach(t),vze=r(LEe," (MPNet model)"),LEe.forEach(t),Fze=i(L),vm=n(L,"LI",{});var xEe=s(vm);coe=n(xEe,"STRONG",{});var Njr=s(coe);Tze=r(Njr,"mt5"),Njr.forEach(t),Mze=r(xEe," \u2014 "),Fk=n(xEe,"A",{href:!0});var jjr=s(Fk);Eze=r(jjr,"MT5Config"),jjr.forEach(t),Cze=r(xEe," (mT5 model)"),xEe.forEach(t),wze=i(L),Fm=n(L,"LI",{});var $Ee=s(Fm);foe=n($Ee,"STRONG",{});var Djr=s(foe);Aze=r(Djr,"nystromformer"),Djr.forEach(t),yze=r($Ee," \u2014 "),Tk=n($Ee,"A",{href:!0});var Gjr=s(Tk);Lze=r(Gjr,"NystromformerConfig"),Gjr.forEach(t),xze=r($Ee," (Nystromformer model)"),$Ee.forEach(t),$ze=i(L),Tm=n(L,"LI",{});var kEe=s(Tm);moe=n(kEe,"STRONG",{});var Ojr=s(moe);kze=r(Ojr,"openai-gpt"),Ojr.forEach(t),Sze=r(kEe," \u2014 "),Mk=n(kEe,"A",{href:!0});var Vjr=s(Mk);Rze=r(Vjr,"OpenAIGPTConfig"),Vjr.forEach(t),Bze=r(kEe," (OpenAI GPT model)"),kEe.forEach(t),Pze=i(L),Mm=n(L,"LI",{});var SEe=s(Mm);goe=n(SEe,"STRONG",{});var Xjr=s(goe);Ize=r(Xjr,"pegasus"),Xjr.forEach(t),qze=r(SEe," \u2014 "),Ek=n(SEe,"A",{href:!0});var zjr=s(Ek);Nze=r(zjr,"PegasusConfig"),zjr.forEach(t),jze=r(SEe," (Pegasus model)"),SEe.forEach(t),Dze=i(L),Em=n(L,"LI",{});var REe=s(Em);hoe=n(REe,"STRONG",{});var Qjr=s(hoe);Gze=r(Qjr,"perceiver"),Qjr.forEach(t),Oze=r(REe," \u2014 "),Ck=n(REe,"A",{href:!0});var Wjr=s(Ck);Vze=r(Wjr,"PerceiverConfig"),Wjr.forEach(t),Xze=r(REe," (Perceiver model)"),REe.forEach(t),zze=i(L),Cm=n(L,"LI",{});var BEe=s(Cm);poe=n(BEe,"STRONG",{});var Hjr=s(poe);Qze=r(Hjr,"plbart"),Hjr.forEach(t),Wze=r(BEe," \u2014 "),wk=n(BEe,"A",{href:!0});var Ujr=s(wk);Hze=r(Ujr,"PLBartConfig"),Ujr.forEach(t),Uze=r(BEe," (PLBart model)"),BEe.forEach(t),Jze=i(L),wm=n(L,"LI",{});var PEe=s(wm);uoe=n(PEe,"STRONG",{});var Jjr=s(uoe);Yze=r(Jjr,"poolformer"),Jjr.forEach(t),Kze=r(PEe," \u2014 "),Ak=n(PEe,"A",{href:!0});var Yjr=s(Ak);Zze=r(Yjr,"PoolFormerConfig"),Yjr.forEach(t),eQe=r(PEe," (PoolFormer model)"),PEe.forEach(t),oQe=i(L),Am=n(L,"LI",{});var IEe=s(Am);_oe=n(IEe,"STRONG",{});var Kjr=s(_oe);rQe=r(Kjr,"prophetnet"),Kjr.forEach(t),tQe=r(IEe," \u2014 "),yk=n(IEe,"A",{href:!0});var Zjr=s(yk);aQe=r(Zjr,"ProphetNetConfig"),Zjr.forEach(t),nQe=r(IEe," (ProphetNet model)"),IEe.forEach(t),sQe=i(L),ym=n(L,"LI",{});var qEe=s(ym);boe=n(qEe,"STRONG",{});var eDr=s(boe);lQe=r(eDr,"qdqbert"),eDr.forEach(t),iQe=r(qEe," \u2014 "),Lk=n(qEe,"A",{href:!0});var oDr=s(Lk);dQe=r(oDr,"QDQBertConfig"),oDr.forEach(t),cQe=r(qEe," (QDQBert model)"),qEe.forEach(t),fQe=i(L),Lm=n(L,"LI",{});var NEe=s(Lm);voe=n(NEe,"STRONG",{});var rDr=s(voe);mQe=r(rDr,"rag"),rDr.forEach(t),gQe=r(NEe," \u2014 "),xk=n(NEe,"A",{href:!0});var tDr=s(xk);hQe=r(tDr,"RagConfig"),tDr.forEach(t),pQe=r(NEe," (RAG model)"),NEe.forEach(t),uQe=i(L),xm=n(L,"LI",{});var jEe=s(xm);Foe=n(jEe,"STRONG",{});var aDr=s(Foe);_Qe=r(aDr,"realm"),aDr.forEach(t),bQe=r(jEe," \u2014 "),$k=n(jEe,"A",{href:!0});var nDr=s($k);vQe=r(nDr,"RealmConfig"),nDr.forEach(t),FQe=r(jEe," (Realm model)"),jEe.forEach(t),TQe=i(L),$m=n(L,"LI",{});var DEe=s($m);Toe=n(DEe,"STRONG",{});var sDr=s(Toe);MQe=r(sDr,"reformer"),sDr.forEach(t),EQe=r(DEe," \u2014 "),kk=n(DEe,"A",{href:!0});var lDr=s(kk);CQe=r(lDr,"ReformerConfig"),lDr.forEach(t),wQe=r(DEe," (Reformer model)"),DEe.forEach(t),AQe=i(L),km=n(L,"LI",{});var GEe=s(km);Moe=n(GEe,"STRONG",{});var iDr=s(Moe);yQe=r(iDr,"regnet"),iDr.forEach(t),LQe=r(GEe," \u2014 "),Sk=n(GEe,"A",{href:!0});var dDr=s(Sk);xQe=r(dDr,"RegNetConfig"),dDr.forEach(t),$Qe=r(GEe," (RegNet model)"),GEe.forEach(t),kQe=i(L),Sm=n(L,"LI",{});var OEe=s(Sm);Eoe=n(OEe,"STRONG",{});var cDr=s(Eoe);SQe=r(cDr,"rembert"),cDr.forEach(t),RQe=r(OEe," \u2014 "),Rk=n(OEe,"A",{href:!0});var fDr=s(Rk);BQe=r(fDr,"RemBertConfig"),fDr.forEach(t),PQe=r(OEe," (RemBERT model)"),OEe.forEach(t),IQe=i(L),Rm=n(L,"LI",{});var VEe=s(Rm);Coe=n(VEe,"STRONG",{});var mDr=s(Coe);qQe=r(mDr,"resnet"),mDr.forEach(t),NQe=r(VEe," \u2014 "),Bk=n(VEe,"A",{href:!0});var gDr=s(Bk);jQe=r(gDr,"ResNetConfig"),gDr.forEach(t),DQe=r(VEe," (ResNet model)"),VEe.forEach(t),GQe=i(L),Bm=n(L,"LI",{});var XEe=s(Bm);woe=n(XEe,"STRONG",{});var hDr=s(woe);OQe=r(hDr,"retribert"),hDr.forEach(t),VQe=r(XEe," \u2014 "),Pk=n(XEe,"A",{href:!0});var pDr=s(Pk);XQe=r(pDr,"RetriBertConfig"),pDr.forEach(t),zQe=r(XEe," (RetriBERT model)"),XEe.forEach(t),QQe=i(L),Pm=n(L,"LI",{});var zEe=s(Pm);Aoe=n(zEe,"STRONG",{});var uDr=s(Aoe);WQe=r(uDr,"roberta"),uDr.forEach(t),HQe=r(zEe," \u2014 "),Ik=n(zEe,"A",{href:!0});var _Dr=s(Ik);UQe=r(_Dr,"RobertaConfig"),_Dr.forEach(t),JQe=r(zEe," (RoBERTa model)"),zEe.forEach(t),YQe=i(L),Im=n(L,"LI",{});var QEe=s(Im);yoe=n(QEe,"STRONG",{});var bDr=s(yoe);KQe=r(bDr,"roformer"),bDr.forEach(t),ZQe=r(QEe," \u2014 "),qk=n(QEe,"A",{href:!0});var vDr=s(qk);eWe=r(vDr,"RoFormerConfig"),vDr.forEach(t),oWe=r(QEe," (RoFormer model)"),QEe.forEach(t),rWe=i(L),qm=n(L,"LI",{});var WEe=s(qm);Loe=n(WEe,"STRONG",{});var FDr=s(Loe);tWe=r(FDr,"segformer"),FDr.forEach(t),aWe=r(WEe," \u2014 "),Nk=n(WEe,"A",{href:!0});var TDr=s(Nk);nWe=r(TDr,"SegformerConfig"),TDr.forEach(t),sWe=r(WEe," (SegFormer model)"),WEe.forEach(t),lWe=i(L),Nm=n(L,"LI",{});var HEe=s(Nm);xoe=n(HEe,"STRONG",{});var MDr=s(xoe);iWe=r(MDr,"sew"),MDr.forEach(t),dWe=r(HEe," \u2014 "),jk=n(HEe,"A",{href:!0});var EDr=s(jk);cWe=r(EDr,"SEWConfig"),EDr.forEach(t),fWe=r(HEe," (SEW model)"),HEe.forEach(t),mWe=i(L),jm=n(L,"LI",{});var UEe=s(jm);$oe=n(UEe,"STRONG",{});var CDr=s($oe);gWe=r(CDr,"sew-d"),CDr.forEach(t),hWe=r(UEe," \u2014 "),Dk=n(UEe,"A",{href:!0});var wDr=s(Dk);pWe=r(wDr,"SEWDConfig"),wDr.forEach(t),uWe=r(UEe," (SEW-D model)"),UEe.forEach(t),_We=i(L),Dm=n(L,"LI",{});var JEe=s(Dm);koe=n(JEe,"STRONG",{});var ADr=s(koe);bWe=r(ADr,"speech-encoder-decoder"),ADr.forEach(t),vWe=r(JEe," \u2014 "),Gk=n(JEe,"A",{href:!0});var yDr=s(Gk);FWe=r(yDr,"SpeechEncoderDecoderConfig"),yDr.forEach(t),TWe=r(JEe," (Speech Encoder decoder model)"),JEe.forEach(t),MWe=i(L),Gm=n(L,"LI",{});var YEe=s(Gm);Soe=n(YEe,"STRONG",{});var LDr=s(Soe);EWe=r(LDr,"speech_to_text"),LDr.forEach(t),CWe=r(YEe," \u2014 "),Ok=n(YEe,"A",{href:!0});var xDr=s(Ok);wWe=r(xDr,"Speech2TextConfig"),xDr.forEach(t),AWe=r(YEe," (Speech2Text model)"),YEe.forEach(t),yWe=i(L),Om=n(L,"LI",{});var KEe=s(Om);Roe=n(KEe,"STRONG",{});var $Dr=s(Roe);LWe=r($Dr,"speech_to_text_2"),$Dr.forEach(t),xWe=r(KEe," \u2014 "),Vk=n(KEe,"A",{href:!0});var kDr=s(Vk);$We=r(kDr,"Speech2Text2Config"),kDr.forEach(t),kWe=r(KEe," (Speech2Text2 model)"),KEe.forEach(t),SWe=i(L),Vm=n(L,"LI",{});var ZEe=s(Vm);Boe=n(ZEe,"STRONG",{});var SDr=s(Boe);RWe=r(SDr,"splinter"),SDr.forEach(t),BWe=r(ZEe," \u2014 "),Xk=n(ZEe,"A",{href:!0});var RDr=s(Xk);PWe=r(RDr,"SplinterConfig"),RDr.forEach(t),IWe=r(ZEe," (Splinter model)"),ZEe.forEach(t),qWe=i(L),Xm=n(L,"LI",{});var e5e=s(Xm);Poe=n(e5e,"STRONG",{});var BDr=s(Poe);NWe=r(BDr,"squeezebert"),BDr.forEach(t),jWe=r(e5e," \u2014 "),zk=n(e5e,"A",{href:!0});var PDr=s(zk);DWe=r(PDr,"SqueezeBertConfig"),PDr.forEach(t),GWe=r(e5e," (SqueezeBERT model)"),e5e.forEach(t),OWe=i(L),zm=n(L,"LI",{});var o5e=s(zm);Ioe=n(o5e,"STRONG",{});var IDr=s(Ioe);VWe=r(IDr,"swin"),IDr.forEach(t),XWe=r(o5e," \u2014 "),Qk=n(o5e,"A",{href:!0});var qDr=s(Qk);zWe=r(qDr,"SwinConfig"),qDr.forEach(t),QWe=r(o5e," (Swin model)"),o5e.forEach(t),WWe=i(L),Qm=n(L,"LI",{});var r5e=s(Qm);qoe=n(r5e,"STRONG",{});var NDr=s(qoe);HWe=r(NDr,"t5"),NDr.forEach(t),UWe=r(r5e," \u2014 "),Wk=n(r5e,"A",{href:!0});var jDr=s(Wk);JWe=r(jDr,"T5Config"),jDr.forEach(t),YWe=r(r5e," (T5 model)"),r5e.forEach(t),KWe=i(L),Wm=n(L,"LI",{});var t5e=s(Wm);Noe=n(t5e,"STRONG",{});var DDr=s(Noe);ZWe=r(DDr,"tapas"),DDr.forEach(t),eHe=r(t5e," \u2014 "),Hk=n(t5e,"A",{href:!0});var GDr=s(Hk);oHe=r(GDr,"TapasConfig"),GDr.forEach(t),rHe=r(t5e," (TAPAS model)"),t5e.forEach(t),tHe=i(L),Hm=n(L,"LI",{});var a5e=s(Hm);joe=n(a5e,"STRONG",{});var ODr=s(joe);aHe=r(ODr,"tapex"),ODr.forEach(t),nHe=r(a5e," \u2014 "),Uk=n(a5e,"A",{href:!0});var VDr=s(Uk);sHe=r(VDr,"BartConfig"),VDr.forEach(t),lHe=r(a5e," (TAPEX model)"),a5e.forEach(t),iHe=i(L),Um=n(L,"LI",{});var n5e=s(Um);Doe=n(n5e,"STRONG",{});var XDr=s(Doe);dHe=r(XDr,"transfo-xl"),XDr.forEach(t),cHe=r(n5e," \u2014 "),Jk=n(n5e,"A",{href:!0});var zDr=s(Jk);fHe=r(zDr,"TransfoXLConfig"),zDr.forEach(t),mHe=r(n5e," (Transformer-XL model)"),n5e.forEach(t),gHe=i(L),Jm=n(L,"LI",{});var s5e=s(Jm);Goe=n(s5e,"STRONG",{});var QDr=s(Goe);hHe=r(QDr,"trocr"),QDr.forEach(t),pHe=r(s5e," \u2014 "),Yk=n(s5e,"A",{href:!0});var WDr=s(Yk);uHe=r(WDr,"TrOCRConfig"),WDr.forEach(t),_He=r(s5e," (TrOCR model)"),s5e.forEach(t),bHe=i(L),Ym=n(L,"LI",{});var l5e=s(Ym);Ooe=n(l5e,"STRONG",{});var HDr=s(Ooe);vHe=r(HDr,"unispeech"),HDr.forEach(t),FHe=r(l5e," \u2014 "),Kk=n(l5e,"A",{href:!0});var UDr=s(Kk);THe=r(UDr,"UniSpeechConfig"),UDr.forEach(t),MHe=r(l5e," (UniSpeech model)"),l5e.forEach(t),EHe=i(L),Km=n(L,"LI",{});var i5e=s(Km);Voe=n(i5e,"STRONG",{});var JDr=s(Voe);CHe=r(JDr,"unispeech-sat"),JDr.forEach(t),wHe=r(i5e," \u2014 "),Zk=n(i5e,"A",{href:!0});var YDr=s(Zk);AHe=r(YDr,"UniSpeechSatConfig"),YDr.forEach(t),yHe=r(i5e," (UniSpeechSat model)"),i5e.forEach(t),LHe=i(L),Zm=n(L,"LI",{});var d5e=s(Zm);Xoe=n(d5e,"STRONG",{});var KDr=s(Xoe);xHe=r(KDr,"van"),KDr.forEach(t),$He=r(d5e," \u2014 "),eS=n(d5e,"A",{href:!0});var ZDr=s(eS);kHe=r(ZDr,"VanConfig"),ZDr.forEach(t),SHe=r(d5e," (VAN model)"),d5e.forEach(t),RHe=i(L),eg=n(L,"LI",{});var c5e=s(eg);zoe=n(c5e,"STRONG",{});var eGr=s(zoe);BHe=r(eGr,"vilt"),eGr.forEach(t),PHe=r(c5e," \u2014 "),oS=n(c5e,"A",{href:!0});var oGr=s(oS);IHe=r(oGr,"ViltConfig"),oGr.forEach(t),qHe=r(c5e," (ViLT model)"),c5e.forEach(t),NHe=i(L),og=n(L,"LI",{});var f5e=s(og);Qoe=n(f5e,"STRONG",{});var rGr=s(Qoe);jHe=r(rGr,"vision-encoder-decoder"),rGr.forEach(t),DHe=r(f5e," \u2014 "),rS=n(f5e,"A",{href:!0});var tGr=s(rS);GHe=r(tGr,"VisionEncoderDecoderConfig"),tGr.forEach(t),OHe=r(f5e," (Vision Encoder decoder model)"),f5e.forEach(t),VHe=i(L),rg=n(L,"LI",{});var m5e=s(rg);Woe=n(m5e,"STRONG",{});var aGr=s(Woe);XHe=r(aGr,"vision-text-dual-encoder"),aGr.forEach(t),zHe=r(m5e," \u2014 "),tS=n(m5e,"A",{href:!0});var nGr=s(tS);QHe=r(nGr,"VisionTextDualEncoderConfig"),nGr.forEach(t),WHe=r(m5e," (VisionTextDualEncoder model)"),m5e.forEach(t),HHe=i(L),tg=n(L,"LI",{});var g5e=s(tg);Hoe=n(g5e,"STRONG",{});var sGr=s(Hoe);UHe=r(sGr,"visual_bert"),sGr.forEach(t),JHe=r(g5e," \u2014 "),aS=n(g5e,"A",{href:!0});var lGr=s(aS);YHe=r(lGr,"VisualBertConfig"),lGr.forEach(t),KHe=r(g5e," (VisualBert model)"),g5e.forEach(t),ZHe=i(L),ag=n(L,"LI",{});var h5e=s(ag);Uoe=n(h5e,"STRONG",{});var iGr=s(Uoe);eUe=r(iGr,"vit"),iGr.forEach(t),oUe=r(h5e," \u2014 "),nS=n(h5e,"A",{href:!0});var dGr=s(nS);rUe=r(dGr,"ViTConfig"),dGr.forEach(t),tUe=r(h5e," (ViT model)"),h5e.forEach(t),aUe=i(L),ng=n(L,"LI",{});var p5e=s(ng);Joe=n(p5e,"STRONG",{});var cGr=s(Joe);nUe=r(cGr,"vit_mae"),cGr.forEach(t),sUe=r(p5e," \u2014 "),sS=n(p5e,"A",{href:!0});var fGr=s(sS);lUe=r(fGr,"ViTMAEConfig"),fGr.forEach(t),iUe=r(p5e," (ViTMAE model)"),p5e.forEach(t),dUe=i(L),sg=n(L,"LI",{});var u5e=s(sg);Yoe=n(u5e,"STRONG",{});var mGr=s(Yoe);cUe=r(mGr,"wav2vec2"),mGr.forEach(t),fUe=r(u5e," \u2014 "),lS=n(u5e,"A",{href:!0});var gGr=s(lS);mUe=r(gGr,"Wav2Vec2Config"),gGr.forEach(t),gUe=r(u5e," (Wav2Vec2 model)"),u5e.forEach(t),hUe=i(L),lg=n(L,"LI",{});var _5e=s(lg);Koe=n(_5e,"STRONG",{});var hGr=s(Koe);pUe=r(hGr,"wavlm"),hGr.forEach(t),uUe=r(_5e," \u2014 "),iS=n(_5e,"A",{href:!0});var pGr=s(iS);_Ue=r(pGr,"WavLMConfig"),pGr.forEach(t),bUe=r(_5e," (WavLM model)"),_5e.forEach(t),vUe=i(L),ig=n(L,"LI",{});var b5e=s(ig);Zoe=n(b5e,"STRONG",{});var uGr=s(Zoe);FUe=r(uGr,"xglm"),uGr.forEach(t),TUe=r(b5e," \u2014 "),dS=n(b5e,"A",{href:!0});var _Gr=s(dS);MUe=r(_Gr,"XGLMConfig"),_Gr.forEach(t),EUe=r(b5e," (XGLM model)"),b5e.forEach(t),CUe=i(L),dg=n(L,"LI",{});var v5e=s(dg);ere=n(v5e,"STRONG",{});var bGr=s(ere);wUe=r(bGr,"xlm"),bGr.forEach(t),AUe=r(v5e," \u2014 "),cS=n(v5e,"A",{href:!0});var vGr=s(cS);yUe=r(vGr,"XLMConfig"),vGr.forEach(t),LUe=r(v5e," (XLM model)"),v5e.forEach(t),xUe=i(L),cg=n(L,"LI",{});var F5e=s(cg);ore=n(F5e,"STRONG",{});var FGr=s(ore);$Ue=r(FGr,"xlm-prophetnet"),FGr.forEach(t),kUe=r(F5e," \u2014 "),fS=n(F5e,"A",{href:!0});var TGr=s(fS);SUe=r(TGr,"XLMProphetNetConfig"),TGr.forEach(t),RUe=r(F5e," (XLMProphetNet model)"),F5e.forEach(t),BUe=i(L),fg=n(L,"LI",{});var T5e=s(fg);rre=n(T5e,"STRONG",{});var MGr=s(rre);PUe=r(MGr,"xlm-roberta"),MGr.forEach(t),IUe=r(T5e," \u2014 "),mS=n(T5e,"A",{href:!0});var EGr=s(mS);qUe=r(EGr,"XLMRobertaConfig"),EGr.forEach(t),NUe=r(T5e," (XLM-RoBERTa model)"),T5e.forEach(t),jUe=i(L),mg=n(L,"LI",{});var M5e=s(mg);tre=n(M5e,"STRONG",{});var CGr=s(tre);DUe=r(CGr,"xlm-roberta-xl"),CGr.forEach(t),GUe=r(M5e," \u2014 "),gS=n(M5e,"A",{href:!0});var wGr=s(gS);OUe=r(wGr,"XLMRobertaXLConfig"),wGr.forEach(t),VUe=r(M5e," (XLM-RoBERTa-XL model)"),M5e.forEach(t),XUe=i(L),gg=n(L,"LI",{});var E5e=s(gg);are=n(E5e,"STRONG",{});var AGr=s(are);zUe=r(AGr,"xlnet"),AGr.forEach(t),QUe=r(E5e," \u2014 "),hS=n(E5e,"A",{href:!0});var yGr=s(hS);WUe=r(yGr,"XLNetConfig"),yGr.forEach(t),HUe=r(E5e," (XLNet model)"),E5e.forEach(t),UUe=i(L),hg=n(L,"LI",{});var C5e=s(hg);nre=n(C5e,"STRONG",{});var LGr=s(nre);JUe=r(LGr,"yolos"),LGr.forEach(t),YUe=r(C5e," \u2014 "),pS=n(C5e,"A",{href:!0});var xGr=s(pS);KUe=r(xGr,"YolosConfig"),xGr.forEach(t),ZUe=r(C5e," (YOLOS model)"),C5e.forEach(t),eJe=i(L),pg=n(L,"LI",{});var w5e=s(pg);sre=n(w5e,"STRONG",{});var $Gr=s(sre);oJe=r($Gr,"yoso"),$Gr.forEach(t),rJe=r(w5e," \u2014 "),uS=n(w5e,"A",{href:!0});var kGr=s(uS);tJe=r(kGr,"YosoConfig"),kGr.forEach(t),aJe=r(w5e," (YOSO model)"),w5e.forEach(t),L.forEach(t),nJe=i(Zr),T(ug.$$.fragment,Zr),Zr.forEach(t),sJe=i(Kr),_g=n(Kr,"DIV",{class:!0});var Xqe=s(_g);T(tA.$$.fragment,Xqe),lJe=i(Xqe),lre=n(Xqe,"P",{});var SGr=s(lre);iJe=r(SGr,"Register a new configuration for this class."),SGr.forEach(t),Xqe.forEach(t),Kr.forEach(t),WPe=i(f),bi=n(f,"H2",{class:!0});var zqe=s(bi);bg=n(zqe,"A",{id:!0,class:!0,href:!0});var RGr=s(bg);ire=n(RGr,"SPAN",{});var BGr=s(ire);T(aA.$$.fragment,BGr),BGr.forEach(t),RGr.forEach(t),dJe=i(zqe),dre=n(zqe,"SPAN",{});var PGr=s(dre);cJe=r(PGr,"AutoTokenizer"),PGr.forEach(t),zqe.forEach(t),HPe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(nA.$$.fragment,Is),fJe=i(Is),sA=n(Is,"P",{});var Qqe=s(sA);mJe=r(Qqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_S=n(Qqe,"A",{href:!0});var IGr=s(_S);gJe=r(IGr,"AutoTokenizer.from_pretrained()"),IGr.forEach(t),hJe=r(Qqe," class method."),Qqe.forEach(t),pJe=i(Is),lA=n(Is,"P",{});var Wqe=s(lA);uJe=r(Wqe,"This class cannot be instantiated directly using "),cre=n(Wqe,"CODE",{});var qGr=s(cre);_Je=r(qGr,"__init__()"),qGr.forEach(t),bJe=r(Wqe," (throws an error)."),Wqe.forEach(t),vJe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(iA.$$.fragment,qs),FJe=i(qs),fre=n(qs,"P",{});var NGr=s(fre);TJe=r(NGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),NGr.forEach(t),MJe=i(qs),Ca=n(qs,"P",{});var YC=s(Ca);EJe=r(YC,"The tokenizer class to instantiate is selected based on the "),mre=n(YC,"CODE",{});var jGr=s(mre);CJe=r(jGr,"model_type"),jGr.forEach(t),wJe=r(YC,` property of the config object (either
passed as an argument or loaded from `),gre=n(YC,"CODE",{});var DGr=s(gre);AJe=r(DGr,"pretrained_model_name_or_path"),DGr.forEach(t),yJe=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hre=n(YC,"CODE",{});var GGr=s(hre);LJe=r(GGr,"pretrained_model_name_or_path"),GGr.forEach(t),xJe=r(YC,":"),YC.forEach(t),$Je=i(qs),k=n(qs,"UL",{});var S=s(k);kn=n(S,"LI",{});var d9=s(kn);pre=n(d9,"STRONG",{});var OGr=s(pre);kJe=r(OGr,"albert"),OGr.forEach(t),SJe=r(d9," \u2014 "),bS=n(d9,"A",{href:!0});var VGr=s(bS);RJe=r(VGr,"AlbertTokenizer"),VGr.forEach(t),BJe=r(d9," or "),vS=n(d9,"A",{href:!0});var XGr=s(vS);PJe=r(XGr,"AlbertTokenizerFast"),XGr.forEach(t),IJe=r(d9," (ALBERT model)"),d9.forEach(t),qJe=i(S),Sn=n(S,"LI",{});var c9=s(Sn);ure=n(c9,"STRONG",{});var zGr=s(ure);NJe=r(zGr,"bart"),zGr.forEach(t),jJe=r(c9," \u2014 "),FS=n(c9,"A",{href:!0});var QGr=s(FS);DJe=r(QGr,"BartTokenizer"),QGr.forEach(t),GJe=r(c9," or "),TS=n(c9,"A",{href:!0});var WGr=s(TS);OJe=r(WGr,"BartTokenizerFast"),WGr.forEach(t),VJe=r(c9," (BART model)"),c9.forEach(t),XJe=i(S),Rn=n(S,"LI",{});var f9=s(Rn);_re=n(f9,"STRONG",{});var HGr=s(_re);zJe=r(HGr,"barthez"),HGr.forEach(t),QJe=r(f9," \u2014 "),MS=n(f9,"A",{href:!0});var UGr=s(MS);WJe=r(UGr,"BarthezTokenizer"),UGr.forEach(t),HJe=r(f9," or "),ES=n(f9,"A",{href:!0});var JGr=s(ES);UJe=r(JGr,"BarthezTokenizerFast"),JGr.forEach(t),JJe=r(f9," (BARThez model)"),f9.forEach(t),YJe=i(S),vg=n(S,"LI",{});var A5e=s(vg);bre=n(A5e,"STRONG",{});var YGr=s(bre);KJe=r(YGr,"bartpho"),YGr.forEach(t),ZJe=r(A5e," \u2014 "),CS=n(A5e,"A",{href:!0});var KGr=s(CS);eYe=r(KGr,"BartphoTokenizer"),KGr.forEach(t),oYe=r(A5e," (BARTpho model)"),A5e.forEach(t),rYe=i(S),Bn=n(S,"LI",{});var m9=s(Bn);vre=n(m9,"STRONG",{});var ZGr=s(vre);tYe=r(ZGr,"bert"),ZGr.forEach(t),aYe=r(m9," \u2014 "),wS=n(m9,"A",{href:!0});var eOr=s(wS);nYe=r(eOr,"BertTokenizer"),eOr.forEach(t),sYe=r(m9," or "),AS=n(m9,"A",{href:!0});var oOr=s(AS);lYe=r(oOr,"BertTokenizerFast"),oOr.forEach(t),iYe=r(m9," (BERT model)"),m9.forEach(t),dYe=i(S),Fg=n(S,"LI",{});var y5e=s(Fg);Fre=n(y5e,"STRONG",{});var rOr=s(Fre);cYe=r(rOr,"bert-generation"),rOr.forEach(t),fYe=r(y5e," \u2014 "),yS=n(y5e,"A",{href:!0});var tOr=s(yS);mYe=r(tOr,"BertGenerationTokenizer"),tOr.forEach(t),gYe=r(y5e," (Bert Generation model)"),y5e.forEach(t),hYe=i(S),Tg=n(S,"LI",{});var L5e=s(Tg);Tre=n(L5e,"STRONG",{});var aOr=s(Tre);pYe=r(aOr,"bert-japanese"),aOr.forEach(t),uYe=r(L5e," \u2014 "),LS=n(L5e,"A",{href:!0});var nOr=s(LS);_Ye=r(nOr,"BertJapaneseTokenizer"),nOr.forEach(t),bYe=r(L5e," (BertJapanese model)"),L5e.forEach(t),vYe=i(S),Mg=n(S,"LI",{});var x5e=s(Mg);Mre=n(x5e,"STRONG",{});var sOr=s(Mre);FYe=r(sOr,"bertweet"),sOr.forEach(t),TYe=r(x5e," \u2014 "),xS=n(x5e,"A",{href:!0});var lOr=s(xS);MYe=r(lOr,"BertweetTokenizer"),lOr.forEach(t),EYe=r(x5e," (Bertweet model)"),x5e.forEach(t),CYe=i(S),Pn=n(S,"LI",{});var g9=s(Pn);Ere=n(g9,"STRONG",{});var iOr=s(Ere);wYe=r(iOr,"big_bird"),iOr.forEach(t),AYe=r(g9," \u2014 "),$S=n(g9,"A",{href:!0});var dOr=s($S);yYe=r(dOr,"BigBirdTokenizer"),dOr.forEach(t),LYe=r(g9," or "),kS=n(g9,"A",{href:!0});var cOr=s(kS);xYe=r(cOr,"BigBirdTokenizerFast"),cOr.forEach(t),$Ye=r(g9," (BigBird model)"),g9.forEach(t),kYe=i(S),In=n(S,"LI",{});var h9=s(In);Cre=n(h9,"STRONG",{});var fOr=s(Cre);SYe=r(fOr,"bigbird_pegasus"),fOr.forEach(t),RYe=r(h9," \u2014 "),SS=n(h9,"A",{href:!0});var mOr=s(SS);BYe=r(mOr,"PegasusTokenizer"),mOr.forEach(t),PYe=r(h9," or "),RS=n(h9,"A",{href:!0});var gOr=s(RS);IYe=r(gOr,"PegasusTokenizerFast"),gOr.forEach(t),qYe=r(h9," (BigBirdPegasus model)"),h9.forEach(t),NYe=i(S),qn=n(S,"LI",{});var p9=s(qn);wre=n(p9,"STRONG",{});var hOr=s(wre);jYe=r(hOr,"blenderbot"),hOr.forEach(t),DYe=r(p9," \u2014 "),BS=n(p9,"A",{href:!0});var pOr=s(BS);GYe=r(pOr,"BlenderbotTokenizer"),pOr.forEach(t),OYe=r(p9," or "),PS=n(p9,"A",{href:!0});var uOr=s(PS);VYe=r(uOr,"BlenderbotTokenizerFast"),uOr.forEach(t),XYe=r(p9," (Blenderbot model)"),p9.forEach(t),zYe=i(S),Eg=n(S,"LI",{});var $5e=s(Eg);Are=n($5e,"STRONG",{});var _Or=s(Are);QYe=r(_Or,"blenderbot-small"),_Or.forEach(t),WYe=r($5e," \u2014 "),IS=n($5e,"A",{href:!0});var bOr=s(IS);HYe=r(bOr,"BlenderbotSmallTokenizer"),bOr.forEach(t),UYe=r($5e," (BlenderbotSmall model)"),$5e.forEach(t),JYe=i(S),Cg=n(S,"LI",{});var k5e=s(Cg);yre=n(k5e,"STRONG",{});var vOr=s(yre);YYe=r(vOr,"byt5"),vOr.forEach(t),KYe=r(k5e," \u2014 "),qS=n(k5e,"A",{href:!0});var FOr=s(qS);ZYe=r(FOr,"ByT5Tokenizer"),FOr.forEach(t),eKe=r(k5e," (ByT5 model)"),k5e.forEach(t),oKe=i(S),Nn=n(S,"LI",{});var u9=s(Nn);Lre=n(u9,"STRONG",{});var TOr=s(Lre);rKe=r(TOr,"camembert"),TOr.forEach(t),tKe=r(u9," \u2014 "),NS=n(u9,"A",{href:!0});var MOr=s(NS);aKe=r(MOr,"CamembertTokenizer"),MOr.forEach(t),nKe=r(u9," or "),jS=n(u9,"A",{href:!0});var EOr=s(jS);sKe=r(EOr,"CamembertTokenizerFast"),EOr.forEach(t),lKe=r(u9," (CamemBERT model)"),u9.forEach(t),iKe=i(S),wg=n(S,"LI",{});var S5e=s(wg);xre=n(S5e,"STRONG",{});var COr=s(xre);dKe=r(COr,"canine"),COr.forEach(t),cKe=r(S5e," \u2014 "),DS=n(S5e,"A",{href:!0});var wOr=s(DS);fKe=r(wOr,"CanineTokenizer"),wOr.forEach(t),mKe=r(S5e," (Canine model)"),S5e.forEach(t),gKe=i(S),jn=n(S,"LI",{});var _9=s(jn);$re=n(_9,"STRONG",{});var AOr=s($re);hKe=r(AOr,"clip"),AOr.forEach(t),pKe=r(_9," \u2014 "),GS=n(_9,"A",{href:!0});var yOr=s(GS);uKe=r(yOr,"CLIPTokenizer"),yOr.forEach(t),_Ke=r(_9," or "),OS=n(_9,"A",{href:!0});var LOr=s(OS);bKe=r(LOr,"CLIPTokenizerFast"),LOr.forEach(t),vKe=r(_9," (CLIP model)"),_9.forEach(t),FKe=i(S),Dn=n(S,"LI",{});var b9=s(Dn);kre=n(b9,"STRONG",{});var xOr=s(kre);TKe=r(xOr,"convbert"),xOr.forEach(t),MKe=r(b9," \u2014 "),VS=n(b9,"A",{href:!0});var $Or=s(VS);EKe=r($Or,"ConvBertTokenizer"),$Or.forEach(t),CKe=r(b9," or "),XS=n(b9,"A",{href:!0});var kOr=s(XS);wKe=r(kOr,"ConvBertTokenizerFast"),kOr.forEach(t),AKe=r(b9," (ConvBERT model)"),b9.forEach(t),yKe=i(S),Gn=n(S,"LI",{});var v9=s(Gn);Sre=n(v9,"STRONG",{});var SOr=s(Sre);LKe=r(SOr,"cpm"),SOr.forEach(t),xKe=r(v9," \u2014 "),zS=n(v9,"A",{href:!0});var ROr=s(zS);$Ke=r(ROr,"CpmTokenizer"),ROr.forEach(t),kKe=r(v9," or "),QS=n(v9,"A",{href:!0});var BOr=s(QS);SKe=r(BOr,"CpmTokenizerFast"),BOr.forEach(t),RKe=r(v9," (CPM model)"),v9.forEach(t),BKe=i(S),Ag=n(S,"LI",{});var R5e=s(Ag);Rre=n(R5e,"STRONG",{});var POr=s(Rre);PKe=r(POr,"ctrl"),POr.forEach(t),IKe=r(R5e," \u2014 "),WS=n(R5e,"A",{href:!0});var IOr=s(WS);qKe=r(IOr,"CTRLTokenizer"),IOr.forEach(t),NKe=r(R5e," (CTRL model)"),R5e.forEach(t),jKe=i(S),On=n(S,"LI",{});var F9=s(On);Bre=n(F9,"STRONG",{});var qOr=s(Bre);DKe=r(qOr,"data2vec-text"),qOr.forEach(t),GKe=r(F9," \u2014 "),HS=n(F9,"A",{href:!0});var NOr=s(HS);OKe=r(NOr,"RobertaTokenizer"),NOr.forEach(t),VKe=r(F9," or "),US=n(F9,"A",{href:!0});var jOr=s(US);XKe=r(jOr,"RobertaTokenizerFast"),jOr.forEach(t),zKe=r(F9," (Data2VecText model)"),F9.forEach(t),QKe=i(S),Vn=n(S,"LI",{});var T9=s(Vn);Pre=n(T9,"STRONG",{});var DOr=s(Pre);WKe=r(DOr,"deberta"),DOr.forEach(t),HKe=r(T9," \u2014 "),JS=n(T9,"A",{href:!0});var GOr=s(JS);UKe=r(GOr,"DebertaTokenizer"),GOr.forEach(t),JKe=r(T9," or "),YS=n(T9,"A",{href:!0});var OOr=s(YS);YKe=r(OOr,"DebertaTokenizerFast"),OOr.forEach(t),KKe=r(T9," (DeBERTa model)"),T9.forEach(t),ZKe=i(S),Xn=n(S,"LI",{});var M9=s(Xn);Ire=n(M9,"STRONG",{});var VOr=s(Ire);eZe=r(VOr,"deberta-v2"),VOr.forEach(t),oZe=r(M9," \u2014 "),KS=n(M9,"A",{href:!0});var XOr=s(KS);rZe=r(XOr,"DebertaV2Tokenizer"),XOr.forEach(t),tZe=r(M9," or "),ZS=n(M9,"A",{href:!0});var zOr=s(ZS);aZe=r(zOr,"DebertaV2TokenizerFast"),zOr.forEach(t),nZe=r(M9," (DeBERTa-v2 model)"),M9.forEach(t),sZe=i(S),zn=n(S,"LI",{});var E9=s(zn);qre=n(E9,"STRONG",{});var QOr=s(qre);lZe=r(QOr,"distilbert"),QOr.forEach(t),iZe=r(E9," \u2014 "),eR=n(E9,"A",{href:!0});var WOr=s(eR);dZe=r(WOr,"DistilBertTokenizer"),WOr.forEach(t),cZe=r(E9," or "),oR=n(E9,"A",{href:!0});var HOr=s(oR);fZe=r(HOr,"DistilBertTokenizerFast"),HOr.forEach(t),mZe=r(E9," (DistilBERT model)"),E9.forEach(t),gZe=i(S),Qn=n(S,"LI",{});var C9=s(Qn);Nre=n(C9,"STRONG",{});var UOr=s(Nre);hZe=r(UOr,"dpr"),UOr.forEach(t),pZe=r(C9," \u2014 "),rR=n(C9,"A",{href:!0});var JOr=s(rR);uZe=r(JOr,"DPRQuestionEncoderTokenizer"),JOr.forEach(t),_Ze=r(C9," or "),tR=n(C9,"A",{href:!0});var YOr=s(tR);bZe=r(YOr,"DPRQuestionEncoderTokenizerFast"),YOr.forEach(t),vZe=r(C9," (DPR model)"),C9.forEach(t),FZe=i(S),Wn=n(S,"LI",{});var w9=s(Wn);jre=n(w9,"STRONG",{});var KOr=s(jre);TZe=r(KOr,"electra"),KOr.forEach(t),MZe=r(w9," \u2014 "),aR=n(w9,"A",{href:!0});var ZOr=s(aR);EZe=r(ZOr,"ElectraTokenizer"),ZOr.forEach(t),CZe=r(w9," or "),nR=n(w9,"A",{href:!0});var eVr=s(nR);wZe=r(eVr,"ElectraTokenizerFast"),eVr.forEach(t),AZe=r(w9," (ELECTRA model)"),w9.forEach(t),yZe=i(S),yg=n(S,"LI",{});var B5e=s(yg);Dre=n(B5e,"STRONG",{});var oVr=s(Dre);LZe=r(oVr,"flaubert"),oVr.forEach(t),xZe=r(B5e," \u2014 "),sR=n(B5e,"A",{href:!0});var rVr=s(sR);$Ze=r(rVr,"FlaubertTokenizer"),rVr.forEach(t),kZe=r(B5e," (FlauBERT model)"),B5e.forEach(t),SZe=i(S),Hn=n(S,"LI",{});var A9=s(Hn);Gre=n(A9,"STRONG",{});var tVr=s(Gre);RZe=r(tVr,"fnet"),tVr.forEach(t),BZe=r(A9," \u2014 "),lR=n(A9,"A",{href:!0});var aVr=s(lR);PZe=r(aVr,"FNetTokenizer"),aVr.forEach(t),IZe=r(A9," or "),iR=n(A9,"A",{href:!0});var nVr=s(iR);qZe=r(nVr,"FNetTokenizerFast"),nVr.forEach(t),NZe=r(A9," (FNet model)"),A9.forEach(t),jZe=i(S),Lg=n(S,"LI",{});var P5e=s(Lg);Ore=n(P5e,"STRONG",{});var sVr=s(Ore);DZe=r(sVr,"fsmt"),sVr.forEach(t),GZe=r(P5e," \u2014 "),dR=n(P5e,"A",{href:!0});var lVr=s(dR);OZe=r(lVr,"FSMTTokenizer"),lVr.forEach(t),VZe=r(P5e," (FairSeq Machine-Translation model)"),P5e.forEach(t),XZe=i(S),Un=n(S,"LI",{});var y9=s(Un);Vre=n(y9,"STRONG",{});var iVr=s(Vre);zZe=r(iVr,"funnel"),iVr.forEach(t),QZe=r(y9," \u2014 "),cR=n(y9,"A",{href:!0});var dVr=s(cR);WZe=r(dVr,"FunnelTokenizer"),dVr.forEach(t),HZe=r(y9," or "),fR=n(y9,"A",{href:!0});var cVr=s(fR);UZe=r(cVr,"FunnelTokenizerFast"),cVr.forEach(t),JZe=r(y9," (Funnel Transformer model)"),y9.forEach(t),YZe=i(S),Jn=n(S,"LI",{});var L9=s(Jn);Xre=n(L9,"STRONG",{});var fVr=s(Xre);KZe=r(fVr,"gpt2"),fVr.forEach(t),ZZe=r(L9," \u2014 "),mR=n(L9,"A",{href:!0});var mVr=s(mR);eeo=r(mVr,"GPT2Tokenizer"),mVr.forEach(t),oeo=r(L9," or "),gR=n(L9,"A",{href:!0});var gVr=s(gR);reo=r(gVr,"GPT2TokenizerFast"),gVr.forEach(t),teo=r(L9," (OpenAI GPT-2 model)"),L9.forEach(t),aeo=i(S),Yn=n(S,"LI",{});var x9=s(Yn);zre=n(x9,"STRONG",{});var hVr=s(zre);neo=r(hVr,"gpt_neo"),hVr.forEach(t),seo=r(x9," \u2014 "),hR=n(x9,"A",{href:!0});var pVr=s(hR);leo=r(pVr,"GPT2Tokenizer"),pVr.forEach(t),ieo=r(x9," or "),pR=n(x9,"A",{href:!0});var uVr=s(pR);deo=r(uVr,"GPT2TokenizerFast"),uVr.forEach(t),ceo=r(x9," (GPT Neo model)"),x9.forEach(t),feo=i(S),Kn=n(S,"LI",{});var $9=s(Kn);Qre=n($9,"STRONG",{});var _Vr=s(Qre);meo=r(_Vr,"gptj"),_Vr.forEach(t),geo=r($9," \u2014 "),uR=n($9,"A",{href:!0});var bVr=s(uR);heo=r(bVr,"GPT2Tokenizer"),bVr.forEach(t),peo=r($9," or "),_R=n($9,"A",{href:!0});var vVr=s(_R);ueo=r(vVr,"GPT2TokenizerFast"),vVr.forEach(t),_eo=r($9," (GPT-J model)"),$9.forEach(t),beo=i(S),Zn=n(S,"LI",{});var k9=s(Zn);Wre=n(k9,"STRONG",{});var FVr=s(Wre);veo=r(FVr,"herbert"),FVr.forEach(t),Feo=r(k9," \u2014 "),bR=n(k9,"A",{href:!0});var TVr=s(bR);Teo=r(TVr,"HerbertTokenizer"),TVr.forEach(t),Meo=r(k9," or "),vR=n(k9,"A",{href:!0});var MVr=s(vR);Eeo=r(MVr,"HerbertTokenizerFast"),MVr.forEach(t),Ceo=r(k9," (HerBERT model)"),k9.forEach(t),weo=i(S),xg=n(S,"LI",{});var I5e=s(xg);Hre=n(I5e,"STRONG",{});var EVr=s(Hre);Aeo=r(EVr,"hubert"),EVr.forEach(t),yeo=r(I5e," \u2014 "),FR=n(I5e,"A",{href:!0});var CVr=s(FR);Leo=r(CVr,"Wav2Vec2CTCTokenizer"),CVr.forEach(t),xeo=r(I5e," (Hubert model)"),I5e.forEach(t),$eo=i(S),es=n(S,"LI",{});var S9=s(es);Ure=n(S9,"STRONG",{});var wVr=s(Ure);keo=r(wVr,"ibert"),wVr.forEach(t),Seo=r(S9," \u2014 "),TR=n(S9,"A",{href:!0});var AVr=s(TR);Reo=r(AVr,"RobertaTokenizer"),AVr.forEach(t),Beo=r(S9," or "),MR=n(S9,"A",{href:!0});var yVr=s(MR);Peo=r(yVr,"RobertaTokenizerFast"),yVr.forEach(t),Ieo=r(S9," (I-BERT model)"),S9.forEach(t),qeo=i(S),os=n(S,"LI",{});var R9=s(os);Jre=n(R9,"STRONG",{});var LVr=s(Jre);Neo=r(LVr,"layoutlm"),LVr.forEach(t),jeo=r(R9," \u2014 "),ER=n(R9,"A",{href:!0});var xVr=s(ER);Deo=r(xVr,"LayoutLMTokenizer"),xVr.forEach(t),Geo=r(R9," or "),CR=n(R9,"A",{href:!0});var $Vr=s(CR);Oeo=r($Vr,"LayoutLMTokenizerFast"),$Vr.forEach(t),Veo=r(R9," (LayoutLM model)"),R9.forEach(t),Xeo=i(S),rs=n(S,"LI",{});var B9=s(rs);Yre=n(B9,"STRONG",{});var kVr=s(Yre);zeo=r(kVr,"layoutlmv2"),kVr.forEach(t),Qeo=r(B9," \u2014 "),wR=n(B9,"A",{href:!0});var SVr=s(wR);Weo=r(SVr,"LayoutLMv2Tokenizer"),SVr.forEach(t),Heo=r(B9," or "),AR=n(B9,"A",{href:!0});var RVr=s(AR);Ueo=r(RVr,"LayoutLMv2TokenizerFast"),RVr.forEach(t),Jeo=r(B9," (LayoutLMv2 model)"),B9.forEach(t),Yeo=i(S),ts=n(S,"LI",{});var P9=s(ts);Kre=n(P9,"STRONG",{});var BVr=s(Kre);Keo=r(BVr,"layoutlmv3"),BVr.forEach(t),Zeo=r(P9," \u2014 "),yR=n(P9,"A",{href:!0});var PVr=s(yR);eoo=r(PVr,"LayoutLMv3Tokenizer"),PVr.forEach(t),ooo=r(P9," or "),LR=n(P9,"A",{href:!0});var IVr=s(LR);roo=r(IVr,"LayoutLMv3TokenizerFast"),IVr.forEach(t),too=r(P9," (LayoutLMv3 model)"),P9.forEach(t),aoo=i(S),as=n(S,"LI",{});var I9=s(as);Zre=n(I9,"STRONG",{});var qVr=s(Zre);noo=r(qVr,"layoutxlm"),qVr.forEach(t),soo=r(I9," \u2014 "),xR=n(I9,"A",{href:!0});var NVr=s(xR);loo=r(NVr,"LayoutXLMTokenizer"),NVr.forEach(t),ioo=r(I9," or "),$R=n(I9,"A",{href:!0});var jVr=s($R);doo=r(jVr,"LayoutXLMTokenizerFast"),jVr.forEach(t),coo=r(I9," (LayoutXLM model)"),I9.forEach(t),foo=i(S),ns=n(S,"LI",{});var q9=s(ns);ete=n(q9,"STRONG",{});var DVr=s(ete);moo=r(DVr,"led"),DVr.forEach(t),goo=r(q9," \u2014 "),kR=n(q9,"A",{href:!0});var GVr=s(kR);hoo=r(GVr,"LEDTokenizer"),GVr.forEach(t),poo=r(q9," or "),SR=n(q9,"A",{href:!0});var OVr=s(SR);uoo=r(OVr,"LEDTokenizerFast"),OVr.forEach(t),_oo=r(q9," (LED model)"),q9.forEach(t),boo=i(S),ss=n(S,"LI",{});var N9=s(ss);ote=n(N9,"STRONG",{});var VVr=s(ote);voo=r(VVr,"longformer"),VVr.forEach(t),Foo=r(N9," \u2014 "),RR=n(N9,"A",{href:!0});var XVr=s(RR);Too=r(XVr,"LongformerTokenizer"),XVr.forEach(t),Moo=r(N9," or "),BR=n(N9,"A",{href:!0});var zVr=s(BR);Eoo=r(zVr,"LongformerTokenizerFast"),zVr.forEach(t),Coo=r(N9," (Longformer model)"),N9.forEach(t),woo=i(S),$g=n(S,"LI",{});var q5e=s($g);rte=n(q5e,"STRONG",{});var QVr=s(rte);Aoo=r(QVr,"luke"),QVr.forEach(t),yoo=r(q5e," \u2014 "),PR=n(q5e,"A",{href:!0});var WVr=s(PR);Loo=r(WVr,"LukeTokenizer"),WVr.forEach(t),xoo=r(q5e," (LUKE model)"),q5e.forEach(t),$oo=i(S),ls=n(S,"LI",{});var j9=s(ls);tte=n(j9,"STRONG",{});var HVr=s(tte);koo=r(HVr,"lxmert"),HVr.forEach(t),Soo=r(j9," \u2014 "),IR=n(j9,"A",{href:!0});var UVr=s(IR);Roo=r(UVr,"LxmertTokenizer"),UVr.forEach(t),Boo=r(j9," or "),qR=n(j9,"A",{href:!0});var JVr=s(qR);Poo=r(JVr,"LxmertTokenizerFast"),JVr.forEach(t),Ioo=r(j9," (LXMERT model)"),j9.forEach(t),qoo=i(S),kg=n(S,"LI",{});var N5e=s(kg);ate=n(N5e,"STRONG",{});var YVr=s(ate);Noo=r(YVr,"m2m_100"),YVr.forEach(t),joo=r(N5e," \u2014 "),NR=n(N5e,"A",{href:!0});var KVr=s(NR);Doo=r(KVr,"M2M100Tokenizer"),KVr.forEach(t),Goo=r(N5e," (M2M100 model)"),N5e.forEach(t),Ooo=i(S),Sg=n(S,"LI",{});var j5e=s(Sg);nte=n(j5e,"STRONG",{});var ZVr=s(nte);Voo=r(ZVr,"marian"),ZVr.forEach(t),Xoo=r(j5e," \u2014 "),jR=n(j5e,"A",{href:!0});var eXr=s(jR);zoo=r(eXr,"MarianTokenizer"),eXr.forEach(t),Qoo=r(j5e," (Marian model)"),j5e.forEach(t),Woo=i(S),is=n(S,"LI",{});var D9=s(is);ste=n(D9,"STRONG",{});var oXr=s(ste);Hoo=r(oXr,"mbart"),oXr.forEach(t),Uoo=r(D9," \u2014 "),DR=n(D9,"A",{href:!0});var rXr=s(DR);Joo=r(rXr,"MBartTokenizer"),rXr.forEach(t),Yoo=r(D9," or "),GR=n(D9,"A",{href:!0});var tXr=s(GR);Koo=r(tXr,"MBartTokenizerFast"),tXr.forEach(t),Zoo=r(D9," (mBART model)"),D9.forEach(t),ero=i(S),ds=n(S,"LI",{});var G9=s(ds);lte=n(G9,"STRONG",{});var aXr=s(lte);oro=r(aXr,"mbart50"),aXr.forEach(t),rro=r(G9," \u2014 "),OR=n(G9,"A",{href:!0});var nXr=s(OR);tro=r(nXr,"MBart50Tokenizer"),nXr.forEach(t),aro=r(G9," or "),VR=n(G9,"A",{href:!0});var sXr=s(VR);nro=r(sXr,"MBart50TokenizerFast"),sXr.forEach(t),sro=r(G9," (mBART-50 model)"),G9.forEach(t),lro=i(S),cs=n(S,"LI",{});var O9=s(cs);ite=n(O9,"STRONG",{});var lXr=s(ite);iro=r(lXr,"megatron-bert"),lXr.forEach(t),dro=r(O9," \u2014 "),XR=n(O9,"A",{href:!0});var iXr=s(XR);cro=r(iXr,"BertTokenizer"),iXr.forEach(t),fro=r(O9," or "),zR=n(O9,"A",{href:!0});var dXr=s(zR);mro=r(dXr,"BertTokenizerFast"),dXr.forEach(t),gro=r(O9," (MegatronBert model)"),O9.forEach(t),hro=i(S),Rg=n(S,"LI",{});var D5e=s(Rg);dte=n(D5e,"STRONG",{});var cXr=s(dte);pro=r(cXr,"mluke"),cXr.forEach(t),uro=r(D5e," \u2014 "),QR=n(D5e,"A",{href:!0});var fXr=s(QR);_ro=r(fXr,"MLukeTokenizer"),fXr.forEach(t),bro=r(D5e," (mLUKE model)"),D5e.forEach(t),vro=i(S),fs=n(S,"LI",{});var V9=s(fs);cte=n(V9,"STRONG",{});var mXr=s(cte);Fro=r(mXr,"mobilebert"),mXr.forEach(t),Tro=r(V9," \u2014 "),WR=n(V9,"A",{href:!0});var gXr=s(WR);Mro=r(gXr,"MobileBertTokenizer"),gXr.forEach(t),Ero=r(V9," or "),HR=n(V9,"A",{href:!0});var hXr=s(HR);Cro=r(hXr,"MobileBertTokenizerFast"),hXr.forEach(t),wro=r(V9," (MobileBERT model)"),V9.forEach(t),Aro=i(S),ms=n(S,"LI",{});var X9=s(ms);fte=n(X9,"STRONG",{});var pXr=s(fte);yro=r(pXr,"mpnet"),pXr.forEach(t),Lro=r(X9," \u2014 "),UR=n(X9,"A",{href:!0});var uXr=s(UR);xro=r(uXr,"MPNetTokenizer"),uXr.forEach(t),$ro=r(X9," or "),JR=n(X9,"A",{href:!0});var _Xr=s(JR);kro=r(_Xr,"MPNetTokenizerFast"),_Xr.forEach(t),Sro=r(X9," (MPNet model)"),X9.forEach(t),Rro=i(S),gs=n(S,"LI",{});var z9=s(gs);mte=n(z9,"STRONG",{});var bXr=s(mte);Bro=r(bXr,"mt5"),bXr.forEach(t),Pro=r(z9," \u2014 "),YR=n(z9,"A",{href:!0});var vXr=s(YR);Iro=r(vXr,"MT5Tokenizer"),vXr.forEach(t),qro=r(z9," or "),KR=n(z9,"A",{href:!0});var FXr=s(KR);Nro=r(FXr,"MT5TokenizerFast"),FXr.forEach(t),jro=r(z9," (mT5 model)"),z9.forEach(t),Dro=i(S),hs=n(S,"LI",{});var Q9=s(hs);gte=n(Q9,"STRONG",{});var TXr=s(gte);Gro=r(TXr,"nystromformer"),TXr.forEach(t),Oro=r(Q9," \u2014 "),ZR=n(Q9,"A",{href:!0});var MXr=s(ZR);Vro=r(MXr,"AlbertTokenizer"),MXr.forEach(t),Xro=r(Q9," or "),eB=n(Q9,"A",{href:!0});var EXr=s(eB);zro=r(EXr,"AlbertTokenizerFast"),EXr.forEach(t),Qro=r(Q9," (Nystromformer model)"),Q9.forEach(t),Wro=i(S),ps=n(S,"LI",{});var W9=s(ps);hte=n(W9,"STRONG",{});var CXr=s(hte);Hro=r(CXr,"openai-gpt"),CXr.forEach(t),Uro=r(W9," \u2014 "),oB=n(W9,"A",{href:!0});var wXr=s(oB);Jro=r(wXr,"OpenAIGPTTokenizer"),wXr.forEach(t),Yro=r(W9," or "),rB=n(W9,"A",{href:!0});var AXr=s(rB);Kro=r(AXr,"OpenAIGPTTokenizerFast"),AXr.forEach(t),Zro=r(W9," (OpenAI GPT model)"),W9.forEach(t),eto=i(S),us=n(S,"LI",{});var H9=s(us);pte=n(H9,"STRONG",{});var yXr=s(pte);oto=r(yXr,"pegasus"),yXr.forEach(t),rto=r(H9," \u2014 "),tB=n(H9,"A",{href:!0});var LXr=s(tB);tto=r(LXr,"PegasusTokenizer"),LXr.forEach(t),ato=r(H9," or "),aB=n(H9,"A",{href:!0});var xXr=s(aB);nto=r(xXr,"PegasusTokenizerFast"),xXr.forEach(t),sto=r(H9," (Pegasus model)"),H9.forEach(t),lto=i(S),Bg=n(S,"LI",{});var G5e=s(Bg);ute=n(G5e,"STRONG",{});var $Xr=s(ute);ito=r($Xr,"perceiver"),$Xr.forEach(t),dto=r(G5e," \u2014 "),nB=n(G5e,"A",{href:!0});var kXr=s(nB);cto=r(kXr,"PerceiverTokenizer"),kXr.forEach(t),fto=r(G5e," (Perceiver model)"),G5e.forEach(t),mto=i(S),Pg=n(S,"LI",{});var O5e=s(Pg);_te=n(O5e,"STRONG",{});var SXr=s(_te);gto=r(SXr,"phobert"),SXr.forEach(t),hto=r(O5e," \u2014 "),sB=n(O5e,"A",{href:!0});var RXr=s(sB);pto=r(RXr,"PhobertTokenizer"),RXr.forEach(t),uto=r(O5e," (PhoBERT model)"),O5e.forEach(t),_to=i(S),Ig=n(S,"LI",{});var V5e=s(Ig);bte=n(V5e,"STRONG",{});var BXr=s(bte);bto=r(BXr,"plbart"),BXr.forEach(t),vto=r(V5e," \u2014 "),lB=n(V5e,"A",{href:!0});var PXr=s(lB);Fto=r(PXr,"PLBartTokenizer"),PXr.forEach(t),Tto=r(V5e," (PLBart model)"),V5e.forEach(t),Mto=i(S),qg=n(S,"LI",{});var X5e=s(qg);vte=n(X5e,"STRONG",{});var IXr=s(vte);Eto=r(IXr,"prophetnet"),IXr.forEach(t),Cto=r(X5e," \u2014 "),iB=n(X5e,"A",{href:!0});var qXr=s(iB);wto=r(qXr,"ProphetNetTokenizer"),qXr.forEach(t),Ato=r(X5e," (ProphetNet model)"),X5e.forEach(t),yto=i(S),_s=n(S,"LI",{});var U9=s(_s);Fte=n(U9,"STRONG",{});var NXr=s(Fte);Lto=r(NXr,"qdqbert"),NXr.forEach(t),xto=r(U9," \u2014 "),dB=n(U9,"A",{href:!0});var jXr=s(dB);$to=r(jXr,"BertTokenizer"),jXr.forEach(t),kto=r(U9," or "),cB=n(U9,"A",{href:!0});var DXr=s(cB);Sto=r(DXr,"BertTokenizerFast"),DXr.forEach(t),Rto=r(U9," (QDQBert model)"),U9.forEach(t),Bto=i(S),Ng=n(S,"LI",{});var z5e=s(Ng);Tte=n(z5e,"STRONG",{});var GXr=s(Tte);Pto=r(GXr,"rag"),GXr.forEach(t),Ito=r(z5e," \u2014 "),fB=n(z5e,"A",{href:!0});var OXr=s(fB);qto=r(OXr,"RagTokenizer"),OXr.forEach(t),Nto=r(z5e," (RAG model)"),z5e.forEach(t),jto=i(S),bs=n(S,"LI",{});var J9=s(bs);Mte=n(J9,"STRONG",{});var VXr=s(Mte);Dto=r(VXr,"realm"),VXr.forEach(t),Gto=r(J9," \u2014 "),mB=n(J9,"A",{href:!0});var XXr=s(mB);Oto=r(XXr,"RealmTokenizer"),XXr.forEach(t),Vto=r(J9," or "),gB=n(J9,"A",{href:!0});var zXr=s(gB);Xto=r(zXr,"RealmTokenizerFast"),zXr.forEach(t),zto=r(J9," (Realm model)"),J9.forEach(t),Qto=i(S),vs=n(S,"LI",{});var Y9=s(vs);Ete=n(Y9,"STRONG",{});var QXr=s(Ete);Wto=r(QXr,"reformer"),QXr.forEach(t),Hto=r(Y9," \u2014 "),hB=n(Y9,"A",{href:!0});var WXr=s(hB);Uto=r(WXr,"ReformerTokenizer"),WXr.forEach(t),Jto=r(Y9," or "),pB=n(Y9,"A",{href:!0});var HXr=s(pB);Yto=r(HXr,"ReformerTokenizerFast"),HXr.forEach(t),Kto=r(Y9," (Reformer model)"),Y9.forEach(t),Zto=i(S),Fs=n(S,"LI",{});var K9=s(Fs);Cte=n(K9,"STRONG",{});var UXr=s(Cte);eao=r(UXr,"rembert"),UXr.forEach(t),oao=r(K9," \u2014 "),uB=n(K9,"A",{href:!0});var JXr=s(uB);rao=r(JXr,"RemBertTokenizer"),JXr.forEach(t),tao=r(K9," or "),_B=n(K9,"A",{href:!0});var YXr=s(_B);aao=r(YXr,"RemBertTokenizerFast"),YXr.forEach(t),nao=r(K9," (RemBERT model)"),K9.forEach(t),sao=i(S),Ts=n(S,"LI",{});var Z9=s(Ts);wte=n(Z9,"STRONG",{});var KXr=s(wte);lao=r(KXr,"retribert"),KXr.forEach(t),iao=r(Z9," \u2014 "),bB=n(Z9,"A",{href:!0});var ZXr=s(bB);dao=r(ZXr,"RetriBertTokenizer"),ZXr.forEach(t),cao=r(Z9," or "),vB=n(Z9,"A",{href:!0});var ezr=s(vB);fao=r(ezr,"RetriBertTokenizerFast"),ezr.forEach(t),mao=r(Z9," (RetriBERT model)"),Z9.forEach(t),gao=i(S),Ms=n(S,"LI",{});var e$=s(Ms);Ate=n(e$,"STRONG",{});var ozr=s(Ate);hao=r(ozr,"roberta"),ozr.forEach(t),pao=r(e$," \u2014 "),FB=n(e$,"A",{href:!0});var rzr=s(FB);uao=r(rzr,"RobertaTokenizer"),rzr.forEach(t),_ao=r(e$," or "),TB=n(e$,"A",{href:!0});var tzr=s(TB);bao=r(tzr,"RobertaTokenizerFast"),tzr.forEach(t),vao=r(e$," (RoBERTa model)"),e$.forEach(t),Fao=i(S),Es=n(S,"LI",{});var o$=s(Es);yte=n(o$,"STRONG",{});var azr=s(yte);Tao=r(azr,"roformer"),azr.forEach(t),Mao=r(o$," \u2014 "),MB=n(o$,"A",{href:!0});var nzr=s(MB);Eao=r(nzr,"RoFormerTokenizer"),nzr.forEach(t),Cao=r(o$," or "),EB=n(o$,"A",{href:!0});var szr=s(EB);wao=r(szr,"RoFormerTokenizerFast"),szr.forEach(t),Aao=r(o$," (RoFormer model)"),o$.forEach(t),yao=i(S),jg=n(S,"LI",{});var Q5e=s(jg);Lte=n(Q5e,"STRONG",{});var lzr=s(Lte);Lao=r(lzr,"speech_to_text"),lzr.forEach(t),xao=r(Q5e," \u2014 "),CB=n(Q5e,"A",{href:!0});var izr=s(CB);$ao=r(izr,"Speech2TextTokenizer"),izr.forEach(t),kao=r(Q5e," (Speech2Text model)"),Q5e.forEach(t),Sao=i(S),Dg=n(S,"LI",{});var W5e=s(Dg);xte=n(W5e,"STRONG",{});var dzr=s(xte);Rao=r(dzr,"speech_to_text_2"),dzr.forEach(t),Bao=r(W5e," \u2014 "),wB=n(W5e,"A",{href:!0});var czr=s(wB);Pao=r(czr,"Speech2Text2Tokenizer"),czr.forEach(t),Iao=r(W5e," (Speech2Text2 model)"),W5e.forEach(t),qao=i(S),Cs=n(S,"LI",{});var r$=s(Cs);$te=n(r$,"STRONG",{});var fzr=s($te);Nao=r(fzr,"splinter"),fzr.forEach(t),jao=r(r$," \u2014 "),AB=n(r$,"A",{href:!0});var mzr=s(AB);Dao=r(mzr,"SplinterTokenizer"),mzr.forEach(t),Gao=r(r$," or "),yB=n(r$,"A",{href:!0});var gzr=s(yB);Oao=r(gzr,"SplinterTokenizerFast"),gzr.forEach(t),Vao=r(r$," (Splinter model)"),r$.forEach(t),Xao=i(S),ws=n(S,"LI",{});var t$=s(ws);kte=n(t$,"STRONG",{});var hzr=s(kte);zao=r(hzr,"squeezebert"),hzr.forEach(t),Qao=r(t$," \u2014 "),LB=n(t$,"A",{href:!0});var pzr=s(LB);Wao=r(pzr,"SqueezeBertTokenizer"),pzr.forEach(t),Hao=r(t$," or "),xB=n(t$,"A",{href:!0});var uzr=s(xB);Uao=r(uzr,"SqueezeBertTokenizerFast"),uzr.forEach(t),Jao=r(t$," (SqueezeBERT model)"),t$.forEach(t),Yao=i(S),As=n(S,"LI",{});var a$=s(As);Ste=n(a$,"STRONG",{});var _zr=s(Ste);Kao=r(_zr,"t5"),_zr.forEach(t),Zao=r(a$," \u2014 "),$B=n(a$,"A",{href:!0});var bzr=s($B);eno=r(bzr,"T5Tokenizer"),bzr.forEach(t),ono=r(a$," or "),kB=n(a$,"A",{href:!0});var vzr=s(kB);rno=r(vzr,"T5TokenizerFast"),vzr.forEach(t),tno=r(a$," (T5 model)"),a$.forEach(t),ano=i(S),Gg=n(S,"LI",{});var H5e=s(Gg);Rte=n(H5e,"STRONG",{});var Fzr=s(Rte);nno=r(Fzr,"tapas"),Fzr.forEach(t),sno=r(H5e," \u2014 "),SB=n(H5e,"A",{href:!0});var Tzr=s(SB);lno=r(Tzr,"TapasTokenizer"),Tzr.forEach(t),ino=r(H5e," (TAPAS model)"),H5e.forEach(t),dno=i(S),Og=n(S,"LI",{});var U5e=s(Og);Bte=n(U5e,"STRONG",{});var Mzr=s(Bte);cno=r(Mzr,"tapex"),Mzr.forEach(t),fno=r(U5e," \u2014 "),RB=n(U5e,"A",{href:!0});var Ezr=s(RB);mno=r(Ezr,"TapexTokenizer"),Ezr.forEach(t),gno=r(U5e," (TAPEX model)"),U5e.forEach(t),hno=i(S),Vg=n(S,"LI",{});var J5e=s(Vg);Pte=n(J5e,"STRONG",{});var Czr=s(Pte);pno=r(Czr,"transfo-xl"),Czr.forEach(t),uno=r(J5e," \u2014 "),BB=n(J5e,"A",{href:!0});var wzr=s(BB);_no=r(wzr,"TransfoXLTokenizer"),wzr.forEach(t),bno=r(J5e," (Transformer-XL model)"),J5e.forEach(t),vno=i(S),ys=n(S,"LI",{});var n$=s(ys);Ite=n(n$,"STRONG",{});var Azr=s(Ite);Fno=r(Azr,"visual_bert"),Azr.forEach(t),Tno=r(n$," \u2014 "),PB=n(n$,"A",{href:!0});var yzr=s(PB);Mno=r(yzr,"BertTokenizer"),yzr.forEach(t),Eno=r(n$," or "),IB=n(n$,"A",{href:!0});var Lzr=s(IB);Cno=r(Lzr,"BertTokenizerFast"),Lzr.forEach(t),wno=r(n$," (VisualBert model)"),n$.forEach(t),Ano=i(S),Xg=n(S,"LI",{});var Y5e=s(Xg);qte=n(Y5e,"STRONG",{});var xzr=s(qte);yno=r(xzr,"wav2vec2"),xzr.forEach(t),Lno=r(Y5e," \u2014 "),qB=n(Y5e,"A",{href:!0});var $zr=s(qB);xno=r($zr,"Wav2Vec2CTCTokenizer"),$zr.forEach(t),$no=r(Y5e," (Wav2Vec2 model)"),Y5e.forEach(t),kno=i(S),zg=n(S,"LI",{});var K5e=s(zg);Nte=n(K5e,"STRONG",{});var kzr=s(Nte);Sno=r(kzr,"wav2vec2_phoneme"),kzr.forEach(t),Rno=r(K5e," \u2014 "),NB=n(K5e,"A",{href:!0});var Szr=s(NB);Bno=r(Szr,"Wav2Vec2PhonemeCTCTokenizer"),Szr.forEach(t),Pno=r(K5e," (Wav2Vec2Phoneme model)"),K5e.forEach(t),Ino=i(S),Ls=n(S,"LI",{});var s$=s(Ls);jte=n(s$,"STRONG",{});var Rzr=s(jte);qno=r(Rzr,"xglm"),Rzr.forEach(t),Nno=r(s$," \u2014 "),jB=n(s$,"A",{href:!0});var Bzr=s(jB);jno=r(Bzr,"XGLMTokenizer"),Bzr.forEach(t),Dno=r(s$," or "),DB=n(s$,"A",{href:!0});var Pzr=s(DB);Gno=r(Pzr,"XGLMTokenizerFast"),Pzr.forEach(t),Ono=r(s$," (XGLM model)"),s$.forEach(t),Vno=i(S),Qg=n(S,"LI",{});var Z5e=s(Qg);Dte=n(Z5e,"STRONG",{});var Izr=s(Dte);Xno=r(Izr,"xlm"),Izr.forEach(t),zno=r(Z5e," \u2014 "),GB=n(Z5e,"A",{href:!0});var qzr=s(GB);Qno=r(qzr,"XLMTokenizer"),qzr.forEach(t),Wno=r(Z5e," (XLM model)"),Z5e.forEach(t),Hno=i(S),Wg=n(S,"LI",{});var eCe=s(Wg);Gte=n(eCe,"STRONG",{});var Nzr=s(Gte);Uno=r(Nzr,"xlm-prophetnet"),Nzr.forEach(t),Jno=r(eCe," \u2014 "),OB=n(eCe,"A",{href:!0});var jzr=s(OB);Yno=r(jzr,"XLMProphetNetTokenizer"),jzr.forEach(t),Kno=r(eCe," (XLMProphetNet model)"),eCe.forEach(t),Zno=i(S),xs=n(S,"LI",{});var l$=s(xs);Ote=n(l$,"STRONG",{});var Dzr=s(Ote);eso=r(Dzr,"xlm-roberta"),Dzr.forEach(t),oso=r(l$," \u2014 "),VB=n(l$,"A",{href:!0});var Gzr=s(VB);rso=r(Gzr,"XLMRobertaTokenizer"),Gzr.forEach(t),tso=r(l$," or "),XB=n(l$,"A",{href:!0});var Ozr=s(XB);aso=r(Ozr,"XLMRobertaTokenizerFast"),Ozr.forEach(t),nso=r(l$," (XLM-RoBERTa model)"),l$.forEach(t),sso=i(S),$s=n(S,"LI",{});var i$=s($s);Vte=n(i$,"STRONG",{});var Vzr=s(Vte);lso=r(Vzr,"xlm-roberta-xl"),Vzr.forEach(t),iso=r(i$," \u2014 "),zB=n(i$,"A",{href:!0});var Xzr=s(zB);dso=r(Xzr,"RobertaTokenizer"),Xzr.forEach(t),cso=r(i$," or "),QB=n(i$,"A",{href:!0});var zzr=s(QB);fso=r(zzr,"RobertaTokenizerFast"),zzr.forEach(t),mso=r(i$," (XLM-RoBERTa-XL model)"),i$.forEach(t),gso=i(S),ks=n(S,"LI",{});var d$=s(ks);Xte=n(d$,"STRONG",{});var Qzr=s(Xte);hso=r(Qzr,"xlnet"),Qzr.forEach(t),pso=r(d$," \u2014 "),WB=n(d$,"A",{href:!0});var Wzr=s(WB);uso=r(Wzr,"XLNetTokenizer"),Wzr.forEach(t),_so=r(d$," or "),HB=n(d$,"A",{href:!0});var Hzr=s(HB);bso=r(Hzr,"XLNetTokenizerFast"),Hzr.forEach(t),vso=r(d$," (XLNet model)"),d$.forEach(t),Fso=i(S),Ss=n(S,"LI",{});var c$=s(Ss);zte=n(c$,"STRONG",{});var Uzr=s(zte);Tso=r(Uzr,"yoso"),Uzr.forEach(t),Mso=r(c$," \u2014 "),UB=n(c$,"A",{href:!0});var Jzr=s(UB);Eso=r(Jzr,"AlbertTokenizer"),Jzr.forEach(t),Cso=r(c$," or "),JB=n(c$,"A",{href:!0});var Yzr=s(JB);wso=r(Yzr,"AlbertTokenizerFast"),Yzr.forEach(t),Aso=r(c$," (YOSO model)"),c$.forEach(t),S.forEach(t),yso=i(qs),T(Hg.$$.fragment,qs),qs.forEach(t),Lso=i(Is),Ug=n(Is,"DIV",{class:!0});var Hqe=s(Ug);T(dA.$$.fragment,Hqe),xso=i(Hqe),Qte=n(Hqe,"P",{});var Kzr=s(Qte);$so=r(Kzr,"Register a new tokenizer in this mapping."),Kzr.forEach(t),Hqe.forEach(t),Is.forEach(t),UPe=i(f),vi=n(f,"H2",{class:!0});var Uqe=s(vi);Jg=n(Uqe,"A",{id:!0,class:!0,href:!0});var Zzr=s(Jg);Wte=n(Zzr,"SPAN",{});var eQr=s(Wte);T(cA.$$.fragment,eQr),eQr.forEach(t),Zzr.forEach(t),kso=i(Uqe),Hte=n(Uqe,"SPAN",{});var oQr=s(Hte);Sso=r(oQr,"AutoFeatureExtractor"),oQr.forEach(t),Uqe.forEach(t),JPe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(fA.$$.fragment,Ns),Rso=i(Ns),mA=n(Ns,"P",{});var Jqe=s(mA);Bso=r(Jqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),YB=n(Jqe,"A",{href:!0});var rQr=s(YB);Pso=r(rQr,"AutoFeatureExtractor.from_pretrained()"),rQr.forEach(t),Iso=r(Jqe," class method."),Jqe.forEach(t),qso=i(Ns),gA=n(Ns,"P",{});var Yqe=s(gA);Nso=r(Yqe,"This class cannot be instantiated directly using "),Ute=n(Yqe,"CODE",{});var tQr=s(Ute);jso=r(tQr,"__init__()"),tQr.forEach(t),Dso=r(Yqe," (throws an error)."),Yqe.forEach(t),Gso=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(hA.$$.fragment,Yt),Oso=i(Yt),Jte=n(Yt,"P",{});var aQr=s(Jte);Vso=r(aQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aQr.forEach(t),Xso=i(Yt),wa=n(Yt,"P",{});var KC=s(wa);zso=r(KC,"The feature extractor class to instantiate is selected based on the "),Yte=n(KC,"CODE",{});var nQr=s(Yte);Qso=r(nQr,"model_type"),nQr.forEach(t),Wso=r(KC,` property of the config object
(either passed as an argument or loaded from `),Kte=n(KC,"CODE",{});var sQr=s(Kte);Hso=r(sQr,"pretrained_model_name_or_path"),sQr.forEach(t),Uso=r(KC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zte=n(KC,"CODE",{});var lQr=s(Zte);Jso=r(lQr,"pretrained_model_name_or_path"),lQr.forEach(t),Yso=r(KC,":"),KC.forEach(t),Kso=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Yg=n(ae,"LI",{});var oCe=s(Yg);eae=n(oCe,"STRONG",{});var iQr=s(eae);Zso=r(iQr,"beit"),iQr.forEach(t),elo=r(oCe," \u2014 "),KB=n(oCe,"A",{href:!0});var dQr=s(KB);olo=r(dQr,"BeitFeatureExtractor"),dQr.forEach(t),rlo=r(oCe," (BEiT model)"),oCe.forEach(t),tlo=i(ae),Kg=n(ae,"LI",{});var rCe=s(Kg);oae=n(rCe,"STRONG",{});var cQr=s(oae);alo=r(cQr,"clip"),cQr.forEach(t),nlo=r(rCe," \u2014 "),ZB=n(rCe,"A",{href:!0});var fQr=s(ZB);slo=r(fQr,"CLIPFeatureExtractor"),fQr.forEach(t),llo=r(rCe," (CLIP model)"),rCe.forEach(t),ilo=i(ae),Zg=n(ae,"LI",{});var tCe=s(Zg);rae=n(tCe,"STRONG",{});var mQr=s(rae);dlo=r(mQr,"convnext"),mQr.forEach(t),clo=r(tCe," \u2014 "),eP=n(tCe,"A",{href:!0});var gQr=s(eP);flo=r(gQr,"ConvNextFeatureExtractor"),gQr.forEach(t),mlo=r(tCe," (ConvNext model)"),tCe.forEach(t),glo=i(ae),eh=n(ae,"LI",{});var aCe=s(eh);tae=n(aCe,"STRONG",{});var hQr=s(tae);hlo=r(hQr,"data2vec-audio"),hQr.forEach(t),plo=r(aCe," \u2014 "),oP=n(aCe,"A",{href:!0});var pQr=s(oP);ulo=r(pQr,"Wav2Vec2FeatureExtractor"),pQr.forEach(t),_lo=r(aCe," (Data2VecAudio model)"),aCe.forEach(t),blo=i(ae),oh=n(ae,"LI",{});var nCe=s(oh);aae=n(nCe,"STRONG",{});var uQr=s(aae);vlo=r(uQr,"data2vec-vision"),uQr.forEach(t),Flo=r(nCe," \u2014 "),rP=n(nCe,"A",{href:!0});var _Qr=s(rP);Tlo=r(_Qr,"BeitFeatureExtractor"),_Qr.forEach(t),Mlo=r(nCe," (Data2VecVision model)"),nCe.forEach(t),Elo=i(ae),rh=n(ae,"LI",{});var sCe=s(rh);nae=n(sCe,"STRONG",{});var bQr=s(nae);Clo=r(bQr,"deit"),bQr.forEach(t),wlo=r(sCe," \u2014 "),tP=n(sCe,"A",{href:!0});var vQr=s(tP);Alo=r(vQr,"DeiTFeatureExtractor"),vQr.forEach(t),ylo=r(sCe," (DeiT model)"),sCe.forEach(t),Llo=i(ae),th=n(ae,"LI",{});var lCe=s(th);sae=n(lCe,"STRONG",{});var FQr=s(sae);xlo=r(FQr,"detr"),FQr.forEach(t),$lo=r(lCe," \u2014 "),aP=n(lCe,"A",{href:!0});var TQr=s(aP);klo=r(TQr,"DetrFeatureExtractor"),TQr.forEach(t),Slo=r(lCe," (DETR model)"),lCe.forEach(t),Rlo=i(ae),ah=n(ae,"LI",{});var iCe=s(ah);lae=n(iCe,"STRONG",{});var MQr=s(lae);Blo=r(MQr,"dpt"),MQr.forEach(t),Plo=r(iCe," \u2014 "),nP=n(iCe,"A",{href:!0});var EQr=s(nP);Ilo=r(EQr,"DPTFeatureExtractor"),EQr.forEach(t),qlo=r(iCe," (DPT model)"),iCe.forEach(t),Nlo=i(ae),nh=n(ae,"LI",{});var dCe=s(nh);iae=n(dCe,"STRONG",{});var CQr=s(iae);jlo=r(CQr,"glpn"),CQr.forEach(t),Dlo=r(dCe," \u2014 "),sP=n(dCe,"A",{href:!0});var wQr=s(sP);Glo=r(wQr,"GLPNFeatureExtractor"),wQr.forEach(t),Olo=r(dCe," (GLPN model)"),dCe.forEach(t),Vlo=i(ae),sh=n(ae,"LI",{});var cCe=s(sh);dae=n(cCe,"STRONG",{});var AQr=s(dae);Xlo=r(AQr,"hubert"),AQr.forEach(t),zlo=r(cCe," \u2014 "),lP=n(cCe,"A",{href:!0});var yQr=s(lP);Qlo=r(yQr,"Wav2Vec2FeatureExtractor"),yQr.forEach(t),Wlo=r(cCe," (Hubert model)"),cCe.forEach(t),Hlo=i(ae),lh=n(ae,"LI",{});var fCe=s(lh);cae=n(fCe,"STRONG",{});var LQr=s(cae);Ulo=r(LQr,"layoutlmv2"),LQr.forEach(t),Jlo=r(fCe," \u2014 "),iP=n(fCe,"A",{href:!0});var xQr=s(iP);Ylo=r(xQr,"LayoutLMv2FeatureExtractor"),xQr.forEach(t),Klo=r(fCe," (LayoutLMv2 model)"),fCe.forEach(t),Zlo=i(ae),ih=n(ae,"LI",{});var mCe=s(ih);fae=n(mCe,"STRONG",{});var $Qr=s(fae);eio=r($Qr,"layoutlmv3"),$Qr.forEach(t),oio=r(mCe," \u2014 "),dP=n(mCe,"A",{href:!0});var kQr=s(dP);rio=r(kQr,"LayoutLMv3FeatureExtractor"),kQr.forEach(t),tio=r(mCe," (LayoutLMv3 model)"),mCe.forEach(t),aio=i(ae),dh=n(ae,"LI",{});var gCe=s(dh);mae=n(gCe,"STRONG",{});var SQr=s(mae);nio=r(SQr,"maskformer"),SQr.forEach(t),sio=r(gCe," \u2014 "),cP=n(gCe,"A",{href:!0});var RQr=s(cP);lio=r(RQr,"MaskFormerFeatureExtractor"),RQr.forEach(t),iio=r(gCe," (MaskFormer model)"),gCe.forEach(t),dio=i(ae),ch=n(ae,"LI",{});var hCe=s(ch);gae=n(hCe,"STRONG",{});var BQr=s(gae);cio=r(BQr,"perceiver"),BQr.forEach(t),fio=r(hCe," \u2014 "),fP=n(hCe,"A",{href:!0});var PQr=s(fP);mio=r(PQr,"PerceiverFeatureExtractor"),PQr.forEach(t),gio=r(hCe," (Perceiver model)"),hCe.forEach(t),hio=i(ae),fh=n(ae,"LI",{});var pCe=s(fh);hae=n(pCe,"STRONG",{});var IQr=s(hae);pio=r(IQr,"poolformer"),IQr.forEach(t),uio=r(pCe," \u2014 "),mP=n(pCe,"A",{href:!0});var qQr=s(mP);_io=r(qQr,"PoolFormerFeatureExtractor"),qQr.forEach(t),bio=r(pCe," (PoolFormer model)"),pCe.forEach(t),vio=i(ae),mh=n(ae,"LI",{});var uCe=s(mh);pae=n(uCe,"STRONG",{});var NQr=s(pae);Fio=r(NQr,"regnet"),NQr.forEach(t),Tio=r(uCe," \u2014 "),gP=n(uCe,"A",{href:!0});var jQr=s(gP);Mio=r(jQr,"ConvNextFeatureExtractor"),jQr.forEach(t),Eio=r(uCe," (RegNet model)"),uCe.forEach(t),Cio=i(ae),gh=n(ae,"LI",{});var _Ce=s(gh);uae=n(_Ce,"STRONG",{});var DQr=s(uae);wio=r(DQr,"resnet"),DQr.forEach(t),Aio=r(_Ce," \u2014 "),hP=n(_Ce,"A",{href:!0});var GQr=s(hP);yio=r(GQr,"ConvNextFeatureExtractor"),GQr.forEach(t),Lio=r(_Ce," (ResNet model)"),_Ce.forEach(t),xio=i(ae),hh=n(ae,"LI",{});var bCe=s(hh);_ae=n(bCe,"STRONG",{});var OQr=s(_ae);$io=r(OQr,"segformer"),OQr.forEach(t),kio=r(bCe," \u2014 "),pP=n(bCe,"A",{href:!0});var VQr=s(pP);Sio=r(VQr,"SegformerFeatureExtractor"),VQr.forEach(t),Rio=r(bCe," (SegFormer model)"),bCe.forEach(t),Bio=i(ae),ph=n(ae,"LI",{});var vCe=s(ph);bae=n(vCe,"STRONG",{});var XQr=s(bae);Pio=r(XQr,"speech_to_text"),XQr.forEach(t),Iio=r(vCe," \u2014 "),uP=n(vCe,"A",{href:!0});var zQr=s(uP);qio=r(zQr,"Speech2TextFeatureExtractor"),zQr.forEach(t),Nio=r(vCe," (Speech2Text model)"),vCe.forEach(t),jio=i(ae),uh=n(ae,"LI",{});var FCe=s(uh);vae=n(FCe,"STRONG",{});var QQr=s(vae);Dio=r(QQr,"swin"),QQr.forEach(t),Gio=r(FCe," \u2014 "),_P=n(FCe,"A",{href:!0});var WQr=s(_P);Oio=r(WQr,"ViTFeatureExtractor"),WQr.forEach(t),Vio=r(FCe," (Swin model)"),FCe.forEach(t),Xio=i(ae),_h=n(ae,"LI",{});var TCe=s(_h);Fae=n(TCe,"STRONG",{});var HQr=s(Fae);zio=r(HQr,"van"),HQr.forEach(t),Qio=r(TCe," \u2014 "),bP=n(TCe,"A",{href:!0});var UQr=s(bP);Wio=r(UQr,"ConvNextFeatureExtractor"),UQr.forEach(t),Hio=r(TCe," (VAN model)"),TCe.forEach(t),Uio=i(ae),bh=n(ae,"LI",{});var MCe=s(bh);Tae=n(MCe,"STRONG",{});var JQr=s(Tae);Jio=r(JQr,"vit"),JQr.forEach(t),Yio=r(MCe," \u2014 "),vP=n(MCe,"A",{href:!0});var YQr=s(vP);Kio=r(YQr,"ViTFeatureExtractor"),YQr.forEach(t),Zio=r(MCe," (ViT model)"),MCe.forEach(t),edo=i(ae),vh=n(ae,"LI",{});var ECe=s(vh);Mae=n(ECe,"STRONG",{});var KQr=s(Mae);odo=r(KQr,"vit_mae"),KQr.forEach(t),rdo=r(ECe," \u2014 "),FP=n(ECe,"A",{href:!0});var ZQr=s(FP);tdo=r(ZQr,"ViTFeatureExtractor"),ZQr.forEach(t),ado=r(ECe," (ViTMAE model)"),ECe.forEach(t),ndo=i(ae),Fh=n(ae,"LI",{});var CCe=s(Fh);Eae=n(CCe,"STRONG",{});var eWr=s(Eae);sdo=r(eWr,"wav2vec2"),eWr.forEach(t),ldo=r(CCe," \u2014 "),TP=n(CCe,"A",{href:!0});var oWr=s(TP);ido=r(oWr,"Wav2Vec2FeatureExtractor"),oWr.forEach(t),ddo=r(CCe," (Wav2Vec2 model)"),CCe.forEach(t),cdo=i(ae),Th=n(ae,"LI",{});var wCe=s(Th);Cae=n(wCe,"STRONG",{});var rWr=s(Cae);fdo=r(rWr,"yolos"),rWr.forEach(t),mdo=r(wCe," \u2014 "),MP=n(wCe,"A",{href:!0});var tWr=s(MP);gdo=r(tWr,"YolosFeatureExtractor"),tWr.forEach(t),hdo=r(wCe," (YOLOS model)"),wCe.forEach(t),ae.forEach(t),pdo=i(Yt),T(Mh.$$.fragment,Yt),udo=i(Yt),T(Eh.$$.fragment,Yt),Yt.forEach(t),_do=i(Ns),Ch=n(Ns,"DIV",{class:!0});var Kqe=s(Ch);T(pA.$$.fragment,Kqe),bdo=i(Kqe),wae=n(Kqe,"P",{});var aWr=s(wae);vdo=r(aWr,"Register a new feature extractor for this class."),aWr.forEach(t),Kqe.forEach(t),Ns.forEach(t),YPe=i(f),Fi=n(f,"H2",{class:!0});var Zqe=s(Fi);wh=n(Zqe,"A",{id:!0,class:!0,href:!0});var nWr=s(wh);Aae=n(nWr,"SPAN",{});var sWr=s(Aae);T(uA.$$.fragment,sWr),sWr.forEach(t),nWr.forEach(t),Fdo=i(Zqe),yae=n(Zqe,"SPAN",{});var lWr=s(yae);Tdo=r(lWr,"AutoProcessor"),lWr.forEach(t),Zqe.forEach(t),KPe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(_A.$$.fragment,js),Mdo=i(js),bA=n(js,"P",{});var eNe=s(bA);Edo=r(eNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EP=n(eNe,"A",{href:!0});var iWr=s(EP);Cdo=r(iWr,"AutoProcessor.from_pretrained()"),iWr.forEach(t),wdo=r(eNe," class method."),eNe.forEach(t),Ado=i(js),vA=n(js,"P",{});var oNe=s(vA);ydo=r(oNe,"This class cannot be instantiated directly using "),Lae=n(oNe,"CODE",{});var dWr=s(Lae);Ldo=r(dWr,"__init__()"),dWr.forEach(t),xdo=r(oNe," (throws an error)."),oNe.forEach(t),$do=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(FA.$$.fragment,Kt),kdo=i(Kt),xae=n(Kt,"P",{});var cWr=s(xae);Sdo=r(cWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cWr.forEach(t),Rdo=i(Kt),Ti=n(Kt,"P",{});var iK=s(Ti);Bdo=r(iK,"The processor class to instantiate is selected based on the "),$ae=n(iK,"CODE",{});var fWr=s($ae);Pdo=r(fWr,"model_type"),fWr.forEach(t),Ido=r(iK,` property of the config object (either
passed as an argument or loaded from `),kae=n(iK,"CODE",{});var mWr=s(kae);qdo=r(mWr,"pretrained_model_name_or_path"),mWr.forEach(t),Ndo=r(iK," if possible):"),iK.forEach(t),jdo=i(Kt),be=n(Kt,"UL",{});var ve=s(be);Ah=n(ve,"LI",{});var ACe=s(Ah);Sae=n(ACe,"STRONG",{});var gWr=s(Sae);Ddo=r(gWr,"clip"),gWr.forEach(t),Gdo=r(ACe," \u2014 "),CP=n(ACe,"A",{href:!0});var hWr=s(CP);Odo=r(hWr,"CLIPProcessor"),hWr.forEach(t),Vdo=r(ACe," (CLIP model)"),ACe.forEach(t),Xdo=i(ve),yh=n(ve,"LI",{});var yCe=s(yh);Rae=n(yCe,"STRONG",{});var pWr=s(Rae);zdo=r(pWr,"layoutlmv2"),pWr.forEach(t),Qdo=r(yCe," \u2014 "),wP=n(yCe,"A",{href:!0});var uWr=s(wP);Wdo=r(uWr,"LayoutLMv2Processor"),uWr.forEach(t),Hdo=r(yCe," (LayoutLMv2 model)"),yCe.forEach(t),Udo=i(ve),Lh=n(ve,"LI",{});var LCe=s(Lh);Bae=n(LCe,"STRONG",{});var _Wr=s(Bae);Jdo=r(_Wr,"layoutlmv3"),_Wr.forEach(t),Ydo=r(LCe," \u2014 "),AP=n(LCe,"A",{href:!0});var bWr=s(AP);Kdo=r(bWr,"LayoutLMv3Processor"),bWr.forEach(t),Zdo=r(LCe," (LayoutLMv3 model)"),LCe.forEach(t),eco=i(ve),xh=n(ve,"LI",{});var xCe=s(xh);Pae=n(xCe,"STRONG",{});var vWr=s(Pae);oco=r(vWr,"layoutxlm"),vWr.forEach(t),rco=r(xCe," \u2014 "),yP=n(xCe,"A",{href:!0});var FWr=s(yP);tco=r(FWr,"LayoutXLMProcessor"),FWr.forEach(t),aco=r(xCe," (LayoutXLM model)"),xCe.forEach(t),nco=i(ve),$h=n(ve,"LI",{});var $Ce=s($h);Iae=n($Ce,"STRONG",{});var TWr=s(Iae);sco=r(TWr,"sew"),TWr.forEach(t),lco=r($Ce," \u2014 "),LP=n($Ce,"A",{href:!0});var MWr=s(LP);ico=r(MWr,"Wav2Vec2Processor"),MWr.forEach(t),dco=r($Ce," (SEW model)"),$Ce.forEach(t),cco=i(ve),kh=n(ve,"LI",{});var kCe=s(kh);qae=n(kCe,"STRONG",{});var EWr=s(qae);fco=r(EWr,"sew-d"),EWr.forEach(t),mco=r(kCe," \u2014 "),xP=n(kCe,"A",{href:!0});var CWr=s(xP);gco=r(CWr,"Wav2Vec2Processor"),CWr.forEach(t),hco=r(kCe," (SEW-D model)"),kCe.forEach(t),pco=i(ve),Sh=n(ve,"LI",{});var SCe=s(Sh);Nae=n(SCe,"STRONG",{});var wWr=s(Nae);uco=r(wWr,"speech_to_text"),wWr.forEach(t),_co=r(SCe," \u2014 "),$P=n(SCe,"A",{href:!0});var AWr=s($P);bco=r(AWr,"Speech2TextProcessor"),AWr.forEach(t),vco=r(SCe," (Speech2Text model)"),SCe.forEach(t),Fco=i(ve),Rh=n(ve,"LI",{});var RCe=s(Rh);jae=n(RCe,"STRONG",{});var yWr=s(jae);Tco=r(yWr,"speech_to_text_2"),yWr.forEach(t),Mco=r(RCe," \u2014 "),kP=n(RCe,"A",{href:!0});var LWr=s(kP);Eco=r(LWr,"Speech2Text2Processor"),LWr.forEach(t),Cco=r(RCe," (Speech2Text2 model)"),RCe.forEach(t),wco=i(ve),Bh=n(ve,"LI",{});var BCe=s(Bh);Dae=n(BCe,"STRONG",{});var xWr=s(Dae);Aco=r(xWr,"trocr"),xWr.forEach(t),yco=r(BCe," \u2014 "),SP=n(BCe,"A",{href:!0});var $Wr=s(SP);Lco=r($Wr,"TrOCRProcessor"),$Wr.forEach(t),xco=r(BCe," (TrOCR model)"),BCe.forEach(t),$co=i(ve),Ph=n(ve,"LI",{});var PCe=s(Ph);Gae=n(PCe,"STRONG",{});var kWr=s(Gae);kco=r(kWr,"unispeech"),kWr.forEach(t),Sco=r(PCe," \u2014 "),RP=n(PCe,"A",{href:!0});var SWr=s(RP);Rco=r(SWr,"Wav2Vec2Processor"),SWr.forEach(t),Bco=r(PCe," (UniSpeech model)"),PCe.forEach(t),Pco=i(ve),Ih=n(ve,"LI",{});var ICe=s(Ih);Oae=n(ICe,"STRONG",{});var RWr=s(Oae);Ico=r(RWr,"unispeech-sat"),RWr.forEach(t),qco=r(ICe," \u2014 "),BP=n(ICe,"A",{href:!0});var BWr=s(BP);Nco=r(BWr,"Wav2Vec2Processor"),BWr.forEach(t),jco=r(ICe," (UniSpeechSat model)"),ICe.forEach(t),Dco=i(ve),qh=n(ve,"LI",{});var qCe=s(qh);Vae=n(qCe,"STRONG",{});var PWr=s(Vae);Gco=r(PWr,"vilt"),PWr.forEach(t),Oco=r(qCe," \u2014 "),PP=n(qCe,"A",{href:!0});var IWr=s(PP);Vco=r(IWr,"ViltProcessor"),IWr.forEach(t),Xco=r(qCe," (ViLT model)"),qCe.forEach(t),zco=i(ve),Nh=n(ve,"LI",{});var NCe=s(Nh);Xae=n(NCe,"STRONG",{});var qWr=s(Xae);Qco=r(qWr,"vision-text-dual-encoder"),qWr.forEach(t),Wco=r(NCe," \u2014 "),IP=n(NCe,"A",{href:!0});var NWr=s(IP);Hco=r(NWr,"VisionTextDualEncoderProcessor"),NWr.forEach(t),Uco=r(NCe," (VisionTextDualEncoder model)"),NCe.forEach(t),Jco=i(ve),jh=n(ve,"LI",{});var jCe=s(jh);zae=n(jCe,"STRONG",{});var jWr=s(zae);Yco=r(jWr,"wav2vec2"),jWr.forEach(t),Kco=r(jCe," \u2014 "),qP=n(jCe,"A",{href:!0});var DWr=s(qP);Zco=r(DWr,"Wav2Vec2Processor"),DWr.forEach(t),efo=r(jCe," (Wav2Vec2 model)"),jCe.forEach(t),ofo=i(ve),Dh=n(ve,"LI",{});var DCe=s(Dh);Qae=n(DCe,"STRONG",{});var GWr=s(Qae);rfo=r(GWr,"wavlm"),GWr.forEach(t),tfo=r(DCe," \u2014 "),NP=n(DCe,"A",{href:!0});var OWr=s(NP);afo=r(OWr,"Wav2Vec2Processor"),OWr.forEach(t),nfo=r(DCe," (WavLM model)"),DCe.forEach(t),ve.forEach(t),sfo=i(Kt),T(Gh.$$.fragment,Kt),lfo=i(Kt),T(Oh.$$.fragment,Kt),Kt.forEach(t),ifo=i(js),Vh=n(js,"DIV",{class:!0});var rNe=s(Vh);T(TA.$$.fragment,rNe),dfo=i(rNe),Wae=n(rNe,"P",{});var VWr=s(Wae);cfo=r(VWr,"Register a new processor for this class."),VWr.forEach(t),rNe.forEach(t),js.forEach(t),ZPe=i(f),Mi=n(f,"H2",{class:!0});var tNe=s(Mi);Xh=n(tNe,"A",{id:!0,class:!0,href:!0});var XWr=s(Xh);Hae=n(XWr,"SPAN",{});var zWr=s(Hae);T(MA.$$.fragment,zWr),zWr.forEach(t),XWr.forEach(t),ffo=i(tNe),Uae=n(tNe,"SPAN",{});var QWr=s(Uae);mfo=r(QWr,"AutoModel"),QWr.forEach(t),tNe.forEach(t),eIe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(EA.$$.fragment,Ds),gfo=i(Ds),Ei=n(Ds,"P",{});var dK=s(Ei);hfo=r(dK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jP=n(dK,"A",{href:!0});var WWr=s(jP);pfo=r(WWr,"from_pretrained()"),WWr.forEach(t),ufo=r(dK," class method or the "),DP=n(dK,"A",{href:!0});var HWr=s(DP);_fo=r(HWr,"from_config()"),HWr.forEach(t),bfo=r(dK,` class
method.`),dK.forEach(t),vfo=i(Ds),CA=n(Ds,"P",{});var aNe=s(CA);Ffo=r(aNe,"This class cannot be instantiated directly using "),Jae=n(aNe,"CODE",{});var UWr=s(Jae);Tfo=r(UWr,"__init__()"),UWr.forEach(t),Mfo=r(aNe," (throws an error)."),aNe.forEach(t),Efo=i(Ds),ot=n(Ds,"DIV",{class:!0});var ZC=s(ot);T(wA.$$.fragment,ZC),Cfo=i(ZC),Yae=n(ZC,"P",{});var JWr=s(Yae);wfo=r(JWr,"Instantiates one of the base model classes of the library from a configuration."),JWr.forEach(t),Afo=i(ZC),Ci=n(ZC,"P",{});var cK=s(Ci);yfo=r(cK,`Note:
Loading a model from its configuration file does `),Kae=n(cK,"STRONG",{});var YWr=s(Kae);Lfo=r(YWr,"not"),YWr.forEach(t),xfo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GP=n(cK,"A",{href:!0});var KWr=s(GP);$fo=r(KWr,"from_pretrained()"),KWr.forEach(t),kfo=r(cK," to load the model weights."),cK.forEach(t),Sfo=i(ZC),T(zh.$$.fragment,ZC),ZC.forEach(t),Rfo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(AA.$$.fragment,Zt),Bfo=i(Zt),Zae=n(Zt,"P",{});var ZWr=s(Zae);Pfo=r(ZWr,"Instantiate one of the base model classes of the library from a pretrained model."),ZWr.forEach(t),Ifo=i(Zt),Aa=n(Zt,"P",{});var e3=s(Aa);qfo=r(e3,"The model class to instantiate is selected based on the "),ene=n(e3,"CODE",{});var eHr=s(ene);Nfo=r(eHr,"model_type"),eHr.forEach(t),jfo=r(e3,` property of the config object (either
passed as an argument or loaded from `),one=n(e3,"CODE",{});var oHr=s(one);Dfo=r(oHr,"pretrained_model_name_or_path"),oHr.forEach(t),Gfo=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rne=n(e3,"CODE",{});var rHr=s(rne);Ofo=r(rHr,"pretrained_model_name_or_path"),rHr.forEach(t),Vfo=r(e3,":"),e3.forEach(t),Xfo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Qh=n($,"LI",{});var GCe=s(Qh);tne=n(GCe,"STRONG",{});var tHr=s(tne);zfo=r(tHr,"albert"),tHr.forEach(t),Qfo=r(GCe," \u2014 "),OP=n(GCe,"A",{href:!0});var aHr=s(OP);Wfo=r(aHr,"AlbertModel"),aHr.forEach(t),Hfo=r(GCe," (ALBERT model)"),GCe.forEach(t),Ufo=i($),Wh=n($,"LI",{});var OCe=s(Wh);ane=n(OCe,"STRONG",{});var nHr=s(ane);Jfo=r(nHr,"bart"),nHr.forEach(t),Yfo=r(OCe," \u2014 "),VP=n(OCe,"A",{href:!0});var sHr=s(VP);Kfo=r(sHr,"BartModel"),sHr.forEach(t),Zfo=r(OCe," (BART model)"),OCe.forEach(t),emo=i($),Hh=n($,"LI",{});var VCe=s(Hh);nne=n(VCe,"STRONG",{});var lHr=s(nne);omo=r(lHr,"beit"),lHr.forEach(t),rmo=r(VCe," \u2014 "),XP=n(VCe,"A",{href:!0});var iHr=s(XP);tmo=r(iHr,"BeitModel"),iHr.forEach(t),amo=r(VCe," (BEiT model)"),VCe.forEach(t),nmo=i($),Uh=n($,"LI",{});var XCe=s(Uh);sne=n(XCe,"STRONG",{});var dHr=s(sne);smo=r(dHr,"bert"),dHr.forEach(t),lmo=r(XCe," \u2014 "),zP=n(XCe,"A",{href:!0});var cHr=s(zP);imo=r(cHr,"BertModel"),cHr.forEach(t),dmo=r(XCe," (BERT model)"),XCe.forEach(t),cmo=i($),Jh=n($,"LI",{});var zCe=s(Jh);lne=n(zCe,"STRONG",{});var fHr=s(lne);fmo=r(fHr,"bert-generation"),fHr.forEach(t),mmo=r(zCe," \u2014 "),QP=n(zCe,"A",{href:!0});var mHr=s(QP);gmo=r(mHr,"BertGenerationEncoder"),mHr.forEach(t),hmo=r(zCe," (Bert Generation model)"),zCe.forEach(t),pmo=i($),Yh=n($,"LI",{});var QCe=s(Yh);ine=n(QCe,"STRONG",{});var gHr=s(ine);umo=r(gHr,"big_bird"),gHr.forEach(t),_mo=r(QCe," \u2014 "),WP=n(QCe,"A",{href:!0});var hHr=s(WP);bmo=r(hHr,"BigBirdModel"),hHr.forEach(t),vmo=r(QCe," (BigBird model)"),QCe.forEach(t),Fmo=i($),Kh=n($,"LI",{});var WCe=s(Kh);dne=n(WCe,"STRONG",{});var pHr=s(dne);Tmo=r(pHr,"bigbird_pegasus"),pHr.forEach(t),Mmo=r(WCe," \u2014 "),HP=n(WCe,"A",{href:!0});var uHr=s(HP);Emo=r(uHr,"BigBirdPegasusModel"),uHr.forEach(t),Cmo=r(WCe," (BigBirdPegasus model)"),WCe.forEach(t),wmo=i($),Zh=n($,"LI",{});var HCe=s(Zh);cne=n(HCe,"STRONG",{});var _Hr=s(cne);Amo=r(_Hr,"blenderbot"),_Hr.forEach(t),ymo=r(HCe," \u2014 "),UP=n(HCe,"A",{href:!0});var bHr=s(UP);Lmo=r(bHr,"BlenderbotModel"),bHr.forEach(t),xmo=r(HCe," (Blenderbot model)"),HCe.forEach(t),$mo=i($),ep=n($,"LI",{});var UCe=s(ep);fne=n(UCe,"STRONG",{});var vHr=s(fne);kmo=r(vHr,"blenderbot-small"),vHr.forEach(t),Smo=r(UCe," \u2014 "),JP=n(UCe,"A",{href:!0});var FHr=s(JP);Rmo=r(FHr,"BlenderbotSmallModel"),FHr.forEach(t),Bmo=r(UCe," (BlenderbotSmall model)"),UCe.forEach(t),Pmo=i($),op=n($,"LI",{});var JCe=s(op);mne=n(JCe,"STRONG",{});var THr=s(mne);Imo=r(THr,"camembert"),THr.forEach(t),qmo=r(JCe," \u2014 "),YP=n(JCe,"A",{href:!0});var MHr=s(YP);Nmo=r(MHr,"CamembertModel"),MHr.forEach(t),jmo=r(JCe," (CamemBERT model)"),JCe.forEach(t),Dmo=i($),rp=n($,"LI",{});var YCe=s(rp);gne=n(YCe,"STRONG",{});var EHr=s(gne);Gmo=r(EHr,"canine"),EHr.forEach(t),Omo=r(YCe," \u2014 "),KP=n(YCe,"A",{href:!0});var CHr=s(KP);Vmo=r(CHr,"CanineModel"),CHr.forEach(t),Xmo=r(YCe," (Canine model)"),YCe.forEach(t),zmo=i($),tp=n($,"LI",{});var KCe=s(tp);hne=n(KCe,"STRONG",{});var wHr=s(hne);Qmo=r(wHr,"clip"),wHr.forEach(t),Wmo=r(KCe," \u2014 "),ZP=n(KCe,"A",{href:!0});var AHr=s(ZP);Hmo=r(AHr,"CLIPModel"),AHr.forEach(t),Umo=r(KCe," (CLIP model)"),KCe.forEach(t),Jmo=i($),ap=n($,"LI",{});var ZCe=s(ap);pne=n(ZCe,"STRONG",{});var yHr=s(pne);Ymo=r(yHr,"convbert"),yHr.forEach(t),Kmo=r(ZCe," \u2014 "),eI=n(ZCe,"A",{href:!0});var LHr=s(eI);Zmo=r(LHr,"ConvBertModel"),LHr.forEach(t),ego=r(ZCe," (ConvBERT model)"),ZCe.forEach(t),ogo=i($),np=n($,"LI",{});var e3e=s(np);une=n(e3e,"STRONG",{});var xHr=s(une);rgo=r(xHr,"convnext"),xHr.forEach(t),tgo=r(e3e," \u2014 "),oI=n(e3e,"A",{href:!0});var $Hr=s(oI);ago=r($Hr,"ConvNextModel"),$Hr.forEach(t),ngo=r(e3e," (ConvNext model)"),e3e.forEach(t),sgo=i($),sp=n($,"LI",{});var o3e=s(sp);_ne=n(o3e,"STRONG",{});var kHr=s(_ne);lgo=r(kHr,"ctrl"),kHr.forEach(t),igo=r(o3e," \u2014 "),rI=n(o3e,"A",{href:!0});var SHr=s(rI);dgo=r(SHr,"CTRLModel"),SHr.forEach(t),cgo=r(o3e," (CTRL model)"),o3e.forEach(t),fgo=i($),lp=n($,"LI",{});var r3e=s(lp);bne=n(r3e,"STRONG",{});var RHr=s(bne);mgo=r(RHr,"data2vec-audio"),RHr.forEach(t),ggo=r(r3e," \u2014 "),tI=n(r3e,"A",{href:!0});var BHr=s(tI);hgo=r(BHr,"Data2VecAudioModel"),BHr.forEach(t),pgo=r(r3e," (Data2VecAudio model)"),r3e.forEach(t),ugo=i($),ip=n($,"LI",{});var t3e=s(ip);vne=n(t3e,"STRONG",{});var PHr=s(vne);_go=r(PHr,"data2vec-text"),PHr.forEach(t),bgo=r(t3e," \u2014 "),aI=n(t3e,"A",{href:!0});var IHr=s(aI);vgo=r(IHr,"Data2VecTextModel"),IHr.forEach(t),Fgo=r(t3e," (Data2VecText model)"),t3e.forEach(t),Tgo=i($),dp=n($,"LI",{});var a3e=s(dp);Fne=n(a3e,"STRONG",{});var qHr=s(Fne);Mgo=r(qHr,"data2vec-vision"),qHr.forEach(t),Ego=r(a3e," \u2014 "),nI=n(a3e,"A",{href:!0});var NHr=s(nI);Cgo=r(NHr,"Data2VecVisionModel"),NHr.forEach(t),wgo=r(a3e," (Data2VecVision model)"),a3e.forEach(t),Ago=i($),cp=n($,"LI",{});var n3e=s(cp);Tne=n(n3e,"STRONG",{});var jHr=s(Tne);ygo=r(jHr,"deberta"),jHr.forEach(t),Lgo=r(n3e," \u2014 "),sI=n(n3e,"A",{href:!0});var DHr=s(sI);xgo=r(DHr,"DebertaModel"),DHr.forEach(t),$go=r(n3e," (DeBERTa model)"),n3e.forEach(t),kgo=i($),fp=n($,"LI",{});var s3e=s(fp);Mne=n(s3e,"STRONG",{});var GHr=s(Mne);Sgo=r(GHr,"deberta-v2"),GHr.forEach(t),Rgo=r(s3e," \u2014 "),lI=n(s3e,"A",{href:!0});var OHr=s(lI);Bgo=r(OHr,"DebertaV2Model"),OHr.forEach(t),Pgo=r(s3e," (DeBERTa-v2 model)"),s3e.forEach(t),Igo=i($),mp=n($,"LI",{});var l3e=s(mp);Ene=n(l3e,"STRONG",{});var VHr=s(Ene);qgo=r(VHr,"decision_transformer"),VHr.forEach(t),Ngo=r(l3e," \u2014 "),iI=n(l3e,"A",{href:!0});var XHr=s(iI);jgo=r(XHr,"DecisionTransformerModel"),XHr.forEach(t),Dgo=r(l3e," (Decision Transformer model)"),l3e.forEach(t),Ggo=i($),gp=n($,"LI",{});var i3e=s(gp);Cne=n(i3e,"STRONG",{});var zHr=s(Cne);Ogo=r(zHr,"deit"),zHr.forEach(t),Vgo=r(i3e," \u2014 "),dI=n(i3e,"A",{href:!0});var QHr=s(dI);Xgo=r(QHr,"DeiTModel"),QHr.forEach(t),zgo=r(i3e," (DeiT model)"),i3e.forEach(t),Qgo=i($),hp=n($,"LI",{});var d3e=s(hp);wne=n(d3e,"STRONG",{});var WHr=s(wne);Wgo=r(WHr,"detr"),WHr.forEach(t),Hgo=r(d3e," \u2014 "),cI=n(d3e,"A",{href:!0});var HHr=s(cI);Ugo=r(HHr,"DetrModel"),HHr.forEach(t),Jgo=r(d3e," (DETR model)"),d3e.forEach(t),Ygo=i($),pp=n($,"LI",{});var c3e=s(pp);Ane=n(c3e,"STRONG",{});var UHr=s(Ane);Kgo=r(UHr,"distilbert"),UHr.forEach(t),Zgo=r(c3e," \u2014 "),fI=n(c3e,"A",{href:!0});var JHr=s(fI);eho=r(JHr,"DistilBertModel"),JHr.forEach(t),oho=r(c3e," (DistilBERT model)"),c3e.forEach(t),rho=i($),up=n($,"LI",{});var f3e=s(up);yne=n(f3e,"STRONG",{});var YHr=s(yne);tho=r(YHr,"dpr"),YHr.forEach(t),aho=r(f3e," \u2014 "),mI=n(f3e,"A",{href:!0});var KHr=s(mI);nho=r(KHr,"DPRQuestionEncoder"),KHr.forEach(t),sho=r(f3e," (DPR model)"),f3e.forEach(t),lho=i($),_p=n($,"LI",{});var m3e=s(_p);Lne=n(m3e,"STRONG",{});var ZHr=s(Lne);iho=r(ZHr,"dpt"),ZHr.forEach(t),dho=r(m3e," \u2014 "),gI=n(m3e,"A",{href:!0});var eUr=s(gI);cho=r(eUr,"DPTModel"),eUr.forEach(t),fho=r(m3e," (DPT model)"),m3e.forEach(t),mho=i($),bp=n($,"LI",{});var g3e=s(bp);xne=n(g3e,"STRONG",{});var oUr=s(xne);gho=r(oUr,"electra"),oUr.forEach(t),hho=r(g3e," \u2014 "),hI=n(g3e,"A",{href:!0});var rUr=s(hI);pho=r(rUr,"ElectraModel"),rUr.forEach(t),uho=r(g3e," (ELECTRA model)"),g3e.forEach(t),_ho=i($),vp=n($,"LI",{});var h3e=s(vp);$ne=n(h3e,"STRONG",{});var tUr=s($ne);bho=r(tUr,"flaubert"),tUr.forEach(t),vho=r(h3e," \u2014 "),pI=n(h3e,"A",{href:!0});var aUr=s(pI);Fho=r(aUr,"FlaubertModel"),aUr.forEach(t),Tho=r(h3e," (FlauBERT model)"),h3e.forEach(t),Mho=i($),Fp=n($,"LI",{});var p3e=s(Fp);kne=n(p3e,"STRONG",{});var nUr=s(kne);Eho=r(nUr,"fnet"),nUr.forEach(t),Cho=r(p3e," \u2014 "),uI=n(p3e,"A",{href:!0});var sUr=s(uI);who=r(sUr,"FNetModel"),sUr.forEach(t),Aho=r(p3e," (FNet model)"),p3e.forEach(t),yho=i($),Tp=n($,"LI",{});var u3e=s(Tp);Sne=n(u3e,"STRONG",{});var lUr=s(Sne);Lho=r(lUr,"fsmt"),lUr.forEach(t),xho=r(u3e," \u2014 "),_I=n(u3e,"A",{href:!0});var iUr=s(_I);$ho=r(iUr,"FSMTModel"),iUr.forEach(t),kho=r(u3e," (FairSeq Machine-Translation model)"),u3e.forEach(t),Sho=i($),Rs=n($,"LI",{});var f$=s(Rs);Rne=n(f$,"STRONG",{});var dUr=s(Rne);Rho=r(dUr,"funnel"),dUr.forEach(t),Bho=r(f$," \u2014 "),bI=n(f$,"A",{href:!0});var cUr=s(bI);Pho=r(cUr,"FunnelModel"),cUr.forEach(t),Iho=r(f$," or "),vI=n(f$,"A",{href:!0});var fUr=s(vI);qho=r(fUr,"FunnelBaseModel"),fUr.forEach(t),Nho=r(f$," (Funnel Transformer model)"),f$.forEach(t),jho=i($),Mp=n($,"LI",{});var _3e=s(Mp);Bne=n(_3e,"STRONG",{});var mUr=s(Bne);Dho=r(mUr,"glpn"),mUr.forEach(t),Gho=r(_3e," \u2014 "),FI=n(_3e,"A",{href:!0});var gUr=s(FI);Oho=r(gUr,"GLPNModel"),gUr.forEach(t),Vho=r(_3e," (GLPN model)"),_3e.forEach(t),Xho=i($),Ep=n($,"LI",{});var b3e=s(Ep);Pne=n(b3e,"STRONG",{});var hUr=s(Pne);zho=r(hUr,"gpt2"),hUr.forEach(t),Qho=r(b3e," \u2014 "),TI=n(b3e,"A",{href:!0});var pUr=s(TI);Who=r(pUr,"GPT2Model"),pUr.forEach(t),Hho=r(b3e," (OpenAI GPT-2 model)"),b3e.forEach(t),Uho=i($),Cp=n($,"LI",{});var v3e=s(Cp);Ine=n(v3e,"STRONG",{});var uUr=s(Ine);Jho=r(uUr,"gpt_neo"),uUr.forEach(t),Yho=r(v3e," \u2014 "),MI=n(v3e,"A",{href:!0});var _Ur=s(MI);Kho=r(_Ur,"GPTNeoModel"),_Ur.forEach(t),Zho=r(v3e," (GPT Neo model)"),v3e.forEach(t),epo=i($),wp=n($,"LI",{});var F3e=s(wp);qne=n(F3e,"STRONG",{});var bUr=s(qne);opo=r(bUr,"gptj"),bUr.forEach(t),rpo=r(F3e," \u2014 "),EI=n(F3e,"A",{href:!0});var vUr=s(EI);tpo=r(vUr,"GPTJModel"),vUr.forEach(t),apo=r(F3e," (GPT-J model)"),F3e.forEach(t),npo=i($),Ap=n($,"LI",{});var T3e=s(Ap);Nne=n(T3e,"STRONG",{});var FUr=s(Nne);spo=r(FUr,"hubert"),FUr.forEach(t),lpo=r(T3e," \u2014 "),CI=n(T3e,"A",{href:!0});var TUr=s(CI);ipo=r(TUr,"HubertModel"),TUr.forEach(t),dpo=r(T3e," (Hubert model)"),T3e.forEach(t),cpo=i($),yp=n($,"LI",{});var M3e=s(yp);jne=n(M3e,"STRONG",{});var MUr=s(jne);fpo=r(MUr,"ibert"),MUr.forEach(t),mpo=r(M3e," \u2014 "),wI=n(M3e,"A",{href:!0});var EUr=s(wI);gpo=r(EUr,"IBertModel"),EUr.forEach(t),hpo=r(M3e," (I-BERT model)"),M3e.forEach(t),ppo=i($),Lp=n($,"LI",{});var E3e=s(Lp);Dne=n(E3e,"STRONG",{});var CUr=s(Dne);upo=r(CUr,"imagegpt"),CUr.forEach(t),_po=r(E3e," \u2014 "),AI=n(E3e,"A",{href:!0});var wUr=s(AI);bpo=r(wUr,"ImageGPTModel"),wUr.forEach(t),vpo=r(E3e," (ImageGPT model)"),E3e.forEach(t),Fpo=i($),xp=n($,"LI",{});var C3e=s(xp);Gne=n(C3e,"STRONG",{});var AUr=s(Gne);Tpo=r(AUr,"layoutlm"),AUr.forEach(t),Mpo=r(C3e," \u2014 "),yI=n(C3e,"A",{href:!0});var yUr=s(yI);Epo=r(yUr,"LayoutLMModel"),yUr.forEach(t),Cpo=r(C3e," (LayoutLM model)"),C3e.forEach(t),wpo=i($),$p=n($,"LI",{});var w3e=s($p);One=n(w3e,"STRONG",{});var LUr=s(One);Apo=r(LUr,"layoutlmv2"),LUr.forEach(t),ypo=r(w3e," \u2014 "),LI=n(w3e,"A",{href:!0});var xUr=s(LI);Lpo=r(xUr,"LayoutLMv2Model"),xUr.forEach(t),xpo=r(w3e," (LayoutLMv2 model)"),w3e.forEach(t),$po=i($),kp=n($,"LI",{});var A3e=s(kp);Vne=n(A3e,"STRONG",{});var $Ur=s(Vne);kpo=r($Ur,"layoutlmv3"),$Ur.forEach(t),Spo=r(A3e," \u2014 "),xI=n(A3e,"A",{href:!0});var kUr=s(xI);Rpo=r(kUr,"LayoutLMv3Model"),kUr.forEach(t),Bpo=r(A3e," (LayoutLMv3 model)"),A3e.forEach(t),Ppo=i($),Sp=n($,"LI",{});var y3e=s(Sp);Xne=n(y3e,"STRONG",{});var SUr=s(Xne);Ipo=r(SUr,"led"),SUr.forEach(t),qpo=r(y3e," \u2014 "),$I=n(y3e,"A",{href:!0});var RUr=s($I);Npo=r(RUr,"LEDModel"),RUr.forEach(t),jpo=r(y3e," (LED model)"),y3e.forEach(t),Dpo=i($),Rp=n($,"LI",{});var L3e=s(Rp);zne=n(L3e,"STRONG",{});var BUr=s(zne);Gpo=r(BUr,"longformer"),BUr.forEach(t),Opo=r(L3e," \u2014 "),kI=n(L3e,"A",{href:!0});var PUr=s(kI);Vpo=r(PUr,"LongformerModel"),PUr.forEach(t),Xpo=r(L3e," (Longformer model)"),L3e.forEach(t),zpo=i($),Bp=n($,"LI",{});var x3e=s(Bp);Qne=n(x3e,"STRONG",{});var IUr=s(Qne);Qpo=r(IUr,"luke"),IUr.forEach(t),Wpo=r(x3e," \u2014 "),SI=n(x3e,"A",{href:!0});var qUr=s(SI);Hpo=r(qUr,"LukeModel"),qUr.forEach(t),Upo=r(x3e," (LUKE model)"),x3e.forEach(t),Jpo=i($),Pp=n($,"LI",{});var $3e=s(Pp);Wne=n($3e,"STRONG",{});var NUr=s(Wne);Ypo=r(NUr,"lxmert"),NUr.forEach(t),Kpo=r($3e," \u2014 "),RI=n($3e,"A",{href:!0});var jUr=s(RI);Zpo=r(jUr,"LxmertModel"),jUr.forEach(t),euo=r($3e," (LXMERT model)"),$3e.forEach(t),ouo=i($),Ip=n($,"LI",{});var k3e=s(Ip);Hne=n(k3e,"STRONG",{});var DUr=s(Hne);ruo=r(DUr,"m2m_100"),DUr.forEach(t),tuo=r(k3e," \u2014 "),BI=n(k3e,"A",{href:!0});var GUr=s(BI);auo=r(GUr,"M2M100Model"),GUr.forEach(t),nuo=r(k3e," (M2M100 model)"),k3e.forEach(t),suo=i($),qp=n($,"LI",{});var S3e=s(qp);Une=n(S3e,"STRONG",{});var OUr=s(Une);luo=r(OUr,"marian"),OUr.forEach(t),iuo=r(S3e," \u2014 "),PI=n(S3e,"A",{href:!0});var VUr=s(PI);duo=r(VUr,"MarianModel"),VUr.forEach(t),cuo=r(S3e," (Marian model)"),S3e.forEach(t),fuo=i($),Np=n($,"LI",{});var R3e=s(Np);Jne=n(R3e,"STRONG",{});var XUr=s(Jne);muo=r(XUr,"maskformer"),XUr.forEach(t),guo=r(R3e," \u2014 "),II=n(R3e,"A",{href:!0});var zUr=s(II);huo=r(zUr,"MaskFormerModel"),zUr.forEach(t),puo=r(R3e," (MaskFormer model)"),R3e.forEach(t),uuo=i($),jp=n($,"LI",{});var B3e=s(jp);Yne=n(B3e,"STRONG",{});var QUr=s(Yne);_uo=r(QUr,"mbart"),QUr.forEach(t),buo=r(B3e," \u2014 "),qI=n(B3e,"A",{href:!0});var WUr=s(qI);vuo=r(WUr,"MBartModel"),WUr.forEach(t),Fuo=r(B3e," (mBART model)"),B3e.forEach(t),Tuo=i($),Dp=n($,"LI",{});var P3e=s(Dp);Kne=n(P3e,"STRONG",{});var HUr=s(Kne);Muo=r(HUr,"megatron-bert"),HUr.forEach(t),Euo=r(P3e," \u2014 "),NI=n(P3e,"A",{href:!0});var UUr=s(NI);Cuo=r(UUr,"MegatronBertModel"),UUr.forEach(t),wuo=r(P3e," (MegatronBert model)"),P3e.forEach(t),Auo=i($),Gp=n($,"LI",{});var I3e=s(Gp);Zne=n(I3e,"STRONG",{});var JUr=s(Zne);yuo=r(JUr,"mobilebert"),JUr.forEach(t),Luo=r(I3e," \u2014 "),jI=n(I3e,"A",{href:!0});var YUr=s(jI);xuo=r(YUr,"MobileBertModel"),YUr.forEach(t),$uo=r(I3e," (MobileBERT model)"),I3e.forEach(t),kuo=i($),Op=n($,"LI",{});var q3e=s(Op);ese=n(q3e,"STRONG",{});var KUr=s(ese);Suo=r(KUr,"mpnet"),KUr.forEach(t),Ruo=r(q3e," \u2014 "),DI=n(q3e,"A",{href:!0});var ZUr=s(DI);Buo=r(ZUr,"MPNetModel"),ZUr.forEach(t),Puo=r(q3e," (MPNet model)"),q3e.forEach(t),Iuo=i($),Vp=n($,"LI",{});var N3e=s(Vp);ose=n(N3e,"STRONG",{});var eJr=s(ose);quo=r(eJr,"mt5"),eJr.forEach(t),Nuo=r(N3e," \u2014 "),GI=n(N3e,"A",{href:!0});var oJr=s(GI);juo=r(oJr,"MT5Model"),oJr.forEach(t),Duo=r(N3e," (mT5 model)"),N3e.forEach(t),Guo=i($),Xp=n($,"LI",{});var j3e=s(Xp);rse=n(j3e,"STRONG",{});var rJr=s(rse);Ouo=r(rJr,"nystromformer"),rJr.forEach(t),Vuo=r(j3e," \u2014 "),OI=n(j3e,"A",{href:!0});var tJr=s(OI);Xuo=r(tJr,"NystromformerModel"),tJr.forEach(t),zuo=r(j3e," (Nystromformer model)"),j3e.forEach(t),Quo=i($),zp=n($,"LI",{});var D3e=s(zp);tse=n(D3e,"STRONG",{});var aJr=s(tse);Wuo=r(aJr,"openai-gpt"),aJr.forEach(t),Huo=r(D3e," \u2014 "),VI=n(D3e,"A",{href:!0});var nJr=s(VI);Uuo=r(nJr,"OpenAIGPTModel"),nJr.forEach(t),Juo=r(D3e," (OpenAI GPT model)"),D3e.forEach(t),Yuo=i($),Qp=n($,"LI",{});var G3e=s(Qp);ase=n(G3e,"STRONG",{});var sJr=s(ase);Kuo=r(sJr,"pegasus"),sJr.forEach(t),Zuo=r(G3e," \u2014 "),XI=n(G3e,"A",{href:!0});var lJr=s(XI);e_o=r(lJr,"PegasusModel"),lJr.forEach(t),o_o=r(G3e," (Pegasus model)"),G3e.forEach(t),r_o=i($),Wp=n($,"LI",{});var O3e=s(Wp);nse=n(O3e,"STRONG",{});var iJr=s(nse);t_o=r(iJr,"perceiver"),iJr.forEach(t),a_o=r(O3e," \u2014 "),zI=n(O3e,"A",{href:!0});var dJr=s(zI);n_o=r(dJr,"PerceiverModel"),dJr.forEach(t),s_o=r(O3e," (Perceiver model)"),O3e.forEach(t),l_o=i($),Hp=n($,"LI",{});var V3e=s(Hp);sse=n(V3e,"STRONG",{});var cJr=s(sse);i_o=r(cJr,"plbart"),cJr.forEach(t),d_o=r(V3e," \u2014 "),QI=n(V3e,"A",{href:!0});var fJr=s(QI);c_o=r(fJr,"PLBartModel"),fJr.forEach(t),f_o=r(V3e," (PLBart model)"),V3e.forEach(t),m_o=i($),Up=n($,"LI",{});var X3e=s(Up);lse=n(X3e,"STRONG",{});var mJr=s(lse);g_o=r(mJr,"poolformer"),mJr.forEach(t),h_o=r(X3e," \u2014 "),WI=n(X3e,"A",{href:!0});var gJr=s(WI);p_o=r(gJr,"PoolFormerModel"),gJr.forEach(t),u_o=r(X3e," (PoolFormer model)"),X3e.forEach(t),__o=i($),Jp=n($,"LI",{});var z3e=s(Jp);ise=n(z3e,"STRONG",{});var hJr=s(ise);b_o=r(hJr,"prophetnet"),hJr.forEach(t),v_o=r(z3e," \u2014 "),HI=n(z3e,"A",{href:!0});var pJr=s(HI);F_o=r(pJr,"ProphetNetModel"),pJr.forEach(t),T_o=r(z3e," (ProphetNet model)"),z3e.forEach(t),M_o=i($),Yp=n($,"LI",{});var Q3e=s(Yp);dse=n(Q3e,"STRONG",{});var uJr=s(dse);E_o=r(uJr,"qdqbert"),uJr.forEach(t),C_o=r(Q3e," \u2014 "),UI=n(Q3e,"A",{href:!0});var _Jr=s(UI);w_o=r(_Jr,"QDQBertModel"),_Jr.forEach(t),A_o=r(Q3e," (QDQBert model)"),Q3e.forEach(t),y_o=i($),Kp=n($,"LI",{});var W3e=s(Kp);cse=n(W3e,"STRONG",{});var bJr=s(cse);L_o=r(bJr,"reformer"),bJr.forEach(t),x_o=r(W3e," \u2014 "),JI=n(W3e,"A",{href:!0});var vJr=s(JI);$_o=r(vJr,"ReformerModel"),vJr.forEach(t),k_o=r(W3e," (Reformer model)"),W3e.forEach(t),S_o=i($),Zp=n($,"LI",{});var H3e=s(Zp);fse=n(H3e,"STRONG",{});var FJr=s(fse);R_o=r(FJr,"regnet"),FJr.forEach(t),B_o=r(H3e," \u2014 "),YI=n(H3e,"A",{href:!0});var TJr=s(YI);P_o=r(TJr,"RegNetModel"),TJr.forEach(t),I_o=r(H3e," (RegNet model)"),H3e.forEach(t),q_o=i($),eu=n($,"LI",{});var U3e=s(eu);mse=n(U3e,"STRONG",{});var MJr=s(mse);N_o=r(MJr,"rembert"),MJr.forEach(t),j_o=r(U3e," \u2014 "),KI=n(U3e,"A",{href:!0});var EJr=s(KI);D_o=r(EJr,"RemBertModel"),EJr.forEach(t),G_o=r(U3e," (RemBERT model)"),U3e.forEach(t),O_o=i($),ou=n($,"LI",{});var J3e=s(ou);gse=n(J3e,"STRONG",{});var CJr=s(gse);V_o=r(CJr,"resnet"),CJr.forEach(t),X_o=r(J3e," \u2014 "),ZI=n(J3e,"A",{href:!0});var wJr=s(ZI);z_o=r(wJr,"ResNetModel"),wJr.forEach(t),Q_o=r(J3e," (ResNet model)"),J3e.forEach(t),W_o=i($),ru=n($,"LI",{});var Y3e=s(ru);hse=n(Y3e,"STRONG",{});var AJr=s(hse);H_o=r(AJr,"retribert"),AJr.forEach(t),U_o=r(Y3e," \u2014 "),eq=n(Y3e,"A",{href:!0});var yJr=s(eq);J_o=r(yJr,"RetriBertModel"),yJr.forEach(t),Y_o=r(Y3e," (RetriBERT model)"),Y3e.forEach(t),K_o=i($),tu=n($,"LI",{});var K3e=s(tu);pse=n(K3e,"STRONG",{});var LJr=s(pse);Z_o=r(LJr,"roberta"),LJr.forEach(t),e0o=r(K3e," \u2014 "),oq=n(K3e,"A",{href:!0});var xJr=s(oq);o0o=r(xJr,"RobertaModel"),xJr.forEach(t),r0o=r(K3e," (RoBERTa model)"),K3e.forEach(t),t0o=i($),au=n($,"LI",{});var Z3e=s(au);use=n(Z3e,"STRONG",{});var $Jr=s(use);a0o=r($Jr,"roformer"),$Jr.forEach(t),n0o=r(Z3e," \u2014 "),rq=n(Z3e,"A",{href:!0});var kJr=s(rq);s0o=r(kJr,"RoFormerModel"),kJr.forEach(t),l0o=r(Z3e," (RoFormer model)"),Z3e.forEach(t),i0o=i($),nu=n($,"LI",{});var ewe=s(nu);_se=n(ewe,"STRONG",{});var SJr=s(_se);d0o=r(SJr,"segformer"),SJr.forEach(t),c0o=r(ewe," \u2014 "),tq=n(ewe,"A",{href:!0});var RJr=s(tq);f0o=r(RJr,"SegformerModel"),RJr.forEach(t),m0o=r(ewe," (SegFormer model)"),ewe.forEach(t),g0o=i($),su=n($,"LI",{});var owe=s(su);bse=n(owe,"STRONG",{});var BJr=s(bse);h0o=r(BJr,"sew"),BJr.forEach(t),p0o=r(owe," \u2014 "),aq=n(owe,"A",{href:!0});var PJr=s(aq);u0o=r(PJr,"SEWModel"),PJr.forEach(t),_0o=r(owe," (SEW model)"),owe.forEach(t),b0o=i($),lu=n($,"LI",{});var rwe=s(lu);vse=n(rwe,"STRONG",{});var IJr=s(vse);v0o=r(IJr,"sew-d"),IJr.forEach(t),F0o=r(rwe," \u2014 "),nq=n(rwe,"A",{href:!0});var qJr=s(nq);T0o=r(qJr,"SEWDModel"),qJr.forEach(t),M0o=r(rwe," (SEW-D model)"),rwe.forEach(t),E0o=i($),iu=n($,"LI",{});var twe=s(iu);Fse=n(twe,"STRONG",{});var NJr=s(Fse);C0o=r(NJr,"speech_to_text"),NJr.forEach(t),w0o=r(twe," \u2014 "),sq=n(twe,"A",{href:!0});var jJr=s(sq);A0o=r(jJr,"Speech2TextModel"),jJr.forEach(t),y0o=r(twe," (Speech2Text model)"),twe.forEach(t),L0o=i($),du=n($,"LI",{});var awe=s(du);Tse=n(awe,"STRONG",{});var DJr=s(Tse);x0o=r(DJr,"splinter"),DJr.forEach(t),$0o=r(awe," \u2014 "),lq=n(awe,"A",{href:!0});var GJr=s(lq);k0o=r(GJr,"SplinterModel"),GJr.forEach(t),S0o=r(awe," (Splinter model)"),awe.forEach(t),R0o=i($),cu=n($,"LI",{});var nwe=s(cu);Mse=n(nwe,"STRONG",{});var OJr=s(Mse);B0o=r(OJr,"squeezebert"),OJr.forEach(t),P0o=r(nwe," \u2014 "),iq=n(nwe,"A",{href:!0});var VJr=s(iq);I0o=r(VJr,"SqueezeBertModel"),VJr.forEach(t),q0o=r(nwe," (SqueezeBERT model)"),nwe.forEach(t),N0o=i($),fu=n($,"LI",{});var swe=s(fu);Ese=n(swe,"STRONG",{});var XJr=s(Ese);j0o=r(XJr,"swin"),XJr.forEach(t),D0o=r(swe," \u2014 "),dq=n(swe,"A",{href:!0});var zJr=s(dq);G0o=r(zJr,"SwinModel"),zJr.forEach(t),O0o=r(swe," (Swin model)"),swe.forEach(t),V0o=i($),mu=n($,"LI",{});var lwe=s(mu);Cse=n(lwe,"STRONG",{});var QJr=s(Cse);X0o=r(QJr,"t5"),QJr.forEach(t),z0o=r(lwe," \u2014 "),cq=n(lwe,"A",{href:!0});var WJr=s(cq);Q0o=r(WJr,"T5Model"),WJr.forEach(t),W0o=r(lwe," (T5 model)"),lwe.forEach(t),H0o=i($),gu=n($,"LI",{});var iwe=s(gu);wse=n(iwe,"STRONG",{});var HJr=s(wse);U0o=r(HJr,"tapas"),HJr.forEach(t),J0o=r(iwe," \u2014 "),fq=n(iwe,"A",{href:!0});var UJr=s(fq);Y0o=r(UJr,"TapasModel"),UJr.forEach(t),K0o=r(iwe," (TAPAS model)"),iwe.forEach(t),Z0o=i($),hu=n($,"LI",{});var dwe=s(hu);Ase=n(dwe,"STRONG",{});var JJr=s(Ase);e1o=r(JJr,"transfo-xl"),JJr.forEach(t),o1o=r(dwe," \u2014 "),mq=n(dwe,"A",{href:!0});var YJr=s(mq);r1o=r(YJr,"TransfoXLModel"),YJr.forEach(t),t1o=r(dwe," (Transformer-XL model)"),dwe.forEach(t),a1o=i($),pu=n($,"LI",{});var cwe=s(pu);yse=n(cwe,"STRONG",{});var KJr=s(yse);n1o=r(KJr,"unispeech"),KJr.forEach(t),s1o=r(cwe," \u2014 "),gq=n(cwe,"A",{href:!0});var ZJr=s(gq);l1o=r(ZJr,"UniSpeechModel"),ZJr.forEach(t),i1o=r(cwe," (UniSpeech model)"),cwe.forEach(t),d1o=i($),uu=n($,"LI",{});var fwe=s(uu);Lse=n(fwe,"STRONG",{});var eYr=s(Lse);c1o=r(eYr,"unispeech-sat"),eYr.forEach(t),f1o=r(fwe," \u2014 "),hq=n(fwe,"A",{href:!0});var oYr=s(hq);m1o=r(oYr,"UniSpeechSatModel"),oYr.forEach(t),g1o=r(fwe," (UniSpeechSat model)"),fwe.forEach(t),h1o=i($),_u=n($,"LI",{});var mwe=s(_u);xse=n(mwe,"STRONG",{});var rYr=s(xse);p1o=r(rYr,"van"),rYr.forEach(t),u1o=r(mwe," \u2014 "),pq=n(mwe,"A",{href:!0});var tYr=s(pq);_1o=r(tYr,"VanModel"),tYr.forEach(t),b1o=r(mwe," (VAN model)"),mwe.forEach(t),v1o=i($),bu=n($,"LI",{});var gwe=s(bu);$se=n(gwe,"STRONG",{});var aYr=s($se);F1o=r(aYr,"vilt"),aYr.forEach(t),T1o=r(gwe," \u2014 "),uq=n(gwe,"A",{href:!0});var nYr=s(uq);M1o=r(nYr,"ViltModel"),nYr.forEach(t),E1o=r(gwe," (ViLT model)"),gwe.forEach(t),C1o=i($),vu=n($,"LI",{});var hwe=s(vu);kse=n(hwe,"STRONG",{});var sYr=s(kse);w1o=r(sYr,"vision-text-dual-encoder"),sYr.forEach(t),A1o=r(hwe," \u2014 "),_q=n(hwe,"A",{href:!0});var lYr=s(_q);y1o=r(lYr,"VisionTextDualEncoderModel"),lYr.forEach(t),L1o=r(hwe," (VisionTextDualEncoder model)"),hwe.forEach(t),x1o=i($),Fu=n($,"LI",{});var pwe=s(Fu);Sse=n(pwe,"STRONG",{});var iYr=s(Sse);$1o=r(iYr,"visual_bert"),iYr.forEach(t),k1o=r(pwe," \u2014 "),bq=n(pwe,"A",{href:!0});var dYr=s(bq);S1o=r(dYr,"VisualBertModel"),dYr.forEach(t),R1o=r(pwe," (VisualBert model)"),pwe.forEach(t),B1o=i($),Tu=n($,"LI",{});var uwe=s(Tu);Rse=n(uwe,"STRONG",{});var cYr=s(Rse);P1o=r(cYr,"vit"),cYr.forEach(t),I1o=r(uwe," \u2014 "),vq=n(uwe,"A",{href:!0});var fYr=s(vq);q1o=r(fYr,"ViTModel"),fYr.forEach(t),N1o=r(uwe," (ViT model)"),uwe.forEach(t),j1o=i($),Mu=n($,"LI",{});var _we=s(Mu);Bse=n(_we,"STRONG",{});var mYr=s(Bse);D1o=r(mYr,"vit_mae"),mYr.forEach(t),G1o=r(_we," \u2014 "),Fq=n(_we,"A",{href:!0});var gYr=s(Fq);O1o=r(gYr,"ViTMAEModel"),gYr.forEach(t),V1o=r(_we," (ViTMAE model)"),_we.forEach(t),X1o=i($),Eu=n($,"LI",{});var bwe=s(Eu);Pse=n(bwe,"STRONG",{});var hYr=s(Pse);z1o=r(hYr,"wav2vec2"),hYr.forEach(t),Q1o=r(bwe," \u2014 "),Tq=n(bwe,"A",{href:!0});var pYr=s(Tq);W1o=r(pYr,"Wav2Vec2Model"),pYr.forEach(t),H1o=r(bwe," (Wav2Vec2 model)"),bwe.forEach(t),U1o=i($),Cu=n($,"LI",{});var vwe=s(Cu);Ise=n(vwe,"STRONG",{});var uYr=s(Ise);J1o=r(uYr,"wavlm"),uYr.forEach(t),Y1o=r(vwe," \u2014 "),Mq=n(vwe,"A",{href:!0});var _Yr=s(Mq);K1o=r(_Yr,"WavLMModel"),_Yr.forEach(t),Z1o=r(vwe," (WavLM model)"),vwe.forEach(t),ebo=i($),wu=n($,"LI",{});var Fwe=s(wu);qse=n(Fwe,"STRONG",{});var bYr=s(qse);obo=r(bYr,"xglm"),bYr.forEach(t),rbo=r(Fwe," \u2014 "),Eq=n(Fwe,"A",{href:!0});var vYr=s(Eq);tbo=r(vYr,"XGLMModel"),vYr.forEach(t),abo=r(Fwe," (XGLM model)"),Fwe.forEach(t),nbo=i($),Au=n($,"LI",{});var Twe=s(Au);Nse=n(Twe,"STRONG",{});var FYr=s(Nse);sbo=r(FYr,"xlm"),FYr.forEach(t),lbo=r(Twe," \u2014 "),Cq=n(Twe,"A",{href:!0});var TYr=s(Cq);ibo=r(TYr,"XLMModel"),TYr.forEach(t),dbo=r(Twe," (XLM model)"),Twe.forEach(t),cbo=i($),yu=n($,"LI",{});var Mwe=s(yu);jse=n(Mwe,"STRONG",{});var MYr=s(jse);fbo=r(MYr,"xlm-prophetnet"),MYr.forEach(t),mbo=r(Mwe," \u2014 "),wq=n(Mwe,"A",{href:!0});var EYr=s(wq);gbo=r(EYr,"XLMProphetNetModel"),EYr.forEach(t),hbo=r(Mwe," (XLMProphetNet model)"),Mwe.forEach(t),pbo=i($),Lu=n($,"LI",{});var Ewe=s(Lu);Dse=n(Ewe,"STRONG",{});var CYr=s(Dse);ubo=r(CYr,"xlm-roberta"),CYr.forEach(t),_bo=r(Ewe," \u2014 "),Aq=n(Ewe,"A",{href:!0});var wYr=s(Aq);bbo=r(wYr,"XLMRobertaModel"),wYr.forEach(t),vbo=r(Ewe," (XLM-RoBERTa model)"),Ewe.forEach(t),Fbo=i($),xu=n($,"LI",{});var Cwe=s(xu);Gse=n(Cwe,"STRONG",{});var AYr=s(Gse);Tbo=r(AYr,"xlm-roberta-xl"),AYr.forEach(t),Mbo=r(Cwe," \u2014 "),yq=n(Cwe,"A",{href:!0});var yYr=s(yq);Ebo=r(yYr,"XLMRobertaXLModel"),yYr.forEach(t),Cbo=r(Cwe," (XLM-RoBERTa-XL model)"),Cwe.forEach(t),wbo=i($),$u=n($,"LI",{});var wwe=s($u);Ose=n(wwe,"STRONG",{});var LYr=s(Ose);Abo=r(LYr,"xlnet"),LYr.forEach(t),ybo=r(wwe," \u2014 "),Lq=n(wwe,"A",{href:!0});var xYr=s(Lq);Lbo=r(xYr,"XLNetModel"),xYr.forEach(t),xbo=r(wwe," (XLNet model)"),wwe.forEach(t),$bo=i($),ku=n($,"LI",{});var Awe=s(ku);Vse=n(Awe,"STRONG",{});var $Yr=s(Vse);kbo=r($Yr,"yolos"),$Yr.forEach(t),Sbo=r(Awe," \u2014 "),xq=n(Awe,"A",{href:!0});var kYr=s(xq);Rbo=r(kYr,"YolosModel"),kYr.forEach(t),Bbo=r(Awe," (YOLOS model)"),Awe.forEach(t),Pbo=i($),Su=n($,"LI",{});var ywe=s(Su);Xse=n(ywe,"STRONG",{});var SYr=s(Xse);Ibo=r(SYr,"yoso"),SYr.forEach(t),qbo=r(ywe," \u2014 "),$q=n(ywe,"A",{href:!0});var RYr=s($q);Nbo=r(RYr,"YosoModel"),RYr.forEach(t),jbo=r(ywe," (YOSO model)"),ywe.forEach(t),$.forEach(t),Dbo=i(Zt),Ru=n(Zt,"P",{});var Lwe=s(Ru);Gbo=r(Lwe,"The model is set in evaluation mode by default using "),zse=n(Lwe,"CODE",{});var BYr=s(zse);Obo=r(BYr,"model.eval()"),BYr.forEach(t),Vbo=r(Lwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qse=n(Lwe,"CODE",{});var PYr=s(Qse);Xbo=r(PYr,"model.train()"),PYr.forEach(t),Lwe.forEach(t),zbo=i(Zt),T(Bu.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),oIe=i(f),wi=n(f,"H2",{class:!0});var nNe=s(wi);Pu=n(nNe,"A",{id:!0,class:!0,href:!0});var IYr=s(Pu);Wse=n(IYr,"SPAN",{});var qYr=s(Wse);T(yA.$$.fragment,qYr),qYr.forEach(t),IYr.forEach(t),Qbo=i(nNe),Hse=n(nNe,"SPAN",{});var NYr=s(Hse);Wbo=r(NYr,"AutoModelForPreTraining"),NYr.forEach(t),nNe.forEach(t),rIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(LA.$$.fragment,Gs),Hbo=i(Gs),Ai=n(Gs,"P",{});var fK=s(Ai);Ubo=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kq=n(fK,"A",{href:!0});var jYr=s(kq);Jbo=r(jYr,"from_pretrained()"),jYr.forEach(t),Ybo=r(fK," class method or the "),Sq=n(fK,"A",{href:!0});var DYr=s(Sq);Kbo=r(DYr,"from_config()"),DYr.forEach(t),Zbo=r(fK,` class
method.`),fK.forEach(t),e2o=i(Gs),xA=n(Gs,"P",{});var sNe=s(xA);o2o=r(sNe,"This class cannot be instantiated directly using "),Use=n(sNe,"CODE",{});var GYr=s(Use);r2o=r(GYr,"__init__()"),GYr.forEach(t),t2o=r(sNe," (throws an error)."),sNe.forEach(t),a2o=i(Gs),rt=n(Gs,"DIV",{class:!0});var o3=s(rt);T($A.$$.fragment,o3),n2o=i(o3),Jse=n(o3,"P",{});var OYr=s(Jse);s2o=r(OYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),OYr.forEach(t),l2o=i(o3),yi=n(o3,"P",{});var mK=s(yi);i2o=r(mK,`Note:
Loading a model from its configuration file does `),Yse=n(mK,"STRONG",{});var VYr=s(Yse);d2o=r(VYr,"not"),VYr.forEach(t),c2o=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=n(mK,"A",{href:!0});var XYr=s(Rq);f2o=r(XYr,"from_pretrained()"),XYr.forEach(t),m2o=r(mK," to load the model weights."),mK.forEach(t),g2o=i(o3),T(Iu.$$.fragment,o3),o3.forEach(t),h2o=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(kA.$$.fragment,ea),p2o=i(ea),Kse=n(ea,"P",{});var zYr=s(Kse);u2o=r(zYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zYr.forEach(t),_2o=i(ea),ya=n(ea,"P",{});var r3=s(ya);b2o=r(r3,"The model class to instantiate is selected based on the "),Zse=n(r3,"CODE",{});var QYr=s(Zse);v2o=r(QYr,"model_type"),QYr.forEach(t),F2o=r(r3,` property of the config object (either
passed as an argument or loaded from `),ele=n(r3,"CODE",{});var WYr=s(ele);T2o=r(WYr,"pretrained_model_name_or_path"),WYr.forEach(t),M2o=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=n(r3,"CODE",{});var HYr=s(ole);E2o=r(HYr,"pretrained_model_name_or_path"),HYr.forEach(t),C2o=r(r3,":"),r3.forEach(t),w2o=i(ea),O=n(ea,"UL",{});var X=s(O);qu=n(X,"LI",{});var xwe=s(qu);rle=n(xwe,"STRONG",{});var UYr=s(rle);A2o=r(UYr,"albert"),UYr.forEach(t),y2o=r(xwe," \u2014 "),Bq=n(xwe,"A",{href:!0});var JYr=s(Bq);L2o=r(JYr,"AlbertForPreTraining"),JYr.forEach(t),x2o=r(xwe," (ALBERT model)"),xwe.forEach(t),$2o=i(X),Nu=n(X,"LI",{});var $we=s(Nu);tle=n($we,"STRONG",{});var YYr=s(tle);k2o=r(YYr,"bart"),YYr.forEach(t),S2o=r($we," \u2014 "),Pq=n($we,"A",{href:!0});var KYr=s(Pq);R2o=r(KYr,"BartForConditionalGeneration"),KYr.forEach(t),B2o=r($we," (BART model)"),$we.forEach(t),P2o=i(X),ju=n(X,"LI",{});var kwe=s(ju);ale=n(kwe,"STRONG",{});var ZYr=s(ale);I2o=r(ZYr,"bert"),ZYr.forEach(t),q2o=r(kwe," \u2014 "),Iq=n(kwe,"A",{href:!0});var eKr=s(Iq);N2o=r(eKr,"BertForPreTraining"),eKr.forEach(t),j2o=r(kwe," (BERT model)"),kwe.forEach(t),D2o=i(X),Du=n(X,"LI",{});var Swe=s(Du);nle=n(Swe,"STRONG",{});var oKr=s(nle);G2o=r(oKr,"big_bird"),oKr.forEach(t),O2o=r(Swe," \u2014 "),qq=n(Swe,"A",{href:!0});var rKr=s(qq);V2o=r(rKr,"BigBirdForPreTraining"),rKr.forEach(t),X2o=r(Swe," (BigBird model)"),Swe.forEach(t),z2o=i(X),Gu=n(X,"LI",{});var Rwe=s(Gu);sle=n(Rwe,"STRONG",{});var tKr=s(sle);Q2o=r(tKr,"camembert"),tKr.forEach(t),W2o=r(Rwe," \u2014 "),Nq=n(Rwe,"A",{href:!0});var aKr=s(Nq);H2o=r(aKr,"CamembertForMaskedLM"),aKr.forEach(t),U2o=r(Rwe," (CamemBERT model)"),Rwe.forEach(t),J2o=i(X),Ou=n(X,"LI",{});var Bwe=s(Ou);lle=n(Bwe,"STRONG",{});var nKr=s(lle);Y2o=r(nKr,"ctrl"),nKr.forEach(t),K2o=r(Bwe," \u2014 "),jq=n(Bwe,"A",{href:!0});var sKr=s(jq);Z2o=r(sKr,"CTRLLMHeadModel"),sKr.forEach(t),evo=r(Bwe," (CTRL model)"),Bwe.forEach(t),ovo=i(X),Vu=n(X,"LI",{});var Pwe=s(Vu);ile=n(Pwe,"STRONG",{});var lKr=s(ile);rvo=r(lKr,"data2vec-text"),lKr.forEach(t),tvo=r(Pwe," \u2014 "),Dq=n(Pwe,"A",{href:!0});var iKr=s(Dq);avo=r(iKr,"Data2VecTextForMaskedLM"),iKr.forEach(t),nvo=r(Pwe," (Data2VecText model)"),Pwe.forEach(t),svo=i(X),Xu=n(X,"LI",{});var Iwe=s(Xu);dle=n(Iwe,"STRONG",{});var dKr=s(dle);lvo=r(dKr,"deberta"),dKr.forEach(t),ivo=r(Iwe," \u2014 "),Gq=n(Iwe,"A",{href:!0});var cKr=s(Gq);dvo=r(cKr,"DebertaForMaskedLM"),cKr.forEach(t),cvo=r(Iwe," (DeBERTa model)"),Iwe.forEach(t),fvo=i(X),zu=n(X,"LI",{});var qwe=s(zu);cle=n(qwe,"STRONG",{});var fKr=s(cle);mvo=r(fKr,"deberta-v2"),fKr.forEach(t),gvo=r(qwe," \u2014 "),Oq=n(qwe,"A",{href:!0});var mKr=s(Oq);hvo=r(mKr,"DebertaV2ForMaskedLM"),mKr.forEach(t),pvo=r(qwe," (DeBERTa-v2 model)"),qwe.forEach(t),uvo=i(X),Qu=n(X,"LI",{});var Nwe=s(Qu);fle=n(Nwe,"STRONG",{});var gKr=s(fle);_vo=r(gKr,"distilbert"),gKr.forEach(t),bvo=r(Nwe," \u2014 "),Vq=n(Nwe,"A",{href:!0});var hKr=s(Vq);vvo=r(hKr,"DistilBertForMaskedLM"),hKr.forEach(t),Fvo=r(Nwe," (DistilBERT model)"),Nwe.forEach(t),Tvo=i(X),Wu=n(X,"LI",{});var jwe=s(Wu);mle=n(jwe,"STRONG",{});var pKr=s(mle);Mvo=r(pKr,"electra"),pKr.forEach(t),Evo=r(jwe," \u2014 "),Xq=n(jwe,"A",{href:!0});var uKr=s(Xq);Cvo=r(uKr,"ElectraForPreTraining"),uKr.forEach(t),wvo=r(jwe," (ELECTRA model)"),jwe.forEach(t),Avo=i(X),Hu=n(X,"LI",{});var Dwe=s(Hu);gle=n(Dwe,"STRONG",{});var _Kr=s(gle);yvo=r(_Kr,"flaubert"),_Kr.forEach(t),Lvo=r(Dwe," \u2014 "),zq=n(Dwe,"A",{href:!0});var bKr=s(zq);xvo=r(bKr,"FlaubertWithLMHeadModel"),bKr.forEach(t),$vo=r(Dwe," (FlauBERT model)"),Dwe.forEach(t),kvo=i(X),Uu=n(X,"LI",{});var Gwe=s(Uu);hle=n(Gwe,"STRONG",{});var vKr=s(hle);Svo=r(vKr,"fnet"),vKr.forEach(t),Rvo=r(Gwe," \u2014 "),Qq=n(Gwe,"A",{href:!0});var FKr=s(Qq);Bvo=r(FKr,"FNetForPreTraining"),FKr.forEach(t),Pvo=r(Gwe," (FNet model)"),Gwe.forEach(t),Ivo=i(X),Ju=n(X,"LI",{});var Owe=s(Ju);ple=n(Owe,"STRONG",{});var TKr=s(ple);qvo=r(TKr,"fsmt"),TKr.forEach(t),Nvo=r(Owe," \u2014 "),Wq=n(Owe,"A",{href:!0});var MKr=s(Wq);jvo=r(MKr,"FSMTForConditionalGeneration"),MKr.forEach(t),Dvo=r(Owe," (FairSeq Machine-Translation model)"),Owe.forEach(t),Gvo=i(X),Yu=n(X,"LI",{});var Vwe=s(Yu);ule=n(Vwe,"STRONG",{});var EKr=s(ule);Ovo=r(EKr,"funnel"),EKr.forEach(t),Vvo=r(Vwe," \u2014 "),Hq=n(Vwe,"A",{href:!0});var CKr=s(Hq);Xvo=r(CKr,"FunnelForPreTraining"),CKr.forEach(t),zvo=r(Vwe," (Funnel Transformer model)"),Vwe.forEach(t),Qvo=i(X),Ku=n(X,"LI",{});var Xwe=s(Ku);_le=n(Xwe,"STRONG",{});var wKr=s(_le);Wvo=r(wKr,"gpt2"),wKr.forEach(t),Hvo=r(Xwe," \u2014 "),Uq=n(Xwe,"A",{href:!0});var AKr=s(Uq);Uvo=r(AKr,"GPT2LMHeadModel"),AKr.forEach(t),Jvo=r(Xwe," (OpenAI GPT-2 model)"),Xwe.forEach(t),Yvo=i(X),Zu=n(X,"LI",{});var zwe=s(Zu);ble=n(zwe,"STRONG",{});var yKr=s(ble);Kvo=r(yKr,"ibert"),yKr.forEach(t),Zvo=r(zwe," \u2014 "),Jq=n(zwe,"A",{href:!0});var LKr=s(Jq);eFo=r(LKr,"IBertForMaskedLM"),LKr.forEach(t),oFo=r(zwe," (I-BERT model)"),zwe.forEach(t),rFo=i(X),e_=n(X,"LI",{});var Qwe=s(e_);vle=n(Qwe,"STRONG",{});var xKr=s(vle);tFo=r(xKr,"layoutlm"),xKr.forEach(t),aFo=r(Qwe," \u2014 "),Yq=n(Qwe,"A",{href:!0});var $Kr=s(Yq);nFo=r($Kr,"LayoutLMForMaskedLM"),$Kr.forEach(t),sFo=r(Qwe," (LayoutLM model)"),Qwe.forEach(t),lFo=i(X),o_=n(X,"LI",{});var Wwe=s(o_);Fle=n(Wwe,"STRONG",{});var kKr=s(Fle);iFo=r(kKr,"longformer"),kKr.forEach(t),dFo=r(Wwe," \u2014 "),Kq=n(Wwe,"A",{href:!0});var SKr=s(Kq);cFo=r(SKr,"LongformerForMaskedLM"),SKr.forEach(t),fFo=r(Wwe," (Longformer model)"),Wwe.forEach(t),mFo=i(X),r_=n(X,"LI",{});var Hwe=s(r_);Tle=n(Hwe,"STRONG",{});var RKr=s(Tle);gFo=r(RKr,"lxmert"),RKr.forEach(t),hFo=r(Hwe," \u2014 "),Zq=n(Hwe,"A",{href:!0});var BKr=s(Zq);pFo=r(BKr,"LxmertForPreTraining"),BKr.forEach(t),uFo=r(Hwe," (LXMERT model)"),Hwe.forEach(t),_Fo=i(X),t_=n(X,"LI",{});var Uwe=s(t_);Mle=n(Uwe,"STRONG",{});var PKr=s(Mle);bFo=r(PKr,"megatron-bert"),PKr.forEach(t),vFo=r(Uwe," \u2014 "),eN=n(Uwe,"A",{href:!0});var IKr=s(eN);FFo=r(IKr,"MegatronBertForPreTraining"),IKr.forEach(t),TFo=r(Uwe," (MegatronBert model)"),Uwe.forEach(t),MFo=i(X),a_=n(X,"LI",{});var Jwe=s(a_);Ele=n(Jwe,"STRONG",{});var qKr=s(Ele);EFo=r(qKr,"mobilebert"),qKr.forEach(t),CFo=r(Jwe," \u2014 "),oN=n(Jwe,"A",{href:!0});var NKr=s(oN);wFo=r(NKr,"MobileBertForPreTraining"),NKr.forEach(t),AFo=r(Jwe," (MobileBERT model)"),Jwe.forEach(t),yFo=i(X),n_=n(X,"LI",{});var Ywe=s(n_);Cle=n(Ywe,"STRONG",{});var jKr=s(Cle);LFo=r(jKr,"mpnet"),jKr.forEach(t),xFo=r(Ywe," \u2014 "),rN=n(Ywe,"A",{href:!0});var DKr=s(rN);$Fo=r(DKr,"MPNetForMaskedLM"),DKr.forEach(t),kFo=r(Ywe," (MPNet model)"),Ywe.forEach(t),SFo=i(X),s_=n(X,"LI",{});var Kwe=s(s_);wle=n(Kwe,"STRONG",{});var GKr=s(wle);RFo=r(GKr,"openai-gpt"),GKr.forEach(t),BFo=r(Kwe," \u2014 "),tN=n(Kwe,"A",{href:!0});var OKr=s(tN);PFo=r(OKr,"OpenAIGPTLMHeadModel"),OKr.forEach(t),IFo=r(Kwe," (OpenAI GPT model)"),Kwe.forEach(t),qFo=i(X),l_=n(X,"LI",{});var Zwe=s(l_);Ale=n(Zwe,"STRONG",{});var VKr=s(Ale);NFo=r(VKr,"retribert"),VKr.forEach(t),jFo=r(Zwe," \u2014 "),aN=n(Zwe,"A",{href:!0});var XKr=s(aN);DFo=r(XKr,"RetriBertModel"),XKr.forEach(t),GFo=r(Zwe," (RetriBERT model)"),Zwe.forEach(t),OFo=i(X),i_=n(X,"LI",{});var eAe=s(i_);yle=n(eAe,"STRONG",{});var zKr=s(yle);VFo=r(zKr,"roberta"),zKr.forEach(t),XFo=r(eAe," \u2014 "),nN=n(eAe,"A",{href:!0});var QKr=s(nN);zFo=r(QKr,"RobertaForMaskedLM"),QKr.forEach(t),QFo=r(eAe," (RoBERTa model)"),eAe.forEach(t),WFo=i(X),d_=n(X,"LI",{});var oAe=s(d_);Lle=n(oAe,"STRONG",{});var WKr=s(Lle);HFo=r(WKr,"squeezebert"),WKr.forEach(t),UFo=r(oAe," \u2014 "),sN=n(oAe,"A",{href:!0});var HKr=s(sN);JFo=r(HKr,"SqueezeBertForMaskedLM"),HKr.forEach(t),YFo=r(oAe," (SqueezeBERT model)"),oAe.forEach(t),KFo=i(X),c_=n(X,"LI",{});var rAe=s(c_);xle=n(rAe,"STRONG",{});var UKr=s(xle);ZFo=r(UKr,"t5"),UKr.forEach(t),e6o=r(rAe," \u2014 "),lN=n(rAe,"A",{href:!0});var JKr=s(lN);o6o=r(JKr,"T5ForConditionalGeneration"),JKr.forEach(t),r6o=r(rAe," (T5 model)"),rAe.forEach(t),t6o=i(X),f_=n(X,"LI",{});var tAe=s(f_);$le=n(tAe,"STRONG",{});var YKr=s($le);a6o=r(YKr,"tapas"),YKr.forEach(t),n6o=r(tAe," \u2014 "),iN=n(tAe,"A",{href:!0});var KKr=s(iN);s6o=r(KKr,"TapasForMaskedLM"),KKr.forEach(t),l6o=r(tAe," (TAPAS model)"),tAe.forEach(t),i6o=i(X),m_=n(X,"LI",{});var aAe=s(m_);kle=n(aAe,"STRONG",{});var ZKr=s(kle);d6o=r(ZKr,"transfo-xl"),ZKr.forEach(t),c6o=r(aAe," \u2014 "),dN=n(aAe,"A",{href:!0});var eZr=s(dN);f6o=r(eZr,"TransfoXLLMHeadModel"),eZr.forEach(t),m6o=r(aAe," (Transformer-XL model)"),aAe.forEach(t),g6o=i(X),g_=n(X,"LI",{});var nAe=s(g_);Sle=n(nAe,"STRONG",{});var oZr=s(Sle);h6o=r(oZr,"unispeech"),oZr.forEach(t),p6o=r(nAe," \u2014 "),cN=n(nAe,"A",{href:!0});var rZr=s(cN);u6o=r(rZr,"UniSpeechForPreTraining"),rZr.forEach(t),_6o=r(nAe," (UniSpeech model)"),nAe.forEach(t),b6o=i(X),h_=n(X,"LI",{});var sAe=s(h_);Rle=n(sAe,"STRONG",{});var tZr=s(Rle);v6o=r(tZr,"unispeech-sat"),tZr.forEach(t),F6o=r(sAe," \u2014 "),fN=n(sAe,"A",{href:!0});var aZr=s(fN);T6o=r(aZr,"UniSpeechSatForPreTraining"),aZr.forEach(t),M6o=r(sAe," (UniSpeechSat model)"),sAe.forEach(t),E6o=i(X),p_=n(X,"LI",{});var lAe=s(p_);Ble=n(lAe,"STRONG",{});var nZr=s(Ble);C6o=r(nZr,"visual_bert"),nZr.forEach(t),w6o=r(lAe," \u2014 "),mN=n(lAe,"A",{href:!0});var sZr=s(mN);A6o=r(sZr,"VisualBertForPreTraining"),sZr.forEach(t),y6o=r(lAe," (VisualBert model)"),lAe.forEach(t),L6o=i(X),u_=n(X,"LI",{});var iAe=s(u_);Ple=n(iAe,"STRONG",{});var lZr=s(Ple);x6o=r(lZr,"vit_mae"),lZr.forEach(t),$6o=r(iAe," \u2014 "),gN=n(iAe,"A",{href:!0});var iZr=s(gN);k6o=r(iZr,"ViTMAEForPreTraining"),iZr.forEach(t),S6o=r(iAe," (ViTMAE model)"),iAe.forEach(t),R6o=i(X),__=n(X,"LI",{});var dAe=s(__);Ile=n(dAe,"STRONG",{});var dZr=s(Ile);B6o=r(dZr,"wav2vec2"),dZr.forEach(t),P6o=r(dAe," \u2014 "),hN=n(dAe,"A",{href:!0});var cZr=s(hN);I6o=r(cZr,"Wav2Vec2ForPreTraining"),cZr.forEach(t),q6o=r(dAe," (Wav2Vec2 model)"),dAe.forEach(t),N6o=i(X),b_=n(X,"LI",{});var cAe=s(b_);qle=n(cAe,"STRONG",{});var fZr=s(qle);j6o=r(fZr,"xlm"),fZr.forEach(t),D6o=r(cAe," \u2014 "),pN=n(cAe,"A",{href:!0});var mZr=s(pN);G6o=r(mZr,"XLMWithLMHeadModel"),mZr.forEach(t),O6o=r(cAe," (XLM model)"),cAe.forEach(t),V6o=i(X),v_=n(X,"LI",{});var fAe=s(v_);Nle=n(fAe,"STRONG",{});var gZr=s(Nle);X6o=r(gZr,"xlm-roberta"),gZr.forEach(t),z6o=r(fAe," \u2014 "),uN=n(fAe,"A",{href:!0});var hZr=s(uN);Q6o=r(hZr,"XLMRobertaForMaskedLM"),hZr.forEach(t),W6o=r(fAe," (XLM-RoBERTa model)"),fAe.forEach(t),H6o=i(X),F_=n(X,"LI",{});var mAe=s(F_);jle=n(mAe,"STRONG",{});var pZr=s(jle);U6o=r(pZr,"xlm-roberta-xl"),pZr.forEach(t),J6o=r(mAe," \u2014 "),_N=n(mAe,"A",{href:!0});var uZr=s(_N);Y6o=r(uZr,"XLMRobertaXLForMaskedLM"),uZr.forEach(t),K6o=r(mAe," (XLM-RoBERTa-XL model)"),mAe.forEach(t),Z6o=i(X),T_=n(X,"LI",{});var gAe=s(T_);Dle=n(gAe,"STRONG",{});var _Zr=s(Dle);eTo=r(_Zr,"xlnet"),_Zr.forEach(t),oTo=r(gAe," \u2014 "),bN=n(gAe,"A",{href:!0});var bZr=s(bN);rTo=r(bZr,"XLNetLMHeadModel"),bZr.forEach(t),tTo=r(gAe," (XLNet model)"),gAe.forEach(t),X.forEach(t),aTo=i(ea),M_=n(ea,"P",{});var hAe=s(M_);nTo=r(hAe,"The model is set in evaluation mode by default using "),Gle=n(hAe,"CODE",{});var vZr=s(Gle);sTo=r(vZr,"model.eval()"),vZr.forEach(t),lTo=r(hAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=n(hAe,"CODE",{});var FZr=s(Ole);iTo=r(FZr,"model.train()"),FZr.forEach(t),hAe.forEach(t),dTo=i(ea),T(E_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),tIe=i(f),Li=n(f,"H2",{class:!0});var lNe=s(Li);C_=n(lNe,"A",{id:!0,class:!0,href:!0});var TZr=s(C_);Vle=n(TZr,"SPAN",{});var MZr=s(Vle);T(SA.$$.fragment,MZr),MZr.forEach(t),TZr.forEach(t),cTo=i(lNe),Xle=n(lNe,"SPAN",{});var EZr=s(Xle);fTo=r(EZr,"AutoModelForCausalLM"),EZr.forEach(t),lNe.forEach(t),aIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(RA.$$.fragment,Os),mTo=i(Os),xi=n(Os,"P",{});var gK=s(xi);gTo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vN=n(gK,"A",{href:!0});var CZr=s(vN);hTo=r(CZr,"from_pretrained()"),CZr.forEach(t),pTo=r(gK," class method or the "),FN=n(gK,"A",{href:!0});var wZr=s(FN);uTo=r(wZr,"from_config()"),wZr.forEach(t),_To=r(gK,` class
method.`),gK.forEach(t),bTo=i(Os),BA=n(Os,"P",{});var iNe=s(BA);vTo=r(iNe,"This class cannot be instantiated directly using "),zle=n(iNe,"CODE",{});var AZr=s(zle);FTo=r(AZr,"__init__()"),AZr.forEach(t),TTo=r(iNe," (throws an error)."),iNe.forEach(t),MTo=i(Os),tt=n(Os,"DIV",{class:!0});var t3=s(tt);T(PA.$$.fragment,t3),ETo=i(t3),Qle=n(t3,"P",{});var yZr=s(Qle);CTo=r(yZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yZr.forEach(t),wTo=i(t3),$i=n(t3,"P",{});var hK=s($i);ATo=r(hK,`Note:
Loading a model from its configuration file does `),Wle=n(hK,"STRONG",{});var LZr=s(Wle);yTo=r(LZr,"not"),LZr.forEach(t),LTo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=n(hK,"A",{href:!0});var xZr=s(TN);xTo=r(xZr,"from_pretrained()"),xZr.forEach(t),$To=r(hK," to load the model weights."),hK.forEach(t),kTo=i(t3),T(w_.$$.fragment,t3),t3.forEach(t),STo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(IA.$$.fragment,oa),RTo=i(oa),Hle=n(oa,"P",{});var $Zr=s(Hle);BTo=r($Zr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Zr.forEach(t),PTo=i(oa),La=n(oa,"P",{});var a3=s(La);ITo=r(a3,"The model class to instantiate is selected based on the "),Ule=n(a3,"CODE",{});var kZr=s(Ule);qTo=r(kZr,"model_type"),kZr.forEach(t),NTo=r(a3,` property of the config object (either
passed as an argument or loaded from `),Jle=n(a3,"CODE",{});var SZr=s(Jle);jTo=r(SZr,"pretrained_model_name_or_path"),SZr.forEach(t),DTo=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=n(a3,"CODE",{});var RZr=s(Yle);GTo=r(RZr,"pretrained_model_name_or_path"),RZr.forEach(t),OTo=r(a3,":"),a3.forEach(t),VTo=i(oa),z=n(oa,"UL",{});var H=s(z);A_=n(H,"LI",{});var pAe=s(A_);Kle=n(pAe,"STRONG",{});var BZr=s(Kle);XTo=r(BZr,"bart"),BZr.forEach(t),zTo=r(pAe," \u2014 "),MN=n(pAe,"A",{href:!0});var PZr=s(MN);QTo=r(PZr,"BartForCausalLM"),PZr.forEach(t),WTo=r(pAe," (BART model)"),pAe.forEach(t),HTo=i(H),y_=n(H,"LI",{});var uAe=s(y_);Zle=n(uAe,"STRONG",{});var IZr=s(Zle);UTo=r(IZr,"bert"),IZr.forEach(t),JTo=r(uAe," \u2014 "),EN=n(uAe,"A",{href:!0});var qZr=s(EN);YTo=r(qZr,"BertLMHeadModel"),qZr.forEach(t),KTo=r(uAe," (BERT model)"),uAe.forEach(t),ZTo=i(H),L_=n(H,"LI",{});var _Ae=s(L_);eie=n(_Ae,"STRONG",{});var NZr=s(eie);e7o=r(NZr,"bert-generation"),NZr.forEach(t),o7o=r(_Ae," \u2014 "),CN=n(_Ae,"A",{href:!0});var jZr=s(CN);r7o=r(jZr,"BertGenerationDecoder"),jZr.forEach(t),t7o=r(_Ae," (Bert Generation model)"),_Ae.forEach(t),a7o=i(H),x_=n(H,"LI",{});var bAe=s(x_);oie=n(bAe,"STRONG",{});var DZr=s(oie);n7o=r(DZr,"big_bird"),DZr.forEach(t),s7o=r(bAe," \u2014 "),wN=n(bAe,"A",{href:!0});var GZr=s(wN);l7o=r(GZr,"BigBirdForCausalLM"),GZr.forEach(t),i7o=r(bAe," (BigBird model)"),bAe.forEach(t),d7o=i(H),$_=n(H,"LI",{});var vAe=s($_);rie=n(vAe,"STRONG",{});var OZr=s(rie);c7o=r(OZr,"bigbird_pegasus"),OZr.forEach(t),f7o=r(vAe," \u2014 "),AN=n(vAe,"A",{href:!0});var VZr=s(AN);m7o=r(VZr,"BigBirdPegasusForCausalLM"),VZr.forEach(t),g7o=r(vAe," (BigBirdPegasus model)"),vAe.forEach(t),h7o=i(H),k_=n(H,"LI",{});var FAe=s(k_);tie=n(FAe,"STRONG",{});var XZr=s(tie);p7o=r(XZr,"blenderbot"),XZr.forEach(t),u7o=r(FAe," \u2014 "),yN=n(FAe,"A",{href:!0});var zZr=s(yN);_7o=r(zZr,"BlenderbotForCausalLM"),zZr.forEach(t),b7o=r(FAe," (Blenderbot model)"),FAe.forEach(t),v7o=i(H),S_=n(H,"LI",{});var TAe=s(S_);aie=n(TAe,"STRONG",{});var QZr=s(aie);F7o=r(QZr,"blenderbot-small"),QZr.forEach(t),T7o=r(TAe," \u2014 "),LN=n(TAe,"A",{href:!0});var WZr=s(LN);M7o=r(WZr,"BlenderbotSmallForCausalLM"),WZr.forEach(t),E7o=r(TAe," (BlenderbotSmall model)"),TAe.forEach(t),C7o=i(H),R_=n(H,"LI",{});var MAe=s(R_);nie=n(MAe,"STRONG",{});var HZr=s(nie);w7o=r(HZr,"camembert"),HZr.forEach(t),A7o=r(MAe," \u2014 "),xN=n(MAe,"A",{href:!0});var UZr=s(xN);y7o=r(UZr,"CamembertForCausalLM"),UZr.forEach(t),L7o=r(MAe," (CamemBERT model)"),MAe.forEach(t),x7o=i(H),B_=n(H,"LI",{});var EAe=s(B_);sie=n(EAe,"STRONG",{});var JZr=s(sie);$7o=r(JZr,"ctrl"),JZr.forEach(t),k7o=r(EAe," \u2014 "),$N=n(EAe,"A",{href:!0});var YZr=s($N);S7o=r(YZr,"CTRLLMHeadModel"),YZr.forEach(t),R7o=r(EAe," (CTRL model)"),EAe.forEach(t),B7o=i(H),P_=n(H,"LI",{});var CAe=s(P_);lie=n(CAe,"STRONG",{});var KZr=s(lie);P7o=r(KZr,"data2vec-text"),KZr.forEach(t),I7o=r(CAe," \u2014 "),kN=n(CAe,"A",{href:!0});var ZZr=s(kN);q7o=r(ZZr,"Data2VecTextForCausalLM"),ZZr.forEach(t),N7o=r(CAe," (Data2VecText model)"),CAe.forEach(t),j7o=i(H),I_=n(H,"LI",{});var wAe=s(I_);iie=n(wAe,"STRONG",{});var eet=s(iie);D7o=r(eet,"electra"),eet.forEach(t),G7o=r(wAe," \u2014 "),SN=n(wAe,"A",{href:!0});var oet=s(SN);O7o=r(oet,"ElectraForCausalLM"),oet.forEach(t),V7o=r(wAe," (ELECTRA model)"),wAe.forEach(t),X7o=i(H),q_=n(H,"LI",{});var AAe=s(q_);die=n(AAe,"STRONG",{});var ret=s(die);z7o=r(ret,"gpt2"),ret.forEach(t),Q7o=r(AAe," \u2014 "),RN=n(AAe,"A",{href:!0});var tet=s(RN);W7o=r(tet,"GPT2LMHeadModel"),tet.forEach(t),H7o=r(AAe," (OpenAI GPT-2 model)"),AAe.forEach(t),U7o=i(H),N_=n(H,"LI",{});var yAe=s(N_);cie=n(yAe,"STRONG",{});var aet=s(cie);J7o=r(aet,"gpt_neo"),aet.forEach(t),Y7o=r(yAe," \u2014 "),BN=n(yAe,"A",{href:!0});var net=s(BN);K7o=r(net,"GPTNeoForCausalLM"),net.forEach(t),Z7o=r(yAe," (GPT Neo model)"),yAe.forEach(t),eMo=i(H),j_=n(H,"LI",{});var LAe=s(j_);fie=n(LAe,"STRONG",{});var set=s(fie);oMo=r(set,"gptj"),set.forEach(t),rMo=r(LAe," \u2014 "),PN=n(LAe,"A",{href:!0});var iet=s(PN);tMo=r(iet,"GPTJForCausalLM"),iet.forEach(t),aMo=r(LAe," (GPT-J model)"),LAe.forEach(t),nMo=i(H),D_=n(H,"LI",{});var xAe=s(D_);mie=n(xAe,"STRONG",{});var det=s(mie);sMo=r(det,"marian"),det.forEach(t),lMo=r(xAe," \u2014 "),IN=n(xAe,"A",{href:!0});var cet=s(IN);iMo=r(cet,"MarianForCausalLM"),cet.forEach(t),dMo=r(xAe," (Marian model)"),xAe.forEach(t),cMo=i(H),G_=n(H,"LI",{});var $Ae=s(G_);gie=n($Ae,"STRONG",{});var fet=s(gie);fMo=r(fet,"mbart"),fet.forEach(t),mMo=r($Ae," \u2014 "),qN=n($Ae,"A",{href:!0});var met=s(qN);gMo=r(met,"MBartForCausalLM"),met.forEach(t),hMo=r($Ae," (mBART model)"),$Ae.forEach(t),pMo=i(H),O_=n(H,"LI",{});var kAe=s(O_);hie=n(kAe,"STRONG",{});var get=s(hie);uMo=r(get,"megatron-bert"),get.forEach(t),_Mo=r(kAe," \u2014 "),NN=n(kAe,"A",{href:!0});var het=s(NN);bMo=r(het,"MegatronBertForCausalLM"),het.forEach(t),vMo=r(kAe," (MegatronBert model)"),kAe.forEach(t),FMo=i(H),V_=n(H,"LI",{});var SAe=s(V_);pie=n(SAe,"STRONG",{});var pet=s(pie);TMo=r(pet,"openai-gpt"),pet.forEach(t),MMo=r(SAe," \u2014 "),jN=n(SAe,"A",{href:!0});var uet=s(jN);EMo=r(uet,"OpenAIGPTLMHeadModel"),uet.forEach(t),CMo=r(SAe," (OpenAI GPT model)"),SAe.forEach(t),wMo=i(H),X_=n(H,"LI",{});var RAe=s(X_);uie=n(RAe,"STRONG",{});var _et=s(uie);AMo=r(_et,"pegasus"),_et.forEach(t),yMo=r(RAe," \u2014 "),DN=n(RAe,"A",{href:!0});var bet=s(DN);LMo=r(bet,"PegasusForCausalLM"),bet.forEach(t),xMo=r(RAe," (Pegasus model)"),RAe.forEach(t),$Mo=i(H),z_=n(H,"LI",{});var BAe=s(z_);_ie=n(BAe,"STRONG",{});var vet=s(_ie);kMo=r(vet,"plbart"),vet.forEach(t),SMo=r(BAe," \u2014 "),GN=n(BAe,"A",{href:!0});var Fet=s(GN);RMo=r(Fet,"PLBartForCausalLM"),Fet.forEach(t),BMo=r(BAe," (PLBart model)"),BAe.forEach(t),PMo=i(H),Q_=n(H,"LI",{});var PAe=s(Q_);bie=n(PAe,"STRONG",{});var Tet=s(bie);IMo=r(Tet,"prophetnet"),Tet.forEach(t),qMo=r(PAe," \u2014 "),ON=n(PAe,"A",{href:!0});var Met=s(ON);NMo=r(Met,"ProphetNetForCausalLM"),Met.forEach(t),jMo=r(PAe," (ProphetNet model)"),PAe.forEach(t),DMo=i(H),W_=n(H,"LI",{});var IAe=s(W_);vie=n(IAe,"STRONG",{});var Eet=s(vie);GMo=r(Eet,"qdqbert"),Eet.forEach(t),OMo=r(IAe," \u2014 "),VN=n(IAe,"A",{href:!0});var Cet=s(VN);VMo=r(Cet,"QDQBertLMHeadModel"),Cet.forEach(t),XMo=r(IAe," (QDQBert model)"),IAe.forEach(t),zMo=i(H),H_=n(H,"LI",{});var qAe=s(H_);Fie=n(qAe,"STRONG",{});var wet=s(Fie);QMo=r(wet,"reformer"),wet.forEach(t),WMo=r(qAe," \u2014 "),XN=n(qAe,"A",{href:!0});var Aet=s(XN);HMo=r(Aet,"ReformerModelWithLMHead"),Aet.forEach(t),UMo=r(qAe," (Reformer model)"),qAe.forEach(t),JMo=i(H),U_=n(H,"LI",{});var NAe=s(U_);Tie=n(NAe,"STRONG",{});var yet=s(Tie);YMo=r(yet,"rembert"),yet.forEach(t),KMo=r(NAe," \u2014 "),zN=n(NAe,"A",{href:!0});var Let=s(zN);ZMo=r(Let,"RemBertForCausalLM"),Let.forEach(t),e4o=r(NAe," (RemBERT model)"),NAe.forEach(t),o4o=i(H),J_=n(H,"LI",{});var jAe=s(J_);Mie=n(jAe,"STRONG",{});var xet=s(Mie);r4o=r(xet,"roberta"),xet.forEach(t),t4o=r(jAe," \u2014 "),QN=n(jAe,"A",{href:!0});var $et=s(QN);a4o=r($et,"RobertaForCausalLM"),$et.forEach(t),n4o=r(jAe," (RoBERTa model)"),jAe.forEach(t),s4o=i(H),Y_=n(H,"LI",{});var DAe=s(Y_);Eie=n(DAe,"STRONG",{});var ket=s(Eie);l4o=r(ket,"roformer"),ket.forEach(t),i4o=r(DAe," \u2014 "),WN=n(DAe,"A",{href:!0});var Set=s(WN);d4o=r(Set,"RoFormerForCausalLM"),Set.forEach(t),c4o=r(DAe," (RoFormer model)"),DAe.forEach(t),f4o=i(H),K_=n(H,"LI",{});var GAe=s(K_);Cie=n(GAe,"STRONG",{});var Ret=s(Cie);m4o=r(Ret,"speech_to_text_2"),Ret.forEach(t),g4o=r(GAe," \u2014 "),HN=n(GAe,"A",{href:!0});var Bet=s(HN);h4o=r(Bet,"Speech2Text2ForCausalLM"),Bet.forEach(t),p4o=r(GAe," (Speech2Text2 model)"),GAe.forEach(t),u4o=i(H),Z_=n(H,"LI",{});var OAe=s(Z_);wie=n(OAe,"STRONG",{});var Pet=s(wie);_4o=r(Pet,"transfo-xl"),Pet.forEach(t),b4o=r(OAe," \u2014 "),UN=n(OAe,"A",{href:!0});var Iet=s(UN);v4o=r(Iet,"TransfoXLLMHeadModel"),Iet.forEach(t),F4o=r(OAe," (Transformer-XL model)"),OAe.forEach(t),T4o=i(H),e0=n(H,"LI",{});var VAe=s(e0);Aie=n(VAe,"STRONG",{});var qet=s(Aie);M4o=r(qet,"trocr"),qet.forEach(t),E4o=r(VAe," \u2014 "),JN=n(VAe,"A",{href:!0});var Net=s(JN);C4o=r(Net,"TrOCRForCausalLM"),Net.forEach(t),w4o=r(VAe," (TrOCR model)"),VAe.forEach(t),A4o=i(H),o0=n(H,"LI",{});var XAe=s(o0);yie=n(XAe,"STRONG",{});var jet=s(yie);y4o=r(jet,"xglm"),jet.forEach(t),L4o=r(XAe," \u2014 "),YN=n(XAe,"A",{href:!0});var Det=s(YN);x4o=r(Det,"XGLMForCausalLM"),Det.forEach(t),$4o=r(XAe," (XGLM model)"),XAe.forEach(t),k4o=i(H),r0=n(H,"LI",{});var zAe=s(r0);Lie=n(zAe,"STRONG",{});var Get=s(Lie);S4o=r(Get,"xlm"),Get.forEach(t),R4o=r(zAe," \u2014 "),KN=n(zAe,"A",{href:!0});var Oet=s(KN);B4o=r(Oet,"XLMWithLMHeadModel"),Oet.forEach(t),P4o=r(zAe," (XLM model)"),zAe.forEach(t),I4o=i(H),t0=n(H,"LI",{});var QAe=s(t0);xie=n(QAe,"STRONG",{});var Vet=s(xie);q4o=r(Vet,"xlm-prophetnet"),Vet.forEach(t),N4o=r(QAe," \u2014 "),ZN=n(QAe,"A",{href:!0});var Xet=s(ZN);j4o=r(Xet,"XLMProphetNetForCausalLM"),Xet.forEach(t),D4o=r(QAe," (XLMProphetNet model)"),QAe.forEach(t),G4o=i(H),a0=n(H,"LI",{});var WAe=s(a0);$ie=n(WAe,"STRONG",{});var zet=s($ie);O4o=r(zet,"xlm-roberta"),zet.forEach(t),V4o=r(WAe," \u2014 "),ej=n(WAe,"A",{href:!0});var Qet=s(ej);X4o=r(Qet,"XLMRobertaForCausalLM"),Qet.forEach(t),z4o=r(WAe," (XLM-RoBERTa model)"),WAe.forEach(t),Q4o=i(H),n0=n(H,"LI",{});var HAe=s(n0);kie=n(HAe,"STRONG",{});var Wet=s(kie);W4o=r(Wet,"xlm-roberta-xl"),Wet.forEach(t),H4o=r(HAe," \u2014 "),oj=n(HAe,"A",{href:!0});var Het=s(oj);U4o=r(Het,"XLMRobertaXLForCausalLM"),Het.forEach(t),J4o=r(HAe," (XLM-RoBERTa-XL model)"),HAe.forEach(t),Y4o=i(H),s0=n(H,"LI",{});var UAe=s(s0);Sie=n(UAe,"STRONG",{});var Uet=s(Sie);K4o=r(Uet,"xlnet"),Uet.forEach(t),Z4o=r(UAe," \u2014 "),rj=n(UAe,"A",{href:!0});var Jet=s(rj);eEo=r(Jet,"XLNetLMHeadModel"),Jet.forEach(t),oEo=r(UAe," (XLNet model)"),UAe.forEach(t),H.forEach(t),rEo=i(oa),l0=n(oa,"P",{});var JAe=s(l0);tEo=r(JAe,"The model is set in evaluation mode by default using "),Rie=n(JAe,"CODE",{});var Yet=s(Rie);aEo=r(Yet,"model.eval()"),Yet.forEach(t),nEo=r(JAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bie=n(JAe,"CODE",{});var Ket=s(Bie);sEo=r(Ket,"model.train()"),Ket.forEach(t),JAe.forEach(t),lEo=i(oa),T(i0.$$.fragment,oa),oa.forEach(t),Os.forEach(t),nIe=i(f),ki=n(f,"H2",{class:!0});var dNe=s(ki);d0=n(dNe,"A",{id:!0,class:!0,href:!0});var Zet=s(d0);Pie=n(Zet,"SPAN",{});var eot=s(Pie);T(qA.$$.fragment,eot),eot.forEach(t),Zet.forEach(t),iEo=i(dNe),Iie=n(dNe,"SPAN",{});var oot=s(Iie);dEo=r(oot,"AutoModelForMaskedLM"),oot.forEach(t),dNe.forEach(t),sIe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(NA.$$.fragment,Vs),cEo=i(Vs),Si=n(Vs,"P",{});var pK=s(Si);fEo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tj=n(pK,"A",{href:!0});var rot=s(tj);mEo=r(rot,"from_pretrained()"),rot.forEach(t),gEo=r(pK," class method or the "),aj=n(pK,"A",{href:!0});var tot=s(aj);hEo=r(tot,"from_config()"),tot.forEach(t),pEo=r(pK,` class
method.`),pK.forEach(t),uEo=i(Vs),jA=n(Vs,"P",{});var cNe=s(jA);_Eo=r(cNe,"This class cannot be instantiated directly using "),qie=n(cNe,"CODE",{});var aot=s(qie);bEo=r(aot,"__init__()"),aot.forEach(t),vEo=r(cNe," (throws an error)."),cNe.forEach(t),FEo=i(Vs),at=n(Vs,"DIV",{class:!0});var n3=s(at);T(DA.$$.fragment,n3),TEo=i(n3),Nie=n(n3,"P",{});var not=s(Nie);MEo=r(not,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),not.forEach(t),EEo=i(n3),Ri=n(n3,"P",{});var uK=s(Ri);CEo=r(uK,`Note:
Loading a model from its configuration file does `),jie=n(uK,"STRONG",{});var sot=s(jie);wEo=r(sot,"not"),sot.forEach(t),AEo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=n(uK,"A",{href:!0});var lot=s(nj);yEo=r(lot,"from_pretrained()"),lot.forEach(t),LEo=r(uK," to load the model weights."),uK.forEach(t),xEo=i(n3),T(c0.$$.fragment,n3),n3.forEach(t),$Eo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(GA.$$.fragment,ra),kEo=i(ra),Die=n(ra,"P",{});var iot=s(Die);SEo=r(iot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iot.forEach(t),REo=i(ra),xa=n(ra,"P",{});var s3=s(xa);BEo=r(s3,"The model class to instantiate is selected based on the "),Gie=n(s3,"CODE",{});var dot=s(Gie);PEo=r(dot,"model_type"),dot.forEach(t),IEo=r(s3,` property of the config object (either
passed as an argument or loaded from `),Oie=n(s3,"CODE",{});var cot=s(Oie);qEo=r(cot,"pretrained_model_name_or_path"),cot.forEach(t),NEo=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=n(s3,"CODE",{});var fot=s(Vie);jEo=r(fot,"pretrained_model_name_or_path"),fot.forEach(t),DEo=r(s3,":"),s3.forEach(t),GEo=i(ra),Q=n(ra,"UL",{});var U=s(Q);f0=n(U,"LI",{});var YAe=s(f0);Xie=n(YAe,"STRONG",{});var mot=s(Xie);OEo=r(mot,"albert"),mot.forEach(t),VEo=r(YAe," \u2014 "),sj=n(YAe,"A",{href:!0});var got=s(sj);XEo=r(got,"AlbertForMaskedLM"),got.forEach(t),zEo=r(YAe," (ALBERT model)"),YAe.forEach(t),QEo=i(U),m0=n(U,"LI",{});var KAe=s(m0);zie=n(KAe,"STRONG",{});var hot=s(zie);WEo=r(hot,"bart"),hot.forEach(t),HEo=r(KAe," \u2014 "),lj=n(KAe,"A",{href:!0});var pot=s(lj);UEo=r(pot,"BartForConditionalGeneration"),pot.forEach(t),JEo=r(KAe," (BART model)"),KAe.forEach(t),YEo=i(U),g0=n(U,"LI",{});var ZAe=s(g0);Qie=n(ZAe,"STRONG",{});var uot=s(Qie);KEo=r(uot,"bert"),uot.forEach(t),ZEo=r(ZAe," \u2014 "),ij=n(ZAe,"A",{href:!0});var _ot=s(ij);e5o=r(_ot,"BertForMaskedLM"),_ot.forEach(t),o5o=r(ZAe," (BERT model)"),ZAe.forEach(t),r5o=i(U),h0=n(U,"LI",{});var eye=s(h0);Wie=n(eye,"STRONG",{});var bot=s(Wie);t5o=r(bot,"big_bird"),bot.forEach(t),a5o=r(eye," \u2014 "),dj=n(eye,"A",{href:!0});var vot=s(dj);n5o=r(vot,"BigBirdForMaskedLM"),vot.forEach(t),s5o=r(eye," (BigBird model)"),eye.forEach(t),l5o=i(U),p0=n(U,"LI",{});var oye=s(p0);Hie=n(oye,"STRONG",{});var Fot=s(Hie);i5o=r(Fot,"camembert"),Fot.forEach(t),d5o=r(oye," \u2014 "),cj=n(oye,"A",{href:!0});var Tot=s(cj);c5o=r(Tot,"CamembertForMaskedLM"),Tot.forEach(t),f5o=r(oye," (CamemBERT model)"),oye.forEach(t),m5o=i(U),u0=n(U,"LI",{});var rye=s(u0);Uie=n(rye,"STRONG",{});var Mot=s(Uie);g5o=r(Mot,"convbert"),Mot.forEach(t),h5o=r(rye," \u2014 "),fj=n(rye,"A",{href:!0});var Eot=s(fj);p5o=r(Eot,"ConvBertForMaskedLM"),Eot.forEach(t),u5o=r(rye," (ConvBERT model)"),rye.forEach(t),_5o=i(U),_0=n(U,"LI",{});var tye=s(_0);Jie=n(tye,"STRONG",{});var Cot=s(Jie);b5o=r(Cot,"data2vec-text"),Cot.forEach(t),v5o=r(tye," \u2014 "),mj=n(tye,"A",{href:!0});var wot=s(mj);F5o=r(wot,"Data2VecTextForMaskedLM"),wot.forEach(t),T5o=r(tye," (Data2VecText model)"),tye.forEach(t),M5o=i(U),b0=n(U,"LI",{});var aye=s(b0);Yie=n(aye,"STRONG",{});var Aot=s(Yie);E5o=r(Aot,"deberta"),Aot.forEach(t),C5o=r(aye," \u2014 "),gj=n(aye,"A",{href:!0});var yot=s(gj);w5o=r(yot,"DebertaForMaskedLM"),yot.forEach(t),A5o=r(aye," (DeBERTa model)"),aye.forEach(t),y5o=i(U),v0=n(U,"LI",{});var nye=s(v0);Kie=n(nye,"STRONG",{});var Lot=s(Kie);L5o=r(Lot,"deberta-v2"),Lot.forEach(t),x5o=r(nye," \u2014 "),hj=n(nye,"A",{href:!0});var xot=s(hj);$5o=r(xot,"DebertaV2ForMaskedLM"),xot.forEach(t),k5o=r(nye," (DeBERTa-v2 model)"),nye.forEach(t),S5o=i(U),F0=n(U,"LI",{});var sye=s(F0);Zie=n(sye,"STRONG",{});var $ot=s(Zie);R5o=r($ot,"distilbert"),$ot.forEach(t),B5o=r(sye," \u2014 "),pj=n(sye,"A",{href:!0});var kot=s(pj);P5o=r(kot,"DistilBertForMaskedLM"),kot.forEach(t),I5o=r(sye," (DistilBERT model)"),sye.forEach(t),q5o=i(U),T0=n(U,"LI",{});var lye=s(T0);ede=n(lye,"STRONG",{});var Sot=s(ede);N5o=r(Sot,"electra"),Sot.forEach(t),j5o=r(lye," \u2014 "),uj=n(lye,"A",{href:!0});var Rot=s(uj);D5o=r(Rot,"ElectraForMaskedLM"),Rot.forEach(t),G5o=r(lye," (ELECTRA model)"),lye.forEach(t),O5o=i(U),M0=n(U,"LI",{});var iye=s(M0);ode=n(iye,"STRONG",{});var Bot=s(ode);V5o=r(Bot,"flaubert"),Bot.forEach(t),X5o=r(iye," \u2014 "),_j=n(iye,"A",{href:!0});var Pot=s(_j);z5o=r(Pot,"FlaubertWithLMHeadModel"),Pot.forEach(t),Q5o=r(iye," (FlauBERT model)"),iye.forEach(t),W5o=i(U),E0=n(U,"LI",{});var dye=s(E0);rde=n(dye,"STRONG",{});var Iot=s(rde);H5o=r(Iot,"fnet"),Iot.forEach(t),U5o=r(dye," \u2014 "),bj=n(dye,"A",{href:!0});var qot=s(bj);J5o=r(qot,"FNetForMaskedLM"),qot.forEach(t),Y5o=r(dye," (FNet model)"),dye.forEach(t),K5o=i(U),C0=n(U,"LI",{});var cye=s(C0);tde=n(cye,"STRONG",{});var Not=s(tde);Z5o=r(Not,"funnel"),Not.forEach(t),eCo=r(cye," \u2014 "),vj=n(cye,"A",{href:!0});var jot=s(vj);oCo=r(jot,"FunnelForMaskedLM"),jot.forEach(t),rCo=r(cye," (Funnel Transformer model)"),cye.forEach(t),tCo=i(U),w0=n(U,"LI",{});var fye=s(w0);ade=n(fye,"STRONG",{});var Dot=s(ade);aCo=r(Dot,"ibert"),Dot.forEach(t),nCo=r(fye," \u2014 "),Fj=n(fye,"A",{href:!0});var Got=s(Fj);sCo=r(Got,"IBertForMaskedLM"),Got.forEach(t),lCo=r(fye," (I-BERT model)"),fye.forEach(t),iCo=i(U),A0=n(U,"LI",{});var mye=s(A0);nde=n(mye,"STRONG",{});var Oot=s(nde);dCo=r(Oot,"layoutlm"),Oot.forEach(t),cCo=r(mye," \u2014 "),Tj=n(mye,"A",{href:!0});var Vot=s(Tj);fCo=r(Vot,"LayoutLMForMaskedLM"),Vot.forEach(t),mCo=r(mye," (LayoutLM model)"),mye.forEach(t),gCo=i(U),y0=n(U,"LI",{});var gye=s(y0);sde=n(gye,"STRONG",{});var Xot=s(sde);hCo=r(Xot,"longformer"),Xot.forEach(t),pCo=r(gye," \u2014 "),Mj=n(gye,"A",{href:!0});var zot=s(Mj);uCo=r(zot,"LongformerForMaskedLM"),zot.forEach(t),_Co=r(gye," (Longformer model)"),gye.forEach(t),bCo=i(U),L0=n(U,"LI",{});var hye=s(L0);lde=n(hye,"STRONG",{});var Qot=s(lde);vCo=r(Qot,"mbart"),Qot.forEach(t),FCo=r(hye," \u2014 "),Ej=n(hye,"A",{href:!0});var Wot=s(Ej);TCo=r(Wot,"MBartForConditionalGeneration"),Wot.forEach(t),MCo=r(hye," (mBART model)"),hye.forEach(t),ECo=i(U),x0=n(U,"LI",{});var pye=s(x0);ide=n(pye,"STRONG",{});var Hot=s(ide);CCo=r(Hot,"megatron-bert"),Hot.forEach(t),wCo=r(pye," \u2014 "),Cj=n(pye,"A",{href:!0});var Uot=s(Cj);ACo=r(Uot,"MegatronBertForMaskedLM"),Uot.forEach(t),yCo=r(pye," (MegatronBert model)"),pye.forEach(t),LCo=i(U),$0=n(U,"LI",{});var uye=s($0);dde=n(uye,"STRONG",{});var Jot=s(dde);xCo=r(Jot,"mobilebert"),Jot.forEach(t),$Co=r(uye," \u2014 "),wj=n(uye,"A",{href:!0});var Yot=s(wj);kCo=r(Yot,"MobileBertForMaskedLM"),Yot.forEach(t),SCo=r(uye," (MobileBERT model)"),uye.forEach(t),RCo=i(U),k0=n(U,"LI",{});var _ye=s(k0);cde=n(_ye,"STRONG",{});var Kot=s(cde);BCo=r(Kot,"mpnet"),Kot.forEach(t),PCo=r(_ye," \u2014 "),Aj=n(_ye,"A",{href:!0});var Zot=s(Aj);ICo=r(Zot,"MPNetForMaskedLM"),Zot.forEach(t),qCo=r(_ye," (MPNet model)"),_ye.forEach(t),NCo=i(U),S0=n(U,"LI",{});var bye=s(S0);fde=n(bye,"STRONG",{});var ert=s(fde);jCo=r(ert,"nystromformer"),ert.forEach(t),DCo=r(bye," \u2014 "),yj=n(bye,"A",{href:!0});var ort=s(yj);GCo=r(ort,"NystromformerForMaskedLM"),ort.forEach(t),OCo=r(bye," (Nystromformer model)"),bye.forEach(t),VCo=i(U),R0=n(U,"LI",{});var vye=s(R0);mde=n(vye,"STRONG",{});var rrt=s(mde);XCo=r(rrt,"perceiver"),rrt.forEach(t),zCo=r(vye," \u2014 "),Lj=n(vye,"A",{href:!0});var trt=s(Lj);QCo=r(trt,"PerceiverForMaskedLM"),trt.forEach(t),WCo=r(vye," (Perceiver model)"),vye.forEach(t),HCo=i(U),B0=n(U,"LI",{});var Fye=s(B0);gde=n(Fye,"STRONG",{});var art=s(gde);UCo=r(art,"qdqbert"),art.forEach(t),JCo=r(Fye," \u2014 "),xj=n(Fye,"A",{href:!0});var nrt=s(xj);YCo=r(nrt,"QDQBertForMaskedLM"),nrt.forEach(t),KCo=r(Fye," (QDQBert model)"),Fye.forEach(t),ZCo=i(U),P0=n(U,"LI",{});var Tye=s(P0);hde=n(Tye,"STRONG",{});var srt=s(hde);e3o=r(srt,"reformer"),srt.forEach(t),o3o=r(Tye," \u2014 "),$j=n(Tye,"A",{href:!0});var lrt=s($j);r3o=r(lrt,"ReformerForMaskedLM"),lrt.forEach(t),t3o=r(Tye," (Reformer model)"),Tye.forEach(t),a3o=i(U),I0=n(U,"LI",{});var Mye=s(I0);pde=n(Mye,"STRONG",{});var irt=s(pde);n3o=r(irt,"rembert"),irt.forEach(t),s3o=r(Mye," \u2014 "),kj=n(Mye,"A",{href:!0});var drt=s(kj);l3o=r(drt,"RemBertForMaskedLM"),drt.forEach(t),i3o=r(Mye," (RemBERT model)"),Mye.forEach(t),d3o=i(U),q0=n(U,"LI",{});var Eye=s(q0);ude=n(Eye,"STRONG",{});var crt=s(ude);c3o=r(crt,"roberta"),crt.forEach(t),f3o=r(Eye," \u2014 "),Sj=n(Eye,"A",{href:!0});var frt=s(Sj);m3o=r(frt,"RobertaForMaskedLM"),frt.forEach(t),g3o=r(Eye," (RoBERTa model)"),Eye.forEach(t),h3o=i(U),N0=n(U,"LI",{});var Cye=s(N0);_de=n(Cye,"STRONG",{});var mrt=s(_de);p3o=r(mrt,"roformer"),mrt.forEach(t),u3o=r(Cye," \u2014 "),Rj=n(Cye,"A",{href:!0});var grt=s(Rj);_3o=r(grt,"RoFormerForMaskedLM"),grt.forEach(t),b3o=r(Cye," (RoFormer model)"),Cye.forEach(t),v3o=i(U),j0=n(U,"LI",{});var wye=s(j0);bde=n(wye,"STRONG",{});var hrt=s(bde);F3o=r(hrt,"squeezebert"),hrt.forEach(t),T3o=r(wye," \u2014 "),Bj=n(wye,"A",{href:!0});var prt=s(Bj);M3o=r(prt,"SqueezeBertForMaskedLM"),prt.forEach(t),E3o=r(wye," (SqueezeBERT model)"),wye.forEach(t),C3o=i(U),D0=n(U,"LI",{});var Aye=s(D0);vde=n(Aye,"STRONG",{});var urt=s(vde);w3o=r(urt,"tapas"),urt.forEach(t),A3o=r(Aye," \u2014 "),Pj=n(Aye,"A",{href:!0});var _rt=s(Pj);y3o=r(_rt,"TapasForMaskedLM"),_rt.forEach(t),L3o=r(Aye," (TAPAS model)"),Aye.forEach(t),x3o=i(U),G0=n(U,"LI",{});var yye=s(G0);Fde=n(yye,"STRONG",{});var brt=s(Fde);$3o=r(brt,"wav2vec2"),brt.forEach(t),k3o=r(yye," \u2014 "),Tde=n(yye,"CODE",{});var vrt=s(Tde);S3o=r(vrt,"Wav2Vec2ForMaskedLM"),vrt.forEach(t),R3o=r(yye," (Wav2Vec2 model)"),yye.forEach(t),B3o=i(U),O0=n(U,"LI",{});var Lye=s(O0);Mde=n(Lye,"STRONG",{});var Frt=s(Mde);P3o=r(Frt,"xlm"),Frt.forEach(t),I3o=r(Lye," \u2014 "),Ij=n(Lye,"A",{href:!0});var Trt=s(Ij);q3o=r(Trt,"XLMWithLMHeadModel"),Trt.forEach(t),N3o=r(Lye," (XLM model)"),Lye.forEach(t),j3o=i(U),V0=n(U,"LI",{});var xye=s(V0);Ede=n(xye,"STRONG",{});var Mrt=s(Ede);D3o=r(Mrt,"xlm-roberta"),Mrt.forEach(t),G3o=r(xye," \u2014 "),qj=n(xye,"A",{href:!0});var Ert=s(qj);O3o=r(Ert,"XLMRobertaForMaskedLM"),Ert.forEach(t),V3o=r(xye," (XLM-RoBERTa model)"),xye.forEach(t),X3o=i(U),X0=n(U,"LI",{});var $ye=s(X0);Cde=n($ye,"STRONG",{});var Crt=s(Cde);z3o=r(Crt,"xlm-roberta-xl"),Crt.forEach(t),Q3o=r($ye," \u2014 "),Nj=n($ye,"A",{href:!0});var wrt=s(Nj);W3o=r(wrt,"XLMRobertaXLForMaskedLM"),wrt.forEach(t),H3o=r($ye," (XLM-RoBERTa-XL model)"),$ye.forEach(t),U3o=i(U),z0=n(U,"LI",{});var kye=s(z0);wde=n(kye,"STRONG",{});var Art=s(wde);J3o=r(Art,"yoso"),Art.forEach(t),Y3o=r(kye," \u2014 "),jj=n(kye,"A",{href:!0});var yrt=s(jj);K3o=r(yrt,"YosoForMaskedLM"),yrt.forEach(t),Z3o=r(kye," (YOSO model)"),kye.forEach(t),U.forEach(t),ewo=i(ra),Q0=n(ra,"P",{});var Sye=s(Q0);owo=r(Sye,"The model is set in evaluation mode by default using "),Ade=n(Sye,"CODE",{});var Lrt=s(Ade);rwo=r(Lrt,"model.eval()"),Lrt.forEach(t),two=r(Sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=n(Sye,"CODE",{});var xrt=s(yde);awo=r(xrt,"model.train()"),xrt.forEach(t),Sye.forEach(t),nwo=i(ra),T(W0.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),lIe=i(f),Bi=n(f,"H2",{class:!0});var fNe=s(Bi);H0=n(fNe,"A",{id:!0,class:!0,href:!0});var $rt=s(H0);Lde=n($rt,"SPAN",{});var krt=s(Lde);T(OA.$$.fragment,krt),krt.forEach(t),$rt.forEach(t),swo=i(fNe),xde=n(fNe,"SPAN",{});var Srt=s(xde);lwo=r(Srt,"AutoModelForSeq2SeqLM"),Srt.forEach(t),fNe.forEach(t),iIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(VA.$$.fragment,Xs),iwo=i(Xs),Pi=n(Xs,"P",{});var _K=s(Pi);dwo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dj=n(_K,"A",{href:!0});var Rrt=s(Dj);cwo=r(Rrt,"from_pretrained()"),Rrt.forEach(t),fwo=r(_K," class method or the "),Gj=n(_K,"A",{href:!0});var Brt=s(Gj);mwo=r(Brt,"from_config()"),Brt.forEach(t),gwo=r(_K,` class
method.`),_K.forEach(t),hwo=i(Xs),XA=n(Xs,"P",{});var mNe=s(XA);pwo=r(mNe,"This class cannot be instantiated directly using "),$de=n(mNe,"CODE",{});var Prt=s($de);uwo=r(Prt,"__init__()"),Prt.forEach(t),_wo=r(mNe," (throws an error)."),mNe.forEach(t),bwo=i(Xs),nt=n(Xs,"DIV",{class:!0});var l3=s(nt);T(zA.$$.fragment,l3),vwo=i(l3),kde=n(l3,"P",{});var Irt=s(kde);Fwo=r(Irt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Irt.forEach(t),Two=i(l3),Ii=n(l3,"P",{});var bK=s(Ii);Mwo=r(bK,`Note:
Loading a model from its configuration file does `),Sde=n(bK,"STRONG",{});var qrt=s(Sde);Ewo=r(qrt,"not"),qrt.forEach(t),Cwo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oj=n(bK,"A",{href:!0});var Nrt=s(Oj);wwo=r(Nrt,"from_pretrained()"),Nrt.forEach(t),Awo=r(bK," to load the model weights."),bK.forEach(t),ywo=i(l3),T(U0.$$.fragment,l3),l3.forEach(t),Lwo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(QA.$$.fragment,ta),xwo=i(ta),Rde=n(ta,"P",{});var jrt=s(Rde);$wo=r(jrt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jrt.forEach(t),kwo=i(ta),$a=n(ta,"P",{});var i3=s($a);Swo=r(i3,"The model class to instantiate is selected based on the "),Bde=n(i3,"CODE",{});var Drt=s(Bde);Rwo=r(Drt,"model_type"),Drt.forEach(t),Bwo=r(i3,` property of the config object (either
passed as an argument or loaded from `),Pde=n(i3,"CODE",{});var Grt=s(Pde);Pwo=r(Grt,"pretrained_model_name_or_path"),Grt.forEach(t),Iwo=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=n(i3,"CODE",{});var Ort=s(Ide);qwo=r(Ort,"pretrained_model_name_or_path"),Ort.forEach(t),Nwo=r(i3,":"),i3.forEach(t),jwo=i(ta),he=n(ta,"UL",{});var ue=s(he);J0=n(ue,"LI",{});var Rye=s(J0);qde=n(Rye,"STRONG",{});var Vrt=s(qde);Dwo=r(Vrt,"bart"),Vrt.forEach(t),Gwo=r(Rye," \u2014 "),Vj=n(Rye,"A",{href:!0});var Xrt=s(Vj);Owo=r(Xrt,"BartForConditionalGeneration"),Xrt.forEach(t),Vwo=r(Rye," (BART model)"),Rye.forEach(t),Xwo=i(ue),Y0=n(ue,"LI",{});var Bye=s(Y0);Nde=n(Bye,"STRONG",{});var zrt=s(Nde);zwo=r(zrt,"bigbird_pegasus"),zrt.forEach(t),Qwo=r(Bye," \u2014 "),Xj=n(Bye,"A",{href:!0});var Qrt=s(Xj);Wwo=r(Qrt,"BigBirdPegasusForConditionalGeneration"),Qrt.forEach(t),Hwo=r(Bye," (BigBirdPegasus model)"),Bye.forEach(t),Uwo=i(ue),K0=n(ue,"LI",{});var Pye=s(K0);jde=n(Pye,"STRONG",{});var Wrt=s(jde);Jwo=r(Wrt,"blenderbot"),Wrt.forEach(t),Ywo=r(Pye," \u2014 "),zj=n(Pye,"A",{href:!0});var Hrt=s(zj);Kwo=r(Hrt,"BlenderbotForConditionalGeneration"),Hrt.forEach(t),Zwo=r(Pye," (Blenderbot model)"),Pye.forEach(t),eAo=i(ue),Z0=n(ue,"LI",{});var Iye=s(Z0);Dde=n(Iye,"STRONG",{});var Urt=s(Dde);oAo=r(Urt,"blenderbot-small"),Urt.forEach(t),rAo=r(Iye," \u2014 "),Qj=n(Iye,"A",{href:!0});var Jrt=s(Qj);tAo=r(Jrt,"BlenderbotSmallForConditionalGeneration"),Jrt.forEach(t),aAo=r(Iye," (BlenderbotSmall model)"),Iye.forEach(t),nAo=i(ue),e1=n(ue,"LI",{});var qye=s(e1);Gde=n(qye,"STRONG",{});var Yrt=s(Gde);sAo=r(Yrt,"encoder-decoder"),Yrt.forEach(t),lAo=r(qye," \u2014 "),Wj=n(qye,"A",{href:!0});var Krt=s(Wj);iAo=r(Krt,"EncoderDecoderModel"),Krt.forEach(t),dAo=r(qye," (Encoder decoder model)"),qye.forEach(t),cAo=i(ue),o1=n(ue,"LI",{});var Nye=s(o1);Ode=n(Nye,"STRONG",{});var Zrt=s(Ode);fAo=r(Zrt,"fsmt"),Zrt.forEach(t),mAo=r(Nye," \u2014 "),Hj=n(Nye,"A",{href:!0});var ett=s(Hj);gAo=r(ett,"FSMTForConditionalGeneration"),ett.forEach(t),hAo=r(Nye," (FairSeq Machine-Translation model)"),Nye.forEach(t),pAo=i(ue),r1=n(ue,"LI",{});var jye=s(r1);Vde=n(jye,"STRONG",{});var ott=s(Vde);uAo=r(ott,"led"),ott.forEach(t),_Ao=r(jye," \u2014 "),Uj=n(jye,"A",{href:!0});var rtt=s(Uj);bAo=r(rtt,"LEDForConditionalGeneration"),rtt.forEach(t),vAo=r(jye," (LED model)"),jye.forEach(t),FAo=i(ue),t1=n(ue,"LI",{});var Dye=s(t1);Xde=n(Dye,"STRONG",{});var ttt=s(Xde);TAo=r(ttt,"m2m_100"),ttt.forEach(t),MAo=r(Dye," \u2014 "),Jj=n(Dye,"A",{href:!0});var att=s(Jj);EAo=r(att,"M2M100ForConditionalGeneration"),att.forEach(t),CAo=r(Dye," (M2M100 model)"),Dye.forEach(t),wAo=i(ue),a1=n(ue,"LI",{});var Gye=s(a1);zde=n(Gye,"STRONG",{});var ntt=s(zde);AAo=r(ntt,"marian"),ntt.forEach(t),yAo=r(Gye," \u2014 "),Yj=n(Gye,"A",{href:!0});var stt=s(Yj);LAo=r(stt,"MarianMTModel"),stt.forEach(t),xAo=r(Gye," (Marian model)"),Gye.forEach(t),$Ao=i(ue),n1=n(ue,"LI",{});var Oye=s(n1);Qde=n(Oye,"STRONG",{});var ltt=s(Qde);kAo=r(ltt,"mbart"),ltt.forEach(t),SAo=r(Oye," \u2014 "),Kj=n(Oye,"A",{href:!0});var itt=s(Kj);RAo=r(itt,"MBartForConditionalGeneration"),itt.forEach(t),BAo=r(Oye," (mBART model)"),Oye.forEach(t),PAo=i(ue),s1=n(ue,"LI",{});var Vye=s(s1);Wde=n(Vye,"STRONG",{});var dtt=s(Wde);IAo=r(dtt,"mt5"),dtt.forEach(t),qAo=r(Vye," \u2014 "),Zj=n(Vye,"A",{href:!0});var ctt=s(Zj);NAo=r(ctt,"MT5ForConditionalGeneration"),ctt.forEach(t),jAo=r(Vye," (mT5 model)"),Vye.forEach(t),DAo=i(ue),l1=n(ue,"LI",{});var Xye=s(l1);Hde=n(Xye,"STRONG",{});var ftt=s(Hde);GAo=r(ftt,"pegasus"),ftt.forEach(t),OAo=r(Xye," \u2014 "),eD=n(Xye,"A",{href:!0});var mtt=s(eD);VAo=r(mtt,"PegasusForConditionalGeneration"),mtt.forEach(t),XAo=r(Xye," (Pegasus model)"),Xye.forEach(t),zAo=i(ue),i1=n(ue,"LI",{});var zye=s(i1);Ude=n(zye,"STRONG",{});var gtt=s(Ude);QAo=r(gtt,"plbart"),gtt.forEach(t),WAo=r(zye," \u2014 "),oD=n(zye,"A",{href:!0});var htt=s(oD);HAo=r(htt,"PLBartForConditionalGeneration"),htt.forEach(t),UAo=r(zye," (PLBart model)"),zye.forEach(t),JAo=i(ue),d1=n(ue,"LI",{});var Qye=s(d1);Jde=n(Qye,"STRONG",{});var ptt=s(Jde);YAo=r(ptt,"prophetnet"),ptt.forEach(t),KAo=r(Qye," \u2014 "),rD=n(Qye,"A",{href:!0});var utt=s(rD);ZAo=r(utt,"ProphetNetForConditionalGeneration"),utt.forEach(t),eyo=r(Qye," (ProphetNet model)"),Qye.forEach(t),oyo=i(ue),c1=n(ue,"LI",{});var Wye=s(c1);Yde=n(Wye,"STRONG",{});var _tt=s(Yde);ryo=r(_tt,"t5"),_tt.forEach(t),tyo=r(Wye," \u2014 "),tD=n(Wye,"A",{href:!0});var btt=s(tD);ayo=r(btt,"T5ForConditionalGeneration"),btt.forEach(t),nyo=r(Wye," (T5 model)"),Wye.forEach(t),syo=i(ue),f1=n(ue,"LI",{});var Hye=s(f1);Kde=n(Hye,"STRONG",{});var vtt=s(Kde);lyo=r(vtt,"tapex"),vtt.forEach(t),iyo=r(Hye," \u2014 "),aD=n(Hye,"A",{href:!0});var Ftt=s(aD);dyo=r(Ftt,"BartForConditionalGeneration"),Ftt.forEach(t),cyo=r(Hye," (TAPEX model)"),Hye.forEach(t),fyo=i(ue),m1=n(ue,"LI",{});var Uye=s(m1);Zde=n(Uye,"STRONG",{});var Ttt=s(Zde);myo=r(Ttt,"xlm-prophetnet"),Ttt.forEach(t),gyo=r(Uye," \u2014 "),nD=n(Uye,"A",{href:!0});var Mtt=s(nD);hyo=r(Mtt,"XLMProphetNetForConditionalGeneration"),Mtt.forEach(t),pyo=r(Uye," (XLMProphetNet model)"),Uye.forEach(t),ue.forEach(t),uyo=i(ta),g1=n(ta,"P",{});var Jye=s(g1);_yo=r(Jye,"The model is set in evaluation mode by default using "),ece=n(Jye,"CODE",{});var Ett=s(ece);byo=r(Ett,"model.eval()"),Ett.forEach(t),vyo=r(Jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=n(Jye,"CODE",{});var Ctt=s(oce);Fyo=r(Ctt,"model.train()"),Ctt.forEach(t),Jye.forEach(t),Tyo=i(ta),T(h1.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),dIe=i(f),qi=n(f,"H2",{class:!0});var gNe=s(qi);p1=n(gNe,"A",{id:!0,class:!0,href:!0});var wtt=s(p1);rce=n(wtt,"SPAN",{});var Att=s(rce);T(WA.$$.fragment,Att),Att.forEach(t),wtt.forEach(t),Myo=i(gNe),tce=n(gNe,"SPAN",{});var ytt=s(tce);Eyo=r(ytt,"AutoModelForSequenceClassification"),ytt.forEach(t),gNe.forEach(t),cIe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(HA.$$.fragment,zs),Cyo=i(zs),Ni=n(zs,"P",{});var vK=s(Ni);wyo=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sD=n(vK,"A",{href:!0});var Ltt=s(sD);Ayo=r(Ltt,"from_pretrained()"),Ltt.forEach(t),yyo=r(vK," class method or the "),lD=n(vK,"A",{href:!0});var xtt=s(lD);Lyo=r(xtt,"from_config()"),xtt.forEach(t),xyo=r(vK,` class
method.`),vK.forEach(t),$yo=i(zs),UA=n(zs,"P",{});var hNe=s(UA);kyo=r(hNe,"This class cannot be instantiated directly using "),ace=n(hNe,"CODE",{});var $tt=s(ace);Syo=r($tt,"__init__()"),$tt.forEach(t),Ryo=r(hNe," (throws an error)."),hNe.forEach(t),Byo=i(zs),st=n(zs,"DIV",{class:!0});var d3=s(st);T(JA.$$.fragment,d3),Pyo=i(d3),nce=n(d3,"P",{});var ktt=s(nce);Iyo=r(ktt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ktt.forEach(t),qyo=i(d3),ji=n(d3,"P",{});var FK=s(ji);Nyo=r(FK,`Note:
Loading a model from its configuration file does `),sce=n(FK,"STRONG",{});var Stt=s(sce);jyo=r(Stt,"not"),Stt.forEach(t),Dyo=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=n(FK,"A",{href:!0});var Rtt=s(iD);Gyo=r(Rtt,"from_pretrained()"),Rtt.forEach(t),Oyo=r(FK," to load the model weights."),FK.forEach(t),Vyo=i(d3),T(u1.$$.fragment,d3),d3.forEach(t),Xyo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(YA.$$.fragment,aa),zyo=i(aa),lce=n(aa,"P",{});var Btt=s(lce);Qyo=r(Btt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Btt.forEach(t),Wyo=i(aa),ka=n(aa,"P",{});var c3=s(ka);Hyo=r(c3,"The model class to instantiate is selected based on the "),ice=n(c3,"CODE",{});var Ptt=s(ice);Uyo=r(Ptt,"model_type"),Ptt.forEach(t),Jyo=r(c3,` property of the config object (either
passed as an argument or loaded from `),dce=n(c3,"CODE",{});var Itt=s(dce);Yyo=r(Itt,"pretrained_model_name_or_path"),Itt.forEach(t),Kyo=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=n(c3,"CODE",{});var qtt=s(cce);Zyo=r(qtt,"pretrained_model_name_or_path"),qtt.forEach(t),eLo=r(c3,":"),c3.forEach(t),oLo=i(aa),q=n(aa,"UL",{});var N=s(q);_1=n(N,"LI",{});var Yye=s(_1);fce=n(Yye,"STRONG",{});var Ntt=s(fce);rLo=r(Ntt,"albert"),Ntt.forEach(t),tLo=r(Yye," \u2014 "),dD=n(Yye,"A",{href:!0});var jtt=s(dD);aLo=r(jtt,"AlbertForSequenceClassification"),jtt.forEach(t),nLo=r(Yye," (ALBERT model)"),Yye.forEach(t),sLo=i(N),b1=n(N,"LI",{});var Kye=s(b1);mce=n(Kye,"STRONG",{});var Dtt=s(mce);lLo=r(Dtt,"bart"),Dtt.forEach(t),iLo=r(Kye," \u2014 "),cD=n(Kye,"A",{href:!0});var Gtt=s(cD);dLo=r(Gtt,"BartForSequenceClassification"),Gtt.forEach(t),cLo=r(Kye," (BART model)"),Kye.forEach(t),fLo=i(N),v1=n(N,"LI",{});var Zye=s(v1);gce=n(Zye,"STRONG",{});var Ott=s(gce);mLo=r(Ott,"bert"),Ott.forEach(t),gLo=r(Zye," \u2014 "),fD=n(Zye,"A",{href:!0});var Vtt=s(fD);hLo=r(Vtt,"BertForSequenceClassification"),Vtt.forEach(t),pLo=r(Zye," (BERT model)"),Zye.forEach(t),uLo=i(N),F1=n(N,"LI",{});var eLe=s(F1);hce=n(eLe,"STRONG",{});var Xtt=s(hce);_Lo=r(Xtt,"big_bird"),Xtt.forEach(t),bLo=r(eLe," \u2014 "),mD=n(eLe,"A",{href:!0});var ztt=s(mD);vLo=r(ztt,"BigBirdForSequenceClassification"),ztt.forEach(t),FLo=r(eLe," (BigBird model)"),eLe.forEach(t),TLo=i(N),T1=n(N,"LI",{});var oLe=s(T1);pce=n(oLe,"STRONG",{});var Qtt=s(pce);MLo=r(Qtt,"bigbird_pegasus"),Qtt.forEach(t),ELo=r(oLe," \u2014 "),gD=n(oLe,"A",{href:!0});var Wtt=s(gD);CLo=r(Wtt,"BigBirdPegasusForSequenceClassification"),Wtt.forEach(t),wLo=r(oLe," (BigBirdPegasus model)"),oLe.forEach(t),ALo=i(N),M1=n(N,"LI",{});var rLe=s(M1);uce=n(rLe,"STRONG",{});var Htt=s(uce);yLo=r(Htt,"camembert"),Htt.forEach(t),LLo=r(rLe," \u2014 "),hD=n(rLe,"A",{href:!0});var Utt=s(hD);xLo=r(Utt,"CamembertForSequenceClassification"),Utt.forEach(t),$Lo=r(rLe," (CamemBERT model)"),rLe.forEach(t),kLo=i(N),E1=n(N,"LI",{});var tLe=s(E1);_ce=n(tLe,"STRONG",{});var Jtt=s(_ce);SLo=r(Jtt,"canine"),Jtt.forEach(t),RLo=r(tLe," \u2014 "),pD=n(tLe,"A",{href:!0});var Ytt=s(pD);BLo=r(Ytt,"CanineForSequenceClassification"),Ytt.forEach(t),PLo=r(tLe," (Canine model)"),tLe.forEach(t),ILo=i(N),C1=n(N,"LI",{});var aLe=s(C1);bce=n(aLe,"STRONG",{});var Ktt=s(bce);qLo=r(Ktt,"convbert"),Ktt.forEach(t),NLo=r(aLe," \u2014 "),uD=n(aLe,"A",{href:!0});var Ztt=s(uD);jLo=r(Ztt,"ConvBertForSequenceClassification"),Ztt.forEach(t),DLo=r(aLe," (ConvBERT model)"),aLe.forEach(t),GLo=i(N),w1=n(N,"LI",{});var nLe=s(w1);vce=n(nLe,"STRONG",{});var eat=s(vce);OLo=r(eat,"ctrl"),eat.forEach(t),VLo=r(nLe," \u2014 "),_D=n(nLe,"A",{href:!0});var oat=s(_D);XLo=r(oat,"CTRLForSequenceClassification"),oat.forEach(t),zLo=r(nLe," (CTRL model)"),nLe.forEach(t),QLo=i(N),A1=n(N,"LI",{});var sLe=s(A1);Fce=n(sLe,"STRONG",{});var rat=s(Fce);WLo=r(rat,"data2vec-text"),rat.forEach(t),HLo=r(sLe," \u2014 "),bD=n(sLe,"A",{href:!0});var tat=s(bD);ULo=r(tat,"Data2VecTextForSequenceClassification"),tat.forEach(t),JLo=r(sLe," (Data2VecText model)"),sLe.forEach(t),YLo=i(N),y1=n(N,"LI",{});var lLe=s(y1);Tce=n(lLe,"STRONG",{});var aat=s(Tce);KLo=r(aat,"deberta"),aat.forEach(t),ZLo=r(lLe," \u2014 "),vD=n(lLe,"A",{href:!0});var nat=s(vD);e8o=r(nat,"DebertaForSequenceClassification"),nat.forEach(t),o8o=r(lLe," (DeBERTa model)"),lLe.forEach(t),r8o=i(N),L1=n(N,"LI",{});var iLe=s(L1);Mce=n(iLe,"STRONG",{});var sat=s(Mce);t8o=r(sat,"deberta-v2"),sat.forEach(t),a8o=r(iLe," \u2014 "),FD=n(iLe,"A",{href:!0});var lat=s(FD);n8o=r(lat,"DebertaV2ForSequenceClassification"),lat.forEach(t),s8o=r(iLe," (DeBERTa-v2 model)"),iLe.forEach(t),l8o=i(N),x1=n(N,"LI",{});var dLe=s(x1);Ece=n(dLe,"STRONG",{});var iat=s(Ece);i8o=r(iat,"distilbert"),iat.forEach(t),d8o=r(dLe," \u2014 "),TD=n(dLe,"A",{href:!0});var dat=s(TD);c8o=r(dat,"DistilBertForSequenceClassification"),dat.forEach(t),f8o=r(dLe," (DistilBERT model)"),dLe.forEach(t),m8o=i(N),$1=n(N,"LI",{});var cLe=s($1);Cce=n(cLe,"STRONG",{});var cat=s(Cce);g8o=r(cat,"electra"),cat.forEach(t),h8o=r(cLe," \u2014 "),MD=n(cLe,"A",{href:!0});var fat=s(MD);p8o=r(fat,"ElectraForSequenceClassification"),fat.forEach(t),u8o=r(cLe," (ELECTRA model)"),cLe.forEach(t),_8o=i(N),k1=n(N,"LI",{});var fLe=s(k1);wce=n(fLe,"STRONG",{});var mat=s(wce);b8o=r(mat,"flaubert"),mat.forEach(t),v8o=r(fLe," \u2014 "),ED=n(fLe,"A",{href:!0});var gat=s(ED);F8o=r(gat,"FlaubertForSequenceClassification"),gat.forEach(t),T8o=r(fLe," (FlauBERT model)"),fLe.forEach(t),M8o=i(N),S1=n(N,"LI",{});var mLe=s(S1);Ace=n(mLe,"STRONG",{});var hat=s(Ace);E8o=r(hat,"fnet"),hat.forEach(t),C8o=r(mLe," \u2014 "),CD=n(mLe,"A",{href:!0});var pat=s(CD);w8o=r(pat,"FNetForSequenceClassification"),pat.forEach(t),A8o=r(mLe," (FNet model)"),mLe.forEach(t),y8o=i(N),R1=n(N,"LI",{});var gLe=s(R1);yce=n(gLe,"STRONG",{});var uat=s(yce);L8o=r(uat,"funnel"),uat.forEach(t),x8o=r(gLe," \u2014 "),wD=n(gLe,"A",{href:!0});var _at=s(wD);$8o=r(_at,"FunnelForSequenceClassification"),_at.forEach(t),k8o=r(gLe," (Funnel Transformer model)"),gLe.forEach(t),S8o=i(N),B1=n(N,"LI",{});var hLe=s(B1);Lce=n(hLe,"STRONG",{});var bat=s(Lce);R8o=r(bat,"gpt2"),bat.forEach(t),B8o=r(hLe," \u2014 "),AD=n(hLe,"A",{href:!0});var vat=s(AD);P8o=r(vat,"GPT2ForSequenceClassification"),vat.forEach(t),I8o=r(hLe," (OpenAI GPT-2 model)"),hLe.forEach(t),q8o=i(N),P1=n(N,"LI",{});var pLe=s(P1);xce=n(pLe,"STRONG",{});var Fat=s(xce);N8o=r(Fat,"gpt_neo"),Fat.forEach(t),j8o=r(pLe," \u2014 "),yD=n(pLe,"A",{href:!0});var Tat=s(yD);D8o=r(Tat,"GPTNeoForSequenceClassification"),Tat.forEach(t),G8o=r(pLe," (GPT Neo model)"),pLe.forEach(t),O8o=i(N),I1=n(N,"LI",{});var uLe=s(I1);$ce=n(uLe,"STRONG",{});var Mat=s($ce);V8o=r(Mat,"gptj"),Mat.forEach(t),X8o=r(uLe," \u2014 "),LD=n(uLe,"A",{href:!0});var Eat=s(LD);z8o=r(Eat,"GPTJForSequenceClassification"),Eat.forEach(t),Q8o=r(uLe," (GPT-J model)"),uLe.forEach(t),W8o=i(N),q1=n(N,"LI",{});var _Le=s(q1);kce=n(_Le,"STRONG",{});var Cat=s(kce);H8o=r(Cat,"ibert"),Cat.forEach(t),U8o=r(_Le," \u2014 "),xD=n(_Le,"A",{href:!0});var wat=s(xD);J8o=r(wat,"IBertForSequenceClassification"),wat.forEach(t),Y8o=r(_Le," (I-BERT model)"),_Le.forEach(t),K8o=i(N),N1=n(N,"LI",{});var bLe=s(N1);Sce=n(bLe,"STRONG",{});var Aat=s(Sce);Z8o=r(Aat,"layoutlm"),Aat.forEach(t),exo=r(bLe," \u2014 "),$D=n(bLe,"A",{href:!0});var yat=s($D);oxo=r(yat,"LayoutLMForSequenceClassification"),yat.forEach(t),rxo=r(bLe," (LayoutLM model)"),bLe.forEach(t),txo=i(N),j1=n(N,"LI",{});var vLe=s(j1);Rce=n(vLe,"STRONG",{});var Lat=s(Rce);axo=r(Lat,"layoutlmv2"),Lat.forEach(t),nxo=r(vLe," \u2014 "),kD=n(vLe,"A",{href:!0});var xat=s(kD);sxo=r(xat,"LayoutLMv2ForSequenceClassification"),xat.forEach(t),lxo=r(vLe," (LayoutLMv2 model)"),vLe.forEach(t),ixo=i(N),D1=n(N,"LI",{});var FLe=s(D1);Bce=n(FLe,"STRONG",{});var $at=s(Bce);dxo=r($at,"layoutlmv3"),$at.forEach(t),cxo=r(FLe," \u2014 "),SD=n(FLe,"A",{href:!0});var kat=s(SD);fxo=r(kat,"LayoutLMv3ForSequenceClassification"),kat.forEach(t),mxo=r(FLe," (LayoutLMv3 model)"),FLe.forEach(t),gxo=i(N),G1=n(N,"LI",{});var TLe=s(G1);Pce=n(TLe,"STRONG",{});var Sat=s(Pce);hxo=r(Sat,"led"),Sat.forEach(t),pxo=r(TLe," \u2014 "),RD=n(TLe,"A",{href:!0});var Rat=s(RD);uxo=r(Rat,"LEDForSequenceClassification"),Rat.forEach(t),_xo=r(TLe," (LED model)"),TLe.forEach(t),bxo=i(N),O1=n(N,"LI",{});var MLe=s(O1);Ice=n(MLe,"STRONG",{});var Bat=s(Ice);vxo=r(Bat,"longformer"),Bat.forEach(t),Fxo=r(MLe," \u2014 "),BD=n(MLe,"A",{href:!0});var Pat=s(BD);Txo=r(Pat,"LongformerForSequenceClassification"),Pat.forEach(t),Mxo=r(MLe," (Longformer model)"),MLe.forEach(t),Exo=i(N),V1=n(N,"LI",{});var ELe=s(V1);qce=n(ELe,"STRONG",{});var Iat=s(qce);Cxo=r(Iat,"mbart"),Iat.forEach(t),wxo=r(ELe," \u2014 "),PD=n(ELe,"A",{href:!0});var qat=s(PD);Axo=r(qat,"MBartForSequenceClassification"),qat.forEach(t),yxo=r(ELe," (mBART model)"),ELe.forEach(t),Lxo=i(N),X1=n(N,"LI",{});var CLe=s(X1);Nce=n(CLe,"STRONG",{});var Nat=s(Nce);xxo=r(Nat,"megatron-bert"),Nat.forEach(t),$xo=r(CLe," \u2014 "),ID=n(CLe,"A",{href:!0});var jat=s(ID);kxo=r(jat,"MegatronBertForSequenceClassification"),jat.forEach(t),Sxo=r(CLe," (MegatronBert model)"),CLe.forEach(t),Rxo=i(N),z1=n(N,"LI",{});var wLe=s(z1);jce=n(wLe,"STRONG",{});var Dat=s(jce);Bxo=r(Dat,"mobilebert"),Dat.forEach(t),Pxo=r(wLe," \u2014 "),qD=n(wLe,"A",{href:!0});var Gat=s(qD);Ixo=r(Gat,"MobileBertForSequenceClassification"),Gat.forEach(t),qxo=r(wLe," (MobileBERT model)"),wLe.forEach(t),Nxo=i(N),Q1=n(N,"LI",{});var ALe=s(Q1);Dce=n(ALe,"STRONG",{});var Oat=s(Dce);jxo=r(Oat,"mpnet"),Oat.forEach(t),Dxo=r(ALe," \u2014 "),ND=n(ALe,"A",{href:!0});var Vat=s(ND);Gxo=r(Vat,"MPNetForSequenceClassification"),Vat.forEach(t),Oxo=r(ALe," (MPNet model)"),ALe.forEach(t),Vxo=i(N),W1=n(N,"LI",{});var yLe=s(W1);Gce=n(yLe,"STRONG",{});var Xat=s(Gce);Xxo=r(Xat,"nystromformer"),Xat.forEach(t),zxo=r(yLe," \u2014 "),jD=n(yLe,"A",{href:!0});var zat=s(jD);Qxo=r(zat,"NystromformerForSequenceClassification"),zat.forEach(t),Wxo=r(yLe," (Nystromformer model)"),yLe.forEach(t),Hxo=i(N),H1=n(N,"LI",{});var LLe=s(H1);Oce=n(LLe,"STRONG",{});var Qat=s(Oce);Uxo=r(Qat,"openai-gpt"),Qat.forEach(t),Jxo=r(LLe," \u2014 "),DD=n(LLe,"A",{href:!0});var Wat=s(DD);Yxo=r(Wat,"OpenAIGPTForSequenceClassification"),Wat.forEach(t),Kxo=r(LLe," (OpenAI GPT model)"),LLe.forEach(t),Zxo=i(N),U1=n(N,"LI",{});var xLe=s(U1);Vce=n(xLe,"STRONG",{});var Hat=s(Vce);e9o=r(Hat,"perceiver"),Hat.forEach(t),o9o=r(xLe," \u2014 "),GD=n(xLe,"A",{href:!0});var Uat=s(GD);r9o=r(Uat,"PerceiverForSequenceClassification"),Uat.forEach(t),t9o=r(xLe," (Perceiver model)"),xLe.forEach(t),a9o=i(N),J1=n(N,"LI",{});var $Le=s(J1);Xce=n($Le,"STRONG",{});var Jat=s(Xce);n9o=r(Jat,"plbart"),Jat.forEach(t),s9o=r($Le," \u2014 "),OD=n($Le,"A",{href:!0});var Yat=s(OD);l9o=r(Yat,"PLBartForSequenceClassification"),Yat.forEach(t),i9o=r($Le," (PLBart model)"),$Le.forEach(t),d9o=i(N),Y1=n(N,"LI",{});var kLe=s(Y1);zce=n(kLe,"STRONG",{});var Kat=s(zce);c9o=r(Kat,"qdqbert"),Kat.forEach(t),f9o=r(kLe," \u2014 "),VD=n(kLe,"A",{href:!0});var Zat=s(VD);m9o=r(Zat,"QDQBertForSequenceClassification"),Zat.forEach(t),g9o=r(kLe," (QDQBert model)"),kLe.forEach(t),h9o=i(N),K1=n(N,"LI",{});var SLe=s(K1);Qce=n(SLe,"STRONG",{});var ent=s(Qce);p9o=r(ent,"reformer"),ent.forEach(t),u9o=r(SLe," \u2014 "),XD=n(SLe,"A",{href:!0});var ont=s(XD);_9o=r(ont,"ReformerForSequenceClassification"),ont.forEach(t),b9o=r(SLe," (Reformer model)"),SLe.forEach(t),v9o=i(N),Z1=n(N,"LI",{});var RLe=s(Z1);Wce=n(RLe,"STRONG",{});var rnt=s(Wce);F9o=r(rnt,"rembert"),rnt.forEach(t),T9o=r(RLe," \u2014 "),zD=n(RLe,"A",{href:!0});var tnt=s(zD);M9o=r(tnt,"RemBertForSequenceClassification"),tnt.forEach(t),E9o=r(RLe," (RemBERT model)"),RLe.forEach(t),C9o=i(N),eb=n(N,"LI",{});var BLe=s(eb);Hce=n(BLe,"STRONG",{});var ant=s(Hce);w9o=r(ant,"roberta"),ant.forEach(t),A9o=r(BLe," \u2014 "),QD=n(BLe,"A",{href:!0});var nnt=s(QD);y9o=r(nnt,"RobertaForSequenceClassification"),nnt.forEach(t),L9o=r(BLe," (RoBERTa model)"),BLe.forEach(t),x9o=i(N),ob=n(N,"LI",{});var PLe=s(ob);Uce=n(PLe,"STRONG",{});var snt=s(Uce);$9o=r(snt,"roformer"),snt.forEach(t),k9o=r(PLe," \u2014 "),WD=n(PLe,"A",{href:!0});var lnt=s(WD);S9o=r(lnt,"RoFormerForSequenceClassification"),lnt.forEach(t),R9o=r(PLe," (RoFormer model)"),PLe.forEach(t),B9o=i(N),rb=n(N,"LI",{});var ILe=s(rb);Jce=n(ILe,"STRONG",{});var int=s(Jce);P9o=r(int,"squeezebert"),int.forEach(t),I9o=r(ILe," \u2014 "),HD=n(ILe,"A",{href:!0});var dnt=s(HD);q9o=r(dnt,"SqueezeBertForSequenceClassification"),dnt.forEach(t),N9o=r(ILe," (SqueezeBERT model)"),ILe.forEach(t),j9o=i(N),tb=n(N,"LI",{});var qLe=s(tb);Yce=n(qLe,"STRONG",{});var cnt=s(Yce);D9o=r(cnt,"tapas"),cnt.forEach(t),G9o=r(qLe," \u2014 "),UD=n(qLe,"A",{href:!0});var fnt=s(UD);O9o=r(fnt,"TapasForSequenceClassification"),fnt.forEach(t),V9o=r(qLe," (TAPAS model)"),qLe.forEach(t),X9o=i(N),ab=n(N,"LI",{});var NLe=s(ab);Kce=n(NLe,"STRONG",{});var mnt=s(Kce);z9o=r(mnt,"tapex"),mnt.forEach(t),Q9o=r(NLe," \u2014 "),JD=n(NLe,"A",{href:!0});var gnt=s(JD);W9o=r(gnt,"BartForSequenceClassification"),gnt.forEach(t),H9o=r(NLe," (TAPEX model)"),NLe.forEach(t),U9o=i(N),nb=n(N,"LI",{});var jLe=s(nb);Zce=n(jLe,"STRONG",{});var hnt=s(Zce);J9o=r(hnt,"transfo-xl"),hnt.forEach(t),Y9o=r(jLe," \u2014 "),YD=n(jLe,"A",{href:!0});var pnt=s(YD);K9o=r(pnt,"TransfoXLForSequenceClassification"),pnt.forEach(t),Z9o=r(jLe," (Transformer-XL model)"),jLe.forEach(t),e$o=i(N),sb=n(N,"LI",{});var DLe=s(sb);efe=n(DLe,"STRONG",{});var unt=s(efe);o$o=r(unt,"xlm"),unt.forEach(t),r$o=r(DLe," \u2014 "),KD=n(DLe,"A",{href:!0});var _nt=s(KD);t$o=r(_nt,"XLMForSequenceClassification"),_nt.forEach(t),a$o=r(DLe," (XLM model)"),DLe.forEach(t),n$o=i(N),lb=n(N,"LI",{});var GLe=s(lb);ofe=n(GLe,"STRONG",{});var bnt=s(ofe);s$o=r(bnt,"xlm-roberta"),bnt.forEach(t),l$o=r(GLe," \u2014 "),ZD=n(GLe,"A",{href:!0});var vnt=s(ZD);i$o=r(vnt,"XLMRobertaForSequenceClassification"),vnt.forEach(t),d$o=r(GLe," (XLM-RoBERTa model)"),GLe.forEach(t),c$o=i(N),ib=n(N,"LI",{});var OLe=s(ib);rfe=n(OLe,"STRONG",{});var Fnt=s(rfe);f$o=r(Fnt,"xlm-roberta-xl"),Fnt.forEach(t),m$o=r(OLe," \u2014 "),eG=n(OLe,"A",{href:!0});var Tnt=s(eG);g$o=r(Tnt,"XLMRobertaXLForSequenceClassification"),Tnt.forEach(t),h$o=r(OLe," (XLM-RoBERTa-XL model)"),OLe.forEach(t),p$o=i(N),db=n(N,"LI",{});var VLe=s(db);tfe=n(VLe,"STRONG",{});var Mnt=s(tfe);u$o=r(Mnt,"xlnet"),Mnt.forEach(t),_$o=r(VLe," \u2014 "),oG=n(VLe,"A",{href:!0});var Ent=s(oG);b$o=r(Ent,"XLNetForSequenceClassification"),Ent.forEach(t),v$o=r(VLe," (XLNet model)"),VLe.forEach(t),F$o=i(N),cb=n(N,"LI",{});var XLe=s(cb);afe=n(XLe,"STRONG",{});var Cnt=s(afe);T$o=r(Cnt,"yoso"),Cnt.forEach(t),M$o=r(XLe," \u2014 "),rG=n(XLe,"A",{href:!0});var wnt=s(rG);E$o=r(wnt,"YosoForSequenceClassification"),wnt.forEach(t),C$o=r(XLe," (YOSO model)"),XLe.forEach(t),N.forEach(t),w$o=i(aa),fb=n(aa,"P",{});var zLe=s(fb);A$o=r(zLe,"The model is set in evaluation mode by default using "),nfe=n(zLe,"CODE",{});var Ant=s(nfe);y$o=r(Ant,"model.eval()"),Ant.forEach(t),L$o=r(zLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=n(zLe,"CODE",{});var ynt=s(sfe);x$o=r(ynt,"model.train()"),ynt.forEach(t),zLe.forEach(t),$$o=i(aa),T(mb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),fIe=i(f),Di=n(f,"H2",{class:!0});var pNe=s(Di);gb=n(pNe,"A",{id:!0,class:!0,href:!0});var Lnt=s(gb);lfe=n(Lnt,"SPAN",{});var xnt=s(lfe);T(KA.$$.fragment,xnt),xnt.forEach(t),Lnt.forEach(t),k$o=i(pNe),ife=n(pNe,"SPAN",{});var $nt=s(ife);S$o=r($nt,"AutoModelForMultipleChoice"),$nt.forEach(t),pNe.forEach(t),mIe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(ZA.$$.fragment,Qs),R$o=i(Qs),Gi=n(Qs,"P",{});var TK=s(Gi);B$o=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tG=n(TK,"A",{href:!0});var knt=s(tG);P$o=r(knt,"from_pretrained()"),knt.forEach(t),I$o=r(TK," class method or the "),aG=n(TK,"A",{href:!0});var Snt=s(aG);q$o=r(Snt,"from_config()"),Snt.forEach(t),N$o=r(TK,` class
method.`),TK.forEach(t),j$o=i(Qs),ey=n(Qs,"P",{});var uNe=s(ey);D$o=r(uNe,"This class cannot be instantiated directly using "),dfe=n(uNe,"CODE",{});var Rnt=s(dfe);G$o=r(Rnt,"__init__()"),Rnt.forEach(t),O$o=r(uNe," (throws an error)."),uNe.forEach(t),V$o=i(Qs),lt=n(Qs,"DIV",{class:!0});var f3=s(lt);T(oy.$$.fragment,f3),X$o=i(f3),cfe=n(f3,"P",{});var Bnt=s(cfe);z$o=r(Bnt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bnt.forEach(t),Q$o=i(f3),Oi=n(f3,"P",{});var MK=s(Oi);W$o=r(MK,`Note:
Loading a model from its configuration file does `),ffe=n(MK,"STRONG",{});var Pnt=s(ffe);H$o=r(Pnt,"not"),Pnt.forEach(t),U$o=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n(MK,"A",{href:!0});var Int=s(nG);J$o=r(Int,"from_pretrained()"),Int.forEach(t),Y$o=r(MK," to load the model weights."),MK.forEach(t),K$o=i(f3),T(hb.$$.fragment,f3),f3.forEach(t),Z$o=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(ry.$$.fragment,na),eko=i(na),mfe=n(na,"P",{});var qnt=s(mfe);oko=r(qnt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qnt.forEach(t),rko=i(na),Sa=n(na,"P",{});var m3=s(Sa);tko=r(m3,"The model class to instantiate is selected based on the "),gfe=n(m3,"CODE",{});var Nnt=s(gfe);ako=r(Nnt,"model_type"),Nnt.forEach(t),nko=r(m3,` property of the config object (either
passed as an argument or loaded from `),hfe=n(m3,"CODE",{});var jnt=s(hfe);sko=r(jnt,"pretrained_model_name_or_path"),jnt.forEach(t),lko=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(m3,"CODE",{});var Dnt=s(pfe);iko=r(Dnt,"pretrained_model_name_or_path"),Dnt.forEach(t),dko=r(m3,":"),m3.forEach(t),cko=i(na),Y=n(na,"UL",{});var K=s(Y);pb=n(K,"LI",{});var QLe=s(pb);ufe=n(QLe,"STRONG",{});var Gnt=s(ufe);fko=r(Gnt,"albert"),Gnt.forEach(t),mko=r(QLe," \u2014 "),sG=n(QLe,"A",{href:!0});var Ont=s(sG);gko=r(Ont,"AlbertForMultipleChoice"),Ont.forEach(t),hko=r(QLe," (ALBERT model)"),QLe.forEach(t),pko=i(K),ub=n(K,"LI",{});var WLe=s(ub);_fe=n(WLe,"STRONG",{});var Vnt=s(_fe);uko=r(Vnt,"bert"),Vnt.forEach(t),_ko=r(WLe," \u2014 "),lG=n(WLe,"A",{href:!0});var Xnt=s(lG);bko=r(Xnt,"BertForMultipleChoice"),Xnt.forEach(t),vko=r(WLe," (BERT model)"),WLe.forEach(t),Fko=i(K),_b=n(K,"LI",{});var HLe=s(_b);bfe=n(HLe,"STRONG",{});var znt=s(bfe);Tko=r(znt,"big_bird"),znt.forEach(t),Mko=r(HLe," \u2014 "),iG=n(HLe,"A",{href:!0});var Qnt=s(iG);Eko=r(Qnt,"BigBirdForMultipleChoice"),Qnt.forEach(t),Cko=r(HLe," (BigBird model)"),HLe.forEach(t),wko=i(K),bb=n(K,"LI",{});var ULe=s(bb);vfe=n(ULe,"STRONG",{});var Wnt=s(vfe);Ako=r(Wnt,"camembert"),Wnt.forEach(t),yko=r(ULe," \u2014 "),dG=n(ULe,"A",{href:!0});var Hnt=s(dG);Lko=r(Hnt,"CamembertForMultipleChoice"),Hnt.forEach(t),xko=r(ULe," (CamemBERT model)"),ULe.forEach(t),$ko=i(K),vb=n(K,"LI",{});var JLe=s(vb);Ffe=n(JLe,"STRONG",{});var Unt=s(Ffe);kko=r(Unt,"canine"),Unt.forEach(t),Sko=r(JLe," \u2014 "),cG=n(JLe,"A",{href:!0});var Jnt=s(cG);Rko=r(Jnt,"CanineForMultipleChoice"),Jnt.forEach(t),Bko=r(JLe," (Canine model)"),JLe.forEach(t),Pko=i(K),Fb=n(K,"LI",{});var YLe=s(Fb);Tfe=n(YLe,"STRONG",{});var Ynt=s(Tfe);Iko=r(Ynt,"convbert"),Ynt.forEach(t),qko=r(YLe," \u2014 "),fG=n(YLe,"A",{href:!0});var Knt=s(fG);Nko=r(Knt,"ConvBertForMultipleChoice"),Knt.forEach(t),jko=r(YLe," (ConvBERT model)"),YLe.forEach(t),Dko=i(K),Tb=n(K,"LI",{});var KLe=s(Tb);Mfe=n(KLe,"STRONG",{});var Znt=s(Mfe);Gko=r(Znt,"data2vec-text"),Znt.forEach(t),Oko=r(KLe," \u2014 "),mG=n(KLe,"A",{href:!0});var est=s(mG);Vko=r(est,"Data2VecTextForMultipleChoice"),est.forEach(t),Xko=r(KLe," (Data2VecText model)"),KLe.forEach(t),zko=i(K),Mb=n(K,"LI",{});var ZLe=s(Mb);Efe=n(ZLe,"STRONG",{});var ost=s(Efe);Qko=r(ost,"deberta-v2"),ost.forEach(t),Wko=r(ZLe," \u2014 "),gG=n(ZLe,"A",{href:!0});var rst=s(gG);Hko=r(rst,"DebertaV2ForMultipleChoice"),rst.forEach(t),Uko=r(ZLe," (DeBERTa-v2 model)"),ZLe.forEach(t),Jko=i(K),Eb=n(K,"LI",{});var e8e=s(Eb);Cfe=n(e8e,"STRONG",{});var tst=s(Cfe);Yko=r(tst,"distilbert"),tst.forEach(t),Kko=r(e8e," \u2014 "),hG=n(e8e,"A",{href:!0});var ast=s(hG);Zko=r(ast,"DistilBertForMultipleChoice"),ast.forEach(t),eSo=r(e8e," (DistilBERT model)"),e8e.forEach(t),oSo=i(K),Cb=n(K,"LI",{});var o8e=s(Cb);wfe=n(o8e,"STRONG",{});var nst=s(wfe);rSo=r(nst,"electra"),nst.forEach(t),tSo=r(o8e," \u2014 "),pG=n(o8e,"A",{href:!0});var sst=s(pG);aSo=r(sst,"ElectraForMultipleChoice"),sst.forEach(t),nSo=r(o8e," (ELECTRA model)"),o8e.forEach(t),sSo=i(K),wb=n(K,"LI",{});var r8e=s(wb);Afe=n(r8e,"STRONG",{});var lst=s(Afe);lSo=r(lst,"flaubert"),lst.forEach(t),iSo=r(r8e," \u2014 "),uG=n(r8e,"A",{href:!0});var ist=s(uG);dSo=r(ist,"FlaubertForMultipleChoice"),ist.forEach(t),cSo=r(r8e," (FlauBERT model)"),r8e.forEach(t),fSo=i(K),Ab=n(K,"LI",{});var t8e=s(Ab);yfe=n(t8e,"STRONG",{});var dst=s(yfe);mSo=r(dst,"fnet"),dst.forEach(t),gSo=r(t8e," \u2014 "),_G=n(t8e,"A",{href:!0});var cst=s(_G);hSo=r(cst,"FNetForMultipleChoice"),cst.forEach(t),pSo=r(t8e," (FNet model)"),t8e.forEach(t),uSo=i(K),yb=n(K,"LI",{});var a8e=s(yb);Lfe=n(a8e,"STRONG",{});var fst=s(Lfe);_So=r(fst,"funnel"),fst.forEach(t),bSo=r(a8e," \u2014 "),bG=n(a8e,"A",{href:!0});var mst=s(bG);vSo=r(mst,"FunnelForMultipleChoice"),mst.forEach(t),FSo=r(a8e," (Funnel Transformer model)"),a8e.forEach(t),TSo=i(K),Lb=n(K,"LI",{});var n8e=s(Lb);xfe=n(n8e,"STRONG",{});var gst=s(xfe);MSo=r(gst,"ibert"),gst.forEach(t),ESo=r(n8e," \u2014 "),vG=n(n8e,"A",{href:!0});var hst=s(vG);CSo=r(hst,"IBertForMultipleChoice"),hst.forEach(t),wSo=r(n8e," (I-BERT model)"),n8e.forEach(t),ASo=i(K),xb=n(K,"LI",{});var s8e=s(xb);$fe=n(s8e,"STRONG",{});var pst=s($fe);ySo=r(pst,"longformer"),pst.forEach(t),LSo=r(s8e," \u2014 "),FG=n(s8e,"A",{href:!0});var ust=s(FG);xSo=r(ust,"LongformerForMultipleChoice"),ust.forEach(t),$So=r(s8e," (Longformer model)"),s8e.forEach(t),kSo=i(K),$b=n(K,"LI",{});var l8e=s($b);kfe=n(l8e,"STRONG",{});var _st=s(kfe);SSo=r(_st,"megatron-bert"),_st.forEach(t),RSo=r(l8e," \u2014 "),TG=n(l8e,"A",{href:!0});var bst=s(TG);BSo=r(bst,"MegatronBertForMultipleChoice"),bst.forEach(t),PSo=r(l8e," (MegatronBert model)"),l8e.forEach(t),ISo=i(K),kb=n(K,"LI",{});var i8e=s(kb);Sfe=n(i8e,"STRONG",{});var vst=s(Sfe);qSo=r(vst,"mobilebert"),vst.forEach(t),NSo=r(i8e," \u2014 "),MG=n(i8e,"A",{href:!0});var Fst=s(MG);jSo=r(Fst,"MobileBertForMultipleChoice"),Fst.forEach(t),DSo=r(i8e," (MobileBERT model)"),i8e.forEach(t),GSo=i(K),Sb=n(K,"LI",{});var d8e=s(Sb);Rfe=n(d8e,"STRONG",{});var Tst=s(Rfe);OSo=r(Tst,"mpnet"),Tst.forEach(t),VSo=r(d8e," \u2014 "),EG=n(d8e,"A",{href:!0});var Mst=s(EG);XSo=r(Mst,"MPNetForMultipleChoice"),Mst.forEach(t),zSo=r(d8e," (MPNet model)"),d8e.forEach(t),QSo=i(K),Rb=n(K,"LI",{});var c8e=s(Rb);Bfe=n(c8e,"STRONG",{});var Est=s(Bfe);WSo=r(Est,"nystromformer"),Est.forEach(t),HSo=r(c8e," \u2014 "),CG=n(c8e,"A",{href:!0});var Cst=s(CG);USo=r(Cst,"NystromformerForMultipleChoice"),Cst.forEach(t),JSo=r(c8e," (Nystromformer model)"),c8e.forEach(t),YSo=i(K),Bb=n(K,"LI",{});var f8e=s(Bb);Pfe=n(f8e,"STRONG",{});var wst=s(Pfe);KSo=r(wst,"qdqbert"),wst.forEach(t),ZSo=r(f8e," \u2014 "),wG=n(f8e,"A",{href:!0});var Ast=s(wG);eRo=r(Ast,"QDQBertForMultipleChoice"),Ast.forEach(t),oRo=r(f8e," (QDQBert model)"),f8e.forEach(t),rRo=i(K),Pb=n(K,"LI",{});var m8e=s(Pb);Ife=n(m8e,"STRONG",{});var yst=s(Ife);tRo=r(yst,"rembert"),yst.forEach(t),aRo=r(m8e," \u2014 "),AG=n(m8e,"A",{href:!0});var Lst=s(AG);nRo=r(Lst,"RemBertForMultipleChoice"),Lst.forEach(t),sRo=r(m8e," (RemBERT model)"),m8e.forEach(t),lRo=i(K),Ib=n(K,"LI",{});var g8e=s(Ib);qfe=n(g8e,"STRONG",{});var xst=s(qfe);iRo=r(xst,"roberta"),xst.forEach(t),dRo=r(g8e," \u2014 "),yG=n(g8e,"A",{href:!0});var $st=s(yG);cRo=r($st,"RobertaForMultipleChoice"),$st.forEach(t),fRo=r(g8e," (RoBERTa model)"),g8e.forEach(t),mRo=i(K),qb=n(K,"LI",{});var h8e=s(qb);Nfe=n(h8e,"STRONG",{});var kst=s(Nfe);gRo=r(kst,"roformer"),kst.forEach(t),hRo=r(h8e," \u2014 "),LG=n(h8e,"A",{href:!0});var Sst=s(LG);pRo=r(Sst,"RoFormerForMultipleChoice"),Sst.forEach(t),uRo=r(h8e," (RoFormer model)"),h8e.forEach(t),_Ro=i(K),Nb=n(K,"LI",{});var p8e=s(Nb);jfe=n(p8e,"STRONG",{});var Rst=s(jfe);bRo=r(Rst,"squeezebert"),Rst.forEach(t),vRo=r(p8e," \u2014 "),xG=n(p8e,"A",{href:!0});var Bst=s(xG);FRo=r(Bst,"SqueezeBertForMultipleChoice"),Bst.forEach(t),TRo=r(p8e," (SqueezeBERT model)"),p8e.forEach(t),MRo=i(K),jb=n(K,"LI",{});var u8e=s(jb);Dfe=n(u8e,"STRONG",{});var Pst=s(Dfe);ERo=r(Pst,"xlm"),Pst.forEach(t),CRo=r(u8e," \u2014 "),$G=n(u8e,"A",{href:!0});var Ist=s($G);wRo=r(Ist,"XLMForMultipleChoice"),Ist.forEach(t),ARo=r(u8e," (XLM model)"),u8e.forEach(t),yRo=i(K),Db=n(K,"LI",{});var _8e=s(Db);Gfe=n(_8e,"STRONG",{});var qst=s(Gfe);LRo=r(qst,"xlm-roberta"),qst.forEach(t),xRo=r(_8e," \u2014 "),kG=n(_8e,"A",{href:!0});var Nst=s(kG);$Ro=r(Nst,"XLMRobertaForMultipleChoice"),Nst.forEach(t),kRo=r(_8e," (XLM-RoBERTa model)"),_8e.forEach(t),SRo=i(K),Gb=n(K,"LI",{});var b8e=s(Gb);Ofe=n(b8e,"STRONG",{});var jst=s(Ofe);RRo=r(jst,"xlm-roberta-xl"),jst.forEach(t),BRo=r(b8e," \u2014 "),SG=n(b8e,"A",{href:!0});var Dst=s(SG);PRo=r(Dst,"XLMRobertaXLForMultipleChoice"),Dst.forEach(t),IRo=r(b8e," (XLM-RoBERTa-XL model)"),b8e.forEach(t),qRo=i(K),Ob=n(K,"LI",{});var v8e=s(Ob);Vfe=n(v8e,"STRONG",{});var Gst=s(Vfe);NRo=r(Gst,"xlnet"),Gst.forEach(t),jRo=r(v8e," \u2014 "),RG=n(v8e,"A",{href:!0});var Ost=s(RG);DRo=r(Ost,"XLNetForMultipleChoice"),Ost.forEach(t),GRo=r(v8e," (XLNet model)"),v8e.forEach(t),ORo=i(K),Vb=n(K,"LI",{});var F8e=s(Vb);Xfe=n(F8e,"STRONG",{});var Vst=s(Xfe);VRo=r(Vst,"yoso"),Vst.forEach(t),XRo=r(F8e," \u2014 "),BG=n(F8e,"A",{href:!0});var Xst=s(BG);zRo=r(Xst,"YosoForMultipleChoice"),Xst.forEach(t),QRo=r(F8e," (YOSO model)"),F8e.forEach(t),K.forEach(t),WRo=i(na),Xb=n(na,"P",{});var T8e=s(Xb);HRo=r(T8e,"The model is set in evaluation mode by default using "),zfe=n(T8e,"CODE",{});var zst=s(zfe);URo=r(zst,"model.eval()"),zst.forEach(t),JRo=r(T8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=n(T8e,"CODE",{});var Qst=s(Qfe);YRo=r(Qst,"model.train()"),Qst.forEach(t),T8e.forEach(t),KRo=i(na),T(zb.$$.fragment,na),na.forEach(t),Qs.forEach(t),gIe=i(f),Vi=n(f,"H2",{class:!0});var _Ne=s(Vi);Qb=n(_Ne,"A",{id:!0,class:!0,href:!0});var Wst=s(Qb);Wfe=n(Wst,"SPAN",{});var Hst=s(Wfe);T(ty.$$.fragment,Hst),Hst.forEach(t),Wst.forEach(t),ZRo=i(_Ne),Hfe=n(_Ne,"SPAN",{});var Ust=s(Hfe);eBo=r(Ust,"AutoModelForNextSentencePrediction"),Ust.forEach(t),_Ne.forEach(t),hIe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(ay.$$.fragment,Ws),oBo=i(Ws),Xi=n(Ws,"P",{});var EK=s(Xi);rBo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PG=n(EK,"A",{href:!0});var Jst=s(PG);tBo=r(Jst,"from_pretrained()"),Jst.forEach(t),aBo=r(EK," class method or the "),IG=n(EK,"A",{href:!0});var Yst=s(IG);nBo=r(Yst,"from_config()"),Yst.forEach(t),sBo=r(EK,` class
method.`),EK.forEach(t),lBo=i(Ws),ny=n(Ws,"P",{});var bNe=s(ny);iBo=r(bNe,"This class cannot be instantiated directly using "),Ufe=n(bNe,"CODE",{});var Kst=s(Ufe);dBo=r(Kst,"__init__()"),Kst.forEach(t),cBo=r(bNe," (throws an error)."),bNe.forEach(t),fBo=i(Ws),it=n(Ws,"DIV",{class:!0});var g3=s(it);T(sy.$$.fragment,g3),mBo=i(g3),Jfe=n(g3,"P",{});var Zst=s(Jfe);gBo=r(Zst,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Zst.forEach(t),hBo=i(g3),zi=n(g3,"P",{});var CK=s(zi);pBo=r(CK,`Note:
Loading a model from its configuration file does `),Yfe=n(CK,"STRONG",{});var elt=s(Yfe);uBo=r(elt,"not"),elt.forEach(t),_Bo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=n(CK,"A",{href:!0});var olt=s(qG);bBo=r(olt,"from_pretrained()"),olt.forEach(t),vBo=r(CK," to load the model weights."),CK.forEach(t),FBo=i(g3),T(Wb.$$.fragment,g3),g3.forEach(t),TBo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(ly.$$.fragment,sa),MBo=i(sa),Kfe=n(sa,"P",{});var rlt=s(Kfe);EBo=r(rlt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rlt.forEach(t),CBo=i(sa),Ra=n(sa,"P",{});var h3=s(Ra);wBo=r(h3,"The model class to instantiate is selected based on the "),Zfe=n(h3,"CODE",{});var tlt=s(Zfe);ABo=r(tlt,"model_type"),tlt.forEach(t),yBo=r(h3,` property of the config object (either
passed as an argument or loaded from `),eme=n(h3,"CODE",{});var alt=s(eme);LBo=r(alt,"pretrained_model_name_or_path"),alt.forEach(t),xBo=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=n(h3,"CODE",{});var nlt=s(ome);$Bo=r(nlt,"pretrained_model_name_or_path"),nlt.forEach(t),kBo=r(h3,":"),h3.forEach(t),SBo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);Hb=n(Hs,"LI",{});var M8e=s(Hb);rme=n(M8e,"STRONG",{});var slt=s(rme);RBo=r(slt,"bert"),slt.forEach(t),BBo=r(M8e," \u2014 "),NG=n(M8e,"A",{href:!0});var llt=s(NG);PBo=r(llt,"BertForNextSentencePrediction"),llt.forEach(t),IBo=r(M8e," (BERT model)"),M8e.forEach(t),qBo=i(Hs),Ub=n(Hs,"LI",{});var E8e=s(Ub);tme=n(E8e,"STRONG",{});var ilt=s(tme);NBo=r(ilt,"fnet"),ilt.forEach(t),jBo=r(E8e," \u2014 "),jG=n(E8e,"A",{href:!0});var dlt=s(jG);DBo=r(dlt,"FNetForNextSentencePrediction"),dlt.forEach(t),GBo=r(E8e," (FNet model)"),E8e.forEach(t),OBo=i(Hs),Jb=n(Hs,"LI",{});var C8e=s(Jb);ame=n(C8e,"STRONG",{});var clt=s(ame);VBo=r(clt,"megatron-bert"),clt.forEach(t),XBo=r(C8e," \u2014 "),DG=n(C8e,"A",{href:!0});var flt=s(DG);zBo=r(flt,"MegatronBertForNextSentencePrediction"),flt.forEach(t),QBo=r(C8e," (MegatronBert model)"),C8e.forEach(t),WBo=i(Hs),Yb=n(Hs,"LI",{});var w8e=s(Yb);nme=n(w8e,"STRONG",{});var mlt=s(nme);HBo=r(mlt,"mobilebert"),mlt.forEach(t),UBo=r(w8e," \u2014 "),GG=n(w8e,"A",{href:!0});var glt=s(GG);JBo=r(glt,"MobileBertForNextSentencePrediction"),glt.forEach(t),YBo=r(w8e," (MobileBERT model)"),w8e.forEach(t),KBo=i(Hs),Kb=n(Hs,"LI",{});var A8e=s(Kb);sme=n(A8e,"STRONG",{});var hlt=s(sme);ZBo=r(hlt,"qdqbert"),hlt.forEach(t),ePo=r(A8e," \u2014 "),OG=n(A8e,"A",{href:!0});var plt=s(OG);oPo=r(plt,"QDQBertForNextSentencePrediction"),plt.forEach(t),rPo=r(A8e," (QDQBert model)"),A8e.forEach(t),Hs.forEach(t),tPo=i(sa),Zb=n(sa,"P",{});var y8e=s(Zb);aPo=r(y8e,"The model is set in evaluation mode by default using "),lme=n(y8e,"CODE",{});var ult=s(lme);nPo=r(ult,"model.eval()"),ult.forEach(t),sPo=r(y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ime=n(y8e,"CODE",{});var _lt=s(ime);lPo=r(_lt,"model.train()"),_lt.forEach(t),y8e.forEach(t),iPo=i(sa),T(e2.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),pIe=i(f),Qi=n(f,"H2",{class:!0});var vNe=s(Qi);o2=n(vNe,"A",{id:!0,class:!0,href:!0});var blt=s(o2);dme=n(blt,"SPAN",{});var vlt=s(dme);T(iy.$$.fragment,vlt),vlt.forEach(t),blt.forEach(t),dPo=i(vNe),cme=n(vNe,"SPAN",{});var Flt=s(cme);cPo=r(Flt,"AutoModelForTokenClassification"),Flt.forEach(t),vNe.forEach(t),uIe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(dy.$$.fragment,Us),fPo=i(Us),Wi=n(Us,"P",{});var wK=s(Wi);mPo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VG=n(wK,"A",{href:!0});var Tlt=s(VG);gPo=r(Tlt,"from_pretrained()"),Tlt.forEach(t),hPo=r(wK," class method or the "),XG=n(wK,"A",{href:!0});var Mlt=s(XG);pPo=r(Mlt,"from_config()"),Mlt.forEach(t),uPo=r(wK,` class
method.`),wK.forEach(t),_Po=i(Us),cy=n(Us,"P",{});var FNe=s(cy);bPo=r(FNe,"This class cannot be instantiated directly using "),fme=n(FNe,"CODE",{});var Elt=s(fme);vPo=r(Elt,"__init__()"),Elt.forEach(t),FPo=r(FNe," (throws an error)."),FNe.forEach(t),TPo=i(Us),dt=n(Us,"DIV",{class:!0});var p3=s(dt);T(fy.$$.fragment,p3),MPo=i(p3),mme=n(p3,"P",{});var Clt=s(mme);EPo=r(Clt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Clt.forEach(t),CPo=i(p3),Hi=n(p3,"P",{});var AK=s(Hi);wPo=r(AK,`Note:
Loading a model from its configuration file does `),gme=n(AK,"STRONG",{});var wlt=s(gme);APo=r(wlt,"not"),wlt.forEach(t),yPo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=n(AK,"A",{href:!0});var Alt=s(zG);LPo=r(Alt,"from_pretrained()"),Alt.forEach(t),xPo=r(AK," to load the model weights."),AK.forEach(t),$Po=i(p3),T(r2.$$.fragment,p3),p3.forEach(t),kPo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(my.$$.fragment,la),SPo=i(la),hme=n(la,"P",{});var ylt=s(hme);RPo=r(ylt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ylt.forEach(t),BPo=i(la),Ba=n(la,"P",{});var u3=s(Ba);PPo=r(u3,"The model class to instantiate is selected based on the "),pme=n(u3,"CODE",{});var Llt=s(pme);IPo=r(Llt,"model_type"),Llt.forEach(t),qPo=r(u3,` property of the config object (either
passed as an argument or loaded from `),ume=n(u3,"CODE",{});var xlt=s(ume);NPo=r(xlt,"pretrained_model_name_or_path"),xlt.forEach(t),jPo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_me=n(u3,"CODE",{});var $lt=s(_me);DPo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),GPo=r(u3,":"),u3.forEach(t),OPo=i(la),W=n(la,"UL",{});var J=s(W);t2=n(J,"LI",{});var L8e=s(t2);bme=n(L8e,"STRONG",{});var klt=s(bme);VPo=r(klt,"albert"),klt.forEach(t),XPo=r(L8e," \u2014 "),QG=n(L8e,"A",{href:!0});var Slt=s(QG);zPo=r(Slt,"AlbertForTokenClassification"),Slt.forEach(t),QPo=r(L8e," (ALBERT model)"),L8e.forEach(t),WPo=i(J),a2=n(J,"LI",{});var x8e=s(a2);vme=n(x8e,"STRONG",{});var Rlt=s(vme);HPo=r(Rlt,"bert"),Rlt.forEach(t),UPo=r(x8e," \u2014 "),WG=n(x8e,"A",{href:!0});var Blt=s(WG);JPo=r(Blt,"BertForTokenClassification"),Blt.forEach(t),YPo=r(x8e," (BERT model)"),x8e.forEach(t),KPo=i(J),n2=n(J,"LI",{});var $8e=s(n2);Fme=n($8e,"STRONG",{});var Plt=s(Fme);ZPo=r(Plt,"big_bird"),Plt.forEach(t),eIo=r($8e," \u2014 "),HG=n($8e,"A",{href:!0});var Ilt=s(HG);oIo=r(Ilt,"BigBirdForTokenClassification"),Ilt.forEach(t),rIo=r($8e," (BigBird model)"),$8e.forEach(t),tIo=i(J),s2=n(J,"LI",{});var k8e=s(s2);Tme=n(k8e,"STRONG",{});var qlt=s(Tme);aIo=r(qlt,"camembert"),qlt.forEach(t),nIo=r(k8e," \u2014 "),UG=n(k8e,"A",{href:!0});var Nlt=s(UG);sIo=r(Nlt,"CamembertForTokenClassification"),Nlt.forEach(t),lIo=r(k8e," (CamemBERT model)"),k8e.forEach(t),iIo=i(J),l2=n(J,"LI",{});var S8e=s(l2);Mme=n(S8e,"STRONG",{});var jlt=s(Mme);dIo=r(jlt,"canine"),jlt.forEach(t),cIo=r(S8e," \u2014 "),JG=n(S8e,"A",{href:!0});var Dlt=s(JG);fIo=r(Dlt,"CanineForTokenClassification"),Dlt.forEach(t),mIo=r(S8e," (Canine model)"),S8e.forEach(t),gIo=i(J),i2=n(J,"LI",{});var R8e=s(i2);Eme=n(R8e,"STRONG",{});var Glt=s(Eme);hIo=r(Glt,"convbert"),Glt.forEach(t),pIo=r(R8e," \u2014 "),YG=n(R8e,"A",{href:!0});var Olt=s(YG);uIo=r(Olt,"ConvBertForTokenClassification"),Olt.forEach(t),_Io=r(R8e," (ConvBERT model)"),R8e.forEach(t),bIo=i(J),d2=n(J,"LI",{});var B8e=s(d2);Cme=n(B8e,"STRONG",{});var Vlt=s(Cme);vIo=r(Vlt,"data2vec-text"),Vlt.forEach(t),FIo=r(B8e," \u2014 "),KG=n(B8e,"A",{href:!0});var Xlt=s(KG);TIo=r(Xlt,"Data2VecTextForTokenClassification"),Xlt.forEach(t),MIo=r(B8e," (Data2VecText model)"),B8e.forEach(t),EIo=i(J),c2=n(J,"LI",{});var P8e=s(c2);wme=n(P8e,"STRONG",{});var zlt=s(wme);CIo=r(zlt,"deberta"),zlt.forEach(t),wIo=r(P8e," \u2014 "),ZG=n(P8e,"A",{href:!0});var Qlt=s(ZG);AIo=r(Qlt,"DebertaForTokenClassification"),Qlt.forEach(t),yIo=r(P8e," (DeBERTa model)"),P8e.forEach(t),LIo=i(J),f2=n(J,"LI",{});var I8e=s(f2);Ame=n(I8e,"STRONG",{});var Wlt=s(Ame);xIo=r(Wlt,"deberta-v2"),Wlt.forEach(t),$Io=r(I8e," \u2014 "),eO=n(I8e,"A",{href:!0});var Hlt=s(eO);kIo=r(Hlt,"DebertaV2ForTokenClassification"),Hlt.forEach(t),SIo=r(I8e," (DeBERTa-v2 model)"),I8e.forEach(t),RIo=i(J),m2=n(J,"LI",{});var q8e=s(m2);yme=n(q8e,"STRONG",{});var Ult=s(yme);BIo=r(Ult,"distilbert"),Ult.forEach(t),PIo=r(q8e," \u2014 "),oO=n(q8e,"A",{href:!0});var Jlt=s(oO);IIo=r(Jlt,"DistilBertForTokenClassification"),Jlt.forEach(t),qIo=r(q8e," (DistilBERT model)"),q8e.forEach(t),NIo=i(J),g2=n(J,"LI",{});var N8e=s(g2);Lme=n(N8e,"STRONG",{});var Ylt=s(Lme);jIo=r(Ylt,"electra"),Ylt.forEach(t),DIo=r(N8e," \u2014 "),rO=n(N8e,"A",{href:!0});var Klt=s(rO);GIo=r(Klt,"ElectraForTokenClassification"),Klt.forEach(t),OIo=r(N8e," (ELECTRA model)"),N8e.forEach(t),VIo=i(J),h2=n(J,"LI",{});var j8e=s(h2);xme=n(j8e,"STRONG",{});var Zlt=s(xme);XIo=r(Zlt,"flaubert"),Zlt.forEach(t),zIo=r(j8e," \u2014 "),tO=n(j8e,"A",{href:!0});var eit=s(tO);QIo=r(eit,"FlaubertForTokenClassification"),eit.forEach(t),WIo=r(j8e," (FlauBERT model)"),j8e.forEach(t),HIo=i(J),p2=n(J,"LI",{});var D8e=s(p2);$me=n(D8e,"STRONG",{});var oit=s($me);UIo=r(oit,"fnet"),oit.forEach(t),JIo=r(D8e," \u2014 "),aO=n(D8e,"A",{href:!0});var rit=s(aO);YIo=r(rit,"FNetForTokenClassification"),rit.forEach(t),KIo=r(D8e," (FNet model)"),D8e.forEach(t),ZIo=i(J),u2=n(J,"LI",{});var G8e=s(u2);kme=n(G8e,"STRONG",{});var tit=s(kme);eqo=r(tit,"funnel"),tit.forEach(t),oqo=r(G8e," \u2014 "),nO=n(G8e,"A",{href:!0});var ait=s(nO);rqo=r(ait,"FunnelForTokenClassification"),ait.forEach(t),tqo=r(G8e," (Funnel Transformer model)"),G8e.forEach(t),aqo=i(J),_2=n(J,"LI",{});var O8e=s(_2);Sme=n(O8e,"STRONG",{});var nit=s(Sme);nqo=r(nit,"gpt2"),nit.forEach(t),sqo=r(O8e," \u2014 "),sO=n(O8e,"A",{href:!0});var sit=s(sO);lqo=r(sit,"GPT2ForTokenClassification"),sit.forEach(t),iqo=r(O8e," (OpenAI GPT-2 model)"),O8e.forEach(t),dqo=i(J),b2=n(J,"LI",{});var V8e=s(b2);Rme=n(V8e,"STRONG",{});var lit=s(Rme);cqo=r(lit,"ibert"),lit.forEach(t),fqo=r(V8e," \u2014 "),lO=n(V8e,"A",{href:!0});var iit=s(lO);mqo=r(iit,"IBertForTokenClassification"),iit.forEach(t),gqo=r(V8e," (I-BERT model)"),V8e.forEach(t),hqo=i(J),v2=n(J,"LI",{});var X8e=s(v2);Bme=n(X8e,"STRONG",{});var dit=s(Bme);pqo=r(dit,"layoutlm"),dit.forEach(t),uqo=r(X8e," \u2014 "),iO=n(X8e,"A",{href:!0});var cit=s(iO);_qo=r(cit,"LayoutLMForTokenClassification"),cit.forEach(t),bqo=r(X8e," (LayoutLM model)"),X8e.forEach(t),vqo=i(J),F2=n(J,"LI",{});var z8e=s(F2);Pme=n(z8e,"STRONG",{});var fit=s(Pme);Fqo=r(fit,"layoutlmv2"),fit.forEach(t),Tqo=r(z8e," \u2014 "),dO=n(z8e,"A",{href:!0});var mit=s(dO);Mqo=r(mit,"LayoutLMv2ForTokenClassification"),mit.forEach(t),Eqo=r(z8e," (LayoutLMv2 model)"),z8e.forEach(t),Cqo=i(J),T2=n(J,"LI",{});var Q8e=s(T2);Ime=n(Q8e,"STRONG",{});var git=s(Ime);wqo=r(git,"layoutlmv3"),git.forEach(t),Aqo=r(Q8e," \u2014 "),cO=n(Q8e,"A",{href:!0});var hit=s(cO);yqo=r(hit,"LayoutLMv3ForTokenClassification"),hit.forEach(t),Lqo=r(Q8e," (LayoutLMv3 model)"),Q8e.forEach(t),xqo=i(J),M2=n(J,"LI",{});var W8e=s(M2);qme=n(W8e,"STRONG",{});var pit=s(qme);$qo=r(pit,"longformer"),pit.forEach(t),kqo=r(W8e," \u2014 "),fO=n(W8e,"A",{href:!0});var uit=s(fO);Sqo=r(uit,"LongformerForTokenClassification"),uit.forEach(t),Rqo=r(W8e," (Longformer model)"),W8e.forEach(t),Bqo=i(J),E2=n(J,"LI",{});var H8e=s(E2);Nme=n(H8e,"STRONG",{});var _it=s(Nme);Pqo=r(_it,"megatron-bert"),_it.forEach(t),Iqo=r(H8e," \u2014 "),mO=n(H8e,"A",{href:!0});var bit=s(mO);qqo=r(bit,"MegatronBertForTokenClassification"),bit.forEach(t),Nqo=r(H8e," (MegatronBert model)"),H8e.forEach(t),jqo=i(J),C2=n(J,"LI",{});var U8e=s(C2);jme=n(U8e,"STRONG",{});var vit=s(jme);Dqo=r(vit,"mobilebert"),vit.forEach(t),Gqo=r(U8e," \u2014 "),gO=n(U8e,"A",{href:!0});var Fit=s(gO);Oqo=r(Fit,"MobileBertForTokenClassification"),Fit.forEach(t),Vqo=r(U8e," (MobileBERT model)"),U8e.forEach(t),Xqo=i(J),w2=n(J,"LI",{});var J8e=s(w2);Dme=n(J8e,"STRONG",{});var Tit=s(Dme);zqo=r(Tit,"mpnet"),Tit.forEach(t),Qqo=r(J8e," \u2014 "),hO=n(J8e,"A",{href:!0});var Mit=s(hO);Wqo=r(Mit,"MPNetForTokenClassification"),Mit.forEach(t),Hqo=r(J8e," (MPNet model)"),J8e.forEach(t),Uqo=i(J),A2=n(J,"LI",{});var Y8e=s(A2);Gme=n(Y8e,"STRONG",{});var Eit=s(Gme);Jqo=r(Eit,"nystromformer"),Eit.forEach(t),Yqo=r(Y8e," \u2014 "),pO=n(Y8e,"A",{href:!0});var Cit=s(pO);Kqo=r(Cit,"NystromformerForTokenClassification"),Cit.forEach(t),Zqo=r(Y8e," (Nystromformer model)"),Y8e.forEach(t),eNo=i(J),y2=n(J,"LI",{});var K8e=s(y2);Ome=n(K8e,"STRONG",{});var wit=s(Ome);oNo=r(wit,"qdqbert"),wit.forEach(t),rNo=r(K8e," \u2014 "),uO=n(K8e,"A",{href:!0});var Ait=s(uO);tNo=r(Ait,"QDQBertForTokenClassification"),Ait.forEach(t),aNo=r(K8e," (QDQBert model)"),K8e.forEach(t),nNo=i(J),L2=n(J,"LI",{});var Z8e=s(L2);Vme=n(Z8e,"STRONG",{});var yit=s(Vme);sNo=r(yit,"rembert"),yit.forEach(t),lNo=r(Z8e," \u2014 "),_O=n(Z8e,"A",{href:!0});var Lit=s(_O);iNo=r(Lit,"RemBertForTokenClassification"),Lit.forEach(t),dNo=r(Z8e," (RemBERT model)"),Z8e.forEach(t),cNo=i(J),x2=n(J,"LI",{});var exe=s(x2);Xme=n(exe,"STRONG",{});var xit=s(Xme);fNo=r(xit,"roberta"),xit.forEach(t),mNo=r(exe," \u2014 "),bO=n(exe,"A",{href:!0});var $it=s(bO);gNo=r($it,"RobertaForTokenClassification"),$it.forEach(t),hNo=r(exe," (RoBERTa model)"),exe.forEach(t),pNo=i(J),$2=n(J,"LI",{});var oxe=s($2);zme=n(oxe,"STRONG",{});var kit=s(zme);uNo=r(kit,"roformer"),kit.forEach(t),_No=r(oxe," \u2014 "),vO=n(oxe,"A",{href:!0});var Sit=s(vO);bNo=r(Sit,"RoFormerForTokenClassification"),Sit.forEach(t),vNo=r(oxe," (RoFormer model)"),oxe.forEach(t),FNo=i(J),k2=n(J,"LI",{});var rxe=s(k2);Qme=n(rxe,"STRONG",{});var Rit=s(Qme);TNo=r(Rit,"squeezebert"),Rit.forEach(t),MNo=r(rxe," \u2014 "),FO=n(rxe,"A",{href:!0});var Bit=s(FO);ENo=r(Bit,"SqueezeBertForTokenClassification"),Bit.forEach(t),CNo=r(rxe," (SqueezeBERT model)"),rxe.forEach(t),wNo=i(J),S2=n(J,"LI",{});var txe=s(S2);Wme=n(txe,"STRONG",{});var Pit=s(Wme);ANo=r(Pit,"xlm"),Pit.forEach(t),yNo=r(txe," \u2014 "),TO=n(txe,"A",{href:!0});var Iit=s(TO);LNo=r(Iit,"XLMForTokenClassification"),Iit.forEach(t),xNo=r(txe," (XLM model)"),txe.forEach(t),$No=i(J),R2=n(J,"LI",{});var axe=s(R2);Hme=n(axe,"STRONG",{});var qit=s(Hme);kNo=r(qit,"xlm-roberta"),qit.forEach(t),SNo=r(axe," \u2014 "),MO=n(axe,"A",{href:!0});var Nit=s(MO);RNo=r(Nit,"XLMRobertaForTokenClassification"),Nit.forEach(t),BNo=r(axe," (XLM-RoBERTa model)"),axe.forEach(t),PNo=i(J),B2=n(J,"LI",{});var nxe=s(B2);Ume=n(nxe,"STRONG",{});var jit=s(Ume);INo=r(jit,"xlm-roberta-xl"),jit.forEach(t),qNo=r(nxe," \u2014 "),EO=n(nxe,"A",{href:!0});var Dit=s(EO);NNo=r(Dit,"XLMRobertaXLForTokenClassification"),Dit.forEach(t),jNo=r(nxe," (XLM-RoBERTa-XL model)"),nxe.forEach(t),DNo=i(J),P2=n(J,"LI",{});var sxe=s(P2);Jme=n(sxe,"STRONG",{});var Git=s(Jme);GNo=r(Git,"xlnet"),Git.forEach(t),ONo=r(sxe," \u2014 "),CO=n(sxe,"A",{href:!0});var Oit=s(CO);VNo=r(Oit,"XLNetForTokenClassification"),Oit.forEach(t),XNo=r(sxe," (XLNet model)"),sxe.forEach(t),zNo=i(J),I2=n(J,"LI",{});var lxe=s(I2);Yme=n(lxe,"STRONG",{});var Vit=s(Yme);QNo=r(Vit,"yoso"),Vit.forEach(t),WNo=r(lxe," \u2014 "),wO=n(lxe,"A",{href:!0});var Xit=s(wO);HNo=r(Xit,"YosoForTokenClassification"),Xit.forEach(t),UNo=r(lxe," (YOSO model)"),lxe.forEach(t),J.forEach(t),JNo=i(la),q2=n(la,"P",{});var ixe=s(q2);YNo=r(ixe,"The model is set in evaluation mode by default using "),Kme=n(ixe,"CODE",{});var zit=s(Kme);KNo=r(zit,"model.eval()"),zit.forEach(t),ZNo=r(ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=n(ixe,"CODE",{});var Qit=s(Zme);ejo=r(Qit,"model.train()"),Qit.forEach(t),ixe.forEach(t),ojo=i(la),T(N2.$$.fragment,la),la.forEach(t),Us.forEach(t),_Ie=i(f),Ui=n(f,"H2",{class:!0});var TNe=s(Ui);j2=n(TNe,"A",{id:!0,class:!0,href:!0});var Wit=s(j2);ege=n(Wit,"SPAN",{});var Hit=s(ege);T(gy.$$.fragment,Hit),Hit.forEach(t),Wit.forEach(t),rjo=i(TNe),oge=n(TNe,"SPAN",{});var Uit=s(oge);tjo=r(Uit,"AutoModelForQuestionAnswering"),Uit.forEach(t),TNe.forEach(t),bIe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(hy.$$.fragment,Js),ajo=i(Js),Ji=n(Js,"P",{});var yK=s(Ji);njo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AO=n(yK,"A",{href:!0});var Jit=s(AO);sjo=r(Jit,"from_pretrained()"),Jit.forEach(t),ljo=r(yK," class method or the "),yO=n(yK,"A",{href:!0});var Yit=s(yO);ijo=r(Yit,"from_config()"),Yit.forEach(t),djo=r(yK,` class
method.`),yK.forEach(t),cjo=i(Js),py=n(Js,"P",{});var MNe=s(py);fjo=r(MNe,"This class cannot be instantiated directly using "),rge=n(MNe,"CODE",{});var Kit=s(rge);mjo=r(Kit,"__init__()"),Kit.forEach(t),gjo=r(MNe," (throws an error)."),MNe.forEach(t),hjo=i(Js),ct=n(Js,"DIV",{class:!0});var _3=s(ct);T(uy.$$.fragment,_3),pjo=i(_3),tge=n(_3,"P",{});var Zit=s(tge);ujo=r(Zit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zit.forEach(t),_jo=i(_3),Yi=n(_3,"P",{});var LK=s(Yi);bjo=r(LK,`Note:
Loading a model from its configuration file does `),age=n(LK,"STRONG",{});var edt=s(age);vjo=r(edt,"not"),edt.forEach(t),Fjo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=n(LK,"A",{href:!0});var odt=s(LO);Tjo=r(odt,"from_pretrained()"),odt.forEach(t),Mjo=r(LK," to load the model weights."),LK.forEach(t),Ejo=i(_3),T(D2.$$.fragment,_3),_3.forEach(t),Cjo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(_y.$$.fragment,ia),wjo=i(ia),nge=n(ia,"P",{});var rdt=s(nge);Ajo=r(rdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rdt.forEach(t),yjo=i(ia),Pa=n(ia,"P",{});var b3=s(Pa);Ljo=r(b3,"The model class to instantiate is selected based on the "),sge=n(b3,"CODE",{});var tdt=s(sge);xjo=r(tdt,"model_type"),tdt.forEach(t),$jo=r(b3,` property of the config object (either
passed as an argument or loaded from `),lge=n(b3,"CODE",{});var adt=s(lge);kjo=r(adt,"pretrained_model_name_or_path"),adt.forEach(t),Sjo=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(b3,"CODE",{});var ndt=s(ige);Rjo=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),Bjo=r(b3,":"),b3.forEach(t),Pjo=i(ia),G=n(ia,"UL",{});var V=s(G);G2=n(V,"LI",{});var dxe=s(G2);dge=n(dxe,"STRONG",{});var sdt=s(dge);Ijo=r(sdt,"albert"),sdt.forEach(t),qjo=r(dxe," \u2014 "),xO=n(dxe,"A",{href:!0});var ldt=s(xO);Njo=r(ldt,"AlbertForQuestionAnswering"),ldt.forEach(t),jjo=r(dxe," (ALBERT model)"),dxe.forEach(t),Djo=i(V),O2=n(V,"LI",{});var cxe=s(O2);cge=n(cxe,"STRONG",{});var idt=s(cge);Gjo=r(idt,"bart"),idt.forEach(t),Ojo=r(cxe," \u2014 "),$O=n(cxe,"A",{href:!0});var ddt=s($O);Vjo=r(ddt,"BartForQuestionAnswering"),ddt.forEach(t),Xjo=r(cxe," (BART model)"),cxe.forEach(t),zjo=i(V),V2=n(V,"LI",{});var fxe=s(V2);fge=n(fxe,"STRONG",{});var cdt=s(fge);Qjo=r(cdt,"bert"),cdt.forEach(t),Wjo=r(fxe," \u2014 "),kO=n(fxe,"A",{href:!0});var fdt=s(kO);Hjo=r(fdt,"BertForQuestionAnswering"),fdt.forEach(t),Ujo=r(fxe," (BERT model)"),fxe.forEach(t),Jjo=i(V),X2=n(V,"LI",{});var mxe=s(X2);mge=n(mxe,"STRONG",{});var mdt=s(mge);Yjo=r(mdt,"big_bird"),mdt.forEach(t),Kjo=r(mxe," \u2014 "),SO=n(mxe,"A",{href:!0});var gdt=s(SO);Zjo=r(gdt,"BigBirdForQuestionAnswering"),gdt.forEach(t),eDo=r(mxe," (BigBird model)"),mxe.forEach(t),oDo=i(V),z2=n(V,"LI",{});var gxe=s(z2);gge=n(gxe,"STRONG",{});var hdt=s(gge);rDo=r(hdt,"bigbird_pegasus"),hdt.forEach(t),tDo=r(gxe," \u2014 "),RO=n(gxe,"A",{href:!0});var pdt=s(RO);aDo=r(pdt,"BigBirdPegasusForQuestionAnswering"),pdt.forEach(t),nDo=r(gxe," (BigBirdPegasus model)"),gxe.forEach(t),sDo=i(V),Q2=n(V,"LI",{});var hxe=s(Q2);hge=n(hxe,"STRONG",{});var udt=s(hge);lDo=r(udt,"camembert"),udt.forEach(t),iDo=r(hxe," \u2014 "),BO=n(hxe,"A",{href:!0});var _dt=s(BO);dDo=r(_dt,"CamembertForQuestionAnswering"),_dt.forEach(t),cDo=r(hxe," (CamemBERT model)"),hxe.forEach(t),fDo=i(V),W2=n(V,"LI",{});var pxe=s(W2);pge=n(pxe,"STRONG",{});var bdt=s(pge);mDo=r(bdt,"canine"),bdt.forEach(t),gDo=r(pxe," \u2014 "),PO=n(pxe,"A",{href:!0});var vdt=s(PO);hDo=r(vdt,"CanineForQuestionAnswering"),vdt.forEach(t),pDo=r(pxe," (Canine model)"),pxe.forEach(t),uDo=i(V),H2=n(V,"LI",{});var uxe=s(H2);uge=n(uxe,"STRONG",{});var Fdt=s(uge);_Do=r(Fdt,"convbert"),Fdt.forEach(t),bDo=r(uxe," \u2014 "),IO=n(uxe,"A",{href:!0});var Tdt=s(IO);vDo=r(Tdt,"ConvBertForQuestionAnswering"),Tdt.forEach(t),FDo=r(uxe," (ConvBERT model)"),uxe.forEach(t),TDo=i(V),U2=n(V,"LI",{});var _xe=s(U2);_ge=n(_xe,"STRONG",{});var Mdt=s(_ge);MDo=r(Mdt,"data2vec-text"),Mdt.forEach(t),EDo=r(_xe," \u2014 "),qO=n(_xe,"A",{href:!0});var Edt=s(qO);CDo=r(Edt,"Data2VecTextForQuestionAnswering"),Edt.forEach(t),wDo=r(_xe," (Data2VecText model)"),_xe.forEach(t),ADo=i(V),J2=n(V,"LI",{});var bxe=s(J2);bge=n(bxe,"STRONG",{});var Cdt=s(bge);yDo=r(Cdt,"deberta"),Cdt.forEach(t),LDo=r(bxe," \u2014 "),NO=n(bxe,"A",{href:!0});var wdt=s(NO);xDo=r(wdt,"DebertaForQuestionAnswering"),wdt.forEach(t),$Do=r(bxe," (DeBERTa model)"),bxe.forEach(t),kDo=i(V),Y2=n(V,"LI",{});var vxe=s(Y2);vge=n(vxe,"STRONG",{});var Adt=s(vge);SDo=r(Adt,"deberta-v2"),Adt.forEach(t),RDo=r(vxe," \u2014 "),jO=n(vxe,"A",{href:!0});var ydt=s(jO);BDo=r(ydt,"DebertaV2ForQuestionAnswering"),ydt.forEach(t),PDo=r(vxe," (DeBERTa-v2 model)"),vxe.forEach(t),IDo=i(V),K2=n(V,"LI",{});var Fxe=s(K2);Fge=n(Fxe,"STRONG",{});var Ldt=s(Fge);qDo=r(Ldt,"distilbert"),Ldt.forEach(t),NDo=r(Fxe," \u2014 "),DO=n(Fxe,"A",{href:!0});var xdt=s(DO);jDo=r(xdt,"DistilBertForQuestionAnswering"),xdt.forEach(t),DDo=r(Fxe," (DistilBERT model)"),Fxe.forEach(t),GDo=i(V),Z2=n(V,"LI",{});var Txe=s(Z2);Tge=n(Txe,"STRONG",{});var $dt=s(Tge);ODo=r($dt,"electra"),$dt.forEach(t),VDo=r(Txe," \u2014 "),GO=n(Txe,"A",{href:!0});var kdt=s(GO);XDo=r(kdt,"ElectraForQuestionAnswering"),kdt.forEach(t),zDo=r(Txe," (ELECTRA model)"),Txe.forEach(t),QDo=i(V),ev=n(V,"LI",{});var Mxe=s(ev);Mge=n(Mxe,"STRONG",{});var Sdt=s(Mge);WDo=r(Sdt,"flaubert"),Sdt.forEach(t),HDo=r(Mxe," \u2014 "),OO=n(Mxe,"A",{href:!0});var Rdt=s(OO);UDo=r(Rdt,"FlaubertForQuestionAnsweringSimple"),Rdt.forEach(t),JDo=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),YDo=i(V),ov=n(V,"LI",{});var Exe=s(ov);Ege=n(Exe,"STRONG",{});var Bdt=s(Ege);KDo=r(Bdt,"fnet"),Bdt.forEach(t),ZDo=r(Exe," \u2014 "),VO=n(Exe,"A",{href:!0});var Pdt=s(VO);eGo=r(Pdt,"FNetForQuestionAnswering"),Pdt.forEach(t),oGo=r(Exe," (FNet model)"),Exe.forEach(t),rGo=i(V),rv=n(V,"LI",{});var Cxe=s(rv);Cge=n(Cxe,"STRONG",{});var Idt=s(Cge);tGo=r(Idt,"funnel"),Idt.forEach(t),aGo=r(Cxe," \u2014 "),XO=n(Cxe,"A",{href:!0});var qdt=s(XO);nGo=r(qdt,"FunnelForQuestionAnswering"),qdt.forEach(t),sGo=r(Cxe," (Funnel Transformer model)"),Cxe.forEach(t),lGo=i(V),tv=n(V,"LI",{});var wxe=s(tv);wge=n(wxe,"STRONG",{});var Ndt=s(wge);iGo=r(Ndt,"gptj"),Ndt.forEach(t),dGo=r(wxe," \u2014 "),zO=n(wxe,"A",{href:!0});var jdt=s(zO);cGo=r(jdt,"GPTJForQuestionAnswering"),jdt.forEach(t),fGo=r(wxe," (GPT-J model)"),wxe.forEach(t),mGo=i(V),av=n(V,"LI",{});var Axe=s(av);Age=n(Axe,"STRONG",{});var Ddt=s(Age);gGo=r(Ddt,"ibert"),Ddt.forEach(t),hGo=r(Axe," \u2014 "),QO=n(Axe,"A",{href:!0});var Gdt=s(QO);pGo=r(Gdt,"IBertForQuestionAnswering"),Gdt.forEach(t),uGo=r(Axe," (I-BERT model)"),Axe.forEach(t),_Go=i(V),nv=n(V,"LI",{});var yxe=s(nv);yge=n(yxe,"STRONG",{});var Odt=s(yge);bGo=r(Odt,"layoutlmv2"),Odt.forEach(t),vGo=r(yxe," \u2014 "),WO=n(yxe,"A",{href:!0});var Vdt=s(WO);FGo=r(Vdt,"LayoutLMv2ForQuestionAnswering"),Vdt.forEach(t),TGo=r(yxe," (LayoutLMv2 model)"),yxe.forEach(t),MGo=i(V),sv=n(V,"LI",{});var Lxe=s(sv);Lge=n(Lxe,"STRONG",{});var Xdt=s(Lge);EGo=r(Xdt,"layoutlmv3"),Xdt.forEach(t),CGo=r(Lxe," \u2014 "),HO=n(Lxe,"A",{href:!0});var zdt=s(HO);wGo=r(zdt,"LayoutLMv3ForQuestionAnswering"),zdt.forEach(t),AGo=r(Lxe," (LayoutLMv3 model)"),Lxe.forEach(t),yGo=i(V),lv=n(V,"LI",{});var xxe=s(lv);xge=n(xxe,"STRONG",{});var Qdt=s(xge);LGo=r(Qdt,"led"),Qdt.forEach(t),xGo=r(xxe," \u2014 "),UO=n(xxe,"A",{href:!0});var Wdt=s(UO);$Go=r(Wdt,"LEDForQuestionAnswering"),Wdt.forEach(t),kGo=r(xxe," (LED model)"),xxe.forEach(t),SGo=i(V),iv=n(V,"LI",{});var $xe=s(iv);$ge=n($xe,"STRONG",{});var Hdt=s($ge);RGo=r(Hdt,"longformer"),Hdt.forEach(t),BGo=r($xe," \u2014 "),JO=n($xe,"A",{href:!0});var Udt=s(JO);PGo=r(Udt,"LongformerForQuestionAnswering"),Udt.forEach(t),IGo=r($xe," (Longformer model)"),$xe.forEach(t),qGo=i(V),dv=n(V,"LI",{});var kxe=s(dv);kge=n(kxe,"STRONG",{});var Jdt=s(kge);NGo=r(Jdt,"lxmert"),Jdt.forEach(t),jGo=r(kxe," \u2014 "),YO=n(kxe,"A",{href:!0});var Ydt=s(YO);DGo=r(Ydt,"LxmertForQuestionAnswering"),Ydt.forEach(t),GGo=r(kxe," (LXMERT model)"),kxe.forEach(t),OGo=i(V),cv=n(V,"LI",{});var Sxe=s(cv);Sge=n(Sxe,"STRONG",{});var Kdt=s(Sge);VGo=r(Kdt,"mbart"),Kdt.forEach(t),XGo=r(Sxe," \u2014 "),KO=n(Sxe,"A",{href:!0});var Zdt=s(KO);zGo=r(Zdt,"MBartForQuestionAnswering"),Zdt.forEach(t),QGo=r(Sxe," (mBART model)"),Sxe.forEach(t),WGo=i(V),fv=n(V,"LI",{});var Rxe=s(fv);Rge=n(Rxe,"STRONG",{});var ect=s(Rge);HGo=r(ect,"megatron-bert"),ect.forEach(t),UGo=r(Rxe," \u2014 "),ZO=n(Rxe,"A",{href:!0});var oct=s(ZO);JGo=r(oct,"MegatronBertForQuestionAnswering"),oct.forEach(t),YGo=r(Rxe," (MegatronBert model)"),Rxe.forEach(t),KGo=i(V),mv=n(V,"LI",{});var Bxe=s(mv);Bge=n(Bxe,"STRONG",{});var rct=s(Bge);ZGo=r(rct,"mobilebert"),rct.forEach(t),eOo=r(Bxe," \u2014 "),eV=n(Bxe,"A",{href:!0});var tct=s(eV);oOo=r(tct,"MobileBertForQuestionAnswering"),tct.forEach(t),rOo=r(Bxe," (MobileBERT model)"),Bxe.forEach(t),tOo=i(V),gv=n(V,"LI",{});var Pxe=s(gv);Pge=n(Pxe,"STRONG",{});var act=s(Pge);aOo=r(act,"mpnet"),act.forEach(t),nOo=r(Pxe," \u2014 "),oV=n(Pxe,"A",{href:!0});var nct=s(oV);sOo=r(nct,"MPNetForQuestionAnswering"),nct.forEach(t),lOo=r(Pxe," (MPNet model)"),Pxe.forEach(t),iOo=i(V),hv=n(V,"LI",{});var Ixe=s(hv);Ige=n(Ixe,"STRONG",{});var sct=s(Ige);dOo=r(sct,"nystromformer"),sct.forEach(t),cOo=r(Ixe," \u2014 "),rV=n(Ixe,"A",{href:!0});var lct=s(rV);fOo=r(lct,"NystromformerForQuestionAnswering"),lct.forEach(t),mOo=r(Ixe," (Nystromformer model)"),Ixe.forEach(t),gOo=i(V),pv=n(V,"LI",{});var qxe=s(pv);qge=n(qxe,"STRONG",{});var ict=s(qge);hOo=r(ict,"qdqbert"),ict.forEach(t),pOo=r(qxe," \u2014 "),tV=n(qxe,"A",{href:!0});var dct=s(tV);uOo=r(dct,"QDQBertForQuestionAnswering"),dct.forEach(t),_Oo=r(qxe," (QDQBert model)"),qxe.forEach(t),bOo=i(V),uv=n(V,"LI",{});var Nxe=s(uv);Nge=n(Nxe,"STRONG",{});var cct=s(Nge);vOo=r(cct,"reformer"),cct.forEach(t),FOo=r(Nxe," \u2014 "),aV=n(Nxe,"A",{href:!0});var fct=s(aV);TOo=r(fct,"ReformerForQuestionAnswering"),fct.forEach(t),MOo=r(Nxe," (Reformer model)"),Nxe.forEach(t),EOo=i(V),_v=n(V,"LI",{});var jxe=s(_v);jge=n(jxe,"STRONG",{});var mct=s(jge);COo=r(mct,"rembert"),mct.forEach(t),wOo=r(jxe," \u2014 "),nV=n(jxe,"A",{href:!0});var gct=s(nV);AOo=r(gct,"RemBertForQuestionAnswering"),gct.forEach(t),yOo=r(jxe," (RemBERT model)"),jxe.forEach(t),LOo=i(V),bv=n(V,"LI",{});var Dxe=s(bv);Dge=n(Dxe,"STRONG",{});var hct=s(Dge);xOo=r(hct,"roberta"),hct.forEach(t),$Oo=r(Dxe," \u2014 "),sV=n(Dxe,"A",{href:!0});var pct=s(sV);kOo=r(pct,"RobertaForQuestionAnswering"),pct.forEach(t),SOo=r(Dxe," (RoBERTa model)"),Dxe.forEach(t),ROo=i(V),vv=n(V,"LI",{});var Gxe=s(vv);Gge=n(Gxe,"STRONG",{});var uct=s(Gge);BOo=r(uct,"roformer"),uct.forEach(t),POo=r(Gxe," \u2014 "),lV=n(Gxe,"A",{href:!0});var _ct=s(lV);IOo=r(_ct,"RoFormerForQuestionAnswering"),_ct.forEach(t),qOo=r(Gxe," (RoFormer model)"),Gxe.forEach(t),NOo=i(V),Fv=n(V,"LI",{});var Oxe=s(Fv);Oge=n(Oxe,"STRONG",{});var bct=s(Oge);jOo=r(bct,"splinter"),bct.forEach(t),DOo=r(Oxe," \u2014 "),iV=n(Oxe,"A",{href:!0});var vct=s(iV);GOo=r(vct,"SplinterForQuestionAnswering"),vct.forEach(t),OOo=r(Oxe," (Splinter model)"),Oxe.forEach(t),VOo=i(V),Tv=n(V,"LI",{});var Vxe=s(Tv);Vge=n(Vxe,"STRONG",{});var Fct=s(Vge);XOo=r(Fct,"squeezebert"),Fct.forEach(t),zOo=r(Vxe," \u2014 "),dV=n(Vxe,"A",{href:!0});var Tct=s(dV);QOo=r(Tct,"SqueezeBertForQuestionAnswering"),Tct.forEach(t),WOo=r(Vxe," (SqueezeBERT model)"),Vxe.forEach(t),HOo=i(V),Mv=n(V,"LI",{});var Xxe=s(Mv);Xge=n(Xxe,"STRONG",{});var Mct=s(Xge);UOo=r(Mct,"xlm"),Mct.forEach(t),JOo=r(Xxe," \u2014 "),cV=n(Xxe,"A",{href:!0});var Ect=s(cV);YOo=r(Ect,"XLMForQuestionAnsweringSimple"),Ect.forEach(t),KOo=r(Xxe," (XLM model)"),Xxe.forEach(t),ZOo=i(V),Ev=n(V,"LI",{});var zxe=s(Ev);zge=n(zxe,"STRONG",{});var Cct=s(zge);eVo=r(Cct,"xlm-roberta"),Cct.forEach(t),oVo=r(zxe," \u2014 "),fV=n(zxe,"A",{href:!0});var wct=s(fV);rVo=r(wct,"XLMRobertaForQuestionAnswering"),wct.forEach(t),tVo=r(zxe," (XLM-RoBERTa model)"),zxe.forEach(t),aVo=i(V),Cv=n(V,"LI",{});var Qxe=s(Cv);Qge=n(Qxe,"STRONG",{});var Act=s(Qge);nVo=r(Act,"xlm-roberta-xl"),Act.forEach(t),sVo=r(Qxe," \u2014 "),mV=n(Qxe,"A",{href:!0});var yct=s(mV);lVo=r(yct,"XLMRobertaXLForQuestionAnswering"),yct.forEach(t),iVo=r(Qxe," (XLM-RoBERTa-XL model)"),Qxe.forEach(t),dVo=i(V),wv=n(V,"LI",{});var Wxe=s(wv);Wge=n(Wxe,"STRONG",{});var Lct=s(Wge);cVo=r(Lct,"xlnet"),Lct.forEach(t),fVo=r(Wxe," \u2014 "),gV=n(Wxe,"A",{href:!0});var xct=s(gV);mVo=r(xct,"XLNetForQuestionAnsweringSimple"),xct.forEach(t),gVo=r(Wxe," (XLNet model)"),Wxe.forEach(t),hVo=i(V),Av=n(V,"LI",{});var Hxe=s(Av);Hge=n(Hxe,"STRONG",{});var $ct=s(Hge);pVo=r($ct,"yoso"),$ct.forEach(t),uVo=r(Hxe," \u2014 "),hV=n(Hxe,"A",{href:!0});var kct=s(hV);_Vo=r(kct,"YosoForQuestionAnswering"),kct.forEach(t),bVo=r(Hxe," (YOSO model)"),Hxe.forEach(t),V.forEach(t),vVo=i(ia),yv=n(ia,"P",{});var Uxe=s(yv);FVo=r(Uxe,"The model is set in evaluation mode by default using "),Uge=n(Uxe,"CODE",{});var Sct=s(Uge);TVo=r(Sct,"model.eval()"),Sct.forEach(t),MVo=r(Uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=n(Uxe,"CODE",{});var Rct=s(Jge);EVo=r(Rct,"model.train()"),Rct.forEach(t),Uxe.forEach(t),CVo=i(ia),T(Lv.$$.fragment,ia),ia.forEach(t),Js.forEach(t),vIe=i(f),Ki=n(f,"H2",{class:!0});var ENe=s(Ki);xv=n(ENe,"A",{id:!0,class:!0,href:!0});var Bct=s(xv);Yge=n(Bct,"SPAN",{});var Pct=s(Yge);T(by.$$.fragment,Pct),Pct.forEach(t),Bct.forEach(t),wVo=i(ENe),Kge=n(ENe,"SPAN",{});var Ict=s(Kge);AVo=r(Ict,"AutoModelForTableQuestionAnswering"),Ict.forEach(t),ENe.forEach(t),FIe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(vy.$$.fragment,Ys),yVo=i(Ys),Zi=n(Ys,"P",{});var xK=s(Zi);LVo=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pV=n(xK,"A",{href:!0});var qct=s(pV);xVo=r(qct,"from_pretrained()"),qct.forEach(t),$Vo=r(xK," class method or the "),uV=n(xK,"A",{href:!0});var Nct=s(uV);kVo=r(Nct,"from_config()"),Nct.forEach(t),SVo=r(xK,` class
method.`),xK.forEach(t),RVo=i(Ys),Fy=n(Ys,"P",{});var CNe=s(Fy);BVo=r(CNe,"This class cannot be instantiated directly using "),Zge=n(CNe,"CODE",{});var jct=s(Zge);PVo=r(jct,"__init__()"),jct.forEach(t),IVo=r(CNe," (throws an error)."),CNe.forEach(t),qVo=i(Ys),ft=n(Ys,"DIV",{class:!0});var v3=s(ft);T(Ty.$$.fragment,v3),NVo=i(v3),ehe=n(v3,"P",{});var Dct=s(ehe);jVo=r(Dct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Dct.forEach(t),DVo=i(v3),ed=n(v3,"P",{});var $K=s(ed);GVo=r($K,`Note:
Loading a model from its configuration file does `),ohe=n($K,"STRONG",{});var Gct=s(ohe);OVo=r(Gct,"not"),Gct.forEach(t),VVo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n($K,"A",{href:!0});var Oct=s(_V);XVo=r(Oct,"from_pretrained()"),Oct.forEach(t),zVo=r($K," to load the model weights."),$K.forEach(t),QVo=i(v3),T($v.$$.fragment,v3),v3.forEach(t),WVo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(My.$$.fragment,da),HVo=i(da),rhe=n(da,"P",{});var Vct=s(rhe);UVo=r(Vct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Vct.forEach(t),JVo=i(da),Ia=n(da,"P",{});var F3=s(Ia);YVo=r(F3,"The model class to instantiate is selected based on the "),the=n(F3,"CODE",{});var Xct=s(the);KVo=r(Xct,"model_type"),Xct.forEach(t),ZVo=r(F3,` property of the config object (either
passed as an argument or loaded from `),ahe=n(F3,"CODE",{});var zct=s(ahe);eXo=r(zct,"pretrained_model_name_or_path"),zct.forEach(t),oXo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(F3,"CODE",{});var Qct=s(nhe);rXo=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),tXo=r(F3,":"),F3.forEach(t),aXo=i(da),she=n(da,"UL",{});var Wct=s(she);kv=n(Wct,"LI",{});var Jxe=s(kv);lhe=n(Jxe,"STRONG",{});var Hct=s(lhe);nXo=r(Hct,"tapas"),Hct.forEach(t),sXo=r(Jxe," \u2014 "),bV=n(Jxe,"A",{href:!0});var Uct=s(bV);lXo=r(Uct,"TapasForQuestionAnswering"),Uct.forEach(t),iXo=r(Jxe," (TAPAS model)"),Jxe.forEach(t),Wct.forEach(t),dXo=i(da),Sv=n(da,"P",{});var Yxe=s(Sv);cXo=r(Yxe,"The model is set in evaluation mode by default using "),ihe=n(Yxe,"CODE",{});var Jct=s(ihe);fXo=r(Jct,"model.eval()"),Jct.forEach(t),mXo=r(Yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=n(Yxe,"CODE",{});var Yct=s(dhe);gXo=r(Yct,"model.train()"),Yct.forEach(t),Yxe.forEach(t),hXo=i(da),T(Rv.$$.fragment,da),da.forEach(t),Ys.forEach(t),TIe=i(f),od=n(f,"H2",{class:!0});var wNe=s(od);Bv=n(wNe,"A",{id:!0,class:!0,href:!0});var Kct=s(Bv);che=n(Kct,"SPAN",{});var Zct=s(che);T(Ey.$$.fragment,Zct),Zct.forEach(t),Kct.forEach(t),pXo=i(wNe),fhe=n(wNe,"SPAN",{});var eft=s(fhe);uXo=r(eft,"AutoModelForImageClassification"),eft.forEach(t),wNe.forEach(t),MIe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(Cy.$$.fragment,Ks),_Xo=i(Ks),rd=n(Ks,"P",{});var kK=s(rd);bXo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vV=n(kK,"A",{href:!0});var oft=s(vV);vXo=r(oft,"from_pretrained()"),oft.forEach(t),FXo=r(kK," class method or the "),FV=n(kK,"A",{href:!0});var rft=s(FV);TXo=r(rft,"from_config()"),rft.forEach(t),MXo=r(kK,` class
method.`),kK.forEach(t),EXo=i(Ks),wy=n(Ks,"P",{});var ANe=s(wy);CXo=r(ANe,"This class cannot be instantiated directly using "),mhe=n(ANe,"CODE",{});var tft=s(mhe);wXo=r(tft,"__init__()"),tft.forEach(t),AXo=r(ANe," (throws an error)."),ANe.forEach(t),yXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var T3=s(mt);T(Ay.$$.fragment,T3),LXo=i(T3),ghe=n(T3,"P",{});var aft=s(ghe);xXo=r(aft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aft.forEach(t),$Xo=i(T3),td=n(T3,"P",{});var SK=s(td);kXo=r(SK,`Note:
Loading a model from its configuration file does `),hhe=n(SK,"STRONG",{});var nft=s(hhe);SXo=r(nft,"not"),nft.forEach(t),RXo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(SK,"A",{href:!0});var sft=s(TV);BXo=r(sft,"from_pretrained()"),sft.forEach(t),PXo=r(SK," to load the model weights."),SK.forEach(t),IXo=i(T3),T(Pv.$$.fragment,T3),T3.forEach(t),qXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(yy.$$.fragment,ca),NXo=i(ca),phe=n(ca,"P",{});var lft=s(phe);jXo=r(lft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lft.forEach(t),DXo=i(ca),qa=n(ca,"P",{});var M3=s(qa);GXo=r(M3,"The model class to instantiate is selected based on the "),uhe=n(M3,"CODE",{});var ift=s(uhe);OXo=r(ift,"model_type"),ift.forEach(t),VXo=r(M3,` property of the config object (either
passed as an argument or loaded from `),_he=n(M3,"CODE",{});var dft=s(_he);XXo=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),zXo=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(M3,"CODE",{});var cft=s(bhe);QXo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),WXo=r(M3,":"),M3.forEach(t),HXo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);Iv=n(Ee,"LI",{});var Kxe=s(Iv);vhe=n(Kxe,"STRONG",{});var fft=s(vhe);UXo=r(fft,"beit"),fft.forEach(t),JXo=r(Kxe," \u2014 "),MV=n(Kxe,"A",{href:!0});var mft=s(MV);YXo=r(mft,"BeitForImageClassification"),mft.forEach(t),KXo=r(Kxe," (BEiT model)"),Kxe.forEach(t),ZXo=i(Ee),qv=n(Ee,"LI",{});var Zxe=s(qv);Fhe=n(Zxe,"STRONG",{});var gft=s(Fhe);ezo=r(gft,"convnext"),gft.forEach(t),ozo=r(Zxe," \u2014 "),EV=n(Zxe,"A",{href:!0});var hft=s(EV);rzo=r(hft,"ConvNextForImageClassification"),hft.forEach(t),tzo=r(Zxe," (ConvNext model)"),Zxe.forEach(t),azo=i(Ee),Nv=n(Ee,"LI",{});var e9e=s(Nv);The=n(e9e,"STRONG",{});var pft=s(The);nzo=r(pft,"data2vec-vision"),pft.forEach(t),szo=r(e9e," \u2014 "),CV=n(e9e,"A",{href:!0});var uft=s(CV);lzo=r(uft,"Data2VecVisionForImageClassification"),uft.forEach(t),izo=r(e9e," (Data2VecVision model)"),e9e.forEach(t),dzo=i(Ee),Bs=n(Ee,"LI",{});var m$=s(Bs);Mhe=n(m$,"STRONG",{});var _ft=s(Mhe);czo=r(_ft,"deit"),_ft.forEach(t),fzo=r(m$," \u2014 "),wV=n(m$,"A",{href:!0});var bft=s(wV);mzo=r(bft,"DeiTForImageClassification"),bft.forEach(t),gzo=r(m$," or "),AV=n(m$,"A",{href:!0});var vft=s(AV);hzo=r(vft,"DeiTForImageClassificationWithTeacher"),vft.forEach(t),pzo=r(m$," (DeiT model)"),m$.forEach(t),uzo=i(Ee),jv=n(Ee,"LI",{});var o9e=s(jv);Ehe=n(o9e,"STRONG",{});var Fft=s(Ehe);_zo=r(Fft,"imagegpt"),Fft.forEach(t),bzo=r(o9e," \u2014 "),yV=n(o9e,"A",{href:!0});var Tft=s(yV);vzo=r(Tft,"ImageGPTForImageClassification"),Tft.forEach(t),Fzo=r(o9e," (ImageGPT model)"),o9e.forEach(t),Tzo=i(Ee),gt=n(Ee,"LI",{});var mf=s(gt);Che=n(mf,"STRONG",{});var Mft=s(Che);Mzo=r(Mft,"perceiver"),Mft.forEach(t),Ezo=r(mf," \u2014 "),LV=n(mf,"A",{href:!0});var Eft=s(LV);Czo=r(Eft,"PerceiverForImageClassificationLearned"),Eft.forEach(t),wzo=r(mf," or "),xV=n(mf,"A",{href:!0});var Cft=s(xV);Azo=r(Cft,"PerceiverForImageClassificationFourier"),Cft.forEach(t),yzo=r(mf," or "),$V=n(mf,"A",{href:!0});var wft=s($V);Lzo=r(wft,"PerceiverForImageClassificationConvProcessing"),wft.forEach(t),xzo=r(mf," (Perceiver model)"),mf.forEach(t),$zo=i(Ee),Dv=n(Ee,"LI",{});var r9e=s(Dv);whe=n(r9e,"STRONG",{});var Aft=s(whe);kzo=r(Aft,"poolformer"),Aft.forEach(t),Szo=r(r9e," \u2014 "),kV=n(r9e,"A",{href:!0});var yft=s(kV);Rzo=r(yft,"PoolFormerForImageClassification"),yft.forEach(t),Bzo=r(r9e," (PoolFormer model)"),r9e.forEach(t),Pzo=i(Ee),Gv=n(Ee,"LI",{});var t9e=s(Gv);Ahe=n(t9e,"STRONG",{});var Lft=s(Ahe);Izo=r(Lft,"regnet"),Lft.forEach(t),qzo=r(t9e," \u2014 "),SV=n(t9e,"A",{href:!0});var xft=s(SV);Nzo=r(xft,"RegNetForImageClassification"),xft.forEach(t),jzo=r(t9e," (RegNet model)"),t9e.forEach(t),Dzo=i(Ee),Ov=n(Ee,"LI",{});var a9e=s(Ov);yhe=n(a9e,"STRONG",{});var $ft=s(yhe);Gzo=r($ft,"resnet"),$ft.forEach(t),Ozo=r(a9e," \u2014 "),RV=n(a9e,"A",{href:!0});var kft=s(RV);Vzo=r(kft,"ResNetForImageClassification"),kft.forEach(t),Xzo=r(a9e," (ResNet model)"),a9e.forEach(t),zzo=i(Ee),Vv=n(Ee,"LI",{});var n9e=s(Vv);Lhe=n(n9e,"STRONG",{});var Sft=s(Lhe);Qzo=r(Sft,"segformer"),Sft.forEach(t),Wzo=r(n9e," \u2014 "),BV=n(n9e,"A",{href:!0});var Rft=s(BV);Hzo=r(Rft,"SegformerForImageClassification"),Rft.forEach(t),Uzo=r(n9e," (SegFormer model)"),n9e.forEach(t),Jzo=i(Ee),Xv=n(Ee,"LI",{});var s9e=s(Xv);xhe=n(s9e,"STRONG",{});var Bft=s(xhe);Yzo=r(Bft,"swin"),Bft.forEach(t),Kzo=r(s9e," \u2014 "),PV=n(s9e,"A",{href:!0});var Pft=s(PV);Zzo=r(Pft,"SwinForImageClassification"),Pft.forEach(t),eQo=r(s9e," (Swin model)"),s9e.forEach(t),oQo=i(Ee),zv=n(Ee,"LI",{});var l9e=s(zv);$he=n(l9e,"STRONG",{});var Ift=s($he);rQo=r(Ift,"van"),Ift.forEach(t),tQo=r(l9e," \u2014 "),IV=n(l9e,"A",{href:!0});var qft=s(IV);aQo=r(qft,"VanForImageClassification"),qft.forEach(t),nQo=r(l9e," (VAN model)"),l9e.forEach(t),sQo=i(Ee),Qv=n(Ee,"LI",{});var i9e=s(Qv);khe=n(i9e,"STRONG",{});var Nft=s(khe);lQo=r(Nft,"vit"),Nft.forEach(t),iQo=r(i9e," \u2014 "),qV=n(i9e,"A",{href:!0});var jft=s(qV);dQo=r(jft,"ViTForImageClassification"),jft.forEach(t),cQo=r(i9e," (ViT model)"),i9e.forEach(t),Ee.forEach(t),fQo=i(ca),Wv=n(ca,"P",{});var d9e=s(Wv);mQo=r(d9e,"The model is set in evaluation mode by default using "),She=n(d9e,"CODE",{});var Dft=s(She);gQo=r(Dft,"model.eval()"),Dft.forEach(t),hQo=r(d9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=n(d9e,"CODE",{});var Gft=s(Rhe);pQo=r(Gft,"model.train()"),Gft.forEach(t),d9e.forEach(t),uQo=i(ca),T(Hv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),EIe=i(f),ad=n(f,"H2",{class:!0});var yNe=s(ad);Uv=n(yNe,"A",{id:!0,class:!0,href:!0});var Oft=s(Uv);Bhe=n(Oft,"SPAN",{});var Vft=s(Bhe);T(Ly.$$.fragment,Vft),Vft.forEach(t),Oft.forEach(t),_Qo=i(yNe),Phe=n(yNe,"SPAN",{});var Xft=s(Phe);bQo=r(Xft,"AutoModelForVision2Seq"),Xft.forEach(t),yNe.forEach(t),CIe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(xy.$$.fragment,Zs),vQo=i(Zs),nd=n(Zs,"P",{});var RK=s(nd);FQo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NV=n(RK,"A",{href:!0});var zft=s(NV);TQo=r(zft,"from_pretrained()"),zft.forEach(t),MQo=r(RK," class method or the "),jV=n(RK,"A",{href:!0});var Qft=s(jV);EQo=r(Qft,"from_config()"),Qft.forEach(t),CQo=r(RK,` class
method.`),RK.forEach(t),wQo=i(Zs),$y=n(Zs,"P",{});var LNe=s($y);AQo=r(LNe,"This class cannot be instantiated directly using "),Ihe=n(LNe,"CODE",{});var Wft=s(Ihe);yQo=r(Wft,"__init__()"),Wft.forEach(t),LQo=r(LNe," (throws an error)."),LNe.forEach(t),xQo=i(Zs),ht=n(Zs,"DIV",{class:!0});var E3=s(ht);T(ky.$$.fragment,E3),$Qo=i(E3),qhe=n(E3,"P",{});var Hft=s(qhe);kQo=r(Hft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hft.forEach(t),SQo=i(E3),sd=n(E3,"P",{});var BK=s(sd);RQo=r(BK,`Note:
Loading a model from its configuration file does `),Nhe=n(BK,"STRONG",{});var Uft=s(Nhe);BQo=r(Uft,"not"),Uft.forEach(t),PQo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(BK,"A",{href:!0});var Jft=s(DV);IQo=r(Jft,"from_pretrained()"),Jft.forEach(t),qQo=r(BK," to load the model weights."),BK.forEach(t),NQo=i(E3),T(Jv.$$.fragment,E3),E3.forEach(t),jQo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(Sy.$$.fragment,fa),DQo=i(fa),jhe=n(fa,"P",{});var Yft=s(jhe);GQo=r(Yft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Yft.forEach(t),OQo=i(fa),Na=n(fa,"P",{});var C3=s(Na);VQo=r(C3,"The model class to instantiate is selected based on the "),Dhe=n(C3,"CODE",{});var Kft=s(Dhe);XQo=r(Kft,"model_type"),Kft.forEach(t),zQo=r(C3,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(C3,"CODE",{});var Zft=s(Ghe);QQo=r(Zft,"pretrained_model_name_or_path"),Zft.forEach(t),WQo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(C3,"CODE",{});var emt=s(Ohe);HQo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),UQo=r(C3,":"),C3.forEach(t),JQo=i(fa),Vhe=n(fa,"UL",{});var omt=s(Vhe);Yv=n(omt,"LI",{});var c9e=s(Yv);Xhe=n(c9e,"STRONG",{});var rmt=s(Xhe);YQo=r(rmt,"vision-encoder-decoder"),rmt.forEach(t),KQo=r(c9e," \u2014 "),GV=n(c9e,"A",{href:!0});var tmt=s(GV);ZQo=r(tmt,"VisionEncoderDecoderModel"),tmt.forEach(t),eWo=r(c9e," (Vision Encoder decoder model)"),c9e.forEach(t),omt.forEach(t),oWo=i(fa),Kv=n(fa,"P",{});var f9e=s(Kv);rWo=r(f9e,"The model is set in evaluation mode by default using "),zhe=n(f9e,"CODE",{});var amt=s(zhe);tWo=r(amt,"model.eval()"),amt.forEach(t),aWo=r(f9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=n(f9e,"CODE",{});var nmt=s(Qhe);nWo=r(nmt,"model.train()"),nmt.forEach(t),f9e.forEach(t),sWo=i(fa),T(Zv.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),wIe=i(f),ld=n(f,"H2",{class:!0});var xNe=s(ld);eF=n(xNe,"A",{id:!0,class:!0,href:!0});var smt=s(eF);Whe=n(smt,"SPAN",{});var lmt=s(Whe);T(Ry.$$.fragment,lmt),lmt.forEach(t),smt.forEach(t),lWo=i(xNe),Hhe=n(xNe,"SPAN",{});var imt=s(Hhe);iWo=r(imt,"AutoModelForAudioClassification"),imt.forEach(t),xNe.forEach(t),AIe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(By.$$.fragment,el),dWo=i(el),id=n(el,"P",{});var PK=s(id);cWo=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OV=n(PK,"A",{href:!0});var dmt=s(OV);fWo=r(dmt,"from_pretrained()"),dmt.forEach(t),mWo=r(PK," class method or the "),VV=n(PK,"A",{href:!0});var cmt=s(VV);gWo=r(cmt,"from_config()"),cmt.forEach(t),hWo=r(PK,` class
method.`),PK.forEach(t),pWo=i(el),Py=n(el,"P",{});var $Ne=s(Py);uWo=r($Ne,"This class cannot be instantiated directly using "),Uhe=n($Ne,"CODE",{});var fmt=s(Uhe);_Wo=r(fmt,"__init__()"),fmt.forEach(t),bWo=r($Ne," (throws an error)."),$Ne.forEach(t),vWo=i(el),pt=n(el,"DIV",{class:!0});var w3=s(pt);T(Iy.$$.fragment,w3),FWo=i(w3),Jhe=n(w3,"P",{});var mmt=s(Jhe);TWo=r(mmt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),mmt.forEach(t),MWo=i(w3),dd=n(w3,"P",{});var IK=s(dd);EWo=r(IK,`Note:
Loading a model from its configuration file does `),Yhe=n(IK,"STRONG",{});var gmt=s(Yhe);CWo=r(gmt,"not"),gmt.forEach(t),wWo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(IK,"A",{href:!0});var hmt=s(XV);AWo=r(hmt,"from_pretrained()"),hmt.forEach(t),yWo=r(IK," to load the model weights."),IK.forEach(t),LWo=i(w3),T(oF.$$.fragment,w3),w3.forEach(t),xWo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(qy.$$.fragment,ma),$Wo=i(ma),Khe=n(ma,"P",{});var pmt=s(Khe);kWo=r(pmt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),pmt.forEach(t),SWo=i(ma),ja=n(ma,"P",{});var A3=s(ja);RWo=r(A3,"The model class to instantiate is selected based on the "),Zhe=n(A3,"CODE",{});var umt=s(Zhe);BWo=r(umt,"model_type"),umt.forEach(t),PWo=r(A3,` property of the config object (either
passed as an argument or loaded from `),epe=n(A3,"CODE",{});var _mt=s(epe);IWo=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),qWo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=n(A3,"CODE",{});var bmt=s(ope);NWo=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),jWo=r(A3,":"),A3.forEach(t),DWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);rF=n(bo,"LI",{});var m9e=s(rF);rpe=n(m9e,"STRONG",{});var vmt=s(rpe);GWo=r(vmt,"data2vec-audio"),vmt.forEach(t),OWo=r(m9e," \u2014 "),zV=n(m9e,"A",{href:!0});var Fmt=s(zV);VWo=r(Fmt,"Data2VecAudioForSequenceClassification"),Fmt.forEach(t),XWo=r(m9e," (Data2VecAudio model)"),m9e.forEach(t),zWo=i(bo),tF=n(bo,"LI",{});var g9e=s(tF);tpe=n(g9e,"STRONG",{});var Tmt=s(tpe);QWo=r(Tmt,"hubert"),Tmt.forEach(t),WWo=r(g9e," \u2014 "),QV=n(g9e,"A",{href:!0});var Mmt=s(QV);HWo=r(Mmt,"HubertForSequenceClassification"),Mmt.forEach(t),UWo=r(g9e," (Hubert model)"),g9e.forEach(t),JWo=i(bo),aF=n(bo,"LI",{});var h9e=s(aF);ape=n(h9e,"STRONG",{});var Emt=s(ape);YWo=r(Emt,"sew"),Emt.forEach(t),KWo=r(h9e," \u2014 "),WV=n(h9e,"A",{href:!0});var Cmt=s(WV);ZWo=r(Cmt,"SEWForSequenceClassification"),Cmt.forEach(t),eHo=r(h9e," (SEW model)"),h9e.forEach(t),oHo=i(bo),nF=n(bo,"LI",{});var p9e=s(nF);npe=n(p9e,"STRONG",{});var wmt=s(npe);rHo=r(wmt,"sew-d"),wmt.forEach(t),tHo=r(p9e," \u2014 "),HV=n(p9e,"A",{href:!0});var Amt=s(HV);aHo=r(Amt,"SEWDForSequenceClassification"),Amt.forEach(t),nHo=r(p9e," (SEW-D model)"),p9e.forEach(t),sHo=i(bo),sF=n(bo,"LI",{});var u9e=s(sF);spe=n(u9e,"STRONG",{});var ymt=s(spe);lHo=r(ymt,"unispeech"),ymt.forEach(t),iHo=r(u9e," \u2014 "),UV=n(u9e,"A",{href:!0});var Lmt=s(UV);dHo=r(Lmt,"UniSpeechForSequenceClassification"),Lmt.forEach(t),cHo=r(u9e," (UniSpeech model)"),u9e.forEach(t),fHo=i(bo),lF=n(bo,"LI",{});var _9e=s(lF);lpe=n(_9e,"STRONG",{});var xmt=s(lpe);mHo=r(xmt,"unispeech-sat"),xmt.forEach(t),gHo=r(_9e," \u2014 "),JV=n(_9e,"A",{href:!0});var $mt=s(JV);hHo=r($mt,"UniSpeechSatForSequenceClassification"),$mt.forEach(t),pHo=r(_9e," (UniSpeechSat model)"),_9e.forEach(t),uHo=i(bo),iF=n(bo,"LI",{});var b9e=s(iF);ipe=n(b9e,"STRONG",{});var kmt=s(ipe);_Ho=r(kmt,"wav2vec2"),kmt.forEach(t),bHo=r(b9e," \u2014 "),YV=n(b9e,"A",{href:!0});var Smt=s(YV);vHo=r(Smt,"Wav2Vec2ForSequenceClassification"),Smt.forEach(t),FHo=r(b9e," (Wav2Vec2 model)"),b9e.forEach(t),THo=i(bo),dF=n(bo,"LI",{});var v9e=s(dF);dpe=n(v9e,"STRONG",{});var Rmt=s(dpe);MHo=r(Rmt,"wavlm"),Rmt.forEach(t),EHo=r(v9e," \u2014 "),KV=n(v9e,"A",{href:!0});var Bmt=s(KV);CHo=r(Bmt,"WavLMForSequenceClassification"),Bmt.forEach(t),wHo=r(v9e," (WavLM model)"),v9e.forEach(t),bo.forEach(t),AHo=i(ma),cF=n(ma,"P",{});var F9e=s(cF);yHo=r(F9e,"The model is set in evaluation mode by default using "),cpe=n(F9e,"CODE",{});var Pmt=s(cpe);LHo=r(Pmt,"model.eval()"),Pmt.forEach(t),xHo=r(F9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=n(F9e,"CODE",{});var Imt=s(fpe);$Ho=r(Imt,"model.train()"),Imt.forEach(t),F9e.forEach(t),kHo=i(ma),T(fF.$$.fragment,ma),ma.forEach(t),el.forEach(t),yIe=i(f),cd=n(f,"H2",{class:!0});var kNe=s(cd);mF=n(kNe,"A",{id:!0,class:!0,href:!0});var qmt=s(mF);mpe=n(qmt,"SPAN",{});var Nmt=s(mpe);T(Ny.$$.fragment,Nmt),Nmt.forEach(t),qmt.forEach(t),SHo=i(kNe),gpe=n(kNe,"SPAN",{});var jmt=s(gpe);RHo=r(jmt,"AutoModelForAudioFrameClassification"),jmt.forEach(t),kNe.forEach(t),LIe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(jy.$$.fragment,ol),BHo=i(ol),fd=n(ol,"P",{});var qK=s(fd);PHo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZV=n(qK,"A",{href:!0});var Dmt=s(ZV);IHo=r(Dmt,"from_pretrained()"),Dmt.forEach(t),qHo=r(qK," class method or the "),eX=n(qK,"A",{href:!0});var Gmt=s(eX);NHo=r(Gmt,"from_config()"),Gmt.forEach(t),jHo=r(qK,` class
method.`),qK.forEach(t),DHo=i(ol),Dy=n(ol,"P",{});var SNe=s(Dy);GHo=r(SNe,"This class cannot be instantiated directly using "),hpe=n(SNe,"CODE",{});var Omt=s(hpe);OHo=r(Omt,"__init__()"),Omt.forEach(t),VHo=r(SNe," (throws an error)."),SNe.forEach(t),XHo=i(ol),ut=n(ol,"DIV",{class:!0});var y3=s(ut);T(Gy.$$.fragment,y3),zHo=i(y3),ppe=n(y3,"P",{});var Vmt=s(ppe);QHo=r(Vmt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Vmt.forEach(t),WHo=i(y3),md=n(y3,"P",{});var NK=s(md);HHo=r(NK,`Note:
Loading a model from its configuration file does `),upe=n(NK,"STRONG",{});var Xmt=s(upe);UHo=r(Xmt,"not"),Xmt.forEach(t),JHo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(NK,"A",{href:!0});var zmt=s(oX);YHo=r(zmt,"from_pretrained()"),zmt.forEach(t),KHo=r(NK," to load the model weights."),NK.forEach(t),ZHo=i(y3),T(gF.$$.fragment,y3),y3.forEach(t),eUo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(Oy.$$.fragment,ga),oUo=i(ga),_pe=n(ga,"P",{});var Qmt=s(_pe);rUo=r(Qmt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Qmt.forEach(t),tUo=i(ga),Da=n(ga,"P",{});var L3=s(Da);aUo=r(L3,"The model class to instantiate is selected based on the "),bpe=n(L3,"CODE",{});var Wmt=s(bpe);nUo=r(Wmt,"model_type"),Wmt.forEach(t),sUo=r(L3,` property of the config object (either
passed as an argument or loaded from `),vpe=n(L3,"CODE",{});var Hmt=s(vpe);lUo=r(Hmt,"pretrained_model_name_or_path"),Hmt.forEach(t),iUo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(L3,"CODE",{});var Umt=s(Fpe);dUo=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),cUo=r(L3,":"),L3.forEach(t),fUo=i(ga),Ga=n(ga,"UL",{});var x3=s(Ga);hF=n(x3,"LI",{});var T9e=s(hF);Tpe=n(T9e,"STRONG",{});var Jmt=s(Tpe);mUo=r(Jmt,"data2vec-audio"),Jmt.forEach(t),gUo=r(T9e," \u2014 "),rX=n(T9e,"A",{href:!0});var Ymt=s(rX);hUo=r(Ymt,"Data2VecAudioForAudioFrameClassification"),Ymt.forEach(t),pUo=r(T9e," (Data2VecAudio model)"),T9e.forEach(t),uUo=i(x3),pF=n(x3,"LI",{});var M9e=s(pF);Mpe=n(M9e,"STRONG",{});var Kmt=s(Mpe);_Uo=r(Kmt,"unispeech-sat"),Kmt.forEach(t),bUo=r(M9e," \u2014 "),tX=n(M9e,"A",{href:!0});var Zmt=s(tX);vUo=r(Zmt,"UniSpeechSatForAudioFrameClassification"),Zmt.forEach(t),FUo=r(M9e," (UniSpeechSat model)"),M9e.forEach(t),TUo=i(x3),uF=n(x3,"LI",{});var E9e=s(uF);Epe=n(E9e,"STRONG",{});var egt=s(Epe);MUo=r(egt,"wav2vec2"),egt.forEach(t),EUo=r(E9e," \u2014 "),aX=n(E9e,"A",{href:!0});var ogt=s(aX);CUo=r(ogt,"Wav2Vec2ForAudioFrameClassification"),ogt.forEach(t),wUo=r(E9e," (Wav2Vec2 model)"),E9e.forEach(t),AUo=i(x3),_F=n(x3,"LI",{});var C9e=s(_F);Cpe=n(C9e,"STRONG",{});var rgt=s(Cpe);yUo=r(rgt,"wavlm"),rgt.forEach(t),LUo=r(C9e," \u2014 "),nX=n(C9e,"A",{href:!0});var tgt=s(nX);xUo=r(tgt,"WavLMForAudioFrameClassification"),tgt.forEach(t),$Uo=r(C9e," (WavLM model)"),C9e.forEach(t),x3.forEach(t),kUo=i(ga),bF=n(ga,"P",{});var w9e=s(bF);SUo=r(w9e,"The model is set in evaluation mode by default using "),wpe=n(w9e,"CODE",{});var agt=s(wpe);RUo=r(agt,"model.eval()"),agt.forEach(t),BUo=r(w9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=n(w9e,"CODE",{});var ngt=s(Ape);PUo=r(ngt,"model.train()"),ngt.forEach(t),w9e.forEach(t),IUo=i(ga),T(vF.$$.fragment,ga),ga.forEach(t),ol.forEach(t),xIe=i(f),gd=n(f,"H2",{class:!0});var RNe=s(gd);FF=n(RNe,"A",{id:!0,class:!0,href:!0});var sgt=s(FF);ype=n(sgt,"SPAN",{});var lgt=s(ype);T(Vy.$$.fragment,lgt),lgt.forEach(t),sgt.forEach(t),qUo=i(RNe),Lpe=n(RNe,"SPAN",{});var igt=s(Lpe);NUo=r(igt,"AutoModelForCTC"),igt.forEach(t),RNe.forEach(t),$Ie=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(Xy.$$.fragment,rl),jUo=i(rl),hd=n(rl,"P",{});var jK=s(hd);DUo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),sX=n(jK,"A",{href:!0});var dgt=s(sX);GUo=r(dgt,"from_pretrained()"),dgt.forEach(t),OUo=r(jK," class method or the "),lX=n(jK,"A",{href:!0});var cgt=s(lX);VUo=r(cgt,"from_config()"),cgt.forEach(t),XUo=r(jK,` class
method.`),jK.forEach(t),zUo=i(rl),zy=n(rl,"P",{});var BNe=s(zy);QUo=r(BNe,"This class cannot be instantiated directly using "),xpe=n(BNe,"CODE",{});var fgt=s(xpe);WUo=r(fgt,"__init__()"),fgt.forEach(t),HUo=r(BNe," (throws an error)."),BNe.forEach(t),UUo=i(rl),_t=n(rl,"DIV",{class:!0});var $3=s(_t);T(Qy.$$.fragment,$3),JUo=i($3),$pe=n($3,"P",{});var mgt=s($pe);YUo=r(mgt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),mgt.forEach(t),KUo=i($3),pd=n($3,"P",{});var DK=s(pd);ZUo=r(DK,`Note:
Loading a model from its configuration file does `),kpe=n(DK,"STRONG",{});var ggt=s(kpe);eJo=r(ggt,"not"),ggt.forEach(t),oJo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(DK,"A",{href:!0});var hgt=s(iX);rJo=r(hgt,"from_pretrained()"),hgt.forEach(t),tJo=r(DK," to load the model weights."),DK.forEach(t),aJo=i($3),T(TF.$$.fragment,$3),$3.forEach(t),nJo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(Wy.$$.fragment,ha),sJo=i(ha),Spe=n(ha,"P",{});var pgt=s(Spe);lJo=r(pgt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),pgt.forEach(t),iJo=i(ha),Oa=n(ha,"P",{});var k3=s(Oa);dJo=r(k3,"The model class to instantiate is selected based on the "),Rpe=n(k3,"CODE",{});var ugt=s(Rpe);cJo=r(ugt,"model_type"),ugt.forEach(t),fJo=r(k3,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(k3,"CODE",{});var _gt=s(Bpe);mJo=r(_gt,"pretrained_model_name_or_path"),_gt.forEach(t),gJo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=n(k3,"CODE",{});var bgt=s(Ppe);hJo=r(bgt,"pretrained_model_name_or_path"),bgt.forEach(t),pJo=r(k3,":"),k3.forEach(t),uJo=i(ha),je=n(ha,"UL",{});var vo=s(je);MF=n(vo,"LI",{});var A9e=s(MF);Ipe=n(A9e,"STRONG",{});var vgt=s(Ipe);_Jo=r(vgt,"data2vec-audio"),vgt.forEach(t),bJo=r(A9e," \u2014 "),dX=n(A9e,"A",{href:!0});var Fgt=s(dX);vJo=r(Fgt,"Data2VecAudioForCTC"),Fgt.forEach(t),FJo=r(A9e," (Data2VecAudio model)"),A9e.forEach(t),TJo=i(vo),EF=n(vo,"LI",{});var y9e=s(EF);qpe=n(y9e,"STRONG",{});var Tgt=s(qpe);MJo=r(Tgt,"hubert"),Tgt.forEach(t),EJo=r(y9e," \u2014 "),cX=n(y9e,"A",{href:!0});var Mgt=s(cX);CJo=r(Mgt,"HubertForCTC"),Mgt.forEach(t),wJo=r(y9e," (Hubert model)"),y9e.forEach(t),AJo=i(vo),CF=n(vo,"LI",{});var L9e=s(CF);Npe=n(L9e,"STRONG",{});var Egt=s(Npe);yJo=r(Egt,"sew"),Egt.forEach(t),LJo=r(L9e," \u2014 "),fX=n(L9e,"A",{href:!0});var Cgt=s(fX);xJo=r(Cgt,"SEWForCTC"),Cgt.forEach(t),$Jo=r(L9e," (SEW model)"),L9e.forEach(t),kJo=i(vo),wF=n(vo,"LI",{});var x9e=s(wF);jpe=n(x9e,"STRONG",{});var wgt=s(jpe);SJo=r(wgt,"sew-d"),wgt.forEach(t),RJo=r(x9e," \u2014 "),mX=n(x9e,"A",{href:!0});var Agt=s(mX);BJo=r(Agt,"SEWDForCTC"),Agt.forEach(t),PJo=r(x9e," (SEW-D model)"),x9e.forEach(t),IJo=i(vo),AF=n(vo,"LI",{});var $9e=s(AF);Dpe=n($9e,"STRONG",{});var ygt=s(Dpe);qJo=r(ygt,"unispeech"),ygt.forEach(t),NJo=r($9e," \u2014 "),gX=n($9e,"A",{href:!0});var Lgt=s(gX);jJo=r(Lgt,"UniSpeechForCTC"),Lgt.forEach(t),DJo=r($9e," (UniSpeech model)"),$9e.forEach(t),GJo=i(vo),yF=n(vo,"LI",{});var k9e=s(yF);Gpe=n(k9e,"STRONG",{});var xgt=s(Gpe);OJo=r(xgt,"unispeech-sat"),xgt.forEach(t),VJo=r(k9e," \u2014 "),hX=n(k9e,"A",{href:!0});var $gt=s(hX);XJo=r($gt,"UniSpeechSatForCTC"),$gt.forEach(t),zJo=r(k9e," (UniSpeechSat model)"),k9e.forEach(t),QJo=i(vo),LF=n(vo,"LI",{});var S9e=s(LF);Ope=n(S9e,"STRONG",{});var kgt=s(Ope);WJo=r(kgt,"wav2vec2"),kgt.forEach(t),HJo=r(S9e," \u2014 "),pX=n(S9e,"A",{href:!0});var Sgt=s(pX);UJo=r(Sgt,"Wav2Vec2ForCTC"),Sgt.forEach(t),JJo=r(S9e," (Wav2Vec2 model)"),S9e.forEach(t),YJo=i(vo),xF=n(vo,"LI",{});var R9e=s(xF);Vpe=n(R9e,"STRONG",{});var Rgt=s(Vpe);KJo=r(Rgt,"wavlm"),Rgt.forEach(t),ZJo=r(R9e," \u2014 "),uX=n(R9e,"A",{href:!0});var Bgt=s(uX);eYo=r(Bgt,"WavLMForCTC"),Bgt.forEach(t),oYo=r(R9e," (WavLM model)"),R9e.forEach(t),vo.forEach(t),rYo=i(ha),$F=n(ha,"P",{});var B9e=s($F);tYo=r(B9e,"The model is set in evaluation mode by default using "),Xpe=n(B9e,"CODE",{});var Pgt=s(Xpe);aYo=r(Pgt,"model.eval()"),Pgt.forEach(t),nYo=r(B9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(B9e,"CODE",{});var Igt=s(zpe);sYo=r(Igt,"model.train()"),Igt.forEach(t),B9e.forEach(t),lYo=i(ha),T(kF.$$.fragment,ha),ha.forEach(t),rl.forEach(t),kIe=i(f),ud=n(f,"H2",{class:!0});var PNe=s(ud);SF=n(PNe,"A",{id:!0,class:!0,href:!0});var qgt=s(SF);Qpe=n(qgt,"SPAN",{});var Ngt=s(Qpe);T(Hy.$$.fragment,Ngt),Ngt.forEach(t),qgt.forEach(t),iYo=i(PNe),Wpe=n(PNe,"SPAN",{});var jgt=s(Wpe);dYo=r(jgt,"AutoModelForSpeechSeq2Seq"),jgt.forEach(t),PNe.forEach(t),SIe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(Uy.$$.fragment,tl),cYo=i(tl),_d=n(tl,"P",{});var GK=s(_d);fYo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_X=n(GK,"A",{href:!0});var Dgt=s(_X);mYo=r(Dgt,"from_pretrained()"),Dgt.forEach(t),gYo=r(GK," class method or the "),bX=n(GK,"A",{href:!0});var Ggt=s(bX);hYo=r(Ggt,"from_config()"),Ggt.forEach(t),pYo=r(GK,` class
method.`),GK.forEach(t),uYo=i(tl),Jy=n(tl,"P",{});var INe=s(Jy);_Yo=r(INe,"This class cannot be instantiated directly using "),Hpe=n(INe,"CODE",{});var Ogt=s(Hpe);bYo=r(Ogt,"__init__()"),Ogt.forEach(t),vYo=r(INe," (throws an error)."),INe.forEach(t),FYo=i(tl),bt=n(tl,"DIV",{class:!0});var S3=s(bt);T(Yy.$$.fragment,S3),TYo=i(S3),Upe=n(S3,"P",{});var Vgt=s(Upe);MYo=r(Vgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Vgt.forEach(t),EYo=i(S3),bd=n(S3,"P",{});var OK=s(bd);CYo=r(OK,`Note:
Loading a model from its configuration file does `),Jpe=n(OK,"STRONG",{});var Xgt=s(Jpe);wYo=r(Xgt,"not"),Xgt.forEach(t),AYo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(OK,"A",{href:!0});var zgt=s(vX);yYo=r(zgt,"from_pretrained()"),zgt.forEach(t),LYo=r(OK," to load the model weights."),OK.forEach(t),xYo=i(S3),T(RF.$$.fragment,S3),S3.forEach(t),$Yo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(Ky.$$.fragment,pa),kYo=i(pa),Ype=n(pa,"P",{});var Qgt=s(Ype);SYo=r(Qgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Qgt.forEach(t),RYo=i(pa),Va=n(pa,"P",{});var R3=s(Va);BYo=r(R3,"The model class to instantiate is selected based on the "),Kpe=n(R3,"CODE",{});var Wgt=s(Kpe);PYo=r(Wgt,"model_type"),Wgt.forEach(t),IYo=r(R3,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(R3,"CODE",{});var Hgt=s(Zpe);qYo=r(Hgt,"pretrained_model_name_or_path"),Hgt.forEach(t),NYo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(R3,"CODE",{});var Ugt=s(eue);jYo=r(Ugt,"pretrained_model_name_or_path"),Ugt.forEach(t),DYo=r(R3,":"),R3.forEach(t),GYo=i(pa),Zy=n(pa,"UL",{});var qNe=s(Zy);BF=n(qNe,"LI",{});var P9e=s(BF);oue=n(P9e,"STRONG",{});var Jgt=s(oue);OYo=r(Jgt,"speech-encoder-decoder"),Jgt.forEach(t),VYo=r(P9e," \u2014 "),FX=n(P9e,"A",{href:!0});var Ygt=s(FX);XYo=r(Ygt,"SpeechEncoderDecoderModel"),Ygt.forEach(t),zYo=r(P9e," (Speech Encoder decoder model)"),P9e.forEach(t),QYo=i(qNe),PF=n(qNe,"LI",{});var I9e=s(PF);rue=n(I9e,"STRONG",{});var Kgt=s(rue);WYo=r(Kgt,"speech_to_text"),Kgt.forEach(t),HYo=r(I9e," \u2014 "),TX=n(I9e,"A",{href:!0});var Zgt=s(TX);UYo=r(Zgt,"Speech2TextForConditionalGeneration"),Zgt.forEach(t),JYo=r(I9e," (Speech2Text model)"),I9e.forEach(t),qNe.forEach(t),YYo=i(pa),IF=n(pa,"P",{});var q9e=s(IF);KYo=r(q9e,"The model is set in evaluation mode by default using "),tue=n(q9e,"CODE",{});var eht=s(tue);ZYo=r(eht,"model.eval()"),eht.forEach(t),eKo=r(q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(q9e,"CODE",{});var oht=s(aue);oKo=r(oht,"model.train()"),oht.forEach(t),q9e.forEach(t),rKo=i(pa),T(qF.$$.fragment,pa),pa.forEach(t),tl.forEach(t),RIe=i(f),vd=n(f,"H2",{class:!0});var NNe=s(vd);NF=n(NNe,"A",{id:!0,class:!0,href:!0});var rht=s(NF);nue=n(rht,"SPAN",{});var tht=s(nue);T(eL.$$.fragment,tht),tht.forEach(t),rht.forEach(t),tKo=i(NNe),sue=n(NNe,"SPAN",{});var aht=s(sue);aKo=r(aht,"AutoModelForAudioXVector"),aht.forEach(t),NNe.forEach(t),BIe=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(oL.$$.fragment,al),nKo=i(al),Fd=n(al,"P",{});var VK=s(Fd);sKo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),MX=n(VK,"A",{href:!0});var nht=s(MX);lKo=r(nht,"from_pretrained()"),nht.forEach(t),iKo=r(VK," class method or the "),EX=n(VK,"A",{href:!0});var sht=s(EX);dKo=r(sht,"from_config()"),sht.forEach(t),cKo=r(VK,` class
method.`),VK.forEach(t),fKo=i(al),rL=n(al,"P",{});var jNe=s(rL);mKo=r(jNe,"This class cannot be instantiated directly using "),lue=n(jNe,"CODE",{});var lht=s(lue);gKo=r(lht,"__init__()"),lht.forEach(t),hKo=r(jNe," (throws an error)."),jNe.forEach(t),pKo=i(al),vt=n(al,"DIV",{class:!0});var B3=s(vt);T(tL.$$.fragment,B3),uKo=i(B3),iue=n(B3,"P",{});var iht=s(iue);_Ko=r(iht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),iht.forEach(t),bKo=i(B3),Td=n(B3,"P",{});var XK=s(Td);vKo=r(XK,`Note:
Loading a model from its configuration file does `),due=n(XK,"STRONG",{});var dht=s(due);FKo=r(dht,"not"),dht.forEach(t),TKo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(XK,"A",{href:!0});var cht=s(CX);MKo=r(cht,"from_pretrained()"),cht.forEach(t),EKo=r(XK," to load the model weights."),XK.forEach(t),CKo=i(B3),T(jF.$$.fragment,B3),B3.forEach(t),wKo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(aL.$$.fragment,ua),AKo=i(ua),cue=n(ua,"P",{});var fht=s(cue);yKo=r(fht,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fht.forEach(t),LKo=i(ua),Xa=n(ua,"P",{});var P3=s(Xa);xKo=r(P3,"The model class to instantiate is selected based on the "),fue=n(P3,"CODE",{});var mht=s(fue);$Ko=r(mht,"model_type"),mht.forEach(t),kKo=r(P3,` property of the config object (either
passed as an argument or loaded from `),mue=n(P3,"CODE",{});var ght=s(mue);SKo=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),RKo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(P3,"CODE",{});var hht=s(gue);BKo=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),PKo=r(P3,":"),P3.forEach(t),IKo=i(ua),za=n(ua,"UL",{});var I3=s(za);DF=n(I3,"LI",{});var N9e=s(DF);hue=n(N9e,"STRONG",{});var pht=s(hue);qKo=r(pht,"data2vec-audio"),pht.forEach(t),NKo=r(N9e," \u2014 "),wX=n(N9e,"A",{href:!0});var uht=s(wX);jKo=r(uht,"Data2VecAudioForXVector"),uht.forEach(t),DKo=r(N9e," (Data2VecAudio model)"),N9e.forEach(t),GKo=i(I3),GF=n(I3,"LI",{});var j9e=s(GF);pue=n(j9e,"STRONG",{});var _ht=s(pue);OKo=r(_ht,"unispeech-sat"),_ht.forEach(t),VKo=r(j9e," \u2014 "),AX=n(j9e,"A",{href:!0});var bht=s(AX);XKo=r(bht,"UniSpeechSatForXVector"),bht.forEach(t),zKo=r(j9e," (UniSpeechSat model)"),j9e.forEach(t),QKo=i(I3),OF=n(I3,"LI",{});var D9e=s(OF);uue=n(D9e,"STRONG",{});var vht=s(uue);WKo=r(vht,"wav2vec2"),vht.forEach(t),HKo=r(D9e," \u2014 "),yX=n(D9e,"A",{href:!0});var Fht=s(yX);UKo=r(Fht,"Wav2Vec2ForXVector"),Fht.forEach(t),JKo=r(D9e," (Wav2Vec2 model)"),D9e.forEach(t),YKo=i(I3),VF=n(I3,"LI",{});var G9e=s(VF);_ue=n(G9e,"STRONG",{});var Tht=s(_ue);KKo=r(Tht,"wavlm"),Tht.forEach(t),ZKo=r(G9e," \u2014 "),LX=n(G9e,"A",{href:!0});var Mht=s(LX);eZo=r(Mht,"WavLMForXVector"),Mht.forEach(t),oZo=r(G9e," (WavLM model)"),G9e.forEach(t),I3.forEach(t),rZo=i(ua),XF=n(ua,"P",{});var O9e=s(XF);tZo=r(O9e,"The model is set in evaluation mode by default using "),bue=n(O9e,"CODE",{});var Eht=s(bue);aZo=r(Eht,"model.eval()"),Eht.forEach(t),nZo=r(O9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=n(O9e,"CODE",{});var Cht=s(vue);sZo=r(Cht,"model.train()"),Cht.forEach(t),O9e.forEach(t),lZo=i(ua),T(zF.$$.fragment,ua),ua.forEach(t),al.forEach(t),PIe=i(f),Md=n(f,"H2",{class:!0});var DNe=s(Md);QF=n(DNe,"A",{id:!0,class:!0,href:!0});var wht=s(QF);Fue=n(wht,"SPAN",{});var Aht=s(Fue);T(nL.$$.fragment,Aht),Aht.forEach(t),wht.forEach(t),iZo=i(DNe),Tue=n(DNe,"SPAN",{});var yht=s(Tue);dZo=r(yht,"AutoModelForMaskedImageModeling"),yht.forEach(t),DNe.forEach(t),IIe=i(f),Qo=n(f,"DIV",{class:!0});var nl=s(Qo);T(sL.$$.fragment,nl),cZo=i(nl),Ed=n(nl,"P",{});var zK=s(Ed);fZo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),xX=n(zK,"A",{href:!0});var Lht=s(xX);mZo=r(Lht,"from_pretrained()"),Lht.forEach(t),gZo=r(zK," class method or the "),$X=n(zK,"A",{href:!0});var xht=s($X);hZo=r(xht,"from_config()"),xht.forEach(t),pZo=r(zK,` class
method.`),zK.forEach(t),uZo=i(nl),lL=n(nl,"P",{});var GNe=s(lL);_Zo=r(GNe,"This class cannot be instantiated directly using "),Mue=n(GNe,"CODE",{});var $ht=s(Mue);bZo=r($ht,"__init__()"),$ht.forEach(t),vZo=r(GNe," (throws an error)."),GNe.forEach(t),FZo=i(nl),Ft=n(nl,"DIV",{class:!0});var q3=s(Ft);T(iL.$$.fragment,q3),TZo=i(q3),Eue=n(q3,"P",{});var kht=s(Eue);MZo=r(kht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),kht.forEach(t),EZo=i(q3),Cd=n(q3,"P",{});var QK=s(Cd);CZo=r(QK,`Note:
Loading a model from its configuration file does `),Cue=n(QK,"STRONG",{});var Sht=s(Cue);wZo=r(Sht,"not"),Sht.forEach(t),AZo=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=n(QK,"A",{href:!0});var Rht=s(kX);yZo=r(Rht,"from_pretrained()"),Rht.forEach(t),LZo=r(QK," to load the model weights."),QK.forEach(t),xZo=i(q3),T(WF.$$.fragment,q3),q3.forEach(t),$Zo=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(dL.$$.fragment,_a),kZo=i(_a),wue=n(_a,"P",{});var Bht=s(wue);SZo=r(Bht,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Bht.forEach(t),RZo=i(_a),Qa=n(_a,"P",{});var N3=s(Qa);BZo=r(N3,"The model class to instantiate is selected based on the "),Aue=n(N3,"CODE",{});var Pht=s(Aue);PZo=r(Pht,"model_type"),Pht.forEach(t),IZo=r(N3,` property of the config object (either
passed as an argument or loaded from `),yue=n(N3,"CODE",{});var Iht=s(yue);qZo=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),NZo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(N3,"CODE",{});var qht=s(Lue);jZo=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),DZo=r(N3,":"),N3.forEach(t),GZo=i(_a),wd=n(_a,"UL",{});var WK=s(wd);HF=n(WK,"LI",{});var V9e=s(HF);xue=n(V9e,"STRONG",{});var Nht=s(xue);OZo=r(Nht,"deit"),Nht.forEach(t),VZo=r(V9e," \u2014 "),SX=n(V9e,"A",{href:!0});var jht=s(SX);XZo=r(jht,"DeiTForMaskedImageModeling"),jht.forEach(t),zZo=r(V9e," (DeiT model)"),V9e.forEach(t),QZo=i(WK),UF=n(WK,"LI",{});var X9e=s(UF);$ue=n(X9e,"STRONG",{});var Dht=s($ue);WZo=r(Dht,"swin"),Dht.forEach(t),HZo=r(X9e," \u2014 "),RX=n(X9e,"A",{href:!0});var Ght=s(RX);UZo=r(Ght,"SwinForMaskedImageModeling"),Ght.forEach(t),JZo=r(X9e," (Swin model)"),X9e.forEach(t),YZo=i(WK),JF=n(WK,"LI",{});var z9e=s(JF);kue=n(z9e,"STRONG",{});var Oht=s(kue);KZo=r(Oht,"vit"),Oht.forEach(t),ZZo=r(z9e," \u2014 "),BX=n(z9e,"A",{href:!0});var Vht=s(BX);eer=r(Vht,"ViTForMaskedImageModeling"),Vht.forEach(t),oer=r(z9e," (ViT model)"),z9e.forEach(t),WK.forEach(t),rer=i(_a),YF=n(_a,"P",{});var Q9e=s(YF);ter=r(Q9e,"The model is set in evaluation mode by default using "),Sue=n(Q9e,"CODE",{});var Xht=s(Sue);aer=r(Xht,"model.eval()"),Xht.forEach(t),ner=r(Q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(Q9e,"CODE",{});var zht=s(Rue);ser=r(zht,"model.train()"),zht.forEach(t),Q9e.forEach(t),ler=i(_a),T(KF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),qIe=i(f),Ad=n(f,"H2",{class:!0});var ONe=s(Ad);ZF=n(ONe,"A",{id:!0,class:!0,href:!0});var Qht=s(ZF);Bue=n(Qht,"SPAN",{});var Wht=s(Bue);T(cL.$$.fragment,Wht),Wht.forEach(t),Qht.forEach(t),ier=i(ONe),Pue=n(ONe,"SPAN",{});var Hht=s(Pue);der=r(Hht,"AutoModelForObjectDetection"),Hht.forEach(t),ONe.forEach(t),NIe=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(fL.$$.fragment,sl),cer=i(sl),yd=n(sl,"P",{});var HK=s(yd);fer=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PX=n(HK,"A",{href:!0});var Uht=s(PX);mer=r(Uht,"from_pretrained()"),Uht.forEach(t),ger=r(HK," class method or the "),IX=n(HK,"A",{href:!0});var Jht=s(IX);her=r(Jht,"from_config()"),Jht.forEach(t),per=r(HK,` class
method.`),HK.forEach(t),uer=i(sl),mL=n(sl,"P",{});var VNe=s(mL);_er=r(VNe,"This class cannot be instantiated directly using "),Iue=n(VNe,"CODE",{});var Yht=s(Iue);ber=r(Yht,"__init__()"),Yht.forEach(t),ver=r(VNe," (throws an error)."),VNe.forEach(t),Fer=i(sl),Tt=n(sl,"DIV",{class:!0});var j3=s(Tt);T(gL.$$.fragment,j3),Ter=i(j3),que=n(j3,"P",{});var Kht=s(que);Mer=r(Kht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Kht.forEach(t),Eer=i(j3),Ld=n(j3,"P",{});var UK=s(Ld);Cer=r(UK,`Note:
Loading a model from its configuration file does `),Nue=n(UK,"STRONG",{});var Zht=s(Nue);wer=r(Zht,"not"),Zht.forEach(t),Aer=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(UK,"A",{href:!0});var ept=s(qX);yer=r(ept,"from_pretrained()"),ept.forEach(t),Ler=r(UK," to load the model weights."),UK.forEach(t),xer=i(j3),T(e6.$$.fragment,j3),j3.forEach(t),$er=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(hL.$$.fragment,ba),ker=i(ba),jue=n(ba,"P",{});var opt=s(jue);Ser=r(opt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),opt.forEach(t),Rer=i(ba),Wa=n(ba,"P",{});var D3=s(Wa);Ber=r(D3,"The model class to instantiate is selected based on the "),Due=n(D3,"CODE",{});var rpt=s(Due);Per=r(rpt,"model_type"),rpt.forEach(t),Ier=r(D3,` property of the config object (either
passed as an argument or loaded from `),Gue=n(D3,"CODE",{});var tpt=s(Gue);qer=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),Ner=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(D3,"CODE",{});var apt=s(Oue);jer=r(apt,"pretrained_model_name_or_path"),apt.forEach(t),Der=r(D3,":"),D3.forEach(t),Ger=i(ba),pL=n(ba,"UL",{});var XNe=s(pL);o6=n(XNe,"LI",{});var W9e=s(o6);Vue=n(W9e,"STRONG",{});var npt=s(Vue);Oer=r(npt,"detr"),npt.forEach(t),Ver=r(W9e," \u2014 "),NX=n(W9e,"A",{href:!0});var spt=s(NX);Xer=r(spt,"DetrForObjectDetection"),spt.forEach(t),zer=r(W9e," (DETR model)"),W9e.forEach(t),Qer=i(XNe),r6=n(XNe,"LI",{});var H9e=s(r6);Xue=n(H9e,"STRONG",{});var lpt=s(Xue);Wer=r(lpt,"yolos"),lpt.forEach(t),Her=r(H9e," \u2014 "),jX=n(H9e,"A",{href:!0});var ipt=s(jX);Uer=r(ipt,"YolosForObjectDetection"),ipt.forEach(t),Jer=r(H9e," (YOLOS model)"),H9e.forEach(t),XNe.forEach(t),Yer=i(ba),t6=n(ba,"P",{});var U9e=s(t6);Ker=r(U9e,"The model is set in evaluation mode by default using "),zue=n(U9e,"CODE",{});var dpt=s(zue);Zer=r(dpt,"model.eval()"),dpt.forEach(t),eor=r(U9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=n(U9e,"CODE",{});var cpt=s(Que);oor=r(cpt,"model.train()"),cpt.forEach(t),U9e.forEach(t),ror=i(ba),T(a6.$$.fragment,ba),ba.forEach(t),sl.forEach(t),jIe=i(f),xd=n(f,"H2",{class:!0});var zNe=s(xd);n6=n(zNe,"A",{id:!0,class:!0,href:!0});var fpt=s(n6);Wue=n(fpt,"SPAN",{});var mpt=s(Wue);T(uL.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),tor=i(zNe),Hue=n(zNe,"SPAN",{});var gpt=s(Hue);aor=r(gpt,"AutoModelForImageSegmentation"),gpt.forEach(t),zNe.forEach(t),DIe=i(f),Ho=n(f,"DIV",{class:!0});var ll=s(Ho);T(_L.$$.fragment,ll),nor=i(ll),$d=n(ll,"P",{});var JK=s($d);sor=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),DX=n(JK,"A",{href:!0});var hpt=s(DX);lor=r(hpt,"from_pretrained()"),hpt.forEach(t),ior=r(JK," class method or the "),GX=n(JK,"A",{href:!0});var ppt=s(GX);dor=r(ppt,"from_config()"),ppt.forEach(t),cor=r(JK,` class
method.`),JK.forEach(t),mor=i(ll),bL=n(ll,"P",{});var QNe=s(bL);gor=r(QNe,"This class cannot be instantiated directly using "),Uue=n(QNe,"CODE",{});var upt=s(Uue);hor=r(upt,"__init__()"),upt.forEach(t),por=r(QNe," (throws an error)."),QNe.forEach(t),uor=i(ll),Mt=n(ll,"DIV",{class:!0});var G3=s(Mt);T(vL.$$.fragment,G3),_or=i(G3),Jue=n(G3,"P",{});var _pt=s(Jue);bor=r(_pt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),_pt.forEach(t),vor=i(G3),kd=n(G3,"P",{});var YK=s(kd);For=r(YK,`Note:
Loading a model from its configuration file does `),Yue=n(YK,"STRONG",{});var bpt=s(Yue);Tor=r(bpt,"not"),bpt.forEach(t),Mor=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(YK,"A",{href:!0});var vpt=s(OX);Eor=r(vpt,"from_pretrained()"),vpt.forEach(t),Cor=r(YK," to load the model weights."),YK.forEach(t),wor=i(G3),T(s6.$$.fragment,G3),G3.forEach(t),Aor=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(FL.$$.fragment,va),yor=i(va),Kue=n(va,"P",{});var Fpt=s(Kue);Lor=r(Fpt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Fpt.forEach(t),xor=i(va),Ha=n(va,"P",{});var O3=s(Ha);$or=r(O3,"The model class to instantiate is selected based on the "),Zue=n(O3,"CODE",{});var Tpt=s(Zue);kor=r(Tpt,"model_type"),Tpt.forEach(t),Sor=r(O3,` property of the config object (either
passed as an argument or loaded from `),e_e=n(O3,"CODE",{});var Mpt=s(e_e);Ror=r(Mpt,"pretrained_model_name_or_path"),Mpt.forEach(t),Bor=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=n(O3,"CODE",{});var Ept=s(o_e);Por=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),Ior=r(O3,":"),O3.forEach(t),qor=i(va),r_e=n(va,"UL",{});var Cpt=s(r_e);l6=n(Cpt,"LI",{});var J9e=s(l6);t_e=n(J9e,"STRONG",{});var wpt=s(t_e);Nor=r(wpt,"detr"),wpt.forEach(t),jor=r(J9e," \u2014 "),VX=n(J9e,"A",{href:!0});var Apt=s(VX);Dor=r(Apt,"DetrForSegmentation"),Apt.forEach(t),Gor=r(J9e," (DETR model)"),J9e.forEach(t),Cpt.forEach(t),Oor=i(va),i6=n(va,"P",{});var Y9e=s(i6);Vor=r(Y9e,"The model is set in evaluation mode by default using "),a_e=n(Y9e,"CODE",{});var ypt=s(a_e);Xor=r(ypt,"model.eval()"),ypt.forEach(t),zor=r(Y9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=n(Y9e,"CODE",{});var Lpt=s(n_e);Qor=r(Lpt,"model.train()"),Lpt.forEach(t),Y9e.forEach(t),Wor=i(va),T(d6.$$.fragment,va),va.forEach(t),ll.forEach(t),GIe=i(f),Sd=n(f,"H2",{class:!0});var WNe=s(Sd);c6=n(WNe,"A",{id:!0,class:!0,href:!0});var xpt=s(c6);s_e=n(xpt,"SPAN",{});var $pt=s(s_e);T(TL.$$.fragment,$pt),$pt.forEach(t),xpt.forEach(t),Hor=i(WNe),l_e=n(WNe,"SPAN",{});var kpt=s(l_e);Uor=r(kpt,"AutoModelForSemanticSegmentation"),kpt.forEach(t),WNe.forEach(t),OIe=i(f),Uo=n(f,"DIV",{class:!0});var il=s(Uo);T(ML.$$.fragment,il),Jor=i(il),Rd=n(il,"P",{});var KK=s(Rd);Yor=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),XX=n(KK,"A",{href:!0});var Spt=s(XX);Kor=r(Spt,"from_pretrained()"),Spt.forEach(t),Zor=r(KK," class method or the "),zX=n(KK,"A",{href:!0});var Rpt=s(zX);err=r(Rpt,"from_config()"),Rpt.forEach(t),orr=r(KK,` class
method.`),KK.forEach(t),rrr=i(il),EL=n(il,"P",{});var HNe=s(EL);trr=r(HNe,"This class cannot be instantiated directly using "),i_e=n(HNe,"CODE",{});var Bpt=s(i_e);arr=r(Bpt,"__init__()"),Bpt.forEach(t),nrr=r(HNe," (throws an error)."),HNe.forEach(t),srr=i(il),Et=n(il,"DIV",{class:!0});var V3=s(Et);T(CL.$$.fragment,V3),lrr=i(V3),d_e=n(V3,"P",{});var Ppt=s(d_e);irr=r(Ppt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ppt.forEach(t),drr=i(V3),Bd=n(V3,"P",{});var ZK=s(Bd);crr=r(ZK,`Note:
Loading a model from its configuration file does `),c_e=n(ZK,"STRONG",{});var Ipt=s(c_e);frr=r(Ipt,"not"),Ipt.forEach(t),mrr=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(ZK,"A",{href:!0});var qpt=s(QX);grr=r(qpt,"from_pretrained()"),qpt.forEach(t),hrr=r(ZK," to load the model weights."),ZK.forEach(t),prr=i(V3),T(f6.$$.fragment,V3),V3.forEach(t),urr=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(wL.$$.fragment,Fa),_rr=i(Fa),f_e=n(Fa,"P",{});var Npt=s(f_e);brr=r(Npt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Npt.forEach(t),vrr=i(Fa),Ua=n(Fa,"P",{});var X3=s(Ua);Frr=r(X3,"The model class to instantiate is selected based on the "),m_e=n(X3,"CODE",{});var jpt=s(m_e);Trr=r(jpt,"model_type"),jpt.forEach(t),Mrr=r(X3,` property of the config object (either
passed as an argument or loaded from `),g_e=n(X3,"CODE",{});var Dpt=s(g_e);Err=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),Crr=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(X3,"CODE",{});var Gpt=s(h_e);wrr=r(Gpt,"pretrained_model_name_or_path"),Gpt.forEach(t),Arr=r(X3,":"),X3.forEach(t),yrr=i(Fa),Ja=n(Fa,"UL",{});var z3=s(Ja);m6=n(z3,"LI",{});var K9e=s(m6);p_e=n(K9e,"STRONG",{});var Opt=s(p_e);Lrr=r(Opt,"beit"),Opt.forEach(t),xrr=r(K9e," \u2014 "),WX=n(K9e,"A",{href:!0});var Vpt=s(WX);$rr=r(Vpt,"BeitForSemanticSegmentation"),Vpt.forEach(t),krr=r(K9e," (BEiT model)"),K9e.forEach(t),Srr=i(z3),g6=n(z3,"LI",{});var Z9e=s(g6);u_e=n(Z9e,"STRONG",{});var Xpt=s(u_e);Rrr=r(Xpt,"data2vec-vision"),Xpt.forEach(t),Brr=r(Z9e," \u2014 "),HX=n(Z9e,"A",{href:!0});var zpt=s(HX);Prr=r(zpt,"Data2VecVisionForSemanticSegmentation"),zpt.forEach(t),Irr=r(Z9e," (Data2VecVision model)"),Z9e.forEach(t),qrr=i(z3),h6=n(z3,"LI",{});var e$e=s(h6);__e=n(e$e,"STRONG",{});var Qpt=s(__e);Nrr=r(Qpt,"dpt"),Qpt.forEach(t),jrr=r(e$e," \u2014 "),UX=n(e$e,"A",{href:!0});var Wpt=s(UX);Drr=r(Wpt,"DPTForSemanticSegmentation"),Wpt.forEach(t),Grr=r(e$e," (DPT model)"),e$e.forEach(t),Orr=i(z3),p6=n(z3,"LI",{});var o$e=s(p6);b_e=n(o$e,"STRONG",{});var Hpt=s(b_e);Vrr=r(Hpt,"segformer"),Hpt.forEach(t),Xrr=r(o$e," \u2014 "),JX=n(o$e,"A",{href:!0});var Upt=s(JX);zrr=r(Upt,"SegformerForSemanticSegmentation"),Upt.forEach(t),Qrr=r(o$e," (SegFormer model)"),o$e.forEach(t),z3.forEach(t),Wrr=i(Fa),u6=n(Fa,"P",{});var r$e=s(u6);Hrr=r(r$e,"The model is set in evaluation mode by default using "),v_e=n(r$e,"CODE",{});var Jpt=s(v_e);Urr=r(Jpt,"model.eval()"),Jpt.forEach(t),Jrr=r(r$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=n(r$e,"CODE",{});var Ypt=s(F_e);Yrr=r(Ypt,"model.train()"),Ypt.forEach(t),r$e.forEach(t),Krr=i(Fa),T(_6.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),VIe=i(f),Pd=n(f,"H2",{class:!0});var UNe=s(Pd);b6=n(UNe,"A",{id:!0,class:!0,href:!0});var Kpt=s(b6);T_e=n(Kpt,"SPAN",{});var Zpt=s(T_e);T(AL.$$.fragment,Zpt),Zpt.forEach(t),Kpt.forEach(t),Zrr=i(UNe),M_e=n(UNe,"SPAN",{});var eut=s(M_e);etr=r(eut,"AutoModelForInstanceSegmentation"),eut.forEach(t),UNe.forEach(t),XIe=i(f),Jo=n(f,"DIV",{class:!0});var dl=s(Jo);T(yL.$$.fragment,dl),otr=i(dl),Id=n(dl,"P",{});var eZ=s(Id);rtr=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),YX=n(eZ,"A",{href:!0});var out=s(YX);ttr=r(out,"from_pretrained()"),out.forEach(t),atr=r(eZ," class method or the "),KX=n(eZ,"A",{href:!0});var rut=s(KX);ntr=r(rut,"from_config()"),rut.forEach(t),str=r(eZ,` class
method.`),eZ.forEach(t),ltr=i(dl),LL=n(dl,"P",{});var JNe=s(LL);itr=r(JNe,"This class cannot be instantiated directly using "),E_e=n(JNe,"CODE",{});var tut=s(E_e);dtr=r(tut,"__init__()"),tut.forEach(t),ctr=r(JNe," (throws an error)."),JNe.forEach(t),ftr=i(dl),Ct=n(dl,"DIV",{class:!0});var Q3=s(Ct);T(xL.$$.fragment,Q3),mtr=i(Q3),C_e=n(Q3,"P",{});var aut=s(C_e);gtr=r(aut,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),aut.forEach(t),htr=i(Q3),qd=n(Q3,"P",{});var oZ=s(qd);ptr=r(oZ,`Note:
Loading a model from its configuration file does `),w_e=n(oZ,"STRONG",{});var nut=s(w_e);utr=r(nut,"not"),nut.forEach(t),_tr=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(oZ,"A",{href:!0});var sut=s(ZX);btr=r(sut,"from_pretrained()"),sut.forEach(t),vtr=r(oZ," to load the model weights."),oZ.forEach(t),Ftr=i(Q3),T(v6.$$.fragment,Q3),Q3.forEach(t),Ttr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T($L.$$.fragment,Ta),Mtr=i(Ta),A_e=n(Ta,"P",{});var lut=s(A_e);Etr=r(lut,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),lut.forEach(t),Ctr=i(Ta),Ya=n(Ta,"P",{});var W3=s(Ya);wtr=r(W3,"The model class to instantiate is selected based on the "),y_e=n(W3,"CODE",{});var iut=s(y_e);Atr=r(iut,"model_type"),iut.forEach(t),ytr=r(W3,` property of the config object (either
passed as an argument or loaded from `),L_e=n(W3,"CODE",{});var dut=s(L_e);Ltr=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),xtr=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(W3,"CODE",{});var cut=s(x_e);$tr=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),ktr=r(W3,":"),W3.forEach(t),Str=i(Ta),$_e=n(Ta,"UL",{});var fut=s($_e);F6=n(fut,"LI",{});var t$e=s(F6);k_e=n(t$e,"STRONG",{});var mut=s(k_e);Rtr=r(mut,"maskformer"),mut.forEach(t),Btr=r(t$e," \u2014 "),ez=n(t$e,"A",{href:!0});var gut=s(ez);Ptr=r(gut,"MaskFormerForInstanceSegmentation"),gut.forEach(t),Itr=r(t$e," (MaskFormer model)"),t$e.forEach(t),fut.forEach(t),qtr=i(Ta),T6=n(Ta,"P",{});var a$e=s(T6);Ntr=r(a$e,"The model is set in evaluation mode by default using "),S_e=n(a$e,"CODE",{});var hut=s(S_e);jtr=r(hut,"model.eval()"),hut.forEach(t),Dtr=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=n(a$e,"CODE",{});var put=s(R_e);Gtr=r(put,"model.train()"),put.forEach(t),a$e.forEach(t),Otr=i(Ta),T(M6.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),zIe=i(f),Nd=n(f,"H2",{class:!0});var YNe=s(Nd);E6=n(YNe,"A",{id:!0,class:!0,href:!0});var uut=s(E6);B_e=n(uut,"SPAN",{});var _ut=s(B_e);T(kL.$$.fragment,_ut),_ut.forEach(t),uut.forEach(t),Vtr=i(YNe),P_e=n(YNe,"SPAN",{});var but=s(P_e);Xtr=r(but,"TFAutoModel"),but.forEach(t),YNe.forEach(t),QIe=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T(SL.$$.fragment,cl),ztr=i(cl),jd=n(cl,"P",{});var rZ=s(jd);Qtr=r(rZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oz=n(rZ,"A",{href:!0});var vut=s(oz);Wtr=r(vut,"from_pretrained()"),vut.forEach(t),Htr=r(rZ," class method or the "),rz=n(rZ,"A",{href:!0});var Fut=s(rz);Utr=r(Fut,"from_config()"),Fut.forEach(t),Jtr=r(rZ,` class
method.`),rZ.forEach(t),Ytr=i(cl),RL=n(cl,"P",{});var KNe=s(RL);Ktr=r(KNe,"This class cannot be instantiated directly using "),I_e=n(KNe,"CODE",{});var Tut=s(I_e);Ztr=r(Tut,"__init__()"),Tut.forEach(t),ear=r(KNe," (throws an error)."),KNe.forEach(t),oar=i(cl),wt=n(cl,"DIV",{class:!0});var H3=s(wt);T(BL.$$.fragment,H3),rar=i(H3),q_e=n(H3,"P",{});var Mut=s(q_e);tar=r(Mut,"Instantiates one of the base model classes of the library from a configuration."),Mut.forEach(t),aar=i(H3),Dd=n(H3,"P",{});var tZ=s(Dd);nar=r(tZ,`Note:
Loading a model from its configuration file does `),N_e=n(tZ,"STRONG",{});var Eut=s(N_e);sar=r(Eut,"not"),Eut.forEach(t),lar=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(tZ,"A",{href:!0});var Cut=s(tz);iar=r(Cut,"from_pretrained()"),Cut.forEach(t),dar=r(tZ," to load the model weights."),tZ.forEach(t),car=i(H3),T(C6.$$.fragment,H3),H3.forEach(t),far=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(PL.$$.fragment,fl),mar=i(fl),j_e=n(fl,"P",{});var wut=s(j_e);gar=r(wut,"Instantiate one of the base model classes of the library from a pretrained model."),wut.forEach(t),har=i(fl),Ka=n(fl,"P",{});var U3=s(Ka);par=r(U3,"The model class to instantiate is selected based on the "),D_e=n(U3,"CODE",{});var Aut=s(D_e);uar=r(Aut,"model_type"),Aut.forEach(t),_ar=r(U3,` property of the config object (either
passed as an argument or loaded from `),G_e=n(U3,"CODE",{});var yut=s(G_e);bar=r(yut,"pretrained_model_name_or_path"),yut.forEach(t),Far=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(U3,"CODE",{});var Lut=s(O_e);Tar=r(Lut,"pretrained_model_name_or_path"),Lut.forEach(t),Mar=r(U3,":"),U3.forEach(t),Ear=i(fl),j=n(fl,"UL",{});var D=s(j);w6=n(D,"LI",{});var n$e=s(w6);V_e=n(n$e,"STRONG",{});var xut=s(V_e);Car=r(xut,"albert"),xut.forEach(t),war=r(n$e," \u2014 "),az=n(n$e,"A",{href:!0});var $ut=s(az);Aar=r($ut,"TFAlbertModel"),$ut.forEach(t),yar=r(n$e," (ALBERT model)"),n$e.forEach(t),Lar=i(D),A6=n(D,"LI",{});var s$e=s(A6);X_e=n(s$e,"STRONG",{});var kut=s(X_e);xar=r(kut,"bart"),kut.forEach(t),$ar=r(s$e," \u2014 "),nz=n(s$e,"A",{href:!0});var Sut=s(nz);kar=r(Sut,"TFBartModel"),Sut.forEach(t),Sar=r(s$e," (BART model)"),s$e.forEach(t),Rar=i(D),y6=n(D,"LI",{});var l$e=s(y6);z_e=n(l$e,"STRONG",{});var Rut=s(z_e);Bar=r(Rut,"bert"),Rut.forEach(t),Par=r(l$e," \u2014 "),sz=n(l$e,"A",{href:!0});var But=s(sz);Iar=r(But,"TFBertModel"),But.forEach(t),qar=r(l$e," (BERT model)"),l$e.forEach(t),Nar=i(D),L6=n(D,"LI",{});var i$e=s(L6);Q_e=n(i$e,"STRONG",{});var Put=s(Q_e);jar=r(Put,"blenderbot"),Put.forEach(t),Dar=r(i$e," \u2014 "),lz=n(i$e,"A",{href:!0});var Iut=s(lz);Gar=r(Iut,"TFBlenderbotModel"),Iut.forEach(t),Oar=r(i$e," (Blenderbot model)"),i$e.forEach(t),Var=i(D),x6=n(D,"LI",{});var d$e=s(x6);W_e=n(d$e,"STRONG",{});var qut=s(W_e);Xar=r(qut,"blenderbot-small"),qut.forEach(t),zar=r(d$e," \u2014 "),iz=n(d$e,"A",{href:!0});var Nut=s(iz);Qar=r(Nut,"TFBlenderbotSmallModel"),Nut.forEach(t),War=r(d$e," (BlenderbotSmall model)"),d$e.forEach(t),Har=i(D),$6=n(D,"LI",{});var c$e=s($6);H_e=n(c$e,"STRONG",{});var jut=s(H_e);Uar=r(jut,"camembert"),jut.forEach(t),Jar=r(c$e," \u2014 "),dz=n(c$e,"A",{href:!0});var Dut=s(dz);Yar=r(Dut,"TFCamembertModel"),Dut.forEach(t),Kar=r(c$e," (CamemBERT model)"),c$e.forEach(t),Zar=i(D),k6=n(D,"LI",{});var f$e=s(k6);U_e=n(f$e,"STRONG",{});var Gut=s(U_e);enr=r(Gut,"clip"),Gut.forEach(t),onr=r(f$e," \u2014 "),cz=n(f$e,"A",{href:!0});var Out=s(cz);rnr=r(Out,"TFCLIPModel"),Out.forEach(t),tnr=r(f$e," (CLIP model)"),f$e.forEach(t),anr=i(D),S6=n(D,"LI",{});var m$e=s(S6);J_e=n(m$e,"STRONG",{});var Vut=s(J_e);nnr=r(Vut,"convbert"),Vut.forEach(t),snr=r(m$e," \u2014 "),fz=n(m$e,"A",{href:!0});var Xut=s(fz);lnr=r(Xut,"TFConvBertModel"),Xut.forEach(t),inr=r(m$e," (ConvBERT model)"),m$e.forEach(t),dnr=i(D),R6=n(D,"LI",{});var g$e=s(R6);Y_e=n(g$e,"STRONG",{});var zut=s(Y_e);cnr=r(zut,"convnext"),zut.forEach(t),fnr=r(g$e," \u2014 "),mz=n(g$e,"A",{href:!0});var Qut=s(mz);mnr=r(Qut,"TFConvNextModel"),Qut.forEach(t),gnr=r(g$e," (ConvNext model)"),g$e.forEach(t),hnr=i(D),B6=n(D,"LI",{});var h$e=s(B6);K_e=n(h$e,"STRONG",{});var Wut=s(K_e);pnr=r(Wut,"ctrl"),Wut.forEach(t),unr=r(h$e," \u2014 "),gz=n(h$e,"A",{href:!0});var Hut=s(gz);_nr=r(Hut,"TFCTRLModel"),Hut.forEach(t),bnr=r(h$e," (CTRL model)"),h$e.forEach(t),vnr=i(D),P6=n(D,"LI",{});var p$e=s(P6);Z_e=n(p$e,"STRONG",{});var Uut=s(Z_e);Fnr=r(Uut,"data2vec-vision"),Uut.forEach(t),Tnr=r(p$e," \u2014 "),hz=n(p$e,"A",{href:!0});var Jut=s(hz);Mnr=r(Jut,"TFData2VecVisionModel"),Jut.forEach(t),Enr=r(p$e," (Data2VecVision model)"),p$e.forEach(t),Cnr=i(D),I6=n(D,"LI",{});var u$e=s(I6);e0e=n(u$e,"STRONG",{});var Yut=s(e0e);wnr=r(Yut,"deberta"),Yut.forEach(t),Anr=r(u$e," \u2014 "),pz=n(u$e,"A",{href:!0});var Kut=s(pz);ynr=r(Kut,"TFDebertaModel"),Kut.forEach(t),Lnr=r(u$e," (DeBERTa model)"),u$e.forEach(t),xnr=i(D),q6=n(D,"LI",{});var _$e=s(q6);o0e=n(_$e,"STRONG",{});var Zut=s(o0e);$nr=r(Zut,"deberta-v2"),Zut.forEach(t),knr=r(_$e," \u2014 "),uz=n(_$e,"A",{href:!0});var e_t=s(uz);Snr=r(e_t,"TFDebertaV2Model"),e_t.forEach(t),Rnr=r(_$e," (DeBERTa-v2 model)"),_$e.forEach(t),Bnr=i(D),N6=n(D,"LI",{});var b$e=s(N6);r0e=n(b$e,"STRONG",{});var o_t=s(r0e);Pnr=r(o_t,"distilbert"),o_t.forEach(t),Inr=r(b$e," \u2014 "),_z=n(b$e,"A",{href:!0});var r_t=s(_z);qnr=r(r_t,"TFDistilBertModel"),r_t.forEach(t),Nnr=r(b$e," (DistilBERT model)"),b$e.forEach(t),jnr=i(D),j6=n(D,"LI",{});var v$e=s(j6);t0e=n(v$e,"STRONG",{});var t_t=s(t0e);Dnr=r(t_t,"dpr"),t_t.forEach(t),Gnr=r(v$e," \u2014 "),bz=n(v$e,"A",{href:!0});var a_t=s(bz);Onr=r(a_t,"TFDPRQuestionEncoder"),a_t.forEach(t),Vnr=r(v$e," (DPR model)"),v$e.forEach(t),Xnr=i(D),D6=n(D,"LI",{});var F$e=s(D6);a0e=n(F$e,"STRONG",{});var n_t=s(a0e);znr=r(n_t,"electra"),n_t.forEach(t),Qnr=r(F$e," \u2014 "),vz=n(F$e,"A",{href:!0});var s_t=s(vz);Wnr=r(s_t,"TFElectraModel"),s_t.forEach(t),Hnr=r(F$e," (ELECTRA model)"),F$e.forEach(t),Unr=i(D),G6=n(D,"LI",{});var T$e=s(G6);n0e=n(T$e,"STRONG",{});var l_t=s(n0e);Jnr=r(l_t,"flaubert"),l_t.forEach(t),Ynr=r(T$e," \u2014 "),Fz=n(T$e,"A",{href:!0});var i_t=s(Fz);Knr=r(i_t,"TFFlaubertModel"),i_t.forEach(t),Znr=r(T$e," (FlauBERT model)"),T$e.forEach(t),esr=i(D),Ps=n(D,"LI",{});var g$=s(Ps);s0e=n(g$,"STRONG",{});var d_t=s(s0e);osr=r(d_t,"funnel"),d_t.forEach(t),rsr=r(g$," \u2014 "),Tz=n(g$,"A",{href:!0});var c_t=s(Tz);tsr=r(c_t,"TFFunnelModel"),c_t.forEach(t),asr=r(g$," or "),Mz=n(g$,"A",{href:!0});var f_t=s(Mz);nsr=r(f_t,"TFFunnelBaseModel"),f_t.forEach(t),ssr=r(g$," (Funnel Transformer model)"),g$.forEach(t),lsr=i(D),O6=n(D,"LI",{});var M$e=s(O6);l0e=n(M$e,"STRONG",{});var m_t=s(l0e);isr=r(m_t,"gpt2"),m_t.forEach(t),dsr=r(M$e," \u2014 "),Ez=n(M$e,"A",{href:!0});var g_t=s(Ez);csr=r(g_t,"TFGPT2Model"),g_t.forEach(t),fsr=r(M$e," (OpenAI GPT-2 model)"),M$e.forEach(t),msr=i(D),V6=n(D,"LI",{});var E$e=s(V6);i0e=n(E$e,"STRONG",{});var h_t=s(i0e);gsr=r(h_t,"gptj"),h_t.forEach(t),hsr=r(E$e," \u2014 "),Cz=n(E$e,"A",{href:!0});var p_t=s(Cz);psr=r(p_t,"TFGPTJModel"),p_t.forEach(t),usr=r(E$e," (GPT-J model)"),E$e.forEach(t),_sr=i(D),X6=n(D,"LI",{});var C$e=s(X6);d0e=n(C$e,"STRONG",{});var u_t=s(d0e);bsr=r(u_t,"hubert"),u_t.forEach(t),vsr=r(C$e," \u2014 "),wz=n(C$e,"A",{href:!0});var __t=s(wz);Fsr=r(__t,"TFHubertModel"),__t.forEach(t),Tsr=r(C$e," (Hubert model)"),C$e.forEach(t),Msr=i(D),z6=n(D,"LI",{});var w$e=s(z6);c0e=n(w$e,"STRONG",{});var b_t=s(c0e);Esr=r(b_t,"layoutlm"),b_t.forEach(t),Csr=r(w$e," \u2014 "),Az=n(w$e,"A",{href:!0});var v_t=s(Az);wsr=r(v_t,"TFLayoutLMModel"),v_t.forEach(t),Asr=r(w$e," (LayoutLM model)"),w$e.forEach(t),ysr=i(D),Q6=n(D,"LI",{});var A$e=s(Q6);f0e=n(A$e,"STRONG",{});var F_t=s(f0e);Lsr=r(F_t,"led"),F_t.forEach(t),xsr=r(A$e," \u2014 "),yz=n(A$e,"A",{href:!0});var T_t=s(yz);$sr=r(T_t,"TFLEDModel"),T_t.forEach(t),ksr=r(A$e," (LED model)"),A$e.forEach(t),Ssr=i(D),W6=n(D,"LI",{});var y$e=s(W6);m0e=n(y$e,"STRONG",{});var M_t=s(m0e);Rsr=r(M_t,"longformer"),M_t.forEach(t),Bsr=r(y$e," \u2014 "),Lz=n(y$e,"A",{href:!0});var E_t=s(Lz);Psr=r(E_t,"TFLongformerModel"),E_t.forEach(t),Isr=r(y$e," (Longformer model)"),y$e.forEach(t),qsr=i(D),H6=n(D,"LI",{});var L$e=s(H6);g0e=n(L$e,"STRONG",{});var C_t=s(g0e);Nsr=r(C_t,"lxmert"),C_t.forEach(t),jsr=r(L$e," \u2014 "),xz=n(L$e,"A",{href:!0});var w_t=s(xz);Dsr=r(w_t,"TFLxmertModel"),w_t.forEach(t),Gsr=r(L$e," (LXMERT model)"),L$e.forEach(t),Osr=i(D),U6=n(D,"LI",{});var x$e=s(U6);h0e=n(x$e,"STRONG",{});var A_t=s(h0e);Vsr=r(A_t,"marian"),A_t.forEach(t),Xsr=r(x$e," \u2014 "),$z=n(x$e,"A",{href:!0});var y_t=s($z);zsr=r(y_t,"TFMarianModel"),y_t.forEach(t),Qsr=r(x$e," (Marian model)"),x$e.forEach(t),Wsr=i(D),J6=n(D,"LI",{});var $$e=s(J6);p0e=n($$e,"STRONG",{});var L_t=s(p0e);Hsr=r(L_t,"mbart"),L_t.forEach(t),Usr=r($$e," \u2014 "),kz=n($$e,"A",{href:!0});var x_t=s(kz);Jsr=r(x_t,"TFMBartModel"),x_t.forEach(t),Ysr=r($$e," (mBART model)"),$$e.forEach(t),Ksr=i(D),Y6=n(D,"LI",{});var k$e=s(Y6);u0e=n(k$e,"STRONG",{});var $_t=s(u0e);Zsr=r($_t,"mobilebert"),$_t.forEach(t),elr=r(k$e," \u2014 "),Sz=n(k$e,"A",{href:!0});var k_t=s(Sz);olr=r(k_t,"TFMobileBertModel"),k_t.forEach(t),rlr=r(k$e," (MobileBERT model)"),k$e.forEach(t),tlr=i(D),K6=n(D,"LI",{});var S$e=s(K6);_0e=n(S$e,"STRONG",{});var S_t=s(_0e);alr=r(S_t,"mpnet"),S_t.forEach(t),nlr=r(S$e," \u2014 "),Rz=n(S$e,"A",{href:!0});var R_t=s(Rz);slr=r(R_t,"TFMPNetModel"),R_t.forEach(t),llr=r(S$e," (MPNet model)"),S$e.forEach(t),ilr=i(D),Z6=n(D,"LI",{});var R$e=s(Z6);b0e=n(R$e,"STRONG",{});var B_t=s(b0e);dlr=r(B_t,"mt5"),B_t.forEach(t),clr=r(R$e," \u2014 "),Bz=n(R$e,"A",{href:!0});var P_t=s(Bz);flr=r(P_t,"TFMT5Model"),P_t.forEach(t),mlr=r(R$e," (mT5 model)"),R$e.forEach(t),glr=i(D),eT=n(D,"LI",{});var B$e=s(eT);v0e=n(B$e,"STRONG",{});var I_t=s(v0e);hlr=r(I_t,"openai-gpt"),I_t.forEach(t),plr=r(B$e," \u2014 "),Pz=n(B$e,"A",{href:!0});var q_t=s(Pz);ulr=r(q_t,"TFOpenAIGPTModel"),q_t.forEach(t),_lr=r(B$e," (OpenAI GPT model)"),B$e.forEach(t),blr=i(D),oT=n(D,"LI",{});var P$e=s(oT);F0e=n(P$e,"STRONG",{});var N_t=s(F0e);vlr=r(N_t,"pegasus"),N_t.forEach(t),Flr=r(P$e," \u2014 "),Iz=n(P$e,"A",{href:!0});var j_t=s(Iz);Tlr=r(j_t,"TFPegasusModel"),j_t.forEach(t),Mlr=r(P$e," (Pegasus model)"),P$e.forEach(t),Elr=i(D),rT=n(D,"LI",{});var I$e=s(rT);T0e=n(I$e,"STRONG",{});var D_t=s(T0e);Clr=r(D_t,"rembert"),D_t.forEach(t),wlr=r(I$e," \u2014 "),qz=n(I$e,"A",{href:!0});var G_t=s(qz);Alr=r(G_t,"TFRemBertModel"),G_t.forEach(t),ylr=r(I$e," (RemBERT model)"),I$e.forEach(t),Llr=i(D),tT=n(D,"LI",{});var q$e=s(tT);M0e=n(q$e,"STRONG",{});var O_t=s(M0e);xlr=r(O_t,"roberta"),O_t.forEach(t),$lr=r(q$e," \u2014 "),Nz=n(q$e,"A",{href:!0});var V_t=s(Nz);klr=r(V_t,"TFRobertaModel"),V_t.forEach(t),Slr=r(q$e," (RoBERTa model)"),q$e.forEach(t),Rlr=i(D),aT=n(D,"LI",{});var N$e=s(aT);E0e=n(N$e,"STRONG",{});var X_t=s(E0e);Blr=r(X_t,"roformer"),X_t.forEach(t),Plr=r(N$e," \u2014 "),jz=n(N$e,"A",{href:!0});var z_t=s(jz);Ilr=r(z_t,"TFRoFormerModel"),z_t.forEach(t),qlr=r(N$e," (RoFormer model)"),N$e.forEach(t),Nlr=i(D),nT=n(D,"LI",{});var j$e=s(nT);C0e=n(j$e,"STRONG",{});var Q_t=s(C0e);jlr=r(Q_t,"speech_to_text"),Q_t.forEach(t),Dlr=r(j$e," \u2014 "),Dz=n(j$e,"A",{href:!0});var W_t=s(Dz);Glr=r(W_t,"TFSpeech2TextModel"),W_t.forEach(t),Olr=r(j$e," (Speech2Text model)"),j$e.forEach(t),Vlr=i(D),sT=n(D,"LI",{});var D$e=s(sT);w0e=n(D$e,"STRONG",{});var H_t=s(w0e);Xlr=r(H_t,"t5"),H_t.forEach(t),zlr=r(D$e," \u2014 "),Gz=n(D$e,"A",{href:!0});var U_t=s(Gz);Qlr=r(U_t,"TFT5Model"),U_t.forEach(t),Wlr=r(D$e," (T5 model)"),D$e.forEach(t),Hlr=i(D),lT=n(D,"LI",{});var G$e=s(lT);A0e=n(G$e,"STRONG",{});var J_t=s(A0e);Ulr=r(J_t,"tapas"),J_t.forEach(t),Jlr=r(G$e," \u2014 "),Oz=n(G$e,"A",{href:!0});var Y_t=s(Oz);Ylr=r(Y_t,"TFTapasModel"),Y_t.forEach(t),Klr=r(G$e," (TAPAS model)"),G$e.forEach(t),Zlr=i(D),iT=n(D,"LI",{});var O$e=s(iT);y0e=n(O$e,"STRONG",{});var K_t=s(y0e);eir=r(K_t,"transfo-xl"),K_t.forEach(t),oir=r(O$e," \u2014 "),Vz=n(O$e,"A",{href:!0});var Z_t=s(Vz);rir=r(Z_t,"TFTransfoXLModel"),Z_t.forEach(t),tir=r(O$e," (Transformer-XL model)"),O$e.forEach(t),air=i(D),dT=n(D,"LI",{});var V$e=s(dT);L0e=n(V$e,"STRONG",{});var e0t=s(L0e);nir=r(e0t,"vit"),e0t.forEach(t),sir=r(V$e," \u2014 "),Xz=n(V$e,"A",{href:!0});var o0t=s(Xz);lir=r(o0t,"TFViTModel"),o0t.forEach(t),iir=r(V$e," (ViT model)"),V$e.forEach(t),dir=i(D),cT=n(D,"LI",{});var X$e=s(cT);x0e=n(X$e,"STRONG",{});var r0t=s(x0e);cir=r(r0t,"vit_mae"),r0t.forEach(t),fir=r(X$e," \u2014 "),zz=n(X$e,"A",{href:!0});var t0t=s(zz);mir=r(t0t,"TFViTMAEModel"),t0t.forEach(t),gir=r(X$e," (ViTMAE model)"),X$e.forEach(t),hir=i(D),fT=n(D,"LI",{});var z$e=s(fT);$0e=n(z$e,"STRONG",{});var a0t=s($0e);pir=r(a0t,"wav2vec2"),a0t.forEach(t),uir=r(z$e," \u2014 "),Qz=n(z$e,"A",{href:!0});var n0t=s(Qz);_ir=r(n0t,"TFWav2Vec2Model"),n0t.forEach(t),bir=r(z$e," (Wav2Vec2 model)"),z$e.forEach(t),vir=i(D),mT=n(D,"LI",{});var Q$e=s(mT);k0e=n(Q$e,"STRONG",{});var s0t=s(k0e);Fir=r(s0t,"xlm"),s0t.forEach(t),Tir=r(Q$e," \u2014 "),Wz=n(Q$e,"A",{href:!0});var l0t=s(Wz);Mir=r(l0t,"TFXLMModel"),l0t.forEach(t),Eir=r(Q$e," (XLM model)"),Q$e.forEach(t),Cir=i(D),gT=n(D,"LI",{});var W$e=s(gT);S0e=n(W$e,"STRONG",{});var i0t=s(S0e);wir=r(i0t,"xlm-roberta"),i0t.forEach(t),Air=r(W$e," \u2014 "),Hz=n(W$e,"A",{href:!0});var d0t=s(Hz);yir=r(d0t,"TFXLMRobertaModel"),d0t.forEach(t),Lir=r(W$e," (XLM-RoBERTa model)"),W$e.forEach(t),xir=i(D),hT=n(D,"LI",{});var H$e=s(hT);R0e=n(H$e,"STRONG",{});var c0t=s(R0e);$ir=r(c0t,"xlnet"),c0t.forEach(t),kir=r(H$e," \u2014 "),Uz=n(H$e,"A",{href:!0});var f0t=s(Uz);Sir=r(f0t,"TFXLNetModel"),f0t.forEach(t),Rir=r(H$e," (XLNet model)"),H$e.forEach(t),D.forEach(t),Bir=i(fl),T(pT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),WIe=i(f),Gd=n(f,"H2",{class:!0});var ZNe=s(Gd);uT=n(ZNe,"A",{id:!0,class:!0,href:!0});var m0t=s(uT);B0e=n(m0t,"SPAN",{});var g0t=s(B0e);T(IL.$$.fragment,g0t),g0t.forEach(t),m0t.forEach(t),Pir=i(ZNe),P0e=n(ZNe,"SPAN",{});var h0t=s(P0e);Iir=r(h0t,"TFAutoModelForPreTraining"),h0t.forEach(t),ZNe.forEach(t),HIe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(qL.$$.fragment,ml),qir=i(ml),Od=n(ml,"P",{});var aZ=s(Od);Nir=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jz=n(aZ,"A",{href:!0});var p0t=s(Jz);jir=r(p0t,"from_pretrained()"),p0t.forEach(t),Dir=r(aZ," class method or the "),Yz=n(aZ,"A",{href:!0});var u0t=s(Yz);Gir=r(u0t,"from_config()"),u0t.forEach(t),Oir=r(aZ,` class
method.`),aZ.forEach(t),Vir=i(ml),NL=n(ml,"P",{});var eje=s(NL);Xir=r(eje,"This class cannot be instantiated directly using "),I0e=n(eje,"CODE",{});var _0t=s(I0e);zir=r(_0t,"__init__()"),_0t.forEach(t),Qir=r(eje," (throws an error)."),eje.forEach(t),Wir=i(ml),At=n(ml,"DIV",{class:!0});var J3=s(At);T(jL.$$.fragment,J3),Hir=i(J3),q0e=n(J3,"P",{});var b0t=s(q0e);Uir=r(b0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),b0t.forEach(t),Jir=i(J3),Vd=n(J3,"P",{});var nZ=s(Vd);Yir=r(nZ,`Note:
Loading a model from its configuration file does `),N0e=n(nZ,"STRONG",{});var v0t=s(N0e);Kir=r(v0t,"not"),v0t.forEach(t),Zir=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(nZ,"A",{href:!0});var F0t=s(Kz);edr=r(F0t,"from_pretrained()"),F0t.forEach(t),odr=r(nZ," to load the model weights."),nZ.forEach(t),rdr=i(J3),T(_T.$$.fragment,J3),J3.forEach(t),tdr=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(DL.$$.fragment,gl),adr=i(gl),j0e=n(gl,"P",{});var T0t=s(j0e);ndr=r(T0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),T0t.forEach(t),sdr=i(gl),Za=n(gl,"P",{});var Y3=s(Za);ldr=r(Y3,"The model class to instantiate is selected based on the "),D0e=n(Y3,"CODE",{});var M0t=s(D0e);idr=r(M0t,"model_type"),M0t.forEach(t),ddr=r(Y3,` property of the config object (either
passed as an argument or loaded from `),G0e=n(Y3,"CODE",{});var E0t=s(G0e);cdr=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),fdr=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=n(Y3,"CODE",{});var C0t=s(O0e);mdr=r(C0t,"pretrained_model_name_or_path"),C0t.forEach(t),gdr=r(Y3,":"),Y3.forEach(t),hdr=i(gl),se=n(gl,"UL",{});var le=s(se);bT=n(le,"LI",{});var U$e=s(bT);V0e=n(U$e,"STRONG",{});var w0t=s(V0e);pdr=r(w0t,"albert"),w0t.forEach(t),udr=r(U$e," \u2014 "),Zz=n(U$e,"A",{href:!0});var A0t=s(Zz);_dr=r(A0t,"TFAlbertForPreTraining"),A0t.forEach(t),bdr=r(U$e," (ALBERT model)"),U$e.forEach(t),vdr=i(le),vT=n(le,"LI",{});var J$e=s(vT);X0e=n(J$e,"STRONG",{});var y0t=s(X0e);Fdr=r(y0t,"bart"),y0t.forEach(t),Tdr=r(J$e," \u2014 "),eQ=n(J$e,"A",{href:!0});var L0t=s(eQ);Mdr=r(L0t,"TFBartForConditionalGeneration"),L0t.forEach(t),Edr=r(J$e," (BART model)"),J$e.forEach(t),Cdr=i(le),FT=n(le,"LI",{});var Y$e=s(FT);z0e=n(Y$e,"STRONG",{});var x0t=s(z0e);wdr=r(x0t,"bert"),x0t.forEach(t),Adr=r(Y$e," \u2014 "),oQ=n(Y$e,"A",{href:!0});var $0t=s(oQ);ydr=r($0t,"TFBertForPreTraining"),$0t.forEach(t),Ldr=r(Y$e," (BERT model)"),Y$e.forEach(t),xdr=i(le),TT=n(le,"LI",{});var K$e=s(TT);Q0e=n(K$e,"STRONG",{});var k0t=s(Q0e);$dr=r(k0t,"camembert"),k0t.forEach(t),kdr=r(K$e," \u2014 "),rQ=n(K$e,"A",{href:!0});var S0t=s(rQ);Sdr=r(S0t,"TFCamembertForMaskedLM"),S0t.forEach(t),Rdr=r(K$e," (CamemBERT model)"),K$e.forEach(t),Bdr=i(le),MT=n(le,"LI",{});var Z$e=s(MT);W0e=n(Z$e,"STRONG",{});var R0t=s(W0e);Pdr=r(R0t,"ctrl"),R0t.forEach(t),Idr=r(Z$e," \u2014 "),tQ=n(Z$e,"A",{href:!0});var B0t=s(tQ);qdr=r(B0t,"TFCTRLLMHeadModel"),B0t.forEach(t),Ndr=r(Z$e," (CTRL model)"),Z$e.forEach(t),jdr=i(le),ET=n(le,"LI",{});var eke=s(ET);H0e=n(eke,"STRONG",{});var P0t=s(H0e);Ddr=r(P0t,"distilbert"),P0t.forEach(t),Gdr=r(eke," \u2014 "),aQ=n(eke,"A",{href:!0});var I0t=s(aQ);Odr=r(I0t,"TFDistilBertForMaskedLM"),I0t.forEach(t),Vdr=r(eke," (DistilBERT model)"),eke.forEach(t),Xdr=i(le),CT=n(le,"LI",{});var oke=s(CT);U0e=n(oke,"STRONG",{});var q0t=s(U0e);zdr=r(q0t,"electra"),q0t.forEach(t),Qdr=r(oke," \u2014 "),nQ=n(oke,"A",{href:!0});var N0t=s(nQ);Wdr=r(N0t,"TFElectraForPreTraining"),N0t.forEach(t),Hdr=r(oke," (ELECTRA model)"),oke.forEach(t),Udr=i(le),wT=n(le,"LI",{});var rke=s(wT);J0e=n(rke,"STRONG",{});var j0t=s(J0e);Jdr=r(j0t,"flaubert"),j0t.forEach(t),Ydr=r(rke," \u2014 "),sQ=n(rke,"A",{href:!0});var D0t=s(sQ);Kdr=r(D0t,"TFFlaubertWithLMHeadModel"),D0t.forEach(t),Zdr=r(rke," (FlauBERT model)"),rke.forEach(t),ecr=i(le),AT=n(le,"LI",{});var tke=s(AT);Y0e=n(tke,"STRONG",{});var G0t=s(Y0e);ocr=r(G0t,"funnel"),G0t.forEach(t),rcr=r(tke," \u2014 "),lQ=n(tke,"A",{href:!0});var O0t=s(lQ);tcr=r(O0t,"TFFunnelForPreTraining"),O0t.forEach(t),acr=r(tke," (Funnel Transformer model)"),tke.forEach(t),ncr=i(le),yT=n(le,"LI",{});var ake=s(yT);K0e=n(ake,"STRONG",{});var V0t=s(K0e);scr=r(V0t,"gpt2"),V0t.forEach(t),lcr=r(ake," \u2014 "),iQ=n(ake,"A",{href:!0});var X0t=s(iQ);icr=r(X0t,"TFGPT2LMHeadModel"),X0t.forEach(t),dcr=r(ake," (OpenAI GPT-2 model)"),ake.forEach(t),ccr=i(le),LT=n(le,"LI",{});var nke=s(LT);Z0e=n(nke,"STRONG",{});var z0t=s(Z0e);fcr=r(z0t,"layoutlm"),z0t.forEach(t),mcr=r(nke," \u2014 "),dQ=n(nke,"A",{href:!0});var Q0t=s(dQ);gcr=r(Q0t,"TFLayoutLMForMaskedLM"),Q0t.forEach(t),hcr=r(nke," (LayoutLM model)"),nke.forEach(t),pcr=i(le),xT=n(le,"LI",{});var ske=s(xT);e1e=n(ske,"STRONG",{});var W0t=s(e1e);ucr=r(W0t,"lxmert"),W0t.forEach(t),_cr=r(ske," \u2014 "),cQ=n(ske,"A",{href:!0});var H0t=s(cQ);bcr=r(H0t,"TFLxmertForPreTraining"),H0t.forEach(t),vcr=r(ske," (LXMERT model)"),ske.forEach(t),Fcr=i(le),$T=n(le,"LI",{});var lke=s($T);o1e=n(lke,"STRONG",{});var U0t=s(o1e);Tcr=r(U0t,"mobilebert"),U0t.forEach(t),Mcr=r(lke," \u2014 "),fQ=n(lke,"A",{href:!0});var J0t=s(fQ);Ecr=r(J0t,"TFMobileBertForPreTraining"),J0t.forEach(t),Ccr=r(lke," (MobileBERT model)"),lke.forEach(t),wcr=i(le),kT=n(le,"LI",{});var ike=s(kT);r1e=n(ike,"STRONG",{});var Y0t=s(r1e);Acr=r(Y0t,"mpnet"),Y0t.forEach(t),ycr=r(ike," \u2014 "),mQ=n(ike,"A",{href:!0});var K0t=s(mQ);Lcr=r(K0t,"TFMPNetForMaskedLM"),K0t.forEach(t),xcr=r(ike," (MPNet model)"),ike.forEach(t),$cr=i(le),ST=n(le,"LI",{});var dke=s(ST);t1e=n(dke,"STRONG",{});var Z0t=s(t1e);kcr=r(Z0t,"openai-gpt"),Z0t.forEach(t),Scr=r(dke," \u2014 "),gQ=n(dke,"A",{href:!0});var e1t=s(gQ);Rcr=r(e1t,"TFOpenAIGPTLMHeadModel"),e1t.forEach(t),Bcr=r(dke," (OpenAI GPT model)"),dke.forEach(t),Pcr=i(le),RT=n(le,"LI",{});var cke=s(RT);a1e=n(cke,"STRONG",{});var o1t=s(a1e);Icr=r(o1t,"roberta"),o1t.forEach(t),qcr=r(cke," \u2014 "),hQ=n(cke,"A",{href:!0});var r1t=s(hQ);Ncr=r(r1t,"TFRobertaForMaskedLM"),r1t.forEach(t),jcr=r(cke," (RoBERTa model)"),cke.forEach(t),Dcr=i(le),BT=n(le,"LI",{});var fke=s(BT);n1e=n(fke,"STRONG",{});var t1t=s(n1e);Gcr=r(t1t,"t5"),t1t.forEach(t),Ocr=r(fke," \u2014 "),pQ=n(fke,"A",{href:!0});var a1t=s(pQ);Vcr=r(a1t,"TFT5ForConditionalGeneration"),a1t.forEach(t),Xcr=r(fke," (T5 model)"),fke.forEach(t),zcr=i(le),PT=n(le,"LI",{});var mke=s(PT);s1e=n(mke,"STRONG",{});var n1t=s(s1e);Qcr=r(n1t,"tapas"),n1t.forEach(t),Wcr=r(mke," \u2014 "),uQ=n(mke,"A",{href:!0});var s1t=s(uQ);Hcr=r(s1t,"TFTapasForMaskedLM"),s1t.forEach(t),Ucr=r(mke," (TAPAS model)"),mke.forEach(t),Jcr=i(le),IT=n(le,"LI",{});var gke=s(IT);l1e=n(gke,"STRONG",{});var l1t=s(l1e);Ycr=r(l1t,"transfo-xl"),l1t.forEach(t),Kcr=r(gke," \u2014 "),_Q=n(gke,"A",{href:!0});var i1t=s(_Q);Zcr=r(i1t,"TFTransfoXLLMHeadModel"),i1t.forEach(t),efr=r(gke," (Transformer-XL model)"),gke.forEach(t),ofr=i(le),qT=n(le,"LI",{});var hke=s(qT);i1e=n(hke,"STRONG",{});var d1t=s(i1e);rfr=r(d1t,"vit_mae"),d1t.forEach(t),tfr=r(hke," \u2014 "),bQ=n(hke,"A",{href:!0});var c1t=s(bQ);afr=r(c1t,"TFViTMAEForPreTraining"),c1t.forEach(t),nfr=r(hke," (ViTMAE model)"),hke.forEach(t),sfr=i(le),NT=n(le,"LI",{});var pke=s(NT);d1e=n(pke,"STRONG",{});var f1t=s(d1e);lfr=r(f1t,"xlm"),f1t.forEach(t),ifr=r(pke," \u2014 "),vQ=n(pke,"A",{href:!0});var m1t=s(vQ);dfr=r(m1t,"TFXLMWithLMHeadModel"),m1t.forEach(t),cfr=r(pke," (XLM model)"),pke.forEach(t),ffr=i(le),jT=n(le,"LI",{});var uke=s(jT);c1e=n(uke,"STRONG",{});var g1t=s(c1e);mfr=r(g1t,"xlm-roberta"),g1t.forEach(t),gfr=r(uke," \u2014 "),FQ=n(uke,"A",{href:!0});var h1t=s(FQ);hfr=r(h1t,"TFXLMRobertaForMaskedLM"),h1t.forEach(t),pfr=r(uke," (XLM-RoBERTa model)"),uke.forEach(t),ufr=i(le),DT=n(le,"LI",{});var _ke=s(DT);f1e=n(_ke,"STRONG",{});var p1t=s(f1e);_fr=r(p1t,"xlnet"),p1t.forEach(t),bfr=r(_ke," \u2014 "),TQ=n(_ke,"A",{href:!0});var u1t=s(TQ);vfr=r(u1t,"TFXLNetLMHeadModel"),u1t.forEach(t),Ffr=r(_ke," (XLNet model)"),_ke.forEach(t),le.forEach(t),Tfr=i(gl),T(GT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),UIe=i(f),Xd=n(f,"H2",{class:!0});var oje=s(Xd);OT=n(oje,"A",{id:!0,class:!0,href:!0});var _1t=s(OT);m1e=n(_1t,"SPAN",{});var b1t=s(m1e);T(GL.$$.fragment,b1t),b1t.forEach(t),_1t.forEach(t),Mfr=i(oje),g1e=n(oje,"SPAN",{});var v1t=s(g1e);Efr=r(v1t,"TFAutoModelForCausalLM"),v1t.forEach(t),oje.forEach(t),JIe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(OL.$$.fragment,hl),Cfr=i(hl),zd=n(hl,"P",{});var sZ=s(zd);wfr=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MQ=n(sZ,"A",{href:!0});var F1t=s(MQ);Afr=r(F1t,"from_pretrained()"),F1t.forEach(t),yfr=r(sZ," class method or the "),EQ=n(sZ,"A",{href:!0});var T1t=s(EQ);Lfr=r(T1t,"from_config()"),T1t.forEach(t),xfr=r(sZ,` class
method.`),sZ.forEach(t),$fr=i(hl),VL=n(hl,"P",{});var rje=s(VL);kfr=r(rje,"This class cannot be instantiated directly using "),h1e=n(rje,"CODE",{});var M1t=s(h1e);Sfr=r(M1t,"__init__()"),M1t.forEach(t),Rfr=r(rje," (throws an error)."),rje.forEach(t),Bfr=i(hl),yt=n(hl,"DIV",{class:!0});var K3=s(yt);T(XL.$$.fragment,K3),Pfr=i(K3),p1e=n(K3,"P",{});var E1t=s(p1e);Ifr=r(E1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E1t.forEach(t),qfr=i(K3),Qd=n(K3,"P",{});var lZ=s(Qd);Nfr=r(lZ,`Note:
Loading a model from its configuration file does `),u1e=n(lZ,"STRONG",{});var C1t=s(u1e);jfr=r(C1t,"not"),C1t.forEach(t),Dfr=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(lZ,"A",{href:!0});var w1t=s(CQ);Gfr=r(w1t,"from_pretrained()"),w1t.forEach(t),Ofr=r(lZ," to load the model weights."),lZ.forEach(t),Vfr=i(K3),T(VT.$$.fragment,K3),K3.forEach(t),Xfr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(zL.$$.fragment,pl),zfr=i(pl),_1e=n(pl,"P",{});var A1t=s(_1e);Qfr=r(A1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),A1t.forEach(t),Wfr=i(pl),en=n(pl,"P",{});var Z3=s(en);Hfr=r(Z3,"The model class to instantiate is selected based on the "),b1e=n(Z3,"CODE",{});var y1t=s(b1e);Ufr=r(y1t,"model_type"),y1t.forEach(t),Jfr=r(Z3,` property of the config object (either
passed as an argument or loaded from `),v1e=n(Z3,"CODE",{});var L1t=s(v1e);Yfr=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),Kfr=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(Z3,"CODE",{});var x1t=s(F1e);Zfr=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),emr=r(Z3,":"),Z3.forEach(t),omr=i(pl),Te=n(pl,"UL",{});var Ce=s(Te);XT=n(Ce,"LI",{});var bke=s(XT);T1e=n(bke,"STRONG",{});var $1t=s(T1e);rmr=r($1t,"bert"),$1t.forEach(t),tmr=r(bke," \u2014 "),wQ=n(bke,"A",{href:!0});var k1t=s(wQ);amr=r(k1t,"TFBertLMHeadModel"),k1t.forEach(t),nmr=r(bke," (BERT model)"),bke.forEach(t),smr=i(Ce),zT=n(Ce,"LI",{});var vke=s(zT);M1e=n(vke,"STRONG",{});var S1t=s(M1e);lmr=r(S1t,"camembert"),S1t.forEach(t),imr=r(vke," \u2014 "),AQ=n(vke,"A",{href:!0});var R1t=s(AQ);dmr=r(R1t,"TFCamembertForCausalLM"),R1t.forEach(t),cmr=r(vke," (CamemBERT model)"),vke.forEach(t),fmr=i(Ce),QT=n(Ce,"LI",{});var Fke=s(QT);E1e=n(Fke,"STRONG",{});var B1t=s(E1e);mmr=r(B1t,"ctrl"),B1t.forEach(t),gmr=r(Fke," \u2014 "),yQ=n(Fke,"A",{href:!0});var P1t=s(yQ);hmr=r(P1t,"TFCTRLLMHeadModel"),P1t.forEach(t),pmr=r(Fke," (CTRL model)"),Fke.forEach(t),umr=i(Ce),WT=n(Ce,"LI",{});var Tke=s(WT);C1e=n(Tke,"STRONG",{});var I1t=s(C1e);_mr=r(I1t,"gpt2"),I1t.forEach(t),bmr=r(Tke," \u2014 "),LQ=n(Tke,"A",{href:!0});var q1t=s(LQ);vmr=r(q1t,"TFGPT2LMHeadModel"),q1t.forEach(t),Fmr=r(Tke," (OpenAI GPT-2 model)"),Tke.forEach(t),Tmr=i(Ce),HT=n(Ce,"LI",{});var Mke=s(HT);w1e=n(Mke,"STRONG",{});var N1t=s(w1e);Mmr=r(N1t,"gptj"),N1t.forEach(t),Emr=r(Mke," \u2014 "),xQ=n(Mke,"A",{href:!0});var j1t=s(xQ);Cmr=r(j1t,"TFGPTJForCausalLM"),j1t.forEach(t),wmr=r(Mke," (GPT-J model)"),Mke.forEach(t),Amr=i(Ce),UT=n(Ce,"LI",{});var Eke=s(UT);A1e=n(Eke,"STRONG",{});var D1t=s(A1e);ymr=r(D1t,"openai-gpt"),D1t.forEach(t),Lmr=r(Eke," \u2014 "),$Q=n(Eke,"A",{href:!0});var G1t=s($Q);xmr=r(G1t,"TFOpenAIGPTLMHeadModel"),G1t.forEach(t),$mr=r(Eke," (OpenAI GPT model)"),Eke.forEach(t),kmr=i(Ce),JT=n(Ce,"LI",{});var Cke=s(JT);y1e=n(Cke,"STRONG",{});var O1t=s(y1e);Smr=r(O1t,"rembert"),O1t.forEach(t),Rmr=r(Cke," \u2014 "),kQ=n(Cke,"A",{href:!0});var V1t=s(kQ);Bmr=r(V1t,"TFRemBertForCausalLM"),V1t.forEach(t),Pmr=r(Cke," (RemBERT model)"),Cke.forEach(t),Imr=i(Ce),YT=n(Ce,"LI",{});var wke=s(YT);L1e=n(wke,"STRONG",{});var X1t=s(L1e);qmr=r(X1t,"roberta"),X1t.forEach(t),Nmr=r(wke," \u2014 "),SQ=n(wke,"A",{href:!0});var z1t=s(SQ);jmr=r(z1t,"TFRobertaForCausalLM"),z1t.forEach(t),Dmr=r(wke," (RoBERTa model)"),wke.forEach(t),Gmr=i(Ce),KT=n(Ce,"LI",{});var Ake=s(KT);x1e=n(Ake,"STRONG",{});var Q1t=s(x1e);Omr=r(Q1t,"roformer"),Q1t.forEach(t),Vmr=r(Ake," \u2014 "),RQ=n(Ake,"A",{href:!0});var W1t=s(RQ);Xmr=r(W1t,"TFRoFormerForCausalLM"),W1t.forEach(t),zmr=r(Ake," (RoFormer model)"),Ake.forEach(t),Qmr=i(Ce),ZT=n(Ce,"LI",{});var yke=s(ZT);$1e=n(yke,"STRONG",{});var H1t=s($1e);Wmr=r(H1t,"transfo-xl"),H1t.forEach(t),Hmr=r(yke," \u2014 "),BQ=n(yke,"A",{href:!0});var U1t=s(BQ);Umr=r(U1t,"TFTransfoXLLMHeadModel"),U1t.forEach(t),Jmr=r(yke," (Transformer-XL model)"),yke.forEach(t),Ymr=i(Ce),e7=n(Ce,"LI",{});var Lke=s(e7);k1e=n(Lke,"STRONG",{});var J1t=s(k1e);Kmr=r(J1t,"xlm"),J1t.forEach(t),Zmr=r(Lke," \u2014 "),PQ=n(Lke,"A",{href:!0});var Y1t=s(PQ);egr=r(Y1t,"TFXLMWithLMHeadModel"),Y1t.forEach(t),ogr=r(Lke," (XLM model)"),Lke.forEach(t),rgr=i(Ce),o7=n(Ce,"LI",{});var xke=s(o7);S1e=n(xke,"STRONG",{});var K1t=s(S1e);tgr=r(K1t,"xlnet"),K1t.forEach(t),agr=r(xke," \u2014 "),IQ=n(xke,"A",{href:!0});var Z1t=s(IQ);ngr=r(Z1t,"TFXLNetLMHeadModel"),Z1t.forEach(t),sgr=r(xke," (XLNet model)"),xke.forEach(t),Ce.forEach(t),lgr=i(pl),T(r7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),YIe=i(f),Wd=n(f,"H2",{class:!0});var tje=s(Wd);t7=n(tje,"A",{id:!0,class:!0,href:!0});var ebt=s(t7);R1e=n(ebt,"SPAN",{});var obt=s(R1e);T(QL.$$.fragment,obt),obt.forEach(t),ebt.forEach(t),igr=i(tje),B1e=n(tje,"SPAN",{});var rbt=s(B1e);dgr=r(rbt,"TFAutoModelForImageClassification"),rbt.forEach(t),tje.forEach(t),KIe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T(WL.$$.fragment,ul),cgr=i(ul),Hd=n(ul,"P",{});var iZ=s(Hd);fgr=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qQ=n(iZ,"A",{href:!0});var tbt=s(qQ);mgr=r(tbt,"from_pretrained()"),tbt.forEach(t),ggr=r(iZ," class method or the "),NQ=n(iZ,"A",{href:!0});var abt=s(NQ);hgr=r(abt,"from_config()"),abt.forEach(t),pgr=r(iZ,` class
method.`),iZ.forEach(t),ugr=i(ul),HL=n(ul,"P",{});var aje=s(HL);_gr=r(aje,"This class cannot be instantiated directly using "),P1e=n(aje,"CODE",{});var nbt=s(P1e);bgr=r(nbt,"__init__()"),nbt.forEach(t),vgr=r(aje," (throws an error)."),aje.forEach(t),Fgr=i(ul),Lt=n(ul,"DIV",{class:!0});var ew=s(Lt);T(UL.$$.fragment,ew),Tgr=i(ew),I1e=n(ew,"P",{});var sbt=s(I1e);Mgr=r(sbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sbt.forEach(t),Egr=i(ew),Ud=n(ew,"P",{});var dZ=s(Ud);Cgr=r(dZ,`Note:
Loading a model from its configuration file does `),q1e=n(dZ,"STRONG",{});var lbt=s(q1e);wgr=r(lbt,"not"),lbt.forEach(t),Agr=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=n(dZ,"A",{href:!0});var ibt=s(jQ);ygr=r(ibt,"from_pretrained()"),ibt.forEach(t),Lgr=r(dZ," to load the model weights."),dZ.forEach(t),xgr=i(ew),T(a7.$$.fragment,ew),ew.forEach(t),$gr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(JL.$$.fragment,_l),kgr=i(_l),N1e=n(_l,"P",{});var dbt=s(N1e);Sgr=r(dbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dbt.forEach(t),Rgr=i(_l),on=n(_l,"P",{});var ow=s(on);Bgr=r(ow,"The model class to instantiate is selected based on the "),j1e=n(ow,"CODE",{});var cbt=s(j1e);Pgr=r(cbt,"model_type"),cbt.forEach(t),Igr=r(ow,` property of the config object (either
passed as an argument or loaded from `),D1e=n(ow,"CODE",{});var fbt=s(D1e);qgr=r(fbt,"pretrained_model_name_or_path"),fbt.forEach(t),Ngr=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=n(ow,"CODE",{});var mbt=s(G1e);jgr=r(mbt,"pretrained_model_name_or_path"),mbt.forEach(t),Dgr=r(ow,":"),ow.forEach(t),Ggr=i(_l),Jd=n(_l,"UL",{});var cZ=s(Jd);n7=n(cZ,"LI",{});var $ke=s(n7);O1e=n($ke,"STRONG",{});var gbt=s(O1e);Ogr=r(gbt,"convnext"),gbt.forEach(t),Vgr=r($ke," \u2014 "),DQ=n($ke,"A",{href:!0});var hbt=s(DQ);Xgr=r(hbt,"TFConvNextForImageClassification"),hbt.forEach(t),zgr=r($ke," (ConvNext model)"),$ke.forEach(t),Qgr=i(cZ),s7=n(cZ,"LI",{});var kke=s(s7);V1e=n(kke,"STRONG",{});var pbt=s(V1e);Wgr=r(pbt,"data2vec-vision"),pbt.forEach(t),Hgr=r(kke," \u2014 "),GQ=n(kke,"A",{href:!0});var ubt=s(GQ);Ugr=r(ubt,"TFData2VecVisionForImageClassification"),ubt.forEach(t),Jgr=r(kke," (Data2VecVision model)"),kke.forEach(t),Ygr=i(cZ),l7=n(cZ,"LI",{});var Ske=s(l7);X1e=n(Ske,"STRONG",{});var _bt=s(X1e);Kgr=r(_bt,"vit"),_bt.forEach(t),Zgr=r(Ske," \u2014 "),OQ=n(Ske,"A",{href:!0});var bbt=s(OQ);ehr=r(bbt,"TFViTForImageClassification"),bbt.forEach(t),ohr=r(Ske," (ViT model)"),Ske.forEach(t),cZ.forEach(t),rhr=i(_l),T(i7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),ZIe=i(f),Yd=n(f,"H2",{class:!0});var nje=s(Yd);d7=n(nje,"A",{id:!0,class:!0,href:!0});var vbt=s(d7);z1e=n(vbt,"SPAN",{});var Fbt=s(z1e);T(YL.$$.fragment,Fbt),Fbt.forEach(t),vbt.forEach(t),thr=i(nje),Q1e=n(nje,"SPAN",{});var Tbt=s(Q1e);ahr=r(Tbt,"TFAutoModelForMaskedLM"),Tbt.forEach(t),nje.forEach(t),eqe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(KL.$$.fragment,bl),nhr=i(bl),Kd=n(bl,"P",{});var fZ=s(Kd);shr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),VQ=n(fZ,"A",{href:!0});var Mbt=s(VQ);lhr=r(Mbt,"from_pretrained()"),Mbt.forEach(t),ihr=r(fZ," class method or the "),XQ=n(fZ,"A",{href:!0});var Ebt=s(XQ);dhr=r(Ebt,"from_config()"),Ebt.forEach(t),chr=r(fZ,` class
method.`),fZ.forEach(t),fhr=i(bl),ZL=n(bl,"P",{});var sje=s(ZL);mhr=r(sje,"This class cannot be instantiated directly using "),W1e=n(sje,"CODE",{});var Cbt=s(W1e);ghr=r(Cbt,"__init__()"),Cbt.forEach(t),hhr=r(sje," (throws an error)."),sje.forEach(t),phr=i(bl),xt=n(bl,"DIV",{class:!0});var rw=s(xt);T(e8.$$.fragment,rw),uhr=i(rw),H1e=n(rw,"P",{});var wbt=s(H1e);_hr=r(wbt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wbt.forEach(t),bhr=i(rw),Zd=n(rw,"P",{});var mZ=s(Zd);vhr=r(mZ,`Note:
Loading a model from its configuration file does `),U1e=n(mZ,"STRONG",{});var Abt=s(U1e);Fhr=r(Abt,"not"),Abt.forEach(t),Thr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=n(mZ,"A",{href:!0});var ybt=s(zQ);Mhr=r(ybt,"from_pretrained()"),ybt.forEach(t),Ehr=r(mZ," to load the model weights."),mZ.forEach(t),Chr=i(rw),T(c7.$$.fragment,rw),rw.forEach(t),whr=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(o8.$$.fragment,vl),Ahr=i(vl),J1e=n(vl,"P",{});var Lbt=s(J1e);yhr=r(Lbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lbt.forEach(t),Lhr=i(vl),rn=n(vl,"P",{});var tw=s(rn);xhr=r(tw,"The model class to instantiate is selected based on the "),Y1e=n(tw,"CODE",{});var xbt=s(Y1e);$hr=r(xbt,"model_type"),xbt.forEach(t),khr=r(tw,` property of the config object (either
passed as an argument or loaded from `),K1e=n(tw,"CODE",{});var $bt=s(K1e);Shr=r($bt,"pretrained_model_name_or_path"),$bt.forEach(t),Rhr=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(tw,"CODE",{});var kbt=s(Z1e);Bhr=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),Phr=r(tw,":"),tw.forEach(t),Ihr=i(vl),ie=n(vl,"UL",{});var fe=s(ie);f7=n(fe,"LI",{});var Rke=s(f7);ebe=n(Rke,"STRONG",{});var Sbt=s(ebe);qhr=r(Sbt,"albert"),Sbt.forEach(t),Nhr=r(Rke," \u2014 "),QQ=n(Rke,"A",{href:!0});var Rbt=s(QQ);jhr=r(Rbt,"TFAlbertForMaskedLM"),Rbt.forEach(t),Dhr=r(Rke," (ALBERT model)"),Rke.forEach(t),Ghr=i(fe),m7=n(fe,"LI",{});var Bke=s(m7);obe=n(Bke,"STRONG",{});var Bbt=s(obe);Ohr=r(Bbt,"bert"),Bbt.forEach(t),Vhr=r(Bke," \u2014 "),WQ=n(Bke,"A",{href:!0});var Pbt=s(WQ);Xhr=r(Pbt,"TFBertForMaskedLM"),Pbt.forEach(t),zhr=r(Bke," (BERT model)"),Bke.forEach(t),Qhr=i(fe),g7=n(fe,"LI",{});var Pke=s(g7);rbe=n(Pke,"STRONG",{});var Ibt=s(rbe);Whr=r(Ibt,"camembert"),Ibt.forEach(t),Hhr=r(Pke," \u2014 "),HQ=n(Pke,"A",{href:!0});var qbt=s(HQ);Uhr=r(qbt,"TFCamembertForMaskedLM"),qbt.forEach(t),Jhr=r(Pke," (CamemBERT model)"),Pke.forEach(t),Yhr=i(fe),h7=n(fe,"LI",{});var Ike=s(h7);tbe=n(Ike,"STRONG",{});var Nbt=s(tbe);Khr=r(Nbt,"convbert"),Nbt.forEach(t),Zhr=r(Ike," \u2014 "),UQ=n(Ike,"A",{href:!0});var jbt=s(UQ);epr=r(jbt,"TFConvBertForMaskedLM"),jbt.forEach(t),opr=r(Ike," (ConvBERT model)"),Ike.forEach(t),rpr=i(fe),p7=n(fe,"LI",{});var qke=s(p7);abe=n(qke,"STRONG",{});var Dbt=s(abe);tpr=r(Dbt,"deberta"),Dbt.forEach(t),apr=r(qke," \u2014 "),JQ=n(qke,"A",{href:!0});var Gbt=s(JQ);npr=r(Gbt,"TFDebertaForMaskedLM"),Gbt.forEach(t),spr=r(qke," (DeBERTa model)"),qke.forEach(t),lpr=i(fe),u7=n(fe,"LI",{});var Nke=s(u7);nbe=n(Nke,"STRONG",{});var Obt=s(nbe);ipr=r(Obt,"deberta-v2"),Obt.forEach(t),dpr=r(Nke," \u2014 "),YQ=n(Nke,"A",{href:!0});var Vbt=s(YQ);cpr=r(Vbt,"TFDebertaV2ForMaskedLM"),Vbt.forEach(t),fpr=r(Nke," (DeBERTa-v2 model)"),Nke.forEach(t),mpr=i(fe),_7=n(fe,"LI",{});var jke=s(_7);sbe=n(jke,"STRONG",{});var Xbt=s(sbe);gpr=r(Xbt,"distilbert"),Xbt.forEach(t),hpr=r(jke," \u2014 "),KQ=n(jke,"A",{href:!0});var zbt=s(KQ);ppr=r(zbt,"TFDistilBertForMaskedLM"),zbt.forEach(t),upr=r(jke," (DistilBERT model)"),jke.forEach(t),_pr=i(fe),b7=n(fe,"LI",{});var Dke=s(b7);lbe=n(Dke,"STRONG",{});var Qbt=s(lbe);bpr=r(Qbt,"electra"),Qbt.forEach(t),vpr=r(Dke," \u2014 "),ZQ=n(Dke,"A",{href:!0});var Wbt=s(ZQ);Fpr=r(Wbt,"TFElectraForMaskedLM"),Wbt.forEach(t),Tpr=r(Dke," (ELECTRA model)"),Dke.forEach(t),Mpr=i(fe),v7=n(fe,"LI",{});var Gke=s(v7);ibe=n(Gke,"STRONG",{});var Hbt=s(ibe);Epr=r(Hbt,"flaubert"),Hbt.forEach(t),Cpr=r(Gke," \u2014 "),eW=n(Gke,"A",{href:!0});var Ubt=s(eW);wpr=r(Ubt,"TFFlaubertWithLMHeadModel"),Ubt.forEach(t),Apr=r(Gke," (FlauBERT model)"),Gke.forEach(t),ypr=i(fe),F7=n(fe,"LI",{});var Oke=s(F7);dbe=n(Oke,"STRONG",{});var Jbt=s(dbe);Lpr=r(Jbt,"funnel"),Jbt.forEach(t),xpr=r(Oke," \u2014 "),oW=n(Oke,"A",{href:!0});var Ybt=s(oW);$pr=r(Ybt,"TFFunnelForMaskedLM"),Ybt.forEach(t),kpr=r(Oke," (Funnel Transformer model)"),Oke.forEach(t),Spr=i(fe),T7=n(fe,"LI",{});var Vke=s(T7);cbe=n(Vke,"STRONG",{});var Kbt=s(cbe);Rpr=r(Kbt,"layoutlm"),Kbt.forEach(t),Bpr=r(Vke," \u2014 "),rW=n(Vke,"A",{href:!0});var Zbt=s(rW);Ppr=r(Zbt,"TFLayoutLMForMaskedLM"),Zbt.forEach(t),Ipr=r(Vke," (LayoutLM model)"),Vke.forEach(t),qpr=i(fe),M7=n(fe,"LI",{});var Xke=s(M7);fbe=n(Xke,"STRONG",{});var e2t=s(fbe);Npr=r(e2t,"longformer"),e2t.forEach(t),jpr=r(Xke," \u2014 "),tW=n(Xke,"A",{href:!0});var o2t=s(tW);Dpr=r(o2t,"TFLongformerForMaskedLM"),o2t.forEach(t),Gpr=r(Xke," (Longformer model)"),Xke.forEach(t),Opr=i(fe),E7=n(fe,"LI",{});var zke=s(E7);mbe=n(zke,"STRONG",{});var r2t=s(mbe);Vpr=r(r2t,"mobilebert"),r2t.forEach(t),Xpr=r(zke," \u2014 "),aW=n(zke,"A",{href:!0});var t2t=s(aW);zpr=r(t2t,"TFMobileBertForMaskedLM"),t2t.forEach(t),Qpr=r(zke," (MobileBERT model)"),zke.forEach(t),Wpr=i(fe),C7=n(fe,"LI",{});var Qke=s(C7);gbe=n(Qke,"STRONG",{});var a2t=s(gbe);Hpr=r(a2t,"mpnet"),a2t.forEach(t),Upr=r(Qke," \u2014 "),nW=n(Qke,"A",{href:!0});var n2t=s(nW);Jpr=r(n2t,"TFMPNetForMaskedLM"),n2t.forEach(t),Ypr=r(Qke," (MPNet model)"),Qke.forEach(t),Kpr=i(fe),w7=n(fe,"LI",{});var Wke=s(w7);hbe=n(Wke,"STRONG",{});var s2t=s(hbe);Zpr=r(s2t,"rembert"),s2t.forEach(t),eur=r(Wke," \u2014 "),sW=n(Wke,"A",{href:!0});var l2t=s(sW);our=r(l2t,"TFRemBertForMaskedLM"),l2t.forEach(t),rur=r(Wke," (RemBERT model)"),Wke.forEach(t),tur=i(fe),A7=n(fe,"LI",{});var Hke=s(A7);pbe=n(Hke,"STRONG",{});var i2t=s(pbe);aur=r(i2t,"roberta"),i2t.forEach(t),nur=r(Hke," \u2014 "),lW=n(Hke,"A",{href:!0});var d2t=s(lW);sur=r(d2t,"TFRobertaForMaskedLM"),d2t.forEach(t),lur=r(Hke," (RoBERTa model)"),Hke.forEach(t),iur=i(fe),y7=n(fe,"LI",{});var Uke=s(y7);ube=n(Uke,"STRONG",{});var c2t=s(ube);dur=r(c2t,"roformer"),c2t.forEach(t),cur=r(Uke," \u2014 "),iW=n(Uke,"A",{href:!0});var f2t=s(iW);fur=r(f2t,"TFRoFormerForMaskedLM"),f2t.forEach(t),mur=r(Uke," (RoFormer model)"),Uke.forEach(t),gur=i(fe),L7=n(fe,"LI",{});var Jke=s(L7);_be=n(Jke,"STRONG",{});var m2t=s(_be);hur=r(m2t,"tapas"),m2t.forEach(t),pur=r(Jke," \u2014 "),dW=n(Jke,"A",{href:!0});var g2t=s(dW);uur=r(g2t,"TFTapasForMaskedLM"),g2t.forEach(t),_ur=r(Jke," (TAPAS model)"),Jke.forEach(t),bur=i(fe),x7=n(fe,"LI",{});var Yke=s(x7);bbe=n(Yke,"STRONG",{});var h2t=s(bbe);vur=r(h2t,"xlm"),h2t.forEach(t),Fur=r(Yke," \u2014 "),cW=n(Yke,"A",{href:!0});var p2t=s(cW);Tur=r(p2t,"TFXLMWithLMHeadModel"),p2t.forEach(t),Mur=r(Yke," (XLM model)"),Yke.forEach(t),Eur=i(fe),$7=n(fe,"LI",{});var Kke=s($7);vbe=n(Kke,"STRONG",{});var u2t=s(vbe);Cur=r(u2t,"xlm-roberta"),u2t.forEach(t),wur=r(Kke," \u2014 "),fW=n(Kke,"A",{href:!0});var _2t=s(fW);Aur=r(_2t,"TFXLMRobertaForMaskedLM"),_2t.forEach(t),yur=r(Kke," (XLM-RoBERTa model)"),Kke.forEach(t),fe.forEach(t),Lur=i(vl),T(k7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),oqe=i(f),ec=n(f,"H2",{class:!0});var lje=s(ec);S7=n(lje,"A",{id:!0,class:!0,href:!0});var b2t=s(S7);Fbe=n(b2t,"SPAN",{});var v2t=s(Fbe);T(r8.$$.fragment,v2t),v2t.forEach(t),b2t.forEach(t),xur=i(lje),Tbe=n(lje,"SPAN",{});var F2t=s(Tbe);$ur=r(F2t,"TFAutoModelForSeq2SeqLM"),F2t.forEach(t),lje.forEach(t),rqe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(t8.$$.fragment,Fl),kur=i(Fl),oc=n(Fl,"P",{});var gZ=s(oc);Sur=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mW=n(gZ,"A",{href:!0});var T2t=s(mW);Rur=r(T2t,"from_pretrained()"),T2t.forEach(t),Bur=r(gZ," class method or the "),gW=n(gZ,"A",{href:!0});var M2t=s(gW);Pur=r(M2t,"from_config()"),M2t.forEach(t),Iur=r(gZ,` class
method.`),gZ.forEach(t),qur=i(Fl),a8=n(Fl,"P",{});var ije=s(a8);Nur=r(ije,"This class cannot be instantiated directly using "),Mbe=n(ije,"CODE",{});var E2t=s(Mbe);jur=r(E2t,"__init__()"),E2t.forEach(t),Dur=r(ije," (throws an error)."),ije.forEach(t),Gur=i(Fl),$t=n(Fl,"DIV",{class:!0});var aw=s($t);T(n8.$$.fragment,aw),Our=i(aw),Ebe=n(aw,"P",{});var C2t=s(Ebe);Vur=r(C2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),C2t.forEach(t),Xur=i(aw),rc=n(aw,"P",{});var hZ=s(rc);zur=r(hZ,`Note:
Loading a model from its configuration file does `),Cbe=n(hZ,"STRONG",{});var w2t=s(Cbe);Qur=r(w2t,"not"),w2t.forEach(t),Wur=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=n(hZ,"A",{href:!0});var A2t=s(hW);Hur=r(A2t,"from_pretrained()"),A2t.forEach(t),Uur=r(hZ," to load the model weights."),hZ.forEach(t),Jur=i(aw),T(R7.$$.fragment,aw),aw.forEach(t),Yur=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(s8.$$.fragment,Tl),Kur=i(Tl),wbe=n(Tl,"P",{});var y2t=s(wbe);Zur=r(y2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),y2t.forEach(t),e_r=i(Tl),tn=n(Tl,"P",{});var nw=s(tn);o_r=r(nw,"The model class to instantiate is selected based on the "),Abe=n(nw,"CODE",{});var L2t=s(Abe);r_r=r(L2t,"model_type"),L2t.forEach(t),t_r=r(nw,` property of the config object (either
passed as an argument or loaded from `),ybe=n(nw,"CODE",{});var x2t=s(ybe);a_r=r(x2t,"pretrained_model_name_or_path"),x2t.forEach(t),n_r=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=n(nw,"CODE",{});var $2t=s(Lbe);s_r=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),l_r=r(nw,":"),nw.forEach(t),i_r=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);B7=n(Re,"LI",{});var Zke=s(B7);xbe=n(Zke,"STRONG",{});var k2t=s(xbe);d_r=r(k2t,"bart"),k2t.forEach(t),c_r=r(Zke," \u2014 "),pW=n(Zke,"A",{href:!0});var S2t=s(pW);f_r=r(S2t,"TFBartForConditionalGeneration"),S2t.forEach(t),m_r=r(Zke," (BART model)"),Zke.forEach(t),g_r=i(Re),P7=n(Re,"LI",{});var eSe=s(P7);$be=n(eSe,"STRONG",{});var R2t=s($be);h_r=r(R2t,"blenderbot"),R2t.forEach(t),p_r=r(eSe," \u2014 "),uW=n(eSe,"A",{href:!0});var B2t=s(uW);u_r=r(B2t,"TFBlenderbotForConditionalGeneration"),B2t.forEach(t),__r=r(eSe," (Blenderbot model)"),eSe.forEach(t),b_r=i(Re),I7=n(Re,"LI",{});var oSe=s(I7);kbe=n(oSe,"STRONG",{});var P2t=s(kbe);v_r=r(P2t,"blenderbot-small"),P2t.forEach(t),F_r=r(oSe," \u2014 "),_W=n(oSe,"A",{href:!0});var I2t=s(_W);T_r=r(I2t,"TFBlenderbotSmallForConditionalGeneration"),I2t.forEach(t),M_r=r(oSe," (BlenderbotSmall model)"),oSe.forEach(t),E_r=i(Re),q7=n(Re,"LI",{});var rSe=s(q7);Sbe=n(rSe,"STRONG",{});var q2t=s(Sbe);C_r=r(q2t,"encoder-decoder"),q2t.forEach(t),w_r=r(rSe," \u2014 "),bW=n(rSe,"A",{href:!0});var N2t=s(bW);A_r=r(N2t,"TFEncoderDecoderModel"),N2t.forEach(t),y_r=r(rSe," (Encoder decoder model)"),rSe.forEach(t),L_r=i(Re),N7=n(Re,"LI",{});var tSe=s(N7);Rbe=n(tSe,"STRONG",{});var j2t=s(Rbe);x_r=r(j2t,"led"),j2t.forEach(t),$_r=r(tSe," \u2014 "),vW=n(tSe,"A",{href:!0});var D2t=s(vW);k_r=r(D2t,"TFLEDForConditionalGeneration"),D2t.forEach(t),S_r=r(tSe," (LED model)"),tSe.forEach(t),R_r=i(Re),j7=n(Re,"LI",{});var aSe=s(j7);Bbe=n(aSe,"STRONG",{});var G2t=s(Bbe);B_r=r(G2t,"marian"),G2t.forEach(t),P_r=r(aSe," \u2014 "),FW=n(aSe,"A",{href:!0});var O2t=s(FW);I_r=r(O2t,"TFMarianMTModel"),O2t.forEach(t),q_r=r(aSe," (Marian model)"),aSe.forEach(t),N_r=i(Re),D7=n(Re,"LI",{});var nSe=s(D7);Pbe=n(nSe,"STRONG",{});var V2t=s(Pbe);j_r=r(V2t,"mbart"),V2t.forEach(t),D_r=r(nSe," \u2014 "),TW=n(nSe,"A",{href:!0});var X2t=s(TW);G_r=r(X2t,"TFMBartForConditionalGeneration"),X2t.forEach(t),O_r=r(nSe," (mBART model)"),nSe.forEach(t),V_r=i(Re),G7=n(Re,"LI",{});var sSe=s(G7);Ibe=n(sSe,"STRONG",{});var z2t=s(Ibe);X_r=r(z2t,"mt5"),z2t.forEach(t),z_r=r(sSe," \u2014 "),MW=n(sSe,"A",{href:!0});var Q2t=s(MW);Q_r=r(Q2t,"TFMT5ForConditionalGeneration"),Q2t.forEach(t),W_r=r(sSe," (mT5 model)"),sSe.forEach(t),H_r=i(Re),O7=n(Re,"LI",{});var lSe=s(O7);qbe=n(lSe,"STRONG",{});var W2t=s(qbe);U_r=r(W2t,"pegasus"),W2t.forEach(t),J_r=r(lSe," \u2014 "),EW=n(lSe,"A",{href:!0});var H2t=s(EW);Y_r=r(H2t,"TFPegasusForConditionalGeneration"),H2t.forEach(t),K_r=r(lSe," (Pegasus model)"),lSe.forEach(t),Z_r=i(Re),V7=n(Re,"LI",{});var iSe=s(V7);Nbe=n(iSe,"STRONG",{});var U2t=s(Nbe);e0r=r(U2t,"t5"),U2t.forEach(t),o0r=r(iSe," \u2014 "),CW=n(iSe,"A",{href:!0});var J2t=s(CW);r0r=r(J2t,"TFT5ForConditionalGeneration"),J2t.forEach(t),t0r=r(iSe," (T5 model)"),iSe.forEach(t),Re.forEach(t),a0r=i(Tl),T(X7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),tqe=i(f),tc=n(f,"H2",{class:!0});var dje=s(tc);z7=n(dje,"A",{id:!0,class:!0,href:!0});var Y2t=s(z7);jbe=n(Y2t,"SPAN",{});var K2t=s(jbe);T(l8.$$.fragment,K2t),K2t.forEach(t),Y2t.forEach(t),n0r=i(dje),Dbe=n(dje,"SPAN",{});var Z2t=s(Dbe);s0r=r(Z2t,"TFAutoModelForSequenceClassification"),Z2t.forEach(t),dje.forEach(t),aqe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(i8.$$.fragment,Ml),l0r=i(Ml),ac=n(Ml,"P",{});var pZ=s(ac);i0r=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wW=n(pZ,"A",{href:!0});var evt=s(wW);d0r=r(evt,"from_pretrained()"),evt.forEach(t),c0r=r(pZ," class method or the "),AW=n(pZ,"A",{href:!0});var ovt=s(AW);f0r=r(ovt,"from_config()"),ovt.forEach(t),m0r=r(pZ,` class
method.`),pZ.forEach(t),g0r=i(Ml),d8=n(Ml,"P",{});var cje=s(d8);h0r=r(cje,"This class cannot be instantiated directly using "),Gbe=n(cje,"CODE",{});var rvt=s(Gbe);p0r=r(rvt,"__init__()"),rvt.forEach(t),u0r=r(cje," (throws an error)."),cje.forEach(t),_0r=i(Ml),kt=n(Ml,"DIV",{class:!0});var sw=s(kt);T(c8.$$.fragment,sw),b0r=i(sw),Obe=n(sw,"P",{});var tvt=s(Obe);v0r=r(tvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tvt.forEach(t),F0r=i(sw),nc=n(sw,"P",{});var uZ=s(nc);T0r=r(uZ,`Note:
Loading a model from its configuration file does `),Vbe=n(uZ,"STRONG",{});var avt=s(Vbe);M0r=r(avt,"not"),avt.forEach(t),E0r=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(uZ,"A",{href:!0});var nvt=s(yW);C0r=r(nvt,"from_pretrained()"),nvt.forEach(t),w0r=r(uZ," to load the model weights."),uZ.forEach(t),A0r=i(sw),T(Q7.$$.fragment,sw),sw.forEach(t),y0r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(f8.$$.fragment,El),L0r=i(El),Xbe=n(El,"P",{});var svt=s(Xbe);x0r=r(svt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),svt.forEach(t),$0r=i(El),an=n(El,"P",{});var lw=s(an);k0r=r(lw,"The model class to instantiate is selected based on the "),zbe=n(lw,"CODE",{});var lvt=s(zbe);S0r=r(lvt,"model_type"),lvt.forEach(t),R0r=r(lw,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(lw,"CODE",{});var ivt=s(Qbe);B0r=r(ivt,"pretrained_model_name_or_path"),ivt.forEach(t),P0r=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(lw,"CODE",{});var dvt=s(Wbe);I0r=r(dvt,"pretrained_model_name_or_path"),dvt.forEach(t),q0r=r(lw,":"),lw.forEach(t),N0r=i(El),Z=n(El,"UL",{});var te=s(Z);W7=n(te,"LI",{});var dSe=s(W7);Hbe=n(dSe,"STRONG",{});var cvt=s(Hbe);j0r=r(cvt,"albert"),cvt.forEach(t),D0r=r(dSe," \u2014 "),LW=n(dSe,"A",{href:!0});var fvt=s(LW);G0r=r(fvt,"TFAlbertForSequenceClassification"),fvt.forEach(t),O0r=r(dSe," (ALBERT model)"),dSe.forEach(t),V0r=i(te),H7=n(te,"LI",{});var cSe=s(H7);Ube=n(cSe,"STRONG",{});var mvt=s(Ube);X0r=r(mvt,"bert"),mvt.forEach(t),z0r=r(cSe," \u2014 "),xW=n(cSe,"A",{href:!0});var gvt=s(xW);Q0r=r(gvt,"TFBertForSequenceClassification"),gvt.forEach(t),W0r=r(cSe," (BERT model)"),cSe.forEach(t),H0r=i(te),U7=n(te,"LI",{});var fSe=s(U7);Jbe=n(fSe,"STRONG",{});var hvt=s(Jbe);U0r=r(hvt,"camembert"),hvt.forEach(t),J0r=r(fSe," \u2014 "),$W=n(fSe,"A",{href:!0});var pvt=s($W);Y0r=r(pvt,"TFCamembertForSequenceClassification"),pvt.forEach(t),K0r=r(fSe," (CamemBERT model)"),fSe.forEach(t),Z0r=i(te),J7=n(te,"LI",{});var mSe=s(J7);Ybe=n(mSe,"STRONG",{});var uvt=s(Ybe);e1r=r(uvt,"convbert"),uvt.forEach(t),o1r=r(mSe," \u2014 "),kW=n(mSe,"A",{href:!0});var _vt=s(kW);r1r=r(_vt,"TFConvBertForSequenceClassification"),_vt.forEach(t),t1r=r(mSe," (ConvBERT model)"),mSe.forEach(t),a1r=i(te),Y7=n(te,"LI",{});var gSe=s(Y7);Kbe=n(gSe,"STRONG",{});var bvt=s(Kbe);n1r=r(bvt,"ctrl"),bvt.forEach(t),s1r=r(gSe," \u2014 "),SW=n(gSe,"A",{href:!0});var vvt=s(SW);l1r=r(vvt,"TFCTRLForSequenceClassification"),vvt.forEach(t),i1r=r(gSe," (CTRL model)"),gSe.forEach(t),d1r=i(te),K7=n(te,"LI",{});var hSe=s(K7);Zbe=n(hSe,"STRONG",{});var Fvt=s(Zbe);c1r=r(Fvt,"deberta"),Fvt.forEach(t),f1r=r(hSe," \u2014 "),RW=n(hSe,"A",{href:!0});var Tvt=s(RW);m1r=r(Tvt,"TFDebertaForSequenceClassification"),Tvt.forEach(t),g1r=r(hSe," (DeBERTa model)"),hSe.forEach(t),h1r=i(te),Z7=n(te,"LI",{});var pSe=s(Z7);e2e=n(pSe,"STRONG",{});var Mvt=s(e2e);p1r=r(Mvt,"deberta-v2"),Mvt.forEach(t),u1r=r(pSe," \u2014 "),BW=n(pSe,"A",{href:!0});var Evt=s(BW);_1r=r(Evt,"TFDebertaV2ForSequenceClassification"),Evt.forEach(t),b1r=r(pSe," (DeBERTa-v2 model)"),pSe.forEach(t),v1r=i(te),eM=n(te,"LI",{});var uSe=s(eM);o2e=n(uSe,"STRONG",{});var Cvt=s(o2e);F1r=r(Cvt,"distilbert"),Cvt.forEach(t),T1r=r(uSe," \u2014 "),PW=n(uSe,"A",{href:!0});var wvt=s(PW);M1r=r(wvt,"TFDistilBertForSequenceClassification"),wvt.forEach(t),E1r=r(uSe," (DistilBERT model)"),uSe.forEach(t),C1r=i(te),oM=n(te,"LI",{});var _Se=s(oM);r2e=n(_Se,"STRONG",{});var Avt=s(r2e);w1r=r(Avt,"electra"),Avt.forEach(t),A1r=r(_Se," \u2014 "),IW=n(_Se,"A",{href:!0});var yvt=s(IW);y1r=r(yvt,"TFElectraForSequenceClassification"),yvt.forEach(t),L1r=r(_Se," (ELECTRA model)"),_Se.forEach(t),x1r=i(te),rM=n(te,"LI",{});var bSe=s(rM);t2e=n(bSe,"STRONG",{});var Lvt=s(t2e);$1r=r(Lvt,"flaubert"),Lvt.forEach(t),k1r=r(bSe," \u2014 "),qW=n(bSe,"A",{href:!0});var xvt=s(qW);S1r=r(xvt,"TFFlaubertForSequenceClassification"),xvt.forEach(t),R1r=r(bSe," (FlauBERT model)"),bSe.forEach(t),B1r=i(te),tM=n(te,"LI",{});var vSe=s(tM);a2e=n(vSe,"STRONG",{});var $vt=s(a2e);P1r=r($vt,"funnel"),$vt.forEach(t),I1r=r(vSe," \u2014 "),NW=n(vSe,"A",{href:!0});var kvt=s(NW);q1r=r(kvt,"TFFunnelForSequenceClassification"),kvt.forEach(t),N1r=r(vSe," (Funnel Transformer model)"),vSe.forEach(t),j1r=i(te),aM=n(te,"LI",{});var FSe=s(aM);n2e=n(FSe,"STRONG",{});var Svt=s(n2e);D1r=r(Svt,"gpt2"),Svt.forEach(t),G1r=r(FSe," \u2014 "),jW=n(FSe,"A",{href:!0});var Rvt=s(jW);O1r=r(Rvt,"TFGPT2ForSequenceClassification"),Rvt.forEach(t),V1r=r(FSe," (OpenAI GPT-2 model)"),FSe.forEach(t),X1r=i(te),nM=n(te,"LI",{});var TSe=s(nM);s2e=n(TSe,"STRONG",{});var Bvt=s(s2e);z1r=r(Bvt,"gptj"),Bvt.forEach(t),Q1r=r(TSe," \u2014 "),DW=n(TSe,"A",{href:!0});var Pvt=s(DW);W1r=r(Pvt,"TFGPTJForSequenceClassification"),Pvt.forEach(t),H1r=r(TSe," (GPT-J model)"),TSe.forEach(t),U1r=i(te),sM=n(te,"LI",{});var MSe=s(sM);l2e=n(MSe,"STRONG",{});var Ivt=s(l2e);J1r=r(Ivt,"layoutlm"),Ivt.forEach(t),Y1r=r(MSe," \u2014 "),GW=n(MSe,"A",{href:!0});var qvt=s(GW);K1r=r(qvt,"TFLayoutLMForSequenceClassification"),qvt.forEach(t),Z1r=r(MSe," (LayoutLM model)"),MSe.forEach(t),ebr=i(te),lM=n(te,"LI",{});var ESe=s(lM);i2e=n(ESe,"STRONG",{});var Nvt=s(i2e);obr=r(Nvt,"longformer"),Nvt.forEach(t),rbr=r(ESe," \u2014 "),OW=n(ESe,"A",{href:!0});var jvt=s(OW);tbr=r(jvt,"TFLongformerForSequenceClassification"),jvt.forEach(t),abr=r(ESe," (Longformer model)"),ESe.forEach(t),nbr=i(te),iM=n(te,"LI",{});var CSe=s(iM);d2e=n(CSe,"STRONG",{});var Dvt=s(d2e);sbr=r(Dvt,"mobilebert"),Dvt.forEach(t),lbr=r(CSe," \u2014 "),VW=n(CSe,"A",{href:!0});var Gvt=s(VW);ibr=r(Gvt,"TFMobileBertForSequenceClassification"),Gvt.forEach(t),dbr=r(CSe," (MobileBERT model)"),CSe.forEach(t),cbr=i(te),dM=n(te,"LI",{});var wSe=s(dM);c2e=n(wSe,"STRONG",{});var Ovt=s(c2e);fbr=r(Ovt,"mpnet"),Ovt.forEach(t),mbr=r(wSe," \u2014 "),XW=n(wSe,"A",{href:!0});var Vvt=s(XW);gbr=r(Vvt,"TFMPNetForSequenceClassification"),Vvt.forEach(t),hbr=r(wSe," (MPNet model)"),wSe.forEach(t),pbr=i(te),cM=n(te,"LI",{});var ASe=s(cM);f2e=n(ASe,"STRONG",{});var Xvt=s(f2e);ubr=r(Xvt,"openai-gpt"),Xvt.forEach(t),_br=r(ASe," \u2014 "),zW=n(ASe,"A",{href:!0});var zvt=s(zW);bbr=r(zvt,"TFOpenAIGPTForSequenceClassification"),zvt.forEach(t),vbr=r(ASe," (OpenAI GPT model)"),ASe.forEach(t),Fbr=i(te),fM=n(te,"LI",{});var ySe=s(fM);m2e=n(ySe,"STRONG",{});var Qvt=s(m2e);Tbr=r(Qvt,"rembert"),Qvt.forEach(t),Mbr=r(ySe," \u2014 "),QW=n(ySe,"A",{href:!0});var Wvt=s(QW);Ebr=r(Wvt,"TFRemBertForSequenceClassification"),Wvt.forEach(t),Cbr=r(ySe," (RemBERT model)"),ySe.forEach(t),wbr=i(te),mM=n(te,"LI",{});var LSe=s(mM);g2e=n(LSe,"STRONG",{});var Hvt=s(g2e);Abr=r(Hvt,"roberta"),Hvt.forEach(t),ybr=r(LSe," \u2014 "),WW=n(LSe,"A",{href:!0});var Uvt=s(WW);Lbr=r(Uvt,"TFRobertaForSequenceClassification"),Uvt.forEach(t),xbr=r(LSe," (RoBERTa model)"),LSe.forEach(t),$br=i(te),gM=n(te,"LI",{});var xSe=s(gM);h2e=n(xSe,"STRONG",{});var Jvt=s(h2e);kbr=r(Jvt,"roformer"),Jvt.forEach(t),Sbr=r(xSe," \u2014 "),HW=n(xSe,"A",{href:!0});var Yvt=s(HW);Rbr=r(Yvt,"TFRoFormerForSequenceClassification"),Yvt.forEach(t),Bbr=r(xSe," (RoFormer model)"),xSe.forEach(t),Pbr=i(te),hM=n(te,"LI",{});var $Se=s(hM);p2e=n($Se,"STRONG",{});var Kvt=s(p2e);Ibr=r(Kvt,"tapas"),Kvt.forEach(t),qbr=r($Se," \u2014 "),UW=n($Se,"A",{href:!0});var Zvt=s(UW);Nbr=r(Zvt,"TFTapasForSequenceClassification"),Zvt.forEach(t),jbr=r($Se," (TAPAS model)"),$Se.forEach(t),Dbr=i(te),pM=n(te,"LI",{});var kSe=s(pM);u2e=n(kSe,"STRONG",{});var eFt=s(u2e);Gbr=r(eFt,"transfo-xl"),eFt.forEach(t),Obr=r(kSe," \u2014 "),JW=n(kSe,"A",{href:!0});var oFt=s(JW);Vbr=r(oFt,"TFTransfoXLForSequenceClassification"),oFt.forEach(t),Xbr=r(kSe," (Transformer-XL model)"),kSe.forEach(t),zbr=i(te),uM=n(te,"LI",{});var SSe=s(uM);_2e=n(SSe,"STRONG",{});var rFt=s(_2e);Qbr=r(rFt,"xlm"),rFt.forEach(t),Wbr=r(SSe," \u2014 "),YW=n(SSe,"A",{href:!0});var tFt=s(YW);Hbr=r(tFt,"TFXLMForSequenceClassification"),tFt.forEach(t),Ubr=r(SSe," (XLM model)"),SSe.forEach(t),Jbr=i(te),_M=n(te,"LI",{});var RSe=s(_M);b2e=n(RSe,"STRONG",{});var aFt=s(b2e);Ybr=r(aFt,"xlm-roberta"),aFt.forEach(t),Kbr=r(RSe," \u2014 "),KW=n(RSe,"A",{href:!0});var nFt=s(KW);Zbr=r(nFt,"TFXLMRobertaForSequenceClassification"),nFt.forEach(t),e2r=r(RSe," (XLM-RoBERTa model)"),RSe.forEach(t),o2r=i(te),bM=n(te,"LI",{});var BSe=s(bM);v2e=n(BSe,"STRONG",{});var sFt=s(v2e);r2r=r(sFt,"xlnet"),sFt.forEach(t),t2r=r(BSe," \u2014 "),ZW=n(BSe,"A",{href:!0});var lFt=s(ZW);a2r=r(lFt,"TFXLNetForSequenceClassification"),lFt.forEach(t),n2r=r(BSe," (XLNet model)"),BSe.forEach(t),te.forEach(t),s2r=i(El),T(vM.$$.fragment,El),El.forEach(t),Ml.forEach(t),nqe=i(f),sc=n(f,"H2",{class:!0});var fje=s(sc);FM=n(fje,"A",{id:!0,class:!0,href:!0});var iFt=s(FM);F2e=n(iFt,"SPAN",{});var dFt=s(F2e);T(m8.$$.fragment,dFt),dFt.forEach(t),iFt.forEach(t),l2r=i(fje),T2e=n(fje,"SPAN",{});var cFt=s(T2e);i2r=r(cFt,"TFAutoModelForMultipleChoice"),cFt.forEach(t),fje.forEach(t),sqe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(g8.$$.fragment,Cl),d2r=i(Cl),lc=n(Cl,"P",{});var _Z=s(lc);c2r=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eH=n(_Z,"A",{href:!0});var fFt=s(eH);f2r=r(fFt,"from_pretrained()"),fFt.forEach(t),m2r=r(_Z," class method or the "),oH=n(_Z,"A",{href:!0});var mFt=s(oH);g2r=r(mFt,"from_config()"),mFt.forEach(t),h2r=r(_Z,` class
method.`),_Z.forEach(t),p2r=i(Cl),h8=n(Cl,"P",{});var mje=s(h8);u2r=r(mje,"This class cannot be instantiated directly using "),M2e=n(mje,"CODE",{});var gFt=s(M2e);_2r=r(gFt,"__init__()"),gFt.forEach(t),b2r=r(mje," (throws an error)."),mje.forEach(t),v2r=i(Cl),St=n(Cl,"DIV",{class:!0});var iw=s(St);T(p8.$$.fragment,iw),F2r=i(iw),E2e=n(iw,"P",{});var hFt=s(E2e);T2r=r(hFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hFt.forEach(t),M2r=i(iw),ic=n(iw,"P",{});var bZ=s(ic);E2r=r(bZ,`Note:
Loading a model from its configuration file does `),C2e=n(bZ,"STRONG",{});var pFt=s(C2e);C2r=r(pFt,"not"),pFt.forEach(t),w2r=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(bZ,"A",{href:!0});var uFt=s(rH);A2r=r(uFt,"from_pretrained()"),uFt.forEach(t),y2r=r(bZ," to load the model weights."),bZ.forEach(t),L2r=i(iw),T(TM.$$.fragment,iw),iw.forEach(t),x2r=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(u8.$$.fragment,wl),$2r=i(wl),w2e=n(wl,"P",{});var _Ft=s(w2e);k2r=r(_Ft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_Ft.forEach(t),S2r=i(wl),nn=n(wl,"P",{});var dw=s(nn);R2r=r(dw,"The model class to instantiate is selected based on the "),A2e=n(dw,"CODE",{});var bFt=s(A2e);B2r=r(bFt,"model_type"),bFt.forEach(t),P2r=r(dw,` property of the config object (either
passed as an argument or loaded from `),y2e=n(dw,"CODE",{});var vFt=s(y2e);I2r=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),q2r=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(dw,"CODE",{});var FFt=s(L2e);N2r=r(FFt,"pretrained_model_name_or_path"),FFt.forEach(t),j2r=r(dw,":"),dw.forEach(t),D2r=i(wl),pe=n(wl,"UL",{});var _e=s(pe);MM=n(_e,"LI",{});var PSe=s(MM);x2e=n(PSe,"STRONG",{});var TFt=s(x2e);G2r=r(TFt,"albert"),TFt.forEach(t),O2r=r(PSe," \u2014 "),tH=n(PSe,"A",{href:!0});var MFt=s(tH);V2r=r(MFt,"TFAlbertForMultipleChoice"),MFt.forEach(t),X2r=r(PSe," (ALBERT model)"),PSe.forEach(t),z2r=i(_e),EM=n(_e,"LI",{});var ISe=s(EM);$2e=n(ISe,"STRONG",{});var EFt=s($2e);Q2r=r(EFt,"bert"),EFt.forEach(t),W2r=r(ISe," \u2014 "),aH=n(ISe,"A",{href:!0});var CFt=s(aH);H2r=r(CFt,"TFBertForMultipleChoice"),CFt.forEach(t),U2r=r(ISe," (BERT model)"),ISe.forEach(t),J2r=i(_e),CM=n(_e,"LI",{});var qSe=s(CM);k2e=n(qSe,"STRONG",{});var wFt=s(k2e);Y2r=r(wFt,"camembert"),wFt.forEach(t),K2r=r(qSe," \u2014 "),nH=n(qSe,"A",{href:!0});var AFt=s(nH);Z2r=r(AFt,"TFCamembertForMultipleChoice"),AFt.forEach(t),evr=r(qSe," (CamemBERT model)"),qSe.forEach(t),ovr=i(_e),wM=n(_e,"LI",{});var NSe=s(wM);S2e=n(NSe,"STRONG",{});var yFt=s(S2e);rvr=r(yFt,"convbert"),yFt.forEach(t),tvr=r(NSe," \u2014 "),sH=n(NSe,"A",{href:!0});var LFt=s(sH);avr=r(LFt,"TFConvBertForMultipleChoice"),LFt.forEach(t),nvr=r(NSe," (ConvBERT model)"),NSe.forEach(t),svr=i(_e),AM=n(_e,"LI",{});var jSe=s(AM);R2e=n(jSe,"STRONG",{});var xFt=s(R2e);lvr=r(xFt,"distilbert"),xFt.forEach(t),ivr=r(jSe," \u2014 "),lH=n(jSe,"A",{href:!0});var $Ft=s(lH);dvr=r($Ft,"TFDistilBertForMultipleChoice"),$Ft.forEach(t),cvr=r(jSe," (DistilBERT model)"),jSe.forEach(t),fvr=i(_e),yM=n(_e,"LI",{});var DSe=s(yM);B2e=n(DSe,"STRONG",{});var kFt=s(B2e);mvr=r(kFt,"electra"),kFt.forEach(t),gvr=r(DSe," \u2014 "),iH=n(DSe,"A",{href:!0});var SFt=s(iH);hvr=r(SFt,"TFElectraForMultipleChoice"),SFt.forEach(t),pvr=r(DSe," (ELECTRA model)"),DSe.forEach(t),uvr=i(_e),LM=n(_e,"LI",{});var GSe=s(LM);P2e=n(GSe,"STRONG",{});var RFt=s(P2e);_vr=r(RFt,"flaubert"),RFt.forEach(t),bvr=r(GSe," \u2014 "),dH=n(GSe,"A",{href:!0});var BFt=s(dH);vvr=r(BFt,"TFFlaubertForMultipleChoice"),BFt.forEach(t),Fvr=r(GSe," (FlauBERT model)"),GSe.forEach(t),Tvr=i(_e),xM=n(_e,"LI",{});var OSe=s(xM);I2e=n(OSe,"STRONG",{});var PFt=s(I2e);Mvr=r(PFt,"funnel"),PFt.forEach(t),Evr=r(OSe," \u2014 "),cH=n(OSe,"A",{href:!0});var IFt=s(cH);Cvr=r(IFt,"TFFunnelForMultipleChoice"),IFt.forEach(t),wvr=r(OSe," (Funnel Transformer model)"),OSe.forEach(t),Avr=i(_e),$M=n(_e,"LI",{});var VSe=s($M);q2e=n(VSe,"STRONG",{});var qFt=s(q2e);yvr=r(qFt,"longformer"),qFt.forEach(t),Lvr=r(VSe," \u2014 "),fH=n(VSe,"A",{href:!0});var NFt=s(fH);xvr=r(NFt,"TFLongformerForMultipleChoice"),NFt.forEach(t),$vr=r(VSe," (Longformer model)"),VSe.forEach(t),kvr=i(_e),kM=n(_e,"LI",{});var XSe=s(kM);N2e=n(XSe,"STRONG",{});var jFt=s(N2e);Svr=r(jFt,"mobilebert"),jFt.forEach(t),Rvr=r(XSe," \u2014 "),mH=n(XSe,"A",{href:!0});var DFt=s(mH);Bvr=r(DFt,"TFMobileBertForMultipleChoice"),DFt.forEach(t),Pvr=r(XSe," (MobileBERT model)"),XSe.forEach(t),Ivr=i(_e),SM=n(_e,"LI",{});var zSe=s(SM);j2e=n(zSe,"STRONG",{});var GFt=s(j2e);qvr=r(GFt,"mpnet"),GFt.forEach(t),Nvr=r(zSe," \u2014 "),gH=n(zSe,"A",{href:!0});var OFt=s(gH);jvr=r(OFt,"TFMPNetForMultipleChoice"),OFt.forEach(t),Dvr=r(zSe," (MPNet model)"),zSe.forEach(t),Gvr=i(_e),RM=n(_e,"LI",{});var QSe=s(RM);D2e=n(QSe,"STRONG",{});var VFt=s(D2e);Ovr=r(VFt,"rembert"),VFt.forEach(t),Vvr=r(QSe," \u2014 "),hH=n(QSe,"A",{href:!0});var XFt=s(hH);Xvr=r(XFt,"TFRemBertForMultipleChoice"),XFt.forEach(t),zvr=r(QSe," (RemBERT model)"),QSe.forEach(t),Qvr=i(_e),BM=n(_e,"LI",{});var WSe=s(BM);G2e=n(WSe,"STRONG",{});var zFt=s(G2e);Wvr=r(zFt,"roberta"),zFt.forEach(t),Hvr=r(WSe," \u2014 "),pH=n(WSe,"A",{href:!0});var QFt=s(pH);Uvr=r(QFt,"TFRobertaForMultipleChoice"),QFt.forEach(t),Jvr=r(WSe," (RoBERTa model)"),WSe.forEach(t),Yvr=i(_e),PM=n(_e,"LI",{});var HSe=s(PM);O2e=n(HSe,"STRONG",{});var WFt=s(O2e);Kvr=r(WFt,"roformer"),WFt.forEach(t),Zvr=r(HSe," \u2014 "),uH=n(HSe,"A",{href:!0});var HFt=s(uH);eFr=r(HFt,"TFRoFormerForMultipleChoice"),HFt.forEach(t),oFr=r(HSe," (RoFormer model)"),HSe.forEach(t),rFr=i(_e),IM=n(_e,"LI",{});var USe=s(IM);V2e=n(USe,"STRONG",{});var UFt=s(V2e);tFr=r(UFt,"xlm"),UFt.forEach(t),aFr=r(USe," \u2014 "),_H=n(USe,"A",{href:!0});var JFt=s(_H);nFr=r(JFt,"TFXLMForMultipleChoice"),JFt.forEach(t),sFr=r(USe," (XLM model)"),USe.forEach(t),lFr=i(_e),qM=n(_e,"LI",{});var JSe=s(qM);X2e=n(JSe,"STRONG",{});var YFt=s(X2e);iFr=r(YFt,"xlm-roberta"),YFt.forEach(t),dFr=r(JSe," \u2014 "),bH=n(JSe,"A",{href:!0});var KFt=s(bH);cFr=r(KFt,"TFXLMRobertaForMultipleChoice"),KFt.forEach(t),fFr=r(JSe," (XLM-RoBERTa model)"),JSe.forEach(t),mFr=i(_e),NM=n(_e,"LI",{});var YSe=s(NM);z2e=n(YSe,"STRONG",{});var ZFt=s(z2e);gFr=r(ZFt,"xlnet"),ZFt.forEach(t),hFr=r(YSe," \u2014 "),vH=n(YSe,"A",{href:!0});var e6t=s(vH);pFr=r(e6t,"TFXLNetForMultipleChoice"),e6t.forEach(t),uFr=r(YSe," (XLNet model)"),YSe.forEach(t),_e.forEach(t),_Fr=i(wl),T(jM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),lqe=i(f),dc=n(f,"H2",{class:!0});var gje=s(dc);DM=n(gje,"A",{id:!0,class:!0,href:!0});var o6t=s(DM);Q2e=n(o6t,"SPAN",{});var r6t=s(Q2e);T(_8.$$.fragment,r6t),r6t.forEach(t),o6t.forEach(t),bFr=i(gje),W2e=n(gje,"SPAN",{});var t6t=s(W2e);vFr=r(t6t,"TFAutoModelForNextSentencePrediction"),t6t.forEach(t),gje.forEach(t),iqe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(b8.$$.fragment,Al),FFr=i(Al),cc=n(Al,"P",{});var vZ=s(cc);TFr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FH=n(vZ,"A",{href:!0});var a6t=s(FH);MFr=r(a6t,"from_pretrained()"),a6t.forEach(t),EFr=r(vZ," class method or the "),TH=n(vZ,"A",{href:!0});var n6t=s(TH);CFr=r(n6t,"from_config()"),n6t.forEach(t),wFr=r(vZ,` class
method.`),vZ.forEach(t),AFr=i(Al),v8=n(Al,"P",{});var hje=s(v8);yFr=r(hje,"This class cannot be instantiated directly using "),H2e=n(hje,"CODE",{});var s6t=s(H2e);LFr=r(s6t,"__init__()"),s6t.forEach(t),xFr=r(hje," (throws an error)."),hje.forEach(t),$Fr=i(Al),Rt=n(Al,"DIV",{class:!0});var cw=s(Rt);T(F8.$$.fragment,cw),kFr=i(cw),U2e=n(cw,"P",{});var l6t=s(U2e);SFr=r(l6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),l6t.forEach(t),RFr=i(cw),fc=n(cw,"P",{});var FZ=s(fc);BFr=r(FZ,`Note:
Loading a model from its configuration file does `),J2e=n(FZ,"STRONG",{});var i6t=s(J2e);PFr=r(i6t,"not"),i6t.forEach(t),IFr=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(FZ,"A",{href:!0});var d6t=s(MH);qFr=r(d6t,"from_pretrained()"),d6t.forEach(t),NFr=r(FZ," to load the model weights."),FZ.forEach(t),jFr=i(cw),T(GM.$$.fragment,cw),cw.forEach(t),DFr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(T8.$$.fragment,yl),GFr=i(yl),Y2e=n(yl,"P",{});var c6t=s(Y2e);OFr=r(c6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),c6t.forEach(t),VFr=i(yl),sn=n(yl,"P",{});var fw=s(sn);XFr=r(fw,"The model class to instantiate is selected based on the "),K2e=n(fw,"CODE",{});var f6t=s(K2e);zFr=r(f6t,"model_type"),f6t.forEach(t),QFr=r(fw,` property of the config object (either
passed as an argument or loaded from `),Z2e=n(fw,"CODE",{});var m6t=s(Z2e);WFr=r(m6t,"pretrained_model_name_or_path"),m6t.forEach(t),HFr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(fw,"CODE",{});var g6t=s(eve);UFr=r(g6t,"pretrained_model_name_or_path"),g6t.forEach(t),JFr=r(fw,":"),fw.forEach(t),YFr=i(yl),M8=n(yl,"UL",{});var pje=s(M8);OM=n(pje,"LI",{});var KSe=s(OM);ove=n(KSe,"STRONG",{});var h6t=s(ove);KFr=r(h6t,"bert"),h6t.forEach(t),ZFr=r(KSe," \u2014 "),EH=n(KSe,"A",{href:!0});var p6t=s(EH);e6r=r(p6t,"TFBertForNextSentencePrediction"),p6t.forEach(t),o6r=r(KSe," (BERT model)"),KSe.forEach(t),r6r=i(pje),VM=n(pje,"LI",{});var ZSe=s(VM);rve=n(ZSe,"STRONG",{});var u6t=s(rve);t6r=r(u6t,"mobilebert"),u6t.forEach(t),a6r=r(ZSe," \u2014 "),CH=n(ZSe,"A",{href:!0});var _6t=s(CH);n6r=r(_6t,"TFMobileBertForNextSentencePrediction"),_6t.forEach(t),s6r=r(ZSe," (MobileBERT model)"),ZSe.forEach(t),pje.forEach(t),l6r=i(yl),T(XM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),dqe=i(f),mc=n(f,"H2",{class:!0});var uje=s(mc);zM=n(uje,"A",{id:!0,class:!0,href:!0});var b6t=s(zM);tve=n(b6t,"SPAN",{});var v6t=s(tve);T(E8.$$.fragment,v6t),v6t.forEach(t),b6t.forEach(t),i6r=i(uje),ave=n(uje,"SPAN",{});var F6t=s(ave);d6r=r(F6t,"TFAutoModelForTableQuestionAnswering"),F6t.forEach(t),uje.forEach(t),cqe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T(C8.$$.fragment,Ll),c6r=i(Ll),gc=n(Ll,"P",{});var TZ=s(gc);f6r=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),wH=n(TZ,"A",{href:!0});var T6t=s(wH);m6r=r(T6t,"from_pretrained()"),T6t.forEach(t),g6r=r(TZ," class method or the "),AH=n(TZ,"A",{href:!0});var M6t=s(AH);h6r=r(M6t,"from_config()"),M6t.forEach(t),p6r=r(TZ,` class
method.`),TZ.forEach(t),u6r=i(Ll),w8=n(Ll,"P",{});var _je=s(w8);_6r=r(_je,"This class cannot be instantiated directly using "),nve=n(_je,"CODE",{});var E6t=s(nve);b6r=r(E6t,"__init__()"),E6t.forEach(t),v6r=r(_je," (throws an error)."),_je.forEach(t),F6r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var mw=s(Bt);T(A8.$$.fragment,mw),T6r=i(mw),sve=n(mw,"P",{});var C6t=s(sve);M6r=r(C6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),C6t.forEach(t),E6r=i(mw),hc=n(mw,"P",{});var MZ=s(hc);C6r=r(MZ,`Note:
Loading a model from its configuration file does `),lve=n(MZ,"STRONG",{});var w6t=s(lve);w6r=r(w6t,"not"),w6t.forEach(t),A6r=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(MZ,"A",{href:!0});var A6t=s(yH);y6r=r(A6t,"from_pretrained()"),A6t.forEach(t),L6r=r(MZ," to load the model weights."),MZ.forEach(t),x6r=i(mw),T(QM.$$.fragment,mw),mw.forEach(t),$6r=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(y8.$$.fragment,xl),k6r=i(xl),ive=n(xl,"P",{});var y6t=s(ive);S6r=r(y6t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),y6t.forEach(t),R6r=i(xl),ln=n(xl,"P",{});var gw=s(ln);B6r=r(gw,"The model class to instantiate is selected based on the "),dve=n(gw,"CODE",{});var L6t=s(dve);P6r=r(L6t,"model_type"),L6t.forEach(t),I6r=r(gw,` property of the config object (either
passed as an argument or loaded from `),cve=n(gw,"CODE",{});var x6t=s(cve);q6r=r(x6t,"pretrained_model_name_or_path"),x6t.forEach(t),N6r=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(gw,"CODE",{});var $6t=s(fve);j6r=r($6t,"pretrained_model_name_or_path"),$6t.forEach(t),D6r=r(gw,":"),gw.forEach(t),G6r=i(xl),mve=n(xl,"UL",{});var k6t=s(mve);WM=n(k6t,"LI",{});var eRe=s(WM);gve=n(eRe,"STRONG",{});var S6t=s(gve);O6r=r(S6t,"tapas"),S6t.forEach(t),V6r=r(eRe," \u2014 "),LH=n(eRe,"A",{href:!0});var R6t=s(LH);X6r=r(R6t,"TFTapasForQuestionAnswering"),R6t.forEach(t),z6r=r(eRe," (TAPAS model)"),eRe.forEach(t),k6t.forEach(t),Q6r=i(xl),T(HM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),fqe=i(f),pc=n(f,"H2",{class:!0});var bje=s(pc);UM=n(bje,"A",{id:!0,class:!0,href:!0});var B6t=s(UM);hve=n(B6t,"SPAN",{});var P6t=s(hve);T(L8.$$.fragment,P6t),P6t.forEach(t),B6t.forEach(t),W6r=i(bje),pve=n(bje,"SPAN",{});var I6t=s(pve);H6r=r(I6t,"TFAutoModelForTokenClassification"),I6t.forEach(t),bje.forEach(t),mqe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T(x8.$$.fragment,$l),U6r=i($l),uc=n($l,"P",{});var EZ=s(uc);J6r=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xH=n(EZ,"A",{href:!0});var q6t=s(xH);Y6r=r(q6t,"from_pretrained()"),q6t.forEach(t),K6r=r(EZ," class method or the "),$H=n(EZ,"A",{href:!0});var N6t=s($H);Z6r=r(N6t,"from_config()"),N6t.forEach(t),eTr=r(EZ,` class
method.`),EZ.forEach(t),oTr=i($l),$8=n($l,"P",{});var vje=s($8);rTr=r(vje,"This class cannot be instantiated directly using "),uve=n(vje,"CODE",{});var j6t=s(uve);tTr=r(j6t,"__init__()"),j6t.forEach(t),aTr=r(vje," (throws an error)."),vje.forEach(t),nTr=i($l),Pt=n($l,"DIV",{class:!0});var hw=s(Pt);T(k8.$$.fragment,hw),sTr=i(hw),_ve=n(hw,"P",{});var D6t=s(_ve);lTr=r(D6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),D6t.forEach(t),iTr=i(hw),_c=n(hw,"P",{});var CZ=s(_c);dTr=r(CZ,`Note:
Loading a model from its configuration file does `),bve=n(CZ,"STRONG",{});var G6t=s(bve);cTr=r(G6t,"not"),G6t.forEach(t),fTr=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(CZ,"A",{href:!0});var O6t=s(kH);mTr=r(O6t,"from_pretrained()"),O6t.forEach(t),gTr=r(CZ," to load the model weights."),CZ.forEach(t),hTr=i(hw),T(JM.$$.fragment,hw),hw.forEach(t),pTr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(S8.$$.fragment,kl),uTr=i(kl),vve=n(kl,"P",{});var V6t=s(vve);_Tr=r(V6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),V6t.forEach(t),bTr=i(kl),dn=n(kl,"P",{});var pw=s(dn);vTr=r(pw,"The model class to instantiate is selected based on the "),Fve=n(pw,"CODE",{});var X6t=s(Fve);FTr=r(X6t,"model_type"),X6t.forEach(t),TTr=r(pw,` property of the config object (either
passed as an argument or loaded from `),Tve=n(pw,"CODE",{});var z6t=s(Tve);MTr=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),ETr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(pw,"CODE",{});var Q6t=s(Mve);CTr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),wTr=r(pw,":"),pw.forEach(t),ATr=i(kl),de=n(kl,"UL",{});var me=s(de);YM=n(me,"LI",{});var oRe=s(YM);Eve=n(oRe,"STRONG",{});var W6t=s(Eve);yTr=r(W6t,"albert"),W6t.forEach(t),LTr=r(oRe," \u2014 "),SH=n(oRe,"A",{href:!0});var H6t=s(SH);xTr=r(H6t,"TFAlbertForTokenClassification"),H6t.forEach(t),$Tr=r(oRe," (ALBERT model)"),oRe.forEach(t),kTr=i(me),KM=n(me,"LI",{});var rRe=s(KM);Cve=n(rRe,"STRONG",{});var U6t=s(Cve);STr=r(U6t,"bert"),U6t.forEach(t),RTr=r(rRe," \u2014 "),RH=n(rRe,"A",{href:!0});var J6t=s(RH);BTr=r(J6t,"TFBertForTokenClassification"),J6t.forEach(t),PTr=r(rRe," (BERT model)"),rRe.forEach(t),ITr=i(me),ZM=n(me,"LI",{});var tRe=s(ZM);wve=n(tRe,"STRONG",{});var Y6t=s(wve);qTr=r(Y6t,"camembert"),Y6t.forEach(t),NTr=r(tRe," \u2014 "),BH=n(tRe,"A",{href:!0});var K6t=s(BH);jTr=r(K6t,"TFCamembertForTokenClassification"),K6t.forEach(t),DTr=r(tRe," (CamemBERT model)"),tRe.forEach(t),GTr=i(me),e4=n(me,"LI",{});var aRe=s(e4);Ave=n(aRe,"STRONG",{});var Z6t=s(Ave);OTr=r(Z6t,"convbert"),Z6t.forEach(t),VTr=r(aRe," \u2014 "),PH=n(aRe,"A",{href:!0});var eTt=s(PH);XTr=r(eTt,"TFConvBertForTokenClassification"),eTt.forEach(t),zTr=r(aRe," (ConvBERT model)"),aRe.forEach(t),QTr=i(me),o4=n(me,"LI",{});var nRe=s(o4);yve=n(nRe,"STRONG",{});var oTt=s(yve);WTr=r(oTt,"deberta"),oTt.forEach(t),HTr=r(nRe," \u2014 "),IH=n(nRe,"A",{href:!0});var rTt=s(IH);UTr=r(rTt,"TFDebertaForTokenClassification"),rTt.forEach(t),JTr=r(nRe," (DeBERTa model)"),nRe.forEach(t),YTr=i(me),r4=n(me,"LI",{});var sRe=s(r4);Lve=n(sRe,"STRONG",{});var tTt=s(Lve);KTr=r(tTt,"deberta-v2"),tTt.forEach(t),ZTr=r(sRe," \u2014 "),qH=n(sRe,"A",{href:!0});var aTt=s(qH);e7r=r(aTt,"TFDebertaV2ForTokenClassification"),aTt.forEach(t),o7r=r(sRe," (DeBERTa-v2 model)"),sRe.forEach(t),r7r=i(me),t4=n(me,"LI",{});var lRe=s(t4);xve=n(lRe,"STRONG",{});var nTt=s(xve);t7r=r(nTt,"distilbert"),nTt.forEach(t),a7r=r(lRe," \u2014 "),NH=n(lRe,"A",{href:!0});var sTt=s(NH);n7r=r(sTt,"TFDistilBertForTokenClassification"),sTt.forEach(t),s7r=r(lRe," (DistilBERT model)"),lRe.forEach(t),l7r=i(me),a4=n(me,"LI",{});var iRe=s(a4);$ve=n(iRe,"STRONG",{});var lTt=s($ve);i7r=r(lTt,"electra"),lTt.forEach(t),d7r=r(iRe," \u2014 "),jH=n(iRe,"A",{href:!0});var iTt=s(jH);c7r=r(iTt,"TFElectraForTokenClassification"),iTt.forEach(t),f7r=r(iRe," (ELECTRA model)"),iRe.forEach(t),m7r=i(me),n4=n(me,"LI",{});var dRe=s(n4);kve=n(dRe,"STRONG",{});var dTt=s(kve);g7r=r(dTt,"flaubert"),dTt.forEach(t),h7r=r(dRe," \u2014 "),DH=n(dRe,"A",{href:!0});var cTt=s(DH);p7r=r(cTt,"TFFlaubertForTokenClassification"),cTt.forEach(t),u7r=r(dRe," (FlauBERT model)"),dRe.forEach(t),_7r=i(me),s4=n(me,"LI",{});var cRe=s(s4);Sve=n(cRe,"STRONG",{});var fTt=s(Sve);b7r=r(fTt,"funnel"),fTt.forEach(t),v7r=r(cRe," \u2014 "),GH=n(cRe,"A",{href:!0});var mTt=s(GH);F7r=r(mTt,"TFFunnelForTokenClassification"),mTt.forEach(t),T7r=r(cRe," (Funnel Transformer model)"),cRe.forEach(t),M7r=i(me),l4=n(me,"LI",{});var fRe=s(l4);Rve=n(fRe,"STRONG",{});var gTt=s(Rve);E7r=r(gTt,"layoutlm"),gTt.forEach(t),C7r=r(fRe," \u2014 "),OH=n(fRe,"A",{href:!0});var hTt=s(OH);w7r=r(hTt,"TFLayoutLMForTokenClassification"),hTt.forEach(t),A7r=r(fRe," (LayoutLM model)"),fRe.forEach(t),y7r=i(me),i4=n(me,"LI",{});var mRe=s(i4);Bve=n(mRe,"STRONG",{});var pTt=s(Bve);L7r=r(pTt,"longformer"),pTt.forEach(t),x7r=r(mRe," \u2014 "),VH=n(mRe,"A",{href:!0});var uTt=s(VH);$7r=r(uTt,"TFLongformerForTokenClassification"),uTt.forEach(t),k7r=r(mRe," (Longformer model)"),mRe.forEach(t),S7r=i(me),d4=n(me,"LI",{});var gRe=s(d4);Pve=n(gRe,"STRONG",{});var _Tt=s(Pve);R7r=r(_Tt,"mobilebert"),_Tt.forEach(t),B7r=r(gRe," \u2014 "),XH=n(gRe,"A",{href:!0});var bTt=s(XH);P7r=r(bTt,"TFMobileBertForTokenClassification"),bTt.forEach(t),I7r=r(gRe," (MobileBERT model)"),gRe.forEach(t),q7r=i(me),c4=n(me,"LI",{});var hRe=s(c4);Ive=n(hRe,"STRONG",{});var vTt=s(Ive);N7r=r(vTt,"mpnet"),vTt.forEach(t),j7r=r(hRe," \u2014 "),zH=n(hRe,"A",{href:!0});var FTt=s(zH);D7r=r(FTt,"TFMPNetForTokenClassification"),FTt.forEach(t),G7r=r(hRe," (MPNet model)"),hRe.forEach(t),O7r=i(me),f4=n(me,"LI",{});var pRe=s(f4);qve=n(pRe,"STRONG",{});var TTt=s(qve);V7r=r(TTt,"rembert"),TTt.forEach(t),X7r=r(pRe," \u2014 "),QH=n(pRe,"A",{href:!0});var MTt=s(QH);z7r=r(MTt,"TFRemBertForTokenClassification"),MTt.forEach(t),Q7r=r(pRe," (RemBERT model)"),pRe.forEach(t),W7r=i(me),m4=n(me,"LI",{});var uRe=s(m4);Nve=n(uRe,"STRONG",{});var ETt=s(Nve);H7r=r(ETt,"roberta"),ETt.forEach(t),U7r=r(uRe," \u2014 "),WH=n(uRe,"A",{href:!0});var CTt=s(WH);J7r=r(CTt,"TFRobertaForTokenClassification"),CTt.forEach(t),Y7r=r(uRe," (RoBERTa model)"),uRe.forEach(t),K7r=i(me),g4=n(me,"LI",{});var _Re=s(g4);jve=n(_Re,"STRONG",{});var wTt=s(jve);Z7r=r(wTt,"roformer"),wTt.forEach(t),eMr=r(_Re," \u2014 "),HH=n(_Re,"A",{href:!0});var ATt=s(HH);oMr=r(ATt,"TFRoFormerForTokenClassification"),ATt.forEach(t),rMr=r(_Re," (RoFormer model)"),_Re.forEach(t),tMr=i(me),h4=n(me,"LI",{});var bRe=s(h4);Dve=n(bRe,"STRONG",{});var yTt=s(Dve);aMr=r(yTt,"xlm"),yTt.forEach(t),nMr=r(bRe," \u2014 "),UH=n(bRe,"A",{href:!0});var LTt=s(UH);sMr=r(LTt,"TFXLMForTokenClassification"),LTt.forEach(t),lMr=r(bRe," (XLM model)"),bRe.forEach(t),iMr=i(me),p4=n(me,"LI",{});var vRe=s(p4);Gve=n(vRe,"STRONG",{});var xTt=s(Gve);dMr=r(xTt,"xlm-roberta"),xTt.forEach(t),cMr=r(vRe," \u2014 "),JH=n(vRe,"A",{href:!0});var $Tt=s(JH);fMr=r($Tt,"TFXLMRobertaForTokenClassification"),$Tt.forEach(t),mMr=r(vRe," (XLM-RoBERTa model)"),vRe.forEach(t),gMr=i(me),u4=n(me,"LI",{});var FRe=s(u4);Ove=n(FRe,"STRONG",{});var kTt=s(Ove);hMr=r(kTt,"xlnet"),kTt.forEach(t),pMr=r(FRe," \u2014 "),YH=n(FRe,"A",{href:!0});var STt=s(YH);uMr=r(STt,"TFXLNetForTokenClassification"),STt.forEach(t),_Mr=r(FRe," (XLNet model)"),FRe.forEach(t),me.forEach(t),bMr=i(kl),T(_4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),gqe=i(f),bc=n(f,"H2",{class:!0});var Fje=s(bc);b4=n(Fje,"A",{id:!0,class:!0,href:!0});var RTt=s(b4);Vve=n(RTt,"SPAN",{});var BTt=s(Vve);T(R8.$$.fragment,BTt),BTt.forEach(t),RTt.forEach(t),vMr=i(Fje),Xve=n(Fje,"SPAN",{});var PTt=s(Xve);FMr=r(PTt,"TFAutoModelForQuestionAnswering"),PTt.forEach(t),Fje.forEach(t),hqe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T(B8.$$.fragment,Sl),TMr=i(Sl),vc=n(Sl,"P",{});var wZ=s(vc);MMr=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KH=n(wZ,"A",{href:!0});var ITt=s(KH);EMr=r(ITt,"from_pretrained()"),ITt.forEach(t),CMr=r(wZ," class method or the "),ZH=n(wZ,"A",{href:!0});var qTt=s(ZH);wMr=r(qTt,"from_config()"),qTt.forEach(t),AMr=r(wZ,` class
method.`),wZ.forEach(t),yMr=i(Sl),P8=n(Sl,"P",{});var Tje=s(P8);LMr=r(Tje,"This class cannot be instantiated directly using "),zve=n(Tje,"CODE",{});var NTt=s(zve);xMr=r(NTt,"__init__()"),NTt.forEach(t),$Mr=r(Tje," (throws an error)."),Tje.forEach(t),kMr=i(Sl),It=n(Sl,"DIV",{class:!0});var uw=s(It);T(I8.$$.fragment,uw),SMr=i(uw),Qve=n(uw,"P",{});var jTt=s(Qve);RMr=r(jTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jTt.forEach(t),BMr=i(uw),Fc=n(uw,"P",{});var AZ=s(Fc);PMr=r(AZ,`Note:
Loading a model from its configuration file does `),Wve=n(AZ,"STRONG",{});var DTt=s(Wve);IMr=r(DTt,"not"),DTt.forEach(t),qMr=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=n(AZ,"A",{href:!0});var GTt=s(eU);NMr=r(GTt,"from_pretrained()"),GTt.forEach(t),jMr=r(AZ," to load the model weights."),AZ.forEach(t),DMr=i(uw),T(v4.$$.fragment,uw),uw.forEach(t),GMr=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(q8.$$.fragment,Rl),OMr=i(Rl),Hve=n(Rl,"P",{});var OTt=s(Hve);VMr=r(OTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),OTt.forEach(t),XMr=i(Rl),cn=n(Rl,"P",{});var _w=s(cn);zMr=r(_w,"The model class to instantiate is selected based on the "),Uve=n(_w,"CODE",{});var VTt=s(Uve);QMr=r(VTt,"model_type"),VTt.forEach(t),WMr=r(_w,` property of the config object (either
passed as an argument or loaded from `),Jve=n(_w,"CODE",{});var XTt=s(Jve);HMr=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),UMr=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(_w,"CODE",{});var zTt=s(Yve);JMr=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),YMr=r(_w,":"),_w.forEach(t),KMr=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);F4=n(ge,"LI",{});var TRe=s(F4);Kve=n(TRe,"STRONG",{});var QTt=s(Kve);ZMr=r(QTt,"albert"),QTt.forEach(t),e4r=r(TRe," \u2014 "),oU=n(TRe,"A",{href:!0});var WTt=s(oU);o4r=r(WTt,"TFAlbertForQuestionAnswering"),WTt.forEach(t),r4r=r(TRe," (ALBERT model)"),TRe.forEach(t),t4r=i(ge),T4=n(ge,"LI",{});var MRe=s(T4);Zve=n(MRe,"STRONG",{});var HTt=s(Zve);a4r=r(HTt,"bert"),HTt.forEach(t),n4r=r(MRe," \u2014 "),rU=n(MRe,"A",{href:!0});var UTt=s(rU);s4r=r(UTt,"TFBertForQuestionAnswering"),UTt.forEach(t),l4r=r(MRe," (BERT model)"),MRe.forEach(t),i4r=i(ge),M4=n(ge,"LI",{});var ERe=s(M4);eFe=n(ERe,"STRONG",{});var JTt=s(eFe);d4r=r(JTt,"camembert"),JTt.forEach(t),c4r=r(ERe," \u2014 "),tU=n(ERe,"A",{href:!0});var YTt=s(tU);f4r=r(YTt,"TFCamembertForQuestionAnswering"),YTt.forEach(t),m4r=r(ERe," (CamemBERT model)"),ERe.forEach(t),g4r=i(ge),E4=n(ge,"LI",{});var CRe=s(E4);oFe=n(CRe,"STRONG",{});var KTt=s(oFe);h4r=r(KTt,"convbert"),KTt.forEach(t),p4r=r(CRe," \u2014 "),aU=n(CRe,"A",{href:!0});var ZTt=s(aU);u4r=r(ZTt,"TFConvBertForQuestionAnswering"),ZTt.forEach(t),_4r=r(CRe," (ConvBERT model)"),CRe.forEach(t),b4r=i(ge),C4=n(ge,"LI",{});var wRe=s(C4);rFe=n(wRe,"STRONG",{});var e7t=s(rFe);v4r=r(e7t,"deberta"),e7t.forEach(t),F4r=r(wRe," \u2014 "),nU=n(wRe,"A",{href:!0});var o7t=s(nU);T4r=r(o7t,"TFDebertaForQuestionAnswering"),o7t.forEach(t),M4r=r(wRe," (DeBERTa model)"),wRe.forEach(t),E4r=i(ge),w4=n(ge,"LI",{});var ARe=s(w4);tFe=n(ARe,"STRONG",{});var r7t=s(tFe);C4r=r(r7t,"deberta-v2"),r7t.forEach(t),w4r=r(ARe," \u2014 "),sU=n(ARe,"A",{href:!0});var t7t=s(sU);A4r=r(t7t,"TFDebertaV2ForQuestionAnswering"),t7t.forEach(t),y4r=r(ARe," (DeBERTa-v2 model)"),ARe.forEach(t),L4r=i(ge),A4=n(ge,"LI",{});var yRe=s(A4);aFe=n(yRe,"STRONG",{});var a7t=s(aFe);x4r=r(a7t,"distilbert"),a7t.forEach(t),$4r=r(yRe," \u2014 "),lU=n(yRe,"A",{href:!0});var n7t=s(lU);k4r=r(n7t,"TFDistilBertForQuestionAnswering"),n7t.forEach(t),S4r=r(yRe," (DistilBERT model)"),yRe.forEach(t),R4r=i(ge),y4=n(ge,"LI",{});var LRe=s(y4);nFe=n(LRe,"STRONG",{});var s7t=s(nFe);B4r=r(s7t,"electra"),s7t.forEach(t),P4r=r(LRe," \u2014 "),iU=n(LRe,"A",{href:!0});var l7t=s(iU);I4r=r(l7t,"TFElectraForQuestionAnswering"),l7t.forEach(t),q4r=r(LRe," (ELECTRA model)"),LRe.forEach(t),N4r=i(ge),L4=n(ge,"LI",{});var xRe=s(L4);sFe=n(xRe,"STRONG",{});var i7t=s(sFe);j4r=r(i7t,"flaubert"),i7t.forEach(t),D4r=r(xRe," \u2014 "),dU=n(xRe,"A",{href:!0});var d7t=s(dU);G4r=r(d7t,"TFFlaubertForQuestionAnsweringSimple"),d7t.forEach(t),O4r=r(xRe," (FlauBERT model)"),xRe.forEach(t),V4r=i(ge),x4=n(ge,"LI",{});var $Re=s(x4);lFe=n($Re,"STRONG",{});var c7t=s(lFe);X4r=r(c7t,"funnel"),c7t.forEach(t),z4r=r($Re," \u2014 "),cU=n($Re,"A",{href:!0});var f7t=s(cU);Q4r=r(f7t,"TFFunnelForQuestionAnswering"),f7t.forEach(t),W4r=r($Re," (Funnel Transformer model)"),$Re.forEach(t),H4r=i(ge),$4=n(ge,"LI",{});var kRe=s($4);iFe=n(kRe,"STRONG",{});var m7t=s(iFe);U4r=r(m7t,"gptj"),m7t.forEach(t),J4r=r(kRe," \u2014 "),fU=n(kRe,"A",{href:!0});var g7t=s(fU);Y4r=r(g7t,"TFGPTJForQuestionAnswering"),g7t.forEach(t),K4r=r(kRe," (GPT-J model)"),kRe.forEach(t),Z4r=i(ge),k4=n(ge,"LI",{});var SRe=s(k4);dFe=n(SRe,"STRONG",{});var h7t=s(dFe);eEr=r(h7t,"longformer"),h7t.forEach(t),oEr=r(SRe," \u2014 "),mU=n(SRe,"A",{href:!0});var p7t=s(mU);rEr=r(p7t,"TFLongformerForQuestionAnswering"),p7t.forEach(t),tEr=r(SRe," (Longformer model)"),SRe.forEach(t),aEr=i(ge),S4=n(ge,"LI",{});var RRe=s(S4);cFe=n(RRe,"STRONG",{});var u7t=s(cFe);nEr=r(u7t,"mobilebert"),u7t.forEach(t),sEr=r(RRe," \u2014 "),gU=n(RRe,"A",{href:!0});var _7t=s(gU);lEr=r(_7t,"TFMobileBertForQuestionAnswering"),_7t.forEach(t),iEr=r(RRe," (MobileBERT model)"),RRe.forEach(t),dEr=i(ge),R4=n(ge,"LI",{});var BRe=s(R4);fFe=n(BRe,"STRONG",{});var b7t=s(fFe);cEr=r(b7t,"mpnet"),b7t.forEach(t),fEr=r(BRe," \u2014 "),hU=n(BRe,"A",{href:!0});var v7t=s(hU);mEr=r(v7t,"TFMPNetForQuestionAnswering"),v7t.forEach(t),gEr=r(BRe," (MPNet model)"),BRe.forEach(t),hEr=i(ge),B4=n(ge,"LI",{});var PRe=s(B4);mFe=n(PRe,"STRONG",{});var F7t=s(mFe);pEr=r(F7t,"rembert"),F7t.forEach(t),uEr=r(PRe," \u2014 "),pU=n(PRe,"A",{href:!0});var T7t=s(pU);_Er=r(T7t,"TFRemBertForQuestionAnswering"),T7t.forEach(t),bEr=r(PRe," (RemBERT model)"),PRe.forEach(t),vEr=i(ge),P4=n(ge,"LI",{});var IRe=s(P4);gFe=n(IRe,"STRONG",{});var M7t=s(gFe);FEr=r(M7t,"roberta"),M7t.forEach(t),TEr=r(IRe," \u2014 "),uU=n(IRe,"A",{href:!0});var E7t=s(uU);MEr=r(E7t,"TFRobertaForQuestionAnswering"),E7t.forEach(t),EEr=r(IRe," (RoBERTa model)"),IRe.forEach(t),CEr=i(ge),I4=n(ge,"LI",{});var qRe=s(I4);hFe=n(qRe,"STRONG",{});var C7t=s(hFe);wEr=r(C7t,"roformer"),C7t.forEach(t),AEr=r(qRe," \u2014 "),_U=n(qRe,"A",{href:!0});var w7t=s(_U);yEr=r(w7t,"TFRoFormerForQuestionAnswering"),w7t.forEach(t),LEr=r(qRe," (RoFormer model)"),qRe.forEach(t),xEr=i(ge),q4=n(ge,"LI",{});var NRe=s(q4);pFe=n(NRe,"STRONG",{});var A7t=s(pFe);$Er=r(A7t,"xlm"),A7t.forEach(t),kEr=r(NRe," \u2014 "),bU=n(NRe,"A",{href:!0});var y7t=s(bU);SEr=r(y7t,"TFXLMForQuestionAnsweringSimple"),y7t.forEach(t),REr=r(NRe," (XLM model)"),NRe.forEach(t),BEr=i(ge),N4=n(ge,"LI",{});var jRe=s(N4);uFe=n(jRe,"STRONG",{});var L7t=s(uFe);PEr=r(L7t,"xlm-roberta"),L7t.forEach(t),IEr=r(jRe," \u2014 "),vU=n(jRe,"A",{href:!0});var x7t=s(vU);qEr=r(x7t,"TFXLMRobertaForQuestionAnswering"),x7t.forEach(t),NEr=r(jRe," (XLM-RoBERTa model)"),jRe.forEach(t),jEr=i(ge),j4=n(ge,"LI",{});var DRe=s(j4);_Fe=n(DRe,"STRONG",{});var $7t=s(_Fe);DEr=r($7t,"xlnet"),$7t.forEach(t),GEr=r(DRe," \u2014 "),FU=n(DRe,"A",{href:!0});var k7t=s(FU);OEr=r(k7t,"TFXLNetForQuestionAnsweringSimple"),k7t.forEach(t),VEr=r(DRe," (XLNet model)"),DRe.forEach(t),ge.forEach(t),XEr=i(Rl),T(D4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),pqe=i(f),Tc=n(f,"H2",{class:!0});var Mje=s(Tc);G4=n(Mje,"A",{id:!0,class:!0,href:!0});var S7t=s(G4);bFe=n(S7t,"SPAN",{});var R7t=s(bFe);T(N8.$$.fragment,R7t),R7t.forEach(t),S7t.forEach(t),zEr=i(Mje),vFe=n(Mje,"SPAN",{});var B7t=s(vFe);QEr=r(B7t,"TFAutoModelForVision2Seq"),B7t.forEach(t),Mje.forEach(t),uqe=i(f),dr=n(f,"DIV",{class:!0});var Bl=s(dr);T(j8.$$.fragment,Bl),WEr=i(Bl),Mc=n(Bl,"P",{});var yZ=s(Mc);HEr=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),TU=n(yZ,"A",{href:!0});var P7t=s(TU);UEr=r(P7t,"from_pretrained()"),P7t.forEach(t),JEr=r(yZ," class method or the "),MU=n(yZ,"A",{href:!0});var I7t=s(MU);YEr=r(I7t,"from_config()"),I7t.forEach(t),KEr=r(yZ,` class
method.`),yZ.forEach(t),ZEr=i(Bl),D8=n(Bl,"P",{});var Eje=s(D8);e5r=r(Eje,"This class cannot be instantiated directly using "),FFe=n(Eje,"CODE",{});var q7t=s(FFe);o5r=r(q7t,"__init__()"),q7t.forEach(t),r5r=r(Eje," (throws an error)."),Eje.forEach(t),t5r=i(Bl),qt=n(Bl,"DIV",{class:!0});var bw=s(qt);T(G8.$$.fragment,bw),a5r=i(bw),TFe=n(bw,"P",{});var N7t=s(TFe);n5r=r(N7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),N7t.forEach(t),s5r=i(bw),Ec=n(bw,"P",{});var LZ=s(Ec);l5r=r(LZ,`Note:
Loading a model from its configuration file does `),MFe=n(LZ,"STRONG",{});var j7t=s(MFe);i5r=r(j7t,"not"),j7t.forEach(t),d5r=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(LZ,"A",{href:!0});var D7t=s(EU);c5r=r(D7t,"from_pretrained()"),D7t.forEach(t),f5r=r(LZ," to load the model weights."),LZ.forEach(t),m5r=i(bw),T(O4.$$.fragment,bw),bw.forEach(t),g5r=i(Bl),qr=n(Bl,"DIV",{class:!0});var Pl=s(qr);T(O8.$$.fragment,Pl),h5r=i(Pl),EFe=n(Pl,"P",{});var G7t=s(EFe);p5r=r(G7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),G7t.forEach(t),u5r=i(Pl),fn=n(Pl,"P",{});var vw=s(fn);_5r=r(vw,"The model class to instantiate is selected based on the "),CFe=n(vw,"CODE",{});var O7t=s(CFe);b5r=r(O7t,"model_type"),O7t.forEach(t),v5r=r(vw,` property of the config object (either
passed as an argument or loaded from `),wFe=n(vw,"CODE",{});var V7t=s(wFe);F5r=r(V7t,"pretrained_model_name_or_path"),V7t.forEach(t),T5r=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(vw,"CODE",{});var X7t=s(AFe);M5r=r(X7t,"pretrained_model_name_or_path"),X7t.forEach(t),E5r=r(vw,":"),vw.forEach(t),C5r=i(Pl),yFe=n(Pl,"UL",{});var z7t=s(yFe);V4=n(z7t,"LI",{});var GRe=s(V4);LFe=n(GRe,"STRONG",{});var Q7t=s(LFe);w5r=r(Q7t,"vision-encoder-decoder"),Q7t.forEach(t),A5r=r(GRe," \u2014 "),CU=n(GRe,"A",{href:!0});var W7t=s(CU);y5r=r(W7t,"TFVisionEncoderDecoderModel"),W7t.forEach(t),L5r=r(GRe," (Vision Encoder decoder model)"),GRe.forEach(t),z7t.forEach(t),x5r=i(Pl),T(X4.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),_qe=i(f),Cc=n(f,"H2",{class:!0});var Cje=s(Cc);z4=n(Cje,"A",{id:!0,class:!0,href:!0});var H7t=s(z4);xFe=n(H7t,"SPAN",{});var U7t=s(xFe);T(V8.$$.fragment,U7t),U7t.forEach(t),H7t.forEach(t),$5r=i(Cje),$Fe=n(Cje,"SPAN",{});var J7t=s($Fe);k5r=r(J7t,"TFAutoModelForSpeechSeq2Seq"),J7t.forEach(t),Cje.forEach(t),bqe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(X8.$$.fragment,Il),S5r=i(Il),wc=n(Il,"P",{});var xZ=s(wc);R5r=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wU=n(xZ,"A",{href:!0});var Y7t=s(wU);B5r=r(Y7t,"from_pretrained()"),Y7t.forEach(t),P5r=r(xZ," class method or the "),AU=n(xZ,"A",{href:!0});var K7t=s(AU);I5r=r(K7t,"from_config()"),K7t.forEach(t),q5r=r(xZ,` class
method.`),xZ.forEach(t),N5r=i(Il),z8=n(Il,"P",{});var wje=s(z8);j5r=r(wje,"This class cannot be instantiated directly using "),kFe=n(wje,"CODE",{});var Z7t=s(kFe);D5r=r(Z7t,"__init__()"),Z7t.forEach(t),G5r=r(wje," (throws an error)."),wje.forEach(t),O5r=i(Il),Nt=n(Il,"DIV",{class:!0});var Fw=s(Nt);T(Q8.$$.fragment,Fw),V5r=i(Fw),SFe=n(Fw,"P",{});var eMt=s(SFe);X5r=r(eMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eMt.forEach(t),z5r=i(Fw),Ac=n(Fw,"P",{});var $Z=s(Ac);Q5r=r($Z,`Note:
Loading a model from its configuration file does `),RFe=n($Z,"STRONG",{});var oMt=s(RFe);W5r=r(oMt,"not"),oMt.forEach(t),H5r=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n($Z,"A",{href:!0});var rMt=s(yU);U5r=r(rMt,"from_pretrained()"),rMt.forEach(t),J5r=r($Z," to load the model weights."),$Z.forEach(t),Y5r=i(Fw),T(Q4.$$.fragment,Fw),Fw.forEach(t),K5r=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(W8.$$.fragment,ql),Z5r=i(ql),BFe=n(ql,"P",{});var tMt=s(BFe);eCr=r(tMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tMt.forEach(t),oCr=i(ql),mn=n(ql,"P",{});var Tw=s(mn);rCr=r(Tw,"The model class to instantiate is selected based on the "),PFe=n(Tw,"CODE",{});var aMt=s(PFe);tCr=r(aMt,"model_type"),aMt.forEach(t),aCr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),IFe=n(Tw,"CODE",{});var nMt=s(IFe);nCr=r(nMt,"pretrained_model_name_or_path"),nMt.forEach(t),sCr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(Tw,"CODE",{});var sMt=s(qFe);lCr=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),iCr=r(Tw,":"),Tw.forEach(t),dCr=i(ql),NFe=n(ql,"UL",{});var lMt=s(NFe);W4=n(lMt,"LI",{});var ORe=s(W4);jFe=n(ORe,"STRONG",{});var iMt=s(jFe);cCr=r(iMt,"speech_to_text"),iMt.forEach(t),fCr=r(ORe," \u2014 "),LU=n(ORe,"A",{href:!0});var dMt=s(LU);mCr=r(dMt,"TFSpeech2TextForConditionalGeneration"),dMt.forEach(t),gCr=r(ORe," (Speech2Text model)"),ORe.forEach(t),lMt.forEach(t),hCr=i(ql),T(H4.$$.fragment,ql),ql.forEach(t),Il.forEach(t),vqe=i(f),yc=n(f,"H2",{class:!0});var Aje=s(yc);U4=n(Aje,"A",{id:!0,class:!0,href:!0});var cMt=s(U4);DFe=n(cMt,"SPAN",{});var fMt=s(DFe);T(H8.$$.fragment,fMt),fMt.forEach(t),cMt.forEach(t),pCr=i(Aje),GFe=n(Aje,"SPAN",{});var mMt=s(GFe);uCr=r(mMt,"FlaxAutoModel"),mMt.forEach(t),Aje.forEach(t),Fqe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(U8.$$.fragment,Nl),_Cr=i(Nl),Lc=n(Nl,"P",{});var kZ=s(Lc);bCr=r(kZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xU=n(kZ,"A",{href:!0});var gMt=s(xU);vCr=r(gMt,"from_pretrained()"),gMt.forEach(t),FCr=r(kZ," class method or the "),$U=n(kZ,"A",{href:!0});var hMt=s($U);TCr=r(hMt,"from_config()"),hMt.forEach(t),MCr=r(kZ,` class
method.`),kZ.forEach(t),ECr=i(Nl),J8=n(Nl,"P",{});var yje=s(J8);CCr=r(yje,"This class cannot be instantiated directly using "),OFe=n(yje,"CODE",{});var pMt=s(OFe);wCr=r(pMt,"__init__()"),pMt.forEach(t),ACr=r(yje," (throws an error)."),yje.forEach(t),yCr=i(Nl),jt=n(Nl,"DIV",{class:!0});var Mw=s(jt);T(Y8.$$.fragment,Mw),LCr=i(Mw),VFe=n(Mw,"P",{});var uMt=s(VFe);xCr=r(uMt,"Instantiates one of the base model classes of the library from a configuration."),uMt.forEach(t),$Cr=i(Mw),xc=n(Mw,"P",{});var SZ=s(xc);kCr=r(SZ,`Note:
Loading a model from its configuration file does `),XFe=n(SZ,"STRONG",{});var _Mt=s(XFe);SCr=r(_Mt,"not"),_Mt.forEach(t),RCr=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(SZ,"A",{href:!0});var bMt=s(kU);BCr=r(bMt,"from_pretrained()"),bMt.forEach(t),PCr=r(SZ," to load the model weights."),SZ.forEach(t),ICr=i(Mw),T(J4.$$.fragment,Mw),Mw.forEach(t),qCr=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(K8.$$.fragment,jl),NCr=i(jl),zFe=n(jl,"P",{});var vMt=s(zFe);jCr=r(vMt,"Instantiate one of the base model classes of the library from a pretrained model."),vMt.forEach(t),DCr=i(jl),gn=n(jl,"P",{});var Ew=s(gn);GCr=r(Ew,"The model class to instantiate is selected based on the "),QFe=n(Ew,"CODE",{});var FMt=s(QFe);OCr=r(FMt,"model_type"),FMt.forEach(t),VCr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),WFe=n(Ew,"CODE",{});var TMt=s(WFe);XCr=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),zCr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(Ew,"CODE",{});var MMt=s(HFe);QCr=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),WCr=r(Ew,":"),Ew.forEach(t),HCr=i(jl),re=n(jl,"UL",{});var ne=s(re);Y4=n(ne,"LI",{});var VRe=s(Y4);UFe=n(VRe,"STRONG",{});var EMt=s(UFe);UCr=r(EMt,"albert"),EMt.forEach(t),JCr=r(VRe," \u2014 "),SU=n(VRe,"A",{href:!0});var CMt=s(SU);YCr=r(CMt,"FlaxAlbertModel"),CMt.forEach(t),KCr=r(VRe," (ALBERT model)"),VRe.forEach(t),ZCr=i(ne),K4=n(ne,"LI",{});var XRe=s(K4);JFe=n(XRe,"STRONG",{});var wMt=s(JFe);e3r=r(wMt,"bart"),wMt.forEach(t),o3r=r(XRe," \u2014 "),RU=n(XRe,"A",{href:!0});var AMt=s(RU);r3r=r(AMt,"FlaxBartModel"),AMt.forEach(t),t3r=r(XRe," (BART model)"),XRe.forEach(t),a3r=i(ne),Z4=n(ne,"LI",{});var zRe=s(Z4);YFe=n(zRe,"STRONG",{});var yMt=s(YFe);n3r=r(yMt,"beit"),yMt.forEach(t),s3r=r(zRe," \u2014 "),BU=n(zRe,"A",{href:!0});var LMt=s(BU);l3r=r(LMt,"FlaxBeitModel"),LMt.forEach(t),i3r=r(zRe," (BEiT model)"),zRe.forEach(t),d3r=i(ne),eE=n(ne,"LI",{});var QRe=s(eE);KFe=n(QRe,"STRONG",{});var xMt=s(KFe);c3r=r(xMt,"bert"),xMt.forEach(t),f3r=r(QRe," \u2014 "),PU=n(QRe,"A",{href:!0});var $Mt=s(PU);m3r=r($Mt,"FlaxBertModel"),$Mt.forEach(t),g3r=r(QRe," (BERT model)"),QRe.forEach(t),h3r=i(ne),oE=n(ne,"LI",{});var WRe=s(oE);ZFe=n(WRe,"STRONG",{});var kMt=s(ZFe);p3r=r(kMt,"big_bird"),kMt.forEach(t),u3r=r(WRe," \u2014 "),IU=n(WRe,"A",{href:!0});var SMt=s(IU);_3r=r(SMt,"FlaxBigBirdModel"),SMt.forEach(t),b3r=r(WRe," (BigBird model)"),WRe.forEach(t),v3r=i(ne),rE=n(ne,"LI",{});var HRe=s(rE);e6e=n(HRe,"STRONG",{});var RMt=s(e6e);F3r=r(RMt,"blenderbot"),RMt.forEach(t),T3r=r(HRe," \u2014 "),qU=n(HRe,"A",{href:!0});var BMt=s(qU);M3r=r(BMt,"FlaxBlenderbotModel"),BMt.forEach(t),E3r=r(HRe," (Blenderbot model)"),HRe.forEach(t),C3r=i(ne),tE=n(ne,"LI",{});var URe=s(tE);o6e=n(URe,"STRONG",{});var PMt=s(o6e);w3r=r(PMt,"blenderbot-small"),PMt.forEach(t),A3r=r(URe," \u2014 "),NU=n(URe,"A",{href:!0});var IMt=s(NU);y3r=r(IMt,"FlaxBlenderbotSmallModel"),IMt.forEach(t),L3r=r(URe," (BlenderbotSmall model)"),URe.forEach(t),x3r=i(ne),aE=n(ne,"LI",{});var JRe=s(aE);r6e=n(JRe,"STRONG",{});var qMt=s(r6e);$3r=r(qMt,"clip"),qMt.forEach(t),k3r=r(JRe," \u2014 "),jU=n(JRe,"A",{href:!0});var NMt=s(jU);S3r=r(NMt,"FlaxCLIPModel"),NMt.forEach(t),R3r=r(JRe," (CLIP model)"),JRe.forEach(t),B3r=i(ne),nE=n(ne,"LI",{});var YRe=s(nE);t6e=n(YRe,"STRONG",{});var jMt=s(t6e);P3r=r(jMt,"distilbert"),jMt.forEach(t),I3r=r(YRe," \u2014 "),DU=n(YRe,"A",{href:!0});var DMt=s(DU);q3r=r(DMt,"FlaxDistilBertModel"),DMt.forEach(t),N3r=r(YRe," (DistilBERT model)"),YRe.forEach(t),j3r=i(ne),sE=n(ne,"LI",{});var KRe=s(sE);a6e=n(KRe,"STRONG",{});var GMt=s(a6e);D3r=r(GMt,"electra"),GMt.forEach(t),G3r=r(KRe," \u2014 "),GU=n(KRe,"A",{href:!0});var OMt=s(GU);O3r=r(OMt,"FlaxElectraModel"),OMt.forEach(t),V3r=r(KRe," (ELECTRA model)"),KRe.forEach(t),X3r=i(ne),lE=n(ne,"LI",{});var ZRe=s(lE);n6e=n(ZRe,"STRONG",{});var VMt=s(n6e);z3r=r(VMt,"gpt2"),VMt.forEach(t),Q3r=r(ZRe," \u2014 "),OU=n(ZRe,"A",{href:!0});var XMt=s(OU);W3r=r(XMt,"FlaxGPT2Model"),XMt.forEach(t),H3r=r(ZRe," (OpenAI GPT-2 model)"),ZRe.forEach(t),U3r=i(ne),iE=n(ne,"LI",{});var eBe=s(iE);s6e=n(eBe,"STRONG",{});var zMt=s(s6e);J3r=r(zMt,"gpt_neo"),zMt.forEach(t),Y3r=r(eBe," \u2014 "),VU=n(eBe,"A",{href:!0});var QMt=s(VU);K3r=r(QMt,"FlaxGPTNeoModel"),QMt.forEach(t),Z3r=r(eBe," (GPT Neo model)"),eBe.forEach(t),ewr=i(ne),dE=n(ne,"LI",{});var oBe=s(dE);l6e=n(oBe,"STRONG",{});var WMt=s(l6e);owr=r(WMt,"gptj"),WMt.forEach(t),rwr=r(oBe," \u2014 "),XU=n(oBe,"A",{href:!0});var HMt=s(XU);twr=r(HMt,"FlaxGPTJModel"),HMt.forEach(t),awr=r(oBe," (GPT-J model)"),oBe.forEach(t),nwr=i(ne),cE=n(ne,"LI",{});var rBe=s(cE);i6e=n(rBe,"STRONG",{});var UMt=s(i6e);swr=r(UMt,"marian"),UMt.forEach(t),lwr=r(rBe," \u2014 "),zU=n(rBe,"A",{href:!0});var JMt=s(zU);iwr=r(JMt,"FlaxMarianModel"),JMt.forEach(t),dwr=r(rBe," (Marian model)"),rBe.forEach(t),cwr=i(ne),fE=n(ne,"LI",{});var tBe=s(fE);d6e=n(tBe,"STRONG",{});var YMt=s(d6e);fwr=r(YMt,"mbart"),YMt.forEach(t),mwr=r(tBe," \u2014 "),QU=n(tBe,"A",{href:!0});var KMt=s(QU);gwr=r(KMt,"FlaxMBartModel"),KMt.forEach(t),hwr=r(tBe," (mBART model)"),tBe.forEach(t),pwr=i(ne),mE=n(ne,"LI",{});var aBe=s(mE);c6e=n(aBe,"STRONG",{});var ZMt=s(c6e);uwr=r(ZMt,"mt5"),ZMt.forEach(t),_wr=r(aBe," \u2014 "),WU=n(aBe,"A",{href:!0});var e4t=s(WU);bwr=r(e4t,"FlaxMT5Model"),e4t.forEach(t),vwr=r(aBe," (mT5 model)"),aBe.forEach(t),Fwr=i(ne),gE=n(ne,"LI",{});var nBe=s(gE);f6e=n(nBe,"STRONG",{});var o4t=s(f6e);Twr=r(o4t,"pegasus"),o4t.forEach(t),Mwr=r(nBe," \u2014 "),HU=n(nBe,"A",{href:!0});var r4t=s(HU);Ewr=r(r4t,"FlaxPegasusModel"),r4t.forEach(t),Cwr=r(nBe," (Pegasus model)"),nBe.forEach(t),wwr=i(ne),hE=n(ne,"LI",{});var sBe=s(hE);m6e=n(sBe,"STRONG",{});var t4t=s(m6e);Awr=r(t4t,"roberta"),t4t.forEach(t),ywr=r(sBe," \u2014 "),UU=n(sBe,"A",{href:!0});var a4t=s(UU);Lwr=r(a4t,"FlaxRobertaModel"),a4t.forEach(t),xwr=r(sBe," (RoBERTa model)"),sBe.forEach(t),$wr=i(ne),pE=n(ne,"LI",{});var lBe=s(pE);g6e=n(lBe,"STRONG",{});var n4t=s(g6e);kwr=r(n4t,"roformer"),n4t.forEach(t),Swr=r(lBe," \u2014 "),JU=n(lBe,"A",{href:!0});var s4t=s(JU);Rwr=r(s4t,"FlaxRoFormerModel"),s4t.forEach(t),Bwr=r(lBe," (RoFormer model)"),lBe.forEach(t),Pwr=i(ne),uE=n(ne,"LI",{});var iBe=s(uE);h6e=n(iBe,"STRONG",{});var l4t=s(h6e);Iwr=r(l4t,"t5"),l4t.forEach(t),qwr=r(iBe," \u2014 "),YU=n(iBe,"A",{href:!0});var i4t=s(YU);Nwr=r(i4t,"FlaxT5Model"),i4t.forEach(t),jwr=r(iBe," (T5 model)"),iBe.forEach(t),Dwr=i(ne),_E=n(ne,"LI",{});var dBe=s(_E);p6e=n(dBe,"STRONG",{});var d4t=s(p6e);Gwr=r(d4t,"vision-text-dual-encoder"),d4t.forEach(t),Owr=r(dBe," \u2014 "),KU=n(dBe,"A",{href:!0});var c4t=s(KU);Vwr=r(c4t,"FlaxVisionTextDualEncoderModel"),c4t.forEach(t),Xwr=r(dBe," (VisionTextDualEncoder model)"),dBe.forEach(t),zwr=i(ne),bE=n(ne,"LI",{});var cBe=s(bE);u6e=n(cBe,"STRONG",{});var f4t=s(u6e);Qwr=r(f4t,"vit"),f4t.forEach(t),Wwr=r(cBe," \u2014 "),ZU=n(cBe,"A",{href:!0});var m4t=s(ZU);Hwr=r(m4t,"FlaxViTModel"),m4t.forEach(t),Uwr=r(cBe," (ViT model)"),cBe.forEach(t),Jwr=i(ne),vE=n(ne,"LI",{});var fBe=s(vE);_6e=n(fBe,"STRONG",{});var g4t=s(_6e);Ywr=r(g4t,"wav2vec2"),g4t.forEach(t),Kwr=r(fBe," \u2014 "),eJ=n(fBe,"A",{href:!0});var h4t=s(eJ);Zwr=r(h4t,"FlaxWav2Vec2Model"),h4t.forEach(t),eAr=r(fBe," (Wav2Vec2 model)"),fBe.forEach(t),oAr=i(ne),FE=n(ne,"LI",{});var mBe=s(FE);b6e=n(mBe,"STRONG",{});var p4t=s(b6e);rAr=r(p4t,"xglm"),p4t.forEach(t),tAr=r(mBe," \u2014 "),oJ=n(mBe,"A",{href:!0});var u4t=s(oJ);aAr=r(u4t,"FlaxXGLMModel"),u4t.forEach(t),nAr=r(mBe," (XGLM model)"),mBe.forEach(t),sAr=i(ne),TE=n(ne,"LI",{});var gBe=s(TE);v6e=n(gBe,"STRONG",{});var _4t=s(v6e);lAr=r(_4t,"xlm-roberta"),_4t.forEach(t),iAr=r(gBe," \u2014 "),rJ=n(gBe,"A",{href:!0});var b4t=s(rJ);dAr=r(b4t,"FlaxXLMRobertaModel"),b4t.forEach(t),cAr=r(gBe," (XLM-RoBERTa model)"),gBe.forEach(t),ne.forEach(t),fAr=i(jl),T(ME.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),Tqe=i(f),$c=n(f,"H2",{class:!0});var Lje=s($c);EE=n(Lje,"A",{id:!0,class:!0,href:!0});var v4t=s(EE);F6e=n(v4t,"SPAN",{});var F4t=s(F6e);T(Z8.$$.fragment,F4t),F4t.forEach(t),v4t.forEach(t),mAr=i(Lje),T6e=n(Lje,"SPAN",{});var T4t=s(T6e);gAr=r(T4t,"FlaxAutoModelForCausalLM"),T4t.forEach(t),Lje.forEach(t),Mqe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(ex.$$.fragment,Dl),hAr=i(Dl),kc=n(Dl,"P",{});var RZ=s(kc);pAr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tJ=n(RZ,"A",{href:!0});var M4t=s(tJ);uAr=r(M4t,"from_pretrained()"),M4t.forEach(t),_Ar=r(RZ," class method or the "),aJ=n(RZ,"A",{href:!0});var E4t=s(aJ);bAr=r(E4t,"from_config()"),E4t.forEach(t),vAr=r(RZ,` class
method.`),RZ.forEach(t),FAr=i(Dl),ox=n(Dl,"P",{});var xje=s(ox);TAr=r(xje,"This class cannot be instantiated directly using "),M6e=n(xje,"CODE",{});var C4t=s(M6e);MAr=r(C4t,"__init__()"),C4t.forEach(t),EAr=r(xje," (throws an error)."),xje.forEach(t),CAr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var Cw=s(Dt);T(rx.$$.fragment,Cw),wAr=i(Cw),E6e=n(Cw,"P",{});var w4t=s(E6e);AAr=r(w4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),w4t.forEach(t),yAr=i(Cw),Sc=n(Cw,"P",{});var BZ=s(Sc);LAr=r(BZ,`Note:
Loading a model from its configuration file does `),C6e=n(BZ,"STRONG",{});var A4t=s(C6e);xAr=r(A4t,"not"),A4t.forEach(t),$Ar=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(BZ,"A",{href:!0});var y4t=s(nJ);kAr=r(y4t,"from_pretrained()"),y4t.forEach(t),SAr=r(BZ," to load the model weights."),BZ.forEach(t),RAr=i(Cw),T(CE.$$.fragment,Cw),Cw.forEach(t),BAr=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(tx.$$.fragment,Gl),PAr=i(Gl),w6e=n(Gl,"P",{});var L4t=s(w6e);IAr=r(L4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L4t.forEach(t),qAr=i(Gl),hn=n(Gl,"P",{});var ww=s(hn);NAr=r(ww,"The model class to instantiate is selected based on the "),A6e=n(ww,"CODE",{});var x4t=s(A6e);jAr=r(x4t,"model_type"),x4t.forEach(t),DAr=r(ww,` property of the config object (either
passed as an argument or loaded from `),y6e=n(ww,"CODE",{});var $4t=s(y6e);GAr=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),OAr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=n(ww,"CODE",{});var k4t=s(L6e);VAr=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),XAr=r(ww,":"),ww.forEach(t),zAr=i(Gl),ke=n(Gl,"UL",{});var Oe=s(ke);wE=n(Oe,"LI",{});var hBe=s(wE);x6e=n(hBe,"STRONG",{});var S4t=s(x6e);QAr=r(S4t,"bart"),S4t.forEach(t),WAr=r(hBe," \u2014 "),sJ=n(hBe,"A",{href:!0});var R4t=s(sJ);HAr=r(R4t,"FlaxBartForCausalLM"),R4t.forEach(t),UAr=r(hBe," (BART model)"),hBe.forEach(t),JAr=i(Oe),AE=n(Oe,"LI",{});var pBe=s(AE);$6e=n(pBe,"STRONG",{});var B4t=s($6e);YAr=r(B4t,"bert"),B4t.forEach(t),KAr=r(pBe," \u2014 "),lJ=n(pBe,"A",{href:!0});var P4t=s(lJ);ZAr=r(P4t,"FlaxBertForCausalLM"),P4t.forEach(t),eyr=r(pBe," (BERT model)"),pBe.forEach(t),oyr=i(Oe),yE=n(Oe,"LI",{});var uBe=s(yE);k6e=n(uBe,"STRONG",{});var I4t=s(k6e);ryr=r(I4t,"big_bird"),I4t.forEach(t),tyr=r(uBe," \u2014 "),iJ=n(uBe,"A",{href:!0});var q4t=s(iJ);ayr=r(q4t,"FlaxBigBirdForCausalLM"),q4t.forEach(t),nyr=r(uBe," (BigBird model)"),uBe.forEach(t),syr=i(Oe),LE=n(Oe,"LI",{});var _Be=s(LE);S6e=n(_Be,"STRONG",{});var N4t=s(S6e);lyr=r(N4t,"electra"),N4t.forEach(t),iyr=r(_Be," \u2014 "),dJ=n(_Be,"A",{href:!0});var j4t=s(dJ);dyr=r(j4t,"FlaxElectraForCausalLM"),j4t.forEach(t),cyr=r(_Be," (ELECTRA model)"),_Be.forEach(t),fyr=i(Oe),xE=n(Oe,"LI",{});var bBe=s(xE);R6e=n(bBe,"STRONG",{});var D4t=s(R6e);myr=r(D4t,"gpt2"),D4t.forEach(t),gyr=r(bBe," \u2014 "),cJ=n(bBe,"A",{href:!0});var G4t=s(cJ);hyr=r(G4t,"FlaxGPT2LMHeadModel"),G4t.forEach(t),pyr=r(bBe," (OpenAI GPT-2 model)"),bBe.forEach(t),uyr=i(Oe),$E=n(Oe,"LI",{});var vBe=s($E);B6e=n(vBe,"STRONG",{});var O4t=s(B6e);_yr=r(O4t,"gpt_neo"),O4t.forEach(t),byr=r(vBe," \u2014 "),fJ=n(vBe,"A",{href:!0});var V4t=s(fJ);vyr=r(V4t,"FlaxGPTNeoForCausalLM"),V4t.forEach(t),Fyr=r(vBe," (GPT Neo model)"),vBe.forEach(t),Tyr=i(Oe),kE=n(Oe,"LI",{});var FBe=s(kE);P6e=n(FBe,"STRONG",{});var X4t=s(P6e);Myr=r(X4t,"gptj"),X4t.forEach(t),Eyr=r(FBe," \u2014 "),mJ=n(FBe,"A",{href:!0});var z4t=s(mJ);Cyr=r(z4t,"FlaxGPTJForCausalLM"),z4t.forEach(t),wyr=r(FBe," (GPT-J model)"),FBe.forEach(t),Ayr=i(Oe),SE=n(Oe,"LI",{});var TBe=s(SE);I6e=n(TBe,"STRONG",{});var Q4t=s(I6e);yyr=r(Q4t,"roberta"),Q4t.forEach(t),Lyr=r(TBe," \u2014 "),gJ=n(TBe,"A",{href:!0});var W4t=s(gJ);xyr=r(W4t,"FlaxRobertaForCausalLM"),W4t.forEach(t),$yr=r(TBe," (RoBERTa model)"),TBe.forEach(t),kyr=i(Oe),RE=n(Oe,"LI",{});var MBe=s(RE);q6e=n(MBe,"STRONG",{});var H4t=s(q6e);Syr=r(H4t,"xglm"),H4t.forEach(t),Ryr=r(MBe," \u2014 "),hJ=n(MBe,"A",{href:!0});var U4t=s(hJ);Byr=r(U4t,"FlaxXGLMForCausalLM"),U4t.forEach(t),Pyr=r(MBe," (XGLM model)"),MBe.forEach(t),Oe.forEach(t),Iyr=i(Gl),T(BE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Eqe=i(f),Rc=n(f,"H2",{class:!0});var $je=s(Rc);PE=n($je,"A",{id:!0,class:!0,href:!0});var J4t=s(PE);N6e=n(J4t,"SPAN",{});var Y4t=s(N6e);T(ax.$$.fragment,Y4t),Y4t.forEach(t),J4t.forEach(t),qyr=i($je),j6e=n($je,"SPAN",{});var K4t=s(j6e);Nyr=r(K4t,"FlaxAutoModelForPreTraining"),K4t.forEach(t),$je.forEach(t),Cqe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(nx.$$.fragment,Ol),jyr=i(Ol),Bc=n(Ol,"P",{});var PZ=s(Bc);Dyr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pJ=n(PZ,"A",{href:!0});var Z4t=s(pJ);Gyr=r(Z4t,"from_pretrained()"),Z4t.forEach(t),Oyr=r(PZ," class method or the "),uJ=n(PZ,"A",{href:!0});var eEt=s(uJ);Vyr=r(eEt,"from_config()"),eEt.forEach(t),Xyr=r(PZ,` class
method.`),PZ.forEach(t),zyr=i(Ol),sx=n(Ol,"P",{});var kje=s(sx);Qyr=r(kje,"This class cannot be instantiated directly using "),D6e=n(kje,"CODE",{});var oEt=s(D6e);Wyr=r(oEt,"__init__()"),oEt.forEach(t),Hyr=r(kje," (throws an error)."),kje.forEach(t),Uyr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var Aw=s(Gt);T(lx.$$.fragment,Aw),Jyr=i(Aw),G6e=n(Aw,"P",{});var rEt=s(G6e);Yyr=r(rEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rEt.forEach(t),Kyr=i(Aw),Pc=n(Aw,"P",{});var IZ=s(Pc);Zyr=r(IZ,`Note:
Loading a model from its configuration file does `),O6e=n(IZ,"STRONG",{});var tEt=s(O6e);eLr=r(tEt,"not"),tEt.forEach(t),oLr=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(IZ,"A",{href:!0});var aEt=s(_J);rLr=r(aEt,"from_pretrained()"),aEt.forEach(t),tLr=r(IZ," to load the model weights."),IZ.forEach(t),aLr=i(Aw),T(IE.$$.fragment,Aw),Aw.forEach(t),nLr=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(ix.$$.fragment,Vl),sLr=i(Vl),V6e=n(Vl,"P",{});var nEt=s(V6e);lLr=r(nEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nEt.forEach(t),iLr=i(Vl),pn=n(Vl,"P",{});var yw=s(pn);dLr=r(yw,"The model class to instantiate is selected based on the "),X6e=n(yw,"CODE",{});var sEt=s(X6e);cLr=r(sEt,"model_type"),sEt.forEach(t),fLr=r(yw,` property of the config object (either
passed as an argument or loaded from `),z6e=n(yw,"CODE",{});var lEt=s(z6e);mLr=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),gLr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=n(yw,"CODE",{});var iEt=s(Q6e);hLr=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),pLr=r(yw,":"),yw.forEach(t),uLr=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);qE=n(we,"LI",{});var EBe=s(qE);W6e=n(EBe,"STRONG",{});var dEt=s(W6e);_Lr=r(dEt,"albert"),dEt.forEach(t),bLr=r(EBe," \u2014 "),bJ=n(EBe,"A",{href:!0});var cEt=s(bJ);vLr=r(cEt,"FlaxAlbertForPreTraining"),cEt.forEach(t),FLr=r(EBe," (ALBERT model)"),EBe.forEach(t),TLr=i(we),NE=n(we,"LI",{});var CBe=s(NE);H6e=n(CBe,"STRONG",{});var fEt=s(H6e);MLr=r(fEt,"bart"),fEt.forEach(t),ELr=r(CBe," \u2014 "),vJ=n(CBe,"A",{href:!0});var mEt=s(vJ);CLr=r(mEt,"FlaxBartForConditionalGeneration"),mEt.forEach(t),wLr=r(CBe," (BART model)"),CBe.forEach(t),ALr=i(we),jE=n(we,"LI",{});var wBe=s(jE);U6e=n(wBe,"STRONG",{});var gEt=s(U6e);yLr=r(gEt,"bert"),gEt.forEach(t),LLr=r(wBe," \u2014 "),FJ=n(wBe,"A",{href:!0});var hEt=s(FJ);xLr=r(hEt,"FlaxBertForPreTraining"),hEt.forEach(t),$Lr=r(wBe," (BERT model)"),wBe.forEach(t),kLr=i(we),DE=n(we,"LI",{});var ABe=s(DE);J6e=n(ABe,"STRONG",{});var pEt=s(J6e);SLr=r(pEt,"big_bird"),pEt.forEach(t),RLr=r(ABe," \u2014 "),TJ=n(ABe,"A",{href:!0});var uEt=s(TJ);BLr=r(uEt,"FlaxBigBirdForPreTraining"),uEt.forEach(t),PLr=r(ABe," (BigBird model)"),ABe.forEach(t),ILr=i(we),GE=n(we,"LI",{});var yBe=s(GE);Y6e=n(yBe,"STRONG",{});var _Et=s(Y6e);qLr=r(_Et,"electra"),_Et.forEach(t),NLr=r(yBe," \u2014 "),MJ=n(yBe,"A",{href:!0});var bEt=s(MJ);jLr=r(bEt,"FlaxElectraForPreTraining"),bEt.forEach(t),DLr=r(yBe," (ELECTRA model)"),yBe.forEach(t),GLr=i(we),OE=n(we,"LI",{});var LBe=s(OE);K6e=n(LBe,"STRONG",{});var vEt=s(K6e);OLr=r(vEt,"mbart"),vEt.forEach(t),VLr=r(LBe," \u2014 "),EJ=n(LBe,"A",{href:!0});var FEt=s(EJ);XLr=r(FEt,"FlaxMBartForConditionalGeneration"),FEt.forEach(t),zLr=r(LBe," (mBART model)"),LBe.forEach(t),QLr=i(we),VE=n(we,"LI",{});var xBe=s(VE);Z6e=n(xBe,"STRONG",{});var TEt=s(Z6e);WLr=r(TEt,"mt5"),TEt.forEach(t),HLr=r(xBe," \u2014 "),CJ=n(xBe,"A",{href:!0});var MEt=s(CJ);ULr=r(MEt,"FlaxMT5ForConditionalGeneration"),MEt.forEach(t),JLr=r(xBe," (mT5 model)"),xBe.forEach(t),YLr=i(we),XE=n(we,"LI",{});var $Be=s(XE);eTe=n($Be,"STRONG",{});var EEt=s(eTe);KLr=r(EEt,"roberta"),EEt.forEach(t),ZLr=r($Be," \u2014 "),wJ=n($Be,"A",{href:!0});var CEt=s(wJ);e8r=r(CEt,"FlaxRobertaForMaskedLM"),CEt.forEach(t),o8r=r($Be," (RoBERTa model)"),$Be.forEach(t),r8r=i(we),zE=n(we,"LI",{});var kBe=s(zE);oTe=n(kBe,"STRONG",{});var wEt=s(oTe);t8r=r(wEt,"roformer"),wEt.forEach(t),a8r=r(kBe," \u2014 "),AJ=n(kBe,"A",{href:!0});var AEt=s(AJ);n8r=r(AEt,"FlaxRoFormerForMaskedLM"),AEt.forEach(t),s8r=r(kBe," (RoFormer model)"),kBe.forEach(t),l8r=i(we),QE=n(we,"LI",{});var SBe=s(QE);rTe=n(SBe,"STRONG",{});var yEt=s(rTe);i8r=r(yEt,"t5"),yEt.forEach(t),d8r=r(SBe," \u2014 "),yJ=n(SBe,"A",{href:!0});var LEt=s(yJ);c8r=r(LEt,"FlaxT5ForConditionalGeneration"),LEt.forEach(t),f8r=r(SBe," (T5 model)"),SBe.forEach(t),m8r=i(we),WE=n(we,"LI",{});var RBe=s(WE);tTe=n(RBe,"STRONG",{});var xEt=s(tTe);g8r=r(xEt,"wav2vec2"),xEt.forEach(t),h8r=r(RBe," \u2014 "),LJ=n(RBe,"A",{href:!0});var $Et=s(LJ);p8r=r($Et,"FlaxWav2Vec2ForPreTraining"),$Et.forEach(t),u8r=r(RBe," (Wav2Vec2 model)"),RBe.forEach(t),_8r=i(we),HE=n(we,"LI",{});var BBe=s(HE);aTe=n(BBe,"STRONG",{});var kEt=s(aTe);b8r=r(kEt,"xlm-roberta"),kEt.forEach(t),v8r=r(BBe," \u2014 "),xJ=n(BBe,"A",{href:!0});var SEt=s(xJ);F8r=r(SEt,"FlaxXLMRobertaForMaskedLM"),SEt.forEach(t),T8r=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),we.forEach(t),M8r=i(Vl),T(UE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),wqe=i(f),Ic=n(f,"H2",{class:!0});var Sje=s(Ic);JE=n(Sje,"A",{id:!0,class:!0,href:!0});var REt=s(JE);nTe=n(REt,"SPAN",{});var BEt=s(nTe);T(dx.$$.fragment,BEt),BEt.forEach(t),REt.forEach(t),E8r=i(Sje),sTe=n(Sje,"SPAN",{});var PEt=s(sTe);C8r=r(PEt,"FlaxAutoModelForMaskedLM"),PEt.forEach(t),Sje.forEach(t),Aqe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(cx.$$.fragment,Xl),w8r=i(Xl),qc=n(Xl,"P",{});var qZ=s(qc);A8r=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$J=n(qZ,"A",{href:!0});var IEt=s($J);y8r=r(IEt,"from_pretrained()"),IEt.forEach(t),L8r=r(qZ," class method or the "),kJ=n(qZ,"A",{href:!0});var qEt=s(kJ);x8r=r(qEt,"from_config()"),qEt.forEach(t),$8r=r(qZ,` class
method.`),qZ.forEach(t),k8r=i(Xl),fx=n(Xl,"P",{});var Rje=s(fx);S8r=r(Rje,"This class cannot be instantiated directly using "),lTe=n(Rje,"CODE",{});var NEt=s(lTe);R8r=r(NEt,"__init__()"),NEt.forEach(t),B8r=r(Rje," (throws an error)."),Rje.forEach(t),P8r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var Lw=s(Ot);T(mx.$$.fragment,Lw),I8r=i(Lw),iTe=n(Lw,"P",{});var jEt=s(iTe);q8r=r(jEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jEt.forEach(t),N8r=i(Lw),Nc=n(Lw,"P",{});var NZ=s(Nc);j8r=r(NZ,`Note:
Loading a model from its configuration file does `),dTe=n(NZ,"STRONG",{});var DEt=s(dTe);D8r=r(DEt,"not"),DEt.forEach(t),G8r=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=n(NZ,"A",{href:!0});var GEt=s(SJ);O8r=r(GEt,"from_pretrained()"),GEt.forEach(t),V8r=r(NZ," to load the model weights."),NZ.forEach(t),X8r=i(Lw),T(YE.$$.fragment,Lw),Lw.forEach(t),z8r=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(gx.$$.fragment,zl),Q8r=i(zl),cTe=n(zl,"P",{});var OEt=s(cTe);W8r=r(OEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),OEt.forEach(t),H8r=i(zl),un=n(zl,"P",{});var xw=s(un);U8r=r(xw,"The model class to instantiate is selected based on the "),fTe=n(xw,"CODE",{});var VEt=s(fTe);J8r=r(VEt,"model_type"),VEt.forEach(t),Y8r=r(xw,` property of the config object (either
passed as an argument or loaded from `),mTe=n(xw,"CODE",{});var XEt=s(mTe);K8r=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),Z8r=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=n(xw,"CODE",{});var zEt=s(gTe);exr=r(zEt,"pretrained_model_name_or_path"),zEt.forEach(t),oxr=r(xw,":"),xw.forEach(t),rxr=i(zl),Le=n(zl,"UL",{});var Be=s(Le);KE=n(Be,"LI",{});var PBe=s(KE);hTe=n(PBe,"STRONG",{});var QEt=s(hTe);txr=r(QEt,"albert"),QEt.forEach(t),axr=r(PBe," \u2014 "),RJ=n(PBe,"A",{href:!0});var WEt=s(RJ);nxr=r(WEt,"FlaxAlbertForMaskedLM"),WEt.forEach(t),sxr=r(PBe," (ALBERT model)"),PBe.forEach(t),lxr=i(Be),ZE=n(Be,"LI",{});var IBe=s(ZE);pTe=n(IBe,"STRONG",{});var HEt=s(pTe);ixr=r(HEt,"bart"),HEt.forEach(t),dxr=r(IBe," \u2014 "),BJ=n(IBe,"A",{href:!0});var UEt=s(BJ);cxr=r(UEt,"FlaxBartForConditionalGeneration"),UEt.forEach(t),fxr=r(IBe," (BART model)"),IBe.forEach(t),mxr=i(Be),e5=n(Be,"LI",{});var qBe=s(e5);uTe=n(qBe,"STRONG",{});var JEt=s(uTe);gxr=r(JEt,"bert"),JEt.forEach(t),hxr=r(qBe," \u2014 "),PJ=n(qBe,"A",{href:!0});var YEt=s(PJ);pxr=r(YEt,"FlaxBertForMaskedLM"),YEt.forEach(t),uxr=r(qBe," (BERT model)"),qBe.forEach(t),_xr=i(Be),o5=n(Be,"LI",{});var NBe=s(o5);_Te=n(NBe,"STRONG",{});var KEt=s(_Te);bxr=r(KEt,"big_bird"),KEt.forEach(t),vxr=r(NBe," \u2014 "),IJ=n(NBe,"A",{href:!0});var ZEt=s(IJ);Fxr=r(ZEt,"FlaxBigBirdForMaskedLM"),ZEt.forEach(t),Txr=r(NBe," (BigBird model)"),NBe.forEach(t),Mxr=i(Be),r5=n(Be,"LI",{});var jBe=s(r5);bTe=n(jBe,"STRONG",{});var e5t=s(bTe);Exr=r(e5t,"distilbert"),e5t.forEach(t),Cxr=r(jBe," \u2014 "),qJ=n(jBe,"A",{href:!0});var o5t=s(qJ);wxr=r(o5t,"FlaxDistilBertForMaskedLM"),o5t.forEach(t),Axr=r(jBe," (DistilBERT model)"),jBe.forEach(t),yxr=i(Be),t5=n(Be,"LI",{});var DBe=s(t5);vTe=n(DBe,"STRONG",{});var r5t=s(vTe);Lxr=r(r5t,"electra"),r5t.forEach(t),xxr=r(DBe," \u2014 "),NJ=n(DBe,"A",{href:!0});var t5t=s(NJ);$xr=r(t5t,"FlaxElectraForMaskedLM"),t5t.forEach(t),kxr=r(DBe," (ELECTRA model)"),DBe.forEach(t),Sxr=i(Be),a5=n(Be,"LI",{});var GBe=s(a5);FTe=n(GBe,"STRONG",{});var a5t=s(FTe);Rxr=r(a5t,"mbart"),a5t.forEach(t),Bxr=r(GBe," \u2014 "),jJ=n(GBe,"A",{href:!0});var n5t=s(jJ);Pxr=r(n5t,"FlaxMBartForConditionalGeneration"),n5t.forEach(t),Ixr=r(GBe," (mBART model)"),GBe.forEach(t),qxr=i(Be),n5=n(Be,"LI",{});var OBe=s(n5);TTe=n(OBe,"STRONG",{});var s5t=s(TTe);Nxr=r(s5t,"roberta"),s5t.forEach(t),jxr=r(OBe," \u2014 "),DJ=n(OBe,"A",{href:!0});var l5t=s(DJ);Dxr=r(l5t,"FlaxRobertaForMaskedLM"),l5t.forEach(t),Gxr=r(OBe," (RoBERTa model)"),OBe.forEach(t),Oxr=i(Be),s5=n(Be,"LI",{});var VBe=s(s5);MTe=n(VBe,"STRONG",{});var i5t=s(MTe);Vxr=r(i5t,"roformer"),i5t.forEach(t),Xxr=r(VBe," \u2014 "),GJ=n(VBe,"A",{href:!0});var d5t=s(GJ);zxr=r(d5t,"FlaxRoFormerForMaskedLM"),d5t.forEach(t),Qxr=r(VBe," (RoFormer model)"),VBe.forEach(t),Wxr=i(Be),l5=n(Be,"LI",{});var XBe=s(l5);ETe=n(XBe,"STRONG",{});var c5t=s(ETe);Hxr=r(c5t,"xlm-roberta"),c5t.forEach(t),Uxr=r(XBe," \u2014 "),OJ=n(XBe,"A",{href:!0});var f5t=s(OJ);Jxr=r(f5t,"FlaxXLMRobertaForMaskedLM"),f5t.forEach(t),Yxr=r(XBe," (XLM-RoBERTa model)"),XBe.forEach(t),Be.forEach(t),Kxr=i(zl),T(i5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),yqe=i(f),jc=n(f,"H2",{class:!0});var Bje=s(jc);d5=n(Bje,"A",{id:!0,class:!0,href:!0});var m5t=s(d5);CTe=n(m5t,"SPAN",{});var g5t=s(CTe);T(hx.$$.fragment,g5t),g5t.forEach(t),m5t.forEach(t),Zxr=i(Bje),wTe=n(Bje,"SPAN",{});var h5t=s(wTe);e9r=r(h5t,"FlaxAutoModelForSeq2SeqLM"),h5t.forEach(t),Bje.forEach(t),Lqe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(px.$$.fragment,Ql),o9r=i(Ql),Dc=n(Ql,"P",{});var jZ=s(Dc);r9r=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VJ=n(jZ,"A",{href:!0});var p5t=s(VJ);t9r=r(p5t,"from_pretrained()"),p5t.forEach(t),a9r=r(jZ," class method or the "),XJ=n(jZ,"A",{href:!0});var u5t=s(XJ);n9r=r(u5t,"from_config()"),u5t.forEach(t),s9r=r(jZ,` class
method.`),jZ.forEach(t),l9r=i(Ql),ux=n(Ql,"P",{});var Pje=s(ux);i9r=r(Pje,"This class cannot be instantiated directly using "),ATe=n(Pje,"CODE",{});var _5t=s(ATe);d9r=r(_5t,"__init__()"),_5t.forEach(t),c9r=r(Pje," (throws an error)."),Pje.forEach(t),f9r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var $w=s(Vt);T(_x.$$.fragment,$w),m9r=i($w),yTe=n($w,"P",{});var b5t=s(yTe);g9r=r(b5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),b5t.forEach(t),h9r=i($w),Gc=n($w,"P",{});var DZ=s(Gc);p9r=r(DZ,`Note:
Loading a model from its configuration file does `),LTe=n(DZ,"STRONG",{});var v5t=s(LTe);u9r=r(v5t,"not"),v5t.forEach(t),_9r=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(DZ,"A",{href:!0});var F5t=s(zJ);b9r=r(F5t,"from_pretrained()"),F5t.forEach(t),v9r=r(DZ," to load the model weights."),DZ.forEach(t),F9r=i($w),T(c5.$$.fragment,$w),$w.forEach(t),T9r=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(bx.$$.fragment,Wl),M9r=i(Wl),xTe=n(Wl,"P",{});var T5t=s(xTe);E9r=r(T5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),T5t.forEach(t),C9r=i(Wl),_n=n(Wl,"P",{});var kw=s(_n);w9r=r(kw,"The model class to instantiate is selected based on the "),$Te=n(kw,"CODE",{});var M5t=s($Te);A9r=r(M5t,"model_type"),M5t.forEach(t),y9r=r(kw,` property of the config object (either
passed as an argument or loaded from `),kTe=n(kw,"CODE",{});var E5t=s(kTe);L9r=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),x9r=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(kw,"CODE",{});var C5t=s(STe);$9r=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),k9r=r(kw,":"),kw.forEach(t),S9r=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);f5=n(Ve,"LI",{});var zBe=s(f5);RTe=n(zBe,"STRONG",{});var w5t=s(RTe);R9r=r(w5t,"bart"),w5t.forEach(t),B9r=r(zBe," \u2014 "),QJ=n(zBe,"A",{href:!0});var A5t=s(QJ);P9r=r(A5t,"FlaxBartForConditionalGeneration"),A5t.forEach(t),I9r=r(zBe," (BART model)"),zBe.forEach(t),q9r=i(Ve),m5=n(Ve,"LI",{});var QBe=s(m5);BTe=n(QBe,"STRONG",{});var y5t=s(BTe);N9r=r(y5t,"blenderbot"),y5t.forEach(t),j9r=r(QBe," \u2014 "),WJ=n(QBe,"A",{href:!0});var L5t=s(WJ);D9r=r(L5t,"FlaxBlenderbotForConditionalGeneration"),L5t.forEach(t),G9r=r(QBe," (Blenderbot model)"),QBe.forEach(t),O9r=i(Ve),g5=n(Ve,"LI",{});var WBe=s(g5);PTe=n(WBe,"STRONG",{});var x5t=s(PTe);V9r=r(x5t,"blenderbot-small"),x5t.forEach(t),X9r=r(WBe," \u2014 "),HJ=n(WBe,"A",{href:!0});var $5t=s(HJ);z9r=r($5t,"FlaxBlenderbotSmallForConditionalGeneration"),$5t.forEach(t),Q9r=r(WBe," (BlenderbotSmall model)"),WBe.forEach(t),W9r=i(Ve),h5=n(Ve,"LI",{});var HBe=s(h5);ITe=n(HBe,"STRONG",{});var k5t=s(ITe);H9r=r(k5t,"encoder-decoder"),k5t.forEach(t),U9r=r(HBe," \u2014 "),UJ=n(HBe,"A",{href:!0});var S5t=s(UJ);J9r=r(S5t,"FlaxEncoderDecoderModel"),S5t.forEach(t),Y9r=r(HBe," (Encoder decoder model)"),HBe.forEach(t),K9r=i(Ve),p5=n(Ve,"LI",{});var UBe=s(p5);qTe=n(UBe,"STRONG",{});var R5t=s(qTe);Z9r=r(R5t,"marian"),R5t.forEach(t),e$r=r(UBe," \u2014 "),JJ=n(UBe,"A",{href:!0});var B5t=s(JJ);o$r=r(B5t,"FlaxMarianMTModel"),B5t.forEach(t),r$r=r(UBe," (Marian model)"),UBe.forEach(t),t$r=i(Ve),u5=n(Ve,"LI",{});var JBe=s(u5);NTe=n(JBe,"STRONG",{});var P5t=s(NTe);a$r=r(P5t,"mbart"),P5t.forEach(t),n$r=r(JBe," \u2014 "),YJ=n(JBe,"A",{href:!0});var I5t=s(YJ);s$r=r(I5t,"FlaxMBartForConditionalGeneration"),I5t.forEach(t),l$r=r(JBe," (mBART model)"),JBe.forEach(t),i$r=i(Ve),_5=n(Ve,"LI",{});var YBe=s(_5);jTe=n(YBe,"STRONG",{});var q5t=s(jTe);d$r=r(q5t,"mt5"),q5t.forEach(t),c$r=r(YBe," \u2014 "),KJ=n(YBe,"A",{href:!0});var N5t=s(KJ);f$r=r(N5t,"FlaxMT5ForConditionalGeneration"),N5t.forEach(t),m$r=r(YBe," (mT5 model)"),YBe.forEach(t),g$r=i(Ve),b5=n(Ve,"LI",{});var KBe=s(b5);DTe=n(KBe,"STRONG",{});var j5t=s(DTe);h$r=r(j5t,"pegasus"),j5t.forEach(t),p$r=r(KBe," \u2014 "),ZJ=n(KBe,"A",{href:!0});var D5t=s(ZJ);u$r=r(D5t,"FlaxPegasusForConditionalGeneration"),D5t.forEach(t),_$r=r(KBe," (Pegasus model)"),KBe.forEach(t),b$r=i(Ve),v5=n(Ve,"LI",{});var ZBe=s(v5);GTe=n(ZBe,"STRONG",{});var G5t=s(GTe);v$r=r(G5t,"t5"),G5t.forEach(t),F$r=r(ZBe," \u2014 "),eY=n(ZBe,"A",{href:!0});var O5t=s(eY);T$r=r(O5t,"FlaxT5ForConditionalGeneration"),O5t.forEach(t),M$r=r(ZBe," (T5 model)"),ZBe.forEach(t),Ve.forEach(t),E$r=i(Wl),T(F5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),xqe=i(f),Oc=n(f,"H2",{class:!0});var Ije=s(Oc);T5=n(Ije,"A",{id:!0,class:!0,href:!0});var V5t=s(T5);OTe=n(V5t,"SPAN",{});var X5t=s(OTe);T(vx.$$.fragment,X5t),X5t.forEach(t),V5t.forEach(t),C$r=i(Ije),VTe=n(Ije,"SPAN",{});var z5t=s(VTe);w$r=r(z5t,"FlaxAutoModelForSequenceClassification"),z5t.forEach(t),Ije.forEach(t),$qe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(Fx.$$.fragment,Hl),A$r=i(Hl),Vc=n(Hl,"P",{});var GZ=s(Vc);y$r=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oY=n(GZ,"A",{href:!0});var Q5t=s(oY);L$r=r(Q5t,"from_pretrained()"),Q5t.forEach(t),x$r=r(GZ," class method or the "),rY=n(GZ,"A",{href:!0});var W5t=s(rY);$$r=r(W5t,"from_config()"),W5t.forEach(t),k$r=r(GZ,` class
method.`),GZ.forEach(t),S$r=i(Hl),Tx=n(Hl,"P",{});var qje=s(Tx);R$r=r(qje,"This class cannot be instantiated directly using "),XTe=n(qje,"CODE",{});var H5t=s(XTe);B$r=r(H5t,"__init__()"),H5t.forEach(t),P$r=r(qje," (throws an error)."),qje.forEach(t),I$r=i(Hl),Xt=n(Hl,"DIV",{class:!0});var Sw=s(Xt);T(Mx.$$.fragment,Sw),q$r=i(Sw),zTe=n(Sw,"P",{});var U5t=s(zTe);N$r=r(U5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),U5t.forEach(t),j$r=i(Sw),Xc=n(Sw,"P",{});var OZ=s(Xc);D$r=r(OZ,`Note:
Loading a model from its configuration file does `),QTe=n(OZ,"STRONG",{});var J5t=s(QTe);G$r=r(J5t,"not"),J5t.forEach(t),O$r=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(OZ,"A",{href:!0});var Y5t=s(tY);V$r=r(Y5t,"from_pretrained()"),Y5t.forEach(t),X$r=r(OZ," to load the model weights."),OZ.forEach(t),z$r=i(Sw),T(M5.$$.fragment,Sw),Sw.forEach(t),Q$r=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(Ex.$$.fragment,Ul),W$r=i(Ul),WTe=n(Ul,"P",{});var K5t=s(WTe);H$r=r(K5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),K5t.forEach(t),U$r=i(Ul),bn=n(Ul,"P",{});var Rw=s(bn);J$r=r(Rw,"The model class to instantiate is selected based on the "),HTe=n(Rw,"CODE",{});var Z5t=s(HTe);Y$r=r(Z5t,"model_type"),Z5t.forEach(t),K$r=r(Rw,` property of the config object (either
passed as an argument or loaded from `),UTe=n(Rw,"CODE",{});var eCt=s(UTe);Z$r=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),ekr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(Rw,"CODE",{});var oCt=s(JTe);okr=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),rkr=r(Rw,":"),Rw.forEach(t),tkr=i(Ul),xe=n(Ul,"UL",{});var Pe=s(xe);E5=n(Pe,"LI",{});var ePe=s(E5);YTe=n(ePe,"STRONG",{});var rCt=s(YTe);akr=r(rCt,"albert"),rCt.forEach(t),nkr=r(ePe," \u2014 "),aY=n(ePe,"A",{href:!0});var tCt=s(aY);skr=r(tCt,"FlaxAlbertForSequenceClassification"),tCt.forEach(t),lkr=r(ePe," (ALBERT model)"),ePe.forEach(t),ikr=i(Pe),C5=n(Pe,"LI",{});var oPe=s(C5);KTe=n(oPe,"STRONG",{});var aCt=s(KTe);dkr=r(aCt,"bart"),aCt.forEach(t),ckr=r(oPe," \u2014 "),nY=n(oPe,"A",{href:!0});var nCt=s(nY);fkr=r(nCt,"FlaxBartForSequenceClassification"),nCt.forEach(t),mkr=r(oPe," (BART model)"),oPe.forEach(t),gkr=i(Pe),w5=n(Pe,"LI",{});var rPe=s(w5);ZTe=n(rPe,"STRONG",{});var sCt=s(ZTe);hkr=r(sCt,"bert"),sCt.forEach(t),pkr=r(rPe," \u2014 "),sY=n(rPe,"A",{href:!0});var lCt=s(sY);ukr=r(lCt,"FlaxBertForSequenceClassification"),lCt.forEach(t),_kr=r(rPe," (BERT model)"),rPe.forEach(t),bkr=i(Pe),A5=n(Pe,"LI",{});var tPe=s(A5);e7e=n(tPe,"STRONG",{});var iCt=s(e7e);vkr=r(iCt,"big_bird"),iCt.forEach(t),Fkr=r(tPe," \u2014 "),lY=n(tPe,"A",{href:!0});var dCt=s(lY);Tkr=r(dCt,"FlaxBigBirdForSequenceClassification"),dCt.forEach(t),Mkr=r(tPe," (BigBird model)"),tPe.forEach(t),Ekr=i(Pe),y5=n(Pe,"LI",{});var aPe=s(y5);o7e=n(aPe,"STRONG",{});var cCt=s(o7e);Ckr=r(cCt,"distilbert"),cCt.forEach(t),wkr=r(aPe," \u2014 "),iY=n(aPe,"A",{href:!0});var fCt=s(iY);Akr=r(fCt,"FlaxDistilBertForSequenceClassification"),fCt.forEach(t),ykr=r(aPe," (DistilBERT model)"),aPe.forEach(t),Lkr=i(Pe),L5=n(Pe,"LI",{});var nPe=s(L5);r7e=n(nPe,"STRONG",{});var mCt=s(r7e);xkr=r(mCt,"electra"),mCt.forEach(t),$kr=r(nPe," \u2014 "),dY=n(nPe,"A",{href:!0});var gCt=s(dY);kkr=r(gCt,"FlaxElectraForSequenceClassification"),gCt.forEach(t),Skr=r(nPe," (ELECTRA model)"),nPe.forEach(t),Rkr=i(Pe),x5=n(Pe,"LI",{});var sPe=s(x5);t7e=n(sPe,"STRONG",{});var hCt=s(t7e);Bkr=r(hCt,"mbart"),hCt.forEach(t),Pkr=r(sPe," \u2014 "),cY=n(sPe,"A",{href:!0});var pCt=s(cY);Ikr=r(pCt,"FlaxMBartForSequenceClassification"),pCt.forEach(t),qkr=r(sPe," (mBART model)"),sPe.forEach(t),Nkr=i(Pe),$5=n(Pe,"LI",{});var lPe=s($5);a7e=n(lPe,"STRONG",{});var uCt=s(a7e);jkr=r(uCt,"roberta"),uCt.forEach(t),Dkr=r(lPe," \u2014 "),fY=n(lPe,"A",{href:!0});var _Ct=s(fY);Gkr=r(_Ct,"FlaxRobertaForSequenceClassification"),_Ct.forEach(t),Okr=r(lPe," (RoBERTa model)"),lPe.forEach(t),Vkr=i(Pe),k5=n(Pe,"LI",{});var iPe=s(k5);n7e=n(iPe,"STRONG",{});var bCt=s(n7e);Xkr=r(bCt,"roformer"),bCt.forEach(t),zkr=r(iPe," \u2014 "),mY=n(iPe,"A",{href:!0});var vCt=s(mY);Qkr=r(vCt,"FlaxRoFormerForSequenceClassification"),vCt.forEach(t),Wkr=r(iPe," (RoFormer model)"),iPe.forEach(t),Hkr=i(Pe),S5=n(Pe,"LI",{});var dPe=s(S5);s7e=n(dPe,"STRONG",{});var FCt=s(s7e);Ukr=r(FCt,"xlm-roberta"),FCt.forEach(t),Jkr=r(dPe," \u2014 "),gY=n(dPe,"A",{href:!0});var TCt=s(gY);Ykr=r(TCt,"FlaxXLMRobertaForSequenceClassification"),TCt.forEach(t),Kkr=r(dPe," (XLM-RoBERTa model)"),dPe.forEach(t),Pe.forEach(t),Zkr=i(Ul),T(R5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),kqe=i(f),zc=n(f,"H2",{class:!0});var Nje=s(zc);B5=n(Nje,"A",{id:!0,class:!0,href:!0});var MCt=s(B5);l7e=n(MCt,"SPAN",{});var ECt=s(l7e);T(Cx.$$.fragment,ECt),ECt.forEach(t),MCt.forEach(t),eSr=i(Nje),i7e=n(Nje,"SPAN",{});var CCt=s(i7e);oSr=r(CCt,"FlaxAutoModelForQuestionAnswering"),CCt.forEach(t),Nje.forEach(t),Sqe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(wx.$$.fragment,Jl),rSr=i(Jl),Qc=n(Jl,"P",{});var VZ=s(Qc);tSr=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hY=n(VZ,"A",{href:!0});var wCt=s(hY);aSr=r(wCt,"from_pretrained()"),wCt.forEach(t),nSr=r(VZ," class method or the "),pY=n(VZ,"A",{href:!0});var ACt=s(pY);sSr=r(ACt,"from_config()"),ACt.forEach(t),lSr=r(VZ,` class
method.`),VZ.forEach(t),iSr=i(Jl),Ax=n(Jl,"P",{});var jje=s(Ax);dSr=r(jje,"This class cannot be instantiated directly using "),d7e=n(jje,"CODE",{});var yCt=s(d7e);cSr=r(yCt,"__init__()"),yCt.forEach(t),fSr=r(jje," (throws an error)."),jje.forEach(t),mSr=i(Jl),zt=n(Jl,"DIV",{class:!0});var Bw=s(zt);T(yx.$$.fragment,Bw),gSr=i(Bw),c7e=n(Bw,"P",{});var LCt=s(c7e);hSr=r(LCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LCt.forEach(t),pSr=i(Bw),Wc=n(Bw,"P",{});var XZ=s(Wc);uSr=r(XZ,`Note:
Loading a model from its configuration file does `),f7e=n(XZ,"STRONG",{});var xCt=s(f7e);_Sr=r(xCt,"not"),xCt.forEach(t),bSr=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(XZ,"A",{href:!0});var $Ct=s(uY);vSr=r($Ct,"from_pretrained()"),$Ct.forEach(t),FSr=r(XZ," to load the model weights."),XZ.forEach(t),TSr=i(Bw),T(P5.$$.fragment,Bw),Bw.forEach(t),MSr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(Lx.$$.fragment,Yl),ESr=i(Yl),m7e=n(Yl,"P",{});var kCt=s(m7e);CSr=r(kCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kCt.forEach(t),wSr=i(Yl),vn=n(Yl,"P",{});var Pw=s(vn);ASr=r(Pw,"The model class to instantiate is selected based on the "),g7e=n(Pw,"CODE",{});var SCt=s(g7e);ySr=r(SCt,"model_type"),SCt.forEach(t),LSr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),h7e=n(Pw,"CODE",{});var RCt=s(h7e);xSr=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),$Sr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=n(Pw,"CODE",{});var BCt=s(p7e);kSr=r(BCt,"pretrained_model_name_or_path"),BCt.forEach(t),SSr=r(Pw,":"),Pw.forEach(t),RSr=i(Yl),$e=n(Yl,"UL",{});var Ie=s($e);I5=n(Ie,"LI",{});var cPe=s(I5);u7e=n(cPe,"STRONG",{});var PCt=s(u7e);BSr=r(PCt,"albert"),PCt.forEach(t),PSr=r(cPe," \u2014 "),_Y=n(cPe,"A",{href:!0});var ICt=s(_Y);ISr=r(ICt,"FlaxAlbertForQuestionAnswering"),ICt.forEach(t),qSr=r(cPe," (ALBERT model)"),cPe.forEach(t),NSr=i(Ie),q5=n(Ie,"LI",{});var fPe=s(q5);_7e=n(fPe,"STRONG",{});var qCt=s(_7e);jSr=r(qCt,"bart"),qCt.forEach(t),DSr=r(fPe," \u2014 "),bY=n(fPe,"A",{href:!0});var NCt=s(bY);GSr=r(NCt,"FlaxBartForQuestionAnswering"),NCt.forEach(t),OSr=r(fPe," (BART model)"),fPe.forEach(t),VSr=i(Ie),N5=n(Ie,"LI",{});var mPe=s(N5);b7e=n(mPe,"STRONG",{});var jCt=s(b7e);XSr=r(jCt,"bert"),jCt.forEach(t),zSr=r(mPe," \u2014 "),vY=n(mPe,"A",{href:!0});var DCt=s(vY);QSr=r(DCt,"FlaxBertForQuestionAnswering"),DCt.forEach(t),WSr=r(mPe," (BERT model)"),mPe.forEach(t),HSr=i(Ie),j5=n(Ie,"LI",{});var gPe=s(j5);v7e=n(gPe,"STRONG",{});var GCt=s(v7e);USr=r(GCt,"big_bird"),GCt.forEach(t),JSr=r(gPe," \u2014 "),FY=n(gPe,"A",{href:!0});var OCt=s(FY);YSr=r(OCt,"FlaxBigBirdForQuestionAnswering"),OCt.forEach(t),KSr=r(gPe," (BigBird model)"),gPe.forEach(t),ZSr=i(Ie),D5=n(Ie,"LI",{});var hPe=s(D5);F7e=n(hPe,"STRONG",{});var VCt=s(F7e);eRr=r(VCt,"distilbert"),VCt.forEach(t),oRr=r(hPe," \u2014 "),TY=n(hPe,"A",{href:!0});var XCt=s(TY);rRr=r(XCt,"FlaxDistilBertForQuestionAnswering"),XCt.forEach(t),tRr=r(hPe," (DistilBERT model)"),hPe.forEach(t),aRr=i(Ie),G5=n(Ie,"LI",{});var pPe=s(G5);T7e=n(pPe,"STRONG",{});var zCt=s(T7e);nRr=r(zCt,"electra"),zCt.forEach(t),sRr=r(pPe," \u2014 "),MY=n(pPe,"A",{href:!0});var QCt=s(MY);lRr=r(QCt,"FlaxElectraForQuestionAnswering"),QCt.forEach(t),iRr=r(pPe," (ELECTRA model)"),pPe.forEach(t),dRr=i(Ie),O5=n(Ie,"LI",{});var uPe=s(O5);M7e=n(uPe,"STRONG",{});var WCt=s(M7e);cRr=r(WCt,"mbart"),WCt.forEach(t),fRr=r(uPe," \u2014 "),EY=n(uPe,"A",{href:!0});var HCt=s(EY);mRr=r(HCt,"FlaxMBartForQuestionAnswering"),HCt.forEach(t),gRr=r(uPe," (mBART model)"),uPe.forEach(t),hRr=i(Ie),V5=n(Ie,"LI",{});var _Pe=s(V5);E7e=n(_Pe,"STRONG",{});var UCt=s(E7e);pRr=r(UCt,"roberta"),UCt.forEach(t),uRr=r(_Pe," \u2014 "),CY=n(_Pe,"A",{href:!0});var JCt=s(CY);_Rr=r(JCt,"FlaxRobertaForQuestionAnswering"),JCt.forEach(t),bRr=r(_Pe," (RoBERTa model)"),_Pe.forEach(t),vRr=i(Ie),X5=n(Ie,"LI",{});var bPe=s(X5);C7e=n(bPe,"STRONG",{});var YCt=s(C7e);FRr=r(YCt,"roformer"),YCt.forEach(t),TRr=r(bPe," \u2014 "),wY=n(bPe,"A",{href:!0});var KCt=s(wY);MRr=r(KCt,"FlaxRoFormerForQuestionAnswering"),KCt.forEach(t),ERr=r(bPe," (RoFormer model)"),bPe.forEach(t),CRr=i(Ie),z5=n(Ie,"LI",{});var vPe=s(z5);w7e=n(vPe,"STRONG",{});var ZCt=s(w7e);wRr=r(ZCt,"xlm-roberta"),ZCt.forEach(t),ARr=r(vPe," \u2014 "),AY=n(vPe,"A",{href:!0});var e3t=s(AY);yRr=r(e3t,"FlaxXLMRobertaForQuestionAnswering"),e3t.forEach(t),LRr=r(vPe," (XLM-RoBERTa model)"),vPe.forEach(t),Ie.forEach(t),xRr=i(Yl),T(Q5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Rqe=i(f),Hc=n(f,"H2",{class:!0});var Dje=s(Hc);W5=n(Dje,"A",{id:!0,class:!0,href:!0});var o3t=s(W5);A7e=n(o3t,"SPAN",{});var r3t=s(A7e);T(xx.$$.fragment,r3t),r3t.forEach(t),o3t.forEach(t),$Rr=i(Dje),y7e=n(Dje,"SPAN",{});var t3t=s(y7e);kRr=r(t3t,"FlaxAutoModelForTokenClassification"),t3t.forEach(t),Dje.forEach(t),Bqe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T($x.$$.fragment,Kl),SRr=i(Kl),Uc=n(Kl,"P",{});var zZ=s(Uc);RRr=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yY=n(zZ,"A",{href:!0});var a3t=s(yY);BRr=r(a3t,"from_pretrained()"),a3t.forEach(t),PRr=r(zZ," class method or the "),LY=n(zZ,"A",{href:!0});var n3t=s(LY);IRr=r(n3t,"from_config()"),n3t.forEach(t),qRr=r(zZ,` class
method.`),zZ.forEach(t),NRr=i(Kl),kx=n(Kl,"P",{});var Gje=s(kx);jRr=r(Gje,"This class cannot be instantiated directly using "),L7e=n(Gje,"CODE",{});var s3t=s(L7e);DRr=r(s3t,"__init__()"),s3t.forEach(t),GRr=r(Gje," (throws an error)."),Gje.forEach(t),ORr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var Iw=s(Qt);T(Sx.$$.fragment,Iw),VRr=i(Iw),x7e=n(Iw,"P",{});var l3t=s(x7e);XRr=r(l3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),l3t.forEach(t),zRr=i(Iw),Jc=n(Iw,"P",{});var QZ=s(Jc);QRr=r(QZ,`Note:
Loading a model from its configuration file does `),$7e=n(QZ,"STRONG",{});var i3t=s($7e);WRr=r(i3t,"not"),i3t.forEach(t),HRr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(QZ,"A",{href:!0});var d3t=s(xY);URr=r(d3t,"from_pretrained()"),d3t.forEach(t),JRr=r(QZ," to load the model weights."),QZ.forEach(t),YRr=i(Iw),T(H5.$$.fragment,Iw),Iw.forEach(t),KRr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(Rx.$$.fragment,Zl),ZRr=i(Zl),k7e=n(Zl,"P",{});var c3t=s(k7e);eBr=r(c3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),c3t.forEach(t),oBr=i(Zl),Fn=n(Zl,"P",{});var qw=s(Fn);rBr=r(qw,"The model class to instantiate is selected based on the "),S7e=n(qw,"CODE",{});var f3t=s(S7e);tBr=r(f3t,"model_type"),f3t.forEach(t),aBr=r(qw,` property of the config object (either
passed as an argument or loaded from `),R7e=n(qw,"CODE",{});var m3t=s(R7e);nBr=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),sBr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B7e=n(qw,"CODE",{});var g3t=s(B7e);lBr=r(g3t,"pretrained_model_name_or_path"),g3t.forEach(t),iBr=r(qw,":"),qw.forEach(t),dBr=i(Zl),De=n(Zl,"UL",{});var Fo=s(De);U5=n(Fo,"LI",{});var FPe=s(U5);P7e=n(FPe,"STRONG",{});var h3t=s(P7e);cBr=r(h3t,"albert"),h3t.forEach(t),fBr=r(FPe," \u2014 "),$Y=n(FPe,"A",{href:!0});var p3t=s($Y);mBr=r(p3t,"FlaxAlbertForTokenClassification"),p3t.forEach(t),gBr=r(FPe," (ALBERT model)"),FPe.forEach(t),hBr=i(Fo),J5=n(Fo,"LI",{});var TPe=s(J5);I7e=n(TPe,"STRONG",{});var u3t=s(I7e);pBr=r(u3t,"bert"),u3t.forEach(t),uBr=r(TPe," \u2014 "),kY=n(TPe,"A",{href:!0});var _3t=s(kY);_Br=r(_3t,"FlaxBertForTokenClassification"),_3t.forEach(t),bBr=r(TPe," (BERT model)"),TPe.forEach(t),vBr=i(Fo),Y5=n(Fo,"LI",{});var MPe=s(Y5);q7e=n(MPe,"STRONG",{});var b3t=s(q7e);FBr=r(b3t,"big_bird"),b3t.forEach(t),TBr=r(MPe," \u2014 "),SY=n(MPe,"A",{href:!0});var v3t=s(SY);MBr=r(v3t,"FlaxBigBirdForTokenClassification"),v3t.forEach(t),EBr=r(MPe," (BigBird model)"),MPe.forEach(t),CBr=i(Fo),K5=n(Fo,"LI",{});var EPe=s(K5);N7e=n(EPe,"STRONG",{});var F3t=s(N7e);wBr=r(F3t,"distilbert"),F3t.forEach(t),ABr=r(EPe," \u2014 "),RY=n(EPe,"A",{href:!0});var T3t=s(RY);yBr=r(T3t,"FlaxDistilBertForTokenClassification"),T3t.forEach(t),LBr=r(EPe," (DistilBERT model)"),EPe.forEach(t),xBr=i(Fo),Z5=n(Fo,"LI",{});var CPe=s(Z5);j7e=n(CPe,"STRONG",{});var M3t=s(j7e);$Br=r(M3t,"electra"),M3t.forEach(t),kBr=r(CPe," \u2014 "),BY=n(CPe,"A",{href:!0});var E3t=s(BY);SBr=r(E3t,"FlaxElectraForTokenClassification"),E3t.forEach(t),RBr=r(CPe," (ELECTRA model)"),CPe.forEach(t),BBr=i(Fo),eC=n(Fo,"LI",{});var wPe=s(eC);D7e=n(wPe,"STRONG",{});var C3t=s(D7e);PBr=r(C3t,"roberta"),C3t.forEach(t),IBr=r(wPe," \u2014 "),PY=n(wPe,"A",{href:!0});var w3t=s(PY);qBr=r(w3t,"FlaxRobertaForTokenClassification"),w3t.forEach(t),NBr=r(wPe," (RoBERTa model)"),wPe.forEach(t),jBr=i(Fo),oC=n(Fo,"LI",{});var APe=s(oC);G7e=n(APe,"STRONG",{});var A3t=s(G7e);DBr=r(A3t,"roformer"),A3t.forEach(t),GBr=r(APe," \u2014 "),IY=n(APe,"A",{href:!0});var y3t=s(IY);OBr=r(y3t,"FlaxRoFormerForTokenClassification"),y3t.forEach(t),VBr=r(APe," (RoFormer model)"),APe.forEach(t),XBr=i(Fo),rC=n(Fo,"LI",{});var yPe=s(rC);O7e=n(yPe,"STRONG",{});var L3t=s(O7e);zBr=r(L3t,"xlm-roberta"),L3t.forEach(t),QBr=r(yPe," \u2014 "),qY=n(yPe,"A",{href:!0});var x3t=s(qY);WBr=r(x3t,"FlaxXLMRobertaForTokenClassification"),x3t.forEach(t),HBr=r(yPe," (XLM-RoBERTa model)"),yPe.forEach(t),Fo.forEach(t),UBr=i(Zl),T(tC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Pqe=i(f),Yc=n(f,"H2",{class:!0});var Oje=s(Yc);aC=n(Oje,"A",{id:!0,class:!0,href:!0});var $3t=s(aC);V7e=n($3t,"SPAN",{});var k3t=s(V7e);T(Bx.$$.fragment,k3t),k3t.forEach(t),$3t.forEach(t),JBr=i(Oje),X7e=n(Oje,"SPAN",{});var S3t=s(X7e);YBr=r(S3t,"FlaxAutoModelForMultipleChoice"),S3t.forEach(t),Oje.forEach(t),Iqe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(Px.$$.fragment,ei),KBr=i(ei),Kc=n(ei,"P",{});var WZ=s(Kc);ZBr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NY=n(WZ,"A",{href:!0});var R3t=s(NY);ePr=r(R3t,"from_pretrained()"),R3t.forEach(t),oPr=r(WZ," class method or the "),jY=n(WZ,"A",{href:!0});var B3t=s(jY);rPr=r(B3t,"from_config()"),B3t.forEach(t),tPr=r(WZ,` class
method.`),WZ.forEach(t),aPr=i(ei),Ix=n(ei,"P",{});var Vje=s(Ix);nPr=r(Vje,"This class cannot be instantiated directly using "),z7e=n(Vje,"CODE",{});var P3t=s(z7e);sPr=r(P3t,"__init__()"),P3t.forEach(t),lPr=r(Vje," (throws an error)."),Vje.forEach(t),iPr=i(ei),Wt=n(ei,"DIV",{class:!0});var Nw=s(Wt);T(qx.$$.fragment,Nw),dPr=i(Nw),Q7e=n(Nw,"P",{});var I3t=s(Q7e);cPr=r(I3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I3t.forEach(t),fPr=i(Nw),Zc=n(Nw,"P",{});var HZ=s(Zc);mPr=r(HZ,`Note:
Loading a model from its configuration file does `),W7e=n(HZ,"STRONG",{});var q3t=s(W7e);gPr=r(q3t,"not"),q3t.forEach(t),hPr=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(HZ,"A",{href:!0});var N3t=s(DY);pPr=r(N3t,"from_pretrained()"),N3t.forEach(t),uPr=r(HZ," to load the model weights."),HZ.forEach(t),_Pr=i(Nw),T(nC.$$.fragment,Nw),Nw.forEach(t),bPr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Nx.$$.fragment,oi),vPr=i(oi),H7e=n(oi,"P",{});var j3t=s(H7e);FPr=r(j3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),j3t.forEach(t),TPr=i(oi),Tn=n(oi,"P",{});var jw=s(Tn);MPr=r(jw,"The model class to instantiate is selected based on the "),U7e=n(jw,"CODE",{});var D3t=s(U7e);EPr=r(D3t,"model_type"),D3t.forEach(t),CPr=r(jw,` property of the config object (either
passed as an argument or loaded from `),J7e=n(jw,"CODE",{});var G3t=s(J7e);wPr=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),APr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=n(jw,"CODE",{});var O3t=s(Y7e);yPr=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),LPr=r(jw,":"),jw.forEach(t),xPr=i(oi),Ge=n(oi,"UL",{});var To=s(Ge);sC=n(To,"LI",{});var LPe=s(sC);K7e=n(LPe,"STRONG",{});var V3t=s(K7e);$Pr=r(V3t,"albert"),V3t.forEach(t),kPr=r(LPe," \u2014 "),GY=n(LPe,"A",{href:!0});var X3t=s(GY);SPr=r(X3t,"FlaxAlbertForMultipleChoice"),X3t.forEach(t),RPr=r(LPe," (ALBERT model)"),LPe.forEach(t),BPr=i(To),lC=n(To,"LI",{});var xPe=s(lC);Z7e=n(xPe,"STRONG",{});var z3t=s(Z7e);PPr=r(z3t,"bert"),z3t.forEach(t),IPr=r(xPe," \u2014 "),OY=n(xPe,"A",{href:!0});var Q3t=s(OY);qPr=r(Q3t,"FlaxBertForMultipleChoice"),Q3t.forEach(t),NPr=r(xPe," (BERT model)"),xPe.forEach(t),jPr=i(To),iC=n(To,"LI",{});var $Pe=s(iC);eMe=n($Pe,"STRONG",{});var W3t=s(eMe);DPr=r(W3t,"big_bird"),W3t.forEach(t),GPr=r($Pe," \u2014 "),VY=n($Pe,"A",{href:!0});var H3t=s(VY);OPr=r(H3t,"FlaxBigBirdForMultipleChoice"),H3t.forEach(t),VPr=r($Pe," (BigBird model)"),$Pe.forEach(t),XPr=i(To),dC=n(To,"LI",{});var kPe=s(dC);oMe=n(kPe,"STRONG",{});var U3t=s(oMe);zPr=r(U3t,"distilbert"),U3t.forEach(t),QPr=r(kPe," \u2014 "),XY=n(kPe,"A",{href:!0});var J3t=s(XY);WPr=r(J3t,"FlaxDistilBertForMultipleChoice"),J3t.forEach(t),HPr=r(kPe," (DistilBERT model)"),kPe.forEach(t),UPr=i(To),cC=n(To,"LI",{});var SPe=s(cC);rMe=n(SPe,"STRONG",{});var Y3t=s(rMe);JPr=r(Y3t,"electra"),Y3t.forEach(t),YPr=r(SPe," \u2014 "),zY=n(SPe,"A",{href:!0});var K3t=s(zY);KPr=r(K3t,"FlaxElectraForMultipleChoice"),K3t.forEach(t),ZPr=r(SPe," (ELECTRA model)"),SPe.forEach(t),eIr=i(To),fC=n(To,"LI",{});var RPe=s(fC);tMe=n(RPe,"STRONG",{});var Z3t=s(tMe);oIr=r(Z3t,"roberta"),Z3t.forEach(t),rIr=r(RPe," \u2014 "),QY=n(RPe,"A",{href:!0});var ewt=s(QY);tIr=r(ewt,"FlaxRobertaForMultipleChoice"),ewt.forEach(t),aIr=r(RPe," (RoBERTa model)"),RPe.forEach(t),nIr=i(To),mC=n(To,"LI",{});var BPe=s(mC);aMe=n(BPe,"STRONG",{});var owt=s(aMe);sIr=r(owt,"roformer"),owt.forEach(t),lIr=r(BPe," \u2014 "),WY=n(BPe,"A",{href:!0});var rwt=s(WY);iIr=r(rwt,"FlaxRoFormerForMultipleChoice"),rwt.forEach(t),dIr=r(BPe," (RoFormer model)"),BPe.forEach(t),cIr=i(To),gC=n(To,"LI",{});var PPe=s(gC);nMe=n(PPe,"STRONG",{});var twt=s(nMe);fIr=r(twt,"xlm-roberta"),twt.forEach(t),mIr=r(PPe," \u2014 "),HY=n(PPe,"A",{href:!0});var awt=s(HY);gIr=r(awt,"FlaxXLMRobertaForMultipleChoice"),awt.forEach(t),hIr=r(PPe," (XLM-RoBERTa model)"),PPe.forEach(t),To.forEach(t),pIr=i(oi),T(hC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),qqe=i(f),ef=n(f,"H2",{class:!0});var Xje=s(ef);pC=n(Xje,"A",{id:!0,class:!0,href:!0});var nwt=s(pC);sMe=n(nwt,"SPAN",{});var swt=s(sMe);T(jx.$$.fragment,swt),swt.forEach(t),nwt.forEach(t),uIr=i(Xje),lMe=n(Xje,"SPAN",{});var lwt=s(lMe);_Ir=r(lwt,"FlaxAutoModelForNextSentencePrediction"),lwt.forEach(t),Xje.forEach(t),Nqe=i(f),Fr=n(f,"DIV",{class:!0});var ri=s(Fr);T(Dx.$$.fragment,ri),bIr=i(ri),of=n(ri,"P",{});var UZ=s(of);vIr=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UY=n(UZ,"A",{href:!0});var iwt=s(UY);FIr=r(iwt,"from_pretrained()"),iwt.forEach(t),TIr=r(UZ," class method or the "),JY=n(UZ,"A",{href:!0});var dwt=s(JY);MIr=r(dwt,"from_config()"),dwt.forEach(t),EIr=r(UZ,` class
method.`),UZ.forEach(t),CIr=i(ri),Gx=n(ri,"P",{});var zje=s(Gx);wIr=r(zje,"This class cannot be instantiated directly using "),iMe=n(zje,"CODE",{});var cwt=s(iMe);AIr=r(cwt,"__init__()"),cwt.forEach(t),yIr=r(zje," (throws an error)."),zje.forEach(t),LIr=i(ri),Ht=n(ri,"DIV",{class:!0});var Dw=s(Ht);T(Ox.$$.fragment,Dw),xIr=i(Dw),dMe=n(Dw,"P",{});var fwt=s(dMe);$Ir=r(fwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fwt.forEach(t),kIr=i(Dw),rf=n(Dw,"P",{});var JZ=s(rf);SIr=r(JZ,`Note:
Loading a model from its configuration file does `),cMe=n(JZ,"STRONG",{});var mwt=s(cMe);RIr=r(mwt,"not"),mwt.forEach(t),BIr=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(JZ,"A",{href:!0});var gwt=s(YY);PIr=r(gwt,"from_pretrained()"),gwt.forEach(t),IIr=r(JZ," to load the model weights."),JZ.forEach(t),qIr=i(Dw),T(uC.$$.fragment,Dw),Dw.forEach(t),NIr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(Vx.$$.fragment,ti),jIr=i(ti),fMe=n(ti,"P",{});var hwt=s(fMe);DIr=r(hwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hwt.forEach(t),GIr=i(ti),Mn=n(ti,"P",{});var Gw=s(Mn);OIr=r(Gw,"The model class to instantiate is selected based on the "),mMe=n(Gw,"CODE",{});var pwt=s(mMe);VIr=r(pwt,"model_type"),pwt.forEach(t),XIr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),gMe=n(Gw,"CODE",{});var uwt=s(gMe);zIr=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),QIr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(Gw,"CODE",{});var _wt=s(hMe);WIr=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),HIr=r(Gw,":"),Gw.forEach(t),UIr=i(ti),pMe=n(ti,"UL",{});var bwt=s(pMe);_C=n(bwt,"LI",{});var IPe=s(_C);uMe=n(IPe,"STRONG",{});var vwt=s(uMe);JIr=r(vwt,"bert"),vwt.forEach(t),YIr=r(IPe," \u2014 "),KY=n(IPe,"A",{href:!0});var Fwt=s(KY);KIr=r(Fwt,"FlaxBertForNextSentencePrediction"),Fwt.forEach(t),ZIr=r(IPe," (BERT model)"),IPe.forEach(t),bwt.forEach(t),eqr=i(ti),T(bC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),jqe=i(f),tf=n(f,"H2",{class:!0});var Qje=s(tf);vC=n(Qje,"A",{id:!0,class:!0,href:!0});var Twt=s(vC);_Me=n(Twt,"SPAN",{});var Mwt=s(_Me);T(Xx.$$.fragment,Mwt),Mwt.forEach(t),Twt.forEach(t),oqr=i(Qje),bMe=n(Qje,"SPAN",{});var Ewt=s(bMe);rqr=r(Ewt,"FlaxAutoModelForImageClassification"),Ewt.forEach(t),Qje.forEach(t),Dqe=i(f),Tr=n(f,"DIV",{class:!0});var ai=s(Tr);T(zx.$$.fragment,ai),tqr=i(ai),af=n(ai,"P",{});var YZ=s(af);aqr=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZY=n(YZ,"A",{href:!0});var Cwt=s(ZY);nqr=r(Cwt,"from_pretrained()"),Cwt.forEach(t),sqr=r(YZ," class method or the "),eK=n(YZ,"A",{href:!0});var wwt=s(eK);lqr=r(wwt,"from_config()"),wwt.forEach(t),iqr=r(YZ,` class
method.`),YZ.forEach(t),dqr=i(ai),Qx=n(ai,"P",{});var Wje=s(Qx);cqr=r(Wje,"This class cannot be instantiated directly using "),vMe=n(Wje,"CODE",{});var Awt=s(vMe);fqr=r(Awt,"__init__()"),Awt.forEach(t),mqr=r(Wje," (throws an error)."),Wje.forEach(t),gqr=i(ai),Ut=n(ai,"DIV",{class:!0});var Ow=s(Ut);T(Wx.$$.fragment,Ow),hqr=i(Ow),FMe=n(Ow,"P",{});var ywt=s(FMe);pqr=r(ywt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ywt.forEach(t),uqr=i(Ow),nf=n(Ow,"P",{});var KZ=s(nf);_qr=r(KZ,`Note:
Loading a model from its configuration file does `),TMe=n(KZ,"STRONG",{});var Lwt=s(TMe);bqr=r(Lwt,"not"),Lwt.forEach(t),vqr=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(KZ,"A",{href:!0});var xwt=s(oK);Fqr=r(xwt,"from_pretrained()"),xwt.forEach(t),Tqr=r(KZ," to load the model weights."),KZ.forEach(t),Mqr=i(Ow),T(FC.$$.fragment,Ow),Ow.forEach(t),Eqr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(Hx.$$.fragment,ni),Cqr=i(ni),MMe=n(ni,"P",{});var $wt=s(MMe);wqr=r($wt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$wt.forEach(t),Aqr=i(ni),En=n(ni,"P",{});var Vw=s(En);yqr=r(Vw,"The model class to instantiate is selected based on the "),EMe=n(Vw,"CODE",{});var kwt=s(EMe);Lqr=r(kwt,"model_type"),kwt.forEach(t),xqr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),CMe=n(Vw,"CODE",{});var Swt=s(CMe);$qr=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),kqr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(Vw,"CODE",{});var Rwt=s(wMe);Sqr=r(Rwt,"pretrained_model_name_or_path"),Rwt.forEach(t),Rqr=r(Vw,":"),Vw.forEach(t),Bqr=i(ni),Ux=n(ni,"UL",{});var Hje=s(Ux);TC=n(Hje,"LI",{});var qPe=s(TC);AMe=n(qPe,"STRONG",{});var Bwt=s(AMe);Pqr=r(Bwt,"beit"),Bwt.forEach(t),Iqr=r(qPe," \u2014 "),rK=n(qPe,"A",{href:!0});var Pwt=s(rK);qqr=r(Pwt,"FlaxBeitForImageClassification"),Pwt.forEach(t),Nqr=r(qPe," (BEiT model)"),qPe.forEach(t),jqr=i(Hje),MC=n(Hje,"LI",{});var NPe=s(MC);yMe=n(NPe,"STRONG",{});var Iwt=s(yMe);Dqr=r(Iwt,"vit"),Iwt.forEach(t),Gqr=r(NPe," \u2014 "),tK=n(NPe,"A",{href:!0});var qwt=s(tK);Oqr=r(qwt,"FlaxViTForImageClassification"),qwt.forEach(t),Vqr=r(NPe," (ViT model)"),NPe.forEach(t),Hje.forEach(t),Xqr=i(ni),T(EC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Gqe=i(f),sf=n(f,"H2",{class:!0});var Uje=s(sf);CC=n(Uje,"A",{id:!0,class:!0,href:!0});var Nwt=s(CC);LMe=n(Nwt,"SPAN",{});var jwt=s(LMe);T(Jx.$$.fragment,jwt),jwt.forEach(t),Nwt.forEach(t),zqr=i(Uje),xMe=n(Uje,"SPAN",{});var Dwt=s(xMe);Qqr=r(Dwt,"FlaxAutoModelForVision2Seq"),Dwt.forEach(t),Uje.forEach(t),Oqe=i(f),Mr=n(f,"DIV",{class:!0});var si=s(Mr);T(Yx.$$.fragment,si),Wqr=i(si),lf=n(si,"P",{});var ZZ=s(lf);Hqr=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aK=n(ZZ,"A",{href:!0});var Gwt=s(aK);Uqr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),Jqr=r(ZZ," class method or the "),nK=n(ZZ,"A",{href:!0});var Owt=s(nK);Yqr=r(Owt,"from_config()"),Owt.forEach(t),Kqr=r(ZZ,` class
method.`),ZZ.forEach(t),Zqr=i(si),Kx=n(si,"P",{});var Jje=s(Kx);eNr=r(Jje,"This class cannot be instantiated directly using "),$Me=n(Jje,"CODE",{});var Vwt=s($Me);oNr=r(Vwt,"__init__()"),Vwt.forEach(t),rNr=r(Jje," (throws an error)."),Jje.forEach(t),tNr=i(si),Jt=n(si,"DIV",{class:!0});var Xw=s(Jt);T(Zx.$$.fragment,Xw),aNr=i(Xw),kMe=n(Xw,"P",{});var Xwt=s(kMe);nNr=r(Xwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xwt.forEach(t),sNr=i(Xw),df=n(Xw,"P",{});var eee=s(df);lNr=r(eee,`Note:
Loading a model from its configuration file does `),SMe=n(eee,"STRONG",{});var zwt=s(SMe);iNr=r(zwt,"not"),zwt.forEach(t),dNr=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(eee,"A",{href:!0});var Qwt=s(sK);cNr=r(Qwt,"from_pretrained()"),Qwt.forEach(t),fNr=r(eee," to load the model weights."),eee.forEach(t),mNr=i(Xw),T(wC.$$.fragment,Xw),Xw.forEach(t),gNr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(e9.$$.fragment,li),hNr=i(li),RMe=n(li,"P",{});var Wwt=s(RMe);pNr=r(Wwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wwt.forEach(t),uNr=i(li),Cn=n(li,"P",{});var zw=s(Cn);_Nr=r(zw,"The model class to instantiate is selected based on the "),BMe=n(zw,"CODE",{});var Hwt=s(BMe);bNr=r(Hwt,"model_type"),Hwt.forEach(t),vNr=r(zw,` property of the config object (either
passed as an argument or loaded from `),PMe=n(zw,"CODE",{});var Uwt=s(PMe);FNr=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),TNr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=n(zw,"CODE",{});var Jwt=s(IMe);MNr=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),ENr=r(zw,":"),zw.forEach(t),CNr=i(li),qMe=n(li,"UL",{});var Ywt=s(qMe);AC=n(Ywt,"LI",{});var jPe=s(AC);NMe=n(jPe,"STRONG",{});var Kwt=s(NMe);wNr=r(Kwt,"vision-encoder-decoder"),Kwt.forEach(t),ANr=r(jPe," \u2014 "),lK=n(jPe,"A",{href:!0});var Zwt=s(lK);yNr=r(Zwt,"FlaxVisionEncoderDecoderModel"),Zwt.forEach(t),LNr=r(jPe," (Vision Encoder decoder model)"),jPe.forEach(t),Ywt.forEach(t),xNr=i(li),T(yC.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(tLt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(_f,"id","extending-the-auto-classes"),c(_f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_f,"href","#extending-the-auto-classes"),c(pi,"class","relative group"),c(vf,"id","transformers.AutoConfig"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(F$,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(T$,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig"),c(M$,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig"),c(E$,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig"),c(C$,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig"),c(w$,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(A$,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig"),c(y$,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(L$,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(x$,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c($$,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig"),c(k$,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig"),c(S$,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig"),c(R$,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig"),c(B$,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig"),c(P$,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig"),c(I$,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(q$,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(N$,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(j$,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig"),c(D$,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(G$,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(O$,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig"),c(V$,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig"),c(X$,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig"),c(z$,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig"),c(Q$,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig"),c(W$,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig"),c(H$,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(U$,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig"),c(J$,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig"),c(Y$,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig"),c(K$,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig"),c(Z$,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig"),c(ek,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config"),c(ok,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(rk,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig"),c(tk,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig"),c(ak,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig"),c(nk,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(sk,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(lk,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(ik,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(dk,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig"),c(ck,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig"),c(fk,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig"),c(mk,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig"),c(gk,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config"),c(hk,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig"),c(pk,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uk,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig"),c(_k,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(bk,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(vk,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig"),c(Fk,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config"),c(Tk,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Mk,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ek,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig"),c(Ck,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig"),c(wk,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig"),c(Ak,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(yk,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Lk,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(xk,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagConfig"),c($k,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmConfig"),c(kk,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig"),c(Sk,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig"),c(Rk,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig"),c(Bk,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig"),c(Pk,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig"),c(Ik,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig"),c(qk,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig"),c(Nk,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig"),c(jk,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig"),c(Dk,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig"),c(Gk,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Ok,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Vk,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Xk,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig"),c(zk,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Qk,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig"),c(Wk,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config"),c(Hk,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig"),c(Uk,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig"),c(Jk,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Yk,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig"),c(Kk,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Zk,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(eS,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig"),c(oS,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig"),c(rS,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(tS,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(aS,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(nS,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig"),c(sS,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(lS,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(iS,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig"),c(dS,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig"),c(cS,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig"),c(fS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(mS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(gS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(hS,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig"),c(pS,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig"),c(uS,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"id","transformers.AutoTokenizer"),c(bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bg,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(_S,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(bS,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(vS,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(FS,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizer"),c(TS,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizerFast"),c(MS,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizer"),c(ES,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(CS,"href","/docs/transformers/pr_17060/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(wS,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(AS,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(yS,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(LS,"href","/docs/transformers/pr_17060/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(xS,"href","/docs/transformers/pr_17060/en/model_doc/bertweet#transformers.BertweetTokenizer"),c($S,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(kS,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(SS,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(RS,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(BS,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(PS,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(IS,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(qS,"href","/docs/transformers/pr_17060/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(NS,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizer"),c(jS,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(DS,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineTokenizer"),c(GS,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizer"),c(OS,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(VS,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(XS,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(zS,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizer"),c(QS,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(WS,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(HS,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(US,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JS,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizer"),c(YS,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(KS,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(ZS,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(eR,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(oR,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(rR,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(tR,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(aR,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizer"),c(nR,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(sR,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(lR,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizer"),c(iR,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(dR,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(cR,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizer"),c(fR,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(mR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_R,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bR,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizer"),c(vR,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(FR,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(TR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ER,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(CR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(wR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(AR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(yR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(LR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(xR,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c($R,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(kR,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizer"),c(SR,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizerFast"),c(RR,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizer"),c(BR,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(PR,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeTokenizer"),c(IR,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(qR,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(NR,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(jR,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianTokenizer"),c(DR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizer"),c(GR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(OR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(VR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(XR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(zR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(QR,"href","/docs/transformers/pr_17060/en/model_doc/mluke#transformers.MLukeTokenizer"),c(WR,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(HR,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(JR,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(YR,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5Tokenizer"),c(KR,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ZR,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(eB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(rB,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(tB,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aB,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nB,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(sB,"href","/docs/transformers/pr_17060/en/model_doc/phobert#transformers.PhobertTokenizer"),c(lB,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartTokenizer"),c(iB,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(dB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(cB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagTokenizer"),c(mB,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizer"),c(gB,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizerFast"),c(hB,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizer"),c(pB,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(uB,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizer"),c(_B,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(vB,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MB,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(EB,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(CB,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(wB,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(AB,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizer"),c(yB,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(LB,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(xB,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c($B,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5Tokenizer"),c(kB,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5TokenizerFast"),c(SB,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasTokenizer"),c(RB,"href","/docs/transformers/pr_17060/en/model_doc/tapex#transformers.TapexTokenizer"),c(BB,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(PB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(IB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(qB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(jB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizer"),c(DB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(GB,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMTokenizer"),c(OB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(VB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(XB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(zB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(WB,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(HB,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(UB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(JB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(vi,"class","relative group"),c(YB,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(KB,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(eP,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rP,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tP,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(aP,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(nP,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(dP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(cP,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pP,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(uP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(_P,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bP,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vP,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FP,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MP,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(EP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(CP,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPProcessor"),c(wP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(AP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(yP,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(LP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($P,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(kP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(SP,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRProcessor"),c(RP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PP,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltProcessor"),c(IP,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(qP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoModel"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(jP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OP,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel"),c(VP,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel"),c(XP,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel"),c(zP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(QP,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(WP,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel"),c(HP,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(UP,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(JP,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(YP,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel"),c(KP,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel"),c(ZP,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel"),c(eI,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel"),c(oI,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel"),c(rI,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel"),c(tI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(aI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(nI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(sI,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel"),c(lI,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(iI,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(dI,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel"),c(cI,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel"),c(fI,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel"),c(mI,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(gI,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel"),c(hI,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel"),c(pI,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel"),c(uI,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel"),c(_I,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel"),c(bI,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel"),c(vI,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel"),c(FI,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel"),c(TI,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model"),c(MI,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(EI,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel"),c(CI,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel"),c(wI,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel"),c(AI,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(yI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(LI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(xI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c($I,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel"),c(kI,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel"),c(SI,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel"),c(RI,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel"),c(BI,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model"),c(PI,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel"),c(II,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel"),c(qI,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel"),c(NI,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(jI,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel"),c(DI,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel"),c(GI,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model"),c(OI,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel"),c(VI,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(XI,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel"),c(zI,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel"),c(QI,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel"),c(WI,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel"),c(HI,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(UI,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel"),c(JI,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel"),c(YI,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel"),c(KI,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel"),c(ZI,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel"),c(eq,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(oq,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel"),c(rq,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel"),c(tq,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel"),c(aq,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel"),c(nq,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel"),c(sq,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(lq,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel"),c(iq,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(dq,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel"),c(cq,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model"),c(fq,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel"),c(mq,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(gq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel"),c(hq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(pq,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel"),c(uq,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel"),c(_q,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(bq,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel"),c(vq,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel"),c(Fq,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Tq,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Mq,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel"),c(Eq,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel"),c(Cq,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel"),c(wq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Aq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(yq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Lq,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel"),c(xq,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel"),c($q,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pu,"id","transformers.AutoModelForPreTraining"),c(Pu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pu,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c(kq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bq,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Pq,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Iq,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining"),c(qq,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Nq,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(jq,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Dq,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Gq,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Oq,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Vq,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Xq,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining"),c(zq,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Qq,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Wq,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Hq,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Uq,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Jq,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(eN,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(oN,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(rN,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tN,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aN,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(nN,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sN,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lN,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(iN,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dN,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cN,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(fN,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(mN,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(gN,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(hN,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(pN,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(_N,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(bN,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C_,"id","transformers.AutoModelForCausalLM"),c(C_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(vN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MN,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM"),c(EN,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel"),c(CN,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(wN,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(AN,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(yN,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(LN,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(xN,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM"),c($N,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(kN,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(SN,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM"),c(RN,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(BN,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(PN,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(IN,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM"),c(qN,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM"),c(NN,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(jN,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(DN,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(GN,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(ON,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(VN,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(XN,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(zN,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(QN,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(WN,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(HN,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(UN,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(JN,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(YN,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(KN,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ZN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(ej,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(oj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(rj,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d0,"id","transformers.AutoModelForMaskedLM"),c(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d0,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(tj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sj,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(cj,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(fj,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(mj,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(gj,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(hj,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(pj,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(uj,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(_j,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(bj,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(vj,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Cj,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(wj,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(yj,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(xj,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c($j,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(kj,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jj,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H0,"id","transformers.AutoModelForSeq2SeqLM"),c(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H0,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bi,"class","relative group"),c(Dj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(zj,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Hj,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel"),c(Kj,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p1,"id","transformers.AutoModelForSequenceClassification"),c(p1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p1,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(sD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dD,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gb,"id","transformers.AutoModelForMultipleChoice"),c(gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gb,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(tG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sG,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c($G,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qb,"id","transformers.AutoModelForNextSentencePrediction"),c(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c(PG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(jG,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(DG,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(GG,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(OG,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o2,"id","transformers.AutoModelForTokenClassification"),c(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o2,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(VG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QG,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(WG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification"),c(HG,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(UG,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(JG,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification"),c(YG,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(KG,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(eO,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(oO,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(rO,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(tO,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(aO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(nO,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(sO,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(lO,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(iO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(dO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(cO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(fO,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(mO,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(gO,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(hO,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(pO,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(uO,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(_O,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(bO,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(vO,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(FO,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(TO,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(MO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(EO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(CO,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(wO,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j2,"id","transformers.AutoModelForQuestionAnswering"),c(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(AO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(VO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(fV,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(hV,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xv,"id","transformers.AutoModelForTableQuestionAnswering"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(pV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bV,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bv,"id","transformers.AutoModelForImageClassification"),c(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bv,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c(vV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MV,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification"),c(EV,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(CV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(wV,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification"),c(AV,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(yV,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(LV,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(xV,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c($V,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(kV,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(SV,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(RV,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(BV,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(PV,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification"),c(IV,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification"),c(qV,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForVision2Seq"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c(NV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForAudioClassification"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(OV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mF,"id","transformers.AutoModelForAudioFrameClassification"),c(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mF,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(ZV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(tX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(aX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(nX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForCTC"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(sX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(cX,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC"),c(fX,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC"),c(mX,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC"),c(gX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(hX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(pX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(uX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(_X,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(TX,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NF,"id","transformers.AutoModelForAudioXVector"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.AutoModelForAudioXVector"),c(vd,"class","relative group"),c(MX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(AX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(yX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(LX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForMaskedImageModeling"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c(xX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($X,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SX,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(RX,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(BX,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForObjectDetection"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c(PX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NX,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection"),c(jX,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n6,"id","transformers.AutoModelForImageSegmentation"),c(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n6,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(DX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c6,"id","transformers.AutoModelForSemanticSegmentation"),c(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(XX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(HX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(UX,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(JX,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b6,"id","transformers.AutoModelForInstanceSegmentation"),c(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Pd,"class","relative group"),c(YX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E6,"id","transformers.TFAutoModel"),c(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E6,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(oz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel"),c(nz,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel"),c(sz,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel"),c(lz,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(iz,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(dz,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel"),c(cz,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel"),c(fz,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel"),c(mz,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel"),c(gz,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel"),c(hz,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(pz,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel"),c(uz,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(_z,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(bz,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(vz,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel"),c(Fz,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Tz,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel"),c(Mz,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Ez,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Cz,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel"),c(wz,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel"),c(Az,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(yz,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel"),c(Lz,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel"),c(xz,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel"),c($z,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel"),c(kz,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel"),c(Sz,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Rz,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Bz,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model"),c(Pz,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Iz,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel"),c(qz,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel"),c(Nz,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel"),c(jz,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Dz,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Gz,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model"),c(Oz,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel"),c(Vz,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Xz,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel"),c(zz,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Qz,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Wz,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel"),c(Hz,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Uz,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.TFAutoModelForPreTraining"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(Jz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(eQ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(oQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining"),c(rQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(tQ,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(aQ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(nQ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(sQ,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(iQ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(dQ,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(fQ,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(mQ,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(uQ,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(bQ,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(vQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(FQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.TFAutoModelForCausalLM"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(MQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(yQ,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(LQ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(xQ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c($Q,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(SQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(RQ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(BQ,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(PQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t7,"id","transformers.TFAutoModelForImageClassification"),c(t7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t7,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(qQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DQ,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(GQ,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(OQ,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d7,"id","transformers.TFAutoModelForMaskedLM"),c(d7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d7,"href","#transformers.TFAutoModelForMaskedLM"),c(Yd,"class","relative group"),c(VQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QQ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(eW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(oW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(rW,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(tW,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(aW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(nW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(sW,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(lW,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(iW,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(dW,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(cW,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(fW,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ec,"class","relative group"),c(mW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pW,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(uW,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(_W,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(bW,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(vW,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(FW,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel"),c(TW,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(MW,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(EW,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(CW,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z7,"id","transformers.TFAutoModelForSequenceClassification"),c(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z7,"href","#transformers.TFAutoModelForSequenceClassification"),c(tc,"class","relative group"),c(wW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c($W,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.TFAutoModelForMultipleChoice"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.TFAutoModelForMultipleChoice"),c(sc,"class","relative group"),c(eH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(aH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(nH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(sH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(mH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(hH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(pH,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(uH,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(_H,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(bH,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(vH,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(dc,"class","relative group"),c(FH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(CH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(wH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LH,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.TFAutoModelForTokenClassification"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c(xH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($H,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(RH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(BH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(PH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(IH,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(qH,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(NH,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(jH,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(DH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(GH,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(OH,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(VH,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(XH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(zH,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(QH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(WH,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(HH,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(UH,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(JH,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(YH,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.TFAutoModelForQuestionAnswering"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(bc,"class","relative group"),c(KH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(cU,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(vU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForVision2Seq"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForVision2Seq"),c(Tc,"class","relative group"),c(TU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Cc,"class","relative group"),c(wU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LU,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.FlaxAutoModel"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.FlaxAutoModel"),c(yc,"class","relative group"),c(xU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel"),c(RU,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel"),c(BU,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel"),c(PU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel"),c(IU,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(qU,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(NU,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(jU,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel"),c(DU,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(GU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel"),c(OU,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(VU,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(XU,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(zU,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel"),c(QU,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel"),c(WU,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model"),c(HU,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(UU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(JU,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(YU,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model"),c(KU,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(ZU,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel"),c(eJ,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(oJ,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(rJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.FlaxAutoModelForCausalLM"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.FlaxAutoModelForCausalLM"),c($c,"class","relative group"),c(tJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(lJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(iJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(dJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(cJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(fJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(mJ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(gJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(hJ,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.FlaxAutoModelForPreTraining"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Rc,"class","relative group"),c(pJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(vJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(TJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(MJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(EJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CJ,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(wJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(LJ,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(xJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.FlaxAutoModelForMaskedLM"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ic,"class","relative group"),c($J,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(PJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(NJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(jJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(GJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(OJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(jc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(JJ,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(YJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Oc,"class","relative group"),c(oY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(zc,"class","relative group"),c(hY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(FY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(CY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(wY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(AY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.FlaxAutoModelForTokenClassification"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Hc,"class","relative group"),c(yY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(kY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(SY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(RY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(BY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(PY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(IY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(qY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Yc,"class","relative group"),c(NY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(XY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(zY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(QY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(WY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(HY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(ef,"class","relative group"),c(UY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.FlaxAutoModelForImageClassification"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModelForImageClassification"),c(tf,"class","relative group"),c(ZY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(tK,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.FlaxAutoModelForVision2Seq"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(sf,"class","relative group"),c(aK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ii),b(f,gf,_),b(f,et,_),e(et,di),e(et,ci),e(ci,Qw),e(et,hf),b(f,qe,_),b(f,Xe,_),e(Xe,fi),e(Xe,An),e(An,Ww),e(Xe,yn),e(Xe,Ln),e(Ln,Hw),e(Xe,mi),e(Xe,xn),e(xn,Uw),e(Xe,gi),b(f,pf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,h$),e(Ae,hi),e(hi,p$),e(Ae,u$),b(f,Eo,_),b(f,Ea,_),e(Ea,_$),e(Ea,uf),e(uf,b$),e(Ea,Yje),b(f,DPe,_),b(f,pi,_),e(pi,_f),e(_f,oee),M(Jw,oee,null),e(pi,Kje),e(pi,ree),e(ree,Zje),b(f,GPe,_),b(f,$n,_),e($n,eDe),e($n,tee),e(tee,oDe),e($n,rDe),e($n,aee),e(aee,tDe),e($n,aDe),b(f,OPe,_),M(Yw,f,_),b(f,VPe,_),b(f,v$,_),e(v$,nDe),b(f,XPe,_),M(bf,f,_),b(f,zPe,_),b(f,ui,_),e(ui,vf),e(vf,nee),M(Kw,nee,null),e(ui,sDe),e(ui,see),e(see,lDe),b(f,QPe,_),b(f,Co,_),M(Zw,Co,null),e(Co,iDe),e(Co,eA),e(eA,dDe),e(eA,F$),e(F$,cDe),e(eA,fDe),e(Co,mDe),e(Co,oA),e(oA,gDe),e(oA,lee),e(lee,hDe),e(oA,pDe),e(Co,uDe),e(Co,Er),M(rA,Er,null),e(Er,_De),e(Er,iee),e(iee,bDe),e(Er,vDe),e(Er,_i),e(_i,FDe),e(_i,dee),e(dee,TDe),e(_i,MDe),e(_i,cee),e(cee,EDe),e(_i,CDe),e(Er,wDe),e(Er,y),e(y,Ff),e(Ff,fee),e(fee,ADe),e(Ff,yDe),e(Ff,T$),e(T$,LDe),e(Ff,xDe),e(y,$De),e(y,Tf),e(Tf,mee),e(mee,kDe),e(Tf,SDe),e(Tf,M$),e(M$,RDe),e(Tf,BDe),e(y,PDe),e(y,Mf),e(Mf,gee),e(gee,IDe),e(Mf,qDe),e(Mf,E$),e(E$,NDe),e(Mf,jDe),e(y,DDe),e(y,Ef),e(Ef,hee),e(hee,GDe),e(Ef,ODe),e(Ef,C$),e(C$,VDe),e(Ef,XDe),e(y,zDe),e(y,Cf),e(Cf,pee),e(pee,QDe),e(Cf,WDe),e(Cf,w$),e(w$,HDe),e(Cf,UDe),e(y,JDe),e(y,wf),e(wf,uee),e(uee,YDe),e(wf,KDe),e(wf,A$),e(A$,ZDe),e(wf,eGe),e(y,oGe),e(y,Af),e(Af,_ee),e(_ee,rGe),e(Af,tGe),e(Af,y$),e(y$,aGe),e(Af,nGe),e(y,sGe),e(y,yf),e(yf,bee),e(bee,lGe),e(yf,iGe),e(yf,L$),e(L$,dGe),e(yf,cGe),e(y,fGe),e(y,Lf),e(Lf,vee),e(vee,mGe),e(Lf,gGe),e(Lf,x$),e(x$,hGe),e(Lf,pGe),e(y,uGe),e(y,xf),e(xf,Fee),e(Fee,_Ge),e(xf,bGe),e(xf,$$),e($$,vGe),e(xf,FGe),e(y,TGe),e(y,$f),e($f,Tee),e(Tee,MGe),e($f,EGe),e($f,k$),e(k$,CGe),e($f,wGe),e(y,AGe),e(y,kf),e(kf,Mee),e(Mee,yGe),e(kf,LGe),e(kf,S$),e(S$,xGe),e(kf,$Ge),e(y,kGe),e(y,Sf),e(Sf,Eee),e(Eee,SGe),e(Sf,RGe),e(Sf,R$),e(R$,BGe),e(Sf,PGe),e(y,IGe),e(y,Rf),e(Rf,Cee),e(Cee,qGe),e(Rf,NGe),e(Rf,B$),e(B$,jGe),e(Rf,DGe),e(y,GGe),e(y,Bf),e(Bf,wee),e(wee,OGe),e(Bf,VGe),e(Bf,P$),e(P$,XGe),e(Bf,zGe),e(y,QGe),e(y,Pf),e(Pf,Aee),e(Aee,WGe),e(Pf,HGe),e(Pf,I$),e(I$,UGe),e(Pf,JGe),e(y,YGe),e(y,If),e(If,yee),e(yee,KGe),e(If,ZGe),e(If,q$),e(q$,eOe),e(If,oOe),e(y,rOe),e(y,qf),e(qf,Lee),e(Lee,tOe),e(qf,aOe),e(qf,N$),e(N$,nOe),e(qf,sOe),e(y,lOe),e(y,Nf),e(Nf,xee),e(xee,iOe),e(Nf,dOe),e(Nf,j$),e(j$,cOe),e(Nf,fOe),e(y,mOe),e(y,jf),e(jf,$ee),e($ee,gOe),e(jf,hOe),e(jf,D$),e(D$,pOe),e(jf,uOe),e(y,_Oe),e(y,Df),e(Df,kee),e(kee,bOe),e(Df,vOe),e(Df,G$),e(G$,FOe),e(Df,TOe),e(y,MOe),e(y,Gf),e(Gf,See),e(See,EOe),e(Gf,COe),e(Gf,O$),e(O$,wOe),e(Gf,AOe),e(y,yOe),e(y,Of),e(Of,Ree),e(Ree,LOe),e(Of,xOe),e(Of,V$),e(V$,$Oe),e(Of,kOe),e(y,SOe),e(y,Vf),e(Vf,Bee),e(Bee,ROe),e(Vf,BOe),e(Vf,X$),e(X$,POe),e(Vf,IOe),e(y,qOe),e(y,Xf),e(Xf,Pee),e(Pee,NOe),e(Xf,jOe),e(Xf,z$),e(z$,DOe),e(Xf,GOe),e(y,OOe),e(y,zf),e(zf,Iee),e(Iee,VOe),e(zf,XOe),e(zf,Q$),e(Q$,zOe),e(zf,QOe),e(y,WOe),e(y,Qf),e(Qf,qee),e(qee,HOe),e(Qf,UOe),e(Qf,W$),e(W$,JOe),e(Qf,YOe),e(y,KOe),e(y,Wf),e(Wf,Nee),e(Nee,ZOe),e(Wf,eVe),e(Wf,H$),e(H$,oVe),e(Wf,rVe),e(y,tVe),e(y,Hf),e(Hf,jee),e(jee,aVe),e(Hf,nVe),e(Hf,U$),e(U$,sVe),e(Hf,lVe),e(y,iVe),e(y,Uf),e(Uf,Dee),e(Dee,dVe),e(Uf,cVe),e(Uf,J$),e(J$,fVe),e(Uf,mVe),e(y,gVe),e(y,Jf),e(Jf,Gee),e(Gee,hVe),e(Jf,pVe),e(Jf,Y$),e(Y$,uVe),e(Jf,_Ve),e(y,bVe),e(y,Yf),e(Yf,Oee),e(Oee,vVe),e(Yf,FVe),e(Yf,K$),e(K$,TVe),e(Yf,MVe),e(y,EVe),e(y,Kf),e(Kf,Vee),e(Vee,CVe),e(Kf,wVe),e(Kf,Z$),e(Z$,AVe),e(Kf,yVe),e(y,LVe),e(y,Zf),e(Zf,Xee),e(Xee,xVe),e(Zf,$Ve),e(Zf,ek),e(ek,kVe),e(Zf,SVe),e(y,RVe),e(y,em),e(em,zee),e(zee,BVe),e(em,PVe),e(em,ok),e(ok,IVe),e(em,qVe),e(y,NVe),e(y,om),e(om,Qee),e(Qee,jVe),e(om,DVe),e(om,rk),e(rk,GVe),e(om,OVe),e(y,VVe),e(y,rm),e(rm,Wee),e(Wee,XVe),e(rm,zVe),e(rm,tk),e(tk,QVe),e(rm,WVe),e(y,HVe),e(y,tm),e(tm,Hee),e(Hee,UVe),e(tm,JVe),e(tm,ak),e(ak,YVe),e(tm,KVe),e(y,ZVe),e(y,am),e(am,Uee),e(Uee,eXe),e(am,oXe),e(am,nk),e(nk,rXe),e(am,tXe),e(y,aXe),e(y,nm),e(nm,Jee),e(Jee,nXe),e(nm,sXe),e(nm,sk),e(sk,lXe),e(nm,iXe),e(y,dXe),e(y,sm),e(sm,Yee),e(Yee,cXe),e(sm,fXe),e(sm,lk),e(lk,mXe),e(sm,gXe),e(y,hXe),e(y,lm),e(lm,Kee),e(Kee,pXe),e(lm,uXe),e(lm,ik),e(ik,_Xe),e(lm,bXe),e(y,vXe),e(y,im),e(im,Zee),e(Zee,FXe),e(im,TXe),e(im,dk),e(dk,MXe),e(im,EXe),e(y,CXe),e(y,dm),e(dm,eoe),e(eoe,wXe),e(dm,AXe),e(dm,ck),e(ck,yXe),e(dm,LXe),e(y,xXe),e(y,cm),e(cm,ooe),e(ooe,$Xe),e(cm,kXe),e(cm,fk),e(fk,SXe),e(cm,RXe),e(y,BXe),e(y,fm),e(fm,roe),e(roe,PXe),e(fm,IXe),e(fm,mk),e(mk,qXe),e(fm,NXe),e(y,jXe),e(y,mm),e(mm,toe),e(toe,DXe),e(mm,GXe),e(mm,gk),e(gk,OXe),e(mm,VXe),e(y,XXe),e(y,gm),e(gm,aoe),e(aoe,zXe),e(gm,QXe),e(gm,hk),e(hk,WXe),e(gm,HXe),e(y,UXe),e(y,hm),e(hm,noe),e(noe,JXe),e(hm,YXe),e(hm,pk),e(pk,KXe),e(hm,ZXe),e(y,eze),e(y,pm),e(pm,soe),e(soe,oze),e(pm,rze),e(pm,uk),e(uk,tze),e(pm,aze),e(y,nze),e(y,um),e(um,loe),e(loe,sze),e(um,lze),e(um,_k),e(_k,ize),e(um,dze),e(y,cze),e(y,_m),e(_m,ioe),e(ioe,fze),e(_m,mze),e(_m,bk),e(bk,gze),e(_m,hze),e(y,pze),e(y,bm),e(bm,doe),e(doe,uze),e(bm,_ze),e(bm,vk),e(vk,bze),e(bm,vze),e(y,Fze),e(y,vm),e(vm,coe),e(coe,Tze),e(vm,Mze),e(vm,Fk),e(Fk,Eze),e(vm,Cze),e(y,wze),e(y,Fm),e(Fm,foe),e(foe,Aze),e(Fm,yze),e(Fm,Tk),e(Tk,Lze),e(Fm,xze),e(y,$ze),e(y,Tm),e(Tm,moe),e(moe,kze),e(Tm,Sze),e(Tm,Mk),e(Mk,Rze),e(Tm,Bze),e(y,Pze),e(y,Mm),e(Mm,goe),e(goe,Ize),e(Mm,qze),e(Mm,Ek),e(Ek,Nze),e(Mm,jze),e(y,Dze),e(y,Em),e(Em,hoe),e(hoe,Gze),e(Em,Oze),e(Em,Ck),e(Ck,Vze),e(Em,Xze),e(y,zze),e(y,Cm),e(Cm,poe),e(poe,Qze),e(Cm,Wze),e(Cm,wk),e(wk,Hze),e(Cm,Uze),e(y,Jze),e(y,wm),e(wm,uoe),e(uoe,Yze),e(wm,Kze),e(wm,Ak),e(Ak,Zze),e(wm,eQe),e(y,oQe),e(y,Am),e(Am,_oe),e(_oe,rQe),e(Am,tQe),e(Am,yk),e(yk,aQe),e(Am,nQe),e(y,sQe),e(y,ym),e(ym,boe),e(boe,lQe),e(ym,iQe),e(ym,Lk),e(Lk,dQe),e(ym,cQe),e(y,fQe),e(y,Lm),e(Lm,voe),e(voe,mQe),e(Lm,gQe),e(Lm,xk),e(xk,hQe),e(Lm,pQe),e(y,uQe),e(y,xm),e(xm,Foe),e(Foe,_Qe),e(xm,bQe),e(xm,$k),e($k,vQe),e(xm,FQe),e(y,TQe),e(y,$m),e($m,Toe),e(Toe,MQe),e($m,EQe),e($m,kk),e(kk,CQe),e($m,wQe),e(y,AQe),e(y,km),e(km,Moe),e(Moe,yQe),e(km,LQe),e(km,Sk),e(Sk,xQe),e(km,$Qe),e(y,kQe),e(y,Sm),e(Sm,Eoe),e(Eoe,SQe),e(Sm,RQe),e(Sm,Rk),e(Rk,BQe),e(Sm,PQe),e(y,IQe),e(y,Rm),e(Rm,Coe),e(Coe,qQe),e(Rm,NQe),e(Rm,Bk),e(Bk,jQe),e(Rm,DQe),e(y,GQe),e(y,Bm),e(Bm,woe),e(woe,OQe),e(Bm,VQe),e(Bm,Pk),e(Pk,XQe),e(Bm,zQe),e(y,QQe),e(y,Pm),e(Pm,Aoe),e(Aoe,WQe),e(Pm,HQe),e(Pm,Ik),e(Ik,UQe),e(Pm,JQe),e(y,YQe),e(y,Im),e(Im,yoe),e(yoe,KQe),e(Im,ZQe),e(Im,qk),e(qk,eWe),e(Im,oWe),e(y,rWe),e(y,qm),e(qm,Loe),e(Loe,tWe),e(qm,aWe),e(qm,Nk),e(Nk,nWe),e(qm,sWe),e(y,lWe),e(y,Nm),e(Nm,xoe),e(xoe,iWe),e(Nm,dWe),e(Nm,jk),e(jk,cWe),e(Nm,fWe),e(y,mWe),e(y,jm),e(jm,$oe),e($oe,gWe),e(jm,hWe),e(jm,Dk),e(Dk,pWe),e(jm,uWe),e(y,_We),e(y,Dm),e(Dm,koe),e(koe,bWe),e(Dm,vWe),e(Dm,Gk),e(Gk,FWe),e(Dm,TWe),e(y,MWe),e(y,Gm),e(Gm,Soe),e(Soe,EWe),e(Gm,CWe),e(Gm,Ok),e(Ok,wWe),e(Gm,AWe),e(y,yWe),e(y,Om),e(Om,Roe),e(Roe,LWe),e(Om,xWe),e(Om,Vk),e(Vk,$We),e(Om,kWe),e(y,SWe),e(y,Vm),e(Vm,Boe),e(Boe,RWe),e(Vm,BWe),e(Vm,Xk),e(Xk,PWe),e(Vm,IWe),e(y,qWe),e(y,Xm),e(Xm,Poe),e(Poe,NWe),e(Xm,jWe),e(Xm,zk),e(zk,DWe),e(Xm,GWe),e(y,OWe),e(y,zm),e(zm,Ioe),e(Ioe,VWe),e(zm,XWe),e(zm,Qk),e(Qk,zWe),e(zm,QWe),e(y,WWe),e(y,Qm),e(Qm,qoe),e(qoe,HWe),e(Qm,UWe),e(Qm,Wk),e(Wk,JWe),e(Qm,YWe),e(y,KWe),e(y,Wm),e(Wm,Noe),e(Noe,ZWe),e(Wm,eHe),e(Wm,Hk),e(Hk,oHe),e(Wm,rHe),e(y,tHe),e(y,Hm),e(Hm,joe),e(joe,aHe),e(Hm,nHe),e(Hm,Uk),e(Uk,sHe),e(Hm,lHe),e(y,iHe),e(y,Um),e(Um,Doe),e(Doe,dHe),e(Um,cHe),e(Um,Jk),e(Jk,fHe),e(Um,mHe),e(y,gHe),e(y,Jm),e(Jm,Goe),e(Goe,hHe),e(Jm,pHe),e(Jm,Yk),e(Yk,uHe),e(Jm,_He),e(y,bHe),e(y,Ym),e(Ym,Ooe),e(Ooe,vHe),e(Ym,FHe),e(Ym,Kk),e(Kk,THe),e(Ym,MHe),e(y,EHe),e(y,Km),e(Km,Voe),e(Voe,CHe),e(Km,wHe),e(Km,Zk),e(Zk,AHe),e(Km,yHe),e(y,LHe),e(y,Zm),e(Zm,Xoe),e(Xoe,xHe),e(Zm,$He),e(Zm,eS),e(eS,kHe),e(Zm,SHe),e(y,RHe),e(y,eg),e(eg,zoe),e(zoe,BHe),e(eg,PHe),e(eg,oS),e(oS,IHe),e(eg,qHe),e(y,NHe),e(y,og),e(og,Qoe),e(Qoe,jHe),e(og,DHe),e(og,rS),e(rS,GHe),e(og,OHe),e(y,VHe),e(y,rg),e(rg,Woe),e(Woe,XHe),e(rg,zHe),e(rg,tS),e(tS,QHe),e(rg,WHe),e(y,HHe),e(y,tg),e(tg,Hoe),e(Hoe,UHe),e(tg,JHe),e(tg,aS),e(aS,YHe),e(tg,KHe),e(y,ZHe),e(y,ag),e(ag,Uoe),e(Uoe,eUe),e(ag,oUe),e(ag,nS),e(nS,rUe),e(ag,tUe),e(y,aUe),e(y,ng),e(ng,Joe),e(Joe,nUe),e(ng,sUe),e(ng,sS),e(sS,lUe),e(ng,iUe),e(y,dUe),e(y,sg),e(sg,Yoe),e(Yoe,cUe),e(sg,fUe),e(sg,lS),e(lS,mUe),e(sg,gUe),e(y,hUe),e(y,lg),e(lg,Koe),e(Koe,pUe),e(lg,uUe),e(lg,iS),e(iS,_Ue),e(lg,bUe),e(y,vUe),e(y,ig),e(ig,Zoe),e(Zoe,FUe),e(ig,TUe),e(ig,dS),e(dS,MUe),e(ig,EUe),e(y,CUe),e(y,dg),e(dg,ere),e(ere,wUe),e(dg,AUe),e(dg,cS),e(cS,yUe),e(dg,LUe),e(y,xUe),e(y,cg),e(cg,ore),e(ore,$Ue),e(cg,kUe),e(cg,fS),e(fS,SUe),e(cg,RUe),e(y,BUe),e(y,fg),e(fg,rre),e(rre,PUe),e(fg,IUe),e(fg,mS),e(mS,qUe),e(fg,NUe),e(y,jUe),e(y,mg),e(mg,tre),e(tre,DUe),e(mg,GUe),e(mg,gS),e(gS,OUe),e(mg,VUe),e(y,XUe),e(y,gg),e(gg,are),e(are,zUe),e(gg,QUe),e(gg,hS),e(hS,WUe),e(gg,HUe),e(y,UUe),e(y,hg),e(hg,nre),e(nre,JUe),e(hg,YUe),e(hg,pS),e(pS,KUe),e(hg,ZUe),e(y,eJe),e(y,pg),e(pg,sre),e(sre,oJe),e(pg,rJe),e(pg,uS),e(uS,tJe),e(pg,aJe),e(Er,nJe),M(ug,Er,null),e(Co,sJe),e(Co,_g),M(tA,_g,null),e(_g,lJe),e(_g,lre),e(lre,iJe),b(f,WPe,_),b(f,bi,_),e(bi,bg),e(bg,ire),M(aA,ire,null),e(bi,dJe),e(bi,dre),e(dre,cJe),b(f,HPe,_),b(f,wo,_),M(nA,wo,null),e(wo,fJe),e(wo,sA),e(sA,mJe),e(sA,_S),e(_S,gJe),e(sA,hJe),e(wo,pJe),e(wo,lA),e(lA,uJe),e(lA,cre),e(cre,_Je),e(lA,bJe),e(wo,vJe),e(wo,Cr),M(iA,Cr,null),e(Cr,FJe),e(Cr,fre),e(fre,TJe),e(Cr,MJe),e(Cr,Ca),e(Ca,EJe),e(Ca,mre),e(mre,CJe),e(Ca,wJe),e(Ca,gre),e(gre,AJe),e(Ca,yJe),e(Ca,hre),e(hre,LJe),e(Ca,xJe),e(Cr,$Je),e(Cr,k),e(k,kn),e(kn,pre),e(pre,kJe),e(kn,SJe),e(kn,bS),e(bS,RJe),e(kn,BJe),e(kn,vS),e(vS,PJe),e(kn,IJe),e(k,qJe),e(k,Sn),e(Sn,ure),e(ure,NJe),e(Sn,jJe),e(Sn,FS),e(FS,DJe),e(Sn,GJe),e(Sn,TS),e(TS,OJe),e(Sn,VJe),e(k,XJe),e(k,Rn),e(Rn,_re),e(_re,zJe),e(Rn,QJe),e(Rn,MS),e(MS,WJe),e(Rn,HJe),e(Rn,ES),e(ES,UJe),e(Rn,JJe),e(k,YJe),e(k,vg),e(vg,bre),e(bre,KJe),e(vg,ZJe),e(vg,CS),e(CS,eYe),e(vg,oYe),e(k,rYe),e(k,Bn),e(Bn,vre),e(vre,tYe),e(Bn,aYe),e(Bn,wS),e(wS,nYe),e(Bn,sYe),e(Bn,AS),e(AS,lYe),e(Bn,iYe),e(k,dYe),e(k,Fg),e(Fg,Fre),e(Fre,cYe),e(Fg,fYe),e(Fg,yS),e(yS,mYe),e(Fg,gYe),e(k,hYe),e(k,Tg),e(Tg,Tre),e(Tre,pYe),e(Tg,uYe),e(Tg,LS),e(LS,_Ye),e(Tg,bYe),e(k,vYe),e(k,Mg),e(Mg,Mre),e(Mre,FYe),e(Mg,TYe),e(Mg,xS),e(xS,MYe),e(Mg,EYe),e(k,CYe),e(k,Pn),e(Pn,Ere),e(Ere,wYe),e(Pn,AYe),e(Pn,$S),e($S,yYe),e(Pn,LYe),e(Pn,kS),e(kS,xYe),e(Pn,$Ye),e(k,kYe),e(k,In),e(In,Cre),e(Cre,SYe),e(In,RYe),e(In,SS),e(SS,BYe),e(In,PYe),e(In,RS),e(RS,IYe),e(In,qYe),e(k,NYe),e(k,qn),e(qn,wre),e(wre,jYe),e(qn,DYe),e(qn,BS),e(BS,GYe),e(qn,OYe),e(qn,PS),e(PS,VYe),e(qn,XYe),e(k,zYe),e(k,Eg),e(Eg,Are),e(Are,QYe),e(Eg,WYe),e(Eg,IS),e(IS,HYe),e(Eg,UYe),e(k,JYe),e(k,Cg),e(Cg,yre),e(yre,YYe),e(Cg,KYe),e(Cg,qS),e(qS,ZYe),e(Cg,eKe),e(k,oKe),e(k,Nn),e(Nn,Lre),e(Lre,rKe),e(Nn,tKe),e(Nn,NS),e(NS,aKe),e(Nn,nKe),e(Nn,jS),e(jS,sKe),e(Nn,lKe),e(k,iKe),e(k,wg),e(wg,xre),e(xre,dKe),e(wg,cKe),e(wg,DS),e(DS,fKe),e(wg,mKe),e(k,gKe),e(k,jn),e(jn,$re),e($re,hKe),e(jn,pKe),e(jn,GS),e(GS,uKe),e(jn,_Ke),e(jn,OS),e(OS,bKe),e(jn,vKe),e(k,FKe),e(k,Dn),e(Dn,kre),e(kre,TKe),e(Dn,MKe),e(Dn,VS),e(VS,EKe),e(Dn,CKe),e(Dn,XS),e(XS,wKe),e(Dn,AKe),e(k,yKe),e(k,Gn),e(Gn,Sre),e(Sre,LKe),e(Gn,xKe),e(Gn,zS),e(zS,$Ke),e(Gn,kKe),e(Gn,QS),e(QS,SKe),e(Gn,RKe),e(k,BKe),e(k,Ag),e(Ag,Rre),e(Rre,PKe),e(Ag,IKe),e(Ag,WS),e(WS,qKe),e(Ag,NKe),e(k,jKe),e(k,On),e(On,Bre),e(Bre,DKe),e(On,GKe),e(On,HS),e(HS,OKe),e(On,VKe),e(On,US),e(US,XKe),e(On,zKe),e(k,QKe),e(k,Vn),e(Vn,Pre),e(Pre,WKe),e(Vn,HKe),e(Vn,JS),e(JS,UKe),e(Vn,JKe),e(Vn,YS),e(YS,YKe),e(Vn,KKe),e(k,ZKe),e(k,Xn),e(Xn,Ire),e(Ire,eZe),e(Xn,oZe),e(Xn,KS),e(KS,rZe),e(Xn,tZe),e(Xn,ZS),e(ZS,aZe),e(Xn,nZe),e(k,sZe),e(k,zn),e(zn,qre),e(qre,lZe),e(zn,iZe),e(zn,eR),e(eR,dZe),e(zn,cZe),e(zn,oR),e(oR,fZe),e(zn,mZe),e(k,gZe),e(k,Qn),e(Qn,Nre),e(Nre,hZe),e(Qn,pZe),e(Qn,rR),e(rR,uZe),e(Qn,_Ze),e(Qn,tR),e(tR,bZe),e(Qn,vZe),e(k,FZe),e(k,Wn),e(Wn,jre),e(jre,TZe),e(Wn,MZe),e(Wn,aR),e(aR,EZe),e(Wn,CZe),e(Wn,nR),e(nR,wZe),e(Wn,AZe),e(k,yZe),e(k,yg),e(yg,Dre),e(Dre,LZe),e(yg,xZe),e(yg,sR),e(sR,$Ze),e(yg,kZe),e(k,SZe),e(k,Hn),e(Hn,Gre),e(Gre,RZe),e(Hn,BZe),e(Hn,lR),e(lR,PZe),e(Hn,IZe),e(Hn,iR),e(iR,qZe),e(Hn,NZe),e(k,jZe),e(k,Lg),e(Lg,Ore),e(Ore,DZe),e(Lg,GZe),e(Lg,dR),e(dR,OZe),e(Lg,VZe),e(k,XZe),e(k,Un),e(Un,Vre),e(Vre,zZe),e(Un,QZe),e(Un,cR),e(cR,WZe),e(Un,HZe),e(Un,fR),e(fR,UZe),e(Un,JZe),e(k,YZe),e(k,Jn),e(Jn,Xre),e(Xre,KZe),e(Jn,ZZe),e(Jn,mR),e(mR,eeo),e(Jn,oeo),e(Jn,gR),e(gR,reo),e(Jn,teo),e(k,aeo),e(k,Yn),e(Yn,zre),e(zre,neo),e(Yn,seo),e(Yn,hR),e(hR,leo),e(Yn,ieo),e(Yn,pR),e(pR,deo),e(Yn,ceo),e(k,feo),e(k,Kn),e(Kn,Qre),e(Qre,meo),e(Kn,geo),e(Kn,uR),e(uR,heo),e(Kn,peo),e(Kn,_R),e(_R,ueo),e(Kn,_eo),e(k,beo),e(k,Zn),e(Zn,Wre),e(Wre,veo),e(Zn,Feo),e(Zn,bR),e(bR,Teo),e(Zn,Meo),e(Zn,vR),e(vR,Eeo),e(Zn,Ceo),e(k,weo),e(k,xg),e(xg,Hre),e(Hre,Aeo),e(xg,yeo),e(xg,FR),e(FR,Leo),e(xg,xeo),e(k,$eo),e(k,es),e(es,Ure),e(Ure,keo),e(es,Seo),e(es,TR),e(TR,Reo),e(es,Beo),e(es,MR),e(MR,Peo),e(es,Ieo),e(k,qeo),e(k,os),e(os,Jre),e(Jre,Neo),e(os,jeo),e(os,ER),e(ER,Deo),e(os,Geo),e(os,CR),e(CR,Oeo),e(os,Veo),e(k,Xeo),e(k,rs),e(rs,Yre),e(Yre,zeo),e(rs,Qeo),e(rs,wR),e(wR,Weo),e(rs,Heo),e(rs,AR),e(AR,Ueo),e(rs,Jeo),e(k,Yeo),e(k,ts),e(ts,Kre),e(Kre,Keo),e(ts,Zeo),e(ts,yR),e(yR,eoo),e(ts,ooo),e(ts,LR),e(LR,roo),e(ts,too),e(k,aoo),e(k,as),e(as,Zre),e(Zre,noo),e(as,soo),e(as,xR),e(xR,loo),e(as,ioo),e(as,$R),e($R,doo),e(as,coo),e(k,foo),e(k,ns),e(ns,ete),e(ete,moo),e(ns,goo),e(ns,kR),e(kR,hoo),e(ns,poo),e(ns,SR),e(SR,uoo),e(ns,_oo),e(k,boo),e(k,ss),e(ss,ote),e(ote,voo),e(ss,Foo),e(ss,RR),e(RR,Too),e(ss,Moo),e(ss,BR),e(BR,Eoo),e(ss,Coo),e(k,woo),e(k,$g),e($g,rte),e(rte,Aoo),e($g,yoo),e($g,PR),e(PR,Loo),e($g,xoo),e(k,$oo),e(k,ls),e(ls,tte),e(tte,koo),e(ls,Soo),e(ls,IR),e(IR,Roo),e(ls,Boo),e(ls,qR),e(qR,Poo),e(ls,Ioo),e(k,qoo),e(k,kg),e(kg,ate),e(ate,Noo),e(kg,joo),e(kg,NR),e(NR,Doo),e(kg,Goo),e(k,Ooo),e(k,Sg),e(Sg,nte),e(nte,Voo),e(Sg,Xoo),e(Sg,jR),e(jR,zoo),e(Sg,Qoo),e(k,Woo),e(k,is),e(is,ste),e(ste,Hoo),e(is,Uoo),e(is,DR),e(DR,Joo),e(is,Yoo),e(is,GR),e(GR,Koo),e(is,Zoo),e(k,ero),e(k,ds),e(ds,lte),e(lte,oro),e(ds,rro),e(ds,OR),e(OR,tro),e(ds,aro),e(ds,VR),e(VR,nro),e(ds,sro),e(k,lro),e(k,cs),e(cs,ite),e(ite,iro),e(cs,dro),e(cs,XR),e(XR,cro),e(cs,fro),e(cs,zR),e(zR,mro),e(cs,gro),e(k,hro),e(k,Rg),e(Rg,dte),e(dte,pro),e(Rg,uro),e(Rg,QR),e(QR,_ro),e(Rg,bro),e(k,vro),e(k,fs),e(fs,cte),e(cte,Fro),e(fs,Tro),e(fs,WR),e(WR,Mro),e(fs,Ero),e(fs,HR),e(HR,Cro),e(fs,wro),e(k,Aro),e(k,ms),e(ms,fte),e(fte,yro),e(ms,Lro),e(ms,UR),e(UR,xro),e(ms,$ro),e(ms,JR),e(JR,kro),e(ms,Sro),e(k,Rro),e(k,gs),e(gs,mte),e(mte,Bro),e(gs,Pro),e(gs,YR),e(YR,Iro),e(gs,qro),e(gs,KR),e(KR,Nro),e(gs,jro),e(k,Dro),e(k,hs),e(hs,gte),e(gte,Gro),e(hs,Oro),e(hs,ZR),e(ZR,Vro),e(hs,Xro),e(hs,eB),e(eB,zro),e(hs,Qro),e(k,Wro),e(k,ps),e(ps,hte),e(hte,Hro),e(ps,Uro),e(ps,oB),e(oB,Jro),e(ps,Yro),e(ps,rB),e(rB,Kro),e(ps,Zro),e(k,eto),e(k,us),e(us,pte),e(pte,oto),e(us,rto),e(us,tB),e(tB,tto),e(us,ato),e(us,aB),e(aB,nto),e(us,sto),e(k,lto),e(k,Bg),e(Bg,ute),e(ute,ito),e(Bg,dto),e(Bg,nB),e(nB,cto),e(Bg,fto),e(k,mto),e(k,Pg),e(Pg,_te),e(_te,gto),e(Pg,hto),e(Pg,sB),e(sB,pto),e(Pg,uto),e(k,_to),e(k,Ig),e(Ig,bte),e(bte,bto),e(Ig,vto),e(Ig,lB),e(lB,Fto),e(Ig,Tto),e(k,Mto),e(k,qg),e(qg,vte),e(vte,Eto),e(qg,Cto),e(qg,iB),e(iB,wto),e(qg,Ato),e(k,yto),e(k,_s),e(_s,Fte),e(Fte,Lto),e(_s,xto),e(_s,dB),e(dB,$to),e(_s,kto),e(_s,cB),e(cB,Sto),e(_s,Rto),e(k,Bto),e(k,Ng),e(Ng,Tte),e(Tte,Pto),e(Ng,Ito),e(Ng,fB),e(fB,qto),e(Ng,Nto),e(k,jto),e(k,bs),e(bs,Mte),e(Mte,Dto),e(bs,Gto),e(bs,mB),e(mB,Oto),e(bs,Vto),e(bs,gB),e(gB,Xto),e(bs,zto),e(k,Qto),e(k,vs),e(vs,Ete),e(Ete,Wto),e(vs,Hto),e(vs,hB),e(hB,Uto),e(vs,Jto),e(vs,pB),e(pB,Yto),e(vs,Kto),e(k,Zto),e(k,Fs),e(Fs,Cte),e(Cte,eao),e(Fs,oao),e(Fs,uB),e(uB,rao),e(Fs,tao),e(Fs,_B),e(_B,aao),e(Fs,nao),e(k,sao),e(k,Ts),e(Ts,wte),e(wte,lao),e(Ts,iao),e(Ts,bB),e(bB,dao),e(Ts,cao),e(Ts,vB),e(vB,fao),e(Ts,mao),e(k,gao),e(k,Ms),e(Ms,Ate),e(Ate,hao),e(Ms,pao),e(Ms,FB),e(FB,uao),e(Ms,_ao),e(Ms,TB),e(TB,bao),e(Ms,vao),e(k,Fao),e(k,Es),e(Es,yte),e(yte,Tao),e(Es,Mao),e(Es,MB),e(MB,Eao),e(Es,Cao),e(Es,EB),e(EB,wao),e(Es,Aao),e(k,yao),e(k,jg),e(jg,Lte),e(Lte,Lao),e(jg,xao),e(jg,CB),e(CB,$ao),e(jg,kao),e(k,Sao),e(k,Dg),e(Dg,xte),e(xte,Rao),e(Dg,Bao),e(Dg,wB),e(wB,Pao),e(Dg,Iao),e(k,qao),e(k,Cs),e(Cs,$te),e($te,Nao),e(Cs,jao),e(Cs,AB),e(AB,Dao),e(Cs,Gao),e(Cs,yB),e(yB,Oao),e(Cs,Vao),e(k,Xao),e(k,ws),e(ws,kte),e(kte,zao),e(ws,Qao),e(ws,LB),e(LB,Wao),e(ws,Hao),e(ws,xB),e(xB,Uao),e(ws,Jao),e(k,Yao),e(k,As),e(As,Ste),e(Ste,Kao),e(As,Zao),e(As,$B),e($B,eno),e(As,ono),e(As,kB),e(kB,rno),e(As,tno),e(k,ano),e(k,Gg),e(Gg,Rte),e(Rte,nno),e(Gg,sno),e(Gg,SB),e(SB,lno),e(Gg,ino),e(k,dno),e(k,Og),e(Og,Bte),e(Bte,cno),e(Og,fno),e(Og,RB),e(RB,mno),e(Og,gno),e(k,hno),e(k,Vg),e(Vg,Pte),e(Pte,pno),e(Vg,uno),e(Vg,BB),e(BB,_no),e(Vg,bno),e(k,vno),e(k,ys),e(ys,Ite),e(Ite,Fno),e(ys,Tno),e(ys,PB),e(PB,Mno),e(ys,Eno),e(ys,IB),e(IB,Cno),e(ys,wno),e(k,Ano),e(k,Xg),e(Xg,qte),e(qte,yno),e(Xg,Lno),e(Xg,qB),e(qB,xno),e(Xg,$no),e(k,kno),e(k,zg),e(zg,Nte),e(Nte,Sno),e(zg,Rno),e(zg,NB),e(NB,Bno),e(zg,Pno),e(k,Ino),e(k,Ls),e(Ls,jte),e(jte,qno),e(Ls,Nno),e(Ls,jB),e(jB,jno),e(Ls,Dno),e(Ls,DB),e(DB,Gno),e(Ls,Ono),e(k,Vno),e(k,Qg),e(Qg,Dte),e(Dte,Xno),e(Qg,zno),e(Qg,GB),e(GB,Qno),e(Qg,Wno),e(k,Hno),e(k,Wg),e(Wg,Gte),e(Gte,Uno),e(Wg,Jno),e(Wg,OB),e(OB,Yno),e(Wg,Kno),e(k,Zno),e(k,xs),e(xs,Ote),e(Ote,eso),e(xs,oso),e(xs,VB),e(VB,rso),e(xs,tso),e(xs,XB),e(XB,aso),e(xs,nso),e(k,sso),e(k,$s),e($s,Vte),e(Vte,lso),e($s,iso),e($s,zB),e(zB,dso),e($s,cso),e($s,QB),e(QB,fso),e($s,mso),e(k,gso),e(k,ks),e(ks,Xte),e(Xte,hso),e(ks,pso),e(ks,WB),e(WB,uso),e(ks,_so),e(ks,HB),e(HB,bso),e(ks,vso),e(k,Fso),e(k,Ss),e(Ss,zte),e(zte,Tso),e(Ss,Mso),e(Ss,UB),e(UB,Eso),e(Ss,Cso),e(Ss,JB),e(JB,wso),e(Ss,Aso),e(Cr,yso),M(Hg,Cr,null),e(wo,Lso),e(wo,Ug),M(dA,Ug,null),e(Ug,xso),e(Ug,Qte),e(Qte,$so),b(f,UPe,_),b(f,vi,_),e(vi,Jg),e(Jg,Wte),M(cA,Wte,null),e(vi,kso),e(vi,Hte),e(Hte,Sso),b(f,JPe,_),b(f,Ao,_),M(fA,Ao,null),e(Ao,Rso),e(Ao,mA),e(mA,Bso),e(mA,YB),e(YB,Pso),e(mA,Iso),e(Ao,qso),e(Ao,gA),e(gA,Nso),e(gA,Ute),e(Ute,jso),e(gA,Dso),e(Ao,Gso),e(Ao,Qe),M(hA,Qe,null),e(Qe,Oso),e(Qe,Jte),e(Jte,Vso),e(Qe,Xso),e(Qe,wa),e(wa,zso),e(wa,Yte),e(Yte,Qso),e(wa,Wso),e(wa,Kte),e(Kte,Hso),e(wa,Uso),e(wa,Zte),e(Zte,Jso),e(wa,Yso),e(Qe,Kso),e(Qe,oe),e(oe,Yg),e(Yg,eae),e(eae,Zso),e(Yg,elo),e(Yg,KB),e(KB,olo),e(Yg,rlo),e(oe,tlo),e(oe,Kg),e(Kg,oae),e(oae,alo),e(Kg,nlo),e(Kg,ZB),e(ZB,slo),e(Kg,llo),e(oe,ilo),e(oe,Zg),e(Zg,rae),e(rae,dlo),e(Zg,clo),e(Zg,eP),e(eP,flo),e(Zg,mlo),e(oe,glo),e(oe,eh),e(eh,tae),e(tae,hlo),e(eh,plo),e(eh,oP),e(oP,ulo),e(eh,_lo),e(oe,blo),e(oe,oh),e(oh,aae),e(aae,vlo),e(oh,Flo),e(oh,rP),e(rP,Tlo),e(oh,Mlo),e(oe,Elo),e(oe,rh),e(rh,nae),e(nae,Clo),e(rh,wlo),e(rh,tP),e(tP,Alo),e(rh,ylo),e(oe,Llo),e(oe,th),e(th,sae),e(sae,xlo),e(th,$lo),e(th,aP),e(aP,klo),e(th,Slo),e(oe,Rlo),e(oe,ah),e(ah,lae),e(lae,Blo),e(ah,Plo),e(ah,nP),e(nP,Ilo),e(ah,qlo),e(oe,Nlo),e(oe,nh),e(nh,iae),e(iae,jlo),e(nh,Dlo),e(nh,sP),e(sP,Glo),e(nh,Olo),e(oe,Vlo),e(oe,sh),e(sh,dae),e(dae,Xlo),e(sh,zlo),e(sh,lP),e(lP,Qlo),e(sh,Wlo),e(oe,Hlo),e(oe,lh),e(lh,cae),e(cae,Ulo),e(lh,Jlo),e(lh,iP),e(iP,Ylo),e(lh,Klo),e(oe,Zlo),e(oe,ih),e(ih,fae),e(fae,eio),e(ih,oio),e(ih,dP),e(dP,rio),e(ih,tio),e(oe,aio),e(oe,dh),e(dh,mae),e(mae,nio),e(dh,sio),e(dh,cP),e(cP,lio),e(dh,iio),e(oe,dio),e(oe,ch),e(ch,gae),e(gae,cio),e(ch,fio),e(ch,fP),e(fP,mio),e(ch,gio),e(oe,hio),e(oe,fh),e(fh,hae),e(hae,pio),e(fh,uio),e(fh,mP),e(mP,_io),e(fh,bio),e(oe,vio),e(oe,mh),e(mh,pae),e(pae,Fio),e(mh,Tio),e(mh,gP),e(gP,Mio),e(mh,Eio),e(oe,Cio),e(oe,gh),e(gh,uae),e(uae,wio),e(gh,Aio),e(gh,hP),e(hP,yio),e(gh,Lio),e(oe,xio),e(oe,hh),e(hh,_ae),e(_ae,$io),e(hh,kio),e(hh,pP),e(pP,Sio),e(hh,Rio),e(oe,Bio),e(oe,ph),e(ph,bae),e(bae,Pio),e(ph,Iio),e(ph,uP),e(uP,qio),e(ph,Nio),e(oe,jio),e(oe,uh),e(uh,vae),e(vae,Dio),e(uh,Gio),e(uh,_P),e(_P,Oio),e(uh,Vio),e(oe,Xio),e(oe,_h),e(_h,Fae),e(Fae,zio),e(_h,Qio),e(_h,bP),e(bP,Wio),e(_h,Hio),e(oe,Uio),e(oe,bh),e(bh,Tae),e(Tae,Jio),e(bh,Yio),e(bh,vP),e(vP,Kio),e(bh,Zio),e(oe,edo),e(oe,vh),e(vh,Mae),e(Mae,odo),e(vh,rdo),e(vh,FP),e(FP,tdo),e(vh,ado),e(oe,ndo),e(oe,Fh),e(Fh,Eae),e(Eae,sdo),e(Fh,ldo),e(Fh,TP),e(TP,ido),e(Fh,ddo),e(oe,cdo),e(oe,Th),e(Th,Cae),e(Cae,fdo),e(Th,mdo),e(Th,MP),e(MP,gdo),e(Th,hdo),e(Qe,pdo),M(Mh,Qe,null),e(Qe,udo),M(Eh,Qe,null),e(Ao,_do),e(Ao,Ch),M(pA,Ch,null),e(Ch,bdo),e(Ch,wae),e(wae,vdo),b(f,YPe,_),b(f,Fi,_),e(Fi,wh),e(wh,Aae),M(uA,Aae,null),e(Fi,Fdo),e(Fi,yae),e(yae,Tdo),b(f,KPe,_),b(f,yo,_),M(_A,yo,null),e(yo,Mdo),e(yo,bA),e(bA,Edo),e(bA,EP),e(EP,Cdo),e(bA,wdo),e(yo,Ado),e(yo,vA),e(vA,ydo),e(vA,Lae),e(Lae,Ldo),e(vA,xdo),e(yo,$do),e(yo,We),M(FA,We,null),e(We,kdo),e(We,xae),e(xae,Sdo),e(We,Rdo),e(We,Ti),e(Ti,Bdo),e(Ti,$ae),e($ae,Pdo),e(Ti,Ido),e(Ti,kae),e(kae,qdo),e(Ti,Ndo),e(We,jdo),e(We,be),e(be,Ah),e(Ah,Sae),e(Sae,Ddo),e(Ah,Gdo),e(Ah,CP),e(CP,Odo),e(Ah,Vdo),e(be,Xdo),e(be,yh),e(yh,Rae),e(Rae,zdo),e(yh,Qdo),e(yh,wP),e(wP,Wdo),e(yh,Hdo),e(be,Udo),e(be,Lh),e(Lh,Bae),e(Bae,Jdo),e(Lh,Ydo),e(Lh,AP),e(AP,Kdo),e(Lh,Zdo),e(be,eco),e(be,xh),e(xh,Pae),e(Pae,oco),e(xh,rco),e(xh,yP),e(yP,tco),e(xh,aco),e(be,nco),e(be,$h),e($h,Iae),e(Iae,sco),e($h,lco),e($h,LP),e(LP,ico),e($h,dco),e(be,cco),e(be,kh),e(kh,qae),e(qae,fco),e(kh,mco),e(kh,xP),e(xP,gco),e(kh,hco),e(be,pco),e(be,Sh),e(Sh,Nae),e(Nae,uco),e(Sh,_co),e(Sh,$P),e($P,bco),e(Sh,vco),e(be,Fco),e(be,Rh),e(Rh,jae),e(jae,Tco),e(Rh,Mco),e(Rh,kP),e(kP,Eco),e(Rh,Cco),e(be,wco),e(be,Bh),e(Bh,Dae),e(Dae,Aco),e(Bh,yco),e(Bh,SP),e(SP,Lco),e(Bh,xco),e(be,$co),e(be,Ph),e(Ph,Gae),e(Gae,kco),e(Ph,Sco),e(Ph,RP),e(RP,Rco),e(Ph,Bco),e(be,Pco),e(be,Ih),e(Ih,Oae),e(Oae,Ico),e(Ih,qco),e(Ih,BP),e(BP,Nco),e(Ih,jco),e(be,Dco),e(be,qh),e(qh,Vae),e(Vae,Gco),e(qh,Oco),e(qh,PP),e(PP,Vco),e(qh,Xco),e(be,zco),e(be,Nh),e(Nh,Xae),e(Xae,Qco),e(Nh,Wco),e(Nh,IP),e(IP,Hco),e(Nh,Uco),e(be,Jco),e(be,jh),e(jh,zae),e(zae,Yco),e(jh,Kco),e(jh,qP),e(qP,Zco),e(jh,efo),e(be,ofo),e(be,Dh),e(Dh,Qae),e(Qae,rfo),e(Dh,tfo),e(Dh,NP),e(NP,afo),e(Dh,nfo),e(We,sfo),M(Gh,We,null),e(We,lfo),M(Oh,We,null),e(yo,ifo),e(yo,Vh),M(TA,Vh,null),e(Vh,dfo),e(Vh,Wae),e(Wae,cfo),b(f,ZPe,_),b(f,Mi,_),e(Mi,Xh),e(Xh,Hae),M(MA,Hae,null),e(Mi,ffo),e(Mi,Uae),e(Uae,mfo),b(f,eIe,_),b(f,Lo,_),M(EA,Lo,null),e(Lo,gfo),e(Lo,Ei),e(Ei,hfo),e(Ei,jP),e(jP,pfo),e(Ei,ufo),e(Ei,DP),e(DP,_fo),e(Ei,bfo),e(Lo,vfo),e(Lo,CA),e(CA,Ffo),e(CA,Jae),e(Jae,Tfo),e(CA,Mfo),e(Lo,Efo),e(Lo,ot),M(wA,ot,null),e(ot,Cfo),e(ot,Yae),e(Yae,wfo),e(ot,Afo),e(ot,Ci),e(Ci,yfo),e(Ci,Kae),e(Kae,Lfo),e(Ci,xfo),e(Ci,GP),e(GP,$fo),e(Ci,kfo),e(ot,Sfo),M(zh,ot,null),e(Lo,Rfo),e(Lo,He),M(AA,He,null),e(He,Bfo),e(He,Zae),e(Zae,Pfo),e(He,Ifo),e(He,Aa),e(Aa,qfo),e(Aa,ene),e(ene,Nfo),e(Aa,jfo),e(Aa,one),e(one,Dfo),e(Aa,Gfo),e(Aa,rne),e(rne,Ofo),e(Aa,Vfo),e(He,Xfo),e(He,x),e(x,Qh),e(Qh,tne),e(tne,zfo),e(Qh,Qfo),e(Qh,OP),e(OP,Wfo),e(Qh,Hfo),e(x,Ufo),e(x,Wh),e(Wh,ane),e(ane,Jfo),e(Wh,Yfo),e(Wh,VP),e(VP,Kfo),e(Wh,Zfo),e(x,emo),e(x,Hh),e(Hh,nne),e(nne,omo),e(Hh,rmo),e(Hh,XP),e(XP,tmo),e(Hh,amo),e(x,nmo),e(x,Uh),e(Uh,sne),e(sne,smo),e(Uh,lmo),e(Uh,zP),e(zP,imo),e(Uh,dmo),e(x,cmo),e(x,Jh),e(Jh,lne),e(lne,fmo),e(Jh,mmo),e(Jh,QP),e(QP,gmo),e(Jh,hmo),e(x,pmo),e(x,Yh),e(Yh,ine),e(ine,umo),e(Yh,_mo),e(Yh,WP),e(WP,bmo),e(Yh,vmo),e(x,Fmo),e(x,Kh),e(Kh,dne),e(dne,Tmo),e(Kh,Mmo),e(Kh,HP),e(HP,Emo),e(Kh,Cmo),e(x,wmo),e(x,Zh),e(Zh,cne),e(cne,Amo),e(Zh,ymo),e(Zh,UP),e(UP,Lmo),e(Zh,xmo),e(x,$mo),e(x,ep),e(ep,fne),e(fne,kmo),e(ep,Smo),e(ep,JP),e(JP,Rmo),e(ep,Bmo),e(x,Pmo),e(x,op),e(op,mne),e(mne,Imo),e(op,qmo),e(op,YP),e(YP,Nmo),e(op,jmo),e(x,Dmo),e(x,rp),e(rp,gne),e(gne,Gmo),e(rp,Omo),e(rp,KP),e(KP,Vmo),e(rp,Xmo),e(x,zmo),e(x,tp),e(tp,hne),e(hne,Qmo),e(tp,Wmo),e(tp,ZP),e(ZP,Hmo),e(tp,Umo),e(x,Jmo),e(x,ap),e(ap,pne),e(pne,Ymo),e(ap,Kmo),e(ap,eI),e(eI,Zmo),e(ap,ego),e(x,ogo),e(x,np),e(np,une),e(une,rgo),e(np,tgo),e(np,oI),e(oI,ago),e(np,ngo),e(x,sgo),e(x,sp),e(sp,_ne),e(_ne,lgo),e(sp,igo),e(sp,rI),e(rI,dgo),e(sp,cgo),e(x,fgo),e(x,lp),e(lp,bne),e(bne,mgo),e(lp,ggo),e(lp,tI),e(tI,hgo),e(lp,pgo),e(x,ugo),e(x,ip),e(ip,vne),e(vne,_go),e(ip,bgo),e(ip,aI),e(aI,vgo),e(ip,Fgo),e(x,Tgo),e(x,dp),e(dp,Fne),e(Fne,Mgo),e(dp,Ego),e(dp,nI),e(nI,Cgo),e(dp,wgo),e(x,Ago),e(x,cp),e(cp,Tne),e(Tne,ygo),e(cp,Lgo),e(cp,sI),e(sI,xgo),e(cp,$go),e(x,kgo),e(x,fp),e(fp,Mne),e(Mne,Sgo),e(fp,Rgo),e(fp,lI),e(lI,Bgo),e(fp,Pgo),e(x,Igo),e(x,mp),e(mp,Ene),e(Ene,qgo),e(mp,Ngo),e(mp,iI),e(iI,jgo),e(mp,Dgo),e(x,Ggo),e(x,gp),e(gp,Cne),e(Cne,Ogo),e(gp,Vgo),e(gp,dI),e(dI,Xgo),e(gp,zgo),e(x,Qgo),e(x,hp),e(hp,wne),e(wne,Wgo),e(hp,Hgo),e(hp,cI),e(cI,Ugo),e(hp,Jgo),e(x,Ygo),e(x,pp),e(pp,Ane),e(Ane,Kgo),e(pp,Zgo),e(pp,fI),e(fI,eho),e(pp,oho),e(x,rho),e(x,up),e(up,yne),e(yne,tho),e(up,aho),e(up,mI),e(mI,nho),e(up,sho),e(x,lho),e(x,_p),e(_p,Lne),e(Lne,iho),e(_p,dho),e(_p,gI),e(gI,cho),e(_p,fho),e(x,mho),e(x,bp),e(bp,xne),e(xne,gho),e(bp,hho),e(bp,hI),e(hI,pho),e(bp,uho),e(x,_ho),e(x,vp),e(vp,$ne),e($ne,bho),e(vp,vho),e(vp,pI),e(pI,Fho),e(vp,Tho),e(x,Mho),e(x,Fp),e(Fp,kne),e(kne,Eho),e(Fp,Cho),e(Fp,uI),e(uI,who),e(Fp,Aho),e(x,yho),e(x,Tp),e(Tp,Sne),e(Sne,Lho),e(Tp,xho),e(Tp,_I),e(_I,$ho),e(Tp,kho),e(x,Sho),e(x,Rs),e(Rs,Rne),e(Rne,Rho),e(Rs,Bho),e(Rs,bI),e(bI,Pho),e(Rs,Iho),e(Rs,vI),e(vI,qho),e(Rs,Nho),e(x,jho),e(x,Mp),e(Mp,Bne),e(Bne,Dho),e(Mp,Gho),e(Mp,FI),e(FI,Oho),e(Mp,Vho),e(x,Xho),e(x,Ep),e(Ep,Pne),e(Pne,zho),e(Ep,Qho),e(Ep,TI),e(TI,Who),e(Ep,Hho),e(x,Uho),e(x,Cp),e(Cp,Ine),e(Ine,Jho),e(Cp,Yho),e(Cp,MI),e(MI,Kho),e(Cp,Zho),e(x,epo),e(x,wp),e(wp,qne),e(qne,opo),e(wp,rpo),e(wp,EI),e(EI,tpo),e(wp,apo),e(x,npo),e(x,Ap),e(Ap,Nne),e(Nne,spo),e(Ap,lpo),e(Ap,CI),e(CI,ipo),e(Ap,dpo),e(x,cpo),e(x,yp),e(yp,jne),e(jne,fpo),e(yp,mpo),e(yp,wI),e(wI,gpo),e(yp,hpo),e(x,ppo),e(x,Lp),e(Lp,Dne),e(Dne,upo),e(Lp,_po),e(Lp,AI),e(AI,bpo),e(Lp,vpo),e(x,Fpo),e(x,xp),e(xp,Gne),e(Gne,Tpo),e(xp,Mpo),e(xp,yI),e(yI,Epo),e(xp,Cpo),e(x,wpo),e(x,$p),e($p,One),e(One,Apo),e($p,ypo),e($p,LI),e(LI,Lpo),e($p,xpo),e(x,$po),e(x,kp),e(kp,Vne),e(Vne,kpo),e(kp,Spo),e(kp,xI),e(xI,Rpo),e(kp,Bpo),e(x,Ppo),e(x,Sp),e(Sp,Xne),e(Xne,Ipo),e(Sp,qpo),e(Sp,$I),e($I,Npo),e(Sp,jpo),e(x,Dpo),e(x,Rp),e(Rp,zne),e(zne,Gpo),e(Rp,Opo),e(Rp,kI),e(kI,Vpo),e(Rp,Xpo),e(x,zpo),e(x,Bp),e(Bp,Qne),e(Qne,Qpo),e(Bp,Wpo),e(Bp,SI),e(SI,Hpo),e(Bp,Upo),e(x,Jpo),e(x,Pp),e(Pp,Wne),e(Wne,Ypo),e(Pp,Kpo),e(Pp,RI),e(RI,Zpo),e(Pp,euo),e(x,ouo),e(x,Ip),e(Ip,Hne),e(Hne,ruo),e(Ip,tuo),e(Ip,BI),e(BI,auo),e(Ip,nuo),e(x,suo),e(x,qp),e(qp,Une),e(Une,luo),e(qp,iuo),e(qp,PI),e(PI,duo),e(qp,cuo),e(x,fuo),e(x,Np),e(Np,Jne),e(Jne,muo),e(Np,guo),e(Np,II),e(II,huo),e(Np,puo),e(x,uuo),e(x,jp),e(jp,Yne),e(Yne,_uo),e(jp,buo),e(jp,qI),e(qI,vuo),e(jp,Fuo),e(x,Tuo),e(x,Dp),e(Dp,Kne),e(Kne,Muo),e(Dp,Euo),e(Dp,NI),e(NI,Cuo),e(Dp,wuo),e(x,Auo),e(x,Gp),e(Gp,Zne),e(Zne,yuo),e(Gp,Luo),e(Gp,jI),e(jI,xuo),e(Gp,$uo),e(x,kuo),e(x,Op),e(Op,ese),e(ese,Suo),e(Op,Ruo),e(Op,DI),e(DI,Buo),e(Op,Puo),e(x,Iuo),e(x,Vp),e(Vp,ose),e(ose,quo),e(Vp,Nuo),e(Vp,GI),e(GI,juo),e(Vp,Duo),e(x,Guo),e(x,Xp),e(Xp,rse),e(rse,Ouo),e(Xp,Vuo),e(Xp,OI),e(OI,Xuo),e(Xp,zuo),e(x,Quo),e(x,zp),e(zp,tse),e(tse,Wuo),e(zp,Huo),e(zp,VI),e(VI,Uuo),e(zp,Juo),e(x,Yuo),e(x,Qp),e(Qp,ase),e(ase,Kuo),e(Qp,Zuo),e(Qp,XI),e(XI,e_o),e(Qp,o_o),e(x,r_o),e(x,Wp),e(Wp,nse),e(nse,t_o),e(Wp,a_o),e(Wp,zI),e(zI,n_o),e(Wp,s_o),e(x,l_o),e(x,Hp),e(Hp,sse),e(sse,i_o),e(Hp,d_o),e(Hp,QI),e(QI,c_o),e(Hp,f_o),e(x,m_o),e(x,Up),e(Up,lse),e(lse,g_o),e(Up,h_o),e(Up,WI),e(WI,p_o),e(Up,u_o),e(x,__o),e(x,Jp),e(Jp,ise),e(ise,b_o),e(Jp,v_o),e(Jp,HI),e(HI,F_o),e(Jp,T_o),e(x,M_o),e(x,Yp),e(Yp,dse),e(dse,E_o),e(Yp,C_o),e(Yp,UI),e(UI,w_o),e(Yp,A_o),e(x,y_o),e(x,Kp),e(Kp,cse),e(cse,L_o),e(Kp,x_o),e(Kp,JI),e(JI,$_o),e(Kp,k_o),e(x,S_o),e(x,Zp),e(Zp,fse),e(fse,R_o),e(Zp,B_o),e(Zp,YI),e(YI,P_o),e(Zp,I_o),e(x,q_o),e(x,eu),e(eu,mse),e(mse,N_o),e(eu,j_o),e(eu,KI),e(KI,D_o),e(eu,G_o),e(x,O_o),e(x,ou),e(ou,gse),e(gse,V_o),e(ou,X_o),e(ou,ZI),e(ZI,z_o),e(ou,Q_o),e(x,W_o),e(x,ru),e(ru,hse),e(hse,H_o),e(ru,U_o),e(ru,eq),e(eq,J_o),e(ru,Y_o),e(x,K_o),e(x,tu),e(tu,pse),e(pse,Z_o),e(tu,e0o),e(tu,oq),e(oq,o0o),e(tu,r0o),e(x,t0o),e(x,au),e(au,use),e(use,a0o),e(au,n0o),e(au,rq),e(rq,s0o),e(au,l0o),e(x,i0o),e(x,nu),e(nu,_se),e(_se,d0o),e(nu,c0o),e(nu,tq),e(tq,f0o),e(nu,m0o),e(x,g0o),e(x,su),e(su,bse),e(bse,h0o),e(su,p0o),e(su,aq),e(aq,u0o),e(su,_0o),e(x,b0o),e(x,lu),e(lu,vse),e(vse,v0o),e(lu,F0o),e(lu,nq),e(nq,T0o),e(lu,M0o),e(x,E0o),e(x,iu),e(iu,Fse),e(Fse,C0o),e(iu,w0o),e(iu,sq),e(sq,A0o),e(iu,y0o),e(x,L0o),e(x,du),e(du,Tse),e(Tse,x0o),e(du,$0o),e(du,lq),e(lq,k0o),e(du,S0o),e(x,R0o),e(x,cu),e(cu,Mse),e(Mse,B0o),e(cu,P0o),e(cu,iq),e(iq,I0o),e(cu,q0o),e(x,N0o),e(x,fu),e(fu,Ese),e(Ese,j0o),e(fu,D0o),e(fu,dq),e(dq,G0o),e(fu,O0o),e(x,V0o),e(x,mu),e(mu,Cse),e(Cse,X0o),e(mu,z0o),e(mu,cq),e(cq,Q0o),e(mu,W0o),e(x,H0o),e(x,gu),e(gu,wse),e(wse,U0o),e(gu,J0o),e(gu,fq),e(fq,Y0o),e(gu,K0o),e(x,Z0o),e(x,hu),e(hu,Ase),e(Ase,e1o),e(hu,o1o),e(hu,mq),e(mq,r1o),e(hu,t1o),e(x,a1o),e(x,pu),e(pu,yse),e(yse,n1o),e(pu,s1o),e(pu,gq),e(gq,l1o),e(pu,i1o),e(x,d1o),e(x,uu),e(uu,Lse),e(Lse,c1o),e(uu,f1o),e(uu,hq),e(hq,m1o),e(uu,g1o),e(x,h1o),e(x,_u),e(_u,xse),e(xse,p1o),e(_u,u1o),e(_u,pq),e(pq,_1o),e(_u,b1o),e(x,v1o),e(x,bu),e(bu,$se),e($se,F1o),e(bu,T1o),e(bu,uq),e(uq,M1o),e(bu,E1o),e(x,C1o),e(x,vu),e(vu,kse),e(kse,w1o),e(vu,A1o),e(vu,_q),e(_q,y1o),e(vu,L1o),e(x,x1o),e(x,Fu),e(Fu,Sse),e(Sse,$1o),e(Fu,k1o),e(Fu,bq),e(bq,S1o),e(Fu,R1o),e(x,B1o),e(x,Tu),e(Tu,Rse),e(Rse,P1o),e(Tu,I1o),e(Tu,vq),e(vq,q1o),e(Tu,N1o),e(x,j1o),e(x,Mu),e(Mu,Bse),e(Bse,D1o),e(Mu,G1o),e(Mu,Fq),e(Fq,O1o),e(Mu,V1o),e(x,X1o),e(x,Eu),e(Eu,Pse),e(Pse,z1o),e(Eu,Q1o),e(Eu,Tq),e(Tq,W1o),e(Eu,H1o),e(x,U1o),e(x,Cu),e(Cu,Ise),e(Ise,J1o),e(Cu,Y1o),e(Cu,Mq),e(Mq,K1o),e(Cu,Z1o),e(x,ebo),e(x,wu),e(wu,qse),e(qse,obo),e(wu,rbo),e(wu,Eq),e(Eq,tbo),e(wu,abo),e(x,nbo),e(x,Au),e(Au,Nse),e(Nse,sbo),e(Au,lbo),e(Au,Cq),e(Cq,ibo),e(Au,dbo),e(x,cbo),e(x,yu),e(yu,jse),e(jse,fbo),e(yu,mbo),e(yu,wq),e(wq,gbo),e(yu,hbo),e(x,pbo),e(x,Lu),e(Lu,Dse),e(Dse,ubo),e(Lu,_bo),e(Lu,Aq),e(Aq,bbo),e(Lu,vbo),e(x,Fbo),e(x,xu),e(xu,Gse),e(Gse,Tbo),e(xu,Mbo),e(xu,yq),e(yq,Ebo),e(xu,Cbo),e(x,wbo),e(x,$u),e($u,Ose),e(Ose,Abo),e($u,ybo),e($u,Lq),e(Lq,Lbo),e($u,xbo),e(x,$bo),e(x,ku),e(ku,Vse),e(Vse,kbo),e(ku,Sbo),e(ku,xq),e(xq,Rbo),e(ku,Bbo),e(x,Pbo),e(x,Su),e(Su,Xse),e(Xse,Ibo),e(Su,qbo),e(Su,$q),e($q,Nbo),e(Su,jbo),e(He,Dbo),e(He,Ru),e(Ru,Gbo),e(Ru,zse),e(zse,Obo),e(Ru,Vbo),e(Ru,Qse),e(Qse,Xbo),e(He,zbo),M(Bu,He,null),b(f,oIe,_),b(f,wi,_),e(wi,Pu),e(Pu,Wse),M(yA,Wse,null),e(wi,Qbo),e(wi,Hse),e(Hse,Wbo),b(f,rIe,_),b(f,xo,_),M(LA,xo,null),e(xo,Hbo),e(xo,Ai),e(Ai,Ubo),e(Ai,kq),e(kq,Jbo),e(Ai,Ybo),e(Ai,Sq),e(Sq,Kbo),e(Ai,Zbo),e(xo,e2o),e(xo,xA),e(xA,o2o),e(xA,Use),e(Use,r2o),e(xA,t2o),e(xo,a2o),e(xo,rt),M($A,rt,null),e(rt,n2o),e(rt,Jse),e(Jse,s2o),e(rt,l2o),e(rt,yi),e(yi,i2o),e(yi,Yse),e(Yse,d2o),e(yi,c2o),e(yi,Rq),e(Rq,f2o),e(yi,m2o),e(rt,g2o),M(Iu,rt,null),e(xo,h2o),e(xo,Ue),M(kA,Ue,null),e(Ue,p2o),e(Ue,Kse),e(Kse,u2o),e(Ue,_2o),e(Ue,ya),e(ya,b2o),e(ya,Zse),e(Zse,v2o),e(ya,F2o),e(ya,ele),e(ele,T2o),e(ya,M2o),e(ya,ole),e(ole,E2o),e(ya,C2o),e(Ue,w2o),e(Ue,O),e(O,qu),e(qu,rle),e(rle,A2o),e(qu,y2o),e(qu,Bq),e(Bq,L2o),e(qu,x2o),e(O,$2o),e(O,Nu),e(Nu,tle),e(tle,k2o),e(Nu,S2o),e(Nu,Pq),e(Pq,R2o),e(Nu,B2o),e(O,P2o),e(O,ju),e(ju,ale),e(ale,I2o),e(ju,q2o),e(ju,Iq),e(Iq,N2o),e(ju,j2o),e(O,D2o),e(O,Du),e(Du,nle),e(nle,G2o),e(Du,O2o),e(Du,qq),e(qq,V2o),e(Du,X2o),e(O,z2o),e(O,Gu),e(Gu,sle),e(sle,Q2o),e(Gu,W2o),e(Gu,Nq),e(Nq,H2o),e(Gu,U2o),e(O,J2o),e(O,Ou),e(Ou,lle),e(lle,Y2o),e(Ou,K2o),e(Ou,jq),e(jq,Z2o),e(Ou,evo),e(O,ovo),e(O,Vu),e(Vu,ile),e(ile,rvo),e(Vu,tvo),e(Vu,Dq),e(Dq,avo),e(Vu,nvo),e(O,svo),e(O,Xu),e(Xu,dle),e(dle,lvo),e(Xu,ivo),e(Xu,Gq),e(Gq,dvo),e(Xu,cvo),e(O,fvo),e(O,zu),e(zu,cle),e(cle,mvo),e(zu,gvo),e(zu,Oq),e(Oq,hvo),e(zu,pvo),e(O,uvo),e(O,Qu),e(Qu,fle),e(fle,_vo),e(Qu,bvo),e(Qu,Vq),e(Vq,vvo),e(Qu,Fvo),e(O,Tvo),e(O,Wu),e(Wu,mle),e(mle,Mvo),e(Wu,Evo),e(Wu,Xq),e(Xq,Cvo),e(Wu,wvo),e(O,Avo),e(O,Hu),e(Hu,gle),e(gle,yvo),e(Hu,Lvo),e(Hu,zq),e(zq,xvo),e(Hu,$vo),e(O,kvo),e(O,Uu),e(Uu,hle),e(hle,Svo),e(Uu,Rvo),e(Uu,Qq),e(Qq,Bvo),e(Uu,Pvo),e(O,Ivo),e(O,Ju),e(Ju,ple),e(ple,qvo),e(Ju,Nvo),e(Ju,Wq),e(Wq,jvo),e(Ju,Dvo),e(O,Gvo),e(O,Yu),e(Yu,ule),e(ule,Ovo),e(Yu,Vvo),e(Yu,Hq),e(Hq,Xvo),e(Yu,zvo),e(O,Qvo),e(O,Ku),e(Ku,_le),e(_le,Wvo),e(Ku,Hvo),e(Ku,Uq),e(Uq,Uvo),e(Ku,Jvo),e(O,Yvo),e(O,Zu),e(Zu,ble),e(ble,Kvo),e(Zu,Zvo),e(Zu,Jq),e(Jq,eFo),e(Zu,oFo),e(O,rFo),e(O,e_),e(e_,vle),e(vle,tFo),e(e_,aFo),e(e_,Yq),e(Yq,nFo),e(e_,sFo),e(O,lFo),e(O,o_),e(o_,Fle),e(Fle,iFo),e(o_,dFo),e(o_,Kq),e(Kq,cFo),e(o_,fFo),e(O,mFo),e(O,r_),e(r_,Tle),e(Tle,gFo),e(r_,hFo),e(r_,Zq),e(Zq,pFo),e(r_,uFo),e(O,_Fo),e(O,t_),e(t_,Mle),e(Mle,bFo),e(t_,vFo),e(t_,eN),e(eN,FFo),e(t_,TFo),e(O,MFo),e(O,a_),e(a_,Ele),e(Ele,EFo),e(a_,CFo),e(a_,oN),e(oN,wFo),e(a_,AFo),e(O,yFo),e(O,n_),e(n_,Cle),e(Cle,LFo),e(n_,xFo),e(n_,rN),e(rN,$Fo),e(n_,kFo),e(O,SFo),e(O,s_),e(s_,wle),e(wle,RFo),e(s_,BFo),e(s_,tN),e(tN,PFo),e(s_,IFo),e(O,qFo),e(O,l_),e(l_,Ale),e(Ale,NFo),e(l_,jFo),e(l_,aN),e(aN,DFo),e(l_,GFo),e(O,OFo),e(O,i_),e(i_,yle),e(yle,VFo),e(i_,XFo),e(i_,nN),e(nN,zFo),e(i_,QFo),e(O,WFo),e(O,d_),e(d_,Lle),e(Lle,HFo),e(d_,UFo),e(d_,sN),e(sN,JFo),e(d_,YFo),e(O,KFo),e(O,c_),e(c_,xle),e(xle,ZFo),e(c_,e6o),e(c_,lN),e(lN,o6o),e(c_,r6o),e(O,t6o),e(O,f_),e(f_,$le),e($le,a6o),e(f_,n6o),e(f_,iN),e(iN,s6o),e(f_,l6o),e(O,i6o),e(O,m_),e(m_,kle),e(kle,d6o),e(m_,c6o),e(m_,dN),e(dN,f6o),e(m_,m6o),e(O,g6o),e(O,g_),e(g_,Sle),e(Sle,h6o),e(g_,p6o),e(g_,cN),e(cN,u6o),e(g_,_6o),e(O,b6o),e(O,h_),e(h_,Rle),e(Rle,v6o),e(h_,F6o),e(h_,fN),e(fN,T6o),e(h_,M6o),e(O,E6o),e(O,p_),e(p_,Ble),e(Ble,C6o),e(p_,w6o),e(p_,mN),e(mN,A6o),e(p_,y6o),e(O,L6o),e(O,u_),e(u_,Ple),e(Ple,x6o),e(u_,$6o),e(u_,gN),e(gN,k6o),e(u_,S6o),e(O,R6o),e(O,__),e(__,Ile),e(Ile,B6o),e(__,P6o),e(__,hN),e(hN,I6o),e(__,q6o),e(O,N6o),e(O,b_),e(b_,qle),e(qle,j6o),e(b_,D6o),e(b_,pN),e(pN,G6o),e(b_,O6o),e(O,V6o),e(O,v_),e(v_,Nle),e(Nle,X6o),e(v_,z6o),e(v_,uN),e(uN,Q6o),e(v_,W6o),e(O,H6o),e(O,F_),e(F_,jle),e(jle,U6o),e(F_,J6o),e(F_,_N),e(_N,Y6o),e(F_,K6o),e(O,Z6o),e(O,T_),e(T_,Dle),e(Dle,eTo),e(T_,oTo),e(T_,bN),e(bN,rTo),e(T_,tTo),e(Ue,aTo),e(Ue,M_),e(M_,nTo),e(M_,Gle),e(Gle,sTo),e(M_,lTo),e(M_,Ole),e(Ole,iTo),e(Ue,dTo),M(E_,Ue,null),b(f,tIe,_),b(f,Li,_),e(Li,C_),e(C_,Vle),M(SA,Vle,null),e(Li,cTo),e(Li,Xle),e(Xle,fTo),b(f,aIe,_),b(f,$o,_),M(RA,$o,null),e($o,mTo),e($o,xi),e(xi,gTo),e(xi,vN),e(vN,hTo),e(xi,pTo),e(xi,FN),e(FN,uTo),e(xi,_To),e($o,bTo),e($o,BA),e(BA,vTo),e(BA,zle),e(zle,FTo),e(BA,TTo),e($o,MTo),e($o,tt),M(PA,tt,null),e(tt,ETo),e(tt,Qle),e(Qle,CTo),e(tt,wTo),e(tt,$i),e($i,ATo),e($i,Wle),e(Wle,yTo),e($i,LTo),e($i,TN),e(TN,xTo),e($i,$To),e(tt,kTo),M(w_,tt,null),e($o,STo),e($o,Je),M(IA,Je,null),e(Je,RTo),e(Je,Hle),e(Hle,BTo),e(Je,PTo),e(Je,La),e(La,ITo),e(La,Ule),e(Ule,qTo),e(La,NTo),e(La,Jle),e(Jle,jTo),e(La,DTo),e(La,Yle),e(Yle,GTo),e(La,OTo),e(Je,VTo),e(Je,z),e(z,A_),e(A_,Kle),e(Kle,XTo),e(A_,zTo),e(A_,MN),e(MN,QTo),e(A_,WTo),e(z,HTo),e(z,y_),e(y_,Zle),e(Zle,UTo),e(y_,JTo),e(y_,EN),e(EN,YTo),e(y_,KTo),e(z,ZTo),e(z,L_),e(L_,eie),e(eie,e7o),e(L_,o7o),e(L_,CN),e(CN,r7o),e(L_,t7o),e(z,a7o),e(z,x_),e(x_,oie),e(oie,n7o),e(x_,s7o),e(x_,wN),e(wN,l7o),e(x_,i7o),e(z,d7o),e(z,$_),e($_,rie),e(rie,c7o),e($_,f7o),e($_,AN),e(AN,m7o),e($_,g7o),e(z,h7o),e(z,k_),e(k_,tie),e(tie,p7o),e(k_,u7o),e(k_,yN),e(yN,_7o),e(k_,b7o),e(z,v7o),e(z,S_),e(S_,aie),e(aie,F7o),e(S_,T7o),e(S_,LN),e(LN,M7o),e(S_,E7o),e(z,C7o),e(z,R_),e(R_,nie),e(nie,w7o),e(R_,A7o),e(R_,xN),e(xN,y7o),e(R_,L7o),e(z,x7o),e(z,B_),e(B_,sie),e(sie,$7o),e(B_,k7o),e(B_,$N),e($N,S7o),e(B_,R7o),e(z,B7o),e(z,P_),e(P_,lie),e(lie,P7o),e(P_,I7o),e(P_,kN),e(kN,q7o),e(P_,N7o),e(z,j7o),e(z,I_),e(I_,iie),e(iie,D7o),e(I_,G7o),e(I_,SN),e(SN,O7o),e(I_,V7o),e(z,X7o),e(z,q_),e(q_,die),e(die,z7o),e(q_,Q7o),e(q_,RN),e(RN,W7o),e(q_,H7o),e(z,U7o),e(z,N_),e(N_,cie),e(cie,J7o),e(N_,Y7o),e(N_,BN),e(BN,K7o),e(N_,Z7o),e(z,eMo),e(z,j_),e(j_,fie),e(fie,oMo),e(j_,rMo),e(j_,PN),e(PN,tMo),e(j_,aMo),e(z,nMo),e(z,D_),e(D_,mie),e(mie,sMo),e(D_,lMo),e(D_,IN),e(IN,iMo),e(D_,dMo),e(z,cMo),e(z,G_),e(G_,gie),e(gie,fMo),e(G_,mMo),e(G_,qN),e(qN,gMo),e(G_,hMo),e(z,pMo),e(z,O_),e(O_,hie),e(hie,uMo),e(O_,_Mo),e(O_,NN),e(NN,bMo),e(O_,vMo),e(z,FMo),e(z,V_),e(V_,pie),e(pie,TMo),e(V_,MMo),e(V_,jN),e(jN,EMo),e(V_,CMo),e(z,wMo),e(z,X_),e(X_,uie),e(uie,AMo),e(X_,yMo),e(X_,DN),e(DN,LMo),e(X_,xMo),e(z,$Mo),e(z,z_),e(z_,_ie),e(_ie,kMo),e(z_,SMo),e(z_,GN),e(GN,RMo),e(z_,BMo),e(z,PMo),e(z,Q_),e(Q_,bie),e(bie,IMo),e(Q_,qMo),e(Q_,ON),e(ON,NMo),e(Q_,jMo),e(z,DMo),e(z,W_),e(W_,vie),e(vie,GMo),e(W_,OMo),e(W_,VN),e(VN,VMo),e(W_,XMo),e(z,zMo),e(z,H_),e(H_,Fie),e(Fie,QMo),e(H_,WMo),e(H_,XN),e(XN,HMo),e(H_,UMo),e(z,JMo),e(z,U_),e(U_,Tie),e(Tie,YMo),e(U_,KMo),e(U_,zN),e(zN,ZMo),e(U_,e4o),e(z,o4o),e(z,J_),e(J_,Mie),e(Mie,r4o),e(J_,t4o),e(J_,QN),e(QN,a4o),e(J_,n4o),e(z,s4o),e(z,Y_),e(Y_,Eie),e(Eie,l4o),e(Y_,i4o),e(Y_,WN),e(WN,d4o),e(Y_,c4o),e(z,f4o),e(z,K_),e(K_,Cie),e(Cie,m4o),e(K_,g4o),e(K_,HN),e(HN,h4o),e(K_,p4o),e(z,u4o),e(z,Z_),e(Z_,wie),e(wie,_4o),e(Z_,b4o),e(Z_,UN),e(UN,v4o),e(Z_,F4o),e(z,T4o),e(z,e0),e(e0,Aie),e(Aie,M4o),e(e0,E4o),e(e0,JN),e(JN,C4o),e(e0,w4o),e(z,A4o),e(z,o0),e(o0,yie),e(yie,y4o),e(o0,L4o),e(o0,YN),e(YN,x4o),e(o0,$4o),e(z,k4o),e(z,r0),e(r0,Lie),e(Lie,S4o),e(r0,R4o),e(r0,KN),e(KN,B4o),e(r0,P4o),e(z,I4o),e(z,t0),e(t0,xie),e(xie,q4o),e(t0,N4o),e(t0,ZN),e(ZN,j4o),e(t0,D4o),e(z,G4o),e(z,a0),e(a0,$ie),e($ie,O4o),e(a0,V4o),e(a0,ej),e(ej,X4o),e(a0,z4o),e(z,Q4o),e(z,n0),e(n0,kie),e(kie,W4o),e(n0,H4o),e(n0,oj),e(oj,U4o),e(n0,J4o),e(z,Y4o),e(z,s0),e(s0,Sie),e(Sie,K4o),e(s0,Z4o),e(s0,rj),e(rj,eEo),e(s0,oEo),e(Je,rEo),e(Je,l0),e(l0,tEo),e(l0,Rie),e(Rie,aEo),e(l0,nEo),e(l0,Bie),e(Bie,sEo),e(Je,lEo),M(i0,Je,null),b(f,nIe,_),b(f,ki,_),e(ki,d0),e(d0,Pie),M(qA,Pie,null),e(ki,iEo),e(ki,Iie),e(Iie,dEo),b(f,sIe,_),b(f,ko,_),M(NA,ko,null),e(ko,cEo),e(ko,Si),e(Si,fEo),e(Si,tj),e(tj,mEo),e(Si,gEo),e(Si,aj),e(aj,hEo),e(Si,pEo),e(ko,uEo),e(ko,jA),e(jA,_Eo),e(jA,qie),e(qie,bEo),e(jA,vEo),e(ko,FEo),e(ko,at),M(DA,at,null),e(at,TEo),e(at,Nie),e(Nie,MEo),e(at,EEo),e(at,Ri),e(Ri,CEo),e(Ri,jie),e(jie,wEo),e(Ri,AEo),e(Ri,nj),e(nj,yEo),e(Ri,LEo),e(at,xEo),M(c0,at,null),e(ko,$Eo),e(ko,Ye),M(GA,Ye,null),e(Ye,kEo),e(Ye,Die),e(Die,SEo),e(Ye,REo),e(Ye,xa),e(xa,BEo),e(xa,Gie),e(Gie,PEo),e(xa,IEo),e(xa,Oie),e(Oie,qEo),e(xa,NEo),e(xa,Vie),e(Vie,jEo),e(xa,DEo),e(Ye,GEo),e(Ye,Q),e(Q,f0),e(f0,Xie),e(Xie,OEo),e(f0,VEo),e(f0,sj),e(sj,XEo),e(f0,zEo),e(Q,QEo),e(Q,m0),e(m0,zie),e(zie,WEo),e(m0,HEo),e(m0,lj),e(lj,UEo),e(m0,JEo),e(Q,YEo),e(Q,g0),e(g0,Qie),e(Qie,KEo),e(g0,ZEo),e(g0,ij),e(ij,e5o),e(g0,o5o),e(Q,r5o),e(Q,h0),e(h0,Wie),e(Wie,t5o),e(h0,a5o),e(h0,dj),e(dj,n5o),e(h0,s5o),e(Q,l5o),e(Q,p0),e(p0,Hie),e(Hie,i5o),e(p0,d5o),e(p0,cj),e(cj,c5o),e(p0,f5o),e(Q,m5o),e(Q,u0),e(u0,Uie),e(Uie,g5o),e(u0,h5o),e(u0,fj),e(fj,p5o),e(u0,u5o),e(Q,_5o),e(Q,_0),e(_0,Jie),e(Jie,b5o),e(_0,v5o),e(_0,mj),e(mj,F5o),e(_0,T5o),e(Q,M5o),e(Q,b0),e(b0,Yie),e(Yie,E5o),e(b0,C5o),e(b0,gj),e(gj,w5o),e(b0,A5o),e(Q,y5o),e(Q,v0),e(v0,Kie),e(Kie,L5o),e(v0,x5o),e(v0,hj),e(hj,$5o),e(v0,k5o),e(Q,S5o),e(Q,F0),e(F0,Zie),e(Zie,R5o),e(F0,B5o),e(F0,pj),e(pj,P5o),e(F0,I5o),e(Q,q5o),e(Q,T0),e(T0,ede),e(ede,N5o),e(T0,j5o),e(T0,uj),e(uj,D5o),e(T0,G5o),e(Q,O5o),e(Q,M0),e(M0,ode),e(ode,V5o),e(M0,X5o),e(M0,_j),e(_j,z5o),e(M0,Q5o),e(Q,W5o),e(Q,E0),e(E0,rde),e(rde,H5o),e(E0,U5o),e(E0,bj),e(bj,J5o),e(E0,Y5o),e(Q,K5o),e(Q,C0),e(C0,tde),e(tde,Z5o),e(C0,eCo),e(C0,vj),e(vj,oCo),e(C0,rCo),e(Q,tCo),e(Q,w0),e(w0,ade),e(ade,aCo),e(w0,nCo),e(w0,Fj),e(Fj,sCo),e(w0,lCo),e(Q,iCo),e(Q,A0),e(A0,nde),e(nde,dCo),e(A0,cCo),e(A0,Tj),e(Tj,fCo),e(A0,mCo),e(Q,gCo),e(Q,y0),e(y0,sde),e(sde,hCo),e(y0,pCo),e(y0,Mj),e(Mj,uCo),e(y0,_Co),e(Q,bCo),e(Q,L0),e(L0,lde),e(lde,vCo),e(L0,FCo),e(L0,Ej),e(Ej,TCo),e(L0,MCo),e(Q,ECo),e(Q,x0),e(x0,ide),e(ide,CCo),e(x0,wCo),e(x0,Cj),e(Cj,ACo),e(x0,yCo),e(Q,LCo),e(Q,$0),e($0,dde),e(dde,xCo),e($0,$Co),e($0,wj),e(wj,kCo),e($0,SCo),e(Q,RCo),e(Q,k0),e(k0,cde),e(cde,BCo),e(k0,PCo),e(k0,Aj),e(Aj,ICo),e(k0,qCo),e(Q,NCo),e(Q,S0),e(S0,fde),e(fde,jCo),e(S0,DCo),e(S0,yj),e(yj,GCo),e(S0,OCo),e(Q,VCo),e(Q,R0),e(R0,mde),e(mde,XCo),e(R0,zCo),e(R0,Lj),e(Lj,QCo),e(R0,WCo),e(Q,HCo),e(Q,B0),e(B0,gde),e(gde,UCo),e(B0,JCo),e(B0,xj),e(xj,YCo),e(B0,KCo),e(Q,ZCo),e(Q,P0),e(P0,hde),e(hde,e3o),e(P0,o3o),e(P0,$j),e($j,r3o),e(P0,t3o),e(Q,a3o),e(Q,I0),e(I0,pde),e(pde,n3o),e(I0,s3o),e(I0,kj),e(kj,l3o),e(I0,i3o),e(Q,d3o),e(Q,q0),e(q0,ude),e(ude,c3o),e(q0,f3o),e(q0,Sj),e(Sj,m3o),e(q0,g3o),e(Q,h3o),e(Q,N0),e(N0,_de),e(_de,p3o),e(N0,u3o),e(N0,Rj),e(Rj,_3o),e(N0,b3o),e(Q,v3o),e(Q,j0),e(j0,bde),e(bde,F3o),e(j0,T3o),e(j0,Bj),e(Bj,M3o),e(j0,E3o),e(Q,C3o),e(Q,D0),e(D0,vde),e(vde,w3o),e(D0,A3o),e(D0,Pj),e(Pj,y3o),e(D0,L3o),e(Q,x3o),e(Q,G0),e(G0,Fde),e(Fde,$3o),e(G0,k3o),e(G0,Tde),e(Tde,S3o),e(G0,R3o),e(Q,B3o),e(Q,O0),e(O0,Mde),e(Mde,P3o),e(O0,I3o),e(O0,Ij),e(Ij,q3o),e(O0,N3o),e(Q,j3o),e(Q,V0),e(V0,Ede),e(Ede,D3o),e(V0,G3o),e(V0,qj),e(qj,O3o),e(V0,V3o),e(Q,X3o),e(Q,X0),e(X0,Cde),e(Cde,z3o),e(X0,Q3o),e(X0,Nj),e(Nj,W3o),e(X0,H3o),e(Q,U3o),e(Q,z0),e(z0,wde),e(wde,J3o),e(z0,Y3o),e(z0,jj),e(jj,K3o),e(z0,Z3o),e(Ye,ewo),e(Ye,Q0),e(Q0,owo),e(Q0,Ade),e(Ade,rwo),e(Q0,two),e(Q0,yde),e(yde,awo),e(Ye,nwo),M(W0,Ye,null),b(f,lIe,_),b(f,Bi,_),e(Bi,H0),e(H0,Lde),M(OA,Lde,null),e(Bi,swo),e(Bi,xde),e(xde,lwo),b(f,iIe,_),b(f,So,_),M(VA,So,null),e(So,iwo),e(So,Pi),e(Pi,dwo),e(Pi,Dj),e(Dj,cwo),e(Pi,fwo),e(Pi,Gj),e(Gj,mwo),e(Pi,gwo),e(So,hwo),e(So,XA),e(XA,pwo),e(XA,$de),e($de,uwo),e(XA,_wo),e(So,bwo),e(So,nt),M(zA,nt,null),e(nt,vwo),e(nt,kde),e(kde,Fwo),e(nt,Two),e(nt,Ii),e(Ii,Mwo),e(Ii,Sde),e(Sde,Ewo),e(Ii,Cwo),e(Ii,Oj),e(Oj,wwo),e(Ii,Awo),e(nt,ywo),M(U0,nt,null),e(So,Lwo),e(So,Ke),M(QA,Ke,null),e(Ke,xwo),e(Ke,Rde),e(Rde,$wo),e(Ke,kwo),e(Ke,$a),e($a,Swo),e($a,Bde),e(Bde,Rwo),e($a,Bwo),e($a,Pde),e(Pde,Pwo),e($a,Iwo),e($a,Ide),e(Ide,qwo),e($a,Nwo),e(Ke,jwo),e(Ke,he),e(he,J0),e(J0,qde),e(qde,Dwo),e(J0,Gwo),e(J0,Vj),e(Vj,Owo),e(J0,Vwo),e(he,Xwo),e(he,Y0),e(Y0,Nde),e(Nde,zwo),e(Y0,Qwo),e(Y0,Xj),e(Xj,Wwo),e(Y0,Hwo),e(he,Uwo),e(he,K0),e(K0,jde),e(jde,Jwo),e(K0,Ywo),e(K0,zj),e(zj,Kwo),e(K0,Zwo),e(he,eAo),e(he,Z0),e(Z0,Dde),e(Dde,oAo),e(Z0,rAo),e(Z0,Qj),e(Qj,tAo),e(Z0,aAo),e(he,nAo),e(he,e1),e(e1,Gde),e(Gde,sAo),e(e1,lAo),e(e1,Wj),e(Wj,iAo),e(e1,dAo),e(he,cAo),e(he,o1),e(o1,Ode),e(Ode,fAo),e(o1,mAo),e(o1,Hj),e(Hj,gAo),e(o1,hAo),e(he,pAo),e(he,r1),e(r1,Vde),e(Vde,uAo),e(r1,_Ao),e(r1,Uj),e(Uj,bAo),e(r1,vAo),e(he,FAo),e(he,t1),e(t1,Xde),e(Xde,TAo),e(t1,MAo),e(t1,Jj),e(Jj,EAo),e(t1,CAo),e(he,wAo),e(he,a1),e(a1,zde),e(zde,AAo),e(a1,yAo),e(a1,Yj),e(Yj,LAo),e(a1,xAo),e(he,$Ao),e(he,n1),e(n1,Qde),e(Qde,kAo),e(n1,SAo),e(n1,Kj),e(Kj,RAo),e(n1,BAo),e(he,PAo),e(he,s1),e(s1,Wde),e(Wde,IAo),e(s1,qAo),e(s1,Zj),e(Zj,NAo),e(s1,jAo),e(he,DAo),e(he,l1),e(l1,Hde),e(Hde,GAo),e(l1,OAo),e(l1,eD),e(eD,VAo),e(l1,XAo),e(he,zAo),e(he,i1),e(i1,Ude),e(Ude,QAo),e(i1,WAo),e(i1,oD),e(oD,HAo),e(i1,UAo),e(he,JAo),e(he,d1),e(d1,Jde),e(Jde,YAo),e(d1,KAo),e(d1,rD),e(rD,ZAo),e(d1,eyo),e(he,oyo),e(he,c1),e(c1,Yde),e(Yde,ryo),e(c1,tyo),e(c1,tD),e(tD,ayo),e(c1,nyo),e(he,syo),e(he,f1),e(f1,Kde),e(Kde,lyo),e(f1,iyo),e(f1,aD),e(aD,dyo),e(f1,cyo),e(he,fyo),e(he,m1),e(m1,Zde),e(Zde,myo),e(m1,gyo),e(m1,nD),e(nD,hyo),e(m1,pyo),e(Ke,uyo),e(Ke,g1),e(g1,_yo),e(g1,ece),e(ece,byo),e(g1,vyo),e(g1,oce),e(oce,Fyo),e(Ke,Tyo),M(h1,Ke,null),b(f,dIe,_),b(f,qi,_),e(qi,p1),e(p1,rce),M(WA,rce,null),e(qi,Myo),e(qi,tce),e(tce,Eyo),b(f,cIe,_),b(f,Ro,_),M(HA,Ro,null),e(Ro,Cyo),e(Ro,Ni),e(Ni,wyo),e(Ni,sD),e(sD,Ayo),e(Ni,yyo),e(Ni,lD),e(lD,Lyo),e(Ni,xyo),e(Ro,$yo),e(Ro,UA),e(UA,kyo),e(UA,ace),e(ace,Syo),e(UA,Ryo),e(Ro,Byo),e(Ro,st),M(JA,st,null),e(st,Pyo),e(st,nce),e(nce,Iyo),e(st,qyo),e(st,ji),e(ji,Nyo),e(ji,sce),e(sce,jyo),e(ji,Dyo),e(ji,iD),e(iD,Gyo),e(ji,Oyo),e(st,Vyo),M(u1,st,null),e(Ro,Xyo),e(Ro,Ze),M(YA,Ze,null),e(Ze,zyo),e(Ze,lce),e(lce,Qyo),e(Ze,Wyo),e(Ze,ka),e(ka,Hyo),e(ka,ice),e(ice,Uyo),e(ka,Jyo),e(ka,dce),e(dce,Yyo),e(ka,Kyo),e(ka,cce),e(cce,Zyo),e(ka,eLo),e(Ze,oLo),e(Ze,q),e(q,_1),e(_1,fce),e(fce,rLo),e(_1,tLo),e(_1,dD),e(dD,aLo),e(_1,nLo),e(q,sLo),e(q,b1),e(b1,mce),e(mce,lLo),e(b1,iLo),e(b1,cD),e(cD,dLo),e(b1,cLo),e(q,fLo),e(q,v1),e(v1,gce),e(gce,mLo),e(v1,gLo),e(v1,fD),e(fD,hLo),e(v1,pLo),e(q,uLo),e(q,F1),e(F1,hce),e(hce,_Lo),e(F1,bLo),e(F1,mD),e(mD,vLo),e(F1,FLo),e(q,TLo),e(q,T1),e(T1,pce),e(pce,MLo),e(T1,ELo),e(T1,gD),e(gD,CLo),e(T1,wLo),e(q,ALo),e(q,M1),e(M1,uce),e(uce,yLo),e(M1,LLo),e(M1,hD),e(hD,xLo),e(M1,$Lo),e(q,kLo),e(q,E1),e(E1,_ce),e(_ce,SLo),e(E1,RLo),e(E1,pD),e(pD,BLo),e(E1,PLo),e(q,ILo),e(q,C1),e(C1,bce),e(bce,qLo),e(C1,NLo),e(C1,uD),e(uD,jLo),e(C1,DLo),e(q,GLo),e(q,w1),e(w1,vce),e(vce,OLo),e(w1,VLo),e(w1,_D),e(_D,XLo),e(w1,zLo),e(q,QLo),e(q,A1),e(A1,Fce),e(Fce,WLo),e(A1,HLo),e(A1,bD),e(bD,ULo),e(A1,JLo),e(q,YLo),e(q,y1),e(y1,Tce),e(Tce,KLo),e(y1,ZLo),e(y1,vD),e(vD,e8o),e(y1,o8o),e(q,r8o),e(q,L1),e(L1,Mce),e(Mce,t8o),e(L1,a8o),e(L1,FD),e(FD,n8o),e(L1,s8o),e(q,l8o),e(q,x1),e(x1,Ece),e(Ece,i8o),e(x1,d8o),e(x1,TD),e(TD,c8o),e(x1,f8o),e(q,m8o),e(q,$1),e($1,Cce),e(Cce,g8o),e($1,h8o),e($1,MD),e(MD,p8o),e($1,u8o),e(q,_8o),e(q,k1),e(k1,wce),e(wce,b8o),e(k1,v8o),e(k1,ED),e(ED,F8o),e(k1,T8o),e(q,M8o),e(q,S1),e(S1,Ace),e(Ace,E8o),e(S1,C8o),e(S1,CD),e(CD,w8o),e(S1,A8o),e(q,y8o),e(q,R1),e(R1,yce),e(yce,L8o),e(R1,x8o),e(R1,wD),e(wD,$8o),e(R1,k8o),e(q,S8o),e(q,B1),e(B1,Lce),e(Lce,R8o),e(B1,B8o),e(B1,AD),e(AD,P8o),e(B1,I8o),e(q,q8o),e(q,P1),e(P1,xce),e(xce,N8o),e(P1,j8o),e(P1,yD),e(yD,D8o),e(P1,G8o),e(q,O8o),e(q,I1),e(I1,$ce),e($ce,V8o),e(I1,X8o),e(I1,LD),e(LD,z8o),e(I1,Q8o),e(q,W8o),e(q,q1),e(q1,kce),e(kce,H8o),e(q1,U8o),e(q1,xD),e(xD,J8o),e(q1,Y8o),e(q,K8o),e(q,N1),e(N1,Sce),e(Sce,Z8o),e(N1,exo),e(N1,$D),e($D,oxo),e(N1,rxo),e(q,txo),e(q,j1),e(j1,Rce),e(Rce,axo),e(j1,nxo),e(j1,kD),e(kD,sxo),e(j1,lxo),e(q,ixo),e(q,D1),e(D1,Bce),e(Bce,dxo),e(D1,cxo),e(D1,SD),e(SD,fxo),e(D1,mxo),e(q,gxo),e(q,G1),e(G1,Pce),e(Pce,hxo),e(G1,pxo),e(G1,RD),e(RD,uxo),e(G1,_xo),e(q,bxo),e(q,O1),e(O1,Ice),e(Ice,vxo),e(O1,Fxo),e(O1,BD),e(BD,Txo),e(O1,Mxo),e(q,Exo),e(q,V1),e(V1,qce),e(qce,Cxo),e(V1,wxo),e(V1,PD),e(PD,Axo),e(V1,yxo),e(q,Lxo),e(q,X1),e(X1,Nce),e(Nce,xxo),e(X1,$xo),e(X1,ID),e(ID,kxo),e(X1,Sxo),e(q,Rxo),e(q,z1),e(z1,jce),e(jce,Bxo),e(z1,Pxo),e(z1,qD),e(qD,Ixo),e(z1,qxo),e(q,Nxo),e(q,Q1),e(Q1,Dce),e(Dce,jxo),e(Q1,Dxo),e(Q1,ND),e(ND,Gxo),e(Q1,Oxo),e(q,Vxo),e(q,W1),e(W1,Gce),e(Gce,Xxo),e(W1,zxo),e(W1,jD),e(jD,Qxo),e(W1,Wxo),e(q,Hxo),e(q,H1),e(H1,Oce),e(Oce,Uxo),e(H1,Jxo),e(H1,DD),e(DD,Yxo),e(H1,Kxo),e(q,Zxo),e(q,U1),e(U1,Vce),e(Vce,e9o),e(U1,o9o),e(U1,GD),e(GD,r9o),e(U1,t9o),e(q,a9o),e(q,J1),e(J1,Xce),e(Xce,n9o),e(J1,s9o),e(J1,OD),e(OD,l9o),e(J1,i9o),e(q,d9o),e(q,Y1),e(Y1,zce),e(zce,c9o),e(Y1,f9o),e(Y1,VD),e(VD,m9o),e(Y1,g9o),e(q,h9o),e(q,K1),e(K1,Qce),e(Qce,p9o),e(K1,u9o),e(K1,XD),e(XD,_9o),e(K1,b9o),e(q,v9o),e(q,Z1),e(Z1,Wce),e(Wce,F9o),e(Z1,T9o),e(Z1,zD),e(zD,M9o),e(Z1,E9o),e(q,C9o),e(q,eb),e(eb,Hce),e(Hce,w9o),e(eb,A9o),e(eb,QD),e(QD,y9o),e(eb,L9o),e(q,x9o),e(q,ob),e(ob,Uce),e(Uce,$9o),e(ob,k9o),e(ob,WD),e(WD,S9o),e(ob,R9o),e(q,B9o),e(q,rb),e(rb,Jce),e(Jce,P9o),e(rb,I9o),e(rb,HD),e(HD,q9o),e(rb,N9o),e(q,j9o),e(q,tb),e(tb,Yce),e(Yce,D9o),e(tb,G9o),e(tb,UD),e(UD,O9o),e(tb,V9o),e(q,X9o),e(q,ab),e(ab,Kce),e(Kce,z9o),e(ab,Q9o),e(ab,JD),e(JD,W9o),e(ab,H9o),e(q,U9o),e(q,nb),e(nb,Zce),e(Zce,J9o),e(nb,Y9o),e(nb,YD),e(YD,K9o),e(nb,Z9o),e(q,e$o),e(q,sb),e(sb,efe),e(efe,o$o),e(sb,r$o),e(sb,KD),e(KD,t$o),e(sb,a$o),e(q,n$o),e(q,lb),e(lb,ofe),e(ofe,s$o),e(lb,l$o),e(lb,ZD),e(ZD,i$o),e(lb,d$o),e(q,c$o),e(q,ib),e(ib,rfe),e(rfe,f$o),e(ib,m$o),e(ib,eG),e(eG,g$o),e(ib,h$o),e(q,p$o),e(q,db),e(db,tfe),e(tfe,u$o),e(db,_$o),e(db,oG),e(oG,b$o),e(db,v$o),e(q,F$o),e(q,cb),e(cb,afe),e(afe,T$o),e(cb,M$o),e(cb,rG),e(rG,E$o),e(cb,C$o),e(Ze,w$o),e(Ze,fb),e(fb,A$o),e(fb,nfe),e(nfe,y$o),e(fb,L$o),e(fb,sfe),e(sfe,x$o),e(Ze,$$o),M(mb,Ze,null),b(f,fIe,_),b(f,Di,_),e(Di,gb),e(gb,lfe),M(KA,lfe,null),e(Di,k$o),e(Di,ife),e(ife,S$o),b(f,mIe,_),b(f,Bo,_),M(ZA,Bo,null),e(Bo,R$o),e(Bo,Gi),e(Gi,B$o),e(Gi,tG),e(tG,P$o),e(Gi,I$o),e(Gi,aG),e(aG,q$o),e(Gi,N$o),e(Bo,j$o),e(Bo,ey),e(ey,D$o),e(ey,dfe),e(dfe,G$o),e(ey,O$o),e(Bo,V$o),e(Bo,lt),M(oy,lt,null),e(lt,X$o),e(lt,cfe),e(cfe,z$o),e(lt,Q$o),e(lt,Oi),e(Oi,W$o),e(Oi,ffe),e(ffe,H$o),e(Oi,U$o),e(Oi,nG),e(nG,J$o),e(Oi,Y$o),e(lt,K$o),M(hb,lt,null),e(Bo,Z$o),e(Bo,eo),M(ry,eo,null),e(eo,eko),e(eo,mfe),e(mfe,oko),e(eo,rko),e(eo,Sa),e(Sa,tko),e(Sa,gfe),e(gfe,ako),e(Sa,nko),e(Sa,hfe),e(hfe,sko),e(Sa,lko),e(Sa,pfe),e(pfe,iko),e(Sa,dko),e(eo,cko),e(eo,Y),e(Y,pb),e(pb,ufe),e(ufe,fko),e(pb,mko),e(pb,sG),e(sG,gko),e(pb,hko),e(Y,pko),e(Y,ub),e(ub,_fe),e(_fe,uko),e(ub,_ko),e(ub,lG),e(lG,bko),e(ub,vko),e(Y,Fko),e(Y,_b),e(_b,bfe),e(bfe,Tko),e(_b,Mko),e(_b,iG),e(iG,Eko),e(_b,Cko),e(Y,wko),e(Y,bb),e(bb,vfe),e(vfe,Ako),e(bb,yko),e(bb,dG),e(dG,Lko),e(bb,xko),e(Y,$ko),e(Y,vb),e(vb,Ffe),e(Ffe,kko),e(vb,Sko),e(vb,cG),e(cG,Rko),e(vb,Bko),e(Y,Pko),e(Y,Fb),e(Fb,Tfe),e(Tfe,Iko),e(Fb,qko),e(Fb,fG),e(fG,Nko),e(Fb,jko),e(Y,Dko),e(Y,Tb),e(Tb,Mfe),e(Mfe,Gko),e(Tb,Oko),e(Tb,mG),e(mG,Vko),e(Tb,Xko),e(Y,zko),e(Y,Mb),e(Mb,Efe),e(Efe,Qko),e(Mb,Wko),e(Mb,gG),e(gG,Hko),e(Mb,Uko),e(Y,Jko),e(Y,Eb),e(Eb,Cfe),e(Cfe,Yko),e(Eb,Kko),e(Eb,hG),e(hG,Zko),e(Eb,eSo),e(Y,oSo),e(Y,Cb),e(Cb,wfe),e(wfe,rSo),e(Cb,tSo),e(Cb,pG),e(pG,aSo),e(Cb,nSo),e(Y,sSo),e(Y,wb),e(wb,Afe),e(Afe,lSo),e(wb,iSo),e(wb,uG),e(uG,dSo),e(wb,cSo),e(Y,fSo),e(Y,Ab),e(Ab,yfe),e(yfe,mSo),e(Ab,gSo),e(Ab,_G),e(_G,hSo),e(Ab,pSo),e(Y,uSo),e(Y,yb),e(yb,Lfe),e(Lfe,_So),e(yb,bSo),e(yb,bG),e(bG,vSo),e(yb,FSo),e(Y,TSo),e(Y,Lb),e(Lb,xfe),e(xfe,MSo),e(Lb,ESo),e(Lb,vG),e(vG,CSo),e(Lb,wSo),e(Y,ASo),e(Y,xb),e(xb,$fe),e($fe,ySo),e(xb,LSo),e(xb,FG),e(FG,xSo),e(xb,$So),e(Y,kSo),e(Y,$b),e($b,kfe),e(kfe,SSo),e($b,RSo),e($b,TG),e(TG,BSo),e($b,PSo),e(Y,ISo),e(Y,kb),e(kb,Sfe),e(Sfe,qSo),e(kb,NSo),e(kb,MG),e(MG,jSo),e(kb,DSo),e(Y,GSo),e(Y,Sb),e(Sb,Rfe),e(Rfe,OSo),e(Sb,VSo),e(Sb,EG),e(EG,XSo),e(Sb,zSo),e(Y,QSo),e(Y,Rb),e(Rb,Bfe),e(Bfe,WSo),e(Rb,HSo),e(Rb,CG),e(CG,USo),e(Rb,JSo),e(Y,YSo),e(Y,Bb),e(Bb,Pfe),e(Pfe,KSo),e(Bb,ZSo),e(Bb,wG),e(wG,eRo),e(Bb,oRo),e(Y,rRo),e(Y,Pb),e(Pb,Ife),e(Ife,tRo),e(Pb,aRo),e(Pb,AG),e(AG,nRo),e(Pb,sRo),e(Y,lRo),e(Y,Ib),e(Ib,qfe),e(qfe,iRo),e(Ib,dRo),e(Ib,yG),e(yG,cRo),e(Ib,fRo),e(Y,mRo),e(Y,qb),e(qb,Nfe),e(Nfe,gRo),e(qb,hRo),e(qb,LG),e(LG,pRo),e(qb,uRo),e(Y,_Ro),e(Y,Nb),e(Nb,jfe),e(jfe,bRo),e(Nb,vRo),e(Nb,xG),e(xG,FRo),e(Nb,TRo),e(Y,MRo),e(Y,jb),e(jb,Dfe),e(Dfe,ERo),e(jb,CRo),e(jb,$G),e($G,wRo),e(jb,ARo),e(Y,yRo),e(Y,Db),e(Db,Gfe),e(Gfe,LRo),e(Db,xRo),e(Db,kG),e(kG,$Ro),e(Db,kRo),e(Y,SRo),e(Y,Gb),e(Gb,Ofe),e(Ofe,RRo),e(Gb,BRo),e(Gb,SG),e(SG,PRo),e(Gb,IRo),e(Y,qRo),e(Y,Ob),e(Ob,Vfe),e(Vfe,NRo),e(Ob,jRo),e(Ob,RG),e(RG,DRo),e(Ob,GRo),e(Y,ORo),e(Y,Vb),e(Vb,Xfe),e(Xfe,VRo),e(Vb,XRo),e(Vb,BG),e(BG,zRo),e(Vb,QRo),e(eo,WRo),e(eo,Xb),e(Xb,HRo),e(Xb,zfe),e(zfe,URo),e(Xb,JRo),e(Xb,Qfe),e(Qfe,YRo),e(eo,KRo),M(zb,eo,null),b(f,gIe,_),b(f,Vi,_),e(Vi,Qb),e(Qb,Wfe),M(ty,Wfe,null),e(Vi,ZRo),e(Vi,Hfe),e(Hfe,eBo),b(f,hIe,_),b(f,Po,_),M(ay,Po,null),e(Po,oBo),e(Po,Xi),e(Xi,rBo),e(Xi,PG),e(PG,tBo),e(Xi,aBo),e(Xi,IG),e(IG,nBo),e(Xi,sBo),e(Po,lBo),e(Po,ny),e(ny,iBo),e(ny,Ufe),e(Ufe,dBo),e(ny,cBo),e(Po,fBo),e(Po,it),M(sy,it,null),e(it,mBo),e(it,Jfe),e(Jfe,gBo),e(it,hBo),e(it,zi),e(zi,pBo),e(zi,Yfe),e(Yfe,uBo),e(zi,_Bo),e(zi,qG),e(qG,bBo),e(zi,vBo),e(it,FBo),M(Wb,it,null),e(Po,TBo),e(Po,oo),M(ly,oo,null),e(oo,MBo),e(oo,Kfe),e(Kfe,EBo),e(oo,CBo),e(oo,Ra),e(Ra,wBo),e(Ra,Zfe),e(Zfe,ABo),e(Ra,yBo),e(Ra,eme),e(eme,LBo),e(Ra,xBo),e(Ra,ome),e(ome,$Bo),e(Ra,kBo),e(oo,SBo),e(oo,Yr),e(Yr,Hb),e(Hb,rme),e(rme,RBo),e(Hb,BBo),e(Hb,NG),e(NG,PBo),e(Hb,IBo),e(Yr,qBo),e(Yr,Ub),e(Ub,tme),e(tme,NBo),e(Ub,jBo),e(Ub,jG),e(jG,DBo),e(Ub,GBo),e(Yr,OBo),e(Yr,Jb),e(Jb,ame),e(ame,VBo),e(Jb,XBo),e(Jb,DG),e(DG,zBo),e(Jb,QBo),e(Yr,WBo),e(Yr,Yb),e(Yb,nme),e(nme,HBo),e(Yb,UBo),e(Yb,GG),e(GG,JBo),e(Yb,YBo),e(Yr,KBo),e(Yr,Kb),e(Kb,sme),e(sme,ZBo),e(Kb,ePo),e(Kb,OG),e(OG,oPo),e(Kb,rPo),e(oo,tPo),e(oo,Zb),e(Zb,aPo),e(Zb,lme),e(lme,nPo),e(Zb,sPo),e(Zb,ime),e(ime,lPo),e(oo,iPo),M(e2,oo,null),b(f,pIe,_),b(f,Qi,_),e(Qi,o2),e(o2,dme),M(iy,dme,null),e(Qi,dPo),e(Qi,cme),e(cme,cPo),b(f,uIe,_),b(f,Io,_),M(dy,Io,null),e(Io,fPo),e(Io,Wi),e(Wi,mPo),e(Wi,VG),e(VG,gPo),e(Wi,hPo),e(Wi,XG),e(XG,pPo),e(Wi,uPo),e(Io,_Po),e(Io,cy),e(cy,bPo),e(cy,fme),e(fme,vPo),e(cy,FPo),e(Io,TPo),e(Io,dt),M(fy,dt,null),e(dt,MPo),e(dt,mme),e(mme,EPo),e(dt,CPo),e(dt,Hi),e(Hi,wPo),e(Hi,gme),e(gme,APo),e(Hi,yPo),e(Hi,zG),e(zG,LPo),e(Hi,xPo),e(dt,$Po),M(r2,dt,null),e(Io,kPo),e(Io,ro),M(my,ro,null),e(ro,SPo),e(ro,hme),e(hme,RPo),e(ro,BPo),e(ro,Ba),e(Ba,PPo),e(Ba,pme),e(pme,IPo),e(Ba,qPo),e(Ba,ume),e(ume,NPo),e(Ba,jPo),e(Ba,_me),e(_me,DPo),e(Ba,GPo),e(ro,OPo),e(ro,W),e(W,t2),e(t2,bme),e(bme,VPo),e(t2,XPo),e(t2,QG),e(QG,zPo),e(t2,QPo),e(W,WPo),e(W,a2),e(a2,vme),e(vme,HPo),e(a2,UPo),e(a2,WG),e(WG,JPo),e(a2,YPo),e(W,KPo),e(W,n2),e(n2,Fme),e(Fme,ZPo),e(n2,eIo),e(n2,HG),e(HG,oIo),e(n2,rIo),e(W,tIo),e(W,s2),e(s2,Tme),e(Tme,aIo),e(s2,nIo),e(s2,UG),e(UG,sIo),e(s2,lIo),e(W,iIo),e(W,l2),e(l2,Mme),e(Mme,dIo),e(l2,cIo),e(l2,JG),e(JG,fIo),e(l2,mIo),e(W,gIo),e(W,i2),e(i2,Eme),e(Eme,hIo),e(i2,pIo),e(i2,YG),e(YG,uIo),e(i2,_Io),e(W,bIo),e(W,d2),e(d2,Cme),e(Cme,vIo),e(d2,FIo),e(d2,KG),e(KG,TIo),e(d2,MIo),e(W,EIo),e(W,c2),e(c2,wme),e(wme,CIo),e(c2,wIo),e(c2,ZG),e(ZG,AIo),e(c2,yIo),e(W,LIo),e(W,f2),e(f2,Ame),e(Ame,xIo),e(f2,$Io),e(f2,eO),e(eO,kIo),e(f2,SIo),e(W,RIo),e(W,m2),e(m2,yme),e(yme,BIo),e(m2,PIo),e(m2,oO),e(oO,IIo),e(m2,qIo),e(W,NIo),e(W,g2),e(g2,Lme),e(Lme,jIo),e(g2,DIo),e(g2,rO),e(rO,GIo),e(g2,OIo),e(W,VIo),e(W,h2),e(h2,xme),e(xme,XIo),e(h2,zIo),e(h2,tO),e(tO,QIo),e(h2,WIo),e(W,HIo),e(W,p2),e(p2,$me),e($me,UIo),e(p2,JIo),e(p2,aO),e(aO,YIo),e(p2,KIo),e(W,ZIo),e(W,u2),e(u2,kme),e(kme,eqo),e(u2,oqo),e(u2,nO),e(nO,rqo),e(u2,tqo),e(W,aqo),e(W,_2),e(_2,Sme),e(Sme,nqo),e(_2,sqo),e(_2,sO),e(sO,lqo),e(_2,iqo),e(W,dqo),e(W,b2),e(b2,Rme),e(Rme,cqo),e(b2,fqo),e(b2,lO),e(lO,mqo),e(b2,gqo),e(W,hqo),e(W,v2),e(v2,Bme),e(Bme,pqo),e(v2,uqo),e(v2,iO),e(iO,_qo),e(v2,bqo),e(W,vqo),e(W,F2),e(F2,Pme),e(Pme,Fqo),e(F2,Tqo),e(F2,dO),e(dO,Mqo),e(F2,Eqo),e(W,Cqo),e(W,T2),e(T2,Ime),e(Ime,wqo),e(T2,Aqo),e(T2,cO),e(cO,yqo),e(T2,Lqo),e(W,xqo),e(W,M2),e(M2,qme),e(qme,$qo),e(M2,kqo),e(M2,fO),e(fO,Sqo),e(M2,Rqo),e(W,Bqo),e(W,E2),e(E2,Nme),e(Nme,Pqo),e(E2,Iqo),e(E2,mO),e(mO,qqo),e(E2,Nqo),e(W,jqo),e(W,C2),e(C2,jme),e(jme,Dqo),e(C2,Gqo),e(C2,gO),e(gO,Oqo),e(C2,Vqo),e(W,Xqo),e(W,w2),e(w2,Dme),e(Dme,zqo),e(w2,Qqo),e(w2,hO),e(hO,Wqo),e(w2,Hqo),e(W,Uqo),e(W,A2),e(A2,Gme),e(Gme,Jqo),e(A2,Yqo),e(A2,pO),e(pO,Kqo),e(A2,Zqo),e(W,eNo),e(W,y2),e(y2,Ome),e(Ome,oNo),e(y2,rNo),e(y2,uO),e(uO,tNo),e(y2,aNo),e(W,nNo),e(W,L2),e(L2,Vme),e(Vme,sNo),e(L2,lNo),e(L2,_O),e(_O,iNo),e(L2,dNo),e(W,cNo),e(W,x2),e(x2,Xme),e(Xme,fNo),e(x2,mNo),e(x2,bO),e(bO,gNo),e(x2,hNo),e(W,pNo),e(W,$2),e($2,zme),e(zme,uNo),e($2,_No),e($2,vO),e(vO,bNo),e($2,vNo),e(W,FNo),e(W,k2),e(k2,Qme),e(Qme,TNo),e(k2,MNo),e(k2,FO),e(FO,ENo),e(k2,CNo),e(W,wNo),e(W,S2),e(S2,Wme),e(Wme,ANo),e(S2,yNo),e(S2,TO),e(TO,LNo),e(S2,xNo),e(W,$No),e(W,R2),e(R2,Hme),e(Hme,kNo),e(R2,SNo),e(R2,MO),e(MO,RNo),e(R2,BNo),e(W,PNo),e(W,B2),e(B2,Ume),e(Ume,INo),e(B2,qNo),e(B2,EO),e(EO,NNo),e(B2,jNo),e(W,DNo),e(W,P2),e(P2,Jme),e(Jme,GNo),e(P2,ONo),e(P2,CO),e(CO,VNo),e(P2,XNo),e(W,zNo),e(W,I2),e(I2,Yme),e(Yme,QNo),e(I2,WNo),e(I2,wO),e(wO,HNo),e(I2,UNo),e(ro,JNo),e(ro,q2),e(q2,YNo),e(q2,Kme),e(Kme,KNo),e(q2,ZNo),e(q2,Zme),e(Zme,ejo),e(ro,ojo),M(N2,ro,null),b(f,_Ie,_),b(f,Ui,_),e(Ui,j2),e(j2,ege),M(gy,ege,null),e(Ui,rjo),e(Ui,oge),e(oge,tjo),b(f,bIe,_),b(f,qo,_),M(hy,qo,null),e(qo,ajo),e(qo,Ji),e(Ji,njo),e(Ji,AO),e(AO,sjo),e(Ji,ljo),e(Ji,yO),e(yO,ijo),e(Ji,djo),e(qo,cjo),e(qo,py),e(py,fjo),e(py,rge),e(rge,mjo),e(py,gjo),e(qo,hjo),e(qo,ct),M(uy,ct,null),e(ct,pjo),e(ct,tge),e(tge,ujo),e(ct,_jo),e(ct,Yi),e(Yi,bjo),e(Yi,age),e(age,vjo),e(Yi,Fjo),e(Yi,LO),e(LO,Tjo),e(Yi,Mjo),e(ct,Ejo),M(D2,ct,null),e(qo,Cjo),e(qo,to),M(_y,to,null),e(to,wjo),e(to,nge),e(nge,Ajo),e(to,yjo),e(to,Pa),e(Pa,Ljo),e(Pa,sge),e(sge,xjo),e(Pa,$jo),e(Pa,lge),e(lge,kjo),e(Pa,Sjo),e(Pa,ige),e(ige,Rjo),e(Pa,Bjo),e(to,Pjo),e(to,G),e(G,G2),e(G2,dge),e(dge,Ijo),e(G2,qjo),e(G2,xO),e(xO,Njo),e(G2,jjo),e(G,Djo),e(G,O2),e(O2,cge),e(cge,Gjo),e(O2,Ojo),e(O2,$O),e($O,Vjo),e(O2,Xjo),e(G,zjo),e(G,V2),e(V2,fge),e(fge,Qjo),e(V2,Wjo),e(V2,kO),e(kO,Hjo),e(V2,Ujo),e(G,Jjo),e(G,X2),e(X2,mge),e(mge,Yjo),e(X2,Kjo),e(X2,SO),e(SO,Zjo),e(X2,eDo),e(G,oDo),e(G,z2),e(z2,gge),e(gge,rDo),e(z2,tDo),e(z2,RO),e(RO,aDo),e(z2,nDo),e(G,sDo),e(G,Q2),e(Q2,hge),e(hge,lDo),e(Q2,iDo),e(Q2,BO),e(BO,dDo),e(Q2,cDo),e(G,fDo),e(G,W2),e(W2,pge),e(pge,mDo),e(W2,gDo),e(W2,PO),e(PO,hDo),e(W2,pDo),e(G,uDo),e(G,H2),e(H2,uge),e(uge,_Do),e(H2,bDo),e(H2,IO),e(IO,vDo),e(H2,FDo),e(G,TDo),e(G,U2),e(U2,_ge),e(_ge,MDo),e(U2,EDo),e(U2,qO),e(qO,CDo),e(U2,wDo),e(G,ADo),e(G,J2),e(J2,bge),e(bge,yDo),e(J2,LDo),e(J2,NO),e(NO,xDo),e(J2,$Do),e(G,kDo),e(G,Y2),e(Y2,vge),e(vge,SDo),e(Y2,RDo),e(Y2,jO),e(jO,BDo),e(Y2,PDo),e(G,IDo),e(G,K2),e(K2,Fge),e(Fge,qDo),e(K2,NDo),e(K2,DO),e(DO,jDo),e(K2,DDo),e(G,GDo),e(G,Z2),e(Z2,Tge),e(Tge,ODo),e(Z2,VDo),e(Z2,GO),e(GO,XDo),e(Z2,zDo),e(G,QDo),e(G,ev),e(ev,Mge),e(Mge,WDo),e(ev,HDo),e(ev,OO),e(OO,UDo),e(ev,JDo),e(G,YDo),e(G,ov),e(ov,Ege),e(Ege,KDo),e(ov,ZDo),e(ov,VO),e(VO,eGo),e(ov,oGo),e(G,rGo),e(G,rv),e(rv,Cge),e(Cge,tGo),e(rv,aGo),e(rv,XO),e(XO,nGo),e(rv,sGo),e(G,lGo),e(G,tv),e(tv,wge),e(wge,iGo),e(tv,dGo),e(tv,zO),e(zO,cGo),e(tv,fGo),e(G,mGo),e(G,av),e(av,Age),e(Age,gGo),e(av,hGo),e(av,QO),e(QO,pGo),e(av,uGo),e(G,_Go),e(G,nv),e(nv,yge),e(yge,bGo),e(nv,vGo),e(nv,WO),e(WO,FGo),e(nv,TGo),e(G,MGo),e(G,sv),e(sv,Lge),e(Lge,EGo),e(sv,CGo),e(sv,HO),e(HO,wGo),e(sv,AGo),e(G,yGo),e(G,lv),e(lv,xge),e(xge,LGo),e(lv,xGo),e(lv,UO),e(UO,$Go),e(lv,kGo),e(G,SGo),e(G,iv),e(iv,$ge),e($ge,RGo),e(iv,BGo),e(iv,JO),e(JO,PGo),e(iv,IGo),e(G,qGo),e(G,dv),e(dv,kge),e(kge,NGo),e(dv,jGo),e(dv,YO),e(YO,DGo),e(dv,GGo),e(G,OGo),e(G,cv),e(cv,Sge),e(Sge,VGo),e(cv,XGo),e(cv,KO),e(KO,zGo),e(cv,QGo),e(G,WGo),e(G,fv),e(fv,Rge),e(Rge,HGo),e(fv,UGo),e(fv,ZO),e(ZO,JGo),e(fv,YGo),e(G,KGo),e(G,mv),e(mv,Bge),e(Bge,ZGo),e(mv,eOo),e(mv,eV),e(eV,oOo),e(mv,rOo),e(G,tOo),e(G,gv),e(gv,Pge),e(Pge,aOo),e(gv,nOo),e(gv,oV),e(oV,sOo),e(gv,lOo),e(G,iOo),e(G,hv),e(hv,Ige),e(Ige,dOo),e(hv,cOo),e(hv,rV),e(rV,fOo),e(hv,mOo),e(G,gOo),e(G,pv),e(pv,qge),e(qge,hOo),e(pv,pOo),e(pv,tV),e(tV,uOo),e(pv,_Oo),e(G,bOo),e(G,uv),e(uv,Nge),e(Nge,vOo),e(uv,FOo),e(uv,aV),e(aV,TOo),e(uv,MOo),e(G,EOo),e(G,_v),e(_v,jge),e(jge,COo),e(_v,wOo),e(_v,nV),e(nV,AOo),e(_v,yOo),e(G,LOo),e(G,bv),e(bv,Dge),e(Dge,xOo),e(bv,$Oo),e(bv,sV),e(sV,kOo),e(bv,SOo),e(G,ROo),e(G,vv),e(vv,Gge),e(Gge,BOo),e(vv,POo),e(vv,lV),e(lV,IOo),e(vv,qOo),e(G,NOo),e(G,Fv),e(Fv,Oge),e(Oge,jOo),e(Fv,DOo),e(Fv,iV),e(iV,GOo),e(Fv,OOo),e(G,VOo),e(G,Tv),e(Tv,Vge),e(Vge,XOo),e(Tv,zOo),e(Tv,dV),e(dV,QOo),e(Tv,WOo),e(G,HOo),e(G,Mv),e(Mv,Xge),e(Xge,UOo),e(Mv,JOo),e(Mv,cV),e(cV,YOo),e(Mv,KOo),e(G,ZOo),e(G,Ev),e(Ev,zge),e(zge,eVo),e(Ev,oVo),e(Ev,fV),e(fV,rVo),e(Ev,tVo),e(G,aVo),e(G,Cv),e(Cv,Qge),e(Qge,nVo),e(Cv,sVo),e(Cv,mV),e(mV,lVo),e(Cv,iVo),e(G,dVo),e(G,wv),e(wv,Wge),e(Wge,cVo),e(wv,fVo),e(wv,gV),e(gV,mVo),e(wv,gVo),e(G,hVo),e(G,Av),e(Av,Hge),e(Hge,pVo),e(Av,uVo),e(Av,hV),e(hV,_Vo),e(Av,bVo),e(to,vVo),e(to,yv),e(yv,FVo),e(yv,Uge),e(Uge,TVo),e(yv,MVo),e(yv,Jge),e(Jge,EVo),e(to,CVo),M(Lv,to,null),b(f,vIe,_),b(f,Ki,_),e(Ki,xv),e(xv,Yge),M(by,Yge,null),e(Ki,wVo),e(Ki,Kge),e(Kge,AVo),b(f,FIe,_),b(f,No,_),M(vy,No,null),e(No,yVo),e(No,Zi),e(Zi,LVo),e(Zi,pV),e(pV,xVo),e(Zi,$Vo),e(Zi,uV),e(uV,kVo),e(Zi,SVo),e(No,RVo),e(No,Fy),e(Fy,BVo),e(Fy,Zge),e(Zge,PVo),e(Fy,IVo),e(No,qVo),e(No,ft),M(Ty,ft,null),e(ft,NVo),e(ft,ehe),e(ehe,jVo),e(ft,DVo),e(ft,ed),e(ed,GVo),e(ed,ohe),e(ohe,OVo),e(ed,VVo),e(ed,_V),e(_V,XVo),e(ed,zVo),e(ft,QVo),M($v,ft,null),e(No,WVo),e(No,ao),M(My,ao,null),e(ao,HVo),e(ao,rhe),e(rhe,UVo),e(ao,JVo),e(ao,Ia),e(Ia,YVo),e(Ia,the),e(the,KVo),e(Ia,ZVo),e(Ia,ahe),e(ahe,eXo),e(Ia,oXo),e(Ia,nhe),e(nhe,rXo),e(Ia,tXo),e(ao,aXo),e(ao,she),e(she,kv),e(kv,lhe),e(lhe,nXo),e(kv,sXo),e(kv,bV),e(bV,lXo),e(kv,iXo),e(ao,dXo),e(ao,Sv),e(Sv,cXo),e(Sv,ihe),e(ihe,fXo),e(Sv,mXo),e(Sv,dhe),e(dhe,gXo),e(ao,hXo),M(Rv,ao,null),b(f,TIe,_),b(f,od,_),e(od,Bv),e(Bv,che),M(Ey,che,null),e(od,pXo),e(od,fhe),e(fhe,uXo),b(f,MIe,_),b(f,jo,_),M(Cy,jo,null),e(jo,_Xo),e(jo,rd),e(rd,bXo),e(rd,vV),e(vV,vXo),e(rd,FXo),e(rd,FV),e(FV,TXo),e(rd,MXo),e(jo,EXo),e(jo,wy),e(wy,CXo),e(wy,mhe),e(mhe,wXo),e(wy,AXo),e(jo,yXo),e(jo,mt),M(Ay,mt,null),e(mt,LXo),e(mt,ghe),e(ghe,xXo),e(mt,$Xo),e(mt,td),e(td,kXo),e(td,hhe),e(hhe,SXo),e(td,RXo),e(td,TV),e(TV,BXo),e(td,PXo),e(mt,IXo),M(Pv,mt,null),e(jo,qXo),e(jo,no),M(yy,no,null),e(no,NXo),e(no,phe),e(phe,jXo),e(no,DXo),e(no,qa),e(qa,GXo),e(qa,uhe),e(uhe,OXo),e(qa,VXo),e(qa,_he),e(_he,XXo),e(qa,zXo),e(qa,bhe),e(bhe,QXo),e(qa,WXo),e(no,HXo),e(no,Fe),e(Fe,Iv),e(Iv,vhe),e(vhe,UXo),e(Iv,JXo),e(Iv,MV),e(MV,YXo),e(Iv,KXo),e(Fe,ZXo),e(Fe,qv),e(qv,Fhe),e(Fhe,ezo),e(qv,ozo),e(qv,EV),e(EV,rzo),e(qv,tzo),e(Fe,azo),e(Fe,Nv),e(Nv,The),e(The,nzo),e(Nv,szo),e(Nv,CV),e(CV,lzo),e(Nv,izo),e(Fe,dzo),e(Fe,Bs),e(Bs,Mhe),e(Mhe,czo),e(Bs,fzo),e(Bs,wV),e(wV,mzo),e(Bs,gzo),e(Bs,AV),e(AV,hzo),e(Bs,pzo),e(Fe,uzo),e(Fe,jv),e(jv,Ehe),e(Ehe,_zo),e(jv,bzo),e(jv,yV),e(yV,vzo),e(jv,Fzo),e(Fe,Tzo),e(Fe,gt),e(gt,Che),e(Che,Mzo),e(gt,Ezo),e(gt,LV),e(LV,Czo),e(gt,wzo),e(gt,xV),e(xV,Azo),e(gt,yzo),e(gt,$V),e($V,Lzo),e(gt,xzo),e(Fe,$zo),e(Fe,Dv),e(Dv,whe),e(whe,kzo),e(Dv,Szo),e(Dv,kV),e(kV,Rzo),e(Dv,Bzo),e(Fe,Pzo),e(Fe,Gv),e(Gv,Ahe),e(Ahe,Izo),e(Gv,qzo),e(Gv,SV),e(SV,Nzo),e(Gv,jzo),e(Fe,Dzo),e(Fe,Ov),e(Ov,yhe),e(yhe,Gzo),e(Ov,Ozo),e(Ov,RV),e(RV,Vzo),e(Ov,Xzo),e(Fe,zzo),e(Fe,Vv),e(Vv,Lhe),e(Lhe,Qzo),e(Vv,Wzo),e(Vv,BV),e(BV,Hzo),e(Vv,Uzo),e(Fe,Jzo),e(Fe,Xv),e(Xv,xhe),e(xhe,Yzo),e(Xv,Kzo),e(Xv,PV),e(PV,Zzo),e(Xv,eQo),e(Fe,oQo),e(Fe,zv),e(zv,$he),e($he,rQo),e(zv,tQo),e(zv,IV),e(IV,aQo),e(zv,nQo),e(Fe,sQo),e(Fe,Qv),e(Qv,khe),e(khe,lQo),e(Qv,iQo),e(Qv,qV),e(qV,dQo),e(Qv,cQo),e(no,fQo),e(no,Wv),e(Wv,mQo),e(Wv,She),e(She,gQo),e(Wv,hQo),e(Wv,Rhe),e(Rhe,pQo),e(no,uQo),M(Hv,no,null),b(f,EIe,_),b(f,ad,_),e(ad,Uv),e(Uv,Bhe),M(Ly,Bhe,null),e(ad,_Qo),e(ad,Phe),e(Phe,bQo),b(f,CIe,_),b(f,Do,_),M(xy,Do,null),e(Do,vQo),e(Do,nd),e(nd,FQo),e(nd,NV),e(NV,TQo),e(nd,MQo),e(nd,jV),e(jV,EQo),e(nd,CQo),e(Do,wQo),e(Do,$y),e($y,AQo),e($y,Ihe),e(Ihe,yQo),e($y,LQo),e(Do,xQo),e(Do,ht),M(ky,ht,null),e(ht,$Qo),e(ht,qhe),e(qhe,kQo),e(ht,SQo),e(ht,sd),e(sd,RQo),e(sd,Nhe),e(Nhe,BQo),e(sd,PQo),e(sd,DV),e(DV,IQo),e(sd,qQo),e(ht,NQo),M(Jv,ht,null),e(Do,jQo),e(Do,so),M(Sy,so,null),e(so,DQo),e(so,jhe),e(jhe,GQo),e(so,OQo),e(so,Na),e(Na,VQo),e(Na,Dhe),e(Dhe,XQo),e(Na,zQo),e(Na,Ghe),e(Ghe,QQo),e(Na,WQo),e(Na,Ohe),e(Ohe,HQo),e(Na,UQo),e(so,JQo),e(so,Vhe),e(Vhe,Yv),e(Yv,Xhe),e(Xhe,YQo),e(Yv,KQo),e(Yv,GV),e(GV,ZQo),e(Yv,eWo),e(so,oWo),e(so,Kv),e(Kv,rWo),e(Kv,zhe),e(zhe,tWo),e(Kv,aWo),e(Kv,Qhe),e(Qhe,nWo),e(so,sWo),M(Zv,so,null),b(f,wIe,_),b(f,ld,_),e(ld,eF),e(eF,Whe),M(Ry,Whe,null),e(ld,lWo),e(ld,Hhe),e(Hhe,iWo),b(f,AIe,_),b(f,Go,_),M(By,Go,null),e(Go,dWo),e(Go,id),e(id,cWo),e(id,OV),e(OV,fWo),e(id,mWo),e(id,VV),e(VV,gWo),e(id,hWo),e(Go,pWo),e(Go,Py),e(Py,uWo),e(Py,Uhe),e(Uhe,_Wo),e(Py,bWo),e(Go,vWo),e(Go,pt),M(Iy,pt,null),e(pt,FWo),e(pt,Jhe),e(Jhe,TWo),e(pt,MWo),e(pt,dd),e(dd,EWo),e(dd,Yhe),e(Yhe,CWo),e(dd,wWo),e(dd,XV),e(XV,AWo),e(dd,yWo),e(pt,LWo),M(oF,pt,null),e(Go,xWo),e(Go,lo),M(qy,lo,null),e(lo,$Wo),e(lo,Khe),e(Khe,kWo),e(lo,SWo),e(lo,ja),e(ja,RWo),e(ja,Zhe),e(Zhe,BWo),e(ja,PWo),e(ja,epe),e(epe,IWo),e(ja,qWo),e(ja,ope),e(ope,NWo),e(ja,jWo),e(lo,DWo),e(lo,Ne),e(Ne,rF),e(rF,rpe),e(rpe,GWo),e(rF,OWo),e(rF,zV),e(zV,VWo),e(rF,XWo),e(Ne,zWo),e(Ne,tF),e(tF,tpe),e(tpe,QWo),e(tF,WWo),e(tF,QV),e(QV,HWo),e(tF,UWo),e(Ne,JWo),e(Ne,aF),e(aF,ape),e(ape,YWo),e(aF,KWo),e(aF,WV),e(WV,ZWo),e(aF,eHo),e(Ne,oHo),e(Ne,nF),e(nF,npe),e(npe,rHo),e(nF,tHo),e(nF,HV),e(HV,aHo),e(nF,nHo),e(Ne,sHo),e(Ne,sF),e(sF,spe),e(spe,lHo),e(sF,iHo),e(sF,UV),e(UV,dHo),e(sF,cHo),e(Ne,fHo),e(Ne,lF),e(lF,lpe),e(lpe,mHo),e(lF,gHo),e(lF,JV),e(JV,hHo),e(lF,pHo),e(Ne,uHo),e(Ne,iF),e(iF,ipe),e(ipe,_Ho),e(iF,bHo),e(iF,YV),e(YV,vHo),e(iF,FHo),e(Ne,THo),e(Ne,dF),e(dF,dpe),e(dpe,MHo),e(dF,EHo),e(dF,KV),e(KV,CHo),e(dF,wHo),e(lo,AHo),e(lo,cF),e(cF,yHo),e(cF,cpe),e(cpe,LHo),e(cF,xHo),e(cF,fpe),e(fpe,$Ho),e(lo,kHo),M(fF,lo,null),b(f,yIe,_),b(f,cd,_),e(cd,mF),e(mF,mpe),M(Ny,mpe,null),e(cd,SHo),e(cd,gpe),e(gpe,RHo),b(f,LIe,_),b(f,Oo,_),M(jy,Oo,null),e(Oo,BHo),e(Oo,fd),e(fd,PHo),e(fd,ZV),e(ZV,IHo),e(fd,qHo),e(fd,eX),e(eX,NHo),e(fd,jHo),e(Oo,DHo),e(Oo,Dy),e(Dy,GHo),e(Dy,hpe),e(hpe,OHo),e(Dy,VHo),e(Oo,XHo),e(Oo,ut),M(Gy,ut,null),e(ut,zHo),e(ut,ppe),e(ppe,QHo),e(ut,WHo),e(ut,md),e(md,HHo),e(md,upe),e(upe,UHo),e(md,JHo),e(md,oX),e(oX,YHo),e(md,KHo),e(ut,ZHo),M(gF,ut,null),e(Oo,eUo),e(Oo,io),M(Oy,io,null),e(io,oUo),e(io,_pe),e(_pe,rUo),e(io,tUo),e(io,Da),e(Da,aUo),e(Da,bpe),e(bpe,nUo),e(Da,sUo),e(Da,vpe),e(vpe,lUo),e(Da,iUo),e(Da,Fpe),e(Fpe,dUo),e(Da,cUo),e(io,fUo),e(io,Ga),e(Ga,hF),e(hF,Tpe),e(Tpe,mUo),e(hF,gUo),e(hF,rX),e(rX,hUo),e(hF,pUo),e(Ga,uUo),e(Ga,pF),e(pF,Mpe),e(Mpe,_Uo),e(pF,bUo),e(pF,tX),e(tX,vUo),e(pF,FUo),e(Ga,TUo),e(Ga,uF),e(uF,Epe),e(Epe,MUo),e(uF,EUo),e(uF,aX),e(aX,CUo),e(uF,wUo),e(Ga,AUo),e(Ga,_F),e(_F,Cpe),e(Cpe,yUo),e(_F,LUo),e(_F,nX),e(nX,xUo),e(_F,$Uo),e(io,kUo),e(io,bF),e(bF,SUo),e(bF,wpe),e(wpe,RUo),e(bF,BUo),e(bF,Ape),e(Ape,PUo),e(io,IUo),M(vF,io,null),b(f,xIe,_),b(f,gd,_),e(gd,FF),e(FF,ype),M(Vy,ype,null),e(gd,qUo),e(gd,Lpe),e(Lpe,NUo),b(f,$Ie,_),b(f,Vo,_),M(Xy,Vo,null),e(Vo,jUo),e(Vo,hd),e(hd,DUo),e(hd,sX),e(sX,GUo),e(hd,OUo),e(hd,lX),e(lX,VUo),e(hd,XUo),e(Vo,zUo),e(Vo,zy),e(zy,QUo),e(zy,xpe),e(xpe,WUo),e(zy,HUo),e(Vo,UUo),e(Vo,_t),M(Qy,_t,null),e(_t,JUo),e(_t,$pe),e($pe,YUo),e(_t,KUo),e(_t,pd),e(pd,ZUo),e(pd,kpe),e(kpe,eJo),e(pd,oJo),e(pd,iX),e(iX,rJo),e(pd,tJo),e(_t,aJo),M(TF,_t,null),e(Vo,nJo),e(Vo,co),M(Wy,co,null),e(co,sJo),e(co,Spe),e(Spe,lJo),e(co,iJo),e(co,Oa),e(Oa,dJo),e(Oa,Rpe),e(Rpe,cJo),e(Oa,fJo),e(Oa,Bpe),e(Bpe,mJo),e(Oa,gJo),e(Oa,Ppe),e(Ppe,hJo),e(Oa,pJo),e(co,uJo),e(co,je),e(je,MF),e(MF,Ipe),e(Ipe,_Jo),e(MF,bJo),e(MF,dX),e(dX,vJo),e(MF,FJo),e(je,TJo),e(je,EF),e(EF,qpe),e(qpe,MJo),e(EF,EJo),e(EF,cX),e(cX,CJo),e(EF,wJo),e(je,AJo),e(je,CF),e(CF,Npe),e(Npe,yJo),e(CF,LJo),e(CF,fX),e(fX,xJo),e(CF,$Jo),e(je,kJo),e(je,wF),e(wF,jpe),e(jpe,SJo),e(wF,RJo),e(wF,mX),e(mX,BJo),e(wF,PJo),e(je,IJo),e(je,AF),e(AF,Dpe),e(Dpe,qJo),e(AF,NJo),e(AF,gX),e(gX,jJo),e(AF,DJo),e(je,GJo),e(je,yF),e(yF,Gpe),e(Gpe,OJo),e(yF,VJo),e(yF,hX),e(hX,XJo),e(yF,zJo),e(je,QJo),e(je,LF),e(LF,Ope),e(Ope,WJo),e(LF,HJo),e(LF,pX),e(pX,UJo),e(LF,JJo),e(je,YJo),e(je,xF),e(xF,Vpe),e(Vpe,KJo),e(xF,ZJo),e(xF,uX),e(uX,eYo),e(xF,oYo),e(co,rYo),e(co,$F),e($F,tYo),e($F,Xpe),e(Xpe,aYo),e($F,nYo),e($F,zpe),e(zpe,sYo),e(co,lYo),M(kF,co,null),b(f,kIe,_),b(f,ud,_),e(ud,SF),e(SF,Qpe),M(Hy,Qpe,null),e(ud,iYo),e(ud,Wpe),e(Wpe,dYo),b(f,SIe,_),b(f,Xo,_),M(Uy,Xo,null),e(Xo,cYo),e(Xo,_d),e(_d,fYo),e(_d,_X),e(_X,mYo),e(_d,gYo),e(_d,bX),e(bX,hYo),e(_d,pYo),e(Xo,uYo),e(Xo,Jy),e(Jy,_Yo),e(Jy,Hpe),e(Hpe,bYo),e(Jy,vYo),e(Xo,FYo),e(Xo,bt),M(Yy,bt,null),e(bt,TYo),e(bt,Upe),e(Upe,MYo),e(bt,EYo),e(bt,bd),e(bd,CYo),e(bd,Jpe),e(Jpe,wYo),e(bd,AYo),e(bd,vX),e(vX,yYo),e(bd,LYo),e(bt,xYo),M(RF,bt,null),e(Xo,$Yo),e(Xo,fo),M(Ky,fo,null),e(fo,kYo),e(fo,Ype),e(Ype,SYo),e(fo,RYo),e(fo,Va),e(Va,BYo),e(Va,Kpe),e(Kpe,PYo),e(Va,IYo),e(Va,Zpe),e(Zpe,qYo),e(Va,NYo),e(Va,eue),e(eue,jYo),e(Va,DYo),e(fo,GYo),e(fo,Zy),e(Zy,BF),e(BF,oue),e(oue,OYo),e(BF,VYo),e(BF,FX),e(FX,XYo),e(BF,zYo),e(Zy,QYo),e(Zy,PF),e(PF,rue),e(rue,WYo),e(PF,HYo),e(PF,TX),e(TX,UYo),e(PF,JYo),e(fo,YYo),e(fo,IF),e(IF,KYo),e(IF,tue),e(tue,ZYo),e(IF,eKo),e(IF,aue),e(aue,oKo),e(fo,rKo),M(qF,fo,null),b(f,RIe,_),b(f,vd,_),e(vd,NF),e(NF,nue),M(eL,nue,null),e(vd,tKo),e(vd,sue),e(sue,aKo),b(f,BIe,_),b(f,zo,_),M(oL,zo,null),e(zo,nKo),e(zo,Fd),e(Fd,sKo),e(Fd,MX),e(MX,lKo),e(Fd,iKo),e(Fd,EX),e(EX,dKo),e(Fd,cKo),e(zo,fKo),e(zo,rL),e(rL,mKo),e(rL,lue),e(lue,gKo),e(rL,hKo),e(zo,pKo),e(zo,vt),M(tL,vt,null),e(vt,uKo),e(vt,iue),e(iue,_Ko),e(vt,bKo),e(vt,Td),e(Td,vKo),e(Td,due),e(due,FKo),e(Td,TKo),e(Td,CX),e(CX,MKo),e(Td,EKo),e(vt,CKo),M(jF,vt,null),e(zo,wKo),e(zo,mo),M(aL,mo,null),e(mo,AKo),e(mo,cue),e(cue,yKo),e(mo,LKo),e(mo,Xa),e(Xa,xKo),e(Xa,fue),e(fue,$Ko),e(Xa,kKo),e(Xa,mue),e(mue,SKo),e(Xa,RKo),e(Xa,gue),e(gue,BKo),e(Xa,PKo),e(mo,IKo),e(mo,za),e(za,DF),e(DF,hue),e(hue,qKo),e(DF,NKo),e(DF,wX),e(wX,jKo),e(DF,DKo),e(za,GKo),e(za,GF),e(GF,pue),e(pue,OKo),e(GF,VKo),e(GF,AX),e(AX,XKo),e(GF,zKo),e(za,QKo),e(za,OF),e(OF,uue),e(uue,WKo),e(OF,HKo),e(OF,yX),e(yX,UKo),e(OF,JKo),e(za,YKo),e(za,VF),e(VF,_ue),e(_ue,KKo),e(VF,ZKo),e(VF,LX),e(LX,eZo),e(VF,oZo),e(mo,rZo),e(mo,XF),e(XF,tZo),e(XF,bue),e(bue,aZo),e(XF,nZo),e(XF,vue),e(vue,sZo),e(mo,lZo),M(zF,mo,null),b(f,PIe,_),b(f,Md,_),e(Md,QF),e(QF,Fue),M(nL,Fue,null),e(Md,iZo),e(Md,Tue),e(Tue,dZo),b(f,IIe,_),b(f,Qo,_),M(sL,Qo,null),e(Qo,cZo),e(Qo,Ed),e(Ed,fZo),e(Ed,xX),e(xX,mZo),e(Ed,gZo),e(Ed,$X),e($X,hZo),e(Ed,pZo),e(Qo,uZo),e(Qo,lL),e(lL,_Zo),e(lL,Mue),e(Mue,bZo),e(lL,vZo),e(Qo,FZo),e(Qo,Ft),M(iL,Ft,null),e(Ft,TZo),e(Ft,Eue),e(Eue,MZo),e(Ft,EZo),e(Ft,Cd),e(Cd,CZo),e(Cd,Cue),e(Cue,wZo),e(Cd,AZo),e(Cd,kX),e(kX,yZo),e(Cd,LZo),e(Ft,xZo),M(WF,Ft,null),e(Qo,$Zo),e(Qo,go),M(dL,go,null),e(go,kZo),e(go,wue),e(wue,SZo),e(go,RZo),e(go,Qa),e(Qa,BZo),e(Qa,Aue),e(Aue,PZo),e(Qa,IZo),e(Qa,yue),e(yue,qZo),e(Qa,NZo),e(Qa,Lue),e(Lue,jZo),e(Qa,DZo),e(go,GZo),e(go,wd),e(wd,HF),e(HF,xue),e(xue,OZo),e(HF,VZo),e(HF,SX),e(SX,XZo),e(HF,zZo),e(wd,QZo),e(wd,UF),e(UF,$ue),e($ue,WZo),e(UF,HZo),e(UF,RX),e(RX,UZo),e(UF,JZo),e(wd,YZo),e(wd,JF),e(JF,kue),e(kue,KZo),e(JF,ZZo),e(JF,BX),e(BX,eer),e(JF,oer),e(go,rer),e(go,YF),e(YF,ter),e(YF,Sue),e(Sue,aer),e(YF,ner),e(YF,Rue),e(Rue,ser),e(go,ler),M(KF,go,null),b(f,qIe,_),b(f,Ad,_),e(Ad,ZF),e(ZF,Bue),M(cL,Bue,null),e(Ad,ier),e(Ad,Pue),e(Pue,der),b(f,NIe,_),b(f,Wo,_),M(fL,Wo,null),e(Wo,cer),e(Wo,yd),e(yd,fer),e(yd,PX),e(PX,mer),e(yd,ger),e(yd,IX),e(IX,her),e(yd,per),e(Wo,uer),e(Wo,mL),e(mL,_er),e(mL,Iue),e(Iue,ber),e(mL,ver),e(Wo,Fer),e(Wo,Tt),M(gL,Tt,null),e(Tt,Ter),e(Tt,que),e(que,Mer),e(Tt,Eer),e(Tt,Ld),e(Ld,Cer),e(Ld,Nue),e(Nue,wer),e(Ld,Aer),e(Ld,qX),e(qX,yer),e(Ld,Ler),e(Tt,xer),M(e6,Tt,null),e(Wo,$er),e(Wo,ho),M(hL,ho,null),e(ho,ker),e(ho,jue),e(jue,Ser),e(ho,Rer),e(ho,Wa),e(Wa,Ber),e(Wa,Due),e(Due,Per),e(Wa,Ier),e(Wa,Gue),e(Gue,qer),e(Wa,Ner),e(Wa,Oue),e(Oue,jer),e(Wa,Der),e(ho,Ger),e(ho,pL),e(pL,o6),e(o6,Vue),e(Vue,Oer),e(o6,Ver),e(o6,NX),e(NX,Xer),e(o6,zer),e(pL,Qer),e(pL,r6),e(r6,Xue),e(Xue,Wer),e(r6,Her),e(r6,jX),e(jX,Uer),e(r6,Jer),e(ho,Yer),e(ho,t6),e(t6,Ker),e(t6,zue),e(zue,Zer),e(t6,eor),e(t6,Que),e(Que,oor),e(ho,ror),M(a6,ho,null),b(f,jIe,_),b(f,xd,_),e(xd,n6),e(n6,Wue),M(uL,Wue,null),e(xd,tor),e(xd,Hue),e(Hue,aor),b(f,DIe,_),b(f,Ho,_),M(_L,Ho,null),e(Ho,nor),e(Ho,$d),e($d,sor),e($d,DX),e(DX,lor),e($d,ior),e($d,GX),e(GX,dor),e($d,cor),e(Ho,mor),e(Ho,bL),e(bL,gor),e(bL,Uue),e(Uue,hor),e(bL,por),e(Ho,uor),e(Ho,Mt),M(vL,Mt,null),e(Mt,_or),e(Mt,Jue),e(Jue,bor),e(Mt,vor),e(Mt,kd),e(kd,For),e(kd,Yue),e(Yue,Tor),e(kd,Mor),e(kd,OX),e(OX,Eor),e(kd,Cor),e(Mt,wor),M(s6,Mt,null),e(Ho,Aor),e(Ho,po),M(FL,po,null),e(po,yor),e(po,Kue),e(Kue,Lor),e(po,xor),e(po,Ha),e(Ha,$or),e(Ha,Zue),e(Zue,kor),e(Ha,Sor),e(Ha,e_e),e(e_e,Ror),e(Ha,Bor),e(Ha,o_e),e(o_e,Por),e(Ha,Ior),e(po,qor),e(po,r_e),e(r_e,l6),e(l6,t_e),e(t_e,Nor),e(l6,jor),e(l6,VX),e(VX,Dor),e(l6,Gor),e(po,Oor),e(po,i6),e(i6,Vor),e(i6,a_e),e(a_e,Xor),e(i6,zor),e(i6,n_e),e(n_e,Qor),e(po,Wor),M(d6,po,null),b(f,GIe,_),b(f,Sd,_),e(Sd,c6),e(c6,s_e),M(TL,s_e,null),e(Sd,Hor),e(Sd,l_e),e(l_e,Uor),b(f,OIe,_),b(f,Uo,_),M(ML,Uo,null),e(Uo,Jor),e(Uo,Rd),e(Rd,Yor),e(Rd,XX),e(XX,Kor),e(Rd,Zor),e(Rd,zX),e(zX,err),e(Rd,orr),e(Uo,rrr),e(Uo,EL),e(EL,trr),e(EL,i_e),e(i_e,arr),e(EL,nrr),e(Uo,srr),e(Uo,Et),M(CL,Et,null),e(Et,lrr),e(Et,d_e),e(d_e,irr),e(Et,drr),e(Et,Bd),e(Bd,crr),e(Bd,c_e),e(c_e,frr),e(Bd,mrr),e(Bd,QX),e(QX,grr),e(Bd,hrr),e(Et,prr),M(f6,Et,null),e(Uo,urr),e(Uo,uo),M(wL,uo,null),e(uo,_rr),e(uo,f_e),e(f_e,brr),e(uo,vrr),e(uo,Ua),e(Ua,Frr),e(Ua,m_e),e(m_e,Trr),e(Ua,Mrr),e(Ua,g_e),e(g_e,Err),e(Ua,Crr),e(Ua,h_e),e(h_e,wrr),e(Ua,Arr),e(uo,yrr),e(uo,Ja),e(Ja,m6),e(m6,p_e),e(p_e,Lrr),e(m6,xrr),e(m6,WX),e(WX,$rr),e(m6,krr),e(Ja,Srr),e(Ja,g6),e(g6,u_e),e(u_e,Rrr),e(g6,Brr),e(g6,HX),e(HX,Prr),e(g6,Irr),e(Ja,qrr),e(Ja,h6),e(h6,__e),e(__e,Nrr),e(h6,jrr),e(h6,UX),e(UX,Drr),e(h6,Grr),e(Ja,Orr),e(Ja,p6),e(p6,b_e),e(b_e,Vrr),e(p6,Xrr),e(p6,JX),e(JX,zrr),e(p6,Qrr),e(uo,Wrr),e(uo,u6),e(u6,Hrr),e(u6,v_e),e(v_e,Urr),e(u6,Jrr),e(u6,F_e),e(F_e,Yrr),e(uo,Krr),M(_6,uo,null),b(f,VIe,_),b(f,Pd,_),e(Pd,b6),e(b6,T_e),M(AL,T_e,null),e(Pd,Zrr),e(Pd,M_e),e(M_e,etr),b(f,XIe,_),b(f,Jo,_),M(yL,Jo,null),e(Jo,otr),e(Jo,Id),e(Id,rtr),e(Id,YX),e(YX,ttr),e(Id,atr),e(Id,KX),e(KX,ntr),e(Id,str),e(Jo,ltr),e(Jo,LL),e(LL,itr),e(LL,E_e),e(E_e,dtr),e(LL,ctr),e(Jo,ftr),e(Jo,Ct),M(xL,Ct,null),e(Ct,mtr),e(Ct,C_e),e(C_e,gtr),e(Ct,htr),e(Ct,qd),e(qd,ptr),e(qd,w_e),e(w_e,utr),e(qd,_tr),e(qd,ZX),e(ZX,btr),e(qd,vtr),e(Ct,Ftr),M(v6,Ct,null),e(Jo,Ttr),e(Jo,_o),M($L,_o,null),e(_o,Mtr),e(_o,A_e),e(A_e,Etr),e(_o,Ctr),e(_o,Ya),e(Ya,wtr),e(Ya,y_e),e(y_e,Atr),e(Ya,ytr),e(Ya,L_e),e(L_e,Ltr),e(Ya,xtr),e(Ya,x_e),e(x_e,$tr),e(Ya,ktr),e(_o,Str),e(_o,$_e),e($_e,F6),e(F6,k_e),e(k_e,Rtr),e(F6,Btr),e(F6,ez),e(ez,Ptr),e(F6,Itr),e(_o,qtr),e(_o,T6),e(T6,Ntr),e(T6,S_e),e(S_e,jtr),e(T6,Dtr),e(T6,R_e),e(R_e,Gtr),e(_o,Otr),M(M6,_o,null),b(f,zIe,_),b(f,Nd,_),e(Nd,E6),e(E6,B_e),M(kL,B_e,null),e(Nd,Vtr),e(Nd,P_e),e(P_e,Xtr),b(f,QIe,_),b(f,Yo,_),M(SL,Yo,null),e(Yo,ztr),e(Yo,jd),e(jd,Qtr),e(jd,oz),e(oz,Wtr),e(jd,Htr),e(jd,rz),e(rz,Utr),e(jd,Jtr),e(Yo,Ytr),e(Yo,RL),e(RL,Ktr),e(RL,I_e),e(I_e,Ztr),e(RL,ear),e(Yo,oar),e(Yo,wt),M(BL,wt,null),e(wt,rar),e(wt,q_e),e(q_e,tar),e(wt,aar),e(wt,Dd),e(Dd,nar),e(Dd,N_e),e(N_e,sar),e(Dd,lar),e(Dd,tz),e(tz,iar),e(Dd,dar),e(wt,car),M(C6,wt,null),e(Yo,far),e(Yo,wr),M(PL,wr,null),e(wr,mar),e(wr,j_e),e(j_e,gar),e(wr,har),e(wr,Ka),e(Ka,par),e(Ka,D_e),e(D_e,uar),e(Ka,_ar),e(Ka,G_e),e(G_e,bar),e(Ka,Far),e(Ka,O_e),e(O_e,Tar),e(Ka,Mar),e(wr,Ear),e(wr,j),e(j,w6),e(w6,V_e),e(V_e,Car),e(w6,war),e(w6,az),e(az,Aar),e(w6,yar),e(j,Lar),e(j,A6),e(A6,X_e),e(X_e,xar),e(A6,$ar),e(A6,nz),e(nz,kar),e(A6,Sar),e(j,Rar),e(j,y6),e(y6,z_e),e(z_e,Bar),e(y6,Par),e(y6,sz),e(sz,Iar),e(y6,qar),e(j,Nar),e(j,L6),e(L6,Q_e),e(Q_e,jar),e(L6,Dar),e(L6,lz),e(lz,Gar),e(L6,Oar),e(j,Var),e(j,x6),e(x6,W_e),e(W_e,Xar),e(x6,zar),e(x6,iz),e(iz,Qar),e(x6,War),e(j,Har),e(j,$6),e($6,H_e),e(H_e,Uar),e($6,Jar),e($6,dz),e(dz,Yar),e($6,Kar),e(j,Zar),e(j,k6),e(k6,U_e),e(U_e,enr),e(k6,onr),e(k6,cz),e(cz,rnr),e(k6,tnr),e(j,anr),e(j,S6),e(S6,J_e),e(J_e,nnr),e(S6,snr),e(S6,fz),e(fz,lnr),e(S6,inr),e(j,dnr),e(j,R6),e(R6,Y_e),e(Y_e,cnr),e(R6,fnr),e(R6,mz),e(mz,mnr),e(R6,gnr),e(j,hnr),e(j,B6),e(B6,K_e),e(K_e,pnr),e(B6,unr),e(B6,gz),e(gz,_nr),e(B6,bnr),e(j,vnr),e(j,P6),e(P6,Z_e),e(Z_e,Fnr),e(P6,Tnr),e(P6,hz),e(hz,Mnr),e(P6,Enr),e(j,Cnr),e(j,I6),e(I6,e0e),e(e0e,wnr),e(I6,Anr),e(I6,pz),e(pz,ynr),e(I6,Lnr),e(j,xnr),e(j,q6),e(q6,o0e),e(o0e,$nr),e(q6,knr),e(q6,uz),e(uz,Snr),e(q6,Rnr),e(j,Bnr),e(j,N6),e(N6,r0e),e(r0e,Pnr),e(N6,Inr),e(N6,_z),e(_z,qnr),e(N6,Nnr),e(j,jnr),e(j,j6),e(j6,t0e),e(t0e,Dnr),e(j6,Gnr),e(j6,bz),e(bz,Onr),e(j6,Vnr),e(j,Xnr),e(j,D6),e(D6,a0e),e(a0e,znr),e(D6,Qnr),e(D6,vz),e(vz,Wnr),e(D6,Hnr),e(j,Unr),e(j,G6),e(G6,n0e),e(n0e,Jnr),e(G6,Ynr),e(G6,Fz),e(Fz,Knr),e(G6,Znr),e(j,esr),e(j,Ps),e(Ps,s0e),e(s0e,osr),e(Ps,rsr),e(Ps,Tz),e(Tz,tsr),e(Ps,asr),e(Ps,Mz),e(Mz,nsr),e(Ps,ssr),e(j,lsr),e(j,O6),e(O6,l0e),e(l0e,isr),e(O6,dsr),e(O6,Ez),e(Ez,csr),e(O6,fsr),e(j,msr),e(j,V6),e(V6,i0e),e(i0e,gsr),e(V6,hsr),e(V6,Cz),e(Cz,psr),e(V6,usr),e(j,_sr),e(j,X6),e(X6,d0e),e(d0e,bsr),e(X6,vsr),e(X6,wz),e(wz,Fsr),e(X6,Tsr),e(j,Msr),e(j,z6),e(z6,c0e),e(c0e,Esr),e(z6,Csr),e(z6,Az),e(Az,wsr),e(z6,Asr),e(j,ysr),e(j,Q6),e(Q6,f0e),e(f0e,Lsr),e(Q6,xsr),e(Q6,yz),e(yz,$sr),e(Q6,ksr),e(j,Ssr),e(j,W6),e(W6,m0e),e(m0e,Rsr),e(W6,Bsr),e(W6,Lz),e(Lz,Psr),e(W6,Isr),e(j,qsr),e(j,H6),e(H6,g0e),e(g0e,Nsr),e(H6,jsr),e(H6,xz),e(xz,Dsr),e(H6,Gsr),e(j,Osr),e(j,U6),e(U6,h0e),e(h0e,Vsr),e(U6,Xsr),e(U6,$z),e($z,zsr),e(U6,Qsr),e(j,Wsr),e(j,J6),e(J6,p0e),e(p0e,Hsr),e(J6,Usr),e(J6,kz),e(kz,Jsr),e(J6,Ysr),e(j,Ksr),e(j,Y6),e(Y6,u0e),e(u0e,Zsr),e(Y6,elr),e(Y6,Sz),e(Sz,olr),e(Y6,rlr),e(j,tlr),e(j,K6),e(K6,_0e),e(_0e,alr),e(K6,nlr),e(K6,Rz),e(Rz,slr),e(K6,llr),e(j,ilr),e(j,Z6),e(Z6,b0e),e(b0e,dlr),e(Z6,clr),e(Z6,Bz),e(Bz,flr),e(Z6,mlr),e(j,glr),e(j,eT),e(eT,v0e),e(v0e,hlr),e(eT,plr),e(eT,Pz),e(Pz,ulr),e(eT,_lr),e(j,blr),e(j,oT),e(oT,F0e),e(F0e,vlr),e(oT,Flr),e(oT,Iz),e(Iz,Tlr),e(oT,Mlr),e(j,Elr),e(j,rT),e(rT,T0e),e(T0e,Clr),e(rT,wlr),e(rT,qz),e(qz,Alr),e(rT,ylr),e(j,Llr),e(j,tT),e(tT,M0e),e(M0e,xlr),e(tT,$lr),e(tT,Nz),e(Nz,klr),e(tT,Slr),e(j,Rlr),e(j,aT),e(aT,E0e),e(E0e,Blr),e(aT,Plr),e(aT,jz),e(jz,Ilr),e(aT,qlr),e(j,Nlr),e(j,nT),e(nT,C0e),e(C0e,jlr),e(nT,Dlr),e(nT,Dz),e(Dz,Glr),e(nT,Olr),e(j,Vlr),e(j,sT),e(sT,w0e),e(w0e,Xlr),e(sT,zlr),e(sT,Gz),e(Gz,Qlr),e(sT,Wlr),e(j,Hlr),e(j,lT),e(lT,A0e),e(A0e,Ulr),e(lT,Jlr),e(lT,Oz),e(Oz,Ylr),e(lT,Klr),e(j,Zlr),e(j,iT),e(iT,y0e),e(y0e,eir),e(iT,oir),e(iT,Vz),e(Vz,rir),e(iT,tir),e(j,air),e(j,dT),e(dT,L0e),e(L0e,nir),e(dT,sir),e(dT,Xz),e(Xz,lir),e(dT,iir),e(j,dir),e(j,cT),e(cT,x0e),e(x0e,cir),e(cT,fir),e(cT,zz),e(zz,mir),e(cT,gir),e(j,hir),e(j,fT),e(fT,$0e),e($0e,pir),e(fT,uir),e(fT,Qz),e(Qz,_ir),e(fT,bir),e(j,vir),e(j,mT),e(mT,k0e),e(k0e,Fir),e(mT,Tir),e(mT,Wz),e(Wz,Mir),e(mT,Eir),e(j,Cir),e(j,gT),e(gT,S0e),e(S0e,wir),e(gT,Air),e(gT,Hz),e(Hz,yir),e(gT,Lir),e(j,xir),e(j,hT),e(hT,R0e),e(R0e,$ir),e(hT,kir),e(hT,Uz),e(Uz,Sir),e(hT,Rir),e(wr,Bir),M(pT,wr,null),b(f,WIe,_),b(f,Gd,_),e(Gd,uT),e(uT,B0e),M(IL,B0e,null),e(Gd,Pir),e(Gd,P0e),e(P0e,Iir),b(f,HIe,_),b(f,Ko,_),M(qL,Ko,null),e(Ko,qir),e(Ko,Od),e(Od,Nir),e(Od,Jz),e(Jz,jir),e(Od,Dir),e(Od,Yz),e(Yz,Gir),e(Od,Oir),e(Ko,Vir),e(Ko,NL),e(NL,Xir),e(NL,I0e),e(I0e,zir),e(NL,Qir),e(Ko,Wir),e(Ko,At),M(jL,At,null),e(At,Hir),e(At,q0e),e(q0e,Uir),e(At,Jir),e(At,Vd),e(Vd,Yir),e(Vd,N0e),e(N0e,Kir),e(Vd,Zir),e(Vd,Kz),e(Kz,edr),e(Vd,odr),e(At,rdr),M(_T,At,null),e(Ko,tdr),e(Ko,Ar),M(DL,Ar,null),e(Ar,adr),e(Ar,j0e),e(j0e,ndr),e(Ar,sdr),e(Ar,Za),e(Za,ldr),e(Za,D0e),e(D0e,idr),e(Za,ddr),e(Za,G0e),e(G0e,cdr),e(Za,fdr),e(Za,O0e),e(O0e,mdr),e(Za,gdr),e(Ar,hdr),e(Ar,se),e(se,bT),e(bT,V0e),e(V0e,pdr),e(bT,udr),e(bT,Zz),e(Zz,_dr),e(bT,bdr),e(se,vdr),e(se,vT),e(vT,X0e),e(X0e,Fdr),e(vT,Tdr),e(vT,eQ),e(eQ,Mdr),e(vT,Edr),e(se,Cdr),e(se,FT),e(FT,z0e),e(z0e,wdr),e(FT,Adr),e(FT,oQ),e(oQ,ydr),e(FT,Ldr),e(se,xdr),e(se,TT),e(TT,Q0e),e(Q0e,$dr),e(TT,kdr),e(TT,rQ),e(rQ,Sdr),e(TT,Rdr),e(se,Bdr),e(se,MT),e(MT,W0e),e(W0e,Pdr),e(MT,Idr),e(MT,tQ),e(tQ,qdr),e(MT,Ndr),e(se,jdr),e(se,ET),e(ET,H0e),e(H0e,Ddr),e(ET,Gdr),e(ET,aQ),e(aQ,Odr),e(ET,Vdr),e(se,Xdr),e(se,CT),e(CT,U0e),e(U0e,zdr),e(CT,Qdr),e(CT,nQ),e(nQ,Wdr),e(CT,Hdr),e(se,Udr),e(se,wT),e(wT,J0e),e(J0e,Jdr),e(wT,Ydr),e(wT,sQ),e(sQ,Kdr),e(wT,Zdr),e(se,ecr),e(se,AT),e(AT,Y0e),e(Y0e,ocr),e(AT,rcr),e(AT,lQ),e(lQ,tcr),e(AT,acr),e(se,ncr),e(se,yT),e(yT,K0e),e(K0e,scr),e(yT,lcr),e(yT,iQ),e(iQ,icr),e(yT,dcr),e(se,ccr),e(se,LT),e(LT,Z0e),e(Z0e,fcr),e(LT,mcr),e(LT,dQ),e(dQ,gcr),e(LT,hcr),e(se,pcr),e(se,xT),e(xT,e1e),e(e1e,ucr),e(xT,_cr),e(xT,cQ),e(cQ,bcr),e(xT,vcr),e(se,Fcr),e(se,$T),e($T,o1e),e(o1e,Tcr),e($T,Mcr),e($T,fQ),e(fQ,Ecr),e($T,Ccr),e(se,wcr),e(se,kT),e(kT,r1e),e(r1e,Acr),e(kT,ycr),e(kT,mQ),e(mQ,Lcr),e(kT,xcr),e(se,$cr),e(se,ST),e(ST,t1e),e(t1e,kcr),e(ST,Scr),e(ST,gQ),e(gQ,Rcr),e(ST,Bcr),e(se,Pcr),e(se,RT),e(RT,a1e),e(a1e,Icr),e(RT,qcr),e(RT,hQ),e(hQ,Ncr),e(RT,jcr),e(se,Dcr),e(se,BT),e(BT,n1e),e(n1e,Gcr),e(BT,Ocr),e(BT,pQ),e(pQ,Vcr),e(BT,Xcr),e(se,zcr),e(se,PT),e(PT,s1e),e(s1e,Qcr),e(PT,Wcr),e(PT,uQ),e(uQ,Hcr),e(PT,Ucr),e(se,Jcr),e(se,IT),e(IT,l1e),e(l1e,Ycr),e(IT,Kcr),e(IT,_Q),e(_Q,Zcr),e(IT,efr),e(se,ofr),e(se,qT),e(qT,i1e),e(i1e,rfr),e(qT,tfr),e(qT,bQ),e(bQ,afr),e(qT,nfr),e(se,sfr),e(se,NT),e(NT,d1e),e(d1e,lfr),e(NT,ifr),e(NT,vQ),e(vQ,dfr),e(NT,cfr),e(se,ffr),e(se,jT),e(jT,c1e),e(c1e,mfr),e(jT,gfr),e(jT,FQ),e(FQ,hfr),e(jT,pfr),e(se,ufr),e(se,DT),e(DT,f1e),e(f1e,_fr),e(DT,bfr),e(DT,TQ),e(TQ,vfr),e(DT,Ffr),e(Ar,Tfr),M(GT,Ar,null),b(f,UIe,_),b(f,Xd,_),e(Xd,OT),e(OT,m1e),M(GL,m1e,null),e(Xd,Mfr),e(Xd,g1e),e(g1e,Efr),b(f,JIe,_),b(f,Zo,_),M(OL,Zo,null),e(Zo,Cfr),e(Zo,zd),e(zd,wfr),e(zd,MQ),e(MQ,Afr),e(zd,yfr),e(zd,EQ),e(EQ,Lfr),e(zd,xfr),e(Zo,$fr),e(Zo,VL),e(VL,kfr),e(VL,h1e),e(h1e,Sfr),e(VL,Rfr),e(Zo,Bfr),e(Zo,yt),M(XL,yt,null),e(yt,Pfr),e(yt,p1e),e(p1e,Ifr),e(yt,qfr),e(yt,Qd),e(Qd,Nfr),e(Qd,u1e),e(u1e,jfr),e(Qd,Dfr),e(Qd,CQ),e(CQ,Gfr),e(Qd,Ofr),e(yt,Vfr),M(VT,yt,null),e(Zo,Xfr),e(Zo,yr),M(zL,yr,null),e(yr,zfr),e(yr,_1e),e(_1e,Qfr),e(yr,Wfr),e(yr,en),e(en,Hfr),e(en,b1e),e(b1e,Ufr),e(en,Jfr),e(en,v1e),e(v1e,Yfr),e(en,Kfr),e(en,F1e),e(F1e,Zfr),e(en,emr),e(yr,omr),e(yr,Te),e(Te,XT),e(XT,T1e),e(T1e,rmr),e(XT,tmr),e(XT,wQ),e(wQ,amr),e(XT,nmr),e(Te,smr),e(Te,zT),e(zT,M1e),e(M1e,lmr),e(zT,imr),e(zT,AQ),e(AQ,dmr),e(zT,cmr),e(Te,fmr),e(Te,QT),e(QT,E1e),e(E1e,mmr),e(QT,gmr),e(QT,yQ),e(yQ,hmr),e(QT,pmr),e(Te,umr),e(Te,WT),e(WT,C1e),e(C1e,_mr),e(WT,bmr),e(WT,LQ),e(LQ,vmr),e(WT,Fmr),e(Te,Tmr),e(Te,HT),e(HT,w1e),e(w1e,Mmr),e(HT,Emr),e(HT,xQ),e(xQ,Cmr),e(HT,wmr),e(Te,Amr),e(Te,UT),e(UT,A1e),e(A1e,ymr),e(UT,Lmr),e(UT,$Q),e($Q,xmr),e(UT,$mr),e(Te,kmr),e(Te,JT),e(JT,y1e),e(y1e,Smr),e(JT,Rmr),e(JT,kQ),e(kQ,Bmr),e(JT,Pmr),e(Te,Imr),e(Te,YT),e(YT,L1e),e(L1e,qmr),e(YT,Nmr),e(YT,SQ),e(SQ,jmr),e(YT,Dmr),e(Te,Gmr),e(Te,KT),e(KT,x1e),e(x1e,Omr),e(KT,Vmr),e(KT,RQ),e(RQ,Xmr),e(KT,zmr),e(Te,Qmr),e(Te,ZT),e(ZT,$1e),e($1e,Wmr),e(ZT,Hmr),e(ZT,BQ),e(BQ,Umr),e(ZT,Jmr),e(Te,Ymr),e(Te,e7),e(e7,k1e),e(k1e,Kmr),e(e7,Zmr),e(e7,PQ),e(PQ,egr),e(e7,ogr),e(Te,rgr),e(Te,o7),e(o7,S1e),e(S1e,tgr),e(o7,agr),e(o7,IQ),e(IQ,ngr),e(o7,sgr),e(yr,lgr),M(r7,yr,null),b(f,YIe,_),b(f,Wd,_),e(Wd,t7),e(t7,R1e),M(QL,R1e,null),e(Wd,igr),e(Wd,B1e),e(B1e,dgr),b(f,KIe,_),b(f,er,_),M(WL,er,null),e(er,cgr),e(er,Hd),e(Hd,fgr),e(Hd,qQ),e(qQ,mgr),e(Hd,ggr),e(Hd,NQ),e(NQ,hgr),e(Hd,pgr),e(er,ugr),e(er,HL),e(HL,_gr),e(HL,P1e),e(P1e,bgr),e(HL,vgr),e(er,Fgr),e(er,Lt),M(UL,Lt,null),e(Lt,Tgr),e(Lt,I1e),e(I1e,Mgr),e(Lt,Egr),e(Lt,Ud),e(Ud,Cgr),e(Ud,q1e),e(q1e,wgr),e(Ud,Agr),e(Ud,jQ),e(jQ,ygr),e(Ud,Lgr),e(Lt,xgr),M(a7,Lt,null),e(er,$gr),e(er,Lr),M(JL,Lr,null),e(Lr,kgr),e(Lr,N1e),e(N1e,Sgr),e(Lr,Rgr),e(Lr,on),e(on,Bgr),e(on,j1e),e(j1e,Pgr),e(on,Igr),e(on,D1e),e(D1e,qgr),e(on,Ngr),e(on,G1e),e(G1e,jgr),e(on,Dgr),e(Lr,Ggr),e(Lr,Jd),e(Jd,n7),e(n7,O1e),e(O1e,Ogr),e(n7,Vgr),e(n7,DQ),e(DQ,Xgr),e(n7,zgr),e(Jd,Qgr),e(Jd,s7),e(s7,V1e),e(V1e,Wgr),e(s7,Hgr),e(s7,GQ),e(GQ,Ugr),e(s7,Jgr),e(Jd,Ygr),e(Jd,l7),e(l7,X1e),e(X1e,Kgr),e(l7,Zgr),e(l7,OQ),e(OQ,ehr),e(l7,ohr),e(Lr,rhr),M(i7,Lr,null),b(f,ZIe,_),b(f,Yd,_),e(Yd,d7),e(d7,z1e),M(YL,z1e,null),e(Yd,thr),e(Yd,Q1e),e(Q1e,ahr),b(f,eqe,_),b(f,or,_),M(KL,or,null),e(or,nhr),e(or,Kd),e(Kd,shr),e(Kd,VQ),e(VQ,lhr),e(Kd,ihr),e(Kd,XQ),e(XQ,dhr),e(Kd,chr),e(or,fhr),e(or,ZL),e(ZL,mhr),e(ZL,W1e),e(W1e,ghr),e(ZL,hhr),e(or,phr),e(or,xt),M(e8,xt,null),e(xt,uhr),e(xt,H1e),e(H1e,_hr),e(xt,bhr),e(xt,Zd),e(Zd,vhr),e(Zd,U1e),e(U1e,Fhr),e(Zd,Thr),e(Zd,zQ),e(zQ,Mhr),e(Zd,Ehr),e(xt,Chr),M(c7,xt,null),e(or,whr),e(or,xr),M(o8,xr,null),e(xr,Ahr),e(xr,J1e),e(J1e,yhr),e(xr,Lhr),e(xr,rn),e(rn,xhr),e(rn,Y1e),e(Y1e,$hr),e(rn,khr),e(rn,K1e),e(K1e,Shr),e(rn,Rhr),e(rn,Z1e),e(Z1e,Bhr),e(rn,Phr),e(xr,Ihr),e(xr,ie),e(ie,f7),e(f7,ebe),e(ebe,qhr),e(f7,Nhr),e(f7,QQ),e(QQ,jhr),e(f7,Dhr),e(ie,Ghr),e(ie,m7),e(m7,obe),e(obe,Ohr),e(m7,Vhr),e(m7,WQ),e(WQ,Xhr),e(m7,zhr),e(ie,Qhr),e(ie,g7),e(g7,rbe),e(rbe,Whr),e(g7,Hhr),e(g7,HQ),e(HQ,Uhr),e(g7,Jhr),e(ie,Yhr),e(ie,h7),e(h7,tbe),e(tbe,Khr),e(h7,Zhr),e(h7,UQ),e(UQ,epr),e(h7,opr),e(ie,rpr),e(ie,p7),e(p7,abe),e(abe,tpr),e(p7,apr),e(p7,JQ),e(JQ,npr),e(p7,spr),e(ie,lpr),e(ie,u7),e(u7,nbe),e(nbe,ipr),e(u7,dpr),e(u7,YQ),e(YQ,cpr),e(u7,fpr),e(ie,mpr),e(ie,_7),e(_7,sbe),e(sbe,gpr),e(_7,hpr),e(_7,KQ),e(KQ,ppr),e(_7,upr),e(ie,_pr),e(ie,b7),e(b7,lbe),e(lbe,bpr),e(b7,vpr),e(b7,ZQ),e(ZQ,Fpr),e(b7,Tpr),e(ie,Mpr),e(ie,v7),e(v7,ibe),e(ibe,Epr),e(v7,Cpr),e(v7,eW),e(eW,wpr),e(v7,Apr),e(ie,ypr),e(ie,F7),e(F7,dbe),e(dbe,Lpr),e(F7,xpr),e(F7,oW),e(oW,$pr),e(F7,kpr),e(ie,Spr),e(ie,T7),e(T7,cbe),e(cbe,Rpr),e(T7,Bpr),e(T7,rW),e(rW,Ppr),e(T7,Ipr),e(ie,qpr),e(ie,M7),e(M7,fbe),e(fbe,Npr),e(M7,jpr),e(M7,tW),e(tW,Dpr),e(M7,Gpr),e(ie,Opr),e(ie,E7),e(E7,mbe),e(mbe,Vpr),e(E7,Xpr),e(E7,aW),e(aW,zpr),e(E7,Qpr),e(ie,Wpr),e(ie,C7),e(C7,gbe),e(gbe,Hpr),e(C7,Upr),e(C7,nW),e(nW,Jpr),e(C7,Ypr),e(ie,Kpr),e(ie,w7),e(w7,hbe),e(hbe,Zpr),e(w7,eur),e(w7,sW),e(sW,our),e(w7,rur),e(ie,tur),e(ie,A7),e(A7,pbe),e(pbe,aur),e(A7,nur),e(A7,lW),e(lW,sur),e(A7,lur),e(ie,iur),e(ie,y7),e(y7,ube),e(ube,dur),e(y7,cur),e(y7,iW),e(iW,fur),e(y7,mur),e(ie,gur),e(ie,L7),e(L7,_be),e(_be,hur),e(L7,pur),e(L7,dW),e(dW,uur),e(L7,_ur),e(ie,bur),e(ie,x7),e(x7,bbe),e(bbe,vur),e(x7,Fur),e(x7,cW),e(cW,Tur),e(x7,Mur),e(ie,Eur),e(ie,$7),e($7,vbe),e(vbe,Cur),e($7,wur),e($7,fW),e(fW,Aur),e($7,yur),e(xr,Lur),M(k7,xr,null),b(f,oqe,_),b(f,ec,_),e(ec,S7),e(S7,Fbe),M(r8,Fbe,null),e(ec,xur),e(ec,Tbe),e(Tbe,$ur),b(f,rqe,_),b(f,rr,_),M(t8,rr,null),e(rr,kur),e(rr,oc),e(oc,Sur),e(oc,mW),e(mW,Rur),e(oc,Bur),e(oc,gW),e(gW,Pur),e(oc,Iur),e(rr,qur),e(rr,a8),e(a8,Nur),e(a8,Mbe),e(Mbe,jur),e(a8,Dur),e(rr,Gur),e(rr,$t),M(n8,$t,null),e($t,Our),e($t,Ebe),e(Ebe,Vur),e($t,Xur),e($t,rc),e(rc,zur),e(rc,Cbe),e(Cbe,Qur),e(rc,Wur),e(rc,hW),e(hW,Hur),e(rc,Uur),e($t,Jur),M(R7,$t,null),e(rr,Yur),e(rr,$r),M(s8,$r,null),e($r,Kur),e($r,wbe),e(wbe,Zur),e($r,e_r),e($r,tn),e(tn,o_r),e(tn,Abe),e(Abe,r_r),e(tn,t_r),e(tn,ybe),e(ybe,a_r),e(tn,n_r),e(tn,Lbe),e(Lbe,s_r),e(tn,l_r),e($r,i_r),e($r,ye),e(ye,B7),e(B7,xbe),e(xbe,d_r),e(B7,c_r),e(B7,pW),e(pW,f_r),e(B7,m_r),e(ye,g_r),e(ye,P7),e(P7,$be),e($be,h_r),e(P7,p_r),e(P7,uW),e(uW,u_r),e(P7,__r),e(ye,b_r),e(ye,I7),e(I7,kbe),e(kbe,v_r),e(I7,F_r),e(I7,_W),e(_W,T_r),e(I7,M_r),e(ye,E_r),e(ye,q7),e(q7,Sbe),e(Sbe,C_r),e(q7,w_r),e(q7,bW),e(bW,A_r),e(q7,y_r),e(ye,L_r),e(ye,N7),e(N7,Rbe),e(Rbe,x_r),e(N7,$_r),e(N7,vW),e(vW,k_r),e(N7,S_r),e(ye,R_r),e(ye,j7),e(j7,Bbe),e(Bbe,B_r),e(j7,P_r),e(j7,FW),e(FW,I_r),e(j7,q_r),e(ye,N_r),e(ye,D7),e(D7,Pbe),e(Pbe,j_r),e(D7,D_r),e(D7,TW),e(TW,G_r),e(D7,O_r),e(ye,V_r),e(ye,G7),e(G7,Ibe),e(Ibe,X_r),e(G7,z_r),e(G7,MW),e(MW,Q_r),e(G7,W_r),e(ye,H_r),e(ye,O7),e(O7,qbe),e(qbe,U_r),e(O7,J_r),e(O7,EW),e(EW,Y_r),e(O7,K_r),e(ye,Z_r),e(ye,V7),e(V7,Nbe),e(Nbe,e0r),e(V7,o0r),e(V7,CW),e(CW,r0r),e(V7,t0r),e($r,a0r),M(X7,$r,null),b(f,tqe,_),b(f,tc,_),e(tc,z7),e(z7,jbe),M(l8,jbe,null),e(tc,n0r),e(tc,Dbe),e(Dbe,s0r),b(f,aqe,_),b(f,tr,_),M(i8,tr,null),e(tr,l0r),e(tr,ac),e(ac,i0r),e(ac,wW),e(wW,d0r),e(ac,c0r),e(ac,AW),e(AW,f0r),e(ac,m0r),e(tr,g0r),e(tr,d8),e(d8,h0r),e(d8,Gbe),e(Gbe,p0r),e(d8,u0r),e(tr,_0r),e(tr,kt),M(c8,kt,null),e(kt,b0r),e(kt,Obe),e(Obe,v0r),e(kt,F0r),e(kt,nc),e(nc,T0r),e(nc,Vbe),e(Vbe,M0r),e(nc,E0r),e(nc,yW),e(yW,C0r),e(nc,w0r),e(kt,A0r),M(Q7,kt,null),e(tr,y0r),e(tr,kr),M(f8,kr,null),e(kr,L0r),e(kr,Xbe),e(Xbe,x0r),e(kr,$0r),e(kr,an),e(an,k0r),e(an,zbe),e(zbe,S0r),e(an,R0r),e(an,Qbe),e(Qbe,B0r),e(an,P0r),e(an,Wbe),e(Wbe,I0r),e(an,q0r),e(kr,N0r),e(kr,Z),e(Z,W7),e(W7,Hbe),e(Hbe,j0r),e(W7,D0r),e(W7,LW),e(LW,G0r),e(W7,O0r),e(Z,V0r),e(Z,H7),e(H7,Ube),e(Ube,X0r),e(H7,z0r),e(H7,xW),e(xW,Q0r),e(H7,W0r),e(Z,H0r),e(Z,U7),e(U7,Jbe),e(Jbe,U0r),e(U7,J0r),e(U7,$W),e($W,Y0r),e(U7,K0r),e(Z,Z0r),e(Z,J7),e(J7,Ybe),e(Ybe,e1r),e(J7,o1r),e(J7,kW),e(kW,r1r),e(J7,t1r),e(Z,a1r),e(Z,Y7),e(Y7,Kbe),e(Kbe,n1r),e(Y7,s1r),e(Y7,SW),e(SW,l1r),e(Y7,i1r),e(Z,d1r),e(Z,K7),e(K7,Zbe),e(Zbe,c1r),e(K7,f1r),e(K7,RW),e(RW,m1r),e(K7,g1r),e(Z,h1r),e(Z,Z7),e(Z7,e2e),e(e2e,p1r),e(Z7,u1r),e(Z7,BW),e(BW,_1r),e(Z7,b1r),e(Z,v1r),e(Z,eM),e(eM,o2e),e(o2e,F1r),e(eM,T1r),e(eM,PW),e(PW,M1r),e(eM,E1r),e(Z,C1r),e(Z,oM),e(oM,r2e),e(r2e,w1r),e(oM,A1r),e(oM,IW),e(IW,y1r),e(oM,L1r),e(Z,x1r),e(Z,rM),e(rM,t2e),e(t2e,$1r),e(rM,k1r),e(rM,qW),e(qW,S1r),e(rM,R1r),e(Z,B1r),e(Z,tM),e(tM,a2e),e(a2e,P1r),e(tM,I1r),e(tM,NW),e(NW,q1r),e(tM,N1r),e(Z,j1r),e(Z,aM),e(aM,n2e),e(n2e,D1r),e(aM,G1r),e(aM,jW),e(jW,O1r),e(aM,V1r),e(Z,X1r),e(Z,nM),e(nM,s2e),e(s2e,z1r),e(nM,Q1r),e(nM,DW),e(DW,W1r),e(nM,H1r),e(Z,U1r),e(Z,sM),e(sM,l2e),e(l2e,J1r),e(sM,Y1r),e(sM,GW),e(GW,K1r),e(sM,Z1r),e(Z,ebr),e(Z,lM),e(lM,i2e),e(i2e,obr),e(lM,rbr),e(lM,OW),e(OW,tbr),e(lM,abr),e(Z,nbr),e(Z,iM),e(iM,d2e),e(d2e,sbr),e(iM,lbr),e(iM,VW),e(VW,ibr),e(iM,dbr),e(Z,cbr),e(Z,dM),e(dM,c2e),e(c2e,fbr),e(dM,mbr),e(dM,XW),e(XW,gbr),e(dM,hbr),e(Z,pbr),e(Z,cM),e(cM,f2e),e(f2e,ubr),e(cM,_br),e(cM,zW),e(zW,bbr),e(cM,vbr),e(Z,Fbr),e(Z,fM),e(fM,m2e),e(m2e,Tbr),e(fM,Mbr),e(fM,QW),e(QW,Ebr),e(fM,Cbr),e(Z,wbr),e(Z,mM),e(mM,g2e),e(g2e,Abr),e(mM,ybr),e(mM,WW),e(WW,Lbr),e(mM,xbr),e(Z,$br),e(Z,gM),e(gM,h2e),e(h2e,kbr),e(gM,Sbr),e(gM,HW),e(HW,Rbr),e(gM,Bbr),e(Z,Pbr),e(Z,hM),e(hM,p2e),e(p2e,Ibr),e(hM,qbr),e(hM,UW),e(UW,Nbr),e(hM,jbr),e(Z,Dbr),e(Z,pM),e(pM,u2e),e(u2e,Gbr),e(pM,Obr),e(pM,JW),e(JW,Vbr),e(pM,Xbr),e(Z,zbr),e(Z,uM),e(uM,_2e),e(_2e,Qbr),e(uM,Wbr),e(uM,YW),e(YW,Hbr),e(uM,Ubr),e(Z,Jbr),e(Z,_M),e(_M,b2e),e(b2e,Ybr),e(_M,Kbr),e(_M,KW),e(KW,Zbr),e(_M,e2r),e(Z,o2r),e(Z,bM),e(bM,v2e),e(v2e,r2r),e(bM,t2r),e(bM,ZW),e(ZW,a2r),e(bM,n2r),e(kr,s2r),M(vM,kr,null),b(f,nqe,_),b(f,sc,_),e(sc,FM),e(FM,F2e),M(m8,F2e,null),e(sc,l2r),e(sc,T2e),e(T2e,i2r),b(f,sqe,_),b(f,ar,_),M(g8,ar,null),e(ar,d2r),e(ar,lc),e(lc,c2r),e(lc,eH),e(eH,f2r),e(lc,m2r),e(lc,oH),e(oH,g2r),e(lc,h2r),e(ar,p2r),e(ar,h8),e(h8,u2r),e(h8,M2e),e(M2e,_2r),e(h8,b2r),e(ar,v2r),e(ar,St),M(p8,St,null),e(St,F2r),e(St,E2e),e(E2e,T2r),e(St,M2r),e(St,ic),e(ic,E2r),e(ic,C2e),e(C2e,C2r),e(ic,w2r),e(ic,rH),e(rH,A2r),e(ic,y2r),e(St,L2r),M(TM,St,null),e(ar,x2r),e(ar,Sr),M(u8,Sr,null),e(Sr,$2r),e(Sr,w2e),e(w2e,k2r),e(Sr,S2r),e(Sr,nn),e(nn,R2r),e(nn,A2e),e(A2e,B2r),e(nn,P2r),e(nn,y2e),e(y2e,I2r),e(nn,q2r),e(nn,L2e),e(L2e,N2r),e(nn,j2r),e(Sr,D2r),e(Sr,pe),e(pe,MM),e(MM,x2e),e(x2e,G2r),e(MM,O2r),e(MM,tH),e(tH,V2r),e(MM,X2r),e(pe,z2r),e(pe,EM),e(EM,$2e),e($2e,Q2r),e(EM,W2r),e(EM,aH),e(aH,H2r),e(EM,U2r),e(pe,J2r),e(pe,CM),e(CM,k2e),e(k2e,Y2r),e(CM,K2r),e(CM,nH),e(nH,Z2r),e(CM,evr),e(pe,ovr),e(pe,wM),e(wM,S2e),e(S2e,rvr),e(wM,tvr),e(wM,sH),e(sH,avr),e(wM,nvr),e(pe,svr),e(pe,AM),e(AM,R2e),e(R2e,lvr),e(AM,ivr),e(AM,lH),e(lH,dvr),e(AM,cvr),e(pe,fvr),e(pe,yM),e(yM,B2e),e(B2e,mvr),e(yM,gvr),e(yM,iH),e(iH,hvr),e(yM,pvr),e(pe,uvr),e(pe,LM),e(LM,P2e),e(P2e,_vr),e(LM,bvr),e(LM,dH),e(dH,vvr),e(LM,Fvr),e(pe,Tvr),e(pe,xM),e(xM,I2e),e(I2e,Mvr),e(xM,Evr),e(xM,cH),e(cH,Cvr),e(xM,wvr),e(pe,Avr),e(pe,$M),e($M,q2e),e(q2e,yvr),e($M,Lvr),e($M,fH),e(fH,xvr),e($M,$vr),e(pe,kvr),e(pe,kM),e(kM,N2e),e(N2e,Svr),e(kM,Rvr),e(kM,mH),e(mH,Bvr),e(kM,Pvr),e(pe,Ivr),e(pe,SM),e(SM,j2e),e(j2e,qvr),e(SM,Nvr),e(SM,gH),e(gH,jvr),e(SM,Dvr),e(pe,Gvr),e(pe,RM),e(RM,D2e),e(D2e,Ovr),e(RM,Vvr),e(RM,hH),e(hH,Xvr),e(RM,zvr),e(pe,Qvr),e(pe,BM),e(BM,G2e),e(G2e,Wvr),e(BM,Hvr),e(BM,pH),e(pH,Uvr),e(BM,Jvr),e(pe,Yvr),e(pe,PM),e(PM,O2e),e(O2e,Kvr),e(PM,Zvr),e(PM,uH),e(uH,eFr),e(PM,oFr),e(pe,rFr),e(pe,IM),e(IM,V2e),e(V2e,tFr),e(IM,aFr),e(IM,_H),e(_H,nFr),e(IM,sFr),e(pe,lFr),e(pe,qM),e(qM,X2e),e(X2e,iFr),e(qM,dFr),e(qM,bH),e(bH,cFr),e(qM,fFr),e(pe,mFr),e(pe,NM),e(NM,z2e),e(z2e,gFr),e(NM,hFr),e(NM,vH),e(vH,pFr),e(NM,uFr),e(Sr,_Fr),M(jM,Sr,null),b(f,lqe,_),b(f,dc,_),e(dc,DM),e(DM,Q2e),M(_8,Q2e,null),e(dc,bFr),e(dc,W2e),e(W2e,vFr),b(f,iqe,_),b(f,nr,_),M(b8,nr,null),e(nr,FFr),e(nr,cc),e(cc,TFr),e(cc,FH),e(FH,MFr),e(cc,EFr),e(cc,TH),e(TH,CFr),e(cc,wFr),e(nr,AFr),e(nr,v8),e(v8,yFr),e(v8,H2e),e(H2e,LFr),e(v8,xFr),e(nr,$Fr),e(nr,Rt),M(F8,Rt,null),e(Rt,kFr),e(Rt,U2e),e(U2e,SFr),e(Rt,RFr),e(Rt,fc),e(fc,BFr),e(fc,J2e),e(J2e,PFr),e(fc,IFr),e(fc,MH),e(MH,qFr),e(fc,NFr),e(Rt,jFr),M(GM,Rt,null),e(nr,DFr),e(nr,Rr),M(T8,Rr,null),e(Rr,GFr),e(Rr,Y2e),e(Y2e,OFr),e(Rr,VFr),e(Rr,sn),e(sn,XFr),e(sn,K2e),e(K2e,zFr),e(sn,QFr),e(sn,Z2e),e(Z2e,WFr),e(sn,HFr),e(sn,eve),e(eve,UFr),e(sn,JFr),e(Rr,YFr),e(Rr,M8),e(M8,OM),e(OM,ove),e(ove,KFr),e(OM,ZFr),e(OM,EH),e(EH,e6r),e(OM,o6r),e(M8,r6r),e(M8,VM),e(VM,rve),e(rve,t6r),e(VM,a6r),e(VM,CH),e(CH,n6r),e(VM,s6r),e(Rr,l6r),M(XM,Rr,null),b(f,dqe,_),b(f,mc,_),e(mc,zM),e(zM,tve),M(E8,tve,null),e(mc,i6r),e(mc,ave),e(ave,d6r),b(f,cqe,_),b(f,sr,_),M(C8,sr,null),e(sr,c6r),e(sr,gc),e(gc,f6r),e(gc,wH),e(wH,m6r),e(gc,g6r),e(gc,AH),e(AH,h6r),e(gc,p6r),e(sr,u6r),e(sr,w8),e(w8,_6r),e(w8,nve),e(nve,b6r),e(w8,v6r),e(sr,F6r),e(sr,Bt),M(A8,Bt,null),e(Bt,T6r),e(Bt,sve),e(sve,M6r),e(Bt,E6r),e(Bt,hc),e(hc,C6r),e(hc,lve),e(lve,w6r),e(hc,A6r),e(hc,yH),e(yH,y6r),e(hc,L6r),e(Bt,x6r),M(QM,Bt,null),e(sr,$6r),e(sr,Br),M(y8,Br,null),e(Br,k6r),e(Br,ive),e(ive,S6r),e(Br,R6r),e(Br,ln),e(ln,B6r),e(ln,dve),e(dve,P6r),e(ln,I6r),e(ln,cve),e(cve,q6r),e(ln,N6r),e(ln,fve),e(fve,j6r),e(ln,D6r),e(Br,G6r),e(Br,mve),e(mve,WM),e(WM,gve),e(gve,O6r),e(WM,V6r),e(WM,LH),e(LH,X6r),e(WM,z6r),e(Br,Q6r),M(HM,Br,null),b(f,fqe,_),b(f,pc,_),e(pc,UM),e(UM,hve),M(L8,hve,null),e(pc,W6r),e(pc,pve),e(pve,H6r),b(f,mqe,_),b(f,lr,_),M(x8,lr,null),e(lr,U6r),e(lr,uc),e(uc,J6r),e(uc,xH),e(xH,Y6r),e(uc,K6r),e(uc,$H),e($H,Z6r),e(uc,eTr),e(lr,oTr),e(lr,$8),e($8,rTr),e($8,uve),e(uve,tTr),e($8,aTr),e(lr,nTr),e(lr,Pt),M(k8,Pt,null),e(Pt,sTr),e(Pt,_ve),e(_ve,lTr),e(Pt,iTr),e(Pt,_c),e(_c,dTr),e(_c,bve),e(bve,cTr),e(_c,fTr),e(_c,kH),e(kH,mTr),e(_c,gTr),e(Pt,hTr),M(JM,Pt,null),e(lr,pTr),e(lr,Pr),M(S8,Pr,null),e(Pr,uTr),e(Pr,vve),e(vve,_Tr),e(Pr,bTr),e(Pr,dn),e(dn,vTr),e(dn,Fve),e(Fve,FTr),e(dn,TTr),e(dn,Tve),e(Tve,MTr),e(dn,ETr),e(dn,Mve),e(Mve,CTr),e(dn,wTr),e(Pr,ATr),e(Pr,de),e(de,YM),e(YM,Eve),e(Eve,yTr),e(YM,LTr),e(YM,SH),e(SH,xTr),e(YM,$Tr),e(de,kTr),e(de,KM),e(KM,Cve),e(Cve,STr),e(KM,RTr),e(KM,RH),e(RH,BTr),e(KM,PTr),e(de,ITr),e(de,ZM),e(ZM,wve),e(wve,qTr),e(ZM,NTr),e(ZM,BH),e(BH,jTr),e(ZM,DTr),e(de,GTr),e(de,e4),e(e4,Ave),e(Ave,OTr),e(e4,VTr),e(e4,PH),e(PH,XTr),e(e4,zTr),e(de,QTr),e(de,o4),e(o4,yve),e(yve,WTr),e(o4,HTr),e(o4,IH),e(IH,UTr),e(o4,JTr),e(de,YTr),e(de,r4),e(r4,Lve),e(Lve,KTr),e(r4,ZTr),e(r4,qH),e(qH,e7r),e(r4,o7r),e(de,r7r),e(de,t4),e(t4,xve),e(xve,t7r),e(t4,a7r),e(t4,NH),e(NH,n7r),e(t4,s7r),e(de,l7r),e(de,a4),e(a4,$ve),e($ve,i7r),e(a4,d7r),e(a4,jH),e(jH,c7r),e(a4,f7r),e(de,m7r),e(de,n4),e(n4,kve),e(kve,g7r),e(n4,h7r),e(n4,DH),e(DH,p7r),e(n4,u7r),e(de,_7r),e(de,s4),e(s4,Sve),e(Sve,b7r),e(s4,v7r),e(s4,GH),e(GH,F7r),e(s4,T7r),e(de,M7r),e(de,l4),e(l4,Rve),e(Rve,E7r),e(l4,C7r),e(l4,OH),e(OH,w7r),e(l4,A7r),e(de,y7r),e(de,i4),e(i4,Bve),e(Bve,L7r),e(i4,x7r),e(i4,VH),e(VH,$7r),e(i4,k7r),e(de,S7r),e(de,d4),e(d4,Pve),e(Pve,R7r),e(d4,B7r),e(d4,XH),e(XH,P7r),e(d4,I7r),e(de,q7r),e(de,c4),e(c4,Ive),e(Ive,N7r),e(c4,j7r),e(c4,zH),e(zH,D7r),e(c4,G7r),e(de,O7r),e(de,f4),e(f4,qve),e(qve,V7r),e(f4,X7r),e(f4,QH),e(QH,z7r),e(f4,Q7r),e(de,W7r),e(de,m4),e(m4,Nve),e(Nve,H7r),e(m4,U7r),e(m4,WH),e(WH,J7r),e(m4,Y7r),e(de,K7r),e(de,g4),e(g4,jve),e(jve,Z7r),e(g4,eMr),e(g4,HH),e(HH,oMr),e(g4,rMr),e(de,tMr),e(de,h4),e(h4,Dve),e(Dve,aMr),e(h4,nMr),e(h4,UH),e(UH,sMr),e(h4,lMr),e(de,iMr),e(de,p4),e(p4,Gve),e(Gve,dMr),e(p4,cMr),e(p4,JH),e(JH,fMr),e(p4,mMr),e(de,gMr),e(de,u4),e(u4,Ove),e(Ove,hMr),e(u4,pMr),e(u4,YH),e(YH,uMr),e(u4,_Mr),e(Pr,bMr),M(_4,Pr,null),b(f,gqe,_),b(f,bc,_),e(bc,b4),e(b4,Vve),M(R8,Vve,null),e(bc,vMr),e(bc,Xve),e(Xve,FMr),b(f,hqe,_),b(f,ir,_),M(B8,ir,null),e(ir,TMr),e(ir,vc),e(vc,MMr),e(vc,KH),e(KH,EMr),e(vc,CMr),e(vc,ZH),e(ZH,wMr),e(vc,AMr),e(ir,yMr),e(ir,P8),e(P8,LMr),e(P8,zve),e(zve,xMr),e(P8,$Mr),e(ir,kMr),e(ir,It),M(I8,It,null),e(It,SMr),e(It,Qve),e(Qve,RMr),e(It,BMr),e(It,Fc),e(Fc,PMr),e(Fc,Wve),e(Wve,IMr),e(Fc,qMr),e(Fc,eU),e(eU,NMr),e(Fc,jMr),e(It,DMr),M(v4,It,null),e(ir,GMr),e(ir,Ir),M(q8,Ir,null),e(Ir,OMr),e(Ir,Hve),e(Hve,VMr),e(Ir,XMr),e(Ir,cn),e(cn,zMr),e(cn,Uve),e(Uve,QMr),e(cn,WMr),e(cn,Jve),e(Jve,HMr),e(cn,UMr),e(cn,Yve),e(Yve,JMr),e(cn,YMr),e(Ir,KMr),e(Ir,ce),e(ce,F4),e(F4,Kve),e(Kve,ZMr),e(F4,e4r),e(F4,oU),e(oU,o4r),e(F4,r4r),e(ce,t4r),e(ce,T4),e(T4,Zve),e(Zve,a4r),e(T4,n4r),e(T4,rU),e(rU,s4r),e(T4,l4r),e(ce,i4r),e(ce,M4),e(M4,eFe),e(eFe,d4r),e(M4,c4r),e(M4,tU),e(tU,f4r),e(M4,m4r),e(ce,g4r),e(ce,E4),e(E4,oFe),e(oFe,h4r),e(E4,p4r),e(E4,aU),e(aU,u4r),e(E4,_4r),e(ce,b4r),e(ce,C4),e(C4,rFe),e(rFe,v4r),e(C4,F4r),e(C4,nU),e(nU,T4r),e(C4,M4r),e(ce,E4r),e(ce,w4),e(w4,tFe),e(tFe,C4r),e(w4,w4r),e(w4,sU),e(sU,A4r),e(w4,y4r),e(ce,L4r),e(ce,A4),e(A4,aFe),e(aFe,x4r),e(A4,$4r),e(A4,lU),e(lU,k4r),e(A4,S4r),e(ce,R4r),e(ce,y4),e(y4,nFe),e(nFe,B4r),e(y4,P4r),e(y4,iU),e(iU,I4r),e(y4,q4r),e(ce,N4r),e(ce,L4),e(L4,sFe),e(sFe,j4r),e(L4,D4r),e(L4,dU),e(dU,G4r),e(L4,O4r),e(ce,V4r),e(ce,x4),e(x4,lFe),e(lFe,X4r),e(x4,z4r),e(x4,cU),e(cU,Q4r),e(x4,W4r),e(ce,H4r),e(ce,$4),e($4,iFe),e(iFe,U4r),e($4,J4r),e($4,fU),e(fU,Y4r),e($4,K4r),e(ce,Z4r),e(ce,k4),e(k4,dFe),e(dFe,eEr),e(k4,oEr),e(k4,mU),e(mU,rEr),e(k4,tEr),e(ce,aEr),e(ce,S4),e(S4,cFe),e(cFe,nEr),e(S4,sEr),e(S4,gU),e(gU,lEr),e(S4,iEr),e(ce,dEr),e(ce,R4),e(R4,fFe),e(fFe,cEr),e(R4,fEr),e(R4,hU),e(hU,mEr),e(R4,gEr),e(ce,hEr),e(ce,B4),e(B4,mFe),e(mFe,pEr),e(B4,uEr),e(B4,pU),e(pU,_Er),e(B4,bEr),e(ce,vEr),e(ce,P4),e(P4,gFe),e(gFe,FEr),e(P4,TEr),e(P4,uU),e(uU,MEr),e(P4,EEr),e(ce,CEr),e(ce,I4),e(I4,hFe),e(hFe,wEr),e(I4,AEr),e(I4,_U),e(_U,yEr),e(I4,LEr),e(ce,xEr),e(ce,q4),e(q4,pFe),e(pFe,$Er),e(q4,kEr),e(q4,bU),e(bU,SEr),e(q4,REr),e(ce,BEr),e(ce,N4),e(N4,uFe),e(uFe,PEr),e(N4,IEr),e(N4,vU),e(vU,qEr),e(N4,NEr),e(ce,jEr),e(ce,j4),e(j4,_Fe),e(_Fe,DEr),e(j4,GEr),e(j4,FU),e(FU,OEr),e(j4,VEr),e(Ir,XEr),M(D4,Ir,null),b(f,pqe,_),b(f,Tc,_),e(Tc,G4),e(G4,bFe),M(N8,bFe,null),e(Tc,zEr),e(Tc,vFe),e(vFe,QEr),b(f,uqe,_),b(f,dr,_),M(j8,dr,null),e(dr,WEr),e(dr,Mc),e(Mc,HEr),e(Mc,TU),e(TU,UEr),e(Mc,JEr),e(Mc,MU),e(MU,YEr),e(Mc,KEr),e(dr,ZEr),e(dr,D8),e(D8,e5r),e(D8,FFe),e(FFe,o5r),e(D8,r5r),e(dr,t5r),e(dr,qt),M(G8,qt,null),e(qt,a5r),e(qt,TFe),e(TFe,n5r),e(qt,s5r),e(qt,Ec),e(Ec,l5r),e(Ec,MFe),e(MFe,i5r),e(Ec,d5r),e(Ec,EU),e(EU,c5r),e(Ec,f5r),e(qt,m5r),M(O4,qt,null),e(dr,g5r),e(dr,qr),M(O8,qr,null),e(qr,h5r),e(qr,EFe),e(EFe,p5r),e(qr,u5r),e(qr,fn),e(fn,_5r),e(fn,CFe),e(CFe,b5r),e(fn,v5r),e(fn,wFe),e(wFe,F5r),e(fn,T5r),e(fn,AFe),e(AFe,M5r),e(fn,E5r),e(qr,C5r),e(qr,yFe),e(yFe,V4),e(V4,LFe),e(LFe,w5r),e(V4,A5r),e(V4,CU),e(CU,y5r),e(V4,L5r),e(qr,x5r),M(X4,qr,null),b(f,_qe,_),b(f,Cc,_),e(Cc,z4),e(z4,xFe),M(V8,xFe,null),e(Cc,$5r),e(Cc,$Fe),e($Fe,k5r),b(f,bqe,_),b(f,cr,_),M(X8,cr,null),e(cr,S5r),e(cr,wc),e(wc,R5r),e(wc,wU),e(wU,B5r),e(wc,P5r),e(wc,AU),e(AU,I5r),e(wc,q5r),e(cr,N5r),e(cr,z8),e(z8,j5r),e(z8,kFe),e(kFe,D5r),e(z8,G5r),e(cr,O5r),e(cr,Nt),M(Q8,Nt,null),e(Nt,V5r),e(Nt,SFe),e(SFe,X5r),e(Nt,z5r),e(Nt,Ac),e(Ac,Q5r),e(Ac,RFe),e(RFe,W5r),e(Ac,H5r),e(Ac,yU),e(yU,U5r),e(Ac,J5r),e(Nt,Y5r),M(Q4,Nt,null),e(cr,K5r),e(cr,Nr),M(W8,Nr,null),e(Nr,Z5r),e(Nr,BFe),e(BFe,eCr),e(Nr,oCr),e(Nr,mn),e(mn,rCr),e(mn,PFe),e(PFe,tCr),e(mn,aCr),e(mn,IFe),e(IFe,nCr),e(mn,sCr),e(mn,qFe),e(qFe,lCr),e(mn,iCr),e(Nr,dCr),e(Nr,NFe),e(NFe,W4),e(W4,jFe),e(jFe,cCr),e(W4,fCr),e(W4,LU),e(LU,mCr),e(W4,gCr),e(Nr,hCr),M(H4,Nr,null),b(f,vqe,_),b(f,yc,_),e(yc,U4),e(U4,DFe),M(H8,DFe,null),e(yc,pCr),e(yc,GFe),e(GFe,uCr),b(f,Fqe,_),b(f,fr,_),M(U8,fr,null),e(fr,_Cr),e(fr,Lc),e(Lc,bCr),e(Lc,xU),e(xU,vCr),e(Lc,FCr),e(Lc,$U),e($U,TCr),e(Lc,MCr),e(fr,ECr),e(fr,J8),e(J8,CCr),e(J8,OFe),e(OFe,wCr),e(J8,ACr),e(fr,yCr),e(fr,jt),M(Y8,jt,null),e(jt,LCr),e(jt,VFe),e(VFe,xCr),e(jt,$Cr),e(jt,xc),e(xc,kCr),e(xc,XFe),e(XFe,SCr),e(xc,RCr),e(xc,kU),e(kU,BCr),e(xc,PCr),e(jt,ICr),M(J4,jt,null),e(fr,qCr),e(fr,jr),M(K8,jr,null),e(jr,NCr),e(jr,zFe),e(zFe,jCr),e(jr,DCr),e(jr,gn),e(gn,GCr),e(gn,QFe),e(QFe,OCr),e(gn,VCr),e(gn,WFe),e(WFe,XCr),e(gn,zCr),e(gn,HFe),e(HFe,QCr),e(gn,WCr),e(jr,HCr),e(jr,re),e(re,Y4),e(Y4,UFe),e(UFe,UCr),e(Y4,JCr),e(Y4,SU),e(SU,YCr),e(Y4,KCr),e(re,ZCr),e(re,K4),e(K4,JFe),e(JFe,e3r),e(K4,o3r),e(K4,RU),e(RU,r3r),e(K4,t3r),e(re,a3r),e(re,Z4),e(Z4,YFe),e(YFe,n3r),e(Z4,s3r),e(Z4,BU),e(BU,l3r),e(Z4,i3r),e(re,d3r),e(re,eE),e(eE,KFe),e(KFe,c3r),e(eE,f3r),e(eE,PU),e(PU,m3r),e(eE,g3r),e(re,h3r),e(re,oE),e(oE,ZFe),e(ZFe,p3r),e(oE,u3r),e(oE,IU),e(IU,_3r),e(oE,b3r),e(re,v3r),e(re,rE),e(rE,e6e),e(e6e,F3r),e(rE,T3r),e(rE,qU),e(qU,M3r),e(rE,E3r),e(re,C3r),e(re,tE),e(tE,o6e),e(o6e,w3r),e(tE,A3r),e(tE,NU),e(NU,y3r),e(tE,L3r),e(re,x3r),e(re,aE),e(aE,r6e),e(r6e,$3r),e(aE,k3r),e(aE,jU),e(jU,S3r),e(aE,R3r),e(re,B3r),e(re,nE),e(nE,t6e),e(t6e,P3r),e(nE,I3r),e(nE,DU),e(DU,q3r),e(nE,N3r),e(re,j3r),e(re,sE),e(sE,a6e),e(a6e,D3r),e(sE,G3r),e(sE,GU),e(GU,O3r),e(sE,V3r),e(re,X3r),e(re,lE),e(lE,n6e),e(n6e,z3r),e(lE,Q3r),e(lE,OU),e(OU,W3r),e(lE,H3r),e(re,U3r),e(re,iE),e(iE,s6e),e(s6e,J3r),e(iE,Y3r),e(iE,VU),e(VU,K3r),e(iE,Z3r),e(re,ewr),e(re,dE),e(dE,l6e),e(l6e,owr),e(dE,rwr),e(dE,XU),e(XU,twr),e(dE,awr),e(re,nwr),e(re,cE),e(cE,i6e),e(i6e,swr),e(cE,lwr),e(cE,zU),e(zU,iwr),e(cE,dwr),e(re,cwr),e(re,fE),e(fE,d6e),e(d6e,fwr),e(fE,mwr),e(fE,QU),e(QU,gwr),e(fE,hwr),e(re,pwr),e(re,mE),e(mE,c6e),e(c6e,uwr),e(mE,_wr),e(mE,WU),e(WU,bwr),e(mE,vwr),e(re,Fwr),e(re,gE),e(gE,f6e),e(f6e,Twr),e(gE,Mwr),e(gE,HU),e(HU,Ewr),e(gE,Cwr),e(re,wwr),e(re,hE),e(hE,m6e),e(m6e,Awr),e(hE,ywr),e(hE,UU),e(UU,Lwr),e(hE,xwr),e(re,$wr),e(re,pE),e(pE,g6e),e(g6e,kwr),e(pE,Swr),e(pE,JU),e(JU,Rwr),e(pE,Bwr),e(re,Pwr),e(re,uE),e(uE,h6e),e(h6e,Iwr),e(uE,qwr),e(uE,YU),e(YU,Nwr),e(uE,jwr),e(re,Dwr),e(re,_E),e(_E,p6e),e(p6e,Gwr),e(_E,Owr),e(_E,KU),e(KU,Vwr),e(_E,Xwr),e(re,zwr),e(re,bE),e(bE,u6e),e(u6e,Qwr),e(bE,Wwr),e(bE,ZU),e(ZU,Hwr),e(bE,Uwr),e(re,Jwr),e(re,vE),e(vE,_6e),e(_6e,Ywr),e(vE,Kwr),e(vE,eJ),e(eJ,Zwr),e(vE,eAr),e(re,oAr),e(re,FE),e(FE,b6e),e(b6e,rAr),e(FE,tAr),e(FE,oJ),e(oJ,aAr),e(FE,nAr),e(re,sAr),e(re,TE),e(TE,v6e),e(v6e,lAr),e(TE,iAr),e(TE,rJ),e(rJ,dAr),e(TE,cAr),e(jr,fAr),M(ME,jr,null),b(f,Tqe,_),b(f,$c,_),e($c,EE),e(EE,F6e),M(Z8,F6e,null),e($c,mAr),e($c,T6e),e(T6e,gAr),b(f,Mqe,_),b(f,mr,_),M(ex,mr,null),e(mr,hAr),e(mr,kc),e(kc,pAr),e(kc,tJ),e(tJ,uAr),e(kc,_Ar),e(kc,aJ),e(aJ,bAr),e(kc,vAr),e(mr,FAr),e(mr,ox),e(ox,TAr),e(ox,M6e),e(M6e,MAr),e(ox,EAr),e(mr,CAr),e(mr,Dt),M(rx,Dt,null),e(Dt,wAr),e(Dt,E6e),e(E6e,AAr),e(Dt,yAr),e(Dt,Sc),e(Sc,LAr),e(Sc,C6e),e(C6e,xAr),e(Sc,$Ar),e(Sc,nJ),e(nJ,kAr),e(Sc,SAr),e(Dt,RAr),M(CE,Dt,null),e(mr,BAr),e(mr,Dr),M(tx,Dr,null),e(Dr,PAr),e(Dr,w6e),e(w6e,IAr),e(Dr,qAr),e(Dr,hn),e(hn,NAr),e(hn,A6e),e(A6e,jAr),e(hn,DAr),e(hn,y6e),e(y6e,GAr),e(hn,OAr),e(hn,L6e),e(L6e,VAr),e(hn,XAr),e(Dr,zAr),e(Dr,ke),e(ke,wE),e(wE,x6e),e(x6e,QAr),e(wE,WAr),e(wE,sJ),e(sJ,HAr),e(wE,UAr),e(ke,JAr),e(ke,AE),e(AE,$6e),e($6e,YAr),e(AE,KAr),e(AE,lJ),e(lJ,ZAr),e(AE,eyr),e(ke,oyr),e(ke,yE),e(yE,k6e),e(k6e,ryr),e(yE,tyr),e(yE,iJ),e(iJ,ayr),e(yE,nyr),e(ke,syr),e(ke,LE),e(LE,S6e),e(S6e,lyr),e(LE,iyr),e(LE,dJ),e(dJ,dyr),e(LE,cyr),e(ke,fyr),e(ke,xE),e(xE,R6e),e(R6e,myr),e(xE,gyr),e(xE,cJ),e(cJ,hyr),e(xE,pyr),e(ke,uyr),e(ke,$E),e($E,B6e),e(B6e,_yr),e($E,byr),e($E,fJ),e(fJ,vyr),e($E,Fyr),e(ke,Tyr),e(ke,kE),e(kE,P6e),e(P6e,Myr),e(kE,Eyr),e(kE,mJ),e(mJ,Cyr),e(kE,wyr),e(ke,Ayr),e(ke,SE),e(SE,I6e),e(I6e,yyr),e(SE,Lyr),e(SE,gJ),e(gJ,xyr),e(SE,$yr),e(ke,kyr),e(ke,RE),e(RE,q6e),e(q6e,Syr),e(RE,Ryr),e(RE,hJ),e(hJ,Byr),e(RE,Pyr),e(Dr,Iyr),M(BE,Dr,null),b(f,Eqe,_),b(f,Rc,_),e(Rc,PE),e(PE,N6e),M(ax,N6e,null),e(Rc,qyr),e(Rc,j6e),e(j6e,Nyr),b(f,Cqe,_),b(f,gr,_),M(nx,gr,null),e(gr,jyr),e(gr,Bc),e(Bc,Dyr),e(Bc,pJ),e(pJ,Gyr),e(Bc,Oyr),e(Bc,uJ),e(uJ,Vyr),e(Bc,Xyr),e(gr,zyr),e(gr,sx),e(sx,Qyr),e(sx,D6e),e(D6e,Wyr),e(sx,Hyr),e(gr,Uyr),e(gr,Gt),M(lx,Gt,null),e(Gt,Jyr),e(Gt,G6e),e(G6e,Yyr),e(Gt,Kyr),e(Gt,Pc),e(Pc,Zyr),e(Pc,O6e),e(O6e,eLr),e(Pc,oLr),e(Pc,_J),e(_J,rLr),e(Pc,tLr),e(Gt,aLr),M(IE,Gt,null),e(gr,nLr),e(gr,Gr),M(ix,Gr,null),e(Gr,sLr),e(Gr,V6e),e(V6e,lLr),e(Gr,iLr),e(Gr,pn),e(pn,dLr),e(pn,X6e),e(X6e,cLr),e(pn,fLr),e(pn,z6e),e(z6e,mLr),e(pn,gLr),e(pn,Q6e),e(Q6e,hLr),e(pn,pLr),e(Gr,uLr),e(Gr,Me),e(Me,qE),e(qE,W6e),e(W6e,_Lr),e(qE,bLr),e(qE,bJ),e(bJ,vLr),e(qE,FLr),e(Me,TLr),e(Me,NE),e(NE,H6e),e(H6e,MLr),e(NE,ELr),e(NE,vJ),e(vJ,CLr),e(NE,wLr),e(Me,ALr),e(Me,jE),e(jE,U6e),e(U6e,yLr),e(jE,LLr),e(jE,FJ),e(FJ,xLr),e(jE,$Lr),e(Me,kLr),e(Me,DE),e(DE,J6e),e(J6e,SLr),e(DE,RLr),e(DE,TJ),e(TJ,BLr),e(DE,PLr),e(Me,ILr),e(Me,GE),e(GE,Y6e),e(Y6e,qLr),e(GE,NLr),e(GE,MJ),e(MJ,jLr),e(GE,DLr),e(Me,GLr),e(Me,OE),e(OE,K6e),e(K6e,OLr),e(OE,VLr),e(OE,EJ),e(EJ,XLr),e(OE,zLr),e(Me,QLr),e(Me,VE),e(VE,Z6e),e(Z6e,WLr),e(VE,HLr),e(VE,CJ),e(CJ,ULr),e(VE,JLr),e(Me,YLr),e(Me,XE),e(XE,eTe),e(eTe,KLr),e(XE,ZLr),e(XE,wJ),e(wJ,e8r),e(XE,o8r),e(Me,r8r),e(Me,zE),e(zE,oTe),e(oTe,t8r),e(zE,a8r),e(zE,AJ),e(AJ,n8r),e(zE,s8r),e(Me,l8r),e(Me,QE),e(QE,rTe),e(rTe,i8r),e(QE,d8r),e(QE,yJ),e(yJ,c8r),e(QE,f8r),e(Me,m8r),e(Me,WE),e(WE,tTe),e(tTe,g8r),e(WE,h8r),e(WE,LJ),e(LJ,p8r),e(WE,u8r),e(Me,_8r),e(Me,HE),e(HE,aTe),e(aTe,b8r),e(HE,v8r),e(HE,xJ),e(xJ,F8r),e(HE,T8r),e(Gr,M8r),M(UE,Gr,null),b(f,wqe,_),b(f,Ic,_),e(Ic,JE),e(JE,nTe),M(dx,nTe,null),e(Ic,E8r),e(Ic,sTe),e(sTe,C8r),b(f,Aqe,_),b(f,hr,_),M(cx,hr,null),e(hr,w8r),e(hr,qc),e(qc,A8r),e(qc,$J),e($J,y8r),e(qc,L8r),e(qc,kJ),e(kJ,x8r),e(qc,$8r),e(hr,k8r),e(hr,fx),e(fx,S8r),e(fx,lTe),e(lTe,R8r),e(fx,B8r),e(hr,P8r),e(hr,Ot),M(mx,Ot,null),e(Ot,I8r),e(Ot,iTe),e(iTe,q8r),e(Ot,N8r),e(Ot,Nc),e(Nc,j8r),e(Nc,dTe),e(dTe,D8r),e(Nc,G8r),e(Nc,SJ),e(SJ,O8r),e(Nc,V8r),e(Ot,X8r),M(YE,Ot,null),e(hr,z8r),e(hr,Or),M(gx,Or,null),e(Or,Q8r),e(Or,cTe),e(cTe,W8r),e(Or,H8r),e(Or,un),e(un,U8r),e(un,fTe),e(fTe,J8r),e(un,Y8r),e(un,mTe),e(mTe,K8r),e(un,Z8r),e(un,gTe),e(gTe,exr),e(un,oxr),e(Or,rxr),e(Or,Le),e(Le,KE),e(KE,hTe),e(hTe,txr),e(KE,axr),e(KE,RJ),e(RJ,nxr),e(KE,sxr),e(Le,lxr),e(Le,ZE),e(ZE,pTe),e(pTe,ixr),e(ZE,dxr),e(ZE,BJ),e(BJ,cxr),e(ZE,fxr),e(Le,mxr),e(Le,e5),e(e5,uTe),e(uTe,gxr),e(e5,hxr),e(e5,PJ),e(PJ,pxr),e(e5,uxr),e(Le,_xr),e(Le,o5),e(o5,_Te),e(_Te,bxr),e(o5,vxr),e(o5,IJ),e(IJ,Fxr),e(o5,Txr),e(Le,Mxr),e(Le,r5),e(r5,bTe),e(bTe,Exr),e(r5,Cxr),e(r5,qJ),e(qJ,wxr),e(r5,Axr),e(Le,yxr),e(Le,t5),e(t5,vTe),e(vTe,Lxr),e(t5,xxr),e(t5,NJ),e(NJ,$xr),e(t5,kxr),e(Le,Sxr),e(Le,a5),e(a5,FTe),e(FTe,Rxr),e(a5,Bxr),e(a5,jJ),e(jJ,Pxr),e(a5,Ixr),e(Le,qxr),e(Le,n5),e(n5,TTe),e(TTe,Nxr),e(n5,jxr),e(n5,DJ),e(DJ,Dxr),e(n5,Gxr),e(Le,Oxr),e(Le,s5),e(s5,MTe),e(MTe,Vxr),e(s5,Xxr),e(s5,GJ),e(GJ,zxr),e(s5,Qxr),e(Le,Wxr),e(Le,l5),e(l5,ETe),e(ETe,Hxr),e(l5,Uxr),e(l5,OJ),e(OJ,Jxr),e(l5,Yxr),e(Or,Kxr),M(i5,Or,null),b(f,yqe,_),b(f,jc,_),e(jc,d5),e(d5,CTe),M(hx,CTe,null),e(jc,Zxr),e(jc,wTe),e(wTe,e9r),b(f,Lqe,_),b(f,pr,_),M(px,pr,null),e(pr,o9r),e(pr,Dc),e(Dc,r9r),e(Dc,VJ),e(VJ,t9r),e(Dc,a9r),e(Dc,XJ),e(XJ,n9r),e(Dc,s9r),e(pr,l9r),e(pr,ux),e(ux,i9r),e(ux,ATe),e(ATe,d9r),e(ux,c9r),e(pr,f9r),e(pr,Vt),M(_x,Vt,null),e(Vt,m9r),e(Vt,yTe),e(yTe,g9r),e(Vt,h9r),e(Vt,Gc),e(Gc,p9r),e(Gc,LTe),e(LTe,u9r),e(Gc,_9r),e(Gc,zJ),e(zJ,b9r),e(Gc,v9r),e(Vt,F9r),M(c5,Vt,null),e(pr,T9r),e(pr,Vr),M(bx,Vr,null),e(Vr,M9r),e(Vr,xTe),e(xTe,E9r),e(Vr,C9r),e(Vr,_n),e(_n,w9r),e(_n,$Te),e($Te,A9r),e(_n,y9r),e(_n,kTe),e(kTe,L9r),e(_n,x9r),e(_n,STe),e(STe,$9r),e(_n,k9r),e(Vr,S9r),e(Vr,Se),e(Se,f5),e(f5,RTe),e(RTe,R9r),e(f5,B9r),e(f5,QJ),e(QJ,P9r),e(f5,I9r),e(Se,q9r),e(Se,m5),e(m5,BTe),e(BTe,N9r),e(m5,j9r),e(m5,WJ),e(WJ,D9r),e(m5,G9r),e(Se,O9r),e(Se,g5),e(g5,PTe),e(PTe,V9r),e(g5,X9r),e(g5,HJ),e(HJ,z9r),e(g5,Q9r),e(Se,W9r),e(Se,h5),e(h5,ITe),e(ITe,H9r),e(h5,U9r),e(h5,UJ),e(UJ,J9r),e(h5,Y9r),e(Se,K9r),e(Se,p5),e(p5,qTe),e(qTe,Z9r),e(p5,e$r),e(p5,JJ),e(JJ,o$r),e(p5,r$r),e(Se,t$r),e(Se,u5),e(u5,NTe),e(NTe,a$r),e(u5,n$r),e(u5,YJ),e(YJ,s$r),e(u5,l$r),e(Se,i$r),e(Se,_5),e(_5,jTe),e(jTe,d$r),e(_5,c$r),e(_5,KJ),e(KJ,f$r),e(_5,m$r),e(Se,g$r),e(Se,b5),e(b5,DTe),e(DTe,h$r),e(b5,p$r),e(b5,ZJ),e(ZJ,u$r),e(b5,_$r),e(Se,b$r),e(Se,v5),e(v5,GTe),e(GTe,v$r),e(v5,F$r),e(v5,eY),e(eY,T$r),e(v5,M$r),e(Vr,E$r),M(F5,Vr,null),b(f,xqe,_),b(f,Oc,_),e(Oc,T5),e(T5,OTe),M(vx,OTe,null),e(Oc,C$r),e(Oc,VTe),e(VTe,w$r),b(f,$qe,_),b(f,ur,_),M(Fx,ur,null),e(ur,A$r),e(ur,Vc),e(Vc,y$r),e(Vc,oY),e(oY,L$r),e(Vc,x$r),e(Vc,rY),e(rY,$$r),e(Vc,k$r),e(ur,S$r),e(ur,Tx),e(Tx,R$r),e(Tx,XTe),e(XTe,B$r),e(Tx,P$r),e(ur,I$r),e(ur,Xt),M(Mx,Xt,null),e(Xt,q$r),e(Xt,zTe),e(zTe,N$r),e(Xt,j$r),e(Xt,Xc),e(Xc,D$r),e(Xc,QTe),e(QTe,G$r),e(Xc,O$r),e(Xc,tY),e(tY,V$r),e(Xc,X$r),e(Xt,z$r),M(M5,Xt,null),e(ur,Q$r),e(ur,Xr),M(Ex,Xr,null),e(Xr,W$r),e(Xr,WTe),e(WTe,H$r),e(Xr,U$r),e(Xr,bn),e(bn,J$r),e(bn,HTe),e(HTe,Y$r),e(bn,K$r),e(bn,UTe),e(UTe,Z$r),e(bn,ekr),e(bn,JTe),e(JTe,okr),e(bn,rkr),e(Xr,tkr),e(Xr,xe),e(xe,E5),e(E5,YTe),e(YTe,akr),e(E5,nkr),e(E5,aY),e(aY,skr),e(E5,lkr),e(xe,ikr),e(xe,C5),e(C5,KTe),e(KTe,dkr),e(C5,ckr),e(C5,nY),e(nY,fkr),e(C5,mkr),e(xe,gkr),e(xe,w5),e(w5,ZTe),e(ZTe,hkr),e(w5,pkr),e(w5,sY),e(sY,ukr),e(w5,_kr),e(xe,bkr),e(xe,A5),e(A5,e7e),e(e7e,vkr),e(A5,Fkr),e(A5,lY),e(lY,Tkr),e(A5,Mkr),e(xe,Ekr),e(xe,y5),e(y5,o7e),e(o7e,Ckr),e(y5,wkr),e(y5,iY),e(iY,Akr),e(y5,ykr),e(xe,Lkr),e(xe,L5),e(L5,r7e),e(r7e,xkr),e(L5,$kr),e(L5,dY),e(dY,kkr),e(L5,Skr),e(xe,Rkr),e(xe,x5),e(x5,t7e),e(t7e,Bkr),e(x5,Pkr),e(x5,cY),e(cY,Ikr),e(x5,qkr),e(xe,Nkr),e(xe,$5),e($5,a7e),e(a7e,jkr),e($5,Dkr),e($5,fY),e(fY,Gkr),e($5,Okr),e(xe,Vkr),e(xe,k5),e(k5,n7e),e(n7e,Xkr),e(k5,zkr),e(k5,mY),e(mY,Qkr),e(k5,Wkr),e(xe,Hkr),e(xe,S5),e(S5,s7e),e(s7e,Ukr),e(S5,Jkr),e(S5,gY),e(gY,Ykr),e(S5,Kkr),e(Xr,Zkr),M(R5,Xr,null),b(f,kqe,_),b(f,zc,_),e(zc,B5),e(B5,l7e),M(Cx,l7e,null),e(zc,eSr),e(zc,i7e),e(i7e,oSr),b(f,Sqe,_),b(f,_r,_),M(wx,_r,null),e(_r,rSr),e(_r,Qc),e(Qc,tSr),e(Qc,hY),e(hY,aSr),e(Qc,nSr),e(Qc,pY),e(pY,sSr),e(Qc,lSr),e(_r,iSr),e(_r,Ax),e(Ax,dSr),e(Ax,d7e),e(d7e,cSr),e(Ax,fSr),e(_r,mSr),e(_r,zt),M(yx,zt,null),e(zt,gSr),e(zt,c7e),e(c7e,hSr),e(zt,pSr),e(zt,Wc),e(Wc,uSr),e(Wc,f7e),e(f7e,_Sr),e(Wc,bSr),e(Wc,uY),e(uY,vSr),e(Wc,FSr),e(zt,TSr),M(P5,zt,null),e(_r,MSr),e(_r,zr),M(Lx,zr,null),e(zr,ESr),e(zr,m7e),e(m7e,CSr),e(zr,wSr),e(zr,vn),e(vn,ASr),e(vn,g7e),e(g7e,ySr),e(vn,LSr),e(vn,h7e),e(h7e,xSr),e(vn,$Sr),e(vn,p7e),e(p7e,kSr),e(vn,SSr),e(zr,RSr),e(zr,$e),e($e,I5),e(I5,u7e),e(u7e,BSr),e(I5,PSr),e(I5,_Y),e(_Y,ISr),e(I5,qSr),e($e,NSr),e($e,q5),e(q5,_7e),e(_7e,jSr),e(q5,DSr),e(q5,bY),e(bY,GSr),e(q5,OSr),e($e,VSr),e($e,N5),e(N5,b7e),e(b7e,XSr),e(N5,zSr),e(N5,vY),e(vY,QSr),e(N5,WSr),e($e,HSr),e($e,j5),e(j5,v7e),e(v7e,USr),e(j5,JSr),e(j5,FY),e(FY,YSr),e(j5,KSr),e($e,ZSr),e($e,D5),e(D5,F7e),e(F7e,eRr),e(D5,oRr),e(D5,TY),e(TY,rRr),e(D5,tRr),e($e,aRr),e($e,G5),e(G5,T7e),e(T7e,nRr),e(G5,sRr),e(G5,MY),e(MY,lRr),e(G5,iRr),e($e,dRr),e($e,O5),e(O5,M7e),e(M7e,cRr),e(O5,fRr),e(O5,EY),e(EY,mRr),e(O5,gRr),e($e,hRr),e($e,V5),e(V5,E7e),e(E7e,pRr),e(V5,uRr),e(V5,CY),e(CY,_Rr),e(V5,bRr),e($e,vRr),e($e,X5),e(X5,C7e),e(C7e,FRr),e(X5,TRr),e(X5,wY),e(wY,MRr),e(X5,ERr),e($e,CRr),e($e,z5),e(z5,w7e),e(w7e,wRr),e(z5,ARr),e(z5,AY),e(AY,yRr),e(z5,LRr),e(zr,xRr),M(Q5,zr,null),b(f,Rqe,_),b(f,Hc,_),e(Hc,W5),e(W5,A7e),M(xx,A7e,null),e(Hc,$Rr),e(Hc,y7e),e(y7e,kRr),b(f,Bqe,_),b(f,br,_),M($x,br,null),e(br,SRr),e(br,Uc),e(Uc,RRr),e(Uc,yY),e(yY,BRr),e(Uc,PRr),e(Uc,LY),e(LY,IRr),e(Uc,qRr),e(br,NRr),e(br,kx),e(kx,jRr),e(kx,L7e),e(L7e,DRr),e(kx,GRr),e(br,ORr),e(br,Qt),M(Sx,Qt,null),e(Qt,VRr),e(Qt,x7e),e(x7e,XRr),e(Qt,zRr),e(Qt,Jc),e(Jc,QRr),e(Jc,$7e),e($7e,WRr),e(Jc,HRr),e(Jc,xY),e(xY,URr),e(Jc,JRr),e(Qt,YRr),M(H5,Qt,null),e(br,KRr),e(br,Qr),M(Rx,Qr,null),e(Qr,ZRr),e(Qr,k7e),e(k7e,eBr),e(Qr,oBr),e(Qr,Fn),e(Fn,rBr),e(Fn,S7e),e(S7e,tBr),e(Fn,aBr),e(Fn,R7e),e(R7e,nBr),e(Fn,sBr),e(Fn,B7e),e(B7e,lBr),e(Fn,iBr),e(Qr,dBr),e(Qr,De),e(De,U5),e(U5,P7e),e(P7e,cBr),e(U5,fBr),e(U5,$Y),e($Y,mBr),e(U5,gBr),e(De,hBr),e(De,J5),e(J5,I7e),e(I7e,pBr),e(J5,uBr),e(J5,kY),e(kY,_Br),e(J5,bBr),e(De,vBr),e(De,Y5),e(Y5,q7e),e(q7e,FBr),e(Y5,TBr),e(Y5,SY),e(SY,MBr),e(Y5,EBr),e(De,CBr),e(De,K5),e(K5,N7e),e(N7e,wBr),e(K5,ABr),e(K5,RY),e(RY,yBr),e(K5,LBr),e(De,xBr),e(De,Z5),e(Z5,j7e),e(j7e,$Br),e(Z5,kBr),e(Z5,BY),e(BY,SBr),e(Z5,RBr),e(De,BBr),e(De,eC),e(eC,D7e),e(D7e,PBr),e(eC,IBr),e(eC,PY),e(PY,qBr),e(eC,NBr),e(De,jBr),e(De,oC),e(oC,G7e),e(G7e,DBr),e(oC,GBr),e(oC,IY),e(IY,OBr),e(oC,VBr),e(De,XBr),e(De,rC),e(rC,O7e),e(O7e,zBr),e(rC,QBr),e(rC,qY),e(qY,WBr),e(rC,HBr),e(Qr,UBr),M(tC,Qr,null),b(f,Pqe,_),b(f,Yc,_),e(Yc,aC),e(aC,V7e),M(Bx,V7e,null),e(Yc,JBr),e(Yc,X7e),e(X7e,YBr),b(f,Iqe,_),b(f,vr,_),M(Px,vr,null),e(vr,KBr),e(vr,Kc),e(Kc,ZBr),e(Kc,NY),e(NY,ePr),e(Kc,oPr),e(Kc,jY),e(jY,rPr),e(Kc,tPr),e(vr,aPr),e(vr,Ix),e(Ix,nPr),e(Ix,z7e),e(z7e,sPr),e(Ix,lPr),e(vr,iPr),e(vr,Wt),M(qx,Wt,null),e(Wt,dPr),e(Wt,Q7e),e(Q7e,cPr),e(Wt,fPr),e(Wt,Zc),e(Zc,mPr),e(Zc,W7e),e(W7e,gPr),e(Zc,hPr),e(Zc,DY),e(DY,pPr),e(Zc,uPr),e(Wt,_Pr),M(nC,Wt,null),e(vr,bPr),e(vr,Wr),M(Nx,Wr,null),e(Wr,vPr),e(Wr,H7e),e(H7e,FPr),e(Wr,TPr),e(Wr,Tn),e(Tn,MPr),e(Tn,U7e),e(U7e,EPr),e(Tn,CPr),e(Tn,J7e),e(J7e,wPr),e(Tn,APr),e(Tn,Y7e),e(Y7e,yPr),e(Tn,LPr),e(Wr,xPr),e(Wr,Ge),e(Ge,sC),e(sC,K7e),e(K7e,$Pr),e(sC,kPr),e(sC,GY),e(GY,SPr),e(sC,RPr),e(Ge,BPr),e(Ge,lC),e(lC,Z7e),e(Z7e,PPr),e(lC,IPr),e(lC,OY),e(OY,qPr),e(lC,NPr),e(Ge,jPr),e(Ge,iC),e(iC,eMe),e(eMe,DPr),e(iC,GPr),e(iC,VY),e(VY,OPr),e(iC,VPr),e(Ge,XPr),e(Ge,dC),e(dC,oMe),e(oMe,zPr),e(dC,QPr),e(dC,XY),e(XY,WPr),e(dC,HPr),e(Ge,UPr),e(Ge,cC),e(cC,rMe),e(rMe,JPr),e(cC,YPr),e(cC,zY),e(zY,KPr),e(cC,ZPr),e(Ge,eIr),e(Ge,fC),e(fC,tMe),e(tMe,oIr),e(fC,rIr),e(fC,QY),e(QY,tIr),e(fC,aIr),e(Ge,nIr),e(Ge,mC),e(mC,aMe),e(aMe,sIr),e(mC,lIr),e(mC,WY),e(WY,iIr),e(mC,dIr),e(Ge,cIr),e(Ge,gC),e(gC,nMe),e(nMe,fIr),e(gC,mIr),e(gC,HY),e(HY,gIr),e(gC,hIr),e(Wr,pIr),M(hC,Wr,null),b(f,qqe,_),b(f,ef,_),e(ef,pC),e(pC,sMe),M(jx,sMe,null),e(ef,uIr),e(ef,lMe),e(lMe,_Ir),b(f,Nqe,_),b(f,Fr,_),M(Dx,Fr,null),e(Fr,bIr),e(Fr,of),e(of,vIr),e(of,UY),e(UY,FIr),e(of,TIr),e(of,JY),e(JY,MIr),e(of,EIr),e(Fr,CIr),e(Fr,Gx),e(Gx,wIr),e(Gx,iMe),e(iMe,AIr),e(Gx,yIr),e(Fr,LIr),e(Fr,Ht),M(Ox,Ht,null),e(Ht,xIr),e(Ht,dMe),e(dMe,$Ir),e(Ht,kIr),e(Ht,rf),e(rf,SIr),e(rf,cMe),e(cMe,RIr),e(rf,BIr),e(rf,YY),e(YY,PIr),e(rf,IIr),e(Ht,qIr),M(uC,Ht,null),e(Fr,NIr),e(Fr,Hr),M(Vx,Hr,null),e(Hr,jIr),e(Hr,fMe),e(fMe,DIr),e(Hr,GIr),e(Hr,Mn),e(Mn,OIr),e(Mn,mMe),e(mMe,VIr),e(Mn,XIr),e(Mn,gMe),e(gMe,zIr),e(Mn,QIr),e(Mn,hMe),e(hMe,WIr),e(Mn,HIr),e(Hr,UIr),e(Hr,pMe),e(pMe,_C),e(_C,uMe),e(uMe,JIr),e(_C,YIr),e(_C,KY),e(KY,KIr),e(_C,ZIr),e(Hr,eqr),M(bC,Hr,null),b(f,jqe,_),b(f,tf,_),e(tf,vC),e(vC,_Me),M(Xx,_Me,null),e(tf,oqr),e(tf,bMe),e(bMe,rqr),b(f,Dqe,_),b(f,Tr,_),M(zx,Tr,null),e(Tr,tqr),e(Tr,af),e(af,aqr),e(af,ZY),e(ZY,nqr),e(af,sqr),e(af,eK),e(eK,lqr),e(af,iqr),e(Tr,dqr),e(Tr,Qx),e(Qx,cqr),e(Qx,vMe),e(vMe,fqr),e(Qx,mqr),e(Tr,gqr),e(Tr,Ut),M(Wx,Ut,null),e(Ut,hqr),e(Ut,FMe),e(FMe,pqr),e(Ut,uqr),e(Ut,nf),e(nf,_qr),e(nf,TMe),e(TMe,bqr),e(nf,vqr),e(nf,oK),e(oK,Fqr),e(nf,Tqr),e(Ut,Mqr),M(FC,Ut,null),e(Tr,Eqr),e(Tr,Ur),M(Hx,Ur,null),e(Ur,Cqr),e(Ur,MMe),e(MMe,wqr),e(Ur,Aqr),e(Ur,En),e(En,yqr),e(En,EMe),e(EMe,Lqr),e(En,xqr),e(En,CMe),e(CMe,$qr),e(En,kqr),e(En,wMe),e(wMe,Sqr),e(En,Rqr),e(Ur,Bqr),e(Ur,Ux),e(Ux,TC),e(TC,AMe),e(AMe,Pqr),e(TC,Iqr),e(TC,rK),e(rK,qqr),e(TC,Nqr),e(Ux,jqr),e(Ux,MC),e(MC,yMe),e(yMe,Dqr),e(MC,Gqr),e(MC,tK),e(tK,Oqr),e(MC,Vqr),e(Ur,Xqr),M(EC,Ur,null),b(f,Gqe,_),b(f,sf,_),e(sf,CC),e(CC,LMe),M(Jx,LMe,null),e(sf,zqr),e(sf,xMe),e(xMe,Qqr),b(f,Oqe,_),b(f,Mr,_),M(Yx,Mr,null),e(Mr,Wqr),e(Mr,lf),e(lf,Hqr),e(lf,aK),e(aK,Uqr),e(lf,Jqr),e(lf,nK),e(nK,Yqr),e(lf,Kqr),e(Mr,Zqr),e(Mr,Kx),e(Kx,eNr),e(Kx,$Me),e($Me,oNr),e(Kx,rNr),e(Mr,tNr),e(Mr,Jt),M(Zx,Jt,null),e(Jt,aNr),e(Jt,kMe),e(kMe,nNr),e(Jt,sNr),e(Jt,df),e(df,lNr),e(df,SMe),e(SMe,iNr),e(df,dNr),e(df,sK),e(sK,cNr),e(df,fNr),e(Jt,mNr),M(wC,Jt,null),e(Mr,gNr),e(Mr,Jr),M(e9,Jr,null),e(Jr,hNr),e(Jr,RMe),e(RMe,pNr),e(Jr,uNr),e(Jr,Cn),e(Cn,_Nr),e(Cn,BMe),e(BMe,bNr),e(Cn,vNr),e(Cn,PMe),e(PMe,FNr),e(Cn,TNr),e(Cn,IMe),e(IMe,MNr),e(Cn,ENr),e(Jr,CNr),e(Jr,qMe),e(qMe,AC),e(AC,NMe),e(NMe,wNr),e(AC,ANr),e(AC,lK),e(lK,yNr),e(AC,LNr),e(Jr,xNr),M(yC,Jr,null),Vqe=!0},p(f,[_]){const o9={};_&2&&(o9.$$scope={dirty:_,ctx:f}),bf.$set(o9);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),ug.$set(jMe);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),Hg.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),Mh.$set(GMe);const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),Eh.$set(r9);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),Gh.$set(OMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Oh.$set(wn);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),zh.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),Bu.$set(XMe);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),Iu.$set(zMe);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),E_.$set(t9);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),w_.$set(QMe);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),i0.$set(a9);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),c0.$set(WMe);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:f}),W0.$set(n9);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),U0.$set(HMe);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),h1.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),u1.$set(JMe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),mb.$set(cf);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),hb.$set(YMe);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),zb.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),Wb.$set(ZMe);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),e2.$set(s9);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),r2.$set(e4e);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),N2.$set(o4e);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),D2.$set(r4e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),Lv.$set(Kr);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),$v.$set(l9);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),Rv.$set(t4e);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:f}),Pv.$set(i9);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),Hv.$set(a4e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Jv.$set(Zr);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),Zv.$set(n4e);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),oF.$set(ff);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),fF.$set(s4e);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),gF.$set(l4e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),vF.$set(L);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),TF.$set(LC);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),kF.$set(i4e);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),RF.$set(d4e);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),qF.$set(xC);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),jF.$set(c4e);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),zF.$set(f4e);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),WF.$set($C);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),KF.$set(m4e);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),e6.$set(g4e);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),a6.$set(kC);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),s6.$set(h4e);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),d6.$set(p4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),f6.$set(SC);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),_6.$set(u4e);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),v6.$set(_4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),M6.$set(RC);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),C6.$set(b4e);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),pT.$set(v4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),_T.$set(BC);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),GT.$set(F4e);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),VT.$set(T4e);const PC={};_&2&&(PC.$$scope={dirty:_,ctx:f}),r7.$set(PC);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),a7.$set(M4e);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),i7.$set(E4e);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),c7.$set(IC);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),k7.$set(C4e);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),R7.$set(w4e);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),X7.$set(qC);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),Q7.$set(A4e);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),vM.$set(y4e);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),TM.$set(NC);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),jM.$set(L4e);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),GM.$set(x4e);const jC={};_&2&&(jC.$$scope={dirty:_,ctx:f}),XM.$set(jC);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),QM.$set($4e);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),HM.$set(k4e);const DC={};_&2&&(DC.$$scope={dirty:_,ctx:f}),JM.$set(DC);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),_4.$set(S4e);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),v4.$set(R4e);const GC={};_&2&&(GC.$$scope={dirty:_,ctx:f}),D4.$set(GC);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),O4.$set(B4e);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),X4.$set(P4e);const OC={};_&2&&(OC.$$scope={dirty:_,ctx:f}),Q4.$set(OC);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),H4.$set(I4e);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),J4.$set(q4e);const VC={};_&2&&(VC.$$scope={dirty:_,ctx:f}),ME.$set(VC);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),CE.$set(N4e);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),BE.$set(j4e);const XC={};_&2&&(XC.$$scope={dirty:_,ctx:f}),IE.$set(XC);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),UE.$set(D4e);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),YE.$set(G4e);const zC={};_&2&&(zC.$$scope={dirty:_,ctx:f}),i5.$set(zC);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),c5.$set(O4e);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),F5.$set(V4e);const QC={};_&2&&(QC.$$scope={dirty:_,ctx:f}),M5.$set(QC);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),R5.$set(X4e);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),P5.$set(z4e);const WC={};_&2&&(WC.$$scope={dirty:_,ctx:f}),Q5.$set(WC);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),H5.$set(Q4e);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),tC.$set(W4e);const HC={};_&2&&(HC.$$scope={dirty:_,ctx:f}),nC.$set(HC);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),hC.$set(H4e);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),uC.$set(U4e);const UC={};_&2&&(UC.$$scope={dirty:_,ctx:f}),bC.$set(UC);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),FC.$set(J4e);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),EC.$set(Y4e);const JC={};_&2&&(JC.$$scope={dirty:_,ctx:f}),wC.$set(JC);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),yC.$set(K4e)},i(f){Vqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Jw.$$.fragment,f),E(Yw.$$.fragment,f),E(bf.$$.fragment,f),E(Kw.$$.fragment,f),E(Zw.$$.fragment,f),E(rA.$$.fragment,f),E(ug.$$.fragment,f),E(tA.$$.fragment,f),E(aA.$$.fragment,f),E(nA.$$.fragment,f),E(iA.$$.fragment,f),E(Hg.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(fA.$$.fragment,f),E(hA.$$.fragment,f),E(Mh.$$.fragment,f),E(Eh.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(_A.$$.fragment,f),E(FA.$$.fragment,f),E(Gh.$$.fragment,f),E(Oh.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(wA.$$.fragment,f),E(zh.$$.fragment,f),E(AA.$$.fragment,f),E(Bu.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E($A.$$.fragment,f),E(Iu.$$.fragment,f),E(kA.$$.fragment,f),E(E_.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(PA.$$.fragment,f),E(w_.$$.fragment,f),E(IA.$$.fragment,f),E(i0.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(DA.$$.fragment,f),E(c0.$$.fragment,f),E(GA.$$.fragment,f),E(W0.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(zA.$$.fragment,f),E(U0.$$.fragment,f),E(QA.$$.fragment,f),E(h1.$$.fragment,f),E(WA.$$.fragment,f),E(HA.$$.fragment,f),E(JA.$$.fragment,f),E(u1.$$.fragment,f),E(YA.$$.fragment,f),E(mb.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(oy.$$.fragment,f),E(hb.$$.fragment,f),E(ry.$$.fragment,f),E(zb.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(Wb.$$.fragment,f),E(ly.$$.fragment,f),E(e2.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(r2.$$.fragment,f),E(my.$$.fragment,f),E(N2.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(D2.$$.fragment,f),E(_y.$$.fragment,f),E(Lv.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E($v.$$.fragment,f),E(My.$$.fragment,f),E(Rv.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(Pv.$$.fragment,f),E(yy.$$.fragment,f),E(Hv.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(Jv.$$.fragment,f),E(Sy.$$.fragment,f),E(Zv.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(oF.$$.fragment,f),E(qy.$$.fragment,f),E(fF.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(gF.$$.fragment,f),E(Oy.$$.fragment,f),E(vF.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(TF.$$.fragment,f),E(Wy.$$.fragment,f),E(kF.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(RF.$$.fragment,f),E(Ky.$$.fragment,f),E(qF.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(jF.$$.fragment,f),E(aL.$$.fragment,f),E(zF.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(WF.$$.fragment,f),E(dL.$$.fragment,f),E(KF.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(e6.$$.fragment,f),E(hL.$$.fragment,f),E(a6.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(s6.$$.fragment,f),E(FL.$$.fragment,f),E(d6.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(f6.$$.fragment,f),E(wL.$$.fragment,f),E(_6.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(v6.$$.fragment,f),E($L.$$.fragment,f),E(M6.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(BL.$$.fragment,f),E(C6.$$.fragment,f),E(PL.$$.fragment,f),E(pT.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(_T.$$.fragment,f),E(DL.$$.fragment,f),E(GT.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(VT.$$.fragment,f),E(zL.$$.fragment,f),E(r7.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(a7.$$.fragment,f),E(JL.$$.fragment,f),E(i7.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(c7.$$.fragment,f),E(o8.$$.fragment,f),E(k7.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(R7.$$.fragment,f),E(s8.$$.fragment,f),E(X7.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(Q7.$$.fragment,f),E(f8.$$.fragment,f),E(vM.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(TM.$$.fragment,f),E(u8.$$.fragment,f),E(jM.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(GM.$$.fragment,f),E(T8.$$.fragment,f),E(XM.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(QM.$$.fragment,f),E(y8.$$.fragment,f),E(HM.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(JM.$$.fragment,f),E(S8.$$.fragment,f),E(_4.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(v4.$$.fragment,f),E(q8.$$.fragment,f),E(D4.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(O4.$$.fragment,f),E(O8.$$.fragment,f),E(X4.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(Q8.$$.fragment,f),E(Q4.$$.fragment,f),E(W8.$$.fragment,f),E(H4.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(J4.$$.fragment,f),E(K8.$$.fragment,f),E(ME.$$.fragment,f),E(Z8.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(CE.$$.fragment,f),E(tx.$$.fragment,f),E(BE.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(IE.$$.fragment,f),E(ix.$$.fragment,f),E(UE.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(YE.$$.fragment,f),E(gx.$$.fragment,f),E(i5.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(c5.$$.fragment,f),E(bx.$$.fragment,f),E(F5.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(M5.$$.fragment,f),E(Ex.$$.fragment,f),E(R5.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(yx.$$.fragment,f),E(P5.$$.fragment,f),E(Lx.$$.fragment,f),E(Q5.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(H5.$$.fragment,f),E(Rx.$$.fragment,f),E(tC.$$.fragment,f),E(Bx.$$.fragment,f),E(Px.$$.fragment,f),E(qx.$$.fragment,f),E(nC.$$.fragment,f),E(Nx.$$.fragment,f),E(hC.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(uC.$$.fragment,f),E(Vx.$$.fragment,f),E(bC.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(FC.$$.fragment,f),E(Hx.$$.fragment,f),E(EC.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(wC.$$.fragment,f),E(e9.$$.fragment,f),E(yC.$$.fragment,f),Vqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Jw.$$.fragment,f),C(Yw.$$.fragment,f),C(bf.$$.fragment,f),C(Kw.$$.fragment,f),C(Zw.$$.fragment,f),C(rA.$$.fragment,f),C(ug.$$.fragment,f),C(tA.$$.fragment,f),C(aA.$$.fragment,f),C(nA.$$.fragment,f),C(iA.$$.fragment,f),C(Hg.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(fA.$$.fragment,f),C(hA.$$.fragment,f),C(Mh.$$.fragment,f),C(Eh.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(_A.$$.fragment,f),C(FA.$$.fragment,f),C(Gh.$$.fragment,f),C(Oh.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(wA.$$.fragment,f),C(zh.$$.fragment,f),C(AA.$$.fragment,f),C(Bu.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C($A.$$.fragment,f),C(Iu.$$.fragment,f),C(kA.$$.fragment,f),C(E_.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(PA.$$.fragment,f),C(w_.$$.fragment,f),C(IA.$$.fragment,f),C(i0.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(DA.$$.fragment,f),C(c0.$$.fragment,f),C(GA.$$.fragment,f),C(W0.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(zA.$$.fragment,f),C(U0.$$.fragment,f),C(QA.$$.fragment,f),C(h1.$$.fragment,f),C(WA.$$.fragment,f),C(HA.$$.fragment,f),C(JA.$$.fragment,f),C(u1.$$.fragment,f),C(YA.$$.fragment,f),C(mb.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(oy.$$.fragment,f),C(hb.$$.fragment,f),C(ry.$$.fragment,f),C(zb.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(Wb.$$.fragment,f),C(ly.$$.fragment,f),C(e2.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(r2.$$.fragment,f),C(my.$$.fragment,f),C(N2.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(D2.$$.fragment,f),C(_y.$$.fragment,f),C(Lv.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C($v.$$.fragment,f),C(My.$$.fragment,f),C(Rv.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(Pv.$$.fragment,f),C(yy.$$.fragment,f),C(Hv.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(Jv.$$.fragment,f),C(Sy.$$.fragment,f),C(Zv.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(oF.$$.fragment,f),C(qy.$$.fragment,f),C(fF.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(gF.$$.fragment,f),C(Oy.$$.fragment,f),C(vF.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(TF.$$.fragment,f),C(Wy.$$.fragment,f),C(kF.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(RF.$$.fragment,f),C(Ky.$$.fragment,f),C(qF.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(jF.$$.fragment,f),C(aL.$$.fragment,f),C(zF.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(WF.$$.fragment,f),C(dL.$$.fragment,f),C(KF.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(e6.$$.fragment,f),C(hL.$$.fragment,f),C(a6.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(s6.$$.fragment,f),C(FL.$$.fragment,f),C(d6.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(f6.$$.fragment,f),C(wL.$$.fragment,f),C(_6.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(v6.$$.fragment,f),C($L.$$.fragment,f),C(M6.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(BL.$$.fragment,f),C(C6.$$.fragment,f),C(PL.$$.fragment,f),C(pT.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(_T.$$.fragment,f),C(DL.$$.fragment,f),C(GT.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(VT.$$.fragment,f),C(zL.$$.fragment,f),C(r7.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(a7.$$.fragment,f),C(JL.$$.fragment,f),C(i7.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(c7.$$.fragment,f),C(o8.$$.fragment,f),C(k7.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(R7.$$.fragment,f),C(s8.$$.fragment,f),C(X7.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(Q7.$$.fragment,f),C(f8.$$.fragment,f),C(vM.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(TM.$$.fragment,f),C(u8.$$.fragment,f),C(jM.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(GM.$$.fragment,f),C(T8.$$.fragment,f),C(XM.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(QM.$$.fragment,f),C(y8.$$.fragment,f),C(HM.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(JM.$$.fragment,f),C(S8.$$.fragment,f),C(_4.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(v4.$$.fragment,f),C(q8.$$.fragment,f),C(D4.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(O4.$$.fragment,f),C(O8.$$.fragment,f),C(X4.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(Q8.$$.fragment,f),C(Q4.$$.fragment,f),C(W8.$$.fragment,f),C(H4.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(J4.$$.fragment,f),C(K8.$$.fragment,f),C(ME.$$.fragment,f),C(Z8.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(CE.$$.fragment,f),C(tx.$$.fragment,f),C(BE.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(IE.$$.fragment,f),C(ix.$$.fragment,f),C(UE.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(YE.$$.fragment,f),C(gx.$$.fragment,f),C(i5.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(c5.$$.fragment,f),C(bx.$$.fragment,f),C(F5.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(M5.$$.fragment,f),C(Ex.$$.fragment,f),C(R5.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(yx.$$.fragment,f),C(P5.$$.fragment,f),C(Lx.$$.fragment,f),C(Q5.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(H5.$$.fragment,f),C(Rx.$$.fragment,f),C(tC.$$.fragment,f),C(Bx.$$.fragment,f),C(Px.$$.fragment,f),C(qx.$$.fragment,f),C(nC.$$.fragment,f),C(Nx.$$.fragment,f),C(hC.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(uC.$$.fragment,f),C(Vx.$$.fragment,f),C(bC.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(FC.$$.fragment,f),C(Hx.$$.fragment,f),C(EC.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(wC.$$.fragment,f),C(e9.$$.fragment,f),C(yC.$$.fragment,f),Vqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(gf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(pf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(DPe),f&&t(pi),w(Jw),f&&t(GPe),f&&t($n),f&&t(OPe),w(Yw,f),f&&t(VPe),f&&t(v$),f&&t(XPe),w(bf,f),f&&t(zPe),f&&t(ui),w(Kw),f&&t(QPe),f&&t(Co),w(Zw),w(rA),w(ug),w(tA),f&&t(WPe),f&&t(bi),w(aA),f&&t(HPe),f&&t(wo),w(nA),w(iA),w(Hg),w(dA),f&&t(UPe),f&&t(vi),w(cA),f&&t(JPe),f&&t(Ao),w(fA),w(hA),w(Mh),w(Eh),w(pA),f&&t(YPe),f&&t(Fi),w(uA),f&&t(KPe),f&&t(yo),w(_A),w(FA),w(Gh),w(Oh),w(TA),f&&t(ZPe),f&&t(Mi),w(MA),f&&t(eIe),f&&t(Lo),w(EA),w(wA),w(zh),w(AA),w(Bu),f&&t(oIe),f&&t(wi),w(yA),f&&t(rIe),f&&t(xo),w(LA),w($A),w(Iu),w(kA),w(E_),f&&t(tIe),f&&t(Li),w(SA),f&&t(aIe),f&&t($o),w(RA),w(PA),w(w_),w(IA),w(i0),f&&t(nIe),f&&t(ki),w(qA),f&&t(sIe),f&&t(ko),w(NA),w(DA),w(c0),w(GA),w(W0),f&&t(lIe),f&&t(Bi),w(OA),f&&t(iIe),f&&t(So),w(VA),w(zA),w(U0),w(QA),w(h1),f&&t(dIe),f&&t(qi),w(WA),f&&t(cIe),f&&t(Ro),w(HA),w(JA),w(u1),w(YA),w(mb),f&&t(fIe),f&&t(Di),w(KA),f&&t(mIe),f&&t(Bo),w(ZA),w(oy),w(hb),w(ry),w(zb),f&&t(gIe),f&&t(Vi),w(ty),f&&t(hIe),f&&t(Po),w(ay),w(sy),w(Wb),w(ly),w(e2),f&&t(pIe),f&&t(Qi),w(iy),f&&t(uIe),f&&t(Io),w(dy),w(fy),w(r2),w(my),w(N2),f&&t(_Ie),f&&t(Ui),w(gy),f&&t(bIe),f&&t(qo),w(hy),w(uy),w(D2),w(_y),w(Lv),f&&t(vIe),f&&t(Ki),w(by),f&&t(FIe),f&&t(No),w(vy),w(Ty),w($v),w(My),w(Rv),f&&t(TIe),f&&t(od),w(Ey),f&&t(MIe),f&&t(jo),w(Cy),w(Ay),w(Pv),w(yy),w(Hv),f&&t(EIe),f&&t(ad),w(Ly),f&&t(CIe),f&&t(Do),w(xy),w(ky),w(Jv),w(Sy),w(Zv),f&&t(wIe),f&&t(ld),w(Ry),f&&t(AIe),f&&t(Go),w(By),w(Iy),w(oF),w(qy),w(fF),f&&t(yIe),f&&t(cd),w(Ny),f&&t(LIe),f&&t(Oo),w(jy),w(Gy),w(gF),w(Oy),w(vF),f&&t(xIe),f&&t(gd),w(Vy),f&&t($Ie),f&&t(Vo),w(Xy),w(Qy),w(TF),w(Wy),w(kF),f&&t(kIe),f&&t(ud),w(Hy),f&&t(SIe),f&&t(Xo),w(Uy),w(Yy),w(RF),w(Ky),w(qF),f&&t(RIe),f&&t(vd),w(eL),f&&t(BIe),f&&t(zo),w(oL),w(tL),w(jF),w(aL),w(zF),f&&t(PIe),f&&t(Md),w(nL),f&&t(IIe),f&&t(Qo),w(sL),w(iL),w(WF),w(dL),w(KF),f&&t(qIe),f&&t(Ad),w(cL),f&&t(NIe),f&&t(Wo),w(fL),w(gL),w(e6),w(hL),w(a6),f&&t(jIe),f&&t(xd),w(uL),f&&t(DIe),f&&t(Ho),w(_L),w(vL),w(s6),w(FL),w(d6),f&&t(GIe),f&&t(Sd),w(TL),f&&t(OIe),f&&t(Uo),w(ML),w(CL),w(f6),w(wL),w(_6),f&&t(VIe),f&&t(Pd),w(AL),f&&t(XIe),f&&t(Jo),w(yL),w(xL),w(v6),w($L),w(M6),f&&t(zIe),f&&t(Nd),w(kL),f&&t(QIe),f&&t(Yo),w(SL),w(BL),w(C6),w(PL),w(pT),f&&t(WIe),f&&t(Gd),w(IL),f&&t(HIe),f&&t(Ko),w(qL),w(jL),w(_T),w(DL),w(GT),f&&t(UIe),f&&t(Xd),w(GL),f&&t(JIe),f&&t(Zo),w(OL),w(XL),w(VT),w(zL),w(r7),f&&t(YIe),f&&t(Wd),w(QL),f&&t(KIe),f&&t(er),w(WL),w(UL),w(a7),w(JL),w(i7),f&&t(ZIe),f&&t(Yd),w(YL),f&&t(eqe),f&&t(or),w(KL),w(e8),w(c7),w(o8),w(k7),f&&t(oqe),f&&t(ec),w(r8),f&&t(rqe),f&&t(rr),w(t8),w(n8),w(R7),w(s8),w(X7),f&&t(tqe),f&&t(tc),w(l8),f&&t(aqe),f&&t(tr),w(i8),w(c8),w(Q7),w(f8),w(vM),f&&t(nqe),f&&t(sc),w(m8),f&&t(sqe),f&&t(ar),w(g8),w(p8),w(TM),w(u8),w(jM),f&&t(lqe),f&&t(dc),w(_8),f&&t(iqe),f&&t(nr),w(b8),w(F8),w(GM),w(T8),w(XM),f&&t(dqe),f&&t(mc),w(E8),f&&t(cqe),f&&t(sr),w(C8),w(A8),w(QM),w(y8),w(HM),f&&t(fqe),f&&t(pc),w(L8),f&&t(mqe),f&&t(lr),w(x8),w(k8),w(JM),w(S8),w(_4),f&&t(gqe),f&&t(bc),w(R8),f&&t(hqe),f&&t(ir),w(B8),w(I8),w(v4),w(q8),w(D4),f&&t(pqe),f&&t(Tc),w(N8),f&&t(uqe),f&&t(dr),w(j8),w(G8),w(O4),w(O8),w(X4),f&&t(_qe),f&&t(Cc),w(V8),f&&t(bqe),f&&t(cr),w(X8),w(Q8),w(Q4),w(W8),w(H4),f&&t(vqe),f&&t(yc),w(H8),f&&t(Fqe),f&&t(fr),w(U8),w(Y8),w(J4),w(K8),w(ME),f&&t(Tqe),f&&t($c),w(Z8),f&&t(Mqe),f&&t(mr),w(ex),w(rx),w(CE),w(tx),w(BE),f&&t(Eqe),f&&t(Rc),w(ax),f&&t(Cqe),f&&t(gr),w(nx),w(lx),w(IE),w(ix),w(UE),f&&t(wqe),f&&t(Ic),w(dx),f&&t(Aqe),f&&t(hr),w(cx),w(mx),w(YE),w(gx),w(i5),f&&t(yqe),f&&t(jc),w(hx),f&&t(Lqe),f&&t(pr),w(px),w(_x),w(c5),w(bx),w(F5),f&&t(xqe),f&&t(Oc),w(vx),f&&t($qe),f&&t(ur),w(Fx),w(Mx),w(M5),w(Ex),w(R5),f&&t(kqe),f&&t(zc),w(Cx),f&&t(Sqe),f&&t(_r),w(wx),w(yx),w(P5),w(Lx),w(Q5),f&&t(Rqe),f&&t(Hc),w(xx),f&&t(Bqe),f&&t(br),w($x),w(Sx),w(H5),w(Rx),w(tC),f&&t(Pqe),f&&t(Yc),w(Bx),f&&t(Iqe),f&&t(vr),w(Px),w(qx),w(nC),w(Nx),w(hC),f&&t(qqe),f&&t(ef),w(jx),f&&t(Nqe),f&&t(Fr),w(Dx),w(Ox),w(uC),w(Vx),w(bC),f&&t(jqe),f&&t(tf),w(Xx),f&&t(Dqe),f&&t(Tr),w(zx),w(Wx),w(FC),w(Hx),w(EC),f&&t(Gqe),f&&t(sf),w(Jx),f&&t(Oqe),f&&t(Mr),w(Yx),w(Zx),w(wC),w(e9),w(yC)}}}const tLt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function aLt(A){return aAt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fLt extends eAt{constructor(g){super();oAt(this,g,aLt,rLt,rAt,{})}}export{fLt as default,tLt as metadata};
