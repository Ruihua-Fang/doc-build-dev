import{S as oyt,i as ryt,s as tyt,e as a,k as l,w as F,t as o,M as ayt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as nyt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as Tjr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function syt(L){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,Yw,hf,qe,Xe,fi,An,Kw,yn,Ln,Zw,mi,xn,eA,gi,pf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),gf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),Yw=o(")."),hf=l(),qe=a("p"),Xe=o("Likewise, if your "),fi=a("code"),An=o("NewModel"),Kw=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),Zw=o(`, make sure its
`),mi=a("code"),xn=o("config_class"),eA=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),pf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var v$=s(p);m=r(v$,"NewModelConfig"),v$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var F$=s(ii);gf=r(F$,"model_type"),F$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var T$=s(di);ci=r(T$,'"new-model"'),T$.forEach(t),Yw=r(Ae,")."),Ae.forEach(t),hf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),fi=n(Eo,"CODE",{});var Ea=s(fi);An=r(Ea,"NewModel"),Ea.forEach(t),Kw=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var M$=s(yn);Ln=r(M$,"PreTrainedModel"),M$.forEach(t),Zw=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var uf=s(mi);xn=r(uf,"config_class"),uf.forEach(t),eA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var E$=s(gi);pf=r(E$,"NewModelConfig"),E$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,gf),e(g,et),e(g,di),e(di,ci),e(g,Yw),b(ze,hf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,fi),e(fi,An),e(qe,Kw),e(qe,yn),e(yn,Ln),e(qe,Zw),e(qe,mi),e(mi,xn),e(qe,eA),e(qe,gi),e(gi,pf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(hf),ze&&t(qe)}}}function lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t8t(L){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,Yw,hf,qe,Xe,fi,An,Kw,yn,Ln,Zw,mi,xn,eA,gi,pf,Ma,ze,Ae,v$,hi,F$,T$,Eo,Ea,M$,uf,E$,_De,sIe,pi,_f,cee,oA,bDe,fee,vDe,lIe,$n,FDe,mee,TDe,MDe,gee,EDe,CDe,iIe,rA,dIe,C$,wDe,cIe,bf,fIe,ui,vf,hee,tA,ADe,pee,yDe,mIe,Co,aA,LDe,nA,xDe,w$,$De,kDe,SDe,sA,RDe,uee,BDe,PDe,IDe,Er,lA,qDe,_ee,NDe,jDe,_i,DDe,bee,GDe,ODe,vee,VDe,XDe,zDe,A,Ff,Fee,QDe,WDe,A$,HDe,UDe,JDe,Tf,Tee,YDe,KDe,y$,ZDe,eGe,oGe,Mf,Mee,rGe,tGe,L$,aGe,nGe,sGe,Ef,Eee,lGe,iGe,x$,dGe,cGe,fGe,Cf,Cee,mGe,gGe,$$,hGe,pGe,uGe,wf,wee,_Ge,bGe,k$,vGe,FGe,TGe,Af,Aee,MGe,EGe,S$,CGe,wGe,AGe,yf,yee,yGe,LGe,R$,xGe,$Ge,kGe,Lf,Lee,SGe,RGe,B$,BGe,PGe,IGe,xf,xee,qGe,NGe,P$,jGe,DGe,GGe,$f,$ee,OGe,VGe,I$,XGe,zGe,QGe,kf,kee,WGe,HGe,q$,UGe,JGe,YGe,Sf,See,KGe,ZGe,N$,eOe,oOe,rOe,Rf,Ree,tOe,aOe,j$,nOe,sOe,lOe,Bf,Bee,iOe,dOe,D$,cOe,fOe,mOe,Pf,Pee,gOe,hOe,G$,pOe,uOe,_Oe,If,Iee,bOe,vOe,O$,FOe,TOe,MOe,qf,qee,EOe,COe,V$,wOe,AOe,yOe,Nf,Nee,LOe,xOe,X$,$Oe,kOe,SOe,jf,jee,ROe,BOe,z$,POe,IOe,qOe,Df,Dee,NOe,jOe,Q$,DOe,GOe,OOe,Gf,Gee,VOe,XOe,W$,zOe,QOe,WOe,Of,Oee,HOe,UOe,H$,JOe,YOe,KOe,Vf,Vee,ZOe,eVe,U$,oVe,rVe,tVe,Xf,Xee,aVe,nVe,J$,sVe,lVe,iVe,zf,zee,dVe,cVe,Y$,fVe,mVe,gVe,Qf,Qee,hVe,pVe,K$,uVe,_Ve,bVe,Wf,Wee,vVe,FVe,Z$,TVe,MVe,EVe,Hf,Hee,CVe,wVe,ek,AVe,yVe,LVe,Uf,Uee,xVe,$Ve,ok,kVe,SVe,RVe,Jf,Jee,BVe,PVe,rk,IVe,qVe,NVe,Yf,Yee,jVe,DVe,tk,GVe,OVe,VVe,Kf,Kee,XVe,zVe,ak,QVe,WVe,HVe,Zf,Zee,UVe,JVe,nk,YVe,KVe,ZVe,em,eoe,eXe,oXe,sk,rXe,tXe,aXe,om,ooe,nXe,sXe,lk,lXe,iXe,dXe,rm,roe,cXe,fXe,ik,mXe,gXe,hXe,tm,toe,pXe,uXe,dk,_Xe,bXe,vXe,am,aoe,FXe,TXe,ck,MXe,EXe,CXe,nm,noe,wXe,AXe,fk,yXe,LXe,xXe,sm,soe,$Xe,kXe,mk,SXe,RXe,BXe,lm,loe,PXe,IXe,gk,qXe,NXe,jXe,im,ioe,DXe,GXe,hk,OXe,VXe,XXe,dm,doe,zXe,QXe,pk,WXe,HXe,UXe,cm,coe,JXe,YXe,uk,KXe,ZXe,eze,fm,foe,oze,rze,_k,tze,aze,nze,mm,moe,sze,lze,bk,ize,dze,cze,gm,goe,fze,mze,vk,gze,hze,pze,hm,hoe,uze,_ze,Fk,bze,vze,Fze,pm,poe,Tze,Mze,Tk,Eze,Cze,wze,um,uoe,Aze,yze,Mk,Lze,xze,$ze,_m,_oe,kze,Sze,Ek,Rze,Bze,Pze,bm,boe,Ize,qze,Ck,Nze,jze,Dze,vm,voe,Gze,Oze,wk,Vze,Xze,zze,Fm,Foe,Qze,Wze,Ak,Hze,Uze,Jze,Tm,Toe,Yze,Kze,yk,Zze,eQe,oQe,Mm,Moe,rQe,tQe,Lk,aQe,nQe,sQe,Em,Eoe,lQe,iQe,xk,dQe,cQe,fQe,Cm,Coe,mQe,gQe,$k,hQe,pQe,uQe,wm,woe,_Qe,bQe,kk,vQe,FQe,TQe,Am,Aoe,MQe,EQe,Sk,CQe,wQe,AQe,ym,yoe,yQe,LQe,Rk,xQe,$Qe,kQe,Lm,Loe,SQe,RQe,Bk,BQe,PQe,IQe,xm,xoe,qQe,NQe,Pk,jQe,DQe,GQe,$m,$oe,OQe,VQe,Ik,XQe,zQe,QQe,km,koe,WQe,HQe,qk,UQe,JQe,YQe,Sm,Soe,KQe,ZQe,Nk,eWe,oWe,rWe,Rm,Roe,tWe,aWe,jk,nWe,sWe,lWe,Bm,Boe,iWe,dWe,Dk,cWe,fWe,mWe,Pm,Poe,gWe,hWe,Gk,pWe,uWe,_We,Im,Ioe,bWe,vWe,Ok,FWe,TWe,MWe,qm,qoe,EWe,CWe,Vk,wWe,AWe,yWe,Nm,Noe,LWe,xWe,Xk,$We,kWe,SWe,jm,joe,RWe,BWe,zk,PWe,IWe,qWe,Dm,Doe,NWe,jWe,Qk,DWe,GWe,OWe,Gm,Goe,VWe,XWe,Wk,zWe,QWe,WWe,Om,Ooe,HWe,UWe,Hk,JWe,YWe,KWe,Vm,Voe,ZWe,eHe,Uk,oHe,rHe,tHe,Xm,Xoe,aHe,nHe,Jk,sHe,lHe,iHe,zm,zoe,dHe,cHe,Yk,fHe,mHe,gHe,Qm,Qoe,hHe,pHe,Kk,uHe,_He,bHe,Wm,Woe,vHe,FHe,Zk,THe,MHe,EHe,Hm,Hoe,CHe,wHe,eS,AHe,yHe,LHe,Um,Uoe,xHe,$He,oS,kHe,SHe,RHe,Jm,Joe,BHe,PHe,rS,IHe,qHe,NHe,Ym,Yoe,jHe,DHe,tS,GHe,OHe,VHe,Km,Koe,XHe,zHe,aS,QHe,WHe,HHe,Zm,Zoe,UHe,JHe,nS,YHe,KHe,ZHe,eg,ere,eUe,oUe,sS,rUe,tUe,aUe,og,ore,nUe,sUe,lS,lUe,iUe,dUe,rg,rre,cUe,fUe,iS,mUe,gUe,hUe,tg,tre,pUe,uUe,dS,_Ue,bUe,vUe,ag,are,FUe,TUe,cS,MUe,EUe,CUe,ng,nre,wUe,AUe,fS,yUe,LUe,xUe,sg,sre,$Ue,kUe,mS,SUe,RUe,BUe,lg,lre,PUe,IUe,gS,qUe,NUe,jUe,ig,ire,DUe,GUe,hS,OUe,VUe,XUe,dg,dre,zUe,QUe,pS,WUe,HUe,UUe,cg,cre,JUe,YUe,uS,KUe,ZUe,eJe,fg,fre,oJe,rJe,_S,tJe,aJe,nJe,mg,mre,sJe,lJe,bS,iJe,dJe,cJe,gg,gre,fJe,mJe,vS,gJe,hJe,pJe,hg,hre,uJe,_Je,FS,bJe,vJe,FJe,pg,pre,TJe,MJe,TS,EJe,CJe,wJe,ug,ure,AJe,yJe,MS,LJe,xJe,$Je,_g,kJe,bg,iA,SJe,_re,RJe,gIe,bi,vg,bre,dA,BJe,vre,PJe,hIe,wo,cA,IJe,fA,qJe,ES,NJe,jJe,DJe,mA,GJe,Fre,OJe,VJe,XJe,Cr,gA,zJe,Tre,QJe,WJe,Ca,HJe,Mre,UJe,JJe,Ere,YJe,KJe,Cre,ZJe,eYe,oYe,k,kn,wre,rYe,tYe,CS,aYe,nYe,wS,sYe,lYe,iYe,Sn,Are,dYe,cYe,AS,fYe,mYe,yS,gYe,hYe,pYe,Rn,yre,uYe,_Ye,LS,bYe,vYe,xS,FYe,TYe,MYe,Fg,Lre,EYe,CYe,$S,wYe,AYe,yYe,Bn,xre,LYe,xYe,kS,$Ye,kYe,SS,SYe,RYe,BYe,Tg,$re,PYe,IYe,RS,qYe,NYe,jYe,Mg,kre,DYe,GYe,BS,OYe,VYe,XYe,Eg,Sre,zYe,QYe,PS,WYe,HYe,UYe,Pn,Rre,JYe,YYe,IS,KYe,ZYe,qS,eKe,oKe,rKe,In,Bre,tKe,aKe,NS,nKe,sKe,jS,lKe,iKe,dKe,qn,Pre,cKe,fKe,DS,mKe,gKe,GS,hKe,pKe,uKe,Cg,Ire,_Ke,bKe,OS,vKe,FKe,TKe,wg,qre,MKe,EKe,VS,CKe,wKe,AKe,Nn,Nre,yKe,LKe,XS,xKe,$Ke,zS,kKe,SKe,RKe,Ag,jre,BKe,PKe,QS,IKe,qKe,NKe,jn,Dre,jKe,DKe,WS,GKe,OKe,HS,VKe,XKe,zKe,Dn,Gre,QKe,WKe,US,HKe,UKe,JS,JKe,YKe,KKe,Gn,Ore,ZKe,eZe,YS,oZe,rZe,KS,tZe,aZe,nZe,yg,Vre,sZe,lZe,ZS,iZe,dZe,cZe,On,Xre,fZe,mZe,eR,gZe,hZe,oR,pZe,uZe,_Ze,Vn,zre,bZe,vZe,rR,FZe,TZe,tR,MZe,EZe,CZe,Xn,Qre,wZe,AZe,aR,yZe,LZe,nR,xZe,$Ze,kZe,zn,Wre,SZe,RZe,sR,BZe,PZe,lR,IZe,qZe,NZe,Qn,Hre,jZe,DZe,iR,GZe,OZe,dR,VZe,XZe,zZe,Wn,Ure,QZe,WZe,cR,HZe,UZe,fR,JZe,YZe,KZe,Lg,Jre,ZZe,eeo,mR,oeo,reo,teo,Hn,Yre,aeo,neo,gR,seo,leo,hR,ieo,deo,ceo,xg,Kre,feo,meo,pR,geo,heo,peo,Un,Zre,ueo,_eo,uR,beo,veo,_R,Feo,Teo,Meo,Jn,ete,Eeo,Ceo,bR,weo,Aeo,vR,yeo,Leo,xeo,Yn,ote,$eo,keo,FR,Seo,Reo,TR,Beo,Peo,Ieo,Kn,rte,qeo,Neo,MR,jeo,Deo,ER,Geo,Oeo,Veo,Zn,tte,Xeo,zeo,CR,Qeo,Weo,wR,Heo,Ueo,Jeo,$g,ate,Yeo,Keo,AR,Zeo,eoo,ooo,es,nte,roo,too,yR,aoo,noo,LR,soo,loo,ioo,os,ste,doo,coo,xR,foo,moo,$R,goo,hoo,poo,rs,lte,uoo,_oo,kR,boo,voo,SR,Foo,Too,Moo,ts,ite,Eoo,Coo,RR,woo,Aoo,BR,yoo,Loo,xoo,as,dte,$oo,koo,PR,Soo,Roo,IR,Boo,Poo,Ioo,ns,cte,qoo,Noo,qR,joo,Doo,NR,Goo,Ooo,Voo,ss,fte,Xoo,zoo,jR,Qoo,Woo,DR,Hoo,Uoo,Joo,kg,mte,Yoo,Koo,GR,Zoo,ero,oro,ls,gte,rro,tro,OR,aro,nro,VR,sro,lro,iro,Sg,hte,dro,cro,XR,fro,mro,gro,Rg,pte,hro,pro,zR,uro,_ro,bro,is,ute,vro,Fro,QR,Tro,Mro,WR,Ero,Cro,wro,ds,_te,Aro,yro,HR,Lro,xro,UR,$ro,kro,Sro,cs,bte,Rro,Bro,JR,Pro,Iro,YR,qro,Nro,jro,Bg,vte,Dro,Gro,KR,Oro,Vro,Xro,fs,Fte,zro,Qro,ZR,Wro,Hro,eB,Uro,Jro,Yro,ms,Tte,Kro,Zro,oB,eto,oto,rB,rto,tto,ato,gs,Mte,nto,sto,tB,lto,ito,aB,dto,cto,fto,hs,Ete,mto,gto,nB,hto,pto,sB,uto,_to,bto,ps,Cte,vto,Fto,lB,Tto,Mto,iB,Eto,Cto,wto,us,wte,Ato,yto,dB,Lto,xto,cB,$to,kto,Sto,Pg,Ate,Rto,Bto,fB,Pto,Ito,qto,Ig,yte,Nto,jto,mB,Dto,Gto,Oto,qg,Lte,Vto,Xto,gB,zto,Qto,Wto,Ng,xte,Hto,Uto,hB,Jto,Yto,Kto,_s,$te,Zto,eao,pB,oao,rao,uB,tao,aao,nao,jg,kte,sao,lao,_B,iao,dao,cao,bs,Ste,fao,mao,bB,gao,hao,vB,pao,uao,_ao,vs,Rte,bao,vao,FB,Fao,Tao,TB,Mao,Eao,Cao,Fs,Bte,wao,Aao,MB,yao,Lao,EB,xao,$ao,kao,Ts,Pte,Sao,Rao,CB,Bao,Pao,wB,Iao,qao,Nao,Ms,Ite,jao,Dao,AB,Gao,Oao,yB,Vao,Xao,zao,Es,qte,Qao,Wao,LB,Hao,Uao,xB,Jao,Yao,Kao,Dg,Nte,Zao,eno,$B,ono,rno,tno,Gg,jte,ano,nno,kB,sno,lno,ino,Cs,Dte,dno,cno,SB,fno,mno,RB,gno,hno,pno,ws,Gte,uno,_no,BB,bno,vno,PB,Fno,Tno,Mno,As,Ote,Eno,Cno,IB,wno,Ano,qB,yno,Lno,xno,Og,Vte,$no,kno,NB,Sno,Rno,Bno,Vg,Xte,Pno,Ino,jB,qno,Nno,jno,Xg,zte,Dno,Gno,DB,Ono,Vno,Xno,ys,Qte,zno,Qno,GB,Wno,Hno,OB,Uno,Jno,Yno,zg,Wte,Kno,Zno,VB,eso,oso,rso,Qg,Hte,tso,aso,XB,nso,sso,lso,Ls,Ute,iso,dso,zB,cso,fso,QB,mso,gso,hso,Wg,Jte,pso,uso,WB,_so,bso,vso,Hg,Yte,Fso,Tso,HB,Mso,Eso,Cso,xs,Kte,wso,Aso,UB,yso,Lso,JB,xso,$so,kso,$s,Zte,Sso,Rso,YB,Bso,Pso,KB,Iso,qso,Nso,ks,eae,jso,Dso,ZB,Gso,Oso,eP,Vso,Xso,zso,Ss,oae,Qso,Wso,oP,Hso,Uso,rP,Jso,Yso,Kso,Ug,Zso,Jg,hA,elo,rae,olo,pIe,vi,Yg,tae,pA,rlo,aae,tlo,uIe,Ao,uA,alo,_A,nlo,tP,slo,llo,ilo,bA,dlo,nae,clo,flo,mlo,Qe,vA,glo,sae,hlo,plo,wa,ulo,lae,_lo,blo,iae,vlo,Flo,dae,Tlo,Mlo,Elo,Z,Kg,cae,Clo,wlo,aP,Alo,ylo,Llo,Zg,fae,xlo,$lo,nP,klo,Slo,Rlo,eh,mae,Blo,Plo,sP,Ilo,qlo,Nlo,oh,gae,jlo,Dlo,lP,Glo,Olo,Vlo,rh,hae,Xlo,zlo,iP,Qlo,Wlo,Hlo,th,pae,Ulo,Jlo,dP,Ylo,Klo,Zlo,ah,uae,eio,oio,cP,rio,tio,aio,nh,_ae,nio,sio,fP,lio,iio,dio,sh,bae,cio,fio,mP,mio,gio,hio,lh,vae,pio,uio,gP,_io,bio,vio,ih,Fae,Fio,Tio,hP,Mio,Eio,Cio,dh,Tae,wio,Aio,pP,yio,Lio,xio,ch,Mae,$io,kio,uP,Sio,Rio,Bio,fh,Eae,Pio,Iio,_P,qio,Nio,jio,mh,Cae,Dio,Gio,bP,Oio,Vio,Xio,gh,wae,zio,Qio,vP,Wio,Hio,Uio,hh,Aae,Jio,Yio,FP,Kio,Zio,edo,ph,yae,odo,rdo,TP,tdo,ado,ndo,uh,Lae,sdo,ldo,MP,ido,ddo,cdo,_h,xae,fdo,mdo,EP,gdo,hdo,pdo,bh,$ae,udo,_do,CP,bdo,vdo,Fdo,vh,kae,Tdo,Mdo,wP,Edo,Cdo,wdo,Fh,Sae,Ado,ydo,AP,Ldo,xdo,$do,Th,Rae,kdo,Sdo,yP,Rdo,Bdo,Pdo,Mh,Bae,Ido,qdo,LP,Ndo,jdo,Ddo,Eh,Pae,Gdo,Odo,xP,Vdo,Xdo,zdo,Ch,Qdo,wh,Wdo,Ah,FA,Hdo,Iae,Udo,_Ie,Fi,yh,qae,TA,Jdo,Nae,Ydo,bIe,yo,MA,Kdo,EA,Zdo,$P,eco,oco,rco,CA,tco,jae,aco,nco,sco,We,wA,lco,Dae,ico,dco,Ti,cco,Gae,fco,mco,Oae,gco,hco,pco,ue,Lh,Vae,uco,_co,kP,bco,vco,Fco,xh,Xae,Tco,Mco,zae,Eco,Cco,wco,$h,Qae,Aco,yco,SP,Lco,xco,$co,kh,Wae,kco,Sco,RP,Rco,Bco,Pco,Sh,Hae,Ico,qco,BP,Nco,jco,Dco,Rh,Uae,Gco,Oco,PP,Vco,Xco,zco,Bh,Jae,Qco,Wco,IP,Hco,Uco,Jco,Ph,Yae,Yco,Kco,qP,Zco,efo,ofo,Ih,Kae,rfo,tfo,NP,afo,nfo,sfo,qh,Zae,lfo,ifo,jP,dfo,cfo,ffo,Nh,ene,mfo,gfo,DP,hfo,pfo,ufo,jh,one,_fo,bfo,GP,vfo,Ffo,Tfo,Dh,rne,Mfo,Efo,OP,Cfo,wfo,Afo,Gh,tne,yfo,Lfo,VP,xfo,$fo,kfo,Oh,ane,Sfo,Rfo,XP,Bfo,Pfo,Ifo,Vh,nne,qfo,Nfo,zP,jfo,Dfo,Gfo,Xh,Ofo,zh,Vfo,Qh,AA,Xfo,sne,zfo,vIe,Mi,Wh,lne,yA,Qfo,ine,Wfo,FIe,Lo,LA,Hfo,Ei,Ufo,QP,Jfo,Yfo,WP,Kfo,Zfo,emo,xA,omo,dne,rmo,tmo,amo,ot,$A,nmo,cne,smo,lmo,Ci,imo,fne,dmo,cmo,HP,fmo,mmo,gmo,Hh,hmo,He,kA,pmo,mne,umo,_mo,Aa,bmo,gne,vmo,Fmo,hne,Tmo,Mmo,pne,Emo,Cmo,wmo,x,Uh,une,Amo,ymo,UP,Lmo,xmo,$mo,Jh,_ne,kmo,Smo,JP,Rmo,Bmo,Pmo,Yh,bne,Imo,qmo,YP,Nmo,jmo,Dmo,Kh,vne,Gmo,Omo,KP,Vmo,Xmo,zmo,Zh,Fne,Qmo,Wmo,ZP,Hmo,Umo,Jmo,ep,Tne,Ymo,Kmo,eI,Zmo,ego,ogo,op,Mne,rgo,tgo,oI,ago,ngo,sgo,rp,Ene,lgo,igo,rI,dgo,cgo,fgo,tp,Cne,mgo,ggo,tI,hgo,pgo,ugo,ap,wne,_go,bgo,aI,vgo,Fgo,Tgo,np,Ane,Mgo,Ego,nI,Cgo,wgo,Ago,sp,yne,ygo,Lgo,sI,xgo,$go,kgo,lp,Lne,Sgo,Rgo,lI,Bgo,Pgo,Igo,ip,xne,qgo,Ngo,iI,jgo,Dgo,Ggo,dp,$ne,Ogo,Vgo,dI,Xgo,zgo,Qgo,cp,kne,Wgo,Hgo,cI,Ugo,Jgo,Ygo,fp,Sne,Kgo,Zgo,fI,eho,oho,rho,mp,Rne,tho,aho,mI,nho,sho,lho,gp,Bne,iho,dho,gI,cho,fho,mho,hp,Pne,gho,hho,hI,pho,uho,_ho,pp,Ine,bho,vho,pI,Fho,Tho,Mho,up,qne,Eho,Cho,uI,who,Aho,yho,_p,Nne,Lho,xho,_I,$ho,kho,Sho,bp,jne,Rho,Bho,bI,Pho,Iho,qho,vp,Dne,Nho,jho,vI,Dho,Gho,Oho,Fp,Gne,Vho,Xho,FI,zho,Qho,Who,Tp,One,Hho,Uho,TI,Jho,Yho,Kho,Mp,Vne,Zho,epo,MI,opo,rpo,tpo,Ep,Xne,apo,npo,EI,spo,lpo,ipo,Cp,zne,dpo,cpo,CI,fpo,mpo,gpo,wp,Qne,hpo,ppo,wI,upo,_po,bpo,Rs,Wne,vpo,Fpo,AI,Tpo,Mpo,yI,Epo,Cpo,wpo,Ap,Hne,Apo,ypo,LI,Lpo,xpo,$po,yp,Une,kpo,Spo,xI,Rpo,Bpo,Ppo,Lp,Jne,Ipo,qpo,$I,Npo,jpo,Dpo,xp,Yne,Gpo,Opo,kI,Vpo,Xpo,zpo,$p,Kne,Qpo,Wpo,SI,Hpo,Upo,Jpo,kp,Zne,Ypo,Kpo,RI,Zpo,euo,ouo,Sp,ese,ruo,tuo,BI,auo,nuo,suo,Rp,ose,luo,iuo,PI,duo,cuo,fuo,Bp,rse,muo,guo,II,huo,puo,uuo,Pp,tse,_uo,buo,qI,vuo,Fuo,Tuo,Ip,ase,Muo,Euo,NI,Cuo,wuo,Auo,qp,nse,yuo,Luo,jI,xuo,$uo,kuo,Np,sse,Suo,Ruo,DI,Buo,Puo,Iuo,jp,lse,quo,Nuo,GI,juo,Duo,Guo,Dp,ise,Ouo,Vuo,OI,Xuo,zuo,Quo,Gp,dse,Wuo,Huo,VI,Uuo,Juo,Yuo,Op,cse,Kuo,Zuo,XI,e_o,o_o,r_o,Vp,fse,t_o,a_o,zI,n_o,s_o,l_o,Xp,mse,i_o,d_o,QI,c_o,f_o,m_o,zp,gse,g_o,h_o,WI,p_o,u_o,__o,Qp,hse,b_o,v_o,HI,F_o,T_o,M_o,Wp,pse,E_o,C_o,UI,w_o,A_o,y_o,Hp,use,L_o,x_o,JI,$_o,k_o,S_o,Up,_se,R_o,B_o,YI,P_o,I_o,q_o,Jp,bse,N_o,j_o,KI,D_o,G_o,O_o,Yp,vse,V_o,X_o,ZI,z_o,Q_o,W_o,Kp,Fse,H_o,U_o,eq,J_o,Y_o,K_o,Zp,Tse,Z_o,e0o,oq,o0o,r0o,t0o,eu,Mse,a0o,n0o,rq,s0o,l0o,i0o,ou,Ese,d0o,c0o,tq,f0o,m0o,g0o,ru,Cse,h0o,p0o,aq,u0o,_0o,b0o,tu,wse,v0o,F0o,nq,T0o,M0o,E0o,au,Ase,C0o,w0o,sq,A0o,y0o,L0o,nu,yse,x0o,$0o,lq,k0o,S0o,R0o,su,Lse,B0o,P0o,iq,I0o,q0o,N0o,lu,xse,j0o,D0o,dq,G0o,O0o,V0o,iu,$se,X0o,z0o,cq,Q0o,W0o,H0o,du,kse,U0o,J0o,fq,Y0o,K0o,Z0o,cu,Sse,e1o,o1o,mq,r1o,t1o,a1o,fu,Rse,n1o,s1o,gq,l1o,i1o,d1o,mu,Bse,c1o,f1o,hq,m1o,g1o,h1o,gu,Pse,p1o,u1o,pq,_1o,b1o,v1o,hu,Ise,F1o,T1o,uq,M1o,E1o,C1o,pu,qse,w1o,A1o,_q,y1o,L1o,x1o,uu,Nse,$1o,k1o,bq,S1o,R1o,B1o,_u,jse,P1o,I1o,vq,q1o,N1o,j1o,bu,Dse,D1o,G1o,Fq,O1o,V1o,X1o,vu,Gse,z1o,Q1o,Tq,W1o,H1o,U1o,Fu,Ose,J1o,Y1o,Mq,K1o,Z1o,ebo,Tu,Vse,obo,rbo,Eq,tbo,abo,nbo,Mu,Xse,sbo,lbo,Cq,ibo,dbo,cbo,Eu,zse,fbo,mbo,wq,gbo,hbo,pbo,Cu,Qse,ubo,_bo,Aq,bbo,vbo,Fbo,wu,Wse,Tbo,Mbo,yq,Ebo,Cbo,wbo,Au,Hse,Abo,ybo,Lq,Lbo,xbo,$bo,yu,Use,kbo,Sbo,xq,Rbo,Bbo,Pbo,Lu,Jse,Ibo,qbo,$q,Nbo,jbo,Dbo,xu,Yse,Gbo,Obo,kq,Vbo,Xbo,zbo,$u,Kse,Qbo,Wbo,Sq,Hbo,Ubo,Jbo,ku,Zse,Ybo,Kbo,Rq,Zbo,e2o,o2o,Su,ele,r2o,t2o,Bq,a2o,n2o,s2o,Ru,ole,l2o,i2o,Pq,d2o,c2o,f2o,Bu,rle,m2o,g2o,Iq,h2o,p2o,u2o,Pu,tle,_2o,b2o,qq,v2o,F2o,T2o,Iu,ale,M2o,E2o,Nq,C2o,w2o,A2o,qu,y2o,nle,L2o,x2o,sle,$2o,k2o,Nu,TIe,wi,ju,lle,SA,S2o,ile,R2o,MIe,xo,RA,B2o,Ai,P2o,jq,I2o,q2o,Dq,N2o,j2o,D2o,BA,G2o,dle,O2o,V2o,X2o,rt,PA,z2o,cle,Q2o,W2o,yi,H2o,fle,U2o,J2o,Gq,Y2o,K2o,Z2o,Du,evo,Ue,IA,ovo,mle,rvo,tvo,ya,avo,gle,nvo,svo,hle,lvo,ivo,ple,dvo,cvo,fvo,G,Gu,ule,mvo,gvo,Oq,hvo,pvo,uvo,Ou,_le,_vo,bvo,Vq,vvo,Fvo,Tvo,Vu,ble,Mvo,Evo,Xq,Cvo,wvo,Avo,Xu,vle,yvo,Lvo,zq,xvo,$vo,kvo,zu,Fle,Svo,Rvo,Qq,Bvo,Pvo,Ivo,Qu,Tle,qvo,Nvo,Wq,jvo,Dvo,Gvo,Wu,Mle,Ovo,Vvo,Hq,Xvo,zvo,Qvo,Hu,Ele,Wvo,Hvo,Uq,Uvo,Jvo,Yvo,Uu,Cle,Kvo,Zvo,Jq,eFo,oFo,rFo,Ju,wle,tFo,aFo,Yq,nFo,sFo,lFo,Yu,Ale,iFo,dFo,Kq,cFo,fFo,mFo,Ku,yle,gFo,hFo,Zq,pFo,uFo,_Fo,Zu,Lle,bFo,vFo,eN,FFo,TFo,MFo,e_,xle,EFo,CFo,oN,wFo,AFo,yFo,o_,$le,LFo,xFo,rN,$Fo,kFo,SFo,r_,kle,RFo,BFo,tN,PFo,IFo,qFo,t_,Sle,NFo,jFo,aN,DFo,GFo,OFo,a_,Rle,VFo,XFo,nN,zFo,QFo,WFo,n_,Ble,HFo,UFo,sN,JFo,YFo,KFo,s_,Ple,ZFo,e6o,lN,o6o,r6o,t6o,l_,Ile,a6o,n6o,iN,s6o,l6o,i6o,i_,qle,d6o,c6o,dN,f6o,m6o,g6o,d_,Nle,h6o,p6o,cN,u6o,_6o,b6o,c_,jle,v6o,F6o,fN,T6o,M6o,E6o,f_,Dle,C6o,w6o,mN,A6o,y6o,L6o,m_,Gle,x6o,$6o,gN,k6o,S6o,R6o,g_,Ole,B6o,P6o,hN,I6o,q6o,N6o,h_,Vle,j6o,D6o,pN,G6o,O6o,V6o,p_,Xle,X6o,z6o,uN,Q6o,W6o,H6o,u_,zle,U6o,J6o,_N,Y6o,K6o,Z6o,__,Qle,eTo,oTo,bN,rTo,tTo,aTo,b_,Wle,nTo,sTo,vN,lTo,iTo,dTo,v_,Hle,cTo,fTo,FN,mTo,gTo,hTo,F_,Ule,pTo,uTo,TN,_To,bTo,vTo,T_,Jle,FTo,TTo,MN,MTo,ETo,CTo,M_,Yle,wTo,ATo,EN,yTo,LTo,xTo,E_,Kle,$To,kTo,CN,STo,RTo,BTo,C_,Zle,PTo,ITo,wN,qTo,NTo,jTo,w_,eie,DTo,GTo,AN,OTo,VTo,XTo,A_,oie,zTo,QTo,yN,WTo,HTo,UTo,y_,JTo,rie,YTo,KTo,tie,ZTo,e7o,L_,EIe,Li,x_,aie,qA,o7o,nie,r7o,CIe,$o,NA,t7o,xi,a7o,LN,n7o,s7o,xN,l7o,i7o,d7o,jA,c7o,sie,f7o,m7o,g7o,tt,DA,h7o,lie,p7o,u7o,$i,_7o,iie,b7o,v7o,$N,F7o,T7o,M7o,$_,E7o,Je,GA,C7o,die,w7o,A7o,La,y7o,cie,L7o,x7o,fie,$7o,k7o,mie,S7o,R7o,B7o,z,k_,gie,P7o,I7o,kN,q7o,N7o,j7o,S_,hie,D7o,G7o,SN,O7o,V7o,X7o,R_,pie,z7o,Q7o,RN,W7o,H7o,U7o,B_,uie,J7o,Y7o,BN,K7o,Z7o,eMo,P_,_ie,oMo,rMo,PN,tMo,aMo,nMo,I_,bie,sMo,lMo,IN,iMo,dMo,cMo,q_,vie,fMo,mMo,qN,gMo,hMo,pMo,N_,Fie,uMo,_Mo,NN,bMo,vMo,FMo,j_,Tie,TMo,MMo,jN,EMo,CMo,wMo,D_,Mie,AMo,yMo,DN,LMo,xMo,$Mo,G_,Eie,kMo,SMo,GN,RMo,BMo,PMo,O_,Cie,IMo,qMo,ON,NMo,jMo,DMo,V_,wie,GMo,OMo,VN,VMo,XMo,zMo,X_,Aie,QMo,WMo,XN,HMo,UMo,JMo,z_,yie,YMo,KMo,zN,ZMo,e4o,o4o,Q_,Lie,r4o,t4o,QN,a4o,n4o,s4o,W_,xie,l4o,i4o,WN,d4o,c4o,f4o,H_,$ie,m4o,g4o,HN,h4o,p4o,u4o,U_,kie,_4o,b4o,UN,v4o,F4o,T4o,J_,Sie,M4o,E4o,JN,C4o,w4o,A4o,Y_,Rie,y4o,L4o,YN,x4o,$4o,k4o,K_,Bie,S4o,R4o,KN,B4o,P4o,I4o,Z_,Pie,q4o,N4o,ZN,j4o,D4o,G4o,e0,Iie,O4o,V4o,ej,X4o,z4o,Q4o,o0,qie,W4o,H4o,oj,U4o,J4o,Y4o,r0,Nie,K4o,Z4o,rj,eEo,oEo,rEo,t0,jie,tEo,aEo,tj,nEo,sEo,lEo,a0,Die,iEo,dEo,aj,cEo,fEo,mEo,n0,Gie,gEo,hEo,nj,pEo,uEo,_Eo,s0,Oie,bEo,vEo,sj,FEo,TEo,MEo,l0,Vie,EEo,CEo,lj,wEo,AEo,yEo,i0,Xie,LEo,xEo,ij,$Eo,kEo,SEo,d0,zie,REo,BEo,dj,PEo,IEo,qEo,c0,Qie,NEo,jEo,cj,DEo,GEo,OEo,f0,Wie,VEo,XEo,fj,zEo,QEo,WEo,m0,HEo,Hie,UEo,JEo,Uie,YEo,KEo,g0,wIe,ki,h0,Jie,OA,ZEo,Yie,e5o,AIe,ko,VA,o5o,Si,r5o,mj,t5o,a5o,gj,n5o,s5o,l5o,XA,i5o,Kie,d5o,c5o,f5o,at,zA,m5o,Zie,g5o,h5o,Ri,p5o,ede,u5o,_5o,hj,b5o,v5o,F5o,p0,T5o,Ye,QA,M5o,ode,E5o,C5o,xa,w5o,rde,A5o,y5o,tde,L5o,x5o,ade,$5o,k5o,S5o,Q,u0,nde,R5o,B5o,pj,P5o,I5o,q5o,_0,sde,N5o,j5o,uj,D5o,G5o,O5o,b0,lde,V5o,X5o,_j,z5o,Q5o,W5o,v0,ide,H5o,U5o,bj,J5o,Y5o,K5o,F0,dde,Z5o,eCo,vj,oCo,rCo,tCo,T0,cde,aCo,nCo,Fj,sCo,lCo,iCo,M0,fde,dCo,cCo,Tj,fCo,mCo,gCo,E0,mde,hCo,pCo,Mj,uCo,_Co,bCo,C0,gde,vCo,FCo,Ej,TCo,MCo,ECo,w0,hde,CCo,wCo,Cj,ACo,yCo,LCo,A0,pde,xCo,$Co,wj,kCo,SCo,RCo,y0,ude,BCo,PCo,Aj,ICo,qCo,NCo,L0,_de,jCo,DCo,yj,GCo,OCo,VCo,x0,bde,XCo,zCo,Lj,QCo,WCo,HCo,$0,vde,UCo,JCo,xj,YCo,KCo,ZCo,k0,Fde,e3o,o3o,$j,r3o,t3o,a3o,S0,Tde,n3o,s3o,kj,l3o,i3o,d3o,R0,Mde,c3o,f3o,Sj,m3o,g3o,h3o,B0,Ede,p3o,u3o,Rj,_3o,b3o,v3o,P0,Cde,F3o,T3o,Bj,M3o,E3o,C3o,I0,wde,w3o,A3o,Pj,y3o,L3o,x3o,q0,Ade,$3o,k3o,Ij,S3o,R3o,B3o,N0,yde,P3o,I3o,qj,q3o,N3o,j3o,j0,Lde,D3o,G3o,Nj,O3o,V3o,X3o,D0,xde,z3o,Q3o,jj,W3o,H3o,U3o,G0,$de,J3o,Y3o,Dj,K3o,Z3o,ewo,O0,kde,owo,rwo,Gj,two,awo,nwo,V0,Sde,swo,lwo,Oj,iwo,dwo,cwo,X0,Rde,fwo,mwo,Vj,gwo,hwo,pwo,z0,Bde,uwo,_wo,Xj,bwo,vwo,Fwo,Q0,Pde,Two,Mwo,Ide,Ewo,Cwo,wwo,W0,qde,Awo,ywo,zj,Lwo,xwo,$wo,H0,Nde,kwo,Swo,Qj,Rwo,Bwo,Pwo,U0,jde,Iwo,qwo,Wj,Nwo,jwo,Dwo,J0,Dde,Gwo,Owo,Hj,Vwo,Xwo,zwo,Y0,Qwo,Gde,Wwo,Hwo,Ode,Uwo,Jwo,K0,yIe,Bi,Z0,Vde,WA,Ywo,Xde,Kwo,LIe,So,HA,Zwo,Pi,eAo,Uj,oAo,rAo,Jj,tAo,aAo,nAo,UA,sAo,zde,lAo,iAo,dAo,nt,JA,cAo,Qde,fAo,mAo,Ii,gAo,Wde,hAo,pAo,Yj,uAo,_Ao,bAo,e1,vAo,Ke,YA,FAo,Hde,TAo,MAo,$a,EAo,Ude,CAo,wAo,Jde,AAo,yAo,Yde,LAo,xAo,$Ao,he,o1,Kde,kAo,SAo,Kj,RAo,BAo,PAo,r1,Zde,IAo,qAo,Zj,NAo,jAo,DAo,t1,ece,GAo,OAo,eD,VAo,XAo,zAo,a1,oce,QAo,WAo,oD,HAo,UAo,JAo,n1,rce,YAo,KAo,rD,ZAo,eyo,oyo,s1,tce,ryo,tyo,tD,ayo,nyo,syo,l1,ace,lyo,iyo,aD,dyo,cyo,fyo,i1,nce,myo,gyo,nD,hyo,pyo,uyo,d1,sce,_yo,byo,sD,vyo,Fyo,Tyo,c1,lce,Myo,Eyo,lD,Cyo,wyo,Ayo,f1,ice,yyo,Lyo,iD,xyo,$yo,kyo,m1,dce,Syo,Ryo,dD,Byo,Pyo,Iyo,g1,cce,qyo,Nyo,cD,jyo,Dyo,Gyo,h1,fce,Oyo,Vyo,fD,Xyo,zyo,Qyo,p1,mce,Wyo,Hyo,mD,Uyo,Jyo,Yyo,u1,gce,Kyo,Zyo,gD,eLo,oLo,rLo,_1,hce,tLo,aLo,hD,nLo,sLo,lLo,b1,iLo,pce,dLo,cLo,uce,fLo,mLo,v1,xIe,qi,F1,_ce,KA,gLo,bce,hLo,$Ie,Ro,ZA,pLo,Ni,uLo,pD,_Lo,bLo,uD,vLo,FLo,TLo,ey,MLo,vce,ELo,CLo,wLo,st,oy,ALo,Fce,yLo,LLo,ji,xLo,Tce,$Lo,kLo,_D,SLo,RLo,BLo,T1,PLo,Ze,ry,ILo,Mce,qLo,NLo,ka,jLo,Ece,DLo,GLo,Cce,OLo,VLo,wce,XLo,zLo,QLo,q,M1,Ace,WLo,HLo,bD,ULo,JLo,YLo,E1,yce,KLo,ZLo,vD,e8o,o8o,r8o,C1,Lce,t8o,a8o,FD,n8o,s8o,l8o,w1,xce,i8o,d8o,TD,c8o,f8o,m8o,A1,$ce,g8o,h8o,MD,p8o,u8o,_8o,y1,kce,b8o,v8o,ED,F8o,T8o,M8o,L1,Sce,E8o,C8o,CD,w8o,A8o,y8o,x1,Rce,L8o,x8o,wD,$8o,k8o,S8o,$1,Bce,R8o,B8o,AD,P8o,I8o,q8o,k1,Pce,N8o,j8o,yD,D8o,G8o,O8o,S1,Ice,V8o,X8o,LD,z8o,Q8o,W8o,R1,qce,H8o,U8o,xD,J8o,Y8o,K8o,B1,Nce,Z8o,exo,$D,oxo,rxo,txo,P1,jce,axo,nxo,kD,sxo,lxo,ixo,I1,Dce,dxo,cxo,SD,fxo,mxo,gxo,q1,Gce,hxo,pxo,RD,uxo,_xo,bxo,N1,Oce,vxo,Fxo,BD,Txo,Mxo,Exo,j1,Vce,Cxo,wxo,PD,Axo,yxo,Lxo,D1,Xce,xxo,$xo,ID,kxo,Sxo,Rxo,G1,zce,Bxo,Pxo,qD,Ixo,qxo,Nxo,O1,Qce,jxo,Dxo,ND,Gxo,Oxo,Vxo,V1,Wce,Xxo,zxo,jD,Qxo,Wxo,Hxo,X1,Hce,Uxo,Jxo,DD,Yxo,Kxo,Zxo,z1,Uce,e9o,o9o,GD,r9o,t9o,a9o,Q1,Jce,n9o,s9o,OD,l9o,i9o,d9o,W1,Yce,c9o,f9o,VD,m9o,g9o,h9o,H1,Kce,p9o,u9o,XD,_9o,b9o,v9o,U1,Zce,F9o,T9o,zD,M9o,E9o,C9o,J1,efe,w9o,A9o,QD,y9o,L9o,x9o,Y1,ofe,$9o,k9o,WD,S9o,R9o,B9o,K1,rfe,P9o,I9o,HD,q9o,N9o,j9o,Z1,tfe,D9o,G9o,UD,O9o,V9o,X9o,eb,afe,z9o,Q9o,JD,W9o,H9o,U9o,ob,nfe,J9o,Y9o,YD,K9o,Z9o,e$o,rb,sfe,o$o,r$o,KD,t$o,a$o,n$o,tb,lfe,s$o,l$o,ZD,i$o,d$o,c$o,ab,ife,f$o,m$o,eG,g$o,h$o,p$o,nb,dfe,u$o,_$o,oG,b$o,v$o,F$o,sb,cfe,T$o,M$o,rG,E$o,C$o,w$o,lb,ffe,A$o,y$o,tG,L$o,x$o,$$o,ib,mfe,k$o,S$o,aG,R$o,B$o,P$o,db,gfe,I$o,q$o,nG,N$o,j$o,D$o,cb,hfe,G$o,O$o,sG,V$o,X$o,z$o,fb,pfe,Q$o,W$o,lG,H$o,U$o,J$o,mb,ufe,Y$o,K$o,iG,Z$o,eko,oko,gb,_fe,rko,tko,dG,ako,nko,sko,hb,bfe,lko,iko,cG,dko,cko,fko,pb,vfe,mko,gko,fG,hko,pko,uko,ub,_ko,Ffe,bko,vko,Tfe,Fko,Tko,_b,kIe,Di,bb,Mfe,ty,Mko,Efe,Eko,SIe,Bo,ay,Cko,Gi,wko,mG,Ako,yko,gG,Lko,xko,$ko,ny,kko,Cfe,Sko,Rko,Bko,lt,sy,Pko,wfe,Iko,qko,Oi,Nko,Afe,jko,Dko,hG,Gko,Oko,Vko,vb,Xko,eo,ly,zko,yfe,Qko,Wko,Sa,Hko,Lfe,Uko,Jko,xfe,Yko,Kko,$fe,Zko,eSo,oSo,Y,Fb,kfe,rSo,tSo,pG,aSo,nSo,sSo,Tb,Sfe,lSo,iSo,uG,dSo,cSo,fSo,Mb,Rfe,mSo,gSo,_G,hSo,pSo,uSo,Eb,Bfe,_So,bSo,bG,vSo,FSo,TSo,Cb,Pfe,MSo,ESo,vG,CSo,wSo,ASo,wb,Ife,ySo,LSo,FG,xSo,$So,kSo,Ab,qfe,SSo,RSo,TG,BSo,PSo,ISo,yb,Nfe,qSo,NSo,MG,jSo,DSo,GSo,Lb,jfe,OSo,VSo,EG,XSo,zSo,QSo,xb,Dfe,WSo,HSo,CG,USo,JSo,YSo,$b,Gfe,KSo,ZSo,wG,eRo,oRo,rRo,kb,Ofe,tRo,aRo,AG,nRo,sRo,lRo,Sb,Vfe,iRo,dRo,yG,cRo,fRo,mRo,Rb,Xfe,gRo,hRo,LG,pRo,uRo,_Ro,Bb,zfe,bRo,vRo,xG,FRo,TRo,MRo,Pb,Qfe,ERo,CRo,$G,wRo,ARo,yRo,Ib,Wfe,LRo,xRo,kG,$Ro,kRo,SRo,qb,Hfe,RRo,BRo,SG,PRo,IRo,qRo,Nb,Ufe,NRo,jRo,RG,DRo,GRo,ORo,jb,Jfe,VRo,XRo,BG,zRo,QRo,WRo,Db,Yfe,HRo,URo,PG,JRo,YRo,KRo,Gb,Kfe,ZRo,eBo,IG,oBo,rBo,tBo,Ob,Zfe,aBo,nBo,qG,sBo,lBo,iBo,Vb,eme,dBo,cBo,NG,fBo,mBo,gBo,Xb,ome,hBo,pBo,jG,uBo,_Bo,bBo,zb,rme,vBo,FBo,DG,TBo,MBo,EBo,Qb,tme,CBo,wBo,GG,ABo,yBo,LBo,Wb,ame,xBo,$Bo,OG,kBo,SBo,RBo,Hb,nme,BBo,PBo,VG,IBo,qBo,NBo,Ub,jBo,sme,DBo,GBo,lme,OBo,VBo,Jb,RIe,Vi,Yb,ime,iy,XBo,dme,zBo,BIe,Po,dy,QBo,Xi,WBo,XG,HBo,UBo,zG,JBo,YBo,KBo,cy,ZBo,cme,ePo,oPo,rPo,it,fy,tPo,fme,aPo,nPo,zi,sPo,mme,lPo,iPo,QG,dPo,cPo,fPo,Kb,mPo,oo,my,gPo,gme,hPo,pPo,Ra,uPo,hme,_Po,bPo,pme,vPo,FPo,ume,TPo,MPo,EPo,Yr,Zb,_me,CPo,wPo,WG,APo,yPo,LPo,e2,bme,xPo,$Po,HG,kPo,SPo,RPo,o2,vme,BPo,PPo,UG,IPo,qPo,NPo,r2,Fme,jPo,DPo,JG,GPo,OPo,VPo,t2,Tme,XPo,zPo,YG,QPo,WPo,HPo,a2,UPo,Mme,JPo,YPo,Eme,KPo,ZPo,n2,PIe,Qi,s2,Cme,gy,eIo,wme,oIo,IIe,Io,hy,rIo,Wi,tIo,KG,aIo,nIo,ZG,sIo,lIo,iIo,py,dIo,Ame,cIo,fIo,mIo,dt,uy,gIo,yme,hIo,pIo,Hi,uIo,Lme,_Io,bIo,eO,vIo,FIo,TIo,l2,MIo,ro,_y,EIo,xme,CIo,wIo,Ba,AIo,$me,yIo,LIo,kme,xIo,$Io,Sme,kIo,SIo,RIo,W,i2,Rme,BIo,PIo,oO,IIo,qIo,NIo,d2,Bme,jIo,DIo,rO,GIo,OIo,VIo,c2,Pme,XIo,zIo,tO,QIo,WIo,HIo,f2,Ime,UIo,JIo,aO,YIo,KIo,ZIo,m2,qme,eqo,oqo,nO,rqo,tqo,aqo,g2,Nme,nqo,sqo,sO,lqo,iqo,dqo,h2,jme,cqo,fqo,lO,mqo,gqo,hqo,p2,Dme,pqo,uqo,iO,_qo,bqo,vqo,u2,Gme,Fqo,Tqo,dO,Mqo,Eqo,Cqo,_2,Ome,wqo,Aqo,cO,yqo,Lqo,xqo,b2,Vme,$qo,kqo,fO,Sqo,Rqo,Bqo,v2,Xme,Pqo,Iqo,mO,qqo,Nqo,jqo,F2,zme,Dqo,Gqo,gO,Oqo,Vqo,Xqo,T2,Qme,zqo,Qqo,hO,Wqo,Hqo,Uqo,M2,Wme,Jqo,Yqo,pO,Kqo,Zqo,eNo,E2,Hme,oNo,rNo,uO,tNo,aNo,nNo,C2,Ume,sNo,lNo,_O,iNo,dNo,cNo,w2,Jme,fNo,mNo,bO,gNo,hNo,pNo,A2,Yme,uNo,_No,vO,bNo,vNo,FNo,y2,Kme,TNo,MNo,FO,ENo,CNo,wNo,L2,Zme,ANo,yNo,TO,LNo,xNo,$No,x2,ege,kNo,SNo,MO,RNo,BNo,PNo,$2,oge,INo,qNo,EO,NNo,jNo,DNo,k2,rge,GNo,ONo,CO,VNo,XNo,zNo,S2,tge,QNo,WNo,wO,HNo,UNo,JNo,R2,age,YNo,KNo,AO,ZNo,ejo,ojo,B2,nge,rjo,tjo,yO,ajo,njo,sjo,P2,sge,ljo,ijo,LO,djo,cjo,fjo,I2,lge,mjo,gjo,xO,hjo,pjo,ujo,q2,ige,_jo,bjo,$O,vjo,Fjo,Tjo,N2,dge,Mjo,Ejo,kO,Cjo,wjo,Ajo,j2,cge,yjo,Ljo,SO,xjo,$jo,kjo,D2,fge,Sjo,Rjo,RO,Bjo,Pjo,Ijo,G2,mge,qjo,Njo,BO,jjo,Djo,Gjo,O2,Ojo,gge,Vjo,Xjo,hge,zjo,Qjo,V2,qIe,Ui,X2,pge,by,Wjo,uge,Hjo,NIe,qo,vy,Ujo,Ji,Jjo,PO,Yjo,Kjo,IO,Zjo,eDo,oDo,Fy,rDo,_ge,tDo,aDo,nDo,ct,Ty,sDo,bge,lDo,iDo,Yi,dDo,vge,cDo,fDo,qO,mDo,gDo,hDo,z2,pDo,to,My,uDo,Fge,_Do,bDo,Pa,vDo,Tge,FDo,TDo,Mge,MDo,EDo,Ege,CDo,wDo,ADo,O,Q2,Cge,yDo,LDo,NO,xDo,$Do,kDo,W2,wge,SDo,RDo,jO,BDo,PDo,IDo,H2,Age,qDo,NDo,DO,jDo,DDo,GDo,U2,yge,ODo,VDo,GO,XDo,zDo,QDo,J2,Lge,WDo,HDo,OO,UDo,JDo,YDo,Y2,xge,KDo,ZDo,VO,eGo,oGo,rGo,K2,$ge,tGo,aGo,XO,nGo,sGo,lGo,Z2,kge,iGo,dGo,zO,cGo,fGo,mGo,ev,Sge,gGo,hGo,QO,pGo,uGo,_Go,ov,Rge,bGo,vGo,WO,FGo,TGo,MGo,rv,Bge,EGo,CGo,HO,wGo,AGo,yGo,tv,Pge,LGo,xGo,UO,$Go,kGo,SGo,av,Ige,RGo,BGo,JO,PGo,IGo,qGo,nv,qge,NGo,jGo,YO,DGo,GGo,OGo,sv,Nge,VGo,XGo,KO,zGo,QGo,WGo,lv,jge,HGo,UGo,ZO,JGo,YGo,KGo,iv,Dge,ZGo,eOo,eV,oOo,rOo,tOo,dv,Gge,aOo,nOo,oV,sOo,lOo,iOo,cv,Oge,dOo,cOo,rV,fOo,mOo,gOo,fv,Vge,hOo,pOo,tV,uOo,_Oo,bOo,mv,Xge,vOo,FOo,aV,TOo,MOo,EOo,gv,zge,COo,wOo,nV,AOo,yOo,LOo,hv,Qge,xOo,$Oo,sV,kOo,SOo,ROo,pv,Wge,BOo,POo,lV,IOo,qOo,NOo,uv,Hge,jOo,DOo,iV,GOo,OOo,VOo,_v,Uge,XOo,zOo,dV,QOo,WOo,HOo,bv,Jge,UOo,JOo,cV,YOo,KOo,ZOo,vv,Yge,eVo,oVo,fV,rVo,tVo,aVo,Fv,Kge,nVo,sVo,mV,lVo,iVo,dVo,Tv,Zge,cVo,fVo,gV,mVo,gVo,hVo,Mv,ehe,pVo,uVo,hV,_Vo,bVo,vVo,Ev,ohe,FVo,TVo,pV,MVo,EVo,CVo,Cv,rhe,wVo,AVo,uV,yVo,LVo,xVo,wv,the,$Vo,kVo,_V,SVo,RVo,BVo,Av,ahe,PVo,IVo,bV,qVo,NVo,jVo,yv,nhe,DVo,GVo,vV,OVo,VVo,XVo,Lv,she,zVo,QVo,FV,WVo,HVo,UVo,xv,lhe,JVo,YVo,TV,KVo,ZVo,eXo,$v,ihe,oXo,rXo,MV,tXo,aXo,nXo,kv,dhe,sXo,lXo,EV,iXo,dXo,cXo,Sv,fXo,che,mXo,gXo,fhe,hXo,pXo,Rv,jIe,Ki,Bv,mhe,Ey,uXo,ghe,_Xo,DIe,No,Cy,bXo,Zi,vXo,CV,FXo,TXo,wV,MXo,EXo,CXo,wy,wXo,hhe,AXo,yXo,LXo,ft,Ay,xXo,phe,$Xo,kXo,ed,SXo,uhe,RXo,BXo,AV,PXo,IXo,qXo,Pv,NXo,ao,yy,jXo,_he,DXo,GXo,Ia,OXo,bhe,VXo,XXo,vhe,zXo,QXo,Fhe,WXo,HXo,UXo,The,Iv,Mhe,JXo,YXo,yV,KXo,ZXo,ezo,qv,ozo,Ehe,rzo,tzo,Che,azo,nzo,Nv,GIe,od,jv,whe,Ly,szo,Ahe,lzo,OIe,jo,xy,izo,rd,dzo,LV,czo,fzo,xV,mzo,gzo,hzo,$y,pzo,yhe,uzo,_zo,bzo,mt,ky,vzo,Lhe,Fzo,Tzo,td,Mzo,xhe,Ezo,Czo,$V,wzo,Azo,yzo,Dv,Lzo,no,Sy,xzo,$he,$zo,kzo,qa,Szo,khe,Rzo,Bzo,She,Pzo,Izo,Rhe,qzo,Nzo,jzo,Fe,Gv,Bhe,Dzo,Gzo,kV,Ozo,Vzo,Xzo,Ov,Phe,zzo,Qzo,SV,Wzo,Hzo,Uzo,Vv,Ihe,Jzo,Yzo,RV,Kzo,Zzo,eQo,Bs,qhe,oQo,rQo,BV,tQo,aQo,PV,nQo,sQo,lQo,Xv,Nhe,iQo,dQo,IV,cQo,fQo,mQo,gt,jhe,gQo,hQo,qV,pQo,uQo,NV,_Qo,bQo,jV,vQo,FQo,TQo,zv,Dhe,MQo,EQo,DV,CQo,wQo,AQo,Qv,Ghe,yQo,LQo,GV,xQo,$Qo,kQo,Wv,Ohe,SQo,RQo,OV,BQo,PQo,IQo,Hv,Vhe,qQo,NQo,VV,jQo,DQo,GQo,Uv,Xhe,OQo,VQo,XV,XQo,zQo,QQo,Jv,zhe,WQo,HQo,zV,UQo,JQo,YQo,Yv,Qhe,KQo,ZQo,QV,eWo,oWo,rWo,Kv,tWo,Whe,aWo,nWo,Hhe,sWo,lWo,Zv,VIe,ad,eF,Uhe,Ry,iWo,Jhe,dWo,XIe,Do,By,cWo,nd,fWo,WV,mWo,gWo,HV,hWo,pWo,uWo,Py,_Wo,Yhe,bWo,vWo,FWo,ht,Iy,TWo,Khe,MWo,EWo,sd,CWo,Zhe,wWo,AWo,UV,yWo,LWo,xWo,oF,$Wo,so,qy,kWo,epe,SWo,RWo,Na,BWo,ope,PWo,IWo,rpe,qWo,NWo,tpe,jWo,DWo,GWo,ape,rF,npe,OWo,VWo,JV,XWo,zWo,QWo,tF,WWo,spe,HWo,UWo,lpe,JWo,YWo,aF,zIe,ld,nF,ipe,Ny,KWo,dpe,ZWo,QIe,Go,jy,eHo,id,oHo,YV,rHo,tHo,KV,aHo,nHo,sHo,Dy,lHo,cpe,iHo,dHo,cHo,pt,Gy,fHo,fpe,mHo,gHo,dd,hHo,mpe,pHo,uHo,ZV,_Ho,bHo,vHo,sF,FHo,lo,Oy,THo,gpe,MHo,EHo,ja,CHo,hpe,wHo,AHo,ppe,yHo,LHo,upe,xHo,$Ho,kHo,Ne,lF,_pe,SHo,RHo,eX,BHo,PHo,IHo,iF,bpe,qHo,NHo,oX,jHo,DHo,GHo,dF,vpe,OHo,VHo,rX,XHo,zHo,QHo,cF,Fpe,WHo,HHo,tX,UHo,JHo,YHo,fF,Tpe,KHo,ZHo,aX,eUo,oUo,rUo,mF,Mpe,tUo,aUo,nX,nUo,sUo,lUo,gF,Epe,iUo,dUo,sX,cUo,fUo,mUo,hF,Cpe,gUo,hUo,lX,pUo,uUo,_Uo,pF,bUo,wpe,vUo,FUo,Ape,TUo,MUo,uF,WIe,cd,_F,ype,Vy,EUo,Lpe,CUo,HIe,Oo,Xy,wUo,fd,AUo,iX,yUo,LUo,dX,xUo,$Uo,kUo,zy,SUo,xpe,RUo,BUo,PUo,ut,Qy,IUo,$pe,qUo,NUo,md,jUo,kpe,DUo,GUo,cX,OUo,VUo,XUo,bF,zUo,io,Wy,QUo,Spe,WUo,HUo,Da,UUo,Rpe,JUo,YUo,Bpe,KUo,ZUo,Ppe,eJo,oJo,rJo,Ga,vF,Ipe,tJo,aJo,fX,nJo,sJo,lJo,FF,qpe,iJo,dJo,mX,cJo,fJo,mJo,TF,Npe,gJo,hJo,gX,pJo,uJo,_Jo,MF,jpe,bJo,vJo,hX,FJo,TJo,MJo,EF,EJo,Dpe,CJo,wJo,Gpe,AJo,yJo,CF,UIe,gd,wF,Ope,Hy,LJo,Vpe,xJo,JIe,Vo,Uy,$Jo,hd,kJo,pX,SJo,RJo,uX,BJo,PJo,IJo,Jy,qJo,Xpe,NJo,jJo,DJo,_t,Yy,GJo,zpe,OJo,VJo,pd,XJo,Qpe,zJo,QJo,_X,WJo,HJo,UJo,AF,JJo,co,Ky,YJo,Wpe,KJo,ZJo,Oa,eYo,Hpe,oYo,rYo,Upe,tYo,aYo,Jpe,nYo,sYo,lYo,je,yF,Ype,iYo,dYo,bX,cYo,fYo,mYo,LF,Kpe,gYo,hYo,vX,pYo,uYo,_Yo,xF,Zpe,bYo,vYo,FX,FYo,TYo,MYo,$F,eue,EYo,CYo,TX,wYo,AYo,yYo,kF,oue,LYo,xYo,MX,$Yo,kYo,SYo,SF,rue,RYo,BYo,EX,PYo,IYo,qYo,RF,tue,NYo,jYo,CX,DYo,GYo,OYo,BF,aue,VYo,XYo,wX,zYo,QYo,WYo,PF,HYo,nue,UYo,JYo,sue,YYo,KYo,IF,YIe,ud,qF,lue,Zy,ZYo,iue,eKo,KIe,Xo,eL,oKo,_d,rKo,AX,tKo,aKo,yX,nKo,sKo,lKo,oL,iKo,due,dKo,cKo,fKo,bt,rL,mKo,cue,gKo,hKo,bd,pKo,fue,uKo,_Ko,LX,bKo,vKo,FKo,NF,TKo,fo,tL,MKo,mue,EKo,CKo,Va,wKo,gue,AKo,yKo,hue,LKo,xKo,pue,$Ko,kKo,SKo,aL,jF,uue,RKo,BKo,xX,PKo,IKo,qKo,DF,_ue,NKo,jKo,$X,DKo,GKo,OKo,GF,VKo,bue,XKo,zKo,vue,QKo,WKo,OF,ZIe,vd,VF,Fue,nL,HKo,Tue,UKo,eqe,zo,sL,JKo,Fd,YKo,kX,KKo,ZKo,SX,eZo,oZo,rZo,lL,tZo,Mue,aZo,nZo,sZo,vt,iL,lZo,Eue,iZo,dZo,Td,cZo,Cue,fZo,mZo,RX,gZo,hZo,pZo,XF,uZo,mo,dL,_Zo,wue,bZo,vZo,Xa,FZo,Aue,TZo,MZo,yue,EZo,CZo,Lue,wZo,AZo,yZo,za,zF,xue,LZo,xZo,BX,$Zo,kZo,SZo,QF,$ue,RZo,BZo,PX,PZo,IZo,qZo,WF,kue,NZo,jZo,IX,DZo,GZo,OZo,HF,Sue,VZo,XZo,qX,zZo,QZo,WZo,UF,HZo,Rue,UZo,JZo,Bue,YZo,KZo,JF,oqe,Md,YF,Pue,cL,ZZo,Iue,eer,rqe,Qo,fL,oer,Ed,rer,NX,ter,aer,jX,ner,ser,ler,mL,ier,que,der,cer,fer,Ft,gL,mer,Nue,ger,her,Cd,per,jue,uer,_er,DX,ber,ver,Fer,KF,Ter,go,hL,Mer,Due,Eer,Cer,Qa,wer,Gue,Aer,yer,Oue,Ler,xer,Vue,$er,ker,Ser,wd,ZF,Xue,Rer,Ber,GX,Per,Ier,qer,e6,zue,Ner,jer,OX,Der,Ger,Oer,o6,Que,Ver,Xer,VX,zer,Qer,Wer,r6,Her,Wue,Uer,Jer,Hue,Yer,Ker,t6,tqe,Ad,a6,Uue,pL,Zer,Jue,eor,aqe,Wo,uL,oor,yd,ror,XX,tor,aor,zX,nor,sor,lor,_L,ior,Yue,dor,cor,mor,Tt,bL,gor,Kue,hor,por,Ld,uor,Zue,_or,bor,QX,vor,For,Tor,n6,Mor,ho,vL,Eor,e_e,Cor,wor,Wa,Aor,o_e,yor,Lor,r_e,xor,$or,t_e,kor,Sor,Ror,FL,s6,a_e,Bor,Por,WX,Ior,qor,Nor,l6,n_e,jor,Dor,HX,Gor,Oor,Vor,i6,Xor,s_e,zor,Qor,l_e,Wor,Hor,d6,nqe,xd,c6,i_e,TL,Uor,d_e,Jor,sqe,Ho,ML,Yor,$d,Kor,UX,Zor,err,JX,orr,rrr,trr,EL,arr,c_e,nrr,srr,lrr,Mt,CL,irr,f_e,drr,crr,kd,frr,m_e,mrr,grr,YX,hrr,prr,urr,f6,_rr,po,wL,brr,g_e,vrr,Frr,Ha,Trr,h_e,Mrr,Err,p_e,Crr,wrr,u_e,Arr,yrr,Lrr,__e,m6,b_e,xrr,$rr,KX,krr,Srr,Rrr,g6,Brr,v_e,Prr,Irr,F_e,qrr,Nrr,h6,lqe,Sd,p6,T_e,AL,jrr,M_e,Drr,iqe,Uo,yL,Grr,Rd,Orr,ZX,Vrr,Xrr,ez,zrr,Qrr,Wrr,LL,Hrr,E_e,Urr,Jrr,Yrr,Et,xL,Krr,C_e,Zrr,etr,Bd,otr,w_e,rtr,ttr,oz,atr,ntr,str,u6,ltr,uo,$L,itr,A_e,dtr,ctr,Ua,ftr,y_e,mtr,gtr,L_e,htr,ptr,x_e,utr,_tr,btr,Ja,_6,$_e,vtr,Ftr,rz,Ttr,Mtr,Etr,b6,k_e,Ctr,wtr,tz,Atr,ytr,Ltr,v6,S_e,xtr,$tr,az,ktr,Str,Rtr,F6,R_e,Btr,Ptr,nz,Itr,qtr,Ntr,T6,jtr,B_e,Dtr,Gtr,P_e,Otr,Vtr,M6,dqe,Pd,E6,I_e,kL,Xtr,q_e,ztr,cqe,Jo,SL,Qtr,Id,Wtr,sz,Htr,Utr,lz,Jtr,Ytr,Ktr,RL,Ztr,N_e,ear,oar,rar,Ct,BL,tar,j_e,aar,nar,qd,sar,D_e,lar,iar,iz,dar,car,far,C6,mar,_o,PL,gar,G_e,har,par,Ya,uar,O_e,_ar,bar,V_e,Far,Tar,X_e,Mar,Ear,Car,z_e,w6,Q_e,war,Aar,dz,yar,Lar,xar,A6,$ar,W_e,kar,Sar,H_e,Rar,Bar,y6,fqe,Nd,L6,U_e,IL,Par,J_e,Iar,mqe,Yo,qL,qar,jd,Nar,cz,jar,Dar,fz,Gar,Oar,Var,NL,Xar,Y_e,zar,Qar,War,wt,jL,Har,K_e,Uar,Jar,Dd,Yar,Z_e,Kar,Zar,mz,enr,onr,rnr,x6,tnr,wr,DL,anr,e0e,nnr,snr,Ka,lnr,o0e,inr,dnr,r0e,cnr,fnr,t0e,mnr,gnr,hnr,j,$6,a0e,pnr,unr,gz,_nr,bnr,vnr,k6,n0e,Fnr,Tnr,hz,Mnr,Enr,Cnr,S6,s0e,wnr,Anr,pz,ynr,Lnr,xnr,R6,l0e,$nr,knr,uz,Snr,Rnr,Bnr,B6,i0e,Pnr,Inr,_z,qnr,Nnr,jnr,P6,d0e,Dnr,Gnr,bz,Onr,Vnr,Xnr,I6,c0e,znr,Qnr,vz,Wnr,Hnr,Unr,q6,f0e,Jnr,Ynr,Fz,Knr,Znr,esr,N6,m0e,osr,rsr,Tz,tsr,asr,nsr,j6,g0e,ssr,lsr,Mz,isr,dsr,csr,D6,h0e,fsr,msr,Ez,gsr,hsr,psr,G6,p0e,usr,_sr,Cz,bsr,vsr,Fsr,O6,u0e,Tsr,Msr,wz,Esr,Csr,wsr,V6,_0e,Asr,ysr,Az,Lsr,xsr,$sr,X6,b0e,ksr,Ssr,yz,Rsr,Bsr,Psr,z6,v0e,Isr,qsr,Lz,Nsr,jsr,Dsr,Q6,F0e,Gsr,Osr,xz,Vsr,Xsr,zsr,Ps,T0e,Qsr,Wsr,$z,Hsr,Usr,kz,Jsr,Ysr,Ksr,W6,M0e,Zsr,elr,Sz,olr,rlr,tlr,H6,E0e,alr,nlr,Rz,slr,llr,ilr,U6,C0e,dlr,clr,Bz,flr,mlr,glr,J6,w0e,hlr,plr,Pz,ulr,_lr,blr,Y6,A0e,vlr,Flr,Iz,Tlr,Mlr,Elr,K6,y0e,Clr,wlr,qz,Alr,ylr,Llr,Z6,L0e,xlr,$lr,Nz,klr,Slr,Rlr,eT,x0e,Blr,Plr,jz,Ilr,qlr,Nlr,oT,$0e,jlr,Dlr,Dz,Glr,Olr,Vlr,rT,k0e,Xlr,zlr,Gz,Qlr,Wlr,Hlr,tT,S0e,Ulr,Jlr,Oz,Ylr,Klr,Zlr,aT,R0e,eir,oir,Vz,rir,tir,air,nT,B0e,nir,sir,Xz,lir,iir,dir,sT,P0e,cir,fir,zz,mir,gir,hir,lT,I0e,pir,uir,Qz,_ir,bir,vir,iT,q0e,Fir,Tir,Wz,Mir,Eir,Cir,dT,N0e,wir,Air,Hz,yir,Lir,xir,cT,j0e,$ir,kir,Uz,Sir,Rir,Bir,fT,D0e,Pir,Iir,Jz,qir,Nir,jir,mT,G0e,Dir,Gir,Yz,Oir,Vir,Xir,gT,O0e,zir,Qir,Kz,Wir,Hir,Uir,hT,V0e,Jir,Yir,Zz,Kir,Zir,edr,pT,X0e,odr,rdr,eQ,tdr,adr,ndr,uT,z0e,sdr,ldr,oQ,idr,ddr,cdr,_T,Q0e,fdr,mdr,rQ,gdr,hdr,pdr,bT,W0e,udr,_dr,tQ,bdr,vdr,Fdr,vT,H0e,Tdr,Mdr,aQ,Edr,Cdr,wdr,FT,gqe,Gd,TT,U0e,GL,Adr,J0e,ydr,hqe,Ko,OL,Ldr,Od,xdr,nQ,$dr,kdr,sQ,Sdr,Rdr,Bdr,VL,Pdr,Y0e,Idr,qdr,Ndr,At,XL,jdr,K0e,Ddr,Gdr,Vd,Odr,Z0e,Vdr,Xdr,lQ,zdr,Qdr,Wdr,MT,Hdr,Ar,zL,Udr,e1e,Jdr,Ydr,Za,Kdr,o1e,Zdr,ecr,r1e,ocr,rcr,t1e,tcr,acr,ncr,se,ET,a1e,scr,lcr,iQ,icr,dcr,ccr,CT,n1e,fcr,mcr,dQ,gcr,hcr,pcr,wT,s1e,ucr,_cr,cQ,bcr,vcr,Fcr,AT,l1e,Tcr,Mcr,fQ,Ecr,Ccr,wcr,yT,i1e,Acr,ycr,mQ,Lcr,xcr,$cr,LT,d1e,kcr,Scr,gQ,Rcr,Bcr,Pcr,xT,c1e,Icr,qcr,hQ,Ncr,jcr,Dcr,$T,f1e,Gcr,Ocr,pQ,Vcr,Xcr,zcr,kT,m1e,Qcr,Wcr,uQ,Hcr,Ucr,Jcr,ST,g1e,Ycr,Kcr,_Q,Zcr,efr,ofr,RT,h1e,rfr,tfr,bQ,afr,nfr,sfr,BT,p1e,lfr,ifr,vQ,dfr,cfr,ffr,PT,u1e,mfr,gfr,FQ,hfr,pfr,ufr,IT,_1e,_fr,bfr,TQ,vfr,Ffr,Tfr,qT,b1e,Mfr,Efr,MQ,Cfr,wfr,Afr,NT,v1e,yfr,Lfr,EQ,xfr,$fr,kfr,jT,F1e,Sfr,Rfr,CQ,Bfr,Pfr,Ifr,DT,T1e,qfr,Nfr,wQ,jfr,Dfr,Gfr,GT,M1e,Ofr,Vfr,AQ,Xfr,zfr,Qfr,OT,E1e,Wfr,Hfr,yQ,Ufr,Jfr,Yfr,VT,C1e,Kfr,Zfr,LQ,emr,omr,rmr,XT,w1e,tmr,amr,xQ,nmr,smr,lmr,zT,A1e,imr,dmr,$Q,cmr,fmr,mmr,QT,pqe,Xd,WT,y1e,QL,gmr,L1e,hmr,uqe,Zo,WL,pmr,zd,umr,kQ,_mr,bmr,SQ,vmr,Fmr,Tmr,HL,Mmr,x1e,Emr,Cmr,wmr,yt,UL,Amr,$1e,ymr,Lmr,Qd,xmr,k1e,$mr,kmr,RQ,Smr,Rmr,Bmr,HT,Pmr,yr,JL,Imr,S1e,qmr,Nmr,en,jmr,R1e,Dmr,Gmr,B1e,Omr,Vmr,P1e,Xmr,zmr,Qmr,Te,UT,I1e,Wmr,Hmr,BQ,Umr,Jmr,Ymr,JT,q1e,Kmr,Zmr,PQ,egr,ogr,rgr,YT,N1e,tgr,agr,IQ,ngr,sgr,lgr,KT,j1e,igr,dgr,qQ,cgr,fgr,mgr,ZT,D1e,ggr,hgr,NQ,pgr,ugr,_gr,e7,G1e,bgr,vgr,jQ,Fgr,Tgr,Mgr,o7,O1e,Egr,Cgr,DQ,wgr,Agr,ygr,r7,V1e,Lgr,xgr,GQ,$gr,kgr,Sgr,t7,X1e,Rgr,Bgr,OQ,Pgr,Igr,qgr,a7,z1e,Ngr,jgr,VQ,Dgr,Ggr,Ogr,n7,Q1e,Vgr,Xgr,XQ,zgr,Qgr,Wgr,s7,W1e,Hgr,Ugr,zQ,Jgr,Ygr,Kgr,l7,_qe,Wd,i7,H1e,YL,Zgr,U1e,ehr,bqe,er,KL,ohr,Hd,rhr,QQ,thr,ahr,WQ,nhr,shr,lhr,ZL,ihr,J1e,dhr,chr,fhr,Lt,e8,mhr,Y1e,ghr,hhr,Ud,phr,K1e,uhr,_hr,HQ,bhr,vhr,Fhr,d7,Thr,Lr,o8,Mhr,Z1e,Ehr,Chr,on,whr,ebe,Ahr,yhr,obe,Lhr,xhr,rbe,$hr,khr,Shr,Jd,c7,tbe,Rhr,Bhr,UQ,Phr,Ihr,qhr,f7,abe,Nhr,jhr,JQ,Dhr,Ghr,Ohr,m7,nbe,Vhr,Xhr,YQ,zhr,Qhr,Whr,g7,vqe,Yd,h7,sbe,r8,Hhr,lbe,Uhr,Fqe,or,t8,Jhr,Kd,Yhr,KQ,Khr,Zhr,ZQ,epr,opr,rpr,a8,tpr,ibe,apr,npr,spr,xt,n8,lpr,dbe,ipr,dpr,Zd,cpr,cbe,fpr,mpr,eW,gpr,hpr,ppr,p7,upr,xr,s8,_pr,fbe,bpr,vpr,rn,Fpr,mbe,Tpr,Mpr,gbe,Epr,Cpr,hbe,wpr,Apr,ypr,ie,u7,pbe,Lpr,xpr,oW,$pr,kpr,Spr,_7,ube,Rpr,Bpr,rW,Ppr,Ipr,qpr,b7,_be,Npr,jpr,tW,Dpr,Gpr,Opr,v7,bbe,Vpr,Xpr,aW,zpr,Qpr,Wpr,F7,vbe,Hpr,Upr,nW,Jpr,Ypr,Kpr,T7,Fbe,Zpr,eur,sW,our,rur,tur,M7,Tbe,aur,nur,lW,sur,lur,iur,E7,Mbe,dur,cur,iW,fur,mur,gur,C7,Ebe,hur,pur,dW,uur,_ur,bur,w7,Cbe,vur,Fur,cW,Tur,Mur,Eur,A7,wbe,Cur,wur,fW,Aur,yur,Lur,y7,Abe,xur,$ur,mW,kur,Sur,Rur,L7,ybe,Bur,Pur,gW,Iur,qur,Nur,x7,Lbe,jur,Dur,hW,Gur,Our,Vur,$7,xbe,Xur,zur,pW,Qur,Wur,Hur,k7,$be,Uur,Jur,uW,Yur,Kur,Zur,S7,kbe,e_r,o_r,_W,r_r,t_r,a_r,R7,Sbe,n_r,s_r,bW,l_r,i_r,d_r,B7,Rbe,c_r,f_r,vW,m_r,g_r,h_r,P7,Bbe,p_r,u_r,FW,__r,b_r,v_r,I7,Tqe,ec,q7,Pbe,l8,F_r,Ibe,T_r,Mqe,rr,i8,M_r,oc,E_r,TW,C_r,w_r,MW,A_r,y_r,L_r,d8,x_r,qbe,$_r,k_r,S_r,$t,c8,R_r,Nbe,B_r,P_r,rc,I_r,jbe,q_r,N_r,EW,j_r,D_r,G_r,N7,O_r,$r,f8,V_r,Dbe,X_r,z_r,tn,Q_r,Gbe,W_r,H_r,Obe,U_r,J_r,Vbe,Y_r,K_r,Z_r,ye,j7,Xbe,e0r,o0r,CW,r0r,t0r,a0r,D7,zbe,n0r,s0r,wW,l0r,i0r,d0r,G7,Qbe,c0r,f0r,AW,m0r,g0r,h0r,O7,Wbe,p0r,u0r,yW,_0r,b0r,v0r,V7,Hbe,F0r,T0r,LW,M0r,E0r,C0r,X7,Ube,w0r,A0r,xW,y0r,L0r,x0r,z7,Jbe,$0r,k0r,$W,S0r,R0r,B0r,Q7,Ybe,P0r,I0r,kW,q0r,N0r,j0r,W7,Kbe,D0r,G0r,SW,O0r,V0r,X0r,H7,Zbe,z0r,Q0r,RW,W0r,H0r,U0r,U7,Eqe,tc,J7,e2e,m8,J0r,o2e,Y0r,Cqe,tr,g8,K0r,ac,Z0r,BW,e1r,o1r,PW,r1r,t1r,a1r,h8,n1r,r2e,s1r,l1r,i1r,kt,p8,d1r,t2e,c1r,f1r,nc,m1r,a2e,g1r,h1r,IW,p1r,u1r,_1r,Y7,b1r,kr,u8,v1r,n2e,F1r,T1r,an,M1r,s2e,E1r,C1r,l2e,w1r,A1r,i2e,y1r,L1r,x1r,ee,K7,d2e,$1r,k1r,qW,S1r,R1r,B1r,Z7,c2e,P1r,I1r,NW,q1r,N1r,j1r,eM,f2e,D1r,G1r,jW,O1r,V1r,X1r,oM,m2e,z1r,Q1r,DW,W1r,H1r,U1r,rM,g2e,J1r,Y1r,GW,K1r,Z1r,ebr,tM,h2e,obr,rbr,OW,tbr,abr,nbr,aM,p2e,sbr,lbr,VW,ibr,dbr,cbr,nM,u2e,fbr,mbr,XW,gbr,hbr,pbr,sM,_2e,ubr,_br,zW,bbr,vbr,Fbr,lM,b2e,Tbr,Mbr,QW,Ebr,Cbr,wbr,iM,v2e,Abr,ybr,WW,Lbr,xbr,$br,dM,F2e,kbr,Sbr,HW,Rbr,Bbr,Pbr,cM,T2e,Ibr,qbr,UW,Nbr,jbr,Dbr,fM,M2e,Gbr,Obr,JW,Vbr,Xbr,zbr,mM,E2e,Qbr,Wbr,YW,Hbr,Ubr,Jbr,gM,C2e,Ybr,Kbr,KW,Zbr,e2r,o2r,hM,w2e,r2r,t2r,ZW,a2r,n2r,s2r,pM,A2e,l2r,i2r,eH,d2r,c2r,f2r,uM,y2e,m2r,g2r,oH,h2r,p2r,u2r,_M,L2e,_2r,b2r,rH,v2r,F2r,T2r,bM,x2e,M2r,E2r,tH,C2r,w2r,A2r,vM,$2e,y2r,L2r,aH,x2r,$2r,k2r,FM,k2e,S2r,R2r,nH,B2r,P2r,I2r,TM,S2e,q2r,N2r,sH,j2r,D2r,G2r,MM,R2e,O2r,V2r,lH,X2r,z2r,Q2r,EM,B2e,W2r,H2r,iH,U2r,J2r,Y2r,CM,wqe,sc,wM,P2e,_8,K2r,I2e,Z2r,Aqe,ar,b8,evr,lc,ovr,dH,rvr,tvr,cH,avr,nvr,svr,v8,lvr,q2e,ivr,dvr,cvr,St,F8,fvr,N2e,mvr,gvr,ic,hvr,j2e,pvr,uvr,fH,_vr,bvr,vvr,AM,Fvr,Sr,T8,Tvr,D2e,Mvr,Evr,nn,Cvr,G2e,wvr,Avr,O2e,yvr,Lvr,V2e,xvr,$vr,kvr,pe,yM,X2e,Svr,Rvr,mH,Bvr,Pvr,Ivr,LM,z2e,qvr,Nvr,gH,jvr,Dvr,Gvr,xM,Q2e,Ovr,Vvr,hH,Xvr,zvr,Qvr,$M,W2e,Wvr,Hvr,pH,Uvr,Jvr,Yvr,kM,H2e,Kvr,Zvr,uH,eFr,oFr,rFr,SM,U2e,tFr,aFr,_H,nFr,sFr,lFr,RM,J2e,iFr,dFr,bH,cFr,fFr,mFr,BM,Y2e,gFr,hFr,vH,pFr,uFr,_Fr,PM,K2e,bFr,vFr,FH,FFr,TFr,MFr,IM,Z2e,EFr,CFr,TH,wFr,AFr,yFr,qM,eve,LFr,xFr,MH,$Fr,kFr,SFr,NM,ove,RFr,BFr,EH,PFr,IFr,qFr,jM,rve,NFr,jFr,CH,DFr,GFr,OFr,DM,tve,VFr,XFr,wH,zFr,QFr,WFr,GM,ave,HFr,UFr,AH,JFr,YFr,KFr,OM,nve,ZFr,e6r,yH,o6r,r6r,t6r,VM,sve,a6r,n6r,LH,s6r,l6r,i6r,XM,yqe,dc,zM,lve,M8,d6r,ive,c6r,Lqe,nr,E8,f6r,cc,m6r,xH,g6r,h6r,$H,p6r,u6r,_6r,C8,b6r,dve,v6r,F6r,T6r,Rt,w8,M6r,cve,E6r,C6r,fc,w6r,fve,A6r,y6r,kH,L6r,x6r,$6r,QM,k6r,Rr,A8,S6r,mve,R6r,B6r,sn,P6r,gve,I6r,q6r,hve,N6r,j6r,pve,D6r,G6r,O6r,y8,WM,uve,V6r,X6r,SH,z6r,Q6r,W6r,HM,_ve,H6r,U6r,RH,J6r,Y6r,K6r,UM,xqe,mc,JM,bve,L8,Z6r,vve,eTr,$qe,sr,x8,oTr,gc,rTr,BH,tTr,aTr,PH,nTr,sTr,lTr,$8,iTr,Fve,dTr,cTr,fTr,Bt,k8,mTr,Tve,gTr,hTr,hc,pTr,Mve,uTr,_Tr,IH,bTr,vTr,FTr,YM,TTr,Br,S8,MTr,Eve,ETr,CTr,ln,wTr,Cve,ATr,yTr,wve,LTr,xTr,Ave,$Tr,kTr,STr,yve,KM,Lve,RTr,BTr,qH,PTr,ITr,qTr,ZM,kqe,pc,e4,xve,R8,NTr,$ve,jTr,Sqe,lr,B8,DTr,uc,GTr,NH,OTr,VTr,jH,XTr,zTr,QTr,P8,WTr,kve,HTr,UTr,JTr,Pt,I8,YTr,Sve,KTr,ZTr,_c,e7r,Rve,o7r,r7r,DH,t7r,a7r,n7r,o4,s7r,Pr,q8,l7r,Bve,i7r,d7r,dn,c7r,Pve,f7r,m7r,Ive,g7r,h7r,qve,p7r,u7r,_7r,de,r4,Nve,b7r,v7r,GH,F7r,T7r,M7r,t4,jve,E7r,C7r,OH,w7r,A7r,y7r,a4,Dve,L7r,x7r,VH,$7r,k7r,S7r,n4,Gve,R7r,B7r,XH,P7r,I7r,q7r,s4,Ove,N7r,j7r,zH,D7r,G7r,O7r,l4,Vve,V7r,X7r,QH,z7r,Q7r,W7r,i4,Xve,H7r,U7r,WH,J7r,Y7r,K7r,d4,zve,Z7r,eMr,HH,oMr,rMr,tMr,c4,Qve,aMr,nMr,UH,sMr,lMr,iMr,f4,Wve,dMr,cMr,JH,fMr,mMr,gMr,m4,Hve,hMr,pMr,YH,uMr,_Mr,bMr,g4,Uve,vMr,FMr,KH,TMr,MMr,EMr,h4,Jve,CMr,wMr,ZH,AMr,yMr,LMr,p4,Yve,xMr,$Mr,eU,kMr,SMr,RMr,u4,Kve,BMr,PMr,oU,IMr,qMr,NMr,_4,Zve,jMr,DMr,rU,GMr,OMr,VMr,b4,eFe,XMr,zMr,tU,QMr,WMr,HMr,v4,oFe,UMr,JMr,aU,YMr,KMr,ZMr,F4,rFe,e4r,o4r,nU,r4r,t4r,a4r,T4,tFe,n4r,s4r,sU,l4r,i4r,d4r,M4,Rqe,bc,E4,aFe,N8,c4r,nFe,f4r,Bqe,ir,j8,m4r,vc,g4r,lU,h4r,p4r,iU,u4r,_4r,b4r,D8,v4r,sFe,F4r,T4r,M4r,It,G8,E4r,lFe,C4r,w4r,Fc,A4r,iFe,y4r,L4r,dU,x4r,$4r,k4r,C4,S4r,Ir,O8,R4r,dFe,B4r,P4r,cn,I4r,cFe,q4r,N4r,fFe,j4r,D4r,mFe,G4r,O4r,V4r,ce,w4,gFe,X4r,z4r,cU,Q4r,W4r,H4r,A4,hFe,U4r,J4r,fU,Y4r,K4r,Z4r,y4,pFe,eEr,oEr,mU,rEr,tEr,aEr,L4,uFe,nEr,sEr,gU,lEr,iEr,dEr,x4,_Fe,cEr,fEr,hU,mEr,gEr,hEr,$4,bFe,pEr,uEr,pU,_Er,bEr,vEr,k4,vFe,FEr,TEr,uU,MEr,EEr,CEr,S4,FFe,wEr,AEr,_U,yEr,LEr,xEr,R4,TFe,$Er,kEr,bU,SEr,REr,BEr,B4,MFe,PEr,IEr,vU,qEr,NEr,jEr,P4,EFe,DEr,GEr,FU,OEr,VEr,XEr,I4,CFe,zEr,QEr,TU,WEr,HEr,UEr,q4,wFe,JEr,YEr,MU,KEr,ZEr,e5r,N4,AFe,o5r,r5r,EU,t5r,a5r,n5r,j4,yFe,s5r,l5r,CU,i5r,d5r,c5r,D4,LFe,f5r,m5r,wU,g5r,h5r,p5r,G4,xFe,u5r,_5r,AU,b5r,v5r,F5r,O4,$Fe,T5r,M5r,yU,E5r,C5r,w5r,V4,kFe,A5r,y5r,LU,L5r,x5r,$5r,X4,SFe,k5r,S5r,xU,R5r,B5r,P5r,z4,Pqe,Tc,Q4,RFe,V8,I5r,BFe,q5r,Iqe,dr,X8,N5r,Mc,j5r,$U,D5r,G5r,kU,O5r,V5r,X5r,z8,z5r,PFe,Q5r,W5r,H5r,qt,Q8,U5r,IFe,J5r,Y5r,Ec,K5r,qFe,Z5r,eCr,SU,oCr,rCr,tCr,W4,aCr,qr,W8,nCr,NFe,sCr,lCr,fn,iCr,jFe,dCr,cCr,DFe,fCr,mCr,GFe,gCr,hCr,pCr,OFe,H4,VFe,uCr,_Cr,RU,bCr,vCr,FCr,U4,qqe,Cc,J4,XFe,H8,TCr,zFe,MCr,Nqe,cr,U8,ECr,wc,CCr,BU,wCr,ACr,PU,yCr,LCr,xCr,J8,$Cr,QFe,kCr,SCr,RCr,Nt,Y8,BCr,WFe,PCr,ICr,Ac,qCr,HFe,NCr,jCr,IU,DCr,GCr,OCr,Y4,VCr,Nr,K8,XCr,UFe,zCr,QCr,mn,WCr,JFe,HCr,UCr,YFe,JCr,YCr,KFe,KCr,ZCr,e3r,ZFe,K4,e6e,o3r,r3r,qU,t3r,a3r,n3r,Z4,jqe,yc,eE,o6e,Z8,s3r,r6e,l3r,Dqe,fr,ex,i3r,Lc,d3r,NU,c3r,f3r,jU,m3r,g3r,h3r,ox,p3r,t6e,u3r,_3r,b3r,jt,rx,v3r,a6e,F3r,T3r,xc,M3r,n6e,E3r,C3r,DU,w3r,A3r,y3r,oE,L3r,jr,tx,x3r,s6e,$3r,k3r,gn,S3r,l6e,R3r,B3r,i6e,P3r,I3r,d6e,q3r,N3r,j3r,re,rE,c6e,D3r,G3r,GU,O3r,V3r,X3r,tE,f6e,z3r,Q3r,OU,W3r,H3r,U3r,aE,m6e,J3r,Y3r,VU,K3r,Z3r,ewr,nE,g6e,owr,rwr,XU,twr,awr,nwr,sE,h6e,swr,lwr,zU,iwr,dwr,cwr,lE,p6e,fwr,mwr,QU,gwr,hwr,pwr,iE,u6e,uwr,_wr,WU,bwr,vwr,Fwr,dE,_6e,Twr,Mwr,HU,Ewr,Cwr,wwr,cE,b6e,Awr,ywr,UU,Lwr,xwr,$wr,fE,v6e,kwr,Swr,JU,Rwr,Bwr,Pwr,mE,F6e,Iwr,qwr,YU,Nwr,jwr,Dwr,gE,T6e,Gwr,Owr,KU,Vwr,Xwr,zwr,hE,M6e,Qwr,Wwr,ZU,Hwr,Uwr,Jwr,pE,E6e,Ywr,Kwr,eJ,Zwr,eAr,oAr,uE,C6e,rAr,tAr,oJ,aAr,nAr,sAr,_E,w6e,lAr,iAr,rJ,dAr,cAr,fAr,bE,A6e,mAr,gAr,tJ,hAr,pAr,uAr,vE,y6e,_Ar,bAr,aJ,vAr,FAr,TAr,FE,L6e,MAr,EAr,nJ,CAr,wAr,AAr,TE,x6e,yAr,LAr,sJ,xAr,$Ar,kAr,ME,$6e,SAr,RAr,lJ,BAr,PAr,IAr,EE,k6e,qAr,NAr,iJ,jAr,DAr,GAr,CE,S6e,OAr,VAr,dJ,XAr,zAr,QAr,wE,R6e,WAr,HAr,cJ,UAr,JAr,YAr,AE,B6e,KAr,ZAr,fJ,eyr,oyr,ryr,yE,Gqe,$c,LE,P6e,ax,tyr,I6e,ayr,Oqe,mr,nx,nyr,kc,syr,mJ,lyr,iyr,gJ,dyr,cyr,fyr,sx,myr,q6e,gyr,hyr,pyr,Dt,lx,uyr,N6e,_yr,byr,Sc,vyr,j6e,Fyr,Tyr,hJ,Myr,Eyr,Cyr,xE,wyr,Dr,ix,Ayr,D6e,yyr,Lyr,hn,xyr,G6e,$yr,kyr,O6e,Syr,Ryr,V6e,Byr,Pyr,Iyr,ke,$E,X6e,qyr,Nyr,pJ,jyr,Dyr,Gyr,kE,z6e,Oyr,Vyr,uJ,Xyr,zyr,Qyr,SE,Q6e,Wyr,Hyr,_J,Uyr,Jyr,Yyr,RE,W6e,Kyr,Zyr,bJ,eLr,oLr,rLr,BE,H6e,tLr,aLr,vJ,nLr,sLr,lLr,PE,U6e,iLr,dLr,FJ,cLr,fLr,mLr,IE,J6e,gLr,hLr,TJ,pLr,uLr,_Lr,qE,Y6e,bLr,vLr,MJ,FLr,TLr,MLr,NE,K6e,ELr,CLr,EJ,wLr,ALr,yLr,jE,Vqe,Rc,DE,Z6e,dx,LLr,eTe,xLr,Xqe,gr,cx,$Lr,Bc,kLr,CJ,SLr,RLr,wJ,BLr,PLr,ILr,fx,qLr,oTe,NLr,jLr,DLr,Gt,mx,GLr,rTe,OLr,VLr,Pc,XLr,tTe,zLr,QLr,AJ,WLr,HLr,ULr,GE,JLr,Gr,gx,YLr,aTe,KLr,ZLr,pn,e8r,nTe,o8r,r8r,sTe,t8r,a8r,lTe,n8r,s8r,l8r,Me,OE,iTe,i8r,d8r,yJ,c8r,f8r,m8r,VE,dTe,g8r,h8r,LJ,p8r,u8r,_8r,XE,cTe,b8r,v8r,xJ,F8r,T8r,M8r,zE,fTe,E8r,C8r,$J,w8r,A8r,y8r,QE,mTe,L8r,x8r,kJ,$8r,k8r,S8r,WE,gTe,R8r,B8r,SJ,P8r,I8r,q8r,HE,hTe,N8r,j8r,RJ,D8r,G8r,O8r,UE,pTe,V8r,X8r,BJ,z8r,Q8r,W8r,JE,uTe,H8r,U8r,PJ,J8r,Y8r,K8r,YE,_Te,Z8r,exr,IJ,oxr,rxr,txr,KE,bTe,axr,nxr,qJ,sxr,lxr,ixr,ZE,vTe,dxr,cxr,NJ,fxr,mxr,gxr,e5,zqe,Ic,o5,FTe,hx,hxr,TTe,pxr,Qqe,hr,px,uxr,qc,_xr,jJ,bxr,vxr,DJ,Fxr,Txr,Mxr,ux,Exr,MTe,Cxr,wxr,Axr,Ot,_x,yxr,ETe,Lxr,xxr,Nc,$xr,CTe,kxr,Sxr,GJ,Rxr,Bxr,Pxr,r5,Ixr,Or,bx,qxr,wTe,Nxr,jxr,un,Dxr,ATe,Gxr,Oxr,yTe,Vxr,Xxr,LTe,zxr,Qxr,Wxr,Le,t5,xTe,Hxr,Uxr,OJ,Jxr,Yxr,Kxr,a5,$Te,Zxr,e9r,VJ,o9r,r9r,t9r,n5,kTe,a9r,n9r,XJ,s9r,l9r,i9r,s5,STe,d9r,c9r,zJ,f9r,m9r,g9r,l5,RTe,h9r,p9r,QJ,u9r,_9r,b9r,i5,BTe,v9r,F9r,WJ,T9r,M9r,E9r,d5,PTe,C9r,w9r,HJ,A9r,y9r,L9r,c5,ITe,x9r,$9r,UJ,k9r,S9r,R9r,f5,qTe,B9r,P9r,JJ,I9r,q9r,N9r,m5,NTe,j9r,D9r,YJ,G9r,O9r,V9r,g5,Wqe,jc,h5,jTe,vx,X9r,DTe,z9r,Hqe,pr,Fx,Q9r,Dc,W9r,KJ,H9r,U9r,ZJ,J9r,Y9r,K9r,Tx,Z9r,GTe,e$r,o$r,r$r,Vt,Mx,t$r,OTe,a$r,n$r,Gc,s$r,VTe,l$r,i$r,eY,d$r,c$r,f$r,p5,m$r,Vr,Ex,g$r,XTe,h$r,p$r,_n,u$r,zTe,_$r,b$r,QTe,v$r,F$r,WTe,T$r,M$r,E$r,Se,u5,HTe,C$r,w$r,oY,A$r,y$r,L$r,_5,UTe,x$r,$$r,rY,k$r,S$r,R$r,b5,JTe,B$r,P$r,tY,I$r,q$r,N$r,v5,YTe,j$r,D$r,aY,G$r,O$r,V$r,F5,KTe,X$r,z$r,nY,Q$r,W$r,H$r,T5,ZTe,U$r,J$r,sY,Y$r,K$r,Z$r,M5,e7e,ekr,okr,lY,rkr,tkr,akr,E5,o7e,nkr,skr,iY,lkr,ikr,dkr,C5,r7e,ckr,fkr,dY,mkr,gkr,hkr,w5,Uqe,Oc,A5,t7e,Cx,pkr,a7e,ukr,Jqe,ur,wx,_kr,Vc,bkr,cY,vkr,Fkr,fY,Tkr,Mkr,Ekr,Ax,Ckr,n7e,wkr,Akr,ykr,Xt,yx,Lkr,s7e,xkr,$kr,Xc,kkr,l7e,Skr,Rkr,mY,Bkr,Pkr,Ikr,y5,qkr,Xr,Lx,Nkr,i7e,jkr,Dkr,bn,Gkr,d7e,Okr,Vkr,c7e,Xkr,zkr,f7e,Qkr,Wkr,Hkr,xe,L5,m7e,Ukr,Jkr,gY,Ykr,Kkr,Zkr,x5,g7e,eSr,oSr,hY,rSr,tSr,aSr,$5,h7e,nSr,sSr,pY,lSr,iSr,dSr,k5,p7e,cSr,fSr,uY,mSr,gSr,hSr,S5,u7e,pSr,uSr,_Y,_Sr,bSr,vSr,R5,_7e,FSr,TSr,bY,MSr,ESr,CSr,B5,b7e,wSr,ASr,vY,ySr,LSr,xSr,P5,v7e,$Sr,kSr,FY,SSr,RSr,BSr,I5,F7e,PSr,ISr,TY,qSr,NSr,jSr,q5,T7e,DSr,GSr,MY,OSr,VSr,XSr,N5,Yqe,zc,j5,M7e,xx,zSr,E7e,QSr,Kqe,_r,$x,WSr,Qc,HSr,EY,USr,JSr,CY,YSr,KSr,ZSr,kx,eRr,C7e,oRr,rRr,tRr,zt,Sx,aRr,w7e,nRr,sRr,Wc,lRr,A7e,iRr,dRr,wY,cRr,fRr,mRr,D5,gRr,zr,Rx,hRr,y7e,pRr,uRr,vn,_Rr,L7e,bRr,vRr,x7e,FRr,TRr,$7e,MRr,ERr,CRr,$e,G5,k7e,wRr,ARr,AY,yRr,LRr,xRr,O5,S7e,$Rr,kRr,yY,SRr,RRr,BRr,V5,R7e,PRr,IRr,LY,qRr,NRr,jRr,X5,B7e,DRr,GRr,xY,ORr,VRr,XRr,z5,P7e,zRr,QRr,$Y,WRr,HRr,URr,Q5,I7e,JRr,YRr,kY,KRr,ZRr,eBr,W5,q7e,oBr,rBr,SY,tBr,aBr,nBr,H5,N7e,sBr,lBr,RY,iBr,dBr,cBr,U5,j7e,fBr,mBr,BY,gBr,hBr,pBr,J5,D7e,uBr,_Br,PY,bBr,vBr,FBr,Y5,Zqe,Hc,K5,G7e,Bx,TBr,O7e,MBr,eNe,br,Px,EBr,Uc,CBr,IY,wBr,ABr,qY,yBr,LBr,xBr,Ix,$Br,V7e,kBr,SBr,RBr,Qt,qx,BBr,X7e,PBr,IBr,Jc,qBr,z7e,NBr,jBr,NY,DBr,GBr,OBr,Z5,VBr,Qr,Nx,XBr,Q7e,zBr,QBr,Fn,WBr,W7e,HBr,UBr,H7e,JBr,YBr,U7e,KBr,ZBr,ePr,De,eC,J7e,oPr,rPr,jY,tPr,aPr,nPr,oC,Y7e,sPr,lPr,DY,iPr,dPr,cPr,rC,K7e,fPr,mPr,GY,gPr,hPr,pPr,tC,Z7e,uPr,_Pr,OY,bPr,vPr,FPr,aC,eMe,TPr,MPr,VY,EPr,CPr,wPr,nC,oMe,APr,yPr,XY,LPr,xPr,$Pr,sC,rMe,kPr,SPr,zY,RPr,BPr,PPr,lC,tMe,IPr,qPr,QY,NPr,jPr,DPr,iC,oNe,Yc,dC,aMe,jx,GPr,nMe,OPr,rNe,vr,Dx,VPr,Kc,XPr,WY,zPr,QPr,HY,WPr,HPr,UPr,Gx,JPr,sMe,YPr,KPr,ZPr,Wt,Ox,eIr,lMe,oIr,rIr,Zc,tIr,iMe,aIr,nIr,UY,sIr,lIr,iIr,cC,dIr,Wr,Vx,cIr,dMe,fIr,mIr,Tn,gIr,cMe,hIr,pIr,fMe,uIr,_Ir,mMe,bIr,vIr,FIr,Ge,fC,gMe,TIr,MIr,JY,EIr,CIr,wIr,mC,hMe,AIr,yIr,YY,LIr,xIr,$Ir,gC,pMe,kIr,SIr,KY,RIr,BIr,PIr,hC,uMe,IIr,qIr,ZY,NIr,jIr,DIr,pC,_Me,GIr,OIr,eK,VIr,XIr,zIr,uC,bMe,QIr,WIr,oK,HIr,UIr,JIr,_C,vMe,YIr,KIr,rK,ZIr,eqr,oqr,bC,FMe,rqr,tqr,tK,aqr,nqr,sqr,vC,tNe,ef,FC,TMe,Xx,lqr,MMe,iqr,aNe,Fr,zx,dqr,of,cqr,aK,fqr,mqr,nK,gqr,hqr,pqr,Qx,uqr,EMe,_qr,bqr,vqr,Ht,Wx,Fqr,CMe,Tqr,Mqr,rf,Eqr,wMe,Cqr,wqr,sK,Aqr,yqr,Lqr,TC,xqr,Hr,Hx,$qr,AMe,kqr,Sqr,Mn,Rqr,yMe,Bqr,Pqr,LMe,Iqr,qqr,xMe,Nqr,jqr,Dqr,$Me,MC,kMe,Gqr,Oqr,lK,Vqr,Xqr,zqr,EC,nNe,tf,CC,SMe,Ux,Qqr,RMe,Wqr,sNe,Tr,Jx,Hqr,af,Uqr,iK,Jqr,Yqr,dK,Kqr,Zqr,eNr,Yx,oNr,BMe,rNr,tNr,aNr,Ut,Kx,nNr,PMe,sNr,lNr,nf,iNr,IMe,dNr,cNr,cK,fNr,mNr,gNr,wC,hNr,Ur,Zx,pNr,qMe,uNr,_Nr,En,bNr,NMe,vNr,FNr,jMe,TNr,MNr,DMe,ENr,CNr,wNr,e9,AC,GMe,ANr,yNr,fK,LNr,xNr,$Nr,yC,OMe,kNr,SNr,mK,RNr,BNr,PNr,LC,lNe,sf,xC,VMe,o9,INr,XMe,qNr,iNe,Mr,r9,NNr,lf,jNr,gK,DNr,GNr,hK,ONr,VNr,XNr,t9,zNr,zMe,QNr,WNr,HNr,Jt,a9,UNr,QMe,JNr,YNr,df,KNr,WMe,ZNr,ejr,pK,ojr,rjr,tjr,$C,ajr,Jr,n9,njr,HMe,sjr,ljr,Cn,ijr,UMe,djr,cjr,JMe,fjr,mjr,YMe,gjr,hjr,pjr,KMe,kC,ZMe,ujr,_jr,uK,bjr,vjr,Fjr,SC,dNe;return d=new oe({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),oA=new oe({}),rA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),bf=new Tjr({props:{warning:!0,$$slots:{default:[syt]},$$scope:{ctx:L}}}),tA=new oe({}),aA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L569"}}),lA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L592"}}),_g=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[lyt]},$$scope:{ctx:L}}}),iA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L714"}}),dA=new oe({}),cA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L378"}}),gA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17060/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L392"}}),Ug=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[iyt]},$$scope:{ctx:L}}}),hA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L588"}}),pA=new oe({}),uA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L179"}}),vA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),Ch=new Tjr({props:{$$slots:{default:[dyt]},$$scope:{ctx:L}}}),wh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[cyt]},$$scope:{ctx:L}}}),FA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L320"}}),TA=new oe({}),MA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L78"}}),wA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L92"}}),Xh=new Tjr({props:{$$slots:{default:[fyt]},$$scope:{ctx:L}}}),zh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[myt]},$$scope:{ctx:L}}}),AA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L245"}}),yA=new oe({}),LA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L723"}}),$A=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Hh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[gyt]},$$scope:{ctx:L}}}),kA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Nu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[hyt]},$$scope:{ctx:L}}}),SA=new oe({}),RA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L730"}}),PA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Du=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[pyt]},$$scope:{ctx:L}}}),IA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),L_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[uyt]},$$scope:{ctx:L}}}),qA=new oe({}),NA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L745"}}),DA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),$_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[_yt]},$$scope:{ctx:L}}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[byt]},$$scope:{ctx:L}}}),OA=new oe({}),VA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L752"}}),zA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[vyt]},$$scope:{ctx:L}}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),K0=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Fyt]},$$scope:{ctx:L}}}),WA=new oe({}),HA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L759"}}),JA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),e1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Tyt]},$$scope:{ctx:L}}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),v1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Myt]},$$scope:{ctx:L}}}),KA=new oe({}),ZA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L768"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),T1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Eyt]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),_b=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Cyt]},$$scope:{ctx:L}}}),ty=new oe({}),ay=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L802"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),vb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[wyt]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Jb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ayt]},$$scope:{ctx:L}}}),iy=new oe({}),dy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L809"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Kb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yyt]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),n2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Lyt]},$$scope:{ctx:L}}}),gy=new oe({}),hy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L795"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),l2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[xyt]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),V2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$yt]},$$scope:{ctx:L}}}),by=new oe({}),vy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L777"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),z2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kyt]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Syt]},$$scope:{ctx:L}}}),Ey=new oe({}),Cy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L784"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Pv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Ryt]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Nv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Byt]},$$scope:{ctx:L}}}),Ly=new oe({}),xy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L818"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Pyt]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),Ry=new oe({}),By=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L857"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),Ny=new oe({}),jy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L864"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[jyt]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),Vy=new oe({}),Xy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L887"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),CF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),Hy=new oe({}),Uy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L871"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),AF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),Zy=new oe({}),eL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L878"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),nL=new oe({}),sL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L896"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),cL=new oe({}),fL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L903"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),pL=new oe({}),uL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L850"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),d6=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),TL=new oe({}),ML=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L825"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),f6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),h6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),AL=new oe({}),yL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L832"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),u6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),kL=new oe({}),SL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L841"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),y6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),IL=new oe({}),qL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),x6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),GL=new oe({}),OL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),XL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),QL=new oe({}),WL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),UL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),YL=new oe({}),KL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),e8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),d7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),g7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),r8=new oe({}),t8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),n8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),l8=new oe({}),i8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),c8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),U7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),m8=new oe({}),g8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),p8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Y7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),_8=new oe({}),b8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),F8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),M8=new oe({}),E8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),w8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),L8=new oe({}),x8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),R8=new oe({}),B8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),N8=new oe({}),j8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),V8=new oe({}),X8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),H8=new oe({}),U8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),Z8=new oe({}),ex=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),ax=new oe({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),dx=new oe({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),hx=new oe({}),px=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),Cx=new oe({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),Bx=new oe({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),Ux=new oe({}),Jx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[e8t]},$$scope:{ctx:L}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),a9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),$C=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[o8t]},$$scope:{ctx:L}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[r8t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),gf=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),Yw=o("from_pretrained()"),hf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),fi=o("Instantiating one of "),An=a("a"),Kw=o("AutoConfig"),yn=o(", "),Ln=a("a"),Zw=o("AutoModel"),mi=o(`, and
`),xn=a("a"),eA=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),pf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),v$=o("will create a model that is an instance of "),hi=a("a"),F$=o("BertModel"),T$=o("."),Eo=l(),Ea=a("p"),M$=o("There is one class of "),uf=a("code"),E$=o("AutoModel"),_De=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),sIe=l(),pi=a("h2"),_f=a("a"),cee=a("span"),F(oA.$$.fragment),bDe=l(),fee=a("span"),vDe=o("Extending the Auto Classes"),lIe=l(),$n=a("p"),FDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),mee=a("code"),TDe=o("NewModel"),MDe=o(", make sure you have a "),gee=a("code"),EDe=o("NewModelConfig"),CDe=o(` then you can add those to the auto
classes like this:`),iIe=l(),F(rA.$$.fragment),dIe=l(),C$=a("p"),wDe=o("You will then be able to use the auto classes like you would usually do!"),cIe=l(),F(bf.$$.fragment),fIe=l(),ui=a("h2"),vf=a("a"),hee=a("span"),F(tA.$$.fragment),ADe=l(),pee=a("span"),yDe=o("AutoConfig"),mIe=l(),Co=a("div"),F(aA.$$.fragment),LDe=l(),nA=a("p"),xDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),w$=a("a"),$De=o("from_pretrained()"),kDe=o(" class method."),SDe=l(),sA=a("p"),RDe=o("This class cannot be instantiated directly using "),uee=a("code"),BDe=o("__init__()"),PDe=o(" (throws an error)."),IDe=l(),Er=a("div"),F(lA.$$.fragment),qDe=l(),_ee=a("p"),NDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),jDe=l(),_i=a("p"),DDe=o("The configuration class to instantiate is selected based on the "),bee=a("code"),GDe=o("model_type"),ODe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),vee=a("code"),VDe=o("pretrained_model_name_or_path"),XDe=o(":"),zDe=l(),A=a("ul"),Ff=a("li"),Fee=a("strong"),QDe=o("albert"),WDe=o(" \u2014 "),A$=a("a"),HDe=o("AlbertConfig"),UDe=o(" (ALBERT model)"),JDe=l(),Tf=a("li"),Tee=a("strong"),YDe=o("bart"),KDe=o(" \u2014 "),y$=a("a"),ZDe=o("BartConfig"),eGe=o(" (BART model)"),oGe=l(),Mf=a("li"),Mee=a("strong"),rGe=o("beit"),tGe=o(" \u2014 "),L$=a("a"),aGe=o("BeitConfig"),nGe=o(" (BEiT model)"),sGe=l(),Ef=a("li"),Eee=a("strong"),lGe=o("bert"),iGe=o(" \u2014 "),x$=a("a"),dGe=o("BertConfig"),cGe=o(" (BERT model)"),fGe=l(),Cf=a("li"),Cee=a("strong"),mGe=o("bert-generation"),gGe=o(" \u2014 "),$$=a("a"),hGe=o("BertGenerationConfig"),pGe=o(" (Bert Generation model)"),uGe=l(),wf=a("li"),wee=a("strong"),_Ge=o("big_bird"),bGe=o(" \u2014 "),k$=a("a"),vGe=o("BigBirdConfig"),FGe=o(" (BigBird model)"),TGe=l(),Af=a("li"),Aee=a("strong"),MGe=o("bigbird_pegasus"),EGe=o(" \u2014 "),S$=a("a"),CGe=o("BigBirdPegasusConfig"),wGe=o(" (BigBirdPegasus model)"),AGe=l(),yf=a("li"),yee=a("strong"),yGe=o("blenderbot"),LGe=o(" \u2014 "),R$=a("a"),xGe=o("BlenderbotConfig"),$Ge=o(" (Blenderbot model)"),kGe=l(),Lf=a("li"),Lee=a("strong"),SGe=o("blenderbot-small"),RGe=o(" \u2014 "),B$=a("a"),BGe=o("BlenderbotSmallConfig"),PGe=o(" (BlenderbotSmall model)"),IGe=l(),xf=a("li"),xee=a("strong"),qGe=o("camembert"),NGe=o(" \u2014 "),P$=a("a"),jGe=o("CamembertConfig"),DGe=o(" (CamemBERT model)"),GGe=l(),$f=a("li"),$ee=a("strong"),OGe=o("canine"),VGe=o(" \u2014 "),I$=a("a"),XGe=o("CanineConfig"),zGe=o(" (Canine model)"),QGe=l(),kf=a("li"),kee=a("strong"),WGe=o("clip"),HGe=o(" \u2014 "),q$=a("a"),UGe=o("CLIPConfig"),JGe=o(" (CLIP model)"),YGe=l(),Sf=a("li"),See=a("strong"),KGe=o("convbert"),ZGe=o(" \u2014 "),N$=a("a"),eOe=o("ConvBertConfig"),oOe=o(" (ConvBERT model)"),rOe=l(),Rf=a("li"),Ree=a("strong"),tOe=o("convnext"),aOe=o(" \u2014 "),j$=a("a"),nOe=o("ConvNextConfig"),sOe=o(" (ConvNext model)"),lOe=l(),Bf=a("li"),Bee=a("strong"),iOe=o("ctrl"),dOe=o(" \u2014 "),D$=a("a"),cOe=o("CTRLConfig"),fOe=o(" (CTRL model)"),mOe=l(),Pf=a("li"),Pee=a("strong"),gOe=o("data2vec-audio"),hOe=o(" \u2014 "),G$=a("a"),pOe=o("Data2VecAudioConfig"),uOe=o(" (Data2VecAudio model)"),_Oe=l(),If=a("li"),Iee=a("strong"),bOe=o("data2vec-text"),vOe=o(" \u2014 "),O$=a("a"),FOe=o("Data2VecTextConfig"),TOe=o(" (Data2VecText model)"),MOe=l(),qf=a("li"),qee=a("strong"),EOe=o("data2vec-vision"),COe=o(" \u2014 "),V$=a("a"),wOe=o("Data2VecVisionConfig"),AOe=o(" (Data2VecVision model)"),yOe=l(),Nf=a("li"),Nee=a("strong"),LOe=o("deberta"),xOe=o(" \u2014 "),X$=a("a"),$Oe=o("DebertaConfig"),kOe=o(" (DeBERTa model)"),SOe=l(),jf=a("li"),jee=a("strong"),ROe=o("deberta-v2"),BOe=o(" \u2014 "),z$=a("a"),POe=o("DebertaV2Config"),IOe=o(" (DeBERTa-v2 model)"),qOe=l(),Df=a("li"),Dee=a("strong"),NOe=o("decision_transformer"),jOe=o(" \u2014 "),Q$=a("a"),DOe=o("DecisionTransformerConfig"),GOe=o(" (Decision Transformer model)"),OOe=l(),Gf=a("li"),Gee=a("strong"),VOe=o("deit"),XOe=o(" \u2014 "),W$=a("a"),zOe=o("DeiTConfig"),QOe=o(" (DeiT model)"),WOe=l(),Of=a("li"),Oee=a("strong"),HOe=o("detr"),UOe=o(" \u2014 "),H$=a("a"),JOe=o("DetrConfig"),YOe=o(" (DETR model)"),KOe=l(),Vf=a("li"),Vee=a("strong"),ZOe=o("distilbert"),eVe=o(" \u2014 "),U$=a("a"),oVe=o("DistilBertConfig"),rVe=o(" (DistilBERT model)"),tVe=l(),Xf=a("li"),Xee=a("strong"),aVe=o("dpr"),nVe=o(" \u2014 "),J$=a("a"),sVe=o("DPRConfig"),lVe=o(" (DPR model)"),iVe=l(),zf=a("li"),zee=a("strong"),dVe=o("dpt"),cVe=o(" \u2014 "),Y$=a("a"),fVe=o("DPTConfig"),mVe=o(" (DPT model)"),gVe=l(),Qf=a("li"),Qee=a("strong"),hVe=o("electra"),pVe=o(" \u2014 "),K$=a("a"),uVe=o("ElectraConfig"),_Ve=o(" (ELECTRA model)"),bVe=l(),Wf=a("li"),Wee=a("strong"),vVe=o("encoder-decoder"),FVe=o(" \u2014 "),Z$=a("a"),TVe=o("EncoderDecoderConfig"),MVe=o(" (Encoder decoder model)"),EVe=l(),Hf=a("li"),Hee=a("strong"),CVe=o("flaubert"),wVe=o(" \u2014 "),ek=a("a"),AVe=o("FlaubertConfig"),yVe=o(" (FlauBERT model)"),LVe=l(),Uf=a("li"),Uee=a("strong"),xVe=o("flava"),$Ve=o(" \u2014 "),ok=a("a"),kVe=o("FlavaConfig"),SVe=o(" (Flava model)"),RVe=l(),Jf=a("li"),Jee=a("strong"),BVe=o("fnet"),PVe=o(" \u2014 "),rk=a("a"),IVe=o("FNetConfig"),qVe=o(" (FNet model)"),NVe=l(),Yf=a("li"),Yee=a("strong"),jVe=o("fsmt"),DVe=o(" \u2014 "),tk=a("a"),GVe=o("FSMTConfig"),OVe=o(" (FairSeq Machine-Translation model)"),VVe=l(),Kf=a("li"),Kee=a("strong"),XVe=o("funnel"),zVe=o(" \u2014 "),ak=a("a"),QVe=o("FunnelConfig"),WVe=o(" (Funnel Transformer model)"),HVe=l(),Zf=a("li"),Zee=a("strong"),UVe=o("glpn"),JVe=o(" \u2014 "),nk=a("a"),YVe=o("GLPNConfig"),KVe=o(" (GLPN model)"),ZVe=l(),em=a("li"),eoe=a("strong"),eXe=o("gpt2"),oXe=o(" \u2014 "),sk=a("a"),rXe=o("GPT2Config"),tXe=o(" (OpenAI GPT-2 model)"),aXe=l(),om=a("li"),ooe=a("strong"),nXe=o("gpt_neo"),sXe=o(" \u2014 "),lk=a("a"),lXe=o("GPTNeoConfig"),iXe=o(" (GPT Neo model)"),dXe=l(),rm=a("li"),roe=a("strong"),cXe=o("gptj"),fXe=o(" \u2014 "),ik=a("a"),mXe=o("GPTJConfig"),gXe=o(" (GPT-J model)"),hXe=l(),tm=a("li"),toe=a("strong"),pXe=o("hubert"),uXe=o(" \u2014 "),dk=a("a"),_Xe=o("HubertConfig"),bXe=o(" (Hubert model)"),vXe=l(),am=a("li"),aoe=a("strong"),FXe=o("ibert"),TXe=o(" \u2014 "),ck=a("a"),MXe=o("IBertConfig"),EXe=o(" (I-BERT model)"),CXe=l(),nm=a("li"),noe=a("strong"),wXe=o("imagegpt"),AXe=o(" \u2014 "),fk=a("a"),yXe=o("ImageGPTConfig"),LXe=o(" (ImageGPT model)"),xXe=l(),sm=a("li"),soe=a("strong"),$Xe=o("layoutlm"),kXe=o(" \u2014 "),mk=a("a"),SXe=o("LayoutLMConfig"),RXe=o(" (LayoutLM model)"),BXe=l(),lm=a("li"),loe=a("strong"),PXe=o("layoutlmv2"),IXe=o(" \u2014 "),gk=a("a"),qXe=o("LayoutLMv2Config"),NXe=o(" (LayoutLMv2 model)"),jXe=l(),im=a("li"),ioe=a("strong"),DXe=o("layoutlmv3"),GXe=o(" \u2014 "),hk=a("a"),OXe=o("LayoutLMv3Config"),VXe=o(" (LayoutLMv3 model)"),XXe=l(),dm=a("li"),doe=a("strong"),zXe=o("led"),QXe=o(" \u2014 "),pk=a("a"),WXe=o("LEDConfig"),HXe=o(" (LED model)"),UXe=l(),cm=a("li"),coe=a("strong"),JXe=o("longformer"),YXe=o(" \u2014 "),uk=a("a"),KXe=o("LongformerConfig"),ZXe=o(" (Longformer model)"),eze=l(),fm=a("li"),foe=a("strong"),oze=o("luke"),rze=o(" \u2014 "),_k=a("a"),tze=o("LukeConfig"),aze=o(" (LUKE model)"),nze=l(),mm=a("li"),moe=a("strong"),sze=o("lxmert"),lze=o(" \u2014 "),bk=a("a"),ize=o("LxmertConfig"),dze=o(" (LXMERT model)"),cze=l(),gm=a("li"),goe=a("strong"),fze=o("m2m_100"),mze=o(" \u2014 "),vk=a("a"),gze=o("M2M100Config"),hze=o(" (M2M100 model)"),pze=l(),hm=a("li"),hoe=a("strong"),uze=o("marian"),_ze=o(" \u2014 "),Fk=a("a"),bze=o("MarianConfig"),vze=o(" (Marian model)"),Fze=l(),pm=a("li"),poe=a("strong"),Tze=o("maskformer"),Mze=o(" \u2014 "),Tk=a("a"),Eze=o("MaskFormerConfig"),Cze=o(" (MaskFormer model)"),wze=l(),um=a("li"),uoe=a("strong"),Aze=o("mbart"),yze=o(" \u2014 "),Mk=a("a"),Lze=o("MBartConfig"),xze=o(" (mBART model)"),$ze=l(),_m=a("li"),_oe=a("strong"),kze=o("megatron-bert"),Sze=o(" \u2014 "),Ek=a("a"),Rze=o("MegatronBertConfig"),Bze=o(" (MegatronBert model)"),Pze=l(),bm=a("li"),boe=a("strong"),Ize=o("mobilebert"),qze=o(" \u2014 "),Ck=a("a"),Nze=o("MobileBertConfig"),jze=o(" (MobileBERT model)"),Dze=l(),vm=a("li"),voe=a("strong"),Gze=o("mpnet"),Oze=o(" \u2014 "),wk=a("a"),Vze=o("MPNetConfig"),Xze=o(" (MPNet model)"),zze=l(),Fm=a("li"),Foe=a("strong"),Qze=o("mt5"),Wze=o(" \u2014 "),Ak=a("a"),Hze=o("MT5Config"),Uze=o(" (mT5 model)"),Jze=l(),Tm=a("li"),Toe=a("strong"),Yze=o("nystromformer"),Kze=o(" \u2014 "),yk=a("a"),Zze=o("NystromformerConfig"),eQe=o(" (Nystromformer model)"),oQe=l(),Mm=a("li"),Moe=a("strong"),rQe=o("openai-gpt"),tQe=o(" \u2014 "),Lk=a("a"),aQe=o("OpenAIGPTConfig"),nQe=o(" (OpenAI GPT model)"),sQe=l(),Em=a("li"),Eoe=a("strong"),lQe=o("pegasus"),iQe=o(" \u2014 "),xk=a("a"),dQe=o("PegasusConfig"),cQe=o(" (Pegasus model)"),fQe=l(),Cm=a("li"),Coe=a("strong"),mQe=o("perceiver"),gQe=o(" \u2014 "),$k=a("a"),hQe=o("PerceiverConfig"),pQe=o(" (Perceiver model)"),uQe=l(),wm=a("li"),woe=a("strong"),_Qe=o("plbart"),bQe=o(" \u2014 "),kk=a("a"),vQe=o("PLBartConfig"),FQe=o(" (PLBart model)"),TQe=l(),Am=a("li"),Aoe=a("strong"),MQe=o("poolformer"),EQe=o(" \u2014 "),Sk=a("a"),CQe=o("PoolFormerConfig"),wQe=o(" (PoolFormer model)"),AQe=l(),ym=a("li"),yoe=a("strong"),yQe=o("prophetnet"),LQe=o(" \u2014 "),Rk=a("a"),xQe=o("ProphetNetConfig"),$Qe=o(" (ProphetNet model)"),kQe=l(),Lm=a("li"),Loe=a("strong"),SQe=o("qdqbert"),RQe=o(" \u2014 "),Bk=a("a"),BQe=o("QDQBertConfig"),PQe=o(" (QDQBert model)"),IQe=l(),xm=a("li"),xoe=a("strong"),qQe=o("rag"),NQe=o(" \u2014 "),Pk=a("a"),jQe=o("RagConfig"),DQe=o(" (RAG model)"),GQe=l(),$m=a("li"),$oe=a("strong"),OQe=o("realm"),VQe=o(" \u2014 "),Ik=a("a"),XQe=o("RealmConfig"),zQe=o(" (Realm model)"),QQe=l(),km=a("li"),koe=a("strong"),WQe=o("reformer"),HQe=o(" \u2014 "),qk=a("a"),UQe=o("ReformerConfig"),JQe=o(" (Reformer model)"),YQe=l(),Sm=a("li"),Soe=a("strong"),KQe=o("regnet"),ZQe=o(" \u2014 "),Nk=a("a"),eWe=o("RegNetConfig"),oWe=o(" (RegNet model)"),rWe=l(),Rm=a("li"),Roe=a("strong"),tWe=o("rembert"),aWe=o(" \u2014 "),jk=a("a"),nWe=o("RemBertConfig"),sWe=o(" (RemBERT model)"),lWe=l(),Bm=a("li"),Boe=a("strong"),iWe=o("resnet"),dWe=o(" \u2014 "),Dk=a("a"),cWe=o("ResNetConfig"),fWe=o(" (ResNet model)"),mWe=l(),Pm=a("li"),Poe=a("strong"),gWe=o("retribert"),hWe=o(" \u2014 "),Gk=a("a"),pWe=o("RetriBertConfig"),uWe=o(" (RetriBERT model)"),_We=l(),Im=a("li"),Ioe=a("strong"),bWe=o("roberta"),vWe=o(" \u2014 "),Ok=a("a"),FWe=o("RobertaConfig"),TWe=o(" (RoBERTa model)"),MWe=l(),qm=a("li"),qoe=a("strong"),EWe=o("roformer"),CWe=o(" \u2014 "),Vk=a("a"),wWe=o("RoFormerConfig"),AWe=o(" (RoFormer model)"),yWe=l(),Nm=a("li"),Noe=a("strong"),LWe=o("segformer"),xWe=o(" \u2014 "),Xk=a("a"),$We=o("SegformerConfig"),kWe=o(" (SegFormer model)"),SWe=l(),jm=a("li"),joe=a("strong"),RWe=o("sew"),BWe=o(" \u2014 "),zk=a("a"),PWe=o("SEWConfig"),IWe=o(" (SEW model)"),qWe=l(),Dm=a("li"),Doe=a("strong"),NWe=o("sew-d"),jWe=o(" \u2014 "),Qk=a("a"),DWe=o("SEWDConfig"),GWe=o(" (SEW-D model)"),OWe=l(),Gm=a("li"),Goe=a("strong"),VWe=o("speech-encoder-decoder"),XWe=o(" \u2014 "),Wk=a("a"),zWe=o("SpeechEncoderDecoderConfig"),QWe=o(" (Speech Encoder decoder model)"),WWe=l(),Om=a("li"),Ooe=a("strong"),HWe=o("speech_to_text"),UWe=o(" \u2014 "),Hk=a("a"),JWe=o("Speech2TextConfig"),YWe=o(" (Speech2Text model)"),KWe=l(),Vm=a("li"),Voe=a("strong"),ZWe=o("speech_to_text_2"),eHe=o(" \u2014 "),Uk=a("a"),oHe=o("Speech2Text2Config"),rHe=o(" (Speech2Text2 model)"),tHe=l(),Xm=a("li"),Xoe=a("strong"),aHe=o("splinter"),nHe=o(" \u2014 "),Jk=a("a"),sHe=o("SplinterConfig"),lHe=o(" (Splinter model)"),iHe=l(),zm=a("li"),zoe=a("strong"),dHe=o("squeezebert"),cHe=o(" \u2014 "),Yk=a("a"),fHe=o("SqueezeBertConfig"),mHe=o(" (SqueezeBERT model)"),gHe=l(),Qm=a("li"),Qoe=a("strong"),hHe=o("swin"),pHe=o(" \u2014 "),Kk=a("a"),uHe=o("SwinConfig"),_He=o(" (Swin model)"),bHe=l(),Wm=a("li"),Woe=a("strong"),vHe=o("t5"),FHe=o(" \u2014 "),Zk=a("a"),THe=o("T5Config"),MHe=o(" (T5 model)"),EHe=l(),Hm=a("li"),Hoe=a("strong"),CHe=o("tapas"),wHe=o(" \u2014 "),eS=a("a"),AHe=o("TapasConfig"),yHe=o(" (TAPAS model)"),LHe=l(),Um=a("li"),Uoe=a("strong"),xHe=o("tapex"),$He=o(" \u2014 "),oS=a("a"),kHe=o("BartConfig"),SHe=o(" (TAPEX model)"),RHe=l(),Jm=a("li"),Joe=a("strong"),BHe=o("transfo-xl"),PHe=o(" \u2014 "),rS=a("a"),IHe=o("TransfoXLConfig"),qHe=o(" (Transformer-XL model)"),NHe=l(),Ym=a("li"),Yoe=a("strong"),jHe=o("trocr"),DHe=o(" \u2014 "),tS=a("a"),GHe=o("TrOCRConfig"),OHe=o(" (TrOCR model)"),VHe=l(),Km=a("li"),Koe=a("strong"),XHe=o("unispeech"),zHe=o(" \u2014 "),aS=a("a"),QHe=o("UniSpeechConfig"),WHe=o(" (UniSpeech model)"),HHe=l(),Zm=a("li"),Zoe=a("strong"),UHe=o("unispeech-sat"),JHe=o(" \u2014 "),nS=a("a"),YHe=o("UniSpeechSatConfig"),KHe=o(" (UniSpeechSat model)"),ZHe=l(),eg=a("li"),ere=a("strong"),eUe=o("van"),oUe=o(" \u2014 "),sS=a("a"),rUe=o("VanConfig"),tUe=o(" (VAN model)"),aUe=l(),og=a("li"),ore=a("strong"),nUe=o("vilt"),sUe=o(" \u2014 "),lS=a("a"),lUe=o("ViltConfig"),iUe=o(" (ViLT model)"),dUe=l(),rg=a("li"),rre=a("strong"),cUe=o("vision-encoder-decoder"),fUe=o(" \u2014 "),iS=a("a"),mUe=o("VisionEncoderDecoderConfig"),gUe=o(" (Vision Encoder decoder model)"),hUe=l(),tg=a("li"),tre=a("strong"),pUe=o("vision-text-dual-encoder"),uUe=o(" \u2014 "),dS=a("a"),_Ue=o("VisionTextDualEncoderConfig"),bUe=o(" (VisionTextDualEncoder model)"),vUe=l(),ag=a("li"),are=a("strong"),FUe=o("visual_bert"),TUe=o(" \u2014 "),cS=a("a"),MUe=o("VisualBertConfig"),EUe=o(" (VisualBert model)"),CUe=l(),ng=a("li"),nre=a("strong"),wUe=o("vit"),AUe=o(" \u2014 "),fS=a("a"),yUe=o("ViTConfig"),LUe=o(" (ViT model)"),xUe=l(),sg=a("li"),sre=a("strong"),$Ue=o("vit_mae"),kUe=o(" \u2014 "),mS=a("a"),SUe=o("ViTMAEConfig"),RUe=o(" (ViTMAE model)"),BUe=l(),lg=a("li"),lre=a("strong"),PUe=o("wav2vec2"),IUe=o(" \u2014 "),gS=a("a"),qUe=o("Wav2Vec2Config"),NUe=o(" (Wav2Vec2 model)"),jUe=l(),ig=a("li"),ire=a("strong"),DUe=o("wavlm"),GUe=o(" \u2014 "),hS=a("a"),OUe=o("WavLMConfig"),VUe=o(" (WavLM model)"),XUe=l(),dg=a("li"),dre=a("strong"),zUe=o("xglm"),QUe=o(" \u2014 "),pS=a("a"),WUe=o("XGLMConfig"),HUe=o(" (XGLM model)"),UUe=l(),cg=a("li"),cre=a("strong"),JUe=o("xlm"),YUe=o(" \u2014 "),uS=a("a"),KUe=o("XLMConfig"),ZUe=o(" (XLM model)"),eJe=l(),fg=a("li"),fre=a("strong"),oJe=o("xlm-prophetnet"),rJe=o(" \u2014 "),_S=a("a"),tJe=o("XLMProphetNetConfig"),aJe=o(" (XLMProphetNet model)"),nJe=l(),mg=a("li"),mre=a("strong"),sJe=o("xlm-roberta"),lJe=o(" \u2014 "),bS=a("a"),iJe=o("XLMRobertaConfig"),dJe=o(" (XLM-RoBERTa model)"),cJe=l(),gg=a("li"),gre=a("strong"),fJe=o("xlm-roberta-xl"),mJe=o(" \u2014 "),vS=a("a"),gJe=o("XLMRobertaXLConfig"),hJe=o(" (XLM-RoBERTa-XL model)"),pJe=l(),hg=a("li"),hre=a("strong"),uJe=o("xlnet"),_Je=o(" \u2014 "),FS=a("a"),bJe=o("XLNetConfig"),vJe=o(" (XLNet model)"),FJe=l(),pg=a("li"),pre=a("strong"),TJe=o("yolos"),MJe=o(" \u2014 "),TS=a("a"),EJe=o("YolosConfig"),CJe=o(" (YOLOS model)"),wJe=l(),ug=a("li"),ure=a("strong"),AJe=o("yoso"),yJe=o(" \u2014 "),MS=a("a"),LJe=o("YosoConfig"),xJe=o(" (YOSO model)"),$Je=l(),F(_g.$$.fragment),kJe=l(),bg=a("div"),F(iA.$$.fragment),SJe=l(),_re=a("p"),RJe=o("Register a new configuration for this class."),gIe=l(),bi=a("h2"),vg=a("a"),bre=a("span"),F(dA.$$.fragment),BJe=l(),vre=a("span"),PJe=o("AutoTokenizer"),hIe=l(),wo=a("div"),F(cA.$$.fragment),IJe=l(),fA=a("p"),qJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ES=a("a"),NJe=o("AutoTokenizer.from_pretrained()"),jJe=o(" class method."),DJe=l(),mA=a("p"),GJe=o("This class cannot be instantiated directly using "),Fre=a("code"),OJe=o("__init__()"),VJe=o(" (throws an error)."),XJe=l(),Cr=a("div"),F(gA.$$.fragment),zJe=l(),Tre=a("p"),QJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),WJe=l(),Ca=a("p"),HJe=o("The tokenizer class to instantiate is selected based on the "),Mre=a("code"),UJe=o("model_type"),JJe=o(` property of the config object (either
passed as an argument or loaded from `),Ere=a("code"),YJe=o("pretrained_model_name_or_path"),KJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cre=a("code"),ZJe=o("pretrained_model_name_or_path"),eYe=o(":"),oYe=l(),k=a("ul"),kn=a("li"),wre=a("strong"),rYe=o("albert"),tYe=o(" \u2014 "),CS=a("a"),aYe=o("AlbertTokenizer"),nYe=o(" or "),wS=a("a"),sYe=o("AlbertTokenizerFast"),lYe=o(" (ALBERT model)"),iYe=l(),Sn=a("li"),Are=a("strong"),dYe=o("bart"),cYe=o(" \u2014 "),AS=a("a"),fYe=o("BartTokenizer"),mYe=o(" or "),yS=a("a"),gYe=o("BartTokenizerFast"),hYe=o(" (BART model)"),pYe=l(),Rn=a("li"),yre=a("strong"),uYe=o("barthez"),_Ye=o(" \u2014 "),LS=a("a"),bYe=o("BarthezTokenizer"),vYe=o(" or "),xS=a("a"),FYe=o("BarthezTokenizerFast"),TYe=o(" (BARThez model)"),MYe=l(),Fg=a("li"),Lre=a("strong"),EYe=o("bartpho"),CYe=o(" \u2014 "),$S=a("a"),wYe=o("BartphoTokenizer"),AYe=o(" (BARTpho model)"),yYe=l(),Bn=a("li"),xre=a("strong"),LYe=o("bert"),xYe=o(" \u2014 "),kS=a("a"),$Ye=o("BertTokenizer"),kYe=o(" or "),SS=a("a"),SYe=o("BertTokenizerFast"),RYe=o(" (BERT model)"),BYe=l(),Tg=a("li"),$re=a("strong"),PYe=o("bert-generation"),IYe=o(" \u2014 "),RS=a("a"),qYe=o("BertGenerationTokenizer"),NYe=o(" (Bert Generation model)"),jYe=l(),Mg=a("li"),kre=a("strong"),DYe=o("bert-japanese"),GYe=o(" \u2014 "),BS=a("a"),OYe=o("BertJapaneseTokenizer"),VYe=o(" (BertJapanese model)"),XYe=l(),Eg=a("li"),Sre=a("strong"),zYe=o("bertweet"),QYe=o(" \u2014 "),PS=a("a"),WYe=o("BertweetTokenizer"),HYe=o(" (Bertweet model)"),UYe=l(),Pn=a("li"),Rre=a("strong"),JYe=o("big_bird"),YYe=o(" \u2014 "),IS=a("a"),KYe=o("BigBirdTokenizer"),ZYe=o(" or "),qS=a("a"),eKe=o("BigBirdTokenizerFast"),oKe=o(" (BigBird model)"),rKe=l(),In=a("li"),Bre=a("strong"),tKe=o("bigbird_pegasus"),aKe=o(" \u2014 "),NS=a("a"),nKe=o("PegasusTokenizer"),sKe=o(" or "),jS=a("a"),lKe=o("PegasusTokenizerFast"),iKe=o(" (BigBirdPegasus model)"),dKe=l(),qn=a("li"),Pre=a("strong"),cKe=o("blenderbot"),fKe=o(" \u2014 "),DS=a("a"),mKe=o("BlenderbotTokenizer"),gKe=o(" or "),GS=a("a"),hKe=o("BlenderbotTokenizerFast"),pKe=o(" (Blenderbot model)"),uKe=l(),Cg=a("li"),Ire=a("strong"),_Ke=o("blenderbot-small"),bKe=o(" \u2014 "),OS=a("a"),vKe=o("BlenderbotSmallTokenizer"),FKe=o(" (BlenderbotSmall model)"),TKe=l(),wg=a("li"),qre=a("strong"),MKe=o("byt5"),EKe=o(" \u2014 "),VS=a("a"),CKe=o("ByT5Tokenizer"),wKe=o(" (ByT5 model)"),AKe=l(),Nn=a("li"),Nre=a("strong"),yKe=o("camembert"),LKe=o(" \u2014 "),XS=a("a"),xKe=o("CamembertTokenizer"),$Ke=o(" or "),zS=a("a"),kKe=o("CamembertTokenizerFast"),SKe=o(" (CamemBERT model)"),RKe=l(),Ag=a("li"),jre=a("strong"),BKe=o("canine"),PKe=o(" \u2014 "),QS=a("a"),IKe=o("CanineTokenizer"),qKe=o(" (Canine model)"),NKe=l(),jn=a("li"),Dre=a("strong"),jKe=o("clip"),DKe=o(" \u2014 "),WS=a("a"),GKe=o("CLIPTokenizer"),OKe=o(" or "),HS=a("a"),VKe=o("CLIPTokenizerFast"),XKe=o(" (CLIP model)"),zKe=l(),Dn=a("li"),Gre=a("strong"),QKe=o("convbert"),WKe=o(" \u2014 "),US=a("a"),HKe=o("ConvBertTokenizer"),UKe=o(" or "),JS=a("a"),JKe=o("ConvBertTokenizerFast"),YKe=o(" (ConvBERT model)"),KKe=l(),Gn=a("li"),Ore=a("strong"),ZKe=o("cpm"),eZe=o(" \u2014 "),YS=a("a"),oZe=o("CpmTokenizer"),rZe=o(" or "),KS=a("a"),tZe=o("CpmTokenizerFast"),aZe=o(" (CPM model)"),nZe=l(),yg=a("li"),Vre=a("strong"),sZe=o("ctrl"),lZe=o(" \u2014 "),ZS=a("a"),iZe=o("CTRLTokenizer"),dZe=o(" (CTRL model)"),cZe=l(),On=a("li"),Xre=a("strong"),fZe=o("data2vec-text"),mZe=o(" \u2014 "),eR=a("a"),gZe=o("RobertaTokenizer"),hZe=o(" or "),oR=a("a"),pZe=o("RobertaTokenizerFast"),uZe=o(" (Data2VecText model)"),_Ze=l(),Vn=a("li"),zre=a("strong"),bZe=o("deberta"),vZe=o(" \u2014 "),rR=a("a"),FZe=o("DebertaTokenizer"),TZe=o(" or "),tR=a("a"),MZe=o("DebertaTokenizerFast"),EZe=o(" (DeBERTa model)"),CZe=l(),Xn=a("li"),Qre=a("strong"),wZe=o("deberta-v2"),AZe=o(" \u2014 "),aR=a("a"),yZe=o("DebertaV2Tokenizer"),LZe=o(" or "),nR=a("a"),xZe=o("DebertaV2TokenizerFast"),$Ze=o(" (DeBERTa-v2 model)"),kZe=l(),zn=a("li"),Wre=a("strong"),SZe=o("distilbert"),RZe=o(" \u2014 "),sR=a("a"),BZe=o("DistilBertTokenizer"),PZe=o(" or "),lR=a("a"),IZe=o("DistilBertTokenizerFast"),qZe=o(" (DistilBERT model)"),NZe=l(),Qn=a("li"),Hre=a("strong"),jZe=o("dpr"),DZe=o(" \u2014 "),iR=a("a"),GZe=o("DPRQuestionEncoderTokenizer"),OZe=o(" or "),dR=a("a"),VZe=o("DPRQuestionEncoderTokenizerFast"),XZe=o(" (DPR model)"),zZe=l(),Wn=a("li"),Ure=a("strong"),QZe=o("electra"),WZe=o(" \u2014 "),cR=a("a"),HZe=o("ElectraTokenizer"),UZe=o(" or "),fR=a("a"),JZe=o("ElectraTokenizerFast"),YZe=o(" (ELECTRA model)"),KZe=l(),Lg=a("li"),Jre=a("strong"),ZZe=o("flaubert"),eeo=o(" \u2014 "),mR=a("a"),oeo=o("FlaubertTokenizer"),reo=o(" (FlauBERT model)"),teo=l(),Hn=a("li"),Yre=a("strong"),aeo=o("fnet"),neo=o(" \u2014 "),gR=a("a"),seo=o("FNetTokenizer"),leo=o(" or "),hR=a("a"),ieo=o("FNetTokenizerFast"),deo=o(" (FNet model)"),ceo=l(),xg=a("li"),Kre=a("strong"),feo=o("fsmt"),meo=o(" \u2014 "),pR=a("a"),geo=o("FSMTTokenizer"),heo=o(" (FairSeq Machine-Translation model)"),peo=l(),Un=a("li"),Zre=a("strong"),ueo=o("funnel"),_eo=o(" \u2014 "),uR=a("a"),beo=o("FunnelTokenizer"),veo=o(" or "),_R=a("a"),Feo=o("FunnelTokenizerFast"),Teo=o(" (Funnel Transformer model)"),Meo=l(),Jn=a("li"),ete=a("strong"),Eeo=o("gpt2"),Ceo=o(" \u2014 "),bR=a("a"),weo=o("GPT2Tokenizer"),Aeo=o(" or "),vR=a("a"),yeo=o("GPT2TokenizerFast"),Leo=o(" (OpenAI GPT-2 model)"),xeo=l(),Yn=a("li"),ote=a("strong"),$eo=o("gpt_neo"),keo=o(" \u2014 "),FR=a("a"),Seo=o("GPT2Tokenizer"),Reo=o(" or "),TR=a("a"),Beo=o("GPT2TokenizerFast"),Peo=o(" (GPT Neo model)"),Ieo=l(),Kn=a("li"),rte=a("strong"),qeo=o("gptj"),Neo=o(" \u2014 "),MR=a("a"),jeo=o("GPT2Tokenizer"),Deo=o(" or "),ER=a("a"),Geo=o("GPT2TokenizerFast"),Oeo=o(" (GPT-J model)"),Veo=l(),Zn=a("li"),tte=a("strong"),Xeo=o("herbert"),zeo=o(" \u2014 "),CR=a("a"),Qeo=o("HerbertTokenizer"),Weo=o(" or "),wR=a("a"),Heo=o("HerbertTokenizerFast"),Ueo=o(" (HerBERT model)"),Jeo=l(),$g=a("li"),ate=a("strong"),Yeo=o("hubert"),Keo=o(" \u2014 "),AR=a("a"),Zeo=o("Wav2Vec2CTCTokenizer"),eoo=o(" (Hubert model)"),ooo=l(),es=a("li"),nte=a("strong"),roo=o("ibert"),too=o(" \u2014 "),yR=a("a"),aoo=o("RobertaTokenizer"),noo=o(" or "),LR=a("a"),soo=o("RobertaTokenizerFast"),loo=o(" (I-BERT model)"),ioo=l(),os=a("li"),ste=a("strong"),doo=o("layoutlm"),coo=o(" \u2014 "),xR=a("a"),foo=o("LayoutLMTokenizer"),moo=o(" or "),$R=a("a"),goo=o("LayoutLMTokenizerFast"),hoo=o(" (LayoutLM model)"),poo=l(),rs=a("li"),lte=a("strong"),uoo=o("layoutlmv2"),_oo=o(" \u2014 "),kR=a("a"),boo=o("LayoutLMv2Tokenizer"),voo=o(" or "),SR=a("a"),Foo=o("LayoutLMv2TokenizerFast"),Too=o(" (LayoutLMv2 model)"),Moo=l(),ts=a("li"),ite=a("strong"),Eoo=o("layoutlmv3"),Coo=o(" \u2014 "),RR=a("a"),woo=o("LayoutLMv3Tokenizer"),Aoo=o(" or "),BR=a("a"),yoo=o("LayoutLMv3TokenizerFast"),Loo=o(" (LayoutLMv3 model)"),xoo=l(),as=a("li"),dte=a("strong"),$oo=o("layoutxlm"),koo=o(" \u2014 "),PR=a("a"),Soo=o("LayoutXLMTokenizer"),Roo=o(" or "),IR=a("a"),Boo=o("LayoutXLMTokenizerFast"),Poo=o(" (LayoutXLM model)"),Ioo=l(),ns=a("li"),cte=a("strong"),qoo=o("led"),Noo=o(" \u2014 "),qR=a("a"),joo=o("LEDTokenizer"),Doo=o(" or "),NR=a("a"),Goo=o("LEDTokenizerFast"),Ooo=o(" (LED model)"),Voo=l(),ss=a("li"),fte=a("strong"),Xoo=o("longformer"),zoo=o(" \u2014 "),jR=a("a"),Qoo=o("LongformerTokenizer"),Woo=o(" or "),DR=a("a"),Hoo=o("LongformerTokenizerFast"),Uoo=o(" (Longformer model)"),Joo=l(),kg=a("li"),mte=a("strong"),Yoo=o("luke"),Koo=o(" \u2014 "),GR=a("a"),Zoo=o("LukeTokenizer"),ero=o(" (LUKE model)"),oro=l(),ls=a("li"),gte=a("strong"),rro=o("lxmert"),tro=o(" \u2014 "),OR=a("a"),aro=o("LxmertTokenizer"),nro=o(" or "),VR=a("a"),sro=o("LxmertTokenizerFast"),lro=o(" (LXMERT model)"),iro=l(),Sg=a("li"),hte=a("strong"),dro=o("m2m_100"),cro=o(" \u2014 "),XR=a("a"),fro=o("M2M100Tokenizer"),mro=o(" (M2M100 model)"),gro=l(),Rg=a("li"),pte=a("strong"),hro=o("marian"),pro=o(" \u2014 "),zR=a("a"),uro=o("MarianTokenizer"),_ro=o(" (Marian model)"),bro=l(),is=a("li"),ute=a("strong"),vro=o("mbart"),Fro=o(" \u2014 "),QR=a("a"),Tro=o("MBartTokenizer"),Mro=o(" or "),WR=a("a"),Ero=o("MBartTokenizerFast"),Cro=o(" (mBART model)"),wro=l(),ds=a("li"),_te=a("strong"),Aro=o("mbart50"),yro=o(" \u2014 "),HR=a("a"),Lro=o("MBart50Tokenizer"),xro=o(" or "),UR=a("a"),$ro=o("MBart50TokenizerFast"),kro=o(" (mBART-50 model)"),Sro=l(),cs=a("li"),bte=a("strong"),Rro=o("megatron-bert"),Bro=o(" \u2014 "),JR=a("a"),Pro=o("BertTokenizer"),Iro=o(" or "),YR=a("a"),qro=o("BertTokenizerFast"),Nro=o(" (MegatronBert model)"),jro=l(),Bg=a("li"),vte=a("strong"),Dro=o("mluke"),Gro=o(" \u2014 "),KR=a("a"),Oro=o("MLukeTokenizer"),Vro=o(" (mLUKE model)"),Xro=l(),fs=a("li"),Fte=a("strong"),zro=o("mobilebert"),Qro=o(" \u2014 "),ZR=a("a"),Wro=o("MobileBertTokenizer"),Hro=o(" or "),eB=a("a"),Uro=o("MobileBertTokenizerFast"),Jro=o(" (MobileBERT model)"),Yro=l(),ms=a("li"),Tte=a("strong"),Kro=o("mpnet"),Zro=o(" \u2014 "),oB=a("a"),eto=o("MPNetTokenizer"),oto=o(" or "),rB=a("a"),rto=o("MPNetTokenizerFast"),tto=o(" (MPNet model)"),ato=l(),gs=a("li"),Mte=a("strong"),nto=o("mt5"),sto=o(" \u2014 "),tB=a("a"),lto=o("MT5Tokenizer"),ito=o(" or "),aB=a("a"),dto=o("MT5TokenizerFast"),cto=o(" (mT5 model)"),fto=l(),hs=a("li"),Ete=a("strong"),mto=o("nystromformer"),gto=o(" \u2014 "),nB=a("a"),hto=o("AlbertTokenizer"),pto=o(" or "),sB=a("a"),uto=o("AlbertTokenizerFast"),_to=o(" (Nystromformer model)"),bto=l(),ps=a("li"),Cte=a("strong"),vto=o("openai-gpt"),Fto=o(" \u2014 "),lB=a("a"),Tto=o("OpenAIGPTTokenizer"),Mto=o(" or "),iB=a("a"),Eto=o("OpenAIGPTTokenizerFast"),Cto=o(" (OpenAI GPT model)"),wto=l(),us=a("li"),wte=a("strong"),Ato=o("pegasus"),yto=o(" \u2014 "),dB=a("a"),Lto=o("PegasusTokenizer"),xto=o(" or "),cB=a("a"),$to=o("PegasusTokenizerFast"),kto=o(" (Pegasus model)"),Sto=l(),Pg=a("li"),Ate=a("strong"),Rto=o("perceiver"),Bto=o(" \u2014 "),fB=a("a"),Pto=o("PerceiverTokenizer"),Ito=o(" (Perceiver model)"),qto=l(),Ig=a("li"),yte=a("strong"),Nto=o("phobert"),jto=o(" \u2014 "),mB=a("a"),Dto=o("PhobertTokenizer"),Gto=o(" (PhoBERT model)"),Oto=l(),qg=a("li"),Lte=a("strong"),Vto=o("plbart"),Xto=o(" \u2014 "),gB=a("a"),zto=o("PLBartTokenizer"),Qto=o(" (PLBart model)"),Wto=l(),Ng=a("li"),xte=a("strong"),Hto=o("prophetnet"),Uto=o(" \u2014 "),hB=a("a"),Jto=o("ProphetNetTokenizer"),Yto=o(" (ProphetNet model)"),Kto=l(),_s=a("li"),$te=a("strong"),Zto=o("qdqbert"),eao=o(" \u2014 "),pB=a("a"),oao=o("BertTokenizer"),rao=o(" or "),uB=a("a"),tao=o("BertTokenizerFast"),aao=o(" (QDQBert model)"),nao=l(),jg=a("li"),kte=a("strong"),sao=o("rag"),lao=o(" \u2014 "),_B=a("a"),iao=o("RagTokenizer"),dao=o(" (RAG model)"),cao=l(),bs=a("li"),Ste=a("strong"),fao=o("realm"),mao=o(" \u2014 "),bB=a("a"),gao=o("RealmTokenizer"),hao=o(" or "),vB=a("a"),pao=o("RealmTokenizerFast"),uao=o(" (Realm model)"),_ao=l(),vs=a("li"),Rte=a("strong"),bao=o("reformer"),vao=o(" \u2014 "),FB=a("a"),Fao=o("ReformerTokenizer"),Tao=o(" or "),TB=a("a"),Mao=o("ReformerTokenizerFast"),Eao=o(" (Reformer model)"),Cao=l(),Fs=a("li"),Bte=a("strong"),wao=o("rembert"),Aao=o(" \u2014 "),MB=a("a"),yao=o("RemBertTokenizer"),Lao=o(" or "),EB=a("a"),xao=o("RemBertTokenizerFast"),$ao=o(" (RemBERT model)"),kao=l(),Ts=a("li"),Pte=a("strong"),Sao=o("retribert"),Rao=o(" \u2014 "),CB=a("a"),Bao=o("RetriBertTokenizer"),Pao=o(" or "),wB=a("a"),Iao=o("RetriBertTokenizerFast"),qao=o(" (RetriBERT model)"),Nao=l(),Ms=a("li"),Ite=a("strong"),jao=o("roberta"),Dao=o(" \u2014 "),AB=a("a"),Gao=o("RobertaTokenizer"),Oao=o(" or "),yB=a("a"),Vao=o("RobertaTokenizerFast"),Xao=o(" (RoBERTa model)"),zao=l(),Es=a("li"),qte=a("strong"),Qao=o("roformer"),Wao=o(" \u2014 "),LB=a("a"),Hao=o("RoFormerTokenizer"),Uao=o(" or "),xB=a("a"),Jao=o("RoFormerTokenizerFast"),Yao=o(" (RoFormer model)"),Kao=l(),Dg=a("li"),Nte=a("strong"),Zao=o("speech_to_text"),eno=o(" \u2014 "),$B=a("a"),ono=o("Speech2TextTokenizer"),rno=o(" (Speech2Text model)"),tno=l(),Gg=a("li"),jte=a("strong"),ano=o("speech_to_text_2"),nno=o(" \u2014 "),kB=a("a"),sno=o("Speech2Text2Tokenizer"),lno=o(" (Speech2Text2 model)"),ino=l(),Cs=a("li"),Dte=a("strong"),dno=o("splinter"),cno=o(" \u2014 "),SB=a("a"),fno=o("SplinterTokenizer"),mno=o(" or "),RB=a("a"),gno=o("SplinterTokenizerFast"),hno=o(" (Splinter model)"),pno=l(),ws=a("li"),Gte=a("strong"),uno=o("squeezebert"),_no=o(" \u2014 "),BB=a("a"),bno=o("SqueezeBertTokenizer"),vno=o(" or "),PB=a("a"),Fno=o("SqueezeBertTokenizerFast"),Tno=o(" (SqueezeBERT model)"),Mno=l(),As=a("li"),Ote=a("strong"),Eno=o("t5"),Cno=o(" \u2014 "),IB=a("a"),wno=o("T5Tokenizer"),Ano=o(" or "),qB=a("a"),yno=o("T5TokenizerFast"),Lno=o(" (T5 model)"),xno=l(),Og=a("li"),Vte=a("strong"),$no=o("tapas"),kno=o(" \u2014 "),NB=a("a"),Sno=o("TapasTokenizer"),Rno=o(" (TAPAS model)"),Bno=l(),Vg=a("li"),Xte=a("strong"),Pno=o("tapex"),Ino=o(" \u2014 "),jB=a("a"),qno=o("TapexTokenizer"),Nno=o(" (TAPEX model)"),jno=l(),Xg=a("li"),zte=a("strong"),Dno=o("transfo-xl"),Gno=o(" \u2014 "),DB=a("a"),Ono=o("TransfoXLTokenizer"),Vno=o(" (Transformer-XL model)"),Xno=l(),ys=a("li"),Qte=a("strong"),zno=o("visual_bert"),Qno=o(" \u2014 "),GB=a("a"),Wno=o("BertTokenizer"),Hno=o(" or "),OB=a("a"),Uno=o("BertTokenizerFast"),Jno=o(" (VisualBert model)"),Yno=l(),zg=a("li"),Wte=a("strong"),Kno=o("wav2vec2"),Zno=o(" \u2014 "),VB=a("a"),eso=o("Wav2Vec2CTCTokenizer"),oso=o(" (Wav2Vec2 model)"),rso=l(),Qg=a("li"),Hte=a("strong"),tso=o("wav2vec2_phoneme"),aso=o(" \u2014 "),XB=a("a"),nso=o("Wav2Vec2PhonemeCTCTokenizer"),sso=o(" (Wav2Vec2Phoneme model)"),lso=l(),Ls=a("li"),Ute=a("strong"),iso=o("xglm"),dso=o(" \u2014 "),zB=a("a"),cso=o("XGLMTokenizer"),fso=o(" or "),QB=a("a"),mso=o("XGLMTokenizerFast"),gso=o(" (XGLM model)"),hso=l(),Wg=a("li"),Jte=a("strong"),pso=o("xlm"),uso=o(" \u2014 "),WB=a("a"),_so=o("XLMTokenizer"),bso=o(" (XLM model)"),vso=l(),Hg=a("li"),Yte=a("strong"),Fso=o("xlm-prophetnet"),Tso=o(" \u2014 "),HB=a("a"),Mso=o("XLMProphetNetTokenizer"),Eso=o(" (XLMProphetNet model)"),Cso=l(),xs=a("li"),Kte=a("strong"),wso=o("xlm-roberta"),Aso=o(" \u2014 "),UB=a("a"),yso=o("XLMRobertaTokenizer"),Lso=o(" or "),JB=a("a"),xso=o("XLMRobertaTokenizerFast"),$so=o(" (XLM-RoBERTa model)"),kso=l(),$s=a("li"),Zte=a("strong"),Sso=o("xlm-roberta-xl"),Rso=o(" \u2014 "),YB=a("a"),Bso=o("RobertaTokenizer"),Pso=o(" or "),KB=a("a"),Iso=o("RobertaTokenizerFast"),qso=o(" (XLM-RoBERTa-XL model)"),Nso=l(),ks=a("li"),eae=a("strong"),jso=o("xlnet"),Dso=o(" \u2014 "),ZB=a("a"),Gso=o("XLNetTokenizer"),Oso=o(" or "),eP=a("a"),Vso=o("XLNetTokenizerFast"),Xso=o(" (XLNet model)"),zso=l(),Ss=a("li"),oae=a("strong"),Qso=o("yoso"),Wso=o(" \u2014 "),oP=a("a"),Hso=o("AlbertTokenizer"),Uso=o(" or "),rP=a("a"),Jso=o("AlbertTokenizerFast"),Yso=o(" (YOSO model)"),Kso=l(),F(Ug.$$.fragment),Zso=l(),Jg=a("div"),F(hA.$$.fragment),elo=l(),rae=a("p"),olo=o("Register a new tokenizer in this mapping."),pIe=l(),vi=a("h2"),Yg=a("a"),tae=a("span"),F(pA.$$.fragment),rlo=l(),aae=a("span"),tlo=o("AutoFeatureExtractor"),uIe=l(),Ao=a("div"),F(uA.$$.fragment),alo=l(),_A=a("p"),nlo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),tP=a("a"),slo=o("AutoFeatureExtractor.from_pretrained()"),llo=o(" class method."),ilo=l(),bA=a("p"),dlo=o("This class cannot be instantiated directly using "),nae=a("code"),clo=o("__init__()"),flo=o(" (throws an error)."),mlo=l(),Qe=a("div"),F(vA.$$.fragment),glo=l(),sae=a("p"),hlo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),plo=l(),wa=a("p"),ulo=o("The feature extractor class to instantiate is selected based on the "),lae=a("code"),_lo=o("model_type"),blo=o(` property of the config object
(either passed as an argument or loaded from `),iae=a("code"),vlo=o("pretrained_model_name_or_path"),Flo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),dae=a("code"),Tlo=o("pretrained_model_name_or_path"),Mlo=o(":"),Elo=l(),Z=a("ul"),Kg=a("li"),cae=a("strong"),Clo=o("beit"),wlo=o(" \u2014 "),aP=a("a"),Alo=o("BeitFeatureExtractor"),ylo=o(" (BEiT model)"),Llo=l(),Zg=a("li"),fae=a("strong"),xlo=o("clip"),$lo=o(" \u2014 "),nP=a("a"),klo=o("CLIPFeatureExtractor"),Slo=o(" (CLIP model)"),Rlo=l(),eh=a("li"),mae=a("strong"),Blo=o("convnext"),Plo=o(" \u2014 "),sP=a("a"),Ilo=o("ConvNextFeatureExtractor"),qlo=o(" (ConvNext model)"),Nlo=l(),oh=a("li"),gae=a("strong"),jlo=o("data2vec-audio"),Dlo=o(" \u2014 "),lP=a("a"),Glo=o("Wav2Vec2FeatureExtractor"),Olo=o(" (Data2VecAudio model)"),Vlo=l(),rh=a("li"),hae=a("strong"),Xlo=o("data2vec-vision"),zlo=o(" \u2014 "),iP=a("a"),Qlo=o("BeitFeatureExtractor"),Wlo=o(" (Data2VecVision model)"),Hlo=l(),th=a("li"),pae=a("strong"),Ulo=o("deit"),Jlo=o(" \u2014 "),dP=a("a"),Ylo=o("DeiTFeatureExtractor"),Klo=o(" (DeiT model)"),Zlo=l(),ah=a("li"),uae=a("strong"),eio=o("detr"),oio=o(" \u2014 "),cP=a("a"),rio=o("DetrFeatureExtractor"),tio=o(" (DETR model)"),aio=l(),nh=a("li"),_ae=a("strong"),nio=o("dpt"),sio=o(" \u2014 "),fP=a("a"),lio=o("DPTFeatureExtractor"),iio=o(" (DPT model)"),dio=l(),sh=a("li"),bae=a("strong"),cio=o("flava"),fio=o(" \u2014 "),mP=a("a"),mio=o("FlavaFeatureExtractor"),gio=o(" (Flava model)"),hio=l(),lh=a("li"),vae=a("strong"),pio=o("glpn"),uio=o(" \u2014 "),gP=a("a"),_io=o("GLPNFeatureExtractor"),bio=o(" (GLPN model)"),vio=l(),ih=a("li"),Fae=a("strong"),Fio=o("hubert"),Tio=o(" \u2014 "),hP=a("a"),Mio=o("Wav2Vec2FeatureExtractor"),Eio=o(" (Hubert model)"),Cio=l(),dh=a("li"),Tae=a("strong"),wio=o("layoutlmv2"),Aio=o(" \u2014 "),pP=a("a"),yio=o("LayoutLMv2FeatureExtractor"),Lio=o(" (LayoutLMv2 model)"),xio=l(),ch=a("li"),Mae=a("strong"),$io=o("layoutlmv3"),kio=o(" \u2014 "),uP=a("a"),Sio=o("LayoutLMv3FeatureExtractor"),Rio=o(" (LayoutLMv3 model)"),Bio=l(),fh=a("li"),Eae=a("strong"),Pio=o("maskformer"),Iio=o(" \u2014 "),_P=a("a"),qio=o("MaskFormerFeatureExtractor"),Nio=o(" (MaskFormer model)"),jio=l(),mh=a("li"),Cae=a("strong"),Dio=o("perceiver"),Gio=o(" \u2014 "),bP=a("a"),Oio=o("PerceiverFeatureExtractor"),Vio=o(" (Perceiver model)"),Xio=l(),gh=a("li"),wae=a("strong"),zio=o("poolformer"),Qio=o(" \u2014 "),vP=a("a"),Wio=o("PoolFormerFeatureExtractor"),Hio=o(" (PoolFormer model)"),Uio=l(),hh=a("li"),Aae=a("strong"),Jio=o("regnet"),Yio=o(" \u2014 "),FP=a("a"),Kio=o("ConvNextFeatureExtractor"),Zio=o(" (RegNet model)"),edo=l(),ph=a("li"),yae=a("strong"),odo=o("resnet"),rdo=o(" \u2014 "),TP=a("a"),tdo=o("ConvNextFeatureExtractor"),ado=o(" (ResNet model)"),ndo=l(),uh=a("li"),Lae=a("strong"),sdo=o("segformer"),ldo=o(" \u2014 "),MP=a("a"),ido=o("SegformerFeatureExtractor"),ddo=o(" (SegFormer model)"),cdo=l(),_h=a("li"),xae=a("strong"),fdo=o("speech_to_text"),mdo=o(" \u2014 "),EP=a("a"),gdo=o("Speech2TextFeatureExtractor"),hdo=o(" (Speech2Text model)"),pdo=l(),bh=a("li"),$ae=a("strong"),udo=o("swin"),_do=o(" \u2014 "),CP=a("a"),bdo=o("ViTFeatureExtractor"),vdo=o(" (Swin model)"),Fdo=l(),vh=a("li"),kae=a("strong"),Tdo=o("van"),Mdo=o(" \u2014 "),wP=a("a"),Edo=o("ConvNextFeatureExtractor"),Cdo=o(" (VAN model)"),wdo=l(),Fh=a("li"),Sae=a("strong"),Ado=o("vit"),ydo=o(" \u2014 "),AP=a("a"),Ldo=o("ViTFeatureExtractor"),xdo=o(" (ViT model)"),$do=l(),Th=a("li"),Rae=a("strong"),kdo=o("vit_mae"),Sdo=o(" \u2014 "),yP=a("a"),Rdo=o("ViTFeatureExtractor"),Bdo=o(" (ViTMAE model)"),Pdo=l(),Mh=a("li"),Bae=a("strong"),Ido=o("wav2vec2"),qdo=o(" \u2014 "),LP=a("a"),Ndo=o("Wav2Vec2FeatureExtractor"),jdo=o(" (Wav2Vec2 model)"),Ddo=l(),Eh=a("li"),Pae=a("strong"),Gdo=o("yolos"),Odo=o(" \u2014 "),xP=a("a"),Vdo=o("YolosFeatureExtractor"),Xdo=o(" (YOLOS model)"),zdo=l(),F(Ch.$$.fragment),Qdo=l(),F(wh.$$.fragment),Wdo=l(),Ah=a("div"),F(FA.$$.fragment),Hdo=l(),Iae=a("p"),Udo=o("Register a new feature extractor for this class."),_Ie=l(),Fi=a("h2"),yh=a("a"),qae=a("span"),F(TA.$$.fragment),Jdo=l(),Nae=a("span"),Ydo=o("AutoProcessor"),bIe=l(),yo=a("div"),F(MA.$$.fragment),Kdo=l(),EA=a("p"),Zdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$P=a("a"),eco=o("AutoProcessor.from_pretrained()"),oco=o(" class method."),rco=l(),CA=a("p"),tco=o("This class cannot be instantiated directly using "),jae=a("code"),aco=o("__init__()"),nco=o(" (throws an error)."),sco=l(),We=a("div"),F(wA.$$.fragment),lco=l(),Dae=a("p"),ico=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dco=l(),Ti=a("p"),cco=o("The processor class to instantiate is selected based on the "),Gae=a("code"),fco=o("model_type"),mco=o(` property of the config object (either
passed as an argument or loaded from `),Oae=a("code"),gco=o("pretrained_model_name_or_path"),hco=o(" if possible):"),pco=l(),ue=a("ul"),Lh=a("li"),Vae=a("strong"),uco=o("clip"),_co=o(" \u2014 "),kP=a("a"),bco=o("CLIPProcessor"),vco=o(" (CLIP model)"),Fco=l(),xh=a("li"),Xae=a("strong"),Tco=o("flava"),Mco=o(" \u2014 "),zae=a("code"),Eco=o("FLAVAProcessor"),Cco=o(" (Flava model)"),wco=l(),$h=a("li"),Qae=a("strong"),Aco=o("layoutlmv2"),yco=o(" \u2014 "),SP=a("a"),Lco=o("LayoutLMv2Processor"),xco=o(" (LayoutLMv2 model)"),$co=l(),kh=a("li"),Wae=a("strong"),kco=o("layoutlmv3"),Sco=o(" \u2014 "),RP=a("a"),Rco=o("LayoutLMv3Processor"),Bco=o(" (LayoutLMv3 model)"),Pco=l(),Sh=a("li"),Hae=a("strong"),Ico=o("layoutxlm"),qco=o(" \u2014 "),BP=a("a"),Nco=o("LayoutXLMProcessor"),jco=o(" (LayoutXLM model)"),Dco=l(),Rh=a("li"),Uae=a("strong"),Gco=o("sew"),Oco=o(" \u2014 "),PP=a("a"),Vco=o("Wav2Vec2Processor"),Xco=o(" (SEW model)"),zco=l(),Bh=a("li"),Jae=a("strong"),Qco=o("sew-d"),Wco=o(" \u2014 "),IP=a("a"),Hco=o("Wav2Vec2Processor"),Uco=o(" (SEW-D model)"),Jco=l(),Ph=a("li"),Yae=a("strong"),Yco=o("speech_to_text"),Kco=o(" \u2014 "),qP=a("a"),Zco=o("Speech2TextProcessor"),efo=o(" (Speech2Text model)"),ofo=l(),Ih=a("li"),Kae=a("strong"),rfo=o("speech_to_text_2"),tfo=o(" \u2014 "),NP=a("a"),afo=o("Speech2Text2Processor"),nfo=o(" (Speech2Text2 model)"),sfo=l(),qh=a("li"),Zae=a("strong"),lfo=o("trocr"),ifo=o(" \u2014 "),jP=a("a"),dfo=o("TrOCRProcessor"),cfo=o(" (TrOCR model)"),ffo=l(),Nh=a("li"),ene=a("strong"),mfo=o("unispeech"),gfo=o(" \u2014 "),DP=a("a"),hfo=o("Wav2Vec2Processor"),pfo=o(" (UniSpeech model)"),ufo=l(),jh=a("li"),one=a("strong"),_fo=o("unispeech-sat"),bfo=o(" \u2014 "),GP=a("a"),vfo=o("Wav2Vec2Processor"),Ffo=o(" (UniSpeechSat model)"),Tfo=l(),Dh=a("li"),rne=a("strong"),Mfo=o("vilt"),Efo=o(" \u2014 "),OP=a("a"),Cfo=o("ViltProcessor"),wfo=o(" (ViLT model)"),Afo=l(),Gh=a("li"),tne=a("strong"),yfo=o("vision-text-dual-encoder"),Lfo=o(" \u2014 "),VP=a("a"),xfo=o("VisionTextDualEncoderProcessor"),$fo=o(" (VisionTextDualEncoder model)"),kfo=l(),Oh=a("li"),ane=a("strong"),Sfo=o("wav2vec2"),Rfo=o(" \u2014 "),XP=a("a"),Bfo=o("Wav2Vec2Processor"),Pfo=o(" (Wav2Vec2 model)"),Ifo=l(),Vh=a("li"),nne=a("strong"),qfo=o("wavlm"),Nfo=o(" \u2014 "),zP=a("a"),jfo=o("Wav2Vec2Processor"),Dfo=o(" (WavLM model)"),Gfo=l(),F(Xh.$$.fragment),Ofo=l(),F(zh.$$.fragment),Vfo=l(),Qh=a("div"),F(AA.$$.fragment),Xfo=l(),sne=a("p"),zfo=o("Register a new processor for this class."),vIe=l(),Mi=a("h2"),Wh=a("a"),lne=a("span"),F(yA.$$.fragment),Qfo=l(),ine=a("span"),Wfo=o("AutoModel"),FIe=l(),Lo=a("div"),F(LA.$$.fragment),Hfo=l(),Ei=a("p"),Ufo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QP=a("a"),Jfo=o("from_pretrained()"),Yfo=o(" class method or the "),WP=a("a"),Kfo=o("from_config()"),Zfo=o(` class
method.`),emo=l(),xA=a("p"),omo=o("This class cannot be instantiated directly using "),dne=a("code"),rmo=o("__init__()"),tmo=o(" (throws an error)."),amo=l(),ot=a("div"),F($A.$$.fragment),nmo=l(),cne=a("p"),smo=o("Instantiates one of the base model classes of the library from a configuration."),lmo=l(),Ci=a("p"),imo=o(`Note:
Loading a model from its configuration file does `),fne=a("strong"),dmo=o("not"),cmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HP=a("a"),fmo=o("from_pretrained()"),mmo=o(" to load the model weights."),gmo=l(),F(Hh.$$.fragment),hmo=l(),He=a("div"),F(kA.$$.fragment),pmo=l(),mne=a("p"),umo=o("Instantiate one of the base model classes of the library from a pretrained model."),_mo=l(),Aa=a("p"),bmo=o("The model class to instantiate is selected based on the "),gne=a("code"),vmo=o("model_type"),Fmo=o(` property of the config object (either
passed as an argument or loaded from `),hne=a("code"),Tmo=o("pretrained_model_name_or_path"),Mmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pne=a("code"),Emo=o("pretrained_model_name_or_path"),Cmo=o(":"),wmo=l(),x=a("ul"),Uh=a("li"),une=a("strong"),Amo=o("albert"),ymo=o(" \u2014 "),UP=a("a"),Lmo=o("AlbertModel"),xmo=o(" (ALBERT model)"),$mo=l(),Jh=a("li"),_ne=a("strong"),kmo=o("bart"),Smo=o(" \u2014 "),JP=a("a"),Rmo=o("BartModel"),Bmo=o(" (BART model)"),Pmo=l(),Yh=a("li"),bne=a("strong"),Imo=o("beit"),qmo=o(" \u2014 "),YP=a("a"),Nmo=o("BeitModel"),jmo=o(" (BEiT model)"),Dmo=l(),Kh=a("li"),vne=a("strong"),Gmo=o("bert"),Omo=o(" \u2014 "),KP=a("a"),Vmo=o("BertModel"),Xmo=o(" (BERT model)"),zmo=l(),Zh=a("li"),Fne=a("strong"),Qmo=o("bert-generation"),Wmo=o(" \u2014 "),ZP=a("a"),Hmo=o("BertGenerationEncoder"),Umo=o(" (Bert Generation model)"),Jmo=l(),ep=a("li"),Tne=a("strong"),Ymo=o("big_bird"),Kmo=o(" \u2014 "),eI=a("a"),Zmo=o("BigBirdModel"),ego=o(" (BigBird model)"),ogo=l(),op=a("li"),Mne=a("strong"),rgo=o("bigbird_pegasus"),tgo=o(" \u2014 "),oI=a("a"),ago=o("BigBirdPegasusModel"),ngo=o(" (BigBirdPegasus model)"),sgo=l(),rp=a("li"),Ene=a("strong"),lgo=o("blenderbot"),igo=o(" \u2014 "),rI=a("a"),dgo=o("BlenderbotModel"),cgo=o(" (Blenderbot model)"),fgo=l(),tp=a("li"),Cne=a("strong"),mgo=o("blenderbot-small"),ggo=o(" \u2014 "),tI=a("a"),hgo=o("BlenderbotSmallModel"),pgo=o(" (BlenderbotSmall model)"),ugo=l(),ap=a("li"),wne=a("strong"),_go=o("camembert"),bgo=o(" \u2014 "),aI=a("a"),vgo=o("CamembertModel"),Fgo=o(" (CamemBERT model)"),Tgo=l(),np=a("li"),Ane=a("strong"),Mgo=o("canine"),Ego=o(" \u2014 "),nI=a("a"),Cgo=o("CanineModel"),wgo=o(" (Canine model)"),Ago=l(),sp=a("li"),yne=a("strong"),ygo=o("clip"),Lgo=o(" \u2014 "),sI=a("a"),xgo=o("CLIPModel"),$go=o(" (CLIP model)"),kgo=l(),lp=a("li"),Lne=a("strong"),Sgo=o("convbert"),Rgo=o(" \u2014 "),lI=a("a"),Bgo=o("ConvBertModel"),Pgo=o(" (ConvBERT model)"),Igo=l(),ip=a("li"),xne=a("strong"),qgo=o("convnext"),Ngo=o(" \u2014 "),iI=a("a"),jgo=o("ConvNextModel"),Dgo=o(" (ConvNext model)"),Ggo=l(),dp=a("li"),$ne=a("strong"),Ogo=o("ctrl"),Vgo=o(" \u2014 "),dI=a("a"),Xgo=o("CTRLModel"),zgo=o(" (CTRL model)"),Qgo=l(),cp=a("li"),kne=a("strong"),Wgo=o("data2vec-audio"),Hgo=o(" \u2014 "),cI=a("a"),Ugo=o("Data2VecAudioModel"),Jgo=o(" (Data2VecAudio model)"),Ygo=l(),fp=a("li"),Sne=a("strong"),Kgo=o("data2vec-text"),Zgo=o(" \u2014 "),fI=a("a"),eho=o("Data2VecTextModel"),oho=o(" (Data2VecText model)"),rho=l(),mp=a("li"),Rne=a("strong"),tho=o("data2vec-vision"),aho=o(" \u2014 "),mI=a("a"),nho=o("Data2VecVisionModel"),sho=o(" (Data2VecVision model)"),lho=l(),gp=a("li"),Bne=a("strong"),iho=o("deberta"),dho=o(" \u2014 "),gI=a("a"),cho=o("DebertaModel"),fho=o(" (DeBERTa model)"),mho=l(),hp=a("li"),Pne=a("strong"),gho=o("deberta-v2"),hho=o(" \u2014 "),hI=a("a"),pho=o("DebertaV2Model"),uho=o(" (DeBERTa-v2 model)"),_ho=l(),pp=a("li"),Ine=a("strong"),bho=o("decision_transformer"),vho=o(" \u2014 "),pI=a("a"),Fho=o("DecisionTransformerModel"),Tho=o(" (Decision Transformer model)"),Mho=l(),up=a("li"),qne=a("strong"),Eho=o("deit"),Cho=o(" \u2014 "),uI=a("a"),who=o("DeiTModel"),Aho=o(" (DeiT model)"),yho=l(),_p=a("li"),Nne=a("strong"),Lho=o("detr"),xho=o(" \u2014 "),_I=a("a"),$ho=o("DetrModel"),kho=o(" (DETR model)"),Sho=l(),bp=a("li"),jne=a("strong"),Rho=o("distilbert"),Bho=o(" \u2014 "),bI=a("a"),Pho=o("DistilBertModel"),Iho=o(" (DistilBERT model)"),qho=l(),vp=a("li"),Dne=a("strong"),Nho=o("dpr"),jho=o(" \u2014 "),vI=a("a"),Dho=o("DPRQuestionEncoder"),Gho=o(" (DPR model)"),Oho=l(),Fp=a("li"),Gne=a("strong"),Vho=o("dpt"),Xho=o(" \u2014 "),FI=a("a"),zho=o("DPTModel"),Qho=o(" (DPT model)"),Who=l(),Tp=a("li"),One=a("strong"),Hho=o("electra"),Uho=o(" \u2014 "),TI=a("a"),Jho=o("ElectraModel"),Yho=o(" (ELECTRA model)"),Kho=l(),Mp=a("li"),Vne=a("strong"),Zho=o("flaubert"),epo=o(" \u2014 "),MI=a("a"),opo=o("FlaubertModel"),rpo=o(" (FlauBERT model)"),tpo=l(),Ep=a("li"),Xne=a("strong"),apo=o("flava"),npo=o(" \u2014 "),EI=a("a"),spo=o("FlavaModel"),lpo=o(" (Flava model)"),ipo=l(),Cp=a("li"),zne=a("strong"),dpo=o("fnet"),cpo=o(" \u2014 "),CI=a("a"),fpo=o("FNetModel"),mpo=o(" (FNet model)"),gpo=l(),wp=a("li"),Qne=a("strong"),hpo=o("fsmt"),ppo=o(" \u2014 "),wI=a("a"),upo=o("FSMTModel"),_po=o(" (FairSeq Machine-Translation model)"),bpo=l(),Rs=a("li"),Wne=a("strong"),vpo=o("funnel"),Fpo=o(" \u2014 "),AI=a("a"),Tpo=o("FunnelModel"),Mpo=o(" or "),yI=a("a"),Epo=o("FunnelBaseModel"),Cpo=o(" (Funnel Transformer model)"),wpo=l(),Ap=a("li"),Hne=a("strong"),Apo=o("glpn"),ypo=o(" \u2014 "),LI=a("a"),Lpo=o("GLPNModel"),xpo=o(" (GLPN model)"),$po=l(),yp=a("li"),Une=a("strong"),kpo=o("gpt2"),Spo=o(" \u2014 "),xI=a("a"),Rpo=o("GPT2Model"),Bpo=o(" (OpenAI GPT-2 model)"),Ppo=l(),Lp=a("li"),Jne=a("strong"),Ipo=o("gpt_neo"),qpo=o(" \u2014 "),$I=a("a"),Npo=o("GPTNeoModel"),jpo=o(" (GPT Neo model)"),Dpo=l(),xp=a("li"),Yne=a("strong"),Gpo=o("gptj"),Opo=o(" \u2014 "),kI=a("a"),Vpo=o("GPTJModel"),Xpo=o(" (GPT-J model)"),zpo=l(),$p=a("li"),Kne=a("strong"),Qpo=o("hubert"),Wpo=o(" \u2014 "),SI=a("a"),Hpo=o("HubertModel"),Upo=o(" (Hubert model)"),Jpo=l(),kp=a("li"),Zne=a("strong"),Ypo=o("ibert"),Kpo=o(" \u2014 "),RI=a("a"),Zpo=o("IBertModel"),euo=o(" (I-BERT model)"),ouo=l(),Sp=a("li"),ese=a("strong"),ruo=o("imagegpt"),tuo=o(" \u2014 "),BI=a("a"),auo=o("ImageGPTModel"),nuo=o(" (ImageGPT model)"),suo=l(),Rp=a("li"),ose=a("strong"),luo=o("layoutlm"),iuo=o(" \u2014 "),PI=a("a"),duo=o("LayoutLMModel"),cuo=o(" (LayoutLM model)"),fuo=l(),Bp=a("li"),rse=a("strong"),muo=o("layoutlmv2"),guo=o(" \u2014 "),II=a("a"),huo=o("LayoutLMv2Model"),puo=o(" (LayoutLMv2 model)"),uuo=l(),Pp=a("li"),tse=a("strong"),_uo=o("layoutlmv3"),buo=o(" \u2014 "),qI=a("a"),vuo=o("LayoutLMv3Model"),Fuo=o(" (LayoutLMv3 model)"),Tuo=l(),Ip=a("li"),ase=a("strong"),Muo=o("led"),Euo=o(" \u2014 "),NI=a("a"),Cuo=o("LEDModel"),wuo=o(" (LED model)"),Auo=l(),qp=a("li"),nse=a("strong"),yuo=o("longformer"),Luo=o(" \u2014 "),jI=a("a"),xuo=o("LongformerModel"),$uo=o(" (Longformer model)"),kuo=l(),Np=a("li"),sse=a("strong"),Suo=o("luke"),Ruo=o(" \u2014 "),DI=a("a"),Buo=o("LukeModel"),Puo=o(" (LUKE model)"),Iuo=l(),jp=a("li"),lse=a("strong"),quo=o("lxmert"),Nuo=o(" \u2014 "),GI=a("a"),juo=o("LxmertModel"),Duo=o(" (LXMERT model)"),Guo=l(),Dp=a("li"),ise=a("strong"),Ouo=o("m2m_100"),Vuo=o(" \u2014 "),OI=a("a"),Xuo=o("M2M100Model"),zuo=o(" (M2M100 model)"),Quo=l(),Gp=a("li"),dse=a("strong"),Wuo=o("marian"),Huo=o(" \u2014 "),VI=a("a"),Uuo=o("MarianModel"),Juo=o(" (Marian model)"),Yuo=l(),Op=a("li"),cse=a("strong"),Kuo=o("maskformer"),Zuo=o(" \u2014 "),XI=a("a"),e_o=o("MaskFormerModel"),o_o=o(" (MaskFormer model)"),r_o=l(),Vp=a("li"),fse=a("strong"),t_o=o("mbart"),a_o=o(" \u2014 "),zI=a("a"),n_o=o("MBartModel"),s_o=o(" (mBART model)"),l_o=l(),Xp=a("li"),mse=a("strong"),i_o=o("megatron-bert"),d_o=o(" \u2014 "),QI=a("a"),c_o=o("MegatronBertModel"),f_o=o(" (MegatronBert model)"),m_o=l(),zp=a("li"),gse=a("strong"),g_o=o("mobilebert"),h_o=o(" \u2014 "),WI=a("a"),p_o=o("MobileBertModel"),u_o=o(" (MobileBERT model)"),__o=l(),Qp=a("li"),hse=a("strong"),b_o=o("mpnet"),v_o=o(" \u2014 "),HI=a("a"),F_o=o("MPNetModel"),T_o=o(" (MPNet model)"),M_o=l(),Wp=a("li"),pse=a("strong"),E_o=o("mt5"),C_o=o(" \u2014 "),UI=a("a"),w_o=o("MT5Model"),A_o=o(" (mT5 model)"),y_o=l(),Hp=a("li"),use=a("strong"),L_o=o("nystromformer"),x_o=o(" \u2014 "),JI=a("a"),$_o=o("NystromformerModel"),k_o=o(" (Nystromformer model)"),S_o=l(),Up=a("li"),_se=a("strong"),R_o=o("openai-gpt"),B_o=o(" \u2014 "),YI=a("a"),P_o=o("OpenAIGPTModel"),I_o=o(" (OpenAI GPT model)"),q_o=l(),Jp=a("li"),bse=a("strong"),N_o=o("pegasus"),j_o=o(" \u2014 "),KI=a("a"),D_o=o("PegasusModel"),G_o=o(" (Pegasus model)"),O_o=l(),Yp=a("li"),vse=a("strong"),V_o=o("perceiver"),X_o=o(" \u2014 "),ZI=a("a"),z_o=o("PerceiverModel"),Q_o=o(" (Perceiver model)"),W_o=l(),Kp=a("li"),Fse=a("strong"),H_o=o("plbart"),U_o=o(" \u2014 "),eq=a("a"),J_o=o("PLBartModel"),Y_o=o(" (PLBart model)"),K_o=l(),Zp=a("li"),Tse=a("strong"),Z_o=o("poolformer"),e0o=o(" \u2014 "),oq=a("a"),o0o=o("PoolFormerModel"),r0o=o(" (PoolFormer model)"),t0o=l(),eu=a("li"),Mse=a("strong"),a0o=o("prophetnet"),n0o=o(" \u2014 "),rq=a("a"),s0o=o("ProphetNetModel"),l0o=o(" (ProphetNet model)"),i0o=l(),ou=a("li"),Ese=a("strong"),d0o=o("qdqbert"),c0o=o(" \u2014 "),tq=a("a"),f0o=o("QDQBertModel"),m0o=o(" (QDQBert model)"),g0o=l(),ru=a("li"),Cse=a("strong"),h0o=o("reformer"),p0o=o(" \u2014 "),aq=a("a"),u0o=o("ReformerModel"),_0o=o(" (Reformer model)"),b0o=l(),tu=a("li"),wse=a("strong"),v0o=o("regnet"),F0o=o(" \u2014 "),nq=a("a"),T0o=o("RegNetModel"),M0o=o(" (RegNet model)"),E0o=l(),au=a("li"),Ase=a("strong"),C0o=o("rembert"),w0o=o(" \u2014 "),sq=a("a"),A0o=o("RemBertModel"),y0o=o(" (RemBERT model)"),L0o=l(),nu=a("li"),yse=a("strong"),x0o=o("resnet"),$0o=o(" \u2014 "),lq=a("a"),k0o=o("ResNetModel"),S0o=o(" (ResNet model)"),R0o=l(),su=a("li"),Lse=a("strong"),B0o=o("retribert"),P0o=o(" \u2014 "),iq=a("a"),I0o=o("RetriBertModel"),q0o=o(" (RetriBERT model)"),N0o=l(),lu=a("li"),xse=a("strong"),j0o=o("roberta"),D0o=o(" \u2014 "),dq=a("a"),G0o=o("RobertaModel"),O0o=o(" (RoBERTa model)"),V0o=l(),iu=a("li"),$se=a("strong"),X0o=o("roformer"),z0o=o(" \u2014 "),cq=a("a"),Q0o=o("RoFormerModel"),W0o=o(" (RoFormer model)"),H0o=l(),du=a("li"),kse=a("strong"),U0o=o("segformer"),J0o=o(" \u2014 "),fq=a("a"),Y0o=o("SegformerModel"),K0o=o(" (SegFormer model)"),Z0o=l(),cu=a("li"),Sse=a("strong"),e1o=o("sew"),o1o=o(" \u2014 "),mq=a("a"),r1o=o("SEWModel"),t1o=o(" (SEW model)"),a1o=l(),fu=a("li"),Rse=a("strong"),n1o=o("sew-d"),s1o=o(" \u2014 "),gq=a("a"),l1o=o("SEWDModel"),i1o=o(" (SEW-D model)"),d1o=l(),mu=a("li"),Bse=a("strong"),c1o=o("speech_to_text"),f1o=o(" \u2014 "),hq=a("a"),m1o=o("Speech2TextModel"),g1o=o(" (Speech2Text model)"),h1o=l(),gu=a("li"),Pse=a("strong"),p1o=o("splinter"),u1o=o(" \u2014 "),pq=a("a"),_1o=o("SplinterModel"),b1o=o(" (Splinter model)"),v1o=l(),hu=a("li"),Ise=a("strong"),F1o=o("squeezebert"),T1o=o(" \u2014 "),uq=a("a"),M1o=o("SqueezeBertModel"),E1o=o(" (SqueezeBERT model)"),C1o=l(),pu=a("li"),qse=a("strong"),w1o=o("swin"),A1o=o(" \u2014 "),_q=a("a"),y1o=o("SwinModel"),L1o=o(" (Swin model)"),x1o=l(),uu=a("li"),Nse=a("strong"),$1o=o("t5"),k1o=o(" \u2014 "),bq=a("a"),S1o=o("T5Model"),R1o=o(" (T5 model)"),B1o=l(),_u=a("li"),jse=a("strong"),P1o=o("tapas"),I1o=o(" \u2014 "),vq=a("a"),q1o=o("TapasModel"),N1o=o(" (TAPAS model)"),j1o=l(),bu=a("li"),Dse=a("strong"),D1o=o("transfo-xl"),G1o=o(" \u2014 "),Fq=a("a"),O1o=o("TransfoXLModel"),V1o=o(" (Transformer-XL model)"),X1o=l(),vu=a("li"),Gse=a("strong"),z1o=o("unispeech"),Q1o=o(" \u2014 "),Tq=a("a"),W1o=o("UniSpeechModel"),H1o=o(" (UniSpeech model)"),U1o=l(),Fu=a("li"),Ose=a("strong"),J1o=o("unispeech-sat"),Y1o=o(" \u2014 "),Mq=a("a"),K1o=o("UniSpeechSatModel"),Z1o=o(" (UniSpeechSat model)"),ebo=l(),Tu=a("li"),Vse=a("strong"),obo=o("van"),rbo=o(" \u2014 "),Eq=a("a"),tbo=o("VanModel"),abo=o(" (VAN model)"),nbo=l(),Mu=a("li"),Xse=a("strong"),sbo=o("vilt"),lbo=o(" \u2014 "),Cq=a("a"),ibo=o("ViltModel"),dbo=o(" (ViLT model)"),cbo=l(),Eu=a("li"),zse=a("strong"),fbo=o("vision-text-dual-encoder"),mbo=o(" \u2014 "),wq=a("a"),gbo=o("VisionTextDualEncoderModel"),hbo=o(" (VisionTextDualEncoder model)"),pbo=l(),Cu=a("li"),Qse=a("strong"),ubo=o("visual_bert"),_bo=o(" \u2014 "),Aq=a("a"),bbo=o("VisualBertModel"),vbo=o(" (VisualBert model)"),Fbo=l(),wu=a("li"),Wse=a("strong"),Tbo=o("vit"),Mbo=o(" \u2014 "),yq=a("a"),Ebo=o("ViTModel"),Cbo=o(" (ViT model)"),wbo=l(),Au=a("li"),Hse=a("strong"),Abo=o("vit_mae"),ybo=o(" \u2014 "),Lq=a("a"),Lbo=o("ViTMAEModel"),xbo=o(" (ViTMAE model)"),$bo=l(),yu=a("li"),Use=a("strong"),kbo=o("wav2vec2"),Sbo=o(" \u2014 "),xq=a("a"),Rbo=o("Wav2Vec2Model"),Bbo=o(" (Wav2Vec2 model)"),Pbo=l(),Lu=a("li"),Jse=a("strong"),Ibo=o("wavlm"),qbo=o(" \u2014 "),$q=a("a"),Nbo=o("WavLMModel"),jbo=o(" (WavLM model)"),Dbo=l(),xu=a("li"),Yse=a("strong"),Gbo=o("xglm"),Obo=o(" \u2014 "),kq=a("a"),Vbo=o("XGLMModel"),Xbo=o(" (XGLM model)"),zbo=l(),$u=a("li"),Kse=a("strong"),Qbo=o("xlm"),Wbo=o(" \u2014 "),Sq=a("a"),Hbo=o("XLMModel"),Ubo=o(" (XLM model)"),Jbo=l(),ku=a("li"),Zse=a("strong"),Ybo=o("xlm-prophetnet"),Kbo=o(" \u2014 "),Rq=a("a"),Zbo=o("XLMProphetNetModel"),e2o=o(" (XLMProphetNet model)"),o2o=l(),Su=a("li"),ele=a("strong"),r2o=o("xlm-roberta"),t2o=o(" \u2014 "),Bq=a("a"),a2o=o("XLMRobertaModel"),n2o=o(" (XLM-RoBERTa model)"),s2o=l(),Ru=a("li"),ole=a("strong"),l2o=o("xlm-roberta-xl"),i2o=o(" \u2014 "),Pq=a("a"),d2o=o("XLMRobertaXLModel"),c2o=o(" (XLM-RoBERTa-XL model)"),f2o=l(),Bu=a("li"),rle=a("strong"),m2o=o("xlnet"),g2o=o(" \u2014 "),Iq=a("a"),h2o=o("XLNetModel"),p2o=o(" (XLNet model)"),u2o=l(),Pu=a("li"),tle=a("strong"),_2o=o("yolos"),b2o=o(" \u2014 "),qq=a("a"),v2o=o("YolosModel"),F2o=o(" (YOLOS model)"),T2o=l(),Iu=a("li"),ale=a("strong"),M2o=o("yoso"),E2o=o(" \u2014 "),Nq=a("a"),C2o=o("YosoModel"),w2o=o(" (YOSO model)"),A2o=l(),qu=a("p"),y2o=o("The model is set in evaluation mode by default using "),nle=a("code"),L2o=o("model.eval()"),x2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sle=a("code"),$2o=o("model.train()"),k2o=l(),F(Nu.$$.fragment),TIe=l(),wi=a("h2"),ju=a("a"),lle=a("span"),F(SA.$$.fragment),S2o=l(),ile=a("span"),R2o=o("AutoModelForPreTraining"),MIe=l(),xo=a("div"),F(RA.$$.fragment),B2o=l(),Ai=a("p"),P2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jq=a("a"),I2o=o("from_pretrained()"),q2o=o(" class method or the "),Dq=a("a"),N2o=o("from_config()"),j2o=o(` class
method.`),D2o=l(),BA=a("p"),G2o=o("This class cannot be instantiated directly using "),dle=a("code"),O2o=o("__init__()"),V2o=o(" (throws an error)."),X2o=l(),rt=a("div"),F(PA.$$.fragment),z2o=l(),cle=a("p"),Q2o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),W2o=l(),yi=a("p"),H2o=o(`Note:
Loading a model from its configuration file does `),fle=a("strong"),U2o=o("not"),J2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=a("a"),Y2o=o("from_pretrained()"),K2o=o(" to load the model weights."),Z2o=l(),F(Du.$$.fragment),evo=l(),Ue=a("div"),F(IA.$$.fragment),ovo=l(),mle=a("p"),rvo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tvo=l(),ya=a("p"),avo=o("The model class to instantiate is selected based on the "),gle=a("code"),nvo=o("model_type"),svo=o(` property of the config object (either
passed as an argument or loaded from `),hle=a("code"),lvo=o("pretrained_model_name_or_path"),ivo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ple=a("code"),dvo=o("pretrained_model_name_or_path"),cvo=o(":"),fvo=l(),G=a("ul"),Gu=a("li"),ule=a("strong"),mvo=o("albert"),gvo=o(" \u2014 "),Oq=a("a"),hvo=o("AlbertForPreTraining"),pvo=o(" (ALBERT model)"),uvo=l(),Ou=a("li"),_le=a("strong"),_vo=o("bart"),bvo=o(" \u2014 "),Vq=a("a"),vvo=o("BartForConditionalGeneration"),Fvo=o(" (BART model)"),Tvo=l(),Vu=a("li"),ble=a("strong"),Mvo=o("bert"),Evo=o(" \u2014 "),Xq=a("a"),Cvo=o("BertForPreTraining"),wvo=o(" (BERT model)"),Avo=l(),Xu=a("li"),vle=a("strong"),yvo=o("big_bird"),Lvo=o(" \u2014 "),zq=a("a"),xvo=o("BigBirdForPreTraining"),$vo=o(" (BigBird model)"),kvo=l(),zu=a("li"),Fle=a("strong"),Svo=o("camembert"),Rvo=o(" \u2014 "),Qq=a("a"),Bvo=o("CamembertForMaskedLM"),Pvo=o(" (CamemBERT model)"),Ivo=l(),Qu=a("li"),Tle=a("strong"),qvo=o("ctrl"),Nvo=o(" \u2014 "),Wq=a("a"),jvo=o("CTRLLMHeadModel"),Dvo=o(" (CTRL model)"),Gvo=l(),Wu=a("li"),Mle=a("strong"),Ovo=o("data2vec-text"),Vvo=o(" \u2014 "),Hq=a("a"),Xvo=o("Data2VecTextForMaskedLM"),zvo=o(" (Data2VecText model)"),Qvo=l(),Hu=a("li"),Ele=a("strong"),Wvo=o("deberta"),Hvo=o(" \u2014 "),Uq=a("a"),Uvo=o("DebertaForMaskedLM"),Jvo=o(" (DeBERTa model)"),Yvo=l(),Uu=a("li"),Cle=a("strong"),Kvo=o("deberta-v2"),Zvo=o(" \u2014 "),Jq=a("a"),eFo=o("DebertaV2ForMaskedLM"),oFo=o(" (DeBERTa-v2 model)"),rFo=l(),Ju=a("li"),wle=a("strong"),tFo=o("distilbert"),aFo=o(" \u2014 "),Yq=a("a"),nFo=o("DistilBertForMaskedLM"),sFo=o(" (DistilBERT model)"),lFo=l(),Yu=a("li"),Ale=a("strong"),iFo=o("electra"),dFo=o(" \u2014 "),Kq=a("a"),cFo=o("ElectraForPreTraining"),fFo=o(" (ELECTRA model)"),mFo=l(),Ku=a("li"),yle=a("strong"),gFo=o("flaubert"),hFo=o(" \u2014 "),Zq=a("a"),pFo=o("FlaubertWithLMHeadModel"),uFo=o(" (FlauBERT model)"),_Fo=l(),Zu=a("li"),Lle=a("strong"),bFo=o("flava"),vFo=o(" \u2014 "),eN=a("a"),FFo=o("FlavaForPreTraining"),TFo=o(" (Flava model)"),MFo=l(),e_=a("li"),xle=a("strong"),EFo=o("fnet"),CFo=o(" \u2014 "),oN=a("a"),wFo=o("FNetForPreTraining"),AFo=o(" (FNet model)"),yFo=l(),o_=a("li"),$le=a("strong"),LFo=o("fsmt"),xFo=o(" \u2014 "),rN=a("a"),$Fo=o("FSMTForConditionalGeneration"),kFo=o(" (FairSeq Machine-Translation model)"),SFo=l(),r_=a("li"),kle=a("strong"),RFo=o("funnel"),BFo=o(" \u2014 "),tN=a("a"),PFo=o("FunnelForPreTraining"),IFo=o(" (Funnel Transformer model)"),qFo=l(),t_=a("li"),Sle=a("strong"),NFo=o("gpt2"),jFo=o(" \u2014 "),aN=a("a"),DFo=o("GPT2LMHeadModel"),GFo=o(" (OpenAI GPT-2 model)"),OFo=l(),a_=a("li"),Rle=a("strong"),VFo=o("ibert"),XFo=o(" \u2014 "),nN=a("a"),zFo=o("IBertForMaskedLM"),QFo=o(" (I-BERT model)"),WFo=l(),n_=a("li"),Ble=a("strong"),HFo=o("layoutlm"),UFo=o(" \u2014 "),sN=a("a"),JFo=o("LayoutLMForMaskedLM"),YFo=o(" (LayoutLM model)"),KFo=l(),s_=a("li"),Ple=a("strong"),ZFo=o("longformer"),e6o=o(" \u2014 "),lN=a("a"),o6o=o("LongformerForMaskedLM"),r6o=o(" (Longformer model)"),t6o=l(),l_=a("li"),Ile=a("strong"),a6o=o("lxmert"),n6o=o(" \u2014 "),iN=a("a"),s6o=o("LxmertForPreTraining"),l6o=o(" (LXMERT model)"),i6o=l(),i_=a("li"),qle=a("strong"),d6o=o("megatron-bert"),c6o=o(" \u2014 "),dN=a("a"),f6o=o("MegatronBertForPreTraining"),m6o=o(" (MegatronBert model)"),g6o=l(),d_=a("li"),Nle=a("strong"),h6o=o("mobilebert"),p6o=o(" \u2014 "),cN=a("a"),u6o=o("MobileBertForPreTraining"),_6o=o(" (MobileBERT model)"),b6o=l(),c_=a("li"),jle=a("strong"),v6o=o("mpnet"),F6o=o(" \u2014 "),fN=a("a"),T6o=o("MPNetForMaskedLM"),M6o=o(" (MPNet model)"),E6o=l(),f_=a("li"),Dle=a("strong"),C6o=o("openai-gpt"),w6o=o(" \u2014 "),mN=a("a"),A6o=o("OpenAIGPTLMHeadModel"),y6o=o(" (OpenAI GPT model)"),L6o=l(),m_=a("li"),Gle=a("strong"),x6o=o("retribert"),$6o=o(" \u2014 "),gN=a("a"),k6o=o("RetriBertModel"),S6o=o(" (RetriBERT model)"),R6o=l(),g_=a("li"),Ole=a("strong"),B6o=o("roberta"),P6o=o(" \u2014 "),hN=a("a"),I6o=o("RobertaForMaskedLM"),q6o=o(" (RoBERTa model)"),N6o=l(),h_=a("li"),Vle=a("strong"),j6o=o("squeezebert"),D6o=o(" \u2014 "),pN=a("a"),G6o=o("SqueezeBertForMaskedLM"),O6o=o(" (SqueezeBERT model)"),V6o=l(),p_=a("li"),Xle=a("strong"),X6o=o("t5"),z6o=o(" \u2014 "),uN=a("a"),Q6o=o("T5ForConditionalGeneration"),W6o=o(" (T5 model)"),H6o=l(),u_=a("li"),zle=a("strong"),U6o=o("tapas"),J6o=o(" \u2014 "),_N=a("a"),Y6o=o("TapasForMaskedLM"),K6o=o(" (TAPAS model)"),Z6o=l(),__=a("li"),Qle=a("strong"),eTo=o("transfo-xl"),oTo=o(" \u2014 "),bN=a("a"),rTo=o("TransfoXLLMHeadModel"),tTo=o(" (Transformer-XL model)"),aTo=l(),b_=a("li"),Wle=a("strong"),nTo=o("unispeech"),sTo=o(" \u2014 "),vN=a("a"),lTo=o("UniSpeechForPreTraining"),iTo=o(" (UniSpeech model)"),dTo=l(),v_=a("li"),Hle=a("strong"),cTo=o("unispeech-sat"),fTo=o(" \u2014 "),FN=a("a"),mTo=o("UniSpeechSatForPreTraining"),gTo=o(" (UniSpeechSat model)"),hTo=l(),F_=a("li"),Ule=a("strong"),pTo=o("visual_bert"),uTo=o(" \u2014 "),TN=a("a"),_To=o("VisualBertForPreTraining"),bTo=o(" (VisualBert model)"),vTo=l(),T_=a("li"),Jle=a("strong"),FTo=o("vit_mae"),TTo=o(" \u2014 "),MN=a("a"),MTo=o("ViTMAEForPreTraining"),ETo=o(" (ViTMAE model)"),CTo=l(),M_=a("li"),Yle=a("strong"),wTo=o("wav2vec2"),ATo=o(" \u2014 "),EN=a("a"),yTo=o("Wav2Vec2ForPreTraining"),LTo=o(" (Wav2Vec2 model)"),xTo=l(),E_=a("li"),Kle=a("strong"),$To=o("xlm"),kTo=o(" \u2014 "),CN=a("a"),STo=o("XLMWithLMHeadModel"),RTo=o(" (XLM model)"),BTo=l(),C_=a("li"),Zle=a("strong"),PTo=o("xlm-roberta"),ITo=o(" \u2014 "),wN=a("a"),qTo=o("XLMRobertaForMaskedLM"),NTo=o(" (XLM-RoBERTa model)"),jTo=l(),w_=a("li"),eie=a("strong"),DTo=o("xlm-roberta-xl"),GTo=o(" \u2014 "),AN=a("a"),OTo=o("XLMRobertaXLForMaskedLM"),VTo=o(" (XLM-RoBERTa-XL model)"),XTo=l(),A_=a("li"),oie=a("strong"),zTo=o("xlnet"),QTo=o(" \u2014 "),yN=a("a"),WTo=o("XLNetLMHeadModel"),HTo=o(" (XLNet model)"),UTo=l(),y_=a("p"),JTo=o("The model is set in evaluation mode by default using "),rie=a("code"),YTo=o("model.eval()"),KTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tie=a("code"),ZTo=o("model.train()"),e7o=l(),F(L_.$$.fragment),EIe=l(),Li=a("h2"),x_=a("a"),aie=a("span"),F(qA.$$.fragment),o7o=l(),nie=a("span"),r7o=o("AutoModelForCausalLM"),CIe=l(),$o=a("div"),F(NA.$$.fragment),t7o=l(),xi=a("p"),a7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),LN=a("a"),n7o=o("from_pretrained()"),s7o=o(" class method or the "),xN=a("a"),l7o=o("from_config()"),i7o=o(` class
method.`),d7o=l(),jA=a("p"),c7o=o("This class cannot be instantiated directly using "),sie=a("code"),f7o=o("__init__()"),m7o=o(" (throws an error)."),g7o=l(),tt=a("div"),F(DA.$$.fragment),h7o=l(),lie=a("p"),p7o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),u7o=l(),$i=a("p"),_7o=o(`Note:
Loading a model from its configuration file does `),iie=a("strong"),b7o=o("not"),v7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=a("a"),F7o=o("from_pretrained()"),T7o=o(" to load the model weights."),M7o=l(),F($_.$$.fragment),E7o=l(),Je=a("div"),F(GA.$$.fragment),C7o=l(),die=a("p"),w7o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),A7o=l(),La=a("p"),y7o=o("The model class to instantiate is selected based on the "),cie=a("code"),L7o=o("model_type"),x7o=o(` property of the config object (either
passed as an argument or loaded from `),fie=a("code"),$7o=o("pretrained_model_name_or_path"),k7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mie=a("code"),S7o=o("pretrained_model_name_or_path"),R7o=o(":"),B7o=l(),z=a("ul"),k_=a("li"),gie=a("strong"),P7o=o("bart"),I7o=o(" \u2014 "),kN=a("a"),q7o=o("BartForCausalLM"),N7o=o(" (BART model)"),j7o=l(),S_=a("li"),hie=a("strong"),D7o=o("bert"),G7o=o(" \u2014 "),SN=a("a"),O7o=o("BertLMHeadModel"),V7o=o(" (BERT model)"),X7o=l(),R_=a("li"),pie=a("strong"),z7o=o("bert-generation"),Q7o=o(" \u2014 "),RN=a("a"),W7o=o("BertGenerationDecoder"),H7o=o(" (Bert Generation model)"),U7o=l(),B_=a("li"),uie=a("strong"),J7o=o("big_bird"),Y7o=o(" \u2014 "),BN=a("a"),K7o=o("BigBirdForCausalLM"),Z7o=o(" (BigBird model)"),eMo=l(),P_=a("li"),_ie=a("strong"),oMo=o("bigbird_pegasus"),rMo=o(" \u2014 "),PN=a("a"),tMo=o("BigBirdPegasusForCausalLM"),aMo=o(" (BigBirdPegasus model)"),nMo=l(),I_=a("li"),bie=a("strong"),sMo=o("blenderbot"),lMo=o(" \u2014 "),IN=a("a"),iMo=o("BlenderbotForCausalLM"),dMo=o(" (Blenderbot model)"),cMo=l(),q_=a("li"),vie=a("strong"),fMo=o("blenderbot-small"),mMo=o(" \u2014 "),qN=a("a"),gMo=o("BlenderbotSmallForCausalLM"),hMo=o(" (BlenderbotSmall model)"),pMo=l(),N_=a("li"),Fie=a("strong"),uMo=o("camembert"),_Mo=o(" \u2014 "),NN=a("a"),bMo=o("CamembertForCausalLM"),vMo=o(" (CamemBERT model)"),FMo=l(),j_=a("li"),Tie=a("strong"),TMo=o("ctrl"),MMo=o(" \u2014 "),jN=a("a"),EMo=o("CTRLLMHeadModel"),CMo=o(" (CTRL model)"),wMo=l(),D_=a("li"),Mie=a("strong"),AMo=o("data2vec-text"),yMo=o(" \u2014 "),DN=a("a"),LMo=o("Data2VecTextForCausalLM"),xMo=o(" (Data2VecText model)"),$Mo=l(),G_=a("li"),Eie=a("strong"),kMo=o("electra"),SMo=o(" \u2014 "),GN=a("a"),RMo=o("ElectraForCausalLM"),BMo=o(" (ELECTRA model)"),PMo=l(),O_=a("li"),Cie=a("strong"),IMo=o("gpt2"),qMo=o(" \u2014 "),ON=a("a"),NMo=o("GPT2LMHeadModel"),jMo=o(" (OpenAI GPT-2 model)"),DMo=l(),V_=a("li"),wie=a("strong"),GMo=o("gpt_neo"),OMo=o(" \u2014 "),VN=a("a"),VMo=o("GPTNeoForCausalLM"),XMo=o(" (GPT Neo model)"),zMo=l(),X_=a("li"),Aie=a("strong"),QMo=o("gptj"),WMo=o(" \u2014 "),XN=a("a"),HMo=o("GPTJForCausalLM"),UMo=o(" (GPT-J model)"),JMo=l(),z_=a("li"),yie=a("strong"),YMo=o("marian"),KMo=o(" \u2014 "),zN=a("a"),ZMo=o("MarianForCausalLM"),e4o=o(" (Marian model)"),o4o=l(),Q_=a("li"),Lie=a("strong"),r4o=o("mbart"),t4o=o(" \u2014 "),QN=a("a"),a4o=o("MBartForCausalLM"),n4o=o(" (mBART model)"),s4o=l(),W_=a("li"),xie=a("strong"),l4o=o("megatron-bert"),i4o=o(" \u2014 "),WN=a("a"),d4o=o("MegatronBertForCausalLM"),c4o=o(" (MegatronBert model)"),f4o=l(),H_=a("li"),$ie=a("strong"),m4o=o("openai-gpt"),g4o=o(" \u2014 "),HN=a("a"),h4o=o("OpenAIGPTLMHeadModel"),p4o=o(" (OpenAI GPT model)"),u4o=l(),U_=a("li"),kie=a("strong"),_4o=o("pegasus"),b4o=o(" \u2014 "),UN=a("a"),v4o=o("PegasusForCausalLM"),F4o=o(" (Pegasus model)"),T4o=l(),J_=a("li"),Sie=a("strong"),M4o=o("plbart"),E4o=o(" \u2014 "),JN=a("a"),C4o=o("PLBartForCausalLM"),w4o=o(" (PLBart model)"),A4o=l(),Y_=a("li"),Rie=a("strong"),y4o=o("prophetnet"),L4o=o(" \u2014 "),YN=a("a"),x4o=o("ProphetNetForCausalLM"),$4o=o(" (ProphetNet model)"),k4o=l(),K_=a("li"),Bie=a("strong"),S4o=o("qdqbert"),R4o=o(" \u2014 "),KN=a("a"),B4o=o("QDQBertLMHeadModel"),P4o=o(" (QDQBert model)"),I4o=l(),Z_=a("li"),Pie=a("strong"),q4o=o("reformer"),N4o=o(" \u2014 "),ZN=a("a"),j4o=o("ReformerModelWithLMHead"),D4o=o(" (Reformer model)"),G4o=l(),e0=a("li"),Iie=a("strong"),O4o=o("rembert"),V4o=o(" \u2014 "),ej=a("a"),X4o=o("RemBertForCausalLM"),z4o=o(" (RemBERT model)"),Q4o=l(),o0=a("li"),qie=a("strong"),W4o=o("roberta"),H4o=o(" \u2014 "),oj=a("a"),U4o=o("RobertaForCausalLM"),J4o=o(" (RoBERTa model)"),Y4o=l(),r0=a("li"),Nie=a("strong"),K4o=o("roformer"),Z4o=o(" \u2014 "),rj=a("a"),eEo=o("RoFormerForCausalLM"),oEo=o(" (RoFormer model)"),rEo=l(),t0=a("li"),jie=a("strong"),tEo=o("speech_to_text_2"),aEo=o(" \u2014 "),tj=a("a"),nEo=o("Speech2Text2ForCausalLM"),sEo=o(" (Speech2Text2 model)"),lEo=l(),a0=a("li"),Die=a("strong"),iEo=o("transfo-xl"),dEo=o(" \u2014 "),aj=a("a"),cEo=o("TransfoXLLMHeadModel"),fEo=o(" (Transformer-XL model)"),mEo=l(),n0=a("li"),Gie=a("strong"),gEo=o("trocr"),hEo=o(" \u2014 "),nj=a("a"),pEo=o("TrOCRForCausalLM"),uEo=o(" (TrOCR model)"),_Eo=l(),s0=a("li"),Oie=a("strong"),bEo=o("xglm"),vEo=o(" \u2014 "),sj=a("a"),FEo=o("XGLMForCausalLM"),TEo=o(" (XGLM model)"),MEo=l(),l0=a("li"),Vie=a("strong"),EEo=o("xlm"),CEo=o(" \u2014 "),lj=a("a"),wEo=o("XLMWithLMHeadModel"),AEo=o(" (XLM model)"),yEo=l(),i0=a("li"),Xie=a("strong"),LEo=o("xlm-prophetnet"),xEo=o(" \u2014 "),ij=a("a"),$Eo=o("XLMProphetNetForCausalLM"),kEo=o(" (XLMProphetNet model)"),SEo=l(),d0=a("li"),zie=a("strong"),REo=o("xlm-roberta"),BEo=o(" \u2014 "),dj=a("a"),PEo=o("XLMRobertaForCausalLM"),IEo=o(" (XLM-RoBERTa model)"),qEo=l(),c0=a("li"),Qie=a("strong"),NEo=o("xlm-roberta-xl"),jEo=o(" \u2014 "),cj=a("a"),DEo=o("XLMRobertaXLForCausalLM"),GEo=o(" (XLM-RoBERTa-XL model)"),OEo=l(),f0=a("li"),Wie=a("strong"),VEo=o("xlnet"),XEo=o(" \u2014 "),fj=a("a"),zEo=o("XLNetLMHeadModel"),QEo=o(" (XLNet model)"),WEo=l(),m0=a("p"),HEo=o("The model is set in evaluation mode by default using "),Hie=a("code"),UEo=o("model.eval()"),JEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uie=a("code"),YEo=o("model.train()"),KEo=l(),F(g0.$$.fragment),wIe=l(),ki=a("h2"),h0=a("a"),Jie=a("span"),F(OA.$$.fragment),ZEo=l(),Yie=a("span"),e5o=o("AutoModelForMaskedLM"),AIe=l(),ko=a("div"),F(VA.$$.fragment),o5o=l(),Si=a("p"),r5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mj=a("a"),t5o=o("from_pretrained()"),a5o=o(" class method or the "),gj=a("a"),n5o=o("from_config()"),s5o=o(` class
method.`),l5o=l(),XA=a("p"),i5o=o("This class cannot be instantiated directly using "),Kie=a("code"),d5o=o("__init__()"),c5o=o(" (throws an error)."),f5o=l(),at=a("div"),F(zA.$$.fragment),m5o=l(),Zie=a("p"),g5o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),h5o=l(),Ri=a("p"),p5o=o(`Note:
Loading a model from its configuration file does `),ede=a("strong"),u5o=o("not"),_5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=a("a"),b5o=o("from_pretrained()"),v5o=o(" to load the model weights."),F5o=l(),F(p0.$$.fragment),T5o=l(),Ye=a("div"),F(QA.$$.fragment),M5o=l(),ode=a("p"),E5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),C5o=l(),xa=a("p"),w5o=o("The model class to instantiate is selected based on the "),rde=a("code"),A5o=o("model_type"),y5o=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),L5o=o("pretrained_model_name_or_path"),x5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),$5o=o("pretrained_model_name_or_path"),k5o=o(":"),S5o=l(),Q=a("ul"),u0=a("li"),nde=a("strong"),R5o=o("albert"),B5o=o(" \u2014 "),pj=a("a"),P5o=o("AlbertForMaskedLM"),I5o=o(" (ALBERT model)"),q5o=l(),_0=a("li"),sde=a("strong"),N5o=o("bart"),j5o=o(" \u2014 "),uj=a("a"),D5o=o("BartForConditionalGeneration"),G5o=o(" (BART model)"),O5o=l(),b0=a("li"),lde=a("strong"),V5o=o("bert"),X5o=o(" \u2014 "),_j=a("a"),z5o=o("BertForMaskedLM"),Q5o=o(" (BERT model)"),W5o=l(),v0=a("li"),ide=a("strong"),H5o=o("big_bird"),U5o=o(" \u2014 "),bj=a("a"),J5o=o("BigBirdForMaskedLM"),Y5o=o(" (BigBird model)"),K5o=l(),F0=a("li"),dde=a("strong"),Z5o=o("camembert"),eCo=o(" \u2014 "),vj=a("a"),oCo=o("CamembertForMaskedLM"),rCo=o(" (CamemBERT model)"),tCo=l(),T0=a("li"),cde=a("strong"),aCo=o("convbert"),nCo=o(" \u2014 "),Fj=a("a"),sCo=o("ConvBertForMaskedLM"),lCo=o(" (ConvBERT model)"),iCo=l(),M0=a("li"),fde=a("strong"),dCo=o("data2vec-text"),cCo=o(" \u2014 "),Tj=a("a"),fCo=o("Data2VecTextForMaskedLM"),mCo=o(" (Data2VecText model)"),gCo=l(),E0=a("li"),mde=a("strong"),hCo=o("deberta"),pCo=o(" \u2014 "),Mj=a("a"),uCo=o("DebertaForMaskedLM"),_Co=o(" (DeBERTa model)"),bCo=l(),C0=a("li"),gde=a("strong"),vCo=o("deberta-v2"),FCo=o(" \u2014 "),Ej=a("a"),TCo=o("DebertaV2ForMaskedLM"),MCo=o(" (DeBERTa-v2 model)"),ECo=l(),w0=a("li"),hde=a("strong"),CCo=o("distilbert"),wCo=o(" \u2014 "),Cj=a("a"),ACo=o("DistilBertForMaskedLM"),yCo=o(" (DistilBERT model)"),LCo=l(),A0=a("li"),pde=a("strong"),xCo=o("electra"),$Co=o(" \u2014 "),wj=a("a"),kCo=o("ElectraForMaskedLM"),SCo=o(" (ELECTRA model)"),RCo=l(),y0=a("li"),ude=a("strong"),BCo=o("flaubert"),PCo=o(" \u2014 "),Aj=a("a"),ICo=o("FlaubertWithLMHeadModel"),qCo=o(" (FlauBERT model)"),NCo=l(),L0=a("li"),_de=a("strong"),jCo=o("fnet"),DCo=o(" \u2014 "),yj=a("a"),GCo=o("FNetForMaskedLM"),OCo=o(" (FNet model)"),VCo=l(),x0=a("li"),bde=a("strong"),XCo=o("funnel"),zCo=o(" \u2014 "),Lj=a("a"),QCo=o("FunnelForMaskedLM"),WCo=o(" (Funnel Transformer model)"),HCo=l(),$0=a("li"),vde=a("strong"),UCo=o("ibert"),JCo=o(" \u2014 "),xj=a("a"),YCo=o("IBertForMaskedLM"),KCo=o(" (I-BERT model)"),ZCo=l(),k0=a("li"),Fde=a("strong"),e3o=o("layoutlm"),o3o=o(" \u2014 "),$j=a("a"),r3o=o("LayoutLMForMaskedLM"),t3o=o(" (LayoutLM model)"),a3o=l(),S0=a("li"),Tde=a("strong"),n3o=o("longformer"),s3o=o(" \u2014 "),kj=a("a"),l3o=o("LongformerForMaskedLM"),i3o=o(" (Longformer model)"),d3o=l(),R0=a("li"),Mde=a("strong"),c3o=o("mbart"),f3o=o(" \u2014 "),Sj=a("a"),m3o=o("MBartForConditionalGeneration"),g3o=o(" (mBART model)"),h3o=l(),B0=a("li"),Ede=a("strong"),p3o=o("megatron-bert"),u3o=o(" \u2014 "),Rj=a("a"),_3o=o("MegatronBertForMaskedLM"),b3o=o(" (MegatronBert model)"),v3o=l(),P0=a("li"),Cde=a("strong"),F3o=o("mobilebert"),T3o=o(" \u2014 "),Bj=a("a"),M3o=o("MobileBertForMaskedLM"),E3o=o(" (MobileBERT model)"),C3o=l(),I0=a("li"),wde=a("strong"),w3o=o("mpnet"),A3o=o(" \u2014 "),Pj=a("a"),y3o=o("MPNetForMaskedLM"),L3o=o(" (MPNet model)"),x3o=l(),q0=a("li"),Ade=a("strong"),$3o=o("nystromformer"),k3o=o(" \u2014 "),Ij=a("a"),S3o=o("NystromformerForMaskedLM"),R3o=o(" (Nystromformer model)"),B3o=l(),N0=a("li"),yde=a("strong"),P3o=o("perceiver"),I3o=o(" \u2014 "),qj=a("a"),q3o=o("PerceiverForMaskedLM"),N3o=o(" (Perceiver model)"),j3o=l(),j0=a("li"),Lde=a("strong"),D3o=o("qdqbert"),G3o=o(" \u2014 "),Nj=a("a"),O3o=o("QDQBertForMaskedLM"),V3o=o(" (QDQBert model)"),X3o=l(),D0=a("li"),xde=a("strong"),z3o=o("reformer"),Q3o=o(" \u2014 "),jj=a("a"),W3o=o("ReformerForMaskedLM"),H3o=o(" (Reformer model)"),U3o=l(),G0=a("li"),$de=a("strong"),J3o=o("rembert"),Y3o=o(" \u2014 "),Dj=a("a"),K3o=o("RemBertForMaskedLM"),Z3o=o(" (RemBERT model)"),ewo=l(),O0=a("li"),kde=a("strong"),owo=o("roberta"),rwo=o(" \u2014 "),Gj=a("a"),two=o("RobertaForMaskedLM"),awo=o(" (RoBERTa model)"),nwo=l(),V0=a("li"),Sde=a("strong"),swo=o("roformer"),lwo=o(" \u2014 "),Oj=a("a"),iwo=o("RoFormerForMaskedLM"),dwo=o(" (RoFormer model)"),cwo=l(),X0=a("li"),Rde=a("strong"),fwo=o("squeezebert"),mwo=o(" \u2014 "),Vj=a("a"),gwo=o("SqueezeBertForMaskedLM"),hwo=o(" (SqueezeBERT model)"),pwo=l(),z0=a("li"),Bde=a("strong"),uwo=o("tapas"),_wo=o(" \u2014 "),Xj=a("a"),bwo=o("TapasForMaskedLM"),vwo=o(" (TAPAS model)"),Fwo=l(),Q0=a("li"),Pde=a("strong"),Two=o("wav2vec2"),Mwo=o(" \u2014 "),Ide=a("code"),Ewo=o("Wav2Vec2ForMaskedLM"),Cwo=o(" (Wav2Vec2 model)"),wwo=l(),W0=a("li"),qde=a("strong"),Awo=o("xlm"),ywo=o(" \u2014 "),zj=a("a"),Lwo=o("XLMWithLMHeadModel"),xwo=o(" (XLM model)"),$wo=l(),H0=a("li"),Nde=a("strong"),kwo=o("xlm-roberta"),Swo=o(" \u2014 "),Qj=a("a"),Rwo=o("XLMRobertaForMaskedLM"),Bwo=o(" (XLM-RoBERTa model)"),Pwo=l(),U0=a("li"),jde=a("strong"),Iwo=o("xlm-roberta-xl"),qwo=o(" \u2014 "),Wj=a("a"),Nwo=o("XLMRobertaXLForMaskedLM"),jwo=o(" (XLM-RoBERTa-XL model)"),Dwo=l(),J0=a("li"),Dde=a("strong"),Gwo=o("yoso"),Owo=o(" \u2014 "),Hj=a("a"),Vwo=o("YosoForMaskedLM"),Xwo=o(" (YOSO model)"),zwo=l(),Y0=a("p"),Qwo=o("The model is set in evaluation mode by default using "),Gde=a("code"),Wwo=o("model.eval()"),Hwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ode=a("code"),Uwo=o("model.train()"),Jwo=l(),F(K0.$$.fragment),yIe=l(),Bi=a("h2"),Z0=a("a"),Vde=a("span"),F(WA.$$.fragment),Ywo=l(),Xde=a("span"),Kwo=o("AutoModelForSeq2SeqLM"),LIe=l(),So=a("div"),F(HA.$$.fragment),Zwo=l(),Pi=a("p"),eAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Uj=a("a"),oAo=o("from_pretrained()"),rAo=o(" class method or the "),Jj=a("a"),tAo=o("from_config()"),aAo=o(` class
method.`),nAo=l(),UA=a("p"),sAo=o("This class cannot be instantiated directly using "),zde=a("code"),lAo=o("__init__()"),iAo=o(" (throws an error)."),dAo=l(),nt=a("div"),F(JA.$$.fragment),cAo=l(),Qde=a("p"),fAo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mAo=l(),Ii=a("p"),gAo=o(`Note:
Loading a model from its configuration file does `),Wde=a("strong"),hAo=o("not"),pAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yj=a("a"),uAo=o("from_pretrained()"),_Ao=o(" to load the model weights."),bAo=l(),F(e1.$$.fragment),vAo=l(),Ke=a("div"),F(YA.$$.fragment),FAo=l(),Hde=a("p"),TAo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),MAo=l(),$a=a("p"),EAo=o("The model class to instantiate is selected based on the "),Ude=a("code"),CAo=o("model_type"),wAo=o(` property of the config object (either
passed as an argument or loaded from `),Jde=a("code"),AAo=o("pretrained_model_name_or_path"),yAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yde=a("code"),LAo=o("pretrained_model_name_or_path"),xAo=o(":"),$Ao=l(),he=a("ul"),o1=a("li"),Kde=a("strong"),kAo=o("bart"),SAo=o(" \u2014 "),Kj=a("a"),RAo=o("BartForConditionalGeneration"),BAo=o(" (BART model)"),PAo=l(),r1=a("li"),Zde=a("strong"),IAo=o("bigbird_pegasus"),qAo=o(" \u2014 "),Zj=a("a"),NAo=o("BigBirdPegasusForConditionalGeneration"),jAo=o(" (BigBirdPegasus model)"),DAo=l(),t1=a("li"),ece=a("strong"),GAo=o("blenderbot"),OAo=o(" \u2014 "),eD=a("a"),VAo=o("BlenderbotForConditionalGeneration"),XAo=o(" (Blenderbot model)"),zAo=l(),a1=a("li"),oce=a("strong"),QAo=o("blenderbot-small"),WAo=o(" \u2014 "),oD=a("a"),HAo=o("BlenderbotSmallForConditionalGeneration"),UAo=o(" (BlenderbotSmall model)"),JAo=l(),n1=a("li"),rce=a("strong"),YAo=o("encoder-decoder"),KAo=o(" \u2014 "),rD=a("a"),ZAo=o("EncoderDecoderModel"),eyo=o(" (Encoder decoder model)"),oyo=l(),s1=a("li"),tce=a("strong"),ryo=o("fsmt"),tyo=o(" \u2014 "),tD=a("a"),ayo=o("FSMTForConditionalGeneration"),nyo=o(" (FairSeq Machine-Translation model)"),syo=l(),l1=a("li"),ace=a("strong"),lyo=o("led"),iyo=o(" \u2014 "),aD=a("a"),dyo=o("LEDForConditionalGeneration"),cyo=o(" (LED model)"),fyo=l(),i1=a("li"),nce=a("strong"),myo=o("m2m_100"),gyo=o(" \u2014 "),nD=a("a"),hyo=o("M2M100ForConditionalGeneration"),pyo=o(" (M2M100 model)"),uyo=l(),d1=a("li"),sce=a("strong"),_yo=o("marian"),byo=o(" \u2014 "),sD=a("a"),vyo=o("MarianMTModel"),Fyo=o(" (Marian model)"),Tyo=l(),c1=a("li"),lce=a("strong"),Myo=o("mbart"),Eyo=o(" \u2014 "),lD=a("a"),Cyo=o("MBartForConditionalGeneration"),wyo=o(" (mBART model)"),Ayo=l(),f1=a("li"),ice=a("strong"),yyo=o("mt5"),Lyo=o(" \u2014 "),iD=a("a"),xyo=o("MT5ForConditionalGeneration"),$yo=o(" (mT5 model)"),kyo=l(),m1=a("li"),dce=a("strong"),Syo=o("pegasus"),Ryo=o(" \u2014 "),dD=a("a"),Byo=o("PegasusForConditionalGeneration"),Pyo=o(" (Pegasus model)"),Iyo=l(),g1=a("li"),cce=a("strong"),qyo=o("plbart"),Nyo=o(" \u2014 "),cD=a("a"),jyo=o("PLBartForConditionalGeneration"),Dyo=o(" (PLBart model)"),Gyo=l(),h1=a("li"),fce=a("strong"),Oyo=o("prophetnet"),Vyo=o(" \u2014 "),fD=a("a"),Xyo=o("ProphetNetForConditionalGeneration"),zyo=o(" (ProphetNet model)"),Qyo=l(),p1=a("li"),mce=a("strong"),Wyo=o("t5"),Hyo=o(" \u2014 "),mD=a("a"),Uyo=o("T5ForConditionalGeneration"),Jyo=o(" (T5 model)"),Yyo=l(),u1=a("li"),gce=a("strong"),Kyo=o("tapex"),Zyo=o(" \u2014 "),gD=a("a"),eLo=o("BartForConditionalGeneration"),oLo=o(" (TAPEX model)"),rLo=l(),_1=a("li"),hce=a("strong"),tLo=o("xlm-prophetnet"),aLo=o(" \u2014 "),hD=a("a"),nLo=o("XLMProphetNetForConditionalGeneration"),sLo=o(" (XLMProphetNet model)"),lLo=l(),b1=a("p"),iLo=o("The model is set in evaluation mode by default using "),pce=a("code"),dLo=o("model.eval()"),cLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=a("code"),fLo=o("model.train()"),mLo=l(),F(v1.$$.fragment),xIe=l(),qi=a("h2"),F1=a("a"),_ce=a("span"),F(KA.$$.fragment),gLo=l(),bce=a("span"),hLo=o("AutoModelForSequenceClassification"),$Ie=l(),Ro=a("div"),F(ZA.$$.fragment),pLo=l(),Ni=a("p"),uLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pD=a("a"),_Lo=o("from_pretrained()"),bLo=o(" class method or the "),uD=a("a"),vLo=o("from_config()"),FLo=o(` class
method.`),TLo=l(),ey=a("p"),MLo=o("This class cannot be instantiated directly using "),vce=a("code"),ELo=o("__init__()"),CLo=o(" (throws an error)."),wLo=l(),st=a("div"),F(oy.$$.fragment),ALo=l(),Fce=a("p"),yLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),LLo=l(),ji=a("p"),xLo=o(`Note:
Loading a model from its configuration file does `),Tce=a("strong"),$Lo=o("not"),kLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=a("a"),SLo=o("from_pretrained()"),RLo=o(" to load the model weights."),BLo=l(),F(T1.$$.fragment),PLo=l(),Ze=a("div"),F(ry.$$.fragment),ILo=l(),Mce=a("p"),qLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),NLo=l(),ka=a("p"),jLo=o("The model class to instantiate is selected based on the "),Ece=a("code"),DLo=o("model_type"),GLo=o(` property of the config object (either
passed as an argument or loaded from `),Cce=a("code"),OLo=o("pretrained_model_name_or_path"),VLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=a("code"),XLo=o("pretrained_model_name_or_path"),zLo=o(":"),QLo=l(),q=a("ul"),M1=a("li"),Ace=a("strong"),WLo=o("albert"),HLo=o(" \u2014 "),bD=a("a"),ULo=o("AlbertForSequenceClassification"),JLo=o(" (ALBERT model)"),YLo=l(),E1=a("li"),yce=a("strong"),KLo=o("bart"),ZLo=o(" \u2014 "),vD=a("a"),e8o=o("BartForSequenceClassification"),o8o=o(" (BART model)"),r8o=l(),C1=a("li"),Lce=a("strong"),t8o=o("bert"),a8o=o(" \u2014 "),FD=a("a"),n8o=o("BertForSequenceClassification"),s8o=o(" (BERT model)"),l8o=l(),w1=a("li"),xce=a("strong"),i8o=o("big_bird"),d8o=o(" \u2014 "),TD=a("a"),c8o=o("BigBirdForSequenceClassification"),f8o=o(" (BigBird model)"),m8o=l(),A1=a("li"),$ce=a("strong"),g8o=o("bigbird_pegasus"),h8o=o(" \u2014 "),MD=a("a"),p8o=o("BigBirdPegasusForSequenceClassification"),u8o=o(" (BigBirdPegasus model)"),_8o=l(),y1=a("li"),kce=a("strong"),b8o=o("camembert"),v8o=o(" \u2014 "),ED=a("a"),F8o=o("CamembertForSequenceClassification"),T8o=o(" (CamemBERT model)"),M8o=l(),L1=a("li"),Sce=a("strong"),E8o=o("canine"),C8o=o(" \u2014 "),CD=a("a"),w8o=o("CanineForSequenceClassification"),A8o=o(" (Canine model)"),y8o=l(),x1=a("li"),Rce=a("strong"),L8o=o("convbert"),x8o=o(" \u2014 "),wD=a("a"),$8o=o("ConvBertForSequenceClassification"),k8o=o(" (ConvBERT model)"),S8o=l(),$1=a("li"),Bce=a("strong"),R8o=o("ctrl"),B8o=o(" \u2014 "),AD=a("a"),P8o=o("CTRLForSequenceClassification"),I8o=o(" (CTRL model)"),q8o=l(),k1=a("li"),Pce=a("strong"),N8o=o("data2vec-text"),j8o=o(" \u2014 "),yD=a("a"),D8o=o("Data2VecTextForSequenceClassification"),G8o=o(" (Data2VecText model)"),O8o=l(),S1=a("li"),Ice=a("strong"),V8o=o("deberta"),X8o=o(" \u2014 "),LD=a("a"),z8o=o("DebertaForSequenceClassification"),Q8o=o(" (DeBERTa model)"),W8o=l(),R1=a("li"),qce=a("strong"),H8o=o("deberta-v2"),U8o=o(" \u2014 "),xD=a("a"),J8o=o("DebertaV2ForSequenceClassification"),Y8o=o(" (DeBERTa-v2 model)"),K8o=l(),B1=a("li"),Nce=a("strong"),Z8o=o("distilbert"),exo=o(" \u2014 "),$D=a("a"),oxo=o("DistilBertForSequenceClassification"),rxo=o(" (DistilBERT model)"),txo=l(),P1=a("li"),jce=a("strong"),axo=o("electra"),nxo=o(" \u2014 "),kD=a("a"),sxo=o("ElectraForSequenceClassification"),lxo=o(" (ELECTRA model)"),ixo=l(),I1=a("li"),Dce=a("strong"),dxo=o("flaubert"),cxo=o(" \u2014 "),SD=a("a"),fxo=o("FlaubertForSequenceClassification"),mxo=o(" (FlauBERT model)"),gxo=l(),q1=a("li"),Gce=a("strong"),hxo=o("fnet"),pxo=o(" \u2014 "),RD=a("a"),uxo=o("FNetForSequenceClassification"),_xo=o(" (FNet model)"),bxo=l(),N1=a("li"),Oce=a("strong"),vxo=o("funnel"),Fxo=o(" \u2014 "),BD=a("a"),Txo=o("FunnelForSequenceClassification"),Mxo=o(" (Funnel Transformer model)"),Exo=l(),j1=a("li"),Vce=a("strong"),Cxo=o("gpt2"),wxo=o(" \u2014 "),PD=a("a"),Axo=o("GPT2ForSequenceClassification"),yxo=o(" (OpenAI GPT-2 model)"),Lxo=l(),D1=a("li"),Xce=a("strong"),xxo=o("gpt_neo"),$xo=o(" \u2014 "),ID=a("a"),kxo=o("GPTNeoForSequenceClassification"),Sxo=o(" (GPT Neo model)"),Rxo=l(),G1=a("li"),zce=a("strong"),Bxo=o("gptj"),Pxo=o(" \u2014 "),qD=a("a"),Ixo=o("GPTJForSequenceClassification"),qxo=o(" (GPT-J model)"),Nxo=l(),O1=a("li"),Qce=a("strong"),jxo=o("ibert"),Dxo=o(" \u2014 "),ND=a("a"),Gxo=o("IBertForSequenceClassification"),Oxo=o(" (I-BERT model)"),Vxo=l(),V1=a("li"),Wce=a("strong"),Xxo=o("layoutlm"),zxo=o(" \u2014 "),jD=a("a"),Qxo=o("LayoutLMForSequenceClassification"),Wxo=o(" (LayoutLM model)"),Hxo=l(),X1=a("li"),Hce=a("strong"),Uxo=o("layoutlmv2"),Jxo=o(" \u2014 "),DD=a("a"),Yxo=o("LayoutLMv2ForSequenceClassification"),Kxo=o(" (LayoutLMv2 model)"),Zxo=l(),z1=a("li"),Uce=a("strong"),e9o=o("layoutlmv3"),o9o=o(" \u2014 "),GD=a("a"),r9o=o("LayoutLMv3ForSequenceClassification"),t9o=o(" (LayoutLMv3 model)"),a9o=l(),Q1=a("li"),Jce=a("strong"),n9o=o("led"),s9o=o(" \u2014 "),OD=a("a"),l9o=o("LEDForSequenceClassification"),i9o=o(" (LED model)"),d9o=l(),W1=a("li"),Yce=a("strong"),c9o=o("longformer"),f9o=o(" \u2014 "),VD=a("a"),m9o=o("LongformerForSequenceClassification"),g9o=o(" (Longformer model)"),h9o=l(),H1=a("li"),Kce=a("strong"),p9o=o("mbart"),u9o=o(" \u2014 "),XD=a("a"),_9o=o("MBartForSequenceClassification"),b9o=o(" (mBART model)"),v9o=l(),U1=a("li"),Zce=a("strong"),F9o=o("megatron-bert"),T9o=o(" \u2014 "),zD=a("a"),M9o=o("MegatronBertForSequenceClassification"),E9o=o(" (MegatronBert model)"),C9o=l(),J1=a("li"),efe=a("strong"),w9o=o("mobilebert"),A9o=o(" \u2014 "),QD=a("a"),y9o=o("MobileBertForSequenceClassification"),L9o=o(" (MobileBERT model)"),x9o=l(),Y1=a("li"),ofe=a("strong"),$9o=o("mpnet"),k9o=o(" \u2014 "),WD=a("a"),S9o=o("MPNetForSequenceClassification"),R9o=o(" (MPNet model)"),B9o=l(),K1=a("li"),rfe=a("strong"),P9o=o("nystromformer"),I9o=o(" \u2014 "),HD=a("a"),q9o=o("NystromformerForSequenceClassification"),N9o=o(" (Nystromformer model)"),j9o=l(),Z1=a("li"),tfe=a("strong"),D9o=o("openai-gpt"),G9o=o(" \u2014 "),UD=a("a"),O9o=o("OpenAIGPTForSequenceClassification"),V9o=o(" (OpenAI GPT model)"),X9o=l(),eb=a("li"),afe=a("strong"),z9o=o("perceiver"),Q9o=o(" \u2014 "),JD=a("a"),W9o=o("PerceiverForSequenceClassification"),H9o=o(" (Perceiver model)"),U9o=l(),ob=a("li"),nfe=a("strong"),J9o=o("plbart"),Y9o=o(" \u2014 "),YD=a("a"),K9o=o("PLBartForSequenceClassification"),Z9o=o(" (PLBart model)"),e$o=l(),rb=a("li"),sfe=a("strong"),o$o=o("qdqbert"),r$o=o(" \u2014 "),KD=a("a"),t$o=o("QDQBertForSequenceClassification"),a$o=o(" (QDQBert model)"),n$o=l(),tb=a("li"),lfe=a("strong"),s$o=o("reformer"),l$o=o(" \u2014 "),ZD=a("a"),i$o=o("ReformerForSequenceClassification"),d$o=o(" (Reformer model)"),c$o=l(),ab=a("li"),ife=a("strong"),f$o=o("rembert"),m$o=o(" \u2014 "),eG=a("a"),g$o=o("RemBertForSequenceClassification"),h$o=o(" (RemBERT model)"),p$o=l(),nb=a("li"),dfe=a("strong"),u$o=o("roberta"),_$o=o(" \u2014 "),oG=a("a"),b$o=o("RobertaForSequenceClassification"),v$o=o(" (RoBERTa model)"),F$o=l(),sb=a("li"),cfe=a("strong"),T$o=o("roformer"),M$o=o(" \u2014 "),rG=a("a"),E$o=o("RoFormerForSequenceClassification"),C$o=o(" (RoFormer model)"),w$o=l(),lb=a("li"),ffe=a("strong"),A$o=o("squeezebert"),y$o=o(" \u2014 "),tG=a("a"),L$o=o("SqueezeBertForSequenceClassification"),x$o=o(" (SqueezeBERT model)"),$$o=l(),ib=a("li"),mfe=a("strong"),k$o=o("tapas"),S$o=o(" \u2014 "),aG=a("a"),R$o=o("TapasForSequenceClassification"),B$o=o(" (TAPAS model)"),P$o=l(),db=a("li"),gfe=a("strong"),I$o=o("tapex"),q$o=o(" \u2014 "),nG=a("a"),N$o=o("BartForSequenceClassification"),j$o=o(" (TAPEX model)"),D$o=l(),cb=a("li"),hfe=a("strong"),G$o=o("transfo-xl"),O$o=o(" \u2014 "),sG=a("a"),V$o=o("TransfoXLForSequenceClassification"),X$o=o(" (Transformer-XL model)"),z$o=l(),fb=a("li"),pfe=a("strong"),Q$o=o("xlm"),W$o=o(" \u2014 "),lG=a("a"),H$o=o("XLMForSequenceClassification"),U$o=o(" (XLM model)"),J$o=l(),mb=a("li"),ufe=a("strong"),Y$o=o("xlm-roberta"),K$o=o(" \u2014 "),iG=a("a"),Z$o=o("XLMRobertaForSequenceClassification"),eko=o(" (XLM-RoBERTa model)"),oko=l(),gb=a("li"),_fe=a("strong"),rko=o("xlm-roberta-xl"),tko=o(" \u2014 "),dG=a("a"),ako=o("XLMRobertaXLForSequenceClassification"),nko=o(" (XLM-RoBERTa-XL model)"),sko=l(),hb=a("li"),bfe=a("strong"),lko=o("xlnet"),iko=o(" \u2014 "),cG=a("a"),dko=o("XLNetForSequenceClassification"),cko=o(" (XLNet model)"),fko=l(),pb=a("li"),vfe=a("strong"),mko=o("yoso"),gko=o(" \u2014 "),fG=a("a"),hko=o("YosoForSequenceClassification"),pko=o(" (YOSO model)"),uko=l(),ub=a("p"),_ko=o("The model is set in evaluation mode by default using "),Ffe=a("code"),bko=o("model.eval()"),vko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=a("code"),Fko=o("model.train()"),Tko=l(),F(_b.$$.fragment),kIe=l(),Di=a("h2"),bb=a("a"),Mfe=a("span"),F(ty.$$.fragment),Mko=l(),Efe=a("span"),Eko=o("AutoModelForMultipleChoice"),SIe=l(),Bo=a("div"),F(ay.$$.fragment),Cko=l(),Gi=a("p"),wko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mG=a("a"),Ako=o("from_pretrained()"),yko=o(" class method or the "),gG=a("a"),Lko=o("from_config()"),xko=o(` class
method.`),$ko=l(),ny=a("p"),kko=o("This class cannot be instantiated directly using "),Cfe=a("code"),Sko=o("__init__()"),Rko=o(" (throws an error)."),Bko=l(),lt=a("div"),F(sy.$$.fragment),Pko=l(),wfe=a("p"),Iko=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qko=l(),Oi=a("p"),Nko=o(`Note:
Loading a model from its configuration file does `),Afe=a("strong"),jko=o("not"),Dko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=a("a"),Gko=o("from_pretrained()"),Oko=o(" to load the model weights."),Vko=l(),F(vb.$$.fragment),Xko=l(),eo=a("div"),F(ly.$$.fragment),zko=l(),yfe=a("p"),Qko=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wko=l(),Sa=a("p"),Hko=o("The model class to instantiate is selected based on the "),Lfe=a("code"),Uko=o("model_type"),Jko=o(` property of the config object (either
passed as an argument or loaded from `),xfe=a("code"),Yko=o("pretrained_model_name_or_path"),Kko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=a("code"),Zko=o("pretrained_model_name_or_path"),eSo=o(":"),oSo=l(),Y=a("ul"),Fb=a("li"),kfe=a("strong"),rSo=o("albert"),tSo=o(" \u2014 "),pG=a("a"),aSo=o("AlbertForMultipleChoice"),nSo=o(" (ALBERT model)"),sSo=l(),Tb=a("li"),Sfe=a("strong"),lSo=o("bert"),iSo=o(" \u2014 "),uG=a("a"),dSo=o("BertForMultipleChoice"),cSo=o(" (BERT model)"),fSo=l(),Mb=a("li"),Rfe=a("strong"),mSo=o("big_bird"),gSo=o(" \u2014 "),_G=a("a"),hSo=o("BigBirdForMultipleChoice"),pSo=o(" (BigBird model)"),uSo=l(),Eb=a("li"),Bfe=a("strong"),_So=o("camembert"),bSo=o(" \u2014 "),bG=a("a"),vSo=o("CamembertForMultipleChoice"),FSo=o(" (CamemBERT model)"),TSo=l(),Cb=a("li"),Pfe=a("strong"),MSo=o("canine"),ESo=o(" \u2014 "),vG=a("a"),CSo=o("CanineForMultipleChoice"),wSo=o(" (Canine model)"),ASo=l(),wb=a("li"),Ife=a("strong"),ySo=o("convbert"),LSo=o(" \u2014 "),FG=a("a"),xSo=o("ConvBertForMultipleChoice"),$So=o(" (ConvBERT model)"),kSo=l(),Ab=a("li"),qfe=a("strong"),SSo=o("data2vec-text"),RSo=o(" \u2014 "),TG=a("a"),BSo=o("Data2VecTextForMultipleChoice"),PSo=o(" (Data2VecText model)"),ISo=l(),yb=a("li"),Nfe=a("strong"),qSo=o("deberta-v2"),NSo=o(" \u2014 "),MG=a("a"),jSo=o("DebertaV2ForMultipleChoice"),DSo=o(" (DeBERTa-v2 model)"),GSo=l(),Lb=a("li"),jfe=a("strong"),OSo=o("distilbert"),VSo=o(" \u2014 "),EG=a("a"),XSo=o("DistilBertForMultipleChoice"),zSo=o(" (DistilBERT model)"),QSo=l(),xb=a("li"),Dfe=a("strong"),WSo=o("electra"),HSo=o(" \u2014 "),CG=a("a"),USo=o("ElectraForMultipleChoice"),JSo=o(" (ELECTRA model)"),YSo=l(),$b=a("li"),Gfe=a("strong"),KSo=o("flaubert"),ZSo=o(" \u2014 "),wG=a("a"),eRo=o("FlaubertForMultipleChoice"),oRo=o(" (FlauBERT model)"),rRo=l(),kb=a("li"),Ofe=a("strong"),tRo=o("fnet"),aRo=o(" \u2014 "),AG=a("a"),nRo=o("FNetForMultipleChoice"),sRo=o(" (FNet model)"),lRo=l(),Sb=a("li"),Vfe=a("strong"),iRo=o("funnel"),dRo=o(" \u2014 "),yG=a("a"),cRo=o("FunnelForMultipleChoice"),fRo=o(" (Funnel Transformer model)"),mRo=l(),Rb=a("li"),Xfe=a("strong"),gRo=o("ibert"),hRo=o(" \u2014 "),LG=a("a"),pRo=o("IBertForMultipleChoice"),uRo=o(" (I-BERT model)"),_Ro=l(),Bb=a("li"),zfe=a("strong"),bRo=o("longformer"),vRo=o(" \u2014 "),xG=a("a"),FRo=o("LongformerForMultipleChoice"),TRo=o(" (Longformer model)"),MRo=l(),Pb=a("li"),Qfe=a("strong"),ERo=o("megatron-bert"),CRo=o(" \u2014 "),$G=a("a"),wRo=o("MegatronBertForMultipleChoice"),ARo=o(" (MegatronBert model)"),yRo=l(),Ib=a("li"),Wfe=a("strong"),LRo=o("mobilebert"),xRo=o(" \u2014 "),kG=a("a"),$Ro=o("MobileBertForMultipleChoice"),kRo=o(" (MobileBERT model)"),SRo=l(),qb=a("li"),Hfe=a("strong"),RRo=o("mpnet"),BRo=o(" \u2014 "),SG=a("a"),PRo=o("MPNetForMultipleChoice"),IRo=o(" (MPNet model)"),qRo=l(),Nb=a("li"),Ufe=a("strong"),NRo=o("nystromformer"),jRo=o(" \u2014 "),RG=a("a"),DRo=o("NystromformerForMultipleChoice"),GRo=o(" (Nystromformer model)"),ORo=l(),jb=a("li"),Jfe=a("strong"),VRo=o("qdqbert"),XRo=o(" \u2014 "),BG=a("a"),zRo=o("QDQBertForMultipleChoice"),QRo=o(" (QDQBert model)"),WRo=l(),Db=a("li"),Yfe=a("strong"),HRo=o("rembert"),URo=o(" \u2014 "),PG=a("a"),JRo=o("RemBertForMultipleChoice"),YRo=o(" (RemBERT model)"),KRo=l(),Gb=a("li"),Kfe=a("strong"),ZRo=o("roberta"),eBo=o(" \u2014 "),IG=a("a"),oBo=o("RobertaForMultipleChoice"),rBo=o(" (RoBERTa model)"),tBo=l(),Ob=a("li"),Zfe=a("strong"),aBo=o("roformer"),nBo=o(" \u2014 "),qG=a("a"),sBo=o("RoFormerForMultipleChoice"),lBo=o(" (RoFormer model)"),iBo=l(),Vb=a("li"),eme=a("strong"),dBo=o("squeezebert"),cBo=o(" \u2014 "),NG=a("a"),fBo=o("SqueezeBertForMultipleChoice"),mBo=o(" (SqueezeBERT model)"),gBo=l(),Xb=a("li"),ome=a("strong"),hBo=o("xlm"),pBo=o(" \u2014 "),jG=a("a"),uBo=o("XLMForMultipleChoice"),_Bo=o(" (XLM model)"),bBo=l(),zb=a("li"),rme=a("strong"),vBo=o("xlm-roberta"),FBo=o(" \u2014 "),DG=a("a"),TBo=o("XLMRobertaForMultipleChoice"),MBo=o(" (XLM-RoBERTa model)"),EBo=l(),Qb=a("li"),tme=a("strong"),CBo=o("xlm-roberta-xl"),wBo=o(" \u2014 "),GG=a("a"),ABo=o("XLMRobertaXLForMultipleChoice"),yBo=o(" (XLM-RoBERTa-XL model)"),LBo=l(),Wb=a("li"),ame=a("strong"),xBo=o("xlnet"),$Bo=o(" \u2014 "),OG=a("a"),kBo=o("XLNetForMultipleChoice"),SBo=o(" (XLNet model)"),RBo=l(),Hb=a("li"),nme=a("strong"),BBo=o("yoso"),PBo=o(" \u2014 "),VG=a("a"),IBo=o("YosoForMultipleChoice"),qBo=o(" (YOSO model)"),NBo=l(),Ub=a("p"),jBo=o("The model is set in evaluation mode by default using "),sme=a("code"),DBo=o("model.eval()"),GBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=a("code"),OBo=o("model.train()"),VBo=l(),F(Jb.$$.fragment),RIe=l(),Vi=a("h2"),Yb=a("a"),ime=a("span"),F(iy.$$.fragment),XBo=l(),dme=a("span"),zBo=o("AutoModelForNextSentencePrediction"),BIe=l(),Po=a("div"),F(dy.$$.fragment),QBo=l(),Xi=a("p"),WBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XG=a("a"),HBo=o("from_pretrained()"),UBo=o(" class method or the "),zG=a("a"),JBo=o("from_config()"),YBo=o(` class
method.`),KBo=l(),cy=a("p"),ZBo=o("This class cannot be instantiated directly using "),cme=a("code"),ePo=o("__init__()"),oPo=o(" (throws an error)."),rPo=l(),it=a("div"),F(fy.$$.fragment),tPo=l(),fme=a("p"),aPo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nPo=l(),zi=a("p"),sPo=o(`Note:
Loading a model from its configuration file does `),mme=a("strong"),lPo=o("not"),iPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),dPo=o("from_pretrained()"),cPo=o(" to load the model weights."),fPo=l(),F(Kb.$$.fragment),mPo=l(),oo=a("div"),F(my.$$.fragment),gPo=l(),gme=a("p"),hPo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pPo=l(),Ra=a("p"),uPo=o("The model class to instantiate is selected based on the "),hme=a("code"),_Po=o("model_type"),bPo=o(` property of the config object (either
passed as an argument or loaded from `),pme=a("code"),vPo=o("pretrained_model_name_or_path"),FPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=a("code"),TPo=o("pretrained_model_name_or_path"),MPo=o(":"),EPo=l(),Yr=a("ul"),Zb=a("li"),_me=a("strong"),CPo=o("bert"),wPo=o(" \u2014 "),WG=a("a"),APo=o("BertForNextSentencePrediction"),yPo=o(" (BERT model)"),LPo=l(),e2=a("li"),bme=a("strong"),xPo=o("fnet"),$Po=o(" \u2014 "),HG=a("a"),kPo=o("FNetForNextSentencePrediction"),SPo=o(" (FNet model)"),RPo=l(),o2=a("li"),vme=a("strong"),BPo=o("megatron-bert"),PPo=o(" \u2014 "),UG=a("a"),IPo=o("MegatronBertForNextSentencePrediction"),qPo=o(" (MegatronBert model)"),NPo=l(),r2=a("li"),Fme=a("strong"),jPo=o("mobilebert"),DPo=o(" \u2014 "),JG=a("a"),GPo=o("MobileBertForNextSentencePrediction"),OPo=o(" (MobileBERT model)"),VPo=l(),t2=a("li"),Tme=a("strong"),XPo=o("qdqbert"),zPo=o(" \u2014 "),YG=a("a"),QPo=o("QDQBertForNextSentencePrediction"),WPo=o(" (QDQBert model)"),HPo=l(),a2=a("p"),UPo=o("The model is set in evaluation mode by default using "),Mme=a("code"),JPo=o("model.eval()"),YPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eme=a("code"),KPo=o("model.train()"),ZPo=l(),F(n2.$$.fragment),PIe=l(),Qi=a("h2"),s2=a("a"),Cme=a("span"),F(gy.$$.fragment),eIo=l(),wme=a("span"),oIo=o("AutoModelForTokenClassification"),IIe=l(),Io=a("div"),F(hy.$$.fragment),rIo=l(),Wi=a("p"),tIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KG=a("a"),aIo=o("from_pretrained()"),nIo=o(" class method or the "),ZG=a("a"),sIo=o("from_config()"),lIo=o(` class
method.`),iIo=l(),py=a("p"),dIo=o("This class cannot be instantiated directly using "),Ame=a("code"),cIo=o("__init__()"),fIo=o(" (throws an error)."),mIo=l(),dt=a("div"),F(uy.$$.fragment),gIo=l(),yme=a("p"),hIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pIo=l(),Hi=a("p"),uIo=o(`Note:
Loading a model from its configuration file does `),Lme=a("strong"),_Io=o("not"),bIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),vIo=o("from_pretrained()"),FIo=o(" to load the model weights."),TIo=l(),F(l2.$$.fragment),MIo=l(),ro=a("div"),F(_y.$$.fragment),EIo=l(),xme=a("p"),CIo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wIo=l(),Ba=a("p"),AIo=o("The model class to instantiate is selected based on the "),$me=a("code"),yIo=o("model_type"),LIo=o(` property of the config object (either
passed as an argument or loaded from `),kme=a("code"),xIo=o("pretrained_model_name_or_path"),$Io=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=a("code"),kIo=o("pretrained_model_name_or_path"),SIo=o(":"),RIo=l(),W=a("ul"),i2=a("li"),Rme=a("strong"),BIo=o("albert"),PIo=o(" \u2014 "),oO=a("a"),IIo=o("AlbertForTokenClassification"),qIo=o(" (ALBERT model)"),NIo=l(),d2=a("li"),Bme=a("strong"),jIo=o("bert"),DIo=o(" \u2014 "),rO=a("a"),GIo=o("BertForTokenClassification"),OIo=o(" (BERT model)"),VIo=l(),c2=a("li"),Pme=a("strong"),XIo=o("big_bird"),zIo=o(" \u2014 "),tO=a("a"),QIo=o("BigBirdForTokenClassification"),WIo=o(" (BigBird model)"),HIo=l(),f2=a("li"),Ime=a("strong"),UIo=o("camembert"),JIo=o(" \u2014 "),aO=a("a"),YIo=o("CamembertForTokenClassification"),KIo=o(" (CamemBERT model)"),ZIo=l(),m2=a("li"),qme=a("strong"),eqo=o("canine"),oqo=o(" \u2014 "),nO=a("a"),rqo=o("CanineForTokenClassification"),tqo=o(" (Canine model)"),aqo=l(),g2=a("li"),Nme=a("strong"),nqo=o("convbert"),sqo=o(" \u2014 "),sO=a("a"),lqo=o("ConvBertForTokenClassification"),iqo=o(" (ConvBERT model)"),dqo=l(),h2=a("li"),jme=a("strong"),cqo=o("data2vec-text"),fqo=o(" \u2014 "),lO=a("a"),mqo=o("Data2VecTextForTokenClassification"),gqo=o(" (Data2VecText model)"),hqo=l(),p2=a("li"),Dme=a("strong"),pqo=o("deberta"),uqo=o(" \u2014 "),iO=a("a"),_qo=o("DebertaForTokenClassification"),bqo=o(" (DeBERTa model)"),vqo=l(),u2=a("li"),Gme=a("strong"),Fqo=o("deberta-v2"),Tqo=o(" \u2014 "),dO=a("a"),Mqo=o("DebertaV2ForTokenClassification"),Eqo=o(" (DeBERTa-v2 model)"),Cqo=l(),_2=a("li"),Ome=a("strong"),wqo=o("distilbert"),Aqo=o(" \u2014 "),cO=a("a"),yqo=o("DistilBertForTokenClassification"),Lqo=o(" (DistilBERT model)"),xqo=l(),b2=a("li"),Vme=a("strong"),$qo=o("electra"),kqo=o(" \u2014 "),fO=a("a"),Sqo=o("ElectraForTokenClassification"),Rqo=o(" (ELECTRA model)"),Bqo=l(),v2=a("li"),Xme=a("strong"),Pqo=o("flaubert"),Iqo=o(" \u2014 "),mO=a("a"),qqo=o("FlaubertForTokenClassification"),Nqo=o(" (FlauBERT model)"),jqo=l(),F2=a("li"),zme=a("strong"),Dqo=o("fnet"),Gqo=o(" \u2014 "),gO=a("a"),Oqo=o("FNetForTokenClassification"),Vqo=o(" (FNet model)"),Xqo=l(),T2=a("li"),Qme=a("strong"),zqo=o("funnel"),Qqo=o(" \u2014 "),hO=a("a"),Wqo=o("FunnelForTokenClassification"),Hqo=o(" (Funnel Transformer model)"),Uqo=l(),M2=a("li"),Wme=a("strong"),Jqo=o("gpt2"),Yqo=o(" \u2014 "),pO=a("a"),Kqo=o("GPT2ForTokenClassification"),Zqo=o(" (OpenAI GPT-2 model)"),eNo=l(),E2=a("li"),Hme=a("strong"),oNo=o("ibert"),rNo=o(" \u2014 "),uO=a("a"),tNo=o("IBertForTokenClassification"),aNo=o(" (I-BERT model)"),nNo=l(),C2=a("li"),Ume=a("strong"),sNo=o("layoutlm"),lNo=o(" \u2014 "),_O=a("a"),iNo=o("LayoutLMForTokenClassification"),dNo=o(" (LayoutLM model)"),cNo=l(),w2=a("li"),Jme=a("strong"),fNo=o("layoutlmv2"),mNo=o(" \u2014 "),bO=a("a"),gNo=o("LayoutLMv2ForTokenClassification"),hNo=o(" (LayoutLMv2 model)"),pNo=l(),A2=a("li"),Yme=a("strong"),uNo=o("layoutlmv3"),_No=o(" \u2014 "),vO=a("a"),bNo=o("LayoutLMv3ForTokenClassification"),vNo=o(" (LayoutLMv3 model)"),FNo=l(),y2=a("li"),Kme=a("strong"),TNo=o("longformer"),MNo=o(" \u2014 "),FO=a("a"),ENo=o("LongformerForTokenClassification"),CNo=o(" (Longformer model)"),wNo=l(),L2=a("li"),Zme=a("strong"),ANo=o("megatron-bert"),yNo=o(" \u2014 "),TO=a("a"),LNo=o("MegatronBertForTokenClassification"),xNo=o(" (MegatronBert model)"),$No=l(),x2=a("li"),ege=a("strong"),kNo=o("mobilebert"),SNo=o(" \u2014 "),MO=a("a"),RNo=o("MobileBertForTokenClassification"),BNo=o(" (MobileBERT model)"),PNo=l(),$2=a("li"),oge=a("strong"),INo=o("mpnet"),qNo=o(" \u2014 "),EO=a("a"),NNo=o("MPNetForTokenClassification"),jNo=o(" (MPNet model)"),DNo=l(),k2=a("li"),rge=a("strong"),GNo=o("nystromformer"),ONo=o(" \u2014 "),CO=a("a"),VNo=o("NystromformerForTokenClassification"),XNo=o(" (Nystromformer model)"),zNo=l(),S2=a("li"),tge=a("strong"),QNo=o("qdqbert"),WNo=o(" \u2014 "),wO=a("a"),HNo=o("QDQBertForTokenClassification"),UNo=o(" (QDQBert model)"),JNo=l(),R2=a("li"),age=a("strong"),YNo=o("rembert"),KNo=o(" \u2014 "),AO=a("a"),ZNo=o("RemBertForTokenClassification"),ejo=o(" (RemBERT model)"),ojo=l(),B2=a("li"),nge=a("strong"),rjo=o("roberta"),tjo=o(" \u2014 "),yO=a("a"),ajo=o("RobertaForTokenClassification"),njo=o(" (RoBERTa model)"),sjo=l(),P2=a("li"),sge=a("strong"),ljo=o("roformer"),ijo=o(" \u2014 "),LO=a("a"),djo=o("RoFormerForTokenClassification"),cjo=o(" (RoFormer model)"),fjo=l(),I2=a("li"),lge=a("strong"),mjo=o("squeezebert"),gjo=o(" \u2014 "),xO=a("a"),hjo=o("SqueezeBertForTokenClassification"),pjo=o(" (SqueezeBERT model)"),ujo=l(),q2=a("li"),ige=a("strong"),_jo=o("xlm"),bjo=o(" \u2014 "),$O=a("a"),vjo=o("XLMForTokenClassification"),Fjo=o(" (XLM model)"),Tjo=l(),N2=a("li"),dge=a("strong"),Mjo=o("xlm-roberta"),Ejo=o(" \u2014 "),kO=a("a"),Cjo=o("XLMRobertaForTokenClassification"),wjo=o(" (XLM-RoBERTa model)"),Ajo=l(),j2=a("li"),cge=a("strong"),yjo=o("xlm-roberta-xl"),Ljo=o(" \u2014 "),SO=a("a"),xjo=o("XLMRobertaXLForTokenClassification"),$jo=o(" (XLM-RoBERTa-XL model)"),kjo=l(),D2=a("li"),fge=a("strong"),Sjo=o("xlnet"),Rjo=o(" \u2014 "),RO=a("a"),Bjo=o("XLNetForTokenClassification"),Pjo=o(" (XLNet model)"),Ijo=l(),G2=a("li"),mge=a("strong"),qjo=o("yoso"),Njo=o(" \u2014 "),BO=a("a"),jjo=o("YosoForTokenClassification"),Djo=o(" (YOSO model)"),Gjo=l(),O2=a("p"),Ojo=o("The model is set in evaluation mode by default using "),gge=a("code"),Vjo=o("model.eval()"),Xjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),zjo=o("model.train()"),Qjo=l(),F(V2.$$.fragment),qIe=l(),Ui=a("h2"),X2=a("a"),pge=a("span"),F(by.$$.fragment),Wjo=l(),uge=a("span"),Hjo=o("AutoModelForQuestionAnswering"),NIe=l(),qo=a("div"),F(vy.$$.fragment),Ujo=l(),Ji=a("p"),Jjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PO=a("a"),Yjo=o("from_pretrained()"),Kjo=o(" class method or the "),IO=a("a"),Zjo=o("from_config()"),eDo=o(` class
method.`),oDo=l(),Fy=a("p"),rDo=o("This class cannot be instantiated directly using "),_ge=a("code"),tDo=o("__init__()"),aDo=o(" (throws an error)."),nDo=l(),ct=a("div"),F(Ty.$$.fragment),sDo=l(),bge=a("p"),lDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iDo=l(),Yi=a("p"),dDo=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),cDo=o("not"),fDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=a("a"),mDo=o("from_pretrained()"),gDo=o(" to load the model weights."),hDo=l(),F(z2.$$.fragment),pDo=l(),to=a("div"),F(My.$$.fragment),uDo=l(),Fge=a("p"),_Do=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bDo=l(),Pa=a("p"),vDo=o("The model class to instantiate is selected based on the "),Tge=a("code"),FDo=o("model_type"),TDo=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),MDo=o("pretrained_model_name_or_path"),EDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),CDo=o("pretrained_model_name_or_path"),wDo=o(":"),ADo=l(),O=a("ul"),Q2=a("li"),Cge=a("strong"),yDo=o("albert"),LDo=o(" \u2014 "),NO=a("a"),xDo=o("AlbertForQuestionAnswering"),$Do=o(" (ALBERT model)"),kDo=l(),W2=a("li"),wge=a("strong"),SDo=o("bart"),RDo=o(" \u2014 "),jO=a("a"),BDo=o("BartForQuestionAnswering"),PDo=o(" (BART model)"),IDo=l(),H2=a("li"),Age=a("strong"),qDo=o("bert"),NDo=o(" \u2014 "),DO=a("a"),jDo=o("BertForQuestionAnswering"),DDo=o(" (BERT model)"),GDo=l(),U2=a("li"),yge=a("strong"),ODo=o("big_bird"),VDo=o(" \u2014 "),GO=a("a"),XDo=o("BigBirdForQuestionAnswering"),zDo=o(" (BigBird model)"),QDo=l(),J2=a("li"),Lge=a("strong"),WDo=o("bigbird_pegasus"),HDo=o(" \u2014 "),OO=a("a"),UDo=o("BigBirdPegasusForQuestionAnswering"),JDo=o(" (BigBirdPegasus model)"),YDo=l(),Y2=a("li"),xge=a("strong"),KDo=o("camembert"),ZDo=o(" \u2014 "),VO=a("a"),eGo=o("CamembertForQuestionAnswering"),oGo=o(" (CamemBERT model)"),rGo=l(),K2=a("li"),$ge=a("strong"),tGo=o("canine"),aGo=o(" \u2014 "),XO=a("a"),nGo=o("CanineForQuestionAnswering"),sGo=o(" (Canine model)"),lGo=l(),Z2=a("li"),kge=a("strong"),iGo=o("convbert"),dGo=o(" \u2014 "),zO=a("a"),cGo=o("ConvBertForQuestionAnswering"),fGo=o(" (ConvBERT model)"),mGo=l(),ev=a("li"),Sge=a("strong"),gGo=o("data2vec-text"),hGo=o(" \u2014 "),QO=a("a"),pGo=o("Data2VecTextForQuestionAnswering"),uGo=o(" (Data2VecText model)"),_Go=l(),ov=a("li"),Rge=a("strong"),bGo=o("deberta"),vGo=o(" \u2014 "),WO=a("a"),FGo=o("DebertaForQuestionAnswering"),TGo=o(" (DeBERTa model)"),MGo=l(),rv=a("li"),Bge=a("strong"),EGo=o("deberta-v2"),CGo=o(" \u2014 "),HO=a("a"),wGo=o("DebertaV2ForQuestionAnswering"),AGo=o(" (DeBERTa-v2 model)"),yGo=l(),tv=a("li"),Pge=a("strong"),LGo=o("distilbert"),xGo=o(" \u2014 "),UO=a("a"),$Go=o("DistilBertForQuestionAnswering"),kGo=o(" (DistilBERT model)"),SGo=l(),av=a("li"),Ige=a("strong"),RGo=o("electra"),BGo=o(" \u2014 "),JO=a("a"),PGo=o("ElectraForQuestionAnswering"),IGo=o(" (ELECTRA model)"),qGo=l(),nv=a("li"),qge=a("strong"),NGo=o("flaubert"),jGo=o(" \u2014 "),YO=a("a"),DGo=o("FlaubertForQuestionAnsweringSimple"),GGo=o(" (FlauBERT model)"),OGo=l(),sv=a("li"),Nge=a("strong"),VGo=o("fnet"),XGo=o(" \u2014 "),KO=a("a"),zGo=o("FNetForQuestionAnswering"),QGo=o(" (FNet model)"),WGo=l(),lv=a("li"),jge=a("strong"),HGo=o("funnel"),UGo=o(" \u2014 "),ZO=a("a"),JGo=o("FunnelForQuestionAnswering"),YGo=o(" (Funnel Transformer model)"),KGo=l(),iv=a("li"),Dge=a("strong"),ZGo=o("gptj"),eOo=o(" \u2014 "),eV=a("a"),oOo=o("GPTJForQuestionAnswering"),rOo=o(" (GPT-J model)"),tOo=l(),dv=a("li"),Gge=a("strong"),aOo=o("ibert"),nOo=o(" \u2014 "),oV=a("a"),sOo=o("IBertForQuestionAnswering"),lOo=o(" (I-BERT model)"),iOo=l(),cv=a("li"),Oge=a("strong"),dOo=o("layoutlmv2"),cOo=o(" \u2014 "),rV=a("a"),fOo=o("LayoutLMv2ForQuestionAnswering"),mOo=o(" (LayoutLMv2 model)"),gOo=l(),fv=a("li"),Vge=a("strong"),hOo=o("layoutlmv3"),pOo=o(" \u2014 "),tV=a("a"),uOo=o("LayoutLMv3ForQuestionAnswering"),_Oo=o(" (LayoutLMv3 model)"),bOo=l(),mv=a("li"),Xge=a("strong"),vOo=o("led"),FOo=o(" \u2014 "),aV=a("a"),TOo=o("LEDForQuestionAnswering"),MOo=o(" (LED model)"),EOo=l(),gv=a("li"),zge=a("strong"),COo=o("longformer"),wOo=o(" \u2014 "),nV=a("a"),AOo=o("LongformerForQuestionAnswering"),yOo=o(" (Longformer model)"),LOo=l(),hv=a("li"),Qge=a("strong"),xOo=o("lxmert"),$Oo=o(" \u2014 "),sV=a("a"),kOo=o("LxmertForQuestionAnswering"),SOo=o(" (LXMERT model)"),ROo=l(),pv=a("li"),Wge=a("strong"),BOo=o("mbart"),POo=o(" \u2014 "),lV=a("a"),IOo=o("MBartForQuestionAnswering"),qOo=o(" (mBART model)"),NOo=l(),uv=a("li"),Hge=a("strong"),jOo=o("megatron-bert"),DOo=o(" \u2014 "),iV=a("a"),GOo=o("MegatronBertForQuestionAnswering"),OOo=o(" (MegatronBert model)"),VOo=l(),_v=a("li"),Uge=a("strong"),XOo=o("mobilebert"),zOo=o(" \u2014 "),dV=a("a"),QOo=o("MobileBertForQuestionAnswering"),WOo=o(" (MobileBERT model)"),HOo=l(),bv=a("li"),Jge=a("strong"),UOo=o("mpnet"),JOo=o(" \u2014 "),cV=a("a"),YOo=o("MPNetForQuestionAnswering"),KOo=o(" (MPNet model)"),ZOo=l(),vv=a("li"),Yge=a("strong"),eVo=o("nystromformer"),oVo=o(" \u2014 "),fV=a("a"),rVo=o("NystromformerForQuestionAnswering"),tVo=o(" (Nystromformer model)"),aVo=l(),Fv=a("li"),Kge=a("strong"),nVo=o("qdqbert"),sVo=o(" \u2014 "),mV=a("a"),lVo=o("QDQBertForQuestionAnswering"),iVo=o(" (QDQBert model)"),dVo=l(),Tv=a("li"),Zge=a("strong"),cVo=o("reformer"),fVo=o(" \u2014 "),gV=a("a"),mVo=o("ReformerForQuestionAnswering"),gVo=o(" (Reformer model)"),hVo=l(),Mv=a("li"),ehe=a("strong"),pVo=o("rembert"),uVo=o(" \u2014 "),hV=a("a"),_Vo=o("RemBertForQuestionAnswering"),bVo=o(" (RemBERT model)"),vVo=l(),Ev=a("li"),ohe=a("strong"),FVo=o("roberta"),TVo=o(" \u2014 "),pV=a("a"),MVo=o("RobertaForQuestionAnswering"),EVo=o(" (RoBERTa model)"),CVo=l(),Cv=a("li"),rhe=a("strong"),wVo=o("roformer"),AVo=o(" \u2014 "),uV=a("a"),yVo=o("RoFormerForQuestionAnswering"),LVo=o(" (RoFormer model)"),xVo=l(),wv=a("li"),the=a("strong"),$Vo=o("splinter"),kVo=o(" \u2014 "),_V=a("a"),SVo=o("SplinterForQuestionAnswering"),RVo=o(" (Splinter model)"),BVo=l(),Av=a("li"),ahe=a("strong"),PVo=o("squeezebert"),IVo=o(" \u2014 "),bV=a("a"),qVo=o("SqueezeBertForQuestionAnswering"),NVo=o(" (SqueezeBERT model)"),jVo=l(),yv=a("li"),nhe=a("strong"),DVo=o("xlm"),GVo=o(" \u2014 "),vV=a("a"),OVo=o("XLMForQuestionAnsweringSimple"),VVo=o(" (XLM model)"),XVo=l(),Lv=a("li"),she=a("strong"),zVo=o("xlm-roberta"),QVo=o(" \u2014 "),FV=a("a"),WVo=o("XLMRobertaForQuestionAnswering"),HVo=o(" (XLM-RoBERTa model)"),UVo=l(),xv=a("li"),lhe=a("strong"),JVo=o("xlm-roberta-xl"),YVo=o(" \u2014 "),TV=a("a"),KVo=o("XLMRobertaXLForQuestionAnswering"),ZVo=o(" (XLM-RoBERTa-XL model)"),eXo=l(),$v=a("li"),ihe=a("strong"),oXo=o("xlnet"),rXo=o(" \u2014 "),MV=a("a"),tXo=o("XLNetForQuestionAnsweringSimple"),aXo=o(" (XLNet model)"),nXo=l(),kv=a("li"),dhe=a("strong"),sXo=o("yoso"),lXo=o(" \u2014 "),EV=a("a"),iXo=o("YosoForQuestionAnswering"),dXo=o(" (YOSO model)"),cXo=l(),Sv=a("p"),fXo=o("The model is set in evaluation mode by default using "),che=a("code"),mXo=o("model.eval()"),gXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=a("code"),hXo=o("model.train()"),pXo=l(),F(Rv.$$.fragment),jIe=l(),Ki=a("h2"),Bv=a("a"),mhe=a("span"),F(Ey.$$.fragment),uXo=l(),ghe=a("span"),_Xo=o("AutoModelForTableQuestionAnswering"),DIe=l(),No=a("div"),F(Cy.$$.fragment),bXo=l(),Zi=a("p"),vXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CV=a("a"),FXo=o("from_pretrained()"),TXo=o(" class method or the "),wV=a("a"),MXo=o("from_config()"),EXo=o(` class
method.`),CXo=l(),wy=a("p"),wXo=o("This class cannot be instantiated directly using "),hhe=a("code"),AXo=o("__init__()"),yXo=o(" (throws an error)."),LXo=l(),ft=a("div"),F(Ay.$$.fragment),xXo=l(),phe=a("p"),$Xo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),kXo=l(),ed=a("p"),SXo=o(`Note:
Loading a model from its configuration file does `),uhe=a("strong"),RXo=o("not"),BXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=a("a"),PXo=o("from_pretrained()"),IXo=o(" to load the model weights."),qXo=l(),F(Pv.$$.fragment),NXo=l(),ao=a("div"),F(yy.$$.fragment),jXo=l(),_he=a("p"),DXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),GXo=l(),Ia=a("p"),OXo=o("The model class to instantiate is selected based on the "),bhe=a("code"),VXo=o("model_type"),XXo=o(` property of the config object (either
passed as an argument or loaded from `),vhe=a("code"),zXo=o("pretrained_model_name_or_path"),QXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),WXo=o("pretrained_model_name_or_path"),HXo=o(":"),UXo=l(),The=a("ul"),Iv=a("li"),Mhe=a("strong"),JXo=o("tapas"),YXo=o(" \u2014 "),yV=a("a"),KXo=o("TapasForQuestionAnswering"),ZXo=o(" (TAPAS model)"),ezo=l(),qv=a("p"),ozo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),rzo=o("model.eval()"),tzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),azo=o("model.train()"),nzo=l(),F(Nv.$$.fragment),GIe=l(),od=a("h2"),jv=a("a"),whe=a("span"),F(Ly.$$.fragment),szo=l(),Ahe=a("span"),lzo=o("AutoModelForImageClassification"),OIe=l(),jo=a("div"),F(xy.$$.fragment),izo=l(),rd=a("p"),dzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LV=a("a"),czo=o("from_pretrained()"),fzo=o(" class method or the "),xV=a("a"),mzo=o("from_config()"),gzo=o(` class
method.`),hzo=l(),$y=a("p"),pzo=o("This class cannot be instantiated directly using "),yhe=a("code"),uzo=o("__init__()"),_zo=o(" (throws an error)."),bzo=l(),mt=a("div"),F(ky.$$.fragment),vzo=l(),Lhe=a("p"),Fzo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Tzo=l(),td=a("p"),Mzo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),Ezo=o("not"),Czo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=a("a"),wzo=o("from_pretrained()"),Azo=o(" to load the model weights."),yzo=l(),F(Dv.$$.fragment),Lzo=l(),no=a("div"),F(Sy.$$.fragment),xzo=l(),$he=a("p"),$zo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kzo=l(),qa=a("p"),Szo=o("The model class to instantiate is selected based on the "),khe=a("code"),Rzo=o("model_type"),Bzo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),Pzo=o("pretrained_model_name_or_path"),Izo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),qzo=o("pretrained_model_name_or_path"),Nzo=o(":"),jzo=l(),Fe=a("ul"),Gv=a("li"),Bhe=a("strong"),Dzo=o("beit"),Gzo=o(" \u2014 "),kV=a("a"),Ozo=o("BeitForImageClassification"),Vzo=o(" (BEiT model)"),Xzo=l(),Ov=a("li"),Phe=a("strong"),zzo=o("convnext"),Qzo=o(" \u2014 "),SV=a("a"),Wzo=o("ConvNextForImageClassification"),Hzo=o(" (ConvNext model)"),Uzo=l(),Vv=a("li"),Ihe=a("strong"),Jzo=o("data2vec-vision"),Yzo=o(" \u2014 "),RV=a("a"),Kzo=o("Data2VecVisionForImageClassification"),Zzo=o(" (Data2VecVision model)"),eQo=l(),Bs=a("li"),qhe=a("strong"),oQo=o("deit"),rQo=o(" \u2014 "),BV=a("a"),tQo=o("DeiTForImageClassification"),aQo=o(" or "),PV=a("a"),nQo=o("DeiTForImageClassificationWithTeacher"),sQo=o(" (DeiT model)"),lQo=l(),Xv=a("li"),Nhe=a("strong"),iQo=o("imagegpt"),dQo=o(" \u2014 "),IV=a("a"),cQo=o("ImageGPTForImageClassification"),fQo=o(" (ImageGPT model)"),mQo=l(),gt=a("li"),jhe=a("strong"),gQo=o("perceiver"),hQo=o(" \u2014 "),qV=a("a"),pQo=o("PerceiverForImageClassificationLearned"),uQo=o(" or "),NV=a("a"),_Qo=o("PerceiverForImageClassificationFourier"),bQo=o(" or "),jV=a("a"),vQo=o("PerceiverForImageClassificationConvProcessing"),FQo=o(" (Perceiver model)"),TQo=l(),zv=a("li"),Dhe=a("strong"),MQo=o("poolformer"),EQo=o(" \u2014 "),DV=a("a"),CQo=o("PoolFormerForImageClassification"),wQo=o(" (PoolFormer model)"),AQo=l(),Qv=a("li"),Ghe=a("strong"),yQo=o("regnet"),LQo=o(" \u2014 "),GV=a("a"),xQo=o("RegNetForImageClassification"),$Qo=o(" (RegNet model)"),kQo=l(),Wv=a("li"),Ohe=a("strong"),SQo=o("resnet"),RQo=o(" \u2014 "),OV=a("a"),BQo=o("ResNetForImageClassification"),PQo=o(" (ResNet model)"),IQo=l(),Hv=a("li"),Vhe=a("strong"),qQo=o("segformer"),NQo=o(" \u2014 "),VV=a("a"),jQo=o("SegformerForImageClassification"),DQo=o(" (SegFormer model)"),GQo=l(),Uv=a("li"),Xhe=a("strong"),OQo=o("swin"),VQo=o(" \u2014 "),XV=a("a"),XQo=o("SwinForImageClassification"),zQo=o(" (Swin model)"),QQo=l(),Jv=a("li"),zhe=a("strong"),WQo=o("van"),HQo=o(" \u2014 "),zV=a("a"),UQo=o("VanForImageClassification"),JQo=o(" (VAN model)"),YQo=l(),Yv=a("li"),Qhe=a("strong"),KQo=o("vit"),ZQo=o(" \u2014 "),QV=a("a"),eWo=o("ViTForImageClassification"),oWo=o(" (ViT model)"),rWo=l(),Kv=a("p"),tWo=o("The model is set in evaluation mode by default using "),Whe=a("code"),aWo=o("model.eval()"),nWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hhe=a("code"),sWo=o("model.train()"),lWo=l(),F(Zv.$$.fragment),VIe=l(),ad=a("h2"),eF=a("a"),Uhe=a("span"),F(Ry.$$.fragment),iWo=l(),Jhe=a("span"),dWo=o("AutoModelForVision2Seq"),XIe=l(),Do=a("div"),F(By.$$.fragment),cWo=l(),nd=a("p"),fWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WV=a("a"),mWo=o("from_pretrained()"),gWo=o(" class method or the "),HV=a("a"),hWo=o("from_config()"),pWo=o(` class
method.`),uWo=l(),Py=a("p"),_Wo=o("This class cannot be instantiated directly using "),Yhe=a("code"),bWo=o("__init__()"),vWo=o(" (throws an error)."),FWo=l(),ht=a("div"),F(Iy.$$.fragment),TWo=l(),Khe=a("p"),MWo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),EWo=l(),sd=a("p"),CWo=o(`Note:
Loading a model from its configuration file does `),Zhe=a("strong"),wWo=o("not"),AWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),yWo=o("from_pretrained()"),LWo=o(" to load the model weights."),xWo=l(),F(oF.$$.fragment),$Wo=l(),so=a("div"),F(qy.$$.fragment),kWo=l(),epe=a("p"),SWo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),RWo=l(),Na=a("p"),BWo=o("The model class to instantiate is selected based on the "),ope=a("code"),PWo=o("model_type"),IWo=o(` property of the config object (either
passed as an argument or loaded from `),rpe=a("code"),qWo=o("pretrained_model_name_or_path"),NWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=a("code"),jWo=o("pretrained_model_name_or_path"),DWo=o(":"),GWo=l(),ape=a("ul"),rF=a("li"),npe=a("strong"),OWo=o("vision-encoder-decoder"),VWo=o(" \u2014 "),JV=a("a"),XWo=o("VisionEncoderDecoderModel"),zWo=o(" (Vision Encoder decoder model)"),QWo=l(),tF=a("p"),WWo=o("The model is set in evaluation mode by default using "),spe=a("code"),HWo=o("model.eval()"),UWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=a("code"),JWo=o("model.train()"),YWo=l(),F(aF.$$.fragment),zIe=l(),ld=a("h2"),nF=a("a"),ipe=a("span"),F(Ny.$$.fragment),KWo=l(),dpe=a("span"),ZWo=o("AutoModelForAudioClassification"),QIe=l(),Go=a("div"),F(jy.$$.fragment),eHo=l(),id=a("p"),oHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YV=a("a"),rHo=o("from_pretrained()"),tHo=o(" class method or the "),KV=a("a"),aHo=o("from_config()"),nHo=o(` class
method.`),sHo=l(),Dy=a("p"),lHo=o("This class cannot be instantiated directly using "),cpe=a("code"),iHo=o("__init__()"),dHo=o(" (throws an error)."),cHo=l(),pt=a("div"),F(Gy.$$.fragment),fHo=l(),fpe=a("p"),mHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),gHo=l(),dd=a("p"),hHo=o(`Note:
Loading a model from its configuration file does `),mpe=a("strong"),pHo=o("not"),uHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),_Ho=o("from_pretrained()"),bHo=o(" to load the model weights."),vHo=l(),F(sF.$$.fragment),FHo=l(),lo=a("div"),F(Oy.$$.fragment),THo=l(),gpe=a("p"),MHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),EHo=l(),ja=a("p"),CHo=o("The model class to instantiate is selected based on the "),hpe=a("code"),wHo=o("model_type"),AHo=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),yHo=o("pretrained_model_name_or_path"),LHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=a("code"),xHo=o("pretrained_model_name_or_path"),$Ho=o(":"),kHo=l(),Ne=a("ul"),lF=a("li"),_pe=a("strong"),SHo=o("data2vec-audio"),RHo=o(" \u2014 "),eX=a("a"),BHo=o("Data2VecAudioForSequenceClassification"),PHo=o(" (Data2VecAudio model)"),IHo=l(),iF=a("li"),bpe=a("strong"),qHo=o("hubert"),NHo=o(" \u2014 "),oX=a("a"),jHo=o("HubertForSequenceClassification"),DHo=o(" (Hubert model)"),GHo=l(),dF=a("li"),vpe=a("strong"),OHo=o("sew"),VHo=o(" \u2014 "),rX=a("a"),XHo=o("SEWForSequenceClassification"),zHo=o(" (SEW model)"),QHo=l(),cF=a("li"),Fpe=a("strong"),WHo=o("sew-d"),HHo=o(" \u2014 "),tX=a("a"),UHo=o("SEWDForSequenceClassification"),JHo=o(" (SEW-D model)"),YHo=l(),fF=a("li"),Tpe=a("strong"),KHo=o("unispeech"),ZHo=o(" \u2014 "),aX=a("a"),eUo=o("UniSpeechForSequenceClassification"),oUo=o(" (UniSpeech model)"),rUo=l(),mF=a("li"),Mpe=a("strong"),tUo=o("unispeech-sat"),aUo=o(" \u2014 "),nX=a("a"),nUo=o("UniSpeechSatForSequenceClassification"),sUo=o(" (UniSpeechSat model)"),lUo=l(),gF=a("li"),Epe=a("strong"),iUo=o("wav2vec2"),dUo=o(" \u2014 "),sX=a("a"),cUo=o("Wav2Vec2ForSequenceClassification"),fUo=o(" (Wav2Vec2 model)"),mUo=l(),hF=a("li"),Cpe=a("strong"),gUo=o("wavlm"),hUo=o(" \u2014 "),lX=a("a"),pUo=o("WavLMForSequenceClassification"),uUo=o(" (WavLM model)"),_Uo=l(),pF=a("p"),bUo=o("The model is set in evaluation mode by default using "),wpe=a("code"),vUo=o("model.eval()"),FUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=a("code"),TUo=o("model.train()"),MUo=l(),F(uF.$$.fragment),WIe=l(),cd=a("h2"),_F=a("a"),ype=a("span"),F(Vy.$$.fragment),EUo=l(),Lpe=a("span"),CUo=o("AutoModelForAudioFrameClassification"),HIe=l(),Oo=a("div"),F(Xy.$$.fragment),wUo=l(),fd=a("p"),AUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iX=a("a"),yUo=o("from_pretrained()"),LUo=o(" class method or the "),dX=a("a"),xUo=o("from_config()"),$Uo=o(` class
method.`),kUo=l(),zy=a("p"),SUo=o("This class cannot be instantiated directly using "),xpe=a("code"),RUo=o("__init__()"),BUo=o(" (throws an error)."),PUo=l(),ut=a("div"),F(Qy.$$.fragment),IUo=l(),$pe=a("p"),qUo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),NUo=l(),md=a("p"),jUo=o(`Note:
Loading a model from its configuration file does `),kpe=a("strong"),DUo=o("not"),GUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),OUo=o("from_pretrained()"),VUo=o(" to load the model weights."),XUo=l(),F(bF.$$.fragment),zUo=l(),io=a("div"),F(Wy.$$.fragment),QUo=l(),Spe=a("p"),WUo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),HUo=l(),Da=a("p"),UUo=o("The model class to instantiate is selected based on the "),Rpe=a("code"),JUo=o("model_type"),YUo=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),KUo=o("pretrained_model_name_or_path"),ZUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(":"),rJo=l(),Ga=a("ul"),vF=a("li"),Ipe=a("strong"),tJo=o("data2vec-audio"),aJo=o(" \u2014 "),fX=a("a"),nJo=o("Data2VecAudioForAudioFrameClassification"),sJo=o(" (Data2VecAudio model)"),lJo=l(),FF=a("li"),qpe=a("strong"),iJo=o("unispeech-sat"),dJo=o(" \u2014 "),mX=a("a"),cJo=o("UniSpeechSatForAudioFrameClassification"),fJo=o(" (UniSpeechSat model)"),mJo=l(),TF=a("li"),Npe=a("strong"),gJo=o("wav2vec2"),hJo=o(" \u2014 "),gX=a("a"),pJo=o("Wav2Vec2ForAudioFrameClassification"),uJo=o(" (Wav2Vec2 model)"),_Jo=l(),MF=a("li"),jpe=a("strong"),bJo=o("wavlm"),vJo=o(" \u2014 "),hX=a("a"),FJo=o("WavLMForAudioFrameClassification"),TJo=o(" (WavLM model)"),MJo=l(),EF=a("p"),EJo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),CJo=o("model.eval()"),wJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),AJo=o("model.train()"),yJo=l(),F(CF.$$.fragment),UIe=l(),gd=a("h2"),wF=a("a"),Ope=a("span"),F(Hy.$$.fragment),LJo=l(),Vpe=a("span"),xJo=o("AutoModelForCTC"),JIe=l(),Vo=a("div"),F(Uy.$$.fragment),$Jo=l(),hd=a("p"),kJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pX=a("a"),SJo=o("from_pretrained()"),RJo=o(" class method or the "),uX=a("a"),BJo=o("from_config()"),PJo=o(` class
method.`),IJo=l(),Jy=a("p"),qJo=o("This class cannot be instantiated directly using "),Xpe=a("code"),NJo=o("__init__()"),jJo=o(" (throws an error)."),DJo=l(),_t=a("div"),F(Yy.$$.fragment),GJo=l(),zpe=a("p"),OJo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),VJo=l(),pd=a("p"),XJo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),zJo=o("not"),QJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),WJo=o("from_pretrained()"),HJo=o(" to load the model weights."),UJo=l(),F(AF.$$.fragment),JJo=l(),co=a("div"),F(Ky.$$.fragment),YJo=l(),Wpe=a("p"),KJo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ZJo=l(),Oa=a("p"),eYo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),oYo=o("model_type"),rYo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),tYo=o("pretrained_model_name_or_path"),aYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),nYo=o("pretrained_model_name_or_path"),sYo=o(":"),lYo=l(),je=a("ul"),yF=a("li"),Ype=a("strong"),iYo=o("data2vec-audio"),dYo=o(" \u2014 "),bX=a("a"),cYo=o("Data2VecAudioForCTC"),fYo=o(" (Data2VecAudio model)"),mYo=l(),LF=a("li"),Kpe=a("strong"),gYo=o("hubert"),hYo=o(" \u2014 "),vX=a("a"),pYo=o("HubertForCTC"),uYo=o(" (Hubert model)"),_Yo=l(),xF=a("li"),Zpe=a("strong"),bYo=o("sew"),vYo=o(" \u2014 "),FX=a("a"),FYo=o("SEWForCTC"),TYo=o(" (SEW model)"),MYo=l(),$F=a("li"),eue=a("strong"),EYo=o("sew-d"),CYo=o(" \u2014 "),TX=a("a"),wYo=o("SEWDForCTC"),AYo=o(" (SEW-D model)"),yYo=l(),kF=a("li"),oue=a("strong"),LYo=o("unispeech"),xYo=o(" \u2014 "),MX=a("a"),$Yo=o("UniSpeechForCTC"),kYo=o(" (UniSpeech model)"),SYo=l(),SF=a("li"),rue=a("strong"),RYo=o("unispeech-sat"),BYo=o(" \u2014 "),EX=a("a"),PYo=o("UniSpeechSatForCTC"),IYo=o(" (UniSpeechSat model)"),qYo=l(),RF=a("li"),tue=a("strong"),NYo=o("wav2vec2"),jYo=o(" \u2014 "),CX=a("a"),DYo=o("Wav2Vec2ForCTC"),GYo=o(" (Wav2Vec2 model)"),OYo=l(),BF=a("li"),aue=a("strong"),VYo=o("wavlm"),XYo=o(" \u2014 "),wX=a("a"),zYo=o("WavLMForCTC"),QYo=o(" (WavLM model)"),WYo=l(),PF=a("p"),HYo=o("The model is set in evaluation mode by default using "),nue=a("code"),UYo=o("model.eval()"),JYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=a("code"),YYo=o("model.train()"),KYo=l(),F(IF.$$.fragment),YIe=l(),ud=a("h2"),qF=a("a"),lue=a("span"),F(Zy.$$.fragment),ZYo=l(),iue=a("span"),eKo=o("AutoModelForSpeechSeq2Seq"),KIe=l(),Xo=a("div"),F(eL.$$.fragment),oKo=l(),_d=a("p"),rKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AX=a("a"),tKo=o("from_pretrained()"),aKo=o(" class method or the "),yX=a("a"),nKo=o("from_config()"),sKo=o(` class
method.`),lKo=l(),oL=a("p"),iKo=o("This class cannot be instantiated directly using "),due=a("code"),dKo=o("__init__()"),cKo=o(" (throws an error)."),fKo=l(),bt=a("div"),F(rL.$$.fragment),mKo=l(),cue=a("p"),gKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hKo=l(),bd=a("p"),pKo=o(`Note:
Loading a model from its configuration file does `),fue=a("strong"),uKo=o("not"),_Ko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),bKo=o("from_pretrained()"),vKo=o(" to load the model weights."),FKo=l(),F(NF.$$.fragment),TKo=l(),fo=a("div"),F(tL.$$.fragment),MKo=l(),mue=a("p"),EKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),CKo=l(),Va=a("p"),wKo=o("The model class to instantiate is selected based on the "),gue=a("code"),AKo=o("model_type"),yKo=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),LKo=o("pretrained_model_name_or_path"),xKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),$Ko=o("pretrained_model_name_or_path"),kKo=o(":"),SKo=l(),aL=a("ul"),jF=a("li"),uue=a("strong"),RKo=o("speech-encoder-decoder"),BKo=o(" \u2014 "),xX=a("a"),PKo=o("SpeechEncoderDecoderModel"),IKo=o(" (Speech Encoder decoder model)"),qKo=l(),DF=a("li"),_ue=a("strong"),NKo=o("speech_to_text"),jKo=o(" \u2014 "),$X=a("a"),DKo=o("Speech2TextForConditionalGeneration"),GKo=o(" (Speech2Text model)"),OKo=l(),GF=a("p"),VKo=o("The model is set in evaluation mode by default using "),bue=a("code"),XKo=o("model.eval()"),zKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=a("code"),QKo=o("model.train()"),WKo=l(),F(OF.$$.fragment),ZIe=l(),vd=a("h2"),VF=a("a"),Fue=a("span"),F(nL.$$.fragment),HKo=l(),Tue=a("span"),UKo=o("AutoModelForAudioXVector"),eqe=l(),zo=a("div"),F(sL.$$.fragment),JKo=l(),Fd=a("p"),YKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kX=a("a"),KKo=o("from_pretrained()"),ZKo=o(" class method or the "),SX=a("a"),eZo=o("from_config()"),oZo=o(` class
method.`),rZo=l(),lL=a("p"),tZo=o("This class cannot be instantiated directly using "),Mue=a("code"),aZo=o("__init__()"),nZo=o(" (throws an error)."),sZo=l(),vt=a("div"),F(iL.$$.fragment),lZo=l(),Eue=a("p"),iZo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dZo=l(),Td=a("p"),cZo=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),fZo=o("not"),mZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),gZo=o("from_pretrained()"),hZo=o(" to load the model weights."),pZo=l(),F(XF.$$.fragment),uZo=l(),mo=a("div"),F(dL.$$.fragment),_Zo=l(),wue=a("p"),bZo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),vZo=l(),Xa=a("p"),FZo=o("The model class to instantiate is selected based on the "),Aue=a("code"),TZo=o("model_type"),MZo=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),EZo=o("pretrained_model_name_or_path"),CZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),wZo=o("pretrained_model_name_or_path"),AZo=o(":"),yZo=l(),za=a("ul"),zF=a("li"),xue=a("strong"),LZo=o("data2vec-audio"),xZo=o(" \u2014 "),BX=a("a"),$Zo=o("Data2VecAudioForXVector"),kZo=o(" (Data2VecAudio model)"),SZo=l(),QF=a("li"),$ue=a("strong"),RZo=o("unispeech-sat"),BZo=o(" \u2014 "),PX=a("a"),PZo=o("UniSpeechSatForXVector"),IZo=o(" (UniSpeechSat model)"),qZo=l(),WF=a("li"),kue=a("strong"),NZo=o("wav2vec2"),jZo=o(" \u2014 "),IX=a("a"),DZo=o("Wav2Vec2ForXVector"),GZo=o(" (Wav2Vec2 model)"),OZo=l(),HF=a("li"),Sue=a("strong"),VZo=o("wavlm"),XZo=o(" \u2014 "),qX=a("a"),zZo=o("WavLMForXVector"),QZo=o(" (WavLM model)"),WZo=l(),UF=a("p"),HZo=o("The model is set in evaluation mode by default using "),Rue=a("code"),UZo=o("model.eval()"),JZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=a("code"),YZo=o("model.train()"),KZo=l(),F(JF.$$.fragment),oqe=l(),Md=a("h2"),YF=a("a"),Pue=a("span"),F(cL.$$.fragment),ZZo=l(),Iue=a("span"),eer=o("AutoModelForMaskedImageModeling"),rqe=l(),Qo=a("div"),F(fL.$$.fragment),oer=l(),Ed=a("p"),rer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),NX=a("a"),ter=o("from_pretrained()"),aer=o(" class method or the "),jX=a("a"),ner=o("from_config()"),ser=o(` class
method.`),ler=l(),mL=a("p"),ier=o("This class cannot be instantiated directly using "),que=a("code"),der=o("__init__()"),cer=o(" (throws an error)."),fer=l(),Ft=a("div"),F(gL.$$.fragment),mer=l(),Nue=a("p"),ger=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),her=l(),Cd=a("p"),per=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),uer=o("not"),_er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),ber=o("from_pretrained()"),ver=o(" to load the model weights."),Fer=l(),F(KF.$$.fragment),Ter=l(),go=a("div"),F(hL.$$.fragment),Mer=l(),Due=a("p"),Eer=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Cer=l(),Qa=a("p"),wer=o("The model class to instantiate is selected based on the "),Gue=a("code"),Aer=o("model_type"),yer=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),Ler=o("pretrained_model_name_or_path"),xer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),$er=o("pretrained_model_name_or_path"),ker=o(":"),Ser=l(),wd=a("ul"),ZF=a("li"),Xue=a("strong"),Rer=o("deit"),Ber=o(" \u2014 "),GX=a("a"),Per=o("DeiTForMaskedImageModeling"),Ier=o(" (DeiT model)"),qer=l(),e6=a("li"),zue=a("strong"),Ner=o("swin"),jer=o(" \u2014 "),OX=a("a"),Der=o("SwinForMaskedImageModeling"),Ger=o(" (Swin model)"),Oer=l(),o6=a("li"),Que=a("strong"),Ver=o("vit"),Xer=o(" \u2014 "),VX=a("a"),zer=o("ViTForMaskedImageModeling"),Qer=o(" (ViT model)"),Wer=l(),r6=a("p"),Her=o("The model is set in evaluation mode by default using "),Wue=a("code"),Uer=o("model.eval()"),Jer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=a("code"),Yer=o("model.train()"),Ker=l(),F(t6.$$.fragment),tqe=l(),Ad=a("h2"),a6=a("a"),Uue=a("span"),F(pL.$$.fragment),Zer=l(),Jue=a("span"),eor=o("AutoModelForObjectDetection"),aqe=l(),Wo=a("div"),F(uL.$$.fragment),oor=l(),yd=a("p"),ror=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XX=a("a"),tor=o("from_pretrained()"),aor=o(" class method or the "),zX=a("a"),nor=o("from_config()"),sor=o(` class
method.`),lor=l(),_L=a("p"),ior=o("This class cannot be instantiated directly using "),Yue=a("code"),dor=o("__init__()"),cor=o(" (throws an error)."),mor=l(),Tt=a("div"),F(bL.$$.fragment),gor=l(),Kue=a("p"),hor=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),por=l(),Ld=a("p"),uor=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),_or=o("not"),bor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),vor=o("from_pretrained()"),For=o(" to load the model weights."),Tor=l(),F(n6.$$.fragment),Mor=l(),ho=a("div"),F(vL.$$.fragment),Eor=l(),e_e=a("p"),Cor=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),wor=l(),Wa=a("p"),Aor=o("The model class to instantiate is selected based on the "),o_e=a("code"),yor=o("model_type"),Lor=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),xor=o("pretrained_model_name_or_path"),$or=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),kor=o("pretrained_model_name_or_path"),Sor=o(":"),Ror=l(),FL=a("ul"),s6=a("li"),a_e=a("strong"),Bor=o("detr"),Por=o(" \u2014 "),WX=a("a"),Ior=o("DetrForObjectDetection"),qor=o(" (DETR model)"),Nor=l(),l6=a("li"),n_e=a("strong"),jor=o("yolos"),Dor=o(" \u2014 "),HX=a("a"),Gor=o("YolosForObjectDetection"),Oor=o(" (YOLOS model)"),Vor=l(),i6=a("p"),Xor=o("The model is set in evaluation mode by default using "),s_e=a("code"),zor=o("model.eval()"),Qor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=a("code"),Wor=o("model.train()"),Hor=l(),F(d6.$$.fragment),nqe=l(),xd=a("h2"),c6=a("a"),i_e=a("span"),F(TL.$$.fragment),Uor=l(),d_e=a("span"),Jor=o("AutoModelForImageSegmentation"),sqe=l(),Ho=a("div"),F(ML.$$.fragment),Yor=l(),$d=a("p"),Kor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UX=a("a"),Zor=o("from_pretrained()"),err=o(" class method or the "),JX=a("a"),orr=o("from_config()"),rrr=o(` class
method.`),trr=l(),EL=a("p"),arr=o("This class cannot be instantiated directly using "),c_e=a("code"),nrr=o("__init__()"),srr=o(" (throws an error)."),lrr=l(),Mt=a("div"),F(CL.$$.fragment),irr=l(),f_e=a("p"),drr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),crr=l(),kd=a("p"),frr=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),mrr=o("not"),grr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),hrr=o("from_pretrained()"),prr=o(" to load the model weights."),urr=l(),F(f6.$$.fragment),_rr=l(),po=a("div"),F(wL.$$.fragment),brr=l(),g_e=a("p"),vrr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Frr=l(),Ha=a("p"),Trr=o("The model class to instantiate is selected based on the "),h_e=a("code"),Mrr=o("model_type"),Err=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),Crr=o("pretrained_model_name_or_path"),wrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),Arr=o("pretrained_model_name_or_path"),yrr=o(":"),Lrr=l(),__e=a("ul"),m6=a("li"),b_e=a("strong"),xrr=o("detr"),$rr=o(" \u2014 "),KX=a("a"),krr=o("DetrForSegmentation"),Srr=o(" (DETR model)"),Rrr=l(),g6=a("p"),Brr=o("The model is set in evaluation mode by default using "),v_e=a("code"),Prr=o("model.eval()"),Irr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=a("code"),qrr=o("model.train()"),Nrr=l(),F(h6.$$.fragment),lqe=l(),Sd=a("h2"),p6=a("a"),T_e=a("span"),F(AL.$$.fragment),jrr=l(),M_e=a("span"),Drr=o("AutoModelForSemanticSegmentation"),iqe=l(),Uo=a("div"),F(yL.$$.fragment),Grr=l(),Rd=a("p"),Orr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZX=a("a"),Vrr=o("from_pretrained()"),Xrr=o(" class method or the "),ez=a("a"),zrr=o("from_config()"),Qrr=o(` class
method.`),Wrr=l(),LL=a("p"),Hrr=o("This class cannot be instantiated directly using "),E_e=a("code"),Urr=o("__init__()"),Jrr=o(" (throws an error)."),Yrr=l(),Et=a("div"),F(xL.$$.fragment),Krr=l(),C_e=a("p"),Zrr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),etr=l(),Bd=a("p"),otr=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),rtr=o("not"),ttr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),atr=o("from_pretrained()"),ntr=o(" to load the model weights."),str=l(),F(u6.$$.fragment),ltr=l(),uo=a("div"),F($L.$$.fragment),itr=l(),A_e=a("p"),dtr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ctr=l(),Ua=a("p"),ftr=o("The model class to instantiate is selected based on the "),y_e=a("code"),mtr=o("model_type"),gtr=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),htr=o("pretrained_model_name_or_path"),ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),utr=o("pretrained_model_name_or_path"),_tr=o(":"),btr=l(),Ja=a("ul"),_6=a("li"),$_e=a("strong"),vtr=o("beit"),Ftr=o(" \u2014 "),rz=a("a"),Ttr=o("BeitForSemanticSegmentation"),Mtr=o(" (BEiT model)"),Etr=l(),b6=a("li"),k_e=a("strong"),Ctr=o("data2vec-vision"),wtr=o(" \u2014 "),tz=a("a"),Atr=o("Data2VecVisionForSemanticSegmentation"),ytr=o(" (Data2VecVision model)"),Ltr=l(),v6=a("li"),S_e=a("strong"),xtr=o("dpt"),$tr=o(" \u2014 "),az=a("a"),ktr=o("DPTForSemanticSegmentation"),Str=o(" (DPT model)"),Rtr=l(),F6=a("li"),R_e=a("strong"),Btr=o("segformer"),Ptr=o(" \u2014 "),nz=a("a"),Itr=o("SegformerForSemanticSegmentation"),qtr=o(" (SegFormer model)"),Ntr=l(),T6=a("p"),jtr=o("The model is set in evaluation mode by default using "),B_e=a("code"),Dtr=o("model.eval()"),Gtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),Otr=o("model.train()"),Vtr=l(),F(M6.$$.fragment),dqe=l(),Pd=a("h2"),E6=a("a"),I_e=a("span"),F(kL.$$.fragment),Xtr=l(),q_e=a("span"),ztr=o("AutoModelForInstanceSegmentation"),cqe=l(),Jo=a("div"),F(SL.$$.fragment),Qtr=l(),Id=a("p"),Wtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),sz=a("a"),Htr=o("from_pretrained()"),Utr=o(" class method or the "),lz=a("a"),Jtr=o("from_config()"),Ytr=o(` class
method.`),Ktr=l(),RL=a("p"),Ztr=o("This class cannot be instantiated directly using "),N_e=a("code"),ear=o("__init__()"),oar=o(" (throws an error)."),rar=l(),Ct=a("div"),F(BL.$$.fragment),tar=l(),j_e=a("p"),aar=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),nar=l(),qd=a("p"),sar=o(`Note:
Loading a model from its configuration file does `),D_e=a("strong"),lar=o("not"),iar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=a("a"),dar=o("from_pretrained()"),car=o(" to load the model weights."),far=l(),F(C6.$$.fragment),mar=l(),_o=a("div"),F(PL.$$.fragment),gar=l(),G_e=a("p"),har=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),par=l(),Ya=a("p"),uar=o("The model class to instantiate is selected based on the "),O_e=a("code"),_ar=o("model_type"),bar=o(` property of the config object (either
passed as an argument or loaded from `),V_e=a("code"),Far=o("pretrained_model_name_or_path"),Tar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(":"),Car=l(),z_e=a("ul"),w6=a("li"),Q_e=a("strong"),war=o("maskformer"),Aar=o(" \u2014 "),dz=a("a"),yar=o("MaskFormerForInstanceSegmentation"),Lar=o(" (MaskFormer model)"),xar=l(),A6=a("p"),$ar=o("The model is set in evaluation mode by default using "),W_e=a("code"),kar=o("model.eval()"),Sar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=a("code"),Rar=o("model.train()"),Bar=l(),F(y6.$$.fragment),fqe=l(),Nd=a("h2"),L6=a("a"),U_e=a("span"),F(IL.$$.fragment),Par=l(),J_e=a("span"),Iar=o("TFAutoModel"),mqe=l(),Yo=a("div"),F(qL.$$.fragment),qar=l(),jd=a("p"),Nar=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cz=a("a"),jar=o("from_pretrained()"),Dar=o(" class method or the "),fz=a("a"),Gar=o("from_config()"),Oar=o(` class
method.`),Var=l(),NL=a("p"),Xar=o("This class cannot be instantiated directly using "),Y_e=a("code"),zar=o("__init__()"),Qar=o(" (throws an error)."),War=l(),wt=a("div"),F(jL.$$.fragment),Har=l(),K_e=a("p"),Uar=o("Instantiates one of the base model classes of the library from a configuration."),Jar=l(),Dd=a("p"),Yar=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),Kar=o("not"),Zar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),enr=o("from_pretrained()"),onr=o(" to load the model weights."),rnr=l(),F(x6.$$.fragment),tnr=l(),wr=a("div"),F(DL.$$.fragment),anr=l(),e0e=a("p"),nnr=o("Instantiate one of the base model classes of the library from a pretrained model."),snr=l(),Ka=a("p"),lnr=o("The model class to instantiate is selected based on the "),o0e=a("code"),inr=o("model_type"),dnr=o(` property of the config object (either
passed as an argument or loaded from `),r0e=a("code"),cnr=o("pretrained_model_name_or_path"),fnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=a("code"),mnr=o("pretrained_model_name_or_path"),gnr=o(":"),hnr=l(),j=a("ul"),$6=a("li"),a0e=a("strong"),pnr=o("albert"),unr=o(" \u2014 "),gz=a("a"),_nr=o("TFAlbertModel"),bnr=o(" (ALBERT model)"),vnr=l(),k6=a("li"),n0e=a("strong"),Fnr=o("bart"),Tnr=o(" \u2014 "),hz=a("a"),Mnr=o("TFBartModel"),Enr=o(" (BART model)"),Cnr=l(),S6=a("li"),s0e=a("strong"),wnr=o("bert"),Anr=o(" \u2014 "),pz=a("a"),ynr=o("TFBertModel"),Lnr=o(" (BERT model)"),xnr=l(),R6=a("li"),l0e=a("strong"),$nr=o("blenderbot"),knr=o(" \u2014 "),uz=a("a"),Snr=o("TFBlenderbotModel"),Rnr=o(" (Blenderbot model)"),Bnr=l(),B6=a("li"),i0e=a("strong"),Pnr=o("blenderbot-small"),Inr=o(" \u2014 "),_z=a("a"),qnr=o("TFBlenderbotSmallModel"),Nnr=o(" (BlenderbotSmall model)"),jnr=l(),P6=a("li"),d0e=a("strong"),Dnr=o("camembert"),Gnr=o(" \u2014 "),bz=a("a"),Onr=o("TFCamembertModel"),Vnr=o(" (CamemBERT model)"),Xnr=l(),I6=a("li"),c0e=a("strong"),znr=o("clip"),Qnr=o(" \u2014 "),vz=a("a"),Wnr=o("TFCLIPModel"),Hnr=o(" (CLIP model)"),Unr=l(),q6=a("li"),f0e=a("strong"),Jnr=o("convbert"),Ynr=o(" \u2014 "),Fz=a("a"),Knr=o("TFConvBertModel"),Znr=o(" (ConvBERT model)"),esr=l(),N6=a("li"),m0e=a("strong"),osr=o("convnext"),rsr=o(" \u2014 "),Tz=a("a"),tsr=o("TFConvNextModel"),asr=o(" (ConvNext model)"),nsr=l(),j6=a("li"),g0e=a("strong"),ssr=o("ctrl"),lsr=o(" \u2014 "),Mz=a("a"),isr=o("TFCTRLModel"),dsr=o(" (CTRL model)"),csr=l(),D6=a("li"),h0e=a("strong"),fsr=o("data2vec-vision"),msr=o(" \u2014 "),Ez=a("a"),gsr=o("TFData2VecVisionModel"),hsr=o(" (Data2VecVision model)"),psr=l(),G6=a("li"),p0e=a("strong"),usr=o("deberta"),_sr=o(" \u2014 "),Cz=a("a"),bsr=o("TFDebertaModel"),vsr=o(" (DeBERTa model)"),Fsr=l(),O6=a("li"),u0e=a("strong"),Tsr=o("deberta-v2"),Msr=o(" \u2014 "),wz=a("a"),Esr=o("TFDebertaV2Model"),Csr=o(" (DeBERTa-v2 model)"),wsr=l(),V6=a("li"),_0e=a("strong"),Asr=o("distilbert"),ysr=o(" \u2014 "),Az=a("a"),Lsr=o("TFDistilBertModel"),xsr=o(" (DistilBERT model)"),$sr=l(),X6=a("li"),b0e=a("strong"),ksr=o("dpr"),Ssr=o(" \u2014 "),yz=a("a"),Rsr=o("TFDPRQuestionEncoder"),Bsr=o(" (DPR model)"),Psr=l(),z6=a("li"),v0e=a("strong"),Isr=o("electra"),qsr=o(" \u2014 "),Lz=a("a"),Nsr=o("TFElectraModel"),jsr=o(" (ELECTRA model)"),Dsr=l(),Q6=a("li"),F0e=a("strong"),Gsr=o("flaubert"),Osr=o(" \u2014 "),xz=a("a"),Vsr=o("TFFlaubertModel"),Xsr=o(" (FlauBERT model)"),zsr=l(),Ps=a("li"),T0e=a("strong"),Qsr=o("funnel"),Wsr=o(" \u2014 "),$z=a("a"),Hsr=o("TFFunnelModel"),Usr=o(" or "),kz=a("a"),Jsr=o("TFFunnelBaseModel"),Ysr=o(" (Funnel Transformer model)"),Ksr=l(),W6=a("li"),M0e=a("strong"),Zsr=o("gpt2"),elr=o(" \u2014 "),Sz=a("a"),olr=o("TFGPT2Model"),rlr=o(" (OpenAI GPT-2 model)"),tlr=l(),H6=a("li"),E0e=a("strong"),alr=o("gptj"),nlr=o(" \u2014 "),Rz=a("a"),slr=o("TFGPTJModel"),llr=o(" (GPT-J model)"),ilr=l(),U6=a("li"),C0e=a("strong"),dlr=o("hubert"),clr=o(" \u2014 "),Bz=a("a"),flr=o("TFHubertModel"),mlr=o(" (Hubert model)"),glr=l(),J6=a("li"),w0e=a("strong"),hlr=o("layoutlm"),plr=o(" \u2014 "),Pz=a("a"),ulr=o("TFLayoutLMModel"),_lr=o(" (LayoutLM model)"),blr=l(),Y6=a("li"),A0e=a("strong"),vlr=o("led"),Flr=o(" \u2014 "),Iz=a("a"),Tlr=o("TFLEDModel"),Mlr=o(" (LED model)"),Elr=l(),K6=a("li"),y0e=a("strong"),Clr=o("longformer"),wlr=o(" \u2014 "),qz=a("a"),Alr=o("TFLongformerModel"),ylr=o(" (Longformer model)"),Llr=l(),Z6=a("li"),L0e=a("strong"),xlr=o("lxmert"),$lr=o(" \u2014 "),Nz=a("a"),klr=o("TFLxmertModel"),Slr=o(" (LXMERT model)"),Rlr=l(),eT=a("li"),x0e=a("strong"),Blr=o("marian"),Plr=o(" \u2014 "),jz=a("a"),Ilr=o("TFMarianModel"),qlr=o(" (Marian model)"),Nlr=l(),oT=a("li"),$0e=a("strong"),jlr=o("mbart"),Dlr=o(" \u2014 "),Dz=a("a"),Glr=o("TFMBartModel"),Olr=o(" (mBART model)"),Vlr=l(),rT=a("li"),k0e=a("strong"),Xlr=o("mobilebert"),zlr=o(" \u2014 "),Gz=a("a"),Qlr=o("TFMobileBertModel"),Wlr=o(" (MobileBERT model)"),Hlr=l(),tT=a("li"),S0e=a("strong"),Ulr=o("mpnet"),Jlr=o(" \u2014 "),Oz=a("a"),Ylr=o("TFMPNetModel"),Klr=o(" (MPNet model)"),Zlr=l(),aT=a("li"),R0e=a("strong"),eir=o("mt5"),oir=o(" \u2014 "),Vz=a("a"),rir=o("TFMT5Model"),tir=o(" (mT5 model)"),air=l(),nT=a("li"),B0e=a("strong"),nir=o("openai-gpt"),sir=o(" \u2014 "),Xz=a("a"),lir=o("TFOpenAIGPTModel"),iir=o(" (OpenAI GPT model)"),dir=l(),sT=a("li"),P0e=a("strong"),cir=o("pegasus"),fir=o(" \u2014 "),zz=a("a"),mir=o("TFPegasusModel"),gir=o(" (Pegasus model)"),hir=l(),lT=a("li"),I0e=a("strong"),pir=o("rembert"),uir=o(" \u2014 "),Qz=a("a"),_ir=o("TFRemBertModel"),bir=o(" (RemBERT model)"),vir=l(),iT=a("li"),q0e=a("strong"),Fir=o("roberta"),Tir=o(" \u2014 "),Wz=a("a"),Mir=o("TFRobertaModel"),Eir=o(" (RoBERTa model)"),Cir=l(),dT=a("li"),N0e=a("strong"),wir=o("roformer"),Air=o(" \u2014 "),Hz=a("a"),yir=o("TFRoFormerModel"),Lir=o(" (RoFormer model)"),xir=l(),cT=a("li"),j0e=a("strong"),$ir=o("speech_to_text"),kir=o(" \u2014 "),Uz=a("a"),Sir=o("TFSpeech2TextModel"),Rir=o(" (Speech2Text model)"),Bir=l(),fT=a("li"),D0e=a("strong"),Pir=o("t5"),Iir=o(" \u2014 "),Jz=a("a"),qir=o("TFT5Model"),Nir=o(" (T5 model)"),jir=l(),mT=a("li"),G0e=a("strong"),Dir=o("tapas"),Gir=o(" \u2014 "),Yz=a("a"),Oir=o("TFTapasModel"),Vir=o(" (TAPAS model)"),Xir=l(),gT=a("li"),O0e=a("strong"),zir=o("transfo-xl"),Qir=o(" \u2014 "),Kz=a("a"),Wir=o("TFTransfoXLModel"),Hir=o(" (Transformer-XL model)"),Uir=l(),hT=a("li"),V0e=a("strong"),Jir=o("vit"),Yir=o(" \u2014 "),Zz=a("a"),Kir=o("TFViTModel"),Zir=o(" (ViT model)"),edr=l(),pT=a("li"),X0e=a("strong"),odr=o("vit_mae"),rdr=o(" \u2014 "),eQ=a("a"),tdr=o("TFViTMAEModel"),adr=o(" (ViTMAE model)"),ndr=l(),uT=a("li"),z0e=a("strong"),sdr=o("wav2vec2"),ldr=o(" \u2014 "),oQ=a("a"),idr=o("TFWav2Vec2Model"),ddr=o(" (Wav2Vec2 model)"),cdr=l(),_T=a("li"),Q0e=a("strong"),fdr=o("xlm"),mdr=o(" \u2014 "),rQ=a("a"),gdr=o("TFXLMModel"),hdr=o(" (XLM model)"),pdr=l(),bT=a("li"),W0e=a("strong"),udr=o("xlm-roberta"),_dr=o(" \u2014 "),tQ=a("a"),bdr=o("TFXLMRobertaModel"),vdr=o(" (XLM-RoBERTa model)"),Fdr=l(),vT=a("li"),H0e=a("strong"),Tdr=o("xlnet"),Mdr=o(" \u2014 "),aQ=a("a"),Edr=o("TFXLNetModel"),Cdr=o(" (XLNet model)"),wdr=l(),F(FT.$$.fragment),gqe=l(),Gd=a("h2"),TT=a("a"),U0e=a("span"),F(GL.$$.fragment),Adr=l(),J0e=a("span"),ydr=o("TFAutoModelForPreTraining"),hqe=l(),Ko=a("div"),F(OL.$$.fragment),Ldr=l(),Od=a("p"),xdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nQ=a("a"),$dr=o("from_pretrained()"),kdr=o(" class method or the "),sQ=a("a"),Sdr=o("from_config()"),Rdr=o(` class
method.`),Bdr=l(),VL=a("p"),Pdr=o("This class cannot be instantiated directly using "),Y0e=a("code"),Idr=o("__init__()"),qdr=o(" (throws an error)."),Ndr=l(),At=a("div"),F(XL.$$.fragment),jdr=l(),K0e=a("p"),Ddr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gdr=l(),Vd=a("p"),Odr=o(`Note:
Loading a model from its configuration file does `),Z0e=a("strong"),Vdr=o("not"),Xdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),zdr=o("from_pretrained()"),Qdr=o(" to load the model weights."),Wdr=l(),F(MT.$$.fragment),Hdr=l(),Ar=a("div"),F(zL.$$.fragment),Udr=l(),e1e=a("p"),Jdr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ydr=l(),Za=a("p"),Kdr=o("The model class to instantiate is selected based on the "),o1e=a("code"),Zdr=o("model_type"),ecr=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),ocr=o("pretrained_model_name_or_path"),rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(":"),ncr=l(),se=a("ul"),ET=a("li"),a1e=a("strong"),scr=o("albert"),lcr=o(" \u2014 "),iQ=a("a"),icr=o("TFAlbertForPreTraining"),dcr=o(" (ALBERT model)"),ccr=l(),CT=a("li"),n1e=a("strong"),fcr=o("bart"),mcr=o(" \u2014 "),dQ=a("a"),gcr=o("TFBartForConditionalGeneration"),hcr=o(" (BART model)"),pcr=l(),wT=a("li"),s1e=a("strong"),ucr=o("bert"),_cr=o(" \u2014 "),cQ=a("a"),bcr=o("TFBertForPreTraining"),vcr=o(" (BERT model)"),Fcr=l(),AT=a("li"),l1e=a("strong"),Tcr=o("camembert"),Mcr=o(" \u2014 "),fQ=a("a"),Ecr=o("TFCamembertForMaskedLM"),Ccr=o(" (CamemBERT model)"),wcr=l(),yT=a("li"),i1e=a("strong"),Acr=o("ctrl"),ycr=o(" \u2014 "),mQ=a("a"),Lcr=o("TFCTRLLMHeadModel"),xcr=o(" (CTRL model)"),$cr=l(),LT=a("li"),d1e=a("strong"),kcr=o("distilbert"),Scr=o(" \u2014 "),gQ=a("a"),Rcr=o("TFDistilBertForMaskedLM"),Bcr=o(" (DistilBERT model)"),Pcr=l(),xT=a("li"),c1e=a("strong"),Icr=o("electra"),qcr=o(" \u2014 "),hQ=a("a"),Ncr=o("TFElectraForPreTraining"),jcr=o(" (ELECTRA model)"),Dcr=l(),$T=a("li"),f1e=a("strong"),Gcr=o("flaubert"),Ocr=o(" \u2014 "),pQ=a("a"),Vcr=o("TFFlaubertWithLMHeadModel"),Xcr=o(" (FlauBERT model)"),zcr=l(),kT=a("li"),m1e=a("strong"),Qcr=o("funnel"),Wcr=o(" \u2014 "),uQ=a("a"),Hcr=o("TFFunnelForPreTraining"),Ucr=o(" (Funnel Transformer model)"),Jcr=l(),ST=a("li"),g1e=a("strong"),Ycr=o("gpt2"),Kcr=o(" \u2014 "),_Q=a("a"),Zcr=o("TFGPT2LMHeadModel"),efr=o(" (OpenAI GPT-2 model)"),ofr=l(),RT=a("li"),h1e=a("strong"),rfr=o("layoutlm"),tfr=o(" \u2014 "),bQ=a("a"),afr=o("TFLayoutLMForMaskedLM"),nfr=o(" (LayoutLM model)"),sfr=l(),BT=a("li"),p1e=a("strong"),lfr=o("lxmert"),ifr=o(" \u2014 "),vQ=a("a"),dfr=o("TFLxmertForPreTraining"),cfr=o(" (LXMERT model)"),ffr=l(),PT=a("li"),u1e=a("strong"),mfr=o("mobilebert"),gfr=o(" \u2014 "),FQ=a("a"),hfr=o("TFMobileBertForPreTraining"),pfr=o(" (MobileBERT model)"),ufr=l(),IT=a("li"),_1e=a("strong"),_fr=o("mpnet"),bfr=o(" \u2014 "),TQ=a("a"),vfr=o("TFMPNetForMaskedLM"),Ffr=o(" (MPNet model)"),Tfr=l(),qT=a("li"),b1e=a("strong"),Mfr=o("openai-gpt"),Efr=o(" \u2014 "),MQ=a("a"),Cfr=o("TFOpenAIGPTLMHeadModel"),wfr=o(" (OpenAI GPT model)"),Afr=l(),NT=a("li"),v1e=a("strong"),yfr=o("roberta"),Lfr=o(" \u2014 "),EQ=a("a"),xfr=o("TFRobertaForMaskedLM"),$fr=o(" (RoBERTa model)"),kfr=l(),jT=a("li"),F1e=a("strong"),Sfr=o("t5"),Rfr=o(" \u2014 "),CQ=a("a"),Bfr=o("TFT5ForConditionalGeneration"),Pfr=o(" (T5 model)"),Ifr=l(),DT=a("li"),T1e=a("strong"),qfr=o("tapas"),Nfr=o(" \u2014 "),wQ=a("a"),jfr=o("TFTapasForMaskedLM"),Dfr=o(" (TAPAS model)"),Gfr=l(),GT=a("li"),M1e=a("strong"),Ofr=o("transfo-xl"),Vfr=o(" \u2014 "),AQ=a("a"),Xfr=o("TFTransfoXLLMHeadModel"),zfr=o(" (Transformer-XL model)"),Qfr=l(),OT=a("li"),E1e=a("strong"),Wfr=o("vit_mae"),Hfr=o(" \u2014 "),yQ=a("a"),Ufr=o("TFViTMAEForPreTraining"),Jfr=o(" (ViTMAE model)"),Yfr=l(),VT=a("li"),C1e=a("strong"),Kfr=o("xlm"),Zfr=o(" \u2014 "),LQ=a("a"),emr=o("TFXLMWithLMHeadModel"),omr=o(" (XLM model)"),rmr=l(),XT=a("li"),w1e=a("strong"),tmr=o("xlm-roberta"),amr=o(" \u2014 "),xQ=a("a"),nmr=o("TFXLMRobertaForMaskedLM"),smr=o(" (XLM-RoBERTa model)"),lmr=l(),zT=a("li"),A1e=a("strong"),imr=o("xlnet"),dmr=o(" \u2014 "),$Q=a("a"),cmr=o("TFXLNetLMHeadModel"),fmr=o(" (XLNet model)"),mmr=l(),F(QT.$$.fragment),pqe=l(),Xd=a("h2"),WT=a("a"),y1e=a("span"),F(QL.$$.fragment),gmr=l(),L1e=a("span"),hmr=o("TFAutoModelForCausalLM"),uqe=l(),Zo=a("div"),F(WL.$$.fragment),pmr=l(),zd=a("p"),umr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kQ=a("a"),_mr=o("from_pretrained()"),bmr=o(" class method or the "),SQ=a("a"),vmr=o("from_config()"),Fmr=o(` class
method.`),Tmr=l(),HL=a("p"),Mmr=o("This class cannot be instantiated directly using "),x1e=a("code"),Emr=o("__init__()"),Cmr=o(" (throws an error)."),wmr=l(),yt=a("div"),F(UL.$$.fragment),Amr=l(),$1e=a("p"),ymr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Lmr=l(),Qd=a("p"),xmr=o(`Note:
Loading a model from its configuration file does `),k1e=a("strong"),$mr=o("not"),kmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),Smr=o("from_pretrained()"),Rmr=o(" to load the model weights."),Bmr=l(),F(HT.$$.fragment),Pmr=l(),yr=a("div"),F(JL.$$.fragment),Imr=l(),S1e=a("p"),qmr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nmr=l(),en=a("p"),jmr=o("The model class to instantiate is selected based on the "),R1e=a("code"),Dmr=o("model_type"),Gmr=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),Omr=o("pretrained_model_name_or_path"),Vmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=a("code"),Xmr=o("pretrained_model_name_or_path"),zmr=o(":"),Qmr=l(),Te=a("ul"),UT=a("li"),I1e=a("strong"),Wmr=o("bert"),Hmr=o(" \u2014 "),BQ=a("a"),Umr=o("TFBertLMHeadModel"),Jmr=o(" (BERT model)"),Ymr=l(),JT=a("li"),q1e=a("strong"),Kmr=o("camembert"),Zmr=o(" \u2014 "),PQ=a("a"),egr=o("TFCamembertForCausalLM"),ogr=o(" (CamemBERT model)"),rgr=l(),YT=a("li"),N1e=a("strong"),tgr=o("ctrl"),agr=o(" \u2014 "),IQ=a("a"),ngr=o("TFCTRLLMHeadModel"),sgr=o(" (CTRL model)"),lgr=l(),KT=a("li"),j1e=a("strong"),igr=o("gpt2"),dgr=o(" \u2014 "),qQ=a("a"),cgr=o("TFGPT2LMHeadModel"),fgr=o(" (OpenAI GPT-2 model)"),mgr=l(),ZT=a("li"),D1e=a("strong"),ggr=o("gptj"),hgr=o(" \u2014 "),NQ=a("a"),pgr=o("TFGPTJForCausalLM"),ugr=o(" (GPT-J model)"),_gr=l(),e7=a("li"),G1e=a("strong"),bgr=o("openai-gpt"),vgr=o(" \u2014 "),jQ=a("a"),Fgr=o("TFOpenAIGPTLMHeadModel"),Tgr=o(" (OpenAI GPT model)"),Mgr=l(),o7=a("li"),O1e=a("strong"),Egr=o("rembert"),Cgr=o(" \u2014 "),DQ=a("a"),wgr=o("TFRemBertForCausalLM"),Agr=o(" (RemBERT model)"),ygr=l(),r7=a("li"),V1e=a("strong"),Lgr=o("roberta"),xgr=o(" \u2014 "),GQ=a("a"),$gr=o("TFRobertaForCausalLM"),kgr=o(" (RoBERTa model)"),Sgr=l(),t7=a("li"),X1e=a("strong"),Rgr=o("roformer"),Bgr=o(" \u2014 "),OQ=a("a"),Pgr=o("TFRoFormerForCausalLM"),Igr=o(" (RoFormer model)"),qgr=l(),a7=a("li"),z1e=a("strong"),Ngr=o("transfo-xl"),jgr=o(" \u2014 "),VQ=a("a"),Dgr=o("TFTransfoXLLMHeadModel"),Ggr=o(" (Transformer-XL model)"),Ogr=l(),n7=a("li"),Q1e=a("strong"),Vgr=o("xlm"),Xgr=o(" \u2014 "),XQ=a("a"),zgr=o("TFXLMWithLMHeadModel"),Qgr=o(" (XLM model)"),Wgr=l(),s7=a("li"),W1e=a("strong"),Hgr=o("xlnet"),Ugr=o(" \u2014 "),zQ=a("a"),Jgr=o("TFXLNetLMHeadModel"),Ygr=o(" (XLNet model)"),Kgr=l(),F(l7.$$.fragment),_qe=l(),Wd=a("h2"),i7=a("a"),H1e=a("span"),F(YL.$$.fragment),Zgr=l(),U1e=a("span"),ehr=o("TFAutoModelForImageClassification"),bqe=l(),er=a("div"),F(KL.$$.fragment),ohr=l(),Hd=a("p"),rhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QQ=a("a"),thr=o("from_pretrained()"),ahr=o(" class method or the "),WQ=a("a"),nhr=o("from_config()"),shr=o(` class
method.`),lhr=l(),ZL=a("p"),ihr=o("This class cannot be instantiated directly using "),J1e=a("code"),dhr=o("__init__()"),chr=o(" (throws an error)."),fhr=l(),Lt=a("div"),F(e8.$$.fragment),mhr=l(),Y1e=a("p"),ghr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hhr=l(),Ud=a("p"),phr=o(`Note:
Loading a model from its configuration file does `),K1e=a("strong"),uhr=o("not"),_hr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),bhr=o("from_pretrained()"),vhr=o(" to load the model weights."),Fhr=l(),F(d7.$$.fragment),Thr=l(),Lr=a("div"),F(o8.$$.fragment),Mhr=l(),Z1e=a("p"),Ehr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Chr=l(),on=a("p"),whr=o("The model class to instantiate is selected based on the "),ebe=a("code"),Ahr=o("model_type"),yhr=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),Lhr=o("pretrained_model_name_or_path"),xhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),$hr=o("pretrained_model_name_or_path"),khr=o(":"),Shr=l(),Jd=a("ul"),c7=a("li"),tbe=a("strong"),Rhr=o("convnext"),Bhr=o(" \u2014 "),UQ=a("a"),Phr=o("TFConvNextForImageClassification"),Ihr=o(" (ConvNext model)"),qhr=l(),f7=a("li"),abe=a("strong"),Nhr=o("data2vec-vision"),jhr=o(" \u2014 "),JQ=a("a"),Dhr=o("TFData2VecVisionForImageClassification"),Ghr=o(" (Data2VecVision model)"),Ohr=l(),m7=a("li"),nbe=a("strong"),Vhr=o("vit"),Xhr=o(" \u2014 "),YQ=a("a"),zhr=o("TFViTForImageClassification"),Qhr=o(" (ViT model)"),Whr=l(),F(g7.$$.fragment),vqe=l(),Yd=a("h2"),h7=a("a"),sbe=a("span"),F(r8.$$.fragment),Hhr=l(),lbe=a("span"),Uhr=o("TFAutoModelForMaskedLM"),Fqe=l(),or=a("div"),F(t8.$$.fragment),Jhr=l(),Kd=a("p"),Yhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KQ=a("a"),Khr=o("from_pretrained()"),Zhr=o(" class method or the "),ZQ=a("a"),epr=o("from_config()"),opr=o(` class
method.`),rpr=l(),a8=a("p"),tpr=o("This class cannot be instantiated directly using "),ibe=a("code"),apr=o("__init__()"),npr=o(" (throws an error)."),spr=l(),xt=a("div"),F(n8.$$.fragment),lpr=l(),dbe=a("p"),ipr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dpr=l(),Zd=a("p"),cpr=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),fpr=o("not"),mpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),gpr=o("from_pretrained()"),hpr=o(" to load the model weights."),ppr=l(),F(p7.$$.fragment),upr=l(),xr=a("div"),F(s8.$$.fragment),_pr=l(),fbe=a("p"),bpr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vpr=l(),rn=a("p"),Fpr=o("The model class to instantiate is selected based on the "),mbe=a("code"),Tpr=o("model_type"),Mpr=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),Epr=o("pretrained_model_name_or_path"),Cpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),wpr=o("pretrained_model_name_or_path"),Apr=o(":"),ypr=l(),ie=a("ul"),u7=a("li"),pbe=a("strong"),Lpr=o("albert"),xpr=o(" \u2014 "),oW=a("a"),$pr=o("TFAlbertForMaskedLM"),kpr=o(" (ALBERT model)"),Spr=l(),_7=a("li"),ube=a("strong"),Rpr=o("bert"),Bpr=o(" \u2014 "),rW=a("a"),Ppr=o("TFBertForMaskedLM"),Ipr=o(" (BERT model)"),qpr=l(),b7=a("li"),_be=a("strong"),Npr=o("camembert"),jpr=o(" \u2014 "),tW=a("a"),Dpr=o("TFCamembertForMaskedLM"),Gpr=o(" (CamemBERT model)"),Opr=l(),v7=a("li"),bbe=a("strong"),Vpr=o("convbert"),Xpr=o(" \u2014 "),aW=a("a"),zpr=o("TFConvBertForMaskedLM"),Qpr=o(" (ConvBERT model)"),Wpr=l(),F7=a("li"),vbe=a("strong"),Hpr=o("deberta"),Upr=o(" \u2014 "),nW=a("a"),Jpr=o("TFDebertaForMaskedLM"),Ypr=o(" (DeBERTa model)"),Kpr=l(),T7=a("li"),Fbe=a("strong"),Zpr=o("deberta-v2"),eur=o(" \u2014 "),sW=a("a"),our=o("TFDebertaV2ForMaskedLM"),rur=o(" (DeBERTa-v2 model)"),tur=l(),M7=a("li"),Tbe=a("strong"),aur=o("distilbert"),nur=o(" \u2014 "),lW=a("a"),sur=o("TFDistilBertForMaskedLM"),lur=o(" (DistilBERT model)"),iur=l(),E7=a("li"),Mbe=a("strong"),dur=o("electra"),cur=o(" \u2014 "),iW=a("a"),fur=o("TFElectraForMaskedLM"),mur=o(" (ELECTRA model)"),gur=l(),C7=a("li"),Ebe=a("strong"),hur=o("flaubert"),pur=o(" \u2014 "),dW=a("a"),uur=o("TFFlaubertWithLMHeadModel"),_ur=o(" (FlauBERT model)"),bur=l(),w7=a("li"),Cbe=a("strong"),vur=o("funnel"),Fur=o(" \u2014 "),cW=a("a"),Tur=o("TFFunnelForMaskedLM"),Mur=o(" (Funnel Transformer model)"),Eur=l(),A7=a("li"),wbe=a("strong"),Cur=o("layoutlm"),wur=o(" \u2014 "),fW=a("a"),Aur=o("TFLayoutLMForMaskedLM"),yur=o(" (LayoutLM model)"),Lur=l(),y7=a("li"),Abe=a("strong"),xur=o("longformer"),$ur=o(" \u2014 "),mW=a("a"),kur=o("TFLongformerForMaskedLM"),Sur=o(" (Longformer model)"),Rur=l(),L7=a("li"),ybe=a("strong"),Bur=o("mobilebert"),Pur=o(" \u2014 "),gW=a("a"),Iur=o("TFMobileBertForMaskedLM"),qur=o(" (MobileBERT model)"),Nur=l(),x7=a("li"),Lbe=a("strong"),jur=o("mpnet"),Dur=o(" \u2014 "),hW=a("a"),Gur=o("TFMPNetForMaskedLM"),Our=o(" (MPNet model)"),Vur=l(),$7=a("li"),xbe=a("strong"),Xur=o("rembert"),zur=o(" \u2014 "),pW=a("a"),Qur=o("TFRemBertForMaskedLM"),Wur=o(" (RemBERT model)"),Hur=l(),k7=a("li"),$be=a("strong"),Uur=o("roberta"),Jur=o(" \u2014 "),uW=a("a"),Yur=o("TFRobertaForMaskedLM"),Kur=o(" (RoBERTa model)"),Zur=l(),S7=a("li"),kbe=a("strong"),e_r=o("roformer"),o_r=o(" \u2014 "),_W=a("a"),r_r=o("TFRoFormerForMaskedLM"),t_r=o(" (RoFormer model)"),a_r=l(),R7=a("li"),Sbe=a("strong"),n_r=o("tapas"),s_r=o(" \u2014 "),bW=a("a"),l_r=o("TFTapasForMaskedLM"),i_r=o(" (TAPAS model)"),d_r=l(),B7=a("li"),Rbe=a("strong"),c_r=o("xlm"),f_r=o(" \u2014 "),vW=a("a"),m_r=o("TFXLMWithLMHeadModel"),g_r=o(" (XLM model)"),h_r=l(),P7=a("li"),Bbe=a("strong"),p_r=o("xlm-roberta"),u_r=o(" \u2014 "),FW=a("a"),__r=o("TFXLMRobertaForMaskedLM"),b_r=o(" (XLM-RoBERTa model)"),v_r=l(),F(I7.$$.fragment),Tqe=l(),ec=a("h2"),q7=a("a"),Pbe=a("span"),F(l8.$$.fragment),F_r=l(),Ibe=a("span"),T_r=o("TFAutoModelForSeq2SeqLM"),Mqe=l(),rr=a("div"),F(i8.$$.fragment),M_r=l(),oc=a("p"),E_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TW=a("a"),C_r=o("from_pretrained()"),w_r=o(" class method or the "),MW=a("a"),A_r=o("from_config()"),y_r=o(` class
method.`),L_r=l(),d8=a("p"),x_r=o("This class cannot be instantiated directly using "),qbe=a("code"),$_r=o("__init__()"),k_r=o(" (throws an error)."),S_r=l(),$t=a("div"),F(c8.$$.fragment),R_r=l(),Nbe=a("p"),B_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),P_r=l(),rc=a("p"),I_r=o(`Note:
Loading a model from its configuration file does `),jbe=a("strong"),q_r=o("not"),N_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),j_r=o("from_pretrained()"),D_r=o(" to load the model weights."),G_r=l(),F(N7.$$.fragment),O_r=l(),$r=a("div"),F(f8.$$.fragment),V_r=l(),Dbe=a("p"),X_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),z_r=l(),tn=a("p"),Q_r=o("The model class to instantiate is selected based on the "),Gbe=a("code"),W_r=o("model_type"),H_r=o(` property of the config object (either
passed as an argument or loaded from `),Obe=a("code"),U_r=o("pretrained_model_name_or_path"),J_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),Y_r=o("pretrained_model_name_or_path"),K_r=o(":"),Z_r=l(),ye=a("ul"),j7=a("li"),Xbe=a("strong"),e0r=o("bart"),o0r=o(" \u2014 "),CW=a("a"),r0r=o("TFBartForConditionalGeneration"),t0r=o(" (BART model)"),a0r=l(),D7=a("li"),zbe=a("strong"),n0r=o("blenderbot"),s0r=o(" \u2014 "),wW=a("a"),l0r=o("TFBlenderbotForConditionalGeneration"),i0r=o(" (Blenderbot model)"),d0r=l(),G7=a("li"),Qbe=a("strong"),c0r=o("blenderbot-small"),f0r=o(" \u2014 "),AW=a("a"),m0r=o("TFBlenderbotSmallForConditionalGeneration"),g0r=o(" (BlenderbotSmall model)"),h0r=l(),O7=a("li"),Wbe=a("strong"),p0r=o("encoder-decoder"),u0r=o(" \u2014 "),yW=a("a"),_0r=o("TFEncoderDecoderModel"),b0r=o(" (Encoder decoder model)"),v0r=l(),V7=a("li"),Hbe=a("strong"),F0r=o("led"),T0r=o(" \u2014 "),LW=a("a"),M0r=o("TFLEDForConditionalGeneration"),E0r=o(" (LED model)"),C0r=l(),X7=a("li"),Ube=a("strong"),w0r=o("marian"),A0r=o(" \u2014 "),xW=a("a"),y0r=o("TFMarianMTModel"),L0r=o(" (Marian model)"),x0r=l(),z7=a("li"),Jbe=a("strong"),$0r=o("mbart"),k0r=o(" \u2014 "),$W=a("a"),S0r=o("TFMBartForConditionalGeneration"),R0r=o(" (mBART model)"),B0r=l(),Q7=a("li"),Ybe=a("strong"),P0r=o("mt5"),I0r=o(" \u2014 "),kW=a("a"),q0r=o("TFMT5ForConditionalGeneration"),N0r=o(" (mT5 model)"),j0r=l(),W7=a("li"),Kbe=a("strong"),D0r=o("pegasus"),G0r=o(" \u2014 "),SW=a("a"),O0r=o("TFPegasusForConditionalGeneration"),V0r=o(" (Pegasus model)"),X0r=l(),H7=a("li"),Zbe=a("strong"),z0r=o("t5"),Q0r=o(" \u2014 "),RW=a("a"),W0r=o("TFT5ForConditionalGeneration"),H0r=o(" (T5 model)"),U0r=l(),F(U7.$$.fragment),Eqe=l(),tc=a("h2"),J7=a("a"),e2e=a("span"),F(m8.$$.fragment),J0r=l(),o2e=a("span"),Y0r=o("TFAutoModelForSequenceClassification"),Cqe=l(),tr=a("div"),F(g8.$$.fragment),K0r=l(),ac=a("p"),Z0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BW=a("a"),e1r=o("from_pretrained()"),o1r=o(" class method or the "),PW=a("a"),r1r=o("from_config()"),t1r=o(` class
method.`),a1r=l(),h8=a("p"),n1r=o("This class cannot be instantiated directly using "),r2e=a("code"),s1r=o("__init__()"),l1r=o(" (throws an error)."),i1r=l(),kt=a("div"),F(p8.$$.fragment),d1r=l(),t2e=a("p"),c1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),f1r=l(),nc=a("p"),m1r=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),g1r=o("not"),h1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),p1r=o("from_pretrained()"),u1r=o(" to load the model weights."),_1r=l(),F(Y7.$$.fragment),b1r=l(),kr=a("div"),F(u8.$$.fragment),v1r=l(),n2e=a("p"),F1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),T1r=l(),an=a("p"),M1r=o("The model class to instantiate is selected based on the "),s2e=a("code"),E1r=o("model_type"),C1r=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),w1r=o("pretrained_model_name_or_path"),A1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),y1r=o("pretrained_model_name_or_path"),L1r=o(":"),x1r=l(),ee=a("ul"),K7=a("li"),d2e=a("strong"),$1r=o("albert"),k1r=o(" \u2014 "),qW=a("a"),S1r=o("TFAlbertForSequenceClassification"),R1r=o(" (ALBERT model)"),B1r=l(),Z7=a("li"),c2e=a("strong"),P1r=o("bert"),I1r=o(" \u2014 "),NW=a("a"),q1r=o("TFBertForSequenceClassification"),N1r=o(" (BERT model)"),j1r=l(),eM=a("li"),f2e=a("strong"),D1r=o("camembert"),G1r=o(" \u2014 "),jW=a("a"),O1r=o("TFCamembertForSequenceClassification"),V1r=o(" (CamemBERT model)"),X1r=l(),oM=a("li"),m2e=a("strong"),z1r=o("convbert"),Q1r=o(" \u2014 "),DW=a("a"),W1r=o("TFConvBertForSequenceClassification"),H1r=o(" (ConvBERT model)"),U1r=l(),rM=a("li"),g2e=a("strong"),J1r=o("ctrl"),Y1r=o(" \u2014 "),GW=a("a"),K1r=o("TFCTRLForSequenceClassification"),Z1r=o(" (CTRL model)"),ebr=l(),tM=a("li"),h2e=a("strong"),obr=o("deberta"),rbr=o(" \u2014 "),OW=a("a"),tbr=o("TFDebertaForSequenceClassification"),abr=o(" (DeBERTa model)"),nbr=l(),aM=a("li"),p2e=a("strong"),sbr=o("deberta-v2"),lbr=o(" \u2014 "),VW=a("a"),ibr=o("TFDebertaV2ForSequenceClassification"),dbr=o(" (DeBERTa-v2 model)"),cbr=l(),nM=a("li"),u2e=a("strong"),fbr=o("distilbert"),mbr=o(" \u2014 "),XW=a("a"),gbr=o("TFDistilBertForSequenceClassification"),hbr=o(" (DistilBERT model)"),pbr=l(),sM=a("li"),_2e=a("strong"),ubr=o("electra"),_br=o(" \u2014 "),zW=a("a"),bbr=o("TFElectraForSequenceClassification"),vbr=o(" (ELECTRA model)"),Fbr=l(),lM=a("li"),b2e=a("strong"),Tbr=o("flaubert"),Mbr=o(" \u2014 "),QW=a("a"),Ebr=o("TFFlaubertForSequenceClassification"),Cbr=o(" (FlauBERT model)"),wbr=l(),iM=a("li"),v2e=a("strong"),Abr=o("funnel"),ybr=o(" \u2014 "),WW=a("a"),Lbr=o("TFFunnelForSequenceClassification"),xbr=o(" (Funnel Transformer model)"),$br=l(),dM=a("li"),F2e=a("strong"),kbr=o("gpt2"),Sbr=o(" \u2014 "),HW=a("a"),Rbr=o("TFGPT2ForSequenceClassification"),Bbr=o(" (OpenAI GPT-2 model)"),Pbr=l(),cM=a("li"),T2e=a("strong"),Ibr=o("gptj"),qbr=o(" \u2014 "),UW=a("a"),Nbr=o("TFGPTJForSequenceClassification"),jbr=o(" (GPT-J model)"),Dbr=l(),fM=a("li"),M2e=a("strong"),Gbr=o("layoutlm"),Obr=o(" \u2014 "),JW=a("a"),Vbr=o("TFLayoutLMForSequenceClassification"),Xbr=o(" (LayoutLM model)"),zbr=l(),mM=a("li"),E2e=a("strong"),Qbr=o("longformer"),Wbr=o(" \u2014 "),YW=a("a"),Hbr=o("TFLongformerForSequenceClassification"),Ubr=o(" (Longformer model)"),Jbr=l(),gM=a("li"),C2e=a("strong"),Ybr=o("mobilebert"),Kbr=o(" \u2014 "),KW=a("a"),Zbr=o("TFMobileBertForSequenceClassification"),e2r=o(" (MobileBERT model)"),o2r=l(),hM=a("li"),w2e=a("strong"),r2r=o("mpnet"),t2r=o(" \u2014 "),ZW=a("a"),a2r=o("TFMPNetForSequenceClassification"),n2r=o(" (MPNet model)"),s2r=l(),pM=a("li"),A2e=a("strong"),l2r=o("openai-gpt"),i2r=o(" \u2014 "),eH=a("a"),d2r=o("TFOpenAIGPTForSequenceClassification"),c2r=o(" (OpenAI GPT model)"),f2r=l(),uM=a("li"),y2e=a("strong"),m2r=o("rembert"),g2r=o(" \u2014 "),oH=a("a"),h2r=o("TFRemBertForSequenceClassification"),p2r=o(" (RemBERT model)"),u2r=l(),_M=a("li"),L2e=a("strong"),_2r=o("roberta"),b2r=o(" \u2014 "),rH=a("a"),v2r=o("TFRobertaForSequenceClassification"),F2r=o(" (RoBERTa model)"),T2r=l(),bM=a("li"),x2e=a("strong"),M2r=o("roformer"),E2r=o(" \u2014 "),tH=a("a"),C2r=o("TFRoFormerForSequenceClassification"),w2r=o(" (RoFormer model)"),A2r=l(),vM=a("li"),$2e=a("strong"),y2r=o("tapas"),L2r=o(" \u2014 "),aH=a("a"),x2r=o("TFTapasForSequenceClassification"),$2r=o(" (TAPAS model)"),k2r=l(),FM=a("li"),k2e=a("strong"),S2r=o("transfo-xl"),R2r=o(" \u2014 "),nH=a("a"),B2r=o("TFTransfoXLForSequenceClassification"),P2r=o(" (Transformer-XL model)"),I2r=l(),TM=a("li"),S2e=a("strong"),q2r=o("xlm"),N2r=o(" \u2014 "),sH=a("a"),j2r=o("TFXLMForSequenceClassification"),D2r=o(" (XLM model)"),G2r=l(),MM=a("li"),R2e=a("strong"),O2r=o("xlm-roberta"),V2r=o(" \u2014 "),lH=a("a"),X2r=o("TFXLMRobertaForSequenceClassification"),z2r=o(" (XLM-RoBERTa model)"),Q2r=l(),EM=a("li"),B2e=a("strong"),W2r=o("xlnet"),H2r=o(" \u2014 "),iH=a("a"),U2r=o("TFXLNetForSequenceClassification"),J2r=o(" (XLNet model)"),Y2r=l(),F(CM.$$.fragment),wqe=l(),sc=a("h2"),wM=a("a"),P2e=a("span"),F(_8.$$.fragment),K2r=l(),I2e=a("span"),Z2r=o("TFAutoModelForMultipleChoice"),Aqe=l(),ar=a("div"),F(b8.$$.fragment),evr=l(),lc=a("p"),ovr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dH=a("a"),rvr=o("from_pretrained()"),tvr=o(" class method or the "),cH=a("a"),avr=o("from_config()"),nvr=o(` class
method.`),svr=l(),v8=a("p"),lvr=o("This class cannot be instantiated directly using "),q2e=a("code"),ivr=o("__init__()"),dvr=o(" (throws an error)."),cvr=l(),St=a("div"),F(F8.$$.fragment),fvr=l(),N2e=a("p"),mvr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gvr=l(),ic=a("p"),hvr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),pvr=o("not"),uvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),_vr=o("from_pretrained()"),bvr=o(" to load the model weights."),vvr=l(),F(AM.$$.fragment),Fvr=l(),Sr=a("div"),F(T8.$$.fragment),Tvr=l(),D2e=a("p"),Mvr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Evr=l(),nn=a("p"),Cvr=o("The model class to instantiate is selected based on the "),G2e=a("code"),wvr=o("model_type"),Avr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),yvr=o("pretrained_model_name_or_path"),Lvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),xvr=o("pretrained_model_name_or_path"),$vr=o(":"),kvr=l(),pe=a("ul"),yM=a("li"),X2e=a("strong"),Svr=o("albert"),Rvr=o(" \u2014 "),mH=a("a"),Bvr=o("TFAlbertForMultipleChoice"),Pvr=o(" (ALBERT model)"),Ivr=l(),LM=a("li"),z2e=a("strong"),qvr=o("bert"),Nvr=o(" \u2014 "),gH=a("a"),jvr=o("TFBertForMultipleChoice"),Dvr=o(" (BERT model)"),Gvr=l(),xM=a("li"),Q2e=a("strong"),Ovr=o("camembert"),Vvr=o(" \u2014 "),hH=a("a"),Xvr=o("TFCamembertForMultipleChoice"),zvr=o(" (CamemBERT model)"),Qvr=l(),$M=a("li"),W2e=a("strong"),Wvr=o("convbert"),Hvr=o(" \u2014 "),pH=a("a"),Uvr=o("TFConvBertForMultipleChoice"),Jvr=o(" (ConvBERT model)"),Yvr=l(),kM=a("li"),H2e=a("strong"),Kvr=o("distilbert"),Zvr=o(" \u2014 "),uH=a("a"),eFr=o("TFDistilBertForMultipleChoice"),oFr=o(" (DistilBERT model)"),rFr=l(),SM=a("li"),U2e=a("strong"),tFr=o("electra"),aFr=o(" \u2014 "),_H=a("a"),nFr=o("TFElectraForMultipleChoice"),sFr=o(" (ELECTRA model)"),lFr=l(),RM=a("li"),J2e=a("strong"),iFr=o("flaubert"),dFr=o(" \u2014 "),bH=a("a"),cFr=o("TFFlaubertForMultipleChoice"),fFr=o(" (FlauBERT model)"),mFr=l(),BM=a("li"),Y2e=a("strong"),gFr=o("funnel"),hFr=o(" \u2014 "),vH=a("a"),pFr=o("TFFunnelForMultipleChoice"),uFr=o(" (Funnel Transformer model)"),_Fr=l(),PM=a("li"),K2e=a("strong"),bFr=o("longformer"),vFr=o(" \u2014 "),FH=a("a"),FFr=o("TFLongformerForMultipleChoice"),TFr=o(" (Longformer model)"),MFr=l(),IM=a("li"),Z2e=a("strong"),EFr=o("mobilebert"),CFr=o(" \u2014 "),TH=a("a"),wFr=o("TFMobileBertForMultipleChoice"),AFr=o(" (MobileBERT model)"),yFr=l(),qM=a("li"),eve=a("strong"),LFr=o("mpnet"),xFr=o(" \u2014 "),MH=a("a"),$Fr=o("TFMPNetForMultipleChoice"),kFr=o(" (MPNet model)"),SFr=l(),NM=a("li"),ove=a("strong"),RFr=o("rembert"),BFr=o(" \u2014 "),EH=a("a"),PFr=o("TFRemBertForMultipleChoice"),IFr=o(" (RemBERT model)"),qFr=l(),jM=a("li"),rve=a("strong"),NFr=o("roberta"),jFr=o(" \u2014 "),CH=a("a"),DFr=o("TFRobertaForMultipleChoice"),GFr=o(" (RoBERTa model)"),OFr=l(),DM=a("li"),tve=a("strong"),VFr=o("roformer"),XFr=o(" \u2014 "),wH=a("a"),zFr=o("TFRoFormerForMultipleChoice"),QFr=o(" (RoFormer model)"),WFr=l(),GM=a("li"),ave=a("strong"),HFr=o("xlm"),UFr=o(" \u2014 "),AH=a("a"),JFr=o("TFXLMForMultipleChoice"),YFr=o(" (XLM model)"),KFr=l(),OM=a("li"),nve=a("strong"),ZFr=o("xlm-roberta"),e6r=o(" \u2014 "),yH=a("a"),o6r=o("TFXLMRobertaForMultipleChoice"),r6r=o(" (XLM-RoBERTa model)"),t6r=l(),VM=a("li"),sve=a("strong"),a6r=o("xlnet"),n6r=o(" \u2014 "),LH=a("a"),s6r=o("TFXLNetForMultipleChoice"),l6r=o(" (XLNet model)"),i6r=l(),F(XM.$$.fragment),yqe=l(),dc=a("h2"),zM=a("a"),lve=a("span"),F(M8.$$.fragment),d6r=l(),ive=a("span"),c6r=o("TFAutoModelForNextSentencePrediction"),Lqe=l(),nr=a("div"),F(E8.$$.fragment),f6r=l(),cc=a("p"),m6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xH=a("a"),g6r=o("from_pretrained()"),h6r=o(" class method or the "),$H=a("a"),p6r=o("from_config()"),u6r=o(` class
method.`),_6r=l(),C8=a("p"),b6r=o("This class cannot be instantiated directly using "),dve=a("code"),v6r=o("__init__()"),F6r=o(" (throws an error)."),T6r=l(),Rt=a("div"),F(w8.$$.fragment),M6r=l(),cve=a("p"),E6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),C6r=l(),fc=a("p"),w6r=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),A6r=o("not"),y6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),L6r=o("from_pretrained()"),x6r=o(" to load the model weights."),$6r=l(),F(QM.$$.fragment),k6r=l(),Rr=a("div"),F(A8.$$.fragment),S6r=l(),mve=a("p"),R6r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),B6r=l(),sn=a("p"),P6r=o("The model class to instantiate is selected based on the "),gve=a("code"),I6r=o("model_type"),q6r=o(` property of the config object (either
passed as an argument or loaded from `),hve=a("code"),N6r=o("pretrained_model_name_or_path"),j6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=a("code"),D6r=o("pretrained_model_name_or_path"),G6r=o(":"),O6r=l(),y8=a("ul"),WM=a("li"),uve=a("strong"),V6r=o("bert"),X6r=o(" \u2014 "),SH=a("a"),z6r=o("TFBertForNextSentencePrediction"),Q6r=o(" (BERT model)"),W6r=l(),HM=a("li"),_ve=a("strong"),H6r=o("mobilebert"),U6r=o(" \u2014 "),RH=a("a"),J6r=o("TFMobileBertForNextSentencePrediction"),Y6r=o(" (MobileBERT model)"),K6r=l(),F(UM.$$.fragment),xqe=l(),mc=a("h2"),JM=a("a"),bve=a("span"),F(L8.$$.fragment),Z6r=l(),vve=a("span"),eTr=o("TFAutoModelForTableQuestionAnswering"),$qe=l(),sr=a("div"),F(x8.$$.fragment),oTr=l(),gc=a("p"),rTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BH=a("a"),tTr=o("from_pretrained()"),aTr=o(" class method or the "),PH=a("a"),nTr=o("from_config()"),sTr=o(` class
method.`),lTr=l(),$8=a("p"),iTr=o("This class cannot be instantiated directly using "),Fve=a("code"),dTr=o("__init__()"),cTr=o(" (throws an error)."),fTr=l(),Bt=a("div"),F(k8.$$.fragment),mTr=l(),Tve=a("p"),gTr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hTr=l(),hc=a("p"),pTr=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),uTr=o("not"),_Tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),bTr=o("from_pretrained()"),vTr=o(" to load the model weights."),FTr=l(),F(YM.$$.fragment),TTr=l(),Br=a("div"),F(S8.$$.fragment),MTr=l(),Eve=a("p"),ETr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CTr=l(),ln=a("p"),wTr=o("The model class to instantiate is selected based on the "),Cve=a("code"),ATr=o("model_type"),yTr=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),LTr=o("pretrained_model_name_or_path"),xTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),$Tr=o("pretrained_model_name_or_path"),kTr=o(":"),STr=l(),yve=a("ul"),KM=a("li"),Lve=a("strong"),RTr=o("tapas"),BTr=o(" \u2014 "),qH=a("a"),PTr=o("TFTapasForQuestionAnswering"),ITr=o(" (TAPAS model)"),qTr=l(),F(ZM.$$.fragment),kqe=l(),pc=a("h2"),e4=a("a"),xve=a("span"),F(R8.$$.fragment),NTr=l(),$ve=a("span"),jTr=o("TFAutoModelForTokenClassification"),Sqe=l(),lr=a("div"),F(B8.$$.fragment),DTr=l(),uc=a("p"),GTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NH=a("a"),OTr=o("from_pretrained()"),VTr=o(" class method or the "),jH=a("a"),XTr=o("from_config()"),zTr=o(` class
method.`),QTr=l(),P8=a("p"),WTr=o("This class cannot be instantiated directly using "),kve=a("code"),HTr=o("__init__()"),UTr=o(" (throws an error)."),JTr=l(),Pt=a("div"),F(I8.$$.fragment),YTr=l(),Sve=a("p"),KTr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ZTr=l(),_c=a("p"),e7r=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),o7r=o("not"),r7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),t7r=o("from_pretrained()"),a7r=o(" to load the model weights."),n7r=l(),F(o4.$$.fragment),s7r=l(),Pr=a("div"),F(q8.$$.fragment),l7r=l(),Bve=a("p"),i7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),d7r=l(),dn=a("p"),c7r=o("The model class to instantiate is selected based on the "),Pve=a("code"),f7r=o("model_type"),m7r=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),p7r=o("pretrained_model_name_or_path"),u7r=o(":"),_7r=l(),de=a("ul"),r4=a("li"),Nve=a("strong"),b7r=o("albert"),v7r=o(" \u2014 "),GH=a("a"),F7r=o("TFAlbertForTokenClassification"),T7r=o(" (ALBERT model)"),M7r=l(),t4=a("li"),jve=a("strong"),E7r=o("bert"),C7r=o(" \u2014 "),OH=a("a"),w7r=o("TFBertForTokenClassification"),A7r=o(" (BERT model)"),y7r=l(),a4=a("li"),Dve=a("strong"),L7r=o("camembert"),x7r=o(" \u2014 "),VH=a("a"),$7r=o("TFCamembertForTokenClassification"),k7r=o(" (CamemBERT model)"),S7r=l(),n4=a("li"),Gve=a("strong"),R7r=o("convbert"),B7r=o(" \u2014 "),XH=a("a"),P7r=o("TFConvBertForTokenClassification"),I7r=o(" (ConvBERT model)"),q7r=l(),s4=a("li"),Ove=a("strong"),N7r=o("deberta"),j7r=o(" \u2014 "),zH=a("a"),D7r=o("TFDebertaForTokenClassification"),G7r=o(" (DeBERTa model)"),O7r=l(),l4=a("li"),Vve=a("strong"),V7r=o("deberta-v2"),X7r=o(" \u2014 "),QH=a("a"),z7r=o("TFDebertaV2ForTokenClassification"),Q7r=o(" (DeBERTa-v2 model)"),W7r=l(),i4=a("li"),Xve=a("strong"),H7r=o("distilbert"),U7r=o(" \u2014 "),WH=a("a"),J7r=o("TFDistilBertForTokenClassification"),Y7r=o(" (DistilBERT model)"),K7r=l(),d4=a("li"),zve=a("strong"),Z7r=o("electra"),eMr=o(" \u2014 "),HH=a("a"),oMr=o("TFElectraForTokenClassification"),rMr=o(" (ELECTRA model)"),tMr=l(),c4=a("li"),Qve=a("strong"),aMr=o("flaubert"),nMr=o(" \u2014 "),UH=a("a"),sMr=o("TFFlaubertForTokenClassification"),lMr=o(" (FlauBERT model)"),iMr=l(),f4=a("li"),Wve=a("strong"),dMr=o("funnel"),cMr=o(" \u2014 "),JH=a("a"),fMr=o("TFFunnelForTokenClassification"),mMr=o(" (Funnel Transformer model)"),gMr=l(),m4=a("li"),Hve=a("strong"),hMr=o("layoutlm"),pMr=o(" \u2014 "),YH=a("a"),uMr=o("TFLayoutLMForTokenClassification"),_Mr=o(" (LayoutLM model)"),bMr=l(),g4=a("li"),Uve=a("strong"),vMr=o("longformer"),FMr=o(" \u2014 "),KH=a("a"),TMr=o("TFLongformerForTokenClassification"),MMr=o(" (Longformer model)"),EMr=l(),h4=a("li"),Jve=a("strong"),CMr=o("mobilebert"),wMr=o(" \u2014 "),ZH=a("a"),AMr=o("TFMobileBertForTokenClassification"),yMr=o(" (MobileBERT model)"),LMr=l(),p4=a("li"),Yve=a("strong"),xMr=o("mpnet"),$Mr=o(" \u2014 "),eU=a("a"),kMr=o("TFMPNetForTokenClassification"),SMr=o(" (MPNet model)"),RMr=l(),u4=a("li"),Kve=a("strong"),BMr=o("rembert"),PMr=o(" \u2014 "),oU=a("a"),IMr=o("TFRemBertForTokenClassification"),qMr=o(" (RemBERT model)"),NMr=l(),_4=a("li"),Zve=a("strong"),jMr=o("roberta"),DMr=o(" \u2014 "),rU=a("a"),GMr=o("TFRobertaForTokenClassification"),OMr=o(" (RoBERTa model)"),VMr=l(),b4=a("li"),eFe=a("strong"),XMr=o("roformer"),zMr=o(" \u2014 "),tU=a("a"),QMr=o("TFRoFormerForTokenClassification"),WMr=o(" (RoFormer model)"),HMr=l(),v4=a("li"),oFe=a("strong"),UMr=o("xlm"),JMr=o(" \u2014 "),aU=a("a"),YMr=o("TFXLMForTokenClassification"),KMr=o(" (XLM model)"),ZMr=l(),F4=a("li"),rFe=a("strong"),e4r=o("xlm-roberta"),o4r=o(" \u2014 "),nU=a("a"),r4r=o("TFXLMRobertaForTokenClassification"),t4r=o(" (XLM-RoBERTa model)"),a4r=l(),T4=a("li"),tFe=a("strong"),n4r=o("xlnet"),s4r=o(" \u2014 "),sU=a("a"),l4r=o("TFXLNetForTokenClassification"),i4r=o(" (XLNet model)"),d4r=l(),F(M4.$$.fragment),Rqe=l(),bc=a("h2"),E4=a("a"),aFe=a("span"),F(N8.$$.fragment),c4r=l(),nFe=a("span"),f4r=o("TFAutoModelForQuestionAnswering"),Bqe=l(),ir=a("div"),F(j8.$$.fragment),m4r=l(),vc=a("p"),g4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lU=a("a"),h4r=o("from_pretrained()"),p4r=o(" class method or the "),iU=a("a"),u4r=o("from_config()"),_4r=o(` class
method.`),b4r=l(),D8=a("p"),v4r=o("This class cannot be instantiated directly using "),sFe=a("code"),F4r=o("__init__()"),T4r=o(" (throws an error)."),M4r=l(),It=a("div"),F(G8.$$.fragment),E4r=l(),lFe=a("p"),C4r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w4r=l(),Fc=a("p"),A4r=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),y4r=o("not"),L4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),x4r=o("from_pretrained()"),$4r=o(" to load the model weights."),k4r=l(),F(C4.$$.fragment),S4r=l(),Ir=a("div"),F(O8.$$.fragment),R4r=l(),dFe=a("p"),B4r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),P4r=l(),cn=a("p"),I4r=o("The model class to instantiate is selected based on the "),cFe=a("code"),q4r=o("model_type"),N4r=o(` property of the config object (either
passed as an argument or loaded from `),fFe=a("code"),j4r=o("pretrained_model_name_or_path"),D4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),G4r=o("pretrained_model_name_or_path"),O4r=o(":"),V4r=l(),ce=a("ul"),w4=a("li"),gFe=a("strong"),X4r=o("albert"),z4r=o(" \u2014 "),cU=a("a"),Q4r=o("TFAlbertForQuestionAnswering"),W4r=o(" (ALBERT model)"),H4r=l(),A4=a("li"),hFe=a("strong"),U4r=o("bert"),J4r=o(" \u2014 "),fU=a("a"),Y4r=o("TFBertForQuestionAnswering"),K4r=o(" (BERT model)"),Z4r=l(),y4=a("li"),pFe=a("strong"),eEr=o("camembert"),oEr=o(" \u2014 "),mU=a("a"),rEr=o("TFCamembertForQuestionAnswering"),tEr=o(" (CamemBERT model)"),aEr=l(),L4=a("li"),uFe=a("strong"),nEr=o("convbert"),sEr=o(" \u2014 "),gU=a("a"),lEr=o("TFConvBertForQuestionAnswering"),iEr=o(" (ConvBERT model)"),dEr=l(),x4=a("li"),_Fe=a("strong"),cEr=o("deberta"),fEr=o(" \u2014 "),hU=a("a"),mEr=o("TFDebertaForQuestionAnswering"),gEr=o(" (DeBERTa model)"),hEr=l(),$4=a("li"),bFe=a("strong"),pEr=o("deberta-v2"),uEr=o(" \u2014 "),pU=a("a"),_Er=o("TFDebertaV2ForQuestionAnswering"),bEr=o(" (DeBERTa-v2 model)"),vEr=l(),k4=a("li"),vFe=a("strong"),FEr=o("distilbert"),TEr=o(" \u2014 "),uU=a("a"),MEr=o("TFDistilBertForQuestionAnswering"),EEr=o(" (DistilBERT model)"),CEr=l(),S4=a("li"),FFe=a("strong"),wEr=o("electra"),AEr=o(" \u2014 "),_U=a("a"),yEr=o("TFElectraForQuestionAnswering"),LEr=o(" (ELECTRA model)"),xEr=l(),R4=a("li"),TFe=a("strong"),$Er=o("flaubert"),kEr=o(" \u2014 "),bU=a("a"),SEr=o("TFFlaubertForQuestionAnsweringSimple"),REr=o(" (FlauBERT model)"),BEr=l(),B4=a("li"),MFe=a("strong"),PEr=o("funnel"),IEr=o(" \u2014 "),vU=a("a"),qEr=o("TFFunnelForQuestionAnswering"),NEr=o(" (Funnel Transformer model)"),jEr=l(),P4=a("li"),EFe=a("strong"),DEr=o("gptj"),GEr=o(" \u2014 "),FU=a("a"),OEr=o("TFGPTJForQuestionAnswering"),VEr=o(" (GPT-J model)"),XEr=l(),I4=a("li"),CFe=a("strong"),zEr=o("longformer"),QEr=o(" \u2014 "),TU=a("a"),WEr=o("TFLongformerForQuestionAnswering"),HEr=o(" (Longformer model)"),UEr=l(),q4=a("li"),wFe=a("strong"),JEr=o("mobilebert"),YEr=o(" \u2014 "),MU=a("a"),KEr=o("TFMobileBertForQuestionAnswering"),ZEr=o(" (MobileBERT model)"),e5r=l(),N4=a("li"),AFe=a("strong"),o5r=o("mpnet"),r5r=o(" \u2014 "),EU=a("a"),t5r=o("TFMPNetForQuestionAnswering"),a5r=o(" (MPNet model)"),n5r=l(),j4=a("li"),yFe=a("strong"),s5r=o("rembert"),l5r=o(" \u2014 "),CU=a("a"),i5r=o("TFRemBertForQuestionAnswering"),d5r=o(" (RemBERT model)"),c5r=l(),D4=a("li"),LFe=a("strong"),f5r=o("roberta"),m5r=o(" \u2014 "),wU=a("a"),g5r=o("TFRobertaForQuestionAnswering"),h5r=o(" (RoBERTa model)"),p5r=l(),G4=a("li"),xFe=a("strong"),u5r=o("roformer"),_5r=o(" \u2014 "),AU=a("a"),b5r=o("TFRoFormerForQuestionAnswering"),v5r=o(" (RoFormer model)"),F5r=l(),O4=a("li"),$Fe=a("strong"),T5r=o("xlm"),M5r=o(" \u2014 "),yU=a("a"),E5r=o("TFXLMForQuestionAnsweringSimple"),C5r=o(" (XLM model)"),w5r=l(),V4=a("li"),kFe=a("strong"),A5r=o("xlm-roberta"),y5r=o(" \u2014 "),LU=a("a"),L5r=o("TFXLMRobertaForQuestionAnswering"),x5r=o(" (XLM-RoBERTa model)"),$5r=l(),X4=a("li"),SFe=a("strong"),k5r=o("xlnet"),S5r=o(" \u2014 "),xU=a("a"),R5r=o("TFXLNetForQuestionAnsweringSimple"),B5r=o(" (XLNet model)"),P5r=l(),F(z4.$$.fragment),Pqe=l(),Tc=a("h2"),Q4=a("a"),RFe=a("span"),F(V8.$$.fragment),I5r=l(),BFe=a("span"),q5r=o("TFAutoModelForVision2Seq"),Iqe=l(),dr=a("div"),F(X8.$$.fragment),N5r=l(),Mc=a("p"),j5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$U=a("a"),D5r=o("from_pretrained()"),G5r=o(" class method or the "),kU=a("a"),O5r=o("from_config()"),V5r=o(` class
method.`),X5r=l(),z8=a("p"),z5r=o("This class cannot be instantiated directly using "),PFe=a("code"),Q5r=o("__init__()"),W5r=o(" (throws an error)."),H5r=l(),qt=a("div"),F(Q8.$$.fragment),U5r=l(),IFe=a("p"),J5r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Y5r=l(),Ec=a("p"),K5r=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),Z5r=o("not"),eCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),oCr=o("from_pretrained()"),rCr=o(" to load the model weights."),tCr=l(),F(W4.$$.fragment),aCr=l(),qr=a("div"),F(W8.$$.fragment),nCr=l(),NFe=a("p"),sCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lCr=l(),fn=a("p"),iCr=o("The model class to instantiate is selected based on the "),jFe=a("code"),dCr=o("model_type"),cCr=o(` property of the config object (either
passed as an argument or loaded from `),DFe=a("code"),fCr=o("pretrained_model_name_or_path"),mCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=a("code"),gCr=o("pretrained_model_name_or_path"),hCr=o(":"),pCr=l(),OFe=a("ul"),H4=a("li"),VFe=a("strong"),uCr=o("vision-encoder-decoder"),_Cr=o(" \u2014 "),RU=a("a"),bCr=o("TFVisionEncoderDecoderModel"),vCr=o(" (Vision Encoder decoder model)"),FCr=l(),F(U4.$$.fragment),qqe=l(),Cc=a("h2"),J4=a("a"),XFe=a("span"),F(H8.$$.fragment),TCr=l(),zFe=a("span"),MCr=o("TFAutoModelForSpeechSeq2Seq"),Nqe=l(),cr=a("div"),F(U8.$$.fragment),ECr=l(),wc=a("p"),CCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BU=a("a"),wCr=o("from_pretrained()"),ACr=o(" class method or the "),PU=a("a"),yCr=o("from_config()"),LCr=o(` class
method.`),xCr=l(),J8=a("p"),$Cr=o("This class cannot be instantiated directly using "),QFe=a("code"),kCr=o("__init__()"),SCr=o(" (throws an error)."),RCr=l(),Nt=a("div"),F(Y8.$$.fragment),BCr=l(),WFe=a("p"),PCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ICr=l(),Ac=a("p"),qCr=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),NCr=o("not"),jCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),DCr=o("from_pretrained()"),GCr=o(" to load the model weights."),OCr=l(),F(Y4.$$.fragment),VCr=l(),Nr=a("div"),F(K8.$$.fragment),XCr=l(),UFe=a("p"),zCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),QCr=l(),mn=a("p"),WCr=o("The model class to instantiate is selected based on the "),JFe=a("code"),HCr=o("model_type"),UCr=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),JCr=o("pretrained_model_name_or_path"),YCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),KCr=o("pretrained_model_name_or_path"),ZCr=o(":"),e3r=l(),ZFe=a("ul"),K4=a("li"),e6e=a("strong"),o3r=o("speech_to_text"),r3r=o(" \u2014 "),qU=a("a"),t3r=o("TFSpeech2TextForConditionalGeneration"),a3r=o(" (Speech2Text model)"),n3r=l(),F(Z4.$$.fragment),jqe=l(),yc=a("h2"),eE=a("a"),o6e=a("span"),F(Z8.$$.fragment),s3r=l(),r6e=a("span"),l3r=o("FlaxAutoModel"),Dqe=l(),fr=a("div"),F(ex.$$.fragment),i3r=l(),Lc=a("p"),d3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NU=a("a"),c3r=o("from_pretrained()"),f3r=o(" class method or the "),jU=a("a"),m3r=o("from_config()"),g3r=o(` class
method.`),h3r=l(),ox=a("p"),p3r=o("This class cannot be instantiated directly using "),t6e=a("code"),u3r=o("__init__()"),_3r=o(" (throws an error)."),b3r=l(),jt=a("div"),F(rx.$$.fragment),v3r=l(),a6e=a("p"),F3r=o("Instantiates one of the base model classes of the library from a configuration."),T3r=l(),xc=a("p"),M3r=o(`Note:
Loading a model from its configuration file does `),n6e=a("strong"),E3r=o("not"),C3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=a("a"),w3r=o("from_pretrained()"),A3r=o(" to load the model weights."),y3r=l(),F(oE.$$.fragment),L3r=l(),jr=a("div"),F(tx.$$.fragment),x3r=l(),s6e=a("p"),$3r=o("Instantiate one of the base model classes of the library from a pretrained model."),k3r=l(),gn=a("p"),S3r=o("The model class to instantiate is selected based on the "),l6e=a("code"),R3r=o("model_type"),B3r=o(` property of the config object (either
passed as an argument or loaded from `),i6e=a("code"),P3r=o("pretrained_model_name_or_path"),I3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=a("code"),q3r=o("pretrained_model_name_or_path"),N3r=o(":"),j3r=l(),re=a("ul"),rE=a("li"),c6e=a("strong"),D3r=o("albert"),G3r=o(" \u2014 "),GU=a("a"),O3r=o("FlaxAlbertModel"),V3r=o(" (ALBERT model)"),X3r=l(),tE=a("li"),f6e=a("strong"),z3r=o("bart"),Q3r=o(" \u2014 "),OU=a("a"),W3r=o("FlaxBartModel"),H3r=o(" (BART model)"),U3r=l(),aE=a("li"),m6e=a("strong"),J3r=o("beit"),Y3r=o(" \u2014 "),VU=a("a"),K3r=o("FlaxBeitModel"),Z3r=o(" (BEiT model)"),ewr=l(),nE=a("li"),g6e=a("strong"),owr=o("bert"),rwr=o(" \u2014 "),XU=a("a"),twr=o("FlaxBertModel"),awr=o(" (BERT model)"),nwr=l(),sE=a("li"),h6e=a("strong"),swr=o("big_bird"),lwr=o(" \u2014 "),zU=a("a"),iwr=o("FlaxBigBirdModel"),dwr=o(" (BigBird model)"),cwr=l(),lE=a("li"),p6e=a("strong"),fwr=o("blenderbot"),mwr=o(" \u2014 "),QU=a("a"),gwr=o("FlaxBlenderbotModel"),hwr=o(" (Blenderbot model)"),pwr=l(),iE=a("li"),u6e=a("strong"),uwr=o("blenderbot-small"),_wr=o(" \u2014 "),WU=a("a"),bwr=o("FlaxBlenderbotSmallModel"),vwr=o(" (BlenderbotSmall model)"),Fwr=l(),dE=a("li"),_6e=a("strong"),Twr=o("clip"),Mwr=o(" \u2014 "),HU=a("a"),Ewr=o("FlaxCLIPModel"),Cwr=o(" (CLIP model)"),wwr=l(),cE=a("li"),b6e=a("strong"),Awr=o("distilbert"),ywr=o(" \u2014 "),UU=a("a"),Lwr=o("FlaxDistilBertModel"),xwr=o(" (DistilBERT model)"),$wr=l(),fE=a("li"),v6e=a("strong"),kwr=o("electra"),Swr=o(" \u2014 "),JU=a("a"),Rwr=o("FlaxElectraModel"),Bwr=o(" (ELECTRA model)"),Pwr=l(),mE=a("li"),F6e=a("strong"),Iwr=o("gpt2"),qwr=o(" \u2014 "),YU=a("a"),Nwr=o("FlaxGPT2Model"),jwr=o(" (OpenAI GPT-2 model)"),Dwr=l(),gE=a("li"),T6e=a("strong"),Gwr=o("gpt_neo"),Owr=o(" \u2014 "),KU=a("a"),Vwr=o("FlaxGPTNeoModel"),Xwr=o(" (GPT Neo model)"),zwr=l(),hE=a("li"),M6e=a("strong"),Qwr=o("gptj"),Wwr=o(" \u2014 "),ZU=a("a"),Hwr=o("FlaxGPTJModel"),Uwr=o(" (GPT-J model)"),Jwr=l(),pE=a("li"),E6e=a("strong"),Ywr=o("marian"),Kwr=o(" \u2014 "),eJ=a("a"),Zwr=o("FlaxMarianModel"),eAr=o(" (Marian model)"),oAr=l(),uE=a("li"),C6e=a("strong"),rAr=o("mbart"),tAr=o(" \u2014 "),oJ=a("a"),aAr=o("FlaxMBartModel"),nAr=o(" (mBART model)"),sAr=l(),_E=a("li"),w6e=a("strong"),lAr=o("mt5"),iAr=o(" \u2014 "),rJ=a("a"),dAr=o("FlaxMT5Model"),cAr=o(" (mT5 model)"),fAr=l(),bE=a("li"),A6e=a("strong"),mAr=o("pegasus"),gAr=o(" \u2014 "),tJ=a("a"),hAr=o("FlaxPegasusModel"),pAr=o(" (Pegasus model)"),uAr=l(),vE=a("li"),y6e=a("strong"),_Ar=o("roberta"),bAr=o(" \u2014 "),aJ=a("a"),vAr=o("FlaxRobertaModel"),FAr=o(" (RoBERTa model)"),TAr=l(),FE=a("li"),L6e=a("strong"),MAr=o("roformer"),EAr=o(" \u2014 "),nJ=a("a"),CAr=o("FlaxRoFormerModel"),wAr=o(" (RoFormer model)"),AAr=l(),TE=a("li"),x6e=a("strong"),yAr=o("t5"),LAr=o(" \u2014 "),sJ=a("a"),xAr=o("FlaxT5Model"),$Ar=o(" (T5 model)"),kAr=l(),ME=a("li"),$6e=a("strong"),SAr=o("vision-text-dual-encoder"),RAr=o(" \u2014 "),lJ=a("a"),BAr=o("FlaxVisionTextDualEncoderModel"),PAr=o(" (VisionTextDualEncoder model)"),IAr=l(),EE=a("li"),k6e=a("strong"),qAr=o("vit"),NAr=o(" \u2014 "),iJ=a("a"),jAr=o("FlaxViTModel"),DAr=o(" (ViT model)"),GAr=l(),CE=a("li"),S6e=a("strong"),OAr=o("wav2vec2"),VAr=o(" \u2014 "),dJ=a("a"),XAr=o("FlaxWav2Vec2Model"),zAr=o(" (Wav2Vec2 model)"),QAr=l(),wE=a("li"),R6e=a("strong"),WAr=o("xglm"),HAr=o(" \u2014 "),cJ=a("a"),UAr=o("FlaxXGLMModel"),JAr=o(" (XGLM model)"),YAr=l(),AE=a("li"),B6e=a("strong"),KAr=o("xlm-roberta"),ZAr=o(" \u2014 "),fJ=a("a"),eyr=o("FlaxXLMRobertaModel"),oyr=o(" (XLM-RoBERTa model)"),ryr=l(),F(yE.$$.fragment),Gqe=l(),$c=a("h2"),LE=a("a"),P6e=a("span"),F(ax.$$.fragment),tyr=l(),I6e=a("span"),ayr=o("FlaxAutoModelForCausalLM"),Oqe=l(),mr=a("div"),F(nx.$$.fragment),nyr=l(),kc=a("p"),syr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mJ=a("a"),lyr=o("from_pretrained()"),iyr=o(" class method or the "),gJ=a("a"),dyr=o("from_config()"),cyr=o(` class
method.`),fyr=l(),sx=a("p"),myr=o("This class cannot be instantiated directly using "),q6e=a("code"),gyr=o("__init__()"),hyr=o(" (throws an error)."),pyr=l(),Dt=a("div"),F(lx.$$.fragment),uyr=l(),N6e=a("p"),_yr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),byr=l(),Sc=a("p"),vyr=o(`Note:
Loading a model from its configuration file does `),j6e=a("strong"),Fyr=o("not"),Tyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),Myr=o("from_pretrained()"),Eyr=o(" to load the model weights."),Cyr=l(),F(xE.$$.fragment),wyr=l(),Dr=a("div"),F(ix.$$.fragment),Ayr=l(),D6e=a("p"),yyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lyr=l(),hn=a("p"),xyr=o("The model class to instantiate is selected based on the "),G6e=a("code"),$yr=o("model_type"),kyr=o(` property of the config object (either
passed as an argument or loaded from `),O6e=a("code"),Syr=o("pretrained_model_name_or_path"),Ryr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V6e=a("code"),Byr=o("pretrained_model_name_or_path"),Pyr=o(":"),Iyr=l(),ke=a("ul"),$E=a("li"),X6e=a("strong"),qyr=o("bart"),Nyr=o(" \u2014 "),pJ=a("a"),jyr=o("FlaxBartForCausalLM"),Dyr=o(" (BART model)"),Gyr=l(),kE=a("li"),z6e=a("strong"),Oyr=o("bert"),Vyr=o(" \u2014 "),uJ=a("a"),Xyr=o("FlaxBertForCausalLM"),zyr=o(" (BERT model)"),Qyr=l(),SE=a("li"),Q6e=a("strong"),Wyr=o("big_bird"),Hyr=o(" \u2014 "),_J=a("a"),Uyr=o("FlaxBigBirdForCausalLM"),Jyr=o(" (BigBird model)"),Yyr=l(),RE=a("li"),W6e=a("strong"),Kyr=o("electra"),Zyr=o(" \u2014 "),bJ=a("a"),eLr=o("FlaxElectraForCausalLM"),oLr=o(" (ELECTRA model)"),rLr=l(),BE=a("li"),H6e=a("strong"),tLr=o("gpt2"),aLr=o(" \u2014 "),vJ=a("a"),nLr=o("FlaxGPT2LMHeadModel"),sLr=o(" (OpenAI GPT-2 model)"),lLr=l(),PE=a("li"),U6e=a("strong"),iLr=o("gpt_neo"),dLr=o(" \u2014 "),FJ=a("a"),cLr=o("FlaxGPTNeoForCausalLM"),fLr=o(" (GPT Neo model)"),mLr=l(),IE=a("li"),J6e=a("strong"),gLr=o("gptj"),hLr=o(" \u2014 "),TJ=a("a"),pLr=o("FlaxGPTJForCausalLM"),uLr=o(" (GPT-J model)"),_Lr=l(),qE=a("li"),Y6e=a("strong"),bLr=o("roberta"),vLr=o(" \u2014 "),MJ=a("a"),FLr=o("FlaxRobertaForCausalLM"),TLr=o(" (RoBERTa model)"),MLr=l(),NE=a("li"),K6e=a("strong"),ELr=o("xglm"),CLr=o(" \u2014 "),EJ=a("a"),wLr=o("FlaxXGLMForCausalLM"),ALr=o(" (XGLM model)"),yLr=l(),F(jE.$$.fragment),Vqe=l(),Rc=a("h2"),DE=a("a"),Z6e=a("span"),F(dx.$$.fragment),LLr=l(),eTe=a("span"),xLr=o("FlaxAutoModelForPreTraining"),Xqe=l(),gr=a("div"),F(cx.$$.fragment),$Lr=l(),Bc=a("p"),kLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CJ=a("a"),SLr=o("from_pretrained()"),RLr=o(" class method or the "),wJ=a("a"),BLr=o("from_config()"),PLr=o(` class
method.`),ILr=l(),fx=a("p"),qLr=o("This class cannot be instantiated directly using "),oTe=a("code"),NLr=o("__init__()"),jLr=o(" (throws an error)."),DLr=l(),Gt=a("div"),F(mx.$$.fragment),GLr=l(),rTe=a("p"),OLr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VLr=l(),Pc=a("p"),XLr=o(`Note:
Loading a model from its configuration file does `),tTe=a("strong"),zLr=o("not"),QLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=a("a"),WLr=o("from_pretrained()"),HLr=o(" to load the model weights."),ULr=l(),F(GE.$$.fragment),JLr=l(),Gr=a("div"),F(gx.$$.fragment),YLr=l(),aTe=a("p"),KLr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZLr=l(),pn=a("p"),e8r=o("The model class to instantiate is selected based on the "),nTe=a("code"),o8r=o("model_type"),r8r=o(` property of the config object (either
passed as an argument or loaded from `),sTe=a("code"),t8r=o("pretrained_model_name_or_path"),a8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),n8r=o("pretrained_model_name_or_path"),s8r=o(":"),l8r=l(),Me=a("ul"),OE=a("li"),iTe=a("strong"),i8r=o("albert"),d8r=o(" \u2014 "),yJ=a("a"),c8r=o("FlaxAlbertForPreTraining"),f8r=o(" (ALBERT model)"),m8r=l(),VE=a("li"),dTe=a("strong"),g8r=o("bart"),h8r=o(" \u2014 "),LJ=a("a"),p8r=o("FlaxBartForConditionalGeneration"),u8r=o(" (BART model)"),_8r=l(),XE=a("li"),cTe=a("strong"),b8r=o("bert"),v8r=o(" \u2014 "),xJ=a("a"),F8r=o("FlaxBertForPreTraining"),T8r=o(" (BERT model)"),M8r=l(),zE=a("li"),fTe=a("strong"),E8r=o("big_bird"),C8r=o(" \u2014 "),$J=a("a"),w8r=o("FlaxBigBirdForPreTraining"),A8r=o(" (BigBird model)"),y8r=l(),QE=a("li"),mTe=a("strong"),L8r=o("electra"),x8r=o(" \u2014 "),kJ=a("a"),$8r=o("FlaxElectraForPreTraining"),k8r=o(" (ELECTRA model)"),S8r=l(),WE=a("li"),gTe=a("strong"),R8r=o("mbart"),B8r=o(" \u2014 "),SJ=a("a"),P8r=o("FlaxMBartForConditionalGeneration"),I8r=o(" (mBART model)"),q8r=l(),HE=a("li"),hTe=a("strong"),N8r=o("mt5"),j8r=o(" \u2014 "),RJ=a("a"),D8r=o("FlaxMT5ForConditionalGeneration"),G8r=o(" (mT5 model)"),O8r=l(),UE=a("li"),pTe=a("strong"),V8r=o("roberta"),X8r=o(" \u2014 "),BJ=a("a"),z8r=o("FlaxRobertaForMaskedLM"),Q8r=o(" (RoBERTa model)"),W8r=l(),JE=a("li"),uTe=a("strong"),H8r=o("roformer"),U8r=o(" \u2014 "),PJ=a("a"),J8r=o("FlaxRoFormerForMaskedLM"),Y8r=o(" (RoFormer model)"),K8r=l(),YE=a("li"),_Te=a("strong"),Z8r=o("t5"),exr=o(" \u2014 "),IJ=a("a"),oxr=o("FlaxT5ForConditionalGeneration"),rxr=o(" (T5 model)"),txr=l(),KE=a("li"),bTe=a("strong"),axr=o("wav2vec2"),nxr=o(" \u2014 "),qJ=a("a"),sxr=o("FlaxWav2Vec2ForPreTraining"),lxr=o(" (Wav2Vec2 model)"),ixr=l(),ZE=a("li"),vTe=a("strong"),dxr=o("xlm-roberta"),cxr=o(" \u2014 "),NJ=a("a"),fxr=o("FlaxXLMRobertaForMaskedLM"),mxr=o(" (XLM-RoBERTa model)"),gxr=l(),F(e5.$$.fragment),zqe=l(),Ic=a("h2"),o5=a("a"),FTe=a("span"),F(hx.$$.fragment),hxr=l(),TTe=a("span"),pxr=o("FlaxAutoModelForMaskedLM"),Qqe=l(),hr=a("div"),F(px.$$.fragment),uxr=l(),qc=a("p"),_xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jJ=a("a"),bxr=o("from_pretrained()"),vxr=o(" class method or the "),DJ=a("a"),Fxr=o("from_config()"),Txr=o(` class
method.`),Mxr=l(),ux=a("p"),Exr=o("This class cannot be instantiated directly using "),MTe=a("code"),Cxr=o("__init__()"),wxr=o(" (throws an error)."),Axr=l(),Ot=a("div"),F(_x.$$.fragment),yxr=l(),ETe=a("p"),Lxr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xxr=l(),Nc=a("p"),$xr=o(`Note:
Loading a model from its configuration file does `),CTe=a("strong"),kxr=o("not"),Sxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),Rxr=o("from_pretrained()"),Bxr=o(" to load the model weights."),Pxr=l(),F(r5.$$.fragment),Ixr=l(),Or=a("div"),F(bx.$$.fragment),qxr=l(),wTe=a("p"),Nxr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jxr=l(),un=a("p"),Dxr=o("The model class to instantiate is selected based on the "),ATe=a("code"),Gxr=o("model_type"),Oxr=o(` property of the config object (either
passed as an argument or loaded from `),yTe=a("code"),Vxr=o("pretrained_model_name_or_path"),Xxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=a("code"),zxr=o("pretrained_model_name_or_path"),Qxr=o(":"),Wxr=l(),Le=a("ul"),t5=a("li"),xTe=a("strong"),Hxr=o("albert"),Uxr=o(" \u2014 "),OJ=a("a"),Jxr=o("FlaxAlbertForMaskedLM"),Yxr=o(" (ALBERT model)"),Kxr=l(),a5=a("li"),$Te=a("strong"),Zxr=o("bart"),e9r=o(" \u2014 "),VJ=a("a"),o9r=o("FlaxBartForConditionalGeneration"),r9r=o(" (BART model)"),t9r=l(),n5=a("li"),kTe=a("strong"),a9r=o("bert"),n9r=o(" \u2014 "),XJ=a("a"),s9r=o("FlaxBertForMaskedLM"),l9r=o(" (BERT model)"),i9r=l(),s5=a("li"),STe=a("strong"),d9r=o("big_bird"),c9r=o(" \u2014 "),zJ=a("a"),f9r=o("FlaxBigBirdForMaskedLM"),m9r=o(" (BigBird model)"),g9r=l(),l5=a("li"),RTe=a("strong"),h9r=o("distilbert"),p9r=o(" \u2014 "),QJ=a("a"),u9r=o("FlaxDistilBertForMaskedLM"),_9r=o(" (DistilBERT model)"),b9r=l(),i5=a("li"),BTe=a("strong"),v9r=o("electra"),F9r=o(" \u2014 "),WJ=a("a"),T9r=o("FlaxElectraForMaskedLM"),M9r=o(" (ELECTRA model)"),E9r=l(),d5=a("li"),PTe=a("strong"),C9r=o("mbart"),w9r=o(" \u2014 "),HJ=a("a"),A9r=o("FlaxMBartForConditionalGeneration"),y9r=o(" (mBART model)"),L9r=l(),c5=a("li"),ITe=a("strong"),x9r=o("roberta"),$9r=o(" \u2014 "),UJ=a("a"),k9r=o("FlaxRobertaForMaskedLM"),S9r=o(" (RoBERTa model)"),R9r=l(),f5=a("li"),qTe=a("strong"),B9r=o("roformer"),P9r=o(" \u2014 "),JJ=a("a"),I9r=o("FlaxRoFormerForMaskedLM"),q9r=o(" (RoFormer model)"),N9r=l(),m5=a("li"),NTe=a("strong"),j9r=o("xlm-roberta"),D9r=o(" \u2014 "),YJ=a("a"),G9r=o("FlaxXLMRobertaForMaskedLM"),O9r=o(" (XLM-RoBERTa model)"),V9r=l(),F(g5.$$.fragment),Wqe=l(),jc=a("h2"),h5=a("a"),jTe=a("span"),F(vx.$$.fragment),X9r=l(),DTe=a("span"),z9r=o("FlaxAutoModelForSeq2SeqLM"),Hqe=l(),pr=a("div"),F(Fx.$$.fragment),Q9r=l(),Dc=a("p"),W9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KJ=a("a"),H9r=o("from_pretrained()"),U9r=o(" class method or the "),ZJ=a("a"),J9r=o("from_config()"),Y9r=o(` class
method.`),K9r=l(),Tx=a("p"),Z9r=o("This class cannot be instantiated directly using "),GTe=a("code"),e$r=o("__init__()"),o$r=o(" (throws an error)."),r$r=l(),Vt=a("div"),F(Mx.$$.fragment),t$r=l(),OTe=a("p"),a$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n$r=l(),Gc=a("p"),s$r=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),l$r=o("not"),i$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),d$r=o("from_pretrained()"),c$r=o(" to load the model weights."),f$r=l(),F(p5.$$.fragment),m$r=l(),Vr=a("div"),F(Ex.$$.fragment),g$r=l(),XTe=a("p"),h$r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p$r=l(),_n=a("p"),u$r=o("The model class to instantiate is selected based on the "),zTe=a("code"),_$r=o("model_type"),b$r=o(` property of the config object (either
passed as an argument or loaded from `),QTe=a("code"),v$r=o("pretrained_model_name_or_path"),F$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),T$r=o("pretrained_model_name_or_path"),M$r=o(":"),E$r=l(),Se=a("ul"),u5=a("li"),HTe=a("strong"),C$r=o("bart"),w$r=o(" \u2014 "),oY=a("a"),A$r=o("FlaxBartForConditionalGeneration"),y$r=o(" (BART model)"),L$r=l(),_5=a("li"),UTe=a("strong"),x$r=o("blenderbot"),$$r=o(" \u2014 "),rY=a("a"),k$r=o("FlaxBlenderbotForConditionalGeneration"),S$r=o(" (Blenderbot model)"),R$r=l(),b5=a("li"),JTe=a("strong"),B$r=o("blenderbot-small"),P$r=o(" \u2014 "),tY=a("a"),I$r=o("FlaxBlenderbotSmallForConditionalGeneration"),q$r=o(" (BlenderbotSmall model)"),N$r=l(),v5=a("li"),YTe=a("strong"),j$r=o("encoder-decoder"),D$r=o(" \u2014 "),aY=a("a"),G$r=o("FlaxEncoderDecoderModel"),O$r=o(" (Encoder decoder model)"),V$r=l(),F5=a("li"),KTe=a("strong"),X$r=o("marian"),z$r=o(" \u2014 "),nY=a("a"),Q$r=o("FlaxMarianMTModel"),W$r=o(" (Marian model)"),H$r=l(),T5=a("li"),ZTe=a("strong"),U$r=o("mbart"),J$r=o(" \u2014 "),sY=a("a"),Y$r=o("FlaxMBartForConditionalGeneration"),K$r=o(" (mBART model)"),Z$r=l(),M5=a("li"),e7e=a("strong"),ekr=o("mt5"),okr=o(" \u2014 "),lY=a("a"),rkr=o("FlaxMT5ForConditionalGeneration"),tkr=o(" (mT5 model)"),akr=l(),E5=a("li"),o7e=a("strong"),nkr=o("pegasus"),skr=o(" \u2014 "),iY=a("a"),lkr=o("FlaxPegasusForConditionalGeneration"),ikr=o(" (Pegasus model)"),dkr=l(),C5=a("li"),r7e=a("strong"),ckr=o("t5"),fkr=o(" \u2014 "),dY=a("a"),mkr=o("FlaxT5ForConditionalGeneration"),gkr=o(" (T5 model)"),hkr=l(),F(w5.$$.fragment),Uqe=l(),Oc=a("h2"),A5=a("a"),t7e=a("span"),F(Cx.$$.fragment),pkr=l(),a7e=a("span"),ukr=o("FlaxAutoModelForSequenceClassification"),Jqe=l(),ur=a("div"),F(wx.$$.fragment),_kr=l(),Vc=a("p"),bkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cY=a("a"),vkr=o("from_pretrained()"),Fkr=o(" class method or the "),fY=a("a"),Tkr=o("from_config()"),Mkr=o(` class
method.`),Ekr=l(),Ax=a("p"),Ckr=o("This class cannot be instantiated directly using "),n7e=a("code"),wkr=o("__init__()"),Akr=o(" (throws an error)."),ykr=l(),Xt=a("div"),F(yx.$$.fragment),Lkr=l(),s7e=a("p"),xkr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$kr=l(),Xc=a("p"),kkr=o(`Note:
Loading a model from its configuration file does `),l7e=a("strong"),Skr=o("not"),Rkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),Bkr=o("from_pretrained()"),Pkr=o(" to load the model weights."),Ikr=l(),F(y5.$$.fragment),qkr=l(),Xr=a("div"),F(Lx.$$.fragment),Nkr=l(),i7e=a("p"),jkr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Dkr=l(),bn=a("p"),Gkr=o("The model class to instantiate is selected based on the "),d7e=a("code"),Okr=o("model_type"),Vkr=o(` property of the config object (either
passed as an argument or loaded from `),c7e=a("code"),Xkr=o("pretrained_model_name_or_path"),zkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=a("code"),Qkr=o("pretrained_model_name_or_path"),Wkr=o(":"),Hkr=l(),xe=a("ul"),L5=a("li"),m7e=a("strong"),Ukr=o("albert"),Jkr=o(" \u2014 "),gY=a("a"),Ykr=o("FlaxAlbertForSequenceClassification"),Kkr=o(" (ALBERT model)"),Zkr=l(),x5=a("li"),g7e=a("strong"),eSr=o("bart"),oSr=o(" \u2014 "),hY=a("a"),rSr=o("FlaxBartForSequenceClassification"),tSr=o(" (BART model)"),aSr=l(),$5=a("li"),h7e=a("strong"),nSr=o("bert"),sSr=o(" \u2014 "),pY=a("a"),lSr=o("FlaxBertForSequenceClassification"),iSr=o(" (BERT model)"),dSr=l(),k5=a("li"),p7e=a("strong"),cSr=o("big_bird"),fSr=o(" \u2014 "),uY=a("a"),mSr=o("FlaxBigBirdForSequenceClassification"),gSr=o(" (BigBird model)"),hSr=l(),S5=a("li"),u7e=a("strong"),pSr=o("distilbert"),uSr=o(" \u2014 "),_Y=a("a"),_Sr=o("FlaxDistilBertForSequenceClassification"),bSr=o(" (DistilBERT model)"),vSr=l(),R5=a("li"),_7e=a("strong"),FSr=o("electra"),TSr=o(" \u2014 "),bY=a("a"),MSr=o("FlaxElectraForSequenceClassification"),ESr=o(" (ELECTRA model)"),CSr=l(),B5=a("li"),b7e=a("strong"),wSr=o("mbart"),ASr=o(" \u2014 "),vY=a("a"),ySr=o("FlaxMBartForSequenceClassification"),LSr=o(" (mBART model)"),xSr=l(),P5=a("li"),v7e=a("strong"),$Sr=o("roberta"),kSr=o(" \u2014 "),FY=a("a"),SSr=o("FlaxRobertaForSequenceClassification"),RSr=o(" (RoBERTa model)"),BSr=l(),I5=a("li"),F7e=a("strong"),PSr=o("roformer"),ISr=o(" \u2014 "),TY=a("a"),qSr=o("FlaxRoFormerForSequenceClassification"),NSr=o(" (RoFormer model)"),jSr=l(),q5=a("li"),T7e=a("strong"),DSr=o("xlm-roberta"),GSr=o(" \u2014 "),MY=a("a"),OSr=o("FlaxXLMRobertaForSequenceClassification"),VSr=o(" (XLM-RoBERTa model)"),XSr=l(),F(N5.$$.fragment),Yqe=l(),zc=a("h2"),j5=a("a"),M7e=a("span"),F(xx.$$.fragment),zSr=l(),E7e=a("span"),QSr=o("FlaxAutoModelForQuestionAnswering"),Kqe=l(),_r=a("div"),F($x.$$.fragment),WSr=l(),Qc=a("p"),HSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EY=a("a"),USr=o("from_pretrained()"),JSr=o(" class method or the "),CY=a("a"),YSr=o("from_config()"),KSr=o(` class
method.`),ZSr=l(),kx=a("p"),eRr=o("This class cannot be instantiated directly using "),C7e=a("code"),oRr=o("__init__()"),rRr=o(" (throws an error)."),tRr=l(),zt=a("div"),F(Sx.$$.fragment),aRr=l(),w7e=a("p"),nRr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sRr=l(),Wc=a("p"),lRr=o(`Note:
Loading a model from its configuration file does `),A7e=a("strong"),iRr=o("not"),dRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),cRr=o("from_pretrained()"),fRr=o(" to load the model weights."),mRr=l(),F(D5.$$.fragment),gRr=l(),zr=a("div"),F(Rx.$$.fragment),hRr=l(),y7e=a("p"),pRr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uRr=l(),vn=a("p"),_Rr=o("The model class to instantiate is selected based on the "),L7e=a("code"),bRr=o("model_type"),vRr=o(` property of the config object (either
passed as an argument or loaded from `),x7e=a("code"),FRr=o("pretrained_model_name_or_path"),TRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=a("code"),MRr=o("pretrained_model_name_or_path"),ERr=o(":"),CRr=l(),$e=a("ul"),G5=a("li"),k7e=a("strong"),wRr=o("albert"),ARr=o(" \u2014 "),AY=a("a"),yRr=o("FlaxAlbertForQuestionAnswering"),LRr=o(" (ALBERT model)"),xRr=l(),O5=a("li"),S7e=a("strong"),$Rr=o("bart"),kRr=o(" \u2014 "),yY=a("a"),SRr=o("FlaxBartForQuestionAnswering"),RRr=o(" (BART model)"),BRr=l(),V5=a("li"),R7e=a("strong"),PRr=o("bert"),IRr=o(" \u2014 "),LY=a("a"),qRr=o("FlaxBertForQuestionAnswering"),NRr=o(" (BERT model)"),jRr=l(),X5=a("li"),B7e=a("strong"),DRr=o("big_bird"),GRr=o(" \u2014 "),xY=a("a"),ORr=o("FlaxBigBirdForQuestionAnswering"),VRr=o(" (BigBird model)"),XRr=l(),z5=a("li"),P7e=a("strong"),zRr=o("distilbert"),QRr=o(" \u2014 "),$Y=a("a"),WRr=o("FlaxDistilBertForQuestionAnswering"),HRr=o(" (DistilBERT model)"),URr=l(),Q5=a("li"),I7e=a("strong"),JRr=o("electra"),YRr=o(" \u2014 "),kY=a("a"),KRr=o("FlaxElectraForQuestionAnswering"),ZRr=o(" (ELECTRA model)"),eBr=l(),W5=a("li"),q7e=a("strong"),oBr=o("mbart"),rBr=o(" \u2014 "),SY=a("a"),tBr=o("FlaxMBartForQuestionAnswering"),aBr=o(" (mBART model)"),nBr=l(),H5=a("li"),N7e=a("strong"),sBr=o("roberta"),lBr=o(" \u2014 "),RY=a("a"),iBr=o("FlaxRobertaForQuestionAnswering"),dBr=o(" (RoBERTa model)"),cBr=l(),U5=a("li"),j7e=a("strong"),fBr=o("roformer"),mBr=o(" \u2014 "),BY=a("a"),gBr=o("FlaxRoFormerForQuestionAnswering"),hBr=o(" (RoFormer model)"),pBr=l(),J5=a("li"),D7e=a("strong"),uBr=o("xlm-roberta"),_Br=o(" \u2014 "),PY=a("a"),bBr=o("FlaxXLMRobertaForQuestionAnswering"),vBr=o(" (XLM-RoBERTa model)"),FBr=l(),F(Y5.$$.fragment),Zqe=l(),Hc=a("h2"),K5=a("a"),G7e=a("span"),F(Bx.$$.fragment),TBr=l(),O7e=a("span"),MBr=o("FlaxAutoModelForTokenClassification"),eNe=l(),br=a("div"),F(Px.$$.fragment),EBr=l(),Uc=a("p"),CBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IY=a("a"),wBr=o("from_pretrained()"),ABr=o(" class method or the "),qY=a("a"),yBr=o("from_config()"),LBr=o(` class
method.`),xBr=l(),Ix=a("p"),$Br=o("This class cannot be instantiated directly using "),V7e=a("code"),kBr=o("__init__()"),SBr=o(" (throws an error)."),RBr=l(),Qt=a("div"),F(qx.$$.fragment),BBr=l(),X7e=a("p"),PBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IBr=l(),Jc=a("p"),qBr=o(`Note:
Loading a model from its configuration file does `),z7e=a("strong"),NBr=o("not"),jBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),DBr=o("from_pretrained()"),GBr=o(" to load the model weights."),OBr=l(),F(Z5.$$.fragment),VBr=l(),Qr=a("div"),F(Nx.$$.fragment),XBr=l(),Q7e=a("p"),zBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QBr=l(),Fn=a("p"),WBr=o("The model class to instantiate is selected based on the "),W7e=a("code"),HBr=o("model_type"),UBr=o(` property of the config object (either
passed as an argument or loaded from `),H7e=a("code"),JBr=o("pretrained_model_name_or_path"),YBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U7e=a("code"),KBr=o("pretrained_model_name_or_path"),ZBr=o(":"),ePr=l(),De=a("ul"),eC=a("li"),J7e=a("strong"),oPr=o("albert"),rPr=o(" \u2014 "),jY=a("a"),tPr=o("FlaxAlbertForTokenClassification"),aPr=o(" (ALBERT model)"),nPr=l(),oC=a("li"),Y7e=a("strong"),sPr=o("bert"),lPr=o(" \u2014 "),DY=a("a"),iPr=o("FlaxBertForTokenClassification"),dPr=o(" (BERT model)"),cPr=l(),rC=a("li"),K7e=a("strong"),fPr=o("big_bird"),mPr=o(" \u2014 "),GY=a("a"),gPr=o("FlaxBigBirdForTokenClassification"),hPr=o(" (BigBird model)"),pPr=l(),tC=a("li"),Z7e=a("strong"),uPr=o("distilbert"),_Pr=o(" \u2014 "),OY=a("a"),bPr=o("FlaxDistilBertForTokenClassification"),vPr=o(" (DistilBERT model)"),FPr=l(),aC=a("li"),eMe=a("strong"),TPr=o("electra"),MPr=o(" \u2014 "),VY=a("a"),EPr=o("FlaxElectraForTokenClassification"),CPr=o(" (ELECTRA model)"),wPr=l(),nC=a("li"),oMe=a("strong"),APr=o("roberta"),yPr=o(" \u2014 "),XY=a("a"),LPr=o("FlaxRobertaForTokenClassification"),xPr=o(" (RoBERTa model)"),$Pr=l(),sC=a("li"),rMe=a("strong"),kPr=o("roformer"),SPr=o(" \u2014 "),zY=a("a"),RPr=o("FlaxRoFormerForTokenClassification"),BPr=o(" (RoFormer model)"),PPr=l(),lC=a("li"),tMe=a("strong"),IPr=o("xlm-roberta"),qPr=o(" \u2014 "),QY=a("a"),NPr=o("FlaxXLMRobertaForTokenClassification"),jPr=o(" (XLM-RoBERTa model)"),DPr=l(),F(iC.$$.fragment),oNe=l(),Yc=a("h2"),dC=a("a"),aMe=a("span"),F(jx.$$.fragment),GPr=l(),nMe=a("span"),OPr=o("FlaxAutoModelForMultipleChoice"),rNe=l(),vr=a("div"),F(Dx.$$.fragment),VPr=l(),Kc=a("p"),XPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WY=a("a"),zPr=o("from_pretrained()"),QPr=o(" class method or the "),HY=a("a"),WPr=o("from_config()"),HPr=o(` class
method.`),UPr=l(),Gx=a("p"),JPr=o("This class cannot be instantiated directly using "),sMe=a("code"),YPr=o("__init__()"),KPr=o(" (throws an error)."),ZPr=l(),Wt=a("div"),F(Ox.$$.fragment),eIr=l(),lMe=a("p"),oIr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rIr=l(),Zc=a("p"),tIr=o(`Note:
Loading a model from its configuration file does `),iMe=a("strong"),aIr=o("not"),nIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),sIr=o("from_pretrained()"),lIr=o(" to load the model weights."),iIr=l(),F(cC.$$.fragment),dIr=l(),Wr=a("div"),F(Vx.$$.fragment),cIr=l(),dMe=a("p"),fIr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mIr=l(),Tn=a("p"),gIr=o("The model class to instantiate is selected based on the "),cMe=a("code"),hIr=o("model_type"),pIr=o(` property of the config object (either
passed as an argument or loaded from `),fMe=a("code"),uIr=o("pretrained_model_name_or_path"),_Ir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),bIr=o("pretrained_model_name_or_path"),vIr=o(":"),FIr=l(),Ge=a("ul"),fC=a("li"),gMe=a("strong"),TIr=o("albert"),MIr=o(" \u2014 "),JY=a("a"),EIr=o("FlaxAlbertForMultipleChoice"),CIr=o(" (ALBERT model)"),wIr=l(),mC=a("li"),hMe=a("strong"),AIr=o("bert"),yIr=o(" \u2014 "),YY=a("a"),LIr=o("FlaxBertForMultipleChoice"),xIr=o(" (BERT model)"),$Ir=l(),gC=a("li"),pMe=a("strong"),kIr=o("big_bird"),SIr=o(" \u2014 "),KY=a("a"),RIr=o("FlaxBigBirdForMultipleChoice"),BIr=o(" (BigBird model)"),PIr=l(),hC=a("li"),uMe=a("strong"),IIr=o("distilbert"),qIr=o(" \u2014 "),ZY=a("a"),NIr=o("FlaxDistilBertForMultipleChoice"),jIr=o(" (DistilBERT model)"),DIr=l(),pC=a("li"),_Me=a("strong"),GIr=o("electra"),OIr=o(" \u2014 "),eK=a("a"),VIr=o("FlaxElectraForMultipleChoice"),XIr=o(" (ELECTRA model)"),zIr=l(),uC=a("li"),bMe=a("strong"),QIr=o("roberta"),WIr=o(" \u2014 "),oK=a("a"),HIr=o("FlaxRobertaForMultipleChoice"),UIr=o(" (RoBERTa model)"),JIr=l(),_C=a("li"),vMe=a("strong"),YIr=o("roformer"),KIr=o(" \u2014 "),rK=a("a"),ZIr=o("FlaxRoFormerForMultipleChoice"),eqr=o(" (RoFormer model)"),oqr=l(),bC=a("li"),FMe=a("strong"),rqr=o("xlm-roberta"),tqr=o(" \u2014 "),tK=a("a"),aqr=o("FlaxXLMRobertaForMultipleChoice"),nqr=o(" (XLM-RoBERTa model)"),sqr=l(),F(vC.$$.fragment),tNe=l(),ef=a("h2"),FC=a("a"),TMe=a("span"),F(Xx.$$.fragment),lqr=l(),MMe=a("span"),iqr=o("FlaxAutoModelForNextSentencePrediction"),aNe=l(),Fr=a("div"),F(zx.$$.fragment),dqr=l(),of=a("p"),cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aK=a("a"),fqr=o("from_pretrained()"),mqr=o(" class method or the "),nK=a("a"),gqr=o("from_config()"),hqr=o(` class
method.`),pqr=l(),Qx=a("p"),uqr=o("This class cannot be instantiated directly using "),EMe=a("code"),_qr=o("__init__()"),bqr=o(" (throws an error)."),vqr=l(),Ht=a("div"),F(Wx.$$.fragment),Fqr=l(),CMe=a("p"),Tqr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mqr=l(),rf=a("p"),Eqr=o(`Note:
Loading a model from its configuration file does `),wMe=a("strong"),Cqr=o("not"),wqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),Aqr=o("from_pretrained()"),yqr=o(" to load the model weights."),Lqr=l(),F(TC.$$.fragment),xqr=l(),Hr=a("div"),F(Hx.$$.fragment),$qr=l(),AMe=a("p"),kqr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Sqr=l(),Mn=a("p"),Rqr=o("The model class to instantiate is selected based on the "),yMe=a("code"),Bqr=o("model_type"),Pqr=o(` property of the config object (either
passed as an argument or loaded from `),LMe=a("code"),Iqr=o("pretrained_model_name_or_path"),qqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=a("code"),Nqr=o("pretrained_model_name_or_path"),jqr=o(":"),Dqr=l(),$Me=a("ul"),MC=a("li"),kMe=a("strong"),Gqr=o("bert"),Oqr=o(" \u2014 "),lK=a("a"),Vqr=o("FlaxBertForNextSentencePrediction"),Xqr=o(" (BERT model)"),zqr=l(),F(EC.$$.fragment),nNe=l(),tf=a("h2"),CC=a("a"),SMe=a("span"),F(Ux.$$.fragment),Qqr=l(),RMe=a("span"),Wqr=o("FlaxAutoModelForImageClassification"),sNe=l(),Tr=a("div"),F(Jx.$$.fragment),Hqr=l(),af=a("p"),Uqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iK=a("a"),Jqr=o("from_pretrained()"),Yqr=o(" class method or the "),dK=a("a"),Kqr=o("from_config()"),Zqr=o(` class
method.`),eNr=l(),Yx=a("p"),oNr=o("This class cannot be instantiated directly using "),BMe=a("code"),rNr=o("__init__()"),tNr=o(" (throws an error)."),aNr=l(),Ut=a("div"),F(Kx.$$.fragment),nNr=l(),PMe=a("p"),sNr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lNr=l(),nf=a("p"),iNr=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),dNr=o("not"),cNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),fNr=o("from_pretrained()"),mNr=o(" to load the model weights."),gNr=l(),F(wC.$$.fragment),hNr=l(),Ur=a("div"),F(Zx.$$.fragment),pNr=l(),qMe=a("p"),uNr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Nr=l(),En=a("p"),bNr=o("The model class to instantiate is selected based on the "),NMe=a("code"),vNr=o("model_type"),FNr=o(` property of the config object (either
passed as an argument or loaded from `),jMe=a("code"),TNr=o("pretrained_model_name_or_path"),MNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=a("code"),ENr=o("pretrained_model_name_or_path"),CNr=o(":"),wNr=l(),e9=a("ul"),AC=a("li"),GMe=a("strong"),ANr=o("beit"),yNr=o(" \u2014 "),fK=a("a"),LNr=o("FlaxBeitForImageClassification"),xNr=o(" (BEiT model)"),$Nr=l(),yC=a("li"),OMe=a("strong"),kNr=o("vit"),SNr=o(" \u2014 "),mK=a("a"),RNr=o("FlaxViTForImageClassification"),BNr=o(" (ViT model)"),PNr=l(),F(LC.$$.fragment),lNe=l(),sf=a("h2"),xC=a("a"),VMe=a("span"),F(o9.$$.fragment),INr=l(),XMe=a("span"),qNr=o("FlaxAutoModelForVision2Seq"),iNe=l(),Mr=a("div"),F(r9.$$.fragment),NNr=l(),lf=a("p"),jNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gK=a("a"),DNr=o("from_pretrained()"),GNr=o(" class method or the "),hK=a("a"),ONr=o("from_config()"),VNr=o(` class
method.`),XNr=l(),t9=a("p"),zNr=o("This class cannot be instantiated directly using "),zMe=a("code"),QNr=o("__init__()"),WNr=o(" (throws an error)."),HNr=l(),Jt=a("div"),F(a9.$$.fragment),UNr=l(),QMe=a("p"),JNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YNr=l(),df=a("p"),KNr=o(`Note:
Loading a model from its configuration file does `),WMe=a("strong"),ZNr=o("not"),ejr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),ojr=o("from_pretrained()"),rjr=o(" to load the model weights."),tjr=l(),F($C.$$.fragment),ajr=l(),Jr=a("div"),F(n9.$$.fragment),njr=l(),HMe=a("p"),sjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ljr=l(),Cn=a("p"),ijr=o("The model class to instantiate is selected based on the "),UMe=a("code"),djr=o("model_type"),cjr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),fjr=o("pretrained_model_name_or_path"),mjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),gjr=o("pretrained_model_name_or_path"),hjr=o(":"),pjr=l(),KMe=a("ul"),kC=a("li"),ZMe=a("strong"),ujr=o("vision-encoder-decoder"),_jr=o(" \u2014 "),uK=a("a"),bjr=o("FlaxVisionEncoderDecoderModel"),vjr=o(" (Vision Encoder decoder model)"),Fjr=l(),F(SC.$$.fragment),this.h()},l(f){const _=ayt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var s9=s(p);m=n(s9,"A",{id:!0,class:!0,href:!0});var e4e=s(m);u=n(e4e,"SPAN",{});var o4e=s(u);T(d.$$.fragment,o4e),o4e.forEach(t),e4e.forEach(t),h=i(s9),Mo=n(s9,"SPAN",{});var r4e=s(Mo);ii=r(r4e,"Auto Classes"),r4e.forEach(t),s9.forEach(t),gf=i(f),et=n(f,"P",{});var l9=s(et);di=r(l9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(l9,"CODE",{});var t4e=s(ci);Yw=r(t4e,"from_pretrained()"),t4e.forEach(t),hf=r(l9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),l9.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);fi=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var a4e=s(An);Kw=r(a4e,"AutoConfig"),a4e.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var n4e=s(Ln);Zw=r(n4e,"AutoModel"),n4e.forEach(t),mi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var s4e=s(xn);eA=r(s4e,"AutoTokenizer"),s4e.forEach(t),gi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),pf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var i9=s(Ae);v$=r(i9,"will create a model that is an instance of "),hi=n(i9,"A",{href:!0});var l4e=s(hi);F$=r(l4e,"BertModel"),l4e.forEach(t),T$=r(i9,"."),i9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var d9=s(Ea);M$=r(d9,"There is one class of "),uf=n(d9,"CODE",{});var i4e=s(uf);E$=r(i4e,"AutoModel"),i4e.forEach(t),_De=r(d9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),d9.forEach(t),sIe=i(f),pi=n(f,"H2",{class:!0});var c9=s(pi);_f=n(c9,"A",{id:!0,class:!0,href:!0});var d4e=s(_f);cee=n(d4e,"SPAN",{});var c4e=s(cee);T(oA.$$.fragment,c4e),c4e.forEach(t),d4e.forEach(t),bDe=i(c9),fee=n(c9,"SPAN",{});var f4e=s(fee);vDe=r(f4e,"Extending the Auto Classes"),f4e.forEach(t),c9.forEach(t),lIe=i(f),$n=n(f,"P",{});var cf=s($n);FDe=r(cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),mee=n(cf,"CODE",{});var m4e=s(mee);TDe=r(m4e,"NewModel"),m4e.forEach(t),MDe=r(cf,", make sure you have a "),gee=n(cf,"CODE",{});var g4e=s(gee);EDe=r(g4e,"NewModelConfig"),g4e.forEach(t),CDe=r(cf,` then you can add those to the auto
classes like this:`),cf.forEach(t),iIe=i(f),T(rA.$$.fragment,f),dIe=i(f),C$=n(f,"P",{});var h4e=s(C$);wDe=r(h4e,"You will then be able to use the auto classes like you would usually do!"),h4e.forEach(t),cIe=i(f),T(bf.$$.fragment,f),fIe=i(f),ui=n(f,"H2",{class:!0});var f9=s(ui);vf=n(f9,"A",{id:!0,class:!0,href:!0});var p4e=s(vf);hee=n(p4e,"SPAN",{});var u4e=s(hee);T(tA.$$.fragment,u4e),u4e.forEach(t),p4e.forEach(t),ADe=i(f9),pee=n(f9,"SPAN",{});var _4e=s(pee);yDe=r(_4e,"AutoConfig"),_4e.forEach(t),f9.forEach(t),mIe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(aA.$$.fragment,Kr),LDe=i(Kr),nA=n(Kr,"P",{});var m9=s(nA);xDe=r(m9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),w$=n(m9,"A",{href:!0});var b4e=s(w$);$De=r(b4e,"from_pretrained()"),b4e.forEach(t),kDe=r(m9," class method."),m9.forEach(t),SDe=i(Kr),sA=n(Kr,"P",{});var g9=s(sA);RDe=r(g9,"This class cannot be instantiated directly using "),uee=n(g9,"CODE",{});var v4e=s(uee);BDe=r(v4e,"__init__()"),v4e.forEach(t),PDe=r(g9," (throws an error)."),g9.forEach(t),IDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(lA.$$.fragment,Zr),qDe=i(Zr),_ee=n(Zr,"P",{});var F4e=s(_ee);NDe=r(F4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),F4e.forEach(t),jDe=i(Zr),_i=n(Zr,"P",{});var ff=s(_i);DDe=r(ff,"The configuration class to instantiate is selected based on the "),bee=n(ff,"CODE",{});var T4e=s(bee);GDe=r(T4e,"model_type"),T4e.forEach(t),ODe=r(ff,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),vee=n(ff,"CODE",{});var M4e=s(vee);VDe=r(M4e,"pretrained_model_name_or_path"),M4e.forEach(t),XDe=r(ff,":"),ff.forEach(t),zDe=i(Zr),A=n(Zr,"UL",{});var y=s(A);Ff=n(y,"LI",{});var RC=s(Ff);Fee=n(RC,"STRONG",{});var E4e=s(Fee);QDe=r(E4e,"albert"),E4e.forEach(t),WDe=r(RC," \u2014 "),A$=n(RC,"A",{href:!0});var C4e=s(A$);HDe=r(C4e,"AlbertConfig"),C4e.forEach(t),UDe=r(RC," (ALBERT model)"),RC.forEach(t),JDe=i(y),Tf=n(y,"LI",{});var BC=s(Tf);Tee=n(BC,"STRONG",{});var w4e=s(Tee);YDe=r(w4e,"bart"),w4e.forEach(t),KDe=r(BC," \u2014 "),y$=n(BC,"A",{href:!0});var A4e=s(y$);ZDe=r(A4e,"BartConfig"),A4e.forEach(t),eGe=r(BC," (BART model)"),BC.forEach(t),oGe=i(y),Mf=n(y,"LI",{});var PC=s(Mf);Mee=n(PC,"STRONG",{});var y4e=s(Mee);rGe=r(y4e,"beit"),y4e.forEach(t),tGe=r(PC," \u2014 "),L$=n(PC,"A",{href:!0});var L4e=s(L$);aGe=r(L4e,"BeitConfig"),L4e.forEach(t),nGe=r(PC," (BEiT model)"),PC.forEach(t),sGe=i(y),Ef=n(y,"LI",{});var IC=s(Ef);Eee=n(IC,"STRONG",{});var x4e=s(Eee);lGe=r(x4e,"bert"),x4e.forEach(t),iGe=r(IC," \u2014 "),x$=n(IC,"A",{href:!0});var $4e=s(x$);dGe=r($4e,"BertConfig"),$4e.forEach(t),cGe=r(IC," (BERT model)"),IC.forEach(t),fGe=i(y),Cf=n(y,"LI",{});var qC=s(Cf);Cee=n(qC,"STRONG",{});var k4e=s(Cee);mGe=r(k4e,"bert-generation"),k4e.forEach(t),gGe=r(qC," \u2014 "),$$=n(qC,"A",{href:!0});var S4e=s($$);hGe=r(S4e,"BertGenerationConfig"),S4e.forEach(t),pGe=r(qC," (Bert Generation model)"),qC.forEach(t),uGe=i(y),wf=n(y,"LI",{});var NC=s(wf);wee=n(NC,"STRONG",{});var R4e=s(wee);_Ge=r(R4e,"big_bird"),R4e.forEach(t),bGe=r(NC," \u2014 "),k$=n(NC,"A",{href:!0});var B4e=s(k$);vGe=r(B4e,"BigBirdConfig"),B4e.forEach(t),FGe=r(NC," (BigBird model)"),NC.forEach(t),TGe=i(y),Af=n(y,"LI",{});var jC=s(Af);Aee=n(jC,"STRONG",{});var P4e=s(Aee);MGe=r(P4e,"bigbird_pegasus"),P4e.forEach(t),EGe=r(jC," \u2014 "),S$=n(jC,"A",{href:!0});var I4e=s(S$);CGe=r(I4e,"BigBirdPegasusConfig"),I4e.forEach(t),wGe=r(jC," (BigBirdPegasus model)"),jC.forEach(t),AGe=i(y),yf=n(y,"LI",{});var DC=s(yf);yee=n(DC,"STRONG",{});var q4e=s(yee);yGe=r(q4e,"blenderbot"),q4e.forEach(t),LGe=r(DC," \u2014 "),R$=n(DC,"A",{href:!0});var N4e=s(R$);xGe=r(N4e,"BlenderbotConfig"),N4e.forEach(t),$Ge=r(DC," (Blenderbot model)"),DC.forEach(t),kGe=i(y),Lf=n(y,"LI",{});var GC=s(Lf);Lee=n(GC,"STRONG",{});var j4e=s(Lee);SGe=r(j4e,"blenderbot-small"),j4e.forEach(t),RGe=r(GC," \u2014 "),B$=n(GC,"A",{href:!0});var D4e=s(B$);BGe=r(D4e,"BlenderbotSmallConfig"),D4e.forEach(t),PGe=r(GC," (BlenderbotSmall model)"),GC.forEach(t),IGe=i(y),xf=n(y,"LI",{});var OC=s(xf);xee=n(OC,"STRONG",{});var G4e=s(xee);qGe=r(G4e,"camembert"),G4e.forEach(t),NGe=r(OC," \u2014 "),P$=n(OC,"A",{href:!0});var O4e=s(P$);jGe=r(O4e,"CamembertConfig"),O4e.forEach(t),DGe=r(OC," (CamemBERT model)"),OC.forEach(t),GGe=i(y),$f=n(y,"LI",{});var VC=s($f);$ee=n(VC,"STRONG",{});var V4e=s($ee);OGe=r(V4e,"canine"),V4e.forEach(t),VGe=r(VC," \u2014 "),I$=n(VC,"A",{href:!0});var X4e=s(I$);XGe=r(X4e,"CanineConfig"),X4e.forEach(t),zGe=r(VC," (Canine model)"),VC.forEach(t),QGe=i(y),kf=n(y,"LI",{});var XC=s(kf);kee=n(XC,"STRONG",{});var z4e=s(kee);WGe=r(z4e,"clip"),z4e.forEach(t),HGe=r(XC," \u2014 "),q$=n(XC,"A",{href:!0});var Q4e=s(q$);UGe=r(Q4e,"CLIPConfig"),Q4e.forEach(t),JGe=r(XC," (CLIP model)"),XC.forEach(t),YGe=i(y),Sf=n(y,"LI",{});var zC=s(Sf);See=n(zC,"STRONG",{});var W4e=s(See);KGe=r(W4e,"convbert"),W4e.forEach(t),ZGe=r(zC," \u2014 "),N$=n(zC,"A",{href:!0});var H4e=s(N$);eOe=r(H4e,"ConvBertConfig"),H4e.forEach(t),oOe=r(zC," (ConvBERT model)"),zC.forEach(t),rOe=i(y),Rf=n(y,"LI",{});var QC=s(Rf);Ree=n(QC,"STRONG",{});var U4e=s(Ree);tOe=r(U4e,"convnext"),U4e.forEach(t),aOe=r(QC," \u2014 "),j$=n(QC,"A",{href:!0});var J4e=s(j$);nOe=r(J4e,"ConvNextConfig"),J4e.forEach(t),sOe=r(QC," (ConvNext model)"),QC.forEach(t),lOe=i(y),Bf=n(y,"LI",{});var WC=s(Bf);Bee=n(WC,"STRONG",{});var Y4e=s(Bee);iOe=r(Y4e,"ctrl"),Y4e.forEach(t),dOe=r(WC," \u2014 "),D$=n(WC,"A",{href:!0});var K4e=s(D$);cOe=r(K4e,"CTRLConfig"),K4e.forEach(t),fOe=r(WC," (CTRL model)"),WC.forEach(t),mOe=i(y),Pf=n(y,"LI",{});var HC=s(Pf);Pee=n(HC,"STRONG",{});var Z4e=s(Pee);gOe=r(Z4e,"data2vec-audio"),Z4e.forEach(t),hOe=r(HC," \u2014 "),G$=n(HC,"A",{href:!0});var eEe=s(G$);pOe=r(eEe,"Data2VecAudioConfig"),eEe.forEach(t),uOe=r(HC," (Data2VecAudio model)"),HC.forEach(t),_Oe=i(y),If=n(y,"LI",{});var UC=s(If);Iee=n(UC,"STRONG",{});var oEe=s(Iee);bOe=r(oEe,"data2vec-text"),oEe.forEach(t),vOe=r(UC," \u2014 "),O$=n(UC,"A",{href:!0});var rEe=s(O$);FOe=r(rEe,"Data2VecTextConfig"),rEe.forEach(t),TOe=r(UC," (Data2VecText model)"),UC.forEach(t),MOe=i(y),qf=n(y,"LI",{});var JC=s(qf);qee=n(JC,"STRONG",{});var tEe=s(qee);EOe=r(tEe,"data2vec-vision"),tEe.forEach(t),COe=r(JC," \u2014 "),V$=n(JC,"A",{href:!0});var aEe=s(V$);wOe=r(aEe,"Data2VecVisionConfig"),aEe.forEach(t),AOe=r(JC," (Data2VecVision model)"),JC.forEach(t),yOe=i(y),Nf=n(y,"LI",{});var YC=s(Nf);Nee=n(YC,"STRONG",{});var nEe=s(Nee);LOe=r(nEe,"deberta"),nEe.forEach(t),xOe=r(YC," \u2014 "),X$=n(YC,"A",{href:!0});var sEe=s(X$);$Oe=r(sEe,"DebertaConfig"),sEe.forEach(t),kOe=r(YC," (DeBERTa model)"),YC.forEach(t),SOe=i(y),jf=n(y,"LI",{});var KC=s(jf);jee=n(KC,"STRONG",{});var lEe=s(jee);ROe=r(lEe,"deberta-v2"),lEe.forEach(t),BOe=r(KC," \u2014 "),z$=n(KC,"A",{href:!0});var iEe=s(z$);POe=r(iEe,"DebertaV2Config"),iEe.forEach(t),IOe=r(KC," (DeBERTa-v2 model)"),KC.forEach(t),qOe=i(y),Df=n(y,"LI",{});var ZC=s(Df);Dee=n(ZC,"STRONG",{});var dEe=s(Dee);NOe=r(dEe,"decision_transformer"),dEe.forEach(t),jOe=r(ZC," \u2014 "),Q$=n(ZC,"A",{href:!0});var cEe=s(Q$);DOe=r(cEe,"DecisionTransformerConfig"),cEe.forEach(t),GOe=r(ZC," (Decision Transformer model)"),ZC.forEach(t),OOe=i(y),Gf=n(y,"LI",{});var e3=s(Gf);Gee=n(e3,"STRONG",{});var fEe=s(Gee);VOe=r(fEe,"deit"),fEe.forEach(t),XOe=r(e3," \u2014 "),W$=n(e3,"A",{href:!0});var mEe=s(W$);zOe=r(mEe,"DeiTConfig"),mEe.forEach(t),QOe=r(e3," (DeiT model)"),e3.forEach(t),WOe=i(y),Of=n(y,"LI",{});var o3=s(Of);Oee=n(o3,"STRONG",{});var gEe=s(Oee);HOe=r(gEe,"detr"),gEe.forEach(t),UOe=r(o3," \u2014 "),H$=n(o3,"A",{href:!0});var Mjr=s(H$);JOe=r(Mjr,"DetrConfig"),Mjr.forEach(t),YOe=r(o3," (DETR model)"),o3.forEach(t),KOe=i(y),Vf=n(y,"LI",{});var hEe=s(Vf);Vee=n(hEe,"STRONG",{});var Ejr=s(Vee);ZOe=r(Ejr,"distilbert"),Ejr.forEach(t),eVe=r(hEe," \u2014 "),U$=n(hEe,"A",{href:!0});var Cjr=s(U$);oVe=r(Cjr,"DistilBertConfig"),Cjr.forEach(t),rVe=r(hEe," (DistilBERT model)"),hEe.forEach(t),tVe=i(y),Xf=n(y,"LI",{});var pEe=s(Xf);Xee=n(pEe,"STRONG",{});var wjr=s(Xee);aVe=r(wjr,"dpr"),wjr.forEach(t),nVe=r(pEe," \u2014 "),J$=n(pEe,"A",{href:!0});var Ajr=s(J$);sVe=r(Ajr,"DPRConfig"),Ajr.forEach(t),lVe=r(pEe," (DPR model)"),pEe.forEach(t),iVe=i(y),zf=n(y,"LI",{});var uEe=s(zf);zee=n(uEe,"STRONG",{});var yjr=s(zee);dVe=r(yjr,"dpt"),yjr.forEach(t),cVe=r(uEe," \u2014 "),Y$=n(uEe,"A",{href:!0});var Ljr=s(Y$);fVe=r(Ljr,"DPTConfig"),Ljr.forEach(t),mVe=r(uEe," (DPT model)"),uEe.forEach(t),gVe=i(y),Qf=n(y,"LI",{});var _Ee=s(Qf);Qee=n(_Ee,"STRONG",{});var xjr=s(Qee);hVe=r(xjr,"electra"),xjr.forEach(t),pVe=r(_Ee," \u2014 "),K$=n(_Ee,"A",{href:!0});var $jr=s(K$);uVe=r($jr,"ElectraConfig"),$jr.forEach(t),_Ve=r(_Ee," (ELECTRA model)"),_Ee.forEach(t),bVe=i(y),Wf=n(y,"LI",{});var bEe=s(Wf);Wee=n(bEe,"STRONG",{});var kjr=s(Wee);vVe=r(kjr,"encoder-decoder"),kjr.forEach(t),FVe=r(bEe," \u2014 "),Z$=n(bEe,"A",{href:!0});var Sjr=s(Z$);TVe=r(Sjr,"EncoderDecoderConfig"),Sjr.forEach(t),MVe=r(bEe," (Encoder decoder model)"),bEe.forEach(t),EVe=i(y),Hf=n(y,"LI",{});var vEe=s(Hf);Hee=n(vEe,"STRONG",{});var Rjr=s(Hee);CVe=r(Rjr,"flaubert"),Rjr.forEach(t),wVe=r(vEe," \u2014 "),ek=n(vEe,"A",{href:!0});var Bjr=s(ek);AVe=r(Bjr,"FlaubertConfig"),Bjr.forEach(t),yVe=r(vEe," (FlauBERT model)"),vEe.forEach(t),LVe=i(y),Uf=n(y,"LI",{});var FEe=s(Uf);Uee=n(FEe,"STRONG",{});var Pjr=s(Uee);xVe=r(Pjr,"flava"),Pjr.forEach(t),$Ve=r(FEe," \u2014 "),ok=n(FEe,"A",{href:!0});var Ijr=s(ok);kVe=r(Ijr,"FlavaConfig"),Ijr.forEach(t),SVe=r(FEe," (Flava model)"),FEe.forEach(t),RVe=i(y),Jf=n(y,"LI",{});var TEe=s(Jf);Jee=n(TEe,"STRONG",{});var qjr=s(Jee);BVe=r(qjr,"fnet"),qjr.forEach(t),PVe=r(TEe," \u2014 "),rk=n(TEe,"A",{href:!0});var Njr=s(rk);IVe=r(Njr,"FNetConfig"),Njr.forEach(t),qVe=r(TEe," (FNet model)"),TEe.forEach(t),NVe=i(y),Yf=n(y,"LI",{});var MEe=s(Yf);Yee=n(MEe,"STRONG",{});var jjr=s(Yee);jVe=r(jjr,"fsmt"),jjr.forEach(t),DVe=r(MEe," \u2014 "),tk=n(MEe,"A",{href:!0});var Djr=s(tk);GVe=r(Djr,"FSMTConfig"),Djr.forEach(t),OVe=r(MEe," (FairSeq Machine-Translation model)"),MEe.forEach(t),VVe=i(y),Kf=n(y,"LI",{});var EEe=s(Kf);Kee=n(EEe,"STRONG",{});var Gjr=s(Kee);XVe=r(Gjr,"funnel"),Gjr.forEach(t),zVe=r(EEe," \u2014 "),ak=n(EEe,"A",{href:!0});var Ojr=s(ak);QVe=r(Ojr,"FunnelConfig"),Ojr.forEach(t),WVe=r(EEe," (Funnel Transformer model)"),EEe.forEach(t),HVe=i(y),Zf=n(y,"LI",{});var CEe=s(Zf);Zee=n(CEe,"STRONG",{});var Vjr=s(Zee);UVe=r(Vjr,"glpn"),Vjr.forEach(t),JVe=r(CEe," \u2014 "),nk=n(CEe,"A",{href:!0});var Xjr=s(nk);YVe=r(Xjr,"GLPNConfig"),Xjr.forEach(t),KVe=r(CEe," (GLPN model)"),CEe.forEach(t),ZVe=i(y),em=n(y,"LI",{});var wEe=s(em);eoe=n(wEe,"STRONG",{});var zjr=s(eoe);eXe=r(zjr,"gpt2"),zjr.forEach(t),oXe=r(wEe," \u2014 "),sk=n(wEe,"A",{href:!0});var Qjr=s(sk);rXe=r(Qjr,"GPT2Config"),Qjr.forEach(t),tXe=r(wEe," (OpenAI GPT-2 model)"),wEe.forEach(t),aXe=i(y),om=n(y,"LI",{});var AEe=s(om);ooe=n(AEe,"STRONG",{});var Wjr=s(ooe);nXe=r(Wjr,"gpt_neo"),Wjr.forEach(t),sXe=r(AEe," \u2014 "),lk=n(AEe,"A",{href:!0});var Hjr=s(lk);lXe=r(Hjr,"GPTNeoConfig"),Hjr.forEach(t),iXe=r(AEe," (GPT Neo model)"),AEe.forEach(t),dXe=i(y),rm=n(y,"LI",{});var yEe=s(rm);roe=n(yEe,"STRONG",{});var Ujr=s(roe);cXe=r(Ujr,"gptj"),Ujr.forEach(t),fXe=r(yEe," \u2014 "),ik=n(yEe,"A",{href:!0});var Jjr=s(ik);mXe=r(Jjr,"GPTJConfig"),Jjr.forEach(t),gXe=r(yEe," (GPT-J model)"),yEe.forEach(t),hXe=i(y),tm=n(y,"LI",{});var LEe=s(tm);toe=n(LEe,"STRONG",{});var Yjr=s(toe);pXe=r(Yjr,"hubert"),Yjr.forEach(t),uXe=r(LEe," \u2014 "),dk=n(LEe,"A",{href:!0});var Kjr=s(dk);_Xe=r(Kjr,"HubertConfig"),Kjr.forEach(t),bXe=r(LEe," (Hubert model)"),LEe.forEach(t),vXe=i(y),am=n(y,"LI",{});var xEe=s(am);aoe=n(xEe,"STRONG",{});var Zjr=s(aoe);FXe=r(Zjr,"ibert"),Zjr.forEach(t),TXe=r(xEe," \u2014 "),ck=n(xEe,"A",{href:!0});var eDr=s(ck);MXe=r(eDr,"IBertConfig"),eDr.forEach(t),EXe=r(xEe," (I-BERT model)"),xEe.forEach(t),CXe=i(y),nm=n(y,"LI",{});var $Ee=s(nm);noe=n($Ee,"STRONG",{});var oDr=s(noe);wXe=r(oDr,"imagegpt"),oDr.forEach(t),AXe=r($Ee," \u2014 "),fk=n($Ee,"A",{href:!0});var rDr=s(fk);yXe=r(rDr,"ImageGPTConfig"),rDr.forEach(t),LXe=r($Ee," (ImageGPT model)"),$Ee.forEach(t),xXe=i(y),sm=n(y,"LI",{});var kEe=s(sm);soe=n(kEe,"STRONG",{});var tDr=s(soe);$Xe=r(tDr,"layoutlm"),tDr.forEach(t),kXe=r(kEe," \u2014 "),mk=n(kEe,"A",{href:!0});var aDr=s(mk);SXe=r(aDr,"LayoutLMConfig"),aDr.forEach(t),RXe=r(kEe," (LayoutLM model)"),kEe.forEach(t),BXe=i(y),lm=n(y,"LI",{});var SEe=s(lm);loe=n(SEe,"STRONG",{});var nDr=s(loe);PXe=r(nDr,"layoutlmv2"),nDr.forEach(t),IXe=r(SEe," \u2014 "),gk=n(SEe,"A",{href:!0});var sDr=s(gk);qXe=r(sDr,"LayoutLMv2Config"),sDr.forEach(t),NXe=r(SEe," (LayoutLMv2 model)"),SEe.forEach(t),jXe=i(y),im=n(y,"LI",{});var REe=s(im);ioe=n(REe,"STRONG",{});var lDr=s(ioe);DXe=r(lDr,"layoutlmv3"),lDr.forEach(t),GXe=r(REe," \u2014 "),hk=n(REe,"A",{href:!0});var iDr=s(hk);OXe=r(iDr,"LayoutLMv3Config"),iDr.forEach(t),VXe=r(REe," (LayoutLMv3 model)"),REe.forEach(t),XXe=i(y),dm=n(y,"LI",{});var BEe=s(dm);doe=n(BEe,"STRONG",{});var dDr=s(doe);zXe=r(dDr,"led"),dDr.forEach(t),QXe=r(BEe," \u2014 "),pk=n(BEe,"A",{href:!0});var cDr=s(pk);WXe=r(cDr,"LEDConfig"),cDr.forEach(t),HXe=r(BEe," (LED model)"),BEe.forEach(t),UXe=i(y),cm=n(y,"LI",{});var PEe=s(cm);coe=n(PEe,"STRONG",{});var fDr=s(coe);JXe=r(fDr,"longformer"),fDr.forEach(t),YXe=r(PEe," \u2014 "),uk=n(PEe,"A",{href:!0});var mDr=s(uk);KXe=r(mDr,"LongformerConfig"),mDr.forEach(t),ZXe=r(PEe," (Longformer model)"),PEe.forEach(t),eze=i(y),fm=n(y,"LI",{});var IEe=s(fm);foe=n(IEe,"STRONG",{});var gDr=s(foe);oze=r(gDr,"luke"),gDr.forEach(t),rze=r(IEe," \u2014 "),_k=n(IEe,"A",{href:!0});var hDr=s(_k);tze=r(hDr,"LukeConfig"),hDr.forEach(t),aze=r(IEe," (LUKE model)"),IEe.forEach(t),nze=i(y),mm=n(y,"LI",{});var qEe=s(mm);moe=n(qEe,"STRONG",{});var pDr=s(moe);sze=r(pDr,"lxmert"),pDr.forEach(t),lze=r(qEe," \u2014 "),bk=n(qEe,"A",{href:!0});var uDr=s(bk);ize=r(uDr,"LxmertConfig"),uDr.forEach(t),dze=r(qEe," (LXMERT model)"),qEe.forEach(t),cze=i(y),gm=n(y,"LI",{});var NEe=s(gm);goe=n(NEe,"STRONG",{});var _Dr=s(goe);fze=r(_Dr,"m2m_100"),_Dr.forEach(t),mze=r(NEe," \u2014 "),vk=n(NEe,"A",{href:!0});var bDr=s(vk);gze=r(bDr,"M2M100Config"),bDr.forEach(t),hze=r(NEe," (M2M100 model)"),NEe.forEach(t),pze=i(y),hm=n(y,"LI",{});var jEe=s(hm);hoe=n(jEe,"STRONG",{});var vDr=s(hoe);uze=r(vDr,"marian"),vDr.forEach(t),_ze=r(jEe," \u2014 "),Fk=n(jEe,"A",{href:!0});var FDr=s(Fk);bze=r(FDr,"MarianConfig"),FDr.forEach(t),vze=r(jEe," (Marian model)"),jEe.forEach(t),Fze=i(y),pm=n(y,"LI",{});var DEe=s(pm);poe=n(DEe,"STRONG",{});var TDr=s(poe);Tze=r(TDr,"maskformer"),TDr.forEach(t),Mze=r(DEe," \u2014 "),Tk=n(DEe,"A",{href:!0});var MDr=s(Tk);Eze=r(MDr,"MaskFormerConfig"),MDr.forEach(t),Cze=r(DEe," (MaskFormer model)"),DEe.forEach(t),wze=i(y),um=n(y,"LI",{});var GEe=s(um);uoe=n(GEe,"STRONG",{});var EDr=s(uoe);Aze=r(EDr,"mbart"),EDr.forEach(t),yze=r(GEe," \u2014 "),Mk=n(GEe,"A",{href:!0});var CDr=s(Mk);Lze=r(CDr,"MBartConfig"),CDr.forEach(t),xze=r(GEe," (mBART model)"),GEe.forEach(t),$ze=i(y),_m=n(y,"LI",{});var OEe=s(_m);_oe=n(OEe,"STRONG",{});var wDr=s(_oe);kze=r(wDr,"megatron-bert"),wDr.forEach(t),Sze=r(OEe," \u2014 "),Ek=n(OEe,"A",{href:!0});var ADr=s(Ek);Rze=r(ADr,"MegatronBertConfig"),ADr.forEach(t),Bze=r(OEe," (MegatronBert model)"),OEe.forEach(t),Pze=i(y),bm=n(y,"LI",{});var VEe=s(bm);boe=n(VEe,"STRONG",{});var yDr=s(boe);Ize=r(yDr,"mobilebert"),yDr.forEach(t),qze=r(VEe," \u2014 "),Ck=n(VEe,"A",{href:!0});var LDr=s(Ck);Nze=r(LDr,"MobileBertConfig"),LDr.forEach(t),jze=r(VEe," (MobileBERT model)"),VEe.forEach(t),Dze=i(y),vm=n(y,"LI",{});var XEe=s(vm);voe=n(XEe,"STRONG",{});var xDr=s(voe);Gze=r(xDr,"mpnet"),xDr.forEach(t),Oze=r(XEe," \u2014 "),wk=n(XEe,"A",{href:!0});var $Dr=s(wk);Vze=r($Dr,"MPNetConfig"),$Dr.forEach(t),Xze=r(XEe," (MPNet model)"),XEe.forEach(t),zze=i(y),Fm=n(y,"LI",{});var zEe=s(Fm);Foe=n(zEe,"STRONG",{});var kDr=s(Foe);Qze=r(kDr,"mt5"),kDr.forEach(t),Wze=r(zEe," \u2014 "),Ak=n(zEe,"A",{href:!0});var SDr=s(Ak);Hze=r(SDr,"MT5Config"),SDr.forEach(t),Uze=r(zEe," (mT5 model)"),zEe.forEach(t),Jze=i(y),Tm=n(y,"LI",{});var QEe=s(Tm);Toe=n(QEe,"STRONG",{});var RDr=s(Toe);Yze=r(RDr,"nystromformer"),RDr.forEach(t),Kze=r(QEe," \u2014 "),yk=n(QEe,"A",{href:!0});var BDr=s(yk);Zze=r(BDr,"NystromformerConfig"),BDr.forEach(t),eQe=r(QEe," (Nystromformer model)"),QEe.forEach(t),oQe=i(y),Mm=n(y,"LI",{});var WEe=s(Mm);Moe=n(WEe,"STRONG",{});var PDr=s(Moe);rQe=r(PDr,"openai-gpt"),PDr.forEach(t),tQe=r(WEe," \u2014 "),Lk=n(WEe,"A",{href:!0});var IDr=s(Lk);aQe=r(IDr,"OpenAIGPTConfig"),IDr.forEach(t),nQe=r(WEe," (OpenAI GPT model)"),WEe.forEach(t),sQe=i(y),Em=n(y,"LI",{});var HEe=s(Em);Eoe=n(HEe,"STRONG",{});var qDr=s(Eoe);lQe=r(qDr,"pegasus"),qDr.forEach(t),iQe=r(HEe," \u2014 "),xk=n(HEe,"A",{href:!0});var NDr=s(xk);dQe=r(NDr,"PegasusConfig"),NDr.forEach(t),cQe=r(HEe," (Pegasus model)"),HEe.forEach(t),fQe=i(y),Cm=n(y,"LI",{});var UEe=s(Cm);Coe=n(UEe,"STRONG",{});var jDr=s(Coe);mQe=r(jDr,"perceiver"),jDr.forEach(t),gQe=r(UEe," \u2014 "),$k=n(UEe,"A",{href:!0});var DDr=s($k);hQe=r(DDr,"PerceiverConfig"),DDr.forEach(t),pQe=r(UEe," (Perceiver model)"),UEe.forEach(t),uQe=i(y),wm=n(y,"LI",{});var JEe=s(wm);woe=n(JEe,"STRONG",{});var GDr=s(woe);_Qe=r(GDr,"plbart"),GDr.forEach(t),bQe=r(JEe," \u2014 "),kk=n(JEe,"A",{href:!0});var ODr=s(kk);vQe=r(ODr,"PLBartConfig"),ODr.forEach(t),FQe=r(JEe," (PLBart model)"),JEe.forEach(t),TQe=i(y),Am=n(y,"LI",{});var YEe=s(Am);Aoe=n(YEe,"STRONG",{});var VDr=s(Aoe);MQe=r(VDr,"poolformer"),VDr.forEach(t),EQe=r(YEe," \u2014 "),Sk=n(YEe,"A",{href:!0});var XDr=s(Sk);CQe=r(XDr,"PoolFormerConfig"),XDr.forEach(t),wQe=r(YEe," (PoolFormer model)"),YEe.forEach(t),AQe=i(y),ym=n(y,"LI",{});var KEe=s(ym);yoe=n(KEe,"STRONG",{});var zDr=s(yoe);yQe=r(zDr,"prophetnet"),zDr.forEach(t),LQe=r(KEe," \u2014 "),Rk=n(KEe,"A",{href:!0});var QDr=s(Rk);xQe=r(QDr,"ProphetNetConfig"),QDr.forEach(t),$Qe=r(KEe," (ProphetNet model)"),KEe.forEach(t),kQe=i(y),Lm=n(y,"LI",{});var ZEe=s(Lm);Loe=n(ZEe,"STRONG",{});var WDr=s(Loe);SQe=r(WDr,"qdqbert"),WDr.forEach(t),RQe=r(ZEe," \u2014 "),Bk=n(ZEe,"A",{href:!0});var HDr=s(Bk);BQe=r(HDr,"QDQBertConfig"),HDr.forEach(t),PQe=r(ZEe," (QDQBert model)"),ZEe.forEach(t),IQe=i(y),xm=n(y,"LI",{});var e5e=s(xm);xoe=n(e5e,"STRONG",{});var UDr=s(xoe);qQe=r(UDr,"rag"),UDr.forEach(t),NQe=r(e5e," \u2014 "),Pk=n(e5e,"A",{href:!0});var JDr=s(Pk);jQe=r(JDr,"RagConfig"),JDr.forEach(t),DQe=r(e5e," (RAG model)"),e5e.forEach(t),GQe=i(y),$m=n(y,"LI",{});var o5e=s($m);$oe=n(o5e,"STRONG",{});var YDr=s($oe);OQe=r(YDr,"realm"),YDr.forEach(t),VQe=r(o5e," \u2014 "),Ik=n(o5e,"A",{href:!0});var KDr=s(Ik);XQe=r(KDr,"RealmConfig"),KDr.forEach(t),zQe=r(o5e," (Realm model)"),o5e.forEach(t),QQe=i(y),km=n(y,"LI",{});var r5e=s(km);koe=n(r5e,"STRONG",{});var ZDr=s(koe);WQe=r(ZDr,"reformer"),ZDr.forEach(t),HQe=r(r5e," \u2014 "),qk=n(r5e,"A",{href:!0});var eGr=s(qk);UQe=r(eGr,"ReformerConfig"),eGr.forEach(t),JQe=r(r5e," (Reformer model)"),r5e.forEach(t),YQe=i(y),Sm=n(y,"LI",{});var t5e=s(Sm);Soe=n(t5e,"STRONG",{});var oGr=s(Soe);KQe=r(oGr,"regnet"),oGr.forEach(t),ZQe=r(t5e," \u2014 "),Nk=n(t5e,"A",{href:!0});var rGr=s(Nk);eWe=r(rGr,"RegNetConfig"),rGr.forEach(t),oWe=r(t5e," (RegNet model)"),t5e.forEach(t),rWe=i(y),Rm=n(y,"LI",{});var a5e=s(Rm);Roe=n(a5e,"STRONG",{});var tGr=s(Roe);tWe=r(tGr,"rembert"),tGr.forEach(t),aWe=r(a5e," \u2014 "),jk=n(a5e,"A",{href:!0});var aGr=s(jk);nWe=r(aGr,"RemBertConfig"),aGr.forEach(t),sWe=r(a5e," (RemBERT model)"),a5e.forEach(t),lWe=i(y),Bm=n(y,"LI",{});var n5e=s(Bm);Boe=n(n5e,"STRONG",{});var nGr=s(Boe);iWe=r(nGr,"resnet"),nGr.forEach(t),dWe=r(n5e," \u2014 "),Dk=n(n5e,"A",{href:!0});var sGr=s(Dk);cWe=r(sGr,"ResNetConfig"),sGr.forEach(t),fWe=r(n5e," (ResNet model)"),n5e.forEach(t),mWe=i(y),Pm=n(y,"LI",{});var s5e=s(Pm);Poe=n(s5e,"STRONG",{});var lGr=s(Poe);gWe=r(lGr,"retribert"),lGr.forEach(t),hWe=r(s5e," \u2014 "),Gk=n(s5e,"A",{href:!0});var iGr=s(Gk);pWe=r(iGr,"RetriBertConfig"),iGr.forEach(t),uWe=r(s5e," (RetriBERT model)"),s5e.forEach(t),_We=i(y),Im=n(y,"LI",{});var l5e=s(Im);Ioe=n(l5e,"STRONG",{});var dGr=s(Ioe);bWe=r(dGr,"roberta"),dGr.forEach(t),vWe=r(l5e," \u2014 "),Ok=n(l5e,"A",{href:!0});var cGr=s(Ok);FWe=r(cGr,"RobertaConfig"),cGr.forEach(t),TWe=r(l5e," (RoBERTa model)"),l5e.forEach(t),MWe=i(y),qm=n(y,"LI",{});var i5e=s(qm);qoe=n(i5e,"STRONG",{});var fGr=s(qoe);EWe=r(fGr,"roformer"),fGr.forEach(t),CWe=r(i5e," \u2014 "),Vk=n(i5e,"A",{href:!0});var mGr=s(Vk);wWe=r(mGr,"RoFormerConfig"),mGr.forEach(t),AWe=r(i5e," (RoFormer model)"),i5e.forEach(t),yWe=i(y),Nm=n(y,"LI",{});var d5e=s(Nm);Noe=n(d5e,"STRONG",{});var gGr=s(Noe);LWe=r(gGr,"segformer"),gGr.forEach(t),xWe=r(d5e," \u2014 "),Xk=n(d5e,"A",{href:!0});var hGr=s(Xk);$We=r(hGr,"SegformerConfig"),hGr.forEach(t),kWe=r(d5e," (SegFormer model)"),d5e.forEach(t),SWe=i(y),jm=n(y,"LI",{});var c5e=s(jm);joe=n(c5e,"STRONG",{});var pGr=s(joe);RWe=r(pGr,"sew"),pGr.forEach(t),BWe=r(c5e," \u2014 "),zk=n(c5e,"A",{href:!0});var uGr=s(zk);PWe=r(uGr,"SEWConfig"),uGr.forEach(t),IWe=r(c5e," (SEW model)"),c5e.forEach(t),qWe=i(y),Dm=n(y,"LI",{});var f5e=s(Dm);Doe=n(f5e,"STRONG",{});var _Gr=s(Doe);NWe=r(_Gr,"sew-d"),_Gr.forEach(t),jWe=r(f5e," \u2014 "),Qk=n(f5e,"A",{href:!0});var bGr=s(Qk);DWe=r(bGr,"SEWDConfig"),bGr.forEach(t),GWe=r(f5e," (SEW-D model)"),f5e.forEach(t),OWe=i(y),Gm=n(y,"LI",{});var m5e=s(Gm);Goe=n(m5e,"STRONG",{});var vGr=s(Goe);VWe=r(vGr,"speech-encoder-decoder"),vGr.forEach(t),XWe=r(m5e," \u2014 "),Wk=n(m5e,"A",{href:!0});var FGr=s(Wk);zWe=r(FGr,"SpeechEncoderDecoderConfig"),FGr.forEach(t),QWe=r(m5e," (Speech Encoder decoder model)"),m5e.forEach(t),WWe=i(y),Om=n(y,"LI",{});var g5e=s(Om);Ooe=n(g5e,"STRONG",{});var TGr=s(Ooe);HWe=r(TGr,"speech_to_text"),TGr.forEach(t),UWe=r(g5e," \u2014 "),Hk=n(g5e,"A",{href:!0});var MGr=s(Hk);JWe=r(MGr,"Speech2TextConfig"),MGr.forEach(t),YWe=r(g5e," (Speech2Text model)"),g5e.forEach(t),KWe=i(y),Vm=n(y,"LI",{});var h5e=s(Vm);Voe=n(h5e,"STRONG",{});var EGr=s(Voe);ZWe=r(EGr,"speech_to_text_2"),EGr.forEach(t),eHe=r(h5e," \u2014 "),Uk=n(h5e,"A",{href:!0});var CGr=s(Uk);oHe=r(CGr,"Speech2Text2Config"),CGr.forEach(t),rHe=r(h5e," (Speech2Text2 model)"),h5e.forEach(t),tHe=i(y),Xm=n(y,"LI",{});var p5e=s(Xm);Xoe=n(p5e,"STRONG",{});var wGr=s(Xoe);aHe=r(wGr,"splinter"),wGr.forEach(t),nHe=r(p5e," \u2014 "),Jk=n(p5e,"A",{href:!0});var AGr=s(Jk);sHe=r(AGr,"SplinterConfig"),AGr.forEach(t),lHe=r(p5e," (Splinter model)"),p5e.forEach(t),iHe=i(y),zm=n(y,"LI",{});var u5e=s(zm);zoe=n(u5e,"STRONG",{});var yGr=s(zoe);dHe=r(yGr,"squeezebert"),yGr.forEach(t),cHe=r(u5e," \u2014 "),Yk=n(u5e,"A",{href:!0});var LGr=s(Yk);fHe=r(LGr,"SqueezeBertConfig"),LGr.forEach(t),mHe=r(u5e," (SqueezeBERT model)"),u5e.forEach(t),gHe=i(y),Qm=n(y,"LI",{});var _5e=s(Qm);Qoe=n(_5e,"STRONG",{});var xGr=s(Qoe);hHe=r(xGr,"swin"),xGr.forEach(t),pHe=r(_5e," \u2014 "),Kk=n(_5e,"A",{href:!0});var $Gr=s(Kk);uHe=r($Gr,"SwinConfig"),$Gr.forEach(t),_He=r(_5e," (Swin model)"),_5e.forEach(t),bHe=i(y),Wm=n(y,"LI",{});var b5e=s(Wm);Woe=n(b5e,"STRONG",{});var kGr=s(Woe);vHe=r(kGr,"t5"),kGr.forEach(t),FHe=r(b5e," \u2014 "),Zk=n(b5e,"A",{href:!0});var SGr=s(Zk);THe=r(SGr,"T5Config"),SGr.forEach(t),MHe=r(b5e," (T5 model)"),b5e.forEach(t),EHe=i(y),Hm=n(y,"LI",{});var v5e=s(Hm);Hoe=n(v5e,"STRONG",{});var RGr=s(Hoe);CHe=r(RGr,"tapas"),RGr.forEach(t),wHe=r(v5e," \u2014 "),eS=n(v5e,"A",{href:!0});var BGr=s(eS);AHe=r(BGr,"TapasConfig"),BGr.forEach(t),yHe=r(v5e," (TAPAS model)"),v5e.forEach(t),LHe=i(y),Um=n(y,"LI",{});var F5e=s(Um);Uoe=n(F5e,"STRONG",{});var PGr=s(Uoe);xHe=r(PGr,"tapex"),PGr.forEach(t),$He=r(F5e," \u2014 "),oS=n(F5e,"A",{href:!0});var IGr=s(oS);kHe=r(IGr,"BartConfig"),IGr.forEach(t),SHe=r(F5e," (TAPEX model)"),F5e.forEach(t),RHe=i(y),Jm=n(y,"LI",{});var T5e=s(Jm);Joe=n(T5e,"STRONG",{});var qGr=s(Joe);BHe=r(qGr,"transfo-xl"),qGr.forEach(t),PHe=r(T5e," \u2014 "),rS=n(T5e,"A",{href:!0});var NGr=s(rS);IHe=r(NGr,"TransfoXLConfig"),NGr.forEach(t),qHe=r(T5e," (Transformer-XL model)"),T5e.forEach(t),NHe=i(y),Ym=n(y,"LI",{});var M5e=s(Ym);Yoe=n(M5e,"STRONG",{});var jGr=s(Yoe);jHe=r(jGr,"trocr"),jGr.forEach(t),DHe=r(M5e," \u2014 "),tS=n(M5e,"A",{href:!0});var DGr=s(tS);GHe=r(DGr,"TrOCRConfig"),DGr.forEach(t),OHe=r(M5e," (TrOCR model)"),M5e.forEach(t),VHe=i(y),Km=n(y,"LI",{});var E5e=s(Km);Koe=n(E5e,"STRONG",{});var GGr=s(Koe);XHe=r(GGr,"unispeech"),GGr.forEach(t),zHe=r(E5e," \u2014 "),aS=n(E5e,"A",{href:!0});var OGr=s(aS);QHe=r(OGr,"UniSpeechConfig"),OGr.forEach(t),WHe=r(E5e," (UniSpeech model)"),E5e.forEach(t),HHe=i(y),Zm=n(y,"LI",{});var C5e=s(Zm);Zoe=n(C5e,"STRONG",{});var VGr=s(Zoe);UHe=r(VGr,"unispeech-sat"),VGr.forEach(t),JHe=r(C5e," \u2014 "),nS=n(C5e,"A",{href:!0});var XGr=s(nS);YHe=r(XGr,"UniSpeechSatConfig"),XGr.forEach(t),KHe=r(C5e," (UniSpeechSat model)"),C5e.forEach(t),ZHe=i(y),eg=n(y,"LI",{});var w5e=s(eg);ere=n(w5e,"STRONG",{});var zGr=s(ere);eUe=r(zGr,"van"),zGr.forEach(t),oUe=r(w5e," \u2014 "),sS=n(w5e,"A",{href:!0});var QGr=s(sS);rUe=r(QGr,"VanConfig"),QGr.forEach(t),tUe=r(w5e," (VAN model)"),w5e.forEach(t),aUe=i(y),og=n(y,"LI",{});var A5e=s(og);ore=n(A5e,"STRONG",{});var WGr=s(ore);nUe=r(WGr,"vilt"),WGr.forEach(t),sUe=r(A5e," \u2014 "),lS=n(A5e,"A",{href:!0});var HGr=s(lS);lUe=r(HGr,"ViltConfig"),HGr.forEach(t),iUe=r(A5e," (ViLT model)"),A5e.forEach(t),dUe=i(y),rg=n(y,"LI",{});var y5e=s(rg);rre=n(y5e,"STRONG",{});var UGr=s(rre);cUe=r(UGr,"vision-encoder-decoder"),UGr.forEach(t),fUe=r(y5e," \u2014 "),iS=n(y5e,"A",{href:!0});var JGr=s(iS);mUe=r(JGr,"VisionEncoderDecoderConfig"),JGr.forEach(t),gUe=r(y5e," (Vision Encoder decoder model)"),y5e.forEach(t),hUe=i(y),tg=n(y,"LI",{});var L5e=s(tg);tre=n(L5e,"STRONG",{});var YGr=s(tre);pUe=r(YGr,"vision-text-dual-encoder"),YGr.forEach(t),uUe=r(L5e," \u2014 "),dS=n(L5e,"A",{href:!0});var KGr=s(dS);_Ue=r(KGr,"VisionTextDualEncoderConfig"),KGr.forEach(t),bUe=r(L5e," (VisionTextDualEncoder model)"),L5e.forEach(t),vUe=i(y),ag=n(y,"LI",{});var x5e=s(ag);are=n(x5e,"STRONG",{});var ZGr=s(are);FUe=r(ZGr,"visual_bert"),ZGr.forEach(t),TUe=r(x5e," \u2014 "),cS=n(x5e,"A",{href:!0});var eOr=s(cS);MUe=r(eOr,"VisualBertConfig"),eOr.forEach(t),EUe=r(x5e," (VisualBert model)"),x5e.forEach(t),CUe=i(y),ng=n(y,"LI",{});var $5e=s(ng);nre=n($5e,"STRONG",{});var oOr=s(nre);wUe=r(oOr,"vit"),oOr.forEach(t),AUe=r($5e," \u2014 "),fS=n($5e,"A",{href:!0});var rOr=s(fS);yUe=r(rOr,"ViTConfig"),rOr.forEach(t),LUe=r($5e," (ViT model)"),$5e.forEach(t),xUe=i(y),sg=n(y,"LI",{});var k5e=s(sg);sre=n(k5e,"STRONG",{});var tOr=s(sre);$Ue=r(tOr,"vit_mae"),tOr.forEach(t),kUe=r(k5e," \u2014 "),mS=n(k5e,"A",{href:!0});var aOr=s(mS);SUe=r(aOr,"ViTMAEConfig"),aOr.forEach(t),RUe=r(k5e," (ViTMAE model)"),k5e.forEach(t),BUe=i(y),lg=n(y,"LI",{});var S5e=s(lg);lre=n(S5e,"STRONG",{});var nOr=s(lre);PUe=r(nOr,"wav2vec2"),nOr.forEach(t),IUe=r(S5e," \u2014 "),gS=n(S5e,"A",{href:!0});var sOr=s(gS);qUe=r(sOr,"Wav2Vec2Config"),sOr.forEach(t),NUe=r(S5e," (Wav2Vec2 model)"),S5e.forEach(t),jUe=i(y),ig=n(y,"LI",{});var R5e=s(ig);ire=n(R5e,"STRONG",{});var lOr=s(ire);DUe=r(lOr,"wavlm"),lOr.forEach(t),GUe=r(R5e," \u2014 "),hS=n(R5e,"A",{href:!0});var iOr=s(hS);OUe=r(iOr,"WavLMConfig"),iOr.forEach(t),VUe=r(R5e," (WavLM model)"),R5e.forEach(t),XUe=i(y),dg=n(y,"LI",{});var B5e=s(dg);dre=n(B5e,"STRONG",{});var dOr=s(dre);zUe=r(dOr,"xglm"),dOr.forEach(t),QUe=r(B5e," \u2014 "),pS=n(B5e,"A",{href:!0});var cOr=s(pS);WUe=r(cOr,"XGLMConfig"),cOr.forEach(t),HUe=r(B5e," (XGLM model)"),B5e.forEach(t),UUe=i(y),cg=n(y,"LI",{});var P5e=s(cg);cre=n(P5e,"STRONG",{});var fOr=s(cre);JUe=r(fOr,"xlm"),fOr.forEach(t),YUe=r(P5e," \u2014 "),uS=n(P5e,"A",{href:!0});var mOr=s(uS);KUe=r(mOr,"XLMConfig"),mOr.forEach(t),ZUe=r(P5e," (XLM model)"),P5e.forEach(t),eJe=i(y),fg=n(y,"LI",{});var I5e=s(fg);fre=n(I5e,"STRONG",{});var gOr=s(fre);oJe=r(gOr,"xlm-prophetnet"),gOr.forEach(t),rJe=r(I5e," \u2014 "),_S=n(I5e,"A",{href:!0});var hOr=s(_S);tJe=r(hOr,"XLMProphetNetConfig"),hOr.forEach(t),aJe=r(I5e," (XLMProphetNet model)"),I5e.forEach(t),nJe=i(y),mg=n(y,"LI",{});var q5e=s(mg);mre=n(q5e,"STRONG",{});var pOr=s(mre);sJe=r(pOr,"xlm-roberta"),pOr.forEach(t),lJe=r(q5e," \u2014 "),bS=n(q5e,"A",{href:!0});var uOr=s(bS);iJe=r(uOr,"XLMRobertaConfig"),uOr.forEach(t),dJe=r(q5e," (XLM-RoBERTa model)"),q5e.forEach(t),cJe=i(y),gg=n(y,"LI",{});var N5e=s(gg);gre=n(N5e,"STRONG",{});var _Or=s(gre);fJe=r(_Or,"xlm-roberta-xl"),_Or.forEach(t),mJe=r(N5e," \u2014 "),vS=n(N5e,"A",{href:!0});var bOr=s(vS);gJe=r(bOr,"XLMRobertaXLConfig"),bOr.forEach(t),hJe=r(N5e," (XLM-RoBERTa-XL model)"),N5e.forEach(t),pJe=i(y),hg=n(y,"LI",{});var j5e=s(hg);hre=n(j5e,"STRONG",{});var vOr=s(hre);uJe=r(vOr,"xlnet"),vOr.forEach(t),_Je=r(j5e," \u2014 "),FS=n(j5e,"A",{href:!0});var FOr=s(FS);bJe=r(FOr,"XLNetConfig"),FOr.forEach(t),vJe=r(j5e," (XLNet model)"),j5e.forEach(t),FJe=i(y),pg=n(y,"LI",{});var D5e=s(pg);pre=n(D5e,"STRONG",{});var TOr=s(pre);TJe=r(TOr,"yolos"),TOr.forEach(t),MJe=r(D5e," \u2014 "),TS=n(D5e,"A",{href:!0});var MOr=s(TS);EJe=r(MOr,"YolosConfig"),MOr.forEach(t),CJe=r(D5e," (YOLOS model)"),D5e.forEach(t),wJe=i(y),ug=n(y,"LI",{});var G5e=s(ug);ure=n(G5e,"STRONG",{});var EOr=s(ure);AJe=r(EOr,"yoso"),EOr.forEach(t),yJe=r(G5e," \u2014 "),MS=n(G5e,"A",{href:!0});var COr=s(MS);LJe=r(COr,"YosoConfig"),COr.forEach(t),xJe=r(G5e," (YOSO model)"),G5e.forEach(t),y.forEach(t),$Je=i(Zr),T(_g.$$.fragment,Zr),Zr.forEach(t),kJe=i(Kr),bg=n(Kr,"DIV",{class:!0});var cNe=s(bg);T(iA.$$.fragment,cNe),SJe=i(cNe),_re=n(cNe,"P",{});var wOr=s(_re);RJe=r(wOr,"Register a new configuration for this class."),wOr.forEach(t),cNe.forEach(t),Kr.forEach(t),gIe=i(f),bi=n(f,"H2",{class:!0});var fNe=s(bi);vg=n(fNe,"A",{id:!0,class:!0,href:!0});var AOr=s(vg);bre=n(AOr,"SPAN",{});var yOr=s(bre);T(dA.$$.fragment,yOr),yOr.forEach(t),AOr.forEach(t),BJe=i(fNe),vre=n(fNe,"SPAN",{});var LOr=s(vre);PJe=r(LOr,"AutoTokenizer"),LOr.forEach(t),fNe.forEach(t),hIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(cA.$$.fragment,Is),IJe=i(Is),fA=n(Is,"P",{});var mNe=s(fA);qJe=r(mNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ES=n(mNe,"A",{href:!0});var xOr=s(ES);NJe=r(xOr,"AutoTokenizer.from_pretrained()"),xOr.forEach(t),jJe=r(mNe," class method."),mNe.forEach(t),DJe=i(Is),mA=n(Is,"P",{});var gNe=s(mA);GJe=r(gNe,"This class cannot be instantiated directly using "),Fre=n(gNe,"CODE",{});var $Or=s(Fre);OJe=r($Or,"__init__()"),$Or.forEach(t),VJe=r(gNe," (throws an error)."),gNe.forEach(t),XJe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(gA.$$.fragment,qs),zJe=i(qs),Tre=n(qs,"P",{});var kOr=s(Tre);QJe=r(kOr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),kOr.forEach(t),WJe=i(qs),Ca=n(qs,"P",{});var r3=s(Ca);HJe=r(r3,"The tokenizer class to instantiate is selected based on the "),Mre=n(r3,"CODE",{});var SOr=s(Mre);UJe=r(SOr,"model_type"),SOr.forEach(t),JJe=r(r3,` property of the config object (either
passed as an argument or loaded from `),Ere=n(r3,"CODE",{});var ROr=s(Ere);YJe=r(ROr,"pretrained_model_name_or_path"),ROr.forEach(t),KJe=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cre=n(r3,"CODE",{});var BOr=s(Cre);ZJe=r(BOr,"pretrained_model_name_or_path"),BOr.forEach(t),eYe=r(r3,":"),r3.forEach(t),oYe=i(qs),k=n(qs,"UL",{});var S=s(k);kn=n(S,"LI",{});var h9=s(kn);wre=n(h9,"STRONG",{});var POr=s(wre);rYe=r(POr,"albert"),POr.forEach(t),tYe=r(h9," \u2014 "),CS=n(h9,"A",{href:!0});var IOr=s(CS);aYe=r(IOr,"AlbertTokenizer"),IOr.forEach(t),nYe=r(h9," or "),wS=n(h9,"A",{href:!0});var qOr=s(wS);sYe=r(qOr,"AlbertTokenizerFast"),qOr.forEach(t),lYe=r(h9," (ALBERT model)"),h9.forEach(t),iYe=i(S),Sn=n(S,"LI",{});var p9=s(Sn);Are=n(p9,"STRONG",{});var NOr=s(Are);dYe=r(NOr,"bart"),NOr.forEach(t),cYe=r(p9," \u2014 "),AS=n(p9,"A",{href:!0});var jOr=s(AS);fYe=r(jOr,"BartTokenizer"),jOr.forEach(t),mYe=r(p9," or "),yS=n(p9,"A",{href:!0});var DOr=s(yS);gYe=r(DOr,"BartTokenizerFast"),DOr.forEach(t),hYe=r(p9," (BART model)"),p9.forEach(t),pYe=i(S),Rn=n(S,"LI",{});var u9=s(Rn);yre=n(u9,"STRONG",{});var GOr=s(yre);uYe=r(GOr,"barthez"),GOr.forEach(t),_Ye=r(u9," \u2014 "),LS=n(u9,"A",{href:!0});var OOr=s(LS);bYe=r(OOr,"BarthezTokenizer"),OOr.forEach(t),vYe=r(u9," or "),xS=n(u9,"A",{href:!0});var VOr=s(xS);FYe=r(VOr,"BarthezTokenizerFast"),VOr.forEach(t),TYe=r(u9," (BARThez model)"),u9.forEach(t),MYe=i(S),Fg=n(S,"LI",{});var O5e=s(Fg);Lre=n(O5e,"STRONG",{});var XOr=s(Lre);EYe=r(XOr,"bartpho"),XOr.forEach(t),CYe=r(O5e," \u2014 "),$S=n(O5e,"A",{href:!0});var zOr=s($S);wYe=r(zOr,"BartphoTokenizer"),zOr.forEach(t),AYe=r(O5e," (BARTpho model)"),O5e.forEach(t),yYe=i(S),Bn=n(S,"LI",{});var _9=s(Bn);xre=n(_9,"STRONG",{});var QOr=s(xre);LYe=r(QOr,"bert"),QOr.forEach(t),xYe=r(_9," \u2014 "),kS=n(_9,"A",{href:!0});var WOr=s(kS);$Ye=r(WOr,"BertTokenizer"),WOr.forEach(t),kYe=r(_9," or "),SS=n(_9,"A",{href:!0});var HOr=s(SS);SYe=r(HOr,"BertTokenizerFast"),HOr.forEach(t),RYe=r(_9," (BERT model)"),_9.forEach(t),BYe=i(S),Tg=n(S,"LI",{});var V5e=s(Tg);$re=n(V5e,"STRONG",{});var UOr=s($re);PYe=r(UOr,"bert-generation"),UOr.forEach(t),IYe=r(V5e," \u2014 "),RS=n(V5e,"A",{href:!0});var JOr=s(RS);qYe=r(JOr,"BertGenerationTokenizer"),JOr.forEach(t),NYe=r(V5e," (Bert Generation model)"),V5e.forEach(t),jYe=i(S),Mg=n(S,"LI",{});var X5e=s(Mg);kre=n(X5e,"STRONG",{});var YOr=s(kre);DYe=r(YOr,"bert-japanese"),YOr.forEach(t),GYe=r(X5e," \u2014 "),BS=n(X5e,"A",{href:!0});var KOr=s(BS);OYe=r(KOr,"BertJapaneseTokenizer"),KOr.forEach(t),VYe=r(X5e," (BertJapanese model)"),X5e.forEach(t),XYe=i(S),Eg=n(S,"LI",{});var z5e=s(Eg);Sre=n(z5e,"STRONG",{});var ZOr=s(Sre);zYe=r(ZOr,"bertweet"),ZOr.forEach(t),QYe=r(z5e," \u2014 "),PS=n(z5e,"A",{href:!0});var eVr=s(PS);WYe=r(eVr,"BertweetTokenizer"),eVr.forEach(t),HYe=r(z5e," (Bertweet model)"),z5e.forEach(t),UYe=i(S),Pn=n(S,"LI",{});var b9=s(Pn);Rre=n(b9,"STRONG",{});var oVr=s(Rre);JYe=r(oVr,"big_bird"),oVr.forEach(t),YYe=r(b9," \u2014 "),IS=n(b9,"A",{href:!0});var rVr=s(IS);KYe=r(rVr,"BigBirdTokenizer"),rVr.forEach(t),ZYe=r(b9," or "),qS=n(b9,"A",{href:!0});var tVr=s(qS);eKe=r(tVr,"BigBirdTokenizerFast"),tVr.forEach(t),oKe=r(b9," (BigBird model)"),b9.forEach(t),rKe=i(S),In=n(S,"LI",{});var v9=s(In);Bre=n(v9,"STRONG",{});var aVr=s(Bre);tKe=r(aVr,"bigbird_pegasus"),aVr.forEach(t),aKe=r(v9," \u2014 "),NS=n(v9,"A",{href:!0});var nVr=s(NS);nKe=r(nVr,"PegasusTokenizer"),nVr.forEach(t),sKe=r(v9," or "),jS=n(v9,"A",{href:!0});var sVr=s(jS);lKe=r(sVr,"PegasusTokenizerFast"),sVr.forEach(t),iKe=r(v9," (BigBirdPegasus model)"),v9.forEach(t),dKe=i(S),qn=n(S,"LI",{});var F9=s(qn);Pre=n(F9,"STRONG",{});var lVr=s(Pre);cKe=r(lVr,"blenderbot"),lVr.forEach(t),fKe=r(F9," \u2014 "),DS=n(F9,"A",{href:!0});var iVr=s(DS);mKe=r(iVr,"BlenderbotTokenizer"),iVr.forEach(t),gKe=r(F9," or "),GS=n(F9,"A",{href:!0});var dVr=s(GS);hKe=r(dVr,"BlenderbotTokenizerFast"),dVr.forEach(t),pKe=r(F9," (Blenderbot model)"),F9.forEach(t),uKe=i(S),Cg=n(S,"LI",{});var Q5e=s(Cg);Ire=n(Q5e,"STRONG",{});var cVr=s(Ire);_Ke=r(cVr,"blenderbot-small"),cVr.forEach(t),bKe=r(Q5e," \u2014 "),OS=n(Q5e,"A",{href:!0});var fVr=s(OS);vKe=r(fVr,"BlenderbotSmallTokenizer"),fVr.forEach(t),FKe=r(Q5e," (BlenderbotSmall model)"),Q5e.forEach(t),TKe=i(S),wg=n(S,"LI",{});var W5e=s(wg);qre=n(W5e,"STRONG",{});var mVr=s(qre);MKe=r(mVr,"byt5"),mVr.forEach(t),EKe=r(W5e," \u2014 "),VS=n(W5e,"A",{href:!0});var gVr=s(VS);CKe=r(gVr,"ByT5Tokenizer"),gVr.forEach(t),wKe=r(W5e," (ByT5 model)"),W5e.forEach(t),AKe=i(S),Nn=n(S,"LI",{});var T9=s(Nn);Nre=n(T9,"STRONG",{});var hVr=s(Nre);yKe=r(hVr,"camembert"),hVr.forEach(t),LKe=r(T9," \u2014 "),XS=n(T9,"A",{href:!0});var pVr=s(XS);xKe=r(pVr,"CamembertTokenizer"),pVr.forEach(t),$Ke=r(T9," or "),zS=n(T9,"A",{href:!0});var uVr=s(zS);kKe=r(uVr,"CamembertTokenizerFast"),uVr.forEach(t),SKe=r(T9," (CamemBERT model)"),T9.forEach(t),RKe=i(S),Ag=n(S,"LI",{});var H5e=s(Ag);jre=n(H5e,"STRONG",{});var _Vr=s(jre);BKe=r(_Vr,"canine"),_Vr.forEach(t),PKe=r(H5e," \u2014 "),QS=n(H5e,"A",{href:!0});var bVr=s(QS);IKe=r(bVr,"CanineTokenizer"),bVr.forEach(t),qKe=r(H5e," (Canine model)"),H5e.forEach(t),NKe=i(S),jn=n(S,"LI",{});var M9=s(jn);Dre=n(M9,"STRONG",{});var vVr=s(Dre);jKe=r(vVr,"clip"),vVr.forEach(t),DKe=r(M9," \u2014 "),WS=n(M9,"A",{href:!0});var FVr=s(WS);GKe=r(FVr,"CLIPTokenizer"),FVr.forEach(t),OKe=r(M9," or "),HS=n(M9,"A",{href:!0});var TVr=s(HS);VKe=r(TVr,"CLIPTokenizerFast"),TVr.forEach(t),XKe=r(M9," (CLIP model)"),M9.forEach(t),zKe=i(S),Dn=n(S,"LI",{});var E9=s(Dn);Gre=n(E9,"STRONG",{});var MVr=s(Gre);QKe=r(MVr,"convbert"),MVr.forEach(t),WKe=r(E9," \u2014 "),US=n(E9,"A",{href:!0});var EVr=s(US);HKe=r(EVr,"ConvBertTokenizer"),EVr.forEach(t),UKe=r(E9," or "),JS=n(E9,"A",{href:!0});var CVr=s(JS);JKe=r(CVr,"ConvBertTokenizerFast"),CVr.forEach(t),YKe=r(E9," (ConvBERT model)"),E9.forEach(t),KKe=i(S),Gn=n(S,"LI",{});var C9=s(Gn);Ore=n(C9,"STRONG",{});var wVr=s(Ore);ZKe=r(wVr,"cpm"),wVr.forEach(t),eZe=r(C9," \u2014 "),YS=n(C9,"A",{href:!0});var AVr=s(YS);oZe=r(AVr,"CpmTokenizer"),AVr.forEach(t),rZe=r(C9," or "),KS=n(C9,"A",{href:!0});var yVr=s(KS);tZe=r(yVr,"CpmTokenizerFast"),yVr.forEach(t),aZe=r(C9," (CPM model)"),C9.forEach(t),nZe=i(S),yg=n(S,"LI",{});var U5e=s(yg);Vre=n(U5e,"STRONG",{});var LVr=s(Vre);sZe=r(LVr,"ctrl"),LVr.forEach(t),lZe=r(U5e," \u2014 "),ZS=n(U5e,"A",{href:!0});var xVr=s(ZS);iZe=r(xVr,"CTRLTokenizer"),xVr.forEach(t),dZe=r(U5e," (CTRL model)"),U5e.forEach(t),cZe=i(S),On=n(S,"LI",{});var w9=s(On);Xre=n(w9,"STRONG",{});var $Vr=s(Xre);fZe=r($Vr,"data2vec-text"),$Vr.forEach(t),mZe=r(w9," \u2014 "),eR=n(w9,"A",{href:!0});var kVr=s(eR);gZe=r(kVr,"RobertaTokenizer"),kVr.forEach(t),hZe=r(w9," or "),oR=n(w9,"A",{href:!0});var SVr=s(oR);pZe=r(SVr,"RobertaTokenizerFast"),SVr.forEach(t),uZe=r(w9," (Data2VecText model)"),w9.forEach(t),_Ze=i(S),Vn=n(S,"LI",{});var A9=s(Vn);zre=n(A9,"STRONG",{});var RVr=s(zre);bZe=r(RVr,"deberta"),RVr.forEach(t),vZe=r(A9," \u2014 "),rR=n(A9,"A",{href:!0});var BVr=s(rR);FZe=r(BVr,"DebertaTokenizer"),BVr.forEach(t),TZe=r(A9," or "),tR=n(A9,"A",{href:!0});var PVr=s(tR);MZe=r(PVr,"DebertaTokenizerFast"),PVr.forEach(t),EZe=r(A9," (DeBERTa model)"),A9.forEach(t),CZe=i(S),Xn=n(S,"LI",{});var y9=s(Xn);Qre=n(y9,"STRONG",{});var IVr=s(Qre);wZe=r(IVr,"deberta-v2"),IVr.forEach(t),AZe=r(y9," \u2014 "),aR=n(y9,"A",{href:!0});var qVr=s(aR);yZe=r(qVr,"DebertaV2Tokenizer"),qVr.forEach(t),LZe=r(y9," or "),nR=n(y9,"A",{href:!0});var NVr=s(nR);xZe=r(NVr,"DebertaV2TokenizerFast"),NVr.forEach(t),$Ze=r(y9," (DeBERTa-v2 model)"),y9.forEach(t),kZe=i(S),zn=n(S,"LI",{});var L9=s(zn);Wre=n(L9,"STRONG",{});var jVr=s(Wre);SZe=r(jVr,"distilbert"),jVr.forEach(t),RZe=r(L9," \u2014 "),sR=n(L9,"A",{href:!0});var DVr=s(sR);BZe=r(DVr,"DistilBertTokenizer"),DVr.forEach(t),PZe=r(L9," or "),lR=n(L9,"A",{href:!0});var GVr=s(lR);IZe=r(GVr,"DistilBertTokenizerFast"),GVr.forEach(t),qZe=r(L9," (DistilBERT model)"),L9.forEach(t),NZe=i(S),Qn=n(S,"LI",{});var x9=s(Qn);Hre=n(x9,"STRONG",{});var OVr=s(Hre);jZe=r(OVr,"dpr"),OVr.forEach(t),DZe=r(x9," \u2014 "),iR=n(x9,"A",{href:!0});var VVr=s(iR);GZe=r(VVr,"DPRQuestionEncoderTokenizer"),VVr.forEach(t),OZe=r(x9," or "),dR=n(x9,"A",{href:!0});var XVr=s(dR);VZe=r(XVr,"DPRQuestionEncoderTokenizerFast"),XVr.forEach(t),XZe=r(x9," (DPR model)"),x9.forEach(t),zZe=i(S),Wn=n(S,"LI",{});var $9=s(Wn);Ure=n($9,"STRONG",{});var zVr=s(Ure);QZe=r(zVr,"electra"),zVr.forEach(t),WZe=r($9," \u2014 "),cR=n($9,"A",{href:!0});var QVr=s(cR);HZe=r(QVr,"ElectraTokenizer"),QVr.forEach(t),UZe=r($9," or "),fR=n($9,"A",{href:!0});var WVr=s(fR);JZe=r(WVr,"ElectraTokenizerFast"),WVr.forEach(t),YZe=r($9," (ELECTRA model)"),$9.forEach(t),KZe=i(S),Lg=n(S,"LI",{});var J5e=s(Lg);Jre=n(J5e,"STRONG",{});var HVr=s(Jre);ZZe=r(HVr,"flaubert"),HVr.forEach(t),eeo=r(J5e," \u2014 "),mR=n(J5e,"A",{href:!0});var UVr=s(mR);oeo=r(UVr,"FlaubertTokenizer"),UVr.forEach(t),reo=r(J5e," (FlauBERT model)"),J5e.forEach(t),teo=i(S),Hn=n(S,"LI",{});var k9=s(Hn);Yre=n(k9,"STRONG",{});var JVr=s(Yre);aeo=r(JVr,"fnet"),JVr.forEach(t),neo=r(k9," \u2014 "),gR=n(k9,"A",{href:!0});var YVr=s(gR);seo=r(YVr,"FNetTokenizer"),YVr.forEach(t),leo=r(k9," or "),hR=n(k9,"A",{href:!0});var KVr=s(hR);ieo=r(KVr,"FNetTokenizerFast"),KVr.forEach(t),deo=r(k9," (FNet model)"),k9.forEach(t),ceo=i(S),xg=n(S,"LI",{});var Y5e=s(xg);Kre=n(Y5e,"STRONG",{});var ZVr=s(Kre);feo=r(ZVr,"fsmt"),ZVr.forEach(t),meo=r(Y5e," \u2014 "),pR=n(Y5e,"A",{href:!0});var eXr=s(pR);geo=r(eXr,"FSMTTokenizer"),eXr.forEach(t),heo=r(Y5e," (FairSeq Machine-Translation model)"),Y5e.forEach(t),peo=i(S),Un=n(S,"LI",{});var S9=s(Un);Zre=n(S9,"STRONG",{});var oXr=s(Zre);ueo=r(oXr,"funnel"),oXr.forEach(t),_eo=r(S9," \u2014 "),uR=n(S9,"A",{href:!0});var rXr=s(uR);beo=r(rXr,"FunnelTokenizer"),rXr.forEach(t),veo=r(S9," or "),_R=n(S9,"A",{href:!0});var tXr=s(_R);Feo=r(tXr,"FunnelTokenizerFast"),tXr.forEach(t),Teo=r(S9," (Funnel Transformer model)"),S9.forEach(t),Meo=i(S),Jn=n(S,"LI",{});var R9=s(Jn);ete=n(R9,"STRONG",{});var aXr=s(ete);Eeo=r(aXr,"gpt2"),aXr.forEach(t),Ceo=r(R9," \u2014 "),bR=n(R9,"A",{href:!0});var nXr=s(bR);weo=r(nXr,"GPT2Tokenizer"),nXr.forEach(t),Aeo=r(R9," or "),vR=n(R9,"A",{href:!0});var sXr=s(vR);yeo=r(sXr,"GPT2TokenizerFast"),sXr.forEach(t),Leo=r(R9," (OpenAI GPT-2 model)"),R9.forEach(t),xeo=i(S),Yn=n(S,"LI",{});var B9=s(Yn);ote=n(B9,"STRONG",{});var lXr=s(ote);$eo=r(lXr,"gpt_neo"),lXr.forEach(t),keo=r(B9," \u2014 "),FR=n(B9,"A",{href:!0});var iXr=s(FR);Seo=r(iXr,"GPT2Tokenizer"),iXr.forEach(t),Reo=r(B9," or "),TR=n(B9,"A",{href:!0});var dXr=s(TR);Beo=r(dXr,"GPT2TokenizerFast"),dXr.forEach(t),Peo=r(B9," (GPT Neo model)"),B9.forEach(t),Ieo=i(S),Kn=n(S,"LI",{});var P9=s(Kn);rte=n(P9,"STRONG",{});var cXr=s(rte);qeo=r(cXr,"gptj"),cXr.forEach(t),Neo=r(P9," \u2014 "),MR=n(P9,"A",{href:!0});var fXr=s(MR);jeo=r(fXr,"GPT2Tokenizer"),fXr.forEach(t),Deo=r(P9," or "),ER=n(P9,"A",{href:!0});var mXr=s(ER);Geo=r(mXr,"GPT2TokenizerFast"),mXr.forEach(t),Oeo=r(P9," (GPT-J model)"),P9.forEach(t),Veo=i(S),Zn=n(S,"LI",{});var I9=s(Zn);tte=n(I9,"STRONG",{});var gXr=s(tte);Xeo=r(gXr,"herbert"),gXr.forEach(t),zeo=r(I9," \u2014 "),CR=n(I9,"A",{href:!0});var hXr=s(CR);Qeo=r(hXr,"HerbertTokenizer"),hXr.forEach(t),Weo=r(I9," or "),wR=n(I9,"A",{href:!0});var pXr=s(wR);Heo=r(pXr,"HerbertTokenizerFast"),pXr.forEach(t),Ueo=r(I9," (HerBERT model)"),I9.forEach(t),Jeo=i(S),$g=n(S,"LI",{});var K5e=s($g);ate=n(K5e,"STRONG",{});var uXr=s(ate);Yeo=r(uXr,"hubert"),uXr.forEach(t),Keo=r(K5e," \u2014 "),AR=n(K5e,"A",{href:!0});var _Xr=s(AR);Zeo=r(_Xr,"Wav2Vec2CTCTokenizer"),_Xr.forEach(t),eoo=r(K5e," (Hubert model)"),K5e.forEach(t),ooo=i(S),es=n(S,"LI",{});var q9=s(es);nte=n(q9,"STRONG",{});var bXr=s(nte);roo=r(bXr,"ibert"),bXr.forEach(t),too=r(q9," \u2014 "),yR=n(q9,"A",{href:!0});var vXr=s(yR);aoo=r(vXr,"RobertaTokenizer"),vXr.forEach(t),noo=r(q9," or "),LR=n(q9,"A",{href:!0});var FXr=s(LR);soo=r(FXr,"RobertaTokenizerFast"),FXr.forEach(t),loo=r(q9," (I-BERT model)"),q9.forEach(t),ioo=i(S),os=n(S,"LI",{});var N9=s(os);ste=n(N9,"STRONG",{});var TXr=s(ste);doo=r(TXr,"layoutlm"),TXr.forEach(t),coo=r(N9," \u2014 "),xR=n(N9,"A",{href:!0});var MXr=s(xR);foo=r(MXr,"LayoutLMTokenizer"),MXr.forEach(t),moo=r(N9," or "),$R=n(N9,"A",{href:!0});var EXr=s($R);goo=r(EXr,"LayoutLMTokenizerFast"),EXr.forEach(t),hoo=r(N9," (LayoutLM model)"),N9.forEach(t),poo=i(S),rs=n(S,"LI",{});var j9=s(rs);lte=n(j9,"STRONG",{});var CXr=s(lte);uoo=r(CXr,"layoutlmv2"),CXr.forEach(t),_oo=r(j9," \u2014 "),kR=n(j9,"A",{href:!0});var wXr=s(kR);boo=r(wXr,"LayoutLMv2Tokenizer"),wXr.forEach(t),voo=r(j9," or "),SR=n(j9,"A",{href:!0});var AXr=s(SR);Foo=r(AXr,"LayoutLMv2TokenizerFast"),AXr.forEach(t),Too=r(j9," (LayoutLMv2 model)"),j9.forEach(t),Moo=i(S),ts=n(S,"LI",{});var D9=s(ts);ite=n(D9,"STRONG",{});var yXr=s(ite);Eoo=r(yXr,"layoutlmv3"),yXr.forEach(t),Coo=r(D9," \u2014 "),RR=n(D9,"A",{href:!0});var LXr=s(RR);woo=r(LXr,"LayoutLMv3Tokenizer"),LXr.forEach(t),Aoo=r(D9," or "),BR=n(D9,"A",{href:!0});var xXr=s(BR);yoo=r(xXr,"LayoutLMv3TokenizerFast"),xXr.forEach(t),Loo=r(D9," (LayoutLMv3 model)"),D9.forEach(t),xoo=i(S),as=n(S,"LI",{});var G9=s(as);dte=n(G9,"STRONG",{});var $Xr=s(dte);$oo=r($Xr,"layoutxlm"),$Xr.forEach(t),koo=r(G9," \u2014 "),PR=n(G9,"A",{href:!0});var kXr=s(PR);Soo=r(kXr,"LayoutXLMTokenizer"),kXr.forEach(t),Roo=r(G9," or "),IR=n(G9,"A",{href:!0});var SXr=s(IR);Boo=r(SXr,"LayoutXLMTokenizerFast"),SXr.forEach(t),Poo=r(G9," (LayoutXLM model)"),G9.forEach(t),Ioo=i(S),ns=n(S,"LI",{});var O9=s(ns);cte=n(O9,"STRONG",{});var RXr=s(cte);qoo=r(RXr,"led"),RXr.forEach(t),Noo=r(O9," \u2014 "),qR=n(O9,"A",{href:!0});var BXr=s(qR);joo=r(BXr,"LEDTokenizer"),BXr.forEach(t),Doo=r(O9," or "),NR=n(O9,"A",{href:!0});var PXr=s(NR);Goo=r(PXr,"LEDTokenizerFast"),PXr.forEach(t),Ooo=r(O9," (LED model)"),O9.forEach(t),Voo=i(S),ss=n(S,"LI",{});var V9=s(ss);fte=n(V9,"STRONG",{});var IXr=s(fte);Xoo=r(IXr,"longformer"),IXr.forEach(t),zoo=r(V9," \u2014 "),jR=n(V9,"A",{href:!0});var qXr=s(jR);Qoo=r(qXr,"LongformerTokenizer"),qXr.forEach(t),Woo=r(V9," or "),DR=n(V9,"A",{href:!0});var NXr=s(DR);Hoo=r(NXr,"LongformerTokenizerFast"),NXr.forEach(t),Uoo=r(V9," (Longformer model)"),V9.forEach(t),Joo=i(S),kg=n(S,"LI",{});var Z5e=s(kg);mte=n(Z5e,"STRONG",{});var jXr=s(mte);Yoo=r(jXr,"luke"),jXr.forEach(t),Koo=r(Z5e," \u2014 "),GR=n(Z5e,"A",{href:!0});var DXr=s(GR);Zoo=r(DXr,"LukeTokenizer"),DXr.forEach(t),ero=r(Z5e," (LUKE model)"),Z5e.forEach(t),oro=i(S),ls=n(S,"LI",{});var X9=s(ls);gte=n(X9,"STRONG",{});var GXr=s(gte);rro=r(GXr,"lxmert"),GXr.forEach(t),tro=r(X9," \u2014 "),OR=n(X9,"A",{href:!0});var OXr=s(OR);aro=r(OXr,"LxmertTokenizer"),OXr.forEach(t),nro=r(X9," or "),VR=n(X9,"A",{href:!0});var VXr=s(VR);sro=r(VXr,"LxmertTokenizerFast"),VXr.forEach(t),lro=r(X9," (LXMERT model)"),X9.forEach(t),iro=i(S),Sg=n(S,"LI",{});var eCe=s(Sg);hte=n(eCe,"STRONG",{});var XXr=s(hte);dro=r(XXr,"m2m_100"),XXr.forEach(t),cro=r(eCe," \u2014 "),XR=n(eCe,"A",{href:!0});var zXr=s(XR);fro=r(zXr,"M2M100Tokenizer"),zXr.forEach(t),mro=r(eCe," (M2M100 model)"),eCe.forEach(t),gro=i(S),Rg=n(S,"LI",{});var oCe=s(Rg);pte=n(oCe,"STRONG",{});var QXr=s(pte);hro=r(QXr,"marian"),QXr.forEach(t),pro=r(oCe," \u2014 "),zR=n(oCe,"A",{href:!0});var WXr=s(zR);uro=r(WXr,"MarianTokenizer"),WXr.forEach(t),_ro=r(oCe," (Marian model)"),oCe.forEach(t),bro=i(S),is=n(S,"LI",{});var z9=s(is);ute=n(z9,"STRONG",{});var HXr=s(ute);vro=r(HXr,"mbart"),HXr.forEach(t),Fro=r(z9," \u2014 "),QR=n(z9,"A",{href:!0});var UXr=s(QR);Tro=r(UXr,"MBartTokenizer"),UXr.forEach(t),Mro=r(z9," or "),WR=n(z9,"A",{href:!0});var JXr=s(WR);Ero=r(JXr,"MBartTokenizerFast"),JXr.forEach(t),Cro=r(z9," (mBART model)"),z9.forEach(t),wro=i(S),ds=n(S,"LI",{});var Q9=s(ds);_te=n(Q9,"STRONG",{});var YXr=s(_te);Aro=r(YXr,"mbart50"),YXr.forEach(t),yro=r(Q9," \u2014 "),HR=n(Q9,"A",{href:!0});var KXr=s(HR);Lro=r(KXr,"MBart50Tokenizer"),KXr.forEach(t),xro=r(Q9," or "),UR=n(Q9,"A",{href:!0});var ZXr=s(UR);$ro=r(ZXr,"MBart50TokenizerFast"),ZXr.forEach(t),kro=r(Q9," (mBART-50 model)"),Q9.forEach(t),Sro=i(S),cs=n(S,"LI",{});var W9=s(cs);bte=n(W9,"STRONG",{});var ezr=s(bte);Rro=r(ezr,"megatron-bert"),ezr.forEach(t),Bro=r(W9," \u2014 "),JR=n(W9,"A",{href:!0});var ozr=s(JR);Pro=r(ozr,"BertTokenizer"),ozr.forEach(t),Iro=r(W9," or "),YR=n(W9,"A",{href:!0});var rzr=s(YR);qro=r(rzr,"BertTokenizerFast"),rzr.forEach(t),Nro=r(W9," (MegatronBert model)"),W9.forEach(t),jro=i(S),Bg=n(S,"LI",{});var rCe=s(Bg);vte=n(rCe,"STRONG",{});var tzr=s(vte);Dro=r(tzr,"mluke"),tzr.forEach(t),Gro=r(rCe," \u2014 "),KR=n(rCe,"A",{href:!0});var azr=s(KR);Oro=r(azr,"MLukeTokenizer"),azr.forEach(t),Vro=r(rCe," (mLUKE model)"),rCe.forEach(t),Xro=i(S),fs=n(S,"LI",{});var H9=s(fs);Fte=n(H9,"STRONG",{});var nzr=s(Fte);zro=r(nzr,"mobilebert"),nzr.forEach(t),Qro=r(H9," \u2014 "),ZR=n(H9,"A",{href:!0});var szr=s(ZR);Wro=r(szr,"MobileBertTokenizer"),szr.forEach(t),Hro=r(H9," or "),eB=n(H9,"A",{href:!0});var lzr=s(eB);Uro=r(lzr,"MobileBertTokenizerFast"),lzr.forEach(t),Jro=r(H9," (MobileBERT model)"),H9.forEach(t),Yro=i(S),ms=n(S,"LI",{});var U9=s(ms);Tte=n(U9,"STRONG",{});var izr=s(Tte);Kro=r(izr,"mpnet"),izr.forEach(t),Zro=r(U9," \u2014 "),oB=n(U9,"A",{href:!0});var dzr=s(oB);eto=r(dzr,"MPNetTokenizer"),dzr.forEach(t),oto=r(U9," or "),rB=n(U9,"A",{href:!0});var czr=s(rB);rto=r(czr,"MPNetTokenizerFast"),czr.forEach(t),tto=r(U9," (MPNet model)"),U9.forEach(t),ato=i(S),gs=n(S,"LI",{});var J9=s(gs);Mte=n(J9,"STRONG",{});var fzr=s(Mte);nto=r(fzr,"mt5"),fzr.forEach(t),sto=r(J9," \u2014 "),tB=n(J9,"A",{href:!0});var mzr=s(tB);lto=r(mzr,"MT5Tokenizer"),mzr.forEach(t),ito=r(J9," or "),aB=n(J9,"A",{href:!0});var gzr=s(aB);dto=r(gzr,"MT5TokenizerFast"),gzr.forEach(t),cto=r(J9," (mT5 model)"),J9.forEach(t),fto=i(S),hs=n(S,"LI",{});var Y9=s(hs);Ete=n(Y9,"STRONG",{});var hzr=s(Ete);mto=r(hzr,"nystromformer"),hzr.forEach(t),gto=r(Y9," \u2014 "),nB=n(Y9,"A",{href:!0});var pzr=s(nB);hto=r(pzr,"AlbertTokenizer"),pzr.forEach(t),pto=r(Y9," or "),sB=n(Y9,"A",{href:!0});var uzr=s(sB);uto=r(uzr,"AlbertTokenizerFast"),uzr.forEach(t),_to=r(Y9," (Nystromformer model)"),Y9.forEach(t),bto=i(S),ps=n(S,"LI",{});var K9=s(ps);Cte=n(K9,"STRONG",{});var _zr=s(Cte);vto=r(_zr,"openai-gpt"),_zr.forEach(t),Fto=r(K9," \u2014 "),lB=n(K9,"A",{href:!0});var bzr=s(lB);Tto=r(bzr,"OpenAIGPTTokenizer"),bzr.forEach(t),Mto=r(K9," or "),iB=n(K9,"A",{href:!0});var vzr=s(iB);Eto=r(vzr,"OpenAIGPTTokenizerFast"),vzr.forEach(t),Cto=r(K9," (OpenAI GPT model)"),K9.forEach(t),wto=i(S),us=n(S,"LI",{});var Z9=s(us);wte=n(Z9,"STRONG",{});var Fzr=s(wte);Ato=r(Fzr,"pegasus"),Fzr.forEach(t),yto=r(Z9," \u2014 "),dB=n(Z9,"A",{href:!0});var Tzr=s(dB);Lto=r(Tzr,"PegasusTokenizer"),Tzr.forEach(t),xto=r(Z9," or "),cB=n(Z9,"A",{href:!0});var Mzr=s(cB);$to=r(Mzr,"PegasusTokenizerFast"),Mzr.forEach(t),kto=r(Z9," (Pegasus model)"),Z9.forEach(t),Sto=i(S),Pg=n(S,"LI",{});var tCe=s(Pg);Ate=n(tCe,"STRONG",{});var Ezr=s(Ate);Rto=r(Ezr,"perceiver"),Ezr.forEach(t),Bto=r(tCe," \u2014 "),fB=n(tCe,"A",{href:!0});var Czr=s(fB);Pto=r(Czr,"PerceiverTokenizer"),Czr.forEach(t),Ito=r(tCe," (Perceiver model)"),tCe.forEach(t),qto=i(S),Ig=n(S,"LI",{});var aCe=s(Ig);yte=n(aCe,"STRONG",{});var wzr=s(yte);Nto=r(wzr,"phobert"),wzr.forEach(t),jto=r(aCe," \u2014 "),mB=n(aCe,"A",{href:!0});var Azr=s(mB);Dto=r(Azr,"PhobertTokenizer"),Azr.forEach(t),Gto=r(aCe," (PhoBERT model)"),aCe.forEach(t),Oto=i(S),qg=n(S,"LI",{});var nCe=s(qg);Lte=n(nCe,"STRONG",{});var yzr=s(Lte);Vto=r(yzr,"plbart"),yzr.forEach(t),Xto=r(nCe," \u2014 "),gB=n(nCe,"A",{href:!0});var Lzr=s(gB);zto=r(Lzr,"PLBartTokenizer"),Lzr.forEach(t),Qto=r(nCe," (PLBart model)"),nCe.forEach(t),Wto=i(S),Ng=n(S,"LI",{});var sCe=s(Ng);xte=n(sCe,"STRONG",{});var xzr=s(xte);Hto=r(xzr,"prophetnet"),xzr.forEach(t),Uto=r(sCe," \u2014 "),hB=n(sCe,"A",{href:!0});var $zr=s(hB);Jto=r($zr,"ProphetNetTokenizer"),$zr.forEach(t),Yto=r(sCe," (ProphetNet model)"),sCe.forEach(t),Kto=i(S),_s=n(S,"LI",{});var e$=s(_s);$te=n(e$,"STRONG",{});var kzr=s($te);Zto=r(kzr,"qdqbert"),kzr.forEach(t),eao=r(e$," \u2014 "),pB=n(e$,"A",{href:!0});var Szr=s(pB);oao=r(Szr,"BertTokenizer"),Szr.forEach(t),rao=r(e$," or "),uB=n(e$,"A",{href:!0});var Rzr=s(uB);tao=r(Rzr,"BertTokenizerFast"),Rzr.forEach(t),aao=r(e$," (QDQBert model)"),e$.forEach(t),nao=i(S),jg=n(S,"LI",{});var lCe=s(jg);kte=n(lCe,"STRONG",{});var Bzr=s(kte);sao=r(Bzr,"rag"),Bzr.forEach(t),lao=r(lCe," \u2014 "),_B=n(lCe,"A",{href:!0});var Pzr=s(_B);iao=r(Pzr,"RagTokenizer"),Pzr.forEach(t),dao=r(lCe," (RAG model)"),lCe.forEach(t),cao=i(S),bs=n(S,"LI",{});var o$=s(bs);Ste=n(o$,"STRONG",{});var Izr=s(Ste);fao=r(Izr,"realm"),Izr.forEach(t),mao=r(o$," \u2014 "),bB=n(o$,"A",{href:!0});var qzr=s(bB);gao=r(qzr,"RealmTokenizer"),qzr.forEach(t),hao=r(o$," or "),vB=n(o$,"A",{href:!0});var Nzr=s(vB);pao=r(Nzr,"RealmTokenizerFast"),Nzr.forEach(t),uao=r(o$," (Realm model)"),o$.forEach(t),_ao=i(S),vs=n(S,"LI",{});var r$=s(vs);Rte=n(r$,"STRONG",{});var jzr=s(Rte);bao=r(jzr,"reformer"),jzr.forEach(t),vao=r(r$," \u2014 "),FB=n(r$,"A",{href:!0});var Dzr=s(FB);Fao=r(Dzr,"ReformerTokenizer"),Dzr.forEach(t),Tao=r(r$," or "),TB=n(r$,"A",{href:!0});var Gzr=s(TB);Mao=r(Gzr,"ReformerTokenizerFast"),Gzr.forEach(t),Eao=r(r$," (Reformer model)"),r$.forEach(t),Cao=i(S),Fs=n(S,"LI",{});var t$=s(Fs);Bte=n(t$,"STRONG",{});var Ozr=s(Bte);wao=r(Ozr,"rembert"),Ozr.forEach(t),Aao=r(t$," \u2014 "),MB=n(t$,"A",{href:!0});var Vzr=s(MB);yao=r(Vzr,"RemBertTokenizer"),Vzr.forEach(t),Lao=r(t$," or "),EB=n(t$,"A",{href:!0});var Xzr=s(EB);xao=r(Xzr,"RemBertTokenizerFast"),Xzr.forEach(t),$ao=r(t$," (RemBERT model)"),t$.forEach(t),kao=i(S),Ts=n(S,"LI",{});var a$=s(Ts);Pte=n(a$,"STRONG",{});var zzr=s(Pte);Sao=r(zzr,"retribert"),zzr.forEach(t),Rao=r(a$," \u2014 "),CB=n(a$,"A",{href:!0});var Qzr=s(CB);Bao=r(Qzr,"RetriBertTokenizer"),Qzr.forEach(t),Pao=r(a$," or "),wB=n(a$,"A",{href:!0});var Wzr=s(wB);Iao=r(Wzr,"RetriBertTokenizerFast"),Wzr.forEach(t),qao=r(a$," (RetriBERT model)"),a$.forEach(t),Nao=i(S),Ms=n(S,"LI",{});var n$=s(Ms);Ite=n(n$,"STRONG",{});var Hzr=s(Ite);jao=r(Hzr,"roberta"),Hzr.forEach(t),Dao=r(n$," \u2014 "),AB=n(n$,"A",{href:!0});var Uzr=s(AB);Gao=r(Uzr,"RobertaTokenizer"),Uzr.forEach(t),Oao=r(n$," or "),yB=n(n$,"A",{href:!0});var Jzr=s(yB);Vao=r(Jzr,"RobertaTokenizerFast"),Jzr.forEach(t),Xao=r(n$," (RoBERTa model)"),n$.forEach(t),zao=i(S),Es=n(S,"LI",{});var s$=s(Es);qte=n(s$,"STRONG",{});var Yzr=s(qte);Qao=r(Yzr,"roformer"),Yzr.forEach(t),Wao=r(s$," \u2014 "),LB=n(s$,"A",{href:!0});var Kzr=s(LB);Hao=r(Kzr,"RoFormerTokenizer"),Kzr.forEach(t),Uao=r(s$," or "),xB=n(s$,"A",{href:!0});var Zzr=s(xB);Jao=r(Zzr,"RoFormerTokenizerFast"),Zzr.forEach(t),Yao=r(s$," (RoFormer model)"),s$.forEach(t),Kao=i(S),Dg=n(S,"LI",{});var iCe=s(Dg);Nte=n(iCe,"STRONG",{});var eQr=s(Nte);Zao=r(eQr,"speech_to_text"),eQr.forEach(t),eno=r(iCe," \u2014 "),$B=n(iCe,"A",{href:!0});var oQr=s($B);ono=r(oQr,"Speech2TextTokenizer"),oQr.forEach(t),rno=r(iCe," (Speech2Text model)"),iCe.forEach(t),tno=i(S),Gg=n(S,"LI",{});var dCe=s(Gg);jte=n(dCe,"STRONG",{});var rQr=s(jte);ano=r(rQr,"speech_to_text_2"),rQr.forEach(t),nno=r(dCe," \u2014 "),kB=n(dCe,"A",{href:!0});var tQr=s(kB);sno=r(tQr,"Speech2Text2Tokenizer"),tQr.forEach(t),lno=r(dCe," (Speech2Text2 model)"),dCe.forEach(t),ino=i(S),Cs=n(S,"LI",{});var l$=s(Cs);Dte=n(l$,"STRONG",{});var aQr=s(Dte);dno=r(aQr,"splinter"),aQr.forEach(t),cno=r(l$," \u2014 "),SB=n(l$,"A",{href:!0});var nQr=s(SB);fno=r(nQr,"SplinterTokenizer"),nQr.forEach(t),mno=r(l$," or "),RB=n(l$,"A",{href:!0});var sQr=s(RB);gno=r(sQr,"SplinterTokenizerFast"),sQr.forEach(t),hno=r(l$," (Splinter model)"),l$.forEach(t),pno=i(S),ws=n(S,"LI",{});var i$=s(ws);Gte=n(i$,"STRONG",{});var lQr=s(Gte);uno=r(lQr,"squeezebert"),lQr.forEach(t),_no=r(i$," \u2014 "),BB=n(i$,"A",{href:!0});var iQr=s(BB);bno=r(iQr,"SqueezeBertTokenizer"),iQr.forEach(t),vno=r(i$," or "),PB=n(i$,"A",{href:!0});var dQr=s(PB);Fno=r(dQr,"SqueezeBertTokenizerFast"),dQr.forEach(t),Tno=r(i$," (SqueezeBERT model)"),i$.forEach(t),Mno=i(S),As=n(S,"LI",{});var d$=s(As);Ote=n(d$,"STRONG",{});var cQr=s(Ote);Eno=r(cQr,"t5"),cQr.forEach(t),Cno=r(d$," \u2014 "),IB=n(d$,"A",{href:!0});var fQr=s(IB);wno=r(fQr,"T5Tokenizer"),fQr.forEach(t),Ano=r(d$," or "),qB=n(d$,"A",{href:!0});var mQr=s(qB);yno=r(mQr,"T5TokenizerFast"),mQr.forEach(t),Lno=r(d$," (T5 model)"),d$.forEach(t),xno=i(S),Og=n(S,"LI",{});var cCe=s(Og);Vte=n(cCe,"STRONG",{});var gQr=s(Vte);$no=r(gQr,"tapas"),gQr.forEach(t),kno=r(cCe," \u2014 "),NB=n(cCe,"A",{href:!0});var hQr=s(NB);Sno=r(hQr,"TapasTokenizer"),hQr.forEach(t),Rno=r(cCe," (TAPAS model)"),cCe.forEach(t),Bno=i(S),Vg=n(S,"LI",{});var fCe=s(Vg);Xte=n(fCe,"STRONG",{});var pQr=s(Xte);Pno=r(pQr,"tapex"),pQr.forEach(t),Ino=r(fCe," \u2014 "),jB=n(fCe,"A",{href:!0});var uQr=s(jB);qno=r(uQr,"TapexTokenizer"),uQr.forEach(t),Nno=r(fCe," (TAPEX model)"),fCe.forEach(t),jno=i(S),Xg=n(S,"LI",{});var mCe=s(Xg);zte=n(mCe,"STRONG",{});var _Qr=s(zte);Dno=r(_Qr,"transfo-xl"),_Qr.forEach(t),Gno=r(mCe," \u2014 "),DB=n(mCe,"A",{href:!0});var bQr=s(DB);Ono=r(bQr,"TransfoXLTokenizer"),bQr.forEach(t),Vno=r(mCe," (Transformer-XL model)"),mCe.forEach(t),Xno=i(S),ys=n(S,"LI",{});var c$=s(ys);Qte=n(c$,"STRONG",{});var vQr=s(Qte);zno=r(vQr,"visual_bert"),vQr.forEach(t),Qno=r(c$," \u2014 "),GB=n(c$,"A",{href:!0});var FQr=s(GB);Wno=r(FQr,"BertTokenizer"),FQr.forEach(t),Hno=r(c$," or "),OB=n(c$,"A",{href:!0});var TQr=s(OB);Uno=r(TQr,"BertTokenizerFast"),TQr.forEach(t),Jno=r(c$," (VisualBert model)"),c$.forEach(t),Yno=i(S),zg=n(S,"LI",{});var gCe=s(zg);Wte=n(gCe,"STRONG",{});var MQr=s(Wte);Kno=r(MQr,"wav2vec2"),MQr.forEach(t),Zno=r(gCe," \u2014 "),VB=n(gCe,"A",{href:!0});var EQr=s(VB);eso=r(EQr,"Wav2Vec2CTCTokenizer"),EQr.forEach(t),oso=r(gCe," (Wav2Vec2 model)"),gCe.forEach(t),rso=i(S),Qg=n(S,"LI",{});var hCe=s(Qg);Hte=n(hCe,"STRONG",{});var CQr=s(Hte);tso=r(CQr,"wav2vec2_phoneme"),CQr.forEach(t),aso=r(hCe," \u2014 "),XB=n(hCe,"A",{href:!0});var wQr=s(XB);nso=r(wQr,"Wav2Vec2PhonemeCTCTokenizer"),wQr.forEach(t),sso=r(hCe," (Wav2Vec2Phoneme model)"),hCe.forEach(t),lso=i(S),Ls=n(S,"LI",{});var f$=s(Ls);Ute=n(f$,"STRONG",{});var AQr=s(Ute);iso=r(AQr,"xglm"),AQr.forEach(t),dso=r(f$," \u2014 "),zB=n(f$,"A",{href:!0});var yQr=s(zB);cso=r(yQr,"XGLMTokenizer"),yQr.forEach(t),fso=r(f$," or "),QB=n(f$,"A",{href:!0});var LQr=s(QB);mso=r(LQr,"XGLMTokenizerFast"),LQr.forEach(t),gso=r(f$," (XGLM model)"),f$.forEach(t),hso=i(S),Wg=n(S,"LI",{});var pCe=s(Wg);Jte=n(pCe,"STRONG",{});var xQr=s(Jte);pso=r(xQr,"xlm"),xQr.forEach(t),uso=r(pCe," \u2014 "),WB=n(pCe,"A",{href:!0});var $Qr=s(WB);_so=r($Qr,"XLMTokenizer"),$Qr.forEach(t),bso=r(pCe," (XLM model)"),pCe.forEach(t),vso=i(S),Hg=n(S,"LI",{});var uCe=s(Hg);Yte=n(uCe,"STRONG",{});var kQr=s(Yte);Fso=r(kQr,"xlm-prophetnet"),kQr.forEach(t),Tso=r(uCe," \u2014 "),HB=n(uCe,"A",{href:!0});var SQr=s(HB);Mso=r(SQr,"XLMProphetNetTokenizer"),SQr.forEach(t),Eso=r(uCe," (XLMProphetNet model)"),uCe.forEach(t),Cso=i(S),xs=n(S,"LI",{});var m$=s(xs);Kte=n(m$,"STRONG",{});var RQr=s(Kte);wso=r(RQr,"xlm-roberta"),RQr.forEach(t),Aso=r(m$," \u2014 "),UB=n(m$,"A",{href:!0});var BQr=s(UB);yso=r(BQr,"XLMRobertaTokenizer"),BQr.forEach(t),Lso=r(m$," or "),JB=n(m$,"A",{href:!0});var PQr=s(JB);xso=r(PQr,"XLMRobertaTokenizerFast"),PQr.forEach(t),$so=r(m$," (XLM-RoBERTa model)"),m$.forEach(t),kso=i(S),$s=n(S,"LI",{});var g$=s($s);Zte=n(g$,"STRONG",{});var IQr=s(Zte);Sso=r(IQr,"xlm-roberta-xl"),IQr.forEach(t),Rso=r(g$," \u2014 "),YB=n(g$,"A",{href:!0});var qQr=s(YB);Bso=r(qQr,"RobertaTokenizer"),qQr.forEach(t),Pso=r(g$," or "),KB=n(g$,"A",{href:!0});var NQr=s(KB);Iso=r(NQr,"RobertaTokenizerFast"),NQr.forEach(t),qso=r(g$," (XLM-RoBERTa-XL model)"),g$.forEach(t),Nso=i(S),ks=n(S,"LI",{});var h$=s(ks);eae=n(h$,"STRONG",{});var jQr=s(eae);jso=r(jQr,"xlnet"),jQr.forEach(t),Dso=r(h$," \u2014 "),ZB=n(h$,"A",{href:!0});var DQr=s(ZB);Gso=r(DQr,"XLNetTokenizer"),DQr.forEach(t),Oso=r(h$," or "),eP=n(h$,"A",{href:!0});var GQr=s(eP);Vso=r(GQr,"XLNetTokenizerFast"),GQr.forEach(t),Xso=r(h$," (XLNet model)"),h$.forEach(t),zso=i(S),Ss=n(S,"LI",{});var p$=s(Ss);oae=n(p$,"STRONG",{});var OQr=s(oae);Qso=r(OQr,"yoso"),OQr.forEach(t),Wso=r(p$," \u2014 "),oP=n(p$,"A",{href:!0});var VQr=s(oP);Hso=r(VQr,"AlbertTokenizer"),VQr.forEach(t),Uso=r(p$," or "),rP=n(p$,"A",{href:!0});var XQr=s(rP);Jso=r(XQr,"AlbertTokenizerFast"),XQr.forEach(t),Yso=r(p$," (YOSO model)"),p$.forEach(t),S.forEach(t),Kso=i(qs),T(Ug.$$.fragment,qs),qs.forEach(t),Zso=i(Is),Jg=n(Is,"DIV",{class:!0});var hNe=s(Jg);T(hA.$$.fragment,hNe),elo=i(hNe),rae=n(hNe,"P",{});var zQr=s(rae);olo=r(zQr,"Register a new tokenizer in this mapping."),zQr.forEach(t),hNe.forEach(t),Is.forEach(t),pIe=i(f),vi=n(f,"H2",{class:!0});var pNe=s(vi);Yg=n(pNe,"A",{id:!0,class:!0,href:!0});var QQr=s(Yg);tae=n(QQr,"SPAN",{});var WQr=s(tae);T(pA.$$.fragment,WQr),WQr.forEach(t),QQr.forEach(t),rlo=i(pNe),aae=n(pNe,"SPAN",{});var HQr=s(aae);tlo=r(HQr,"AutoFeatureExtractor"),HQr.forEach(t),pNe.forEach(t),uIe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(uA.$$.fragment,Ns),alo=i(Ns),_A=n(Ns,"P",{});var uNe=s(_A);nlo=r(uNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),tP=n(uNe,"A",{href:!0});var UQr=s(tP);slo=r(UQr,"AutoFeatureExtractor.from_pretrained()"),UQr.forEach(t),llo=r(uNe," class method."),uNe.forEach(t),ilo=i(Ns),bA=n(Ns,"P",{});var _Ne=s(bA);dlo=r(_Ne,"This class cannot be instantiated directly using "),nae=n(_Ne,"CODE",{});var JQr=s(nae);clo=r(JQr,"__init__()"),JQr.forEach(t),flo=r(_Ne," (throws an error)."),_Ne.forEach(t),mlo=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(vA.$$.fragment,Yt),glo=i(Yt),sae=n(Yt,"P",{});var YQr=s(sae);hlo=r(YQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),YQr.forEach(t),plo=i(Yt),wa=n(Yt,"P",{});var t3=s(wa);ulo=r(t3,"The feature extractor class to instantiate is selected based on the "),lae=n(t3,"CODE",{});var KQr=s(lae);_lo=r(KQr,"model_type"),KQr.forEach(t),blo=r(t3,` property of the config object
(either passed as an argument or loaded from `),iae=n(t3,"CODE",{});var ZQr=s(iae);vlo=r(ZQr,"pretrained_model_name_or_path"),ZQr.forEach(t),Flo=r(t3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),dae=n(t3,"CODE",{});var eWr=s(dae);Tlo=r(eWr,"pretrained_model_name_or_path"),eWr.forEach(t),Mlo=r(t3,":"),t3.forEach(t),Elo=i(Yt),Z=n(Yt,"UL",{});var te=s(Z);Kg=n(te,"LI",{});var _Ce=s(Kg);cae=n(_Ce,"STRONG",{});var oWr=s(cae);Clo=r(oWr,"beit"),oWr.forEach(t),wlo=r(_Ce," \u2014 "),aP=n(_Ce,"A",{href:!0});var rWr=s(aP);Alo=r(rWr,"BeitFeatureExtractor"),rWr.forEach(t),ylo=r(_Ce," (BEiT model)"),_Ce.forEach(t),Llo=i(te),Zg=n(te,"LI",{});var bCe=s(Zg);fae=n(bCe,"STRONG",{});var tWr=s(fae);xlo=r(tWr,"clip"),tWr.forEach(t),$lo=r(bCe," \u2014 "),nP=n(bCe,"A",{href:!0});var aWr=s(nP);klo=r(aWr,"CLIPFeatureExtractor"),aWr.forEach(t),Slo=r(bCe," (CLIP model)"),bCe.forEach(t),Rlo=i(te),eh=n(te,"LI",{});var vCe=s(eh);mae=n(vCe,"STRONG",{});var nWr=s(mae);Blo=r(nWr,"convnext"),nWr.forEach(t),Plo=r(vCe," \u2014 "),sP=n(vCe,"A",{href:!0});var sWr=s(sP);Ilo=r(sWr,"ConvNextFeatureExtractor"),sWr.forEach(t),qlo=r(vCe," (ConvNext model)"),vCe.forEach(t),Nlo=i(te),oh=n(te,"LI",{});var FCe=s(oh);gae=n(FCe,"STRONG",{});var lWr=s(gae);jlo=r(lWr,"data2vec-audio"),lWr.forEach(t),Dlo=r(FCe," \u2014 "),lP=n(FCe,"A",{href:!0});var iWr=s(lP);Glo=r(iWr,"Wav2Vec2FeatureExtractor"),iWr.forEach(t),Olo=r(FCe," (Data2VecAudio model)"),FCe.forEach(t),Vlo=i(te),rh=n(te,"LI",{});var TCe=s(rh);hae=n(TCe,"STRONG",{});var dWr=s(hae);Xlo=r(dWr,"data2vec-vision"),dWr.forEach(t),zlo=r(TCe," \u2014 "),iP=n(TCe,"A",{href:!0});var cWr=s(iP);Qlo=r(cWr,"BeitFeatureExtractor"),cWr.forEach(t),Wlo=r(TCe," (Data2VecVision model)"),TCe.forEach(t),Hlo=i(te),th=n(te,"LI",{});var MCe=s(th);pae=n(MCe,"STRONG",{});var fWr=s(pae);Ulo=r(fWr,"deit"),fWr.forEach(t),Jlo=r(MCe," \u2014 "),dP=n(MCe,"A",{href:!0});var mWr=s(dP);Ylo=r(mWr,"DeiTFeatureExtractor"),mWr.forEach(t),Klo=r(MCe," (DeiT model)"),MCe.forEach(t),Zlo=i(te),ah=n(te,"LI",{});var ECe=s(ah);uae=n(ECe,"STRONG",{});var gWr=s(uae);eio=r(gWr,"detr"),gWr.forEach(t),oio=r(ECe," \u2014 "),cP=n(ECe,"A",{href:!0});var hWr=s(cP);rio=r(hWr,"DetrFeatureExtractor"),hWr.forEach(t),tio=r(ECe," (DETR model)"),ECe.forEach(t),aio=i(te),nh=n(te,"LI",{});var CCe=s(nh);_ae=n(CCe,"STRONG",{});var pWr=s(_ae);nio=r(pWr,"dpt"),pWr.forEach(t),sio=r(CCe," \u2014 "),fP=n(CCe,"A",{href:!0});var uWr=s(fP);lio=r(uWr,"DPTFeatureExtractor"),uWr.forEach(t),iio=r(CCe," (DPT model)"),CCe.forEach(t),dio=i(te),sh=n(te,"LI",{});var wCe=s(sh);bae=n(wCe,"STRONG",{});var _Wr=s(bae);cio=r(_Wr,"flava"),_Wr.forEach(t),fio=r(wCe," \u2014 "),mP=n(wCe,"A",{href:!0});var bWr=s(mP);mio=r(bWr,"FlavaFeatureExtractor"),bWr.forEach(t),gio=r(wCe," (Flava model)"),wCe.forEach(t),hio=i(te),lh=n(te,"LI",{});var ACe=s(lh);vae=n(ACe,"STRONG",{});var vWr=s(vae);pio=r(vWr,"glpn"),vWr.forEach(t),uio=r(ACe," \u2014 "),gP=n(ACe,"A",{href:!0});var FWr=s(gP);_io=r(FWr,"GLPNFeatureExtractor"),FWr.forEach(t),bio=r(ACe," (GLPN model)"),ACe.forEach(t),vio=i(te),ih=n(te,"LI",{});var yCe=s(ih);Fae=n(yCe,"STRONG",{});var TWr=s(Fae);Fio=r(TWr,"hubert"),TWr.forEach(t),Tio=r(yCe," \u2014 "),hP=n(yCe,"A",{href:!0});var MWr=s(hP);Mio=r(MWr,"Wav2Vec2FeatureExtractor"),MWr.forEach(t),Eio=r(yCe," (Hubert model)"),yCe.forEach(t),Cio=i(te),dh=n(te,"LI",{});var LCe=s(dh);Tae=n(LCe,"STRONG",{});var EWr=s(Tae);wio=r(EWr,"layoutlmv2"),EWr.forEach(t),Aio=r(LCe," \u2014 "),pP=n(LCe,"A",{href:!0});var CWr=s(pP);yio=r(CWr,"LayoutLMv2FeatureExtractor"),CWr.forEach(t),Lio=r(LCe," (LayoutLMv2 model)"),LCe.forEach(t),xio=i(te),ch=n(te,"LI",{});var xCe=s(ch);Mae=n(xCe,"STRONG",{});var wWr=s(Mae);$io=r(wWr,"layoutlmv3"),wWr.forEach(t),kio=r(xCe," \u2014 "),uP=n(xCe,"A",{href:!0});var AWr=s(uP);Sio=r(AWr,"LayoutLMv3FeatureExtractor"),AWr.forEach(t),Rio=r(xCe," (LayoutLMv3 model)"),xCe.forEach(t),Bio=i(te),fh=n(te,"LI",{});var $Ce=s(fh);Eae=n($Ce,"STRONG",{});var yWr=s(Eae);Pio=r(yWr,"maskformer"),yWr.forEach(t),Iio=r($Ce," \u2014 "),_P=n($Ce,"A",{href:!0});var LWr=s(_P);qio=r(LWr,"MaskFormerFeatureExtractor"),LWr.forEach(t),Nio=r($Ce," (MaskFormer model)"),$Ce.forEach(t),jio=i(te),mh=n(te,"LI",{});var kCe=s(mh);Cae=n(kCe,"STRONG",{});var xWr=s(Cae);Dio=r(xWr,"perceiver"),xWr.forEach(t),Gio=r(kCe," \u2014 "),bP=n(kCe,"A",{href:!0});var $Wr=s(bP);Oio=r($Wr,"PerceiverFeatureExtractor"),$Wr.forEach(t),Vio=r(kCe," (Perceiver model)"),kCe.forEach(t),Xio=i(te),gh=n(te,"LI",{});var SCe=s(gh);wae=n(SCe,"STRONG",{});var kWr=s(wae);zio=r(kWr,"poolformer"),kWr.forEach(t),Qio=r(SCe," \u2014 "),vP=n(SCe,"A",{href:!0});var SWr=s(vP);Wio=r(SWr,"PoolFormerFeatureExtractor"),SWr.forEach(t),Hio=r(SCe," (PoolFormer model)"),SCe.forEach(t),Uio=i(te),hh=n(te,"LI",{});var RCe=s(hh);Aae=n(RCe,"STRONG",{});var RWr=s(Aae);Jio=r(RWr,"regnet"),RWr.forEach(t),Yio=r(RCe," \u2014 "),FP=n(RCe,"A",{href:!0});var BWr=s(FP);Kio=r(BWr,"ConvNextFeatureExtractor"),BWr.forEach(t),Zio=r(RCe," (RegNet model)"),RCe.forEach(t),edo=i(te),ph=n(te,"LI",{});var BCe=s(ph);yae=n(BCe,"STRONG",{});var PWr=s(yae);odo=r(PWr,"resnet"),PWr.forEach(t),rdo=r(BCe," \u2014 "),TP=n(BCe,"A",{href:!0});var IWr=s(TP);tdo=r(IWr,"ConvNextFeatureExtractor"),IWr.forEach(t),ado=r(BCe," (ResNet model)"),BCe.forEach(t),ndo=i(te),uh=n(te,"LI",{});var PCe=s(uh);Lae=n(PCe,"STRONG",{});var qWr=s(Lae);sdo=r(qWr,"segformer"),qWr.forEach(t),ldo=r(PCe," \u2014 "),MP=n(PCe,"A",{href:!0});var NWr=s(MP);ido=r(NWr,"SegformerFeatureExtractor"),NWr.forEach(t),ddo=r(PCe," (SegFormer model)"),PCe.forEach(t),cdo=i(te),_h=n(te,"LI",{});var ICe=s(_h);xae=n(ICe,"STRONG",{});var jWr=s(xae);fdo=r(jWr,"speech_to_text"),jWr.forEach(t),mdo=r(ICe," \u2014 "),EP=n(ICe,"A",{href:!0});var DWr=s(EP);gdo=r(DWr,"Speech2TextFeatureExtractor"),DWr.forEach(t),hdo=r(ICe," (Speech2Text model)"),ICe.forEach(t),pdo=i(te),bh=n(te,"LI",{});var qCe=s(bh);$ae=n(qCe,"STRONG",{});var GWr=s($ae);udo=r(GWr,"swin"),GWr.forEach(t),_do=r(qCe," \u2014 "),CP=n(qCe,"A",{href:!0});var OWr=s(CP);bdo=r(OWr,"ViTFeatureExtractor"),OWr.forEach(t),vdo=r(qCe," (Swin model)"),qCe.forEach(t),Fdo=i(te),vh=n(te,"LI",{});var NCe=s(vh);kae=n(NCe,"STRONG",{});var VWr=s(kae);Tdo=r(VWr,"van"),VWr.forEach(t),Mdo=r(NCe," \u2014 "),wP=n(NCe,"A",{href:!0});var XWr=s(wP);Edo=r(XWr,"ConvNextFeatureExtractor"),XWr.forEach(t),Cdo=r(NCe," (VAN model)"),NCe.forEach(t),wdo=i(te),Fh=n(te,"LI",{});var jCe=s(Fh);Sae=n(jCe,"STRONG",{});var zWr=s(Sae);Ado=r(zWr,"vit"),zWr.forEach(t),ydo=r(jCe," \u2014 "),AP=n(jCe,"A",{href:!0});var QWr=s(AP);Ldo=r(QWr,"ViTFeatureExtractor"),QWr.forEach(t),xdo=r(jCe," (ViT model)"),jCe.forEach(t),$do=i(te),Th=n(te,"LI",{});var DCe=s(Th);Rae=n(DCe,"STRONG",{});var WWr=s(Rae);kdo=r(WWr,"vit_mae"),WWr.forEach(t),Sdo=r(DCe," \u2014 "),yP=n(DCe,"A",{href:!0});var HWr=s(yP);Rdo=r(HWr,"ViTFeatureExtractor"),HWr.forEach(t),Bdo=r(DCe," (ViTMAE model)"),DCe.forEach(t),Pdo=i(te),Mh=n(te,"LI",{});var GCe=s(Mh);Bae=n(GCe,"STRONG",{});var UWr=s(Bae);Ido=r(UWr,"wav2vec2"),UWr.forEach(t),qdo=r(GCe," \u2014 "),LP=n(GCe,"A",{href:!0});var JWr=s(LP);Ndo=r(JWr,"Wav2Vec2FeatureExtractor"),JWr.forEach(t),jdo=r(GCe," (Wav2Vec2 model)"),GCe.forEach(t),Ddo=i(te),Eh=n(te,"LI",{});var OCe=s(Eh);Pae=n(OCe,"STRONG",{});var YWr=s(Pae);Gdo=r(YWr,"yolos"),YWr.forEach(t),Odo=r(OCe," \u2014 "),xP=n(OCe,"A",{href:!0});var KWr=s(xP);Vdo=r(KWr,"YolosFeatureExtractor"),KWr.forEach(t),Xdo=r(OCe," (YOLOS model)"),OCe.forEach(t),te.forEach(t),zdo=i(Yt),T(Ch.$$.fragment,Yt),Qdo=i(Yt),T(wh.$$.fragment,Yt),Yt.forEach(t),Wdo=i(Ns),Ah=n(Ns,"DIV",{class:!0});var bNe=s(Ah);T(FA.$$.fragment,bNe),Hdo=i(bNe),Iae=n(bNe,"P",{});var ZWr=s(Iae);Udo=r(ZWr,"Register a new feature extractor for this class."),ZWr.forEach(t),bNe.forEach(t),Ns.forEach(t),_Ie=i(f),Fi=n(f,"H2",{class:!0});var vNe=s(Fi);yh=n(vNe,"A",{id:!0,class:!0,href:!0});var eHr=s(yh);qae=n(eHr,"SPAN",{});var oHr=s(qae);T(TA.$$.fragment,oHr),oHr.forEach(t),eHr.forEach(t),Jdo=i(vNe),Nae=n(vNe,"SPAN",{});var rHr=s(Nae);Ydo=r(rHr,"AutoProcessor"),rHr.forEach(t),vNe.forEach(t),bIe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(MA.$$.fragment,js),Kdo=i(js),EA=n(js,"P",{});var FNe=s(EA);Zdo=r(FNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$P=n(FNe,"A",{href:!0});var tHr=s($P);eco=r(tHr,"AutoProcessor.from_pretrained()"),tHr.forEach(t),oco=r(FNe," class method."),FNe.forEach(t),rco=i(js),CA=n(js,"P",{});var TNe=s(CA);tco=r(TNe,"This class cannot be instantiated directly using "),jae=n(TNe,"CODE",{});var aHr=s(jae);aco=r(aHr,"__init__()"),aHr.forEach(t),nco=r(TNe," (throws an error)."),TNe.forEach(t),sco=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(wA.$$.fragment,Kt),lco=i(Kt),Dae=n(Kt,"P",{});var nHr=s(Dae);ico=r(nHr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),nHr.forEach(t),dco=i(Kt),Ti=n(Kt,"P",{});var _K=s(Ti);cco=r(_K,"The processor class to instantiate is selected based on the "),Gae=n(_K,"CODE",{});var sHr=s(Gae);fco=r(sHr,"model_type"),sHr.forEach(t),mco=r(_K,` property of the config object (either
passed as an argument or loaded from `),Oae=n(_K,"CODE",{});var lHr=s(Oae);gco=r(lHr,"pretrained_model_name_or_path"),lHr.forEach(t),hco=r(_K," if possible):"),_K.forEach(t),pco=i(Kt),ue=n(Kt,"UL",{});var ve=s(ue);Lh=n(ve,"LI",{});var VCe=s(Lh);Vae=n(VCe,"STRONG",{});var iHr=s(Vae);uco=r(iHr,"clip"),iHr.forEach(t),_co=r(VCe," \u2014 "),kP=n(VCe,"A",{href:!0});var dHr=s(kP);bco=r(dHr,"CLIPProcessor"),dHr.forEach(t),vco=r(VCe," (CLIP model)"),VCe.forEach(t),Fco=i(ve),xh=n(ve,"LI",{});var XCe=s(xh);Xae=n(XCe,"STRONG",{});var cHr=s(Xae);Tco=r(cHr,"flava"),cHr.forEach(t),Mco=r(XCe," \u2014 "),zae=n(XCe,"CODE",{});var fHr=s(zae);Eco=r(fHr,"FLAVAProcessor"),fHr.forEach(t),Cco=r(XCe," (Flava model)"),XCe.forEach(t),wco=i(ve),$h=n(ve,"LI",{});var zCe=s($h);Qae=n(zCe,"STRONG",{});var mHr=s(Qae);Aco=r(mHr,"layoutlmv2"),mHr.forEach(t),yco=r(zCe," \u2014 "),SP=n(zCe,"A",{href:!0});var gHr=s(SP);Lco=r(gHr,"LayoutLMv2Processor"),gHr.forEach(t),xco=r(zCe," (LayoutLMv2 model)"),zCe.forEach(t),$co=i(ve),kh=n(ve,"LI",{});var QCe=s(kh);Wae=n(QCe,"STRONG",{});var hHr=s(Wae);kco=r(hHr,"layoutlmv3"),hHr.forEach(t),Sco=r(QCe," \u2014 "),RP=n(QCe,"A",{href:!0});var pHr=s(RP);Rco=r(pHr,"LayoutLMv3Processor"),pHr.forEach(t),Bco=r(QCe," (LayoutLMv3 model)"),QCe.forEach(t),Pco=i(ve),Sh=n(ve,"LI",{});var WCe=s(Sh);Hae=n(WCe,"STRONG",{});var uHr=s(Hae);Ico=r(uHr,"layoutxlm"),uHr.forEach(t),qco=r(WCe," \u2014 "),BP=n(WCe,"A",{href:!0});var _Hr=s(BP);Nco=r(_Hr,"LayoutXLMProcessor"),_Hr.forEach(t),jco=r(WCe," (LayoutXLM model)"),WCe.forEach(t),Dco=i(ve),Rh=n(ve,"LI",{});var HCe=s(Rh);Uae=n(HCe,"STRONG",{});var bHr=s(Uae);Gco=r(bHr,"sew"),bHr.forEach(t),Oco=r(HCe," \u2014 "),PP=n(HCe,"A",{href:!0});var vHr=s(PP);Vco=r(vHr,"Wav2Vec2Processor"),vHr.forEach(t),Xco=r(HCe," (SEW model)"),HCe.forEach(t),zco=i(ve),Bh=n(ve,"LI",{});var UCe=s(Bh);Jae=n(UCe,"STRONG",{});var FHr=s(Jae);Qco=r(FHr,"sew-d"),FHr.forEach(t),Wco=r(UCe," \u2014 "),IP=n(UCe,"A",{href:!0});var THr=s(IP);Hco=r(THr,"Wav2Vec2Processor"),THr.forEach(t),Uco=r(UCe," (SEW-D model)"),UCe.forEach(t),Jco=i(ve),Ph=n(ve,"LI",{});var JCe=s(Ph);Yae=n(JCe,"STRONG",{});var MHr=s(Yae);Yco=r(MHr,"speech_to_text"),MHr.forEach(t),Kco=r(JCe," \u2014 "),qP=n(JCe,"A",{href:!0});var EHr=s(qP);Zco=r(EHr,"Speech2TextProcessor"),EHr.forEach(t),efo=r(JCe," (Speech2Text model)"),JCe.forEach(t),ofo=i(ve),Ih=n(ve,"LI",{});var YCe=s(Ih);Kae=n(YCe,"STRONG",{});var CHr=s(Kae);rfo=r(CHr,"speech_to_text_2"),CHr.forEach(t),tfo=r(YCe," \u2014 "),NP=n(YCe,"A",{href:!0});var wHr=s(NP);afo=r(wHr,"Speech2Text2Processor"),wHr.forEach(t),nfo=r(YCe," (Speech2Text2 model)"),YCe.forEach(t),sfo=i(ve),qh=n(ve,"LI",{});var KCe=s(qh);Zae=n(KCe,"STRONG",{});var AHr=s(Zae);lfo=r(AHr,"trocr"),AHr.forEach(t),ifo=r(KCe," \u2014 "),jP=n(KCe,"A",{href:!0});var yHr=s(jP);dfo=r(yHr,"TrOCRProcessor"),yHr.forEach(t),cfo=r(KCe," (TrOCR model)"),KCe.forEach(t),ffo=i(ve),Nh=n(ve,"LI",{});var ZCe=s(Nh);ene=n(ZCe,"STRONG",{});var LHr=s(ene);mfo=r(LHr,"unispeech"),LHr.forEach(t),gfo=r(ZCe," \u2014 "),DP=n(ZCe,"A",{href:!0});var xHr=s(DP);hfo=r(xHr,"Wav2Vec2Processor"),xHr.forEach(t),pfo=r(ZCe," (UniSpeech model)"),ZCe.forEach(t),ufo=i(ve),jh=n(ve,"LI",{});var e3e=s(jh);one=n(e3e,"STRONG",{});var $Hr=s(one);_fo=r($Hr,"unispeech-sat"),$Hr.forEach(t),bfo=r(e3e," \u2014 "),GP=n(e3e,"A",{href:!0});var kHr=s(GP);vfo=r(kHr,"Wav2Vec2Processor"),kHr.forEach(t),Ffo=r(e3e," (UniSpeechSat model)"),e3e.forEach(t),Tfo=i(ve),Dh=n(ve,"LI",{});var o3e=s(Dh);rne=n(o3e,"STRONG",{});var SHr=s(rne);Mfo=r(SHr,"vilt"),SHr.forEach(t),Efo=r(o3e," \u2014 "),OP=n(o3e,"A",{href:!0});var RHr=s(OP);Cfo=r(RHr,"ViltProcessor"),RHr.forEach(t),wfo=r(o3e," (ViLT model)"),o3e.forEach(t),Afo=i(ve),Gh=n(ve,"LI",{});var r3e=s(Gh);tne=n(r3e,"STRONG",{});var BHr=s(tne);yfo=r(BHr,"vision-text-dual-encoder"),BHr.forEach(t),Lfo=r(r3e," \u2014 "),VP=n(r3e,"A",{href:!0});var PHr=s(VP);xfo=r(PHr,"VisionTextDualEncoderProcessor"),PHr.forEach(t),$fo=r(r3e," (VisionTextDualEncoder model)"),r3e.forEach(t),kfo=i(ve),Oh=n(ve,"LI",{});var t3e=s(Oh);ane=n(t3e,"STRONG",{});var IHr=s(ane);Sfo=r(IHr,"wav2vec2"),IHr.forEach(t),Rfo=r(t3e," \u2014 "),XP=n(t3e,"A",{href:!0});var qHr=s(XP);Bfo=r(qHr,"Wav2Vec2Processor"),qHr.forEach(t),Pfo=r(t3e," (Wav2Vec2 model)"),t3e.forEach(t),Ifo=i(ve),Vh=n(ve,"LI",{});var a3e=s(Vh);nne=n(a3e,"STRONG",{});var NHr=s(nne);qfo=r(NHr,"wavlm"),NHr.forEach(t),Nfo=r(a3e," \u2014 "),zP=n(a3e,"A",{href:!0});var jHr=s(zP);jfo=r(jHr,"Wav2Vec2Processor"),jHr.forEach(t),Dfo=r(a3e," (WavLM model)"),a3e.forEach(t),ve.forEach(t),Gfo=i(Kt),T(Xh.$$.fragment,Kt),Ofo=i(Kt),T(zh.$$.fragment,Kt),Kt.forEach(t),Vfo=i(js),Qh=n(js,"DIV",{class:!0});var MNe=s(Qh);T(AA.$$.fragment,MNe),Xfo=i(MNe),sne=n(MNe,"P",{});var DHr=s(sne);zfo=r(DHr,"Register a new processor for this class."),DHr.forEach(t),MNe.forEach(t),js.forEach(t),vIe=i(f),Mi=n(f,"H2",{class:!0});var ENe=s(Mi);Wh=n(ENe,"A",{id:!0,class:!0,href:!0});var GHr=s(Wh);lne=n(GHr,"SPAN",{});var OHr=s(lne);T(yA.$$.fragment,OHr),OHr.forEach(t),GHr.forEach(t),Qfo=i(ENe),ine=n(ENe,"SPAN",{});var VHr=s(ine);Wfo=r(VHr,"AutoModel"),VHr.forEach(t),ENe.forEach(t),FIe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(LA.$$.fragment,Ds),Hfo=i(Ds),Ei=n(Ds,"P",{});var bK=s(Ei);Ufo=r(bK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QP=n(bK,"A",{href:!0});var XHr=s(QP);Jfo=r(XHr,"from_pretrained()"),XHr.forEach(t),Yfo=r(bK," class method or the "),WP=n(bK,"A",{href:!0});var zHr=s(WP);Kfo=r(zHr,"from_config()"),zHr.forEach(t),Zfo=r(bK,` class
method.`),bK.forEach(t),emo=i(Ds),xA=n(Ds,"P",{});var CNe=s(xA);omo=r(CNe,"This class cannot be instantiated directly using "),dne=n(CNe,"CODE",{});var QHr=s(dne);rmo=r(QHr,"__init__()"),QHr.forEach(t),tmo=r(CNe," (throws an error)."),CNe.forEach(t),amo=i(Ds),ot=n(Ds,"DIV",{class:!0});var a3=s(ot);T($A.$$.fragment,a3),nmo=i(a3),cne=n(a3,"P",{});var WHr=s(cne);smo=r(WHr,"Instantiates one of the base model classes of the library from a configuration."),WHr.forEach(t),lmo=i(a3),Ci=n(a3,"P",{});var vK=s(Ci);imo=r(vK,`Note:
Loading a model from its configuration file does `),fne=n(vK,"STRONG",{});var HHr=s(fne);dmo=r(HHr,"not"),HHr.forEach(t),cmo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HP=n(vK,"A",{href:!0});var UHr=s(HP);fmo=r(UHr,"from_pretrained()"),UHr.forEach(t),mmo=r(vK," to load the model weights."),vK.forEach(t),gmo=i(a3),T(Hh.$$.fragment,a3),a3.forEach(t),hmo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(kA.$$.fragment,Zt),pmo=i(Zt),mne=n(Zt,"P",{});var JHr=s(mne);umo=r(JHr,"Instantiate one of the base model classes of the library from a pretrained model."),JHr.forEach(t),_mo=i(Zt),Aa=n(Zt,"P",{});var n3=s(Aa);bmo=r(n3,"The model class to instantiate is selected based on the "),gne=n(n3,"CODE",{});var YHr=s(gne);vmo=r(YHr,"model_type"),YHr.forEach(t),Fmo=r(n3,` property of the config object (either
passed as an argument or loaded from `),hne=n(n3,"CODE",{});var KHr=s(hne);Tmo=r(KHr,"pretrained_model_name_or_path"),KHr.forEach(t),Mmo=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pne=n(n3,"CODE",{});var ZHr=s(pne);Emo=r(ZHr,"pretrained_model_name_or_path"),ZHr.forEach(t),Cmo=r(n3,":"),n3.forEach(t),wmo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Uh=n($,"LI",{});var n3e=s(Uh);une=n(n3e,"STRONG",{});var eUr=s(une);Amo=r(eUr,"albert"),eUr.forEach(t),ymo=r(n3e," \u2014 "),UP=n(n3e,"A",{href:!0});var oUr=s(UP);Lmo=r(oUr,"AlbertModel"),oUr.forEach(t),xmo=r(n3e," (ALBERT model)"),n3e.forEach(t),$mo=i($),Jh=n($,"LI",{});var s3e=s(Jh);_ne=n(s3e,"STRONG",{});var rUr=s(_ne);kmo=r(rUr,"bart"),rUr.forEach(t),Smo=r(s3e," \u2014 "),JP=n(s3e,"A",{href:!0});var tUr=s(JP);Rmo=r(tUr,"BartModel"),tUr.forEach(t),Bmo=r(s3e," (BART model)"),s3e.forEach(t),Pmo=i($),Yh=n($,"LI",{});var l3e=s(Yh);bne=n(l3e,"STRONG",{});var aUr=s(bne);Imo=r(aUr,"beit"),aUr.forEach(t),qmo=r(l3e," \u2014 "),YP=n(l3e,"A",{href:!0});var nUr=s(YP);Nmo=r(nUr,"BeitModel"),nUr.forEach(t),jmo=r(l3e," (BEiT model)"),l3e.forEach(t),Dmo=i($),Kh=n($,"LI",{});var i3e=s(Kh);vne=n(i3e,"STRONG",{});var sUr=s(vne);Gmo=r(sUr,"bert"),sUr.forEach(t),Omo=r(i3e," \u2014 "),KP=n(i3e,"A",{href:!0});var lUr=s(KP);Vmo=r(lUr,"BertModel"),lUr.forEach(t),Xmo=r(i3e," (BERT model)"),i3e.forEach(t),zmo=i($),Zh=n($,"LI",{});var d3e=s(Zh);Fne=n(d3e,"STRONG",{});var iUr=s(Fne);Qmo=r(iUr,"bert-generation"),iUr.forEach(t),Wmo=r(d3e," \u2014 "),ZP=n(d3e,"A",{href:!0});var dUr=s(ZP);Hmo=r(dUr,"BertGenerationEncoder"),dUr.forEach(t),Umo=r(d3e," (Bert Generation model)"),d3e.forEach(t),Jmo=i($),ep=n($,"LI",{});var c3e=s(ep);Tne=n(c3e,"STRONG",{});var cUr=s(Tne);Ymo=r(cUr,"big_bird"),cUr.forEach(t),Kmo=r(c3e," \u2014 "),eI=n(c3e,"A",{href:!0});var fUr=s(eI);Zmo=r(fUr,"BigBirdModel"),fUr.forEach(t),ego=r(c3e," (BigBird model)"),c3e.forEach(t),ogo=i($),op=n($,"LI",{});var f3e=s(op);Mne=n(f3e,"STRONG",{});var mUr=s(Mne);rgo=r(mUr,"bigbird_pegasus"),mUr.forEach(t),tgo=r(f3e," \u2014 "),oI=n(f3e,"A",{href:!0});var gUr=s(oI);ago=r(gUr,"BigBirdPegasusModel"),gUr.forEach(t),ngo=r(f3e," (BigBirdPegasus model)"),f3e.forEach(t),sgo=i($),rp=n($,"LI",{});var m3e=s(rp);Ene=n(m3e,"STRONG",{});var hUr=s(Ene);lgo=r(hUr,"blenderbot"),hUr.forEach(t),igo=r(m3e," \u2014 "),rI=n(m3e,"A",{href:!0});var pUr=s(rI);dgo=r(pUr,"BlenderbotModel"),pUr.forEach(t),cgo=r(m3e," (Blenderbot model)"),m3e.forEach(t),fgo=i($),tp=n($,"LI",{});var g3e=s(tp);Cne=n(g3e,"STRONG",{});var uUr=s(Cne);mgo=r(uUr,"blenderbot-small"),uUr.forEach(t),ggo=r(g3e," \u2014 "),tI=n(g3e,"A",{href:!0});var _Ur=s(tI);hgo=r(_Ur,"BlenderbotSmallModel"),_Ur.forEach(t),pgo=r(g3e," (BlenderbotSmall model)"),g3e.forEach(t),ugo=i($),ap=n($,"LI",{});var h3e=s(ap);wne=n(h3e,"STRONG",{});var bUr=s(wne);_go=r(bUr,"camembert"),bUr.forEach(t),bgo=r(h3e," \u2014 "),aI=n(h3e,"A",{href:!0});var vUr=s(aI);vgo=r(vUr,"CamembertModel"),vUr.forEach(t),Fgo=r(h3e," (CamemBERT model)"),h3e.forEach(t),Tgo=i($),np=n($,"LI",{});var p3e=s(np);Ane=n(p3e,"STRONG",{});var FUr=s(Ane);Mgo=r(FUr,"canine"),FUr.forEach(t),Ego=r(p3e," \u2014 "),nI=n(p3e,"A",{href:!0});var TUr=s(nI);Cgo=r(TUr,"CanineModel"),TUr.forEach(t),wgo=r(p3e," (Canine model)"),p3e.forEach(t),Ago=i($),sp=n($,"LI",{});var u3e=s(sp);yne=n(u3e,"STRONG",{});var MUr=s(yne);ygo=r(MUr,"clip"),MUr.forEach(t),Lgo=r(u3e," \u2014 "),sI=n(u3e,"A",{href:!0});var EUr=s(sI);xgo=r(EUr,"CLIPModel"),EUr.forEach(t),$go=r(u3e," (CLIP model)"),u3e.forEach(t),kgo=i($),lp=n($,"LI",{});var _3e=s(lp);Lne=n(_3e,"STRONG",{});var CUr=s(Lne);Sgo=r(CUr,"convbert"),CUr.forEach(t),Rgo=r(_3e," \u2014 "),lI=n(_3e,"A",{href:!0});var wUr=s(lI);Bgo=r(wUr,"ConvBertModel"),wUr.forEach(t),Pgo=r(_3e," (ConvBERT model)"),_3e.forEach(t),Igo=i($),ip=n($,"LI",{});var b3e=s(ip);xne=n(b3e,"STRONG",{});var AUr=s(xne);qgo=r(AUr,"convnext"),AUr.forEach(t),Ngo=r(b3e," \u2014 "),iI=n(b3e,"A",{href:!0});var yUr=s(iI);jgo=r(yUr,"ConvNextModel"),yUr.forEach(t),Dgo=r(b3e," (ConvNext model)"),b3e.forEach(t),Ggo=i($),dp=n($,"LI",{});var v3e=s(dp);$ne=n(v3e,"STRONG",{});var LUr=s($ne);Ogo=r(LUr,"ctrl"),LUr.forEach(t),Vgo=r(v3e," \u2014 "),dI=n(v3e,"A",{href:!0});var xUr=s(dI);Xgo=r(xUr,"CTRLModel"),xUr.forEach(t),zgo=r(v3e," (CTRL model)"),v3e.forEach(t),Qgo=i($),cp=n($,"LI",{});var F3e=s(cp);kne=n(F3e,"STRONG",{});var $Ur=s(kne);Wgo=r($Ur,"data2vec-audio"),$Ur.forEach(t),Hgo=r(F3e," \u2014 "),cI=n(F3e,"A",{href:!0});var kUr=s(cI);Ugo=r(kUr,"Data2VecAudioModel"),kUr.forEach(t),Jgo=r(F3e," (Data2VecAudio model)"),F3e.forEach(t),Ygo=i($),fp=n($,"LI",{});var T3e=s(fp);Sne=n(T3e,"STRONG",{});var SUr=s(Sne);Kgo=r(SUr,"data2vec-text"),SUr.forEach(t),Zgo=r(T3e," \u2014 "),fI=n(T3e,"A",{href:!0});var RUr=s(fI);eho=r(RUr,"Data2VecTextModel"),RUr.forEach(t),oho=r(T3e," (Data2VecText model)"),T3e.forEach(t),rho=i($),mp=n($,"LI",{});var M3e=s(mp);Rne=n(M3e,"STRONG",{});var BUr=s(Rne);tho=r(BUr,"data2vec-vision"),BUr.forEach(t),aho=r(M3e," \u2014 "),mI=n(M3e,"A",{href:!0});var PUr=s(mI);nho=r(PUr,"Data2VecVisionModel"),PUr.forEach(t),sho=r(M3e," (Data2VecVision model)"),M3e.forEach(t),lho=i($),gp=n($,"LI",{});var E3e=s(gp);Bne=n(E3e,"STRONG",{});var IUr=s(Bne);iho=r(IUr,"deberta"),IUr.forEach(t),dho=r(E3e," \u2014 "),gI=n(E3e,"A",{href:!0});var qUr=s(gI);cho=r(qUr,"DebertaModel"),qUr.forEach(t),fho=r(E3e," (DeBERTa model)"),E3e.forEach(t),mho=i($),hp=n($,"LI",{});var C3e=s(hp);Pne=n(C3e,"STRONG",{});var NUr=s(Pne);gho=r(NUr,"deberta-v2"),NUr.forEach(t),hho=r(C3e," \u2014 "),hI=n(C3e,"A",{href:!0});var jUr=s(hI);pho=r(jUr,"DebertaV2Model"),jUr.forEach(t),uho=r(C3e," (DeBERTa-v2 model)"),C3e.forEach(t),_ho=i($),pp=n($,"LI",{});var w3e=s(pp);Ine=n(w3e,"STRONG",{});var DUr=s(Ine);bho=r(DUr,"decision_transformer"),DUr.forEach(t),vho=r(w3e," \u2014 "),pI=n(w3e,"A",{href:!0});var GUr=s(pI);Fho=r(GUr,"DecisionTransformerModel"),GUr.forEach(t),Tho=r(w3e," (Decision Transformer model)"),w3e.forEach(t),Mho=i($),up=n($,"LI",{});var A3e=s(up);qne=n(A3e,"STRONG",{});var OUr=s(qne);Eho=r(OUr,"deit"),OUr.forEach(t),Cho=r(A3e," \u2014 "),uI=n(A3e,"A",{href:!0});var VUr=s(uI);who=r(VUr,"DeiTModel"),VUr.forEach(t),Aho=r(A3e," (DeiT model)"),A3e.forEach(t),yho=i($),_p=n($,"LI",{});var y3e=s(_p);Nne=n(y3e,"STRONG",{});var XUr=s(Nne);Lho=r(XUr,"detr"),XUr.forEach(t),xho=r(y3e," \u2014 "),_I=n(y3e,"A",{href:!0});var zUr=s(_I);$ho=r(zUr,"DetrModel"),zUr.forEach(t),kho=r(y3e," (DETR model)"),y3e.forEach(t),Sho=i($),bp=n($,"LI",{});var L3e=s(bp);jne=n(L3e,"STRONG",{});var QUr=s(jne);Rho=r(QUr,"distilbert"),QUr.forEach(t),Bho=r(L3e," \u2014 "),bI=n(L3e,"A",{href:!0});var WUr=s(bI);Pho=r(WUr,"DistilBertModel"),WUr.forEach(t),Iho=r(L3e," (DistilBERT model)"),L3e.forEach(t),qho=i($),vp=n($,"LI",{});var x3e=s(vp);Dne=n(x3e,"STRONG",{});var HUr=s(Dne);Nho=r(HUr,"dpr"),HUr.forEach(t),jho=r(x3e," \u2014 "),vI=n(x3e,"A",{href:!0});var UUr=s(vI);Dho=r(UUr,"DPRQuestionEncoder"),UUr.forEach(t),Gho=r(x3e," (DPR model)"),x3e.forEach(t),Oho=i($),Fp=n($,"LI",{});var $3e=s(Fp);Gne=n($3e,"STRONG",{});var JUr=s(Gne);Vho=r(JUr,"dpt"),JUr.forEach(t),Xho=r($3e," \u2014 "),FI=n($3e,"A",{href:!0});var YUr=s(FI);zho=r(YUr,"DPTModel"),YUr.forEach(t),Qho=r($3e," (DPT model)"),$3e.forEach(t),Who=i($),Tp=n($,"LI",{});var k3e=s(Tp);One=n(k3e,"STRONG",{});var KUr=s(One);Hho=r(KUr,"electra"),KUr.forEach(t),Uho=r(k3e," \u2014 "),TI=n(k3e,"A",{href:!0});var ZUr=s(TI);Jho=r(ZUr,"ElectraModel"),ZUr.forEach(t),Yho=r(k3e," (ELECTRA model)"),k3e.forEach(t),Kho=i($),Mp=n($,"LI",{});var S3e=s(Mp);Vne=n(S3e,"STRONG",{});var eJr=s(Vne);Zho=r(eJr,"flaubert"),eJr.forEach(t),epo=r(S3e," \u2014 "),MI=n(S3e,"A",{href:!0});var oJr=s(MI);opo=r(oJr,"FlaubertModel"),oJr.forEach(t),rpo=r(S3e," (FlauBERT model)"),S3e.forEach(t),tpo=i($),Ep=n($,"LI",{});var R3e=s(Ep);Xne=n(R3e,"STRONG",{});var rJr=s(Xne);apo=r(rJr,"flava"),rJr.forEach(t),npo=r(R3e," \u2014 "),EI=n(R3e,"A",{href:!0});var tJr=s(EI);spo=r(tJr,"FlavaModel"),tJr.forEach(t),lpo=r(R3e," (Flava model)"),R3e.forEach(t),ipo=i($),Cp=n($,"LI",{});var B3e=s(Cp);zne=n(B3e,"STRONG",{});var aJr=s(zne);dpo=r(aJr,"fnet"),aJr.forEach(t),cpo=r(B3e," \u2014 "),CI=n(B3e,"A",{href:!0});var nJr=s(CI);fpo=r(nJr,"FNetModel"),nJr.forEach(t),mpo=r(B3e," (FNet model)"),B3e.forEach(t),gpo=i($),wp=n($,"LI",{});var P3e=s(wp);Qne=n(P3e,"STRONG",{});var sJr=s(Qne);hpo=r(sJr,"fsmt"),sJr.forEach(t),ppo=r(P3e," \u2014 "),wI=n(P3e,"A",{href:!0});var lJr=s(wI);upo=r(lJr,"FSMTModel"),lJr.forEach(t),_po=r(P3e," (FairSeq Machine-Translation model)"),P3e.forEach(t),bpo=i($),Rs=n($,"LI",{});var u$=s(Rs);Wne=n(u$,"STRONG",{});var iJr=s(Wne);vpo=r(iJr,"funnel"),iJr.forEach(t),Fpo=r(u$," \u2014 "),AI=n(u$,"A",{href:!0});var dJr=s(AI);Tpo=r(dJr,"FunnelModel"),dJr.forEach(t),Mpo=r(u$," or "),yI=n(u$,"A",{href:!0});var cJr=s(yI);Epo=r(cJr,"FunnelBaseModel"),cJr.forEach(t),Cpo=r(u$," (Funnel Transformer model)"),u$.forEach(t),wpo=i($),Ap=n($,"LI",{});var I3e=s(Ap);Hne=n(I3e,"STRONG",{});var fJr=s(Hne);Apo=r(fJr,"glpn"),fJr.forEach(t),ypo=r(I3e," \u2014 "),LI=n(I3e,"A",{href:!0});var mJr=s(LI);Lpo=r(mJr,"GLPNModel"),mJr.forEach(t),xpo=r(I3e," (GLPN model)"),I3e.forEach(t),$po=i($),yp=n($,"LI",{});var q3e=s(yp);Une=n(q3e,"STRONG",{});var gJr=s(Une);kpo=r(gJr,"gpt2"),gJr.forEach(t),Spo=r(q3e," \u2014 "),xI=n(q3e,"A",{href:!0});var hJr=s(xI);Rpo=r(hJr,"GPT2Model"),hJr.forEach(t),Bpo=r(q3e," (OpenAI GPT-2 model)"),q3e.forEach(t),Ppo=i($),Lp=n($,"LI",{});var N3e=s(Lp);Jne=n(N3e,"STRONG",{});var pJr=s(Jne);Ipo=r(pJr,"gpt_neo"),pJr.forEach(t),qpo=r(N3e," \u2014 "),$I=n(N3e,"A",{href:!0});var uJr=s($I);Npo=r(uJr,"GPTNeoModel"),uJr.forEach(t),jpo=r(N3e," (GPT Neo model)"),N3e.forEach(t),Dpo=i($),xp=n($,"LI",{});var j3e=s(xp);Yne=n(j3e,"STRONG",{});var _Jr=s(Yne);Gpo=r(_Jr,"gptj"),_Jr.forEach(t),Opo=r(j3e," \u2014 "),kI=n(j3e,"A",{href:!0});var bJr=s(kI);Vpo=r(bJr,"GPTJModel"),bJr.forEach(t),Xpo=r(j3e," (GPT-J model)"),j3e.forEach(t),zpo=i($),$p=n($,"LI",{});var D3e=s($p);Kne=n(D3e,"STRONG",{});var vJr=s(Kne);Qpo=r(vJr,"hubert"),vJr.forEach(t),Wpo=r(D3e," \u2014 "),SI=n(D3e,"A",{href:!0});var FJr=s(SI);Hpo=r(FJr,"HubertModel"),FJr.forEach(t),Upo=r(D3e," (Hubert model)"),D3e.forEach(t),Jpo=i($),kp=n($,"LI",{});var G3e=s(kp);Zne=n(G3e,"STRONG",{});var TJr=s(Zne);Ypo=r(TJr,"ibert"),TJr.forEach(t),Kpo=r(G3e," \u2014 "),RI=n(G3e,"A",{href:!0});var MJr=s(RI);Zpo=r(MJr,"IBertModel"),MJr.forEach(t),euo=r(G3e," (I-BERT model)"),G3e.forEach(t),ouo=i($),Sp=n($,"LI",{});var O3e=s(Sp);ese=n(O3e,"STRONG",{});var EJr=s(ese);ruo=r(EJr,"imagegpt"),EJr.forEach(t),tuo=r(O3e," \u2014 "),BI=n(O3e,"A",{href:!0});var CJr=s(BI);auo=r(CJr,"ImageGPTModel"),CJr.forEach(t),nuo=r(O3e," (ImageGPT model)"),O3e.forEach(t),suo=i($),Rp=n($,"LI",{});var V3e=s(Rp);ose=n(V3e,"STRONG",{});var wJr=s(ose);luo=r(wJr,"layoutlm"),wJr.forEach(t),iuo=r(V3e," \u2014 "),PI=n(V3e,"A",{href:!0});var AJr=s(PI);duo=r(AJr,"LayoutLMModel"),AJr.forEach(t),cuo=r(V3e," (LayoutLM model)"),V3e.forEach(t),fuo=i($),Bp=n($,"LI",{});var X3e=s(Bp);rse=n(X3e,"STRONG",{});var yJr=s(rse);muo=r(yJr,"layoutlmv2"),yJr.forEach(t),guo=r(X3e," \u2014 "),II=n(X3e,"A",{href:!0});var LJr=s(II);huo=r(LJr,"LayoutLMv2Model"),LJr.forEach(t),puo=r(X3e," (LayoutLMv2 model)"),X3e.forEach(t),uuo=i($),Pp=n($,"LI",{});var z3e=s(Pp);tse=n(z3e,"STRONG",{});var xJr=s(tse);_uo=r(xJr,"layoutlmv3"),xJr.forEach(t),buo=r(z3e," \u2014 "),qI=n(z3e,"A",{href:!0});var $Jr=s(qI);vuo=r($Jr,"LayoutLMv3Model"),$Jr.forEach(t),Fuo=r(z3e," (LayoutLMv3 model)"),z3e.forEach(t),Tuo=i($),Ip=n($,"LI",{});var Q3e=s(Ip);ase=n(Q3e,"STRONG",{});var kJr=s(ase);Muo=r(kJr,"led"),kJr.forEach(t),Euo=r(Q3e," \u2014 "),NI=n(Q3e,"A",{href:!0});var SJr=s(NI);Cuo=r(SJr,"LEDModel"),SJr.forEach(t),wuo=r(Q3e," (LED model)"),Q3e.forEach(t),Auo=i($),qp=n($,"LI",{});var W3e=s(qp);nse=n(W3e,"STRONG",{});var RJr=s(nse);yuo=r(RJr,"longformer"),RJr.forEach(t),Luo=r(W3e," \u2014 "),jI=n(W3e,"A",{href:!0});var BJr=s(jI);xuo=r(BJr,"LongformerModel"),BJr.forEach(t),$uo=r(W3e," (Longformer model)"),W3e.forEach(t),kuo=i($),Np=n($,"LI",{});var H3e=s(Np);sse=n(H3e,"STRONG",{});var PJr=s(sse);Suo=r(PJr,"luke"),PJr.forEach(t),Ruo=r(H3e," \u2014 "),DI=n(H3e,"A",{href:!0});var IJr=s(DI);Buo=r(IJr,"LukeModel"),IJr.forEach(t),Puo=r(H3e," (LUKE model)"),H3e.forEach(t),Iuo=i($),jp=n($,"LI",{});var U3e=s(jp);lse=n(U3e,"STRONG",{});var qJr=s(lse);quo=r(qJr,"lxmert"),qJr.forEach(t),Nuo=r(U3e," \u2014 "),GI=n(U3e,"A",{href:!0});var NJr=s(GI);juo=r(NJr,"LxmertModel"),NJr.forEach(t),Duo=r(U3e," (LXMERT model)"),U3e.forEach(t),Guo=i($),Dp=n($,"LI",{});var J3e=s(Dp);ise=n(J3e,"STRONG",{});var jJr=s(ise);Ouo=r(jJr,"m2m_100"),jJr.forEach(t),Vuo=r(J3e," \u2014 "),OI=n(J3e,"A",{href:!0});var DJr=s(OI);Xuo=r(DJr,"M2M100Model"),DJr.forEach(t),zuo=r(J3e," (M2M100 model)"),J3e.forEach(t),Quo=i($),Gp=n($,"LI",{});var Y3e=s(Gp);dse=n(Y3e,"STRONG",{});var GJr=s(dse);Wuo=r(GJr,"marian"),GJr.forEach(t),Huo=r(Y3e," \u2014 "),VI=n(Y3e,"A",{href:!0});var OJr=s(VI);Uuo=r(OJr,"MarianModel"),OJr.forEach(t),Juo=r(Y3e," (Marian model)"),Y3e.forEach(t),Yuo=i($),Op=n($,"LI",{});var K3e=s(Op);cse=n(K3e,"STRONG",{});var VJr=s(cse);Kuo=r(VJr,"maskformer"),VJr.forEach(t),Zuo=r(K3e," \u2014 "),XI=n(K3e,"A",{href:!0});var XJr=s(XI);e_o=r(XJr,"MaskFormerModel"),XJr.forEach(t),o_o=r(K3e," (MaskFormer model)"),K3e.forEach(t),r_o=i($),Vp=n($,"LI",{});var Z3e=s(Vp);fse=n(Z3e,"STRONG",{});var zJr=s(fse);t_o=r(zJr,"mbart"),zJr.forEach(t),a_o=r(Z3e," \u2014 "),zI=n(Z3e,"A",{href:!0});var QJr=s(zI);n_o=r(QJr,"MBartModel"),QJr.forEach(t),s_o=r(Z3e," (mBART model)"),Z3e.forEach(t),l_o=i($),Xp=n($,"LI",{});var ewe=s(Xp);mse=n(ewe,"STRONG",{});var WJr=s(mse);i_o=r(WJr,"megatron-bert"),WJr.forEach(t),d_o=r(ewe," \u2014 "),QI=n(ewe,"A",{href:!0});var HJr=s(QI);c_o=r(HJr,"MegatronBertModel"),HJr.forEach(t),f_o=r(ewe," (MegatronBert model)"),ewe.forEach(t),m_o=i($),zp=n($,"LI",{});var owe=s(zp);gse=n(owe,"STRONG",{});var UJr=s(gse);g_o=r(UJr,"mobilebert"),UJr.forEach(t),h_o=r(owe," \u2014 "),WI=n(owe,"A",{href:!0});var JJr=s(WI);p_o=r(JJr,"MobileBertModel"),JJr.forEach(t),u_o=r(owe," (MobileBERT model)"),owe.forEach(t),__o=i($),Qp=n($,"LI",{});var rwe=s(Qp);hse=n(rwe,"STRONG",{});var YJr=s(hse);b_o=r(YJr,"mpnet"),YJr.forEach(t),v_o=r(rwe," \u2014 "),HI=n(rwe,"A",{href:!0});var KJr=s(HI);F_o=r(KJr,"MPNetModel"),KJr.forEach(t),T_o=r(rwe," (MPNet model)"),rwe.forEach(t),M_o=i($),Wp=n($,"LI",{});var twe=s(Wp);pse=n(twe,"STRONG",{});var ZJr=s(pse);E_o=r(ZJr,"mt5"),ZJr.forEach(t),C_o=r(twe," \u2014 "),UI=n(twe,"A",{href:!0});var eYr=s(UI);w_o=r(eYr,"MT5Model"),eYr.forEach(t),A_o=r(twe," (mT5 model)"),twe.forEach(t),y_o=i($),Hp=n($,"LI",{});var awe=s(Hp);use=n(awe,"STRONG",{});var oYr=s(use);L_o=r(oYr,"nystromformer"),oYr.forEach(t),x_o=r(awe," \u2014 "),JI=n(awe,"A",{href:!0});var rYr=s(JI);$_o=r(rYr,"NystromformerModel"),rYr.forEach(t),k_o=r(awe," (Nystromformer model)"),awe.forEach(t),S_o=i($),Up=n($,"LI",{});var nwe=s(Up);_se=n(nwe,"STRONG",{});var tYr=s(_se);R_o=r(tYr,"openai-gpt"),tYr.forEach(t),B_o=r(nwe," \u2014 "),YI=n(nwe,"A",{href:!0});var aYr=s(YI);P_o=r(aYr,"OpenAIGPTModel"),aYr.forEach(t),I_o=r(nwe," (OpenAI GPT model)"),nwe.forEach(t),q_o=i($),Jp=n($,"LI",{});var swe=s(Jp);bse=n(swe,"STRONG",{});var nYr=s(bse);N_o=r(nYr,"pegasus"),nYr.forEach(t),j_o=r(swe," \u2014 "),KI=n(swe,"A",{href:!0});var sYr=s(KI);D_o=r(sYr,"PegasusModel"),sYr.forEach(t),G_o=r(swe," (Pegasus model)"),swe.forEach(t),O_o=i($),Yp=n($,"LI",{});var lwe=s(Yp);vse=n(lwe,"STRONG",{});var lYr=s(vse);V_o=r(lYr,"perceiver"),lYr.forEach(t),X_o=r(lwe," \u2014 "),ZI=n(lwe,"A",{href:!0});var iYr=s(ZI);z_o=r(iYr,"PerceiverModel"),iYr.forEach(t),Q_o=r(lwe," (Perceiver model)"),lwe.forEach(t),W_o=i($),Kp=n($,"LI",{});var iwe=s(Kp);Fse=n(iwe,"STRONG",{});var dYr=s(Fse);H_o=r(dYr,"plbart"),dYr.forEach(t),U_o=r(iwe," \u2014 "),eq=n(iwe,"A",{href:!0});var cYr=s(eq);J_o=r(cYr,"PLBartModel"),cYr.forEach(t),Y_o=r(iwe," (PLBart model)"),iwe.forEach(t),K_o=i($),Zp=n($,"LI",{});var dwe=s(Zp);Tse=n(dwe,"STRONG",{});var fYr=s(Tse);Z_o=r(fYr,"poolformer"),fYr.forEach(t),e0o=r(dwe," \u2014 "),oq=n(dwe,"A",{href:!0});var mYr=s(oq);o0o=r(mYr,"PoolFormerModel"),mYr.forEach(t),r0o=r(dwe," (PoolFormer model)"),dwe.forEach(t),t0o=i($),eu=n($,"LI",{});var cwe=s(eu);Mse=n(cwe,"STRONG",{});var gYr=s(Mse);a0o=r(gYr,"prophetnet"),gYr.forEach(t),n0o=r(cwe," \u2014 "),rq=n(cwe,"A",{href:!0});var hYr=s(rq);s0o=r(hYr,"ProphetNetModel"),hYr.forEach(t),l0o=r(cwe," (ProphetNet model)"),cwe.forEach(t),i0o=i($),ou=n($,"LI",{});var fwe=s(ou);Ese=n(fwe,"STRONG",{});var pYr=s(Ese);d0o=r(pYr,"qdqbert"),pYr.forEach(t),c0o=r(fwe," \u2014 "),tq=n(fwe,"A",{href:!0});var uYr=s(tq);f0o=r(uYr,"QDQBertModel"),uYr.forEach(t),m0o=r(fwe," (QDQBert model)"),fwe.forEach(t),g0o=i($),ru=n($,"LI",{});var mwe=s(ru);Cse=n(mwe,"STRONG",{});var _Yr=s(Cse);h0o=r(_Yr,"reformer"),_Yr.forEach(t),p0o=r(mwe," \u2014 "),aq=n(mwe,"A",{href:!0});var bYr=s(aq);u0o=r(bYr,"ReformerModel"),bYr.forEach(t),_0o=r(mwe," (Reformer model)"),mwe.forEach(t),b0o=i($),tu=n($,"LI",{});var gwe=s(tu);wse=n(gwe,"STRONG",{});var vYr=s(wse);v0o=r(vYr,"regnet"),vYr.forEach(t),F0o=r(gwe," \u2014 "),nq=n(gwe,"A",{href:!0});var FYr=s(nq);T0o=r(FYr,"RegNetModel"),FYr.forEach(t),M0o=r(gwe," (RegNet model)"),gwe.forEach(t),E0o=i($),au=n($,"LI",{});var hwe=s(au);Ase=n(hwe,"STRONG",{});var TYr=s(Ase);C0o=r(TYr,"rembert"),TYr.forEach(t),w0o=r(hwe," \u2014 "),sq=n(hwe,"A",{href:!0});var MYr=s(sq);A0o=r(MYr,"RemBertModel"),MYr.forEach(t),y0o=r(hwe," (RemBERT model)"),hwe.forEach(t),L0o=i($),nu=n($,"LI",{});var pwe=s(nu);yse=n(pwe,"STRONG",{});var EYr=s(yse);x0o=r(EYr,"resnet"),EYr.forEach(t),$0o=r(pwe," \u2014 "),lq=n(pwe,"A",{href:!0});var CYr=s(lq);k0o=r(CYr,"ResNetModel"),CYr.forEach(t),S0o=r(pwe," (ResNet model)"),pwe.forEach(t),R0o=i($),su=n($,"LI",{});var uwe=s(su);Lse=n(uwe,"STRONG",{});var wYr=s(Lse);B0o=r(wYr,"retribert"),wYr.forEach(t),P0o=r(uwe," \u2014 "),iq=n(uwe,"A",{href:!0});var AYr=s(iq);I0o=r(AYr,"RetriBertModel"),AYr.forEach(t),q0o=r(uwe," (RetriBERT model)"),uwe.forEach(t),N0o=i($),lu=n($,"LI",{});var _we=s(lu);xse=n(_we,"STRONG",{});var yYr=s(xse);j0o=r(yYr,"roberta"),yYr.forEach(t),D0o=r(_we," \u2014 "),dq=n(_we,"A",{href:!0});var LYr=s(dq);G0o=r(LYr,"RobertaModel"),LYr.forEach(t),O0o=r(_we," (RoBERTa model)"),_we.forEach(t),V0o=i($),iu=n($,"LI",{});var bwe=s(iu);$se=n(bwe,"STRONG",{});var xYr=s($se);X0o=r(xYr,"roformer"),xYr.forEach(t),z0o=r(bwe," \u2014 "),cq=n(bwe,"A",{href:!0});var $Yr=s(cq);Q0o=r($Yr,"RoFormerModel"),$Yr.forEach(t),W0o=r(bwe," (RoFormer model)"),bwe.forEach(t),H0o=i($),du=n($,"LI",{});var vwe=s(du);kse=n(vwe,"STRONG",{});var kYr=s(kse);U0o=r(kYr,"segformer"),kYr.forEach(t),J0o=r(vwe," \u2014 "),fq=n(vwe,"A",{href:!0});var SYr=s(fq);Y0o=r(SYr,"SegformerModel"),SYr.forEach(t),K0o=r(vwe," (SegFormer model)"),vwe.forEach(t),Z0o=i($),cu=n($,"LI",{});var Fwe=s(cu);Sse=n(Fwe,"STRONG",{});var RYr=s(Sse);e1o=r(RYr,"sew"),RYr.forEach(t),o1o=r(Fwe," \u2014 "),mq=n(Fwe,"A",{href:!0});var BYr=s(mq);r1o=r(BYr,"SEWModel"),BYr.forEach(t),t1o=r(Fwe," (SEW model)"),Fwe.forEach(t),a1o=i($),fu=n($,"LI",{});var Twe=s(fu);Rse=n(Twe,"STRONG",{});var PYr=s(Rse);n1o=r(PYr,"sew-d"),PYr.forEach(t),s1o=r(Twe," \u2014 "),gq=n(Twe,"A",{href:!0});var IYr=s(gq);l1o=r(IYr,"SEWDModel"),IYr.forEach(t),i1o=r(Twe," (SEW-D model)"),Twe.forEach(t),d1o=i($),mu=n($,"LI",{});var Mwe=s(mu);Bse=n(Mwe,"STRONG",{});var qYr=s(Bse);c1o=r(qYr,"speech_to_text"),qYr.forEach(t),f1o=r(Mwe," \u2014 "),hq=n(Mwe,"A",{href:!0});var NYr=s(hq);m1o=r(NYr,"Speech2TextModel"),NYr.forEach(t),g1o=r(Mwe," (Speech2Text model)"),Mwe.forEach(t),h1o=i($),gu=n($,"LI",{});var Ewe=s(gu);Pse=n(Ewe,"STRONG",{});var jYr=s(Pse);p1o=r(jYr,"splinter"),jYr.forEach(t),u1o=r(Ewe," \u2014 "),pq=n(Ewe,"A",{href:!0});var DYr=s(pq);_1o=r(DYr,"SplinterModel"),DYr.forEach(t),b1o=r(Ewe," (Splinter model)"),Ewe.forEach(t),v1o=i($),hu=n($,"LI",{});var Cwe=s(hu);Ise=n(Cwe,"STRONG",{});var GYr=s(Ise);F1o=r(GYr,"squeezebert"),GYr.forEach(t),T1o=r(Cwe," \u2014 "),uq=n(Cwe,"A",{href:!0});var OYr=s(uq);M1o=r(OYr,"SqueezeBertModel"),OYr.forEach(t),E1o=r(Cwe," (SqueezeBERT model)"),Cwe.forEach(t),C1o=i($),pu=n($,"LI",{});var wwe=s(pu);qse=n(wwe,"STRONG",{});var VYr=s(qse);w1o=r(VYr,"swin"),VYr.forEach(t),A1o=r(wwe," \u2014 "),_q=n(wwe,"A",{href:!0});var XYr=s(_q);y1o=r(XYr,"SwinModel"),XYr.forEach(t),L1o=r(wwe," (Swin model)"),wwe.forEach(t),x1o=i($),uu=n($,"LI",{});var Awe=s(uu);Nse=n(Awe,"STRONG",{});var zYr=s(Nse);$1o=r(zYr,"t5"),zYr.forEach(t),k1o=r(Awe," \u2014 "),bq=n(Awe,"A",{href:!0});var QYr=s(bq);S1o=r(QYr,"T5Model"),QYr.forEach(t),R1o=r(Awe," (T5 model)"),Awe.forEach(t),B1o=i($),_u=n($,"LI",{});var ywe=s(_u);jse=n(ywe,"STRONG",{});var WYr=s(jse);P1o=r(WYr,"tapas"),WYr.forEach(t),I1o=r(ywe," \u2014 "),vq=n(ywe,"A",{href:!0});var HYr=s(vq);q1o=r(HYr,"TapasModel"),HYr.forEach(t),N1o=r(ywe," (TAPAS model)"),ywe.forEach(t),j1o=i($),bu=n($,"LI",{});var Lwe=s(bu);Dse=n(Lwe,"STRONG",{});var UYr=s(Dse);D1o=r(UYr,"transfo-xl"),UYr.forEach(t),G1o=r(Lwe," \u2014 "),Fq=n(Lwe,"A",{href:!0});var JYr=s(Fq);O1o=r(JYr,"TransfoXLModel"),JYr.forEach(t),V1o=r(Lwe," (Transformer-XL model)"),Lwe.forEach(t),X1o=i($),vu=n($,"LI",{});var xwe=s(vu);Gse=n(xwe,"STRONG",{});var YYr=s(Gse);z1o=r(YYr,"unispeech"),YYr.forEach(t),Q1o=r(xwe," \u2014 "),Tq=n(xwe,"A",{href:!0});var KYr=s(Tq);W1o=r(KYr,"UniSpeechModel"),KYr.forEach(t),H1o=r(xwe," (UniSpeech model)"),xwe.forEach(t),U1o=i($),Fu=n($,"LI",{});var $we=s(Fu);Ose=n($we,"STRONG",{});var ZYr=s(Ose);J1o=r(ZYr,"unispeech-sat"),ZYr.forEach(t),Y1o=r($we," \u2014 "),Mq=n($we,"A",{href:!0});var eKr=s(Mq);K1o=r(eKr,"UniSpeechSatModel"),eKr.forEach(t),Z1o=r($we," (UniSpeechSat model)"),$we.forEach(t),ebo=i($),Tu=n($,"LI",{});var kwe=s(Tu);Vse=n(kwe,"STRONG",{});var oKr=s(Vse);obo=r(oKr,"van"),oKr.forEach(t),rbo=r(kwe," \u2014 "),Eq=n(kwe,"A",{href:!0});var rKr=s(Eq);tbo=r(rKr,"VanModel"),rKr.forEach(t),abo=r(kwe," (VAN model)"),kwe.forEach(t),nbo=i($),Mu=n($,"LI",{});var Swe=s(Mu);Xse=n(Swe,"STRONG",{});var tKr=s(Xse);sbo=r(tKr,"vilt"),tKr.forEach(t),lbo=r(Swe," \u2014 "),Cq=n(Swe,"A",{href:!0});var aKr=s(Cq);ibo=r(aKr,"ViltModel"),aKr.forEach(t),dbo=r(Swe," (ViLT model)"),Swe.forEach(t),cbo=i($),Eu=n($,"LI",{});var Rwe=s(Eu);zse=n(Rwe,"STRONG",{});var nKr=s(zse);fbo=r(nKr,"vision-text-dual-encoder"),nKr.forEach(t),mbo=r(Rwe," \u2014 "),wq=n(Rwe,"A",{href:!0});var sKr=s(wq);gbo=r(sKr,"VisionTextDualEncoderModel"),sKr.forEach(t),hbo=r(Rwe," (VisionTextDualEncoder model)"),Rwe.forEach(t),pbo=i($),Cu=n($,"LI",{});var Bwe=s(Cu);Qse=n(Bwe,"STRONG",{});var lKr=s(Qse);ubo=r(lKr,"visual_bert"),lKr.forEach(t),_bo=r(Bwe," \u2014 "),Aq=n(Bwe,"A",{href:!0});var iKr=s(Aq);bbo=r(iKr,"VisualBertModel"),iKr.forEach(t),vbo=r(Bwe," (VisualBert model)"),Bwe.forEach(t),Fbo=i($),wu=n($,"LI",{});var Pwe=s(wu);Wse=n(Pwe,"STRONG",{});var dKr=s(Wse);Tbo=r(dKr,"vit"),dKr.forEach(t),Mbo=r(Pwe," \u2014 "),yq=n(Pwe,"A",{href:!0});var cKr=s(yq);Ebo=r(cKr,"ViTModel"),cKr.forEach(t),Cbo=r(Pwe," (ViT model)"),Pwe.forEach(t),wbo=i($),Au=n($,"LI",{});var Iwe=s(Au);Hse=n(Iwe,"STRONG",{});var fKr=s(Hse);Abo=r(fKr,"vit_mae"),fKr.forEach(t),ybo=r(Iwe," \u2014 "),Lq=n(Iwe,"A",{href:!0});var mKr=s(Lq);Lbo=r(mKr,"ViTMAEModel"),mKr.forEach(t),xbo=r(Iwe," (ViTMAE model)"),Iwe.forEach(t),$bo=i($),yu=n($,"LI",{});var qwe=s(yu);Use=n(qwe,"STRONG",{});var gKr=s(Use);kbo=r(gKr,"wav2vec2"),gKr.forEach(t),Sbo=r(qwe," \u2014 "),xq=n(qwe,"A",{href:!0});var hKr=s(xq);Rbo=r(hKr,"Wav2Vec2Model"),hKr.forEach(t),Bbo=r(qwe," (Wav2Vec2 model)"),qwe.forEach(t),Pbo=i($),Lu=n($,"LI",{});var Nwe=s(Lu);Jse=n(Nwe,"STRONG",{});var pKr=s(Jse);Ibo=r(pKr,"wavlm"),pKr.forEach(t),qbo=r(Nwe," \u2014 "),$q=n(Nwe,"A",{href:!0});var uKr=s($q);Nbo=r(uKr,"WavLMModel"),uKr.forEach(t),jbo=r(Nwe," (WavLM model)"),Nwe.forEach(t),Dbo=i($),xu=n($,"LI",{});var jwe=s(xu);Yse=n(jwe,"STRONG",{});var _Kr=s(Yse);Gbo=r(_Kr,"xglm"),_Kr.forEach(t),Obo=r(jwe," \u2014 "),kq=n(jwe,"A",{href:!0});var bKr=s(kq);Vbo=r(bKr,"XGLMModel"),bKr.forEach(t),Xbo=r(jwe," (XGLM model)"),jwe.forEach(t),zbo=i($),$u=n($,"LI",{});var Dwe=s($u);Kse=n(Dwe,"STRONG",{});var vKr=s(Kse);Qbo=r(vKr,"xlm"),vKr.forEach(t),Wbo=r(Dwe," \u2014 "),Sq=n(Dwe,"A",{href:!0});var FKr=s(Sq);Hbo=r(FKr,"XLMModel"),FKr.forEach(t),Ubo=r(Dwe," (XLM model)"),Dwe.forEach(t),Jbo=i($),ku=n($,"LI",{});var Gwe=s(ku);Zse=n(Gwe,"STRONG",{});var TKr=s(Zse);Ybo=r(TKr,"xlm-prophetnet"),TKr.forEach(t),Kbo=r(Gwe," \u2014 "),Rq=n(Gwe,"A",{href:!0});var MKr=s(Rq);Zbo=r(MKr,"XLMProphetNetModel"),MKr.forEach(t),e2o=r(Gwe," (XLMProphetNet model)"),Gwe.forEach(t),o2o=i($),Su=n($,"LI",{});var Owe=s(Su);ele=n(Owe,"STRONG",{});var EKr=s(ele);r2o=r(EKr,"xlm-roberta"),EKr.forEach(t),t2o=r(Owe," \u2014 "),Bq=n(Owe,"A",{href:!0});var CKr=s(Bq);a2o=r(CKr,"XLMRobertaModel"),CKr.forEach(t),n2o=r(Owe," (XLM-RoBERTa model)"),Owe.forEach(t),s2o=i($),Ru=n($,"LI",{});var Vwe=s(Ru);ole=n(Vwe,"STRONG",{});var wKr=s(ole);l2o=r(wKr,"xlm-roberta-xl"),wKr.forEach(t),i2o=r(Vwe," \u2014 "),Pq=n(Vwe,"A",{href:!0});var AKr=s(Pq);d2o=r(AKr,"XLMRobertaXLModel"),AKr.forEach(t),c2o=r(Vwe," (XLM-RoBERTa-XL model)"),Vwe.forEach(t),f2o=i($),Bu=n($,"LI",{});var Xwe=s(Bu);rle=n(Xwe,"STRONG",{});var yKr=s(rle);m2o=r(yKr,"xlnet"),yKr.forEach(t),g2o=r(Xwe," \u2014 "),Iq=n(Xwe,"A",{href:!0});var LKr=s(Iq);h2o=r(LKr,"XLNetModel"),LKr.forEach(t),p2o=r(Xwe," (XLNet model)"),Xwe.forEach(t),u2o=i($),Pu=n($,"LI",{});var zwe=s(Pu);tle=n(zwe,"STRONG",{});var xKr=s(tle);_2o=r(xKr,"yolos"),xKr.forEach(t),b2o=r(zwe," \u2014 "),qq=n(zwe,"A",{href:!0});var $Kr=s(qq);v2o=r($Kr,"YolosModel"),$Kr.forEach(t),F2o=r(zwe," (YOLOS model)"),zwe.forEach(t),T2o=i($),Iu=n($,"LI",{});var Qwe=s(Iu);ale=n(Qwe,"STRONG",{});var kKr=s(ale);M2o=r(kKr,"yoso"),kKr.forEach(t),E2o=r(Qwe," \u2014 "),Nq=n(Qwe,"A",{href:!0});var SKr=s(Nq);C2o=r(SKr,"YosoModel"),SKr.forEach(t),w2o=r(Qwe," (YOSO model)"),Qwe.forEach(t),$.forEach(t),A2o=i(Zt),qu=n(Zt,"P",{});var Wwe=s(qu);y2o=r(Wwe,"The model is set in evaluation mode by default using "),nle=n(Wwe,"CODE",{});var RKr=s(nle);L2o=r(RKr,"model.eval()"),RKr.forEach(t),x2o=r(Wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sle=n(Wwe,"CODE",{});var BKr=s(sle);$2o=r(BKr,"model.train()"),BKr.forEach(t),Wwe.forEach(t),k2o=i(Zt),T(Nu.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),TIe=i(f),wi=n(f,"H2",{class:!0});var wNe=s(wi);ju=n(wNe,"A",{id:!0,class:!0,href:!0});var PKr=s(ju);lle=n(PKr,"SPAN",{});var IKr=s(lle);T(SA.$$.fragment,IKr),IKr.forEach(t),PKr.forEach(t),S2o=i(wNe),ile=n(wNe,"SPAN",{});var qKr=s(ile);R2o=r(qKr,"AutoModelForPreTraining"),qKr.forEach(t),wNe.forEach(t),MIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(RA.$$.fragment,Gs),B2o=i(Gs),Ai=n(Gs,"P",{});var FK=s(Ai);P2o=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jq=n(FK,"A",{href:!0});var NKr=s(jq);I2o=r(NKr,"from_pretrained()"),NKr.forEach(t),q2o=r(FK," class method or the "),Dq=n(FK,"A",{href:!0});var jKr=s(Dq);N2o=r(jKr,"from_config()"),jKr.forEach(t),j2o=r(FK,` class
method.`),FK.forEach(t),D2o=i(Gs),BA=n(Gs,"P",{});var ANe=s(BA);G2o=r(ANe,"This class cannot be instantiated directly using "),dle=n(ANe,"CODE",{});var DKr=s(dle);O2o=r(DKr,"__init__()"),DKr.forEach(t),V2o=r(ANe," (throws an error)."),ANe.forEach(t),X2o=i(Gs),rt=n(Gs,"DIV",{class:!0});var s3=s(rt);T(PA.$$.fragment,s3),z2o=i(s3),cle=n(s3,"P",{});var GKr=s(cle);Q2o=r(GKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GKr.forEach(t),W2o=i(s3),yi=n(s3,"P",{});var TK=s(yi);H2o=r(TK,`Note:
Loading a model from its configuration file does `),fle=n(TK,"STRONG",{});var OKr=s(fle);U2o=r(OKr,"not"),OKr.forEach(t),J2o=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=n(TK,"A",{href:!0});var VKr=s(Gq);Y2o=r(VKr,"from_pretrained()"),VKr.forEach(t),K2o=r(TK," to load the model weights."),TK.forEach(t),Z2o=i(s3),T(Du.$$.fragment,s3),s3.forEach(t),evo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(IA.$$.fragment,ea),ovo=i(ea),mle=n(ea,"P",{});var XKr=s(mle);rvo=r(XKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XKr.forEach(t),tvo=i(ea),ya=n(ea,"P",{});var l3=s(ya);avo=r(l3,"The model class to instantiate is selected based on the "),gle=n(l3,"CODE",{});var zKr=s(gle);nvo=r(zKr,"model_type"),zKr.forEach(t),svo=r(l3,` property of the config object (either
passed as an argument or loaded from `),hle=n(l3,"CODE",{});var QKr=s(hle);lvo=r(QKr,"pretrained_model_name_or_path"),QKr.forEach(t),ivo=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ple=n(l3,"CODE",{});var WKr=s(ple);dvo=r(WKr,"pretrained_model_name_or_path"),WKr.forEach(t),cvo=r(l3,":"),l3.forEach(t),fvo=i(ea),G=n(ea,"UL",{});var V=s(G);Gu=n(V,"LI",{});var Hwe=s(Gu);ule=n(Hwe,"STRONG",{});var HKr=s(ule);mvo=r(HKr,"albert"),HKr.forEach(t),gvo=r(Hwe," \u2014 "),Oq=n(Hwe,"A",{href:!0});var UKr=s(Oq);hvo=r(UKr,"AlbertForPreTraining"),UKr.forEach(t),pvo=r(Hwe," (ALBERT model)"),Hwe.forEach(t),uvo=i(V),Ou=n(V,"LI",{});var Uwe=s(Ou);_le=n(Uwe,"STRONG",{});var JKr=s(_le);_vo=r(JKr,"bart"),JKr.forEach(t),bvo=r(Uwe," \u2014 "),Vq=n(Uwe,"A",{href:!0});var YKr=s(Vq);vvo=r(YKr,"BartForConditionalGeneration"),YKr.forEach(t),Fvo=r(Uwe," (BART model)"),Uwe.forEach(t),Tvo=i(V),Vu=n(V,"LI",{});var Jwe=s(Vu);ble=n(Jwe,"STRONG",{});var KKr=s(ble);Mvo=r(KKr,"bert"),KKr.forEach(t),Evo=r(Jwe," \u2014 "),Xq=n(Jwe,"A",{href:!0});var ZKr=s(Xq);Cvo=r(ZKr,"BertForPreTraining"),ZKr.forEach(t),wvo=r(Jwe," (BERT model)"),Jwe.forEach(t),Avo=i(V),Xu=n(V,"LI",{});var Ywe=s(Xu);vle=n(Ywe,"STRONG",{});var eZr=s(vle);yvo=r(eZr,"big_bird"),eZr.forEach(t),Lvo=r(Ywe," \u2014 "),zq=n(Ywe,"A",{href:!0});var oZr=s(zq);xvo=r(oZr,"BigBirdForPreTraining"),oZr.forEach(t),$vo=r(Ywe," (BigBird model)"),Ywe.forEach(t),kvo=i(V),zu=n(V,"LI",{});var Kwe=s(zu);Fle=n(Kwe,"STRONG",{});var rZr=s(Fle);Svo=r(rZr,"camembert"),rZr.forEach(t),Rvo=r(Kwe," \u2014 "),Qq=n(Kwe,"A",{href:!0});var tZr=s(Qq);Bvo=r(tZr,"CamembertForMaskedLM"),tZr.forEach(t),Pvo=r(Kwe," (CamemBERT model)"),Kwe.forEach(t),Ivo=i(V),Qu=n(V,"LI",{});var Zwe=s(Qu);Tle=n(Zwe,"STRONG",{});var aZr=s(Tle);qvo=r(aZr,"ctrl"),aZr.forEach(t),Nvo=r(Zwe," \u2014 "),Wq=n(Zwe,"A",{href:!0});var nZr=s(Wq);jvo=r(nZr,"CTRLLMHeadModel"),nZr.forEach(t),Dvo=r(Zwe," (CTRL model)"),Zwe.forEach(t),Gvo=i(V),Wu=n(V,"LI",{});var eAe=s(Wu);Mle=n(eAe,"STRONG",{});var sZr=s(Mle);Ovo=r(sZr,"data2vec-text"),sZr.forEach(t),Vvo=r(eAe," \u2014 "),Hq=n(eAe,"A",{href:!0});var lZr=s(Hq);Xvo=r(lZr,"Data2VecTextForMaskedLM"),lZr.forEach(t),zvo=r(eAe," (Data2VecText model)"),eAe.forEach(t),Qvo=i(V),Hu=n(V,"LI",{});var oAe=s(Hu);Ele=n(oAe,"STRONG",{});var iZr=s(Ele);Wvo=r(iZr,"deberta"),iZr.forEach(t),Hvo=r(oAe," \u2014 "),Uq=n(oAe,"A",{href:!0});var dZr=s(Uq);Uvo=r(dZr,"DebertaForMaskedLM"),dZr.forEach(t),Jvo=r(oAe," (DeBERTa model)"),oAe.forEach(t),Yvo=i(V),Uu=n(V,"LI",{});var rAe=s(Uu);Cle=n(rAe,"STRONG",{});var cZr=s(Cle);Kvo=r(cZr,"deberta-v2"),cZr.forEach(t),Zvo=r(rAe," \u2014 "),Jq=n(rAe,"A",{href:!0});var fZr=s(Jq);eFo=r(fZr,"DebertaV2ForMaskedLM"),fZr.forEach(t),oFo=r(rAe," (DeBERTa-v2 model)"),rAe.forEach(t),rFo=i(V),Ju=n(V,"LI",{});var tAe=s(Ju);wle=n(tAe,"STRONG",{});var mZr=s(wle);tFo=r(mZr,"distilbert"),mZr.forEach(t),aFo=r(tAe," \u2014 "),Yq=n(tAe,"A",{href:!0});var gZr=s(Yq);nFo=r(gZr,"DistilBertForMaskedLM"),gZr.forEach(t),sFo=r(tAe," (DistilBERT model)"),tAe.forEach(t),lFo=i(V),Yu=n(V,"LI",{});var aAe=s(Yu);Ale=n(aAe,"STRONG",{});var hZr=s(Ale);iFo=r(hZr,"electra"),hZr.forEach(t),dFo=r(aAe," \u2014 "),Kq=n(aAe,"A",{href:!0});var pZr=s(Kq);cFo=r(pZr,"ElectraForPreTraining"),pZr.forEach(t),fFo=r(aAe," (ELECTRA model)"),aAe.forEach(t),mFo=i(V),Ku=n(V,"LI",{});var nAe=s(Ku);yle=n(nAe,"STRONG",{});var uZr=s(yle);gFo=r(uZr,"flaubert"),uZr.forEach(t),hFo=r(nAe," \u2014 "),Zq=n(nAe,"A",{href:!0});var _Zr=s(Zq);pFo=r(_Zr,"FlaubertWithLMHeadModel"),_Zr.forEach(t),uFo=r(nAe," (FlauBERT model)"),nAe.forEach(t),_Fo=i(V),Zu=n(V,"LI",{});var sAe=s(Zu);Lle=n(sAe,"STRONG",{});var bZr=s(Lle);bFo=r(bZr,"flava"),bZr.forEach(t),vFo=r(sAe," \u2014 "),eN=n(sAe,"A",{href:!0});var vZr=s(eN);FFo=r(vZr,"FlavaForPreTraining"),vZr.forEach(t),TFo=r(sAe," (Flava model)"),sAe.forEach(t),MFo=i(V),e_=n(V,"LI",{});var lAe=s(e_);xle=n(lAe,"STRONG",{});var FZr=s(xle);EFo=r(FZr,"fnet"),FZr.forEach(t),CFo=r(lAe," \u2014 "),oN=n(lAe,"A",{href:!0});var TZr=s(oN);wFo=r(TZr,"FNetForPreTraining"),TZr.forEach(t),AFo=r(lAe," (FNet model)"),lAe.forEach(t),yFo=i(V),o_=n(V,"LI",{});var iAe=s(o_);$le=n(iAe,"STRONG",{});var MZr=s($le);LFo=r(MZr,"fsmt"),MZr.forEach(t),xFo=r(iAe," \u2014 "),rN=n(iAe,"A",{href:!0});var EZr=s(rN);$Fo=r(EZr,"FSMTForConditionalGeneration"),EZr.forEach(t),kFo=r(iAe," (FairSeq Machine-Translation model)"),iAe.forEach(t),SFo=i(V),r_=n(V,"LI",{});var dAe=s(r_);kle=n(dAe,"STRONG",{});var CZr=s(kle);RFo=r(CZr,"funnel"),CZr.forEach(t),BFo=r(dAe," \u2014 "),tN=n(dAe,"A",{href:!0});var wZr=s(tN);PFo=r(wZr,"FunnelForPreTraining"),wZr.forEach(t),IFo=r(dAe," (Funnel Transformer model)"),dAe.forEach(t),qFo=i(V),t_=n(V,"LI",{});var cAe=s(t_);Sle=n(cAe,"STRONG",{});var AZr=s(Sle);NFo=r(AZr,"gpt2"),AZr.forEach(t),jFo=r(cAe," \u2014 "),aN=n(cAe,"A",{href:!0});var yZr=s(aN);DFo=r(yZr,"GPT2LMHeadModel"),yZr.forEach(t),GFo=r(cAe," (OpenAI GPT-2 model)"),cAe.forEach(t),OFo=i(V),a_=n(V,"LI",{});var fAe=s(a_);Rle=n(fAe,"STRONG",{});var LZr=s(Rle);VFo=r(LZr,"ibert"),LZr.forEach(t),XFo=r(fAe," \u2014 "),nN=n(fAe,"A",{href:!0});var xZr=s(nN);zFo=r(xZr,"IBertForMaskedLM"),xZr.forEach(t),QFo=r(fAe," (I-BERT model)"),fAe.forEach(t),WFo=i(V),n_=n(V,"LI",{});var mAe=s(n_);Ble=n(mAe,"STRONG",{});var $Zr=s(Ble);HFo=r($Zr,"layoutlm"),$Zr.forEach(t),UFo=r(mAe," \u2014 "),sN=n(mAe,"A",{href:!0});var kZr=s(sN);JFo=r(kZr,"LayoutLMForMaskedLM"),kZr.forEach(t),YFo=r(mAe," (LayoutLM model)"),mAe.forEach(t),KFo=i(V),s_=n(V,"LI",{});var gAe=s(s_);Ple=n(gAe,"STRONG",{});var SZr=s(Ple);ZFo=r(SZr,"longformer"),SZr.forEach(t),e6o=r(gAe," \u2014 "),lN=n(gAe,"A",{href:!0});var RZr=s(lN);o6o=r(RZr,"LongformerForMaskedLM"),RZr.forEach(t),r6o=r(gAe," (Longformer model)"),gAe.forEach(t),t6o=i(V),l_=n(V,"LI",{});var hAe=s(l_);Ile=n(hAe,"STRONG",{});var BZr=s(Ile);a6o=r(BZr,"lxmert"),BZr.forEach(t),n6o=r(hAe," \u2014 "),iN=n(hAe,"A",{href:!0});var PZr=s(iN);s6o=r(PZr,"LxmertForPreTraining"),PZr.forEach(t),l6o=r(hAe," (LXMERT model)"),hAe.forEach(t),i6o=i(V),i_=n(V,"LI",{});var pAe=s(i_);qle=n(pAe,"STRONG",{});var IZr=s(qle);d6o=r(IZr,"megatron-bert"),IZr.forEach(t),c6o=r(pAe," \u2014 "),dN=n(pAe,"A",{href:!0});var qZr=s(dN);f6o=r(qZr,"MegatronBertForPreTraining"),qZr.forEach(t),m6o=r(pAe," (MegatronBert model)"),pAe.forEach(t),g6o=i(V),d_=n(V,"LI",{});var uAe=s(d_);Nle=n(uAe,"STRONG",{});var NZr=s(Nle);h6o=r(NZr,"mobilebert"),NZr.forEach(t),p6o=r(uAe," \u2014 "),cN=n(uAe,"A",{href:!0});var jZr=s(cN);u6o=r(jZr,"MobileBertForPreTraining"),jZr.forEach(t),_6o=r(uAe," (MobileBERT model)"),uAe.forEach(t),b6o=i(V),c_=n(V,"LI",{});var _Ae=s(c_);jle=n(_Ae,"STRONG",{});var DZr=s(jle);v6o=r(DZr,"mpnet"),DZr.forEach(t),F6o=r(_Ae," \u2014 "),fN=n(_Ae,"A",{href:!0});var GZr=s(fN);T6o=r(GZr,"MPNetForMaskedLM"),GZr.forEach(t),M6o=r(_Ae," (MPNet model)"),_Ae.forEach(t),E6o=i(V),f_=n(V,"LI",{});var bAe=s(f_);Dle=n(bAe,"STRONG",{});var OZr=s(Dle);C6o=r(OZr,"openai-gpt"),OZr.forEach(t),w6o=r(bAe," \u2014 "),mN=n(bAe,"A",{href:!0});var VZr=s(mN);A6o=r(VZr,"OpenAIGPTLMHeadModel"),VZr.forEach(t),y6o=r(bAe," (OpenAI GPT model)"),bAe.forEach(t),L6o=i(V),m_=n(V,"LI",{});var vAe=s(m_);Gle=n(vAe,"STRONG",{});var XZr=s(Gle);x6o=r(XZr,"retribert"),XZr.forEach(t),$6o=r(vAe," \u2014 "),gN=n(vAe,"A",{href:!0});var zZr=s(gN);k6o=r(zZr,"RetriBertModel"),zZr.forEach(t),S6o=r(vAe," (RetriBERT model)"),vAe.forEach(t),R6o=i(V),g_=n(V,"LI",{});var FAe=s(g_);Ole=n(FAe,"STRONG",{});var QZr=s(Ole);B6o=r(QZr,"roberta"),QZr.forEach(t),P6o=r(FAe," \u2014 "),hN=n(FAe,"A",{href:!0});var WZr=s(hN);I6o=r(WZr,"RobertaForMaskedLM"),WZr.forEach(t),q6o=r(FAe," (RoBERTa model)"),FAe.forEach(t),N6o=i(V),h_=n(V,"LI",{});var TAe=s(h_);Vle=n(TAe,"STRONG",{});var HZr=s(Vle);j6o=r(HZr,"squeezebert"),HZr.forEach(t),D6o=r(TAe," \u2014 "),pN=n(TAe,"A",{href:!0});var UZr=s(pN);G6o=r(UZr,"SqueezeBertForMaskedLM"),UZr.forEach(t),O6o=r(TAe," (SqueezeBERT model)"),TAe.forEach(t),V6o=i(V),p_=n(V,"LI",{});var MAe=s(p_);Xle=n(MAe,"STRONG",{});var JZr=s(Xle);X6o=r(JZr,"t5"),JZr.forEach(t),z6o=r(MAe," \u2014 "),uN=n(MAe,"A",{href:!0});var YZr=s(uN);Q6o=r(YZr,"T5ForConditionalGeneration"),YZr.forEach(t),W6o=r(MAe," (T5 model)"),MAe.forEach(t),H6o=i(V),u_=n(V,"LI",{});var EAe=s(u_);zle=n(EAe,"STRONG",{});var KZr=s(zle);U6o=r(KZr,"tapas"),KZr.forEach(t),J6o=r(EAe," \u2014 "),_N=n(EAe,"A",{href:!0});var ZZr=s(_N);Y6o=r(ZZr,"TapasForMaskedLM"),ZZr.forEach(t),K6o=r(EAe," (TAPAS model)"),EAe.forEach(t),Z6o=i(V),__=n(V,"LI",{});var CAe=s(__);Qle=n(CAe,"STRONG",{});var eet=s(Qle);eTo=r(eet,"transfo-xl"),eet.forEach(t),oTo=r(CAe," \u2014 "),bN=n(CAe,"A",{href:!0});var oet=s(bN);rTo=r(oet,"TransfoXLLMHeadModel"),oet.forEach(t),tTo=r(CAe," (Transformer-XL model)"),CAe.forEach(t),aTo=i(V),b_=n(V,"LI",{});var wAe=s(b_);Wle=n(wAe,"STRONG",{});var ret=s(Wle);nTo=r(ret,"unispeech"),ret.forEach(t),sTo=r(wAe," \u2014 "),vN=n(wAe,"A",{href:!0});var tet=s(vN);lTo=r(tet,"UniSpeechForPreTraining"),tet.forEach(t),iTo=r(wAe," (UniSpeech model)"),wAe.forEach(t),dTo=i(V),v_=n(V,"LI",{});var AAe=s(v_);Hle=n(AAe,"STRONG",{});var aet=s(Hle);cTo=r(aet,"unispeech-sat"),aet.forEach(t),fTo=r(AAe," \u2014 "),FN=n(AAe,"A",{href:!0});var net=s(FN);mTo=r(net,"UniSpeechSatForPreTraining"),net.forEach(t),gTo=r(AAe," (UniSpeechSat model)"),AAe.forEach(t),hTo=i(V),F_=n(V,"LI",{});var yAe=s(F_);Ule=n(yAe,"STRONG",{});var set=s(Ule);pTo=r(set,"visual_bert"),set.forEach(t),uTo=r(yAe," \u2014 "),TN=n(yAe,"A",{href:!0});var iet=s(TN);_To=r(iet,"VisualBertForPreTraining"),iet.forEach(t),bTo=r(yAe," (VisualBert model)"),yAe.forEach(t),vTo=i(V),T_=n(V,"LI",{});var LAe=s(T_);Jle=n(LAe,"STRONG",{});var det=s(Jle);FTo=r(det,"vit_mae"),det.forEach(t),TTo=r(LAe," \u2014 "),MN=n(LAe,"A",{href:!0});var cet=s(MN);MTo=r(cet,"ViTMAEForPreTraining"),cet.forEach(t),ETo=r(LAe," (ViTMAE model)"),LAe.forEach(t),CTo=i(V),M_=n(V,"LI",{});var xAe=s(M_);Yle=n(xAe,"STRONG",{});var fet=s(Yle);wTo=r(fet,"wav2vec2"),fet.forEach(t),ATo=r(xAe," \u2014 "),EN=n(xAe,"A",{href:!0});var met=s(EN);yTo=r(met,"Wav2Vec2ForPreTraining"),met.forEach(t),LTo=r(xAe," (Wav2Vec2 model)"),xAe.forEach(t),xTo=i(V),E_=n(V,"LI",{});var $Ae=s(E_);Kle=n($Ae,"STRONG",{});var get=s(Kle);$To=r(get,"xlm"),get.forEach(t),kTo=r($Ae," \u2014 "),CN=n($Ae,"A",{href:!0});var het=s(CN);STo=r(het,"XLMWithLMHeadModel"),het.forEach(t),RTo=r($Ae," (XLM model)"),$Ae.forEach(t),BTo=i(V),C_=n(V,"LI",{});var kAe=s(C_);Zle=n(kAe,"STRONG",{});var pet=s(Zle);PTo=r(pet,"xlm-roberta"),pet.forEach(t),ITo=r(kAe," \u2014 "),wN=n(kAe,"A",{href:!0});var uet=s(wN);qTo=r(uet,"XLMRobertaForMaskedLM"),uet.forEach(t),NTo=r(kAe," (XLM-RoBERTa model)"),kAe.forEach(t),jTo=i(V),w_=n(V,"LI",{});var SAe=s(w_);eie=n(SAe,"STRONG",{});var _et=s(eie);DTo=r(_et,"xlm-roberta-xl"),_et.forEach(t),GTo=r(SAe," \u2014 "),AN=n(SAe,"A",{href:!0});var bet=s(AN);OTo=r(bet,"XLMRobertaXLForMaskedLM"),bet.forEach(t),VTo=r(SAe," (XLM-RoBERTa-XL model)"),SAe.forEach(t),XTo=i(V),A_=n(V,"LI",{});var RAe=s(A_);oie=n(RAe,"STRONG",{});var vet=s(oie);zTo=r(vet,"xlnet"),vet.forEach(t),QTo=r(RAe," \u2014 "),yN=n(RAe,"A",{href:!0});var Fet=s(yN);WTo=r(Fet,"XLNetLMHeadModel"),Fet.forEach(t),HTo=r(RAe," (XLNet model)"),RAe.forEach(t),V.forEach(t),UTo=i(ea),y_=n(ea,"P",{});var BAe=s(y_);JTo=r(BAe,"The model is set in evaluation mode by default using "),rie=n(BAe,"CODE",{});var Tet=s(rie);YTo=r(Tet,"model.eval()"),Tet.forEach(t),KTo=r(BAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tie=n(BAe,"CODE",{});var Met=s(tie);ZTo=r(Met,"model.train()"),Met.forEach(t),BAe.forEach(t),e7o=i(ea),T(L_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),EIe=i(f),Li=n(f,"H2",{class:!0});var yNe=s(Li);x_=n(yNe,"A",{id:!0,class:!0,href:!0});var Eet=s(x_);aie=n(Eet,"SPAN",{});var Cet=s(aie);T(qA.$$.fragment,Cet),Cet.forEach(t),Eet.forEach(t),o7o=i(yNe),nie=n(yNe,"SPAN",{});var wet=s(nie);r7o=r(wet,"AutoModelForCausalLM"),wet.forEach(t),yNe.forEach(t),CIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(NA.$$.fragment,Os),t7o=i(Os),xi=n(Os,"P",{});var MK=s(xi);a7o=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),LN=n(MK,"A",{href:!0});var Aet=s(LN);n7o=r(Aet,"from_pretrained()"),Aet.forEach(t),s7o=r(MK," class method or the "),xN=n(MK,"A",{href:!0});var yet=s(xN);l7o=r(yet,"from_config()"),yet.forEach(t),i7o=r(MK,` class
method.`),MK.forEach(t),d7o=i(Os),jA=n(Os,"P",{});var LNe=s(jA);c7o=r(LNe,"This class cannot be instantiated directly using "),sie=n(LNe,"CODE",{});var Let=s(sie);f7o=r(Let,"__init__()"),Let.forEach(t),m7o=r(LNe," (throws an error)."),LNe.forEach(t),g7o=i(Os),tt=n(Os,"DIV",{class:!0});var i3=s(tt);T(DA.$$.fragment,i3),h7o=i(i3),lie=n(i3,"P",{});var xet=s(lie);p7o=r(xet,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xet.forEach(t),u7o=i(i3),$i=n(i3,"P",{});var EK=s($i);_7o=r(EK,`Note:
Loading a model from its configuration file does `),iie=n(EK,"STRONG",{});var $et=s(iie);b7o=r($et,"not"),$et.forEach(t),v7o=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=n(EK,"A",{href:!0});var ket=s($N);F7o=r(ket,"from_pretrained()"),ket.forEach(t),T7o=r(EK," to load the model weights."),EK.forEach(t),M7o=i(i3),T($_.$$.fragment,i3),i3.forEach(t),E7o=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(GA.$$.fragment,oa),C7o=i(oa),die=n(oa,"P",{});var Set=s(die);w7o=r(Set,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Set.forEach(t),A7o=i(oa),La=n(oa,"P",{});var d3=s(La);y7o=r(d3,"The model class to instantiate is selected based on the "),cie=n(d3,"CODE",{});var Ret=s(cie);L7o=r(Ret,"model_type"),Ret.forEach(t),x7o=r(d3,` property of the config object (either
passed as an argument or loaded from `),fie=n(d3,"CODE",{});var Bet=s(fie);$7o=r(Bet,"pretrained_model_name_or_path"),Bet.forEach(t),k7o=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mie=n(d3,"CODE",{});var Pet=s(mie);S7o=r(Pet,"pretrained_model_name_or_path"),Pet.forEach(t),R7o=r(d3,":"),d3.forEach(t),B7o=i(oa),z=n(oa,"UL",{});var H=s(z);k_=n(H,"LI",{});var PAe=s(k_);gie=n(PAe,"STRONG",{});var Iet=s(gie);P7o=r(Iet,"bart"),Iet.forEach(t),I7o=r(PAe," \u2014 "),kN=n(PAe,"A",{href:!0});var qet=s(kN);q7o=r(qet,"BartForCausalLM"),qet.forEach(t),N7o=r(PAe," (BART model)"),PAe.forEach(t),j7o=i(H),S_=n(H,"LI",{});var IAe=s(S_);hie=n(IAe,"STRONG",{});var Net=s(hie);D7o=r(Net,"bert"),Net.forEach(t),G7o=r(IAe," \u2014 "),SN=n(IAe,"A",{href:!0});var jet=s(SN);O7o=r(jet,"BertLMHeadModel"),jet.forEach(t),V7o=r(IAe," (BERT model)"),IAe.forEach(t),X7o=i(H),R_=n(H,"LI",{});var qAe=s(R_);pie=n(qAe,"STRONG",{});var Det=s(pie);z7o=r(Det,"bert-generation"),Det.forEach(t),Q7o=r(qAe," \u2014 "),RN=n(qAe,"A",{href:!0});var Get=s(RN);W7o=r(Get,"BertGenerationDecoder"),Get.forEach(t),H7o=r(qAe," (Bert Generation model)"),qAe.forEach(t),U7o=i(H),B_=n(H,"LI",{});var NAe=s(B_);uie=n(NAe,"STRONG",{});var Oet=s(uie);J7o=r(Oet,"big_bird"),Oet.forEach(t),Y7o=r(NAe," \u2014 "),BN=n(NAe,"A",{href:!0});var Vet=s(BN);K7o=r(Vet,"BigBirdForCausalLM"),Vet.forEach(t),Z7o=r(NAe," (BigBird model)"),NAe.forEach(t),eMo=i(H),P_=n(H,"LI",{});var jAe=s(P_);_ie=n(jAe,"STRONG",{});var Xet=s(_ie);oMo=r(Xet,"bigbird_pegasus"),Xet.forEach(t),rMo=r(jAe," \u2014 "),PN=n(jAe,"A",{href:!0});var zet=s(PN);tMo=r(zet,"BigBirdPegasusForCausalLM"),zet.forEach(t),aMo=r(jAe," (BigBirdPegasus model)"),jAe.forEach(t),nMo=i(H),I_=n(H,"LI",{});var DAe=s(I_);bie=n(DAe,"STRONG",{});var Qet=s(bie);sMo=r(Qet,"blenderbot"),Qet.forEach(t),lMo=r(DAe," \u2014 "),IN=n(DAe,"A",{href:!0});var Wet=s(IN);iMo=r(Wet,"BlenderbotForCausalLM"),Wet.forEach(t),dMo=r(DAe," (Blenderbot model)"),DAe.forEach(t),cMo=i(H),q_=n(H,"LI",{});var GAe=s(q_);vie=n(GAe,"STRONG",{});var Het=s(vie);fMo=r(Het,"blenderbot-small"),Het.forEach(t),mMo=r(GAe," \u2014 "),qN=n(GAe,"A",{href:!0});var Uet=s(qN);gMo=r(Uet,"BlenderbotSmallForCausalLM"),Uet.forEach(t),hMo=r(GAe," (BlenderbotSmall model)"),GAe.forEach(t),pMo=i(H),N_=n(H,"LI",{});var OAe=s(N_);Fie=n(OAe,"STRONG",{});var Jet=s(Fie);uMo=r(Jet,"camembert"),Jet.forEach(t),_Mo=r(OAe," \u2014 "),NN=n(OAe,"A",{href:!0});var Yet=s(NN);bMo=r(Yet,"CamembertForCausalLM"),Yet.forEach(t),vMo=r(OAe," (CamemBERT model)"),OAe.forEach(t),FMo=i(H),j_=n(H,"LI",{});var VAe=s(j_);Tie=n(VAe,"STRONG",{});var Ket=s(Tie);TMo=r(Ket,"ctrl"),Ket.forEach(t),MMo=r(VAe," \u2014 "),jN=n(VAe,"A",{href:!0});var Zet=s(jN);EMo=r(Zet,"CTRLLMHeadModel"),Zet.forEach(t),CMo=r(VAe," (CTRL model)"),VAe.forEach(t),wMo=i(H),D_=n(H,"LI",{});var XAe=s(D_);Mie=n(XAe,"STRONG",{});var eot=s(Mie);AMo=r(eot,"data2vec-text"),eot.forEach(t),yMo=r(XAe," \u2014 "),DN=n(XAe,"A",{href:!0});var oot=s(DN);LMo=r(oot,"Data2VecTextForCausalLM"),oot.forEach(t),xMo=r(XAe," (Data2VecText model)"),XAe.forEach(t),$Mo=i(H),G_=n(H,"LI",{});var zAe=s(G_);Eie=n(zAe,"STRONG",{});var rot=s(Eie);kMo=r(rot,"electra"),rot.forEach(t),SMo=r(zAe," \u2014 "),GN=n(zAe,"A",{href:!0});var tot=s(GN);RMo=r(tot,"ElectraForCausalLM"),tot.forEach(t),BMo=r(zAe," (ELECTRA model)"),zAe.forEach(t),PMo=i(H),O_=n(H,"LI",{});var QAe=s(O_);Cie=n(QAe,"STRONG",{});var aot=s(Cie);IMo=r(aot,"gpt2"),aot.forEach(t),qMo=r(QAe," \u2014 "),ON=n(QAe,"A",{href:!0});var not=s(ON);NMo=r(not,"GPT2LMHeadModel"),not.forEach(t),jMo=r(QAe," (OpenAI GPT-2 model)"),QAe.forEach(t),DMo=i(H),V_=n(H,"LI",{});var WAe=s(V_);wie=n(WAe,"STRONG",{});var sot=s(wie);GMo=r(sot,"gpt_neo"),sot.forEach(t),OMo=r(WAe," \u2014 "),VN=n(WAe,"A",{href:!0});var lot=s(VN);VMo=r(lot,"GPTNeoForCausalLM"),lot.forEach(t),XMo=r(WAe," (GPT Neo model)"),WAe.forEach(t),zMo=i(H),X_=n(H,"LI",{});var HAe=s(X_);Aie=n(HAe,"STRONG",{});var iot=s(Aie);QMo=r(iot,"gptj"),iot.forEach(t),WMo=r(HAe," \u2014 "),XN=n(HAe,"A",{href:!0});var dot=s(XN);HMo=r(dot,"GPTJForCausalLM"),dot.forEach(t),UMo=r(HAe," (GPT-J model)"),HAe.forEach(t),JMo=i(H),z_=n(H,"LI",{});var UAe=s(z_);yie=n(UAe,"STRONG",{});var cot=s(yie);YMo=r(cot,"marian"),cot.forEach(t),KMo=r(UAe," \u2014 "),zN=n(UAe,"A",{href:!0});var fot=s(zN);ZMo=r(fot,"MarianForCausalLM"),fot.forEach(t),e4o=r(UAe," (Marian model)"),UAe.forEach(t),o4o=i(H),Q_=n(H,"LI",{});var JAe=s(Q_);Lie=n(JAe,"STRONG",{});var mot=s(Lie);r4o=r(mot,"mbart"),mot.forEach(t),t4o=r(JAe," \u2014 "),QN=n(JAe,"A",{href:!0});var got=s(QN);a4o=r(got,"MBartForCausalLM"),got.forEach(t),n4o=r(JAe," (mBART model)"),JAe.forEach(t),s4o=i(H),W_=n(H,"LI",{});var YAe=s(W_);xie=n(YAe,"STRONG",{});var hot=s(xie);l4o=r(hot,"megatron-bert"),hot.forEach(t),i4o=r(YAe," \u2014 "),WN=n(YAe,"A",{href:!0});var pot=s(WN);d4o=r(pot,"MegatronBertForCausalLM"),pot.forEach(t),c4o=r(YAe," (MegatronBert model)"),YAe.forEach(t),f4o=i(H),H_=n(H,"LI",{});var KAe=s(H_);$ie=n(KAe,"STRONG",{});var uot=s($ie);m4o=r(uot,"openai-gpt"),uot.forEach(t),g4o=r(KAe," \u2014 "),HN=n(KAe,"A",{href:!0});var _ot=s(HN);h4o=r(_ot,"OpenAIGPTLMHeadModel"),_ot.forEach(t),p4o=r(KAe," (OpenAI GPT model)"),KAe.forEach(t),u4o=i(H),U_=n(H,"LI",{});var ZAe=s(U_);kie=n(ZAe,"STRONG",{});var bot=s(kie);_4o=r(bot,"pegasus"),bot.forEach(t),b4o=r(ZAe," \u2014 "),UN=n(ZAe,"A",{href:!0});var vot=s(UN);v4o=r(vot,"PegasusForCausalLM"),vot.forEach(t),F4o=r(ZAe," (Pegasus model)"),ZAe.forEach(t),T4o=i(H),J_=n(H,"LI",{});var eye=s(J_);Sie=n(eye,"STRONG",{});var Fot=s(Sie);M4o=r(Fot,"plbart"),Fot.forEach(t),E4o=r(eye," \u2014 "),JN=n(eye,"A",{href:!0});var Tot=s(JN);C4o=r(Tot,"PLBartForCausalLM"),Tot.forEach(t),w4o=r(eye," (PLBart model)"),eye.forEach(t),A4o=i(H),Y_=n(H,"LI",{});var oye=s(Y_);Rie=n(oye,"STRONG",{});var Mot=s(Rie);y4o=r(Mot,"prophetnet"),Mot.forEach(t),L4o=r(oye," \u2014 "),YN=n(oye,"A",{href:!0});var Eot=s(YN);x4o=r(Eot,"ProphetNetForCausalLM"),Eot.forEach(t),$4o=r(oye," (ProphetNet model)"),oye.forEach(t),k4o=i(H),K_=n(H,"LI",{});var rye=s(K_);Bie=n(rye,"STRONG",{});var Cot=s(Bie);S4o=r(Cot,"qdqbert"),Cot.forEach(t),R4o=r(rye," \u2014 "),KN=n(rye,"A",{href:!0});var wot=s(KN);B4o=r(wot,"QDQBertLMHeadModel"),wot.forEach(t),P4o=r(rye," (QDQBert model)"),rye.forEach(t),I4o=i(H),Z_=n(H,"LI",{});var tye=s(Z_);Pie=n(tye,"STRONG",{});var Aot=s(Pie);q4o=r(Aot,"reformer"),Aot.forEach(t),N4o=r(tye," \u2014 "),ZN=n(tye,"A",{href:!0});var yot=s(ZN);j4o=r(yot,"ReformerModelWithLMHead"),yot.forEach(t),D4o=r(tye," (Reformer model)"),tye.forEach(t),G4o=i(H),e0=n(H,"LI",{});var aye=s(e0);Iie=n(aye,"STRONG",{});var Lot=s(Iie);O4o=r(Lot,"rembert"),Lot.forEach(t),V4o=r(aye," \u2014 "),ej=n(aye,"A",{href:!0});var xot=s(ej);X4o=r(xot,"RemBertForCausalLM"),xot.forEach(t),z4o=r(aye," (RemBERT model)"),aye.forEach(t),Q4o=i(H),o0=n(H,"LI",{});var nye=s(o0);qie=n(nye,"STRONG",{});var $ot=s(qie);W4o=r($ot,"roberta"),$ot.forEach(t),H4o=r(nye," \u2014 "),oj=n(nye,"A",{href:!0});var kot=s(oj);U4o=r(kot,"RobertaForCausalLM"),kot.forEach(t),J4o=r(nye," (RoBERTa model)"),nye.forEach(t),Y4o=i(H),r0=n(H,"LI",{});var sye=s(r0);Nie=n(sye,"STRONG",{});var Sot=s(Nie);K4o=r(Sot,"roformer"),Sot.forEach(t),Z4o=r(sye," \u2014 "),rj=n(sye,"A",{href:!0});var Rot=s(rj);eEo=r(Rot,"RoFormerForCausalLM"),Rot.forEach(t),oEo=r(sye," (RoFormer model)"),sye.forEach(t),rEo=i(H),t0=n(H,"LI",{});var lye=s(t0);jie=n(lye,"STRONG",{});var Bot=s(jie);tEo=r(Bot,"speech_to_text_2"),Bot.forEach(t),aEo=r(lye," \u2014 "),tj=n(lye,"A",{href:!0});var Pot=s(tj);nEo=r(Pot,"Speech2Text2ForCausalLM"),Pot.forEach(t),sEo=r(lye," (Speech2Text2 model)"),lye.forEach(t),lEo=i(H),a0=n(H,"LI",{});var iye=s(a0);Die=n(iye,"STRONG",{});var Iot=s(Die);iEo=r(Iot,"transfo-xl"),Iot.forEach(t),dEo=r(iye," \u2014 "),aj=n(iye,"A",{href:!0});var qot=s(aj);cEo=r(qot,"TransfoXLLMHeadModel"),qot.forEach(t),fEo=r(iye," (Transformer-XL model)"),iye.forEach(t),mEo=i(H),n0=n(H,"LI",{});var dye=s(n0);Gie=n(dye,"STRONG",{});var Not=s(Gie);gEo=r(Not,"trocr"),Not.forEach(t),hEo=r(dye," \u2014 "),nj=n(dye,"A",{href:!0});var jot=s(nj);pEo=r(jot,"TrOCRForCausalLM"),jot.forEach(t),uEo=r(dye," (TrOCR model)"),dye.forEach(t),_Eo=i(H),s0=n(H,"LI",{});var cye=s(s0);Oie=n(cye,"STRONG",{});var Dot=s(Oie);bEo=r(Dot,"xglm"),Dot.forEach(t),vEo=r(cye," \u2014 "),sj=n(cye,"A",{href:!0});var Got=s(sj);FEo=r(Got,"XGLMForCausalLM"),Got.forEach(t),TEo=r(cye," (XGLM model)"),cye.forEach(t),MEo=i(H),l0=n(H,"LI",{});var fye=s(l0);Vie=n(fye,"STRONG",{});var Oot=s(Vie);EEo=r(Oot,"xlm"),Oot.forEach(t),CEo=r(fye," \u2014 "),lj=n(fye,"A",{href:!0});var Vot=s(lj);wEo=r(Vot,"XLMWithLMHeadModel"),Vot.forEach(t),AEo=r(fye," (XLM model)"),fye.forEach(t),yEo=i(H),i0=n(H,"LI",{});var mye=s(i0);Xie=n(mye,"STRONG",{});var Xot=s(Xie);LEo=r(Xot,"xlm-prophetnet"),Xot.forEach(t),xEo=r(mye," \u2014 "),ij=n(mye,"A",{href:!0});var zot=s(ij);$Eo=r(zot,"XLMProphetNetForCausalLM"),zot.forEach(t),kEo=r(mye," (XLMProphetNet model)"),mye.forEach(t),SEo=i(H),d0=n(H,"LI",{});var gye=s(d0);zie=n(gye,"STRONG",{});var Qot=s(zie);REo=r(Qot,"xlm-roberta"),Qot.forEach(t),BEo=r(gye," \u2014 "),dj=n(gye,"A",{href:!0});var Wot=s(dj);PEo=r(Wot,"XLMRobertaForCausalLM"),Wot.forEach(t),IEo=r(gye," (XLM-RoBERTa model)"),gye.forEach(t),qEo=i(H),c0=n(H,"LI",{});var hye=s(c0);Qie=n(hye,"STRONG",{});var Hot=s(Qie);NEo=r(Hot,"xlm-roberta-xl"),Hot.forEach(t),jEo=r(hye," \u2014 "),cj=n(hye,"A",{href:!0});var Uot=s(cj);DEo=r(Uot,"XLMRobertaXLForCausalLM"),Uot.forEach(t),GEo=r(hye," (XLM-RoBERTa-XL model)"),hye.forEach(t),OEo=i(H),f0=n(H,"LI",{});var pye=s(f0);Wie=n(pye,"STRONG",{});var Jot=s(Wie);VEo=r(Jot,"xlnet"),Jot.forEach(t),XEo=r(pye," \u2014 "),fj=n(pye,"A",{href:!0});var Yot=s(fj);zEo=r(Yot,"XLNetLMHeadModel"),Yot.forEach(t),QEo=r(pye," (XLNet model)"),pye.forEach(t),H.forEach(t),WEo=i(oa),m0=n(oa,"P",{});var uye=s(m0);HEo=r(uye,"The model is set in evaluation mode by default using "),Hie=n(uye,"CODE",{});var Kot=s(Hie);UEo=r(Kot,"model.eval()"),Kot.forEach(t),JEo=r(uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uie=n(uye,"CODE",{});var Zot=s(Uie);YEo=r(Zot,"model.train()"),Zot.forEach(t),uye.forEach(t),KEo=i(oa),T(g0.$$.fragment,oa),oa.forEach(t),Os.forEach(t),wIe=i(f),ki=n(f,"H2",{class:!0});var xNe=s(ki);h0=n(xNe,"A",{id:!0,class:!0,href:!0});var ert=s(h0);Jie=n(ert,"SPAN",{});var ort=s(Jie);T(OA.$$.fragment,ort),ort.forEach(t),ert.forEach(t),ZEo=i(xNe),Yie=n(xNe,"SPAN",{});var rrt=s(Yie);e5o=r(rrt,"AutoModelForMaskedLM"),rrt.forEach(t),xNe.forEach(t),AIe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(VA.$$.fragment,Vs),o5o=i(Vs),Si=n(Vs,"P",{});var CK=s(Si);r5o=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mj=n(CK,"A",{href:!0});var trt=s(mj);t5o=r(trt,"from_pretrained()"),trt.forEach(t),a5o=r(CK," class method or the "),gj=n(CK,"A",{href:!0});var art=s(gj);n5o=r(art,"from_config()"),art.forEach(t),s5o=r(CK,` class
method.`),CK.forEach(t),l5o=i(Vs),XA=n(Vs,"P",{});var $Ne=s(XA);i5o=r($Ne,"This class cannot be instantiated directly using "),Kie=n($Ne,"CODE",{});var nrt=s(Kie);d5o=r(nrt,"__init__()"),nrt.forEach(t),c5o=r($Ne," (throws an error)."),$Ne.forEach(t),f5o=i(Vs),at=n(Vs,"DIV",{class:!0});var c3=s(at);T(zA.$$.fragment,c3),m5o=i(c3),Zie=n(c3,"P",{});var srt=s(Zie);g5o=r(srt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),srt.forEach(t),h5o=i(c3),Ri=n(c3,"P",{});var wK=s(Ri);p5o=r(wK,`Note:
Loading a model from its configuration file does `),ede=n(wK,"STRONG",{});var lrt=s(ede);u5o=r(lrt,"not"),lrt.forEach(t),_5o=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=n(wK,"A",{href:!0});var irt=s(hj);b5o=r(irt,"from_pretrained()"),irt.forEach(t),v5o=r(wK," to load the model weights."),wK.forEach(t),F5o=i(c3),T(p0.$$.fragment,c3),c3.forEach(t),T5o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(QA.$$.fragment,ra),M5o=i(ra),ode=n(ra,"P",{});var drt=s(ode);E5o=r(drt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),drt.forEach(t),C5o=i(ra),xa=n(ra,"P",{});var f3=s(xa);w5o=r(f3,"The model class to instantiate is selected based on the "),rde=n(f3,"CODE",{});var crt=s(rde);A5o=r(crt,"model_type"),crt.forEach(t),y5o=r(f3,` property of the config object (either
passed as an argument or loaded from `),tde=n(f3,"CODE",{});var frt=s(tde);L5o=r(frt,"pretrained_model_name_or_path"),frt.forEach(t),x5o=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(f3,"CODE",{});var mrt=s(ade);$5o=r(mrt,"pretrained_model_name_or_path"),mrt.forEach(t),k5o=r(f3,":"),f3.forEach(t),S5o=i(ra),Q=n(ra,"UL",{});var U=s(Q);u0=n(U,"LI",{});var _ye=s(u0);nde=n(_ye,"STRONG",{});var grt=s(nde);R5o=r(grt,"albert"),grt.forEach(t),B5o=r(_ye," \u2014 "),pj=n(_ye,"A",{href:!0});var hrt=s(pj);P5o=r(hrt,"AlbertForMaskedLM"),hrt.forEach(t),I5o=r(_ye," (ALBERT model)"),_ye.forEach(t),q5o=i(U),_0=n(U,"LI",{});var bye=s(_0);sde=n(bye,"STRONG",{});var prt=s(sde);N5o=r(prt,"bart"),prt.forEach(t),j5o=r(bye," \u2014 "),uj=n(bye,"A",{href:!0});var urt=s(uj);D5o=r(urt,"BartForConditionalGeneration"),urt.forEach(t),G5o=r(bye," (BART model)"),bye.forEach(t),O5o=i(U),b0=n(U,"LI",{});var vye=s(b0);lde=n(vye,"STRONG",{});var _rt=s(lde);V5o=r(_rt,"bert"),_rt.forEach(t),X5o=r(vye," \u2014 "),_j=n(vye,"A",{href:!0});var brt=s(_j);z5o=r(brt,"BertForMaskedLM"),brt.forEach(t),Q5o=r(vye," (BERT model)"),vye.forEach(t),W5o=i(U),v0=n(U,"LI",{});var Fye=s(v0);ide=n(Fye,"STRONG",{});var vrt=s(ide);H5o=r(vrt,"big_bird"),vrt.forEach(t),U5o=r(Fye," \u2014 "),bj=n(Fye,"A",{href:!0});var Frt=s(bj);J5o=r(Frt,"BigBirdForMaskedLM"),Frt.forEach(t),Y5o=r(Fye," (BigBird model)"),Fye.forEach(t),K5o=i(U),F0=n(U,"LI",{});var Tye=s(F0);dde=n(Tye,"STRONG",{});var Trt=s(dde);Z5o=r(Trt,"camembert"),Trt.forEach(t),eCo=r(Tye," \u2014 "),vj=n(Tye,"A",{href:!0});var Mrt=s(vj);oCo=r(Mrt,"CamembertForMaskedLM"),Mrt.forEach(t),rCo=r(Tye," (CamemBERT model)"),Tye.forEach(t),tCo=i(U),T0=n(U,"LI",{});var Mye=s(T0);cde=n(Mye,"STRONG",{});var Ert=s(cde);aCo=r(Ert,"convbert"),Ert.forEach(t),nCo=r(Mye," \u2014 "),Fj=n(Mye,"A",{href:!0});var Crt=s(Fj);sCo=r(Crt,"ConvBertForMaskedLM"),Crt.forEach(t),lCo=r(Mye," (ConvBERT model)"),Mye.forEach(t),iCo=i(U),M0=n(U,"LI",{});var Eye=s(M0);fde=n(Eye,"STRONG",{});var wrt=s(fde);dCo=r(wrt,"data2vec-text"),wrt.forEach(t),cCo=r(Eye," \u2014 "),Tj=n(Eye,"A",{href:!0});var Art=s(Tj);fCo=r(Art,"Data2VecTextForMaskedLM"),Art.forEach(t),mCo=r(Eye," (Data2VecText model)"),Eye.forEach(t),gCo=i(U),E0=n(U,"LI",{});var Cye=s(E0);mde=n(Cye,"STRONG",{});var yrt=s(mde);hCo=r(yrt,"deberta"),yrt.forEach(t),pCo=r(Cye," \u2014 "),Mj=n(Cye,"A",{href:!0});var Lrt=s(Mj);uCo=r(Lrt,"DebertaForMaskedLM"),Lrt.forEach(t),_Co=r(Cye," (DeBERTa model)"),Cye.forEach(t),bCo=i(U),C0=n(U,"LI",{});var wye=s(C0);gde=n(wye,"STRONG",{});var xrt=s(gde);vCo=r(xrt,"deberta-v2"),xrt.forEach(t),FCo=r(wye," \u2014 "),Ej=n(wye,"A",{href:!0});var $rt=s(Ej);TCo=r($rt,"DebertaV2ForMaskedLM"),$rt.forEach(t),MCo=r(wye," (DeBERTa-v2 model)"),wye.forEach(t),ECo=i(U),w0=n(U,"LI",{});var Aye=s(w0);hde=n(Aye,"STRONG",{});var krt=s(hde);CCo=r(krt,"distilbert"),krt.forEach(t),wCo=r(Aye," \u2014 "),Cj=n(Aye,"A",{href:!0});var Srt=s(Cj);ACo=r(Srt,"DistilBertForMaskedLM"),Srt.forEach(t),yCo=r(Aye," (DistilBERT model)"),Aye.forEach(t),LCo=i(U),A0=n(U,"LI",{});var yye=s(A0);pde=n(yye,"STRONG",{});var Rrt=s(pde);xCo=r(Rrt,"electra"),Rrt.forEach(t),$Co=r(yye," \u2014 "),wj=n(yye,"A",{href:!0});var Brt=s(wj);kCo=r(Brt,"ElectraForMaskedLM"),Brt.forEach(t),SCo=r(yye," (ELECTRA model)"),yye.forEach(t),RCo=i(U),y0=n(U,"LI",{});var Lye=s(y0);ude=n(Lye,"STRONG",{});var Prt=s(ude);BCo=r(Prt,"flaubert"),Prt.forEach(t),PCo=r(Lye," \u2014 "),Aj=n(Lye,"A",{href:!0});var Irt=s(Aj);ICo=r(Irt,"FlaubertWithLMHeadModel"),Irt.forEach(t),qCo=r(Lye," (FlauBERT model)"),Lye.forEach(t),NCo=i(U),L0=n(U,"LI",{});var xye=s(L0);_de=n(xye,"STRONG",{});var qrt=s(_de);jCo=r(qrt,"fnet"),qrt.forEach(t),DCo=r(xye," \u2014 "),yj=n(xye,"A",{href:!0});var Nrt=s(yj);GCo=r(Nrt,"FNetForMaskedLM"),Nrt.forEach(t),OCo=r(xye," (FNet model)"),xye.forEach(t),VCo=i(U),x0=n(U,"LI",{});var $ye=s(x0);bde=n($ye,"STRONG",{});var jrt=s(bde);XCo=r(jrt,"funnel"),jrt.forEach(t),zCo=r($ye," \u2014 "),Lj=n($ye,"A",{href:!0});var Drt=s(Lj);QCo=r(Drt,"FunnelForMaskedLM"),Drt.forEach(t),WCo=r($ye," (Funnel Transformer model)"),$ye.forEach(t),HCo=i(U),$0=n(U,"LI",{});var kye=s($0);vde=n(kye,"STRONG",{});var Grt=s(vde);UCo=r(Grt,"ibert"),Grt.forEach(t),JCo=r(kye," \u2014 "),xj=n(kye,"A",{href:!0});var Ort=s(xj);YCo=r(Ort,"IBertForMaskedLM"),Ort.forEach(t),KCo=r(kye," (I-BERT model)"),kye.forEach(t),ZCo=i(U),k0=n(U,"LI",{});var Sye=s(k0);Fde=n(Sye,"STRONG",{});var Vrt=s(Fde);e3o=r(Vrt,"layoutlm"),Vrt.forEach(t),o3o=r(Sye," \u2014 "),$j=n(Sye,"A",{href:!0});var Xrt=s($j);r3o=r(Xrt,"LayoutLMForMaskedLM"),Xrt.forEach(t),t3o=r(Sye," (LayoutLM model)"),Sye.forEach(t),a3o=i(U),S0=n(U,"LI",{});var Rye=s(S0);Tde=n(Rye,"STRONG",{});var zrt=s(Tde);n3o=r(zrt,"longformer"),zrt.forEach(t),s3o=r(Rye," \u2014 "),kj=n(Rye,"A",{href:!0});var Qrt=s(kj);l3o=r(Qrt,"LongformerForMaskedLM"),Qrt.forEach(t),i3o=r(Rye," (Longformer model)"),Rye.forEach(t),d3o=i(U),R0=n(U,"LI",{});var Bye=s(R0);Mde=n(Bye,"STRONG",{});var Wrt=s(Mde);c3o=r(Wrt,"mbart"),Wrt.forEach(t),f3o=r(Bye," \u2014 "),Sj=n(Bye,"A",{href:!0});var Hrt=s(Sj);m3o=r(Hrt,"MBartForConditionalGeneration"),Hrt.forEach(t),g3o=r(Bye," (mBART model)"),Bye.forEach(t),h3o=i(U),B0=n(U,"LI",{});var Pye=s(B0);Ede=n(Pye,"STRONG",{});var Urt=s(Ede);p3o=r(Urt,"megatron-bert"),Urt.forEach(t),u3o=r(Pye," \u2014 "),Rj=n(Pye,"A",{href:!0});var Jrt=s(Rj);_3o=r(Jrt,"MegatronBertForMaskedLM"),Jrt.forEach(t),b3o=r(Pye," (MegatronBert model)"),Pye.forEach(t),v3o=i(U),P0=n(U,"LI",{});var Iye=s(P0);Cde=n(Iye,"STRONG",{});var Yrt=s(Cde);F3o=r(Yrt,"mobilebert"),Yrt.forEach(t),T3o=r(Iye," \u2014 "),Bj=n(Iye,"A",{href:!0});var Krt=s(Bj);M3o=r(Krt,"MobileBertForMaskedLM"),Krt.forEach(t),E3o=r(Iye," (MobileBERT model)"),Iye.forEach(t),C3o=i(U),I0=n(U,"LI",{});var qye=s(I0);wde=n(qye,"STRONG",{});var Zrt=s(wde);w3o=r(Zrt,"mpnet"),Zrt.forEach(t),A3o=r(qye," \u2014 "),Pj=n(qye,"A",{href:!0});var ett=s(Pj);y3o=r(ett,"MPNetForMaskedLM"),ett.forEach(t),L3o=r(qye," (MPNet model)"),qye.forEach(t),x3o=i(U),q0=n(U,"LI",{});var Nye=s(q0);Ade=n(Nye,"STRONG",{});var ott=s(Ade);$3o=r(ott,"nystromformer"),ott.forEach(t),k3o=r(Nye," \u2014 "),Ij=n(Nye,"A",{href:!0});var rtt=s(Ij);S3o=r(rtt,"NystromformerForMaskedLM"),rtt.forEach(t),R3o=r(Nye," (Nystromformer model)"),Nye.forEach(t),B3o=i(U),N0=n(U,"LI",{});var jye=s(N0);yde=n(jye,"STRONG",{});var ttt=s(yde);P3o=r(ttt,"perceiver"),ttt.forEach(t),I3o=r(jye," \u2014 "),qj=n(jye,"A",{href:!0});var att=s(qj);q3o=r(att,"PerceiverForMaskedLM"),att.forEach(t),N3o=r(jye," (Perceiver model)"),jye.forEach(t),j3o=i(U),j0=n(U,"LI",{});var Dye=s(j0);Lde=n(Dye,"STRONG",{});var ntt=s(Lde);D3o=r(ntt,"qdqbert"),ntt.forEach(t),G3o=r(Dye," \u2014 "),Nj=n(Dye,"A",{href:!0});var stt=s(Nj);O3o=r(stt,"QDQBertForMaskedLM"),stt.forEach(t),V3o=r(Dye," (QDQBert model)"),Dye.forEach(t),X3o=i(U),D0=n(U,"LI",{});var Gye=s(D0);xde=n(Gye,"STRONG",{});var ltt=s(xde);z3o=r(ltt,"reformer"),ltt.forEach(t),Q3o=r(Gye," \u2014 "),jj=n(Gye,"A",{href:!0});var itt=s(jj);W3o=r(itt,"ReformerForMaskedLM"),itt.forEach(t),H3o=r(Gye," (Reformer model)"),Gye.forEach(t),U3o=i(U),G0=n(U,"LI",{});var Oye=s(G0);$de=n(Oye,"STRONG",{});var dtt=s($de);J3o=r(dtt,"rembert"),dtt.forEach(t),Y3o=r(Oye," \u2014 "),Dj=n(Oye,"A",{href:!0});var ctt=s(Dj);K3o=r(ctt,"RemBertForMaskedLM"),ctt.forEach(t),Z3o=r(Oye," (RemBERT model)"),Oye.forEach(t),ewo=i(U),O0=n(U,"LI",{});var Vye=s(O0);kde=n(Vye,"STRONG",{});var ftt=s(kde);owo=r(ftt,"roberta"),ftt.forEach(t),rwo=r(Vye," \u2014 "),Gj=n(Vye,"A",{href:!0});var mtt=s(Gj);two=r(mtt,"RobertaForMaskedLM"),mtt.forEach(t),awo=r(Vye," (RoBERTa model)"),Vye.forEach(t),nwo=i(U),V0=n(U,"LI",{});var Xye=s(V0);Sde=n(Xye,"STRONG",{});var gtt=s(Sde);swo=r(gtt,"roformer"),gtt.forEach(t),lwo=r(Xye," \u2014 "),Oj=n(Xye,"A",{href:!0});var htt=s(Oj);iwo=r(htt,"RoFormerForMaskedLM"),htt.forEach(t),dwo=r(Xye," (RoFormer model)"),Xye.forEach(t),cwo=i(U),X0=n(U,"LI",{});var zye=s(X0);Rde=n(zye,"STRONG",{});var ptt=s(Rde);fwo=r(ptt,"squeezebert"),ptt.forEach(t),mwo=r(zye," \u2014 "),Vj=n(zye,"A",{href:!0});var utt=s(Vj);gwo=r(utt,"SqueezeBertForMaskedLM"),utt.forEach(t),hwo=r(zye," (SqueezeBERT model)"),zye.forEach(t),pwo=i(U),z0=n(U,"LI",{});var Qye=s(z0);Bde=n(Qye,"STRONG",{});var _tt=s(Bde);uwo=r(_tt,"tapas"),_tt.forEach(t),_wo=r(Qye," \u2014 "),Xj=n(Qye,"A",{href:!0});var btt=s(Xj);bwo=r(btt,"TapasForMaskedLM"),btt.forEach(t),vwo=r(Qye," (TAPAS model)"),Qye.forEach(t),Fwo=i(U),Q0=n(U,"LI",{});var Wye=s(Q0);Pde=n(Wye,"STRONG",{});var vtt=s(Pde);Two=r(vtt,"wav2vec2"),vtt.forEach(t),Mwo=r(Wye," \u2014 "),Ide=n(Wye,"CODE",{});var Ftt=s(Ide);Ewo=r(Ftt,"Wav2Vec2ForMaskedLM"),Ftt.forEach(t),Cwo=r(Wye," (Wav2Vec2 model)"),Wye.forEach(t),wwo=i(U),W0=n(U,"LI",{});var Hye=s(W0);qde=n(Hye,"STRONG",{});var Ttt=s(qde);Awo=r(Ttt,"xlm"),Ttt.forEach(t),ywo=r(Hye," \u2014 "),zj=n(Hye,"A",{href:!0});var Mtt=s(zj);Lwo=r(Mtt,"XLMWithLMHeadModel"),Mtt.forEach(t),xwo=r(Hye," (XLM model)"),Hye.forEach(t),$wo=i(U),H0=n(U,"LI",{});var Uye=s(H0);Nde=n(Uye,"STRONG",{});var Ett=s(Nde);kwo=r(Ett,"xlm-roberta"),Ett.forEach(t),Swo=r(Uye," \u2014 "),Qj=n(Uye,"A",{href:!0});var Ctt=s(Qj);Rwo=r(Ctt,"XLMRobertaForMaskedLM"),Ctt.forEach(t),Bwo=r(Uye," (XLM-RoBERTa model)"),Uye.forEach(t),Pwo=i(U),U0=n(U,"LI",{});var Jye=s(U0);jde=n(Jye,"STRONG",{});var wtt=s(jde);Iwo=r(wtt,"xlm-roberta-xl"),wtt.forEach(t),qwo=r(Jye," \u2014 "),Wj=n(Jye,"A",{href:!0});var Att=s(Wj);Nwo=r(Att,"XLMRobertaXLForMaskedLM"),Att.forEach(t),jwo=r(Jye," (XLM-RoBERTa-XL model)"),Jye.forEach(t),Dwo=i(U),J0=n(U,"LI",{});var Yye=s(J0);Dde=n(Yye,"STRONG",{});var ytt=s(Dde);Gwo=r(ytt,"yoso"),ytt.forEach(t),Owo=r(Yye," \u2014 "),Hj=n(Yye,"A",{href:!0});var Ltt=s(Hj);Vwo=r(Ltt,"YosoForMaskedLM"),Ltt.forEach(t),Xwo=r(Yye," (YOSO model)"),Yye.forEach(t),U.forEach(t),zwo=i(ra),Y0=n(ra,"P",{});var Kye=s(Y0);Qwo=r(Kye,"The model is set in evaluation mode by default using "),Gde=n(Kye,"CODE",{});var xtt=s(Gde);Wwo=r(xtt,"model.eval()"),xtt.forEach(t),Hwo=r(Kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ode=n(Kye,"CODE",{});var $tt=s(Ode);Uwo=r($tt,"model.train()"),$tt.forEach(t),Kye.forEach(t),Jwo=i(ra),T(K0.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),yIe=i(f),Bi=n(f,"H2",{class:!0});var kNe=s(Bi);Z0=n(kNe,"A",{id:!0,class:!0,href:!0});var ktt=s(Z0);Vde=n(ktt,"SPAN",{});var Stt=s(Vde);T(WA.$$.fragment,Stt),Stt.forEach(t),ktt.forEach(t),Ywo=i(kNe),Xde=n(kNe,"SPAN",{});var Rtt=s(Xde);Kwo=r(Rtt,"AutoModelForSeq2SeqLM"),Rtt.forEach(t),kNe.forEach(t),LIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(HA.$$.fragment,Xs),Zwo=i(Xs),Pi=n(Xs,"P",{});var AK=s(Pi);eAo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Uj=n(AK,"A",{href:!0});var Btt=s(Uj);oAo=r(Btt,"from_pretrained()"),Btt.forEach(t),rAo=r(AK," class method or the "),Jj=n(AK,"A",{href:!0});var Ptt=s(Jj);tAo=r(Ptt,"from_config()"),Ptt.forEach(t),aAo=r(AK,` class
method.`),AK.forEach(t),nAo=i(Xs),UA=n(Xs,"P",{});var SNe=s(UA);sAo=r(SNe,"This class cannot be instantiated directly using "),zde=n(SNe,"CODE",{});var Itt=s(zde);lAo=r(Itt,"__init__()"),Itt.forEach(t),iAo=r(SNe," (throws an error)."),SNe.forEach(t),dAo=i(Xs),nt=n(Xs,"DIV",{class:!0});var m3=s(nt);T(JA.$$.fragment,m3),cAo=i(m3),Qde=n(m3,"P",{});var qtt=s(Qde);fAo=r(qtt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qtt.forEach(t),mAo=i(m3),Ii=n(m3,"P",{});var yK=s(Ii);gAo=r(yK,`Note:
Loading a model from its configuration file does `),Wde=n(yK,"STRONG",{});var Ntt=s(Wde);hAo=r(Ntt,"not"),Ntt.forEach(t),pAo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yj=n(yK,"A",{href:!0});var jtt=s(Yj);uAo=r(jtt,"from_pretrained()"),jtt.forEach(t),_Ao=r(yK," to load the model weights."),yK.forEach(t),bAo=i(m3),T(e1.$$.fragment,m3),m3.forEach(t),vAo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(YA.$$.fragment,ta),FAo=i(ta),Hde=n(ta,"P",{});var Dtt=s(Hde);TAo=r(Dtt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Dtt.forEach(t),MAo=i(ta),$a=n(ta,"P",{});var g3=s($a);EAo=r(g3,"The model class to instantiate is selected based on the "),Ude=n(g3,"CODE",{});var Gtt=s(Ude);CAo=r(Gtt,"model_type"),Gtt.forEach(t),wAo=r(g3,` property of the config object (either
passed as an argument or loaded from `),Jde=n(g3,"CODE",{});var Ott=s(Jde);AAo=r(Ott,"pretrained_model_name_or_path"),Ott.forEach(t),yAo=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yde=n(g3,"CODE",{});var Vtt=s(Yde);LAo=r(Vtt,"pretrained_model_name_or_path"),Vtt.forEach(t),xAo=r(g3,":"),g3.forEach(t),$Ao=i(ta),he=n(ta,"UL",{});var _e=s(he);o1=n(_e,"LI",{});var Zye=s(o1);Kde=n(Zye,"STRONG",{});var Xtt=s(Kde);kAo=r(Xtt,"bart"),Xtt.forEach(t),SAo=r(Zye," \u2014 "),Kj=n(Zye,"A",{href:!0});var ztt=s(Kj);RAo=r(ztt,"BartForConditionalGeneration"),ztt.forEach(t),BAo=r(Zye," (BART model)"),Zye.forEach(t),PAo=i(_e),r1=n(_e,"LI",{});var eLe=s(r1);Zde=n(eLe,"STRONG",{});var Qtt=s(Zde);IAo=r(Qtt,"bigbird_pegasus"),Qtt.forEach(t),qAo=r(eLe," \u2014 "),Zj=n(eLe,"A",{href:!0});var Wtt=s(Zj);NAo=r(Wtt,"BigBirdPegasusForConditionalGeneration"),Wtt.forEach(t),jAo=r(eLe," (BigBirdPegasus model)"),eLe.forEach(t),DAo=i(_e),t1=n(_e,"LI",{});var oLe=s(t1);ece=n(oLe,"STRONG",{});var Htt=s(ece);GAo=r(Htt,"blenderbot"),Htt.forEach(t),OAo=r(oLe," \u2014 "),eD=n(oLe,"A",{href:!0});var Utt=s(eD);VAo=r(Utt,"BlenderbotForConditionalGeneration"),Utt.forEach(t),XAo=r(oLe," (Blenderbot model)"),oLe.forEach(t),zAo=i(_e),a1=n(_e,"LI",{});var rLe=s(a1);oce=n(rLe,"STRONG",{});var Jtt=s(oce);QAo=r(Jtt,"blenderbot-small"),Jtt.forEach(t),WAo=r(rLe," \u2014 "),oD=n(rLe,"A",{href:!0});var Ytt=s(oD);HAo=r(Ytt,"BlenderbotSmallForConditionalGeneration"),Ytt.forEach(t),UAo=r(rLe," (BlenderbotSmall model)"),rLe.forEach(t),JAo=i(_e),n1=n(_e,"LI",{});var tLe=s(n1);rce=n(tLe,"STRONG",{});var Ktt=s(rce);YAo=r(Ktt,"encoder-decoder"),Ktt.forEach(t),KAo=r(tLe," \u2014 "),rD=n(tLe,"A",{href:!0});var Ztt=s(rD);ZAo=r(Ztt,"EncoderDecoderModel"),Ztt.forEach(t),eyo=r(tLe," (Encoder decoder model)"),tLe.forEach(t),oyo=i(_e),s1=n(_e,"LI",{});var aLe=s(s1);tce=n(aLe,"STRONG",{});var eat=s(tce);ryo=r(eat,"fsmt"),eat.forEach(t),tyo=r(aLe," \u2014 "),tD=n(aLe,"A",{href:!0});var oat=s(tD);ayo=r(oat,"FSMTForConditionalGeneration"),oat.forEach(t),nyo=r(aLe," (FairSeq Machine-Translation model)"),aLe.forEach(t),syo=i(_e),l1=n(_e,"LI",{});var nLe=s(l1);ace=n(nLe,"STRONG",{});var rat=s(ace);lyo=r(rat,"led"),rat.forEach(t),iyo=r(nLe," \u2014 "),aD=n(nLe,"A",{href:!0});var tat=s(aD);dyo=r(tat,"LEDForConditionalGeneration"),tat.forEach(t),cyo=r(nLe," (LED model)"),nLe.forEach(t),fyo=i(_e),i1=n(_e,"LI",{});var sLe=s(i1);nce=n(sLe,"STRONG",{});var aat=s(nce);myo=r(aat,"m2m_100"),aat.forEach(t),gyo=r(sLe," \u2014 "),nD=n(sLe,"A",{href:!0});var nat=s(nD);hyo=r(nat,"M2M100ForConditionalGeneration"),nat.forEach(t),pyo=r(sLe," (M2M100 model)"),sLe.forEach(t),uyo=i(_e),d1=n(_e,"LI",{});var lLe=s(d1);sce=n(lLe,"STRONG",{});var sat=s(sce);_yo=r(sat,"marian"),sat.forEach(t),byo=r(lLe," \u2014 "),sD=n(lLe,"A",{href:!0});var lat=s(sD);vyo=r(lat,"MarianMTModel"),lat.forEach(t),Fyo=r(lLe," (Marian model)"),lLe.forEach(t),Tyo=i(_e),c1=n(_e,"LI",{});var iLe=s(c1);lce=n(iLe,"STRONG",{});var iat=s(lce);Myo=r(iat,"mbart"),iat.forEach(t),Eyo=r(iLe," \u2014 "),lD=n(iLe,"A",{href:!0});var dat=s(lD);Cyo=r(dat,"MBartForConditionalGeneration"),dat.forEach(t),wyo=r(iLe," (mBART model)"),iLe.forEach(t),Ayo=i(_e),f1=n(_e,"LI",{});var dLe=s(f1);ice=n(dLe,"STRONG",{});var cat=s(ice);yyo=r(cat,"mt5"),cat.forEach(t),Lyo=r(dLe," \u2014 "),iD=n(dLe,"A",{href:!0});var fat=s(iD);xyo=r(fat,"MT5ForConditionalGeneration"),fat.forEach(t),$yo=r(dLe," (mT5 model)"),dLe.forEach(t),kyo=i(_e),m1=n(_e,"LI",{});var cLe=s(m1);dce=n(cLe,"STRONG",{});var mat=s(dce);Syo=r(mat,"pegasus"),mat.forEach(t),Ryo=r(cLe," \u2014 "),dD=n(cLe,"A",{href:!0});var gat=s(dD);Byo=r(gat,"PegasusForConditionalGeneration"),gat.forEach(t),Pyo=r(cLe," (Pegasus model)"),cLe.forEach(t),Iyo=i(_e),g1=n(_e,"LI",{});var fLe=s(g1);cce=n(fLe,"STRONG",{});var hat=s(cce);qyo=r(hat,"plbart"),hat.forEach(t),Nyo=r(fLe," \u2014 "),cD=n(fLe,"A",{href:!0});var pat=s(cD);jyo=r(pat,"PLBartForConditionalGeneration"),pat.forEach(t),Dyo=r(fLe," (PLBart model)"),fLe.forEach(t),Gyo=i(_e),h1=n(_e,"LI",{});var mLe=s(h1);fce=n(mLe,"STRONG",{});var uat=s(fce);Oyo=r(uat,"prophetnet"),uat.forEach(t),Vyo=r(mLe," \u2014 "),fD=n(mLe,"A",{href:!0});var _at=s(fD);Xyo=r(_at,"ProphetNetForConditionalGeneration"),_at.forEach(t),zyo=r(mLe," (ProphetNet model)"),mLe.forEach(t),Qyo=i(_e),p1=n(_e,"LI",{});var gLe=s(p1);mce=n(gLe,"STRONG",{});var bat=s(mce);Wyo=r(bat,"t5"),bat.forEach(t),Hyo=r(gLe," \u2014 "),mD=n(gLe,"A",{href:!0});var vat=s(mD);Uyo=r(vat,"T5ForConditionalGeneration"),vat.forEach(t),Jyo=r(gLe," (T5 model)"),gLe.forEach(t),Yyo=i(_e),u1=n(_e,"LI",{});var hLe=s(u1);gce=n(hLe,"STRONG",{});var Fat=s(gce);Kyo=r(Fat,"tapex"),Fat.forEach(t),Zyo=r(hLe," \u2014 "),gD=n(hLe,"A",{href:!0});var Tat=s(gD);eLo=r(Tat,"BartForConditionalGeneration"),Tat.forEach(t),oLo=r(hLe," (TAPEX model)"),hLe.forEach(t),rLo=i(_e),_1=n(_e,"LI",{});var pLe=s(_1);hce=n(pLe,"STRONG",{});var Mat=s(hce);tLo=r(Mat,"xlm-prophetnet"),Mat.forEach(t),aLo=r(pLe," \u2014 "),hD=n(pLe,"A",{href:!0});var Eat=s(hD);nLo=r(Eat,"XLMProphetNetForConditionalGeneration"),Eat.forEach(t),sLo=r(pLe," (XLMProphetNet model)"),pLe.forEach(t),_e.forEach(t),lLo=i(ta),b1=n(ta,"P",{});var uLe=s(b1);iLo=r(uLe,"The model is set in evaluation mode by default using "),pce=n(uLe,"CODE",{});var Cat=s(pce);dLo=r(Cat,"model.eval()"),Cat.forEach(t),cLo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=n(uLe,"CODE",{});var wat=s(uce);fLo=r(wat,"model.train()"),wat.forEach(t),uLe.forEach(t),mLo=i(ta),T(v1.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),xIe=i(f),qi=n(f,"H2",{class:!0});var RNe=s(qi);F1=n(RNe,"A",{id:!0,class:!0,href:!0});var Aat=s(F1);_ce=n(Aat,"SPAN",{});var yat=s(_ce);T(KA.$$.fragment,yat),yat.forEach(t),Aat.forEach(t),gLo=i(RNe),bce=n(RNe,"SPAN",{});var Lat=s(bce);hLo=r(Lat,"AutoModelForSequenceClassification"),Lat.forEach(t),RNe.forEach(t),$Ie=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(ZA.$$.fragment,zs),pLo=i(zs),Ni=n(zs,"P",{});var LK=s(Ni);uLo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pD=n(LK,"A",{href:!0});var xat=s(pD);_Lo=r(xat,"from_pretrained()"),xat.forEach(t),bLo=r(LK," class method or the "),uD=n(LK,"A",{href:!0});var $at=s(uD);vLo=r($at,"from_config()"),$at.forEach(t),FLo=r(LK,` class
method.`),LK.forEach(t),TLo=i(zs),ey=n(zs,"P",{});var BNe=s(ey);MLo=r(BNe,"This class cannot be instantiated directly using "),vce=n(BNe,"CODE",{});var kat=s(vce);ELo=r(kat,"__init__()"),kat.forEach(t),CLo=r(BNe," (throws an error)."),BNe.forEach(t),wLo=i(zs),st=n(zs,"DIV",{class:!0});var h3=s(st);T(oy.$$.fragment,h3),ALo=i(h3),Fce=n(h3,"P",{});var Sat=s(Fce);yLo=r(Sat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sat.forEach(t),LLo=i(h3),ji=n(h3,"P",{});var xK=s(ji);xLo=r(xK,`Note:
Loading a model from its configuration file does `),Tce=n(xK,"STRONG",{});var Rat=s(Tce);$Lo=r(Rat,"not"),Rat.forEach(t),kLo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=n(xK,"A",{href:!0});var Bat=s(_D);SLo=r(Bat,"from_pretrained()"),Bat.forEach(t),RLo=r(xK," to load the model weights."),xK.forEach(t),BLo=i(h3),T(T1.$$.fragment,h3),h3.forEach(t),PLo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(ry.$$.fragment,aa),ILo=i(aa),Mce=n(aa,"P",{});var Pat=s(Mce);qLo=r(Pat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Pat.forEach(t),NLo=i(aa),ka=n(aa,"P",{});var p3=s(ka);jLo=r(p3,"The model class to instantiate is selected based on the "),Ece=n(p3,"CODE",{});var Iat=s(Ece);DLo=r(Iat,"model_type"),Iat.forEach(t),GLo=r(p3,` property of the config object (either
passed as an argument or loaded from `),Cce=n(p3,"CODE",{});var qat=s(Cce);OLo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),VLo=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=n(p3,"CODE",{});var Nat=s(wce);XLo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),zLo=r(p3,":"),p3.forEach(t),QLo=i(aa),q=n(aa,"UL",{});var N=s(q);M1=n(N,"LI",{});var _Le=s(M1);Ace=n(_Le,"STRONG",{});var jat=s(Ace);WLo=r(jat,"albert"),jat.forEach(t),HLo=r(_Le," \u2014 "),bD=n(_Le,"A",{href:!0});var Dat=s(bD);ULo=r(Dat,"AlbertForSequenceClassification"),Dat.forEach(t),JLo=r(_Le," (ALBERT model)"),_Le.forEach(t),YLo=i(N),E1=n(N,"LI",{});var bLe=s(E1);yce=n(bLe,"STRONG",{});var Gat=s(yce);KLo=r(Gat,"bart"),Gat.forEach(t),ZLo=r(bLe," \u2014 "),vD=n(bLe,"A",{href:!0});var Oat=s(vD);e8o=r(Oat,"BartForSequenceClassification"),Oat.forEach(t),o8o=r(bLe," (BART model)"),bLe.forEach(t),r8o=i(N),C1=n(N,"LI",{});var vLe=s(C1);Lce=n(vLe,"STRONG",{});var Vat=s(Lce);t8o=r(Vat,"bert"),Vat.forEach(t),a8o=r(vLe," \u2014 "),FD=n(vLe,"A",{href:!0});var Xat=s(FD);n8o=r(Xat,"BertForSequenceClassification"),Xat.forEach(t),s8o=r(vLe," (BERT model)"),vLe.forEach(t),l8o=i(N),w1=n(N,"LI",{});var FLe=s(w1);xce=n(FLe,"STRONG",{});var zat=s(xce);i8o=r(zat,"big_bird"),zat.forEach(t),d8o=r(FLe," \u2014 "),TD=n(FLe,"A",{href:!0});var Qat=s(TD);c8o=r(Qat,"BigBirdForSequenceClassification"),Qat.forEach(t),f8o=r(FLe," (BigBird model)"),FLe.forEach(t),m8o=i(N),A1=n(N,"LI",{});var TLe=s(A1);$ce=n(TLe,"STRONG",{});var Wat=s($ce);g8o=r(Wat,"bigbird_pegasus"),Wat.forEach(t),h8o=r(TLe," \u2014 "),MD=n(TLe,"A",{href:!0});var Hat=s(MD);p8o=r(Hat,"BigBirdPegasusForSequenceClassification"),Hat.forEach(t),u8o=r(TLe," (BigBirdPegasus model)"),TLe.forEach(t),_8o=i(N),y1=n(N,"LI",{});var MLe=s(y1);kce=n(MLe,"STRONG",{});var Uat=s(kce);b8o=r(Uat,"camembert"),Uat.forEach(t),v8o=r(MLe," \u2014 "),ED=n(MLe,"A",{href:!0});var Jat=s(ED);F8o=r(Jat,"CamembertForSequenceClassification"),Jat.forEach(t),T8o=r(MLe," (CamemBERT model)"),MLe.forEach(t),M8o=i(N),L1=n(N,"LI",{});var ELe=s(L1);Sce=n(ELe,"STRONG",{});var Yat=s(Sce);E8o=r(Yat,"canine"),Yat.forEach(t),C8o=r(ELe," \u2014 "),CD=n(ELe,"A",{href:!0});var Kat=s(CD);w8o=r(Kat,"CanineForSequenceClassification"),Kat.forEach(t),A8o=r(ELe," (Canine model)"),ELe.forEach(t),y8o=i(N),x1=n(N,"LI",{});var CLe=s(x1);Rce=n(CLe,"STRONG",{});var Zat=s(Rce);L8o=r(Zat,"convbert"),Zat.forEach(t),x8o=r(CLe," \u2014 "),wD=n(CLe,"A",{href:!0});var ent=s(wD);$8o=r(ent,"ConvBertForSequenceClassification"),ent.forEach(t),k8o=r(CLe," (ConvBERT model)"),CLe.forEach(t),S8o=i(N),$1=n(N,"LI",{});var wLe=s($1);Bce=n(wLe,"STRONG",{});var ont=s(Bce);R8o=r(ont,"ctrl"),ont.forEach(t),B8o=r(wLe," \u2014 "),AD=n(wLe,"A",{href:!0});var rnt=s(AD);P8o=r(rnt,"CTRLForSequenceClassification"),rnt.forEach(t),I8o=r(wLe," (CTRL model)"),wLe.forEach(t),q8o=i(N),k1=n(N,"LI",{});var ALe=s(k1);Pce=n(ALe,"STRONG",{});var tnt=s(Pce);N8o=r(tnt,"data2vec-text"),tnt.forEach(t),j8o=r(ALe," \u2014 "),yD=n(ALe,"A",{href:!0});var ant=s(yD);D8o=r(ant,"Data2VecTextForSequenceClassification"),ant.forEach(t),G8o=r(ALe," (Data2VecText model)"),ALe.forEach(t),O8o=i(N),S1=n(N,"LI",{});var yLe=s(S1);Ice=n(yLe,"STRONG",{});var nnt=s(Ice);V8o=r(nnt,"deberta"),nnt.forEach(t),X8o=r(yLe," \u2014 "),LD=n(yLe,"A",{href:!0});var snt=s(LD);z8o=r(snt,"DebertaForSequenceClassification"),snt.forEach(t),Q8o=r(yLe," (DeBERTa model)"),yLe.forEach(t),W8o=i(N),R1=n(N,"LI",{});var LLe=s(R1);qce=n(LLe,"STRONG",{});var lnt=s(qce);H8o=r(lnt,"deberta-v2"),lnt.forEach(t),U8o=r(LLe," \u2014 "),xD=n(LLe,"A",{href:!0});var int=s(xD);J8o=r(int,"DebertaV2ForSequenceClassification"),int.forEach(t),Y8o=r(LLe," (DeBERTa-v2 model)"),LLe.forEach(t),K8o=i(N),B1=n(N,"LI",{});var xLe=s(B1);Nce=n(xLe,"STRONG",{});var dnt=s(Nce);Z8o=r(dnt,"distilbert"),dnt.forEach(t),exo=r(xLe," \u2014 "),$D=n(xLe,"A",{href:!0});var cnt=s($D);oxo=r(cnt,"DistilBertForSequenceClassification"),cnt.forEach(t),rxo=r(xLe," (DistilBERT model)"),xLe.forEach(t),txo=i(N),P1=n(N,"LI",{});var $Le=s(P1);jce=n($Le,"STRONG",{});var fnt=s(jce);axo=r(fnt,"electra"),fnt.forEach(t),nxo=r($Le," \u2014 "),kD=n($Le,"A",{href:!0});var mnt=s(kD);sxo=r(mnt,"ElectraForSequenceClassification"),mnt.forEach(t),lxo=r($Le," (ELECTRA model)"),$Le.forEach(t),ixo=i(N),I1=n(N,"LI",{});var kLe=s(I1);Dce=n(kLe,"STRONG",{});var gnt=s(Dce);dxo=r(gnt,"flaubert"),gnt.forEach(t),cxo=r(kLe," \u2014 "),SD=n(kLe,"A",{href:!0});var hnt=s(SD);fxo=r(hnt,"FlaubertForSequenceClassification"),hnt.forEach(t),mxo=r(kLe," (FlauBERT model)"),kLe.forEach(t),gxo=i(N),q1=n(N,"LI",{});var SLe=s(q1);Gce=n(SLe,"STRONG",{});var pnt=s(Gce);hxo=r(pnt,"fnet"),pnt.forEach(t),pxo=r(SLe," \u2014 "),RD=n(SLe,"A",{href:!0});var unt=s(RD);uxo=r(unt,"FNetForSequenceClassification"),unt.forEach(t),_xo=r(SLe," (FNet model)"),SLe.forEach(t),bxo=i(N),N1=n(N,"LI",{});var RLe=s(N1);Oce=n(RLe,"STRONG",{});var _nt=s(Oce);vxo=r(_nt,"funnel"),_nt.forEach(t),Fxo=r(RLe," \u2014 "),BD=n(RLe,"A",{href:!0});var bnt=s(BD);Txo=r(bnt,"FunnelForSequenceClassification"),bnt.forEach(t),Mxo=r(RLe," (Funnel Transformer model)"),RLe.forEach(t),Exo=i(N),j1=n(N,"LI",{});var BLe=s(j1);Vce=n(BLe,"STRONG",{});var vnt=s(Vce);Cxo=r(vnt,"gpt2"),vnt.forEach(t),wxo=r(BLe," \u2014 "),PD=n(BLe,"A",{href:!0});var Fnt=s(PD);Axo=r(Fnt,"GPT2ForSequenceClassification"),Fnt.forEach(t),yxo=r(BLe," (OpenAI GPT-2 model)"),BLe.forEach(t),Lxo=i(N),D1=n(N,"LI",{});var PLe=s(D1);Xce=n(PLe,"STRONG",{});var Tnt=s(Xce);xxo=r(Tnt,"gpt_neo"),Tnt.forEach(t),$xo=r(PLe," \u2014 "),ID=n(PLe,"A",{href:!0});var Mnt=s(ID);kxo=r(Mnt,"GPTNeoForSequenceClassification"),Mnt.forEach(t),Sxo=r(PLe," (GPT Neo model)"),PLe.forEach(t),Rxo=i(N),G1=n(N,"LI",{});var ILe=s(G1);zce=n(ILe,"STRONG",{});var Ent=s(zce);Bxo=r(Ent,"gptj"),Ent.forEach(t),Pxo=r(ILe," \u2014 "),qD=n(ILe,"A",{href:!0});var Cnt=s(qD);Ixo=r(Cnt,"GPTJForSequenceClassification"),Cnt.forEach(t),qxo=r(ILe," (GPT-J model)"),ILe.forEach(t),Nxo=i(N),O1=n(N,"LI",{});var qLe=s(O1);Qce=n(qLe,"STRONG",{});var wnt=s(Qce);jxo=r(wnt,"ibert"),wnt.forEach(t),Dxo=r(qLe," \u2014 "),ND=n(qLe,"A",{href:!0});var Ant=s(ND);Gxo=r(Ant,"IBertForSequenceClassification"),Ant.forEach(t),Oxo=r(qLe," (I-BERT model)"),qLe.forEach(t),Vxo=i(N),V1=n(N,"LI",{});var NLe=s(V1);Wce=n(NLe,"STRONG",{});var ynt=s(Wce);Xxo=r(ynt,"layoutlm"),ynt.forEach(t),zxo=r(NLe," \u2014 "),jD=n(NLe,"A",{href:!0});var Lnt=s(jD);Qxo=r(Lnt,"LayoutLMForSequenceClassification"),Lnt.forEach(t),Wxo=r(NLe," (LayoutLM model)"),NLe.forEach(t),Hxo=i(N),X1=n(N,"LI",{});var jLe=s(X1);Hce=n(jLe,"STRONG",{});var xnt=s(Hce);Uxo=r(xnt,"layoutlmv2"),xnt.forEach(t),Jxo=r(jLe," \u2014 "),DD=n(jLe,"A",{href:!0});var $nt=s(DD);Yxo=r($nt,"LayoutLMv2ForSequenceClassification"),$nt.forEach(t),Kxo=r(jLe," (LayoutLMv2 model)"),jLe.forEach(t),Zxo=i(N),z1=n(N,"LI",{});var DLe=s(z1);Uce=n(DLe,"STRONG",{});var knt=s(Uce);e9o=r(knt,"layoutlmv3"),knt.forEach(t),o9o=r(DLe," \u2014 "),GD=n(DLe,"A",{href:!0});var Snt=s(GD);r9o=r(Snt,"LayoutLMv3ForSequenceClassification"),Snt.forEach(t),t9o=r(DLe," (LayoutLMv3 model)"),DLe.forEach(t),a9o=i(N),Q1=n(N,"LI",{});var GLe=s(Q1);Jce=n(GLe,"STRONG",{});var Rnt=s(Jce);n9o=r(Rnt,"led"),Rnt.forEach(t),s9o=r(GLe," \u2014 "),OD=n(GLe,"A",{href:!0});var Bnt=s(OD);l9o=r(Bnt,"LEDForSequenceClassification"),Bnt.forEach(t),i9o=r(GLe," (LED model)"),GLe.forEach(t),d9o=i(N),W1=n(N,"LI",{});var OLe=s(W1);Yce=n(OLe,"STRONG",{});var Pnt=s(Yce);c9o=r(Pnt,"longformer"),Pnt.forEach(t),f9o=r(OLe," \u2014 "),VD=n(OLe,"A",{href:!0});var Int=s(VD);m9o=r(Int,"LongformerForSequenceClassification"),Int.forEach(t),g9o=r(OLe," (Longformer model)"),OLe.forEach(t),h9o=i(N),H1=n(N,"LI",{});var VLe=s(H1);Kce=n(VLe,"STRONG",{});var qnt=s(Kce);p9o=r(qnt,"mbart"),qnt.forEach(t),u9o=r(VLe," \u2014 "),XD=n(VLe,"A",{href:!0});var Nnt=s(XD);_9o=r(Nnt,"MBartForSequenceClassification"),Nnt.forEach(t),b9o=r(VLe," (mBART model)"),VLe.forEach(t),v9o=i(N),U1=n(N,"LI",{});var XLe=s(U1);Zce=n(XLe,"STRONG",{});var jnt=s(Zce);F9o=r(jnt,"megatron-bert"),jnt.forEach(t),T9o=r(XLe," \u2014 "),zD=n(XLe,"A",{href:!0});var Dnt=s(zD);M9o=r(Dnt,"MegatronBertForSequenceClassification"),Dnt.forEach(t),E9o=r(XLe," (MegatronBert model)"),XLe.forEach(t),C9o=i(N),J1=n(N,"LI",{});var zLe=s(J1);efe=n(zLe,"STRONG",{});var Gnt=s(efe);w9o=r(Gnt,"mobilebert"),Gnt.forEach(t),A9o=r(zLe," \u2014 "),QD=n(zLe,"A",{href:!0});var Ont=s(QD);y9o=r(Ont,"MobileBertForSequenceClassification"),Ont.forEach(t),L9o=r(zLe," (MobileBERT model)"),zLe.forEach(t),x9o=i(N),Y1=n(N,"LI",{});var QLe=s(Y1);ofe=n(QLe,"STRONG",{});var Vnt=s(ofe);$9o=r(Vnt,"mpnet"),Vnt.forEach(t),k9o=r(QLe," \u2014 "),WD=n(QLe,"A",{href:!0});var Xnt=s(WD);S9o=r(Xnt,"MPNetForSequenceClassification"),Xnt.forEach(t),R9o=r(QLe," (MPNet model)"),QLe.forEach(t),B9o=i(N),K1=n(N,"LI",{});var WLe=s(K1);rfe=n(WLe,"STRONG",{});var znt=s(rfe);P9o=r(znt,"nystromformer"),znt.forEach(t),I9o=r(WLe," \u2014 "),HD=n(WLe,"A",{href:!0});var Qnt=s(HD);q9o=r(Qnt,"NystromformerForSequenceClassification"),Qnt.forEach(t),N9o=r(WLe," (Nystromformer model)"),WLe.forEach(t),j9o=i(N),Z1=n(N,"LI",{});var HLe=s(Z1);tfe=n(HLe,"STRONG",{});var Wnt=s(tfe);D9o=r(Wnt,"openai-gpt"),Wnt.forEach(t),G9o=r(HLe," \u2014 "),UD=n(HLe,"A",{href:!0});var Hnt=s(UD);O9o=r(Hnt,"OpenAIGPTForSequenceClassification"),Hnt.forEach(t),V9o=r(HLe," (OpenAI GPT model)"),HLe.forEach(t),X9o=i(N),eb=n(N,"LI",{});var ULe=s(eb);afe=n(ULe,"STRONG",{});var Unt=s(afe);z9o=r(Unt,"perceiver"),Unt.forEach(t),Q9o=r(ULe," \u2014 "),JD=n(ULe,"A",{href:!0});var Jnt=s(JD);W9o=r(Jnt,"PerceiverForSequenceClassification"),Jnt.forEach(t),H9o=r(ULe," (Perceiver model)"),ULe.forEach(t),U9o=i(N),ob=n(N,"LI",{});var JLe=s(ob);nfe=n(JLe,"STRONG",{});var Ynt=s(nfe);J9o=r(Ynt,"plbart"),Ynt.forEach(t),Y9o=r(JLe," \u2014 "),YD=n(JLe,"A",{href:!0});var Knt=s(YD);K9o=r(Knt,"PLBartForSequenceClassification"),Knt.forEach(t),Z9o=r(JLe," (PLBart model)"),JLe.forEach(t),e$o=i(N),rb=n(N,"LI",{});var YLe=s(rb);sfe=n(YLe,"STRONG",{});var Znt=s(sfe);o$o=r(Znt,"qdqbert"),Znt.forEach(t),r$o=r(YLe," \u2014 "),KD=n(YLe,"A",{href:!0});var est=s(KD);t$o=r(est,"QDQBertForSequenceClassification"),est.forEach(t),a$o=r(YLe," (QDQBert model)"),YLe.forEach(t),n$o=i(N),tb=n(N,"LI",{});var KLe=s(tb);lfe=n(KLe,"STRONG",{});var ost=s(lfe);s$o=r(ost,"reformer"),ost.forEach(t),l$o=r(KLe," \u2014 "),ZD=n(KLe,"A",{href:!0});var rst=s(ZD);i$o=r(rst,"ReformerForSequenceClassification"),rst.forEach(t),d$o=r(KLe," (Reformer model)"),KLe.forEach(t),c$o=i(N),ab=n(N,"LI",{});var ZLe=s(ab);ife=n(ZLe,"STRONG",{});var tst=s(ife);f$o=r(tst,"rembert"),tst.forEach(t),m$o=r(ZLe," \u2014 "),eG=n(ZLe,"A",{href:!0});var ast=s(eG);g$o=r(ast,"RemBertForSequenceClassification"),ast.forEach(t),h$o=r(ZLe," (RemBERT model)"),ZLe.forEach(t),p$o=i(N),nb=n(N,"LI",{});var e8e=s(nb);dfe=n(e8e,"STRONG",{});var nst=s(dfe);u$o=r(nst,"roberta"),nst.forEach(t),_$o=r(e8e," \u2014 "),oG=n(e8e,"A",{href:!0});var sst=s(oG);b$o=r(sst,"RobertaForSequenceClassification"),sst.forEach(t),v$o=r(e8e," (RoBERTa model)"),e8e.forEach(t),F$o=i(N),sb=n(N,"LI",{});var o8e=s(sb);cfe=n(o8e,"STRONG",{});var lst=s(cfe);T$o=r(lst,"roformer"),lst.forEach(t),M$o=r(o8e," \u2014 "),rG=n(o8e,"A",{href:!0});var ist=s(rG);E$o=r(ist,"RoFormerForSequenceClassification"),ist.forEach(t),C$o=r(o8e," (RoFormer model)"),o8e.forEach(t),w$o=i(N),lb=n(N,"LI",{});var r8e=s(lb);ffe=n(r8e,"STRONG",{});var dst=s(ffe);A$o=r(dst,"squeezebert"),dst.forEach(t),y$o=r(r8e," \u2014 "),tG=n(r8e,"A",{href:!0});var cst=s(tG);L$o=r(cst,"SqueezeBertForSequenceClassification"),cst.forEach(t),x$o=r(r8e," (SqueezeBERT model)"),r8e.forEach(t),$$o=i(N),ib=n(N,"LI",{});var t8e=s(ib);mfe=n(t8e,"STRONG",{});var fst=s(mfe);k$o=r(fst,"tapas"),fst.forEach(t),S$o=r(t8e," \u2014 "),aG=n(t8e,"A",{href:!0});var mst=s(aG);R$o=r(mst,"TapasForSequenceClassification"),mst.forEach(t),B$o=r(t8e," (TAPAS model)"),t8e.forEach(t),P$o=i(N),db=n(N,"LI",{});var a8e=s(db);gfe=n(a8e,"STRONG",{});var gst=s(gfe);I$o=r(gst,"tapex"),gst.forEach(t),q$o=r(a8e," \u2014 "),nG=n(a8e,"A",{href:!0});var hst=s(nG);N$o=r(hst,"BartForSequenceClassification"),hst.forEach(t),j$o=r(a8e," (TAPEX model)"),a8e.forEach(t),D$o=i(N),cb=n(N,"LI",{});var n8e=s(cb);hfe=n(n8e,"STRONG",{});var pst=s(hfe);G$o=r(pst,"transfo-xl"),pst.forEach(t),O$o=r(n8e," \u2014 "),sG=n(n8e,"A",{href:!0});var ust=s(sG);V$o=r(ust,"TransfoXLForSequenceClassification"),ust.forEach(t),X$o=r(n8e," (Transformer-XL model)"),n8e.forEach(t),z$o=i(N),fb=n(N,"LI",{});var s8e=s(fb);pfe=n(s8e,"STRONG",{});var _st=s(pfe);Q$o=r(_st,"xlm"),_st.forEach(t),W$o=r(s8e," \u2014 "),lG=n(s8e,"A",{href:!0});var bst=s(lG);H$o=r(bst,"XLMForSequenceClassification"),bst.forEach(t),U$o=r(s8e," (XLM model)"),s8e.forEach(t),J$o=i(N),mb=n(N,"LI",{});var l8e=s(mb);ufe=n(l8e,"STRONG",{});var vst=s(ufe);Y$o=r(vst,"xlm-roberta"),vst.forEach(t),K$o=r(l8e," \u2014 "),iG=n(l8e,"A",{href:!0});var Fst=s(iG);Z$o=r(Fst,"XLMRobertaForSequenceClassification"),Fst.forEach(t),eko=r(l8e," (XLM-RoBERTa model)"),l8e.forEach(t),oko=i(N),gb=n(N,"LI",{});var i8e=s(gb);_fe=n(i8e,"STRONG",{});var Tst=s(_fe);rko=r(Tst,"xlm-roberta-xl"),Tst.forEach(t),tko=r(i8e," \u2014 "),dG=n(i8e,"A",{href:!0});var Mst=s(dG);ako=r(Mst,"XLMRobertaXLForSequenceClassification"),Mst.forEach(t),nko=r(i8e," (XLM-RoBERTa-XL model)"),i8e.forEach(t),sko=i(N),hb=n(N,"LI",{});var d8e=s(hb);bfe=n(d8e,"STRONG",{});var Est=s(bfe);lko=r(Est,"xlnet"),Est.forEach(t),iko=r(d8e," \u2014 "),cG=n(d8e,"A",{href:!0});var Cst=s(cG);dko=r(Cst,"XLNetForSequenceClassification"),Cst.forEach(t),cko=r(d8e," (XLNet model)"),d8e.forEach(t),fko=i(N),pb=n(N,"LI",{});var c8e=s(pb);vfe=n(c8e,"STRONG",{});var wst=s(vfe);mko=r(wst,"yoso"),wst.forEach(t),gko=r(c8e," \u2014 "),fG=n(c8e,"A",{href:!0});var Ast=s(fG);hko=r(Ast,"YosoForSequenceClassification"),Ast.forEach(t),pko=r(c8e," (YOSO model)"),c8e.forEach(t),N.forEach(t),uko=i(aa),ub=n(aa,"P",{});var f8e=s(ub);_ko=r(f8e,"The model is set in evaluation mode by default using "),Ffe=n(f8e,"CODE",{});var yst=s(Ffe);bko=r(yst,"model.eval()"),yst.forEach(t),vko=r(f8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=n(f8e,"CODE",{});var Lst=s(Tfe);Fko=r(Lst,"model.train()"),Lst.forEach(t),f8e.forEach(t),Tko=i(aa),T(_b.$$.fragment,aa),aa.forEach(t),zs.forEach(t),kIe=i(f),Di=n(f,"H2",{class:!0});var PNe=s(Di);bb=n(PNe,"A",{id:!0,class:!0,href:!0});var xst=s(bb);Mfe=n(xst,"SPAN",{});var $st=s(Mfe);T(ty.$$.fragment,$st),$st.forEach(t),xst.forEach(t),Mko=i(PNe),Efe=n(PNe,"SPAN",{});var kst=s(Efe);Eko=r(kst,"AutoModelForMultipleChoice"),kst.forEach(t),PNe.forEach(t),SIe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(ay.$$.fragment,Qs),Cko=i(Qs),Gi=n(Qs,"P",{});var $K=s(Gi);wko=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mG=n($K,"A",{href:!0});var Sst=s(mG);Ako=r(Sst,"from_pretrained()"),Sst.forEach(t),yko=r($K," class method or the "),gG=n($K,"A",{href:!0});var Rst=s(gG);Lko=r(Rst,"from_config()"),Rst.forEach(t),xko=r($K,` class
method.`),$K.forEach(t),$ko=i(Qs),ny=n(Qs,"P",{});var INe=s(ny);kko=r(INe,"This class cannot be instantiated directly using "),Cfe=n(INe,"CODE",{});var Bst=s(Cfe);Sko=r(Bst,"__init__()"),Bst.forEach(t),Rko=r(INe," (throws an error)."),INe.forEach(t),Bko=i(Qs),lt=n(Qs,"DIV",{class:!0});var u3=s(lt);T(sy.$$.fragment,u3),Pko=i(u3),wfe=n(u3,"P",{});var Pst=s(wfe);Iko=r(Pst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pst.forEach(t),qko=i(u3),Oi=n(u3,"P",{});var kK=s(Oi);Nko=r(kK,`Note:
Loading a model from its configuration file does `),Afe=n(kK,"STRONG",{});var Ist=s(Afe);jko=r(Ist,"not"),Ist.forEach(t),Dko=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=n(kK,"A",{href:!0});var qst=s(hG);Gko=r(qst,"from_pretrained()"),qst.forEach(t),Oko=r(kK," to load the model weights."),kK.forEach(t),Vko=i(u3),T(vb.$$.fragment,u3),u3.forEach(t),Xko=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(ly.$$.fragment,na),zko=i(na),yfe=n(na,"P",{});var Nst=s(yfe);Qko=r(Nst,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nst.forEach(t),Wko=i(na),Sa=n(na,"P",{});var _3=s(Sa);Hko=r(_3,"The model class to instantiate is selected based on the "),Lfe=n(_3,"CODE",{});var jst=s(Lfe);Uko=r(jst,"model_type"),jst.forEach(t),Jko=r(_3,` property of the config object (either
passed as an argument or loaded from `),xfe=n(_3,"CODE",{});var Dst=s(xfe);Yko=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),Kko=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=n(_3,"CODE",{});var Gst=s($fe);Zko=r(Gst,"pretrained_model_name_or_path"),Gst.forEach(t),eSo=r(_3,":"),_3.forEach(t),oSo=i(na),Y=n(na,"UL",{});var K=s(Y);Fb=n(K,"LI",{});var m8e=s(Fb);kfe=n(m8e,"STRONG",{});var Ost=s(kfe);rSo=r(Ost,"albert"),Ost.forEach(t),tSo=r(m8e," \u2014 "),pG=n(m8e,"A",{href:!0});var Vst=s(pG);aSo=r(Vst,"AlbertForMultipleChoice"),Vst.forEach(t),nSo=r(m8e," (ALBERT model)"),m8e.forEach(t),sSo=i(K),Tb=n(K,"LI",{});var g8e=s(Tb);Sfe=n(g8e,"STRONG",{});var Xst=s(Sfe);lSo=r(Xst,"bert"),Xst.forEach(t),iSo=r(g8e," \u2014 "),uG=n(g8e,"A",{href:!0});var zst=s(uG);dSo=r(zst,"BertForMultipleChoice"),zst.forEach(t),cSo=r(g8e," (BERT model)"),g8e.forEach(t),fSo=i(K),Mb=n(K,"LI",{});var h8e=s(Mb);Rfe=n(h8e,"STRONG",{});var Qst=s(Rfe);mSo=r(Qst,"big_bird"),Qst.forEach(t),gSo=r(h8e," \u2014 "),_G=n(h8e,"A",{href:!0});var Wst=s(_G);hSo=r(Wst,"BigBirdForMultipleChoice"),Wst.forEach(t),pSo=r(h8e," (BigBird model)"),h8e.forEach(t),uSo=i(K),Eb=n(K,"LI",{});var p8e=s(Eb);Bfe=n(p8e,"STRONG",{});var Hst=s(Bfe);_So=r(Hst,"camembert"),Hst.forEach(t),bSo=r(p8e," \u2014 "),bG=n(p8e,"A",{href:!0});var Ust=s(bG);vSo=r(Ust,"CamembertForMultipleChoice"),Ust.forEach(t),FSo=r(p8e," (CamemBERT model)"),p8e.forEach(t),TSo=i(K),Cb=n(K,"LI",{});var u8e=s(Cb);Pfe=n(u8e,"STRONG",{});var Jst=s(Pfe);MSo=r(Jst,"canine"),Jst.forEach(t),ESo=r(u8e," \u2014 "),vG=n(u8e,"A",{href:!0});var Yst=s(vG);CSo=r(Yst,"CanineForMultipleChoice"),Yst.forEach(t),wSo=r(u8e," (Canine model)"),u8e.forEach(t),ASo=i(K),wb=n(K,"LI",{});var _8e=s(wb);Ife=n(_8e,"STRONG",{});var Kst=s(Ife);ySo=r(Kst,"convbert"),Kst.forEach(t),LSo=r(_8e," \u2014 "),FG=n(_8e,"A",{href:!0});var Zst=s(FG);xSo=r(Zst,"ConvBertForMultipleChoice"),Zst.forEach(t),$So=r(_8e," (ConvBERT model)"),_8e.forEach(t),kSo=i(K),Ab=n(K,"LI",{});var b8e=s(Ab);qfe=n(b8e,"STRONG",{});var elt=s(qfe);SSo=r(elt,"data2vec-text"),elt.forEach(t),RSo=r(b8e," \u2014 "),TG=n(b8e,"A",{href:!0});var olt=s(TG);BSo=r(olt,"Data2VecTextForMultipleChoice"),olt.forEach(t),PSo=r(b8e," (Data2VecText model)"),b8e.forEach(t),ISo=i(K),yb=n(K,"LI",{});var v8e=s(yb);Nfe=n(v8e,"STRONG",{});var rlt=s(Nfe);qSo=r(rlt,"deberta-v2"),rlt.forEach(t),NSo=r(v8e," \u2014 "),MG=n(v8e,"A",{href:!0});var tlt=s(MG);jSo=r(tlt,"DebertaV2ForMultipleChoice"),tlt.forEach(t),DSo=r(v8e," (DeBERTa-v2 model)"),v8e.forEach(t),GSo=i(K),Lb=n(K,"LI",{});var F8e=s(Lb);jfe=n(F8e,"STRONG",{});var alt=s(jfe);OSo=r(alt,"distilbert"),alt.forEach(t),VSo=r(F8e," \u2014 "),EG=n(F8e,"A",{href:!0});var nlt=s(EG);XSo=r(nlt,"DistilBertForMultipleChoice"),nlt.forEach(t),zSo=r(F8e," (DistilBERT model)"),F8e.forEach(t),QSo=i(K),xb=n(K,"LI",{});var T8e=s(xb);Dfe=n(T8e,"STRONG",{});var slt=s(Dfe);WSo=r(slt,"electra"),slt.forEach(t),HSo=r(T8e," \u2014 "),CG=n(T8e,"A",{href:!0});var llt=s(CG);USo=r(llt,"ElectraForMultipleChoice"),llt.forEach(t),JSo=r(T8e," (ELECTRA model)"),T8e.forEach(t),YSo=i(K),$b=n(K,"LI",{});var M8e=s($b);Gfe=n(M8e,"STRONG",{});var ilt=s(Gfe);KSo=r(ilt,"flaubert"),ilt.forEach(t),ZSo=r(M8e," \u2014 "),wG=n(M8e,"A",{href:!0});var dlt=s(wG);eRo=r(dlt,"FlaubertForMultipleChoice"),dlt.forEach(t),oRo=r(M8e," (FlauBERT model)"),M8e.forEach(t),rRo=i(K),kb=n(K,"LI",{});var E8e=s(kb);Ofe=n(E8e,"STRONG",{});var clt=s(Ofe);tRo=r(clt,"fnet"),clt.forEach(t),aRo=r(E8e," \u2014 "),AG=n(E8e,"A",{href:!0});var flt=s(AG);nRo=r(flt,"FNetForMultipleChoice"),flt.forEach(t),sRo=r(E8e," (FNet model)"),E8e.forEach(t),lRo=i(K),Sb=n(K,"LI",{});var C8e=s(Sb);Vfe=n(C8e,"STRONG",{});var mlt=s(Vfe);iRo=r(mlt,"funnel"),mlt.forEach(t),dRo=r(C8e," \u2014 "),yG=n(C8e,"A",{href:!0});var glt=s(yG);cRo=r(glt,"FunnelForMultipleChoice"),glt.forEach(t),fRo=r(C8e," (Funnel Transformer model)"),C8e.forEach(t),mRo=i(K),Rb=n(K,"LI",{});var w8e=s(Rb);Xfe=n(w8e,"STRONG",{});var hlt=s(Xfe);gRo=r(hlt,"ibert"),hlt.forEach(t),hRo=r(w8e," \u2014 "),LG=n(w8e,"A",{href:!0});var plt=s(LG);pRo=r(plt,"IBertForMultipleChoice"),plt.forEach(t),uRo=r(w8e," (I-BERT model)"),w8e.forEach(t),_Ro=i(K),Bb=n(K,"LI",{});var A8e=s(Bb);zfe=n(A8e,"STRONG",{});var ult=s(zfe);bRo=r(ult,"longformer"),ult.forEach(t),vRo=r(A8e," \u2014 "),xG=n(A8e,"A",{href:!0});var _lt=s(xG);FRo=r(_lt,"LongformerForMultipleChoice"),_lt.forEach(t),TRo=r(A8e," (Longformer model)"),A8e.forEach(t),MRo=i(K),Pb=n(K,"LI",{});var y8e=s(Pb);Qfe=n(y8e,"STRONG",{});var blt=s(Qfe);ERo=r(blt,"megatron-bert"),blt.forEach(t),CRo=r(y8e," \u2014 "),$G=n(y8e,"A",{href:!0});var vlt=s($G);wRo=r(vlt,"MegatronBertForMultipleChoice"),vlt.forEach(t),ARo=r(y8e," (MegatronBert model)"),y8e.forEach(t),yRo=i(K),Ib=n(K,"LI",{});var L8e=s(Ib);Wfe=n(L8e,"STRONG",{});var Flt=s(Wfe);LRo=r(Flt,"mobilebert"),Flt.forEach(t),xRo=r(L8e," \u2014 "),kG=n(L8e,"A",{href:!0});var Tlt=s(kG);$Ro=r(Tlt,"MobileBertForMultipleChoice"),Tlt.forEach(t),kRo=r(L8e," (MobileBERT model)"),L8e.forEach(t),SRo=i(K),qb=n(K,"LI",{});var x8e=s(qb);Hfe=n(x8e,"STRONG",{});var Mlt=s(Hfe);RRo=r(Mlt,"mpnet"),Mlt.forEach(t),BRo=r(x8e," \u2014 "),SG=n(x8e,"A",{href:!0});var Elt=s(SG);PRo=r(Elt,"MPNetForMultipleChoice"),Elt.forEach(t),IRo=r(x8e," (MPNet model)"),x8e.forEach(t),qRo=i(K),Nb=n(K,"LI",{});var $8e=s(Nb);Ufe=n($8e,"STRONG",{});var Clt=s(Ufe);NRo=r(Clt,"nystromformer"),Clt.forEach(t),jRo=r($8e," \u2014 "),RG=n($8e,"A",{href:!0});var wlt=s(RG);DRo=r(wlt,"NystromformerForMultipleChoice"),wlt.forEach(t),GRo=r($8e," (Nystromformer model)"),$8e.forEach(t),ORo=i(K),jb=n(K,"LI",{});var k8e=s(jb);Jfe=n(k8e,"STRONG",{});var Alt=s(Jfe);VRo=r(Alt,"qdqbert"),Alt.forEach(t),XRo=r(k8e," \u2014 "),BG=n(k8e,"A",{href:!0});var ylt=s(BG);zRo=r(ylt,"QDQBertForMultipleChoice"),ylt.forEach(t),QRo=r(k8e," (QDQBert model)"),k8e.forEach(t),WRo=i(K),Db=n(K,"LI",{});var S8e=s(Db);Yfe=n(S8e,"STRONG",{});var Llt=s(Yfe);HRo=r(Llt,"rembert"),Llt.forEach(t),URo=r(S8e," \u2014 "),PG=n(S8e,"A",{href:!0});var xlt=s(PG);JRo=r(xlt,"RemBertForMultipleChoice"),xlt.forEach(t),YRo=r(S8e," (RemBERT model)"),S8e.forEach(t),KRo=i(K),Gb=n(K,"LI",{});var R8e=s(Gb);Kfe=n(R8e,"STRONG",{});var $lt=s(Kfe);ZRo=r($lt,"roberta"),$lt.forEach(t),eBo=r(R8e," \u2014 "),IG=n(R8e,"A",{href:!0});var klt=s(IG);oBo=r(klt,"RobertaForMultipleChoice"),klt.forEach(t),rBo=r(R8e," (RoBERTa model)"),R8e.forEach(t),tBo=i(K),Ob=n(K,"LI",{});var B8e=s(Ob);Zfe=n(B8e,"STRONG",{});var Slt=s(Zfe);aBo=r(Slt,"roformer"),Slt.forEach(t),nBo=r(B8e," \u2014 "),qG=n(B8e,"A",{href:!0});var Rlt=s(qG);sBo=r(Rlt,"RoFormerForMultipleChoice"),Rlt.forEach(t),lBo=r(B8e," (RoFormer model)"),B8e.forEach(t),iBo=i(K),Vb=n(K,"LI",{});var P8e=s(Vb);eme=n(P8e,"STRONG",{});var Blt=s(eme);dBo=r(Blt,"squeezebert"),Blt.forEach(t),cBo=r(P8e," \u2014 "),NG=n(P8e,"A",{href:!0});var Plt=s(NG);fBo=r(Plt,"SqueezeBertForMultipleChoice"),Plt.forEach(t),mBo=r(P8e," (SqueezeBERT model)"),P8e.forEach(t),gBo=i(K),Xb=n(K,"LI",{});var I8e=s(Xb);ome=n(I8e,"STRONG",{});var Ilt=s(ome);hBo=r(Ilt,"xlm"),Ilt.forEach(t),pBo=r(I8e," \u2014 "),jG=n(I8e,"A",{href:!0});var qlt=s(jG);uBo=r(qlt,"XLMForMultipleChoice"),qlt.forEach(t),_Bo=r(I8e," (XLM model)"),I8e.forEach(t),bBo=i(K),zb=n(K,"LI",{});var q8e=s(zb);rme=n(q8e,"STRONG",{});var Nlt=s(rme);vBo=r(Nlt,"xlm-roberta"),Nlt.forEach(t),FBo=r(q8e," \u2014 "),DG=n(q8e,"A",{href:!0});var jlt=s(DG);TBo=r(jlt,"XLMRobertaForMultipleChoice"),jlt.forEach(t),MBo=r(q8e," (XLM-RoBERTa model)"),q8e.forEach(t),EBo=i(K),Qb=n(K,"LI",{});var N8e=s(Qb);tme=n(N8e,"STRONG",{});var Dlt=s(tme);CBo=r(Dlt,"xlm-roberta-xl"),Dlt.forEach(t),wBo=r(N8e," \u2014 "),GG=n(N8e,"A",{href:!0});var Glt=s(GG);ABo=r(Glt,"XLMRobertaXLForMultipleChoice"),Glt.forEach(t),yBo=r(N8e," (XLM-RoBERTa-XL model)"),N8e.forEach(t),LBo=i(K),Wb=n(K,"LI",{});var j8e=s(Wb);ame=n(j8e,"STRONG",{});var Olt=s(ame);xBo=r(Olt,"xlnet"),Olt.forEach(t),$Bo=r(j8e," \u2014 "),OG=n(j8e,"A",{href:!0});var Vlt=s(OG);kBo=r(Vlt,"XLNetForMultipleChoice"),Vlt.forEach(t),SBo=r(j8e," (XLNet model)"),j8e.forEach(t),RBo=i(K),Hb=n(K,"LI",{});var D8e=s(Hb);nme=n(D8e,"STRONG",{});var Xlt=s(nme);BBo=r(Xlt,"yoso"),Xlt.forEach(t),PBo=r(D8e," \u2014 "),VG=n(D8e,"A",{href:!0});var zlt=s(VG);IBo=r(zlt,"YosoForMultipleChoice"),zlt.forEach(t),qBo=r(D8e," (YOSO model)"),D8e.forEach(t),K.forEach(t),NBo=i(na),Ub=n(na,"P",{});var G8e=s(Ub);jBo=r(G8e,"The model is set in evaluation mode by default using "),sme=n(G8e,"CODE",{});var Qlt=s(sme);DBo=r(Qlt,"model.eval()"),Qlt.forEach(t),GBo=r(G8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=n(G8e,"CODE",{});var Wlt=s(lme);OBo=r(Wlt,"model.train()"),Wlt.forEach(t),G8e.forEach(t),VBo=i(na),T(Jb.$$.fragment,na),na.forEach(t),Qs.forEach(t),RIe=i(f),Vi=n(f,"H2",{class:!0});var qNe=s(Vi);Yb=n(qNe,"A",{id:!0,class:!0,href:!0});var Hlt=s(Yb);ime=n(Hlt,"SPAN",{});var Ult=s(ime);T(iy.$$.fragment,Ult),Ult.forEach(t),Hlt.forEach(t),XBo=i(qNe),dme=n(qNe,"SPAN",{});var Jlt=s(dme);zBo=r(Jlt,"AutoModelForNextSentencePrediction"),Jlt.forEach(t),qNe.forEach(t),BIe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(dy.$$.fragment,Ws),QBo=i(Ws),Xi=n(Ws,"P",{});var SK=s(Xi);WBo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XG=n(SK,"A",{href:!0});var Ylt=s(XG);HBo=r(Ylt,"from_pretrained()"),Ylt.forEach(t),UBo=r(SK," class method or the "),zG=n(SK,"A",{href:!0});var Klt=s(zG);JBo=r(Klt,"from_config()"),Klt.forEach(t),YBo=r(SK,` class
method.`),SK.forEach(t),KBo=i(Ws),cy=n(Ws,"P",{});var NNe=s(cy);ZBo=r(NNe,"This class cannot be instantiated directly using "),cme=n(NNe,"CODE",{});var Zlt=s(cme);ePo=r(Zlt,"__init__()"),Zlt.forEach(t),oPo=r(NNe," (throws an error)."),NNe.forEach(t),rPo=i(Ws),it=n(Ws,"DIV",{class:!0});var b3=s(it);T(fy.$$.fragment,b3),tPo=i(b3),fme=n(b3,"P",{});var eit=s(fme);aPo=r(eit,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eit.forEach(t),nPo=i(b3),zi=n(b3,"P",{});var RK=s(zi);sPo=r(RK,`Note:
Loading a model from its configuration file does `),mme=n(RK,"STRONG",{});var oit=s(mme);lPo=r(oit,"not"),oit.forEach(t),iPo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(RK,"A",{href:!0});var rit=s(QG);dPo=r(rit,"from_pretrained()"),rit.forEach(t),cPo=r(RK," to load the model weights."),RK.forEach(t),fPo=i(b3),T(Kb.$$.fragment,b3),b3.forEach(t),mPo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(my.$$.fragment,sa),gPo=i(sa),gme=n(sa,"P",{});var tit=s(gme);hPo=r(tit,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tit.forEach(t),pPo=i(sa),Ra=n(sa,"P",{});var v3=s(Ra);uPo=r(v3,"The model class to instantiate is selected based on the "),hme=n(v3,"CODE",{});var ait=s(hme);_Po=r(ait,"model_type"),ait.forEach(t),bPo=r(v3,` property of the config object (either
passed as an argument or loaded from `),pme=n(v3,"CODE",{});var nit=s(pme);vPo=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),FPo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=n(v3,"CODE",{});var sit=s(ume);TPo=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),MPo=r(v3,":"),v3.forEach(t),EPo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);Zb=n(Hs,"LI",{});var O8e=s(Zb);_me=n(O8e,"STRONG",{});var lit=s(_me);CPo=r(lit,"bert"),lit.forEach(t),wPo=r(O8e," \u2014 "),WG=n(O8e,"A",{href:!0});var iit=s(WG);APo=r(iit,"BertForNextSentencePrediction"),iit.forEach(t),yPo=r(O8e," (BERT model)"),O8e.forEach(t),LPo=i(Hs),e2=n(Hs,"LI",{});var V8e=s(e2);bme=n(V8e,"STRONG",{});var dit=s(bme);xPo=r(dit,"fnet"),dit.forEach(t),$Po=r(V8e," \u2014 "),HG=n(V8e,"A",{href:!0});var cit=s(HG);kPo=r(cit,"FNetForNextSentencePrediction"),cit.forEach(t),SPo=r(V8e," (FNet model)"),V8e.forEach(t),RPo=i(Hs),o2=n(Hs,"LI",{});var X8e=s(o2);vme=n(X8e,"STRONG",{});var fit=s(vme);BPo=r(fit,"megatron-bert"),fit.forEach(t),PPo=r(X8e," \u2014 "),UG=n(X8e,"A",{href:!0});var mit=s(UG);IPo=r(mit,"MegatronBertForNextSentencePrediction"),mit.forEach(t),qPo=r(X8e," (MegatronBert model)"),X8e.forEach(t),NPo=i(Hs),r2=n(Hs,"LI",{});var z8e=s(r2);Fme=n(z8e,"STRONG",{});var git=s(Fme);jPo=r(git,"mobilebert"),git.forEach(t),DPo=r(z8e," \u2014 "),JG=n(z8e,"A",{href:!0});var hit=s(JG);GPo=r(hit,"MobileBertForNextSentencePrediction"),hit.forEach(t),OPo=r(z8e," (MobileBERT model)"),z8e.forEach(t),VPo=i(Hs),t2=n(Hs,"LI",{});var Q8e=s(t2);Tme=n(Q8e,"STRONG",{});var pit=s(Tme);XPo=r(pit,"qdqbert"),pit.forEach(t),zPo=r(Q8e," \u2014 "),YG=n(Q8e,"A",{href:!0});var uit=s(YG);QPo=r(uit,"QDQBertForNextSentencePrediction"),uit.forEach(t),WPo=r(Q8e," (QDQBert model)"),Q8e.forEach(t),Hs.forEach(t),HPo=i(sa),a2=n(sa,"P",{});var W8e=s(a2);UPo=r(W8e,"The model is set in evaluation mode by default using "),Mme=n(W8e,"CODE",{});var _it=s(Mme);JPo=r(_it,"model.eval()"),_it.forEach(t),YPo=r(W8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eme=n(W8e,"CODE",{});var bit=s(Eme);KPo=r(bit,"model.train()"),bit.forEach(t),W8e.forEach(t),ZPo=i(sa),T(n2.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),PIe=i(f),Qi=n(f,"H2",{class:!0});var jNe=s(Qi);s2=n(jNe,"A",{id:!0,class:!0,href:!0});var vit=s(s2);Cme=n(vit,"SPAN",{});var Fit=s(Cme);T(gy.$$.fragment,Fit),Fit.forEach(t),vit.forEach(t),eIo=i(jNe),wme=n(jNe,"SPAN",{});var Tit=s(wme);oIo=r(Tit,"AutoModelForTokenClassification"),Tit.forEach(t),jNe.forEach(t),IIe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(hy.$$.fragment,Us),rIo=i(Us),Wi=n(Us,"P",{});var BK=s(Wi);tIo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KG=n(BK,"A",{href:!0});var Mit=s(KG);aIo=r(Mit,"from_pretrained()"),Mit.forEach(t),nIo=r(BK," class method or the "),ZG=n(BK,"A",{href:!0});var Eit=s(ZG);sIo=r(Eit,"from_config()"),Eit.forEach(t),lIo=r(BK,` class
method.`),BK.forEach(t),iIo=i(Us),py=n(Us,"P",{});var DNe=s(py);dIo=r(DNe,"This class cannot be instantiated directly using "),Ame=n(DNe,"CODE",{});var Cit=s(Ame);cIo=r(Cit,"__init__()"),Cit.forEach(t),fIo=r(DNe," (throws an error)."),DNe.forEach(t),mIo=i(Us),dt=n(Us,"DIV",{class:!0});var F3=s(dt);T(uy.$$.fragment,F3),gIo=i(F3),yme=n(F3,"P",{});var wit=s(yme);hIo=r(wit,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wit.forEach(t),pIo=i(F3),Hi=n(F3,"P",{});var PK=s(Hi);uIo=r(PK,`Note:
Loading a model from its configuration file does `),Lme=n(PK,"STRONG",{});var Ait=s(Lme);_Io=r(Ait,"not"),Ait.forEach(t),bIo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(PK,"A",{href:!0});var yit=s(eO);vIo=r(yit,"from_pretrained()"),yit.forEach(t),FIo=r(PK," to load the model weights."),PK.forEach(t),TIo=i(F3),T(l2.$$.fragment,F3),F3.forEach(t),MIo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(_y.$$.fragment,la),EIo=i(la),xme=n(la,"P",{});var Lit=s(xme);CIo=r(Lit,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Lit.forEach(t),wIo=i(la),Ba=n(la,"P",{});var T3=s(Ba);AIo=r(T3,"The model class to instantiate is selected based on the "),$me=n(T3,"CODE",{});var xit=s($me);yIo=r(xit,"model_type"),xit.forEach(t),LIo=r(T3,` property of the config object (either
passed as an argument or loaded from `),kme=n(T3,"CODE",{});var $it=s(kme);xIo=r($it,"pretrained_model_name_or_path"),$it.forEach(t),$Io=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=n(T3,"CODE",{});var kit=s(Sme);kIo=r(kit,"pretrained_model_name_or_path"),kit.forEach(t),SIo=r(T3,":"),T3.forEach(t),RIo=i(la),W=n(la,"UL",{});var J=s(W);i2=n(J,"LI",{});var H8e=s(i2);Rme=n(H8e,"STRONG",{});var Sit=s(Rme);BIo=r(Sit,"albert"),Sit.forEach(t),PIo=r(H8e," \u2014 "),oO=n(H8e,"A",{href:!0});var Rit=s(oO);IIo=r(Rit,"AlbertForTokenClassification"),Rit.forEach(t),qIo=r(H8e," (ALBERT model)"),H8e.forEach(t),NIo=i(J),d2=n(J,"LI",{});var U8e=s(d2);Bme=n(U8e,"STRONG",{});var Bit=s(Bme);jIo=r(Bit,"bert"),Bit.forEach(t),DIo=r(U8e," \u2014 "),rO=n(U8e,"A",{href:!0});var Pit=s(rO);GIo=r(Pit,"BertForTokenClassification"),Pit.forEach(t),OIo=r(U8e," (BERT model)"),U8e.forEach(t),VIo=i(J),c2=n(J,"LI",{});var J8e=s(c2);Pme=n(J8e,"STRONG",{});var Iit=s(Pme);XIo=r(Iit,"big_bird"),Iit.forEach(t),zIo=r(J8e," \u2014 "),tO=n(J8e,"A",{href:!0});var qit=s(tO);QIo=r(qit,"BigBirdForTokenClassification"),qit.forEach(t),WIo=r(J8e," (BigBird model)"),J8e.forEach(t),HIo=i(J),f2=n(J,"LI",{});var Y8e=s(f2);Ime=n(Y8e,"STRONG",{});var Nit=s(Ime);UIo=r(Nit,"camembert"),Nit.forEach(t),JIo=r(Y8e," \u2014 "),aO=n(Y8e,"A",{href:!0});var jit=s(aO);YIo=r(jit,"CamembertForTokenClassification"),jit.forEach(t),KIo=r(Y8e," (CamemBERT model)"),Y8e.forEach(t),ZIo=i(J),m2=n(J,"LI",{});var K8e=s(m2);qme=n(K8e,"STRONG",{});var Dit=s(qme);eqo=r(Dit,"canine"),Dit.forEach(t),oqo=r(K8e," \u2014 "),nO=n(K8e,"A",{href:!0});var Git=s(nO);rqo=r(Git,"CanineForTokenClassification"),Git.forEach(t),tqo=r(K8e," (Canine model)"),K8e.forEach(t),aqo=i(J),g2=n(J,"LI",{});var Z8e=s(g2);Nme=n(Z8e,"STRONG",{});var Oit=s(Nme);nqo=r(Oit,"convbert"),Oit.forEach(t),sqo=r(Z8e," \u2014 "),sO=n(Z8e,"A",{href:!0});var Vit=s(sO);lqo=r(Vit,"ConvBertForTokenClassification"),Vit.forEach(t),iqo=r(Z8e," (ConvBERT model)"),Z8e.forEach(t),dqo=i(J),h2=n(J,"LI",{});var exe=s(h2);jme=n(exe,"STRONG",{});var Xit=s(jme);cqo=r(Xit,"data2vec-text"),Xit.forEach(t),fqo=r(exe," \u2014 "),lO=n(exe,"A",{href:!0});var zit=s(lO);mqo=r(zit,"Data2VecTextForTokenClassification"),zit.forEach(t),gqo=r(exe," (Data2VecText model)"),exe.forEach(t),hqo=i(J),p2=n(J,"LI",{});var oxe=s(p2);Dme=n(oxe,"STRONG",{});var Qit=s(Dme);pqo=r(Qit,"deberta"),Qit.forEach(t),uqo=r(oxe," \u2014 "),iO=n(oxe,"A",{href:!0});var Wit=s(iO);_qo=r(Wit,"DebertaForTokenClassification"),Wit.forEach(t),bqo=r(oxe," (DeBERTa model)"),oxe.forEach(t),vqo=i(J),u2=n(J,"LI",{});var rxe=s(u2);Gme=n(rxe,"STRONG",{});var Hit=s(Gme);Fqo=r(Hit,"deberta-v2"),Hit.forEach(t),Tqo=r(rxe," \u2014 "),dO=n(rxe,"A",{href:!0});var Uit=s(dO);Mqo=r(Uit,"DebertaV2ForTokenClassification"),Uit.forEach(t),Eqo=r(rxe," (DeBERTa-v2 model)"),rxe.forEach(t),Cqo=i(J),_2=n(J,"LI",{});var txe=s(_2);Ome=n(txe,"STRONG",{});var Jit=s(Ome);wqo=r(Jit,"distilbert"),Jit.forEach(t),Aqo=r(txe," \u2014 "),cO=n(txe,"A",{href:!0});var Yit=s(cO);yqo=r(Yit,"DistilBertForTokenClassification"),Yit.forEach(t),Lqo=r(txe," (DistilBERT model)"),txe.forEach(t),xqo=i(J),b2=n(J,"LI",{});var axe=s(b2);Vme=n(axe,"STRONG",{});var Kit=s(Vme);$qo=r(Kit,"electra"),Kit.forEach(t),kqo=r(axe," \u2014 "),fO=n(axe,"A",{href:!0});var Zit=s(fO);Sqo=r(Zit,"ElectraForTokenClassification"),Zit.forEach(t),Rqo=r(axe," (ELECTRA model)"),axe.forEach(t),Bqo=i(J),v2=n(J,"LI",{});var nxe=s(v2);Xme=n(nxe,"STRONG",{});var edt=s(Xme);Pqo=r(edt,"flaubert"),edt.forEach(t),Iqo=r(nxe," \u2014 "),mO=n(nxe,"A",{href:!0});var odt=s(mO);qqo=r(odt,"FlaubertForTokenClassification"),odt.forEach(t),Nqo=r(nxe," (FlauBERT model)"),nxe.forEach(t),jqo=i(J),F2=n(J,"LI",{});var sxe=s(F2);zme=n(sxe,"STRONG",{});var rdt=s(zme);Dqo=r(rdt,"fnet"),rdt.forEach(t),Gqo=r(sxe," \u2014 "),gO=n(sxe,"A",{href:!0});var tdt=s(gO);Oqo=r(tdt,"FNetForTokenClassification"),tdt.forEach(t),Vqo=r(sxe," (FNet model)"),sxe.forEach(t),Xqo=i(J),T2=n(J,"LI",{});var lxe=s(T2);Qme=n(lxe,"STRONG",{});var adt=s(Qme);zqo=r(adt,"funnel"),adt.forEach(t),Qqo=r(lxe," \u2014 "),hO=n(lxe,"A",{href:!0});var ndt=s(hO);Wqo=r(ndt,"FunnelForTokenClassification"),ndt.forEach(t),Hqo=r(lxe," (Funnel Transformer model)"),lxe.forEach(t),Uqo=i(J),M2=n(J,"LI",{});var ixe=s(M2);Wme=n(ixe,"STRONG",{});var sdt=s(Wme);Jqo=r(sdt,"gpt2"),sdt.forEach(t),Yqo=r(ixe," \u2014 "),pO=n(ixe,"A",{href:!0});var ldt=s(pO);Kqo=r(ldt,"GPT2ForTokenClassification"),ldt.forEach(t),Zqo=r(ixe," (OpenAI GPT-2 model)"),ixe.forEach(t),eNo=i(J),E2=n(J,"LI",{});var dxe=s(E2);Hme=n(dxe,"STRONG",{});var idt=s(Hme);oNo=r(idt,"ibert"),idt.forEach(t),rNo=r(dxe," \u2014 "),uO=n(dxe,"A",{href:!0});var ddt=s(uO);tNo=r(ddt,"IBertForTokenClassification"),ddt.forEach(t),aNo=r(dxe," (I-BERT model)"),dxe.forEach(t),nNo=i(J),C2=n(J,"LI",{});var cxe=s(C2);Ume=n(cxe,"STRONG",{});var cdt=s(Ume);sNo=r(cdt,"layoutlm"),cdt.forEach(t),lNo=r(cxe," \u2014 "),_O=n(cxe,"A",{href:!0});var fdt=s(_O);iNo=r(fdt,"LayoutLMForTokenClassification"),fdt.forEach(t),dNo=r(cxe," (LayoutLM model)"),cxe.forEach(t),cNo=i(J),w2=n(J,"LI",{});var fxe=s(w2);Jme=n(fxe,"STRONG",{});var mdt=s(Jme);fNo=r(mdt,"layoutlmv2"),mdt.forEach(t),mNo=r(fxe," \u2014 "),bO=n(fxe,"A",{href:!0});var gdt=s(bO);gNo=r(gdt,"LayoutLMv2ForTokenClassification"),gdt.forEach(t),hNo=r(fxe," (LayoutLMv2 model)"),fxe.forEach(t),pNo=i(J),A2=n(J,"LI",{});var mxe=s(A2);Yme=n(mxe,"STRONG",{});var hdt=s(Yme);uNo=r(hdt,"layoutlmv3"),hdt.forEach(t),_No=r(mxe," \u2014 "),vO=n(mxe,"A",{href:!0});var pdt=s(vO);bNo=r(pdt,"LayoutLMv3ForTokenClassification"),pdt.forEach(t),vNo=r(mxe," (LayoutLMv3 model)"),mxe.forEach(t),FNo=i(J),y2=n(J,"LI",{});var gxe=s(y2);Kme=n(gxe,"STRONG",{});var udt=s(Kme);TNo=r(udt,"longformer"),udt.forEach(t),MNo=r(gxe," \u2014 "),FO=n(gxe,"A",{href:!0});var _dt=s(FO);ENo=r(_dt,"LongformerForTokenClassification"),_dt.forEach(t),CNo=r(gxe," (Longformer model)"),gxe.forEach(t),wNo=i(J),L2=n(J,"LI",{});var hxe=s(L2);Zme=n(hxe,"STRONG",{});var bdt=s(Zme);ANo=r(bdt,"megatron-bert"),bdt.forEach(t),yNo=r(hxe," \u2014 "),TO=n(hxe,"A",{href:!0});var vdt=s(TO);LNo=r(vdt,"MegatronBertForTokenClassification"),vdt.forEach(t),xNo=r(hxe," (MegatronBert model)"),hxe.forEach(t),$No=i(J),x2=n(J,"LI",{});var pxe=s(x2);ege=n(pxe,"STRONG",{});var Fdt=s(ege);kNo=r(Fdt,"mobilebert"),Fdt.forEach(t),SNo=r(pxe," \u2014 "),MO=n(pxe,"A",{href:!0});var Tdt=s(MO);RNo=r(Tdt,"MobileBertForTokenClassification"),Tdt.forEach(t),BNo=r(pxe," (MobileBERT model)"),pxe.forEach(t),PNo=i(J),$2=n(J,"LI",{});var uxe=s($2);oge=n(uxe,"STRONG",{});var Mdt=s(oge);INo=r(Mdt,"mpnet"),Mdt.forEach(t),qNo=r(uxe," \u2014 "),EO=n(uxe,"A",{href:!0});var Edt=s(EO);NNo=r(Edt,"MPNetForTokenClassification"),Edt.forEach(t),jNo=r(uxe," (MPNet model)"),uxe.forEach(t),DNo=i(J),k2=n(J,"LI",{});var _xe=s(k2);rge=n(_xe,"STRONG",{});var Cdt=s(rge);GNo=r(Cdt,"nystromformer"),Cdt.forEach(t),ONo=r(_xe," \u2014 "),CO=n(_xe,"A",{href:!0});var wdt=s(CO);VNo=r(wdt,"NystromformerForTokenClassification"),wdt.forEach(t),XNo=r(_xe," (Nystromformer model)"),_xe.forEach(t),zNo=i(J),S2=n(J,"LI",{});var bxe=s(S2);tge=n(bxe,"STRONG",{});var Adt=s(tge);QNo=r(Adt,"qdqbert"),Adt.forEach(t),WNo=r(bxe," \u2014 "),wO=n(bxe,"A",{href:!0});var ydt=s(wO);HNo=r(ydt,"QDQBertForTokenClassification"),ydt.forEach(t),UNo=r(bxe," (QDQBert model)"),bxe.forEach(t),JNo=i(J),R2=n(J,"LI",{});var vxe=s(R2);age=n(vxe,"STRONG",{});var Ldt=s(age);YNo=r(Ldt,"rembert"),Ldt.forEach(t),KNo=r(vxe," \u2014 "),AO=n(vxe,"A",{href:!0});var xdt=s(AO);ZNo=r(xdt,"RemBertForTokenClassification"),xdt.forEach(t),ejo=r(vxe," (RemBERT model)"),vxe.forEach(t),ojo=i(J),B2=n(J,"LI",{});var Fxe=s(B2);nge=n(Fxe,"STRONG",{});var $dt=s(nge);rjo=r($dt,"roberta"),$dt.forEach(t),tjo=r(Fxe," \u2014 "),yO=n(Fxe,"A",{href:!0});var kdt=s(yO);ajo=r(kdt,"RobertaForTokenClassification"),kdt.forEach(t),njo=r(Fxe," (RoBERTa model)"),Fxe.forEach(t),sjo=i(J),P2=n(J,"LI",{});var Txe=s(P2);sge=n(Txe,"STRONG",{});var Sdt=s(sge);ljo=r(Sdt,"roformer"),Sdt.forEach(t),ijo=r(Txe," \u2014 "),LO=n(Txe,"A",{href:!0});var Rdt=s(LO);djo=r(Rdt,"RoFormerForTokenClassification"),Rdt.forEach(t),cjo=r(Txe," (RoFormer model)"),Txe.forEach(t),fjo=i(J),I2=n(J,"LI",{});var Mxe=s(I2);lge=n(Mxe,"STRONG",{});var Bdt=s(lge);mjo=r(Bdt,"squeezebert"),Bdt.forEach(t),gjo=r(Mxe," \u2014 "),xO=n(Mxe,"A",{href:!0});var Pdt=s(xO);hjo=r(Pdt,"SqueezeBertForTokenClassification"),Pdt.forEach(t),pjo=r(Mxe," (SqueezeBERT model)"),Mxe.forEach(t),ujo=i(J),q2=n(J,"LI",{});var Exe=s(q2);ige=n(Exe,"STRONG",{});var Idt=s(ige);_jo=r(Idt,"xlm"),Idt.forEach(t),bjo=r(Exe," \u2014 "),$O=n(Exe,"A",{href:!0});var qdt=s($O);vjo=r(qdt,"XLMForTokenClassification"),qdt.forEach(t),Fjo=r(Exe," (XLM model)"),Exe.forEach(t),Tjo=i(J),N2=n(J,"LI",{});var Cxe=s(N2);dge=n(Cxe,"STRONG",{});var Ndt=s(dge);Mjo=r(Ndt,"xlm-roberta"),Ndt.forEach(t),Ejo=r(Cxe," \u2014 "),kO=n(Cxe,"A",{href:!0});var jdt=s(kO);Cjo=r(jdt,"XLMRobertaForTokenClassification"),jdt.forEach(t),wjo=r(Cxe," (XLM-RoBERTa model)"),Cxe.forEach(t),Ajo=i(J),j2=n(J,"LI",{});var wxe=s(j2);cge=n(wxe,"STRONG",{});var Ddt=s(cge);yjo=r(Ddt,"xlm-roberta-xl"),Ddt.forEach(t),Ljo=r(wxe," \u2014 "),SO=n(wxe,"A",{href:!0});var Gdt=s(SO);xjo=r(Gdt,"XLMRobertaXLForTokenClassification"),Gdt.forEach(t),$jo=r(wxe," (XLM-RoBERTa-XL model)"),wxe.forEach(t),kjo=i(J),D2=n(J,"LI",{});var Axe=s(D2);fge=n(Axe,"STRONG",{});var Odt=s(fge);Sjo=r(Odt,"xlnet"),Odt.forEach(t),Rjo=r(Axe," \u2014 "),RO=n(Axe,"A",{href:!0});var Vdt=s(RO);Bjo=r(Vdt,"XLNetForTokenClassification"),Vdt.forEach(t),Pjo=r(Axe," (XLNet model)"),Axe.forEach(t),Ijo=i(J),G2=n(J,"LI",{});var yxe=s(G2);mge=n(yxe,"STRONG",{});var Xdt=s(mge);qjo=r(Xdt,"yoso"),Xdt.forEach(t),Njo=r(yxe," \u2014 "),BO=n(yxe,"A",{href:!0});var zdt=s(BO);jjo=r(zdt,"YosoForTokenClassification"),zdt.forEach(t),Djo=r(yxe," (YOSO model)"),yxe.forEach(t),J.forEach(t),Gjo=i(la),O2=n(la,"P",{});var Lxe=s(O2);Ojo=r(Lxe,"The model is set in evaluation mode by default using "),gge=n(Lxe,"CODE",{});var Qdt=s(gge);Vjo=r(Qdt,"model.eval()"),Qdt.forEach(t),Xjo=r(Lxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(Lxe,"CODE",{});var Wdt=s(hge);zjo=r(Wdt,"model.train()"),Wdt.forEach(t),Lxe.forEach(t),Qjo=i(la),T(V2.$$.fragment,la),la.forEach(t),Us.forEach(t),qIe=i(f),Ui=n(f,"H2",{class:!0});var GNe=s(Ui);X2=n(GNe,"A",{id:!0,class:!0,href:!0});var Hdt=s(X2);pge=n(Hdt,"SPAN",{});var Udt=s(pge);T(by.$$.fragment,Udt),Udt.forEach(t),Hdt.forEach(t),Wjo=i(GNe),uge=n(GNe,"SPAN",{});var Jdt=s(uge);Hjo=r(Jdt,"AutoModelForQuestionAnswering"),Jdt.forEach(t),GNe.forEach(t),NIe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(vy.$$.fragment,Js),Ujo=i(Js),Ji=n(Js,"P",{});var IK=s(Ji);Jjo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PO=n(IK,"A",{href:!0});var Ydt=s(PO);Yjo=r(Ydt,"from_pretrained()"),Ydt.forEach(t),Kjo=r(IK," class method or the "),IO=n(IK,"A",{href:!0});var Kdt=s(IO);Zjo=r(Kdt,"from_config()"),Kdt.forEach(t),eDo=r(IK,` class
method.`),IK.forEach(t),oDo=i(Js),Fy=n(Js,"P",{});var ONe=s(Fy);rDo=r(ONe,"This class cannot be instantiated directly using "),_ge=n(ONe,"CODE",{});var Zdt=s(_ge);tDo=r(Zdt,"__init__()"),Zdt.forEach(t),aDo=r(ONe," (throws an error)."),ONe.forEach(t),nDo=i(Js),ct=n(Js,"DIV",{class:!0});var M3=s(ct);T(Ty.$$.fragment,M3),sDo=i(M3),bge=n(M3,"P",{});var ect=s(bge);lDo=r(ect,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ect.forEach(t),iDo=i(M3),Yi=n(M3,"P",{});var qK=s(Yi);dDo=r(qK,`Note:
Loading a model from its configuration file does `),vge=n(qK,"STRONG",{});var oct=s(vge);cDo=r(oct,"not"),oct.forEach(t),fDo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=n(qK,"A",{href:!0});var rct=s(qO);mDo=r(rct,"from_pretrained()"),rct.forEach(t),gDo=r(qK," to load the model weights."),qK.forEach(t),hDo=i(M3),T(z2.$$.fragment,M3),M3.forEach(t),pDo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(My.$$.fragment,ia),uDo=i(ia),Fge=n(ia,"P",{});var tct=s(Fge);_Do=r(tct,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tct.forEach(t),bDo=i(ia),Pa=n(ia,"P",{});var E3=s(Pa);vDo=r(E3,"The model class to instantiate is selected based on the "),Tge=n(E3,"CODE",{});var act=s(Tge);FDo=r(act,"model_type"),act.forEach(t),TDo=r(E3,` property of the config object (either
passed as an argument or loaded from `),Mge=n(E3,"CODE",{});var nct=s(Mge);MDo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),EDo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(E3,"CODE",{});var sct=s(Ege);CDo=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),wDo=r(E3,":"),E3.forEach(t),ADo=i(ia),O=n(ia,"UL",{});var X=s(O);Q2=n(X,"LI",{});var xxe=s(Q2);Cge=n(xxe,"STRONG",{});var lct=s(Cge);yDo=r(lct,"albert"),lct.forEach(t),LDo=r(xxe," \u2014 "),NO=n(xxe,"A",{href:!0});var ict=s(NO);xDo=r(ict,"AlbertForQuestionAnswering"),ict.forEach(t),$Do=r(xxe," (ALBERT model)"),xxe.forEach(t),kDo=i(X),W2=n(X,"LI",{});var $xe=s(W2);wge=n($xe,"STRONG",{});var dct=s(wge);SDo=r(dct,"bart"),dct.forEach(t),RDo=r($xe," \u2014 "),jO=n($xe,"A",{href:!0});var cct=s(jO);BDo=r(cct,"BartForQuestionAnswering"),cct.forEach(t),PDo=r($xe," (BART model)"),$xe.forEach(t),IDo=i(X),H2=n(X,"LI",{});var kxe=s(H2);Age=n(kxe,"STRONG",{});var fct=s(Age);qDo=r(fct,"bert"),fct.forEach(t),NDo=r(kxe," \u2014 "),DO=n(kxe,"A",{href:!0});var mct=s(DO);jDo=r(mct,"BertForQuestionAnswering"),mct.forEach(t),DDo=r(kxe," (BERT model)"),kxe.forEach(t),GDo=i(X),U2=n(X,"LI",{});var Sxe=s(U2);yge=n(Sxe,"STRONG",{});var gct=s(yge);ODo=r(gct,"big_bird"),gct.forEach(t),VDo=r(Sxe," \u2014 "),GO=n(Sxe,"A",{href:!0});var hct=s(GO);XDo=r(hct,"BigBirdForQuestionAnswering"),hct.forEach(t),zDo=r(Sxe," (BigBird model)"),Sxe.forEach(t),QDo=i(X),J2=n(X,"LI",{});var Rxe=s(J2);Lge=n(Rxe,"STRONG",{});var pct=s(Lge);WDo=r(pct,"bigbird_pegasus"),pct.forEach(t),HDo=r(Rxe," \u2014 "),OO=n(Rxe,"A",{href:!0});var uct=s(OO);UDo=r(uct,"BigBirdPegasusForQuestionAnswering"),uct.forEach(t),JDo=r(Rxe," (BigBirdPegasus model)"),Rxe.forEach(t),YDo=i(X),Y2=n(X,"LI",{});var Bxe=s(Y2);xge=n(Bxe,"STRONG",{});var _ct=s(xge);KDo=r(_ct,"camembert"),_ct.forEach(t),ZDo=r(Bxe," \u2014 "),VO=n(Bxe,"A",{href:!0});var bct=s(VO);eGo=r(bct,"CamembertForQuestionAnswering"),bct.forEach(t),oGo=r(Bxe," (CamemBERT model)"),Bxe.forEach(t),rGo=i(X),K2=n(X,"LI",{});var Pxe=s(K2);$ge=n(Pxe,"STRONG",{});var vct=s($ge);tGo=r(vct,"canine"),vct.forEach(t),aGo=r(Pxe," \u2014 "),XO=n(Pxe,"A",{href:!0});var Fct=s(XO);nGo=r(Fct,"CanineForQuestionAnswering"),Fct.forEach(t),sGo=r(Pxe," (Canine model)"),Pxe.forEach(t),lGo=i(X),Z2=n(X,"LI",{});var Ixe=s(Z2);kge=n(Ixe,"STRONG",{});var Tct=s(kge);iGo=r(Tct,"convbert"),Tct.forEach(t),dGo=r(Ixe," \u2014 "),zO=n(Ixe,"A",{href:!0});var Mct=s(zO);cGo=r(Mct,"ConvBertForQuestionAnswering"),Mct.forEach(t),fGo=r(Ixe," (ConvBERT model)"),Ixe.forEach(t),mGo=i(X),ev=n(X,"LI",{});var qxe=s(ev);Sge=n(qxe,"STRONG",{});var Ect=s(Sge);gGo=r(Ect,"data2vec-text"),Ect.forEach(t),hGo=r(qxe," \u2014 "),QO=n(qxe,"A",{href:!0});var Cct=s(QO);pGo=r(Cct,"Data2VecTextForQuestionAnswering"),Cct.forEach(t),uGo=r(qxe," (Data2VecText model)"),qxe.forEach(t),_Go=i(X),ov=n(X,"LI",{});var Nxe=s(ov);Rge=n(Nxe,"STRONG",{});var wct=s(Rge);bGo=r(wct,"deberta"),wct.forEach(t),vGo=r(Nxe," \u2014 "),WO=n(Nxe,"A",{href:!0});var Act=s(WO);FGo=r(Act,"DebertaForQuestionAnswering"),Act.forEach(t),TGo=r(Nxe," (DeBERTa model)"),Nxe.forEach(t),MGo=i(X),rv=n(X,"LI",{});var jxe=s(rv);Bge=n(jxe,"STRONG",{});var yct=s(Bge);EGo=r(yct,"deberta-v2"),yct.forEach(t),CGo=r(jxe," \u2014 "),HO=n(jxe,"A",{href:!0});var Lct=s(HO);wGo=r(Lct,"DebertaV2ForQuestionAnswering"),Lct.forEach(t),AGo=r(jxe," (DeBERTa-v2 model)"),jxe.forEach(t),yGo=i(X),tv=n(X,"LI",{});var Dxe=s(tv);Pge=n(Dxe,"STRONG",{});var xct=s(Pge);LGo=r(xct,"distilbert"),xct.forEach(t),xGo=r(Dxe," \u2014 "),UO=n(Dxe,"A",{href:!0});var $ct=s(UO);$Go=r($ct,"DistilBertForQuestionAnswering"),$ct.forEach(t),kGo=r(Dxe," (DistilBERT model)"),Dxe.forEach(t),SGo=i(X),av=n(X,"LI",{});var Gxe=s(av);Ige=n(Gxe,"STRONG",{});var kct=s(Ige);RGo=r(kct,"electra"),kct.forEach(t),BGo=r(Gxe," \u2014 "),JO=n(Gxe,"A",{href:!0});var Sct=s(JO);PGo=r(Sct,"ElectraForQuestionAnswering"),Sct.forEach(t),IGo=r(Gxe," (ELECTRA model)"),Gxe.forEach(t),qGo=i(X),nv=n(X,"LI",{});var Oxe=s(nv);qge=n(Oxe,"STRONG",{});var Rct=s(qge);NGo=r(Rct,"flaubert"),Rct.forEach(t),jGo=r(Oxe," \u2014 "),YO=n(Oxe,"A",{href:!0});var Bct=s(YO);DGo=r(Bct,"FlaubertForQuestionAnsweringSimple"),Bct.forEach(t),GGo=r(Oxe," (FlauBERT model)"),Oxe.forEach(t),OGo=i(X),sv=n(X,"LI",{});var Vxe=s(sv);Nge=n(Vxe,"STRONG",{});var Pct=s(Nge);VGo=r(Pct,"fnet"),Pct.forEach(t),XGo=r(Vxe," \u2014 "),KO=n(Vxe,"A",{href:!0});var Ict=s(KO);zGo=r(Ict,"FNetForQuestionAnswering"),Ict.forEach(t),QGo=r(Vxe," (FNet model)"),Vxe.forEach(t),WGo=i(X),lv=n(X,"LI",{});var Xxe=s(lv);jge=n(Xxe,"STRONG",{});var qct=s(jge);HGo=r(qct,"funnel"),qct.forEach(t),UGo=r(Xxe," \u2014 "),ZO=n(Xxe,"A",{href:!0});var Nct=s(ZO);JGo=r(Nct,"FunnelForQuestionAnswering"),Nct.forEach(t),YGo=r(Xxe," (Funnel Transformer model)"),Xxe.forEach(t),KGo=i(X),iv=n(X,"LI",{});var zxe=s(iv);Dge=n(zxe,"STRONG",{});var jct=s(Dge);ZGo=r(jct,"gptj"),jct.forEach(t),eOo=r(zxe," \u2014 "),eV=n(zxe,"A",{href:!0});var Dct=s(eV);oOo=r(Dct,"GPTJForQuestionAnswering"),Dct.forEach(t),rOo=r(zxe," (GPT-J model)"),zxe.forEach(t),tOo=i(X),dv=n(X,"LI",{});var Qxe=s(dv);Gge=n(Qxe,"STRONG",{});var Gct=s(Gge);aOo=r(Gct,"ibert"),Gct.forEach(t),nOo=r(Qxe," \u2014 "),oV=n(Qxe,"A",{href:!0});var Oct=s(oV);sOo=r(Oct,"IBertForQuestionAnswering"),Oct.forEach(t),lOo=r(Qxe," (I-BERT model)"),Qxe.forEach(t),iOo=i(X),cv=n(X,"LI",{});var Wxe=s(cv);Oge=n(Wxe,"STRONG",{});var Vct=s(Oge);dOo=r(Vct,"layoutlmv2"),Vct.forEach(t),cOo=r(Wxe," \u2014 "),rV=n(Wxe,"A",{href:!0});var Xct=s(rV);fOo=r(Xct,"LayoutLMv2ForQuestionAnswering"),Xct.forEach(t),mOo=r(Wxe," (LayoutLMv2 model)"),Wxe.forEach(t),gOo=i(X),fv=n(X,"LI",{});var Hxe=s(fv);Vge=n(Hxe,"STRONG",{});var zct=s(Vge);hOo=r(zct,"layoutlmv3"),zct.forEach(t),pOo=r(Hxe," \u2014 "),tV=n(Hxe,"A",{href:!0});var Qct=s(tV);uOo=r(Qct,"LayoutLMv3ForQuestionAnswering"),Qct.forEach(t),_Oo=r(Hxe," (LayoutLMv3 model)"),Hxe.forEach(t),bOo=i(X),mv=n(X,"LI",{});var Uxe=s(mv);Xge=n(Uxe,"STRONG",{});var Wct=s(Xge);vOo=r(Wct,"led"),Wct.forEach(t),FOo=r(Uxe," \u2014 "),aV=n(Uxe,"A",{href:!0});var Hct=s(aV);TOo=r(Hct,"LEDForQuestionAnswering"),Hct.forEach(t),MOo=r(Uxe," (LED model)"),Uxe.forEach(t),EOo=i(X),gv=n(X,"LI",{});var Jxe=s(gv);zge=n(Jxe,"STRONG",{});var Uct=s(zge);COo=r(Uct,"longformer"),Uct.forEach(t),wOo=r(Jxe," \u2014 "),nV=n(Jxe,"A",{href:!0});var Jct=s(nV);AOo=r(Jct,"LongformerForQuestionAnswering"),Jct.forEach(t),yOo=r(Jxe," (Longformer model)"),Jxe.forEach(t),LOo=i(X),hv=n(X,"LI",{});var Yxe=s(hv);Qge=n(Yxe,"STRONG",{});var Yct=s(Qge);xOo=r(Yct,"lxmert"),Yct.forEach(t),$Oo=r(Yxe," \u2014 "),sV=n(Yxe,"A",{href:!0});var Kct=s(sV);kOo=r(Kct,"LxmertForQuestionAnswering"),Kct.forEach(t),SOo=r(Yxe," (LXMERT model)"),Yxe.forEach(t),ROo=i(X),pv=n(X,"LI",{});var Kxe=s(pv);Wge=n(Kxe,"STRONG",{});var Zct=s(Wge);BOo=r(Zct,"mbart"),Zct.forEach(t),POo=r(Kxe," \u2014 "),lV=n(Kxe,"A",{href:!0});var eft=s(lV);IOo=r(eft,"MBartForQuestionAnswering"),eft.forEach(t),qOo=r(Kxe," (mBART model)"),Kxe.forEach(t),NOo=i(X),uv=n(X,"LI",{});var Zxe=s(uv);Hge=n(Zxe,"STRONG",{});var oft=s(Hge);jOo=r(oft,"megatron-bert"),oft.forEach(t),DOo=r(Zxe," \u2014 "),iV=n(Zxe,"A",{href:!0});var rft=s(iV);GOo=r(rft,"MegatronBertForQuestionAnswering"),rft.forEach(t),OOo=r(Zxe," (MegatronBert model)"),Zxe.forEach(t),VOo=i(X),_v=n(X,"LI",{});var e9e=s(_v);Uge=n(e9e,"STRONG",{});var tft=s(Uge);XOo=r(tft,"mobilebert"),tft.forEach(t),zOo=r(e9e," \u2014 "),dV=n(e9e,"A",{href:!0});var aft=s(dV);QOo=r(aft,"MobileBertForQuestionAnswering"),aft.forEach(t),WOo=r(e9e," (MobileBERT model)"),e9e.forEach(t),HOo=i(X),bv=n(X,"LI",{});var o9e=s(bv);Jge=n(o9e,"STRONG",{});var nft=s(Jge);UOo=r(nft,"mpnet"),nft.forEach(t),JOo=r(o9e," \u2014 "),cV=n(o9e,"A",{href:!0});var sft=s(cV);YOo=r(sft,"MPNetForQuestionAnswering"),sft.forEach(t),KOo=r(o9e," (MPNet model)"),o9e.forEach(t),ZOo=i(X),vv=n(X,"LI",{});var r9e=s(vv);Yge=n(r9e,"STRONG",{});var lft=s(Yge);eVo=r(lft,"nystromformer"),lft.forEach(t),oVo=r(r9e," \u2014 "),fV=n(r9e,"A",{href:!0});var ift=s(fV);rVo=r(ift,"NystromformerForQuestionAnswering"),ift.forEach(t),tVo=r(r9e," (Nystromformer model)"),r9e.forEach(t),aVo=i(X),Fv=n(X,"LI",{});var t9e=s(Fv);Kge=n(t9e,"STRONG",{});var dft=s(Kge);nVo=r(dft,"qdqbert"),dft.forEach(t),sVo=r(t9e," \u2014 "),mV=n(t9e,"A",{href:!0});var cft=s(mV);lVo=r(cft,"QDQBertForQuestionAnswering"),cft.forEach(t),iVo=r(t9e," (QDQBert model)"),t9e.forEach(t),dVo=i(X),Tv=n(X,"LI",{});var a9e=s(Tv);Zge=n(a9e,"STRONG",{});var fft=s(Zge);cVo=r(fft,"reformer"),fft.forEach(t),fVo=r(a9e," \u2014 "),gV=n(a9e,"A",{href:!0});var mft=s(gV);mVo=r(mft,"ReformerForQuestionAnswering"),mft.forEach(t),gVo=r(a9e," (Reformer model)"),a9e.forEach(t),hVo=i(X),Mv=n(X,"LI",{});var n9e=s(Mv);ehe=n(n9e,"STRONG",{});var gft=s(ehe);pVo=r(gft,"rembert"),gft.forEach(t),uVo=r(n9e," \u2014 "),hV=n(n9e,"A",{href:!0});var hft=s(hV);_Vo=r(hft,"RemBertForQuestionAnswering"),hft.forEach(t),bVo=r(n9e," (RemBERT model)"),n9e.forEach(t),vVo=i(X),Ev=n(X,"LI",{});var s9e=s(Ev);ohe=n(s9e,"STRONG",{});var pft=s(ohe);FVo=r(pft,"roberta"),pft.forEach(t),TVo=r(s9e," \u2014 "),pV=n(s9e,"A",{href:!0});var uft=s(pV);MVo=r(uft,"RobertaForQuestionAnswering"),uft.forEach(t),EVo=r(s9e," (RoBERTa model)"),s9e.forEach(t),CVo=i(X),Cv=n(X,"LI",{});var l9e=s(Cv);rhe=n(l9e,"STRONG",{});var _ft=s(rhe);wVo=r(_ft,"roformer"),_ft.forEach(t),AVo=r(l9e," \u2014 "),uV=n(l9e,"A",{href:!0});var bft=s(uV);yVo=r(bft,"RoFormerForQuestionAnswering"),bft.forEach(t),LVo=r(l9e," (RoFormer model)"),l9e.forEach(t),xVo=i(X),wv=n(X,"LI",{});var i9e=s(wv);the=n(i9e,"STRONG",{});var vft=s(the);$Vo=r(vft,"splinter"),vft.forEach(t),kVo=r(i9e," \u2014 "),_V=n(i9e,"A",{href:!0});var Fft=s(_V);SVo=r(Fft,"SplinterForQuestionAnswering"),Fft.forEach(t),RVo=r(i9e," (Splinter model)"),i9e.forEach(t),BVo=i(X),Av=n(X,"LI",{});var d9e=s(Av);ahe=n(d9e,"STRONG",{});var Tft=s(ahe);PVo=r(Tft,"squeezebert"),Tft.forEach(t),IVo=r(d9e," \u2014 "),bV=n(d9e,"A",{href:!0});var Mft=s(bV);qVo=r(Mft,"SqueezeBertForQuestionAnswering"),Mft.forEach(t),NVo=r(d9e," (SqueezeBERT model)"),d9e.forEach(t),jVo=i(X),yv=n(X,"LI",{});var c9e=s(yv);nhe=n(c9e,"STRONG",{});var Eft=s(nhe);DVo=r(Eft,"xlm"),Eft.forEach(t),GVo=r(c9e," \u2014 "),vV=n(c9e,"A",{href:!0});var Cft=s(vV);OVo=r(Cft,"XLMForQuestionAnsweringSimple"),Cft.forEach(t),VVo=r(c9e," (XLM model)"),c9e.forEach(t),XVo=i(X),Lv=n(X,"LI",{});var f9e=s(Lv);she=n(f9e,"STRONG",{});var wft=s(she);zVo=r(wft,"xlm-roberta"),wft.forEach(t),QVo=r(f9e," \u2014 "),FV=n(f9e,"A",{href:!0});var Aft=s(FV);WVo=r(Aft,"XLMRobertaForQuestionAnswering"),Aft.forEach(t),HVo=r(f9e," (XLM-RoBERTa model)"),f9e.forEach(t),UVo=i(X),xv=n(X,"LI",{});var m9e=s(xv);lhe=n(m9e,"STRONG",{});var yft=s(lhe);JVo=r(yft,"xlm-roberta-xl"),yft.forEach(t),YVo=r(m9e," \u2014 "),TV=n(m9e,"A",{href:!0});var Lft=s(TV);KVo=r(Lft,"XLMRobertaXLForQuestionAnswering"),Lft.forEach(t),ZVo=r(m9e," (XLM-RoBERTa-XL model)"),m9e.forEach(t),eXo=i(X),$v=n(X,"LI",{});var g9e=s($v);ihe=n(g9e,"STRONG",{});var xft=s(ihe);oXo=r(xft,"xlnet"),xft.forEach(t),rXo=r(g9e," \u2014 "),MV=n(g9e,"A",{href:!0});var $ft=s(MV);tXo=r($ft,"XLNetForQuestionAnsweringSimple"),$ft.forEach(t),aXo=r(g9e," (XLNet model)"),g9e.forEach(t),nXo=i(X),kv=n(X,"LI",{});var h9e=s(kv);dhe=n(h9e,"STRONG",{});var kft=s(dhe);sXo=r(kft,"yoso"),kft.forEach(t),lXo=r(h9e," \u2014 "),EV=n(h9e,"A",{href:!0});var Sft=s(EV);iXo=r(Sft,"YosoForQuestionAnswering"),Sft.forEach(t),dXo=r(h9e," (YOSO model)"),h9e.forEach(t),X.forEach(t),cXo=i(ia),Sv=n(ia,"P",{});var p9e=s(Sv);fXo=r(p9e,"The model is set in evaluation mode by default using "),che=n(p9e,"CODE",{});var Rft=s(che);mXo=r(Rft,"model.eval()"),Rft.forEach(t),gXo=r(p9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=n(p9e,"CODE",{});var Bft=s(fhe);hXo=r(Bft,"model.train()"),Bft.forEach(t),p9e.forEach(t),pXo=i(ia),T(Rv.$$.fragment,ia),ia.forEach(t),Js.forEach(t),jIe=i(f),Ki=n(f,"H2",{class:!0});var VNe=s(Ki);Bv=n(VNe,"A",{id:!0,class:!0,href:!0});var Pft=s(Bv);mhe=n(Pft,"SPAN",{});var Ift=s(mhe);T(Ey.$$.fragment,Ift),Ift.forEach(t),Pft.forEach(t),uXo=i(VNe),ghe=n(VNe,"SPAN",{});var qft=s(ghe);_Xo=r(qft,"AutoModelForTableQuestionAnswering"),qft.forEach(t),VNe.forEach(t),DIe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Cy.$$.fragment,Ys),bXo=i(Ys),Zi=n(Ys,"P",{});var NK=s(Zi);vXo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CV=n(NK,"A",{href:!0});var Nft=s(CV);FXo=r(Nft,"from_pretrained()"),Nft.forEach(t),TXo=r(NK," class method or the "),wV=n(NK,"A",{href:!0});var jft=s(wV);MXo=r(jft,"from_config()"),jft.forEach(t),EXo=r(NK,` class
method.`),NK.forEach(t),CXo=i(Ys),wy=n(Ys,"P",{});var XNe=s(wy);wXo=r(XNe,"This class cannot be instantiated directly using "),hhe=n(XNe,"CODE",{});var Dft=s(hhe);AXo=r(Dft,"__init__()"),Dft.forEach(t),yXo=r(XNe," (throws an error)."),XNe.forEach(t),LXo=i(Ys),ft=n(Ys,"DIV",{class:!0});var C3=s(ft);T(Ay.$$.fragment,C3),xXo=i(C3),phe=n(C3,"P",{});var Gft=s(phe);$Xo=r(Gft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Gft.forEach(t),kXo=i(C3),ed=n(C3,"P",{});var jK=s(ed);SXo=r(jK,`Note:
Loading a model from its configuration file does `),uhe=n(jK,"STRONG",{});var Oft=s(uhe);RXo=r(Oft,"not"),Oft.forEach(t),BXo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=n(jK,"A",{href:!0});var Vft=s(AV);PXo=r(Vft,"from_pretrained()"),Vft.forEach(t),IXo=r(jK," to load the model weights."),jK.forEach(t),qXo=i(C3),T(Pv.$$.fragment,C3),C3.forEach(t),NXo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(yy.$$.fragment,da),jXo=i(da),_he=n(da,"P",{});var Xft=s(_he);DXo=r(Xft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Xft.forEach(t),GXo=i(da),Ia=n(da,"P",{});var w3=s(Ia);OXo=r(w3,"The model class to instantiate is selected based on the "),bhe=n(w3,"CODE",{});var zft=s(bhe);VXo=r(zft,"model_type"),zft.forEach(t),XXo=r(w3,` property of the config object (either
passed as an argument or loaded from `),vhe=n(w3,"CODE",{});var Qft=s(vhe);zXo=r(Qft,"pretrained_model_name_or_path"),Qft.forEach(t),QXo=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(w3,"CODE",{});var Wft=s(Fhe);WXo=r(Wft,"pretrained_model_name_or_path"),Wft.forEach(t),HXo=r(w3,":"),w3.forEach(t),UXo=i(da),The=n(da,"UL",{});var Hft=s(The);Iv=n(Hft,"LI",{});var u9e=s(Iv);Mhe=n(u9e,"STRONG",{});var Uft=s(Mhe);JXo=r(Uft,"tapas"),Uft.forEach(t),YXo=r(u9e," \u2014 "),yV=n(u9e,"A",{href:!0});var Jft=s(yV);KXo=r(Jft,"TapasForQuestionAnswering"),Jft.forEach(t),ZXo=r(u9e," (TAPAS model)"),u9e.forEach(t),Hft.forEach(t),ezo=i(da),qv=n(da,"P",{});var _9e=s(qv);ozo=r(_9e,"The model is set in evaluation mode by default using "),Ehe=n(_9e,"CODE",{});var Yft=s(Ehe);rzo=r(Yft,"model.eval()"),Yft.forEach(t),tzo=r(_9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(_9e,"CODE",{});var Kft=s(Che);azo=r(Kft,"model.train()"),Kft.forEach(t),_9e.forEach(t),nzo=i(da),T(Nv.$$.fragment,da),da.forEach(t),Ys.forEach(t),GIe=i(f),od=n(f,"H2",{class:!0});var zNe=s(od);jv=n(zNe,"A",{id:!0,class:!0,href:!0});var Zft=s(jv);whe=n(Zft,"SPAN",{});var emt=s(whe);T(Ly.$$.fragment,emt),emt.forEach(t),Zft.forEach(t),szo=i(zNe),Ahe=n(zNe,"SPAN",{});var omt=s(Ahe);lzo=r(omt,"AutoModelForImageClassification"),omt.forEach(t),zNe.forEach(t),OIe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(xy.$$.fragment,Ks),izo=i(Ks),rd=n(Ks,"P",{});var DK=s(rd);dzo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LV=n(DK,"A",{href:!0});var rmt=s(LV);czo=r(rmt,"from_pretrained()"),rmt.forEach(t),fzo=r(DK," class method or the "),xV=n(DK,"A",{href:!0});var tmt=s(xV);mzo=r(tmt,"from_config()"),tmt.forEach(t),gzo=r(DK,` class
method.`),DK.forEach(t),hzo=i(Ks),$y=n(Ks,"P",{});var QNe=s($y);pzo=r(QNe,"This class cannot be instantiated directly using "),yhe=n(QNe,"CODE",{});var amt=s(yhe);uzo=r(amt,"__init__()"),amt.forEach(t),_zo=r(QNe," (throws an error)."),QNe.forEach(t),bzo=i(Ks),mt=n(Ks,"DIV",{class:!0});var A3=s(mt);T(ky.$$.fragment,A3),vzo=i(A3),Lhe=n(A3,"P",{});var nmt=s(Lhe);Fzo=r(nmt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nmt.forEach(t),Tzo=i(A3),td=n(A3,"P",{});var GK=s(td);Mzo=r(GK,`Note:
Loading a model from its configuration file does `),xhe=n(GK,"STRONG",{});var smt=s(xhe);Ezo=r(smt,"not"),smt.forEach(t),Czo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=n(GK,"A",{href:!0});var lmt=s($V);wzo=r(lmt,"from_pretrained()"),lmt.forEach(t),Azo=r(GK," to load the model weights."),GK.forEach(t),yzo=i(A3),T(Dv.$$.fragment,A3),A3.forEach(t),Lzo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(Sy.$$.fragment,ca),xzo=i(ca),$he=n(ca,"P",{});var imt=s($he);$zo=r(imt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),imt.forEach(t),kzo=i(ca),qa=n(ca,"P",{});var y3=s(qa);Szo=r(y3,"The model class to instantiate is selected based on the "),khe=n(y3,"CODE",{});var dmt=s(khe);Rzo=r(dmt,"model_type"),dmt.forEach(t),Bzo=r(y3,` property of the config object (either
passed as an argument or loaded from `),She=n(y3,"CODE",{});var cmt=s(She);Pzo=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),Izo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(y3,"CODE",{});var fmt=s(Rhe);qzo=r(fmt,"pretrained_model_name_or_path"),fmt.forEach(t),Nzo=r(y3,":"),y3.forEach(t),jzo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);Gv=n(Ee,"LI",{});var b9e=s(Gv);Bhe=n(b9e,"STRONG",{});var mmt=s(Bhe);Dzo=r(mmt,"beit"),mmt.forEach(t),Gzo=r(b9e," \u2014 "),kV=n(b9e,"A",{href:!0});var gmt=s(kV);Ozo=r(gmt,"BeitForImageClassification"),gmt.forEach(t),Vzo=r(b9e," (BEiT model)"),b9e.forEach(t),Xzo=i(Ee),Ov=n(Ee,"LI",{});var v9e=s(Ov);Phe=n(v9e,"STRONG",{});var hmt=s(Phe);zzo=r(hmt,"convnext"),hmt.forEach(t),Qzo=r(v9e," \u2014 "),SV=n(v9e,"A",{href:!0});var pmt=s(SV);Wzo=r(pmt,"ConvNextForImageClassification"),pmt.forEach(t),Hzo=r(v9e," (ConvNext model)"),v9e.forEach(t),Uzo=i(Ee),Vv=n(Ee,"LI",{});var F9e=s(Vv);Ihe=n(F9e,"STRONG",{});var umt=s(Ihe);Jzo=r(umt,"data2vec-vision"),umt.forEach(t),Yzo=r(F9e," \u2014 "),RV=n(F9e,"A",{href:!0});var _mt=s(RV);Kzo=r(_mt,"Data2VecVisionForImageClassification"),_mt.forEach(t),Zzo=r(F9e," (Data2VecVision model)"),F9e.forEach(t),eQo=i(Ee),Bs=n(Ee,"LI",{});var _$=s(Bs);qhe=n(_$,"STRONG",{});var bmt=s(qhe);oQo=r(bmt,"deit"),bmt.forEach(t),rQo=r(_$," \u2014 "),BV=n(_$,"A",{href:!0});var vmt=s(BV);tQo=r(vmt,"DeiTForImageClassification"),vmt.forEach(t),aQo=r(_$," or "),PV=n(_$,"A",{href:!0});var Fmt=s(PV);nQo=r(Fmt,"DeiTForImageClassificationWithTeacher"),Fmt.forEach(t),sQo=r(_$," (DeiT model)"),_$.forEach(t),lQo=i(Ee),Xv=n(Ee,"LI",{});var T9e=s(Xv);Nhe=n(T9e,"STRONG",{});var Tmt=s(Nhe);iQo=r(Tmt,"imagegpt"),Tmt.forEach(t),dQo=r(T9e," \u2014 "),IV=n(T9e,"A",{href:!0});var Mmt=s(IV);cQo=r(Mmt,"ImageGPTForImageClassification"),Mmt.forEach(t),fQo=r(T9e," (ImageGPT model)"),T9e.forEach(t),mQo=i(Ee),gt=n(Ee,"LI",{});var mf=s(gt);jhe=n(mf,"STRONG",{});var Emt=s(jhe);gQo=r(Emt,"perceiver"),Emt.forEach(t),hQo=r(mf," \u2014 "),qV=n(mf,"A",{href:!0});var Cmt=s(qV);pQo=r(Cmt,"PerceiverForImageClassificationLearned"),Cmt.forEach(t),uQo=r(mf," or "),NV=n(mf,"A",{href:!0});var wmt=s(NV);_Qo=r(wmt,"PerceiverForImageClassificationFourier"),wmt.forEach(t),bQo=r(mf," or "),jV=n(mf,"A",{href:!0});var Amt=s(jV);vQo=r(Amt,"PerceiverForImageClassificationConvProcessing"),Amt.forEach(t),FQo=r(mf," (Perceiver model)"),mf.forEach(t),TQo=i(Ee),zv=n(Ee,"LI",{});var M9e=s(zv);Dhe=n(M9e,"STRONG",{});var ymt=s(Dhe);MQo=r(ymt,"poolformer"),ymt.forEach(t),EQo=r(M9e," \u2014 "),DV=n(M9e,"A",{href:!0});var Lmt=s(DV);CQo=r(Lmt,"PoolFormerForImageClassification"),Lmt.forEach(t),wQo=r(M9e," (PoolFormer model)"),M9e.forEach(t),AQo=i(Ee),Qv=n(Ee,"LI",{});var E9e=s(Qv);Ghe=n(E9e,"STRONG",{});var xmt=s(Ghe);yQo=r(xmt,"regnet"),xmt.forEach(t),LQo=r(E9e," \u2014 "),GV=n(E9e,"A",{href:!0});var $mt=s(GV);xQo=r($mt,"RegNetForImageClassification"),$mt.forEach(t),$Qo=r(E9e," (RegNet model)"),E9e.forEach(t),kQo=i(Ee),Wv=n(Ee,"LI",{});var C9e=s(Wv);Ohe=n(C9e,"STRONG",{});var kmt=s(Ohe);SQo=r(kmt,"resnet"),kmt.forEach(t),RQo=r(C9e," \u2014 "),OV=n(C9e,"A",{href:!0});var Smt=s(OV);BQo=r(Smt,"ResNetForImageClassification"),Smt.forEach(t),PQo=r(C9e," (ResNet model)"),C9e.forEach(t),IQo=i(Ee),Hv=n(Ee,"LI",{});var w9e=s(Hv);Vhe=n(w9e,"STRONG",{});var Rmt=s(Vhe);qQo=r(Rmt,"segformer"),Rmt.forEach(t),NQo=r(w9e," \u2014 "),VV=n(w9e,"A",{href:!0});var Bmt=s(VV);jQo=r(Bmt,"SegformerForImageClassification"),Bmt.forEach(t),DQo=r(w9e," (SegFormer model)"),w9e.forEach(t),GQo=i(Ee),Uv=n(Ee,"LI",{});var A9e=s(Uv);Xhe=n(A9e,"STRONG",{});var Pmt=s(Xhe);OQo=r(Pmt,"swin"),Pmt.forEach(t),VQo=r(A9e," \u2014 "),XV=n(A9e,"A",{href:!0});var Imt=s(XV);XQo=r(Imt,"SwinForImageClassification"),Imt.forEach(t),zQo=r(A9e," (Swin model)"),A9e.forEach(t),QQo=i(Ee),Jv=n(Ee,"LI",{});var y9e=s(Jv);zhe=n(y9e,"STRONG",{});var qmt=s(zhe);WQo=r(qmt,"van"),qmt.forEach(t),HQo=r(y9e," \u2014 "),zV=n(y9e,"A",{href:!0});var Nmt=s(zV);UQo=r(Nmt,"VanForImageClassification"),Nmt.forEach(t),JQo=r(y9e," (VAN model)"),y9e.forEach(t),YQo=i(Ee),Yv=n(Ee,"LI",{});var L9e=s(Yv);Qhe=n(L9e,"STRONG",{});var jmt=s(Qhe);KQo=r(jmt,"vit"),jmt.forEach(t),ZQo=r(L9e," \u2014 "),QV=n(L9e,"A",{href:!0});var Dmt=s(QV);eWo=r(Dmt,"ViTForImageClassification"),Dmt.forEach(t),oWo=r(L9e," (ViT model)"),L9e.forEach(t),Ee.forEach(t),rWo=i(ca),Kv=n(ca,"P",{});var x9e=s(Kv);tWo=r(x9e,"The model is set in evaluation mode by default using "),Whe=n(x9e,"CODE",{});var Gmt=s(Whe);aWo=r(Gmt,"model.eval()"),Gmt.forEach(t),nWo=r(x9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hhe=n(x9e,"CODE",{});var Omt=s(Hhe);sWo=r(Omt,"model.train()"),Omt.forEach(t),x9e.forEach(t),lWo=i(ca),T(Zv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),VIe=i(f),ad=n(f,"H2",{class:!0});var WNe=s(ad);eF=n(WNe,"A",{id:!0,class:!0,href:!0});var Vmt=s(eF);Uhe=n(Vmt,"SPAN",{});var Xmt=s(Uhe);T(Ry.$$.fragment,Xmt),Xmt.forEach(t),Vmt.forEach(t),iWo=i(WNe),Jhe=n(WNe,"SPAN",{});var zmt=s(Jhe);dWo=r(zmt,"AutoModelForVision2Seq"),zmt.forEach(t),WNe.forEach(t),XIe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(By.$$.fragment,Zs),cWo=i(Zs),nd=n(Zs,"P",{});var OK=s(nd);fWo=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WV=n(OK,"A",{href:!0});var Qmt=s(WV);mWo=r(Qmt,"from_pretrained()"),Qmt.forEach(t),gWo=r(OK," class method or the "),HV=n(OK,"A",{href:!0});var Wmt=s(HV);hWo=r(Wmt,"from_config()"),Wmt.forEach(t),pWo=r(OK,` class
method.`),OK.forEach(t),uWo=i(Zs),Py=n(Zs,"P",{});var HNe=s(Py);_Wo=r(HNe,"This class cannot be instantiated directly using "),Yhe=n(HNe,"CODE",{});var Hmt=s(Yhe);bWo=r(Hmt,"__init__()"),Hmt.forEach(t),vWo=r(HNe," (throws an error)."),HNe.forEach(t),FWo=i(Zs),ht=n(Zs,"DIV",{class:!0});var L3=s(ht);T(Iy.$$.fragment,L3),TWo=i(L3),Khe=n(L3,"P",{});var Umt=s(Khe);MWo=r(Umt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Umt.forEach(t),EWo=i(L3),sd=n(L3,"P",{});var VK=s(sd);CWo=r(VK,`Note:
Loading a model from its configuration file does `),Zhe=n(VK,"STRONG",{});var Jmt=s(Zhe);wWo=r(Jmt,"not"),Jmt.forEach(t),AWo=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(VK,"A",{href:!0});var Ymt=s(UV);yWo=r(Ymt,"from_pretrained()"),Ymt.forEach(t),LWo=r(VK," to load the model weights."),VK.forEach(t),xWo=i(L3),T(oF.$$.fragment,L3),L3.forEach(t),$Wo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(qy.$$.fragment,fa),kWo=i(fa),epe=n(fa,"P",{});var Kmt=s(epe);SWo=r(Kmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kmt.forEach(t),RWo=i(fa),Na=n(fa,"P",{});var x3=s(Na);BWo=r(x3,"The model class to instantiate is selected based on the "),ope=n(x3,"CODE",{});var Zmt=s(ope);PWo=r(Zmt,"model_type"),Zmt.forEach(t),IWo=r(x3,` property of the config object (either
passed as an argument or loaded from `),rpe=n(x3,"CODE",{});var egt=s(rpe);qWo=r(egt,"pretrained_model_name_or_path"),egt.forEach(t),NWo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=n(x3,"CODE",{});var ogt=s(tpe);jWo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),DWo=r(x3,":"),x3.forEach(t),GWo=i(fa),ape=n(fa,"UL",{});var rgt=s(ape);rF=n(rgt,"LI",{});var $9e=s(rF);npe=n($9e,"STRONG",{});var tgt=s(npe);OWo=r(tgt,"vision-encoder-decoder"),tgt.forEach(t),VWo=r($9e," \u2014 "),JV=n($9e,"A",{href:!0});var agt=s(JV);XWo=r(agt,"VisionEncoderDecoderModel"),agt.forEach(t),zWo=r($9e," (Vision Encoder decoder model)"),$9e.forEach(t),rgt.forEach(t),QWo=i(fa),tF=n(fa,"P",{});var k9e=s(tF);WWo=r(k9e,"The model is set in evaluation mode by default using "),spe=n(k9e,"CODE",{});var ngt=s(spe);HWo=r(ngt,"model.eval()"),ngt.forEach(t),UWo=r(k9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=n(k9e,"CODE",{});var sgt=s(lpe);JWo=r(sgt,"model.train()"),sgt.forEach(t),k9e.forEach(t),YWo=i(fa),T(aF.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),zIe=i(f),ld=n(f,"H2",{class:!0});var UNe=s(ld);nF=n(UNe,"A",{id:!0,class:!0,href:!0});var lgt=s(nF);ipe=n(lgt,"SPAN",{});var igt=s(ipe);T(Ny.$$.fragment,igt),igt.forEach(t),lgt.forEach(t),KWo=i(UNe),dpe=n(UNe,"SPAN",{});var dgt=s(dpe);ZWo=r(dgt,"AutoModelForAudioClassification"),dgt.forEach(t),UNe.forEach(t),QIe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(jy.$$.fragment,el),eHo=i(el),id=n(el,"P",{});var XK=s(id);oHo=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YV=n(XK,"A",{href:!0});var cgt=s(YV);rHo=r(cgt,"from_pretrained()"),cgt.forEach(t),tHo=r(XK," class method or the "),KV=n(XK,"A",{href:!0});var fgt=s(KV);aHo=r(fgt,"from_config()"),fgt.forEach(t),nHo=r(XK,` class
method.`),XK.forEach(t),sHo=i(el),Dy=n(el,"P",{});var JNe=s(Dy);lHo=r(JNe,"This class cannot be instantiated directly using "),cpe=n(JNe,"CODE",{});var mgt=s(cpe);iHo=r(mgt,"__init__()"),mgt.forEach(t),dHo=r(JNe," (throws an error)."),JNe.forEach(t),cHo=i(el),pt=n(el,"DIV",{class:!0});var $3=s(pt);T(Gy.$$.fragment,$3),fHo=i($3),fpe=n($3,"P",{});var ggt=s(fpe);mHo=r(ggt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ggt.forEach(t),gHo=i($3),dd=n($3,"P",{});var zK=s(dd);hHo=r(zK,`Note:
Loading a model from its configuration file does `),mpe=n(zK,"STRONG",{});var hgt=s(mpe);pHo=r(hgt,"not"),hgt.forEach(t),uHo=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(zK,"A",{href:!0});var pgt=s(ZV);_Ho=r(pgt,"from_pretrained()"),pgt.forEach(t),bHo=r(zK," to load the model weights."),zK.forEach(t),vHo=i($3),T(sF.$$.fragment,$3),$3.forEach(t),FHo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(Oy.$$.fragment,ma),THo=i(ma),gpe=n(ma,"P",{});var ugt=s(gpe);MHo=r(ugt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ugt.forEach(t),EHo=i(ma),ja=n(ma,"P",{});var k3=s(ja);CHo=r(k3,"The model class to instantiate is selected based on the "),hpe=n(k3,"CODE",{});var _gt=s(hpe);wHo=r(_gt,"model_type"),_gt.forEach(t),AHo=r(k3,` property of the config object (either
passed as an argument or loaded from `),ppe=n(k3,"CODE",{});var bgt=s(ppe);yHo=r(bgt,"pretrained_model_name_or_path"),bgt.forEach(t),LHo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=n(k3,"CODE",{});var vgt=s(upe);xHo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),$Ho=r(k3,":"),k3.forEach(t),kHo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);lF=n(bo,"LI",{});var S9e=s(lF);_pe=n(S9e,"STRONG",{});var Fgt=s(_pe);SHo=r(Fgt,"data2vec-audio"),Fgt.forEach(t),RHo=r(S9e," \u2014 "),eX=n(S9e,"A",{href:!0});var Tgt=s(eX);BHo=r(Tgt,"Data2VecAudioForSequenceClassification"),Tgt.forEach(t),PHo=r(S9e," (Data2VecAudio model)"),S9e.forEach(t),IHo=i(bo),iF=n(bo,"LI",{});var R9e=s(iF);bpe=n(R9e,"STRONG",{});var Mgt=s(bpe);qHo=r(Mgt,"hubert"),Mgt.forEach(t),NHo=r(R9e," \u2014 "),oX=n(R9e,"A",{href:!0});var Egt=s(oX);jHo=r(Egt,"HubertForSequenceClassification"),Egt.forEach(t),DHo=r(R9e," (Hubert model)"),R9e.forEach(t),GHo=i(bo),dF=n(bo,"LI",{});var B9e=s(dF);vpe=n(B9e,"STRONG",{});var Cgt=s(vpe);OHo=r(Cgt,"sew"),Cgt.forEach(t),VHo=r(B9e," \u2014 "),rX=n(B9e,"A",{href:!0});var wgt=s(rX);XHo=r(wgt,"SEWForSequenceClassification"),wgt.forEach(t),zHo=r(B9e," (SEW model)"),B9e.forEach(t),QHo=i(bo),cF=n(bo,"LI",{});var P9e=s(cF);Fpe=n(P9e,"STRONG",{});var Agt=s(Fpe);WHo=r(Agt,"sew-d"),Agt.forEach(t),HHo=r(P9e," \u2014 "),tX=n(P9e,"A",{href:!0});var ygt=s(tX);UHo=r(ygt,"SEWDForSequenceClassification"),ygt.forEach(t),JHo=r(P9e," (SEW-D model)"),P9e.forEach(t),YHo=i(bo),fF=n(bo,"LI",{});var I9e=s(fF);Tpe=n(I9e,"STRONG",{});var Lgt=s(Tpe);KHo=r(Lgt,"unispeech"),Lgt.forEach(t),ZHo=r(I9e," \u2014 "),aX=n(I9e,"A",{href:!0});var xgt=s(aX);eUo=r(xgt,"UniSpeechForSequenceClassification"),xgt.forEach(t),oUo=r(I9e," (UniSpeech model)"),I9e.forEach(t),rUo=i(bo),mF=n(bo,"LI",{});var q9e=s(mF);Mpe=n(q9e,"STRONG",{});var $gt=s(Mpe);tUo=r($gt,"unispeech-sat"),$gt.forEach(t),aUo=r(q9e," \u2014 "),nX=n(q9e,"A",{href:!0});var kgt=s(nX);nUo=r(kgt,"UniSpeechSatForSequenceClassification"),kgt.forEach(t),sUo=r(q9e," (UniSpeechSat model)"),q9e.forEach(t),lUo=i(bo),gF=n(bo,"LI",{});var N9e=s(gF);Epe=n(N9e,"STRONG",{});var Sgt=s(Epe);iUo=r(Sgt,"wav2vec2"),Sgt.forEach(t),dUo=r(N9e," \u2014 "),sX=n(N9e,"A",{href:!0});var Rgt=s(sX);cUo=r(Rgt,"Wav2Vec2ForSequenceClassification"),Rgt.forEach(t),fUo=r(N9e," (Wav2Vec2 model)"),N9e.forEach(t),mUo=i(bo),hF=n(bo,"LI",{});var j9e=s(hF);Cpe=n(j9e,"STRONG",{});var Bgt=s(Cpe);gUo=r(Bgt,"wavlm"),Bgt.forEach(t),hUo=r(j9e," \u2014 "),lX=n(j9e,"A",{href:!0});var Pgt=s(lX);pUo=r(Pgt,"WavLMForSequenceClassification"),Pgt.forEach(t),uUo=r(j9e," (WavLM model)"),j9e.forEach(t),bo.forEach(t),_Uo=i(ma),pF=n(ma,"P",{});var D9e=s(pF);bUo=r(D9e,"The model is set in evaluation mode by default using "),wpe=n(D9e,"CODE",{});var Igt=s(wpe);vUo=r(Igt,"model.eval()"),Igt.forEach(t),FUo=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=n(D9e,"CODE",{});var qgt=s(Ape);TUo=r(qgt,"model.train()"),qgt.forEach(t),D9e.forEach(t),MUo=i(ma),T(uF.$$.fragment,ma),ma.forEach(t),el.forEach(t),WIe=i(f),cd=n(f,"H2",{class:!0});var YNe=s(cd);_F=n(YNe,"A",{id:!0,class:!0,href:!0});var Ngt=s(_F);ype=n(Ngt,"SPAN",{});var jgt=s(ype);T(Vy.$$.fragment,jgt),jgt.forEach(t),Ngt.forEach(t),EUo=i(YNe),Lpe=n(YNe,"SPAN",{});var Dgt=s(Lpe);CUo=r(Dgt,"AutoModelForAudioFrameClassification"),Dgt.forEach(t),YNe.forEach(t),HIe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(Xy.$$.fragment,ol),wUo=i(ol),fd=n(ol,"P",{});var QK=s(fd);AUo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iX=n(QK,"A",{href:!0});var Ggt=s(iX);yUo=r(Ggt,"from_pretrained()"),Ggt.forEach(t),LUo=r(QK," class method or the "),dX=n(QK,"A",{href:!0});var Ogt=s(dX);xUo=r(Ogt,"from_config()"),Ogt.forEach(t),$Uo=r(QK,` class
method.`),QK.forEach(t),kUo=i(ol),zy=n(ol,"P",{});var KNe=s(zy);SUo=r(KNe,"This class cannot be instantiated directly using "),xpe=n(KNe,"CODE",{});var Vgt=s(xpe);RUo=r(Vgt,"__init__()"),Vgt.forEach(t),BUo=r(KNe," (throws an error)."),KNe.forEach(t),PUo=i(ol),ut=n(ol,"DIV",{class:!0});var S3=s(ut);T(Qy.$$.fragment,S3),IUo=i(S3),$pe=n(S3,"P",{});var Xgt=s($pe);qUo=r(Xgt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Xgt.forEach(t),NUo=i(S3),md=n(S3,"P",{});var WK=s(md);jUo=r(WK,`Note:
Loading a model from its configuration file does `),kpe=n(WK,"STRONG",{});var zgt=s(kpe);DUo=r(zgt,"not"),zgt.forEach(t),GUo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(WK,"A",{href:!0});var Qgt=s(cX);OUo=r(Qgt,"from_pretrained()"),Qgt.forEach(t),VUo=r(WK," to load the model weights."),WK.forEach(t),XUo=i(S3),T(bF.$$.fragment,S3),S3.forEach(t),zUo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(Wy.$$.fragment,ga),QUo=i(ga),Spe=n(ga,"P",{});var Wgt=s(Spe);WUo=r(Wgt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Wgt.forEach(t),HUo=i(ga),Da=n(ga,"P",{});var R3=s(Da);UUo=r(R3,"The model class to instantiate is selected based on the "),Rpe=n(R3,"CODE",{});var Hgt=s(Rpe);JUo=r(Hgt,"model_type"),Hgt.forEach(t),YUo=r(R3,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(R3,"CODE",{});var Ugt=s(Bpe);KUo=r(Ugt,"pretrained_model_name_or_path"),Ugt.forEach(t),ZUo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=n(R3,"CODE",{});var Jgt=s(Ppe);eJo=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),oJo=r(R3,":"),R3.forEach(t),rJo=i(ga),Ga=n(ga,"UL",{});var B3=s(Ga);vF=n(B3,"LI",{});var G9e=s(vF);Ipe=n(G9e,"STRONG",{});var Ygt=s(Ipe);tJo=r(Ygt,"data2vec-audio"),Ygt.forEach(t),aJo=r(G9e," \u2014 "),fX=n(G9e,"A",{href:!0});var Kgt=s(fX);nJo=r(Kgt,"Data2VecAudioForAudioFrameClassification"),Kgt.forEach(t),sJo=r(G9e," (Data2VecAudio model)"),G9e.forEach(t),lJo=i(B3),FF=n(B3,"LI",{});var O9e=s(FF);qpe=n(O9e,"STRONG",{});var Zgt=s(qpe);iJo=r(Zgt,"unispeech-sat"),Zgt.forEach(t),dJo=r(O9e," \u2014 "),mX=n(O9e,"A",{href:!0});var eht=s(mX);cJo=r(eht,"UniSpeechSatForAudioFrameClassification"),eht.forEach(t),fJo=r(O9e," (UniSpeechSat model)"),O9e.forEach(t),mJo=i(B3),TF=n(B3,"LI",{});var V9e=s(TF);Npe=n(V9e,"STRONG",{});var oht=s(Npe);gJo=r(oht,"wav2vec2"),oht.forEach(t),hJo=r(V9e," \u2014 "),gX=n(V9e,"A",{href:!0});var rht=s(gX);pJo=r(rht,"Wav2Vec2ForAudioFrameClassification"),rht.forEach(t),uJo=r(V9e," (Wav2Vec2 model)"),V9e.forEach(t),_Jo=i(B3),MF=n(B3,"LI",{});var X9e=s(MF);jpe=n(X9e,"STRONG",{});var tht=s(jpe);bJo=r(tht,"wavlm"),tht.forEach(t),vJo=r(X9e," \u2014 "),hX=n(X9e,"A",{href:!0});var aht=s(hX);FJo=r(aht,"WavLMForAudioFrameClassification"),aht.forEach(t),TJo=r(X9e," (WavLM model)"),X9e.forEach(t),B3.forEach(t),MJo=i(ga),EF=n(ga,"P",{});var z9e=s(EF);EJo=r(z9e,"The model is set in evaluation mode by default using "),Dpe=n(z9e,"CODE",{});var nht=s(Dpe);CJo=r(nht,"model.eval()"),nht.forEach(t),wJo=r(z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(z9e,"CODE",{});var sht=s(Gpe);AJo=r(sht,"model.train()"),sht.forEach(t),z9e.forEach(t),yJo=i(ga),T(CF.$$.fragment,ga),ga.forEach(t),ol.forEach(t),UIe=i(f),gd=n(f,"H2",{class:!0});var ZNe=s(gd);wF=n(ZNe,"A",{id:!0,class:!0,href:!0});var lht=s(wF);Ope=n(lht,"SPAN",{});var iht=s(Ope);T(Hy.$$.fragment,iht),iht.forEach(t),lht.forEach(t),LJo=i(ZNe),Vpe=n(ZNe,"SPAN",{});var dht=s(Vpe);xJo=r(dht,"AutoModelForCTC"),dht.forEach(t),ZNe.forEach(t),JIe=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(Uy.$$.fragment,rl),$Jo=i(rl),hd=n(rl,"P",{});var HK=s(hd);kJo=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pX=n(HK,"A",{href:!0});var cht=s(pX);SJo=r(cht,"from_pretrained()"),cht.forEach(t),RJo=r(HK," class method or the "),uX=n(HK,"A",{href:!0});var fht=s(uX);BJo=r(fht,"from_config()"),fht.forEach(t),PJo=r(HK,` class
method.`),HK.forEach(t),IJo=i(rl),Jy=n(rl,"P",{});var eje=s(Jy);qJo=r(eje,"This class cannot be instantiated directly using "),Xpe=n(eje,"CODE",{});var mht=s(Xpe);NJo=r(mht,"__init__()"),mht.forEach(t),jJo=r(eje," (throws an error)."),eje.forEach(t),DJo=i(rl),_t=n(rl,"DIV",{class:!0});var P3=s(_t);T(Yy.$$.fragment,P3),GJo=i(P3),zpe=n(P3,"P",{});var ght=s(zpe);OJo=r(ght,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ght.forEach(t),VJo=i(P3),pd=n(P3,"P",{});var UK=s(pd);XJo=r(UK,`Note:
Loading a model from its configuration file does `),Qpe=n(UK,"STRONG",{});var hht=s(Qpe);zJo=r(hht,"not"),hht.forEach(t),QJo=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(UK,"A",{href:!0});var pht=s(_X);WJo=r(pht,"from_pretrained()"),pht.forEach(t),HJo=r(UK," to load the model weights."),UK.forEach(t),UJo=i(P3),T(AF.$$.fragment,P3),P3.forEach(t),JJo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(Ky.$$.fragment,ha),YJo=i(ha),Wpe=n(ha,"P",{});var uht=s(Wpe);KJo=r(uht,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),uht.forEach(t),ZJo=i(ha),Oa=n(ha,"P",{});var I3=s(Oa);eYo=r(I3,"The model class to instantiate is selected based on the "),Hpe=n(I3,"CODE",{});var _ht=s(Hpe);oYo=r(_ht,"model_type"),_ht.forEach(t),rYo=r(I3,` property of the config object (either
passed as an argument or loaded from `),Upe=n(I3,"CODE",{});var bht=s(Upe);tYo=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),aYo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(I3,"CODE",{});var vht=s(Jpe);nYo=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),sYo=r(I3,":"),I3.forEach(t),lYo=i(ha),je=n(ha,"UL",{});var vo=s(je);yF=n(vo,"LI",{});var Q9e=s(yF);Ype=n(Q9e,"STRONG",{});var Fht=s(Ype);iYo=r(Fht,"data2vec-audio"),Fht.forEach(t),dYo=r(Q9e," \u2014 "),bX=n(Q9e,"A",{href:!0});var Tht=s(bX);cYo=r(Tht,"Data2VecAudioForCTC"),Tht.forEach(t),fYo=r(Q9e," (Data2VecAudio model)"),Q9e.forEach(t),mYo=i(vo),LF=n(vo,"LI",{});var W9e=s(LF);Kpe=n(W9e,"STRONG",{});var Mht=s(Kpe);gYo=r(Mht,"hubert"),Mht.forEach(t),hYo=r(W9e," \u2014 "),vX=n(W9e,"A",{href:!0});var Eht=s(vX);pYo=r(Eht,"HubertForCTC"),Eht.forEach(t),uYo=r(W9e," (Hubert model)"),W9e.forEach(t),_Yo=i(vo),xF=n(vo,"LI",{});var H9e=s(xF);Zpe=n(H9e,"STRONG",{});var Cht=s(Zpe);bYo=r(Cht,"sew"),Cht.forEach(t),vYo=r(H9e," \u2014 "),FX=n(H9e,"A",{href:!0});var wht=s(FX);FYo=r(wht,"SEWForCTC"),wht.forEach(t),TYo=r(H9e," (SEW model)"),H9e.forEach(t),MYo=i(vo),$F=n(vo,"LI",{});var U9e=s($F);eue=n(U9e,"STRONG",{});var Aht=s(eue);EYo=r(Aht,"sew-d"),Aht.forEach(t),CYo=r(U9e," \u2014 "),TX=n(U9e,"A",{href:!0});var yht=s(TX);wYo=r(yht,"SEWDForCTC"),yht.forEach(t),AYo=r(U9e," (SEW-D model)"),U9e.forEach(t),yYo=i(vo),kF=n(vo,"LI",{});var J9e=s(kF);oue=n(J9e,"STRONG",{});var Lht=s(oue);LYo=r(Lht,"unispeech"),Lht.forEach(t),xYo=r(J9e," \u2014 "),MX=n(J9e,"A",{href:!0});var xht=s(MX);$Yo=r(xht,"UniSpeechForCTC"),xht.forEach(t),kYo=r(J9e," (UniSpeech model)"),J9e.forEach(t),SYo=i(vo),SF=n(vo,"LI",{});var Y9e=s(SF);rue=n(Y9e,"STRONG",{});var $ht=s(rue);RYo=r($ht,"unispeech-sat"),$ht.forEach(t),BYo=r(Y9e," \u2014 "),EX=n(Y9e,"A",{href:!0});var kht=s(EX);PYo=r(kht,"UniSpeechSatForCTC"),kht.forEach(t),IYo=r(Y9e," (UniSpeechSat model)"),Y9e.forEach(t),qYo=i(vo),RF=n(vo,"LI",{});var K9e=s(RF);tue=n(K9e,"STRONG",{});var Sht=s(tue);NYo=r(Sht,"wav2vec2"),Sht.forEach(t),jYo=r(K9e," \u2014 "),CX=n(K9e,"A",{href:!0});var Rht=s(CX);DYo=r(Rht,"Wav2Vec2ForCTC"),Rht.forEach(t),GYo=r(K9e," (Wav2Vec2 model)"),K9e.forEach(t),OYo=i(vo),BF=n(vo,"LI",{});var Z9e=s(BF);aue=n(Z9e,"STRONG",{});var Bht=s(aue);VYo=r(Bht,"wavlm"),Bht.forEach(t),XYo=r(Z9e," \u2014 "),wX=n(Z9e,"A",{href:!0});var Pht=s(wX);zYo=r(Pht,"WavLMForCTC"),Pht.forEach(t),QYo=r(Z9e," (WavLM model)"),Z9e.forEach(t),vo.forEach(t),WYo=i(ha),PF=n(ha,"P",{});var e$e=s(PF);HYo=r(e$e,"The model is set in evaluation mode by default using "),nue=n(e$e,"CODE",{});var Iht=s(nue);UYo=r(Iht,"model.eval()"),Iht.forEach(t),JYo=r(e$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=n(e$e,"CODE",{});var qht=s(sue);YYo=r(qht,"model.train()"),qht.forEach(t),e$e.forEach(t),KYo=i(ha),T(IF.$$.fragment,ha),ha.forEach(t),rl.forEach(t),YIe=i(f),ud=n(f,"H2",{class:!0});var oje=s(ud);qF=n(oje,"A",{id:!0,class:!0,href:!0});var Nht=s(qF);lue=n(Nht,"SPAN",{});var jht=s(lue);T(Zy.$$.fragment,jht),jht.forEach(t),Nht.forEach(t),ZYo=i(oje),iue=n(oje,"SPAN",{});var Dht=s(iue);eKo=r(Dht,"AutoModelForSpeechSeq2Seq"),Dht.forEach(t),oje.forEach(t),KIe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(eL.$$.fragment,tl),oKo=i(tl),_d=n(tl,"P",{});var JK=s(_d);rKo=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AX=n(JK,"A",{href:!0});var Ght=s(AX);tKo=r(Ght,"from_pretrained()"),Ght.forEach(t),aKo=r(JK," class method or the "),yX=n(JK,"A",{href:!0});var Oht=s(yX);nKo=r(Oht,"from_config()"),Oht.forEach(t),sKo=r(JK,` class
method.`),JK.forEach(t),lKo=i(tl),oL=n(tl,"P",{});var rje=s(oL);iKo=r(rje,"This class cannot be instantiated directly using "),due=n(rje,"CODE",{});var Vht=s(due);dKo=r(Vht,"__init__()"),Vht.forEach(t),cKo=r(rje," (throws an error)."),rje.forEach(t),fKo=i(tl),bt=n(tl,"DIV",{class:!0});var q3=s(bt);T(rL.$$.fragment,q3),mKo=i(q3),cue=n(q3,"P",{});var Xht=s(cue);gKo=r(Xht,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Xht.forEach(t),hKo=i(q3),bd=n(q3,"P",{});var YK=s(bd);pKo=r(YK,`Note:
Loading a model from its configuration file does `),fue=n(YK,"STRONG",{});var zht=s(fue);uKo=r(zht,"not"),zht.forEach(t),_Ko=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(YK,"A",{href:!0});var Qht=s(LX);bKo=r(Qht,"from_pretrained()"),Qht.forEach(t),vKo=r(YK," to load the model weights."),YK.forEach(t),FKo=i(q3),T(NF.$$.fragment,q3),q3.forEach(t),TKo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(tL.$$.fragment,pa),MKo=i(pa),mue=n(pa,"P",{});var Wht=s(mue);EKo=r(Wht,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Wht.forEach(t),CKo=i(pa),Va=n(pa,"P",{});var N3=s(Va);wKo=r(N3,"The model class to instantiate is selected based on the "),gue=n(N3,"CODE",{});var Hht=s(gue);AKo=r(Hht,"model_type"),Hht.forEach(t),yKo=r(N3,` property of the config object (either
passed as an argument or loaded from `),hue=n(N3,"CODE",{});var Uht=s(hue);LKo=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),xKo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(N3,"CODE",{});var Jht=s(pue);$Ko=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),kKo=r(N3,":"),N3.forEach(t),SKo=i(pa),aL=n(pa,"UL",{});var tje=s(aL);jF=n(tje,"LI",{});var o$e=s(jF);uue=n(o$e,"STRONG",{});var Yht=s(uue);RKo=r(Yht,"speech-encoder-decoder"),Yht.forEach(t),BKo=r(o$e," \u2014 "),xX=n(o$e,"A",{href:!0});var Kht=s(xX);PKo=r(Kht,"SpeechEncoderDecoderModel"),Kht.forEach(t),IKo=r(o$e," (Speech Encoder decoder model)"),o$e.forEach(t),qKo=i(tje),DF=n(tje,"LI",{});var r$e=s(DF);_ue=n(r$e,"STRONG",{});var Zht=s(_ue);NKo=r(Zht,"speech_to_text"),Zht.forEach(t),jKo=r(r$e," \u2014 "),$X=n(r$e,"A",{href:!0});var ept=s($X);DKo=r(ept,"Speech2TextForConditionalGeneration"),ept.forEach(t),GKo=r(r$e," (Speech2Text model)"),r$e.forEach(t),tje.forEach(t),OKo=i(pa),GF=n(pa,"P",{});var t$e=s(GF);VKo=r(t$e,"The model is set in evaluation mode by default using "),bue=n(t$e,"CODE",{});var opt=s(bue);XKo=r(opt,"model.eval()"),opt.forEach(t),zKo=r(t$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=n(t$e,"CODE",{});var rpt=s(vue);QKo=r(rpt,"model.train()"),rpt.forEach(t),t$e.forEach(t),WKo=i(pa),T(OF.$$.fragment,pa),pa.forEach(t),tl.forEach(t),ZIe=i(f),vd=n(f,"H2",{class:!0});var aje=s(vd);VF=n(aje,"A",{id:!0,class:!0,href:!0});var tpt=s(VF);Fue=n(tpt,"SPAN",{});var apt=s(Fue);T(nL.$$.fragment,apt),apt.forEach(t),tpt.forEach(t),HKo=i(aje),Tue=n(aje,"SPAN",{});var npt=s(Tue);UKo=r(npt,"AutoModelForAudioXVector"),npt.forEach(t),aje.forEach(t),eqe=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(sL.$$.fragment,al),JKo=i(al),Fd=n(al,"P",{});var KK=s(Fd);YKo=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kX=n(KK,"A",{href:!0});var spt=s(kX);KKo=r(spt,"from_pretrained()"),spt.forEach(t),ZKo=r(KK," class method or the "),SX=n(KK,"A",{href:!0});var lpt=s(SX);eZo=r(lpt,"from_config()"),lpt.forEach(t),oZo=r(KK,` class
method.`),KK.forEach(t),rZo=i(al),lL=n(al,"P",{});var nje=s(lL);tZo=r(nje,"This class cannot be instantiated directly using "),Mue=n(nje,"CODE",{});var ipt=s(Mue);aZo=r(ipt,"__init__()"),ipt.forEach(t),nZo=r(nje," (throws an error)."),nje.forEach(t),sZo=i(al),vt=n(al,"DIV",{class:!0});var j3=s(vt);T(iL.$$.fragment,j3),lZo=i(j3),Eue=n(j3,"P",{});var dpt=s(Eue);iZo=r(dpt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dpt.forEach(t),dZo=i(j3),Td=n(j3,"P",{});var ZK=s(Td);cZo=r(ZK,`Note:
Loading a model from its configuration file does `),Cue=n(ZK,"STRONG",{});var cpt=s(Cue);fZo=r(cpt,"not"),cpt.forEach(t),mZo=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(ZK,"A",{href:!0});var fpt=s(RX);gZo=r(fpt,"from_pretrained()"),fpt.forEach(t),hZo=r(ZK," to load the model weights."),ZK.forEach(t),pZo=i(j3),T(XF.$$.fragment,j3),j3.forEach(t),uZo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(dL.$$.fragment,ua),_Zo=i(ua),wue=n(ua,"P",{});var mpt=s(wue);bZo=r(mpt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),mpt.forEach(t),vZo=i(ua),Xa=n(ua,"P",{});var D3=s(Xa);FZo=r(D3,"The model class to instantiate is selected based on the "),Aue=n(D3,"CODE",{});var gpt=s(Aue);TZo=r(gpt,"model_type"),gpt.forEach(t),MZo=r(D3,` property of the config object (either
passed as an argument or loaded from `),yue=n(D3,"CODE",{});var hpt=s(yue);EZo=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),CZo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(D3,"CODE",{});var ppt=s(Lue);wZo=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),AZo=r(D3,":"),D3.forEach(t),yZo=i(ua),za=n(ua,"UL",{});var G3=s(za);zF=n(G3,"LI",{});var a$e=s(zF);xue=n(a$e,"STRONG",{});var upt=s(xue);LZo=r(upt,"data2vec-audio"),upt.forEach(t),xZo=r(a$e," \u2014 "),BX=n(a$e,"A",{href:!0});var _pt=s(BX);$Zo=r(_pt,"Data2VecAudioForXVector"),_pt.forEach(t),kZo=r(a$e," (Data2VecAudio model)"),a$e.forEach(t),SZo=i(G3),QF=n(G3,"LI",{});var n$e=s(QF);$ue=n(n$e,"STRONG",{});var bpt=s($ue);RZo=r(bpt,"unispeech-sat"),bpt.forEach(t),BZo=r(n$e," \u2014 "),PX=n(n$e,"A",{href:!0});var vpt=s(PX);PZo=r(vpt,"UniSpeechSatForXVector"),vpt.forEach(t),IZo=r(n$e," (UniSpeechSat model)"),n$e.forEach(t),qZo=i(G3),WF=n(G3,"LI",{});var s$e=s(WF);kue=n(s$e,"STRONG",{});var Fpt=s(kue);NZo=r(Fpt,"wav2vec2"),Fpt.forEach(t),jZo=r(s$e," \u2014 "),IX=n(s$e,"A",{href:!0});var Tpt=s(IX);DZo=r(Tpt,"Wav2Vec2ForXVector"),Tpt.forEach(t),GZo=r(s$e," (Wav2Vec2 model)"),s$e.forEach(t),OZo=i(G3),HF=n(G3,"LI",{});var l$e=s(HF);Sue=n(l$e,"STRONG",{});var Mpt=s(Sue);VZo=r(Mpt,"wavlm"),Mpt.forEach(t),XZo=r(l$e," \u2014 "),qX=n(l$e,"A",{href:!0});var Ept=s(qX);zZo=r(Ept,"WavLMForXVector"),Ept.forEach(t),QZo=r(l$e," (WavLM model)"),l$e.forEach(t),G3.forEach(t),WZo=i(ua),UF=n(ua,"P",{});var i$e=s(UF);HZo=r(i$e,"The model is set in evaluation mode by default using "),Rue=n(i$e,"CODE",{});var Cpt=s(Rue);UZo=r(Cpt,"model.eval()"),Cpt.forEach(t),JZo=r(i$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=n(i$e,"CODE",{});var wpt=s(Bue);YZo=r(wpt,"model.train()"),wpt.forEach(t),i$e.forEach(t),KZo=i(ua),T(JF.$$.fragment,ua),ua.forEach(t),al.forEach(t),oqe=i(f),Md=n(f,"H2",{class:!0});var sje=s(Md);YF=n(sje,"A",{id:!0,class:!0,href:!0});var Apt=s(YF);Pue=n(Apt,"SPAN",{});var ypt=s(Pue);T(cL.$$.fragment,ypt),ypt.forEach(t),Apt.forEach(t),ZZo=i(sje),Iue=n(sje,"SPAN",{});var Lpt=s(Iue);eer=r(Lpt,"AutoModelForMaskedImageModeling"),Lpt.forEach(t),sje.forEach(t),rqe=i(f),Qo=n(f,"DIV",{class:!0});var nl=s(Qo);T(fL.$$.fragment,nl),oer=i(nl),Ed=n(nl,"P",{});var eZ=s(Ed);rer=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),NX=n(eZ,"A",{href:!0});var xpt=s(NX);ter=r(xpt,"from_pretrained()"),xpt.forEach(t),aer=r(eZ," class method or the "),jX=n(eZ,"A",{href:!0});var $pt=s(jX);ner=r($pt,"from_config()"),$pt.forEach(t),ser=r(eZ,` class
method.`),eZ.forEach(t),ler=i(nl),mL=n(nl,"P",{});var lje=s(mL);ier=r(lje,"This class cannot be instantiated directly using "),que=n(lje,"CODE",{});var kpt=s(que);der=r(kpt,"__init__()"),kpt.forEach(t),cer=r(lje," (throws an error)."),lje.forEach(t),fer=i(nl),Ft=n(nl,"DIV",{class:!0});var O3=s(Ft);T(gL.$$.fragment,O3),mer=i(O3),Nue=n(O3,"P",{});var Spt=s(Nue);ger=r(Spt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Spt.forEach(t),her=i(O3),Cd=n(O3,"P",{});var oZ=s(Cd);per=r(oZ,`Note:
Loading a model from its configuration file does `),jue=n(oZ,"STRONG",{});var Rpt=s(jue);uer=r(Rpt,"not"),Rpt.forEach(t),_er=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(oZ,"A",{href:!0});var Bpt=s(DX);ber=r(Bpt,"from_pretrained()"),Bpt.forEach(t),ver=r(oZ," to load the model weights."),oZ.forEach(t),Fer=i(O3),T(KF.$$.fragment,O3),O3.forEach(t),Ter=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(hL.$$.fragment,_a),Mer=i(_a),Due=n(_a,"P",{});var Ppt=s(Due);Eer=r(Ppt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ppt.forEach(t),Cer=i(_a),Qa=n(_a,"P",{});var V3=s(Qa);wer=r(V3,"The model class to instantiate is selected based on the "),Gue=n(V3,"CODE",{});var Ipt=s(Gue);Aer=r(Ipt,"model_type"),Ipt.forEach(t),yer=r(V3,` property of the config object (either
passed as an argument or loaded from `),Oue=n(V3,"CODE",{});var qpt=s(Oue);Ler=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),xer=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(V3,"CODE",{});var Npt=s(Vue);$er=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),ker=r(V3,":"),V3.forEach(t),Ser=i(_a),wd=n(_a,"UL",{});var rZ=s(wd);ZF=n(rZ,"LI",{});var d$e=s(ZF);Xue=n(d$e,"STRONG",{});var jpt=s(Xue);Rer=r(jpt,"deit"),jpt.forEach(t),Ber=r(d$e," \u2014 "),GX=n(d$e,"A",{href:!0});var Dpt=s(GX);Per=r(Dpt,"DeiTForMaskedImageModeling"),Dpt.forEach(t),Ier=r(d$e," (DeiT model)"),d$e.forEach(t),qer=i(rZ),e6=n(rZ,"LI",{});var c$e=s(e6);zue=n(c$e,"STRONG",{});var Gpt=s(zue);Ner=r(Gpt,"swin"),Gpt.forEach(t),jer=r(c$e," \u2014 "),OX=n(c$e,"A",{href:!0});var Opt=s(OX);Der=r(Opt,"SwinForMaskedImageModeling"),Opt.forEach(t),Ger=r(c$e," (Swin model)"),c$e.forEach(t),Oer=i(rZ),o6=n(rZ,"LI",{});var f$e=s(o6);Que=n(f$e,"STRONG",{});var Vpt=s(Que);Ver=r(Vpt,"vit"),Vpt.forEach(t),Xer=r(f$e," \u2014 "),VX=n(f$e,"A",{href:!0});var Xpt=s(VX);zer=r(Xpt,"ViTForMaskedImageModeling"),Xpt.forEach(t),Qer=r(f$e," (ViT model)"),f$e.forEach(t),rZ.forEach(t),Wer=i(_a),r6=n(_a,"P",{});var m$e=s(r6);Her=r(m$e,"The model is set in evaluation mode by default using "),Wue=n(m$e,"CODE",{});var zpt=s(Wue);Uer=r(zpt,"model.eval()"),zpt.forEach(t),Jer=r(m$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=n(m$e,"CODE",{});var Qpt=s(Hue);Yer=r(Qpt,"model.train()"),Qpt.forEach(t),m$e.forEach(t),Ker=i(_a),T(t6.$$.fragment,_a),_a.forEach(t),nl.forEach(t),tqe=i(f),Ad=n(f,"H2",{class:!0});var ije=s(Ad);a6=n(ije,"A",{id:!0,class:!0,href:!0});var Wpt=s(a6);Uue=n(Wpt,"SPAN",{});var Hpt=s(Uue);T(pL.$$.fragment,Hpt),Hpt.forEach(t),Wpt.forEach(t),Zer=i(ije),Jue=n(ije,"SPAN",{});var Upt=s(Jue);eor=r(Upt,"AutoModelForObjectDetection"),Upt.forEach(t),ije.forEach(t),aqe=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(uL.$$.fragment,sl),oor=i(sl),yd=n(sl,"P",{});var tZ=s(yd);ror=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XX=n(tZ,"A",{href:!0});var Jpt=s(XX);tor=r(Jpt,"from_pretrained()"),Jpt.forEach(t),aor=r(tZ," class method or the "),zX=n(tZ,"A",{href:!0});var Ypt=s(zX);nor=r(Ypt,"from_config()"),Ypt.forEach(t),sor=r(tZ,` class
method.`),tZ.forEach(t),lor=i(sl),_L=n(sl,"P",{});var dje=s(_L);ior=r(dje,"This class cannot be instantiated directly using "),Yue=n(dje,"CODE",{});var Kpt=s(Yue);dor=r(Kpt,"__init__()"),Kpt.forEach(t),cor=r(dje," (throws an error)."),dje.forEach(t),mor=i(sl),Tt=n(sl,"DIV",{class:!0});var X3=s(Tt);T(bL.$$.fragment,X3),gor=i(X3),Kue=n(X3,"P",{});var Zpt=s(Kue);hor=r(Zpt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Zpt.forEach(t),por=i(X3),Ld=n(X3,"P",{});var aZ=s(Ld);uor=r(aZ,`Note:
Loading a model from its configuration file does `),Zue=n(aZ,"STRONG",{});var eut=s(Zue);_or=r(eut,"not"),eut.forEach(t),bor=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(aZ,"A",{href:!0});var out=s(QX);vor=r(out,"from_pretrained()"),out.forEach(t),For=r(aZ," to load the model weights."),aZ.forEach(t),Tor=i(X3),T(n6.$$.fragment,X3),X3.forEach(t),Mor=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(vL.$$.fragment,ba),Eor=i(ba),e_e=n(ba,"P",{});var rut=s(e_e);Cor=r(rut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),rut.forEach(t),wor=i(ba),Wa=n(ba,"P",{});var z3=s(Wa);Aor=r(z3,"The model class to instantiate is selected based on the "),o_e=n(z3,"CODE",{});var tut=s(o_e);yor=r(tut,"model_type"),tut.forEach(t),Lor=r(z3,` property of the config object (either
passed as an argument or loaded from `),r_e=n(z3,"CODE",{});var aut=s(r_e);xor=r(aut,"pretrained_model_name_or_path"),aut.forEach(t),$or=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(z3,"CODE",{});var nut=s(t_e);kor=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),Sor=r(z3,":"),z3.forEach(t),Ror=i(ba),FL=n(ba,"UL",{});var cje=s(FL);s6=n(cje,"LI",{});var g$e=s(s6);a_e=n(g$e,"STRONG",{});var sut=s(a_e);Bor=r(sut,"detr"),sut.forEach(t),Por=r(g$e," \u2014 "),WX=n(g$e,"A",{href:!0});var lut=s(WX);Ior=r(lut,"DetrForObjectDetection"),lut.forEach(t),qor=r(g$e," (DETR model)"),g$e.forEach(t),Nor=i(cje),l6=n(cje,"LI",{});var h$e=s(l6);n_e=n(h$e,"STRONG",{});var iut=s(n_e);jor=r(iut,"yolos"),iut.forEach(t),Dor=r(h$e," \u2014 "),HX=n(h$e,"A",{href:!0});var dut=s(HX);Gor=r(dut,"YolosForObjectDetection"),dut.forEach(t),Oor=r(h$e," (YOLOS model)"),h$e.forEach(t),cje.forEach(t),Vor=i(ba),i6=n(ba,"P",{});var p$e=s(i6);Xor=r(p$e,"The model is set in evaluation mode by default using "),s_e=n(p$e,"CODE",{});var cut=s(s_e);zor=r(cut,"model.eval()"),cut.forEach(t),Qor=r(p$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=n(p$e,"CODE",{});var fut=s(l_e);Wor=r(fut,"model.train()"),fut.forEach(t),p$e.forEach(t),Hor=i(ba),T(d6.$$.fragment,ba),ba.forEach(t),sl.forEach(t),nqe=i(f),xd=n(f,"H2",{class:!0});var fje=s(xd);c6=n(fje,"A",{id:!0,class:!0,href:!0});var mut=s(c6);i_e=n(mut,"SPAN",{});var gut=s(i_e);T(TL.$$.fragment,gut),gut.forEach(t),mut.forEach(t),Uor=i(fje),d_e=n(fje,"SPAN",{});var hut=s(d_e);Jor=r(hut,"AutoModelForImageSegmentation"),hut.forEach(t),fje.forEach(t),sqe=i(f),Ho=n(f,"DIV",{class:!0});var ll=s(Ho);T(ML.$$.fragment,ll),Yor=i(ll),$d=n(ll,"P",{});var nZ=s($d);Kor=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UX=n(nZ,"A",{href:!0});var put=s(UX);Zor=r(put,"from_pretrained()"),put.forEach(t),err=r(nZ," class method or the "),JX=n(nZ,"A",{href:!0});var uut=s(JX);orr=r(uut,"from_config()"),uut.forEach(t),rrr=r(nZ,` class
method.`),nZ.forEach(t),trr=i(ll),EL=n(ll,"P",{});var mje=s(EL);arr=r(mje,"This class cannot be instantiated directly using "),c_e=n(mje,"CODE",{});var _ut=s(c_e);nrr=r(_ut,"__init__()"),_ut.forEach(t),srr=r(mje," (throws an error)."),mje.forEach(t),lrr=i(ll),Mt=n(ll,"DIV",{class:!0});var Q3=s(Mt);T(CL.$$.fragment,Q3),irr=i(Q3),f_e=n(Q3,"P",{});var but=s(f_e);drr=r(but,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),but.forEach(t),crr=i(Q3),kd=n(Q3,"P",{});var sZ=s(kd);frr=r(sZ,`Note:
Loading a model from its configuration file does `),m_e=n(sZ,"STRONG",{});var vut=s(m_e);mrr=r(vut,"not"),vut.forEach(t),grr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(sZ,"A",{href:!0});var Fut=s(YX);hrr=r(Fut,"from_pretrained()"),Fut.forEach(t),prr=r(sZ," to load the model weights."),sZ.forEach(t),urr=i(Q3),T(f6.$$.fragment,Q3),Q3.forEach(t),_rr=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(wL.$$.fragment,va),brr=i(va),g_e=n(va,"P",{});var Tut=s(g_e);vrr=r(Tut,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Tut.forEach(t),Frr=i(va),Ha=n(va,"P",{});var W3=s(Ha);Trr=r(W3,"The model class to instantiate is selected based on the "),h_e=n(W3,"CODE",{});var Mut=s(h_e);Mrr=r(Mut,"model_type"),Mut.forEach(t),Err=r(W3,` property of the config object (either
passed as an argument or loaded from `),p_e=n(W3,"CODE",{});var Eut=s(p_e);Crr=r(Eut,"pretrained_model_name_or_path"),Eut.forEach(t),wrr=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(W3,"CODE",{});var Cut=s(u_e);Arr=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),yrr=r(W3,":"),W3.forEach(t),Lrr=i(va),__e=n(va,"UL",{});var wut=s(__e);m6=n(wut,"LI",{});var u$e=s(m6);b_e=n(u$e,"STRONG",{});var Aut=s(b_e);xrr=r(Aut,"detr"),Aut.forEach(t),$rr=r(u$e," \u2014 "),KX=n(u$e,"A",{href:!0});var yut=s(KX);krr=r(yut,"DetrForSegmentation"),yut.forEach(t),Srr=r(u$e," (DETR model)"),u$e.forEach(t),wut.forEach(t),Rrr=i(va),g6=n(va,"P",{});var _$e=s(g6);Brr=r(_$e,"The model is set in evaluation mode by default using "),v_e=n(_$e,"CODE",{});var Lut=s(v_e);Prr=r(Lut,"model.eval()"),Lut.forEach(t),Irr=r(_$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=n(_$e,"CODE",{});var xut=s(F_e);qrr=r(xut,"model.train()"),xut.forEach(t),_$e.forEach(t),Nrr=i(va),T(h6.$$.fragment,va),va.forEach(t),ll.forEach(t),lqe=i(f),Sd=n(f,"H2",{class:!0});var gje=s(Sd);p6=n(gje,"A",{id:!0,class:!0,href:!0});var $ut=s(p6);T_e=n($ut,"SPAN",{});var kut=s(T_e);T(AL.$$.fragment,kut),kut.forEach(t),$ut.forEach(t),jrr=i(gje),M_e=n(gje,"SPAN",{});var Sut=s(M_e);Drr=r(Sut,"AutoModelForSemanticSegmentation"),Sut.forEach(t),gje.forEach(t),iqe=i(f),Uo=n(f,"DIV",{class:!0});var il=s(Uo);T(yL.$$.fragment,il),Grr=i(il),Rd=n(il,"P",{});var lZ=s(Rd);Orr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZX=n(lZ,"A",{href:!0});var Rut=s(ZX);Vrr=r(Rut,"from_pretrained()"),Rut.forEach(t),Xrr=r(lZ," class method or the "),ez=n(lZ,"A",{href:!0});var But=s(ez);zrr=r(But,"from_config()"),But.forEach(t),Qrr=r(lZ,` class
method.`),lZ.forEach(t),Wrr=i(il),LL=n(il,"P",{});var hje=s(LL);Hrr=r(hje,"This class cannot be instantiated directly using "),E_e=n(hje,"CODE",{});var Put=s(E_e);Urr=r(Put,"__init__()"),Put.forEach(t),Jrr=r(hje," (throws an error)."),hje.forEach(t),Yrr=i(il),Et=n(il,"DIV",{class:!0});var H3=s(Et);T(xL.$$.fragment,H3),Krr=i(H3),C_e=n(H3,"P",{});var Iut=s(C_e);Zrr=r(Iut,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Iut.forEach(t),etr=i(H3),Bd=n(H3,"P",{});var iZ=s(Bd);otr=r(iZ,`Note:
Loading a model from its configuration file does `),w_e=n(iZ,"STRONG",{});var qut=s(w_e);rtr=r(qut,"not"),qut.forEach(t),ttr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(iZ,"A",{href:!0});var Nut=s(oz);atr=r(Nut,"from_pretrained()"),Nut.forEach(t),ntr=r(iZ," to load the model weights."),iZ.forEach(t),str=i(H3),T(u6.$$.fragment,H3),H3.forEach(t),ltr=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T($L.$$.fragment,Fa),itr=i(Fa),A_e=n(Fa,"P",{});var jut=s(A_e);dtr=r(jut,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),jut.forEach(t),ctr=i(Fa),Ua=n(Fa,"P",{});var U3=s(Ua);ftr=r(U3,"The model class to instantiate is selected based on the "),y_e=n(U3,"CODE",{});var Dut=s(y_e);mtr=r(Dut,"model_type"),Dut.forEach(t),gtr=r(U3,` property of the config object (either
passed as an argument or loaded from `),L_e=n(U3,"CODE",{});var Gut=s(L_e);htr=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),ptr=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(U3,"CODE",{});var Out=s(x_e);utr=r(Out,"pretrained_model_name_or_path"),Out.forEach(t),_tr=r(U3,":"),U3.forEach(t),btr=i(Fa),Ja=n(Fa,"UL",{});var J3=s(Ja);_6=n(J3,"LI",{});var b$e=s(_6);$_e=n(b$e,"STRONG",{});var Vut=s($_e);vtr=r(Vut,"beit"),Vut.forEach(t),Ftr=r(b$e," \u2014 "),rz=n(b$e,"A",{href:!0});var Xut=s(rz);Ttr=r(Xut,"BeitForSemanticSegmentation"),Xut.forEach(t),Mtr=r(b$e," (BEiT model)"),b$e.forEach(t),Etr=i(J3),b6=n(J3,"LI",{});var v$e=s(b6);k_e=n(v$e,"STRONG",{});var zut=s(k_e);Ctr=r(zut,"data2vec-vision"),zut.forEach(t),wtr=r(v$e," \u2014 "),tz=n(v$e,"A",{href:!0});var Qut=s(tz);Atr=r(Qut,"Data2VecVisionForSemanticSegmentation"),Qut.forEach(t),ytr=r(v$e," (Data2VecVision model)"),v$e.forEach(t),Ltr=i(J3),v6=n(J3,"LI",{});var F$e=s(v6);S_e=n(F$e,"STRONG",{});var Wut=s(S_e);xtr=r(Wut,"dpt"),Wut.forEach(t),$tr=r(F$e," \u2014 "),az=n(F$e,"A",{href:!0});var Hut=s(az);ktr=r(Hut,"DPTForSemanticSegmentation"),Hut.forEach(t),Str=r(F$e," (DPT model)"),F$e.forEach(t),Rtr=i(J3),F6=n(J3,"LI",{});var T$e=s(F6);R_e=n(T$e,"STRONG",{});var Uut=s(R_e);Btr=r(Uut,"segformer"),Uut.forEach(t),Ptr=r(T$e," \u2014 "),nz=n(T$e,"A",{href:!0});var Jut=s(nz);Itr=r(Jut,"SegformerForSemanticSegmentation"),Jut.forEach(t),qtr=r(T$e," (SegFormer model)"),T$e.forEach(t),J3.forEach(t),Ntr=i(Fa),T6=n(Fa,"P",{});var M$e=s(T6);jtr=r(M$e,"The model is set in evaluation mode by default using "),B_e=n(M$e,"CODE",{});var Yut=s(B_e);Dtr=r(Yut,"model.eval()"),Yut.forEach(t),Gtr=r(M$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(M$e,"CODE",{});var Kut=s(P_e);Otr=r(Kut,"model.train()"),Kut.forEach(t),M$e.forEach(t),Vtr=i(Fa),T(M6.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),dqe=i(f),Pd=n(f,"H2",{class:!0});var pje=s(Pd);E6=n(pje,"A",{id:!0,class:!0,href:!0});var Zut=s(E6);I_e=n(Zut,"SPAN",{});var e_t=s(I_e);T(kL.$$.fragment,e_t),e_t.forEach(t),Zut.forEach(t),Xtr=i(pje),q_e=n(pje,"SPAN",{});var o_t=s(q_e);ztr=r(o_t,"AutoModelForInstanceSegmentation"),o_t.forEach(t),pje.forEach(t),cqe=i(f),Jo=n(f,"DIV",{class:!0});var dl=s(Jo);T(SL.$$.fragment,dl),Qtr=i(dl),Id=n(dl,"P",{});var dZ=s(Id);Wtr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),sz=n(dZ,"A",{href:!0});var r_t=s(sz);Htr=r(r_t,"from_pretrained()"),r_t.forEach(t),Utr=r(dZ," class method or the "),lz=n(dZ,"A",{href:!0});var t_t=s(lz);Jtr=r(t_t,"from_config()"),t_t.forEach(t),Ytr=r(dZ,` class
method.`),dZ.forEach(t),Ktr=i(dl),RL=n(dl,"P",{});var uje=s(RL);Ztr=r(uje,"This class cannot be instantiated directly using "),N_e=n(uje,"CODE",{});var a_t=s(N_e);ear=r(a_t,"__init__()"),a_t.forEach(t),oar=r(uje," (throws an error)."),uje.forEach(t),rar=i(dl),Ct=n(dl,"DIV",{class:!0});var Y3=s(Ct);T(BL.$$.fragment,Y3),tar=i(Y3),j_e=n(Y3,"P",{});var n_t=s(j_e);aar=r(n_t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),n_t.forEach(t),nar=i(Y3),qd=n(Y3,"P",{});var cZ=s(qd);sar=r(cZ,`Note:
Loading a model from its configuration file does `),D_e=n(cZ,"STRONG",{});var s_t=s(D_e);lar=r(s_t,"not"),s_t.forEach(t),iar=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=n(cZ,"A",{href:!0});var l_t=s(iz);dar=r(l_t,"from_pretrained()"),l_t.forEach(t),car=r(cZ," to load the model weights."),cZ.forEach(t),far=i(Y3),T(C6.$$.fragment,Y3),Y3.forEach(t),mar=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(PL.$$.fragment,Ta),gar=i(Ta),G_e=n(Ta,"P",{});var i_t=s(G_e);har=r(i_t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),i_t.forEach(t),par=i(Ta),Ya=n(Ta,"P",{});var K3=s(Ya);uar=r(K3,"The model class to instantiate is selected based on the "),O_e=n(K3,"CODE",{});var d_t=s(O_e);_ar=r(d_t,"model_type"),d_t.forEach(t),bar=r(K3,` property of the config object (either
passed as an argument or loaded from `),V_e=n(K3,"CODE",{});var c_t=s(V_e);Far=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),Tar=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=n(K3,"CODE",{});var f_t=s(X_e);Mar=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),Ear=r(K3,":"),K3.forEach(t),Car=i(Ta),z_e=n(Ta,"UL",{});var m_t=s(z_e);w6=n(m_t,"LI",{});var E$e=s(w6);Q_e=n(E$e,"STRONG",{});var g_t=s(Q_e);war=r(g_t,"maskformer"),g_t.forEach(t),Aar=r(E$e," \u2014 "),dz=n(E$e,"A",{href:!0});var h_t=s(dz);yar=r(h_t,"MaskFormerForInstanceSegmentation"),h_t.forEach(t),Lar=r(E$e," (MaskFormer model)"),E$e.forEach(t),m_t.forEach(t),xar=i(Ta),A6=n(Ta,"P",{});var C$e=s(A6);$ar=r(C$e,"The model is set in evaluation mode by default using "),W_e=n(C$e,"CODE",{});var p_t=s(W_e);kar=r(p_t,"model.eval()"),p_t.forEach(t),Sar=r(C$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=n(C$e,"CODE",{});var u_t=s(H_e);Rar=r(u_t,"model.train()"),u_t.forEach(t),C$e.forEach(t),Bar=i(Ta),T(y6.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),fqe=i(f),Nd=n(f,"H2",{class:!0});var _je=s(Nd);L6=n(_je,"A",{id:!0,class:!0,href:!0});var __t=s(L6);U_e=n(__t,"SPAN",{});var b_t=s(U_e);T(IL.$$.fragment,b_t),b_t.forEach(t),__t.forEach(t),Par=i(_je),J_e=n(_je,"SPAN",{});var v_t=s(J_e);Iar=r(v_t,"TFAutoModel"),v_t.forEach(t),_je.forEach(t),mqe=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T(qL.$$.fragment,cl),qar=i(cl),jd=n(cl,"P",{});var fZ=s(jd);Nar=r(fZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cz=n(fZ,"A",{href:!0});var F_t=s(cz);jar=r(F_t,"from_pretrained()"),F_t.forEach(t),Dar=r(fZ," class method or the "),fz=n(fZ,"A",{href:!0});var T_t=s(fz);Gar=r(T_t,"from_config()"),T_t.forEach(t),Oar=r(fZ,` class
method.`),fZ.forEach(t),Var=i(cl),NL=n(cl,"P",{});var bje=s(NL);Xar=r(bje,"This class cannot be instantiated directly using "),Y_e=n(bje,"CODE",{});var M_t=s(Y_e);zar=r(M_t,"__init__()"),M_t.forEach(t),Qar=r(bje," (throws an error)."),bje.forEach(t),War=i(cl),wt=n(cl,"DIV",{class:!0});var Z3=s(wt);T(jL.$$.fragment,Z3),Har=i(Z3),K_e=n(Z3,"P",{});var E_t=s(K_e);Uar=r(E_t,"Instantiates one of the base model classes of the library from a configuration."),E_t.forEach(t),Jar=i(Z3),Dd=n(Z3,"P",{});var mZ=s(Dd);Yar=r(mZ,`Note:
Loading a model from its configuration file does `),Z_e=n(mZ,"STRONG",{});var C_t=s(Z_e);Kar=r(C_t,"not"),C_t.forEach(t),Zar=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(mZ,"A",{href:!0});var w_t=s(mz);enr=r(w_t,"from_pretrained()"),w_t.forEach(t),onr=r(mZ," to load the model weights."),mZ.forEach(t),rnr=i(Z3),T(x6.$$.fragment,Z3),Z3.forEach(t),tnr=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(DL.$$.fragment,fl),anr=i(fl),e0e=n(fl,"P",{});var A_t=s(e0e);nnr=r(A_t,"Instantiate one of the base model classes of the library from a pretrained model."),A_t.forEach(t),snr=i(fl),Ka=n(fl,"P",{});var ew=s(Ka);lnr=r(ew,"The model class to instantiate is selected based on the "),o0e=n(ew,"CODE",{});var y_t=s(o0e);inr=r(y_t,"model_type"),y_t.forEach(t),dnr=r(ew,` property of the config object (either
passed as an argument or loaded from `),r0e=n(ew,"CODE",{});var L_t=s(r0e);cnr=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),fnr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=n(ew,"CODE",{});var x_t=s(t0e);mnr=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),gnr=r(ew,":"),ew.forEach(t),hnr=i(fl),j=n(fl,"UL",{});var D=s(j);$6=n(D,"LI",{});var w$e=s($6);a0e=n(w$e,"STRONG",{});var $_t=s(a0e);pnr=r($_t,"albert"),$_t.forEach(t),unr=r(w$e," \u2014 "),gz=n(w$e,"A",{href:!0});var k_t=s(gz);_nr=r(k_t,"TFAlbertModel"),k_t.forEach(t),bnr=r(w$e," (ALBERT model)"),w$e.forEach(t),vnr=i(D),k6=n(D,"LI",{});var A$e=s(k6);n0e=n(A$e,"STRONG",{});var S_t=s(n0e);Fnr=r(S_t,"bart"),S_t.forEach(t),Tnr=r(A$e," \u2014 "),hz=n(A$e,"A",{href:!0});var R_t=s(hz);Mnr=r(R_t,"TFBartModel"),R_t.forEach(t),Enr=r(A$e," (BART model)"),A$e.forEach(t),Cnr=i(D),S6=n(D,"LI",{});var y$e=s(S6);s0e=n(y$e,"STRONG",{});var B_t=s(s0e);wnr=r(B_t,"bert"),B_t.forEach(t),Anr=r(y$e," \u2014 "),pz=n(y$e,"A",{href:!0});var P_t=s(pz);ynr=r(P_t,"TFBertModel"),P_t.forEach(t),Lnr=r(y$e," (BERT model)"),y$e.forEach(t),xnr=i(D),R6=n(D,"LI",{});var L$e=s(R6);l0e=n(L$e,"STRONG",{});var I_t=s(l0e);$nr=r(I_t,"blenderbot"),I_t.forEach(t),knr=r(L$e," \u2014 "),uz=n(L$e,"A",{href:!0});var q_t=s(uz);Snr=r(q_t,"TFBlenderbotModel"),q_t.forEach(t),Rnr=r(L$e," (Blenderbot model)"),L$e.forEach(t),Bnr=i(D),B6=n(D,"LI",{});var x$e=s(B6);i0e=n(x$e,"STRONG",{});var N_t=s(i0e);Pnr=r(N_t,"blenderbot-small"),N_t.forEach(t),Inr=r(x$e," \u2014 "),_z=n(x$e,"A",{href:!0});var j_t=s(_z);qnr=r(j_t,"TFBlenderbotSmallModel"),j_t.forEach(t),Nnr=r(x$e," (BlenderbotSmall model)"),x$e.forEach(t),jnr=i(D),P6=n(D,"LI",{});var $$e=s(P6);d0e=n($$e,"STRONG",{});var D_t=s(d0e);Dnr=r(D_t,"camembert"),D_t.forEach(t),Gnr=r($$e," \u2014 "),bz=n($$e,"A",{href:!0});var G_t=s(bz);Onr=r(G_t,"TFCamembertModel"),G_t.forEach(t),Vnr=r($$e," (CamemBERT model)"),$$e.forEach(t),Xnr=i(D),I6=n(D,"LI",{});var k$e=s(I6);c0e=n(k$e,"STRONG",{});var O_t=s(c0e);znr=r(O_t,"clip"),O_t.forEach(t),Qnr=r(k$e," \u2014 "),vz=n(k$e,"A",{href:!0});var V_t=s(vz);Wnr=r(V_t,"TFCLIPModel"),V_t.forEach(t),Hnr=r(k$e," (CLIP model)"),k$e.forEach(t),Unr=i(D),q6=n(D,"LI",{});var S$e=s(q6);f0e=n(S$e,"STRONG",{});var X_t=s(f0e);Jnr=r(X_t,"convbert"),X_t.forEach(t),Ynr=r(S$e," \u2014 "),Fz=n(S$e,"A",{href:!0});var z_t=s(Fz);Knr=r(z_t,"TFConvBertModel"),z_t.forEach(t),Znr=r(S$e," (ConvBERT model)"),S$e.forEach(t),esr=i(D),N6=n(D,"LI",{});var R$e=s(N6);m0e=n(R$e,"STRONG",{});var Q_t=s(m0e);osr=r(Q_t,"convnext"),Q_t.forEach(t),rsr=r(R$e," \u2014 "),Tz=n(R$e,"A",{href:!0});var W_t=s(Tz);tsr=r(W_t,"TFConvNextModel"),W_t.forEach(t),asr=r(R$e," (ConvNext model)"),R$e.forEach(t),nsr=i(D),j6=n(D,"LI",{});var B$e=s(j6);g0e=n(B$e,"STRONG",{});var H_t=s(g0e);ssr=r(H_t,"ctrl"),H_t.forEach(t),lsr=r(B$e," \u2014 "),Mz=n(B$e,"A",{href:!0});var U_t=s(Mz);isr=r(U_t,"TFCTRLModel"),U_t.forEach(t),dsr=r(B$e," (CTRL model)"),B$e.forEach(t),csr=i(D),D6=n(D,"LI",{});var P$e=s(D6);h0e=n(P$e,"STRONG",{});var J_t=s(h0e);fsr=r(J_t,"data2vec-vision"),J_t.forEach(t),msr=r(P$e," \u2014 "),Ez=n(P$e,"A",{href:!0});var Y_t=s(Ez);gsr=r(Y_t,"TFData2VecVisionModel"),Y_t.forEach(t),hsr=r(P$e," (Data2VecVision model)"),P$e.forEach(t),psr=i(D),G6=n(D,"LI",{});var I$e=s(G6);p0e=n(I$e,"STRONG",{});var K_t=s(p0e);usr=r(K_t,"deberta"),K_t.forEach(t),_sr=r(I$e," \u2014 "),Cz=n(I$e,"A",{href:!0});var Z_t=s(Cz);bsr=r(Z_t,"TFDebertaModel"),Z_t.forEach(t),vsr=r(I$e," (DeBERTa model)"),I$e.forEach(t),Fsr=i(D),O6=n(D,"LI",{});var q$e=s(O6);u0e=n(q$e,"STRONG",{});var e0t=s(u0e);Tsr=r(e0t,"deberta-v2"),e0t.forEach(t),Msr=r(q$e," \u2014 "),wz=n(q$e,"A",{href:!0});var o0t=s(wz);Esr=r(o0t,"TFDebertaV2Model"),o0t.forEach(t),Csr=r(q$e," (DeBERTa-v2 model)"),q$e.forEach(t),wsr=i(D),V6=n(D,"LI",{});var N$e=s(V6);_0e=n(N$e,"STRONG",{});var r0t=s(_0e);Asr=r(r0t,"distilbert"),r0t.forEach(t),ysr=r(N$e," \u2014 "),Az=n(N$e,"A",{href:!0});var t0t=s(Az);Lsr=r(t0t,"TFDistilBertModel"),t0t.forEach(t),xsr=r(N$e," (DistilBERT model)"),N$e.forEach(t),$sr=i(D),X6=n(D,"LI",{});var j$e=s(X6);b0e=n(j$e,"STRONG",{});var a0t=s(b0e);ksr=r(a0t,"dpr"),a0t.forEach(t),Ssr=r(j$e," \u2014 "),yz=n(j$e,"A",{href:!0});var n0t=s(yz);Rsr=r(n0t,"TFDPRQuestionEncoder"),n0t.forEach(t),Bsr=r(j$e," (DPR model)"),j$e.forEach(t),Psr=i(D),z6=n(D,"LI",{});var D$e=s(z6);v0e=n(D$e,"STRONG",{});var s0t=s(v0e);Isr=r(s0t,"electra"),s0t.forEach(t),qsr=r(D$e," \u2014 "),Lz=n(D$e,"A",{href:!0});var l0t=s(Lz);Nsr=r(l0t,"TFElectraModel"),l0t.forEach(t),jsr=r(D$e," (ELECTRA model)"),D$e.forEach(t),Dsr=i(D),Q6=n(D,"LI",{});var G$e=s(Q6);F0e=n(G$e,"STRONG",{});var i0t=s(F0e);Gsr=r(i0t,"flaubert"),i0t.forEach(t),Osr=r(G$e," \u2014 "),xz=n(G$e,"A",{href:!0});var d0t=s(xz);Vsr=r(d0t,"TFFlaubertModel"),d0t.forEach(t),Xsr=r(G$e," (FlauBERT model)"),G$e.forEach(t),zsr=i(D),Ps=n(D,"LI",{});var b$=s(Ps);T0e=n(b$,"STRONG",{});var c0t=s(T0e);Qsr=r(c0t,"funnel"),c0t.forEach(t),Wsr=r(b$," \u2014 "),$z=n(b$,"A",{href:!0});var f0t=s($z);Hsr=r(f0t,"TFFunnelModel"),f0t.forEach(t),Usr=r(b$," or "),kz=n(b$,"A",{href:!0});var m0t=s(kz);Jsr=r(m0t,"TFFunnelBaseModel"),m0t.forEach(t),Ysr=r(b$," (Funnel Transformer model)"),b$.forEach(t),Ksr=i(D),W6=n(D,"LI",{});var O$e=s(W6);M0e=n(O$e,"STRONG",{});var g0t=s(M0e);Zsr=r(g0t,"gpt2"),g0t.forEach(t),elr=r(O$e," \u2014 "),Sz=n(O$e,"A",{href:!0});var h0t=s(Sz);olr=r(h0t,"TFGPT2Model"),h0t.forEach(t),rlr=r(O$e," (OpenAI GPT-2 model)"),O$e.forEach(t),tlr=i(D),H6=n(D,"LI",{});var V$e=s(H6);E0e=n(V$e,"STRONG",{});var p0t=s(E0e);alr=r(p0t,"gptj"),p0t.forEach(t),nlr=r(V$e," \u2014 "),Rz=n(V$e,"A",{href:!0});var u0t=s(Rz);slr=r(u0t,"TFGPTJModel"),u0t.forEach(t),llr=r(V$e," (GPT-J model)"),V$e.forEach(t),ilr=i(D),U6=n(D,"LI",{});var X$e=s(U6);C0e=n(X$e,"STRONG",{});var _0t=s(C0e);dlr=r(_0t,"hubert"),_0t.forEach(t),clr=r(X$e," \u2014 "),Bz=n(X$e,"A",{href:!0});var b0t=s(Bz);flr=r(b0t,"TFHubertModel"),b0t.forEach(t),mlr=r(X$e," (Hubert model)"),X$e.forEach(t),glr=i(D),J6=n(D,"LI",{});var z$e=s(J6);w0e=n(z$e,"STRONG",{});var v0t=s(w0e);hlr=r(v0t,"layoutlm"),v0t.forEach(t),plr=r(z$e," \u2014 "),Pz=n(z$e,"A",{href:!0});var F0t=s(Pz);ulr=r(F0t,"TFLayoutLMModel"),F0t.forEach(t),_lr=r(z$e," (LayoutLM model)"),z$e.forEach(t),blr=i(D),Y6=n(D,"LI",{});var Q$e=s(Y6);A0e=n(Q$e,"STRONG",{});var T0t=s(A0e);vlr=r(T0t,"led"),T0t.forEach(t),Flr=r(Q$e," \u2014 "),Iz=n(Q$e,"A",{href:!0});var M0t=s(Iz);Tlr=r(M0t,"TFLEDModel"),M0t.forEach(t),Mlr=r(Q$e," (LED model)"),Q$e.forEach(t),Elr=i(D),K6=n(D,"LI",{});var W$e=s(K6);y0e=n(W$e,"STRONG",{});var E0t=s(y0e);Clr=r(E0t,"longformer"),E0t.forEach(t),wlr=r(W$e," \u2014 "),qz=n(W$e,"A",{href:!0});var C0t=s(qz);Alr=r(C0t,"TFLongformerModel"),C0t.forEach(t),ylr=r(W$e," (Longformer model)"),W$e.forEach(t),Llr=i(D),Z6=n(D,"LI",{});var H$e=s(Z6);L0e=n(H$e,"STRONG",{});var w0t=s(L0e);xlr=r(w0t,"lxmert"),w0t.forEach(t),$lr=r(H$e," \u2014 "),Nz=n(H$e,"A",{href:!0});var A0t=s(Nz);klr=r(A0t,"TFLxmertModel"),A0t.forEach(t),Slr=r(H$e," (LXMERT model)"),H$e.forEach(t),Rlr=i(D),eT=n(D,"LI",{});var U$e=s(eT);x0e=n(U$e,"STRONG",{});var y0t=s(x0e);Blr=r(y0t,"marian"),y0t.forEach(t),Plr=r(U$e," \u2014 "),jz=n(U$e,"A",{href:!0});var L0t=s(jz);Ilr=r(L0t,"TFMarianModel"),L0t.forEach(t),qlr=r(U$e," (Marian model)"),U$e.forEach(t),Nlr=i(D),oT=n(D,"LI",{});var J$e=s(oT);$0e=n(J$e,"STRONG",{});var x0t=s($0e);jlr=r(x0t,"mbart"),x0t.forEach(t),Dlr=r(J$e," \u2014 "),Dz=n(J$e,"A",{href:!0});var $0t=s(Dz);Glr=r($0t,"TFMBartModel"),$0t.forEach(t),Olr=r(J$e," (mBART model)"),J$e.forEach(t),Vlr=i(D),rT=n(D,"LI",{});var Y$e=s(rT);k0e=n(Y$e,"STRONG",{});var k0t=s(k0e);Xlr=r(k0t,"mobilebert"),k0t.forEach(t),zlr=r(Y$e," \u2014 "),Gz=n(Y$e,"A",{href:!0});var S0t=s(Gz);Qlr=r(S0t,"TFMobileBertModel"),S0t.forEach(t),Wlr=r(Y$e," (MobileBERT model)"),Y$e.forEach(t),Hlr=i(D),tT=n(D,"LI",{});var K$e=s(tT);S0e=n(K$e,"STRONG",{});var R0t=s(S0e);Ulr=r(R0t,"mpnet"),R0t.forEach(t),Jlr=r(K$e," \u2014 "),Oz=n(K$e,"A",{href:!0});var B0t=s(Oz);Ylr=r(B0t,"TFMPNetModel"),B0t.forEach(t),Klr=r(K$e," (MPNet model)"),K$e.forEach(t),Zlr=i(D),aT=n(D,"LI",{});var Z$e=s(aT);R0e=n(Z$e,"STRONG",{});var P0t=s(R0e);eir=r(P0t,"mt5"),P0t.forEach(t),oir=r(Z$e," \u2014 "),Vz=n(Z$e,"A",{href:!0});var I0t=s(Vz);rir=r(I0t,"TFMT5Model"),I0t.forEach(t),tir=r(Z$e," (mT5 model)"),Z$e.forEach(t),air=i(D),nT=n(D,"LI",{});var eke=s(nT);B0e=n(eke,"STRONG",{});var q0t=s(B0e);nir=r(q0t,"openai-gpt"),q0t.forEach(t),sir=r(eke," \u2014 "),Xz=n(eke,"A",{href:!0});var N0t=s(Xz);lir=r(N0t,"TFOpenAIGPTModel"),N0t.forEach(t),iir=r(eke," (OpenAI GPT model)"),eke.forEach(t),dir=i(D),sT=n(D,"LI",{});var oke=s(sT);P0e=n(oke,"STRONG",{});var j0t=s(P0e);cir=r(j0t,"pegasus"),j0t.forEach(t),fir=r(oke," \u2014 "),zz=n(oke,"A",{href:!0});var D0t=s(zz);mir=r(D0t,"TFPegasusModel"),D0t.forEach(t),gir=r(oke," (Pegasus model)"),oke.forEach(t),hir=i(D),lT=n(D,"LI",{});var rke=s(lT);I0e=n(rke,"STRONG",{});var G0t=s(I0e);pir=r(G0t,"rembert"),G0t.forEach(t),uir=r(rke," \u2014 "),Qz=n(rke,"A",{href:!0});var O0t=s(Qz);_ir=r(O0t,"TFRemBertModel"),O0t.forEach(t),bir=r(rke," (RemBERT model)"),rke.forEach(t),vir=i(D),iT=n(D,"LI",{});var tke=s(iT);q0e=n(tke,"STRONG",{});var V0t=s(q0e);Fir=r(V0t,"roberta"),V0t.forEach(t),Tir=r(tke," \u2014 "),Wz=n(tke,"A",{href:!0});var X0t=s(Wz);Mir=r(X0t,"TFRobertaModel"),X0t.forEach(t),Eir=r(tke," (RoBERTa model)"),tke.forEach(t),Cir=i(D),dT=n(D,"LI",{});var ake=s(dT);N0e=n(ake,"STRONG",{});var z0t=s(N0e);wir=r(z0t,"roformer"),z0t.forEach(t),Air=r(ake," \u2014 "),Hz=n(ake,"A",{href:!0});var Q0t=s(Hz);yir=r(Q0t,"TFRoFormerModel"),Q0t.forEach(t),Lir=r(ake," (RoFormer model)"),ake.forEach(t),xir=i(D),cT=n(D,"LI",{});var nke=s(cT);j0e=n(nke,"STRONG",{});var W0t=s(j0e);$ir=r(W0t,"speech_to_text"),W0t.forEach(t),kir=r(nke," \u2014 "),Uz=n(nke,"A",{href:!0});var H0t=s(Uz);Sir=r(H0t,"TFSpeech2TextModel"),H0t.forEach(t),Rir=r(nke," (Speech2Text model)"),nke.forEach(t),Bir=i(D),fT=n(D,"LI",{});var ske=s(fT);D0e=n(ske,"STRONG",{});var U0t=s(D0e);Pir=r(U0t,"t5"),U0t.forEach(t),Iir=r(ske," \u2014 "),Jz=n(ske,"A",{href:!0});var J0t=s(Jz);qir=r(J0t,"TFT5Model"),J0t.forEach(t),Nir=r(ske," (T5 model)"),ske.forEach(t),jir=i(D),mT=n(D,"LI",{});var lke=s(mT);G0e=n(lke,"STRONG",{});var Y0t=s(G0e);Dir=r(Y0t,"tapas"),Y0t.forEach(t),Gir=r(lke," \u2014 "),Yz=n(lke,"A",{href:!0});var K0t=s(Yz);Oir=r(K0t,"TFTapasModel"),K0t.forEach(t),Vir=r(lke," (TAPAS model)"),lke.forEach(t),Xir=i(D),gT=n(D,"LI",{});var ike=s(gT);O0e=n(ike,"STRONG",{});var Z0t=s(O0e);zir=r(Z0t,"transfo-xl"),Z0t.forEach(t),Qir=r(ike," \u2014 "),Kz=n(ike,"A",{href:!0});var e1t=s(Kz);Wir=r(e1t,"TFTransfoXLModel"),e1t.forEach(t),Hir=r(ike," (Transformer-XL model)"),ike.forEach(t),Uir=i(D),hT=n(D,"LI",{});var dke=s(hT);V0e=n(dke,"STRONG",{});var o1t=s(V0e);Jir=r(o1t,"vit"),o1t.forEach(t),Yir=r(dke," \u2014 "),Zz=n(dke,"A",{href:!0});var r1t=s(Zz);Kir=r(r1t,"TFViTModel"),r1t.forEach(t),Zir=r(dke," (ViT model)"),dke.forEach(t),edr=i(D),pT=n(D,"LI",{});var cke=s(pT);X0e=n(cke,"STRONG",{});var t1t=s(X0e);odr=r(t1t,"vit_mae"),t1t.forEach(t),rdr=r(cke," \u2014 "),eQ=n(cke,"A",{href:!0});var a1t=s(eQ);tdr=r(a1t,"TFViTMAEModel"),a1t.forEach(t),adr=r(cke," (ViTMAE model)"),cke.forEach(t),ndr=i(D),uT=n(D,"LI",{});var fke=s(uT);z0e=n(fke,"STRONG",{});var n1t=s(z0e);sdr=r(n1t,"wav2vec2"),n1t.forEach(t),ldr=r(fke," \u2014 "),oQ=n(fke,"A",{href:!0});var s1t=s(oQ);idr=r(s1t,"TFWav2Vec2Model"),s1t.forEach(t),ddr=r(fke," (Wav2Vec2 model)"),fke.forEach(t),cdr=i(D),_T=n(D,"LI",{});var mke=s(_T);Q0e=n(mke,"STRONG",{});var l1t=s(Q0e);fdr=r(l1t,"xlm"),l1t.forEach(t),mdr=r(mke," \u2014 "),rQ=n(mke,"A",{href:!0});var i1t=s(rQ);gdr=r(i1t,"TFXLMModel"),i1t.forEach(t),hdr=r(mke," (XLM model)"),mke.forEach(t),pdr=i(D),bT=n(D,"LI",{});var gke=s(bT);W0e=n(gke,"STRONG",{});var d1t=s(W0e);udr=r(d1t,"xlm-roberta"),d1t.forEach(t),_dr=r(gke," \u2014 "),tQ=n(gke,"A",{href:!0});var c1t=s(tQ);bdr=r(c1t,"TFXLMRobertaModel"),c1t.forEach(t),vdr=r(gke," (XLM-RoBERTa model)"),gke.forEach(t),Fdr=i(D),vT=n(D,"LI",{});var hke=s(vT);H0e=n(hke,"STRONG",{});var f1t=s(H0e);Tdr=r(f1t,"xlnet"),f1t.forEach(t),Mdr=r(hke," \u2014 "),aQ=n(hke,"A",{href:!0});var m1t=s(aQ);Edr=r(m1t,"TFXLNetModel"),m1t.forEach(t),Cdr=r(hke," (XLNet model)"),hke.forEach(t),D.forEach(t),wdr=i(fl),T(FT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),gqe=i(f),Gd=n(f,"H2",{class:!0});var vje=s(Gd);TT=n(vje,"A",{id:!0,class:!0,href:!0});var g1t=s(TT);U0e=n(g1t,"SPAN",{});var h1t=s(U0e);T(GL.$$.fragment,h1t),h1t.forEach(t),g1t.forEach(t),Adr=i(vje),J0e=n(vje,"SPAN",{});var p1t=s(J0e);ydr=r(p1t,"TFAutoModelForPreTraining"),p1t.forEach(t),vje.forEach(t),hqe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(OL.$$.fragment,ml),Ldr=i(ml),Od=n(ml,"P",{});var gZ=s(Od);xdr=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nQ=n(gZ,"A",{href:!0});var u1t=s(nQ);$dr=r(u1t,"from_pretrained()"),u1t.forEach(t),kdr=r(gZ," class method or the "),sQ=n(gZ,"A",{href:!0});var _1t=s(sQ);Sdr=r(_1t,"from_config()"),_1t.forEach(t),Rdr=r(gZ,` class
method.`),gZ.forEach(t),Bdr=i(ml),VL=n(ml,"P",{});var Fje=s(VL);Pdr=r(Fje,"This class cannot be instantiated directly using "),Y0e=n(Fje,"CODE",{});var b1t=s(Y0e);Idr=r(b1t,"__init__()"),b1t.forEach(t),qdr=r(Fje," (throws an error)."),Fje.forEach(t),Ndr=i(ml),At=n(ml,"DIV",{class:!0});var ow=s(At);T(XL.$$.fragment,ow),jdr=i(ow),K0e=n(ow,"P",{});var v1t=s(K0e);Ddr=r(v1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),v1t.forEach(t),Gdr=i(ow),Vd=n(ow,"P",{});var hZ=s(Vd);Odr=r(hZ,`Note:
Loading a model from its configuration file does `),Z0e=n(hZ,"STRONG",{});var F1t=s(Z0e);Vdr=r(F1t,"not"),F1t.forEach(t),Xdr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(hZ,"A",{href:!0});var T1t=s(lQ);zdr=r(T1t,"from_pretrained()"),T1t.forEach(t),Qdr=r(hZ," to load the model weights."),hZ.forEach(t),Wdr=i(ow),T(MT.$$.fragment,ow),ow.forEach(t),Hdr=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(zL.$$.fragment,gl),Udr=i(gl),e1e=n(gl,"P",{});var M1t=s(e1e);Jdr=r(M1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),M1t.forEach(t),Ydr=i(gl),Za=n(gl,"P",{});var rw=s(Za);Kdr=r(rw,"The model class to instantiate is selected based on the "),o1e=n(rw,"CODE",{});var E1t=s(o1e);Zdr=r(E1t,"model_type"),E1t.forEach(t),ecr=r(rw,` property of the config object (either
passed as an argument or loaded from `),r1e=n(rw,"CODE",{});var C1t=s(r1e);ocr=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),rcr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(rw,"CODE",{});var w1t=s(t1e);tcr=r(w1t,"pretrained_model_name_or_path"),w1t.forEach(t),acr=r(rw,":"),rw.forEach(t),ncr=i(gl),se=n(gl,"UL",{});var le=s(se);ET=n(le,"LI",{});var pke=s(ET);a1e=n(pke,"STRONG",{});var A1t=s(a1e);scr=r(A1t,"albert"),A1t.forEach(t),lcr=r(pke," \u2014 "),iQ=n(pke,"A",{href:!0});var y1t=s(iQ);icr=r(y1t,"TFAlbertForPreTraining"),y1t.forEach(t),dcr=r(pke," (ALBERT model)"),pke.forEach(t),ccr=i(le),CT=n(le,"LI",{});var uke=s(CT);n1e=n(uke,"STRONG",{});var L1t=s(n1e);fcr=r(L1t,"bart"),L1t.forEach(t),mcr=r(uke," \u2014 "),dQ=n(uke,"A",{href:!0});var x1t=s(dQ);gcr=r(x1t,"TFBartForConditionalGeneration"),x1t.forEach(t),hcr=r(uke," (BART model)"),uke.forEach(t),pcr=i(le),wT=n(le,"LI",{});var _ke=s(wT);s1e=n(_ke,"STRONG",{});var $1t=s(s1e);ucr=r($1t,"bert"),$1t.forEach(t),_cr=r(_ke," \u2014 "),cQ=n(_ke,"A",{href:!0});var k1t=s(cQ);bcr=r(k1t,"TFBertForPreTraining"),k1t.forEach(t),vcr=r(_ke," (BERT model)"),_ke.forEach(t),Fcr=i(le),AT=n(le,"LI",{});var bke=s(AT);l1e=n(bke,"STRONG",{});var S1t=s(l1e);Tcr=r(S1t,"camembert"),S1t.forEach(t),Mcr=r(bke," \u2014 "),fQ=n(bke,"A",{href:!0});var R1t=s(fQ);Ecr=r(R1t,"TFCamembertForMaskedLM"),R1t.forEach(t),Ccr=r(bke," (CamemBERT model)"),bke.forEach(t),wcr=i(le),yT=n(le,"LI",{});var vke=s(yT);i1e=n(vke,"STRONG",{});var B1t=s(i1e);Acr=r(B1t,"ctrl"),B1t.forEach(t),ycr=r(vke," \u2014 "),mQ=n(vke,"A",{href:!0});var P1t=s(mQ);Lcr=r(P1t,"TFCTRLLMHeadModel"),P1t.forEach(t),xcr=r(vke," (CTRL model)"),vke.forEach(t),$cr=i(le),LT=n(le,"LI",{});var Fke=s(LT);d1e=n(Fke,"STRONG",{});var I1t=s(d1e);kcr=r(I1t,"distilbert"),I1t.forEach(t),Scr=r(Fke," \u2014 "),gQ=n(Fke,"A",{href:!0});var q1t=s(gQ);Rcr=r(q1t,"TFDistilBertForMaskedLM"),q1t.forEach(t),Bcr=r(Fke," (DistilBERT model)"),Fke.forEach(t),Pcr=i(le),xT=n(le,"LI",{});var Tke=s(xT);c1e=n(Tke,"STRONG",{});var N1t=s(c1e);Icr=r(N1t,"electra"),N1t.forEach(t),qcr=r(Tke," \u2014 "),hQ=n(Tke,"A",{href:!0});var j1t=s(hQ);Ncr=r(j1t,"TFElectraForPreTraining"),j1t.forEach(t),jcr=r(Tke," (ELECTRA model)"),Tke.forEach(t),Dcr=i(le),$T=n(le,"LI",{});var Mke=s($T);f1e=n(Mke,"STRONG",{});var D1t=s(f1e);Gcr=r(D1t,"flaubert"),D1t.forEach(t),Ocr=r(Mke," \u2014 "),pQ=n(Mke,"A",{href:!0});var G1t=s(pQ);Vcr=r(G1t,"TFFlaubertWithLMHeadModel"),G1t.forEach(t),Xcr=r(Mke," (FlauBERT model)"),Mke.forEach(t),zcr=i(le),kT=n(le,"LI",{});var Eke=s(kT);m1e=n(Eke,"STRONG",{});var O1t=s(m1e);Qcr=r(O1t,"funnel"),O1t.forEach(t),Wcr=r(Eke," \u2014 "),uQ=n(Eke,"A",{href:!0});var V1t=s(uQ);Hcr=r(V1t,"TFFunnelForPreTraining"),V1t.forEach(t),Ucr=r(Eke," (Funnel Transformer model)"),Eke.forEach(t),Jcr=i(le),ST=n(le,"LI",{});var Cke=s(ST);g1e=n(Cke,"STRONG",{});var X1t=s(g1e);Ycr=r(X1t,"gpt2"),X1t.forEach(t),Kcr=r(Cke," \u2014 "),_Q=n(Cke,"A",{href:!0});var z1t=s(_Q);Zcr=r(z1t,"TFGPT2LMHeadModel"),z1t.forEach(t),efr=r(Cke," (OpenAI GPT-2 model)"),Cke.forEach(t),ofr=i(le),RT=n(le,"LI",{});var wke=s(RT);h1e=n(wke,"STRONG",{});var Q1t=s(h1e);rfr=r(Q1t,"layoutlm"),Q1t.forEach(t),tfr=r(wke," \u2014 "),bQ=n(wke,"A",{href:!0});var W1t=s(bQ);afr=r(W1t,"TFLayoutLMForMaskedLM"),W1t.forEach(t),nfr=r(wke," (LayoutLM model)"),wke.forEach(t),sfr=i(le),BT=n(le,"LI",{});var Ake=s(BT);p1e=n(Ake,"STRONG",{});var H1t=s(p1e);lfr=r(H1t,"lxmert"),H1t.forEach(t),ifr=r(Ake," \u2014 "),vQ=n(Ake,"A",{href:!0});var U1t=s(vQ);dfr=r(U1t,"TFLxmertForPreTraining"),U1t.forEach(t),cfr=r(Ake," (LXMERT model)"),Ake.forEach(t),ffr=i(le),PT=n(le,"LI",{});var yke=s(PT);u1e=n(yke,"STRONG",{});var J1t=s(u1e);mfr=r(J1t,"mobilebert"),J1t.forEach(t),gfr=r(yke," \u2014 "),FQ=n(yke,"A",{href:!0});var Y1t=s(FQ);hfr=r(Y1t,"TFMobileBertForPreTraining"),Y1t.forEach(t),pfr=r(yke," (MobileBERT model)"),yke.forEach(t),ufr=i(le),IT=n(le,"LI",{});var Lke=s(IT);_1e=n(Lke,"STRONG",{});var K1t=s(_1e);_fr=r(K1t,"mpnet"),K1t.forEach(t),bfr=r(Lke," \u2014 "),TQ=n(Lke,"A",{href:!0});var Z1t=s(TQ);vfr=r(Z1t,"TFMPNetForMaskedLM"),Z1t.forEach(t),Ffr=r(Lke," (MPNet model)"),Lke.forEach(t),Tfr=i(le),qT=n(le,"LI",{});var xke=s(qT);b1e=n(xke,"STRONG",{});var ebt=s(b1e);Mfr=r(ebt,"openai-gpt"),ebt.forEach(t),Efr=r(xke," \u2014 "),MQ=n(xke,"A",{href:!0});var obt=s(MQ);Cfr=r(obt,"TFOpenAIGPTLMHeadModel"),obt.forEach(t),wfr=r(xke," (OpenAI GPT model)"),xke.forEach(t),Afr=i(le),NT=n(le,"LI",{});var $ke=s(NT);v1e=n($ke,"STRONG",{});var rbt=s(v1e);yfr=r(rbt,"roberta"),rbt.forEach(t),Lfr=r($ke," \u2014 "),EQ=n($ke,"A",{href:!0});var tbt=s(EQ);xfr=r(tbt,"TFRobertaForMaskedLM"),tbt.forEach(t),$fr=r($ke," (RoBERTa model)"),$ke.forEach(t),kfr=i(le),jT=n(le,"LI",{});var kke=s(jT);F1e=n(kke,"STRONG",{});var abt=s(F1e);Sfr=r(abt,"t5"),abt.forEach(t),Rfr=r(kke," \u2014 "),CQ=n(kke,"A",{href:!0});var nbt=s(CQ);Bfr=r(nbt,"TFT5ForConditionalGeneration"),nbt.forEach(t),Pfr=r(kke," (T5 model)"),kke.forEach(t),Ifr=i(le),DT=n(le,"LI",{});var Ske=s(DT);T1e=n(Ske,"STRONG",{});var sbt=s(T1e);qfr=r(sbt,"tapas"),sbt.forEach(t),Nfr=r(Ske," \u2014 "),wQ=n(Ske,"A",{href:!0});var lbt=s(wQ);jfr=r(lbt,"TFTapasForMaskedLM"),lbt.forEach(t),Dfr=r(Ske," (TAPAS model)"),Ske.forEach(t),Gfr=i(le),GT=n(le,"LI",{});var Rke=s(GT);M1e=n(Rke,"STRONG",{});var ibt=s(M1e);Ofr=r(ibt,"transfo-xl"),ibt.forEach(t),Vfr=r(Rke," \u2014 "),AQ=n(Rke,"A",{href:!0});var dbt=s(AQ);Xfr=r(dbt,"TFTransfoXLLMHeadModel"),dbt.forEach(t),zfr=r(Rke," (Transformer-XL model)"),Rke.forEach(t),Qfr=i(le),OT=n(le,"LI",{});var Bke=s(OT);E1e=n(Bke,"STRONG",{});var cbt=s(E1e);Wfr=r(cbt,"vit_mae"),cbt.forEach(t),Hfr=r(Bke," \u2014 "),yQ=n(Bke,"A",{href:!0});var fbt=s(yQ);Ufr=r(fbt,"TFViTMAEForPreTraining"),fbt.forEach(t),Jfr=r(Bke," (ViTMAE model)"),Bke.forEach(t),Yfr=i(le),VT=n(le,"LI",{});var Pke=s(VT);C1e=n(Pke,"STRONG",{});var mbt=s(C1e);Kfr=r(mbt,"xlm"),mbt.forEach(t),Zfr=r(Pke," \u2014 "),LQ=n(Pke,"A",{href:!0});var gbt=s(LQ);emr=r(gbt,"TFXLMWithLMHeadModel"),gbt.forEach(t),omr=r(Pke," (XLM model)"),Pke.forEach(t),rmr=i(le),XT=n(le,"LI",{});var Ike=s(XT);w1e=n(Ike,"STRONG",{});var hbt=s(w1e);tmr=r(hbt,"xlm-roberta"),hbt.forEach(t),amr=r(Ike," \u2014 "),xQ=n(Ike,"A",{href:!0});var pbt=s(xQ);nmr=r(pbt,"TFXLMRobertaForMaskedLM"),pbt.forEach(t),smr=r(Ike," (XLM-RoBERTa model)"),Ike.forEach(t),lmr=i(le),zT=n(le,"LI",{});var qke=s(zT);A1e=n(qke,"STRONG",{});var ubt=s(A1e);imr=r(ubt,"xlnet"),ubt.forEach(t),dmr=r(qke," \u2014 "),$Q=n(qke,"A",{href:!0});var _bt=s($Q);cmr=r(_bt,"TFXLNetLMHeadModel"),_bt.forEach(t),fmr=r(qke," (XLNet model)"),qke.forEach(t),le.forEach(t),mmr=i(gl),T(QT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),pqe=i(f),Xd=n(f,"H2",{class:!0});var Tje=s(Xd);WT=n(Tje,"A",{id:!0,class:!0,href:!0});var bbt=s(WT);y1e=n(bbt,"SPAN",{});var vbt=s(y1e);T(QL.$$.fragment,vbt),vbt.forEach(t),bbt.forEach(t),gmr=i(Tje),L1e=n(Tje,"SPAN",{});var Fbt=s(L1e);hmr=r(Fbt,"TFAutoModelForCausalLM"),Fbt.forEach(t),Tje.forEach(t),uqe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(WL.$$.fragment,hl),pmr=i(hl),zd=n(hl,"P",{});var pZ=s(zd);umr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kQ=n(pZ,"A",{href:!0});var Tbt=s(kQ);_mr=r(Tbt,"from_pretrained()"),Tbt.forEach(t),bmr=r(pZ," class method or the "),SQ=n(pZ,"A",{href:!0});var Mbt=s(SQ);vmr=r(Mbt,"from_config()"),Mbt.forEach(t),Fmr=r(pZ,` class
method.`),pZ.forEach(t),Tmr=i(hl),HL=n(hl,"P",{});var Mje=s(HL);Mmr=r(Mje,"This class cannot be instantiated directly using "),x1e=n(Mje,"CODE",{});var Ebt=s(x1e);Emr=r(Ebt,"__init__()"),Ebt.forEach(t),Cmr=r(Mje," (throws an error)."),Mje.forEach(t),wmr=i(hl),yt=n(hl,"DIV",{class:!0});var tw=s(yt);T(UL.$$.fragment,tw),Amr=i(tw),$1e=n(tw,"P",{});var Cbt=s($1e);ymr=r(Cbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cbt.forEach(t),Lmr=i(tw),Qd=n(tw,"P",{});var uZ=s(Qd);xmr=r(uZ,`Note:
Loading a model from its configuration file does `),k1e=n(uZ,"STRONG",{});var wbt=s(k1e);$mr=r(wbt,"not"),wbt.forEach(t),kmr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(uZ,"A",{href:!0});var Abt=s(RQ);Smr=r(Abt,"from_pretrained()"),Abt.forEach(t),Rmr=r(uZ," to load the model weights."),uZ.forEach(t),Bmr=i(tw),T(HT.$$.fragment,tw),tw.forEach(t),Pmr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(JL.$$.fragment,pl),Imr=i(pl),S1e=n(pl,"P",{});var ybt=s(S1e);qmr=r(ybt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ybt.forEach(t),Nmr=i(pl),en=n(pl,"P",{});var aw=s(en);jmr=r(aw,"The model class to instantiate is selected based on the "),R1e=n(aw,"CODE",{});var Lbt=s(R1e);Dmr=r(Lbt,"model_type"),Lbt.forEach(t),Gmr=r(aw,` property of the config object (either
passed as an argument or loaded from `),B1e=n(aw,"CODE",{});var xbt=s(B1e);Omr=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),Vmr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=n(aw,"CODE",{});var $bt=s(P1e);Xmr=r($bt,"pretrained_model_name_or_path"),$bt.forEach(t),zmr=r(aw,":"),aw.forEach(t),Qmr=i(pl),Te=n(pl,"UL",{});var Ce=s(Te);UT=n(Ce,"LI",{});var Nke=s(UT);I1e=n(Nke,"STRONG",{});var kbt=s(I1e);Wmr=r(kbt,"bert"),kbt.forEach(t),Hmr=r(Nke," \u2014 "),BQ=n(Nke,"A",{href:!0});var Sbt=s(BQ);Umr=r(Sbt,"TFBertLMHeadModel"),Sbt.forEach(t),Jmr=r(Nke," (BERT model)"),Nke.forEach(t),Ymr=i(Ce),JT=n(Ce,"LI",{});var jke=s(JT);q1e=n(jke,"STRONG",{});var Rbt=s(q1e);Kmr=r(Rbt,"camembert"),Rbt.forEach(t),Zmr=r(jke," \u2014 "),PQ=n(jke,"A",{href:!0});var Bbt=s(PQ);egr=r(Bbt,"TFCamembertForCausalLM"),Bbt.forEach(t),ogr=r(jke," (CamemBERT model)"),jke.forEach(t),rgr=i(Ce),YT=n(Ce,"LI",{});var Dke=s(YT);N1e=n(Dke,"STRONG",{});var Pbt=s(N1e);tgr=r(Pbt,"ctrl"),Pbt.forEach(t),agr=r(Dke," \u2014 "),IQ=n(Dke,"A",{href:!0});var Ibt=s(IQ);ngr=r(Ibt,"TFCTRLLMHeadModel"),Ibt.forEach(t),sgr=r(Dke," (CTRL model)"),Dke.forEach(t),lgr=i(Ce),KT=n(Ce,"LI",{});var Gke=s(KT);j1e=n(Gke,"STRONG",{});var qbt=s(j1e);igr=r(qbt,"gpt2"),qbt.forEach(t),dgr=r(Gke," \u2014 "),qQ=n(Gke,"A",{href:!0});var Nbt=s(qQ);cgr=r(Nbt,"TFGPT2LMHeadModel"),Nbt.forEach(t),fgr=r(Gke," (OpenAI GPT-2 model)"),Gke.forEach(t),mgr=i(Ce),ZT=n(Ce,"LI",{});var Oke=s(ZT);D1e=n(Oke,"STRONG",{});var jbt=s(D1e);ggr=r(jbt,"gptj"),jbt.forEach(t),hgr=r(Oke," \u2014 "),NQ=n(Oke,"A",{href:!0});var Dbt=s(NQ);pgr=r(Dbt,"TFGPTJForCausalLM"),Dbt.forEach(t),ugr=r(Oke," (GPT-J model)"),Oke.forEach(t),_gr=i(Ce),e7=n(Ce,"LI",{});var Vke=s(e7);G1e=n(Vke,"STRONG",{});var Gbt=s(G1e);bgr=r(Gbt,"openai-gpt"),Gbt.forEach(t),vgr=r(Vke," \u2014 "),jQ=n(Vke,"A",{href:!0});var Obt=s(jQ);Fgr=r(Obt,"TFOpenAIGPTLMHeadModel"),Obt.forEach(t),Tgr=r(Vke," (OpenAI GPT model)"),Vke.forEach(t),Mgr=i(Ce),o7=n(Ce,"LI",{});var Xke=s(o7);O1e=n(Xke,"STRONG",{});var Vbt=s(O1e);Egr=r(Vbt,"rembert"),Vbt.forEach(t),Cgr=r(Xke," \u2014 "),DQ=n(Xke,"A",{href:!0});var Xbt=s(DQ);wgr=r(Xbt,"TFRemBertForCausalLM"),Xbt.forEach(t),Agr=r(Xke," (RemBERT model)"),Xke.forEach(t),ygr=i(Ce),r7=n(Ce,"LI",{});var zke=s(r7);V1e=n(zke,"STRONG",{});var zbt=s(V1e);Lgr=r(zbt,"roberta"),zbt.forEach(t),xgr=r(zke," \u2014 "),GQ=n(zke,"A",{href:!0});var Qbt=s(GQ);$gr=r(Qbt,"TFRobertaForCausalLM"),Qbt.forEach(t),kgr=r(zke," (RoBERTa model)"),zke.forEach(t),Sgr=i(Ce),t7=n(Ce,"LI",{});var Qke=s(t7);X1e=n(Qke,"STRONG",{});var Wbt=s(X1e);Rgr=r(Wbt,"roformer"),Wbt.forEach(t),Bgr=r(Qke," \u2014 "),OQ=n(Qke,"A",{href:!0});var Hbt=s(OQ);Pgr=r(Hbt,"TFRoFormerForCausalLM"),Hbt.forEach(t),Igr=r(Qke," (RoFormer model)"),Qke.forEach(t),qgr=i(Ce),a7=n(Ce,"LI",{});var Wke=s(a7);z1e=n(Wke,"STRONG",{});var Ubt=s(z1e);Ngr=r(Ubt,"transfo-xl"),Ubt.forEach(t),jgr=r(Wke," \u2014 "),VQ=n(Wke,"A",{href:!0});var Jbt=s(VQ);Dgr=r(Jbt,"TFTransfoXLLMHeadModel"),Jbt.forEach(t),Ggr=r(Wke," (Transformer-XL model)"),Wke.forEach(t),Ogr=i(Ce),n7=n(Ce,"LI",{});var Hke=s(n7);Q1e=n(Hke,"STRONG",{});var Ybt=s(Q1e);Vgr=r(Ybt,"xlm"),Ybt.forEach(t),Xgr=r(Hke," \u2014 "),XQ=n(Hke,"A",{href:!0});var Kbt=s(XQ);zgr=r(Kbt,"TFXLMWithLMHeadModel"),Kbt.forEach(t),Qgr=r(Hke," (XLM model)"),Hke.forEach(t),Wgr=i(Ce),s7=n(Ce,"LI",{});var Uke=s(s7);W1e=n(Uke,"STRONG",{});var Zbt=s(W1e);Hgr=r(Zbt,"xlnet"),Zbt.forEach(t),Ugr=r(Uke," \u2014 "),zQ=n(Uke,"A",{href:!0});var e2t=s(zQ);Jgr=r(e2t,"TFXLNetLMHeadModel"),e2t.forEach(t),Ygr=r(Uke," (XLNet model)"),Uke.forEach(t),Ce.forEach(t),Kgr=i(pl),T(l7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),_qe=i(f),Wd=n(f,"H2",{class:!0});var Eje=s(Wd);i7=n(Eje,"A",{id:!0,class:!0,href:!0});var o2t=s(i7);H1e=n(o2t,"SPAN",{});var r2t=s(H1e);T(YL.$$.fragment,r2t),r2t.forEach(t),o2t.forEach(t),Zgr=i(Eje),U1e=n(Eje,"SPAN",{});var t2t=s(U1e);ehr=r(t2t,"TFAutoModelForImageClassification"),t2t.forEach(t),Eje.forEach(t),bqe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T(KL.$$.fragment,ul),ohr=i(ul),Hd=n(ul,"P",{});var _Z=s(Hd);rhr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QQ=n(_Z,"A",{href:!0});var a2t=s(QQ);thr=r(a2t,"from_pretrained()"),a2t.forEach(t),ahr=r(_Z," class method or the "),WQ=n(_Z,"A",{href:!0});var n2t=s(WQ);nhr=r(n2t,"from_config()"),n2t.forEach(t),shr=r(_Z,` class
method.`),_Z.forEach(t),lhr=i(ul),ZL=n(ul,"P",{});var Cje=s(ZL);ihr=r(Cje,"This class cannot be instantiated directly using "),J1e=n(Cje,"CODE",{});var s2t=s(J1e);dhr=r(s2t,"__init__()"),s2t.forEach(t),chr=r(Cje," (throws an error)."),Cje.forEach(t),fhr=i(ul),Lt=n(ul,"DIV",{class:!0});var nw=s(Lt);T(e8.$$.fragment,nw),mhr=i(nw),Y1e=n(nw,"P",{});var l2t=s(Y1e);ghr=r(l2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),l2t.forEach(t),hhr=i(nw),Ud=n(nw,"P",{});var bZ=s(Ud);phr=r(bZ,`Note:
Loading a model from its configuration file does `),K1e=n(bZ,"STRONG",{});var i2t=s(K1e);uhr=r(i2t,"not"),i2t.forEach(t),_hr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(bZ,"A",{href:!0});var d2t=s(HQ);bhr=r(d2t,"from_pretrained()"),d2t.forEach(t),vhr=r(bZ," to load the model weights."),bZ.forEach(t),Fhr=i(nw),T(d7.$$.fragment,nw),nw.forEach(t),Thr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(o8.$$.fragment,_l),Mhr=i(_l),Z1e=n(_l,"P",{});var c2t=s(Z1e);Ehr=r(c2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),c2t.forEach(t),Chr=i(_l),on=n(_l,"P",{});var sw=s(on);whr=r(sw,"The model class to instantiate is selected based on the "),ebe=n(sw,"CODE",{});var f2t=s(ebe);Ahr=r(f2t,"model_type"),f2t.forEach(t),yhr=r(sw,` property of the config object (either
passed as an argument or loaded from `),obe=n(sw,"CODE",{});var m2t=s(obe);Lhr=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),xhr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(sw,"CODE",{});var g2t=s(rbe);$hr=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),khr=r(sw,":"),sw.forEach(t),Shr=i(_l),Jd=n(_l,"UL",{});var vZ=s(Jd);c7=n(vZ,"LI",{});var Jke=s(c7);tbe=n(Jke,"STRONG",{});var h2t=s(tbe);Rhr=r(h2t,"convnext"),h2t.forEach(t),Bhr=r(Jke," \u2014 "),UQ=n(Jke,"A",{href:!0});var p2t=s(UQ);Phr=r(p2t,"TFConvNextForImageClassification"),p2t.forEach(t),Ihr=r(Jke," (ConvNext model)"),Jke.forEach(t),qhr=i(vZ),f7=n(vZ,"LI",{});var Yke=s(f7);abe=n(Yke,"STRONG",{});var u2t=s(abe);Nhr=r(u2t,"data2vec-vision"),u2t.forEach(t),jhr=r(Yke," \u2014 "),JQ=n(Yke,"A",{href:!0});var _2t=s(JQ);Dhr=r(_2t,"TFData2VecVisionForImageClassification"),_2t.forEach(t),Ghr=r(Yke," (Data2VecVision model)"),Yke.forEach(t),Ohr=i(vZ),m7=n(vZ,"LI",{});var Kke=s(m7);nbe=n(Kke,"STRONG",{});var b2t=s(nbe);Vhr=r(b2t,"vit"),b2t.forEach(t),Xhr=r(Kke," \u2014 "),YQ=n(Kke,"A",{href:!0});var v2t=s(YQ);zhr=r(v2t,"TFViTForImageClassification"),v2t.forEach(t),Qhr=r(Kke," (ViT model)"),Kke.forEach(t),vZ.forEach(t),Whr=i(_l),T(g7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),vqe=i(f),Yd=n(f,"H2",{class:!0});var wje=s(Yd);h7=n(wje,"A",{id:!0,class:!0,href:!0});var F2t=s(h7);sbe=n(F2t,"SPAN",{});var T2t=s(sbe);T(r8.$$.fragment,T2t),T2t.forEach(t),F2t.forEach(t),Hhr=i(wje),lbe=n(wje,"SPAN",{});var M2t=s(lbe);Uhr=r(M2t,"TFAutoModelForMaskedLM"),M2t.forEach(t),wje.forEach(t),Fqe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(t8.$$.fragment,bl),Jhr=i(bl),Kd=n(bl,"P",{});var FZ=s(Kd);Yhr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KQ=n(FZ,"A",{href:!0});var E2t=s(KQ);Khr=r(E2t,"from_pretrained()"),E2t.forEach(t),Zhr=r(FZ," class method or the "),ZQ=n(FZ,"A",{href:!0});var C2t=s(ZQ);epr=r(C2t,"from_config()"),C2t.forEach(t),opr=r(FZ,` class
method.`),FZ.forEach(t),rpr=i(bl),a8=n(bl,"P",{});var Aje=s(a8);tpr=r(Aje,"This class cannot be instantiated directly using "),ibe=n(Aje,"CODE",{});var w2t=s(ibe);apr=r(w2t,"__init__()"),w2t.forEach(t),npr=r(Aje," (throws an error)."),Aje.forEach(t),spr=i(bl),xt=n(bl,"DIV",{class:!0});var lw=s(xt);T(n8.$$.fragment,lw),lpr=i(lw),dbe=n(lw,"P",{});var A2t=s(dbe);ipr=r(A2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A2t.forEach(t),dpr=i(lw),Zd=n(lw,"P",{});var TZ=s(Zd);cpr=r(TZ,`Note:
Loading a model from its configuration file does `),cbe=n(TZ,"STRONG",{});var y2t=s(cbe);fpr=r(y2t,"not"),y2t.forEach(t),mpr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(TZ,"A",{href:!0});var L2t=s(eW);gpr=r(L2t,"from_pretrained()"),L2t.forEach(t),hpr=r(TZ," to load the model weights."),TZ.forEach(t),ppr=i(lw),T(p7.$$.fragment,lw),lw.forEach(t),upr=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(s8.$$.fragment,vl),_pr=i(vl),fbe=n(vl,"P",{});var x2t=s(fbe);bpr=r(x2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),x2t.forEach(t),vpr=i(vl),rn=n(vl,"P",{});var iw=s(rn);Fpr=r(iw,"The model class to instantiate is selected based on the "),mbe=n(iw,"CODE",{});var $2t=s(mbe);Tpr=r($2t,"model_type"),$2t.forEach(t),Mpr=r(iw,` property of the config object (either
passed as an argument or loaded from `),gbe=n(iw,"CODE",{});var k2t=s(gbe);Epr=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),Cpr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(iw,"CODE",{});var S2t=s(hbe);wpr=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),Apr=r(iw,":"),iw.forEach(t),ypr=i(vl),ie=n(vl,"UL",{});var fe=s(ie);u7=n(fe,"LI",{});var Zke=s(u7);pbe=n(Zke,"STRONG",{});var R2t=s(pbe);Lpr=r(R2t,"albert"),R2t.forEach(t),xpr=r(Zke," \u2014 "),oW=n(Zke,"A",{href:!0});var B2t=s(oW);$pr=r(B2t,"TFAlbertForMaskedLM"),B2t.forEach(t),kpr=r(Zke," (ALBERT model)"),Zke.forEach(t),Spr=i(fe),_7=n(fe,"LI",{});var eSe=s(_7);ube=n(eSe,"STRONG",{});var P2t=s(ube);Rpr=r(P2t,"bert"),P2t.forEach(t),Bpr=r(eSe," \u2014 "),rW=n(eSe,"A",{href:!0});var I2t=s(rW);Ppr=r(I2t,"TFBertForMaskedLM"),I2t.forEach(t),Ipr=r(eSe," (BERT model)"),eSe.forEach(t),qpr=i(fe),b7=n(fe,"LI",{});var oSe=s(b7);_be=n(oSe,"STRONG",{});var q2t=s(_be);Npr=r(q2t,"camembert"),q2t.forEach(t),jpr=r(oSe," \u2014 "),tW=n(oSe,"A",{href:!0});var N2t=s(tW);Dpr=r(N2t,"TFCamembertForMaskedLM"),N2t.forEach(t),Gpr=r(oSe," (CamemBERT model)"),oSe.forEach(t),Opr=i(fe),v7=n(fe,"LI",{});var rSe=s(v7);bbe=n(rSe,"STRONG",{});var j2t=s(bbe);Vpr=r(j2t,"convbert"),j2t.forEach(t),Xpr=r(rSe," \u2014 "),aW=n(rSe,"A",{href:!0});var D2t=s(aW);zpr=r(D2t,"TFConvBertForMaskedLM"),D2t.forEach(t),Qpr=r(rSe," (ConvBERT model)"),rSe.forEach(t),Wpr=i(fe),F7=n(fe,"LI",{});var tSe=s(F7);vbe=n(tSe,"STRONG",{});var G2t=s(vbe);Hpr=r(G2t,"deberta"),G2t.forEach(t),Upr=r(tSe," \u2014 "),nW=n(tSe,"A",{href:!0});var O2t=s(nW);Jpr=r(O2t,"TFDebertaForMaskedLM"),O2t.forEach(t),Ypr=r(tSe," (DeBERTa model)"),tSe.forEach(t),Kpr=i(fe),T7=n(fe,"LI",{});var aSe=s(T7);Fbe=n(aSe,"STRONG",{});var V2t=s(Fbe);Zpr=r(V2t,"deberta-v2"),V2t.forEach(t),eur=r(aSe," \u2014 "),sW=n(aSe,"A",{href:!0});var X2t=s(sW);our=r(X2t,"TFDebertaV2ForMaskedLM"),X2t.forEach(t),rur=r(aSe," (DeBERTa-v2 model)"),aSe.forEach(t),tur=i(fe),M7=n(fe,"LI",{});var nSe=s(M7);Tbe=n(nSe,"STRONG",{});var z2t=s(Tbe);aur=r(z2t,"distilbert"),z2t.forEach(t),nur=r(nSe," \u2014 "),lW=n(nSe,"A",{href:!0});var Q2t=s(lW);sur=r(Q2t,"TFDistilBertForMaskedLM"),Q2t.forEach(t),lur=r(nSe," (DistilBERT model)"),nSe.forEach(t),iur=i(fe),E7=n(fe,"LI",{});var sSe=s(E7);Mbe=n(sSe,"STRONG",{});var W2t=s(Mbe);dur=r(W2t,"electra"),W2t.forEach(t),cur=r(sSe," \u2014 "),iW=n(sSe,"A",{href:!0});var H2t=s(iW);fur=r(H2t,"TFElectraForMaskedLM"),H2t.forEach(t),mur=r(sSe," (ELECTRA model)"),sSe.forEach(t),gur=i(fe),C7=n(fe,"LI",{});var lSe=s(C7);Ebe=n(lSe,"STRONG",{});var U2t=s(Ebe);hur=r(U2t,"flaubert"),U2t.forEach(t),pur=r(lSe," \u2014 "),dW=n(lSe,"A",{href:!0});var J2t=s(dW);uur=r(J2t,"TFFlaubertWithLMHeadModel"),J2t.forEach(t),_ur=r(lSe," (FlauBERT model)"),lSe.forEach(t),bur=i(fe),w7=n(fe,"LI",{});var iSe=s(w7);Cbe=n(iSe,"STRONG",{});var Y2t=s(Cbe);vur=r(Y2t,"funnel"),Y2t.forEach(t),Fur=r(iSe," \u2014 "),cW=n(iSe,"A",{href:!0});var K2t=s(cW);Tur=r(K2t,"TFFunnelForMaskedLM"),K2t.forEach(t),Mur=r(iSe," (Funnel Transformer model)"),iSe.forEach(t),Eur=i(fe),A7=n(fe,"LI",{});var dSe=s(A7);wbe=n(dSe,"STRONG",{});var Z2t=s(wbe);Cur=r(Z2t,"layoutlm"),Z2t.forEach(t),wur=r(dSe," \u2014 "),fW=n(dSe,"A",{href:!0});var evt=s(fW);Aur=r(evt,"TFLayoutLMForMaskedLM"),evt.forEach(t),yur=r(dSe," (LayoutLM model)"),dSe.forEach(t),Lur=i(fe),y7=n(fe,"LI",{});var cSe=s(y7);Abe=n(cSe,"STRONG",{});var ovt=s(Abe);xur=r(ovt,"longformer"),ovt.forEach(t),$ur=r(cSe," \u2014 "),mW=n(cSe,"A",{href:!0});var rvt=s(mW);kur=r(rvt,"TFLongformerForMaskedLM"),rvt.forEach(t),Sur=r(cSe," (Longformer model)"),cSe.forEach(t),Rur=i(fe),L7=n(fe,"LI",{});var fSe=s(L7);ybe=n(fSe,"STRONG",{});var tvt=s(ybe);Bur=r(tvt,"mobilebert"),tvt.forEach(t),Pur=r(fSe," \u2014 "),gW=n(fSe,"A",{href:!0});var avt=s(gW);Iur=r(avt,"TFMobileBertForMaskedLM"),avt.forEach(t),qur=r(fSe," (MobileBERT model)"),fSe.forEach(t),Nur=i(fe),x7=n(fe,"LI",{});var mSe=s(x7);Lbe=n(mSe,"STRONG",{});var nvt=s(Lbe);jur=r(nvt,"mpnet"),nvt.forEach(t),Dur=r(mSe," \u2014 "),hW=n(mSe,"A",{href:!0});var svt=s(hW);Gur=r(svt,"TFMPNetForMaskedLM"),svt.forEach(t),Our=r(mSe," (MPNet model)"),mSe.forEach(t),Vur=i(fe),$7=n(fe,"LI",{});var gSe=s($7);xbe=n(gSe,"STRONG",{});var lvt=s(xbe);Xur=r(lvt,"rembert"),lvt.forEach(t),zur=r(gSe," \u2014 "),pW=n(gSe,"A",{href:!0});var ivt=s(pW);Qur=r(ivt,"TFRemBertForMaskedLM"),ivt.forEach(t),Wur=r(gSe," (RemBERT model)"),gSe.forEach(t),Hur=i(fe),k7=n(fe,"LI",{});var hSe=s(k7);$be=n(hSe,"STRONG",{});var dvt=s($be);Uur=r(dvt,"roberta"),dvt.forEach(t),Jur=r(hSe," \u2014 "),uW=n(hSe,"A",{href:!0});var cvt=s(uW);Yur=r(cvt,"TFRobertaForMaskedLM"),cvt.forEach(t),Kur=r(hSe," (RoBERTa model)"),hSe.forEach(t),Zur=i(fe),S7=n(fe,"LI",{});var pSe=s(S7);kbe=n(pSe,"STRONG",{});var fvt=s(kbe);e_r=r(fvt,"roformer"),fvt.forEach(t),o_r=r(pSe," \u2014 "),_W=n(pSe,"A",{href:!0});var mvt=s(_W);r_r=r(mvt,"TFRoFormerForMaskedLM"),mvt.forEach(t),t_r=r(pSe," (RoFormer model)"),pSe.forEach(t),a_r=i(fe),R7=n(fe,"LI",{});var uSe=s(R7);Sbe=n(uSe,"STRONG",{});var gvt=s(Sbe);n_r=r(gvt,"tapas"),gvt.forEach(t),s_r=r(uSe," \u2014 "),bW=n(uSe,"A",{href:!0});var hvt=s(bW);l_r=r(hvt,"TFTapasForMaskedLM"),hvt.forEach(t),i_r=r(uSe," (TAPAS model)"),uSe.forEach(t),d_r=i(fe),B7=n(fe,"LI",{});var _Se=s(B7);Rbe=n(_Se,"STRONG",{});var pvt=s(Rbe);c_r=r(pvt,"xlm"),pvt.forEach(t),f_r=r(_Se," \u2014 "),vW=n(_Se,"A",{href:!0});var uvt=s(vW);m_r=r(uvt,"TFXLMWithLMHeadModel"),uvt.forEach(t),g_r=r(_Se," (XLM model)"),_Se.forEach(t),h_r=i(fe),P7=n(fe,"LI",{});var bSe=s(P7);Bbe=n(bSe,"STRONG",{});var _vt=s(Bbe);p_r=r(_vt,"xlm-roberta"),_vt.forEach(t),u_r=r(bSe," \u2014 "),FW=n(bSe,"A",{href:!0});var bvt=s(FW);__r=r(bvt,"TFXLMRobertaForMaskedLM"),bvt.forEach(t),b_r=r(bSe," (XLM-RoBERTa model)"),bSe.forEach(t),fe.forEach(t),v_r=i(vl),T(I7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Tqe=i(f),ec=n(f,"H2",{class:!0});var yje=s(ec);q7=n(yje,"A",{id:!0,class:!0,href:!0});var vvt=s(q7);Pbe=n(vvt,"SPAN",{});var Fvt=s(Pbe);T(l8.$$.fragment,Fvt),Fvt.forEach(t),vvt.forEach(t),F_r=i(yje),Ibe=n(yje,"SPAN",{});var Tvt=s(Ibe);T_r=r(Tvt,"TFAutoModelForSeq2SeqLM"),Tvt.forEach(t),yje.forEach(t),Mqe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(i8.$$.fragment,Fl),M_r=i(Fl),oc=n(Fl,"P",{});var MZ=s(oc);E_r=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TW=n(MZ,"A",{href:!0});var Mvt=s(TW);C_r=r(Mvt,"from_pretrained()"),Mvt.forEach(t),w_r=r(MZ," class method or the "),MW=n(MZ,"A",{href:!0});var Evt=s(MW);A_r=r(Evt,"from_config()"),Evt.forEach(t),y_r=r(MZ,` class
method.`),MZ.forEach(t),L_r=i(Fl),d8=n(Fl,"P",{});var Lje=s(d8);x_r=r(Lje,"This class cannot be instantiated directly using "),qbe=n(Lje,"CODE",{});var Cvt=s(qbe);$_r=r(Cvt,"__init__()"),Cvt.forEach(t),k_r=r(Lje," (throws an error)."),Lje.forEach(t),S_r=i(Fl),$t=n(Fl,"DIV",{class:!0});var dw=s($t);T(c8.$$.fragment,dw),R_r=i(dw),Nbe=n(dw,"P",{});var wvt=s(Nbe);B_r=r(wvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wvt.forEach(t),P_r=i(dw),rc=n(dw,"P",{});var EZ=s(rc);I_r=r(EZ,`Note:
Loading a model from its configuration file does `),jbe=n(EZ,"STRONG",{});var Avt=s(jbe);q_r=r(Avt,"not"),Avt.forEach(t),N_r=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(EZ,"A",{href:!0});var yvt=s(EW);j_r=r(yvt,"from_pretrained()"),yvt.forEach(t),D_r=r(EZ," to load the model weights."),EZ.forEach(t),G_r=i(dw),T(N7.$$.fragment,dw),dw.forEach(t),O_r=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(f8.$$.fragment,Tl),V_r=i(Tl),Dbe=n(Tl,"P",{});var Lvt=s(Dbe);X_r=r(Lvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Lvt.forEach(t),z_r=i(Tl),tn=n(Tl,"P",{});var cw=s(tn);Q_r=r(cw,"The model class to instantiate is selected based on the "),Gbe=n(cw,"CODE",{});var xvt=s(Gbe);W_r=r(xvt,"model_type"),xvt.forEach(t),H_r=r(cw,` property of the config object (either
passed as an argument or loaded from `),Obe=n(cw,"CODE",{});var $vt=s(Obe);U_r=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),J_r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(cw,"CODE",{});var kvt=s(Vbe);Y_r=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),K_r=r(cw,":"),cw.forEach(t),Z_r=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);j7=n(Re,"LI",{});var vSe=s(j7);Xbe=n(vSe,"STRONG",{});var Svt=s(Xbe);e0r=r(Svt,"bart"),Svt.forEach(t),o0r=r(vSe," \u2014 "),CW=n(vSe,"A",{href:!0});var Rvt=s(CW);r0r=r(Rvt,"TFBartForConditionalGeneration"),Rvt.forEach(t),t0r=r(vSe," (BART model)"),vSe.forEach(t),a0r=i(Re),D7=n(Re,"LI",{});var FSe=s(D7);zbe=n(FSe,"STRONG",{});var Bvt=s(zbe);n0r=r(Bvt,"blenderbot"),Bvt.forEach(t),s0r=r(FSe," \u2014 "),wW=n(FSe,"A",{href:!0});var Pvt=s(wW);l0r=r(Pvt,"TFBlenderbotForConditionalGeneration"),Pvt.forEach(t),i0r=r(FSe," (Blenderbot model)"),FSe.forEach(t),d0r=i(Re),G7=n(Re,"LI",{});var TSe=s(G7);Qbe=n(TSe,"STRONG",{});var Ivt=s(Qbe);c0r=r(Ivt,"blenderbot-small"),Ivt.forEach(t),f0r=r(TSe," \u2014 "),AW=n(TSe,"A",{href:!0});var qvt=s(AW);m0r=r(qvt,"TFBlenderbotSmallForConditionalGeneration"),qvt.forEach(t),g0r=r(TSe," (BlenderbotSmall model)"),TSe.forEach(t),h0r=i(Re),O7=n(Re,"LI",{});var MSe=s(O7);Wbe=n(MSe,"STRONG",{});var Nvt=s(Wbe);p0r=r(Nvt,"encoder-decoder"),Nvt.forEach(t),u0r=r(MSe," \u2014 "),yW=n(MSe,"A",{href:!0});var jvt=s(yW);_0r=r(jvt,"TFEncoderDecoderModel"),jvt.forEach(t),b0r=r(MSe," (Encoder decoder model)"),MSe.forEach(t),v0r=i(Re),V7=n(Re,"LI",{});var ESe=s(V7);Hbe=n(ESe,"STRONG",{});var Dvt=s(Hbe);F0r=r(Dvt,"led"),Dvt.forEach(t),T0r=r(ESe," \u2014 "),LW=n(ESe,"A",{href:!0});var Gvt=s(LW);M0r=r(Gvt,"TFLEDForConditionalGeneration"),Gvt.forEach(t),E0r=r(ESe," (LED model)"),ESe.forEach(t),C0r=i(Re),X7=n(Re,"LI",{});var CSe=s(X7);Ube=n(CSe,"STRONG",{});var Ovt=s(Ube);w0r=r(Ovt,"marian"),Ovt.forEach(t),A0r=r(CSe," \u2014 "),xW=n(CSe,"A",{href:!0});var Vvt=s(xW);y0r=r(Vvt,"TFMarianMTModel"),Vvt.forEach(t),L0r=r(CSe," (Marian model)"),CSe.forEach(t),x0r=i(Re),z7=n(Re,"LI",{});var wSe=s(z7);Jbe=n(wSe,"STRONG",{});var Xvt=s(Jbe);$0r=r(Xvt,"mbart"),Xvt.forEach(t),k0r=r(wSe," \u2014 "),$W=n(wSe,"A",{href:!0});var zvt=s($W);S0r=r(zvt,"TFMBartForConditionalGeneration"),zvt.forEach(t),R0r=r(wSe," (mBART model)"),wSe.forEach(t),B0r=i(Re),Q7=n(Re,"LI",{});var ASe=s(Q7);Ybe=n(ASe,"STRONG",{});var Qvt=s(Ybe);P0r=r(Qvt,"mt5"),Qvt.forEach(t),I0r=r(ASe," \u2014 "),kW=n(ASe,"A",{href:!0});var Wvt=s(kW);q0r=r(Wvt,"TFMT5ForConditionalGeneration"),Wvt.forEach(t),N0r=r(ASe," (mT5 model)"),ASe.forEach(t),j0r=i(Re),W7=n(Re,"LI",{});var ySe=s(W7);Kbe=n(ySe,"STRONG",{});var Hvt=s(Kbe);D0r=r(Hvt,"pegasus"),Hvt.forEach(t),G0r=r(ySe," \u2014 "),SW=n(ySe,"A",{href:!0});var Uvt=s(SW);O0r=r(Uvt,"TFPegasusForConditionalGeneration"),Uvt.forEach(t),V0r=r(ySe," (Pegasus model)"),ySe.forEach(t),X0r=i(Re),H7=n(Re,"LI",{});var LSe=s(H7);Zbe=n(LSe,"STRONG",{});var Jvt=s(Zbe);z0r=r(Jvt,"t5"),Jvt.forEach(t),Q0r=r(LSe," \u2014 "),RW=n(LSe,"A",{href:!0});var Yvt=s(RW);W0r=r(Yvt,"TFT5ForConditionalGeneration"),Yvt.forEach(t),H0r=r(LSe," (T5 model)"),LSe.forEach(t),Re.forEach(t),U0r=i(Tl),T(U7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Eqe=i(f),tc=n(f,"H2",{class:!0});var xje=s(tc);J7=n(xje,"A",{id:!0,class:!0,href:!0});var Kvt=s(J7);e2e=n(Kvt,"SPAN",{});var Zvt=s(e2e);T(m8.$$.fragment,Zvt),Zvt.forEach(t),Kvt.forEach(t),J0r=i(xje),o2e=n(xje,"SPAN",{});var eFt=s(o2e);Y0r=r(eFt,"TFAutoModelForSequenceClassification"),eFt.forEach(t),xje.forEach(t),Cqe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(g8.$$.fragment,Ml),K0r=i(Ml),ac=n(Ml,"P",{});var CZ=s(ac);Z0r=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BW=n(CZ,"A",{href:!0});var oFt=s(BW);e1r=r(oFt,"from_pretrained()"),oFt.forEach(t),o1r=r(CZ," class method or the "),PW=n(CZ,"A",{href:!0});var rFt=s(PW);r1r=r(rFt,"from_config()"),rFt.forEach(t),t1r=r(CZ,` class
method.`),CZ.forEach(t),a1r=i(Ml),h8=n(Ml,"P",{});var $je=s(h8);n1r=r($je,"This class cannot be instantiated directly using "),r2e=n($je,"CODE",{});var tFt=s(r2e);s1r=r(tFt,"__init__()"),tFt.forEach(t),l1r=r($je," (throws an error)."),$je.forEach(t),i1r=i(Ml),kt=n(Ml,"DIV",{class:!0});var fw=s(kt);T(p8.$$.fragment,fw),d1r=i(fw),t2e=n(fw,"P",{});var aFt=s(t2e);c1r=r(aFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aFt.forEach(t),f1r=i(fw),nc=n(fw,"P",{});var wZ=s(nc);m1r=r(wZ,`Note:
Loading a model from its configuration file does `),a2e=n(wZ,"STRONG",{});var nFt=s(a2e);g1r=r(nFt,"not"),nFt.forEach(t),h1r=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(wZ,"A",{href:!0});var sFt=s(IW);p1r=r(sFt,"from_pretrained()"),sFt.forEach(t),u1r=r(wZ," to load the model weights."),wZ.forEach(t),_1r=i(fw),T(Y7.$$.fragment,fw),fw.forEach(t),b1r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(u8.$$.fragment,El),v1r=i(El),n2e=n(El,"P",{});var lFt=s(n2e);F1r=r(lFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lFt.forEach(t),T1r=i(El),an=n(El,"P",{});var mw=s(an);M1r=r(mw,"The model class to instantiate is selected based on the "),s2e=n(mw,"CODE",{});var iFt=s(s2e);E1r=r(iFt,"model_type"),iFt.forEach(t),C1r=r(mw,` property of the config object (either
passed as an argument or loaded from `),l2e=n(mw,"CODE",{});var dFt=s(l2e);w1r=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),A1r=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=n(mw,"CODE",{});var cFt=s(i2e);y1r=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),L1r=r(mw,":"),mw.forEach(t),x1r=i(El),ee=n(El,"UL",{});var ae=s(ee);K7=n(ae,"LI",{});var xSe=s(K7);d2e=n(xSe,"STRONG",{});var fFt=s(d2e);$1r=r(fFt,"albert"),fFt.forEach(t),k1r=r(xSe," \u2014 "),qW=n(xSe,"A",{href:!0});var mFt=s(qW);S1r=r(mFt,"TFAlbertForSequenceClassification"),mFt.forEach(t),R1r=r(xSe," (ALBERT model)"),xSe.forEach(t),B1r=i(ae),Z7=n(ae,"LI",{});var $Se=s(Z7);c2e=n($Se,"STRONG",{});var gFt=s(c2e);P1r=r(gFt,"bert"),gFt.forEach(t),I1r=r($Se," \u2014 "),NW=n($Se,"A",{href:!0});var hFt=s(NW);q1r=r(hFt,"TFBertForSequenceClassification"),hFt.forEach(t),N1r=r($Se," (BERT model)"),$Se.forEach(t),j1r=i(ae),eM=n(ae,"LI",{});var kSe=s(eM);f2e=n(kSe,"STRONG",{});var pFt=s(f2e);D1r=r(pFt,"camembert"),pFt.forEach(t),G1r=r(kSe," \u2014 "),jW=n(kSe,"A",{href:!0});var uFt=s(jW);O1r=r(uFt,"TFCamembertForSequenceClassification"),uFt.forEach(t),V1r=r(kSe," (CamemBERT model)"),kSe.forEach(t),X1r=i(ae),oM=n(ae,"LI",{});var SSe=s(oM);m2e=n(SSe,"STRONG",{});var _Ft=s(m2e);z1r=r(_Ft,"convbert"),_Ft.forEach(t),Q1r=r(SSe," \u2014 "),DW=n(SSe,"A",{href:!0});var bFt=s(DW);W1r=r(bFt,"TFConvBertForSequenceClassification"),bFt.forEach(t),H1r=r(SSe," (ConvBERT model)"),SSe.forEach(t),U1r=i(ae),rM=n(ae,"LI",{});var RSe=s(rM);g2e=n(RSe,"STRONG",{});var vFt=s(g2e);J1r=r(vFt,"ctrl"),vFt.forEach(t),Y1r=r(RSe," \u2014 "),GW=n(RSe,"A",{href:!0});var FFt=s(GW);K1r=r(FFt,"TFCTRLForSequenceClassification"),FFt.forEach(t),Z1r=r(RSe," (CTRL model)"),RSe.forEach(t),ebr=i(ae),tM=n(ae,"LI",{});var BSe=s(tM);h2e=n(BSe,"STRONG",{});var TFt=s(h2e);obr=r(TFt,"deberta"),TFt.forEach(t),rbr=r(BSe," \u2014 "),OW=n(BSe,"A",{href:!0});var MFt=s(OW);tbr=r(MFt,"TFDebertaForSequenceClassification"),MFt.forEach(t),abr=r(BSe," (DeBERTa model)"),BSe.forEach(t),nbr=i(ae),aM=n(ae,"LI",{});var PSe=s(aM);p2e=n(PSe,"STRONG",{});var EFt=s(p2e);sbr=r(EFt,"deberta-v2"),EFt.forEach(t),lbr=r(PSe," \u2014 "),VW=n(PSe,"A",{href:!0});var CFt=s(VW);ibr=r(CFt,"TFDebertaV2ForSequenceClassification"),CFt.forEach(t),dbr=r(PSe," (DeBERTa-v2 model)"),PSe.forEach(t),cbr=i(ae),nM=n(ae,"LI",{});var ISe=s(nM);u2e=n(ISe,"STRONG",{});var wFt=s(u2e);fbr=r(wFt,"distilbert"),wFt.forEach(t),mbr=r(ISe," \u2014 "),XW=n(ISe,"A",{href:!0});var AFt=s(XW);gbr=r(AFt,"TFDistilBertForSequenceClassification"),AFt.forEach(t),hbr=r(ISe," (DistilBERT model)"),ISe.forEach(t),pbr=i(ae),sM=n(ae,"LI",{});var qSe=s(sM);_2e=n(qSe,"STRONG",{});var yFt=s(_2e);ubr=r(yFt,"electra"),yFt.forEach(t),_br=r(qSe," \u2014 "),zW=n(qSe,"A",{href:!0});var LFt=s(zW);bbr=r(LFt,"TFElectraForSequenceClassification"),LFt.forEach(t),vbr=r(qSe," (ELECTRA model)"),qSe.forEach(t),Fbr=i(ae),lM=n(ae,"LI",{});var NSe=s(lM);b2e=n(NSe,"STRONG",{});var xFt=s(b2e);Tbr=r(xFt,"flaubert"),xFt.forEach(t),Mbr=r(NSe," \u2014 "),QW=n(NSe,"A",{href:!0});var $Ft=s(QW);Ebr=r($Ft,"TFFlaubertForSequenceClassification"),$Ft.forEach(t),Cbr=r(NSe," (FlauBERT model)"),NSe.forEach(t),wbr=i(ae),iM=n(ae,"LI",{});var jSe=s(iM);v2e=n(jSe,"STRONG",{});var kFt=s(v2e);Abr=r(kFt,"funnel"),kFt.forEach(t),ybr=r(jSe," \u2014 "),WW=n(jSe,"A",{href:!0});var SFt=s(WW);Lbr=r(SFt,"TFFunnelForSequenceClassification"),SFt.forEach(t),xbr=r(jSe," (Funnel Transformer model)"),jSe.forEach(t),$br=i(ae),dM=n(ae,"LI",{});var DSe=s(dM);F2e=n(DSe,"STRONG",{});var RFt=s(F2e);kbr=r(RFt,"gpt2"),RFt.forEach(t),Sbr=r(DSe," \u2014 "),HW=n(DSe,"A",{href:!0});var BFt=s(HW);Rbr=r(BFt,"TFGPT2ForSequenceClassification"),BFt.forEach(t),Bbr=r(DSe," (OpenAI GPT-2 model)"),DSe.forEach(t),Pbr=i(ae),cM=n(ae,"LI",{});var GSe=s(cM);T2e=n(GSe,"STRONG",{});var PFt=s(T2e);Ibr=r(PFt,"gptj"),PFt.forEach(t),qbr=r(GSe," \u2014 "),UW=n(GSe,"A",{href:!0});var IFt=s(UW);Nbr=r(IFt,"TFGPTJForSequenceClassification"),IFt.forEach(t),jbr=r(GSe," (GPT-J model)"),GSe.forEach(t),Dbr=i(ae),fM=n(ae,"LI",{});var OSe=s(fM);M2e=n(OSe,"STRONG",{});var qFt=s(M2e);Gbr=r(qFt,"layoutlm"),qFt.forEach(t),Obr=r(OSe," \u2014 "),JW=n(OSe,"A",{href:!0});var NFt=s(JW);Vbr=r(NFt,"TFLayoutLMForSequenceClassification"),NFt.forEach(t),Xbr=r(OSe," (LayoutLM model)"),OSe.forEach(t),zbr=i(ae),mM=n(ae,"LI",{});var VSe=s(mM);E2e=n(VSe,"STRONG",{});var jFt=s(E2e);Qbr=r(jFt,"longformer"),jFt.forEach(t),Wbr=r(VSe," \u2014 "),YW=n(VSe,"A",{href:!0});var DFt=s(YW);Hbr=r(DFt,"TFLongformerForSequenceClassification"),DFt.forEach(t),Ubr=r(VSe," (Longformer model)"),VSe.forEach(t),Jbr=i(ae),gM=n(ae,"LI",{});var XSe=s(gM);C2e=n(XSe,"STRONG",{});var GFt=s(C2e);Ybr=r(GFt,"mobilebert"),GFt.forEach(t),Kbr=r(XSe," \u2014 "),KW=n(XSe,"A",{href:!0});var OFt=s(KW);Zbr=r(OFt,"TFMobileBertForSequenceClassification"),OFt.forEach(t),e2r=r(XSe," (MobileBERT model)"),XSe.forEach(t),o2r=i(ae),hM=n(ae,"LI",{});var zSe=s(hM);w2e=n(zSe,"STRONG",{});var VFt=s(w2e);r2r=r(VFt,"mpnet"),VFt.forEach(t),t2r=r(zSe," \u2014 "),ZW=n(zSe,"A",{href:!0});var XFt=s(ZW);a2r=r(XFt,"TFMPNetForSequenceClassification"),XFt.forEach(t),n2r=r(zSe," (MPNet model)"),zSe.forEach(t),s2r=i(ae),pM=n(ae,"LI",{});var QSe=s(pM);A2e=n(QSe,"STRONG",{});var zFt=s(A2e);l2r=r(zFt,"openai-gpt"),zFt.forEach(t),i2r=r(QSe," \u2014 "),eH=n(QSe,"A",{href:!0});var QFt=s(eH);d2r=r(QFt,"TFOpenAIGPTForSequenceClassification"),QFt.forEach(t),c2r=r(QSe," (OpenAI GPT model)"),QSe.forEach(t),f2r=i(ae),uM=n(ae,"LI",{});var WSe=s(uM);y2e=n(WSe,"STRONG",{});var WFt=s(y2e);m2r=r(WFt,"rembert"),WFt.forEach(t),g2r=r(WSe," \u2014 "),oH=n(WSe,"A",{href:!0});var HFt=s(oH);h2r=r(HFt,"TFRemBertForSequenceClassification"),HFt.forEach(t),p2r=r(WSe," (RemBERT model)"),WSe.forEach(t),u2r=i(ae),_M=n(ae,"LI",{});var HSe=s(_M);L2e=n(HSe,"STRONG",{});var UFt=s(L2e);_2r=r(UFt,"roberta"),UFt.forEach(t),b2r=r(HSe," \u2014 "),rH=n(HSe,"A",{href:!0});var JFt=s(rH);v2r=r(JFt,"TFRobertaForSequenceClassification"),JFt.forEach(t),F2r=r(HSe," (RoBERTa model)"),HSe.forEach(t),T2r=i(ae),bM=n(ae,"LI",{});var USe=s(bM);x2e=n(USe,"STRONG",{});var YFt=s(x2e);M2r=r(YFt,"roformer"),YFt.forEach(t),E2r=r(USe," \u2014 "),tH=n(USe,"A",{href:!0});var KFt=s(tH);C2r=r(KFt,"TFRoFormerForSequenceClassification"),KFt.forEach(t),w2r=r(USe," (RoFormer model)"),USe.forEach(t),A2r=i(ae),vM=n(ae,"LI",{});var JSe=s(vM);$2e=n(JSe,"STRONG",{});var ZFt=s($2e);y2r=r(ZFt,"tapas"),ZFt.forEach(t),L2r=r(JSe," \u2014 "),aH=n(JSe,"A",{href:!0});var e6t=s(aH);x2r=r(e6t,"TFTapasForSequenceClassification"),e6t.forEach(t),$2r=r(JSe," (TAPAS model)"),JSe.forEach(t),k2r=i(ae),FM=n(ae,"LI",{});var YSe=s(FM);k2e=n(YSe,"STRONG",{});var o6t=s(k2e);S2r=r(o6t,"transfo-xl"),o6t.forEach(t),R2r=r(YSe," \u2014 "),nH=n(YSe,"A",{href:!0});var r6t=s(nH);B2r=r(r6t,"TFTransfoXLForSequenceClassification"),r6t.forEach(t),P2r=r(YSe," (Transformer-XL model)"),YSe.forEach(t),I2r=i(ae),TM=n(ae,"LI",{});var KSe=s(TM);S2e=n(KSe,"STRONG",{});var t6t=s(S2e);q2r=r(t6t,"xlm"),t6t.forEach(t),N2r=r(KSe," \u2014 "),sH=n(KSe,"A",{href:!0});var a6t=s(sH);j2r=r(a6t,"TFXLMForSequenceClassification"),a6t.forEach(t),D2r=r(KSe," (XLM model)"),KSe.forEach(t),G2r=i(ae),MM=n(ae,"LI",{});var ZSe=s(MM);R2e=n(ZSe,"STRONG",{});var n6t=s(R2e);O2r=r(n6t,"xlm-roberta"),n6t.forEach(t),V2r=r(ZSe," \u2014 "),lH=n(ZSe,"A",{href:!0});var s6t=s(lH);X2r=r(s6t,"TFXLMRobertaForSequenceClassification"),s6t.forEach(t),z2r=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),Q2r=i(ae),EM=n(ae,"LI",{});var eRe=s(EM);B2e=n(eRe,"STRONG",{});var l6t=s(B2e);W2r=r(l6t,"xlnet"),l6t.forEach(t),H2r=r(eRe," \u2014 "),iH=n(eRe,"A",{href:!0});var i6t=s(iH);U2r=r(i6t,"TFXLNetForSequenceClassification"),i6t.forEach(t),J2r=r(eRe," (XLNet model)"),eRe.forEach(t),ae.forEach(t),Y2r=i(El),T(CM.$$.fragment,El),El.forEach(t),Ml.forEach(t),wqe=i(f),sc=n(f,"H2",{class:!0});var kje=s(sc);wM=n(kje,"A",{id:!0,class:!0,href:!0});var d6t=s(wM);P2e=n(d6t,"SPAN",{});var c6t=s(P2e);T(_8.$$.fragment,c6t),c6t.forEach(t),d6t.forEach(t),K2r=i(kje),I2e=n(kje,"SPAN",{});var f6t=s(I2e);Z2r=r(f6t,"TFAutoModelForMultipleChoice"),f6t.forEach(t),kje.forEach(t),Aqe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(b8.$$.fragment,Cl),evr=i(Cl),lc=n(Cl,"P",{});var AZ=s(lc);ovr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dH=n(AZ,"A",{href:!0});var m6t=s(dH);rvr=r(m6t,"from_pretrained()"),m6t.forEach(t),tvr=r(AZ," class method or the "),cH=n(AZ,"A",{href:!0});var g6t=s(cH);avr=r(g6t,"from_config()"),g6t.forEach(t),nvr=r(AZ,` class
method.`),AZ.forEach(t),svr=i(Cl),v8=n(Cl,"P",{});var Sje=s(v8);lvr=r(Sje,"This class cannot be instantiated directly using "),q2e=n(Sje,"CODE",{});var h6t=s(q2e);ivr=r(h6t,"__init__()"),h6t.forEach(t),dvr=r(Sje," (throws an error)."),Sje.forEach(t),cvr=i(Cl),St=n(Cl,"DIV",{class:!0});var gw=s(St);T(F8.$$.fragment,gw),fvr=i(gw),N2e=n(gw,"P",{});var p6t=s(N2e);mvr=r(p6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),p6t.forEach(t),gvr=i(gw),ic=n(gw,"P",{});var yZ=s(ic);hvr=r(yZ,`Note:
Loading a model from its configuration file does `),j2e=n(yZ,"STRONG",{});var u6t=s(j2e);pvr=r(u6t,"not"),u6t.forEach(t),uvr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(yZ,"A",{href:!0});var _6t=s(fH);_vr=r(_6t,"from_pretrained()"),_6t.forEach(t),bvr=r(yZ," to load the model weights."),yZ.forEach(t),vvr=i(gw),T(AM.$$.fragment,gw),gw.forEach(t),Fvr=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(T8.$$.fragment,wl),Tvr=i(wl),D2e=n(wl,"P",{});var b6t=s(D2e);Mvr=r(b6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),b6t.forEach(t),Evr=i(wl),nn=n(wl,"P",{});var hw=s(nn);Cvr=r(hw,"The model class to instantiate is selected based on the "),G2e=n(hw,"CODE",{});var v6t=s(G2e);wvr=r(v6t,"model_type"),v6t.forEach(t),Avr=r(hw,` property of the config object (either
passed as an argument or loaded from `),O2e=n(hw,"CODE",{});var F6t=s(O2e);yvr=r(F6t,"pretrained_model_name_or_path"),F6t.forEach(t),Lvr=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(hw,"CODE",{});var T6t=s(V2e);xvr=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),$vr=r(hw,":"),hw.forEach(t),kvr=i(wl),pe=n(wl,"UL",{});var be=s(pe);yM=n(be,"LI",{});var oRe=s(yM);X2e=n(oRe,"STRONG",{});var M6t=s(X2e);Svr=r(M6t,"albert"),M6t.forEach(t),Rvr=r(oRe," \u2014 "),mH=n(oRe,"A",{href:!0});var E6t=s(mH);Bvr=r(E6t,"TFAlbertForMultipleChoice"),E6t.forEach(t),Pvr=r(oRe," (ALBERT model)"),oRe.forEach(t),Ivr=i(be),LM=n(be,"LI",{});var rRe=s(LM);z2e=n(rRe,"STRONG",{});var C6t=s(z2e);qvr=r(C6t,"bert"),C6t.forEach(t),Nvr=r(rRe," \u2014 "),gH=n(rRe,"A",{href:!0});var w6t=s(gH);jvr=r(w6t,"TFBertForMultipleChoice"),w6t.forEach(t),Dvr=r(rRe," (BERT model)"),rRe.forEach(t),Gvr=i(be),xM=n(be,"LI",{});var tRe=s(xM);Q2e=n(tRe,"STRONG",{});var A6t=s(Q2e);Ovr=r(A6t,"camembert"),A6t.forEach(t),Vvr=r(tRe," \u2014 "),hH=n(tRe,"A",{href:!0});var y6t=s(hH);Xvr=r(y6t,"TFCamembertForMultipleChoice"),y6t.forEach(t),zvr=r(tRe," (CamemBERT model)"),tRe.forEach(t),Qvr=i(be),$M=n(be,"LI",{});var aRe=s($M);W2e=n(aRe,"STRONG",{});var L6t=s(W2e);Wvr=r(L6t,"convbert"),L6t.forEach(t),Hvr=r(aRe," \u2014 "),pH=n(aRe,"A",{href:!0});var x6t=s(pH);Uvr=r(x6t,"TFConvBertForMultipleChoice"),x6t.forEach(t),Jvr=r(aRe," (ConvBERT model)"),aRe.forEach(t),Yvr=i(be),kM=n(be,"LI",{});var nRe=s(kM);H2e=n(nRe,"STRONG",{});var $6t=s(H2e);Kvr=r($6t,"distilbert"),$6t.forEach(t),Zvr=r(nRe," \u2014 "),uH=n(nRe,"A",{href:!0});var k6t=s(uH);eFr=r(k6t,"TFDistilBertForMultipleChoice"),k6t.forEach(t),oFr=r(nRe," (DistilBERT model)"),nRe.forEach(t),rFr=i(be),SM=n(be,"LI",{});var sRe=s(SM);U2e=n(sRe,"STRONG",{});var S6t=s(U2e);tFr=r(S6t,"electra"),S6t.forEach(t),aFr=r(sRe," \u2014 "),_H=n(sRe,"A",{href:!0});var R6t=s(_H);nFr=r(R6t,"TFElectraForMultipleChoice"),R6t.forEach(t),sFr=r(sRe," (ELECTRA model)"),sRe.forEach(t),lFr=i(be),RM=n(be,"LI",{});var lRe=s(RM);J2e=n(lRe,"STRONG",{});var B6t=s(J2e);iFr=r(B6t,"flaubert"),B6t.forEach(t),dFr=r(lRe," \u2014 "),bH=n(lRe,"A",{href:!0});var P6t=s(bH);cFr=r(P6t,"TFFlaubertForMultipleChoice"),P6t.forEach(t),fFr=r(lRe," (FlauBERT model)"),lRe.forEach(t),mFr=i(be),BM=n(be,"LI",{});var iRe=s(BM);Y2e=n(iRe,"STRONG",{});var I6t=s(Y2e);gFr=r(I6t,"funnel"),I6t.forEach(t),hFr=r(iRe," \u2014 "),vH=n(iRe,"A",{href:!0});var q6t=s(vH);pFr=r(q6t,"TFFunnelForMultipleChoice"),q6t.forEach(t),uFr=r(iRe," (Funnel Transformer model)"),iRe.forEach(t),_Fr=i(be),PM=n(be,"LI",{});var dRe=s(PM);K2e=n(dRe,"STRONG",{});var N6t=s(K2e);bFr=r(N6t,"longformer"),N6t.forEach(t),vFr=r(dRe," \u2014 "),FH=n(dRe,"A",{href:!0});var j6t=s(FH);FFr=r(j6t,"TFLongformerForMultipleChoice"),j6t.forEach(t),TFr=r(dRe," (Longformer model)"),dRe.forEach(t),MFr=i(be),IM=n(be,"LI",{});var cRe=s(IM);Z2e=n(cRe,"STRONG",{});var D6t=s(Z2e);EFr=r(D6t,"mobilebert"),D6t.forEach(t),CFr=r(cRe," \u2014 "),TH=n(cRe,"A",{href:!0});var G6t=s(TH);wFr=r(G6t,"TFMobileBertForMultipleChoice"),G6t.forEach(t),AFr=r(cRe," (MobileBERT model)"),cRe.forEach(t),yFr=i(be),qM=n(be,"LI",{});var fRe=s(qM);eve=n(fRe,"STRONG",{});var O6t=s(eve);LFr=r(O6t,"mpnet"),O6t.forEach(t),xFr=r(fRe," \u2014 "),MH=n(fRe,"A",{href:!0});var V6t=s(MH);$Fr=r(V6t,"TFMPNetForMultipleChoice"),V6t.forEach(t),kFr=r(fRe," (MPNet model)"),fRe.forEach(t),SFr=i(be),NM=n(be,"LI",{});var mRe=s(NM);ove=n(mRe,"STRONG",{});var X6t=s(ove);RFr=r(X6t,"rembert"),X6t.forEach(t),BFr=r(mRe," \u2014 "),EH=n(mRe,"A",{href:!0});var z6t=s(EH);PFr=r(z6t,"TFRemBertForMultipleChoice"),z6t.forEach(t),IFr=r(mRe," (RemBERT model)"),mRe.forEach(t),qFr=i(be),jM=n(be,"LI",{});var gRe=s(jM);rve=n(gRe,"STRONG",{});var Q6t=s(rve);NFr=r(Q6t,"roberta"),Q6t.forEach(t),jFr=r(gRe," \u2014 "),CH=n(gRe,"A",{href:!0});var W6t=s(CH);DFr=r(W6t,"TFRobertaForMultipleChoice"),W6t.forEach(t),GFr=r(gRe," (RoBERTa model)"),gRe.forEach(t),OFr=i(be),DM=n(be,"LI",{});var hRe=s(DM);tve=n(hRe,"STRONG",{});var H6t=s(tve);VFr=r(H6t,"roformer"),H6t.forEach(t),XFr=r(hRe," \u2014 "),wH=n(hRe,"A",{href:!0});var U6t=s(wH);zFr=r(U6t,"TFRoFormerForMultipleChoice"),U6t.forEach(t),QFr=r(hRe," (RoFormer model)"),hRe.forEach(t),WFr=i(be),GM=n(be,"LI",{});var pRe=s(GM);ave=n(pRe,"STRONG",{});var J6t=s(ave);HFr=r(J6t,"xlm"),J6t.forEach(t),UFr=r(pRe," \u2014 "),AH=n(pRe,"A",{href:!0});var Y6t=s(AH);JFr=r(Y6t,"TFXLMForMultipleChoice"),Y6t.forEach(t),YFr=r(pRe," (XLM model)"),pRe.forEach(t),KFr=i(be),OM=n(be,"LI",{});var uRe=s(OM);nve=n(uRe,"STRONG",{});var K6t=s(nve);ZFr=r(K6t,"xlm-roberta"),K6t.forEach(t),e6r=r(uRe," \u2014 "),yH=n(uRe,"A",{href:!0});var Z6t=s(yH);o6r=r(Z6t,"TFXLMRobertaForMultipleChoice"),Z6t.forEach(t),r6r=r(uRe," (XLM-RoBERTa model)"),uRe.forEach(t),t6r=i(be),VM=n(be,"LI",{});var _Re=s(VM);sve=n(_Re,"STRONG",{});var eTt=s(sve);a6r=r(eTt,"xlnet"),eTt.forEach(t),n6r=r(_Re," \u2014 "),LH=n(_Re,"A",{href:!0});var oTt=s(LH);s6r=r(oTt,"TFXLNetForMultipleChoice"),oTt.forEach(t),l6r=r(_Re," (XLNet model)"),_Re.forEach(t),be.forEach(t),i6r=i(wl),T(XM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),yqe=i(f),dc=n(f,"H2",{class:!0});var Rje=s(dc);zM=n(Rje,"A",{id:!0,class:!0,href:!0});var rTt=s(zM);lve=n(rTt,"SPAN",{});var tTt=s(lve);T(M8.$$.fragment,tTt),tTt.forEach(t),rTt.forEach(t),d6r=i(Rje),ive=n(Rje,"SPAN",{});var aTt=s(ive);c6r=r(aTt,"TFAutoModelForNextSentencePrediction"),aTt.forEach(t),Rje.forEach(t),Lqe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(E8.$$.fragment,Al),f6r=i(Al),cc=n(Al,"P",{});var LZ=s(cc);m6r=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xH=n(LZ,"A",{href:!0});var nTt=s(xH);g6r=r(nTt,"from_pretrained()"),nTt.forEach(t),h6r=r(LZ," class method or the "),$H=n(LZ,"A",{href:!0});var sTt=s($H);p6r=r(sTt,"from_config()"),sTt.forEach(t),u6r=r(LZ,` class
method.`),LZ.forEach(t),_6r=i(Al),C8=n(Al,"P",{});var Bje=s(C8);b6r=r(Bje,"This class cannot be instantiated directly using "),dve=n(Bje,"CODE",{});var lTt=s(dve);v6r=r(lTt,"__init__()"),lTt.forEach(t),F6r=r(Bje," (throws an error)."),Bje.forEach(t),T6r=i(Al),Rt=n(Al,"DIV",{class:!0});var pw=s(Rt);T(w8.$$.fragment,pw),M6r=i(pw),cve=n(pw,"P",{});var iTt=s(cve);E6r=r(iTt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iTt.forEach(t),C6r=i(pw),fc=n(pw,"P",{});var xZ=s(fc);w6r=r(xZ,`Note:
Loading a model from its configuration file does `),fve=n(xZ,"STRONG",{});var dTt=s(fve);A6r=r(dTt,"not"),dTt.forEach(t),y6r=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(xZ,"A",{href:!0});var cTt=s(kH);L6r=r(cTt,"from_pretrained()"),cTt.forEach(t),x6r=r(xZ," to load the model weights."),xZ.forEach(t),$6r=i(pw),T(QM.$$.fragment,pw),pw.forEach(t),k6r=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(A8.$$.fragment,yl),S6r=i(yl),mve=n(yl,"P",{});var fTt=s(mve);R6r=r(fTt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fTt.forEach(t),B6r=i(yl),sn=n(yl,"P",{});var uw=s(sn);P6r=r(uw,"The model class to instantiate is selected based on the "),gve=n(uw,"CODE",{});var mTt=s(gve);I6r=r(mTt,"model_type"),mTt.forEach(t),q6r=r(uw,` property of the config object (either
passed as an argument or loaded from `),hve=n(uw,"CODE",{});var gTt=s(hve);N6r=r(gTt,"pretrained_model_name_or_path"),gTt.forEach(t),j6r=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=n(uw,"CODE",{});var hTt=s(pve);D6r=r(hTt,"pretrained_model_name_or_path"),hTt.forEach(t),G6r=r(uw,":"),uw.forEach(t),O6r=i(yl),y8=n(yl,"UL",{});var Pje=s(y8);WM=n(Pje,"LI",{});var bRe=s(WM);uve=n(bRe,"STRONG",{});var pTt=s(uve);V6r=r(pTt,"bert"),pTt.forEach(t),X6r=r(bRe," \u2014 "),SH=n(bRe,"A",{href:!0});var uTt=s(SH);z6r=r(uTt,"TFBertForNextSentencePrediction"),uTt.forEach(t),Q6r=r(bRe," (BERT model)"),bRe.forEach(t),W6r=i(Pje),HM=n(Pje,"LI",{});var vRe=s(HM);_ve=n(vRe,"STRONG",{});var _Tt=s(_ve);H6r=r(_Tt,"mobilebert"),_Tt.forEach(t),U6r=r(vRe," \u2014 "),RH=n(vRe,"A",{href:!0});var bTt=s(RH);J6r=r(bTt,"TFMobileBertForNextSentencePrediction"),bTt.forEach(t),Y6r=r(vRe," (MobileBERT model)"),vRe.forEach(t),Pje.forEach(t),K6r=i(yl),T(UM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),xqe=i(f),mc=n(f,"H2",{class:!0});var Ije=s(mc);JM=n(Ije,"A",{id:!0,class:!0,href:!0});var vTt=s(JM);bve=n(vTt,"SPAN",{});var FTt=s(bve);T(L8.$$.fragment,FTt),FTt.forEach(t),vTt.forEach(t),Z6r=i(Ije),vve=n(Ije,"SPAN",{});var TTt=s(vve);eTr=r(TTt,"TFAutoModelForTableQuestionAnswering"),TTt.forEach(t),Ije.forEach(t),$qe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T(x8.$$.fragment,Ll),oTr=i(Ll),gc=n(Ll,"P",{});var $Z=s(gc);rTr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BH=n($Z,"A",{href:!0});var MTt=s(BH);tTr=r(MTt,"from_pretrained()"),MTt.forEach(t),aTr=r($Z," class method or the "),PH=n($Z,"A",{href:!0});var ETt=s(PH);nTr=r(ETt,"from_config()"),ETt.forEach(t),sTr=r($Z,` class
method.`),$Z.forEach(t),lTr=i(Ll),$8=n(Ll,"P",{});var qje=s($8);iTr=r(qje,"This class cannot be instantiated directly using "),Fve=n(qje,"CODE",{});var CTt=s(Fve);dTr=r(CTt,"__init__()"),CTt.forEach(t),cTr=r(qje," (throws an error)."),qje.forEach(t),fTr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var _w=s(Bt);T(k8.$$.fragment,_w),mTr=i(_w),Tve=n(_w,"P",{});var wTt=s(Tve);gTr=r(wTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wTt.forEach(t),hTr=i(_w),hc=n(_w,"P",{});var kZ=s(hc);pTr=r(kZ,`Note:
Loading a model from its configuration file does `),Mve=n(kZ,"STRONG",{});var ATt=s(Mve);uTr=r(ATt,"not"),ATt.forEach(t),_Tr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(kZ,"A",{href:!0});var yTt=s(IH);bTr=r(yTt,"from_pretrained()"),yTt.forEach(t),vTr=r(kZ," to load the model weights."),kZ.forEach(t),FTr=i(_w),T(YM.$$.fragment,_w),_w.forEach(t),TTr=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(S8.$$.fragment,xl),MTr=i(xl),Eve=n(xl,"P",{});var LTt=s(Eve);ETr=r(LTt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),LTt.forEach(t),CTr=i(xl),ln=n(xl,"P",{});var bw=s(ln);wTr=r(bw,"The model class to instantiate is selected based on the "),Cve=n(bw,"CODE",{});var xTt=s(Cve);ATr=r(xTt,"model_type"),xTt.forEach(t),yTr=r(bw,` property of the config object (either
passed as an argument or loaded from `),wve=n(bw,"CODE",{});var $Tt=s(wve);LTr=r($Tt,"pretrained_model_name_or_path"),$Tt.forEach(t),xTr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(bw,"CODE",{});var kTt=s(Ave);$Tr=r(kTt,"pretrained_model_name_or_path"),kTt.forEach(t),kTr=r(bw,":"),bw.forEach(t),STr=i(xl),yve=n(xl,"UL",{});var STt=s(yve);KM=n(STt,"LI",{});var FRe=s(KM);Lve=n(FRe,"STRONG",{});var RTt=s(Lve);RTr=r(RTt,"tapas"),RTt.forEach(t),BTr=r(FRe," \u2014 "),qH=n(FRe,"A",{href:!0});var BTt=s(qH);PTr=r(BTt,"TFTapasForQuestionAnswering"),BTt.forEach(t),ITr=r(FRe," (TAPAS model)"),FRe.forEach(t),STt.forEach(t),qTr=i(xl),T(ZM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),kqe=i(f),pc=n(f,"H2",{class:!0});var Nje=s(pc);e4=n(Nje,"A",{id:!0,class:!0,href:!0});var PTt=s(e4);xve=n(PTt,"SPAN",{});var ITt=s(xve);T(R8.$$.fragment,ITt),ITt.forEach(t),PTt.forEach(t),NTr=i(Nje),$ve=n(Nje,"SPAN",{});var qTt=s($ve);jTr=r(qTt,"TFAutoModelForTokenClassification"),qTt.forEach(t),Nje.forEach(t),Sqe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T(B8.$$.fragment,$l),DTr=i($l),uc=n($l,"P",{});var SZ=s(uc);GTr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NH=n(SZ,"A",{href:!0});var NTt=s(NH);OTr=r(NTt,"from_pretrained()"),NTt.forEach(t),VTr=r(SZ," class method or the "),jH=n(SZ,"A",{href:!0});var jTt=s(jH);XTr=r(jTt,"from_config()"),jTt.forEach(t),zTr=r(SZ,` class
method.`),SZ.forEach(t),QTr=i($l),P8=n($l,"P",{});var jje=s(P8);WTr=r(jje,"This class cannot be instantiated directly using "),kve=n(jje,"CODE",{});var DTt=s(kve);HTr=r(DTt,"__init__()"),DTt.forEach(t),UTr=r(jje," (throws an error)."),jje.forEach(t),JTr=i($l),Pt=n($l,"DIV",{class:!0});var vw=s(Pt);T(I8.$$.fragment,vw),YTr=i(vw),Sve=n(vw,"P",{});var GTt=s(Sve);KTr=r(GTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GTt.forEach(t),ZTr=i(vw),_c=n(vw,"P",{});var RZ=s(_c);e7r=r(RZ,`Note:
Loading a model from its configuration file does `),Rve=n(RZ,"STRONG",{});var OTt=s(Rve);o7r=r(OTt,"not"),OTt.forEach(t),r7r=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(RZ,"A",{href:!0});var VTt=s(DH);t7r=r(VTt,"from_pretrained()"),VTt.forEach(t),a7r=r(RZ," to load the model weights."),RZ.forEach(t),n7r=i(vw),T(o4.$$.fragment,vw),vw.forEach(t),s7r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(q8.$$.fragment,kl),l7r=i(kl),Bve=n(kl,"P",{});var XTt=s(Bve);i7r=r(XTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),XTt.forEach(t),d7r=i(kl),dn=n(kl,"P",{});var Fw=s(dn);c7r=r(Fw,"The model class to instantiate is selected based on the "),Pve=n(Fw,"CODE",{});var zTt=s(Pve);f7r=r(zTt,"model_type"),zTt.forEach(t),m7r=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Ive=n(Fw,"CODE",{});var QTt=s(Ive);g7r=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),h7r=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(Fw,"CODE",{});var WTt=s(qve);p7r=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),u7r=r(Fw,":"),Fw.forEach(t),_7r=i(kl),de=n(kl,"UL",{});var me=s(de);r4=n(me,"LI",{});var TRe=s(r4);Nve=n(TRe,"STRONG",{});var HTt=s(Nve);b7r=r(HTt,"albert"),HTt.forEach(t),v7r=r(TRe," \u2014 "),GH=n(TRe,"A",{href:!0});var UTt=s(GH);F7r=r(UTt,"TFAlbertForTokenClassification"),UTt.forEach(t),T7r=r(TRe," (ALBERT model)"),TRe.forEach(t),M7r=i(me),t4=n(me,"LI",{});var MRe=s(t4);jve=n(MRe,"STRONG",{});var JTt=s(jve);E7r=r(JTt,"bert"),JTt.forEach(t),C7r=r(MRe," \u2014 "),OH=n(MRe,"A",{href:!0});var YTt=s(OH);w7r=r(YTt,"TFBertForTokenClassification"),YTt.forEach(t),A7r=r(MRe," (BERT model)"),MRe.forEach(t),y7r=i(me),a4=n(me,"LI",{});var ERe=s(a4);Dve=n(ERe,"STRONG",{});var KTt=s(Dve);L7r=r(KTt,"camembert"),KTt.forEach(t),x7r=r(ERe," \u2014 "),VH=n(ERe,"A",{href:!0});var ZTt=s(VH);$7r=r(ZTt,"TFCamembertForTokenClassification"),ZTt.forEach(t),k7r=r(ERe," (CamemBERT model)"),ERe.forEach(t),S7r=i(me),n4=n(me,"LI",{});var CRe=s(n4);Gve=n(CRe,"STRONG",{});var e7t=s(Gve);R7r=r(e7t,"convbert"),e7t.forEach(t),B7r=r(CRe," \u2014 "),XH=n(CRe,"A",{href:!0});var o7t=s(XH);P7r=r(o7t,"TFConvBertForTokenClassification"),o7t.forEach(t),I7r=r(CRe," (ConvBERT model)"),CRe.forEach(t),q7r=i(me),s4=n(me,"LI",{});var wRe=s(s4);Ove=n(wRe,"STRONG",{});var r7t=s(Ove);N7r=r(r7t,"deberta"),r7t.forEach(t),j7r=r(wRe," \u2014 "),zH=n(wRe,"A",{href:!0});var t7t=s(zH);D7r=r(t7t,"TFDebertaForTokenClassification"),t7t.forEach(t),G7r=r(wRe," (DeBERTa model)"),wRe.forEach(t),O7r=i(me),l4=n(me,"LI",{});var ARe=s(l4);Vve=n(ARe,"STRONG",{});var a7t=s(Vve);V7r=r(a7t,"deberta-v2"),a7t.forEach(t),X7r=r(ARe," \u2014 "),QH=n(ARe,"A",{href:!0});var n7t=s(QH);z7r=r(n7t,"TFDebertaV2ForTokenClassification"),n7t.forEach(t),Q7r=r(ARe," (DeBERTa-v2 model)"),ARe.forEach(t),W7r=i(me),i4=n(me,"LI",{});var yRe=s(i4);Xve=n(yRe,"STRONG",{});var s7t=s(Xve);H7r=r(s7t,"distilbert"),s7t.forEach(t),U7r=r(yRe," \u2014 "),WH=n(yRe,"A",{href:!0});var l7t=s(WH);J7r=r(l7t,"TFDistilBertForTokenClassification"),l7t.forEach(t),Y7r=r(yRe," (DistilBERT model)"),yRe.forEach(t),K7r=i(me),d4=n(me,"LI",{});var LRe=s(d4);zve=n(LRe,"STRONG",{});var i7t=s(zve);Z7r=r(i7t,"electra"),i7t.forEach(t),eMr=r(LRe," \u2014 "),HH=n(LRe,"A",{href:!0});var d7t=s(HH);oMr=r(d7t,"TFElectraForTokenClassification"),d7t.forEach(t),rMr=r(LRe," (ELECTRA model)"),LRe.forEach(t),tMr=i(me),c4=n(me,"LI",{});var xRe=s(c4);Qve=n(xRe,"STRONG",{});var c7t=s(Qve);aMr=r(c7t,"flaubert"),c7t.forEach(t),nMr=r(xRe," \u2014 "),UH=n(xRe,"A",{href:!0});var f7t=s(UH);sMr=r(f7t,"TFFlaubertForTokenClassification"),f7t.forEach(t),lMr=r(xRe," (FlauBERT model)"),xRe.forEach(t),iMr=i(me),f4=n(me,"LI",{});var $Re=s(f4);Wve=n($Re,"STRONG",{});var m7t=s(Wve);dMr=r(m7t,"funnel"),m7t.forEach(t),cMr=r($Re," \u2014 "),JH=n($Re,"A",{href:!0});var g7t=s(JH);fMr=r(g7t,"TFFunnelForTokenClassification"),g7t.forEach(t),mMr=r($Re," (Funnel Transformer model)"),$Re.forEach(t),gMr=i(me),m4=n(me,"LI",{});var kRe=s(m4);Hve=n(kRe,"STRONG",{});var h7t=s(Hve);hMr=r(h7t,"layoutlm"),h7t.forEach(t),pMr=r(kRe," \u2014 "),YH=n(kRe,"A",{href:!0});var p7t=s(YH);uMr=r(p7t,"TFLayoutLMForTokenClassification"),p7t.forEach(t),_Mr=r(kRe," (LayoutLM model)"),kRe.forEach(t),bMr=i(me),g4=n(me,"LI",{});var SRe=s(g4);Uve=n(SRe,"STRONG",{});var u7t=s(Uve);vMr=r(u7t,"longformer"),u7t.forEach(t),FMr=r(SRe," \u2014 "),KH=n(SRe,"A",{href:!0});var _7t=s(KH);TMr=r(_7t,"TFLongformerForTokenClassification"),_7t.forEach(t),MMr=r(SRe," (Longformer model)"),SRe.forEach(t),EMr=i(me),h4=n(me,"LI",{});var RRe=s(h4);Jve=n(RRe,"STRONG",{});var b7t=s(Jve);CMr=r(b7t,"mobilebert"),b7t.forEach(t),wMr=r(RRe," \u2014 "),ZH=n(RRe,"A",{href:!0});var v7t=s(ZH);AMr=r(v7t,"TFMobileBertForTokenClassification"),v7t.forEach(t),yMr=r(RRe," (MobileBERT model)"),RRe.forEach(t),LMr=i(me),p4=n(me,"LI",{});var BRe=s(p4);Yve=n(BRe,"STRONG",{});var F7t=s(Yve);xMr=r(F7t,"mpnet"),F7t.forEach(t),$Mr=r(BRe," \u2014 "),eU=n(BRe,"A",{href:!0});var T7t=s(eU);kMr=r(T7t,"TFMPNetForTokenClassification"),T7t.forEach(t),SMr=r(BRe," (MPNet model)"),BRe.forEach(t),RMr=i(me),u4=n(me,"LI",{});var PRe=s(u4);Kve=n(PRe,"STRONG",{});var M7t=s(Kve);BMr=r(M7t,"rembert"),M7t.forEach(t),PMr=r(PRe," \u2014 "),oU=n(PRe,"A",{href:!0});var E7t=s(oU);IMr=r(E7t,"TFRemBertForTokenClassification"),E7t.forEach(t),qMr=r(PRe," (RemBERT model)"),PRe.forEach(t),NMr=i(me),_4=n(me,"LI",{});var IRe=s(_4);Zve=n(IRe,"STRONG",{});var C7t=s(Zve);jMr=r(C7t,"roberta"),C7t.forEach(t),DMr=r(IRe," \u2014 "),rU=n(IRe,"A",{href:!0});var w7t=s(rU);GMr=r(w7t,"TFRobertaForTokenClassification"),w7t.forEach(t),OMr=r(IRe," (RoBERTa model)"),IRe.forEach(t),VMr=i(me),b4=n(me,"LI",{});var qRe=s(b4);eFe=n(qRe,"STRONG",{});var A7t=s(eFe);XMr=r(A7t,"roformer"),A7t.forEach(t),zMr=r(qRe," \u2014 "),tU=n(qRe,"A",{href:!0});var y7t=s(tU);QMr=r(y7t,"TFRoFormerForTokenClassification"),y7t.forEach(t),WMr=r(qRe," (RoFormer model)"),qRe.forEach(t),HMr=i(me),v4=n(me,"LI",{});var NRe=s(v4);oFe=n(NRe,"STRONG",{});var L7t=s(oFe);UMr=r(L7t,"xlm"),L7t.forEach(t),JMr=r(NRe," \u2014 "),aU=n(NRe,"A",{href:!0});var x7t=s(aU);YMr=r(x7t,"TFXLMForTokenClassification"),x7t.forEach(t),KMr=r(NRe," (XLM model)"),NRe.forEach(t),ZMr=i(me),F4=n(me,"LI",{});var jRe=s(F4);rFe=n(jRe,"STRONG",{});var $7t=s(rFe);e4r=r($7t,"xlm-roberta"),$7t.forEach(t),o4r=r(jRe," \u2014 "),nU=n(jRe,"A",{href:!0});var k7t=s(nU);r4r=r(k7t,"TFXLMRobertaForTokenClassification"),k7t.forEach(t),t4r=r(jRe," (XLM-RoBERTa model)"),jRe.forEach(t),a4r=i(me),T4=n(me,"LI",{});var DRe=s(T4);tFe=n(DRe,"STRONG",{});var S7t=s(tFe);n4r=r(S7t,"xlnet"),S7t.forEach(t),s4r=r(DRe," \u2014 "),sU=n(DRe,"A",{href:!0});var R7t=s(sU);l4r=r(R7t,"TFXLNetForTokenClassification"),R7t.forEach(t),i4r=r(DRe," (XLNet model)"),DRe.forEach(t),me.forEach(t),d4r=i(kl),T(M4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Rqe=i(f),bc=n(f,"H2",{class:!0});var Dje=s(bc);E4=n(Dje,"A",{id:!0,class:!0,href:!0});var B7t=s(E4);aFe=n(B7t,"SPAN",{});var P7t=s(aFe);T(N8.$$.fragment,P7t),P7t.forEach(t),B7t.forEach(t),c4r=i(Dje),nFe=n(Dje,"SPAN",{});var I7t=s(nFe);f4r=r(I7t,"TFAutoModelForQuestionAnswering"),I7t.forEach(t),Dje.forEach(t),Bqe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T(j8.$$.fragment,Sl),m4r=i(Sl),vc=n(Sl,"P",{});var BZ=s(vc);g4r=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lU=n(BZ,"A",{href:!0});var q7t=s(lU);h4r=r(q7t,"from_pretrained()"),q7t.forEach(t),p4r=r(BZ," class method or the "),iU=n(BZ,"A",{href:!0});var N7t=s(iU);u4r=r(N7t,"from_config()"),N7t.forEach(t),_4r=r(BZ,` class
method.`),BZ.forEach(t),b4r=i(Sl),D8=n(Sl,"P",{});var Gje=s(D8);v4r=r(Gje,"This class cannot be instantiated directly using "),sFe=n(Gje,"CODE",{});var j7t=s(sFe);F4r=r(j7t,"__init__()"),j7t.forEach(t),T4r=r(Gje," (throws an error)."),Gje.forEach(t),M4r=i(Sl),It=n(Sl,"DIV",{class:!0});var Tw=s(It);T(G8.$$.fragment,Tw),E4r=i(Tw),lFe=n(Tw,"P",{});var D7t=s(lFe);C4r=r(D7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),D7t.forEach(t),w4r=i(Tw),Fc=n(Tw,"P",{});var PZ=s(Fc);A4r=r(PZ,`Note:
Loading a model from its configuration file does `),iFe=n(PZ,"STRONG",{});var G7t=s(iFe);y4r=r(G7t,"not"),G7t.forEach(t),L4r=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(PZ,"A",{href:!0});var O7t=s(dU);x4r=r(O7t,"from_pretrained()"),O7t.forEach(t),$4r=r(PZ," to load the model weights."),PZ.forEach(t),k4r=i(Tw),T(C4.$$.fragment,Tw),Tw.forEach(t),S4r=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(O8.$$.fragment,Rl),R4r=i(Rl),dFe=n(Rl,"P",{});var V7t=s(dFe);B4r=r(V7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),V7t.forEach(t),P4r=i(Rl),cn=n(Rl,"P",{});var Mw=s(cn);I4r=r(Mw,"The model class to instantiate is selected based on the "),cFe=n(Mw,"CODE",{});var X7t=s(cFe);q4r=r(X7t,"model_type"),X7t.forEach(t),N4r=r(Mw,` property of the config object (either
passed as an argument or loaded from `),fFe=n(Mw,"CODE",{});var z7t=s(fFe);j4r=r(z7t,"pretrained_model_name_or_path"),z7t.forEach(t),D4r=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(Mw,"CODE",{});var Q7t=s(mFe);G4r=r(Q7t,"pretrained_model_name_or_path"),Q7t.forEach(t),O4r=r(Mw,":"),Mw.forEach(t),V4r=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);w4=n(ge,"LI",{});var GRe=s(w4);gFe=n(GRe,"STRONG",{});var W7t=s(gFe);X4r=r(W7t,"albert"),W7t.forEach(t),z4r=r(GRe," \u2014 "),cU=n(GRe,"A",{href:!0});var H7t=s(cU);Q4r=r(H7t,"TFAlbertForQuestionAnswering"),H7t.forEach(t),W4r=r(GRe," (ALBERT model)"),GRe.forEach(t),H4r=i(ge),A4=n(ge,"LI",{});var ORe=s(A4);hFe=n(ORe,"STRONG",{});var U7t=s(hFe);U4r=r(U7t,"bert"),U7t.forEach(t),J4r=r(ORe," \u2014 "),fU=n(ORe,"A",{href:!0});var J7t=s(fU);Y4r=r(J7t,"TFBertForQuestionAnswering"),J7t.forEach(t),K4r=r(ORe," (BERT model)"),ORe.forEach(t),Z4r=i(ge),y4=n(ge,"LI",{});var VRe=s(y4);pFe=n(VRe,"STRONG",{});var Y7t=s(pFe);eEr=r(Y7t,"camembert"),Y7t.forEach(t),oEr=r(VRe," \u2014 "),mU=n(VRe,"A",{href:!0});var K7t=s(mU);rEr=r(K7t,"TFCamembertForQuestionAnswering"),K7t.forEach(t),tEr=r(VRe," (CamemBERT model)"),VRe.forEach(t),aEr=i(ge),L4=n(ge,"LI",{});var XRe=s(L4);uFe=n(XRe,"STRONG",{});var Z7t=s(uFe);nEr=r(Z7t,"convbert"),Z7t.forEach(t),sEr=r(XRe," \u2014 "),gU=n(XRe,"A",{href:!0});var eMt=s(gU);lEr=r(eMt,"TFConvBertForQuestionAnswering"),eMt.forEach(t),iEr=r(XRe," (ConvBERT model)"),XRe.forEach(t),dEr=i(ge),x4=n(ge,"LI",{});var zRe=s(x4);_Fe=n(zRe,"STRONG",{});var oMt=s(_Fe);cEr=r(oMt,"deberta"),oMt.forEach(t),fEr=r(zRe," \u2014 "),hU=n(zRe,"A",{href:!0});var rMt=s(hU);mEr=r(rMt,"TFDebertaForQuestionAnswering"),rMt.forEach(t),gEr=r(zRe," (DeBERTa model)"),zRe.forEach(t),hEr=i(ge),$4=n(ge,"LI",{});var QRe=s($4);bFe=n(QRe,"STRONG",{});var tMt=s(bFe);pEr=r(tMt,"deberta-v2"),tMt.forEach(t),uEr=r(QRe," \u2014 "),pU=n(QRe,"A",{href:!0});var aMt=s(pU);_Er=r(aMt,"TFDebertaV2ForQuestionAnswering"),aMt.forEach(t),bEr=r(QRe," (DeBERTa-v2 model)"),QRe.forEach(t),vEr=i(ge),k4=n(ge,"LI",{});var WRe=s(k4);vFe=n(WRe,"STRONG",{});var nMt=s(vFe);FEr=r(nMt,"distilbert"),nMt.forEach(t),TEr=r(WRe," \u2014 "),uU=n(WRe,"A",{href:!0});var sMt=s(uU);MEr=r(sMt,"TFDistilBertForQuestionAnswering"),sMt.forEach(t),EEr=r(WRe," (DistilBERT model)"),WRe.forEach(t),CEr=i(ge),S4=n(ge,"LI",{});var HRe=s(S4);FFe=n(HRe,"STRONG",{});var lMt=s(FFe);wEr=r(lMt,"electra"),lMt.forEach(t),AEr=r(HRe," \u2014 "),_U=n(HRe,"A",{href:!0});var iMt=s(_U);yEr=r(iMt,"TFElectraForQuestionAnswering"),iMt.forEach(t),LEr=r(HRe," (ELECTRA model)"),HRe.forEach(t),xEr=i(ge),R4=n(ge,"LI",{});var URe=s(R4);TFe=n(URe,"STRONG",{});var dMt=s(TFe);$Er=r(dMt,"flaubert"),dMt.forEach(t),kEr=r(URe," \u2014 "),bU=n(URe,"A",{href:!0});var cMt=s(bU);SEr=r(cMt,"TFFlaubertForQuestionAnsweringSimple"),cMt.forEach(t),REr=r(URe," (FlauBERT model)"),URe.forEach(t),BEr=i(ge),B4=n(ge,"LI",{});var JRe=s(B4);MFe=n(JRe,"STRONG",{});var fMt=s(MFe);PEr=r(fMt,"funnel"),fMt.forEach(t),IEr=r(JRe," \u2014 "),vU=n(JRe,"A",{href:!0});var mMt=s(vU);qEr=r(mMt,"TFFunnelForQuestionAnswering"),mMt.forEach(t),NEr=r(JRe," (Funnel Transformer model)"),JRe.forEach(t),jEr=i(ge),P4=n(ge,"LI",{});var YRe=s(P4);EFe=n(YRe,"STRONG",{});var gMt=s(EFe);DEr=r(gMt,"gptj"),gMt.forEach(t),GEr=r(YRe," \u2014 "),FU=n(YRe,"A",{href:!0});var hMt=s(FU);OEr=r(hMt,"TFGPTJForQuestionAnswering"),hMt.forEach(t),VEr=r(YRe," (GPT-J model)"),YRe.forEach(t),XEr=i(ge),I4=n(ge,"LI",{});var KRe=s(I4);CFe=n(KRe,"STRONG",{});var pMt=s(CFe);zEr=r(pMt,"longformer"),pMt.forEach(t),QEr=r(KRe," \u2014 "),TU=n(KRe,"A",{href:!0});var uMt=s(TU);WEr=r(uMt,"TFLongformerForQuestionAnswering"),uMt.forEach(t),HEr=r(KRe," (Longformer model)"),KRe.forEach(t),UEr=i(ge),q4=n(ge,"LI",{});var ZRe=s(q4);wFe=n(ZRe,"STRONG",{});var _Mt=s(wFe);JEr=r(_Mt,"mobilebert"),_Mt.forEach(t),YEr=r(ZRe," \u2014 "),MU=n(ZRe,"A",{href:!0});var bMt=s(MU);KEr=r(bMt,"TFMobileBertForQuestionAnswering"),bMt.forEach(t),ZEr=r(ZRe," (MobileBERT model)"),ZRe.forEach(t),e5r=i(ge),N4=n(ge,"LI",{});var eBe=s(N4);AFe=n(eBe,"STRONG",{});var vMt=s(AFe);o5r=r(vMt,"mpnet"),vMt.forEach(t),r5r=r(eBe," \u2014 "),EU=n(eBe,"A",{href:!0});var FMt=s(EU);t5r=r(FMt,"TFMPNetForQuestionAnswering"),FMt.forEach(t),a5r=r(eBe," (MPNet model)"),eBe.forEach(t),n5r=i(ge),j4=n(ge,"LI",{});var oBe=s(j4);yFe=n(oBe,"STRONG",{});var TMt=s(yFe);s5r=r(TMt,"rembert"),TMt.forEach(t),l5r=r(oBe," \u2014 "),CU=n(oBe,"A",{href:!0});var MMt=s(CU);i5r=r(MMt,"TFRemBertForQuestionAnswering"),MMt.forEach(t),d5r=r(oBe," (RemBERT model)"),oBe.forEach(t),c5r=i(ge),D4=n(ge,"LI",{});var rBe=s(D4);LFe=n(rBe,"STRONG",{});var EMt=s(LFe);f5r=r(EMt,"roberta"),EMt.forEach(t),m5r=r(rBe," \u2014 "),wU=n(rBe,"A",{href:!0});var CMt=s(wU);g5r=r(CMt,"TFRobertaForQuestionAnswering"),CMt.forEach(t),h5r=r(rBe," (RoBERTa model)"),rBe.forEach(t),p5r=i(ge),G4=n(ge,"LI",{});var tBe=s(G4);xFe=n(tBe,"STRONG",{});var wMt=s(xFe);u5r=r(wMt,"roformer"),wMt.forEach(t),_5r=r(tBe," \u2014 "),AU=n(tBe,"A",{href:!0});var AMt=s(AU);b5r=r(AMt,"TFRoFormerForQuestionAnswering"),AMt.forEach(t),v5r=r(tBe," (RoFormer model)"),tBe.forEach(t),F5r=i(ge),O4=n(ge,"LI",{});var aBe=s(O4);$Fe=n(aBe,"STRONG",{});var yMt=s($Fe);T5r=r(yMt,"xlm"),yMt.forEach(t),M5r=r(aBe," \u2014 "),yU=n(aBe,"A",{href:!0});var LMt=s(yU);E5r=r(LMt,"TFXLMForQuestionAnsweringSimple"),LMt.forEach(t),C5r=r(aBe," (XLM model)"),aBe.forEach(t),w5r=i(ge),V4=n(ge,"LI",{});var nBe=s(V4);kFe=n(nBe,"STRONG",{});var xMt=s(kFe);A5r=r(xMt,"xlm-roberta"),xMt.forEach(t),y5r=r(nBe," \u2014 "),LU=n(nBe,"A",{href:!0});var $Mt=s(LU);L5r=r($Mt,"TFXLMRobertaForQuestionAnswering"),$Mt.forEach(t),x5r=r(nBe," (XLM-RoBERTa model)"),nBe.forEach(t),$5r=i(ge),X4=n(ge,"LI",{});var sBe=s(X4);SFe=n(sBe,"STRONG",{});var kMt=s(SFe);k5r=r(kMt,"xlnet"),kMt.forEach(t),S5r=r(sBe," \u2014 "),xU=n(sBe,"A",{href:!0});var SMt=s(xU);R5r=r(SMt,"TFXLNetForQuestionAnsweringSimple"),SMt.forEach(t),B5r=r(sBe," (XLNet model)"),sBe.forEach(t),ge.forEach(t),P5r=i(Rl),T(z4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Pqe=i(f),Tc=n(f,"H2",{class:!0});var Oje=s(Tc);Q4=n(Oje,"A",{id:!0,class:!0,href:!0});var RMt=s(Q4);RFe=n(RMt,"SPAN",{});var BMt=s(RFe);T(V8.$$.fragment,BMt),BMt.forEach(t),RMt.forEach(t),I5r=i(Oje),BFe=n(Oje,"SPAN",{});var PMt=s(BFe);q5r=r(PMt,"TFAutoModelForVision2Seq"),PMt.forEach(t),Oje.forEach(t),Iqe=i(f),dr=n(f,"DIV",{class:!0});var Bl=s(dr);T(X8.$$.fragment,Bl),N5r=i(Bl),Mc=n(Bl,"P",{});var IZ=s(Mc);j5r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$U=n(IZ,"A",{href:!0});var IMt=s($U);D5r=r(IMt,"from_pretrained()"),IMt.forEach(t),G5r=r(IZ," class method or the "),kU=n(IZ,"A",{href:!0});var qMt=s(kU);O5r=r(qMt,"from_config()"),qMt.forEach(t),V5r=r(IZ,` class
method.`),IZ.forEach(t),X5r=i(Bl),z8=n(Bl,"P",{});var Vje=s(z8);z5r=r(Vje,"This class cannot be instantiated directly using "),PFe=n(Vje,"CODE",{});var NMt=s(PFe);Q5r=r(NMt,"__init__()"),NMt.forEach(t),W5r=r(Vje," (throws an error)."),Vje.forEach(t),H5r=i(Bl),qt=n(Bl,"DIV",{class:!0});var Ew=s(qt);T(Q8.$$.fragment,Ew),U5r=i(Ew),IFe=n(Ew,"P",{});var jMt=s(IFe);J5r=r(jMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jMt.forEach(t),Y5r=i(Ew),Ec=n(Ew,"P",{});var qZ=s(Ec);K5r=r(qZ,`Note:
Loading a model from its configuration file does `),qFe=n(qZ,"STRONG",{});var DMt=s(qFe);Z5r=r(DMt,"not"),DMt.forEach(t),eCr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(qZ,"A",{href:!0});var GMt=s(SU);oCr=r(GMt,"from_pretrained()"),GMt.forEach(t),rCr=r(qZ," to load the model weights."),qZ.forEach(t),tCr=i(Ew),T(W4.$$.fragment,Ew),Ew.forEach(t),aCr=i(Bl),qr=n(Bl,"DIV",{class:!0});var Pl=s(qr);T(W8.$$.fragment,Pl),nCr=i(Pl),NFe=n(Pl,"P",{});var OMt=s(NFe);sCr=r(OMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OMt.forEach(t),lCr=i(Pl),fn=n(Pl,"P",{});var Cw=s(fn);iCr=r(Cw,"The model class to instantiate is selected based on the "),jFe=n(Cw,"CODE",{});var VMt=s(jFe);dCr=r(VMt,"model_type"),VMt.forEach(t),cCr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),DFe=n(Cw,"CODE",{});var XMt=s(DFe);fCr=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),mCr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=n(Cw,"CODE",{});var zMt=s(GFe);gCr=r(zMt,"pretrained_model_name_or_path"),zMt.forEach(t),hCr=r(Cw,":"),Cw.forEach(t),pCr=i(Pl),OFe=n(Pl,"UL",{});var QMt=s(OFe);H4=n(QMt,"LI",{});var lBe=s(H4);VFe=n(lBe,"STRONG",{});var WMt=s(VFe);uCr=r(WMt,"vision-encoder-decoder"),WMt.forEach(t),_Cr=r(lBe," \u2014 "),RU=n(lBe,"A",{href:!0});var HMt=s(RU);bCr=r(HMt,"TFVisionEncoderDecoderModel"),HMt.forEach(t),vCr=r(lBe," (Vision Encoder decoder model)"),lBe.forEach(t),QMt.forEach(t),FCr=i(Pl),T(U4.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),qqe=i(f),Cc=n(f,"H2",{class:!0});var Xje=s(Cc);J4=n(Xje,"A",{id:!0,class:!0,href:!0});var UMt=s(J4);XFe=n(UMt,"SPAN",{});var JMt=s(XFe);T(H8.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),TCr=i(Xje),zFe=n(Xje,"SPAN",{});var YMt=s(zFe);MCr=r(YMt,"TFAutoModelForSpeechSeq2Seq"),YMt.forEach(t),Xje.forEach(t),Nqe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(U8.$$.fragment,Il),ECr=i(Il),wc=n(Il,"P",{});var NZ=s(wc);CCr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BU=n(NZ,"A",{href:!0});var KMt=s(BU);wCr=r(KMt,"from_pretrained()"),KMt.forEach(t),ACr=r(NZ," class method or the "),PU=n(NZ,"A",{href:!0});var ZMt=s(PU);yCr=r(ZMt,"from_config()"),ZMt.forEach(t),LCr=r(NZ,` class
method.`),NZ.forEach(t),xCr=i(Il),J8=n(Il,"P",{});var zje=s(J8);$Cr=r(zje,"This class cannot be instantiated directly using "),QFe=n(zje,"CODE",{});var e4t=s(QFe);kCr=r(e4t,"__init__()"),e4t.forEach(t),SCr=r(zje," (throws an error)."),zje.forEach(t),RCr=i(Il),Nt=n(Il,"DIV",{class:!0});var ww=s(Nt);T(Y8.$$.fragment,ww),BCr=i(ww),WFe=n(ww,"P",{});var o4t=s(WFe);PCr=r(o4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),o4t.forEach(t),ICr=i(ww),Ac=n(ww,"P",{});var jZ=s(Ac);qCr=r(jZ,`Note:
Loading a model from its configuration file does `),HFe=n(jZ,"STRONG",{});var r4t=s(HFe);NCr=r(r4t,"not"),r4t.forEach(t),jCr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(jZ,"A",{href:!0});var t4t=s(IU);DCr=r(t4t,"from_pretrained()"),t4t.forEach(t),GCr=r(jZ," to load the model weights."),jZ.forEach(t),OCr=i(ww),T(Y4.$$.fragment,ww),ww.forEach(t),VCr=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(K8.$$.fragment,ql),XCr=i(ql),UFe=n(ql,"P",{});var a4t=s(UFe);zCr=r(a4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),a4t.forEach(t),QCr=i(ql),mn=n(ql,"P",{});var Aw=s(mn);WCr=r(Aw,"The model class to instantiate is selected based on the "),JFe=n(Aw,"CODE",{});var n4t=s(JFe);HCr=r(n4t,"model_type"),n4t.forEach(t),UCr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),YFe=n(Aw,"CODE",{});var s4t=s(YFe);JCr=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),YCr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(Aw,"CODE",{});var l4t=s(KFe);KCr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),ZCr=r(Aw,":"),Aw.forEach(t),e3r=i(ql),ZFe=n(ql,"UL",{});var i4t=s(ZFe);K4=n(i4t,"LI",{});var iBe=s(K4);e6e=n(iBe,"STRONG",{});var d4t=s(e6e);o3r=r(d4t,"speech_to_text"),d4t.forEach(t),r3r=r(iBe," \u2014 "),qU=n(iBe,"A",{href:!0});var c4t=s(qU);t3r=r(c4t,"TFSpeech2TextForConditionalGeneration"),c4t.forEach(t),a3r=r(iBe," (Speech2Text model)"),iBe.forEach(t),i4t.forEach(t),n3r=i(ql),T(Z4.$$.fragment,ql),ql.forEach(t),Il.forEach(t),jqe=i(f),yc=n(f,"H2",{class:!0});var Qje=s(yc);eE=n(Qje,"A",{id:!0,class:!0,href:!0});var f4t=s(eE);o6e=n(f4t,"SPAN",{});var m4t=s(o6e);T(Z8.$$.fragment,m4t),m4t.forEach(t),f4t.forEach(t),s3r=i(Qje),r6e=n(Qje,"SPAN",{});var g4t=s(r6e);l3r=r(g4t,"FlaxAutoModel"),g4t.forEach(t),Qje.forEach(t),Dqe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(ex.$$.fragment,Nl),i3r=i(Nl),Lc=n(Nl,"P",{});var DZ=s(Lc);d3r=r(DZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NU=n(DZ,"A",{href:!0});var h4t=s(NU);c3r=r(h4t,"from_pretrained()"),h4t.forEach(t),f3r=r(DZ," class method or the "),jU=n(DZ,"A",{href:!0});var p4t=s(jU);m3r=r(p4t,"from_config()"),p4t.forEach(t),g3r=r(DZ,` class
method.`),DZ.forEach(t),h3r=i(Nl),ox=n(Nl,"P",{});var Wje=s(ox);p3r=r(Wje,"This class cannot be instantiated directly using "),t6e=n(Wje,"CODE",{});var u4t=s(t6e);u3r=r(u4t,"__init__()"),u4t.forEach(t),_3r=r(Wje," (throws an error)."),Wje.forEach(t),b3r=i(Nl),jt=n(Nl,"DIV",{class:!0});var yw=s(jt);T(rx.$$.fragment,yw),v3r=i(yw),a6e=n(yw,"P",{});var _4t=s(a6e);F3r=r(_4t,"Instantiates one of the base model classes of the library from a configuration."),_4t.forEach(t),T3r=i(yw),xc=n(yw,"P",{});var GZ=s(xc);M3r=r(GZ,`Note:
Loading a model from its configuration file does `),n6e=n(GZ,"STRONG",{});var b4t=s(n6e);E3r=r(b4t,"not"),b4t.forEach(t),C3r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=n(GZ,"A",{href:!0});var v4t=s(DU);w3r=r(v4t,"from_pretrained()"),v4t.forEach(t),A3r=r(GZ," to load the model weights."),GZ.forEach(t),y3r=i(yw),T(oE.$$.fragment,yw),yw.forEach(t),L3r=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(tx.$$.fragment,jl),x3r=i(jl),s6e=n(jl,"P",{});var F4t=s(s6e);$3r=r(F4t,"Instantiate one of the base model classes of the library from a pretrained model."),F4t.forEach(t),k3r=i(jl),gn=n(jl,"P",{});var Lw=s(gn);S3r=r(Lw,"The model class to instantiate is selected based on the "),l6e=n(Lw,"CODE",{});var T4t=s(l6e);R3r=r(T4t,"model_type"),T4t.forEach(t),B3r=r(Lw,` property of the config object (either
passed as an argument or loaded from `),i6e=n(Lw,"CODE",{});var M4t=s(i6e);P3r=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),I3r=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=n(Lw,"CODE",{});var E4t=s(d6e);q3r=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),N3r=r(Lw,":"),Lw.forEach(t),j3r=i(jl),re=n(jl,"UL",{});var ne=s(re);rE=n(ne,"LI",{});var dBe=s(rE);c6e=n(dBe,"STRONG",{});var C4t=s(c6e);D3r=r(C4t,"albert"),C4t.forEach(t),G3r=r(dBe," \u2014 "),GU=n(dBe,"A",{href:!0});var w4t=s(GU);O3r=r(w4t,"FlaxAlbertModel"),w4t.forEach(t),V3r=r(dBe," (ALBERT model)"),dBe.forEach(t),X3r=i(ne),tE=n(ne,"LI",{});var cBe=s(tE);f6e=n(cBe,"STRONG",{});var A4t=s(f6e);z3r=r(A4t,"bart"),A4t.forEach(t),Q3r=r(cBe," \u2014 "),OU=n(cBe,"A",{href:!0});var y4t=s(OU);W3r=r(y4t,"FlaxBartModel"),y4t.forEach(t),H3r=r(cBe," (BART model)"),cBe.forEach(t),U3r=i(ne),aE=n(ne,"LI",{});var fBe=s(aE);m6e=n(fBe,"STRONG",{});var L4t=s(m6e);J3r=r(L4t,"beit"),L4t.forEach(t),Y3r=r(fBe," \u2014 "),VU=n(fBe,"A",{href:!0});var x4t=s(VU);K3r=r(x4t,"FlaxBeitModel"),x4t.forEach(t),Z3r=r(fBe," (BEiT model)"),fBe.forEach(t),ewr=i(ne),nE=n(ne,"LI",{});var mBe=s(nE);g6e=n(mBe,"STRONG",{});var $4t=s(g6e);owr=r($4t,"bert"),$4t.forEach(t),rwr=r(mBe," \u2014 "),XU=n(mBe,"A",{href:!0});var k4t=s(XU);twr=r(k4t,"FlaxBertModel"),k4t.forEach(t),awr=r(mBe," (BERT model)"),mBe.forEach(t),nwr=i(ne),sE=n(ne,"LI",{});var gBe=s(sE);h6e=n(gBe,"STRONG",{});var S4t=s(h6e);swr=r(S4t,"big_bird"),S4t.forEach(t),lwr=r(gBe," \u2014 "),zU=n(gBe,"A",{href:!0});var R4t=s(zU);iwr=r(R4t,"FlaxBigBirdModel"),R4t.forEach(t),dwr=r(gBe," (BigBird model)"),gBe.forEach(t),cwr=i(ne),lE=n(ne,"LI",{});var hBe=s(lE);p6e=n(hBe,"STRONG",{});var B4t=s(p6e);fwr=r(B4t,"blenderbot"),B4t.forEach(t),mwr=r(hBe," \u2014 "),QU=n(hBe,"A",{href:!0});var P4t=s(QU);gwr=r(P4t,"FlaxBlenderbotModel"),P4t.forEach(t),hwr=r(hBe," (Blenderbot model)"),hBe.forEach(t),pwr=i(ne),iE=n(ne,"LI",{});var pBe=s(iE);u6e=n(pBe,"STRONG",{});var I4t=s(u6e);uwr=r(I4t,"blenderbot-small"),I4t.forEach(t),_wr=r(pBe," \u2014 "),WU=n(pBe,"A",{href:!0});var q4t=s(WU);bwr=r(q4t,"FlaxBlenderbotSmallModel"),q4t.forEach(t),vwr=r(pBe," (BlenderbotSmall model)"),pBe.forEach(t),Fwr=i(ne),dE=n(ne,"LI",{});var uBe=s(dE);_6e=n(uBe,"STRONG",{});var N4t=s(_6e);Twr=r(N4t,"clip"),N4t.forEach(t),Mwr=r(uBe," \u2014 "),HU=n(uBe,"A",{href:!0});var j4t=s(HU);Ewr=r(j4t,"FlaxCLIPModel"),j4t.forEach(t),Cwr=r(uBe," (CLIP model)"),uBe.forEach(t),wwr=i(ne),cE=n(ne,"LI",{});var _Be=s(cE);b6e=n(_Be,"STRONG",{});var D4t=s(b6e);Awr=r(D4t,"distilbert"),D4t.forEach(t),ywr=r(_Be," \u2014 "),UU=n(_Be,"A",{href:!0});var G4t=s(UU);Lwr=r(G4t,"FlaxDistilBertModel"),G4t.forEach(t),xwr=r(_Be," (DistilBERT model)"),_Be.forEach(t),$wr=i(ne),fE=n(ne,"LI",{});var bBe=s(fE);v6e=n(bBe,"STRONG",{});var O4t=s(v6e);kwr=r(O4t,"electra"),O4t.forEach(t),Swr=r(bBe," \u2014 "),JU=n(bBe,"A",{href:!0});var V4t=s(JU);Rwr=r(V4t,"FlaxElectraModel"),V4t.forEach(t),Bwr=r(bBe," (ELECTRA model)"),bBe.forEach(t),Pwr=i(ne),mE=n(ne,"LI",{});var vBe=s(mE);F6e=n(vBe,"STRONG",{});var X4t=s(F6e);Iwr=r(X4t,"gpt2"),X4t.forEach(t),qwr=r(vBe," \u2014 "),YU=n(vBe,"A",{href:!0});var z4t=s(YU);Nwr=r(z4t,"FlaxGPT2Model"),z4t.forEach(t),jwr=r(vBe," (OpenAI GPT-2 model)"),vBe.forEach(t),Dwr=i(ne),gE=n(ne,"LI",{});var FBe=s(gE);T6e=n(FBe,"STRONG",{});var Q4t=s(T6e);Gwr=r(Q4t,"gpt_neo"),Q4t.forEach(t),Owr=r(FBe," \u2014 "),KU=n(FBe,"A",{href:!0});var W4t=s(KU);Vwr=r(W4t,"FlaxGPTNeoModel"),W4t.forEach(t),Xwr=r(FBe," (GPT Neo model)"),FBe.forEach(t),zwr=i(ne),hE=n(ne,"LI",{});var TBe=s(hE);M6e=n(TBe,"STRONG",{});var H4t=s(M6e);Qwr=r(H4t,"gptj"),H4t.forEach(t),Wwr=r(TBe," \u2014 "),ZU=n(TBe,"A",{href:!0});var U4t=s(ZU);Hwr=r(U4t,"FlaxGPTJModel"),U4t.forEach(t),Uwr=r(TBe," (GPT-J model)"),TBe.forEach(t),Jwr=i(ne),pE=n(ne,"LI",{});var MBe=s(pE);E6e=n(MBe,"STRONG",{});var J4t=s(E6e);Ywr=r(J4t,"marian"),J4t.forEach(t),Kwr=r(MBe," \u2014 "),eJ=n(MBe,"A",{href:!0});var Y4t=s(eJ);Zwr=r(Y4t,"FlaxMarianModel"),Y4t.forEach(t),eAr=r(MBe," (Marian model)"),MBe.forEach(t),oAr=i(ne),uE=n(ne,"LI",{});var EBe=s(uE);C6e=n(EBe,"STRONG",{});var K4t=s(C6e);rAr=r(K4t,"mbart"),K4t.forEach(t),tAr=r(EBe," \u2014 "),oJ=n(EBe,"A",{href:!0});var Z4t=s(oJ);aAr=r(Z4t,"FlaxMBartModel"),Z4t.forEach(t),nAr=r(EBe," (mBART model)"),EBe.forEach(t),sAr=i(ne),_E=n(ne,"LI",{});var CBe=s(_E);w6e=n(CBe,"STRONG",{});var eEt=s(w6e);lAr=r(eEt,"mt5"),eEt.forEach(t),iAr=r(CBe," \u2014 "),rJ=n(CBe,"A",{href:!0});var oEt=s(rJ);dAr=r(oEt,"FlaxMT5Model"),oEt.forEach(t),cAr=r(CBe," (mT5 model)"),CBe.forEach(t),fAr=i(ne),bE=n(ne,"LI",{});var wBe=s(bE);A6e=n(wBe,"STRONG",{});var rEt=s(A6e);mAr=r(rEt,"pegasus"),rEt.forEach(t),gAr=r(wBe," \u2014 "),tJ=n(wBe,"A",{href:!0});var tEt=s(tJ);hAr=r(tEt,"FlaxPegasusModel"),tEt.forEach(t),pAr=r(wBe," (Pegasus model)"),wBe.forEach(t),uAr=i(ne),vE=n(ne,"LI",{});var ABe=s(vE);y6e=n(ABe,"STRONG",{});var aEt=s(y6e);_Ar=r(aEt,"roberta"),aEt.forEach(t),bAr=r(ABe," \u2014 "),aJ=n(ABe,"A",{href:!0});var nEt=s(aJ);vAr=r(nEt,"FlaxRobertaModel"),nEt.forEach(t),FAr=r(ABe," (RoBERTa model)"),ABe.forEach(t),TAr=i(ne),FE=n(ne,"LI",{});var yBe=s(FE);L6e=n(yBe,"STRONG",{});var sEt=s(L6e);MAr=r(sEt,"roformer"),sEt.forEach(t),EAr=r(yBe," \u2014 "),nJ=n(yBe,"A",{href:!0});var lEt=s(nJ);CAr=r(lEt,"FlaxRoFormerModel"),lEt.forEach(t),wAr=r(yBe," (RoFormer model)"),yBe.forEach(t),AAr=i(ne),TE=n(ne,"LI",{});var LBe=s(TE);x6e=n(LBe,"STRONG",{});var iEt=s(x6e);yAr=r(iEt,"t5"),iEt.forEach(t),LAr=r(LBe," \u2014 "),sJ=n(LBe,"A",{href:!0});var dEt=s(sJ);xAr=r(dEt,"FlaxT5Model"),dEt.forEach(t),$Ar=r(LBe," (T5 model)"),LBe.forEach(t),kAr=i(ne),ME=n(ne,"LI",{});var xBe=s(ME);$6e=n(xBe,"STRONG",{});var cEt=s($6e);SAr=r(cEt,"vision-text-dual-encoder"),cEt.forEach(t),RAr=r(xBe," \u2014 "),lJ=n(xBe,"A",{href:!0});var fEt=s(lJ);BAr=r(fEt,"FlaxVisionTextDualEncoderModel"),fEt.forEach(t),PAr=r(xBe," (VisionTextDualEncoder model)"),xBe.forEach(t),IAr=i(ne),EE=n(ne,"LI",{});var $Be=s(EE);k6e=n($Be,"STRONG",{});var mEt=s(k6e);qAr=r(mEt,"vit"),mEt.forEach(t),NAr=r($Be," \u2014 "),iJ=n($Be,"A",{href:!0});var gEt=s(iJ);jAr=r(gEt,"FlaxViTModel"),gEt.forEach(t),DAr=r($Be," (ViT model)"),$Be.forEach(t),GAr=i(ne),CE=n(ne,"LI",{});var kBe=s(CE);S6e=n(kBe,"STRONG",{});var hEt=s(S6e);OAr=r(hEt,"wav2vec2"),hEt.forEach(t),VAr=r(kBe," \u2014 "),dJ=n(kBe,"A",{href:!0});var pEt=s(dJ);XAr=r(pEt,"FlaxWav2Vec2Model"),pEt.forEach(t),zAr=r(kBe," (Wav2Vec2 model)"),kBe.forEach(t),QAr=i(ne),wE=n(ne,"LI",{});var SBe=s(wE);R6e=n(SBe,"STRONG",{});var uEt=s(R6e);WAr=r(uEt,"xglm"),uEt.forEach(t),HAr=r(SBe," \u2014 "),cJ=n(SBe,"A",{href:!0});var _Et=s(cJ);UAr=r(_Et,"FlaxXGLMModel"),_Et.forEach(t),JAr=r(SBe," (XGLM model)"),SBe.forEach(t),YAr=i(ne),AE=n(ne,"LI",{});var RBe=s(AE);B6e=n(RBe,"STRONG",{});var bEt=s(B6e);KAr=r(bEt,"xlm-roberta"),bEt.forEach(t),ZAr=r(RBe," \u2014 "),fJ=n(RBe,"A",{href:!0});var vEt=s(fJ);eyr=r(vEt,"FlaxXLMRobertaModel"),vEt.forEach(t),oyr=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),ne.forEach(t),ryr=i(jl),T(yE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),Gqe=i(f),$c=n(f,"H2",{class:!0});var Hje=s($c);LE=n(Hje,"A",{id:!0,class:!0,href:!0});var FEt=s(LE);P6e=n(FEt,"SPAN",{});var TEt=s(P6e);T(ax.$$.fragment,TEt),TEt.forEach(t),FEt.forEach(t),tyr=i(Hje),I6e=n(Hje,"SPAN",{});var MEt=s(I6e);ayr=r(MEt,"FlaxAutoModelForCausalLM"),MEt.forEach(t),Hje.forEach(t),Oqe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(nx.$$.fragment,Dl),nyr=i(Dl),kc=n(Dl,"P",{});var OZ=s(kc);syr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mJ=n(OZ,"A",{href:!0});var EEt=s(mJ);lyr=r(EEt,"from_pretrained()"),EEt.forEach(t),iyr=r(OZ," class method or the "),gJ=n(OZ,"A",{href:!0});var CEt=s(gJ);dyr=r(CEt,"from_config()"),CEt.forEach(t),cyr=r(OZ,` class
method.`),OZ.forEach(t),fyr=i(Dl),sx=n(Dl,"P",{});var Uje=s(sx);myr=r(Uje,"This class cannot be instantiated directly using "),q6e=n(Uje,"CODE",{});var wEt=s(q6e);gyr=r(wEt,"__init__()"),wEt.forEach(t),hyr=r(Uje," (throws an error)."),Uje.forEach(t),pyr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var xw=s(Dt);T(lx.$$.fragment,xw),uyr=i(xw),N6e=n(xw,"P",{});var AEt=s(N6e);_yr=r(AEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),AEt.forEach(t),byr=i(xw),Sc=n(xw,"P",{});var VZ=s(Sc);vyr=r(VZ,`Note:
Loading a model from its configuration file does `),j6e=n(VZ,"STRONG",{});var yEt=s(j6e);Fyr=r(yEt,"not"),yEt.forEach(t),Tyr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(VZ,"A",{href:!0});var LEt=s(hJ);Myr=r(LEt,"from_pretrained()"),LEt.forEach(t),Eyr=r(VZ," to load the model weights."),VZ.forEach(t),Cyr=i(xw),T(xE.$$.fragment,xw),xw.forEach(t),wyr=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(ix.$$.fragment,Gl),Ayr=i(Gl),D6e=n(Gl,"P",{});var xEt=s(D6e);yyr=r(xEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xEt.forEach(t),Lyr=i(Gl),hn=n(Gl,"P",{});var $w=s(hn);xyr=r($w,"The model class to instantiate is selected based on the "),G6e=n($w,"CODE",{});var $Et=s(G6e);$yr=r($Et,"model_type"),$Et.forEach(t),kyr=r($w,` property of the config object (either
passed as an argument or loaded from `),O6e=n($w,"CODE",{});var kEt=s(O6e);Syr=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),Ryr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V6e=n($w,"CODE",{});var SEt=s(V6e);Byr=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),Pyr=r($w,":"),$w.forEach(t),Iyr=i(Gl),ke=n(Gl,"UL",{});var Oe=s(ke);$E=n(Oe,"LI",{});var BBe=s($E);X6e=n(BBe,"STRONG",{});var REt=s(X6e);qyr=r(REt,"bart"),REt.forEach(t),Nyr=r(BBe," \u2014 "),pJ=n(BBe,"A",{href:!0});var BEt=s(pJ);jyr=r(BEt,"FlaxBartForCausalLM"),BEt.forEach(t),Dyr=r(BBe," (BART model)"),BBe.forEach(t),Gyr=i(Oe),kE=n(Oe,"LI",{});var PBe=s(kE);z6e=n(PBe,"STRONG",{});var PEt=s(z6e);Oyr=r(PEt,"bert"),PEt.forEach(t),Vyr=r(PBe," \u2014 "),uJ=n(PBe,"A",{href:!0});var IEt=s(uJ);Xyr=r(IEt,"FlaxBertForCausalLM"),IEt.forEach(t),zyr=r(PBe," (BERT model)"),PBe.forEach(t),Qyr=i(Oe),SE=n(Oe,"LI",{});var IBe=s(SE);Q6e=n(IBe,"STRONG",{});var qEt=s(Q6e);Wyr=r(qEt,"big_bird"),qEt.forEach(t),Hyr=r(IBe," \u2014 "),_J=n(IBe,"A",{href:!0});var NEt=s(_J);Uyr=r(NEt,"FlaxBigBirdForCausalLM"),NEt.forEach(t),Jyr=r(IBe," (BigBird model)"),IBe.forEach(t),Yyr=i(Oe),RE=n(Oe,"LI",{});var qBe=s(RE);W6e=n(qBe,"STRONG",{});var jEt=s(W6e);Kyr=r(jEt,"electra"),jEt.forEach(t),Zyr=r(qBe," \u2014 "),bJ=n(qBe,"A",{href:!0});var DEt=s(bJ);eLr=r(DEt,"FlaxElectraForCausalLM"),DEt.forEach(t),oLr=r(qBe," (ELECTRA model)"),qBe.forEach(t),rLr=i(Oe),BE=n(Oe,"LI",{});var NBe=s(BE);H6e=n(NBe,"STRONG",{});var GEt=s(H6e);tLr=r(GEt,"gpt2"),GEt.forEach(t),aLr=r(NBe," \u2014 "),vJ=n(NBe,"A",{href:!0});var OEt=s(vJ);nLr=r(OEt,"FlaxGPT2LMHeadModel"),OEt.forEach(t),sLr=r(NBe," (OpenAI GPT-2 model)"),NBe.forEach(t),lLr=i(Oe),PE=n(Oe,"LI",{});var jBe=s(PE);U6e=n(jBe,"STRONG",{});var VEt=s(U6e);iLr=r(VEt,"gpt_neo"),VEt.forEach(t),dLr=r(jBe," \u2014 "),FJ=n(jBe,"A",{href:!0});var XEt=s(FJ);cLr=r(XEt,"FlaxGPTNeoForCausalLM"),XEt.forEach(t),fLr=r(jBe," (GPT Neo model)"),jBe.forEach(t),mLr=i(Oe),IE=n(Oe,"LI",{});var DBe=s(IE);J6e=n(DBe,"STRONG",{});var zEt=s(J6e);gLr=r(zEt,"gptj"),zEt.forEach(t),hLr=r(DBe," \u2014 "),TJ=n(DBe,"A",{href:!0});var QEt=s(TJ);pLr=r(QEt,"FlaxGPTJForCausalLM"),QEt.forEach(t),uLr=r(DBe," (GPT-J model)"),DBe.forEach(t),_Lr=i(Oe),qE=n(Oe,"LI",{});var GBe=s(qE);Y6e=n(GBe,"STRONG",{});var WEt=s(Y6e);bLr=r(WEt,"roberta"),WEt.forEach(t),vLr=r(GBe," \u2014 "),MJ=n(GBe,"A",{href:!0});var HEt=s(MJ);FLr=r(HEt,"FlaxRobertaForCausalLM"),HEt.forEach(t),TLr=r(GBe," (RoBERTa model)"),GBe.forEach(t),MLr=i(Oe),NE=n(Oe,"LI",{});var OBe=s(NE);K6e=n(OBe,"STRONG",{});var UEt=s(K6e);ELr=r(UEt,"xglm"),UEt.forEach(t),CLr=r(OBe," \u2014 "),EJ=n(OBe,"A",{href:!0});var JEt=s(EJ);wLr=r(JEt,"FlaxXGLMForCausalLM"),JEt.forEach(t),ALr=r(OBe," (XGLM model)"),OBe.forEach(t),Oe.forEach(t),yLr=i(Gl),T(jE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Vqe=i(f),Rc=n(f,"H2",{class:!0});var Jje=s(Rc);DE=n(Jje,"A",{id:!0,class:!0,href:!0});var YEt=s(DE);Z6e=n(YEt,"SPAN",{});var KEt=s(Z6e);T(dx.$$.fragment,KEt),KEt.forEach(t),YEt.forEach(t),LLr=i(Jje),eTe=n(Jje,"SPAN",{});var ZEt=s(eTe);xLr=r(ZEt,"FlaxAutoModelForPreTraining"),ZEt.forEach(t),Jje.forEach(t),Xqe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(cx.$$.fragment,Ol),$Lr=i(Ol),Bc=n(Ol,"P",{});var XZ=s(Bc);kLr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CJ=n(XZ,"A",{href:!0});var e5t=s(CJ);SLr=r(e5t,"from_pretrained()"),e5t.forEach(t),RLr=r(XZ," class method or the "),wJ=n(XZ,"A",{href:!0});var o5t=s(wJ);BLr=r(o5t,"from_config()"),o5t.forEach(t),PLr=r(XZ,` class
method.`),XZ.forEach(t),ILr=i(Ol),fx=n(Ol,"P",{});var Yje=s(fx);qLr=r(Yje,"This class cannot be instantiated directly using "),oTe=n(Yje,"CODE",{});var r5t=s(oTe);NLr=r(r5t,"__init__()"),r5t.forEach(t),jLr=r(Yje," (throws an error)."),Yje.forEach(t),DLr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var kw=s(Gt);T(mx.$$.fragment,kw),GLr=i(kw),rTe=n(kw,"P",{});var t5t=s(rTe);OLr=r(t5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),t5t.forEach(t),VLr=i(kw),Pc=n(kw,"P",{});var zZ=s(Pc);XLr=r(zZ,`Note:
Loading a model from its configuration file does `),tTe=n(zZ,"STRONG",{});var a5t=s(tTe);zLr=r(a5t,"not"),a5t.forEach(t),QLr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=n(zZ,"A",{href:!0});var n5t=s(AJ);WLr=r(n5t,"from_pretrained()"),n5t.forEach(t),HLr=r(zZ," to load the model weights."),zZ.forEach(t),ULr=i(kw),T(GE.$$.fragment,kw),kw.forEach(t),JLr=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(gx.$$.fragment,Vl),YLr=i(Vl),aTe=n(Vl,"P",{});var s5t=s(aTe);KLr=r(s5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),s5t.forEach(t),ZLr=i(Vl),pn=n(Vl,"P",{});var Sw=s(pn);e8r=r(Sw,"The model class to instantiate is selected based on the "),nTe=n(Sw,"CODE",{});var l5t=s(nTe);o8r=r(l5t,"model_type"),l5t.forEach(t),r8r=r(Sw,` property of the config object (either
passed as an argument or loaded from `),sTe=n(Sw,"CODE",{});var i5t=s(sTe);t8r=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),a8r=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=n(Sw,"CODE",{});var d5t=s(lTe);n8r=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),s8r=r(Sw,":"),Sw.forEach(t),l8r=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);OE=n(we,"LI",{});var VBe=s(OE);iTe=n(VBe,"STRONG",{});var c5t=s(iTe);i8r=r(c5t,"albert"),c5t.forEach(t),d8r=r(VBe," \u2014 "),yJ=n(VBe,"A",{href:!0});var f5t=s(yJ);c8r=r(f5t,"FlaxAlbertForPreTraining"),f5t.forEach(t),f8r=r(VBe," (ALBERT model)"),VBe.forEach(t),m8r=i(we),VE=n(we,"LI",{});var XBe=s(VE);dTe=n(XBe,"STRONG",{});var m5t=s(dTe);g8r=r(m5t,"bart"),m5t.forEach(t),h8r=r(XBe," \u2014 "),LJ=n(XBe,"A",{href:!0});var g5t=s(LJ);p8r=r(g5t,"FlaxBartForConditionalGeneration"),g5t.forEach(t),u8r=r(XBe," (BART model)"),XBe.forEach(t),_8r=i(we),XE=n(we,"LI",{});var zBe=s(XE);cTe=n(zBe,"STRONG",{});var h5t=s(cTe);b8r=r(h5t,"bert"),h5t.forEach(t),v8r=r(zBe," \u2014 "),xJ=n(zBe,"A",{href:!0});var p5t=s(xJ);F8r=r(p5t,"FlaxBertForPreTraining"),p5t.forEach(t),T8r=r(zBe," (BERT model)"),zBe.forEach(t),M8r=i(we),zE=n(we,"LI",{});var QBe=s(zE);fTe=n(QBe,"STRONG",{});var u5t=s(fTe);E8r=r(u5t,"big_bird"),u5t.forEach(t),C8r=r(QBe," \u2014 "),$J=n(QBe,"A",{href:!0});var _5t=s($J);w8r=r(_5t,"FlaxBigBirdForPreTraining"),_5t.forEach(t),A8r=r(QBe," (BigBird model)"),QBe.forEach(t),y8r=i(we),QE=n(we,"LI",{});var WBe=s(QE);mTe=n(WBe,"STRONG",{});var b5t=s(mTe);L8r=r(b5t,"electra"),b5t.forEach(t),x8r=r(WBe," \u2014 "),kJ=n(WBe,"A",{href:!0});var v5t=s(kJ);$8r=r(v5t,"FlaxElectraForPreTraining"),v5t.forEach(t),k8r=r(WBe," (ELECTRA model)"),WBe.forEach(t),S8r=i(we),WE=n(we,"LI",{});var HBe=s(WE);gTe=n(HBe,"STRONG",{});var F5t=s(gTe);R8r=r(F5t,"mbart"),F5t.forEach(t),B8r=r(HBe," \u2014 "),SJ=n(HBe,"A",{href:!0});var T5t=s(SJ);P8r=r(T5t,"FlaxMBartForConditionalGeneration"),T5t.forEach(t),I8r=r(HBe," (mBART model)"),HBe.forEach(t),q8r=i(we),HE=n(we,"LI",{});var UBe=s(HE);hTe=n(UBe,"STRONG",{});var M5t=s(hTe);N8r=r(M5t,"mt5"),M5t.forEach(t),j8r=r(UBe," \u2014 "),RJ=n(UBe,"A",{href:!0});var E5t=s(RJ);D8r=r(E5t,"FlaxMT5ForConditionalGeneration"),E5t.forEach(t),G8r=r(UBe," (mT5 model)"),UBe.forEach(t),O8r=i(we),UE=n(we,"LI",{});var JBe=s(UE);pTe=n(JBe,"STRONG",{});var C5t=s(pTe);V8r=r(C5t,"roberta"),C5t.forEach(t),X8r=r(JBe," \u2014 "),BJ=n(JBe,"A",{href:!0});var w5t=s(BJ);z8r=r(w5t,"FlaxRobertaForMaskedLM"),w5t.forEach(t),Q8r=r(JBe," (RoBERTa model)"),JBe.forEach(t),W8r=i(we),JE=n(we,"LI",{});var YBe=s(JE);uTe=n(YBe,"STRONG",{});var A5t=s(uTe);H8r=r(A5t,"roformer"),A5t.forEach(t),U8r=r(YBe," \u2014 "),PJ=n(YBe,"A",{href:!0});var y5t=s(PJ);J8r=r(y5t,"FlaxRoFormerForMaskedLM"),y5t.forEach(t),Y8r=r(YBe," (RoFormer model)"),YBe.forEach(t),K8r=i(we),YE=n(we,"LI",{});var KBe=s(YE);_Te=n(KBe,"STRONG",{});var L5t=s(_Te);Z8r=r(L5t,"t5"),L5t.forEach(t),exr=r(KBe," \u2014 "),IJ=n(KBe,"A",{href:!0});var x5t=s(IJ);oxr=r(x5t,"FlaxT5ForConditionalGeneration"),x5t.forEach(t),rxr=r(KBe," (T5 model)"),KBe.forEach(t),txr=i(we),KE=n(we,"LI",{});var ZBe=s(KE);bTe=n(ZBe,"STRONG",{});var $5t=s(bTe);axr=r($5t,"wav2vec2"),$5t.forEach(t),nxr=r(ZBe," \u2014 "),qJ=n(ZBe,"A",{href:!0});var k5t=s(qJ);sxr=r(k5t,"FlaxWav2Vec2ForPreTraining"),k5t.forEach(t),lxr=r(ZBe," (Wav2Vec2 model)"),ZBe.forEach(t),ixr=i(we),ZE=n(we,"LI",{});var ePe=s(ZE);vTe=n(ePe,"STRONG",{});var S5t=s(vTe);dxr=r(S5t,"xlm-roberta"),S5t.forEach(t),cxr=r(ePe," \u2014 "),NJ=n(ePe,"A",{href:!0});var R5t=s(NJ);fxr=r(R5t,"FlaxXLMRobertaForMaskedLM"),R5t.forEach(t),mxr=r(ePe," (XLM-RoBERTa model)"),ePe.forEach(t),we.forEach(t),gxr=i(Vl),T(e5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),zqe=i(f),Ic=n(f,"H2",{class:!0});var Kje=s(Ic);o5=n(Kje,"A",{id:!0,class:!0,href:!0});var B5t=s(o5);FTe=n(B5t,"SPAN",{});var P5t=s(FTe);T(hx.$$.fragment,P5t),P5t.forEach(t),B5t.forEach(t),hxr=i(Kje),TTe=n(Kje,"SPAN",{});var I5t=s(TTe);pxr=r(I5t,"FlaxAutoModelForMaskedLM"),I5t.forEach(t),Kje.forEach(t),Qqe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(px.$$.fragment,Xl),uxr=i(Xl),qc=n(Xl,"P",{});var QZ=s(qc);_xr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jJ=n(QZ,"A",{href:!0});var q5t=s(jJ);bxr=r(q5t,"from_pretrained()"),q5t.forEach(t),vxr=r(QZ," class method or the "),DJ=n(QZ,"A",{href:!0});var N5t=s(DJ);Fxr=r(N5t,"from_config()"),N5t.forEach(t),Txr=r(QZ,` class
method.`),QZ.forEach(t),Mxr=i(Xl),ux=n(Xl,"P",{});var Zje=s(ux);Exr=r(Zje,"This class cannot be instantiated directly using "),MTe=n(Zje,"CODE",{});var j5t=s(MTe);Cxr=r(j5t,"__init__()"),j5t.forEach(t),wxr=r(Zje," (throws an error)."),Zje.forEach(t),Axr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var Rw=s(Ot);T(_x.$$.fragment,Rw),yxr=i(Rw),ETe=n(Rw,"P",{});var D5t=s(ETe);Lxr=r(D5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),D5t.forEach(t),xxr=i(Rw),Nc=n(Rw,"P",{});var WZ=s(Nc);$xr=r(WZ,`Note:
Loading a model from its configuration file does `),CTe=n(WZ,"STRONG",{});var G5t=s(CTe);kxr=r(G5t,"not"),G5t.forEach(t),Sxr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(WZ,"A",{href:!0});var O5t=s(GJ);Rxr=r(O5t,"from_pretrained()"),O5t.forEach(t),Bxr=r(WZ," to load the model weights."),WZ.forEach(t),Pxr=i(Rw),T(r5.$$.fragment,Rw),Rw.forEach(t),Ixr=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(bx.$$.fragment,zl),qxr=i(zl),wTe=n(zl,"P",{});var V5t=s(wTe);Nxr=r(V5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),V5t.forEach(t),jxr=i(zl),un=n(zl,"P",{});var Bw=s(un);Dxr=r(Bw,"The model class to instantiate is selected based on the "),ATe=n(Bw,"CODE",{});var X5t=s(ATe);Gxr=r(X5t,"model_type"),X5t.forEach(t),Oxr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),yTe=n(Bw,"CODE",{});var z5t=s(yTe);Vxr=r(z5t,"pretrained_model_name_or_path"),z5t.forEach(t),Xxr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=n(Bw,"CODE",{});var Q5t=s(LTe);zxr=r(Q5t,"pretrained_model_name_or_path"),Q5t.forEach(t),Qxr=r(Bw,":"),Bw.forEach(t),Wxr=i(zl),Le=n(zl,"UL",{});var Be=s(Le);t5=n(Be,"LI",{});var oPe=s(t5);xTe=n(oPe,"STRONG",{});var W5t=s(xTe);Hxr=r(W5t,"albert"),W5t.forEach(t),Uxr=r(oPe," \u2014 "),OJ=n(oPe,"A",{href:!0});var H5t=s(OJ);Jxr=r(H5t,"FlaxAlbertForMaskedLM"),H5t.forEach(t),Yxr=r(oPe," (ALBERT model)"),oPe.forEach(t),Kxr=i(Be),a5=n(Be,"LI",{});var rPe=s(a5);$Te=n(rPe,"STRONG",{});var U5t=s($Te);Zxr=r(U5t,"bart"),U5t.forEach(t),e9r=r(rPe," \u2014 "),VJ=n(rPe,"A",{href:!0});var J5t=s(VJ);o9r=r(J5t,"FlaxBartForConditionalGeneration"),J5t.forEach(t),r9r=r(rPe," (BART model)"),rPe.forEach(t),t9r=i(Be),n5=n(Be,"LI",{});var tPe=s(n5);kTe=n(tPe,"STRONG",{});var Y5t=s(kTe);a9r=r(Y5t,"bert"),Y5t.forEach(t),n9r=r(tPe," \u2014 "),XJ=n(tPe,"A",{href:!0});var K5t=s(XJ);s9r=r(K5t,"FlaxBertForMaskedLM"),K5t.forEach(t),l9r=r(tPe," (BERT model)"),tPe.forEach(t),i9r=i(Be),s5=n(Be,"LI",{});var aPe=s(s5);STe=n(aPe,"STRONG",{});var Z5t=s(STe);d9r=r(Z5t,"big_bird"),Z5t.forEach(t),c9r=r(aPe," \u2014 "),zJ=n(aPe,"A",{href:!0});var eCt=s(zJ);f9r=r(eCt,"FlaxBigBirdForMaskedLM"),eCt.forEach(t),m9r=r(aPe," (BigBird model)"),aPe.forEach(t),g9r=i(Be),l5=n(Be,"LI",{});var nPe=s(l5);RTe=n(nPe,"STRONG",{});var oCt=s(RTe);h9r=r(oCt,"distilbert"),oCt.forEach(t),p9r=r(nPe," \u2014 "),QJ=n(nPe,"A",{href:!0});var rCt=s(QJ);u9r=r(rCt,"FlaxDistilBertForMaskedLM"),rCt.forEach(t),_9r=r(nPe," (DistilBERT model)"),nPe.forEach(t),b9r=i(Be),i5=n(Be,"LI",{});var sPe=s(i5);BTe=n(sPe,"STRONG",{});var tCt=s(BTe);v9r=r(tCt,"electra"),tCt.forEach(t),F9r=r(sPe," \u2014 "),WJ=n(sPe,"A",{href:!0});var aCt=s(WJ);T9r=r(aCt,"FlaxElectraForMaskedLM"),aCt.forEach(t),M9r=r(sPe," (ELECTRA model)"),sPe.forEach(t),E9r=i(Be),d5=n(Be,"LI",{});var lPe=s(d5);PTe=n(lPe,"STRONG",{});var nCt=s(PTe);C9r=r(nCt,"mbart"),nCt.forEach(t),w9r=r(lPe," \u2014 "),HJ=n(lPe,"A",{href:!0});var sCt=s(HJ);A9r=r(sCt,"FlaxMBartForConditionalGeneration"),sCt.forEach(t),y9r=r(lPe," (mBART model)"),lPe.forEach(t),L9r=i(Be),c5=n(Be,"LI",{});var iPe=s(c5);ITe=n(iPe,"STRONG",{});var lCt=s(ITe);x9r=r(lCt,"roberta"),lCt.forEach(t),$9r=r(iPe," \u2014 "),UJ=n(iPe,"A",{href:!0});var iCt=s(UJ);k9r=r(iCt,"FlaxRobertaForMaskedLM"),iCt.forEach(t),S9r=r(iPe," (RoBERTa model)"),iPe.forEach(t),R9r=i(Be),f5=n(Be,"LI",{});var dPe=s(f5);qTe=n(dPe,"STRONG",{});var dCt=s(qTe);B9r=r(dCt,"roformer"),dCt.forEach(t),P9r=r(dPe," \u2014 "),JJ=n(dPe,"A",{href:!0});var cCt=s(JJ);I9r=r(cCt,"FlaxRoFormerForMaskedLM"),cCt.forEach(t),q9r=r(dPe," (RoFormer model)"),dPe.forEach(t),N9r=i(Be),m5=n(Be,"LI",{});var cPe=s(m5);NTe=n(cPe,"STRONG",{});var fCt=s(NTe);j9r=r(fCt,"xlm-roberta"),fCt.forEach(t),D9r=r(cPe," \u2014 "),YJ=n(cPe,"A",{href:!0});var mCt=s(YJ);G9r=r(mCt,"FlaxXLMRobertaForMaskedLM"),mCt.forEach(t),O9r=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),Be.forEach(t),V9r=i(zl),T(g5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Wqe=i(f),jc=n(f,"H2",{class:!0});var eDe=s(jc);h5=n(eDe,"A",{id:!0,class:!0,href:!0});var gCt=s(h5);jTe=n(gCt,"SPAN",{});var hCt=s(jTe);T(vx.$$.fragment,hCt),hCt.forEach(t),gCt.forEach(t),X9r=i(eDe),DTe=n(eDe,"SPAN",{});var pCt=s(DTe);z9r=r(pCt,"FlaxAutoModelForSeq2SeqLM"),pCt.forEach(t),eDe.forEach(t),Hqe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(Fx.$$.fragment,Ql),Q9r=i(Ql),Dc=n(Ql,"P",{});var HZ=s(Dc);W9r=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KJ=n(HZ,"A",{href:!0});var uCt=s(KJ);H9r=r(uCt,"from_pretrained()"),uCt.forEach(t),U9r=r(HZ," class method or the "),ZJ=n(HZ,"A",{href:!0});var _Ct=s(ZJ);J9r=r(_Ct,"from_config()"),_Ct.forEach(t),Y9r=r(HZ,` class
method.`),HZ.forEach(t),K9r=i(Ql),Tx=n(Ql,"P",{});var oDe=s(Tx);Z9r=r(oDe,"This class cannot be instantiated directly using "),GTe=n(oDe,"CODE",{});var bCt=s(GTe);e$r=r(bCt,"__init__()"),bCt.forEach(t),o$r=r(oDe," (throws an error)."),oDe.forEach(t),r$r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var Pw=s(Vt);T(Mx.$$.fragment,Pw),t$r=i(Pw),OTe=n(Pw,"P",{});var vCt=s(OTe);a$r=r(vCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vCt.forEach(t),n$r=i(Pw),Gc=n(Pw,"P",{});var UZ=s(Gc);s$r=r(UZ,`Note:
Loading a model from its configuration file does `),VTe=n(UZ,"STRONG",{});var FCt=s(VTe);l$r=r(FCt,"not"),FCt.forEach(t),i$r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(UZ,"A",{href:!0});var TCt=s(eY);d$r=r(TCt,"from_pretrained()"),TCt.forEach(t),c$r=r(UZ," to load the model weights."),UZ.forEach(t),f$r=i(Pw),T(p5.$$.fragment,Pw),Pw.forEach(t),m$r=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(Ex.$$.fragment,Wl),g$r=i(Wl),XTe=n(Wl,"P",{});var MCt=s(XTe);h$r=r(MCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),MCt.forEach(t),p$r=i(Wl),_n=n(Wl,"P",{});var Iw=s(_n);u$r=r(Iw,"The model class to instantiate is selected based on the "),zTe=n(Iw,"CODE",{});var ECt=s(zTe);_$r=r(ECt,"model_type"),ECt.forEach(t),b$r=r(Iw,` property of the config object (either
passed as an argument or loaded from `),QTe=n(Iw,"CODE",{});var CCt=s(QTe);v$r=r(CCt,"pretrained_model_name_or_path"),CCt.forEach(t),F$r=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(Iw,"CODE",{});var wCt=s(WTe);T$r=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),M$r=r(Iw,":"),Iw.forEach(t),E$r=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);u5=n(Ve,"LI",{});var fPe=s(u5);HTe=n(fPe,"STRONG",{});var ACt=s(HTe);C$r=r(ACt,"bart"),ACt.forEach(t),w$r=r(fPe," \u2014 "),oY=n(fPe,"A",{href:!0});var yCt=s(oY);A$r=r(yCt,"FlaxBartForConditionalGeneration"),yCt.forEach(t),y$r=r(fPe," (BART model)"),fPe.forEach(t),L$r=i(Ve),_5=n(Ve,"LI",{});var mPe=s(_5);UTe=n(mPe,"STRONG",{});var LCt=s(UTe);x$r=r(LCt,"blenderbot"),LCt.forEach(t),$$r=r(mPe," \u2014 "),rY=n(mPe,"A",{href:!0});var xCt=s(rY);k$r=r(xCt,"FlaxBlenderbotForConditionalGeneration"),xCt.forEach(t),S$r=r(mPe," (Blenderbot model)"),mPe.forEach(t),R$r=i(Ve),b5=n(Ve,"LI",{});var gPe=s(b5);JTe=n(gPe,"STRONG",{});var $Ct=s(JTe);B$r=r($Ct,"blenderbot-small"),$Ct.forEach(t),P$r=r(gPe," \u2014 "),tY=n(gPe,"A",{href:!0});var kCt=s(tY);I$r=r(kCt,"FlaxBlenderbotSmallForConditionalGeneration"),kCt.forEach(t),q$r=r(gPe," (BlenderbotSmall model)"),gPe.forEach(t),N$r=i(Ve),v5=n(Ve,"LI",{});var hPe=s(v5);YTe=n(hPe,"STRONG",{});var SCt=s(YTe);j$r=r(SCt,"encoder-decoder"),SCt.forEach(t),D$r=r(hPe," \u2014 "),aY=n(hPe,"A",{href:!0});var RCt=s(aY);G$r=r(RCt,"FlaxEncoderDecoderModel"),RCt.forEach(t),O$r=r(hPe," (Encoder decoder model)"),hPe.forEach(t),V$r=i(Ve),F5=n(Ve,"LI",{});var pPe=s(F5);KTe=n(pPe,"STRONG",{});var BCt=s(KTe);X$r=r(BCt,"marian"),BCt.forEach(t),z$r=r(pPe," \u2014 "),nY=n(pPe,"A",{href:!0});var PCt=s(nY);Q$r=r(PCt,"FlaxMarianMTModel"),PCt.forEach(t),W$r=r(pPe," (Marian model)"),pPe.forEach(t),H$r=i(Ve),T5=n(Ve,"LI",{});var uPe=s(T5);ZTe=n(uPe,"STRONG",{});var ICt=s(ZTe);U$r=r(ICt,"mbart"),ICt.forEach(t),J$r=r(uPe," \u2014 "),sY=n(uPe,"A",{href:!0});var qCt=s(sY);Y$r=r(qCt,"FlaxMBartForConditionalGeneration"),qCt.forEach(t),K$r=r(uPe," (mBART model)"),uPe.forEach(t),Z$r=i(Ve),M5=n(Ve,"LI",{});var _Pe=s(M5);e7e=n(_Pe,"STRONG",{});var NCt=s(e7e);ekr=r(NCt,"mt5"),NCt.forEach(t),okr=r(_Pe," \u2014 "),lY=n(_Pe,"A",{href:!0});var jCt=s(lY);rkr=r(jCt,"FlaxMT5ForConditionalGeneration"),jCt.forEach(t),tkr=r(_Pe," (mT5 model)"),_Pe.forEach(t),akr=i(Ve),E5=n(Ve,"LI",{});var bPe=s(E5);o7e=n(bPe,"STRONG",{});var DCt=s(o7e);nkr=r(DCt,"pegasus"),DCt.forEach(t),skr=r(bPe," \u2014 "),iY=n(bPe,"A",{href:!0});var GCt=s(iY);lkr=r(GCt,"FlaxPegasusForConditionalGeneration"),GCt.forEach(t),ikr=r(bPe," (Pegasus model)"),bPe.forEach(t),dkr=i(Ve),C5=n(Ve,"LI",{});var vPe=s(C5);r7e=n(vPe,"STRONG",{});var OCt=s(r7e);ckr=r(OCt,"t5"),OCt.forEach(t),fkr=r(vPe," \u2014 "),dY=n(vPe,"A",{href:!0});var VCt=s(dY);mkr=r(VCt,"FlaxT5ForConditionalGeneration"),VCt.forEach(t),gkr=r(vPe," (T5 model)"),vPe.forEach(t),Ve.forEach(t),hkr=i(Wl),T(w5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Uqe=i(f),Oc=n(f,"H2",{class:!0});var rDe=s(Oc);A5=n(rDe,"A",{id:!0,class:!0,href:!0});var XCt=s(A5);t7e=n(XCt,"SPAN",{});var zCt=s(t7e);T(Cx.$$.fragment,zCt),zCt.forEach(t),XCt.forEach(t),pkr=i(rDe),a7e=n(rDe,"SPAN",{});var QCt=s(a7e);ukr=r(QCt,"FlaxAutoModelForSequenceClassification"),QCt.forEach(t),rDe.forEach(t),Jqe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(wx.$$.fragment,Hl),_kr=i(Hl),Vc=n(Hl,"P",{});var JZ=s(Vc);bkr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cY=n(JZ,"A",{href:!0});var WCt=s(cY);vkr=r(WCt,"from_pretrained()"),WCt.forEach(t),Fkr=r(JZ," class method or the "),fY=n(JZ,"A",{href:!0});var HCt=s(fY);Tkr=r(HCt,"from_config()"),HCt.forEach(t),Mkr=r(JZ,` class
method.`),JZ.forEach(t),Ekr=i(Hl),Ax=n(Hl,"P",{});var tDe=s(Ax);Ckr=r(tDe,"This class cannot be instantiated directly using "),n7e=n(tDe,"CODE",{});var UCt=s(n7e);wkr=r(UCt,"__init__()"),UCt.forEach(t),Akr=r(tDe," (throws an error)."),tDe.forEach(t),ykr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var qw=s(Xt);T(yx.$$.fragment,qw),Lkr=i(qw),s7e=n(qw,"P",{});var JCt=s(s7e);xkr=r(JCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JCt.forEach(t),$kr=i(qw),Xc=n(qw,"P",{});var YZ=s(Xc);kkr=r(YZ,`Note:
Loading a model from its configuration file does `),l7e=n(YZ,"STRONG",{});var YCt=s(l7e);Skr=r(YCt,"not"),YCt.forEach(t),Rkr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(YZ,"A",{href:!0});var KCt=s(mY);Bkr=r(KCt,"from_pretrained()"),KCt.forEach(t),Pkr=r(YZ," to load the model weights."),YZ.forEach(t),Ikr=i(qw),T(y5.$$.fragment,qw),qw.forEach(t),qkr=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(Lx.$$.fragment,Ul),Nkr=i(Ul),i7e=n(Ul,"P",{});var ZCt=s(i7e);jkr=r(ZCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZCt.forEach(t),Dkr=i(Ul),bn=n(Ul,"P",{});var Nw=s(bn);Gkr=r(Nw,"The model class to instantiate is selected based on the "),d7e=n(Nw,"CODE",{});var e3t=s(d7e);Okr=r(e3t,"model_type"),e3t.forEach(t),Vkr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),c7e=n(Nw,"CODE",{});var o3t=s(c7e);Xkr=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),zkr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=n(Nw,"CODE",{});var r3t=s(f7e);Qkr=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),Wkr=r(Nw,":"),Nw.forEach(t),Hkr=i(Ul),xe=n(Ul,"UL",{});var Pe=s(xe);L5=n(Pe,"LI",{});var FPe=s(L5);m7e=n(FPe,"STRONG",{});var t3t=s(m7e);Ukr=r(t3t,"albert"),t3t.forEach(t),Jkr=r(FPe," \u2014 "),gY=n(FPe,"A",{href:!0});var a3t=s(gY);Ykr=r(a3t,"FlaxAlbertForSequenceClassification"),a3t.forEach(t),Kkr=r(FPe," (ALBERT model)"),FPe.forEach(t),Zkr=i(Pe),x5=n(Pe,"LI",{});var TPe=s(x5);g7e=n(TPe,"STRONG",{});var n3t=s(g7e);eSr=r(n3t,"bart"),n3t.forEach(t),oSr=r(TPe," \u2014 "),hY=n(TPe,"A",{href:!0});var s3t=s(hY);rSr=r(s3t,"FlaxBartForSequenceClassification"),s3t.forEach(t),tSr=r(TPe," (BART model)"),TPe.forEach(t),aSr=i(Pe),$5=n(Pe,"LI",{});var MPe=s($5);h7e=n(MPe,"STRONG",{});var l3t=s(h7e);nSr=r(l3t,"bert"),l3t.forEach(t),sSr=r(MPe," \u2014 "),pY=n(MPe,"A",{href:!0});var i3t=s(pY);lSr=r(i3t,"FlaxBertForSequenceClassification"),i3t.forEach(t),iSr=r(MPe," (BERT model)"),MPe.forEach(t),dSr=i(Pe),k5=n(Pe,"LI",{});var EPe=s(k5);p7e=n(EPe,"STRONG",{});var d3t=s(p7e);cSr=r(d3t,"big_bird"),d3t.forEach(t),fSr=r(EPe," \u2014 "),uY=n(EPe,"A",{href:!0});var c3t=s(uY);mSr=r(c3t,"FlaxBigBirdForSequenceClassification"),c3t.forEach(t),gSr=r(EPe," (BigBird model)"),EPe.forEach(t),hSr=i(Pe),S5=n(Pe,"LI",{});var CPe=s(S5);u7e=n(CPe,"STRONG",{});var f3t=s(u7e);pSr=r(f3t,"distilbert"),f3t.forEach(t),uSr=r(CPe," \u2014 "),_Y=n(CPe,"A",{href:!0});var m3t=s(_Y);_Sr=r(m3t,"FlaxDistilBertForSequenceClassification"),m3t.forEach(t),bSr=r(CPe," (DistilBERT model)"),CPe.forEach(t),vSr=i(Pe),R5=n(Pe,"LI",{});var wPe=s(R5);_7e=n(wPe,"STRONG",{});var g3t=s(_7e);FSr=r(g3t,"electra"),g3t.forEach(t),TSr=r(wPe," \u2014 "),bY=n(wPe,"A",{href:!0});var h3t=s(bY);MSr=r(h3t,"FlaxElectraForSequenceClassification"),h3t.forEach(t),ESr=r(wPe," (ELECTRA model)"),wPe.forEach(t),CSr=i(Pe),B5=n(Pe,"LI",{});var APe=s(B5);b7e=n(APe,"STRONG",{});var p3t=s(b7e);wSr=r(p3t,"mbart"),p3t.forEach(t),ASr=r(APe," \u2014 "),vY=n(APe,"A",{href:!0});var u3t=s(vY);ySr=r(u3t,"FlaxMBartForSequenceClassification"),u3t.forEach(t),LSr=r(APe," (mBART model)"),APe.forEach(t),xSr=i(Pe),P5=n(Pe,"LI",{});var yPe=s(P5);v7e=n(yPe,"STRONG",{});var _3t=s(v7e);$Sr=r(_3t,"roberta"),_3t.forEach(t),kSr=r(yPe," \u2014 "),FY=n(yPe,"A",{href:!0});var b3t=s(FY);SSr=r(b3t,"FlaxRobertaForSequenceClassification"),b3t.forEach(t),RSr=r(yPe," (RoBERTa model)"),yPe.forEach(t),BSr=i(Pe),I5=n(Pe,"LI",{});var LPe=s(I5);F7e=n(LPe,"STRONG",{});var v3t=s(F7e);PSr=r(v3t,"roformer"),v3t.forEach(t),ISr=r(LPe," \u2014 "),TY=n(LPe,"A",{href:!0});var F3t=s(TY);qSr=r(F3t,"FlaxRoFormerForSequenceClassification"),F3t.forEach(t),NSr=r(LPe," (RoFormer model)"),LPe.forEach(t),jSr=i(Pe),q5=n(Pe,"LI",{});var xPe=s(q5);T7e=n(xPe,"STRONG",{});var T3t=s(T7e);DSr=r(T3t,"xlm-roberta"),T3t.forEach(t),GSr=r(xPe," \u2014 "),MY=n(xPe,"A",{href:!0});var M3t=s(MY);OSr=r(M3t,"FlaxXLMRobertaForSequenceClassification"),M3t.forEach(t),VSr=r(xPe," (XLM-RoBERTa model)"),xPe.forEach(t),Pe.forEach(t),XSr=i(Ul),T(N5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Yqe=i(f),zc=n(f,"H2",{class:!0});var aDe=s(zc);j5=n(aDe,"A",{id:!0,class:!0,href:!0});var E3t=s(j5);M7e=n(E3t,"SPAN",{});var C3t=s(M7e);T(xx.$$.fragment,C3t),C3t.forEach(t),E3t.forEach(t),zSr=i(aDe),E7e=n(aDe,"SPAN",{});var w3t=s(E7e);QSr=r(w3t,"FlaxAutoModelForQuestionAnswering"),w3t.forEach(t),aDe.forEach(t),Kqe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T($x.$$.fragment,Jl),WSr=i(Jl),Qc=n(Jl,"P",{});var KZ=s(Qc);HSr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EY=n(KZ,"A",{href:!0});var A3t=s(EY);USr=r(A3t,"from_pretrained()"),A3t.forEach(t),JSr=r(KZ," class method or the "),CY=n(KZ,"A",{href:!0});var y3t=s(CY);YSr=r(y3t,"from_config()"),y3t.forEach(t),KSr=r(KZ,` class
method.`),KZ.forEach(t),ZSr=i(Jl),kx=n(Jl,"P",{});var nDe=s(kx);eRr=r(nDe,"This class cannot be instantiated directly using "),C7e=n(nDe,"CODE",{});var L3t=s(C7e);oRr=r(L3t,"__init__()"),L3t.forEach(t),rRr=r(nDe," (throws an error)."),nDe.forEach(t),tRr=i(Jl),zt=n(Jl,"DIV",{class:!0});var jw=s(zt);T(Sx.$$.fragment,jw),aRr=i(jw),w7e=n(jw,"P",{});var x3t=s(w7e);nRr=r(x3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),x3t.forEach(t),sRr=i(jw),Wc=n(jw,"P",{});var ZZ=s(Wc);lRr=r(ZZ,`Note:
Loading a model from its configuration file does `),A7e=n(ZZ,"STRONG",{});var $3t=s(A7e);iRr=r($3t,"not"),$3t.forEach(t),dRr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(ZZ,"A",{href:!0});var k3t=s(wY);cRr=r(k3t,"from_pretrained()"),k3t.forEach(t),fRr=r(ZZ," to load the model weights."),ZZ.forEach(t),mRr=i(jw),T(D5.$$.fragment,jw),jw.forEach(t),gRr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(Rx.$$.fragment,Yl),hRr=i(Yl),y7e=n(Yl,"P",{});var S3t=s(y7e);pRr=r(S3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),S3t.forEach(t),uRr=i(Yl),vn=n(Yl,"P",{});var Dw=s(vn);_Rr=r(Dw,"The model class to instantiate is selected based on the "),L7e=n(Dw,"CODE",{});var R3t=s(L7e);bRr=r(R3t,"model_type"),R3t.forEach(t),vRr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),x7e=n(Dw,"CODE",{});var B3t=s(x7e);FRr=r(B3t,"pretrained_model_name_or_path"),B3t.forEach(t),TRr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=n(Dw,"CODE",{});var P3t=s($7e);MRr=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),ERr=r(Dw,":"),Dw.forEach(t),CRr=i(Yl),$e=n(Yl,"UL",{});var Ie=s($e);G5=n(Ie,"LI",{});var $Pe=s(G5);k7e=n($Pe,"STRONG",{});var I3t=s(k7e);wRr=r(I3t,"albert"),I3t.forEach(t),ARr=r($Pe," \u2014 "),AY=n($Pe,"A",{href:!0});var q3t=s(AY);yRr=r(q3t,"FlaxAlbertForQuestionAnswering"),q3t.forEach(t),LRr=r($Pe," (ALBERT model)"),$Pe.forEach(t),xRr=i(Ie),O5=n(Ie,"LI",{});var kPe=s(O5);S7e=n(kPe,"STRONG",{});var N3t=s(S7e);$Rr=r(N3t,"bart"),N3t.forEach(t),kRr=r(kPe," \u2014 "),yY=n(kPe,"A",{href:!0});var j3t=s(yY);SRr=r(j3t,"FlaxBartForQuestionAnswering"),j3t.forEach(t),RRr=r(kPe," (BART model)"),kPe.forEach(t),BRr=i(Ie),V5=n(Ie,"LI",{});var SPe=s(V5);R7e=n(SPe,"STRONG",{});var D3t=s(R7e);PRr=r(D3t,"bert"),D3t.forEach(t),IRr=r(SPe," \u2014 "),LY=n(SPe,"A",{href:!0});var G3t=s(LY);qRr=r(G3t,"FlaxBertForQuestionAnswering"),G3t.forEach(t),NRr=r(SPe," (BERT model)"),SPe.forEach(t),jRr=i(Ie),X5=n(Ie,"LI",{});var RPe=s(X5);B7e=n(RPe,"STRONG",{});var O3t=s(B7e);DRr=r(O3t,"big_bird"),O3t.forEach(t),GRr=r(RPe," \u2014 "),xY=n(RPe,"A",{href:!0});var V3t=s(xY);ORr=r(V3t,"FlaxBigBirdForQuestionAnswering"),V3t.forEach(t),VRr=r(RPe," (BigBird model)"),RPe.forEach(t),XRr=i(Ie),z5=n(Ie,"LI",{});var BPe=s(z5);P7e=n(BPe,"STRONG",{});var X3t=s(P7e);zRr=r(X3t,"distilbert"),X3t.forEach(t),QRr=r(BPe," \u2014 "),$Y=n(BPe,"A",{href:!0});var z3t=s($Y);WRr=r(z3t,"FlaxDistilBertForQuestionAnswering"),z3t.forEach(t),HRr=r(BPe," (DistilBERT model)"),BPe.forEach(t),URr=i(Ie),Q5=n(Ie,"LI",{});var PPe=s(Q5);I7e=n(PPe,"STRONG",{});var Q3t=s(I7e);JRr=r(Q3t,"electra"),Q3t.forEach(t),YRr=r(PPe," \u2014 "),kY=n(PPe,"A",{href:!0});var W3t=s(kY);KRr=r(W3t,"FlaxElectraForQuestionAnswering"),W3t.forEach(t),ZRr=r(PPe," (ELECTRA model)"),PPe.forEach(t),eBr=i(Ie),W5=n(Ie,"LI",{});var IPe=s(W5);q7e=n(IPe,"STRONG",{});var H3t=s(q7e);oBr=r(H3t,"mbart"),H3t.forEach(t),rBr=r(IPe," \u2014 "),SY=n(IPe,"A",{href:!0});var U3t=s(SY);tBr=r(U3t,"FlaxMBartForQuestionAnswering"),U3t.forEach(t),aBr=r(IPe," (mBART model)"),IPe.forEach(t),nBr=i(Ie),H5=n(Ie,"LI",{});var qPe=s(H5);N7e=n(qPe,"STRONG",{});var J3t=s(N7e);sBr=r(J3t,"roberta"),J3t.forEach(t),lBr=r(qPe," \u2014 "),RY=n(qPe,"A",{href:!0});var Y3t=s(RY);iBr=r(Y3t,"FlaxRobertaForQuestionAnswering"),Y3t.forEach(t),dBr=r(qPe," (RoBERTa model)"),qPe.forEach(t),cBr=i(Ie),U5=n(Ie,"LI",{});var NPe=s(U5);j7e=n(NPe,"STRONG",{});var K3t=s(j7e);fBr=r(K3t,"roformer"),K3t.forEach(t),mBr=r(NPe," \u2014 "),BY=n(NPe,"A",{href:!0});var Z3t=s(BY);gBr=r(Z3t,"FlaxRoFormerForQuestionAnswering"),Z3t.forEach(t),hBr=r(NPe," (RoFormer model)"),NPe.forEach(t),pBr=i(Ie),J5=n(Ie,"LI",{});var jPe=s(J5);D7e=n(jPe,"STRONG",{});var ewt=s(D7e);uBr=r(ewt,"xlm-roberta"),ewt.forEach(t),_Br=r(jPe," \u2014 "),PY=n(jPe,"A",{href:!0});var owt=s(PY);bBr=r(owt,"FlaxXLMRobertaForQuestionAnswering"),owt.forEach(t),vBr=r(jPe," (XLM-RoBERTa model)"),jPe.forEach(t),Ie.forEach(t),FBr=i(Yl),T(Y5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Zqe=i(f),Hc=n(f,"H2",{class:!0});var sDe=s(Hc);K5=n(sDe,"A",{id:!0,class:!0,href:!0});var rwt=s(K5);G7e=n(rwt,"SPAN",{});var twt=s(G7e);T(Bx.$$.fragment,twt),twt.forEach(t),rwt.forEach(t),TBr=i(sDe),O7e=n(sDe,"SPAN",{});var awt=s(O7e);MBr=r(awt,"FlaxAutoModelForTokenClassification"),awt.forEach(t),sDe.forEach(t),eNe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T(Px.$$.fragment,Kl),EBr=i(Kl),Uc=n(Kl,"P",{});var eee=s(Uc);CBr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IY=n(eee,"A",{href:!0});var nwt=s(IY);wBr=r(nwt,"from_pretrained()"),nwt.forEach(t),ABr=r(eee," class method or the "),qY=n(eee,"A",{href:!0});var swt=s(qY);yBr=r(swt,"from_config()"),swt.forEach(t),LBr=r(eee,` class
method.`),eee.forEach(t),xBr=i(Kl),Ix=n(Kl,"P",{});var lDe=s(Ix);$Br=r(lDe,"This class cannot be instantiated directly using "),V7e=n(lDe,"CODE",{});var lwt=s(V7e);kBr=r(lwt,"__init__()"),lwt.forEach(t),SBr=r(lDe," (throws an error)."),lDe.forEach(t),RBr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var Gw=s(Qt);T(qx.$$.fragment,Gw),BBr=i(Gw),X7e=n(Gw,"P",{});var iwt=s(X7e);PBr=r(iwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iwt.forEach(t),IBr=i(Gw),Jc=n(Gw,"P",{});var oee=s(Jc);qBr=r(oee,`Note:
Loading a model from its configuration file does `),z7e=n(oee,"STRONG",{});var dwt=s(z7e);NBr=r(dwt,"not"),dwt.forEach(t),jBr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(oee,"A",{href:!0});var cwt=s(NY);DBr=r(cwt,"from_pretrained()"),cwt.forEach(t),GBr=r(oee," to load the model weights."),oee.forEach(t),OBr=i(Gw),T(Z5.$$.fragment,Gw),Gw.forEach(t),VBr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(Nx.$$.fragment,Zl),XBr=i(Zl),Q7e=n(Zl,"P",{});var fwt=s(Q7e);zBr=r(fwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fwt.forEach(t),QBr=i(Zl),Fn=n(Zl,"P",{});var Ow=s(Fn);WBr=r(Ow,"The model class to instantiate is selected based on the "),W7e=n(Ow,"CODE",{});var mwt=s(W7e);HBr=r(mwt,"model_type"),mwt.forEach(t),UBr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),H7e=n(Ow,"CODE",{});var gwt=s(H7e);JBr=r(gwt,"pretrained_model_name_or_path"),gwt.forEach(t),YBr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U7e=n(Ow,"CODE",{});var hwt=s(U7e);KBr=r(hwt,"pretrained_model_name_or_path"),hwt.forEach(t),ZBr=r(Ow,":"),Ow.forEach(t),ePr=i(Zl),De=n(Zl,"UL",{});var Fo=s(De);eC=n(Fo,"LI",{});var DPe=s(eC);J7e=n(DPe,"STRONG",{});var pwt=s(J7e);oPr=r(pwt,"albert"),pwt.forEach(t),rPr=r(DPe," \u2014 "),jY=n(DPe,"A",{href:!0});var uwt=s(jY);tPr=r(uwt,"FlaxAlbertForTokenClassification"),uwt.forEach(t),aPr=r(DPe," (ALBERT model)"),DPe.forEach(t),nPr=i(Fo),oC=n(Fo,"LI",{});var GPe=s(oC);Y7e=n(GPe,"STRONG",{});var _wt=s(Y7e);sPr=r(_wt,"bert"),_wt.forEach(t),lPr=r(GPe," \u2014 "),DY=n(GPe,"A",{href:!0});var bwt=s(DY);iPr=r(bwt,"FlaxBertForTokenClassification"),bwt.forEach(t),dPr=r(GPe," (BERT model)"),GPe.forEach(t),cPr=i(Fo),rC=n(Fo,"LI",{});var OPe=s(rC);K7e=n(OPe,"STRONG",{});var vwt=s(K7e);fPr=r(vwt,"big_bird"),vwt.forEach(t),mPr=r(OPe," \u2014 "),GY=n(OPe,"A",{href:!0});var Fwt=s(GY);gPr=r(Fwt,"FlaxBigBirdForTokenClassification"),Fwt.forEach(t),hPr=r(OPe," (BigBird model)"),OPe.forEach(t),pPr=i(Fo),tC=n(Fo,"LI",{});var VPe=s(tC);Z7e=n(VPe,"STRONG",{});var Twt=s(Z7e);uPr=r(Twt,"distilbert"),Twt.forEach(t),_Pr=r(VPe," \u2014 "),OY=n(VPe,"A",{href:!0});var Mwt=s(OY);bPr=r(Mwt,"FlaxDistilBertForTokenClassification"),Mwt.forEach(t),vPr=r(VPe," (DistilBERT model)"),VPe.forEach(t),FPr=i(Fo),aC=n(Fo,"LI",{});var XPe=s(aC);eMe=n(XPe,"STRONG",{});var Ewt=s(eMe);TPr=r(Ewt,"electra"),Ewt.forEach(t),MPr=r(XPe," \u2014 "),VY=n(XPe,"A",{href:!0});var Cwt=s(VY);EPr=r(Cwt,"FlaxElectraForTokenClassification"),Cwt.forEach(t),CPr=r(XPe," (ELECTRA model)"),XPe.forEach(t),wPr=i(Fo),nC=n(Fo,"LI",{});var zPe=s(nC);oMe=n(zPe,"STRONG",{});var wwt=s(oMe);APr=r(wwt,"roberta"),wwt.forEach(t),yPr=r(zPe," \u2014 "),XY=n(zPe,"A",{href:!0});var Awt=s(XY);LPr=r(Awt,"FlaxRobertaForTokenClassification"),Awt.forEach(t),xPr=r(zPe," (RoBERTa model)"),zPe.forEach(t),$Pr=i(Fo),sC=n(Fo,"LI",{});var QPe=s(sC);rMe=n(QPe,"STRONG",{});var ywt=s(rMe);kPr=r(ywt,"roformer"),ywt.forEach(t),SPr=r(QPe," \u2014 "),zY=n(QPe,"A",{href:!0});var Lwt=s(zY);RPr=r(Lwt,"FlaxRoFormerForTokenClassification"),Lwt.forEach(t),BPr=r(QPe," (RoFormer model)"),QPe.forEach(t),PPr=i(Fo),lC=n(Fo,"LI",{});var WPe=s(lC);tMe=n(WPe,"STRONG",{});var xwt=s(tMe);IPr=r(xwt,"xlm-roberta"),xwt.forEach(t),qPr=r(WPe," \u2014 "),QY=n(WPe,"A",{href:!0});var $wt=s(QY);NPr=r($wt,"FlaxXLMRobertaForTokenClassification"),$wt.forEach(t),jPr=r(WPe," (XLM-RoBERTa model)"),WPe.forEach(t),Fo.forEach(t),DPr=i(Zl),T(iC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),oNe=i(f),Yc=n(f,"H2",{class:!0});var iDe=s(Yc);dC=n(iDe,"A",{id:!0,class:!0,href:!0});var kwt=s(dC);aMe=n(kwt,"SPAN",{});var Swt=s(aMe);T(jx.$$.fragment,Swt),Swt.forEach(t),kwt.forEach(t),GPr=i(iDe),nMe=n(iDe,"SPAN",{});var Rwt=s(nMe);OPr=r(Rwt,"FlaxAutoModelForMultipleChoice"),Rwt.forEach(t),iDe.forEach(t),rNe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(Dx.$$.fragment,ei),VPr=i(ei),Kc=n(ei,"P",{});var ree=s(Kc);XPr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WY=n(ree,"A",{href:!0});var Bwt=s(WY);zPr=r(Bwt,"from_pretrained()"),Bwt.forEach(t),QPr=r(ree," class method or the "),HY=n(ree,"A",{href:!0});var Pwt=s(HY);WPr=r(Pwt,"from_config()"),Pwt.forEach(t),HPr=r(ree,` class
method.`),ree.forEach(t),UPr=i(ei),Gx=n(ei,"P",{});var dDe=s(Gx);JPr=r(dDe,"This class cannot be instantiated directly using "),sMe=n(dDe,"CODE",{});var Iwt=s(sMe);YPr=r(Iwt,"__init__()"),Iwt.forEach(t),KPr=r(dDe," (throws an error)."),dDe.forEach(t),ZPr=i(ei),Wt=n(ei,"DIV",{class:!0});var Vw=s(Wt);T(Ox.$$.fragment,Vw),eIr=i(Vw),lMe=n(Vw,"P",{});var qwt=s(lMe);oIr=r(qwt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qwt.forEach(t),rIr=i(Vw),Zc=n(Vw,"P",{});var tee=s(Zc);tIr=r(tee,`Note:
Loading a model from its configuration file does `),iMe=n(tee,"STRONG",{});var Nwt=s(iMe);aIr=r(Nwt,"not"),Nwt.forEach(t),nIr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(tee,"A",{href:!0});var jwt=s(UY);sIr=r(jwt,"from_pretrained()"),jwt.forEach(t),lIr=r(tee," to load the model weights."),tee.forEach(t),iIr=i(Vw),T(cC.$$.fragment,Vw),Vw.forEach(t),dIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Vx.$$.fragment,oi),cIr=i(oi),dMe=n(oi,"P",{});var Dwt=s(dMe);fIr=r(Dwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Dwt.forEach(t),mIr=i(oi),Tn=n(oi,"P",{});var Xw=s(Tn);gIr=r(Xw,"The model class to instantiate is selected based on the "),cMe=n(Xw,"CODE",{});var Gwt=s(cMe);hIr=r(Gwt,"model_type"),Gwt.forEach(t),pIr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),fMe=n(Xw,"CODE",{});var Owt=s(fMe);uIr=r(Owt,"pretrained_model_name_or_path"),Owt.forEach(t),_Ir=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(Xw,"CODE",{});var Vwt=s(mMe);bIr=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),vIr=r(Xw,":"),Xw.forEach(t),FIr=i(oi),Ge=n(oi,"UL",{});var To=s(Ge);fC=n(To,"LI",{});var HPe=s(fC);gMe=n(HPe,"STRONG",{});var Xwt=s(gMe);TIr=r(Xwt,"albert"),Xwt.forEach(t),MIr=r(HPe," \u2014 "),JY=n(HPe,"A",{href:!0});var zwt=s(JY);EIr=r(zwt,"FlaxAlbertForMultipleChoice"),zwt.forEach(t),CIr=r(HPe," (ALBERT model)"),HPe.forEach(t),wIr=i(To),mC=n(To,"LI",{});var UPe=s(mC);hMe=n(UPe,"STRONG",{});var Qwt=s(hMe);AIr=r(Qwt,"bert"),Qwt.forEach(t),yIr=r(UPe," \u2014 "),YY=n(UPe,"A",{href:!0});var Wwt=s(YY);LIr=r(Wwt,"FlaxBertForMultipleChoice"),Wwt.forEach(t),xIr=r(UPe," (BERT model)"),UPe.forEach(t),$Ir=i(To),gC=n(To,"LI",{});var JPe=s(gC);pMe=n(JPe,"STRONG",{});var Hwt=s(pMe);kIr=r(Hwt,"big_bird"),Hwt.forEach(t),SIr=r(JPe," \u2014 "),KY=n(JPe,"A",{href:!0});var Uwt=s(KY);RIr=r(Uwt,"FlaxBigBirdForMultipleChoice"),Uwt.forEach(t),BIr=r(JPe," (BigBird model)"),JPe.forEach(t),PIr=i(To),hC=n(To,"LI",{});var YPe=s(hC);uMe=n(YPe,"STRONG",{});var Jwt=s(uMe);IIr=r(Jwt,"distilbert"),Jwt.forEach(t),qIr=r(YPe," \u2014 "),ZY=n(YPe,"A",{href:!0});var Ywt=s(ZY);NIr=r(Ywt,"FlaxDistilBertForMultipleChoice"),Ywt.forEach(t),jIr=r(YPe," (DistilBERT model)"),YPe.forEach(t),DIr=i(To),pC=n(To,"LI",{});var KPe=s(pC);_Me=n(KPe,"STRONG",{});var Kwt=s(_Me);GIr=r(Kwt,"electra"),Kwt.forEach(t),OIr=r(KPe," \u2014 "),eK=n(KPe,"A",{href:!0});var Zwt=s(eK);VIr=r(Zwt,"FlaxElectraForMultipleChoice"),Zwt.forEach(t),XIr=r(KPe," (ELECTRA model)"),KPe.forEach(t),zIr=i(To),uC=n(To,"LI",{});var ZPe=s(uC);bMe=n(ZPe,"STRONG",{});var eAt=s(bMe);QIr=r(eAt,"roberta"),eAt.forEach(t),WIr=r(ZPe," \u2014 "),oK=n(ZPe,"A",{href:!0});var oAt=s(oK);HIr=r(oAt,"FlaxRobertaForMultipleChoice"),oAt.forEach(t),UIr=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),JIr=i(To),_C=n(To,"LI",{});var eIe=s(_C);vMe=n(eIe,"STRONG",{});var rAt=s(vMe);YIr=r(rAt,"roformer"),rAt.forEach(t),KIr=r(eIe," \u2014 "),rK=n(eIe,"A",{href:!0});var tAt=s(rK);ZIr=r(tAt,"FlaxRoFormerForMultipleChoice"),tAt.forEach(t),eqr=r(eIe," (RoFormer model)"),eIe.forEach(t),oqr=i(To),bC=n(To,"LI",{});var oIe=s(bC);FMe=n(oIe,"STRONG",{});var aAt=s(FMe);rqr=r(aAt,"xlm-roberta"),aAt.forEach(t),tqr=r(oIe," \u2014 "),tK=n(oIe,"A",{href:!0});var nAt=s(tK);aqr=r(nAt,"FlaxXLMRobertaForMultipleChoice"),nAt.forEach(t),nqr=r(oIe," (XLM-RoBERTa model)"),oIe.forEach(t),To.forEach(t),sqr=i(oi),T(vC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),tNe=i(f),ef=n(f,"H2",{class:!0});var cDe=s(ef);FC=n(cDe,"A",{id:!0,class:!0,href:!0});var sAt=s(FC);TMe=n(sAt,"SPAN",{});var lAt=s(TMe);T(Xx.$$.fragment,lAt),lAt.forEach(t),sAt.forEach(t),lqr=i(cDe),MMe=n(cDe,"SPAN",{});var iAt=s(MMe);iqr=r(iAt,"FlaxAutoModelForNextSentencePrediction"),iAt.forEach(t),cDe.forEach(t),aNe=i(f),Fr=n(f,"DIV",{class:!0});var ri=s(Fr);T(zx.$$.fragment,ri),dqr=i(ri),of=n(ri,"P",{});var aee=s(of);cqr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aK=n(aee,"A",{href:!0});var dAt=s(aK);fqr=r(dAt,"from_pretrained()"),dAt.forEach(t),mqr=r(aee," class method or the "),nK=n(aee,"A",{href:!0});var cAt=s(nK);gqr=r(cAt,"from_config()"),cAt.forEach(t),hqr=r(aee,` class
method.`),aee.forEach(t),pqr=i(ri),Qx=n(ri,"P",{});var fDe=s(Qx);uqr=r(fDe,"This class cannot be instantiated directly using "),EMe=n(fDe,"CODE",{});var fAt=s(EMe);_qr=r(fAt,"__init__()"),fAt.forEach(t),bqr=r(fDe," (throws an error)."),fDe.forEach(t),vqr=i(ri),Ht=n(ri,"DIV",{class:!0});var zw=s(Ht);T(Wx.$$.fragment,zw),Fqr=i(zw),CMe=n(zw,"P",{});var mAt=s(CMe);Tqr=r(mAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mAt.forEach(t),Mqr=i(zw),rf=n(zw,"P",{});var nee=s(rf);Eqr=r(nee,`Note:
Loading a model from its configuration file does `),wMe=n(nee,"STRONG",{});var gAt=s(wMe);Cqr=r(gAt,"not"),gAt.forEach(t),wqr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(nee,"A",{href:!0});var hAt=s(sK);Aqr=r(hAt,"from_pretrained()"),hAt.forEach(t),yqr=r(nee," to load the model weights."),nee.forEach(t),Lqr=i(zw),T(TC.$$.fragment,zw),zw.forEach(t),xqr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(Hx.$$.fragment,ti),$qr=i(ti),AMe=n(ti,"P",{});var pAt=s(AMe);kqr=r(pAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pAt.forEach(t),Sqr=i(ti),Mn=n(ti,"P",{});var Qw=s(Mn);Rqr=r(Qw,"The model class to instantiate is selected based on the "),yMe=n(Qw,"CODE",{});var uAt=s(yMe);Bqr=r(uAt,"model_type"),uAt.forEach(t),Pqr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),LMe=n(Qw,"CODE",{});var _At=s(LMe);Iqr=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),qqr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=n(Qw,"CODE",{});var bAt=s(xMe);Nqr=r(bAt,"pretrained_model_name_or_path"),bAt.forEach(t),jqr=r(Qw,":"),Qw.forEach(t),Dqr=i(ti),$Me=n(ti,"UL",{});var vAt=s($Me);MC=n(vAt,"LI",{});var rIe=s(MC);kMe=n(rIe,"STRONG",{});var FAt=s(kMe);Gqr=r(FAt,"bert"),FAt.forEach(t),Oqr=r(rIe," \u2014 "),lK=n(rIe,"A",{href:!0});var TAt=s(lK);Vqr=r(TAt,"FlaxBertForNextSentencePrediction"),TAt.forEach(t),Xqr=r(rIe," (BERT model)"),rIe.forEach(t),vAt.forEach(t),zqr=i(ti),T(EC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),nNe=i(f),tf=n(f,"H2",{class:!0});var mDe=s(tf);CC=n(mDe,"A",{id:!0,class:!0,href:!0});var MAt=s(CC);SMe=n(MAt,"SPAN",{});var EAt=s(SMe);T(Ux.$$.fragment,EAt),EAt.forEach(t),MAt.forEach(t),Qqr=i(mDe),RMe=n(mDe,"SPAN",{});var CAt=s(RMe);Wqr=r(CAt,"FlaxAutoModelForImageClassification"),CAt.forEach(t),mDe.forEach(t),sNe=i(f),Tr=n(f,"DIV",{class:!0});var ai=s(Tr);T(Jx.$$.fragment,ai),Hqr=i(ai),af=n(ai,"P",{});var see=s(af);Uqr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iK=n(see,"A",{href:!0});var wAt=s(iK);Jqr=r(wAt,"from_pretrained()"),wAt.forEach(t),Yqr=r(see," class method or the "),dK=n(see,"A",{href:!0});var AAt=s(dK);Kqr=r(AAt,"from_config()"),AAt.forEach(t),Zqr=r(see,` class
method.`),see.forEach(t),eNr=i(ai),Yx=n(ai,"P",{});var gDe=s(Yx);oNr=r(gDe,"This class cannot be instantiated directly using "),BMe=n(gDe,"CODE",{});var yAt=s(BMe);rNr=r(yAt,"__init__()"),yAt.forEach(t),tNr=r(gDe," (throws an error)."),gDe.forEach(t),aNr=i(ai),Ut=n(ai,"DIV",{class:!0});var Ww=s(Ut);T(Kx.$$.fragment,Ww),nNr=i(Ww),PMe=n(Ww,"P",{});var LAt=s(PMe);sNr=r(LAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LAt.forEach(t),lNr=i(Ww),nf=n(Ww,"P",{});var lee=s(nf);iNr=r(lee,`Note:
Loading a model from its configuration file does `),IMe=n(lee,"STRONG",{});var xAt=s(IMe);dNr=r(xAt,"not"),xAt.forEach(t),cNr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(lee,"A",{href:!0});var $At=s(cK);fNr=r($At,"from_pretrained()"),$At.forEach(t),mNr=r(lee," to load the model weights."),lee.forEach(t),gNr=i(Ww),T(wC.$$.fragment,Ww),Ww.forEach(t),hNr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(Zx.$$.fragment,ni),pNr=i(ni),qMe=n(ni,"P",{});var kAt=s(qMe);uNr=r(kAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kAt.forEach(t),_Nr=i(ni),En=n(ni,"P",{});var Hw=s(En);bNr=r(Hw,"The model class to instantiate is selected based on the "),NMe=n(Hw,"CODE",{});var SAt=s(NMe);vNr=r(SAt,"model_type"),SAt.forEach(t),FNr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),jMe=n(Hw,"CODE",{});var RAt=s(jMe);TNr=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),MNr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=n(Hw,"CODE",{});var BAt=s(DMe);ENr=r(BAt,"pretrained_model_name_or_path"),BAt.forEach(t),CNr=r(Hw,":"),Hw.forEach(t),wNr=i(ni),e9=n(ni,"UL",{});var hDe=s(e9);AC=n(hDe,"LI",{});var tIe=s(AC);GMe=n(tIe,"STRONG",{});var PAt=s(GMe);ANr=r(PAt,"beit"),PAt.forEach(t),yNr=r(tIe," \u2014 "),fK=n(tIe,"A",{href:!0});var IAt=s(fK);LNr=r(IAt,"FlaxBeitForImageClassification"),IAt.forEach(t),xNr=r(tIe," (BEiT model)"),tIe.forEach(t),$Nr=i(hDe),yC=n(hDe,"LI",{});var aIe=s(yC);OMe=n(aIe,"STRONG",{});var qAt=s(OMe);kNr=r(qAt,"vit"),qAt.forEach(t),SNr=r(aIe," \u2014 "),mK=n(aIe,"A",{href:!0});var NAt=s(mK);RNr=r(NAt,"FlaxViTForImageClassification"),NAt.forEach(t),BNr=r(aIe," (ViT model)"),aIe.forEach(t),hDe.forEach(t),PNr=i(ni),T(LC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),lNe=i(f),sf=n(f,"H2",{class:!0});var pDe=s(sf);xC=n(pDe,"A",{id:!0,class:!0,href:!0});var jAt=s(xC);VMe=n(jAt,"SPAN",{});var DAt=s(VMe);T(o9.$$.fragment,DAt),DAt.forEach(t),jAt.forEach(t),INr=i(pDe),XMe=n(pDe,"SPAN",{});var GAt=s(XMe);qNr=r(GAt,"FlaxAutoModelForVision2Seq"),GAt.forEach(t),pDe.forEach(t),iNe=i(f),Mr=n(f,"DIV",{class:!0});var si=s(Mr);T(r9.$$.fragment,si),NNr=i(si),lf=n(si,"P",{});var iee=s(lf);jNr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gK=n(iee,"A",{href:!0});var OAt=s(gK);DNr=r(OAt,"from_pretrained()"),OAt.forEach(t),GNr=r(iee," class method or the "),hK=n(iee,"A",{href:!0});var VAt=s(hK);ONr=r(VAt,"from_config()"),VAt.forEach(t),VNr=r(iee,` class
method.`),iee.forEach(t),XNr=i(si),t9=n(si,"P",{});var uDe=s(t9);zNr=r(uDe,"This class cannot be instantiated directly using "),zMe=n(uDe,"CODE",{});var XAt=s(zMe);QNr=r(XAt,"__init__()"),XAt.forEach(t),WNr=r(uDe," (throws an error)."),uDe.forEach(t),HNr=i(si),Jt=n(si,"DIV",{class:!0});var Uw=s(Jt);T(a9.$$.fragment,Uw),UNr=i(Uw),QMe=n(Uw,"P",{});var zAt=s(QMe);JNr=r(zAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zAt.forEach(t),YNr=i(Uw),df=n(Uw,"P",{});var dee=s(df);KNr=r(dee,`Note:
Loading a model from its configuration file does `),WMe=n(dee,"STRONG",{});var QAt=s(WMe);ZNr=r(QAt,"not"),QAt.forEach(t),ejr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(dee,"A",{href:!0});var WAt=s(pK);ojr=r(WAt,"from_pretrained()"),WAt.forEach(t),rjr=r(dee," to load the model weights."),dee.forEach(t),tjr=i(Uw),T($C.$$.fragment,Uw),Uw.forEach(t),ajr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(n9.$$.fragment,li),njr=i(li),HMe=n(li,"P",{});var HAt=s(HMe);sjr=r(HAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),HAt.forEach(t),ljr=i(li),Cn=n(li,"P",{});var Jw=s(Cn);ijr=r(Jw,"The model class to instantiate is selected based on the "),UMe=n(Jw,"CODE",{});var UAt=s(UMe);djr=r(UAt,"model_type"),UAt.forEach(t),cjr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),JMe=n(Jw,"CODE",{});var JAt=s(JMe);fjr=r(JAt,"pretrained_model_name_or_path"),JAt.forEach(t),mjr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(Jw,"CODE",{});var YAt=s(YMe);gjr=r(YAt,"pretrained_model_name_or_path"),YAt.forEach(t),hjr=r(Jw,":"),Jw.forEach(t),pjr=i(li),KMe=n(li,"UL",{});var KAt=s(KMe);kC=n(KAt,"LI",{});var nIe=s(kC);ZMe=n(nIe,"STRONG",{});var ZAt=s(ZMe);ujr=r(ZAt,"vision-encoder-decoder"),ZAt.forEach(t),_jr=r(nIe," \u2014 "),uK=n(nIe,"A",{href:!0});var eyt=s(uK);bjr=r(eyt,"FlaxVisionEncoderDecoderModel"),eyt.forEach(t),vjr=r(nIe," (Vision Encoder decoder model)"),nIe.forEach(t),KAt.forEach(t),Fjr=i(li),T(SC.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(a8t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(_f,"id","extending-the-auto-classes"),c(_f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_f,"href","#extending-the-auto-classes"),c(pi,"class","relative group"),c(vf,"id","transformers.AutoConfig"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(w$,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(A$,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig"),c(y$,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig"),c(L$,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig"),c(x$,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig"),c($$,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(k$,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig"),c(S$,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(R$,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(B$,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(P$,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig"),c(I$,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig"),c(q$,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig"),c(N$,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig"),c(j$,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig"),c(D$,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig"),c(G$,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(O$,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(V$,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(X$,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig"),c(z$,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Q$,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(W$,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig"),c(H$,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig"),c(U$,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig"),c(J$,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig"),c(Y$,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig"),c(K$,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig"),c(Z$,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ek,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig"),c(ok,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaConfig"),c(rk,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig"),c(tk,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig"),c(ak,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig"),c(nk,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig"),c(sk,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config"),c(lk,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ik,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig"),c(dk,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig"),c(ck,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig"),c(fk,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(mk,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(gk,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(hk,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(pk,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig"),c(uk,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig"),c(_k,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig"),c(bk,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig"),c(vk,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config"),c(Fk,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig"),c(Tk,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Mk,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig"),c(Ek,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Ck,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(wk,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig"),c(Ak,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config"),c(yk,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Lk,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(xk,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig"),c($k,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig"),c(kk,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig"),c(Sk,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Rk,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Bk,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Pk,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagConfig"),c(Ik,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmConfig"),c(qk,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig"),c(Nk,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig"),c(jk,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig"),c(Dk,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig"),c(Gk,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig"),c(Ok,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig"),c(Vk,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig"),c(Xk,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig"),c(zk,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig"),c(Qk,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig"),c(Wk,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Hk,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Uk,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Jk,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig"),c(Yk,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Kk,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig"),c(Zk,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config"),c(eS,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig"),c(oS,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig"),c(rS,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(tS,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig"),c(aS,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(nS,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(sS,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig"),c(lS,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig"),c(iS,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(dS,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(cS,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(fS,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig"),c(mS,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(gS,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(hS,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig"),c(pS,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig"),c(uS,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig"),c(_S,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(bS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(vS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(FS,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig"),c(TS,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig"),c(MS,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"id","transformers.AutoTokenizer"),c(vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vg,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(ES,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(CS,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(wS,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(AS,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizer"),c(yS,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizerFast"),c(LS,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizer"),c(xS,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c($S,"href","/docs/transformers/pr_17060/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(kS,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(SS,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(RS,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(BS,"href","/docs/transformers/pr_17060/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(PS,"href","/docs/transformers/pr_17060/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(IS,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(qS,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(NS,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(jS,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(DS,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(GS,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(OS,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(VS,"href","/docs/transformers/pr_17060/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(XS,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizer"),c(zS,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(QS,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineTokenizer"),c(WS,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizer"),c(HS,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(US,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(JS,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(YS,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizer"),c(KS,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(eR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(oR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(rR,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizer"),c(tR,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(aR,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(nR,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(sR,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(lR,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(iR,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(dR,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(cR,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizer"),c(fR,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(mR,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(gR,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizer"),c(hR,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(pR,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(uR,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizer"),c(_R,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(bR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(FR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(TR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(MR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ER,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CR,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizer"),c(wR,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(AR,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(yR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(LR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c($R,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(kR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(SR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(RR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(BR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(PR,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(IR,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(qR,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizer"),c(NR,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizerFast"),c(jR,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizer"),c(DR,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(GR,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeTokenizer"),c(OR,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(VR,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(XR,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(zR,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianTokenizer"),c(QR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizer"),c(WR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(HR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(UR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(JR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(YR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(KR,"href","/docs/transformers/pr_17060/en/model_doc/mluke#transformers.MLukeTokenizer"),c(ZR,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(eB,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(rB,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(tB,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5Tokenizer"),c(aB,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5TokenizerFast"),c(nB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(sB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(iB,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(dB,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(cB,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(fB,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(mB,"href","/docs/transformers/pr_17060/en/model_doc/phobert#transformers.PhobertTokenizer"),c(gB,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartTokenizer"),c(hB,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(pB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(uB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(_B,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagTokenizer"),c(bB,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizer"),c(vB,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizerFast"),c(FB,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizer"),c(TB,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(MB,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizer"),c(EB,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(CB,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(wB,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(AB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(LB,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(xB,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c($B,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(kB,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(SB,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizer"),c(RB,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(BB,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(PB,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(IB,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5Tokenizer"),c(qB,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5TokenizerFast"),c(NB,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasTokenizer"),c(jB,"href","/docs/transformers/pr_17060/en/model_doc/tapex#transformers.TapexTokenizer"),c(DB,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(GB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(OB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(VB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(XB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(zB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizer"),c(QB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(WB,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMTokenizer"),c(HB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(UB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(JB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(YB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(eP,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(oP,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(rP,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"id","transformers.AutoFeatureExtractor"),c(Yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yg,"href","#transformers.AutoFeatureExtractor"),c(vi,"class","relative group"),c(tP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(aP,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(nP,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iP,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(dP,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(uP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(_P,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(bP,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(vP,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(FP,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TP,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MP,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(EP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(CP,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wP,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AP,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yP,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xP,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"id","transformers.AutoProcessor"),c(yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yh,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c($P,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(kP,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPProcessor"),c(SP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(RP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(BP,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(PP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(NP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(jP,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRProcessor"),c(DP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OP,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltProcessor"),c(VP,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(XP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wh,"id","transformers.AutoModel"),c(Wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(QP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UP,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel"),c(JP,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel"),c(YP,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel"),c(KP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(ZP,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(eI,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel"),c(oI,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(rI,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(tI,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(aI,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel"),c(nI,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel"),c(sI,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel"),c(lI,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel"),c(iI,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel"),c(dI,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel"),c(cI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(fI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(mI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(gI,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel"),c(hI,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(pI,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(uI,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel"),c(_I,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel"),c(bI,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel"),c(vI,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(FI,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel"),c(TI,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel"),c(MI,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel"),c(EI,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaModel"),c(CI,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel"),c(wI,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel"),c(AI,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel"),c(yI,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel"),c(LI,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel"),c(xI,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model"),c($I,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(kI,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel"),c(SI,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel"),c(RI,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel"),c(BI,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(PI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(II,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(qI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(NI,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel"),c(jI,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel"),c(DI,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel"),c(GI,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel"),c(OI,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model"),c(VI,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel"),c(XI,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel"),c(zI,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel"),c(QI,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(WI,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel"),c(HI,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel"),c(UI,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model"),c(JI,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel"),c(YI,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(KI,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel"),c(ZI,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel"),c(eq,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel"),c(oq,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel"),c(rq,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(tq,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel"),c(aq,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel"),c(nq,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel"),c(sq,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel"),c(lq,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel"),c(iq,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(dq,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel"),c(cq,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel"),c(fq,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel"),c(mq,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel"),c(gq,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel"),c(hq,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(pq,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel"),c(uq,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_q,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel"),c(bq,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model"),c(vq,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel"),c(Fq,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Tq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Mq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Eq,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel"),c(Cq,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel"),c(wq,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Aq,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yq,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel"),c(Lq,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(xq,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c($q,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel"),c(kq,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel"),c(Sq,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel"),c(Rq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Bq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Pq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Iq,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel"),c(qq,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel"),c(Nq,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ju,"id","transformers.AutoModelForPreTraining"),c(ju,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ju,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c(jq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oq,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Vq,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xq,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining"),c(zq,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Qq,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Wq,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Hq,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Zq,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(eN,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaForPreTraining"),c(oN,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining"),c(rN,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(tN,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(aN,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(nN,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(sN,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(lN,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(iN,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(dN,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(cN,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(fN,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mN,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(gN,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(hN,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(pN,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(uN,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(_N,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(bN,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(vN,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(FN,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(TN,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(MN,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(EN,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(CN,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(wN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(AN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(yN,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x_,"id","transformers.AutoModelForCausalLM"),c(x_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(LN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($N,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kN,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM"),c(SN,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel"),c(RN,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(BN,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(PN,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(IN,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(qN,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(NN,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(jN,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(DN,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(GN,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM"),c(ON,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(VN,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(XN,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(zN,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM"),c(QN,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM"),c(WN,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(HN,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(UN,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(JN,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(YN,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(KN,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(ZN,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(ej,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(oj,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(rj,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(tj,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(aj,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(nj,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(sj,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(lj,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ij,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(dj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(cj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(fj,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.AutoModelForMaskedLM"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(mj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pj,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(uj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_j,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(vj,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(wj,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(yj,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(xj,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($j,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(kj,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Rj,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(qj,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(jj,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(zj,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Qj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z0,"id","transformers.AutoModelForSeq2SeqLM"),c(Z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z0,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bi,"class","relative group"),c(Uj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(tD,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel"),c(lD,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(gD,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F1,"id","transformers.AutoModelForSequenceClassification"),c(F1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F1,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(pD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_D,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bD,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c($D,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bb,"id","transformers.AutoModelForMultipleChoice"),c(bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bb,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(mG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pG,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c($G,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yb,"id","transformers.AutoModelForNextSentencePrediction"),c(Yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c(XG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(HG,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(UG,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(JG,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(YG,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s2,"id","transformers.AutoModelForTokenClassification"),c(s2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s2,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(KG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oO,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(rO,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification"),c(tO,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(aO,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(nO,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification"),c(sO,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(lO,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(iO,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(dO,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(cO,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(fO,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(mO,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(gO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(hO,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(pO,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(uO,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(_O,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(bO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(vO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(FO,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(TO,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(MO,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(EO,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(CO,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(wO,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(AO,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(yO,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(LO,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(xO,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c($O,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(kO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(SO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(RO,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(BO,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X2,"id","transformers.AutoModelForQuestionAnswering"),c(X2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(PO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NO,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(KO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(FV,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(EV,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(CV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yV,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForImageClassification"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c(LV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($V,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kV,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification"),c(SV,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(RV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(BV,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification"),c(PV,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(IV,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(qV,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(NV,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(jV,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(DV,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(GV,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(OV,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(VV,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(XV,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification"),c(zV,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification"),c(QV,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForVision2Seq"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c(WV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.AutoModelForAudioClassification"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(YV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForAudioFrameClassification"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(iX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(mX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(gX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(hX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wF,"id","transformers.AutoModelForCTC"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(pX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(vX,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC"),c(FX,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC"),c(TX,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC"),c(MX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(EX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(CX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(wX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(AX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c($X,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForAudioXVector"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForAudioXVector"),c(vd,"class","relative group"),c(kX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(PX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(IX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(qX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForMaskedImageModeling"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c(NX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(OX,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(VX,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.AutoModelForObjectDetection"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c(XX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection"),c(HX,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c6,"id","transformers.AutoModelForImageSegmentation"),c(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c6,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(UX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KX,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p6,"id","transformers.AutoModelForSemanticSegmentation"),c(p6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(ZX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(tz,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(az,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(nz,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E6,"id","transformers.AutoModelForInstanceSegmentation"),c(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Pd,"class","relative group"),c(sz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dz,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L6,"id","transformers.TFAutoModel"),c(L6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L6,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(cz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel"),c(hz,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel"),c(pz,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel"),c(uz,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(_z,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(bz,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel"),c(vz,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel"),c(Fz,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel"),c(Tz,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel"),c(Mz,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Ez,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Cz,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel"),c(wz,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Az,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(yz,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Lz,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel"),c(xz,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel"),c($z,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel"),c(kz,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Sz,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Rz,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel"),c(Bz,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel"),c(Pz,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Iz,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel"),c(qz,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel"),c(Nz,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel"),c(jz,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel"),c(Dz,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel"),c(Gz,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Oz,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Vz,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model"),c(Xz,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(zz,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Qz,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel"),c(Wz,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel"),c(Hz,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Uz,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Jz,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model"),c(Yz,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel"),c(Kz,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Zz,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel"),c(eQ,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(oQ,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(rQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel"),c(tQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(aQ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.TFAutoModelForPreTraining"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(nQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iQ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(dQ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(cQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining"),c(fQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(pQ,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(uQ,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(_Q,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(bQ,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(FQ,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(TQ,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(wQ,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(LQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c($Q,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.TFAutoModelForCausalLM"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(PQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(IQ,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(NQ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(jQ,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(GQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(OQ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(VQ,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(XQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zQ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i7,"id","transformers.TFAutoModelForImageClassification"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(QQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(JQ,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(YQ,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h7,"id","transformers.TFAutoModelForMaskedLM"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.TFAutoModelForMaskedLM"),c(Yd,"class","relative group"),c(KQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(rW,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(tW,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(aW,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(nW,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(sW,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(lW,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(iW,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(dW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(cW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(fW,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(mW,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(gW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(hW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(pW,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(uW,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(_W,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(bW,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(vW,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(FW,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ec,"class","relative group"),c(TW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(wW,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(AW,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(yW,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(LW,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(xW,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel"),c($W,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(kW,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(SW,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(RW,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J7,"id","transformers.TFAutoModelForSequenceClassification"),c(J7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J7,"href","#transformers.TFAutoModelForSequenceClassification"),c(tc,"class","relative group"),c(BW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.TFAutoModelForMultipleChoice"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.TFAutoModelForMultipleChoice"),c(sc,"class","relative group"),c(dH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(hH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(pH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(uH,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(_H,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(bH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(vH,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(FH,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(TH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(MH,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(EH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(CH,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(wH,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(AH,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(yH,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(LH,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(dc,"class","relative group"),c(xH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($H,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(RH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(BH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.TFAutoModelForTokenClassification"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c(NH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(OH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(VH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(XH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(zH,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(QH,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(WH,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(HH,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(UH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(JH,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(YH,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(KH,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(ZH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(eU,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(oU,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(rU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(tU,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(aU,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(nU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(sU,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForQuestionAnswering"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(bc,"class","relative group"),c(lU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(vU,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(LU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForVision2Seq"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForVision2Seq"),c(Tc,"class","relative group"),c($U,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Cc,"class","relative group"),c(BU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.FlaxAutoModel"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.FlaxAutoModel"),c(yc,"class","relative group"),c(NU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel"),c(OU,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel"),c(VU,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel"),c(XU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel"),c(zU,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(QU,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(WU,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(HU,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel"),c(UU,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(JU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel"),c(YU,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(KU,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(ZU,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(eJ,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel"),c(oJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel"),c(rJ,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model"),c(tJ,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(aJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(nJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(sJ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model"),c(lJ,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(iJ,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel"),c(dJ,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(cJ,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(fJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.FlaxAutoModelForCausalLM"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.FlaxAutoModelForCausalLM"),c($c,"class","relative group"),c(mJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(uJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(_J,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(bJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(vJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(FJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(TJ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(MJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(EJ,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.FlaxAutoModelForPreTraining"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Rc,"class","relative group"),c(CJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(LJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c($J,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(kJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(SJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(qJ,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(NJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModelForMaskedLM"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ic,"class","relative group"),c(jJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(VJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(zJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(QJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(WJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(HJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(JJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(YJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(jc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(rY,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(tY,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(nY,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(sY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(lY,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(iY,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(dY,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Oc,"class","relative group"),c(cY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(vY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(FY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(TY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(MY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(zc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(yY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(LY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(xY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c($Y,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(kY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(SY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(RY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(BY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(PY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.FlaxAutoModelForTokenClassification"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Hc,"class","relative group"),c(IY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(DY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(GY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(OY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(VY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(XY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(zY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(QY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Yc,"class","relative group"),c(WY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(YY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(KY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(ZY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(eK,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(oK,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(rK,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(tK,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(ef,"class","relative group"),c(aK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.FlaxAutoModelForImageClassification"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForImageClassification"),c(tf,"class","relative group"),c(iK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(mK,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xC,"id","transformers.FlaxAutoModelForVision2Seq"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(sf,"class","relative group"),c(gK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uK,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ii),b(f,gf,_),b(f,et,_),e(et,di),e(et,ci),e(ci,Yw),e(et,hf),b(f,qe,_),b(f,Xe,_),e(Xe,fi),e(Xe,An),e(An,Kw),e(Xe,yn),e(Xe,Ln),e(Ln,Zw),e(Xe,mi),e(Xe,xn),e(xn,eA),e(Xe,gi),b(f,pf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,v$),e(Ae,hi),e(hi,F$),e(Ae,T$),b(f,Eo,_),b(f,Ea,_),e(Ea,M$),e(Ea,uf),e(uf,E$),e(Ea,_De),b(f,sIe,_),b(f,pi,_),e(pi,_f),e(_f,cee),M(oA,cee,null),e(pi,bDe),e(pi,fee),e(fee,vDe),b(f,lIe,_),b(f,$n,_),e($n,FDe),e($n,mee),e(mee,TDe),e($n,MDe),e($n,gee),e(gee,EDe),e($n,CDe),b(f,iIe,_),M(rA,f,_),b(f,dIe,_),b(f,C$,_),e(C$,wDe),b(f,cIe,_),M(bf,f,_),b(f,fIe,_),b(f,ui,_),e(ui,vf),e(vf,hee),M(tA,hee,null),e(ui,ADe),e(ui,pee),e(pee,yDe),b(f,mIe,_),b(f,Co,_),M(aA,Co,null),e(Co,LDe),e(Co,nA),e(nA,xDe),e(nA,w$),e(w$,$De),e(nA,kDe),e(Co,SDe),e(Co,sA),e(sA,RDe),e(sA,uee),e(uee,BDe),e(sA,PDe),e(Co,IDe),e(Co,Er),M(lA,Er,null),e(Er,qDe),e(Er,_ee),e(_ee,NDe),e(Er,jDe),e(Er,_i),e(_i,DDe),e(_i,bee),e(bee,GDe),e(_i,ODe),e(_i,vee),e(vee,VDe),e(_i,XDe),e(Er,zDe),e(Er,A),e(A,Ff),e(Ff,Fee),e(Fee,QDe),e(Ff,WDe),e(Ff,A$),e(A$,HDe),e(Ff,UDe),e(A,JDe),e(A,Tf),e(Tf,Tee),e(Tee,YDe),e(Tf,KDe),e(Tf,y$),e(y$,ZDe),e(Tf,eGe),e(A,oGe),e(A,Mf),e(Mf,Mee),e(Mee,rGe),e(Mf,tGe),e(Mf,L$),e(L$,aGe),e(Mf,nGe),e(A,sGe),e(A,Ef),e(Ef,Eee),e(Eee,lGe),e(Ef,iGe),e(Ef,x$),e(x$,dGe),e(Ef,cGe),e(A,fGe),e(A,Cf),e(Cf,Cee),e(Cee,mGe),e(Cf,gGe),e(Cf,$$),e($$,hGe),e(Cf,pGe),e(A,uGe),e(A,wf),e(wf,wee),e(wee,_Ge),e(wf,bGe),e(wf,k$),e(k$,vGe),e(wf,FGe),e(A,TGe),e(A,Af),e(Af,Aee),e(Aee,MGe),e(Af,EGe),e(Af,S$),e(S$,CGe),e(Af,wGe),e(A,AGe),e(A,yf),e(yf,yee),e(yee,yGe),e(yf,LGe),e(yf,R$),e(R$,xGe),e(yf,$Ge),e(A,kGe),e(A,Lf),e(Lf,Lee),e(Lee,SGe),e(Lf,RGe),e(Lf,B$),e(B$,BGe),e(Lf,PGe),e(A,IGe),e(A,xf),e(xf,xee),e(xee,qGe),e(xf,NGe),e(xf,P$),e(P$,jGe),e(xf,DGe),e(A,GGe),e(A,$f),e($f,$ee),e($ee,OGe),e($f,VGe),e($f,I$),e(I$,XGe),e($f,zGe),e(A,QGe),e(A,kf),e(kf,kee),e(kee,WGe),e(kf,HGe),e(kf,q$),e(q$,UGe),e(kf,JGe),e(A,YGe),e(A,Sf),e(Sf,See),e(See,KGe),e(Sf,ZGe),e(Sf,N$),e(N$,eOe),e(Sf,oOe),e(A,rOe),e(A,Rf),e(Rf,Ree),e(Ree,tOe),e(Rf,aOe),e(Rf,j$),e(j$,nOe),e(Rf,sOe),e(A,lOe),e(A,Bf),e(Bf,Bee),e(Bee,iOe),e(Bf,dOe),e(Bf,D$),e(D$,cOe),e(Bf,fOe),e(A,mOe),e(A,Pf),e(Pf,Pee),e(Pee,gOe),e(Pf,hOe),e(Pf,G$),e(G$,pOe),e(Pf,uOe),e(A,_Oe),e(A,If),e(If,Iee),e(Iee,bOe),e(If,vOe),e(If,O$),e(O$,FOe),e(If,TOe),e(A,MOe),e(A,qf),e(qf,qee),e(qee,EOe),e(qf,COe),e(qf,V$),e(V$,wOe),e(qf,AOe),e(A,yOe),e(A,Nf),e(Nf,Nee),e(Nee,LOe),e(Nf,xOe),e(Nf,X$),e(X$,$Oe),e(Nf,kOe),e(A,SOe),e(A,jf),e(jf,jee),e(jee,ROe),e(jf,BOe),e(jf,z$),e(z$,POe),e(jf,IOe),e(A,qOe),e(A,Df),e(Df,Dee),e(Dee,NOe),e(Df,jOe),e(Df,Q$),e(Q$,DOe),e(Df,GOe),e(A,OOe),e(A,Gf),e(Gf,Gee),e(Gee,VOe),e(Gf,XOe),e(Gf,W$),e(W$,zOe),e(Gf,QOe),e(A,WOe),e(A,Of),e(Of,Oee),e(Oee,HOe),e(Of,UOe),e(Of,H$),e(H$,JOe),e(Of,YOe),e(A,KOe),e(A,Vf),e(Vf,Vee),e(Vee,ZOe),e(Vf,eVe),e(Vf,U$),e(U$,oVe),e(Vf,rVe),e(A,tVe),e(A,Xf),e(Xf,Xee),e(Xee,aVe),e(Xf,nVe),e(Xf,J$),e(J$,sVe),e(Xf,lVe),e(A,iVe),e(A,zf),e(zf,zee),e(zee,dVe),e(zf,cVe),e(zf,Y$),e(Y$,fVe),e(zf,mVe),e(A,gVe),e(A,Qf),e(Qf,Qee),e(Qee,hVe),e(Qf,pVe),e(Qf,K$),e(K$,uVe),e(Qf,_Ve),e(A,bVe),e(A,Wf),e(Wf,Wee),e(Wee,vVe),e(Wf,FVe),e(Wf,Z$),e(Z$,TVe),e(Wf,MVe),e(A,EVe),e(A,Hf),e(Hf,Hee),e(Hee,CVe),e(Hf,wVe),e(Hf,ek),e(ek,AVe),e(Hf,yVe),e(A,LVe),e(A,Uf),e(Uf,Uee),e(Uee,xVe),e(Uf,$Ve),e(Uf,ok),e(ok,kVe),e(Uf,SVe),e(A,RVe),e(A,Jf),e(Jf,Jee),e(Jee,BVe),e(Jf,PVe),e(Jf,rk),e(rk,IVe),e(Jf,qVe),e(A,NVe),e(A,Yf),e(Yf,Yee),e(Yee,jVe),e(Yf,DVe),e(Yf,tk),e(tk,GVe),e(Yf,OVe),e(A,VVe),e(A,Kf),e(Kf,Kee),e(Kee,XVe),e(Kf,zVe),e(Kf,ak),e(ak,QVe),e(Kf,WVe),e(A,HVe),e(A,Zf),e(Zf,Zee),e(Zee,UVe),e(Zf,JVe),e(Zf,nk),e(nk,YVe),e(Zf,KVe),e(A,ZVe),e(A,em),e(em,eoe),e(eoe,eXe),e(em,oXe),e(em,sk),e(sk,rXe),e(em,tXe),e(A,aXe),e(A,om),e(om,ooe),e(ooe,nXe),e(om,sXe),e(om,lk),e(lk,lXe),e(om,iXe),e(A,dXe),e(A,rm),e(rm,roe),e(roe,cXe),e(rm,fXe),e(rm,ik),e(ik,mXe),e(rm,gXe),e(A,hXe),e(A,tm),e(tm,toe),e(toe,pXe),e(tm,uXe),e(tm,dk),e(dk,_Xe),e(tm,bXe),e(A,vXe),e(A,am),e(am,aoe),e(aoe,FXe),e(am,TXe),e(am,ck),e(ck,MXe),e(am,EXe),e(A,CXe),e(A,nm),e(nm,noe),e(noe,wXe),e(nm,AXe),e(nm,fk),e(fk,yXe),e(nm,LXe),e(A,xXe),e(A,sm),e(sm,soe),e(soe,$Xe),e(sm,kXe),e(sm,mk),e(mk,SXe),e(sm,RXe),e(A,BXe),e(A,lm),e(lm,loe),e(loe,PXe),e(lm,IXe),e(lm,gk),e(gk,qXe),e(lm,NXe),e(A,jXe),e(A,im),e(im,ioe),e(ioe,DXe),e(im,GXe),e(im,hk),e(hk,OXe),e(im,VXe),e(A,XXe),e(A,dm),e(dm,doe),e(doe,zXe),e(dm,QXe),e(dm,pk),e(pk,WXe),e(dm,HXe),e(A,UXe),e(A,cm),e(cm,coe),e(coe,JXe),e(cm,YXe),e(cm,uk),e(uk,KXe),e(cm,ZXe),e(A,eze),e(A,fm),e(fm,foe),e(foe,oze),e(fm,rze),e(fm,_k),e(_k,tze),e(fm,aze),e(A,nze),e(A,mm),e(mm,moe),e(moe,sze),e(mm,lze),e(mm,bk),e(bk,ize),e(mm,dze),e(A,cze),e(A,gm),e(gm,goe),e(goe,fze),e(gm,mze),e(gm,vk),e(vk,gze),e(gm,hze),e(A,pze),e(A,hm),e(hm,hoe),e(hoe,uze),e(hm,_ze),e(hm,Fk),e(Fk,bze),e(hm,vze),e(A,Fze),e(A,pm),e(pm,poe),e(poe,Tze),e(pm,Mze),e(pm,Tk),e(Tk,Eze),e(pm,Cze),e(A,wze),e(A,um),e(um,uoe),e(uoe,Aze),e(um,yze),e(um,Mk),e(Mk,Lze),e(um,xze),e(A,$ze),e(A,_m),e(_m,_oe),e(_oe,kze),e(_m,Sze),e(_m,Ek),e(Ek,Rze),e(_m,Bze),e(A,Pze),e(A,bm),e(bm,boe),e(boe,Ize),e(bm,qze),e(bm,Ck),e(Ck,Nze),e(bm,jze),e(A,Dze),e(A,vm),e(vm,voe),e(voe,Gze),e(vm,Oze),e(vm,wk),e(wk,Vze),e(vm,Xze),e(A,zze),e(A,Fm),e(Fm,Foe),e(Foe,Qze),e(Fm,Wze),e(Fm,Ak),e(Ak,Hze),e(Fm,Uze),e(A,Jze),e(A,Tm),e(Tm,Toe),e(Toe,Yze),e(Tm,Kze),e(Tm,yk),e(yk,Zze),e(Tm,eQe),e(A,oQe),e(A,Mm),e(Mm,Moe),e(Moe,rQe),e(Mm,tQe),e(Mm,Lk),e(Lk,aQe),e(Mm,nQe),e(A,sQe),e(A,Em),e(Em,Eoe),e(Eoe,lQe),e(Em,iQe),e(Em,xk),e(xk,dQe),e(Em,cQe),e(A,fQe),e(A,Cm),e(Cm,Coe),e(Coe,mQe),e(Cm,gQe),e(Cm,$k),e($k,hQe),e(Cm,pQe),e(A,uQe),e(A,wm),e(wm,woe),e(woe,_Qe),e(wm,bQe),e(wm,kk),e(kk,vQe),e(wm,FQe),e(A,TQe),e(A,Am),e(Am,Aoe),e(Aoe,MQe),e(Am,EQe),e(Am,Sk),e(Sk,CQe),e(Am,wQe),e(A,AQe),e(A,ym),e(ym,yoe),e(yoe,yQe),e(ym,LQe),e(ym,Rk),e(Rk,xQe),e(ym,$Qe),e(A,kQe),e(A,Lm),e(Lm,Loe),e(Loe,SQe),e(Lm,RQe),e(Lm,Bk),e(Bk,BQe),e(Lm,PQe),e(A,IQe),e(A,xm),e(xm,xoe),e(xoe,qQe),e(xm,NQe),e(xm,Pk),e(Pk,jQe),e(xm,DQe),e(A,GQe),e(A,$m),e($m,$oe),e($oe,OQe),e($m,VQe),e($m,Ik),e(Ik,XQe),e($m,zQe),e(A,QQe),e(A,km),e(km,koe),e(koe,WQe),e(km,HQe),e(km,qk),e(qk,UQe),e(km,JQe),e(A,YQe),e(A,Sm),e(Sm,Soe),e(Soe,KQe),e(Sm,ZQe),e(Sm,Nk),e(Nk,eWe),e(Sm,oWe),e(A,rWe),e(A,Rm),e(Rm,Roe),e(Roe,tWe),e(Rm,aWe),e(Rm,jk),e(jk,nWe),e(Rm,sWe),e(A,lWe),e(A,Bm),e(Bm,Boe),e(Boe,iWe),e(Bm,dWe),e(Bm,Dk),e(Dk,cWe),e(Bm,fWe),e(A,mWe),e(A,Pm),e(Pm,Poe),e(Poe,gWe),e(Pm,hWe),e(Pm,Gk),e(Gk,pWe),e(Pm,uWe),e(A,_We),e(A,Im),e(Im,Ioe),e(Ioe,bWe),e(Im,vWe),e(Im,Ok),e(Ok,FWe),e(Im,TWe),e(A,MWe),e(A,qm),e(qm,qoe),e(qoe,EWe),e(qm,CWe),e(qm,Vk),e(Vk,wWe),e(qm,AWe),e(A,yWe),e(A,Nm),e(Nm,Noe),e(Noe,LWe),e(Nm,xWe),e(Nm,Xk),e(Xk,$We),e(Nm,kWe),e(A,SWe),e(A,jm),e(jm,joe),e(joe,RWe),e(jm,BWe),e(jm,zk),e(zk,PWe),e(jm,IWe),e(A,qWe),e(A,Dm),e(Dm,Doe),e(Doe,NWe),e(Dm,jWe),e(Dm,Qk),e(Qk,DWe),e(Dm,GWe),e(A,OWe),e(A,Gm),e(Gm,Goe),e(Goe,VWe),e(Gm,XWe),e(Gm,Wk),e(Wk,zWe),e(Gm,QWe),e(A,WWe),e(A,Om),e(Om,Ooe),e(Ooe,HWe),e(Om,UWe),e(Om,Hk),e(Hk,JWe),e(Om,YWe),e(A,KWe),e(A,Vm),e(Vm,Voe),e(Voe,ZWe),e(Vm,eHe),e(Vm,Uk),e(Uk,oHe),e(Vm,rHe),e(A,tHe),e(A,Xm),e(Xm,Xoe),e(Xoe,aHe),e(Xm,nHe),e(Xm,Jk),e(Jk,sHe),e(Xm,lHe),e(A,iHe),e(A,zm),e(zm,zoe),e(zoe,dHe),e(zm,cHe),e(zm,Yk),e(Yk,fHe),e(zm,mHe),e(A,gHe),e(A,Qm),e(Qm,Qoe),e(Qoe,hHe),e(Qm,pHe),e(Qm,Kk),e(Kk,uHe),e(Qm,_He),e(A,bHe),e(A,Wm),e(Wm,Woe),e(Woe,vHe),e(Wm,FHe),e(Wm,Zk),e(Zk,THe),e(Wm,MHe),e(A,EHe),e(A,Hm),e(Hm,Hoe),e(Hoe,CHe),e(Hm,wHe),e(Hm,eS),e(eS,AHe),e(Hm,yHe),e(A,LHe),e(A,Um),e(Um,Uoe),e(Uoe,xHe),e(Um,$He),e(Um,oS),e(oS,kHe),e(Um,SHe),e(A,RHe),e(A,Jm),e(Jm,Joe),e(Joe,BHe),e(Jm,PHe),e(Jm,rS),e(rS,IHe),e(Jm,qHe),e(A,NHe),e(A,Ym),e(Ym,Yoe),e(Yoe,jHe),e(Ym,DHe),e(Ym,tS),e(tS,GHe),e(Ym,OHe),e(A,VHe),e(A,Km),e(Km,Koe),e(Koe,XHe),e(Km,zHe),e(Km,aS),e(aS,QHe),e(Km,WHe),e(A,HHe),e(A,Zm),e(Zm,Zoe),e(Zoe,UHe),e(Zm,JHe),e(Zm,nS),e(nS,YHe),e(Zm,KHe),e(A,ZHe),e(A,eg),e(eg,ere),e(ere,eUe),e(eg,oUe),e(eg,sS),e(sS,rUe),e(eg,tUe),e(A,aUe),e(A,og),e(og,ore),e(ore,nUe),e(og,sUe),e(og,lS),e(lS,lUe),e(og,iUe),e(A,dUe),e(A,rg),e(rg,rre),e(rre,cUe),e(rg,fUe),e(rg,iS),e(iS,mUe),e(rg,gUe),e(A,hUe),e(A,tg),e(tg,tre),e(tre,pUe),e(tg,uUe),e(tg,dS),e(dS,_Ue),e(tg,bUe),e(A,vUe),e(A,ag),e(ag,are),e(are,FUe),e(ag,TUe),e(ag,cS),e(cS,MUe),e(ag,EUe),e(A,CUe),e(A,ng),e(ng,nre),e(nre,wUe),e(ng,AUe),e(ng,fS),e(fS,yUe),e(ng,LUe),e(A,xUe),e(A,sg),e(sg,sre),e(sre,$Ue),e(sg,kUe),e(sg,mS),e(mS,SUe),e(sg,RUe),e(A,BUe),e(A,lg),e(lg,lre),e(lre,PUe),e(lg,IUe),e(lg,gS),e(gS,qUe),e(lg,NUe),e(A,jUe),e(A,ig),e(ig,ire),e(ire,DUe),e(ig,GUe),e(ig,hS),e(hS,OUe),e(ig,VUe),e(A,XUe),e(A,dg),e(dg,dre),e(dre,zUe),e(dg,QUe),e(dg,pS),e(pS,WUe),e(dg,HUe),e(A,UUe),e(A,cg),e(cg,cre),e(cre,JUe),e(cg,YUe),e(cg,uS),e(uS,KUe),e(cg,ZUe),e(A,eJe),e(A,fg),e(fg,fre),e(fre,oJe),e(fg,rJe),e(fg,_S),e(_S,tJe),e(fg,aJe),e(A,nJe),e(A,mg),e(mg,mre),e(mre,sJe),e(mg,lJe),e(mg,bS),e(bS,iJe),e(mg,dJe),e(A,cJe),e(A,gg),e(gg,gre),e(gre,fJe),e(gg,mJe),e(gg,vS),e(vS,gJe),e(gg,hJe),e(A,pJe),e(A,hg),e(hg,hre),e(hre,uJe),e(hg,_Je),e(hg,FS),e(FS,bJe),e(hg,vJe),e(A,FJe),e(A,pg),e(pg,pre),e(pre,TJe),e(pg,MJe),e(pg,TS),e(TS,EJe),e(pg,CJe),e(A,wJe),e(A,ug),e(ug,ure),e(ure,AJe),e(ug,yJe),e(ug,MS),e(MS,LJe),e(ug,xJe),e(Er,$Je),M(_g,Er,null),e(Co,kJe),e(Co,bg),M(iA,bg,null),e(bg,SJe),e(bg,_re),e(_re,RJe),b(f,gIe,_),b(f,bi,_),e(bi,vg),e(vg,bre),M(dA,bre,null),e(bi,BJe),e(bi,vre),e(vre,PJe),b(f,hIe,_),b(f,wo,_),M(cA,wo,null),e(wo,IJe),e(wo,fA),e(fA,qJe),e(fA,ES),e(ES,NJe),e(fA,jJe),e(wo,DJe),e(wo,mA),e(mA,GJe),e(mA,Fre),e(Fre,OJe),e(mA,VJe),e(wo,XJe),e(wo,Cr),M(gA,Cr,null),e(Cr,zJe),e(Cr,Tre),e(Tre,QJe),e(Cr,WJe),e(Cr,Ca),e(Ca,HJe),e(Ca,Mre),e(Mre,UJe),e(Ca,JJe),e(Ca,Ere),e(Ere,YJe),e(Ca,KJe),e(Ca,Cre),e(Cre,ZJe),e(Ca,eYe),e(Cr,oYe),e(Cr,k),e(k,kn),e(kn,wre),e(wre,rYe),e(kn,tYe),e(kn,CS),e(CS,aYe),e(kn,nYe),e(kn,wS),e(wS,sYe),e(kn,lYe),e(k,iYe),e(k,Sn),e(Sn,Are),e(Are,dYe),e(Sn,cYe),e(Sn,AS),e(AS,fYe),e(Sn,mYe),e(Sn,yS),e(yS,gYe),e(Sn,hYe),e(k,pYe),e(k,Rn),e(Rn,yre),e(yre,uYe),e(Rn,_Ye),e(Rn,LS),e(LS,bYe),e(Rn,vYe),e(Rn,xS),e(xS,FYe),e(Rn,TYe),e(k,MYe),e(k,Fg),e(Fg,Lre),e(Lre,EYe),e(Fg,CYe),e(Fg,$S),e($S,wYe),e(Fg,AYe),e(k,yYe),e(k,Bn),e(Bn,xre),e(xre,LYe),e(Bn,xYe),e(Bn,kS),e(kS,$Ye),e(Bn,kYe),e(Bn,SS),e(SS,SYe),e(Bn,RYe),e(k,BYe),e(k,Tg),e(Tg,$re),e($re,PYe),e(Tg,IYe),e(Tg,RS),e(RS,qYe),e(Tg,NYe),e(k,jYe),e(k,Mg),e(Mg,kre),e(kre,DYe),e(Mg,GYe),e(Mg,BS),e(BS,OYe),e(Mg,VYe),e(k,XYe),e(k,Eg),e(Eg,Sre),e(Sre,zYe),e(Eg,QYe),e(Eg,PS),e(PS,WYe),e(Eg,HYe),e(k,UYe),e(k,Pn),e(Pn,Rre),e(Rre,JYe),e(Pn,YYe),e(Pn,IS),e(IS,KYe),e(Pn,ZYe),e(Pn,qS),e(qS,eKe),e(Pn,oKe),e(k,rKe),e(k,In),e(In,Bre),e(Bre,tKe),e(In,aKe),e(In,NS),e(NS,nKe),e(In,sKe),e(In,jS),e(jS,lKe),e(In,iKe),e(k,dKe),e(k,qn),e(qn,Pre),e(Pre,cKe),e(qn,fKe),e(qn,DS),e(DS,mKe),e(qn,gKe),e(qn,GS),e(GS,hKe),e(qn,pKe),e(k,uKe),e(k,Cg),e(Cg,Ire),e(Ire,_Ke),e(Cg,bKe),e(Cg,OS),e(OS,vKe),e(Cg,FKe),e(k,TKe),e(k,wg),e(wg,qre),e(qre,MKe),e(wg,EKe),e(wg,VS),e(VS,CKe),e(wg,wKe),e(k,AKe),e(k,Nn),e(Nn,Nre),e(Nre,yKe),e(Nn,LKe),e(Nn,XS),e(XS,xKe),e(Nn,$Ke),e(Nn,zS),e(zS,kKe),e(Nn,SKe),e(k,RKe),e(k,Ag),e(Ag,jre),e(jre,BKe),e(Ag,PKe),e(Ag,QS),e(QS,IKe),e(Ag,qKe),e(k,NKe),e(k,jn),e(jn,Dre),e(Dre,jKe),e(jn,DKe),e(jn,WS),e(WS,GKe),e(jn,OKe),e(jn,HS),e(HS,VKe),e(jn,XKe),e(k,zKe),e(k,Dn),e(Dn,Gre),e(Gre,QKe),e(Dn,WKe),e(Dn,US),e(US,HKe),e(Dn,UKe),e(Dn,JS),e(JS,JKe),e(Dn,YKe),e(k,KKe),e(k,Gn),e(Gn,Ore),e(Ore,ZKe),e(Gn,eZe),e(Gn,YS),e(YS,oZe),e(Gn,rZe),e(Gn,KS),e(KS,tZe),e(Gn,aZe),e(k,nZe),e(k,yg),e(yg,Vre),e(Vre,sZe),e(yg,lZe),e(yg,ZS),e(ZS,iZe),e(yg,dZe),e(k,cZe),e(k,On),e(On,Xre),e(Xre,fZe),e(On,mZe),e(On,eR),e(eR,gZe),e(On,hZe),e(On,oR),e(oR,pZe),e(On,uZe),e(k,_Ze),e(k,Vn),e(Vn,zre),e(zre,bZe),e(Vn,vZe),e(Vn,rR),e(rR,FZe),e(Vn,TZe),e(Vn,tR),e(tR,MZe),e(Vn,EZe),e(k,CZe),e(k,Xn),e(Xn,Qre),e(Qre,wZe),e(Xn,AZe),e(Xn,aR),e(aR,yZe),e(Xn,LZe),e(Xn,nR),e(nR,xZe),e(Xn,$Ze),e(k,kZe),e(k,zn),e(zn,Wre),e(Wre,SZe),e(zn,RZe),e(zn,sR),e(sR,BZe),e(zn,PZe),e(zn,lR),e(lR,IZe),e(zn,qZe),e(k,NZe),e(k,Qn),e(Qn,Hre),e(Hre,jZe),e(Qn,DZe),e(Qn,iR),e(iR,GZe),e(Qn,OZe),e(Qn,dR),e(dR,VZe),e(Qn,XZe),e(k,zZe),e(k,Wn),e(Wn,Ure),e(Ure,QZe),e(Wn,WZe),e(Wn,cR),e(cR,HZe),e(Wn,UZe),e(Wn,fR),e(fR,JZe),e(Wn,YZe),e(k,KZe),e(k,Lg),e(Lg,Jre),e(Jre,ZZe),e(Lg,eeo),e(Lg,mR),e(mR,oeo),e(Lg,reo),e(k,teo),e(k,Hn),e(Hn,Yre),e(Yre,aeo),e(Hn,neo),e(Hn,gR),e(gR,seo),e(Hn,leo),e(Hn,hR),e(hR,ieo),e(Hn,deo),e(k,ceo),e(k,xg),e(xg,Kre),e(Kre,feo),e(xg,meo),e(xg,pR),e(pR,geo),e(xg,heo),e(k,peo),e(k,Un),e(Un,Zre),e(Zre,ueo),e(Un,_eo),e(Un,uR),e(uR,beo),e(Un,veo),e(Un,_R),e(_R,Feo),e(Un,Teo),e(k,Meo),e(k,Jn),e(Jn,ete),e(ete,Eeo),e(Jn,Ceo),e(Jn,bR),e(bR,weo),e(Jn,Aeo),e(Jn,vR),e(vR,yeo),e(Jn,Leo),e(k,xeo),e(k,Yn),e(Yn,ote),e(ote,$eo),e(Yn,keo),e(Yn,FR),e(FR,Seo),e(Yn,Reo),e(Yn,TR),e(TR,Beo),e(Yn,Peo),e(k,Ieo),e(k,Kn),e(Kn,rte),e(rte,qeo),e(Kn,Neo),e(Kn,MR),e(MR,jeo),e(Kn,Deo),e(Kn,ER),e(ER,Geo),e(Kn,Oeo),e(k,Veo),e(k,Zn),e(Zn,tte),e(tte,Xeo),e(Zn,zeo),e(Zn,CR),e(CR,Qeo),e(Zn,Weo),e(Zn,wR),e(wR,Heo),e(Zn,Ueo),e(k,Jeo),e(k,$g),e($g,ate),e(ate,Yeo),e($g,Keo),e($g,AR),e(AR,Zeo),e($g,eoo),e(k,ooo),e(k,es),e(es,nte),e(nte,roo),e(es,too),e(es,yR),e(yR,aoo),e(es,noo),e(es,LR),e(LR,soo),e(es,loo),e(k,ioo),e(k,os),e(os,ste),e(ste,doo),e(os,coo),e(os,xR),e(xR,foo),e(os,moo),e(os,$R),e($R,goo),e(os,hoo),e(k,poo),e(k,rs),e(rs,lte),e(lte,uoo),e(rs,_oo),e(rs,kR),e(kR,boo),e(rs,voo),e(rs,SR),e(SR,Foo),e(rs,Too),e(k,Moo),e(k,ts),e(ts,ite),e(ite,Eoo),e(ts,Coo),e(ts,RR),e(RR,woo),e(ts,Aoo),e(ts,BR),e(BR,yoo),e(ts,Loo),e(k,xoo),e(k,as),e(as,dte),e(dte,$oo),e(as,koo),e(as,PR),e(PR,Soo),e(as,Roo),e(as,IR),e(IR,Boo),e(as,Poo),e(k,Ioo),e(k,ns),e(ns,cte),e(cte,qoo),e(ns,Noo),e(ns,qR),e(qR,joo),e(ns,Doo),e(ns,NR),e(NR,Goo),e(ns,Ooo),e(k,Voo),e(k,ss),e(ss,fte),e(fte,Xoo),e(ss,zoo),e(ss,jR),e(jR,Qoo),e(ss,Woo),e(ss,DR),e(DR,Hoo),e(ss,Uoo),e(k,Joo),e(k,kg),e(kg,mte),e(mte,Yoo),e(kg,Koo),e(kg,GR),e(GR,Zoo),e(kg,ero),e(k,oro),e(k,ls),e(ls,gte),e(gte,rro),e(ls,tro),e(ls,OR),e(OR,aro),e(ls,nro),e(ls,VR),e(VR,sro),e(ls,lro),e(k,iro),e(k,Sg),e(Sg,hte),e(hte,dro),e(Sg,cro),e(Sg,XR),e(XR,fro),e(Sg,mro),e(k,gro),e(k,Rg),e(Rg,pte),e(pte,hro),e(Rg,pro),e(Rg,zR),e(zR,uro),e(Rg,_ro),e(k,bro),e(k,is),e(is,ute),e(ute,vro),e(is,Fro),e(is,QR),e(QR,Tro),e(is,Mro),e(is,WR),e(WR,Ero),e(is,Cro),e(k,wro),e(k,ds),e(ds,_te),e(_te,Aro),e(ds,yro),e(ds,HR),e(HR,Lro),e(ds,xro),e(ds,UR),e(UR,$ro),e(ds,kro),e(k,Sro),e(k,cs),e(cs,bte),e(bte,Rro),e(cs,Bro),e(cs,JR),e(JR,Pro),e(cs,Iro),e(cs,YR),e(YR,qro),e(cs,Nro),e(k,jro),e(k,Bg),e(Bg,vte),e(vte,Dro),e(Bg,Gro),e(Bg,KR),e(KR,Oro),e(Bg,Vro),e(k,Xro),e(k,fs),e(fs,Fte),e(Fte,zro),e(fs,Qro),e(fs,ZR),e(ZR,Wro),e(fs,Hro),e(fs,eB),e(eB,Uro),e(fs,Jro),e(k,Yro),e(k,ms),e(ms,Tte),e(Tte,Kro),e(ms,Zro),e(ms,oB),e(oB,eto),e(ms,oto),e(ms,rB),e(rB,rto),e(ms,tto),e(k,ato),e(k,gs),e(gs,Mte),e(Mte,nto),e(gs,sto),e(gs,tB),e(tB,lto),e(gs,ito),e(gs,aB),e(aB,dto),e(gs,cto),e(k,fto),e(k,hs),e(hs,Ete),e(Ete,mto),e(hs,gto),e(hs,nB),e(nB,hto),e(hs,pto),e(hs,sB),e(sB,uto),e(hs,_to),e(k,bto),e(k,ps),e(ps,Cte),e(Cte,vto),e(ps,Fto),e(ps,lB),e(lB,Tto),e(ps,Mto),e(ps,iB),e(iB,Eto),e(ps,Cto),e(k,wto),e(k,us),e(us,wte),e(wte,Ato),e(us,yto),e(us,dB),e(dB,Lto),e(us,xto),e(us,cB),e(cB,$to),e(us,kto),e(k,Sto),e(k,Pg),e(Pg,Ate),e(Ate,Rto),e(Pg,Bto),e(Pg,fB),e(fB,Pto),e(Pg,Ito),e(k,qto),e(k,Ig),e(Ig,yte),e(yte,Nto),e(Ig,jto),e(Ig,mB),e(mB,Dto),e(Ig,Gto),e(k,Oto),e(k,qg),e(qg,Lte),e(Lte,Vto),e(qg,Xto),e(qg,gB),e(gB,zto),e(qg,Qto),e(k,Wto),e(k,Ng),e(Ng,xte),e(xte,Hto),e(Ng,Uto),e(Ng,hB),e(hB,Jto),e(Ng,Yto),e(k,Kto),e(k,_s),e(_s,$te),e($te,Zto),e(_s,eao),e(_s,pB),e(pB,oao),e(_s,rao),e(_s,uB),e(uB,tao),e(_s,aao),e(k,nao),e(k,jg),e(jg,kte),e(kte,sao),e(jg,lao),e(jg,_B),e(_B,iao),e(jg,dao),e(k,cao),e(k,bs),e(bs,Ste),e(Ste,fao),e(bs,mao),e(bs,bB),e(bB,gao),e(bs,hao),e(bs,vB),e(vB,pao),e(bs,uao),e(k,_ao),e(k,vs),e(vs,Rte),e(Rte,bao),e(vs,vao),e(vs,FB),e(FB,Fao),e(vs,Tao),e(vs,TB),e(TB,Mao),e(vs,Eao),e(k,Cao),e(k,Fs),e(Fs,Bte),e(Bte,wao),e(Fs,Aao),e(Fs,MB),e(MB,yao),e(Fs,Lao),e(Fs,EB),e(EB,xao),e(Fs,$ao),e(k,kao),e(k,Ts),e(Ts,Pte),e(Pte,Sao),e(Ts,Rao),e(Ts,CB),e(CB,Bao),e(Ts,Pao),e(Ts,wB),e(wB,Iao),e(Ts,qao),e(k,Nao),e(k,Ms),e(Ms,Ite),e(Ite,jao),e(Ms,Dao),e(Ms,AB),e(AB,Gao),e(Ms,Oao),e(Ms,yB),e(yB,Vao),e(Ms,Xao),e(k,zao),e(k,Es),e(Es,qte),e(qte,Qao),e(Es,Wao),e(Es,LB),e(LB,Hao),e(Es,Uao),e(Es,xB),e(xB,Jao),e(Es,Yao),e(k,Kao),e(k,Dg),e(Dg,Nte),e(Nte,Zao),e(Dg,eno),e(Dg,$B),e($B,ono),e(Dg,rno),e(k,tno),e(k,Gg),e(Gg,jte),e(jte,ano),e(Gg,nno),e(Gg,kB),e(kB,sno),e(Gg,lno),e(k,ino),e(k,Cs),e(Cs,Dte),e(Dte,dno),e(Cs,cno),e(Cs,SB),e(SB,fno),e(Cs,mno),e(Cs,RB),e(RB,gno),e(Cs,hno),e(k,pno),e(k,ws),e(ws,Gte),e(Gte,uno),e(ws,_no),e(ws,BB),e(BB,bno),e(ws,vno),e(ws,PB),e(PB,Fno),e(ws,Tno),e(k,Mno),e(k,As),e(As,Ote),e(Ote,Eno),e(As,Cno),e(As,IB),e(IB,wno),e(As,Ano),e(As,qB),e(qB,yno),e(As,Lno),e(k,xno),e(k,Og),e(Og,Vte),e(Vte,$no),e(Og,kno),e(Og,NB),e(NB,Sno),e(Og,Rno),e(k,Bno),e(k,Vg),e(Vg,Xte),e(Xte,Pno),e(Vg,Ino),e(Vg,jB),e(jB,qno),e(Vg,Nno),e(k,jno),e(k,Xg),e(Xg,zte),e(zte,Dno),e(Xg,Gno),e(Xg,DB),e(DB,Ono),e(Xg,Vno),e(k,Xno),e(k,ys),e(ys,Qte),e(Qte,zno),e(ys,Qno),e(ys,GB),e(GB,Wno),e(ys,Hno),e(ys,OB),e(OB,Uno),e(ys,Jno),e(k,Yno),e(k,zg),e(zg,Wte),e(Wte,Kno),e(zg,Zno),e(zg,VB),e(VB,eso),e(zg,oso),e(k,rso),e(k,Qg),e(Qg,Hte),e(Hte,tso),e(Qg,aso),e(Qg,XB),e(XB,nso),e(Qg,sso),e(k,lso),e(k,Ls),e(Ls,Ute),e(Ute,iso),e(Ls,dso),e(Ls,zB),e(zB,cso),e(Ls,fso),e(Ls,QB),e(QB,mso),e(Ls,gso),e(k,hso),e(k,Wg),e(Wg,Jte),e(Jte,pso),e(Wg,uso),e(Wg,WB),e(WB,_so),e(Wg,bso),e(k,vso),e(k,Hg),e(Hg,Yte),e(Yte,Fso),e(Hg,Tso),e(Hg,HB),e(HB,Mso),e(Hg,Eso),e(k,Cso),e(k,xs),e(xs,Kte),e(Kte,wso),e(xs,Aso),e(xs,UB),e(UB,yso),e(xs,Lso),e(xs,JB),e(JB,xso),e(xs,$so),e(k,kso),e(k,$s),e($s,Zte),e(Zte,Sso),e($s,Rso),e($s,YB),e(YB,Bso),e($s,Pso),e($s,KB),e(KB,Iso),e($s,qso),e(k,Nso),e(k,ks),e(ks,eae),e(eae,jso),e(ks,Dso),e(ks,ZB),e(ZB,Gso),e(ks,Oso),e(ks,eP),e(eP,Vso),e(ks,Xso),e(k,zso),e(k,Ss),e(Ss,oae),e(oae,Qso),e(Ss,Wso),e(Ss,oP),e(oP,Hso),e(Ss,Uso),e(Ss,rP),e(rP,Jso),e(Ss,Yso),e(Cr,Kso),M(Ug,Cr,null),e(wo,Zso),e(wo,Jg),M(hA,Jg,null),e(Jg,elo),e(Jg,rae),e(rae,olo),b(f,pIe,_),b(f,vi,_),e(vi,Yg),e(Yg,tae),M(pA,tae,null),e(vi,rlo),e(vi,aae),e(aae,tlo),b(f,uIe,_),b(f,Ao,_),M(uA,Ao,null),e(Ao,alo),e(Ao,_A),e(_A,nlo),e(_A,tP),e(tP,slo),e(_A,llo),e(Ao,ilo),e(Ao,bA),e(bA,dlo),e(bA,nae),e(nae,clo),e(bA,flo),e(Ao,mlo),e(Ao,Qe),M(vA,Qe,null),e(Qe,glo),e(Qe,sae),e(sae,hlo),e(Qe,plo),e(Qe,wa),e(wa,ulo),e(wa,lae),e(lae,_lo),e(wa,blo),e(wa,iae),e(iae,vlo),e(wa,Flo),e(wa,dae),e(dae,Tlo),e(wa,Mlo),e(Qe,Elo),e(Qe,Z),e(Z,Kg),e(Kg,cae),e(cae,Clo),e(Kg,wlo),e(Kg,aP),e(aP,Alo),e(Kg,ylo),e(Z,Llo),e(Z,Zg),e(Zg,fae),e(fae,xlo),e(Zg,$lo),e(Zg,nP),e(nP,klo),e(Zg,Slo),e(Z,Rlo),e(Z,eh),e(eh,mae),e(mae,Blo),e(eh,Plo),e(eh,sP),e(sP,Ilo),e(eh,qlo),e(Z,Nlo),e(Z,oh),e(oh,gae),e(gae,jlo),e(oh,Dlo),e(oh,lP),e(lP,Glo),e(oh,Olo),e(Z,Vlo),e(Z,rh),e(rh,hae),e(hae,Xlo),e(rh,zlo),e(rh,iP),e(iP,Qlo),e(rh,Wlo),e(Z,Hlo),e(Z,th),e(th,pae),e(pae,Ulo),e(th,Jlo),e(th,dP),e(dP,Ylo),e(th,Klo),e(Z,Zlo),e(Z,ah),e(ah,uae),e(uae,eio),e(ah,oio),e(ah,cP),e(cP,rio),e(ah,tio),e(Z,aio),e(Z,nh),e(nh,_ae),e(_ae,nio),e(nh,sio),e(nh,fP),e(fP,lio),e(nh,iio),e(Z,dio),e(Z,sh),e(sh,bae),e(bae,cio),e(sh,fio),e(sh,mP),e(mP,mio),e(sh,gio),e(Z,hio),e(Z,lh),e(lh,vae),e(vae,pio),e(lh,uio),e(lh,gP),e(gP,_io),e(lh,bio),e(Z,vio),e(Z,ih),e(ih,Fae),e(Fae,Fio),e(ih,Tio),e(ih,hP),e(hP,Mio),e(ih,Eio),e(Z,Cio),e(Z,dh),e(dh,Tae),e(Tae,wio),e(dh,Aio),e(dh,pP),e(pP,yio),e(dh,Lio),e(Z,xio),e(Z,ch),e(ch,Mae),e(Mae,$io),e(ch,kio),e(ch,uP),e(uP,Sio),e(ch,Rio),e(Z,Bio),e(Z,fh),e(fh,Eae),e(Eae,Pio),e(fh,Iio),e(fh,_P),e(_P,qio),e(fh,Nio),e(Z,jio),e(Z,mh),e(mh,Cae),e(Cae,Dio),e(mh,Gio),e(mh,bP),e(bP,Oio),e(mh,Vio),e(Z,Xio),e(Z,gh),e(gh,wae),e(wae,zio),e(gh,Qio),e(gh,vP),e(vP,Wio),e(gh,Hio),e(Z,Uio),e(Z,hh),e(hh,Aae),e(Aae,Jio),e(hh,Yio),e(hh,FP),e(FP,Kio),e(hh,Zio),e(Z,edo),e(Z,ph),e(ph,yae),e(yae,odo),e(ph,rdo),e(ph,TP),e(TP,tdo),e(ph,ado),e(Z,ndo),e(Z,uh),e(uh,Lae),e(Lae,sdo),e(uh,ldo),e(uh,MP),e(MP,ido),e(uh,ddo),e(Z,cdo),e(Z,_h),e(_h,xae),e(xae,fdo),e(_h,mdo),e(_h,EP),e(EP,gdo),e(_h,hdo),e(Z,pdo),e(Z,bh),e(bh,$ae),e($ae,udo),e(bh,_do),e(bh,CP),e(CP,bdo),e(bh,vdo),e(Z,Fdo),e(Z,vh),e(vh,kae),e(kae,Tdo),e(vh,Mdo),e(vh,wP),e(wP,Edo),e(vh,Cdo),e(Z,wdo),e(Z,Fh),e(Fh,Sae),e(Sae,Ado),e(Fh,ydo),e(Fh,AP),e(AP,Ldo),e(Fh,xdo),e(Z,$do),e(Z,Th),e(Th,Rae),e(Rae,kdo),e(Th,Sdo),e(Th,yP),e(yP,Rdo),e(Th,Bdo),e(Z,Pdo),e(Z,Mh),e(Mh,Bae),e(Bae,Ido),e(Mh,qdo),e(Mh,LP),e(LP,Ndo),e(Mh,jdo),e(Z,Ddo),e(Z,Eh),e(Eh,Pae),e(Pae,Gdo),e(Eh,Odo),e(Eh,xP),e(xP,Vdo),e(Eh,Xdo),e(Qe,zdo),M(Ch,Qe,null),e(Qe,Qdo),M(wh,Qe,null),e(Ao,Wdo),e(Ao,Ah),M(FA,Ah,null),e(Ah,Hdo),e(Ah,Iae),e(Iae,Udo),b(f,_Ie,_),b(f,Fi,_),e(Fi,yh),e(yh,qae),M(TA,qae,null),e(Fi,Jdo),e(Fi,Nae),e(Nae,Ydo),b(f,bIe,_),b(f,yo,_),M(MA,yo,null),e(yo,Kdo),e(yo,EA),e(EA,Zdo),e(EA,$P),e($P,eco),e(EA,oco),e(yo,rco),e(yo,CA),e(CA,tco),e(CA,jae),e(jae,aco),e(CA,nco),e(yo,sco),e(yo,We),M(wA,We,null),e(We,lco),e(We,Dae),e(Dae,ico),e(We,dco),e(We,Ti),e(Ti,cco),e(Ti,Gae),e(Gae,fco),e(Ti,mco),e(Ti,Oae),e(Oae,gco),e(Ti,hco),e(We,pco),e(We,ue),e(ue,Lh),e(Lh,Vae),e(Vae,uco),e(Lh,_co),e(Lh,kP),e(kP,bco),e(Lh,vco),e(ue,Fco),e(ue,xh),e(xh,Xae),e(Xae,Tco),e(xh,Mco),e(xh,zae),e(zae,Eco),e(xh,Cco),e(ue,wco),e(ue,$h),e($h,Qae),e(Qae,Aco),e($h,yco),e($h,SP),e(SP,Lco),e($h,xco),e(ue,$co),e(ue,kh),e(kh,Wae),e(Wae,kco),e(kh,Sco),e(kh,RP),e(RP,Rco),e(kh,Bco),e(ue,Pco),e(ue,Sh),e(Sh,Hae),e(Hae,Ico),e(Sh,qco),e(Sh,BP),e(BP,Nco),e(Sh,jco),e(ue,Dco),e(ue,Rh),e(Rh,Uae),e(Uae,Gco),e(Rh,Oco),e(Rh,PP),e(PP,Vco),e(Rh,Xco),e(ue,zco),e(ue,Bh),e(Bh,Jae),e(Jae,Qco),e(Bh,Wco),e(Bh,IP),e(IP,Hco),e(Bh,Uco),e(ue,Jco),e(ue,Ph),e(Ph,Yae),e(Yae,Yco),e(Ph,Kco),e(Ph,qP),e(qP,Zco),e(Ph,efo),e(ue,ofo),e(ue,Ih),e(Ih,Kae),e(Kae,rfo),e(Ih,tfo),e(Ih,NP),e(NP,afo),e(Ih,nfo),e(ue,sfo),e(ue,qh),e(qh,Zae),e(Zae,lfo),e(qh,ifo),e(qh,jP),e(jP,dfo),e(qh,cfo),e(ue,ffo),e(ue,Nh),e(Nh,ene),e(ene,mfo),e(Nh,gfo),e(Nh,DP),e(DP,hfo),e(Nh,pfo),e(ue,ufo),e(ue,jh),e(jh,one),e(one,_fo),e(jh,bfo),e(jh,GP),e(GP,vfo),e(jh,Ffo),e(ue,Tfo),e(ue,Dh),e(Dh,rne),e(rne,Mfo),e(Dh,Efo),e(Dh,OP),e(OP,Cfo),e(Dh,wfo),e(ue,Afo),e(ue,Gh),e(Gh,tne),e(tne,yfo),e(Gh,Lfo),e(Gh,VP),e(VP,xfo),e(Gh,$fo),e(ue,kfo),e(ue,Oh),e(Oh,ane),e(ane,Sfo),e(Oh,Rfo),e(Oh,XP),e(XP,Bfo),e(Oh,Pfo),e(ue,Ifo),e(ue,Vh),e(Vh,nne),e(nne,qfo),e(Vh,Nfo),e(Vh,zP),e(zP,jfo),e(Vh,Dfo),e(We,Gfo),M(Xh,We,null),e(We,Ofo),M(zh,We,null),e(yo,Vfo),e(yo,Qh),M(AA,Qh,null),e(Qh,Xfo),e(Qh,sne),e(sne,zfo),b(f,vIe,_),b(f,Mi,_),e(Mi,Wh),e(Wh,lne),M(yA,lne,null),e(Mi,Qfo),e(Mi,ine),e(ine,Wfo),b(f,FIe,_),b(f,Lo,_),M(LA,Lo,null),e(Lo,Hfo),e(Lo,Ei),e(Ei,Ufo),e(Ei,QP),e(QP,Jfo),e(Ei,Yfo),e(Ei,WP),e(WP,Kfo),e(Ei,Zfo),e(Lo,emo),e(Lo,xA),e(xA,omo),e(xA,dne),e(dne,rmo),e(xA,tmo),e(Lo,amo),e(Lo,ot),M($A,ot,null),e(ot,nmo),e(ot,cne),e(cne,smo),e(ot,lmo),e(ot,Ci),e(Ci,imo),e(Ci,fne),e(fne,dmo),e(Ci,cmo),e(Ci,HP),e(HP,fmo),e(Ci,mmo),e(ot,gmo),M(Hh,ot,null),e(Lo,hmo),e(Lo,He),M(kA,He,null),e(He,pmo),e(He,mne),e(mne,umo),e(He,_mo),e(He,Aa),e(Aa,bmo),e(Aa,gne),e(gne,vmo),e(Aa,Fmo),e(Aa,hne),e(hne,Tmo),e(Aa,Mmo),e(Aa,pne),e(pne,Emo),e(Aa,Cmo),e(He,wmo),e(He,x),e(x,Uh),e(Uh,une),e(une,Amo),e(Uh,ymo),e(Uh,UP),e(UP,Lmo),e(Uh,xmo),e(x,$mo),e(x,Jh),e(Jh,_ne),e(_ne,kmo),e(Jh,Smo),e(Jh,JP),e(JP,Rmo),e(Jh,Bmo),e(x,Pmo),e(x,Yh),e(Yh,bne),e(bne,Imo),e(Yh,qmo),e(Yh,YP),e(YP,Nmo),e(Yh,jmo),e(x,Dmo),e(x,Kh),e(Kh,vne),e(vne,Gmo),e(Kh,Omo),e(Kh,KP),e(KP,Vmo),e(Kh,Xmo),e(x,zmo),e(x,Zh),e(Zh,Fne),e(Fne,Qmo),e(Zh,Wmo),e(Zh,ZP),e(ZP,Hmo),e(Zh,Umo),e(x,Jmo),e(x,ep),e(ep,Tne),e(Tne,Ymo),e(ep,Kmo),e(ep,eI),e(eI,Zmo),e(ep,ego),e(x,ogo),e(x,op),e(op,Mne),e(Mne,rgo),e(op,tgo),e(op,oI),e(oI,ago),e(op,ngo),e(x,sgo),e(x,rp),e(rp,Ene),e(Ene,lgo),e(rp,igo),e(rp,rI),e(rI,dgo),e(rp,cgo),e(x,fgo),e(x,tp),e(tp,Cne),e(Cne,mgo),e(tp,ggo),e(tp,tI),e(tI,hgo),e(tp,pgo),e(x,ugo),e(x,ap),e(ap,wne),e(wne,_go),e(ap,bgo),e(ap,aI),e(aI,vgo),e(ap,Fgo),e(x,Tgo),e(x,np),e(np,Ane),e(Ane,Mgo),e(np,Ego),e(np,nI),e(nI,Cgo),e(np,wgo),e(x,Ago),e(x,sp),e(sp,yne),e(yne,ygo),e(sp,Lgo),e(sp,sI),e(sI,xgo),e(sp,$go),e(x,kgo),e(x,lp),e(lp,Lne),e(Lne,Sgo),e(lp,Rgo),e(lp,lI),e(lI,Bgo),e(lp,Pgo),e(x,Igo),e(x,ip),e(ip,xne),e(xne,qgo),e(ip,Ngo),e(ip,iI),e(iI,jgo),e(ip,Dgo),e(x,Ggo),e(x,dp),e(dp,$ne),e($ne,Ogo),e(dp,Vgo),e(dp,dI),e(dI,Xgo),e(dp,zgo),e(x,Qgo),e(x,cp),e(cp,kne),e(kne,Wgo),e(cp,Hgo),e(cp,cI),e(cI,Ugo),e(cp,Jgo),e(x,Ygo),e(x,fp),e(fp,Sne),e(Sne,Kgo),e(fp,Zgo),e(fp,fI),e(fI,eho),e(fp,oho),e(x,rho),e(x,mp),e(mp,Rne),e(Rne,tho),e(mp,aho),e(mp,mI),e(mI,nho),e(mp,sho),e(x,lho),e(x,gp),e(gp,Bne),e(Bne,iho),e(gp,dho),e(gp,gI),e(gI,cho),e(gp,fho),e(x,mho),e(x,hp),e(hp,Pne),e(Pne,gho),e(hp,hho),e(hp,hI),e(hI,pho),e(hp,uho),e(x,_ho),e(x,pp),e(pp,Ine),e(Ine,bho),e(pp,vho),e(pp,pI),e(pI,Fho),e(pp,Tho),e(x,Mho),e(x,up),e(up,qne),e(qne,Eho),e(up,Cho),e(up,uI),e(uI,who),e(up,Aho),e(x,yho),e(x,_p),e(_p,Nne),e(Nne,Lho),e(_p,xho),e(_p,_I),e(_I,$ho),e(_p,kho),e(x,Sho),e(x,bp),e(bp,jne),e(jne,Rho),e(bp,Bho),e(bp,bI),e(bI,Pho),e(bp,Iho),e(x,qho),e(x,vp),e(vp,Dne),e(Dne,Nho),e(vp,jho),e(vp,vI),e(vI,Dho),e(vp,Gho),e(x,Oho),e(x,Fp),e(Fp,Gne),e(Gne,Vho),e(Fp,Xho),e(Fp,FI),e(FI,zho),e(Fp,Qho),e(x,Who),e(x,Tp),e(Tp,One),e(One,Hho),e(Tp,Uho),e(Tp,TI),e(TI,Jho),e(Tp,Yho),e(x,Kho),e(x,Mp),e(Mp,Vne),e(Vne,Zho),e(Mp,epo),e(Mp,MI),e(MI,opo),e(Mp,rpo),e(x,tpo),e(x,Ep),e(Ep,Xne),e(Xne,apo),e(Ep,npo),e(Ep,EI),e(EI,spo),e(Ep,lpo),e(x,ipo),e(x,Cp),e(Cp,zne),e(zne,dpo),e(Cp,cpo),e(Cp,CI),e(CI,fpo),e(Cp,mpo),e(x,gpo),e(x,wp),e(wp,Qne),e(Qne,hpo),e(wp,ppo),e(wp,wI),e(wI,upo),e(wp,_po),e(x,bpo),e(x,Rs),e(Rs,Wne),e(Wne,vpo),e(Rs,Fpo),e(Rs,AI),e(AI,Tpo),e(Rs,Mpo),e(Rs,yI),e(yI,Epo),e(Rs,Cpo),e(x,wpo),e(x,Ap),e(Ap,Hne),e(Hne,Apo),e(Ap,ypo),e(Ap,LI),e(LI,Lpo),e(Ap,xpo),e(x,$po),e(x,yp),e(yp,Une),e(Une,kpo),e(yp,Spo),e(yp,xI),e(xI,Rpo),e(yp,Bpo),e(x,Ppo),e(x,Lp),e(Lp,Jne),e(Jne,Ipo),e(Lp,qpo),e(Lp,$I),e($I,Npo),e(Lp,jpo),e(x,Dpo),e(x,xp),e(xp,Yne),e(Yne,Gpo),e(xp,Opo),e(xp,kI),e(kI,Vpo),e(xp,Xpo),e(x,zpo),e(x,$p),e($p,Kne),e(Kne,Qpo),e($p,Wpo),e($p,SI),e(SI,Hpo),e($p,Upo),e(x,Jpo),e(x,kp),e(kp,Zne),e(Zne,Ypo),e(kp,Kpo),e(kp,RI),e(RI,Zpo),e(kp,euo),e(x,ouo),e(x,Sp),e(Sp,ese),e(ese,ruo),e(Sp,tuo),e(Sp,BI),e(BI,auo),e(Sp,nuo),e(x,suo),e(x,Rp),e(Rp,ose),e(ose,luo),e(Rp,iuo),e(Rp,PI),e(PI,duo),e(Rp,cuo),e(x,fuo),e(x,Bp),e(Bp,rse),e(rse,muo),e(Bp,guo),e(Bp,II),e(II,huo),e(Bp,puo),e(x,uuo),e(x,Pp),e(Pp,tse),e(tse,_uo),e(Pp,buo),e(Pp,qI),e(qI,vuo),e(Pp,Fuo),e(x,Tuo),e(x,Ip),e(Ip,ase),e(ase,Muo),e(Ip,Euo),e(Ip,NI),e(NI,Cuo),e(Ip,wuo),e(x,Auo),e(x,qp),e(qp,nse),e(nse,yuo),e(qp,Luo),e(qp,jI),e(jI,xuo),e(qp,$uo),e(x,kuo),e(x,Np),e(Np,sse),e(sse,Suo),e(Np,Ruo),e(Np,DI),e(DI,Buo),e(Np,Puo),e(x,Iuo),e(x,jp),e(jp,lse),e(lse,quo),e(jp,Nuo),e(jp,GI),e(GI,juo),e(jp,Duo),e(x,Guo),e(x,Dp),e(Dp,ise),e(ise,Ouo),e(Dp,Vuo),e(Dp,OI),e(OI,Xuo),e(Dp,zuo),e(x,Quo),e(x,Gp),e(Gp,dse),e(dse,Wuo),e(Gp,Huo),e(Gp,VI),e(VI,Uuo),e(Gp,Juo),e(x,Yuo),e(x,Op),e(Op,cse),e(cse,Kuo),e(Op,Zuo),e(Op,XI),e(XI,e_o),e(Op,o_o),e(x,r_o),e(x,Vp),e(Vp,fse),e(fse,t_o),e(Vp,a_o),e(Vp,zI),e(zI,n_o),e(Vp,s_o),e(x,l_o),e(x,Xp),e(Xp,mse),e(mse,i_o),e(Xp,d_o),e(Xp,QI),e(QI,c_o),e(Xp,f_o),e(x,m_o),e(x,zp),e(zp,gse),e(gse,g_o),e(zp,h_o),e(zp,WI),e(WI,p_o),e(zp,u_o),e(x,__o),e(x,Qp),e(Qp,hse),e(hse,b_o),e(Qp,v_o),e(Qp,HI),e(HI,F_o),e(Qp,T_o),e(x,M_o),e(x,Wp),e(Wp,pse),e(pse,E_o),e(Wp,C_o),e(Wp,UI),e(UI,w_o),e(Wp,A_o),e(x,y_o),e(x,Hp),e(Hp,use),e(use,L_o),e(Hp,x_o),e(Hp,JI),e(JI,$_o),e(Hp,k_o),e(x,S_o),e(x,Up),e(Up,_se),e(_se,R_o),e(Up,B_o),e(Up,YI),e(YI,P_o),e(Up,I_o),e(x,q_o),e(x,Jp),e(Jp,bse),e(bse,N_o),e(Jp,j_o),e(Jp,KI),e(KI,D_o),e(Jp,G_o),e(x,O_o),e(x,Yp),e(Yp,vse),e(vse,V_o),e(Yp,X_o),e(Yp,ZI),e(ZI,z_o),e(Yp,Q_o),e(x,W_o),e(x,Kp),e(Kp,Fse),e(Fse,H_o),e(Kp,U_o),e(Kp,eq),e(eq,J_o),e(Kp,Y_o),e(x,K_o),e(x,Zp),e(Zp,Tse),e(Tse,Z_o),e(Zp,e0o),e(Zp,oq),e(oq,o0o),e(Zp,r0o),e(x,t0o),e(x,eu),e(eu,Mse),e(Mse,a0o),e(eu,n0o),e(eu,rq),e(rq,s0o),e(eu,l0o),e(x,i0o),e(x,ou),e(ou,Ese),e(Ese,d0o),e(ou,c0o),e(ou,tq),e(tq,f0o),e(ou,m0o),e(x,g0o),e(x,ru),e(ru,Cse),e(Cse,h0o),e(ru,p0o),e(ru,aq),e(aq,u0o),e(ru,_0o),e(x,b0o),e(x,tu),e(tu,wse),e(wse,v0o),e(tu,F0o),e(tu,nq),e(nq,T0o),e(tu,M0o),e(x,E0o),e(x,au),e(au,Ase),e(Ase,C0o),e(au,w0o),e(au,sq),e(sq,A0o),e(au,y0o),e(x,L0o),e(x,nu),e(nu,yse),e(yse,x0o),e(nu,$0o),e(nu,lq),e(lq,k0o),e(nu,S0o),e(x,R0o),e(x,su),e(su,Lse),e(Lse,B0o),e(su,P0o),e(su,iq),e(iq,I0o),e(su,q0o),e(x,N0o),e(x,lu),e(lu,xse),e(xse,j0o),e(lu,D0o),e(lu,dq),e(dq,G0o),e(lu,O0o),e(x,V0o),e(x,iu),e(iu,$se),e($se,X0o),e(iu,z0o),e(iu,cq),e(cq,Q0o),e(iu,W0o),e(x,H0o),e(x,du),e(du,kse),e(kse,U0o),e(du,J0o),e(du,fq),e(fq,Y0o),e(du,K0o),e(x,Z0o),e(x,cu),e(cu,Sse),e(Sse,e1o),e(cu,o1o),e(cu,mq),e(mq,r1o),e(cu,t1o),e(x,a1o),e(x,fu),e(fu,Rse),e(Rse,n1o),e(fu,s1o),e(fu,gq),e(gq,l1o),e(fu,i1o),e(x,d1o),e(x,mu),e(mu,Bse),e(Bse,c1o),e(mu,f1o),e(mu,hq),e(hq,m1o),e(mu,g1o),e(x,h1o),e(x,gu),e(gu,Pse),e(Pse,p1o),e(gu,u1o),e(gu,pq),e(pq,_1o),e(gu,b1o),e(x,v1o),e(x,hu),e(hu,Ise),e(Ise,F1o),e(hu,T1o),e(hu,uq),e(uq,M1o),e(hu,E1o),e(x,C1o),e(x,pu),e(pu,qse),e(qse,w1o),e(pu,A1o),e(pu,_q),e(_q,y1o),e(pu,L1o),e(x,x1o),e(x,uu),e(uu,Nse),e(Nse,$1o),e(uu,k1o),e(uu,bq),e(bq,S1o),e(uu,R1o),e(x,B1o),e(x,_u),e(_u,jse),e(jse,P1o),e(_u,I1o),e(_u,vq),e(vq,q1o),e(_u,N1o),e(x,j1o),e(x,bu),e(bu,Dse),e(Dse,D1o),e(bu,G1o),e(bu,Fq),e(Fq,O1o),e(bu,V1o),e(x,X1o),e(x,vu),e(vu,Gse),e(Gse,z1o),e(vu,Q1o),e(vu,Tq),e(Tq,W1o),e(vu,H1o),e(x,U1o),e(x,Fu),e(Fu,Ose),e(Ose,J1o),e(Fu,Y1o),e(Fu,Mq),e(Mq,K1o),e(Fu,Z1o),e(x,ebo),e(x,Tu),e(Tu,Vse),e(Vse,obo),e(Tu,rbo),e(Tu,Eq),e(Eq,tbo),e(Tu,abo),e(x,nbo),e(x,Mu),e(Mu,Xse),e(Xse,sbo),e(Mu,lbo),e(Mu,Cq),e(Cq,ibo),e(Mu,dbo),e(x,cbo),e(x,Eu),e(Eu,zse),e(zse,fbo),e(Eu,mbo),e(Eu,wq),e(wq,gbo),e(Eu,hbo),e(x,pbo),e(x,Cu),e(Cu,Qse),e(Qse,ubo),e(Cu,_bo),e(Cu,Aq),e(Aq,bbo),e(Cu,vbo),e(x,Fbo),e(x,wu),e(wu,Wse),e(Wse,Tbo),e(wu,Mbo),e(wu,yq),e(yq,Ebo),e(wu,Cbo),e(x,wbo),e(x,Au),e(Au,Hse),e(Hse,Abo),e(Au,ybo),e(Au,Lq),e(Lq,Lbo),e(Au,xbo),e(x,$bo),e(x,yu),e(yu,Use),e(Use,kbo),e(yu,Sbo),e(yu,xq),e(xq,Rbo),e(yu,Bbo),e(x,Pbo),e(x,Lu),e(Lu,Jse),e(Jse,Ibo),e(Lu,qbo),e(Lu,$q),e($q,Nbo),e(Lu,jbo),e(x,Dbo),e(x,xu),e(xu,Yse),e(Yse,Gbo),e(xu,Obo),e(xu,kq),e(kq,Vbo),e(xu,Xbo),e(x,zbo),e(x,$u),e($u,Kse),e(Kse,Qbo),e($u,Wbo),e($u,Sq),e(Sq,Hbo),e($u,Ubo),e(x,Jbo),e(x,ku),e(ku,Zse),e(Zse,Ybo),e(ku,Kbo),e(ku,Rq),e(Rq,Zbo),e(ku,e2o),e(x,o2o),e(x,Su),e(Su,ele),e(ele,r2o),e(Su,t2o),e(Su,Bq),e(Bq,a2o),e(Su,n2o),e(x,s2o),e(x,Ru),e(Ru,ole),e(ole,l2o),e(Ru,i2o),e(Ru,Pq),e(Pq,d2o),e(Ru,c2o),e(x,f2o),e(x,Bu),e(Bu,rle),e(rle,m2o),e(Bu,g2o),e(Bu,Iq),e(Iq,h2o),e(Bu,p2o),e(x,u2o),e(x,Pu),e(Pu,tle),e(tle,_2o),e(Pu,b2o),e(Pu,qq),e(qq,v2o),e(Pu,F2o),e(x,T2o),e(x,Iu),e(Iu,ale),e(ale,M2o),e(Iu,E2o),e(Iu,Nq),e(Nq,C2o),e(Iu,w2o),e(He,A2o),e(He,qu),e(qu,y2o),e(qu,nle),e(nle,L2o),e(qu,x2o),e(qu,sle),e(sle,$2o),e(He,k2o),M(Nu,He,null),b(f,TIe,_),b(f,wi,_),e(wi,ju),e(ju,lle),M(SA,lle,null),e(wi,S2o),e(wi,ile),e(ile,R2o),b(f,MIe,_),b(f,xo,_),M(RA,xo,null),e(xo,B2o),e(xo,Ai),e(Ai,P2o),e(Ai,jq),e(jq,I2o),e(Ai,q2o),e(Ai,Dq),e(Dq,N2o),e(Ai,j2o),e(xo,D2o),e(xo,BA),e(BA,G2o),e(BA,dle),e(dle,O2o),e(BA,V2o),e(xo,X2o),e(xo,rt),M(PA,rt,null),e(rt,z2o),e(rt,cle),e(cle,Q2o),e(rt,W2o),e(rt,yi),e(yi,H2o),e(yi,fle),e(fle,U2o),e(yi,J2o),e(yi,Gq),e(Gq,Y2o),e(yi,K2o),e(rt,Z2o),M(Du,rt,null),e(xo,evo),e(xo,Ue),M(IA,Ue,null),e(Ue,ovo),e(Ue,mle),e(mle,rvo),e(Ue,tvo),e(Ue,ya),e(ya,avo),e(ya,gle),e(gle,nvo),e(ya,svo),e(ya,hle),e(hle,lvo),e(ya,ivo),e(ya,ple),e(ple,dvo),e(ya,cvo),e(Ue,fvo),e(Ue,G),e(G,Gu),e(Gu,ule),e(ule,mvo),e(Gu,gvo),e(Gu,Oq),e(Oq,hvo),e(Gu,pvo),e(G,uvo),e(G,Ou),e(Ou,_le),e(_le,_vo),e(Ou,bvo),e(Ou,Vq),e(Vq,vvo),e(Ou,Fvo),e(G,Tvo),e(G,Vu),e(Vu,ble),e(ble,Mvo),e(Vu,Evo),e(Vu,Xq),e(Xq,Cvo),e(Vu,wvo),e(G,Avo),e(G,Xu),e(Xu,vle),e(vle,yvo),e(Xu,Lvo),e(Xu,zq),e(zq,xvo),e(Xu,$vo),e(G,kvo),e(G,zu),e(zu,Fle),e(Fle,Svo),e(zu,Rvo),e(zu,Qq),e(Qq,Bvo),e(zu,Pvo),e(G,Ivo),e(G,Qu),e(Qu,Tle),e(Tle,qvo),e(Qu,Nvo),e(Qu,Wq),e(Wq,jvo),e(Qu,Dvo),e(G,Gvo),e(G,Wu),e(Wu,Mle),e(Mle,Ovo),e(Wu,Vvo),e(Wu,Hq),e(Hq,Xvo),e(Wu,zvo),e(G,Qvo),e(G,Hu),e(Hu,Ele),e(Ele,Wvo),e(Hu,Hvo),e(Hu,Uq),e(Uq,Uvo),e(Hu,Jvo),e(G,Yvo),e(G,Uu),e(Uu,Cle),e(Cle,Kvo),e(Uu,Zvo),e(Uu,Jq),e(Jq,eFo),e(Uu,oFo),e(G,rFo),e(G,Ju),e(Ju,wle),e(wle,tFo),e(Ju,aFo),e(Ju,Yq),e(Yq,nFo),e(Ju,sFo),e(G,lFo),e(G,Yu),e(Yu,Ale),e(Ale,iFo),e(Yu,dFo),e(Yu,Kq),e(Kq,cFo),e(Yu,fFo),e(G,mFo),e(G,Ku),e(Ku,yle),e(yle,gFo),e(Ku,hFo),e(Ku,Zq),e(Zq,pFo),e(Ku,uFo),e(G,_Fo),e(G,Zu),e(Zu,Lle),e(Lle,bFo),e(Zu,vFo),e(Zu,eN),e(eN,FFo),e(Zu,TFo),e(G,MFo),e(G,e_),e(e_,xle),e(xle,EFo),e(e_,CFo),e(e_,oN),e(oN,wFo),e(e_,AFo),e(G,yFo),e(G,o_),e(o_,$le),e($le,LFo),e(o_,xFo),e(o_,rN),e(rN,$Fo),e(o_,kFo),e(G,SFo),e(G,r_),e(r_,kle),e(kle,RFo),e(r_,BFo),e(r_,tN),e(tN,PFo),e(r_,IFo),e(G,qFo),e(G,t_),e(t_,Sle),e(Sle,NFo),e(t_,jFo),e(t_,aN),e(aN,DFo),e(t_,GFo),e(G,OFo),e(G,a_),e(a_,Rle),e(Rle,VFo),e(a_,XFo),e(a_,nN),e(nN,zFo),e(a_,QFo),e(G,WFo),e(G,n_),e(n_,Ble),e(Ble,HFo),e(n_,UFo),e(n_,sN),e(sN,JFo),e(n_,YFo),e(G,KFo),e(G,s_),e(s_,Ple),e(Ple,ZFo),e(s_,e6o),e(s_,lN),e(lN,o6o),e(s_,r6o),e(G,t6o),e(G,l_),e(l_,Ile),e(Ile,a6o),e(l_,n6o),e(l_,iN),e(iN,s6o),e(l_,l6o),e(G,i6o),e(G,i_),e(i_,qle),e(qle,d6o),e(i_,c6o),e(i_,dN),e(dN,f6o),e(i_,m6o),e(G,g6o),e(G,d_),e(d_,Nle),e(Nle,h6o),e(d_,p6o),e(d_,cN),e(cN,u6o),e(d_,_6o),e(G,b6o),e(G,c_),e(c_,jle),e(jle,v6o),e(c_,F6o),e(c_,fN),e(fN,T6o),e(c_,M6o),e(G,E6o),e(G,f_),e(f_,Dle),e(Dle,C6o),e(f_,w6o),e(f_,mN),e(mN,A6o),e(f_,y6o),e(G,L6o),e(G,m_),e(m_,Gle),e(Gle,x6o),e(m_,$6o),e(m_,gN),e(gN,k6o),e(m_,S6o),e(G,R6o),e(G,g_),e(g_,Ole),e(Ole,B6o),e(g_,P6o),e(g_,hN),e(hN,I6o),e(g_,q6o),e(G,N6o),e(G,h_),e(h_,Vle),e(Vle,j6o),e(h_,D6o),e(h_,pN),e(pN,G6o),e(h_,O6o),e(G,V6o),e(G,p_),e(p_,Xle),e(Xle,X6o),e(p_,z6o),e(p_,uN),e(uN,Q6o),e(p_,W6o),e(G,H6o),e(G,u_),e(u_,zle),e(zle,U6o),e(u_,J6o),e(u_,_N),e(_N,Y6o),e(u_,K6o),e(G,Z6o),e(G,__),e(__,Qle),e(Qle,eTo),e(__,oTo),e(__,bN),e(bN,rTo),e(__,tTo),e(G,aTo),e(G,b_),e(b_,Wle),e(Wle,nTo),e(b_,sTo),e(b_,vN),e(vN,lTo),e(b_,iTo),e(G,dTo),e(G,v_),e(v_,Hle),e(Hle,cTo),e(v_,fTo),e(v_,FN),e(FN,mTo),e(v_,gTo),e(G,hTo),e(G,F_),e(F_,Ule),e(Ule,pTo),e(F_,uTo),e(F_,TN),e(TN,_To),e(F_,bTo),e(G,vTo),e(G,T_),e(T_,Jle),e(Jle,FTo),e(T_,TTo),e(T_,MN),e(MN,MTo),e(T_,ETo),e(G,CTo),e(G,M_),e(M_,Yle),e(Yle,wTo),e(M_,ATo),e(M_,EN),e(EN,yTo),e(M_,LTo),e(G,xTo),e(G,E_),e(E_,Kle),e(Kle,$To),e(E_,kTo),e(E_,CN),e(CN,STo),e(E_,RTo),e(G,BTo),e(G,C_),e(C_,Zle),e(Zle,PTo),e(C_,ITo),e(C_,wN),e(wN,qTo),e(C_,NTo),e(G,jTo),e(G,w_),e(w_,eie),e(eie,DTo),e(w_,GTo),e(w_,AN),e(AN,OTo),e(w_,VTo),e(G,XTo),e(G,A_),e(A_,oie),e(oie,zTo),e(A_,QTo),e(A_,yN),e(yN,WTo),e(A_,HTo),e(Ue,UTo),e(Ue,y_),e(y_,JTo),e(y_,rie),e(rie,YTo),e(y_,KTo),e(y_,tie),e(tie,ZTo),e(Ue,e7o),M(L_,Ue,null),b(f,EIe,_),b(f,Li,_),e(Li,x_),e(x_,aie),M(qA,aie,null),e(Li,o7o),e(Li,nie),e(nie,r7o),b(f,CIe,_),b(f,$o,_),M(NA,$o,null),e($o,t7o),e($o,xi),e(xi,a7o),e(xi,LN),e(LN,n7o),e(xi,s7o),e(xi,xN),e(xN,l7o),e(xi,i7o),e($o,d7o),e($o,jA),e(jA,c7o),e(jA,sie),e(sie,f7o),e(jA,m7o),e($o,g7o),e($o,tt),M(DA,tt,null),e(tt,h7o),e(tt,lie),e(lie,p7o),e(tt,u7o),e(tt,$i),e($i,_7o),e($i,iie),e(iie,b7o),e($i,v7o),e($i,$N),e($N,F7o),e($i,T7o),e(tt,M7o),M($_,tt,null),e($o,E7o),e($o,Je),M(GA,Je,null),e(Je,C7o),e(Je,die),e(die,w7o),e(Je,A7o),e(Je,La),e(La,y7o),e(La,cie),e(cie,L7o),e(La,x7o),e(La,fie),e(fie,$7o),e(La,k7o),e(La,mie),e(mie,S7o),e(La,R7o),e(Je,B7o),e(Je,z),e(z,k_),e(k_,gie),e(gie,P7o),e(k_,I7o),e(k_,kN),e(kN,q7o),e(k_,N7o),e(z,j7o),e(z,S_),e(S_,hie),e(hie,D7o),e(S_,G7o),e(S_,SN),e(SN,O7o),e(S_,V7o),e(z,X7o),e(z,R_),e(R_,pie),e(pie,z7o),e(R_,Q7o),e(R_,RN),e(RN,W7o),e(R_,H7o),e(z,U7o),e(z,B_),e(B_,uie),e(uie,J7o),e(B_,Y7o),e(B_,BN),e(BN,K7o),e(B_,Z7o),e(z,eMo),e(z,P_),e(P_,_ie),e(_ie,oMo),e(P_,rMo),e(P_,PN),e(PN,tMo),e(P_,aMo),e(z,nMo),e(z,I_),e(I_,bie),e(bie,sMo),e(I_,lMo),e(I_,IN),e(IN,iMo),e(I_,dMo),e(z,cMo),e(z,q_),e(q_,vie),e(vie,fMo),e(q_,mMo),e(q_,qN),e(qN,gMo),e(q_,hMo),e(z,pMo),e(z,N_),e(N_,Fie),e(Fie,uMo),e(N_,_Mo),e(N_,NN),e(NN,bMo),e(N_,vMo),e(z,FMo),e(z,j_),e(j_,Tie),e(Tie,TMo),e(j_,MMo),e(j_,jN),e(jN,EMo),e(j_,CMo),e(z,wMo),e(z,D_),e(D_,Mie),e(Mie,AMo),e(D_,yMo),e(D_,DN),e(DN,LMo),e(D_,xMo),e(z,$Mo),e(z,G_),e(G_,Eie),e(Eie,kMo),e(G_,SMo),e(G_,GN),e(GN,RMo),e(G_,BMo),e(z,PMo),e(z,O_),e(O_,Cie),e(Cie,IMo),e(O_,qMo),e(O_,ON),e(ON,NMo),e(O_,jMo),e(z,DMo),e(z,V_),e(V_,wie),e(wie,GMo),e(V_,OMo),e(V_,VN),e(VN,VMo),e(V_,XMo),e(z,zMo),e(z,X_),e(X_,Aie),e(Aie,QMo),e(X_,WMo),e(X_,XN),e(XN,HMo),e(X_,UMo),e(z,JMo),e(z,z_),e(z_,yie),e(yie,YMo),e(z_,KMo),e(z_,zN),e(zN,ZMo),e(z_,e4o),e(z,o4o),e(z,Q_),e(Q_,Lie),e(Lie,r4o),e(Q_,t4o),e(Q_,QN),e(QN,a4o),e(Q_,n4o),e(z,s4o),e(z,W_),e(W_,xie),e(xie,l4o),e(W_,i4o),e(W_,WN),e(WN,d4o),e(W_,c4o),e(z,f4o),e(z,H_),e(H_,$ie),e($ie,m4o),e(H_,g4o),e(H_,HN),e(HN,h4o),e(H_,p4o),e(z,u4o),e(z,U_),e(U_,kie),e(kie,_4o),e(U_,b4o),e(U_,UN),e(UN,v4o),e(U_,F4o),e(z,T4o),e(z,J_),e(J_,Sie),e(Sie,M4o),e(J_,E4o),e(J_,JN),e(JN,C4o),e(J_,w4o),e(z,A4o),e(z,Y_),e(Y_,Rie),e(Rie,y4o),e(Y_,L4o),e(Y_,YN),e(YN,x4o),e(Y_,$4o),e(z,k4o),e(z,K_),e(K_,Bie),e(Bie,S4o),e(K_,R4o),e(K_,KN),e(KN,B4o),e(K_,P4o),e(z,I4o),e(z,Z_),e(Z_,Pie),e(Pie,q4o),e(Z_,N4o),e(Z_,ZN),e(ZN,j4o),e(Z_,D4o),e(z,G4o),e(z,e0),e(e0,Iie),e(Iie,O4o),e(e0,V4o),e(e0,ej),e(ej,X4o),e(e0,z4o),e(z,Q4o),e(z,o0),e(o0,qie),e(qie,W4o),e(o0,H4o),e(o0,oj),e(oj,U4o),e(o0,J4o),e(z,Y4o),e(z,r0),e(r0,Nie),e(Nie,K4o),e(r0,Z4o),e(r0,rj),e(rj,eEo),e(r0,oEo),e(z,rEo),e(z,t0),e(t0,jie),e(jie,tEo),e(t0,aEo),e(t0,tj),e(tj,nEo),e(t0,sEo),e(z,lEo),e(z,a0),e(a0,Die),e(Die,iEo),e(a0,dEo),e(a0,aj),e(aj,cEo),e(a0,fEo),e(z,mEo),e(z,n0),e(n0,Gie),e(Gie,gEo),e(n0,hEo),e(n0,nj),e(nj,pEo),e(n0,uEo),e(z,_Eo),e(z,s0),e(s0,Oie),e(Oie,bEo),e(s0,vEo),e(s0,sj),e(sj,FEo),e(s0,TEo),e(z,MEo),e(z,l0),e(l0,Vie),e(Vie,EEo),e(l0,CEo),e(l0,lj),e(lj,wEo),e(l0,AEo),e(z,yEo),e(z,i0),e(i0,Xie),e(Xie,LEo),e(i0,xEo),e(i0,ij),e(ij,$Eo),e(i0,kEo),e(z,SEo),e(z,d0),e(d0,zie),e(zie,REo),e(d0,BEo),e(d0,dj),e(dj,PEo),e(d0,IEo),e(z,qEo),e(z,c0),e(c0,Qie),e(Qie,NEo),e(c0,jEo),e(c0,cj),e(cj,DEo),e(c0,GEo),e(z,OEo),e(z,f0),e(f0,Wie),e(Wie,VEo),e(f0,XEo),e(f0,fj),e(fj,zEo),e(f0,QEo),e(Je,WEo),e(Je,m0),e(m0,HEo),e(m0,Hie),e(Hie,UEo),e(m0,JEo),e(m0,Uie),e(Uie,YEo),e(Je,KEo),M(g0,Je,null),b(f,wIe,_),b(f,ki,_),e(ki,h0),e(h0,Jie),M(OA,Jie,null),e(ki,ZEo),e(ki,Yie),e(Yie,e5o),b(f,AIe,_),b(f,ko,_),M(VA,ko,null),e(ko,o5o),e(ko,Si),e(Si,r5o),e(Si,mj),e(mj,t5o),e(Si,a5o),e(Si,gj),e(gj,n5o),e(Si,s5o),e(ko,l5o),e(ko,XA),e(XA,i5o),e(XA,Kie),e(Kie,d5o),e(XA,c5o),e(ko,f5o),e(ko,at),M(zA,at,null),e(at,m5o),e(at,Zie),e(Zie,g5o),e(at,h5o),e(at,Ri),e(Ri,p5o),e(Ri,ede),e(ede,u5o),e(Ri,_5o),e(Ri,hj),e(hj,b5o),e(Ri,v5o),e(at,F5o),M(p0,at,null),e(ko,T5o),e(ko,Ye),M(QA,Ye,null),e(Ye,M5o),e(Ye,ode),e(ode,E5o),e(Ye,C5o),e(Ye,xa),e(xa,w5o),e(xa,rde),e(rde,A5o),e(xa,y5o),e(xa,tde),e(tde,L5o),e(xa,x5o),e(xa,ade),e(ade,$5o),e(xa,k5o),e(Ye,S5o),e(Ye,Q),e(Q,u0),e(u0,nde),e(nde,R5o),e(u0,B5o),e(u0,pj),e(pj,P5o),e(u0,I5o),e(Q,q5o),e(Q,_0),e(_0,sde),e(sde,N5o),e(_0,j5o),e(_0,uj),e(uj,D5o),e(_0,G5o),e(Q,O5o),e(Q,b0),e(b0,lde),e(lde,V5o),e(b0,X5o),e(b0,_j),e(_j,z5o),e(b0,Q5o),e(Q,W5o),e(Q,v0),e(v0,ide),e(ide,H5o),e(v0,U5o),e(v0,bj),e(bj,J5o),e(v0,Y5o),e(Q,K5o),e(Q,F0),e(F0,dde),e(dde,Z5o),e(F0,eCo),e(F0,vj),e(vj,oCo),e(F0,rCo),e(Q,tCo),e(Q,T0),e(T0,cde),e(cde,aCo),e(T0,nCo),e(T0,Fj),e(Fj,sCo),e(T0,lCo),e(Q,iCo),e(Q,M0),e(M0,fde),e(fde,dCo),e(M0,cCo),e(M0,Tj),e(Tj,fCo),e(M0,mCo),e(Q,gCo),e(Q,E0),e(E0,mde),e(mde,hCo),e(E0,pCo),e(E0,Mj),e(Mj,uCo),e(E0,_Co),e(Q,bCo),e(Q,C0),e(C0,gde),e(gde,vCo),e(C0,FCo),e(C0,Ej),e(Ej,TCo),e(C0,MCo),e(Q,ECo),e(Q,w0),e(w0,hde),e(hde,CCo),e(w0,wCo),e(w0,Cj),e(Cj,ACo),e(w0,yCo),e(Q,LCo),e(Q,A0),e(A0,pde),e(pde,xCo),e(A0,$Co),e(A0,wj),e(wj,kCo),e(A0,SCo),e(Q,RCo),e(Q,y0),e(y0,ude),e(ude,BCo),e(y0,PCo),e(y0,Aj),e(Aj,ICo),e(y0,qCo),e(Q,NCo),e(Q,L0),e(L0,_de),e(_de,jCo),e(L0,DCo),e(L0,yj),e(yj,GCo),e(L0,OCo),e(Q,VCo),e(Q,x0),e(x0,bde),e(bde,XCo),e(x0,zCo),e(x0,Lj),e(Lj,QCo),e(x0,WCo),e(Q,HCo),e(Q,$0),e($0,vde),e(vde,UCo),e($0,JCo),e($0,xj),e(xj,YCo),e($0,KCo),e(Q,ZCo),e(Q,k0),e(k0,Fde),e(Fde,e3o),e(k0,o3o),e(k0,$j),e($j,r3o),e(k0,t3o),e(Q,a3o),e(Q,S0),e(S0,Tde),e(Tde,n3o),e(S0,s3o),e(S0,kj),e(kj,l3o),e(S0,i3o),e(Q,d3o),e(Q,R0),e(R0,Mde),e(Mde,c3o),e(R0,f3o),e(R0,Sj),e(Sj,m3o),e(R0,g3o),e(Q,h3o),e(Q,B0),e(B0,Ede),e(Ede,p3o),e(B0,u3o),e(B0,Rj),e(Rj,_3o),e(B0,b3o),e(Q,v3o),e(Q,P0),e(P0,Cde),e(Cde,F3o),e(P0,T3o),e(P0,Bj),e(Bj,M3o),e(P0,E3o),e(Q,C3o),e(Q,I0),e(I0,wde),e(wde,w3o),e(I0,A3o),e(I0,Pj),e(Pj,y3o),e(I0,L3o),e(Q,x3o),e(Q,q0),e(q0,Ade),e(Ade,$3o),e(q0,k3o),e(q0,Ij),e(Ij,S3o),e(q0,R3o),e(Q,B3o),e(Q,N0),e(N0,yde),e(yde,P3o),e(N0,I3o),e(N0,qj),e(qj,q3o),e(N0,N3o),e(Q,j3o),e(Q,j0),e(j0,Lde),e(Lde,D3o),e(j0,G3o),e(j0,Nj),e(Nj,O3o),e(j0,V3o),e(Q,X3o),e(Q,D0),e(D0,xde),e(xde,z3o),e(D0,Q3o),e(D0,jj),e(jj,W3o),e(D0,H3o),e(Q,U3o),e(Q,G0),e(G0,$de),e($de,J3o),e(G0,Y3o),e(G0,Dj),e(Dj,K3o),e(G0,Z3o),e(Q,ewo),e(Q,O0),e(O0,kde),e(kde,owo),e(O0,rwo),e(O0,Gj),e(Gj,two),e(O0,awo),e(Q,nwo),e(Q,V0),e(V0,Sde),e(Sde,swo),e(V0,lwo),e(V0,Oj),e(Oj,iwo),e(V0,dwo),e(Q,cwo),e(Q,X0),e(X0,Rde),e(Rde,fwo),e(X0,mwo),e(X0,Vj),e(Vj,gwo),e(X0,hwo),e(Q,pwo),e(Q,z0),e(z0,Bde),e(Bde,uwo),e(z0,_wo),e(z0,Xj),e(Xj,bwo),e(z0,vwo),e(Q,Fwo),e(Q,Q0),e(Q0,Pde),e(Pde,Two),e(Q0,Mwo),e(Q0,Ide),e(Ide,Ewo),e(Q0,Cwo),e(Q,wwo),e(Q,W0),e(W0,qde),e(qde,Awo),e(W0,ywo),e(W0,zj),e(zj,Lwo),e(W0,xwo),e(Q,$wo),e(Q,H0),e(H0,Nde),e(Nde,kwo),e(H0,Swo),e(H0,Qj),e(Qj,Rwo),e(H0,Bwo),e(Q,Pwo),e(Q,U0),e(U0,jde),e(jde,Iwo),e(U0,qwo),e(U0,Wj),e(Wj,Nwo),e(U0,jwo),e(Q,Dwo),e(Q,J0),e(J0,Dde),e(Dde,Gwo),e(J0,Owo),e(J0,Hj),e(Hj,Vwo),e(J0,Xwo),e(Ye,zwo),e(Ye,Y0),e(Y0,Qwo),e(Y0,Gde),e(Gde,Wwo),e(Y0,Hwo),e(Y0,Ode),e(Ode,Uwo),e(Ye,Jwo),M(K0,Ye,null),b(f,yIe,_),b(f,Bi,_),e(Bi,Z0),e(Z0,Vde),M(WA,Vde,null),e(Bi,Ywo),e(Bi,Xde),e(Xde,Kwo),b(f,LIe,_),b(f,So,_),M(HA,So,null),e(So,Zwo),e(So,Pi),e(Pi,eAo),e(Pi,Uj),e(Uj,oAo),e(Pi,rAo),e(Pi,Jj),e(Jj,tAo),e(Pi,aAo),e(So,nAo),e(So,UA),e(UA,sAo),e(UA,zde),e(zde,lAo),e(UA,iAo),e(So,dAo),e(So,nt),M(JA,nt,null),e(nt,cAo),e(nt,Qde),e(Qde,fAo),e(nt,mAo),e(nt,Ii),e(Ii,gAo),e(Ii,Wde),e(Wde,hAo),e(Ii,pAo),e(Ii,Yj),e(Yj,uAo),e(Ii,_Ao),e(nt,bAo),M(e1,nt,null),e(So,vAo),e(So,Ke),M(YA,Ke,null),e(Ke,FAo),e(Ke,Hde),e(Hde,TAo),e(Ke,MAo),e(Ke,$a),e($a,EAo),e($a,Ude),e(Ude,CAo),e($a,wAo),e($a,Jde),e(Jde,AAo),e($a,yAo),e($a,Yde),e(Yde,LAo),e($a,xAo),e(Ke,$Ao),e(Ke,he),e(he,o1),e(o1,Kde),e(Kde,kAo),e(o1,SAo),e(o1,Kj),e(Kj,RAo),e(o1,BAo),e(he,PAo),e(he,r1),e(r1,Zde),e(Zde,IAo),e(r1,qAo),e(r1,Zj),e(Zj,NAo),e(r1,jAo),e(he,DAo),e(he,t1),e(t1,ece),e(ece,GAo),e(t1,OAo),e(t1,eD),e(eD,VAo),e(t1,XAo),e(he,zAo),e(he,a1),e(a1,oce),e(oce,QAo),e(a1,WAo),e(a1,oD),e(oD,HAo),e(a1,UAo),e(he,JAo),e(he,n1),e(n1,rce),e(rce,YAo),e(n1,KAo),e(n1,rD),e(rD,ZAo),e(n1,eyo),e(he,oyo),e(he,s1),e(s1,tce),e(tce,ryo),e(s1,tyo),e(s1,tD),e(tD,ayo),e(s1,nyo),e(he,syo),e(he,l1),e(l1,ace),e(ace,lyo),e(l1,iyo),e(l1,aD),e(aD,dyo),e(l1,cyo),e(he,fyo),e(he,i1),e(i1,nce),e(nce,myo),e(i1,gyo),e(i1,nD),e(nD,hyo),e(i1,pyo),e(he,uyo),e(he,d1),e(d1,sce),e(sce,_yo),e(d1,byo),e(d1,sD),e(sD,vyo),e(d1,Fyo),e(he,Tyo),e(he,c1),e(c1,lce),e(lce,Myo),e(c1,Eyo),e(c1,lD),e(lD,Cyo),e(c1,wyo),e(he,Ayo),e(he,f1),e(f1,ice),e(ice,yyo),e(f1,Lyo),e(f1,iD),e(iD,xyo),e(f1,$yo),e(he,kyo),e(he,m1),e(m1,dce),e(dce,Syo),e(m1,Ryo),e(m1,dD),e(dD,Byo),e(m1,Pyo),e(he,Iyo),e(he,g1),e(g1,cce),e(cce,qyo),e(g1,Nyo),e(g1,cD),e(cD,jyo),e(g1,Dyo),e(he,Gyo),e(he,h1),e(h1,fce),e(fce,Oyo),e(h1,Vyo),e(h1,fD),e(fD,Xyo),e(h1,zyo),e(he,Qyo),e(he,p1),e(p1,mce),e(mce,Wyo),e(p1,Hyo),e(p1,mD),e(mD,Uyo),e(p1,Jyo),e(he,Yyo),e(he,u1),e(u1,gce),e(gce,Kyo),e(u1,Zyo),e(u1,gD),e(gD,eLo),e(u1,oLo),e(he,rLo),e(he,_1),e(_1,hce),e(hce,tLo),e(_1,aLo),e(_1,hD),e(hD,nLo),e(_1,sLo),e(Ke,lLo),e(Ke,b1),e(b1,iLo),e(b1,pce),e(pce,dLo),e(b1,cLo),e(b1,uce),e(uce,fLo),e(Ke,mLo),M(v1,Ke,null),b(f,xIe,_),b(f,qi,_),e(qi,F1),e(F1,_ce),M(KA,_ce,null),e(qi,gLo),e(qi,bce),e(bce,hLo),b(f,$Ie,_),b(f,Ro,_),M(ZA,Ro,null),e(Ro,pLo),e(Ro,Ni),e(Ni,uLo),e(Ni,pD),e(pD,_Lo),e(Ni,bLo),e(Ni,uD),e(uD,vLo),e(Ni,FLo),e(Ro,TLo),e(Ro,ey),e(ey,MLo),e(ey,vce),e(vce,ELo),e(ey,CLo),e(Ro,wLo),e(Ro,st),M(oy,st,null),e(st,ALo),e(st,Fce),e(Fce,yLo),e(st,LLo),e(st,ji),e(ji,xLo),e(ji,Tce),e(Tce,$Lo),e(ji,kLo),e(ji,_D),e(_D,SLo),e(ji,RLo),e(st,BLo),M(T1,st,null),e(Ro,PLo),e(Ro,Ze),M(ry,Ze,null),e(Ze,ILo),e(Ze,Mce),e(Mce,qLo),e(Ze,NLo),e(Ze,ka),e(ka,jLo),e(ka,Ece),e(Ece,DLo),e(ka,GLo),e(ka,Cce),e(Cce,OLo),e(ka,VLo),e(ka,wce),e(wce,XLo),e(ka,zLo),e(Ze,QLo),e(Ze,q),e(q,M1),e(M1,Ace),e(Ace,WLo),e(M1,HLo),e(M1,bD),e(bD,ULo),e(M1,JLo),e(q,YLo),e(q,E1),e(E1,yce),e(yce,KLo),e(E1,ZLo),e(E1,vD),e(vD,e8o),e(E1,o8o),e(q,r8o),e(q,C1),e(C1,Lce),e(Lce,t8o),e(C1,a8o),e(C1,FD),e(FD,n8o),e(C1,s8o),e(q,l8o),e(q,w1),e(w1,xce),e(xce,i8o),e(w1,d8o),e(w1,TD),e(TD,c8o),e(w1,f8o),e(q,m8o),e(q,A1),e(A1,$ce),e($ce,g8o),e(A1,h8o),e(A1,MD),e(MD,p8o),e(A1,u8o),e(q,_8o),e(q,y1),e(y1,kce),e(kce,b8o),e(y1,v8o),e(y1,ED),e(ED,F8o),e(y1,T8o),e(q,M8o),e(q,L1),e(L1,Sce),e(Sce,E8o),e(L1,C8o),e(L1,CD),e(CD,w8o),e(L1,A8o),e(q,y8o),e(q,x1),e(x1,Rce),e(Rce,L8o),e(x1,x8o),e(x1,wD),e(wD,$8o),e(x1,k8o),e(q,S8o),e(q,$1),e($1,Bce),e(Bce,R8o),e($1,B8o),e($1,AD),e(AD,P8o),e($1,I8o),e(q,q8o),e(q,k1),e(k1,Pce),e(Pce,N8o),e(k1,j8o),e(k1,yD),e(yD,D8o),e(k1,G8o),e(q,O8o),e(q,S1),e(S1,Ice),e(Ice,V8o),e(S1,X8o),e(S1,LD),e(LD,z8o),e(S1,Q8o),e(q,W8o),e(q,R1),e(R1,qce),e(qce,H8o),e(R1,U8o),e(R1,xD),e(xD,J8o),e(R1,Y8o),e(q,K8o),e(q,B1),e(B1,Nce),e(Nce,Z8o),e(B1,exo),e(B1,$D),e($D,oxo),e(B1,rxo),e(q,txo),e(q,P1),e(P1,jce),e(jce,axo),e(P1,nxo),e(P1,kD),e(kD,sxo),e(P1,lxo),e(q,ixo),e(q,I1),e(I1,Dce),e(Dce,dxo),e(I1,cxo),e(I1,SD),e(SD,fxo),e(I1,mxo),e(q,gxo),e(q,q1),e(q1,Gce),e(Gce,hxo),e(q1,pxo),e(q1,RD),e(RD,uxo),e(q1,_xo),e(q,bxo),e(q,N1),e(N1,Oce),e(Oce,vxo),e(N1,Fxo),e(N1,BD),e(BD,Txo),e(N1,Mxo),e(q,Exo),e(q,j1),e(j1,Vce),e(Vce,Cxo),e(j1,wxo),e(j1,PD),e(PD,Axo),e(j1,yxo),e(q,Lxo),e(q,D1),e(D1,Xce),e(Xce,xxo),e(D1,$xo),e(D1,ID),e(ID,kxo),e(D1,Sxo),e(q,Rxo),e(q,G1),e(G1,zce),e(zce,Bxo),e(G1,Pxo),e(G1,qD),e(qD,Ixo),e(G1,qxo),e(q,Nxo),e(q,O1),e(O1,Qce),e(Qce,jxo),e(O1,Dxo),e(O1,ND),e(ND,Gxo),e(O1,Oxo),e(q,Vxo),e(q,V1),e(V1,Wce),e(Wce,Xxo),e(V1,zxo),e(V1,jD),e(jD,Qxo),e(V1,Wxo),e(q,Hxo),e(q,X1),e(X1,Hce),e(Hce,Uxo),e(X1,Jxo),e(X1,DD),e(DD,Yxo),e(X1,Kxo),e(q,Zxo),e(q,z1),e(z1,Uce),e(Uce,e9o),e(z1,o9o),e(z1,GD),e(GD,r9o),e(z1,t9o),e(q,a9o),e(q,Q1),e(Q1,Jce),e(Jce,n9o),e(Q1,s9o),e(Q1,OD),e(OD,l9o),e(Q1,i9o),e(q,d9o),e(q,W1),e(W1,Yce),e(Yce,c9o),e(W1,f9o),e(W1,VD),e(VD,m9o),e(W1,g9o),e(q,h9o),e(q,H1),e(H1,Kce),e(Kce,p9o),e(H1,u9o),e(H1,XD),e(XD,_9o),e(H1,b9o),e(q,v9o),e(q,U1),e(U1,Zce),e(Zce,F9o),e(U1,T9o),e(U1,zD),e(zD,M9o),e(U1,E9o),e(q,C9o),e(q,J1),e(J1,efe),e(efe,w9o),e(J1,A9o),e(J1,QD),e(QD,y9o),e(J1,L9o),e(q,x9o),e(q,Y1),e(Y1,ofe),e(ofe,$9o),e(Y1,k9o),e(Y1,WD),e(WD,S9o),e(Y1,R9o),e(q,B9o),e(q,K1),e(K1,rfe),e(rfe,P9o),e(K1,I9o),e(K1,HD),e(HD,q9o),e(K1,N9o),e(q,j9o),e(q,Z1),e(Z1,tfe),e(tfe,D9o),e(Z1,G9o),e(Z1,UD),e(UD,O9o),e(Z1,V9o),e(q,X9o),e(q,eb),e(eb,afe),e(afe,z9o),e(eb,Q9o),e(eb,JD),e(JD,W9o),e(eb,H9o),e(q,U9o),e(q,ob),e(ob,nfe),e(nfe,J9o),e(ob,Y9o),e(ob,YD),e(YD,K9o),e(ob,Z9o),e(q,e$o),e(q,rb),e(rb,sfe),e(sfe,o$o),e(rb,r$o),e(rb,KD),e(KD,t$o),e(rb,a$o),e(q,n$o),e(q,tb),e(tb,lfe),e(lfe,s$o),e(tb,l$o),e(tb,ZD),e(ZD,i$o),e(tb,d$o),e(q,c$o),e(q,ab),e(ab,ife),e(ife,f$o),e(ab,m$o),e(ab,eG),e(eG,g$o),e(ab,h$o),e(q,p$o),e(q,nb),e(nb,dfe),e(dfe,u$o),e(nb,_$o),e(nb,oG),e(oG,b$o),e(nb,v$o),e(q,F$o),e(q,sb),e(sb,cfe),e(cfe,T$o),e(sb,M$o),e(sb,rG),e(rG,E$o),e(sb,C$o),e(q,w$o),e(q,lb),e(lb,ffe),e(ffe,A$o),e(lb,y$o),e(lb,tG),e(tG,L$o),e(lb,x$o),e(q,$$o),e(q,ib),e(ib,mfe),e(mfe,k$o),e(ib,S$o),e(ib,aG),e(aG,R$o),e(ib,B$o),e(q,P$o),e(q,db),e(db,gfe),e(gfe,I$o),e(db,q$o),e(db,nG),e(nG,N$o),e(db,j$o),e(q,D$o),e(q,cb),e(cb,hfe),e(hfe,G$o),e(cb,O$o),e(cb,sG),e(sG,V$o),e(cb,X$o),e(q,z$o),e(q,fb),e(fb,pfe),e(pfe,Q$o),e(fb,W$o),e(fb,lG),e(lG,H$o),e(fb,U$o),e(q,J$o),e(q,mb),e(mb,ufe),e(ufe,Y$o),e(mb,K$o),e(mb,iG),e(iG,Z$o),e(mb,eko),e(q,oko),e(q,gb),e(gb,_fe),e(_fe,rko),e(gb,tko),e(gb,dG),e(dG,ako),e(gb,nko),e(q,sko),e(q,hb),e(hb,bfe),e(bfe,lko),e(hb,iko),e(hb,cG),e(cG,dko),e(hb,cko),e(q,fko),e(q,pb),e(pb,vfe),e(vfe,mko),e(pb,gko),e(pb,fG),e(fG,hko),e(pb,pko),e(Ze,uko),e(Ze,ub),e(ub,_ko),e(ub,Ffe),e(Ffe,bko),e(ub,vko),e(ub,Tfe),e(Tfe,Fko),e(Ze,Tko),M(_b,Ze,null),b(f,kIe,_),b(f,Di,_),e(Di,bb),e(bb,Mfe),M(ty,Mfe,null),e(Di,Mko),e(Di,Efe),e(Efe,Eko),b(f,SIe,_),b(f,Bo,_),M(ay,Bo,null),e(Bo,Cko),e(Bo,Gi),e(Gi,wko),e(Gi,mG),e(mG,Ako),e(Gi,yko),e(Gi,gG),e(gG,Lko),e(Gi,xko),e(Bo,$ko),e(Bo,ny),e(ny,kko),e(ny,Cfe),e(Cfe,Sko),e(ny,Rko),e(Bo,Bko),e(Bo,lt),M(sy,lt,null),e(lt,Pko),e(lt,wfe),e(wfe,Iko),e(lt,qko),e(lt,Oi),e(Oi,Nko),e(Oi,Afe),e(Afe,jko),e(Oi,Dko),e(Oi,hG),e(hG,Gko),e(Oi,Oko),e(lt,Vko),M(vb,lt,null),e(Bo,Xko),e(Bo,eo),M(ly,eo,null),e(eo,zko),e(eo,yfe),e(yfe,Qko),e(eo,Wko),e(eo,Sa),e(Sa,Hko),e(Sa,Lfe),e(Lfe,Uko),e(Sa,Jko),e(Sa,xfe),e(xfe,Yko),e(Sa,Kko),e(Sa,$fe),e($fe,Zko),e(Sa,eSo),e(eo,oSo),e(eo,Y),e(Y,Fb),e(Fb,kfe),e(kfe,rSo),e(Fb,tSo),e(Fb,pG),e(pG,aSo),e(Fb,nSo),e(Y,sSo),e(Y,Tb),e(Tb,Sfe),e(Sfe,lSo),e(Tb,iSo),e(Tb,uG),e(uG,dSo),e(Tb,cSo),e(Y,fSo),e(Y,Mb),e(Mb,Rfe),e(Rfe,mSo),e(Mb,gSo),e(Mb,_G),e(_G,hSo),e(Mb,pSo),e(Y,uSo),e(Y,Eb),e(Eb,Bfe),e(Bfe,_So),e(Eb,bSo),e(Eb,bG),e(bG,vSo),e(Eb,FSo),e(Y,TSo),e(Y,Cb),e(Cb,Pfe),e(Pfe,MSo),e(Cb,ESo),e(Cb,vG),e(vG,CSo),e(Cb,wSo),e(Y,ASo),e(Y,wb),e(wb,Ife),e(Ife,ySo),e(wb,LSo),e(wb,FG),e(FG,xSo),e(wb,$So),e(Y,kSo),e(Y,Ab),e(Ab,qfe),e(qfe,SSo),e(Ab,RSo),e(Ab,TG),e(TG,BSo),e(Ab,PSo),e(Y,ISo),e(Y,yb),e(yb,Nfe),e(Nfe,qSo),e(yb,NSo),e(yb,MG),e(MG,jSo),e(yb,DSo),e(Y,GSo),e(Y,Lb),e(Lb,jfe),e(jfe,OSo),e(Lb,VSo),e(Lb,EG),e(EG,XSo),e(Lb,zSo),e(Y,QSo),e(Y,xb),e(xb,Dfe),e(Dfe,WSo),e(xb,HSo),e(xb,CG),e(CG,USo),e(xb,JSo),e(Y,YSo),e(Y,$b),e($b,Gfe),e(Gfe,KSo),e($b,ZSo),e($b,wG),e(wG,eRo),e($b,oRo),e(Y,rRo),e(Y,kb),e(kb,Ofe),e(Ofe,tRo),e(kb,aRo),e(kb,AG),e(AG,nRo),e(kb,sRo),e(Y,lRo),e(Y,Sb),e(Sb,Vfe),e(Vfe,iRo),e(Sb,dRo),e(Sb,yG),e(yG,cRo),e(Sb,fRo),e(Y,mRo),e(Y,Rb),e(Rb,Xfe),e(Xfe,gRo),e(Rb,hRo),e(Rb,LG),e(LG,pRo),e(Rb,uRo),e(Y,_Ro),e(Y,Bb),e(Bb,zfe),e(zfe,bRo),e(Bb,vRo),e(Bb,xG),e(xG,FRo),e(Bb,TRo),e(Y,MRo),e(Y,Pb),e(Pb,Qfe),e(Qfe,ERo),e(Pb,CRo),e(Pb,$G),e($G,wRo),e(Pb,ARo),e(Y,yRo),e(Y,Ib),e(Ib,Wfe),e(Wfe,LRo),e(Ib,xRo),e(Ib,kG),e(kG,$Ro),e(Ib,kRo),e(Y,SRo),e(Y,qb),e(qb,Hfe),e(Hfe,RRo),e(qb,BRo),e(qb,SG),e(SG,PRo),e(qb,IRo),e(Y,qRo),e(Y,Nb),e(Nb,Ufe),e(Ufe,NRo),e(Nb,jRo),e(Nb,RG),e(RG,DRo),e(Nb,GRo),e(Y,ORo),e(Y,jb),e(jb,Jfe),e(Jfe,VRo),e(jb,XRo),e(jb,BG),e(BG,zRo),e(jb,QRo),e(Y,WRo),e(Y,Db),e(Db,Yfe),e(Yfe,HRo),e(Db,URo),e(Db,PG),e(PG,JRo),e(Db,YRo),e(Y,KRo),e(Y,Gb),e(Gb,Kfe),e(Kfe,ZRo),e(Gb,eBo),e(Gb,IG),e(IG,oBo),e(Gb,rBo),e(Y,tBo),e(Y,Ob),e(Ob,Zfe),e(Zfe,aBo),e(Ob,nBo),e(Ob,qG),e(qG,sBo),e(Ob,lBo),e(Y,iBo),e(Y,Vb),e(Vb,eme),e(eme,dBo),e(Vb,cBo),e(Vb,NG),e(NG,fBo),e(Vb,mBo),e(Y,gBo),e(Y,Xb),e(Xb,ome),e(ome,hBo),e(Xb,pBo),e(Xb,jG),e(jG,uBo),e(Xb,_Bo),e(Y,bBo),e(Y,zb),e(zb,rme),e(rme,vBo),e(zb,FBo),e(zb,DG),e(DG,TBo),e(zb,MBo),e(Y,EBo),e(Y,Qb),e(Qb,tme),e(tme,CBo),e(Qb,wBo),e(Qb,GG),e(GG,ABo),e(Qb,yBo),e(Y,LBo),e(Y,Wb),e(Wb,ame),e(ame,xBo),e(Wb,$Bo),e(Wb,OG),e(OG,kBo),e(Wb,SBo),e(Y,RBo),e(Y,Hb),e(Hb,nme),e(nme,BBo),e(Hb,PBo),e(Hb,VG),e(VG,IBo),e(Hb,qBo),e(eo,NBo),e(eo,Ub),e(Ub,jBo),e(Ub,sme),e(sme,DBo),e(Ub,GBo),e(Ub,lme),e(lme,OBo),e(eo,VBo),M(Jb,eo,null),b(f,RIe,_),b(f,Vi,_),e(Vi,Yb),e(Yb,ime),M(iy,ime,null),e(Vi,XBo),e(Vi,dme),e(dme,zBo),b(f,BIe,_),b(f,Po,_),M(dy,Po,null),e(Po,QBo),e(Po,Xi),e(Xi,WBo),e(Xi,XG),e(XG,HBo),e(Xi,UBo),e(Xi,zG),e(zG,JBo),e(Xi,YBo),e(Po,KBo),e(Po,cy),e(cy,ZBo),e(cy,cme),e(cme,ePo),e(cy,oPo),e(Po,rPo),e(Po,it),M(fy,it,null),e(it,tPo),e(it,fme),e(fme,aPo),e(it,nPo),e(it,zi),e(zi,sPo),e(zi,mme),e(mme,lPo),e(zi,iPo),e(zi,QG),e(QG,dPo),e(zi,cPo),e(it,fPo),M(Kb,it,null),e(Po,mPo),e(Po,oo),M(my,oo,null),e(oo,gPo),e(oo,gme),e(gme,hPo),e(oo,pPo),e(oo,Ra),e(Ra,uPo),e(Ra,hme),e(hme,_Po),e(Ra,bPo),e(Ra,pme),e(pme,vPo),e(Ra,FPo),e(Ra,ume),e(ume,TPo),e(Ra,MPo),e(oo,EPo),e(oo,Yr),e(Yr,Zb),e(Zb,_me),e(_me,CPo),e(Zb,wPo),e(Zb,WG),e(WG,APo),e(Zb,yPo),e(Yr,LPo),e(Yr,e2),e(e2,bme),e(bme,xPo),e(e2,$Po),e(e2,HG),e(HG,kPo),e(e2,SPo),e(Yr,RPo),e(Yr,o2),e(o2,vme),e(vme,BPo),e(o2,PPo),e(o2,UG),e(UG,IPo),e(o2,qPo),e(Yr,NPo),e(Yr,r2),e(r2,Fme),e(Fme,jPo),e(r2,DPo),e(r2,JG),e(JG,GPo),e(r2,OPo),e(Yr,VPo),e(Yr,t2),e(t2,Tme),e(Tme,XPo),e(t2,zPo),e(t2,YG),e(YG,QPo),e(t2,WPo),e(oo,HPo),e(oo,a2),e(a2,UPo),e(a2,Mme),e(Mme,JPo),e(a2,YPo),e(a2,Eme),e(Eme,KPo),e(oo,ZPo),M(n2,oo,null),b(f,PIe,_),b(f,Qi,_),e(Qi,s2),e(s2,Cme),M(gy,Cme,null),e(Qi,eIo),e(Qi,wme),e(wme,oIo),b(f,IIe,_),b(f,Io,_),M(hy,Io,null),e(Io,rIo),e(Io,Wi),e(Wi,tIo),e(Wi,KG),e(KG,aIo),e(Wi,nIo),e(Wi,ZG),e(ZG,sIo),e(Wi,lIo),e(Io,iIo),e(Io,py),e(py,dIo),e(py,Ame),e(Ame,cIo),e(py,fIo),e(Io,mIo),e(Io,dt),M(uy,dt,null),e(dt,gIo),e(dt,yme),e(yme,hIo),e(dt,pIo),e(dt,Hi),e(Hi,uIo),e(Hi,Lme),e(Lme,_Io),e(Hi,bIo),e(Hi,eO),e(eO,vIo),e(Hi,FIo),e(dt,TIo),M(l2,dt,null),e(Io,MIo),e(Io,ro),M(_y,ro,null),e(ro,EIo),e(ro,xme),e(xme,CIo),e(ro,wIo),e(ro,Ba),e(Ba,AIo),e(Ba,$me),e($me,yIo),e(Ba,LIo),e(Ba,kme),e(kme,xIo),e(Ba,$Io),e(Ba,Sme),e(Sme,kIo),e(Ba,SIo),e(ro,RIo),e(ro,W),e(W,i2),e(i2,Rme),e(Rme,BIo),e(i2,PIo),e(i2,oO),e(oO,IIo),e(i2,qIo),e(W,NIo),e(W,d2),e(d2,Bme),e(Bme,jIo),e(d2,DIo),e(d2,rO),e(rO,GIo),e(d2,OIo),e(W,VIo),e(W,c2),e(c2,Pme),e(Pme,XIo),e(c2,zIo),e(c2,tO),e(tO,QIo),e(c2,WIo),e(W,HIo),e(W,f2),e(f2,Ime),e(Ime,UIo),e(f2,JIo),e(f2,aO),e(aO,YIo),e(f2,KIo),e(W,ZIo),e(W,m2),e(m2,qme),e(qme,eqo),e(m2,oqo),e(m2,nO),e(nO,rqo),e(m2,tqo),e(W,aqo),e(W,g2),e(g2,Nme),e(Nme,nqo),e(g2,sqo),e(g2,sO),e(sO,lqo),e(g2,iqo),e(W,dqo),e(W,h2),e(h2,jme),e(jme,cqo),e(h2,fqo),e(h2,lO),e(lO,mqo),e(h2,gqo),e(W,hqo),e(W,p2),e(p2,Dme),e(Dme,pqo),e(p2,uqo),e(p2,iO),e(iO,_qo),e(p2,bqo),e(W,vqo),e(W,u2),e(u2,Gme),e(Gme,Fqo),e(u2,Tqo),e(u2,dO),e(dO,Mqo),e(u2,Eqo),e(W,Cqo),e(W,_2),e(_2,Ome),e(Ome,wqo),e(_2,Aqo),e(_2,cO),e(cO,yqo),e(_2,Lqo),e(W,xqo),e(W,b2),e(b2,Vme),e(Vme,$qo),e(b2,kqo),e(b2,fO),e(fO,Sqo),e(b2,Rqo),e(W,Bqo),e(W,v2),e(v2,Xme),e(Xme,Pqo),e(v2,Iqo),e(v2,mO),e(mO,qqo),e(v2,Nqo),e(W,jqo),e(W,F2),e(F2,zme),e(zme,Dqo),e(F2,Gqo),e(F2,gO),e(gO,Oqo),e(F2,Vqo),e(W,Xqo),e(W,T2),e(T2,Qme),e(Qme,zqo),e(T2,Qqo),e(T2,hO),e(hO,Wqo),e(T2,Hqo),e(W,Uqo),e(W,M2),e(M2,Wme),e(Wme,Jqo),e(M2,Yqo),e(M2,pO),e(pO,Kqo),e(M2,Zqo),e(W,eNo),e(W,E2),e(E2,Hme),e(Hme,oNo),e(E2,rNo),e(E2,uO),e(uO,tNo),e(E2,aNo),e(W,nNo),e(W,C2),e(C2,Ume),e(Ume,sNo),e(C2,lNo),e(C2,_O),e(_O,iNo),e(C2,dNo),e(W,cNo),e(W,w2),e(w2,Jme),e(Jme,fNo),e(w2,mNo),e(w2,bO),e(bO,gNo),e(w2,hNo),e(W,pNo),e(W,A2),e(A2,Yme),e(Yme,uNo),e(A2,_No),e(A2,vO),e(vO,bNo),e(A2,vNo),e(W,FNo),e(W,y2),e(y2,Kme),e(Kme,TNo),e(y2,MNo),e(y2,FO),e(FO,ENo),e(y2,CNo),e(W,wNo),e(W,L2),e(L2,Zme),e(Zme,ANo),e(L2,yNo),e(L2,TO),e(TO,LNo),e(L2,xNo),e(W,$No),e(W,x2),e(x2,ege),e(ege,kNo),e(x2,SNo),e(x2,MO),e(MO,RNo),e(x2,BNo),e(W,PNo),e(W,$2),e($2,oge),e(oge,INo),e($2,qNo),e($2,EO),e(EO,NNo),e($2,jNo),e(W,DNo),e(W,k2),e(k2,rge),e(rge,GNo),e(k2,ONo),e(k2,CO),e(CO,VNo),e(k2,XNo),e(W,zNo),e(W,S2),e(S2,tge),e(tge,QNo),e(S2,WNo),e(S2,wO),e(wO,HNo),e(S2,UNo),e(W,JNo),e(W,R2),e(R2,age),e(age,YNo),e(R2,KNo),e(R2,AO),e(AO,ZNo),e(R2,ejo),e(W,ojo),e(W,B2),e(B2,nge),e(nge,rjo),e(B2,tjo),e(B2,yO),e(yO,ajo),e(B2,njo),e(W,sjo),e(W,P2),e(P2,sge),e(sge,ljo),e(P2,ijo),e(P2,LO),e(LO,djo),e(P2,cjo),e(W,fjo),e(W,I2),e(I2,lge),e(lge,mjo),e(I2,gjo),e(I2,xO),e(xO,hjo),e(I2,pjo),e(W,ujo),e(W,q2),e(q2,ige),e(ige,_jo),e(q2,bjo),e(q2,$O),e($O,vjo),e(q2,Fjo),e(W,Tjo),e(W,N2),e(N2,dge),e(dge,Mjo),e(N2,Ejo),e(N2,kO),e(kO,Cjo),e(N2,wjo),e(W,Ajo),e(W,j2),e(j2,cge),e(cge,yjo),e(j2,Ljo),e(j2,SO),e(SO,xjo),e(j2,$jo),e(W,kjo),e(W,D2),e(D2,fge),e(fge,Sjo),e(D2,Rjo),e(D2,RO),e(RO,Bjo),e(D2,Pjo),e(W,Ijo),e(W,G2),e(G2,mge),e(mge,qjo),e(G2,Njo),e(G2,BO),e(BO,jjo),e(G2,Djo),e(ro,Gjo),e(ro,O2),e(O2,Ojo),e(O2,gge),e(gge,Vjo),e(O2,Xjo),e(O2,hge),e(hge,zjo),e(ro,Qjo),M(V2,ro,null),b(f,qIe,_),b(f,Ui,_),e(Ui,X2),e(X2,pge),M(by,pge,null),e(Ui,Wjo),e(Ui,uge),e(uge,Hjo),b(f,NIe,_),b(f,qo,_),M(vy,qo,null),e(qo,Ujo),e(qo,Ji),e(Ji,Jjo),e(Ji,PO),e(PO,Yjo),e(Ji,Kjo),e(Ji,IO),e(IO,Zjo),e(Ji,eDo),e(qo,oDo),e(qo,Fy),e(Fy,rDo),e(Fy,_ge),e(_ge,tDo),e(Fy,aDo),e(qo,nDo),e(qo,ct),M(Ty,ct,null),e(ct,sDo),e(ct,bge),e(bge,lDo),e(ct,iDo),e(ct,Yi),e(Yi,dDo),e(Yi,vge),e(vge,cDo),e(Yi,fDo),e(Yi,qO),e(qO,mDo),e(Yi,gDo),e(ct,hDo),M(z2,ct,null),e(qo,pDo),e(qo,to),M(My,to,null),e(to,uDo),e(to,Fge),e(Fge,_Do),e(to,bDo),e(to,Pa),e(Pa,vDo),e(Pa,Tge),e(Tge,FDo),e(Pa,TDo),e(Pa,Mge),e(Mge,MDo),e(Pa,EDo),e(Pa,Ege),e(Ege,CDo),e(Pa,wDo),e(to,ADo),e(to,O),e(O,Q2),e(Q2,Cge),e(Cge,yDo),e(Q2,LDo),e(Q2,NO),e(NO,xDo),e(Q2,$Do),e(O,kDo),e(O,W2),e(W2,wge),e(wge,SDo),e(W2,RDo),e(W2,jO),e(jO,BDo),e(W2,PDo),e(O,IDo),e(O,H2),e(H2,Age),e(Age,qDo),e(H2,NDo),e(H2,DO),e(DO,jDo),e(H2,DDo),e(O,GDo),e(O,U2),e(U2,yge),e(yge,ODo),e(U2,VDo),e(U2,GO),e(GO,XDo),e(U2,zDo),e(O,QDo),e(O,J2),e(J2,Lge),e(Lge,WDo),e(J2,HDo),e(J2,OO),e(OO,UDo),e(J2,JDo),e(O,YDo),e(O,Y2),e(Y2,xge),e(xge,KDo),e(Y2,ZDo),e(Y2,VO),e(VO,eGo),e(Y2,oGo),e(O,rGo),e(O,K2),e(K2,$ge),e($ge,tGo),e(K2,aGo),e(K2,XO),e(XO,nGo),e(K2,sGo),e(O,lGo),e(O,Z2),e(Z2,kge),e(kge,iGo),e(Z2,dGo),e(Z2,zO),e(zO,cGo),e(Z2,fGo),e(O,mGo),e(O,ev),e(ev,Sge),e(Sge,gGo),e(ev,hGo),e(ev,QO),e(QO,pGo),e(ev,uGo),e(O,_Go),e(O,ov),e(ov,Rge),e(Rge,bGo),e(ov,vGo),e(ov,WO),e(WO,FGo),e(ov,TGo),e(O,MGo),e(O,rv),e(rv,Bge),e(Bge,EGo),e(rv,CGo),e(rv,HO),e(HO,wGo),e(rv,AGo),e(O,yGo),e(O,tv),e(tv,Pge),e(Pge,LGo),e(tv,xGo),e(tv,UO),e(UO,$Go),e(tv,kGo),e(O,SGo),e(O,av),e(av,Ige),e(Ige,RGo),e(av,BGo),e(av,JO),e(JO,PGo),e(av,IGo),e(O,qGo),e(O,nv),e(nv,qge),e(qge,NGo),e(nv,jGo),e(nv,YO),e(YO,DGo),e(nv,GGo),e(O,OGo),e(O,sv),e(sv,Nge),e(Nge,VGo),e(sv,XGo),e(sv,KO),e(KO,zGo),e(sv,QGo),e(O,WGo),e(O,lv),e(lv,jge),e(jge,HGo),e(lv,UGo),e(lv,ZO),e(ZO,JGo),e(lv,YGo),e(O,KGo),e(O,iv),e(iv,Dge),e(Dge,ZGo),e(iv,eOo),e(iv,eV),e(eV,oOo),e(iv,rOo),e(O,tOo),e(O,dv),e(dv,Gge),e(Gge,aOo),e(dv,nOo),e(dv,oV),e(oV,sOo),e(dv,lOo),e(O,iOo),e(O,cv),e(cv,Oge),e(Oge,dOo),e(cv,cOo),e(cv,rV),e(rV,fOo),e(cv,mOo),e(O,gOo),e(O,fv),e(fv,Vge),e(Vge,hOo),e(fv,pOo),e(fv,tV),e(tV,uOo),e(fv,_Oo),e(O,bOo),e(O,mv),e(mv,Xge),e(Xge,vOo),e(mv,FOo),e(mv,aV),e(aV,TOo),e(mv,MOo),e(O,EOo),e(O,gv),e(gv,zge),e(zge,COo),e(gv,wOo),e(gv,nV),e(nV,AOo),e(gv,yOo),e(O,LOo),e(O,hv),e(hv,Qge),e(Qge,xOo),e(hv,$Oo),e(hv,sV),e(sV,kOo),e(hv,SOo),e(O,ROo),e(O,pv),e(pv,Wge),e(Wge,BOo),e(pv,POo),e(pv,lV),e(lV,IOo),e(pv,qOo),e(O,NOo),e(O,uv),e(uv,Hge),e(Hge,jOo),e(uv,DOo),e(uv,iV),e(iV,GOo),e(uv,OOo),e(O,VOo),e(O,_v),e(_v,Uge),e(Uge,XOo),e(_v,zOo),e(_v,dV),e(dV,QOo),e(_v,WOo),e(O,HOo),e(O,bv),e(bv,Jge),e(Jge,UOo),e(bv,JOo),e(bv,cV),e(cV,YOo),e(bv,KOo),e(O,ZOo),e(O,vv),e(vv,Yge),e(Yge,eVo),e(vv,oVo),e(vv,fV),e(fV,rVo),e(vv,tVo),e(O,aVo),e(O,Fv),e(Fv,Kge),e(Kge,nVo),e(Fv,sVo),e(Fv,mV),e(mV,lVo),e(Fv,iVo),e(O,dVo),e(O,Tv),e(Tv,Zge),e(Zge,cVo),e(Tv,fVo),e(Tv,gV),e(gV,mVo),e(Tv,gVo),e(O,hVo),e(O,Mv),e(Mv,ehe),e(ehe,pVo),e(Mv,uVo),e(Mv,hV),e(hV,_Vo),e(Mv,bVo),e(O,vVo),e(O,Ev),e(Ev,ohe),e(ohe,FVo),e(Ev,TVo),e(Ev,pV),e(pV,MVo),e(Ev,EVo),e(O,CVo),e(O,Cv),e(Cv,rhe),e(rhe,wVo),e(Cv,AVo),e(Cv,uV),e(uV,yVo),e(Cv,LVo),e(O,xVo),e(O,wv),e(wv,the),e(the,$Vo),e(wv,kVo),e(wv,_V),e(_V,SVo),e(wv,RVo),e(O,BVo),e(O,Av),e(Av,ahe),e(ahe,PVo),e(Av,IVo),e(Av,bV),e(bV,qVo),e(Av,NVo),e(O,jVo),e(O,yv),e(yv,nhe),e(nhe,DVo),e(yv,GVo),e(yv,vV),e(vV,OVo),e(yv,VVo),e(O,XVo),e(O,Lv),e(Lv,she),e(she,zVo),e(Lv,QVo),e(Lv,FV),e(FV,WVo),e(Lv,HVo),e(O,UVo),e(O,xv),e(xv,lhe),e(lhe,JVo),e(xv,YVo),e(xv,TV),e(TV,KVo),e(xv,ZVo),e(O,eXo),e(O,$v),e($v,ihe),e(ihe,oXo),e($v,rXo),e($v,MV),e(MV,tXo),e($v,aXo),e(O,nXo),e(O,kv),e(kv,dhe),e(dhe,sXo),e(kv,lXo),e(kv,EV),e(EV,iXo),e(kv,dXo),e(to,cXo),e(to,Sv),e(Sv,fXo),e(Sv,che),e(che,mXo),e(Sv,gXo),e(Sv,fhe),e(fhe,hXo),e(to,pXo),M(Rv,to,null),b(f,jIe,_),b(f,Ki,_),e(Ki,Bv),e(Bv,mhe),M(Ey,mhe,null),e(Ki,uXo),e(Ki,ghe),e(ghe,_Xo),b(f,DIe,_),b(f,No,_),M(Cy,No,null),e(No,bXo),e(No,Zi),e(Zi,vXo),e(Zi,CV),e(CV,FXo),e(Zi,TXo),e(Zi,wV),e(wV,MXo),e(Zi,EXo),e(No,CXo),e(No,wy),e(wy,wXo),e(wy,hhe),e(hhe,AXo),e(wy,yXo),e(No,LXo),e(No,ft),M(Ay,ft,null),e(ft,xXo),e(ft,phe),e(phe,$Xo),e(ft,kXo),e(ft,ed),e(ed,SXo),e(ed,uhe),e(uhe,RXo),e(ed,BXo),e(ed,AV),e(AV,PXo),e(ed,IXo),e(ft,qXo),M(Pv,ft,null),e(No,NXo),e(No,ao),M(yy,ao,null),e(ao,jXo),e(ao,_he),e(_he,DXo),e(ao,GXo),e(ao,Ia),e(Ia,OXo),e(Ia,bhe),e(bhe,VXo),e(Ia,XXo),e(Ia,vhe),e(vhe,zXo),e(Ia,QXo),e(Ia,Fhe),e(Fhe,WXo),e(Ia,HXo),e(ao,UXo),e(ao,The),e(The,Iv),e(Iv,Mhe),e(Mhe,JXo),e(Iv,YXo),e(Iv,yV),e(yV,KXo),e(Iv,ZXo),e(ao,ezo),e(ao,qv),e(qv,ozo),e(qv,Ehe),e(Ehe,rzo),e(qv,tzo),e(qv,Che),e(Che,azo),e(ao,nzo),M(Nv,ao,null),b(f,GIe,_),b(f,od,_),e(od,jv),e(jv,whe),M(Ly,whe,null),e(od,szo),e(od,Ahe),e(Ahe,lzo),b(f,OIe,_),b(f,jo,_),M(xy,jo,null),e(jo,izo),e(jo,rd),e(rd,dzo),e(rd,LV),e(LV,czo),e(rd,fzo),e(rd,xV),e(xV,mzo),e(rd,gzo),e(jo,hzo),e(jo,$y),e($y,pzo),e($y,yhe),e(yhe,uzo),e($y,_zo),e(jo,bzo),e(jo,mt),M(ky,mt,null),e(mt,vzo),e(mt,Lhe),e(Lhe,Fzo),e(mt,Tzo),e(mt,td),e(td,Mzo),e(td,xhe),e(xhe,Ezo),e(td,Czo),e(td,$V),e($V,wzo),e(td,Azo),e(mt,yzo),M(Dv,mt,null),e(jo,Lzo),e(jo,no),M(Sy,no,null),e(no,xzo),e(no,$he),e($he,$zo),e(no,kzo),e(no,qa),e(qa,Szo),e(qa,khe),e(khe,Rzo),e(qa,Bzo),e(qa,She),e(She,Pzo),e(qa,Izo),e(qa,Rhe),e(Rhe,qzo),e(qa,Nzo),e(no,jzo),e(no,Fe),e(Fe,Gv),e(Gv,Bhe),e(Bhe,Dzo),e(Gv,Gzo),e(Gv,kV),e(kV,Ozo),e(Gv,Vzo),e(Fe,Xzo),e(Fe,Ov),e(Ov,Phe),e(Phe,zzo),e(Ov,Qzo),e(Ov,SV),e(SV,Wzo),e(Ov,Hzo),e(Fe,Uzo),e(Fe,Vv),e(Vv,Ihe),e(Ihe,Jzo),e(Vv,Yzo),e(Vv,RV),e(RV,Kzo),e(Vv,Zzo),e(Fe,eQo),e(Fe,Bs),e(Bs,qhe),e(qhe,oQo),e(Bs,rQo),e(Bs,BV),e(BV,tQo),e(Bs,aQo),e(Bs,PV),e(PV,nQo),e(Bs,sQo),e(Fe,lQo),e(Fe,Xv),e(Xv,Nhe),e(Nhe,iQo),e(Xv,dQo),e(Xv,IV),e(IV,cQo),e(Xv,fQo),e(Fe,mQo),e(Fe,gt),e(gt,jhe),e(jhe,gQo),e(gt,hQo),e(gt,qV),e(qV,pQo),e(gt,uQo),e(gt,NV),e(NV,_Qo),e(gt,bQo),e(gt,jV),e(jV,vQo),e(gt,FQo),e(Fe,TQo),e(Fe,zv),e(zv,Dhe),e(Dhe,MQo),e(zv,EQo),e(zv,DV),e(DV,CQo),e(zv,wQo),e(Fe,AQo),e(Fe,Qv),e(Qv,Ghe),e(Ghe,yQo),e(Qv,LQo),e(Qv,GV),e(GV,xQo),e(Qv,$Qo),e(Fe,kQo),e(Fe,Wv),e(Wv,Ohe),e(Ohe,SQo),e(Wv,RQo),e(Wv,OV),e(OV,BQo),e(Wv,PQo),e(Fe,IQo),e(Fe,Hv),e(Hv,Vhe),e(Vhe,qQo),e(Hv,NQo),e(Hv,VV),e(VV,jQo),e(Hv,DQo),e(Fe,GQo),e(Fe,Uv),e(Uv,Xhe),e(Xhe,OQo),e(Uv,VQo),e(Uv,XV),e(XV,XQo),e(Uv,zQo),e(Fe,QQo),e(Fe,Jv),e(Jv,zhe),e(zhe,WQo),e(Jv,HQo),e(Jv,zV),e(zV,UQo),e(Jv,JQo),e(Fe,YQo),e(Fe,Yv),e(Yv,Qhe),e(Qhe,KQo),e(Yv,ZQo),e(Yv,QV),e(QV,eWo),e(Yv,oWo),e(no,rWo),e(no,Kv),e(Kv,tWo),e(Kv,Whe),e(Whe,aWo),e(Kv,nWo),e(Kv,Hhe),e(Hhe,sWo),e(no,lWo),M(Zv,no,null),b(f,VIe,_),b(f,ad,_),e(ad,eF),e(eF,Uhe),M(Ry,Uhe,null),e(ad,iWo),e(ad,Jhe),e(Jhe,dWo),b(f,XIe,_),b(f,Do,_),M(By,Do,null),e(Do,cWo),e(Do,nd),e(nd,fWo),e(nd,WV),e(WV,mWo),e(nd,gWo),e(nd,HV),e(HV,hWo),e(nd,pWo),e(Do,uWo),e(Do,Py),e(Py,_Wo),e(Py,Yhe),e(Yhe,bWo),e(Py,vWo),e(Do,FWo),e(Do,ht),M(Iy,ht,null),e(ht,TWo),e(ht,Khe),e(Khe,MWo),e(ht,EWo),e(ht,sd),e(sd,CWo),e(sd,Zhe),e(Zhe,wWo),e(sd,AWo),e(sd,UV),e(UV,yWo),e(sd,LWo),e(ht,xWo),M(oF,ht,null),e(Do,$Wo),e(Do,so),M(qy,so,null),e(so,kWo),e(so,epe),e(epe,SWo),e(so,RWo),e(so,Na),e(Na,BWo),e(Na,ope),e(ope,PWo),e(Na,IWo),e(Na,rpe),e(rpe,qWo),e(Na,NWo),e(Na,tpe),e(tpe,jWo),e(Na,DWo),e(so,GWo),e(so,ape),e(ape,rF),e(rF,npe),e(npe,OWo),e(rF,VWo),e(rF,JV),e(JV,XWo),e(rF,zWo),e(so,QWo),e(so,tF),e(tF,WWo),e(tF,spe),e(spe,HWo),e(tF,UWo),e(tF,lpe),e(lpe,JWo),e(so,YWo),M(aF,so,null),b(f,zIe,_),b(f,ld,_),e(ld,nF),e(nF,ipe),M(Ny,ipe,null),e(ld,KWo),e(ld,dpe),e(dpe,ZWo),b(f,QIe,_),b(f,Go,_),M(jy,Go,null),e(Go,eHo),e(Go,id),e(id,oHo),e(id,YV),e(YV,rHo),e(id,tHo),e(id,KV),e(KV,aHo),e(id,nHo),e(Go,sHo),e(Go,Dy),e(Dy,lHo),e(Dy,cpe),e(cpe,iHo),e(Dy,dHo),e(Go,cHo),e(Go,pt),M(Gy,pt,null),e(pt,fHo),e(pt,fpe),e(fpe,mHo),e(pt,gHo),e(pt,dd),e(dd,hHo),e(dd,mpe),e(mpe,pHo),e(dd,uHo),e(dd,ZV),e(ZV,_Ho),e(dd,bHo),e(pt,vHo),M(sF,pt,null),e(Go,FHo),e(Go,lo),M(Oy,lo,null),e(lo,THo),e(lo,gpe),e(gpe,MHo),e(lo,EHo),e(lo,ja),e(ja,CHo),e(ja,hpe),e(hpe,wHo),e(ja,AHo),e(ja,ppe),e(ppe,yHo),e(ja,LHo),e(ja,upe),e(upe,xHo),e(ja,$Ho),e(lo,kHo),e(lo,Ne),e(Ne,lF),e(lF,_pe),e(_pe,SHo),e(lF,RHo),e(lF,eX),e(eX,BHo),e(lF,PHo),e(Ne,IHo),e(Ne,iF),e(iF,bpe),e(bpe,qHo),e(iF,NHo),e(iF,oX),e(oX,jHo),e(iF,DHo),e(Ne,GHo),e(Ne,dF),e(dF,vpe),e(vpe,OHo),e(dF,VHo),e(dF,rX),e(rX,XHo),e(dF,zHo),e(Ne,QHo),e(Ne,cF),e(cF,Fpe),e(Fpe,WHo),e(cF,HHo),e(cF,tX),e(tX,UHo),e(cF,JHo),e(Ne,YHo),e(Ne,fF),e(fF,Tpe),e(Tpe,KHo),e(fF,ZHo),e(fF,aX),e(aX,eUo),e(fF,oUo),e(Ne,rUo),e(Ne,mF),e(mF,Mpe),e(Mpe,tUo),e(mF,aUo),e(mF,nX),e(nX,nUo),e(mF,sUo),e(Ne,lUo),e(Ne,gF),e(gF,Epe),e(Epe,iUo),e(gF,dUo),e(gF,sX),e(sX,cUo),e(gF,fUo),e(Ne,mUo),e(Ne,hF),e(hF,Cpe),e(Cpe,gUo),e(hF,hUo),e(hF,lX),e(lX,pUo),e(hF,uUo),e(lo,_Uo),e(lo,pF),e(pF,bUo),e(pF,wpe),e(wpe,vUo),e(pF,FUo),e(pF,Ape),e(Ape,TUo),e(lo,MUo),M(uF,lo,null),b(f,WIe,_),b(f,cd,_),e(cd,_F),e(_F,ype),M(Vy,ype,null),e(cd,EUo),e(cd,Lpe),e(Lpe,CUo),b(f,HIe,_),b(f,Oo,_),M(Xy,Oo,null),e(Oo,wUo),e(Oo,fd),e(fd,AUo),e(fd,iX),e(iX,yUo),e(fd,LUo),e(fd,dX),e(dX,xUo),e(fd,$Uo),e(Oo,kUo),e(Oo,zy),e(zy,SUo),e(zy,xpe),e(xpe,RUo),e(zy,BUo),e(Oo,PUo),e(Oo,ut),M(Qy,ut,null),e(ut,IUo),e(ut,$pe),e($pe,qUo),e(ut,NUo),e(ut,md),e(md,jUo),e(md,kpe),e(kpe,DUo),e(md,GUo),e(md,cX),e(cX,OUo),e(md,VUo),e(ut,XUo),M(bF,ut,null),e(Oo,zUo),e(Oo,io),M(Wy,io,null),e(io,QUo),e(io,Spe),e(Spe,WUo),e(io,HUo),e(io,Da),e(Da,UUo),e(Da,Rpe),e(Rpe,JUo),e(Da,YUo),e(Da,Bpe),e(Bpe,KUo),e(Da,ZUo),e(Da,Ppe),e(Ppe,eJo),e(Da,oJo),e(io,rJo),e(io,Ga),e(Ga,vF),e(vF,Ipe),e(Ipe,tJo),e(vF,aJo),e(vF,fX),e(fX,nJo),e(vF,sJo),e(Ga,lJo),e(Ga,FF),e(FF,qpe),e(qpe,iJo),e(FF,dJo),e(FF,mX),e(mX,cJo),e(FF,fJo),e(Ga,mJo),e(Ga,TF),e(TF,Npe),e(Npe,gJo),e(TF,hJo),e(TF,gX),e(gX,pJo),e(TF,uJo),e(Ga,_Jo),e(Ga,MF),e(MF,jpe),e(jpe,bJo),e(MF,vJo),e(MF,hX),e(hX,FJo),e(MF,TJo),e(io,MJo),e(io,EF),e(EF,EJo),e(EF,Dpe),e(Dpe,CJo),e(EF,wJo),e(EF,Gpe),e(Gpe,AJo),e(io,yJo),M(CF,io,null),b(f,UIe,_),b(f,gd,_),e(gd,wF),e(wF,Ope),M(Hy,Ope,null),e(gd,LJo),e(gd,Vpe),e(Vpe,xJo),b(f,JIe,_),b(f,Vo,_),M(Uy,Vo,null),e(Vo,$Jo),e(Vo,hd),e(hd,kJo),e(hd,pX),e(pX,SJo),e(hd,RJo),e(hd,uX),e(uX,BJo),e(hd,PJo),e(Vo,IJo),e(Vo,Jy),e(Jy,qJo),e(Jy,Xpe),e(Xpe,NJo),e(Jy,jJo),e(Vo,DJo),e(Vo,_t),M(Yy,_t,null),e(_t,GJo),e(_t,zpe),e(zpe,OJo),e(_t,VJo),e(_t,pd),e(pd,XJo),e(pd,Qpe),e(Qpe,zJo),e(pd,QJo),e(pd,_X),e(_X,WJo),e(pd,HJo),e(_t,UJo),M(AF,_t,null),e(Vo,JJo),e(Vo,co),M(Ky,co,null),e(co,YJo),e(co,Wpe),e(Wpe,KJo),e(co,ZJo),e(co,Oa),e(Oa,eYo),e(Oa,Hpe),e(Hpe,oYo),e(Oa,rYo),e(Oa,Upe),e(Upe,tYo),e(Oa,aYo),e(Oa,Jpe),e(Jpe,nYo),e(Oa,sYo),e(co,lYo),e(co,je),e(je,yF),e(yF,Ype),e(Ype,iYo),e(yF,dYo),e(yF,bX),e(bX,cYo),e(yF,fYo),e(je,mYo),e(je,LF),e(LF,Kpe),e(Kpe,gYo),e(LF,hYo),e(LF,vX),e(vX,pYo),e(LF,uYo),e(je,_Yo),e(je,xF),e(xF,Zpe),e(Zpe,bYo),e(xF,vYo),e(xF,FX),e(FX,FYo),e(xF,TYo),e(je,MYo),e(je,$F),e($F,eue),e(eue,EYo),e($F,CYo),e($F,TX),e(TX,wYo),e($F,AYo),e(je,yYo),e(je,kF),e(kF,oue),e(oue,LYo),e(kF,xYo),e(kF,MX),e(MX,$Yo),e(kF,kYo),e(je,SYo),e(je,SF),e(SF,rue),e(rue,RYo),e(SF,BYo),e(SF,EX),e(EX,PYo),e(SF,IYo),e(je,qYo),e(je,RF),e(RF,tue),e(tue,NYo),e(RF,jYo),e(RF,CX),e(CX,DYo),e(RF,GYo),e(je,OYo),e(je,BF),e(BF,aue),e(aue,VYo),e(BF,XYo),e(BF,wX),e(wX,zYo),e(BF,QYo),e(co,WYo),e(co,PF),e(PF,HYo),e(PF,nue),e(nue,UYo),e(PF,JYo),e(PF,sue),e(sue,YYo),e(co,KYo),M(IF,co,null),b(f,YIe,_),b(f,ud,_),e(ud,qF),e(qF,lue),M(Zy,lue,null),e(ud,ZYo),e(ud,iue),e(iue,eKo),b(f,KIe,_),b(f,Xo,_),M(eL,Xo,null),e(Xo,oKo),e(Xo,_d),e(_d,rKo),e(_d,AX),e(AX,tKo),e(_d,aKo),e(_d,yX),e(yX,nKo),e(_d,sKo),e(Xo,lKo),e(Xo,oL),e(oL,iKo),e(oL,due),e(due,dKo),e(oL,cKo),e(Xo,fKo),e(Xo,bt),M(rL,bt,null),e(bt,mKo),e(bt,cue),e(cue,gKo),e(bt,hKo),e(bt,bd),e(bd,pKo),e(bd,fue),e(fue,uKo),e(bd,_Ko),e(bd,LX),e(LX,bKo),e(bd,vKo),e(bt,FKo),M(NF,bt,null),e(Xo,TKo),e(Xo,fo),M(tL,fo,null),e(fo,MKo),e(fo,mue),e(mue,EKo),e(fo,CKo),e(fo,Va),e(Va,wKo),e(Va,gue),e(gue,AKo),e(Va,yKo),e(Va,hue),e(hue,LKo),e(Va,xKo),e(Va,pue),e(pue,$Ko),e(Va,kKo),e(fo,SKo),e(fo,aL),e(aL,jF),e(jF,uue),e(uue,RKo),e(jF,BKo),e(jF,xX),e(xX,PKo),e(jF,IKo),e(aL,qKo),e(aL,DF),e(DF,_ue),e(_ue,NKo),e(DF,jKo),e(DF,$X),e($X,DKo),e(DF,GKo),e(fo,OKo),e(fo,GF),e(GF,VKo),e(GF,bue),e(bue,XKo),e(GF,zKo),e(GF,vue),e(vue,QKo),e(fo,WKo),M(OF,fo,null),b(f,ZIe,_),b(f,vd,_),e(vd,VF),e(VF,Fue),M(nL,Fue,null),e(vd,HKo),e(vd,Tue),e(Tue,UKo),b(f,eqe,_),b(f,zo,_),M(sL,zo,null),e(zo,JKo),e(zo,Fd),e(Fd,YKo),e(Fd,kX),e(kX,KKo),e(Fd,ZKo),e(Fd,SX),e(SX,eZo),e(Fd,oZo),e(zo,rZo),e(zo,lL),e(lL,tZo),e(lL,Mue),e(Mue,aZo),e(lL,nZo),e(zo,sZo),e(zo,vt),M(iL,vt,null),e(vt,lZo),e(vt,Eue),e(Eue,iZo),e(vt,dZo),e(vt,Td),e(Td,cZo),e(Td,Cue),e(Cue,fZo),e(Td,mZo),e(Td,RX),e(RX,gZo),e(Td,hZo),e(vt,pZo),M(XF,vt,null),e(zo,uZo),e(zo,mo),M(dL,mo,null),e(mo,_Zo),e(mo,wue),e(wue,bZo),e(mo,vZo),e(mo,Xa),e(Xa,FZo),e(Xa,Aue),e(Aue,TZo),e(Xa,MZo),e(Xa,yue),e(yue,EZo),e(Xa,CZo),e(Xa,Lue),e(Lue,wZo),e(Xa,AZo),e(mo,yZo),e(mo,za),e(za,zF),e(zF,xue),e(xue,LZo),e(zF,xZo),e(zF,BX),e(BX,$Zo),e(zF,kZo),e(za,SZo),e(za,QF),e(QF,$ue),e($ue,RZo),e(QF,BZo),e(QF,PX),e(PX,PZo),e(QF,IZo),e(za,qZo),e(za,WF),e(WF,kue),e(kue,NZo),e(WF,jZo),e(WF,IX),e(IX,DZo),e(WF,GZo),e(za,OZo),e(za,HF),e(HF,Sue),e(Sue,VZo),e(HF,XZo),e(HF,qX),e(qX,zZo),e(HF,QZo),e(mo,WZo),e(mo,UF),e(UF,HZo),e(UF,Rue),e(Rue,UZo),e(UF,JZo),e(UF,Bue),e(Bue,YZo),e(mo,KZo),M(JF,mo,null),b(f,oqe,_),b(f,Md,_),e(Md,YF),e(YF,Pue),M(cL,Pue,null),e(Md,ZZo),e(Md,Iue),e(Iue,eer),b(f,rqe,_),b(f,Qo,_),M(fL,Qo,null),e(Qo,oer),e(Qo,Ed),e(Ed,rer),e(Ed,NX),e(NX,ter),e(Ed,aer),e(Ed,jX),e(jX,ner),e(Ed,ser),e(Qo,ler),e(Qo,mL),e(mL,ier),e(mL,que),e(que,der),e(mL,cer),e(Qo,fer),e(Qo,Ft),M(gL,Ft,null),e(Ft,mer),e(Ft,Nue),e(Nue,ger),e(Ft,her),e(Ft,Cd),e(Cd,per),e(Cd,jue),e(jue,uer),e(Cd,_er),e(Cd,DX),e(DX,ber),e(Cd,ver),e(Ft,Fer),M(KF,Ft,null),e(Qo,Ter),e(Qo,go),M(hL,go,null),e(go,Mer),e(go,Due),e(Due,Eer),e(go,Cer),e(go,Qa),e(Qa,wer),e(Qa,Gue),e(Gue,Aer),e(Qa,yer),e(Qa,Oue),e(Oue,Ler),e(Qa,xer),e(Qa,Vue),e(Vue,$er),e(Qa,ker),e(go,Ser),e(go,wd),e(wd,ZF),e(ZF,Xue),e(Xue,Rer),e(ZF,Ber),e(ZF,GX),e(GX,Per),e(ZF,Ier),e(wd,qer),e(wd,e6),e(e6,zue),e(zue,Ner),e(e6,jer),e(e6,OX),e(OX,Der),e(e6,Ger),e(wd,Oer),e(wd,o6),e(o6,Que),e(Que,Ver),e(o6,Xer),e(o6,VX),e(VX,zer),e(o6,Qer),e(go,Wer),e(go,r6),e(r6,Her),e(r6,Wue),e(Wue,Uer),e(r6,Jer),e(r6,Hue),e(Hue,Yer),e(go,Ker),M(t6,go,null),b(f,tqe,_),b(f,Ad,_),e(Ad,a6),e(a6,Uue),M(pL,Uue,null),e(Ad,Zer),e(Ad,Jue),e(Jue,eor),b(f,aqe,_),b(f,Wo,_),M(uL,Wo,null),e(Wo,oor),e(Wo,yd),e(yd,ror),e(yd,XX),e(XX,tor),e(yd,aor),e(yd,zX),e(zX,nor),e(yd,sor),e(Wo,lor),e(Wo,_L),e(_L,ior),e(_L,Yue),e(Yue,dor),e(_L,cor),e(Wo,mor),e(Wo,Tt),M(bL,Tt,null),e(Tt,gor),e(Tt,Kue),e(Kue,hor),e(Tt,por),e(Tt,Ld),e(Ld,uor),e(Ld,Zue),e(Zue,_or),e(Ld,bor),e(Ld,QX),e(QX,vor),e(Ld,For),e(Tt,Tor),M(n6,Tt,null),e(Wo,Mor),e(Wo,ho),M(vL,ho,null),e(ho,Eor),e(ho,e_e),e(e_e,Cor),e(ho,wor),e(ho,Wa),e(Wa,Aor),e(Wa,o_e),e(o_e,yor),e(Wa,Lor),e(Wa,r_e),e(r_e,xor),e(Wa,$or),e(Wa,t_e),e(t_e,kor),e(Wa,Sor),e(ho,Ror),e(ho,FL),e(FL,s6),e(s6,a_e),e(a_e,Bor),e(s6,Por),e(s6,WX),e(WX,Ior),e(s6,qor),e(FL,Nor),e(FL,l6),e(l6,n_e),e(n_e,jor),e(l6,Dor),e(l6,HX),e(HX,Gor),e(l6,Oor),e(ho,Vor),e(ho,i6),e(i6,Xor),e(i6,s_e),e(s_e,zor),e(i6,Qor),e(i6,l_e),e(l_e,Wor),e(ho,Hor),M(d6,ho,null),b(f,nqe,_),b(f,xd,_),e(xd,c6),e(c6,i_e),M(TL,i_e,null),e(xd,Uor),e(xd,d_e),e(d_e,Jor),b(f,sqe,_),b(f,Ho,_),M(ML,Ho,null),e(Ho,Yor),e(Ho,$d),e($d,Kor),e($d,UX),e(UX,Zor),e($d,err),e($d,JX),e(JX,orr),e($d,rrr),e(Ho,trr),e(Ho,EL),e(EL,arr),e(EL,c_e),e(c_e,nrr),e(EL,srr),e(Ho,lrr),e(Ho,Mt),M(CL,Mt,null),e(Mt,irr),e(Mt,f_e),e(f_e,drr),e(Mt,crr),e(Mt,kd),e(kd,frr),e(kd,m_e),e(m_e,mrr),e(kd,grr),e(kd,YX),e(YX,hrr),e(kd,prr),e(Mt,urr),M(f6,Mt,null),e(Ho,_rr),e(Ho,po),M(wL,po,null),e(po,brr),e(po,g_e),e(g_e,vrr),e(po,Frr),e(po,Ha),e(Ha,Trr),e(Ha,h_e),e(h_e,Mrr),e(Ha,Err),e(Ha,p_e),e(p_e,Crr),e(Ha,wrr),e(Ha,u_e),e(u_e,Arr),e(Ha,yrr),e(po,Lrr),e(po,__e),e(__e,m6),e(m6,b_e),e(b_e,xrr),e(m6,$rr),e(m6,KX),e(KX,krr),e(m6,Srr),e(po,Rrr),e(po,g6),e(g6,Brr),e(g6,v_e),e(v_e,Prr),e(g6,Irr),e(g6,F_e),e(F_e,qrr),e(po,Nrr),M(h6,po,null),b(f,lqe,_),b(f,Sd,_),e(Sd,p6),e(p6,T_e),M(AL,T_e,null),e(Sd,jrr),e(Sd,M_e),e(M_e,Drr),b(f,iqe,_),b(f,Uo,_),M(yL,Uo,null),e(Uo,Grr),e(Uo,Rd),e(Rd,Orr),e(Rd,ZX),e(ZX,Vrr),e(Rd,Xrr),e(Rd,ez),e(ez,zrr),e(Rd,Qrr),e(Uo,Wrr),e(Uo,LL),e(LL,Hrr),e(LL,E_e),e(E_e,Urr),e(LL,Jrr),e(Uo,Yrr),e(Uo,Et),M(xL,Et,null),e(Et,Krr),e(Et,C_e),e(C_e,Zrr),e(Et,etr),e(Et,Bd),e(Bd,otr),e(Bd,w_e),e(w_e,rtr),e(Bd,ttr),e(Bd,oz),e(oz,atr),e(Bd,ntr),e(Et,str),M(u6,Et,null),e(Uo,ltr),e(Uo,uo),M($L,uo,null),e(uo,itr),e(uo,A_e),e(A_e,dtr),e(uo,ctr),e(uo,Ua),e(Ua,ftr),e(Ua,y_e),e(y_e,mtr),e(Ua,gtr),e(Ua,L_e),e(L_e,htr),e(Ua,ptr),e(Ua,x_e),e(x_e,utr),e(Ua,_tr),e(uo,btr),e(uo,Ja),e(Ja,_6),e(_6,$_e),e($_e,vtr),e(_6,Ftr),e(_6,rz),e(rz,Ttr),e(_6,Mtr),e(Ja,Etr),e(Ja,b6),e(b6,k_e),e(k_e,Ctr),e(b6,wtr),e(b6,tz),e(tz,Atr),e(b6,ytr),e(Ja,Ltr),e(Ja,v6),e(v6,S_e),e(S_e,xtr),e(v6,$tr),e(v6,az),e(az,ktr),e(v6,Str),e(Ja,Rtr),e(Ja,F6),e(F6,R_e),e(R_e,Btr),e(F6,Ptr),e(F6,nz),e(nz,Itr),e(F6,qtr),e(uo,Ntr),e(uo,T6),e(T6,jtr),e(T6,B_e),e(B_e,Dtr),e(T6,Gtr),e(T6,P_e),e(P_e,Otr),e(uo,Vtr),M(M6,uo,null),b(f,dqe,_),b(f,Pd,_),e(Pd,E6),e(E6,I_e),M(kL,I_e,null),e(Pd,Xtr),e(Pd,q_e),e(q_e,ztr),b(f,cqe,_),b(f,Jo,_),M(SL,Jo,null),e(Jo,Qtr),e(Jo,Id),e(Id,Wtr),e(Id,sz),e(sz,Htr),e(Id,Utr),e(Id,lz),e(lz,Jtr),e(Id,Ytr),e(Jo,Ktr),e(Jo,RL),e(RL,Ztr),e(RL,N_e),e(N_e,ear),e(RL,oar),e(Jo,rar),e(Jo,Ct),M(BL,Ct,null),e(Ct,tar),e(Ct,j_e),e(j_e,aar),e(Ct,nar),e(Ct,qd),e(qd,sar),e(qd,D_e),e(D_e,lar),e(qd,iar),e(qd,iz),e(iz,dar),e(qd,car),e(Ct,far),M(C6,Ct,null),e(Jo,mar),e(Jo,_o),M(PL,_o,null),e(_o,gar),e(_o,G_e),e(G_e,har),e(_o,par),e(_o,Ya),e(Ya,uar),e(Ya,O_e),e(O_e,_ar),e(Ya,bar),e(Ya,V_e),e(V_e,Far),e(Ya,Tar),e(Ya,X_e),e(X_e,Mar),e(Ya,Ear),e(_o,Car),e(_o,z_e),e(z_e,w6),e(w6,Q_e),e(Q_e,war),e(w6,Aar),e(w6,dz),e(dz,yar),e(w6,Lar),e(_o,xar),e(_o,A6),e(A6,$ar),e(A6,W_e),e(W_e,kar),e(A6,Sar),e(A6,H_e),e(H_e,Rar),e(_o,Bar),M(y6,_o,null),b(f,fqe,_),b(f,Nd,_),e(Nd,L6),e(L6,U_e),M(IL,U_e,null),e(Nd,Par),e(Nd,J_e),e(J_e,Iar),b(f,mqe,_),b(f,Yo,_),M(qL,Yo,null),e(Yo,qar),e(Yo,jd),e(jd,Nar),e(jd,cz),e(cz,jar),e(jd,Dar),e(jd,fz),e(fz,Gar),e(jd,Oar),e(Yo,Var),e(Yo,NL),e(NL,Xar),e(NL,Y_e),e(Y_e,zar),e(NL,Qar),e(Yo,War),e(Yo,wt),M(jL,wt,null),e(wt,Har),e(wt,K_e),e(K_e,Uar),e(wt,Jar),e(wt,Dd),e(Dd,Yar),e(Dd,Z_e),e(Z_e,Kar),e(Dd,Zar),e(Dd,mz),e(mz,enr),e(Dd,onr),e(wt,rnr),M(x6,wt,null),e(Yo,tnr),e(Yo,wr),M(DL,wr,null),e(wr,anr),e(wr,e0e),e(e0e,nnr),e(wr,snr),e(wr,Ka),e(Ka,lnr),e(Ka,o0e),e(o0e,inr),e(Ka,dnr),e(Ka,r0e),e(r0e,cnr),e(Ka,fnr),e(Ka,t0e),e(t0e,mnr),e(Ka,gnr),e(wr,hnr),e(wr,j),e(j,$6),e($6,a0e),e(a0e,pnr),e($6,unr),e($6,gz),e(gz,_nr),e($6,bnr),e(j,vnr),e(j,k6),e(k6,n0e),e(n0e,Fnr),e(k6,Tnr),e(k6,hz),e(hz,Mnr),e(k6,Enr),e(j,Cnr),e(j,S6),e(S6,s0e),e(s0e,wnr),e(S6,Anr),e(S6,pz),e(pz,ynr),e(S6,Lnr),e(j,xnr),e(j,R6),e(R6,l0e),e(l0e,$nr),e(R6,knr),e(R6,uz),e(uz,Snr),e(R6,Rnr),e(j,Bnr),e(j,B6),e(B6,i0e),e(i0e,Pnr),e(B6,Inr),e(B6,_z),e(_z,qnr),e(B6,Nnr),e(j,jnr),e(j,P6),e(P6,d0e),e(d0e,Dnr),e(P6,Gnr),e(P6,bz),e(bz,Onr),e(P6,Vnr),e(j,Xnr),e(j,I6),e(I6,c0e),e(c0e,znr),e(I6,Qnr),e(I6,vz),e(vz,Wnr),e(I6,Hnr),e(j,Unr),e(j,q6),e(q6,f0e),e(f0e,Jnr),e(q6,Ynr),e(q6,Fz),e(Fz,Knr),e(q6,Znr),e(j,esr),e(j,N6),e(N6,m0e),e(m0e,osr),e(N6,rsr),e(N6,Tz),e(Tz,tsr),e(N6,asr),e(j,nsr),e(j,j6),e(j6,g0e),e(g0e,ssr),e(j6,lsr),e(j6,Mz),e(Mz,isr),e(j6,dsr),e(j,csr),e(j,D6),e(D6,h0e),e(h0e,fsr),e(D6,msr),e(D6,Ez),e(Ez,gsr),e(D6,hsr),e(j,psr),e(j,G6),e(G6,p0e),e(p0e,usr),e(G6,_sr),e(G6,Cz),e(Cz,bsr),e(G6,vsr),e(j,Fsr),e(j,O6),e(O6,u0e),e(u0e,Tsr),e(O6,Msr),e(O6,wz),e(wz,Esr),e(O6,Csr),e(j,wsr),e(j,V6),e(V6,_0e),e(_0e,Asr),e(V6,ysr),e(V6,Az),e(Az,Lsr),e(V6,xsr),e(j,$sr),e(j,X6),e(X6,b0e),e(b0e,ksr),e(X6,Ssr),e(X6,yz),e(yz,Rsr),e(X6,Bsr),e(j,Psr),e(j,z6),e(z6,v0e),e(v0e,Isr),e(z6,qsr),e(z6,Lz),e(Lz,Nsr),e(z6,jsr),e(j,Dsr),e(j,Q6),e(Q6,F0e),e(F0e,Gsr),e(Q6,Osr),e(Q6,xz),e(xz,Vsr),e(Q6,Xsr),e(j,zsr),e(j,Ps),e(Ps,T0e),e(T0e,Qsr),e(Ps,Wsr),e(Ps,$z),e($z,Hsr),e(Ps,Usr),e(Ps,kz),e(kz,Jsr),e(Ps,Ysr),e(j,Ksr),e(j,W6),e(W6,M0e),e(M0e,Zsr),e(W6,elr),e(W6,Sz),e(Sz,olr),e(W6,rlr),e(j,tlr),e(j,H6),e(H6,E0e),e(E0e,alr),e(H6,nlr),e(H6,Rz),e(Rz,slr),e(H6,llr),e(j,ilr),e(j,U6),e(U6,C0e),e(C0e,dlr),e(U6,clr),e(U6,Bz),e(Bz,flr),e(U6,mlr),e(j,glr),e(j,J6),e(J6,w0e),e(w0e,hlr),e(J6,plr),e(J6,Pz),e(Pz,ulr),e(J6,_lr),e(j,blr),e(j,Y6),e(Y6,A0e),e(A0e,vlr),e(Y6,Flr),e(Y6,Iz),e(Iz,Tlr),e(Y6,Mlr),e(j,Elr),e(j,K6),e(K6,y0e),e(y0e,Clr),e(K6,wlr),e(K6,qz),e(qz,Alr),e(K6,ylr),e(j,Llr),e(j,Z6),e(Z6,L0e),e(L0e,xlr),e(Z6,$lr),e(Z6,Nz),e(Nz,klr),e(Z6,Slr),e(j,Rlr),e(j,eT),e(eT,x0e),e(x0e,Blr),e(eT,Plr),e(eT,jz),e(jz,Ilr),e(eT,qlr),e(j,Nlr),e(j,oT),e(oT,$0e),e($0e,jlr),e(oT,Dlr),e(oT,Dz),e(Dz,Glr),e(oT,Olr),e(j,Vlr),e(j,rT),e(rT,k0e),e(k0e,Xlr),e(rT,zlr),e(rT,Gz),e(Gz,Qlr),e(rT,Wlr),e(j,Hlr),e(j,tT),e(tT,S0e),e(S0e,Ulr),e(tT,Jlr),e(tT,Oz),e(Oz,Ylr),e(tT,Klr),e(j,Zlr),e(j,aT),e(aT,R0e),e(R0e,eir),e(aT,oir),e(aT,Vz),e(Vz,rir),e(aT,tir),e(j,air),e(j,nT),e(nT,B0e),e(B0e,nir),e(nT,sir),e(nT,Xz),e(Xz,lir),e(nT,iir),e(j,dir),e(j,sT),e(sT,P0e),e(P0e,cir),e(sT,fir),e(sT,zz),e(zz,mir),e(sT,gir),e(j,hir),e(j,lT),e(lT,I0e),e(I0e,pir),e(lT,uir),e(lT,Qz),e(Qz,_ir),e(lT,bir),e(j,vir),e(j,iT),e(iT,q0e),e(q0e,Fir),e(iT,Tir),e(iT,Wz),e(Wz,Mir),e(iT,Eir),e(j,Cir),e(j,dT),e(dT,N0e),e(N0e,wir),e(dT,Air),e(dT,Hz),e(Hz,yir),e(dT,Lir),e(j,xir),e(j,cT),e(cT,j0e),e(j0e,$ir),e(cT,kir),e(cT,Uz),e(Uz,Sir),e(cT,Rir),e(j,Bir),e(j,fT),e(fT,D0e),e(D0e,Pir),e(fT,Iir),e(fT,Jz),e(Jz,qir),e(fT,Nir),e(j,jir),e(j,mT),e(mT,G0e),e(G0e,Dir),e(mT,Gir),e(mT,Yz),e(Yz,Oir),e(mT,Vir),e(j,Xir),e(j,gT),e(gT,O0e),e(O0e,zir),e(gT,Qir),e(gT,Kz),e(Kz,Wir),e(gT,Hir),e(j,Uir),e(j,hT),e(hT,V0e),e(V0e,Jir),e(hT,Yir),e(hT,Zz),e(Zz,Kir),e(hT,Zir),e(j,edr),e(j,pT),e(pT,X0e),e(X0e,odr),e(pT,rdr),e(pT,eQ),e(eQ,tdr),e(pT,adr),e(j,ndr),e(j,uT),e(uT,z0e),e(z0e,sdr),e(uT,ldr),e(uT,oQ),e(oQ,idr),e(uT,ddr),e(j,cdr),e(j,_T),e(_T,Q0e),e(Q0e,fdr),e(_T,mdr),e(_T,rQ),e(rQ,gdr),e(_T,hdr),e(j,pdr),e(j,bT),e(bT,W0e),e(W0e,udr),e(bT,_dr),e(bT,tQ),e(tQ,bdr),e(bT,vdr),e(j,Fdr),e(j,vT),e(vT,H0e),e(H0e,Tdr),e(vT,Mdr),e(vT,aQ),e(aQ,Edr),e(vT,Cdr),e(wr,wdr),M(FT,wr,null),b(f,gqe,_),b(f,Gd,_),e(Gd,TT),e(TT,U0e),M(GL,U0e,null),e(Gd,Adr),e(Gd,J0e),e(J0e,ydr),b(f,hqe,_),b(f,Ko,_),M(OL,Ko,null),e(Ko,Ldr),e(Ko,Od),e(Od,xdr),e(Od,nQ),e(nQ,$dr),e(Od,kdr),e(Od,sQ),e(sQ,Sdr),e(Od,Rdr),e(Ko,Bdr),e(Ko,VL),e(VL,Pdr),e(VL,Y0e),e(Y0e,Idr),e(VL,qdr),e(Ko,Ndr),e(Ko,At),M(XL,At,null),e(At,jdr),e(At,K0e),e(K0e,Ddr),e(At,Gdr),e(At,Vd),e(Vd,Odr),e(Vd,Z0e),e(Z0e,Vdr),e(Vd,Xdr),e(Vd,lQ),e(lQ,zdr),e(Vd,Qdr),e(At,Wdr),M(MT,At,null),e(Ko,Hdr),e(Ko,Ar),M(zL,Ar,null),e(Ar,Udr),e(Ar,e1e),e(e1e,Jdr),e(Ar,Ydr),e(Ar,Za),e(Za,Kdr),e(Za,o1e),e(o1e,Zdr),e(Za,ecr),e(Za,r1e),e(r1e,ocr),e(Za,rcr),e(Za,t1e),e(t1e,tcr),e(Za,acr),e(Ar,ncr),e(Ar,se),e(se,ET),e(ET,a1e),e(a1e,scr),e(ET,lcr),e(ET,iQ),e(iQ,icr),e(ET,dcr),e(se,ccr),e(se,CT),e(CT,n1e),e(n1e,fcr),e(CT,mcr),e(CT,dQ),e(dQ,gcr),e(CT,hcr),e(se,pcr),e(se,wT),e(wT,s1e),e(s1e,ucr),e(wT,_cr),e(wT,cQ),e(cQ,bcr),e(wT,vcr),e(se,Fcr),e(se,AT),e(AT,l1e),e(l1e,Tcr),e(AT,Mcr),e(AT,fQ),e(fQ,Ecr),e(AT,Ccr),e(se,wcr),e(se,yT),e(yT,i1e),e(i1e,Acr),e(yT,ycr),e(yT,mQ),e(mQ,Lcr),e(yT,xcr),e(se,$cr),e(se,LT),e(LT,d1e),e(d1e,kcr),e(LT,Scr),e(LT,gQ),e(gQ,Rcr),e(LT,Bcr),e(se,Pcr),e(se,xT),e(xT,c1e),e(c1e,Icr),e(xT,qcr),e(xT,hQ),e(hQ,Ncr),e(xT,jcr),e(se,Dcr),e(se,$T),e($T,f1e),e(f1e,Gcr),e($T,Ocr),e($T,pQ),e(pQ,Vcr),e($T,Xcr),e(se,zcr),e(se,kT),e(kT,m1e),e(m1e,Qcr),e(kT,Wcr),e(kT,uQ),e(uQ,Hcr),e(kT,Ucr),e(se,Jcr),e(se,ST),e(ST,g1e),e(g1e,Ycr),e(ST,Kcr),e(ST,_Q),e(_Q,Zcr),e(ST,efr),e(se,ofr),e(se,RT),e(RT,h1e),e(h1e,rfr),e(RT,tfr),e(RT,bQ),e(bQ,afr),e(RT,nfr),e(se,sfr),e(se,BT),e(BT,p1e),e(p1e,lfr),e(BT,ifr),e(BT,vQ),e(vQ,dfr),e(BT,cfr),e(se,ffr),e(se,PT),e(PT,u1e),e(u1e,mfr),e(PT,gfr),e(PT,FQ),e(FQ,hfr),e(PT,pfr),e(se,ufr),e(se,IT),e(IT,_1e),e(_1e,_fr),e(IT,bfr),e(IT,TQ),e(TQ,vfr),e(IT,Ffr),e(se,Tfr),e(se,qT),e(qT,b1e),e(b1e,Mfr),e(qT,Efr),e(qT,MQ),e(MQ,Cfr),e(qT,wfr),e(se,Afr),e(se,NT),e(NT,v1e),e(v1e,yfr),e(NT,Lfr),e(NT,EQ),e(EQ,xfr),e(NT,$fr),e(se,kfr),e(se,jT),e(jT,F1e),e(F1e,Sfr),e(jT,Rfr),e(jT,CQ),e(CQ,Bfr),e(jT,Pfr),e(se,Ifr),e(se,DT),e(DT,T1e),e(T1e,qfr),e(DT,Nfr),e(DT,wQ),e(wQ,jfr),e(DT,Dfr),e(se,Gfr),e(se,GT),e(GT,M1e),e(M1e,Ofr),e(GT,Vfr),e(GT,AQ),e(AQ,Xfr),e(GT,zfr),e(se,Qfr),e(se,OT),e(OT,E1e),e(E1e,Wfr),e(OT,Hfr),e(OT,yQ),e(yQ,Ufr),e(OT,Jfr),e(se,Yfr),e(se,VT),e(VT,C1e),e(C1e,Kfr),e(VT,Zfr),e(VT,LQ),e(LQ,emr),e(VT,omr),e(se,rmr),e(se,XT),e(XT,w1e),e(w1e,tmr),e(XT,amr),e(XT,xQ),e(xQ,nmr),e(XT,smr),e(se,lmr),e(se,zT),e(zT,A1e),e(A1e,imr),e(zT,dmr),e(zT,$Q),e($Q,cmr),e(zT,fmr),e(Ar,mmr),M(QT,Ar,null),b(f,pqe,_),b(f,Xd,_),e(Xd,WT),e(WT,y1e),M(QL,y1e,null),e(Xd,gmr),e(Xd,L1e),e(L1e,hmr),b(f,uqe,_),b(f,Zo,_),M(WL,Zo,null),e(Zo,pmr),e(Zo,zd),e(zd,umr),e(zd,kQ),e(kQ,_mr),e(zd,bmr),e(zd,SQ),e(SQ,vmr),e(zd,Fmr),e(Zo,Tmr),e(Zo,HL),e(HL,Mmr),e(HL,x1e),e(x1e,Emr),e(HL,Cmr),e(Zo,wmr),e(Zo,yt),M(UL,yt,null),e(yt,Amr),e(yt,$1e),e($1e,ymr),e(yt,Lmr),e(yt,Qd),e(Qd,xmr),e(Qd,k1e),e(k1e,$mr),e(Qd,kmr),e(Qd,RQ),e(RQ,Smr),e(Qd,Rmr),e(yt,Bmr),M(HT,yt,null),e(Zo,Pmr),e(Zo,yr),M(JL,yr,null),e(yr,Imr),e(yr,S1e),e(S1e,qmr),e(yr,Nmr),e(yr,en),e(en,jmr),e(en,R1e),e(R1e,Dmr),e(en,Gmr),e(en,B1e),e(B1e,Omr),e(en,Vmr),e(en,P1e),e(P1e,Xmr),e(en,zmr),e(yr,Qmr),e(yr,Te),e(Te,UT),e(UT,I1e),e(I1e,Wmr),e(UT,Hmr),e(UT,BQ),e(BQ,Umr),e(UT,Jmr),e(Te,Ymr),e(Te,JT),e(JT,q1e),e(q1e,Kmr),e(JT,Zmr),e(JT,PQ),e(PQ,egr),e(JT,ogr),e(Te,rgr),e(Te,YT),e(YT,N1e),e(N1e,tgr),e(YT,agr),e(YT,IQ),e(IQ,ngr),e(YT,sgr),e(Te,lgr),e(Te,KT),e(KT,j1e),e(j1e,igr),e(KT,dgr),e(KT,qQ),e(qQ,cgr),e(KT,fgr),e(Te,mgr),e(Te,ZT),e(ZT,D1e),e(D1e,ggr),e(ZT,hgr),e(ZT,NQ),e(NQ,pgr),e(ZT,ugr),e(Te,_gr),e(Te,e7),e(e7,G1e),e(G1e,bgr),e(e7,vgr),e(e7,jQ),e(jQ,Fgr),e(e7,Tgr),e(Te,Mgr),e(Te,o7),e(o7,O1e),e(O1e,Egr),e(o7,Cgr),e(o7,DQ),e(DQ,wgr),e(o7,Agr),e(Te,ygr),e(Te,r7),e(r7,V1e),e(V1e,Lgr),e(r7,xgr),e(r7,GQ),e(GQ,$gr),e(r7,kgr),e(Te,Sgr),e(Te,t7),e(t7,X1e),e(X1e,Rgr),e(t7,Bgr),e(t7,OQ),e(OQ,Pgr),e(t7,Igr),e(Te,qgr),e(Te,a7),e(a7,z1e),e(z1e,Ngr),e(a7,jgr),e(a7,VQ),e(VQ,Dgr),e(a7,Ggr),e(Te,Ogr),e(Te,n7),e(n7,Q1e),e(Q1e,Vgr),e(n7,Xgr),e(n7,XQ),e(XQ,zgr),e(n7,Qgr),e(Te,Wgr),e(Te,s7),e(s7,W1e),e(W1e,Hgr),e(s7,Ugr),e(s7,zQ),e(zQ,Jgr),e(s7,Ygr),e(yr,Kgr),M(l7,yr,null),b(f,_qe,_),b(f,Wd,_),e(Wd,i7),e(i7,H1e),M(YL,H1e,null),e(Wd,Zgr),e(Wd,U1e),e(U1e,ehr),b(f,bqe,_),b(f,er,_),M(KL,er,null),e(er,ohr),e(er,Hd),e(Hd,rhr),e(Hd,QQ),e(QQ,thr),e(Hd,ahr),e(Hd,WQ),e(WQ,nhr),e(Hd,shr),e(er,lhr),e(er,ZL),e(ZL,ihr),e(ZL,J1e),e(J1e,dhr),e(ZL,chr),e(er,fhr),e(er,Lt),M(e8,Lt,null),e(Lt,mhr),e(Lt,Y1e),e(Y1e,ghr),e(Lt,hhr),e(Lt,Ud),e(Ud,phr),e(Ud,K1e),e(K1e,uhr),e(Ud,_hr),e(Ud,HQ),e(HQ,bhr),e(Ud,vhr),e(Lt,Fhr),M(d7,Lt,null),e(er,Thr),e(er,Lr),M(o8,Lr,null),e(Lr,Mhr),e(Lr,Z1e),e(Z1e,Ehr),e(Lr,Chr),e(Lr,on),e(on,whr),e(on,ebe),e(ebe,Ahr),e(on,yhr),e(on,obe),e(obe,Lhr),e(on,xhr),e(on,rbe),e(rbe,$hr),e(on,khr),e(Lr,Shr),e(Lr,Jd),e(Jd,c7),e(c7,tbe),e(tbe,Rhr),e(c7,Bhr),e(c7,UQ),e(UQ,Phr),e(c7,Ihr),e(Jd,qhr),e(Jd,f7),e(f7,abe),e(abe,Nhr),e(f7,jhr),e(f7,JQ),e(JQ,Dhr),e(f7,Ghr),e(Jd,Ohr),e(Jd,m7),e(m7,nbe),e(nbe,Vhr),e(m7,Xhr),e(m7,YQ),e(YQ,zhr),e(m7,Qhr),e(Lr,Whr),M(g7,Lr,null),b(f,vqe,_),b(f,Yd,_),e(Yd,h7),e(h7,sbe),M(r8,sbe,null),e(Yd,Hhr),e(Yd,lbe),e(lbe,Uhr),b(f,Fqe,_),b(f,or,_),M(t8,or,null),e(or,Jhr),e(or,Kd),e(Kd,Yhr),e(Kd,KQ),e(KQ,Khr),e(Kd,Zhr),e(Kd,ZQ),e(ZQ,epr),e(Kd,opr),e(or,rpr),e(or,a8),e(a8,tpr),e(a8,ibe),e(ibe,apr),e(a8,npr),e(or,spr),e(or,xt),M(n8,xt,null),e(xt,lpr),e(xt,dbe),e(dbe,ipr),e(xt,dpr),e(xt,Zd),e(Zd,cpr),e(Zd,cbe),e(cbe,fpr),e(Zd,mpr),e(Zd,eW),e(eW,gpr),e(Zd,hpr),e(xt,ppr),M(p7,xt,null),e(or,upr),e(or,xr),M(s8,xr,null),e(xr,_pr),e(xr,fbe),e(fbe,bpr),e(xr,vpr),e(xr,rn),e(rn,Fpr),e(rn,mbe),e(mbe,Tpr),e(rn,Mpr),e(rn,gbe),e(gbe,Epr),e(rn,Cpr),e(rn,hbe),e(hbe,wpr),e(rn,Apr),e(xr,ypr),e(xr,ie),e(ie,u7),e(u7,pbe),e(pbe,Lpr),e(u7,xpr),e(u7,oW),e(oW,$pr),e(u7,kpr),e(ie,Spr),e(ie,_7),e(_7,ube),e(ube,Rpr),e(_7,Bpr),e(_7,rW),e(rW,Ppr),e(_7,Ipr),e(ie,qpr),e(ie,b7),e(b7,_be),e(_be,Npr),e(b7,jpr),e(b7,tW),e(tW,Dpr),e(b7,Gpr),e(ie,Opr),e(ie,v7),e(v7,bbe),e(bbe,Vpr),e(v7,Xpr),e(v7,aW),e(aW,zpr),e(v7,Qpr),e(ie,Wpr),e(ie,F7),e(F7,vbe),e(vbe,Hpr),e(F7,Upr),e(F7,nW),e(nW,Jpr),e(F7,Ypr),e(ie,Kpr),e(ie,T7),e(T7,Fbe),e(Fbe,Zpr),e(T7,eur),e(T7,sW),e(sW,our),e(T7,rur),e(ie,tur),e(ie,M7),e(M7,Tbe),e(Tbe,aur),e(M7,nur),e(M7,lW),e(lW,sur),e(M7,lur),e(ie,iur),e(ie,E7),e(E7,Mbe),e(Mbe,dur),e(E7,cur),e(E7,iW),e(iW,fur),e(E7,mur),e(ie,gur),e(ie,C7),e(C7,Ebe),e(Ebe,hur),e(C7,pur),e(C7,dW),e(dW,uur),e(C7,_ur),e(ie,bur),e(ie,w7),e(w7,Cbe),e(Cbe,vur),e(w7,Fur),e(w7,cW),e(cW,Tur),e(w7,Mur),e(ie,Eur),e(ie,A7),e(A7,wbe),e(wbe,Cur),e(A7,wur),e(A7,fW),e(fW,Aur),e(A7,yur),e(ie,Lur),e(ie,y7),e(y7,Abe),e(Abe,xur),e(y7,$ur),e(y7,mW),e(mW,kur),e(y7,Sur),e(ie,Rur),e(ie,L7),e(L7,ybe),e(ybe,Bur),e(L7,Pur),e(L7,gW),e(gW,Iur),e(L7,qur),e(ie,Nur),e(ie,x7),e(x7,Lbe),e(Lbe,jur),e(x7,Dur),e(x7,hW),e(hW,Gur),e(x7,Our),e(ie,Vur),e(ie,$7),e($7,xbe),e(xbe,Xur),e($7,zur),e($7,pW),e(pW,Qur),e($7,Wur),e(ie,Hur),e(ie,k7),e(k7,$be),e($be,Uur),e(k7,Jur),e(k7,uW),e(uW,Yur),e(k7,Kur),e(ie,Zur),e(ie,S7),e(S7,kbe),e(kbe,e_r),e(S7,o_r),e(S7,_W),e(_W,r_r),e(S7,t_r),e(ie,a_r),e(ie,R7),e(R7,Sbe),e(Sbe,n_r),e(R7,s_r),e(R7,bW),e(bW,l_r),e(R7,i_r),e(ie,d_r),e(ie,B7),e(B7,Rbe),e(Rbe,c_r),e(B7,f_r),e(B7,vW),e(vW,m_r),e(B7,g_r),e(ie,h_r),e(ie,P7),e(P7,Bbe),e(Bbe,p_r),e(P7,u_r),e(P7,FW),e(FW,__r),e(P7,b_r),e(xr,v_r),M(I7,xr,null),b(f,Tqe,_),b(f,ec,_),e(ec,q7),e(q7,Pbe),M(l8,Pbe,null),e(ec,F_r),e(ec,Ibe),e(Ibe,T_r),b(f,Mqe,_),b(f,rr,_),M(i8,rr,null),e(rr,M_r),e(rr,oc),e(oc,E_r),e(oc,TW),e(TW,C_r),e(oc,w_r),e(oc,MW),e(MW,A_r),e(oc,y_r),e(rr,L_r),e(rr,d8),e(d8,x_r),e(d8,qbe),e(qbe,$_r),e(d8,k_r),e(rr,S_r),e(rr,$t),M(c8,$t,null),e($t,R_r),e($t,Nbe),e(Nbe,B_r),e($t,P_r),e($t,rc),e(rc,I_r),e(rc,jbe),e(jbe,q_r),e(rc,N_r),e(rc,EW),e(EW,j_r),e(rc,D_r),e($t,G_r),M(N7,$t,null),e(rr,O_r),e(rr,$r),M(f8,$r,null),e($r,V_r),e($r,Dbe),e(Dbe,X_r),e($r,z_r),e($r,tn),e(tn,Q_r),e(tn,Gbe),e(Gbe,W_r),e(tn,H_r),e(tn,Obe),e(Obe,U_r),e(tn,J_r),e(tn,Vbe),e(Vbe,Y_r),e(tn,K_r),e($r,Z_r),e($r,ye),e(ye,j7),e(j7,Xbe),e(Xbe,e0r),e(j7,o0r),e(j7,CW),e(CW,r0r),e(j7,t0r),e(ye,a0r),e(ye,D7),e(D7,zbe),e(zbe,n0r),e(D7,s0r),e(D7,wW),e(wW,l0r),e(D7,i0r),e(ye,d0r),e(ye,G7),e(G7,Qbe),e(Qbe,c0r),e(G7,f0r),e(G7,AW),e(AW,m0r),e(G7,g0r),e(ye,h0r),e(ye,O7),e(O7,Wbe),e(Wbe,p0r),e(O7,u0r),e(O7,yW),e(yW,_0r),e(O7,b0r),e(ye,v0r),e(ye,V7),e(V7,Hbe),e(Hbe,F0r),e(V7,T0r),e(V7,LW),e(LW,M0r),e(V7,E0r),e(ye,C0r),e(ye,X7),e(X7,Ube),e(Ube,w0r),e(X7,A0r),e(X7,xW),e(xW,y0r),e(X7,L0r),e(ye,x0r),e(ye,z7),e(z7,Jbe),e(Jbe,$0r),e(z7,k0r),e(z7,$W),e($W,S0r),e(z7,R0r),e(ye,B0r),e(ye,Q7),e(Q7,Ybe),e(Ybe,P0r),e(Q7,I0r),e(Q7,kW),e(kW,q0r),e(Q7,N0r),e(ye,j0r),e(ye,W7),e(W7,Kbe),e(Kbe,D0r),e(W7,G0r),e(W7,SW),e(SW,O0r),e(W7,V0r),e(ye,X0r),e(ye,H7),e(H7,Zbe),e(Zbe,z0r),e(H7,Q0r),e(H7,RW),e(RW,W0r),e(H7,H0r),e($r,U0r),M(U7,$r,null),b(f,Eqe,_),b(f,tc,_),e(tc,J7),e(J7,e2e),M(m8,e2e,null),e(tc,J0r),e(tc,o2e),e(o2e,Y0r),b(f,Cqe,_),b(f,tr,_),M(g8,tr,null),e(tr,K0r),e(tr,ac),e(ac,Z0r),e(ac,BW),e(BW,e1r),e(ac,o1r),e(ac,PW),e(PW,r1r),e(ac,t1r),e(tr,a1r),e(tr,h8),e(h8,n1r),e(h8,r2e),e(r2e,s1r),e(h8,l1r),e(tr,i1r),e(tr,kt),M(p8,kt,null),e(kt,d1r),e(kt,t2e),e(t2e,c1r),e(kt,f1r),e(kt,nc),e(nc,m1r),e(nc,a2e),e(a2e,g1r),e(nc,h1r),e(nc,IW),e(IW,p1r),e(nc,u1r),e(kt,_1r),M(Y7,kt,null),e(tr,b1r),e(tr,kr),M(u8,kr,null),e(kr,v1r),e(kr,n2e),e(n2e,F1r),e(kr,T1r),e(kr,an),e(an,M1r),e(an,s2e),e(s2e,E1r),e(an,C1r),e(an,l2e),e(l2e,w1r),e(an,A1r),e(an,i2e),e(i2e,y1r),e(an,L1r),e(kr,x1r),e(kr,ee),e(ee,K7),e(K7,d2e),e(d2e,$1r),e(K7,k1r),e(K7,qW),e(qW,S1r),e(K7,R1r),e(ee,B1r),e(ee,Z7),e(Z7,c2e),e(c2e,P1r),e(Z7,I1r),e(Z7,NW),e(NW,q1r),e(Z7,N1r),e(ee,j1r),e(ee,eM),e(eM,f2e),e(f2e,D1r),e(eM,G1r),e(eM,jW),e(jW,O1r),e(eM,V1r),e(ee,X1r),e(ee,oM),e(oM,m2e),e(m2e,z1r),e(oM,Q1r),e(oM,DW),e(DW,W1r),e(oM,H1r),e(ee,U1r),e(ee,rM),e(rM,g2e),e(g2e,J1r),e(rM,Y1r),e(rM,GW),e(GW,K1r),e(rM,Z1r),e(ee,ebr),e(ee,tM),e(tM,h2e),e(h2e,obr),e(tM,rbr),e(tM,OW),e(OW,tbr),e(tM,abr),e(ee,nbr),e(ee,aM),e(aM,p2e),e(p2e,sbr),e(aM,lbr),e(aM,VW),e(VW,ibr),e(aM,dbr),e(ee,cbr),e(ee,nM),e(nM,u2e),e(u2e,fbr),e(nM,mbr),e(nM,XW),e(XW,gbr),e(nM,hbr),e(ee,pbr),e(ee,sM),e(sM,_2e),e(_2e,ubr),e(sM,_br),e(sM,zW),e(zW,bbr),e(sM,vbr),e(ee,Fbr),e(ee,lM),e(lM,b2e),e(b2e,Tbr),e(lM,Mbr),e(lM,QW),e(QW,Ebr),e(lM,Cbr),e(ee,wbr),e(ee,iM),e(iM,v2e),e(v2e,Abr),e(iM,ybr),e(iM,WW),e(WW,Lbr),e(iM,xbr),e(ee,$br),e(ee,dM),e(dM,F2e),e(F2e,kbr),e(dM,Sbr),e(dM,HW),e(HW,Rbr),e(dM,Bbr),e(ee,Pbr),e(ee,cM),e(cM,T2e),e(T2e,Ibr),e(cM,qbr),e(cM,UW),e(UW,Nbr),e(cM,jbr),e(ee,Dbr),e(ee,fM),e(fM,M2e),e(M2e,Gbr),e(fM,Obr),e(fM,JW),e(JW,Vbr),e(fM,Xbr),e(ee,zbr),e(ee,mM),e(mM,E2e),e(E2e,Qbr),e(mM,Wbr),e(mM,YW),e(YW,Hbr),e(mM,Ubr),e(ee,Jbr),e(ee,gM),e(gM,C2e),e(C2e,Ybr),e(gM,Kbr),e(gM,KW),e(KW,Zbr),e(gM,e2r),e(ee,o2r),e(ee,hM),e(hM,w2e),e(w2e,r2r),e(hM,t2r),e(hM,ZW),e(ZW,a2r),e(hM,n2r),e(ee,s2r),e(ee,pM),e(pM,A2e),e(A2e,l2r),e(pM,i2r),e(pM,eH),e(eH,d2r),e(pM,c2r),e(ee,f2r),e(ee,uM),e(uM,y2e),e(y2e,m2r),e(uM,g2r),e(uM,oH),e(oH,h2r),e(uM,p2r),e(ee,u2r),e(ee,_M),e(_M,L2e),e(L2e,_2r),e(_M,b2r),e(_M,rH),e(rH,v2r),e(_M,F2r),e(ee,T2r),e(ee,bM),e(bM,x2e),e(x2e,M2r),e(bM,E2r),e(bM,tH),e(tH,C2r),e(bM,w2r),e(ee,A2r),e(ee,vM),e(vM,$2e),e($2e,y2r),e(vM,L2r),e(vM,aH),e(aH,x2r),e(vM,$2r),e(ee,k2r),e(ee,FM),e(FM,k2e),e(k2e,S2r),e(FM,R2r),e(FM,nH),e(nH,B2r),e(FM,P2r),e(ee,I2r),e(ee,TM),e(TM,S2e),e(S2e,q2r),e(TM,N2r),e(TM,sH),e(sH,j2r),e(TM,D2r),e(ee,G2r),e(ee,MM),e(MM,R2e),e(R2e,O2r),e(MM,V2r),e(MM,lH),e(lH,X2r),e(MM,z2r),e(ee,Q2r),e(ee,EM),e(EM,B2e),e(B2e,W2r),e(EM,H2r),e(EM,iH),e(iH,U2r),e(EM,J2r),e(kr,Y2r),M(CM,kr,null),b(f,wqe,_),b(f,sc,_),e(sc,wM),e(wM,P2e),M(_8,P2e,null),e(sc,K2r),e(sc,I2e),e(I2e,Z2r),b(f,Aqe,_),b(f,ar,_),M(b8,ar,null),e(ar,evr),e(ar,lc),e(lc,ovr),e(lc,dH),e(dH,rvr),e(lc,tvr),e(lc,cH),e(cH,avr),e(lc,nvr),e(ar,svr),e(ar,v8),e(v8,lvr),e(v8,q2e),e(q2e,ivr),e(v8,dvr),e(ar,cvr),e(ar,St),M(F8,St,null),e(St,fvr),e(St,N2e),e(N2e,mvr),e(St,gvr),e(St,ic),e(ic,hvr),e(ic,j2e),e(j2e,pvr),e(ic,uvr),e(ic,fH),e(fH,_vr),e(ic,bvr),e(St,vvr),M(AM,St,null),e(ar,Fvr),e(ar,Sr),M(T8,Sr,null),e(Sr,Tvr),e(Sr,D2e),e(D2e,Mvr),e(Sr,Evr),e(Sr,nn),e(nn,Cvr),e(nn,G2e),e(G2e,wvr),e(nn,Avr),e(nn,O2e),e(O2e,yvr),e(nn,Lvr),e(nn,V2e),e(V2e,xvr),e(nn,$vr),e(Sr,kvr),e(Sr,pe),e(pe,yM),e(yM,X2e),e(X2e,Svr),e(yM,Rvr),e(yM,mH),e(mH,Bvr),e(yM,Pvr),e(pe,Ivr),e(pe,LM),e(LM,z2e),e(z2e,qvr),e(LM,Nvr),e(LM,gH),e(gH,jvr),e(LM,Dvr),e(pe,Gvr),e(pe,xM),e(xM,Q2e),e(Q2e,Ovr),e(xM,Vvr),e(xM,hH),e(hH,Xvr),e(xM,zvr),e(pe,Qvr),e(pe,$M),e($M,W2e),e(W2e,Wvr),e($M,Hvr),e($M,pH),e(pH,Uvr),e($M,Jvr),e(pe,Yvr),e(pe,kM),e(kM,H2e),e(H2e,Kvr),e(kM,Zvr),e(kM,uH),e(uH,eFr),e(kM,oFr),e(pe,rFr),e(pe,SM),e(SM,U2e),e(U2e,tFr),e(SM,aFr),e(SM,_H),e(_H,nFr),e(SM,sFr),e(pe,lFr),e(pe,RM),e(RM,J2e),e(J2e,iFr),e(RM,dFr),e(RM,bH),e(bH,cFr),e(RM,fFr),e(pe,mFr),e(pe,BM),e(BM,Y2e),e(Y2e,gFr),e(BM,hFr),e(BM,vH),e(vH,pFr),e(BM,uFr),e(pe,_Fr),e(pe,PM),e(PM,K2e),e(K2e,bFr),e(PM,vFr),e(PM,FH),e(FH,FFr),e(PM,TFr),e(pe,MFr),e(pe,IM),e(IM,Z2e),e(Z2e,EFr),e(IM,CFr),e(IM,TH),e(TH,wFr),e(IM,AFr),e(pe,yFr),e(pe,qM),e(qM,eve),e(eve,LFr),e(qM,xFr),e(qM,MH),e(MH,$Fr),e(qM,kFr),e(pe,SFr),e(pe,NM),e(NM,ove),e(ove,RFr),e(NM,BFr),e(NM,EH),e(EH,PFr),e(NM,IFr),e(pe,qFr),e(pe,jM),e(jM,rve),e(rve,NFr),e(jM,jFr),e(jM,CH),e(CH,DFr),e(jM,GFr),e(pe,OFr),e(pe,DM),e(DM,tve),e(tve,VFr),e(DM,XFr),e(DM,wH),e(wH,zFr),e(DM,QFr),e(pe,WFr),e(pe,GM),e(GM,ave),e(ave,HFr),e(GM,UFr),e(GM,AH),e(AH,JFr),e(GM,YFr),e(pe,KFr),e(pe,OM),e(OM,nve),e(nve,ZFr),e(OM,e6r),e(OM,yH),e(yH,o6r),e(OM,r6r),e(pe,t6r),e(pe,VM),e(VM,sve),e(sve,a6r),e(VM,n6r),e(VM,LH),e(LH,s6r),e(VM,l6r),e(Sr,i6r),M(XM,Sr,null),b(f,yqe,_),b(f,dc,_),e(dc,zM),e(zM,lve),M(M8,lve,null),e(dc,d6r),e(dc,ive),e(ive,c6r),b(f,Lqe,_),b(f,nr,_),M(E8,nr,null),e(nr,f6r),e(nr,cc),e(cc,m6r),e(cc,xH),e(xH,g6r),e(cc,h6r),e(cc,$H),e($H,p6r),e(cc,u6r),e(nr,_6r),e(nr,C8),e(C8,b6r),e(C8,dve),e(dve,v6r),e(C8,F6r),e(nr,T6r),e(nr,Rt),M(w8,Rt,null),e(Rt,M6r),e(Rt,cve),e(cve,E6r),e(Rt,C6r),e(Rt,fc),e(fc,w6r),e(fc,fve),e(fve,A6r),e(fc,y6r),e(fc,kH),e(kH,L6r),e(fc,x6r),e(Rt,$6r),M(QM,Rt,null),e(nr,k6r),e(nr,Rr),M(A8,Rr,null),e(Rr,S6r),e(Rr,mve),e(mve,R6r),e(Rr,B6r),e(Rr,sn),e(sn,P6r),e(sn,gve),e(gve,I6r),e(sn,q6r),e(sn,hve),e(hve,N6r),e(sn,j6r),e(sn,pve),e(pve,D6r),e(sn,G6r),e(Rr,O6r),e(Rr,y8),e(y8,WM),e(WM,uve),e(uve,V6r),e(WM,X6r),e(WM,SH),e(SH,z6r),e(WM,Q6r),e(y8,W6r),e(y8,HM),e(HM,_ve),e(_ve,H6r),e(HM,U6r),e(HM,RH),e(RH,J6r),e(HM,Y6r),e(Rr,K6r),M(UM,Rr,null),b(f,xqe,_),b(f,mc,_),e(mc,JM),e(JM,bve),M(L8,bve,null),e(mc,Z6r),e(mc,vve),e(vve,eTr),b(f,$qe,_),b(f,sr,_),M(x8,sr,null),e(sr,oTr),e(sr,gc),e(gc,rTr),e(gc,BH),e(BH,tTr),e(gc,aTr),e(gc,PH),e(PH,nTr),e(gc,sTr),e(sr,lTr),e(sr,$8),e($8,iTr),e($8,Fve),e(Fve,dTr),e($8,cTr),e(sr,fTr),e(sr,Bt),M(k8,Bt,null),e(Bt,mTr),e(Bt,Tve),e(Tve,gTr),e(Bt,hTr),e(Bt,hc),e(hc,pTr),e(hc,Mve),e(Mve,uTr),e(hc,_Tr),e(hc,IH),e(IH,bTr),e(hc,vTr),e(Bt,FTr),M(YM,Bt,null),e(sr,TTr),e(sr,Br),M(S8,Br,null),e(Br,MTr),e(Br,Eve),e(Eve,ETr),e(Br,CTr),e(Br,ln),e(ln,wTr),e(ln,Cve),e(Cve,ATr),e(ln,yTr),e(ln,wve),e(wve,LTr),e(ln,xTr),e(ln,Ave),e(Ave,$Tr),e(ln,kTr),e(Br,STr),e(Br,yve),e(yve,KM),e(KM,Lve),e(Lve,RTr),e(KM,BTr),e(KM,qH),e(qH,PTr),e(KM,ITr),e(Br,qTr),M(ZM,Br,null),b(f,kqe,_),b(f,pc,_),e(pc,e4),e(e4,xve),M(R8,xve,null),e(pc,NTr),e(pc,$ve),e($ve,jTr),b(f,Sqe,_),b(f,lr,_),M(B8,lr,null),e(lr,DTr),e(lr,uc),e(uc,GTr),e(uc,NH),e(NH,OTr),e(uc,VTr),e(uc,jH),e(jH,XTr),e(uc,zTr),e(lr,QTr),e(lr,P8),e(P8,WTr),e(P8,kve),e(kve,HTr),e(P8,UTr),e(lr,JTr),e(lr,Pt),M(I8,Pt,null),e(Pt,YTr),e(Pt,Sve),e(Sve,KTr),e(Pt,ZTr),e(Pt,_c),e(_c,e7r),e(_c,Rve),e(Rve,o7r),e(_c,r7r),e(_c,DH),e(DH,t7r),e(_c,a7r),e(Pt,n7r),M(o4,Pt,null),e(lr,s7r),e(lr,Pr),M(q8,Pr,null),e(Pr,l7r),e(Pr,Bve),e(Bve,i7r),e(Pr,d7r),e(Pr,dn),e(dn,c7r),e(dn,Pve),e(Pve,f7r),e(dn,m7r),e(dn,Ive),e(Ive,g7r),e(dn,h7r),e(dn,qve),e(qve,p7r),e(dn,u7r),e(Pr,_7r),e(Pr,de),e(de,r4),e(r4,Nve),e(Nve,b7r),e(r4,v7r),e(r4,GH),e(GH,F7r),e(r4,T7r),e(de,M7r),e(de,t4),e(t4,jve),e(jve,E7r),e(t4,C7r),e(t4,OH),e(OH,w7r),e(t4,A7r),e(de,y7r),e(de,a4),e(a4,Dve),e(Dve,L7r),e(a4,x7r),e(a4,VH),e(VH,$7r),e(a4,k7r),e(de,S7r),e(de,n4),e(n4,Gve),e(Gve,R7r),e(n4,B7r),e(n4,XH),e(XH,P7r),e(n4,I7r),e(de,q7r),e(de,s4),e(s4,Ove),e(Ove,N7r),e(s4,j7r),e(s4,zH),e(zH,D7r),e(s4,G7r),e(de,O7r),e(de,l4),e(l4,Vve),e(Vve,V7r),e(l4,X7r),e(l4,QH),e(QH,z7r),e(l4,Q7r),e(de,W7r),e(de,i4),e(i4,Xve),e(Xve,H7r),e(i4,U7r),e(i4,WH),e(WH,J7r),e(i4,Y7r),e(de,K7r),e(de,d4),e(d4,zve),e(zve,Z7r),e(d4,eMr),e(d4,HH),e(HH,oMr),e(d4,rMr),e(de,tMr),e(de,c4),e(c4,Qve),e(Qve,aMr),e(c4,nMr),e(c4,UH),e(UH,sMr),e(c4,lMr),e(de,iMr),e(de,f4),e(f4,Wve),e(Wve,dMr),e(f4,cMr),e(f4,JH),e(JH,fMr),e(f4,mMr),e(de,gMr),e(de,m4),e(m4,Hve),e(Hve,hMr),e(m4,pMr),e(m4,YH),e(YH,uMr),e(m4,_Mr),e(de,bMr),e(de,g4),e(g4,Uve),e(Uve,vMr),e(g4,FMr),e(g4,KH),e(KH,TMr),e(g4,MMr),e(de,EMr),e(de,h4),e(h4,Jve),e(Jve,CMr),e(h4,wMr),e(h4,ZH),e(ZH,AMr),e(h4,yMr),e(de,LMr),e(de,p4),e(p4,Yve),e(Yve,xMr),e(p4,$Mr),e(p4,eU),e(eU,kMr),e(p4,SMr),e(de,RMr),e(de,u4),e(u4,Kve),e(Kve,BMr),e(u4,PMr),e(u4,oU),e(oU,IMr),e(u4,qMr),e(de,NMr),e(de,_4),e(_4,Zve),e(Zve,jMr),e(_4,DMr),e(_4,rU),e(rU,GMr),e(_4,OMr),e(de,VMr),e(de,b4),e(b4,eFe),e(eFe,XMr),e(b4,zMr),e(b4,tU),e(tU,QMr),e(b4,WMr),e(de,HMr),e(de,v4),e(v4,oFe),e(oFe,UMr),e(v4,JMr),e(v4,aU),e(aU,YMr),e(v4,KMr),e(de,ZMr),e(de,F4),e(F4,rFe),e(rFe,e4r),e(F4,o4r),e(F4,nU),e(nU,r4r),e(F4,t4r),e(de,a4r),e(de,T4),e(T4,tFe),e(tFe,n4r),e(T4,s4r),e(T4,sU),e(sU,l4r),e(T4,i4r),e(Pr,d4r),M(M4,Pr,null),b(f,Rqe,_),b(f,bc,_),e(bc,E4),e(E4,aFe),M(N8,aFe,null),e(bc,c4r),e(bc,nFe),e(nFe,f4r),b(f,Bqe,_),b(f,ir,_),M(j8,ir,null),e(ir,m4r),e(ir,vc),e(vc,g4r),e(vc,lU),e(lU,h4r),e(vc,p4r),e(vc,iU),e(iU,u4r),e(vc,_4r),e(ir,b4r),e(ir,D8),e(D8,v4r),e(D8,sFe),e(sFe,F4r),e(D8,T4r),e(ir,M4r),e(ir,It),M(G8,It,null),e(It,E4r),e(It,lFe),e(lFe,C4r),e(It,w4r),e(It,Fc),e(Fc,A4r),e(Fc,iFe),e(iFe,y4r),e(Fc,L4r),e(Fc,dU),e(dU,x4r),e(Fc,$4r),e(It,k4r),M(C4,It,null),e(ir,S4r),e(ir,Ir),M(O8,Ir,null),e(Ir,R4r),e(Ir,dFe),e(dFe,B4r),e(Ir,P4r),e(Ir,cn),e(cn,I4r),e(cn,cFe),e(cFe,q4r),e(cn,N4r),e(cn,fFe),e(fFe,j4r),e(cn,D4r),e(cn,mFe),e(mFe,G4r),e(cn,O4r),e(Ir,V4r),e(Ir,ce),e(ce,w4),e(w4,gFe),e(gFe,X4r),e(w4,z4r),e(w4,cU),e(cU,Q4r),e(w4,W4r),e(ce,H4r),e(ce,A4),e(A4,hFe),e(hFe,U4r),e(A4,J4r),e(A4,fU),e(fU,Y4r),e(A4,K4r),e(ce,Z4r),e(ce,y4),e(y4,pFe),e(pFe,eEr),e(y4,oEr),e(y4,mU),e(mU,rEr),e(y4,tEr),e(ce,aEr),e(ce,L4),e(L4,uFe),e(uFe,nEr),e(L4,sEr),e(L4,gU),e(gU,lEr),e(L4,iEr),e(ce,dEr),e(ce,x4),e(x4,_Fe),e(_Fe,cEr),e(x4,fEr),e(x4,hU),e(hU,mEr),e(x4,gEr),e(ce,hEr),e(ce,$4),e($4,bFe),e(bFe,pEr),e($4,uEr),e($4,pU),e(pU,_Er),e($4,bEr),e(ce,vEr),e(ce,k4),e(k4,vFe),e(vFe,FEr),e(k4,TEr),e(k4,uU),e(uU,MEr),e(k4,EEr),e(ce,CEr),e(ce,S4),e(S4,FFe),e(FFe,wEr),e(S4,AEr),e(S4,_U),e(_U,yEr),e(S4,LEr),e(ce,xEr),e(ce,R4),e(R4,TFe),e(TFe,$Er),e(R4,kEr),e(R4,bU),e(bU,SEr),e(R4,REr),e(ce,BEr),e(ce,B4),e(B4,MFe),e(MFe,PEr),e(B4,IEr),e(B4,vU),e(vU,qEr),e(B4,NEr),e(ce,jEr),e(ce,P4),e(P4,EFe),e(EFe,DEr),e(P4,GEr),e(P4,FU),e(FU,OEr),e(P4,VEr),e(ce,XEr),e(ce,I4),e(I4,CFe),e(CFe,zEr),e(I4,QEr),e(I4,TU),e(TU,WEr),e(I4,HEr),e(ce,UEr),e(ce,q4),e(q4,wFe),e(wFe,JEr),e(q4,YEr),e(q4,MU),e(MU,KEr),e(q4,ZEr),e(ce,e5r),e(ce,N4),e(N4,AFe),e(AFe,o5r),e(N4,r5r),e(N4,EU),e(EU,t5r),e(N4,a5r),e(ce,n5r),e(ce,j4),e(j4,yFe),e(yFe,s5r),e(j4,l5r),e(j4,CU),e(CU,i5r),e(j4,d5r),e(ce,c5r),e(ce,D4),e(D4,LFe),e(LFe,f5r),e(D4,m5r),e(D4,wU),e(wU,g5r),e(D4,h5r),e(ce,p5r),e(ce,G4),e(G4,xFe),e(xFe,u5r),e(G4,_5r),e(G4,AU),e(AU,b5r),e(G4,v5r),e(ce,F5r),e(ce,O4),e(O4,$Fe),e($Fe,T5r),e(O4,M5r),e(O4,yU),e(yU,E5r),e(O4,C5r),e(ce,w5r),e(ce,V4),e(V4,kFe),e(kFe,A5r),e(V4,y5r),e(V4,LU),e(LU,L5r),e(V4,x5r),e(ce,$5r),e(ce,X4),e(X4,SFe),e(SFe,k5r),e(X4,S5r),e(X4,xU),e(xU,R5r),e(X4,B5r),e(Ir,P5r),M(z4,Ir,null),b(f,Pqe,_),b(f,Tc,_),e(Tc,Q4),e(Q4,RFe),M(V8,RFe,null),e(Tc,I5r),e(Tc,BFe),e(BFe,q5r),b(f,Iqe,_),b(f,dr,_),M(X8,dr,null),e(dr,N5r),e(dr,Mc),e(Mc,j5r),e(Mc,$U),e($U,D5r),e(Mc,G5r),e(Mc,kU),e(kU,O5r),e(Mc,V5r),e(dr,X5r),e(dr,z8),e(z8,z5r),e(z8,PFe),e(PFe,Q5r),e(z8,W5r),e(dr,H5r),e(dr,qt),M(Q8,qt,null),e(qt,U5r),e(qt,IFe),e(IFe,J5r),e(qt,Y5r),e(qt,Ec),e(Ec,K5r),e(Ec,qFe),e(qFe,Z5r),e(Ec,eCr),e(Ec,SU),e(SU,oCr),e(Ec,rCr),e(qt,tCr),M(W4,qt,null),e(dr,aCr),e(dr,qr),M(W8,qr,null),e(qr,nCr),e(qr,NFe),e(NFe,sCr),e(qr,lCr),e(qr,fn),e(fn,iCr),e(fn,jFe),e(jFe,dCr),e(fn,cCr),e(fn,DFe),e(DFe,fCr),e(fn,mCr),e(fn,GFe),e(GFe,gCr),e(fn,hCr),e(qr,pCr),e(qr,OFe),e(OFe,H4),e(H4,VFe),e(VFe,uCr),e(H4,_Cr),e(H4,RU),e(RU,bCr),e(H4,vCr),e(qr,FCr),M(U4,qr,null),b(f,qqe,_),b(f,Cc,_),e(Cc,J4),e(J4,XFe),M(H8,XFe,null),e(Cc,TCr),e(Cc,zFe),e(zFe,MCr),b(f,Nqe,_),b(f,cr,_),M(U8,cr,null),e(cr,ECr),e(cr,wc),e(wc,CCr),e(wc,BU),e(BU,wCr),e(wc,ACr),e(wc,PU),e(PU,yCr),e(wc,LCr),e(cr,xCr),e(cr,J8),e(J8,$Cr),e(J8,QFe),e(QFe,kCr),e(J8,SCr),e(cr,RCr),e(cr,Nt),M(Y8,Nt,null),e(Nt,BCr),e(Nt,WFe),e(WFe,PCr),e(Nt,ICr),e(Nt,Ac),e(Ac,qCr),e(Ac,HFe),e(HFe,NCr),e(Ac,jCr),e(Ac,IU),e(IU,DCr),e(Ac,GCr),e(Nt,OCr),M(Y4,Nt,null),e(cr,VCr),e(cr,Nr),M(K8,Nr,null),e(Nr,XCr),e(Nr,UFe),e(UFe,zCr),e(Nr,QCr),e(Nr,mn),e(mn,WCr),e(mn,JFe),e(JFe,HCr),e(mn,UCr),e(mn,YFe),e(YFe,JCr),e(mn,YCr),e(mn,KFe),e(KFe,KCr),e(mn,ZCr),e(Nr,e3r),e(Nr,ZFe),e(ZFe,K4),e(K4,e6e),e(e6e,o3r),e(K4,r3r),e(K4,qU),e(qU,t3r),e(K4,a3r),e(Nr,n3r),M(Z4,Nr,null),b(f,jqe,_),b(f,yc,_),e(yc,eE),e(eE,o6e),M(Z8,o6e,null),e(yc,s3r),e(yc,r6e),e(r6e,l3r),b(f,Dqe,_),b(f,fr,_),M(ex,fr,null),e(fr,i3r),e(fr,Lc),e(Lc,d3r),e(Lc,NU),e(NU,c3r),e(Lc,f3r),e(Lc,jU),e(jU,m3r),e(Lc,g3r),e(fr,h3r),e(fr,ox),e(ox,p3r),e(ox,t6e),e(t6e,u3r),e(ox,_3r),e(fr,b3r),e(fr,jt),M(rx,jt,null),e(jt,v3r),e(jt,a6e),e(a6e,F3r),e(jt,T3r),e(jt,xc),e(xc,M3r),e(xc,n6e),e(n6e,E3r),e(xc,C3r),e(xc,DU),e(DU,w3r),e(xc,A3r),e(jt,y3r),M(oE,jt,null),e(fr,L3r),e(fr,jr),M(tx,jr,null),e(jr,x3r),e(jr,s6e),e(s6e,$3r),e(jr,k3r),e(jr,gn),e(gn,S3r),e(gn,l6e),e(l6e,R3r),e(gn,B3r),e(gn,i6e),e(i6e,P3r),e(gn,I3r),e(gn,d6e),e(d6e,q3r),e(gn,N3r),e(jr,j3r),e(jr,re),e(re,rE),e(rE,c6e),e(c6e,D3r),e(rE,G3r),e(rE,GU),e(GU,O3r),e(rE,V3r),e(re,X3r),e(re,tE),e(tE,f6e),e(f6e,z3r),e(tE,Q3r),e(tE,OU),e(OU,W3r),e(tE,H3r),e(re,U3r),e(re,aE),e(aE,m6e),e(m6e,J3r),e(aE,Y3r),e(aE,VU),e(VU,K3r),e(aE,Z3r),e(re,ewr),e(re,nE),e(nE,g6e),e(g6e,owr),e(nE,rwr),e(nE,XU),e(XU,twr),e(nE,awr),e(re,nwr),e(re,sE),e(sE,h6e),e(h6e,swr),e(sE,lwr),e(sE,zU),e(zU,iwr),e(sE,dwr),e(re,cwr),e(re,lE),e(lE,p6e),e(p6e,fwr),e(lE,mwr),e(lE,QU),e(QU,gwr),e(lE,hwr),e(re,pwr),e(re,iE),e(iE,u6e),e(u6e,uwr),e(iE,_wr),e(iE,WU),e(WU,bwr),e(iE,vwr),e(re,Fwr),e(re,dE),e(dE,_6e),e(_6e,Twr),e(dE,Mwr),e(dE,HU),e(HU,Ewr),e(dE,Cwr),e(re,wwr),e(re,cE),e(cE,b6e),e(b6e,Awr),e(cE,ywr),e(cE,UU),e(UU,Lwr),e(cE,xwr),e(re,$wr),e(re,fE),e(fE,v6e),e(v6e,kwr),e(fE,Swr),e(fE,JU),e(JU,Rwr),e(fE,Bwr),e(re,Pwr),e(re,mE),e(mE,F6e),e(F6e,Iwr),e(mE,qwr),e(mE,YU),e(YU,Nwr),e(mE,jwr),e(re,Dwr),e(re,gE),e(gE,T6e),e(T6e,Gwr),e(gE,Owr),e(gE,KU),e(KU,Vwr),e(gE,Xwr),e(re,zwr),e(re,hE),e(hE,M6e),e(M6e,Qwr),e(hE,Wwr),e(hE,ZU),e(ZU,Hwr),e(hE,Uwr),e(re,Jwr),e(re,pE),e(pE,E6e),e(E6e,Ywr),e(pE,Kwr),e(pE,eJ),e(eJ,Zwr),e(pE,eAr),e(re,oAr),e(re,uE),e(uE,C6e),e(C6e,rAr),e(uE,tAr),e(uE,oJ),e(oJ,aAr),e(uE,nAr),e(re,sAr),e(re,_E),e(_E,w6e),e(w6e,lAr),e(_E,iAr),e(_E,rJ),e(rJ,dAr),e(_E,cAr),e(re,fAr),e(re,bE),e(bE,A6e),e(A6e,mAr),e(bE,gAr),e(bE,tJ),e(tJ,hAr),e(bE,pAr),e(re,uAr),e(re,vE),e(vE,y6e),e(y6e,_Ar),e(vE,bAr),e(vE,aJ),e(aJ,vAr),e(vE,FAr),e(re,TAr),e(re,FE),e(FE,L6e),e(L6e,MAr),e(FE,EAr),e(FE,nJ),e(nJ,CAr),e(FE,wAr),e(re,AAr),e(re,TE),e(TE,x6e),e(x6e,yAr),e(TE,LAr),e(TE,sJ),e(sJ,xAr),e(TE,$Ar),e(re,kAr),e(re,ME),e(ME,$6e),e($6e,SAr),e(ME,RAr),e(ME,lJ),e(lJ,BAr),e(ME,PAr),e(re,IAr),e(re,EE),e(EE,k6e),e(k6e,qAr),e(EE,NAr),e(EE,iJ),e(iJ,jAr),e(EE,DAr),e(re,GAr),e(re,CE),e(CE,S6e),e(S6e,OAr),e(CE,VAr),e(CE,dJ),e(dJ,XAr),e(CE,zAr),e(re,QAr),e(re,wE),e(wE,R6e),e(R6e,WAr),e(wE,HAr),e(wE,cJ),e(cJ,UAr),e(wE,JAr),e(re,YAr),e(re,AE),e(AE,B6e),e(B6e,KAr),e(AE,ZAr),e(AE,fJ),e(fJ,eyr),e(AE,oyr),e(jr,ryr),M(yE,jr,null),b(f,Gqe,_),b(f,$c,_),e($c,LE),e(LE,P6e),M(ax,P6e,null),e($c,tyr),e($c,I6e),e(I6e,ayr),b(f,Oqe,_),b(f,mr,_),M(nx,mr,null),e(mr,nyr),e(mr,kc),e(kc,syr),e(kc,mJ),e(mJ,lyr),e(kc,iyr),e(kc,gJ),e(gJ,dyr),e(kc,cyr),e(mr,fyr),e(mr,sx),e(sx,myr),e(sx,q6e),e(q6e,gyr),e(sx,hyr),e(mr,pyr),e(mr,Dt),M(lx,Dt,null),e(Dt,uyr),e(Dt,N6e),e(N6e,_yr),e(Dt,byr),e(Dt,Sc),e(Sc,vyr),e(Sc,j6e),e(j6e,Fyr),e(Sc,Tyr),e(Sc,hJ),e(hJ,Myr),e(Sc,Eyr),e(Dt,Cyr),M(xE,Dt,null),e(mr,wyr),e(mr,Dr),M(ix,Dr,null),e(Dr,Ayr),e(Dr,D6e),e(D6e,yyr),e(Dr,Lyr),e(Dr,hn),e(hn,xyr),e(hn,G6e),e(G6e,$yr),e(hn,kyr),e(hn,O6e),e(O6e,Syr),e(hn,Ryr),e(hn,V6e),e(V6e,Byr),e(hn,Pyr),e(Dr,Iyr),e(Dr,ke),e(ke,$E),e($E,X6e),e(X6e,qyr),e($E,Nyr),e($E,pJ),e(pJ,jyr),e($E,Dyr),e(ke,Gyr),e(ke,kE),e(kE,z6e),e(z6e,Oyr),e(kE,Vyr),e(kE,uJ),e(uJ,Xyr),e(kE,zyr),e(ke,Qyr),e(ke,SE),e(SE,Q6e),e(Q6e,Wyr),e(SE,Hyr),e(SE,_J),e(_J,Uyr),e(SE,Jyr),e(ke,Yyr),e(ke,RE),e(RE,W6e),e(W6e,Kyr),e(RE,Zyr),e(RE,bJ),e(bJ,eLr),e(RE,oLr),e(ke,rLr),e(ke,BE),e(BE,H6e),e(H6e,tLr),e(BE,aLr),e(BE,vJ),e(vJ,nLr),e(BE,sLr),e(ke,lLr),e(ke,PE),e(PE,U6e),e(U6e,iLr),e(PE,dLr),e(PE,FJ),e(FJ,cLr),e(PE,fLr),e(ke,mLr),e(ke,IE),e(IE,J6e),e(J6e,gLr),e(IE,hLr),e(IE,TJ),e(TJ,pLr),e(IE,uLr),e(ke,_Lr),e(ke,qE),e(qE,Y6e),e(Y6e,bLr),e(qE,vLr),e(qE,MJ),e(MJ,FLr),e(qE,TLr),e(ke,MLr),e(ke,NE),e(NE,K6e),e(K6e,ELr),e(NE,CLr),e(NE,EJ),e(EJ,wLr),e(NE,ALr),e(Dr,yLr),M(jE,Dr,null),b(f,Vqe,_),b(f,Rc,_),e(Rc,DE),e(DE,Z6e),M(dx,Z6e,null),e(Rc,LLr),e(Rc,eTe),e(eTe,xLr),b(f,Xqe,_),b(f,gr,_),M(cx,gr,null),e(gr,$Lr),e(gr,Bc),e(Bc,kLr),e(Bc,CJ),e(CJ,SLr),e(Bc,RLr),e(Bc,wJ),e(wJ,BLr),e(Bc,PLr),e(gr,ILr),e(gr,fx),e(fx,qLr),e(fx,oTe),e(oTe,NLr),e(fx,jLr),e(gr,DLr),e(gr,Gt),M(mx,Gt,null),e(Gt,GLr),e(Gt,rTe),e(rTe,OLr),e(Gt,VLr),e(Gt,Pc),e(Pc,XLr),e(Pc,tTe),e(tTe,zLr),e(Pc,QLr),e(Pc,AJ),e(AJ,WLr),e(Pc,HLr),e(Gt,ULr),M(GE,Gt,null),e(gr,JLr),e(gr,Gr),M(gx,Gr,null),e(Gr,YLr),e(Gr,aTe),e(aTe,KLr),e(Gr,ZLr),e(Gr,pn),e(pn,e8r),e(pn,nTe),e(nTe,o8r),e(pn,r8r),e(pn,sTe),e(sTe,t8r),e(pn,a8r),e(pn,lTe),e(lTe,n8r),e(pn,s8r),e(Gr,l8r),e(Gr,Me),e(Me,OE),e(OE,iTe),e(iTe,i8r),e(OE,d8r),e(OE,yJ),e(yJ,c8r),e(OE,f8r),e(Me,m8r),e(Me,VE),e(VE,dTe),e(dTe,g8r),e(VE,h8r),e(VE,LJ),e(LJ,p8r),e(VE,u8r),e(Me,_8r),e(Me,XE),e(XE,cTe),e(cTe,b8r),e(XE,v8r),e(XE,xJ),e(xJ,F8r),e(XE,T8r),e(Me,M8r),e(Me,zE),e(zE,fTe),e(fTe,E8r),e(zE,C8r),e(zE,$J),e($J,w8r),e(zE,A8r),e(Me,y8r),e(Me,QE),e(QE,mTe),e(mTe,L8r),e(QE,x8r),e(QE,kJ),e(kJ,$8r),e(QE,k8r),e(Me,S8r),e(Me,WE),e(WE,gTe),e(gTe,R8r),e(WE,B8r),e(WE,SJ),e(SJ,P8r),e(WE,I8r),e(Me,q8r),e(Me,HE),e(HE,hTe),e(hTe,N8r),e(HE,j8r),e(HE,RJ),e(RJ,D8r),e(HE,G8r),e(Me,O8r),e(Me,UE),e(UE,pTe),e(pTe,V8r),e(UE,X8r),e(UE,BJ),e(BJ,z8r),e(UE,Q8r),e(Me,W8r),e(Me,JE),e(JE,uTe),e(uTe,H8r),e(JE,U8r),e(JE,PJ),e(PJ,J8r),e(JE,Y8r),e(Me,K8r),e(Me,YE),e(YE,_Te),e(_Te,Z8r),e(YE,exr),e(YE,IJ),e(IJ,oxr),e(YE,rxr),e(Me,txr),e(Me,KE),e(KE,bTe),e(bTe,axr),e(KE,nxr),e(KE,qJ),e(qJ,sxr),e(KE,lxr),e(Me,ixr),e(Me,ZE),e(ZE,vTe),e(vTe,dxr),e(ZE,cxr),e(ZE,NJ),e(NJ,fxr),e(ZE,mxr),e(Gr,gxr),M(e5,Gr,null),b(f,zqe,_),b(f,Ic,_),e(Ic,o5),e(o5,FTe),M(hx,FTe,null),e(Ic,hxr),e(Ic,TTe),e(TTe,pxr),b(f,Qqe,_),b(f,hr,_),M(px,hr,null),e(hr,uxr),e(hr,qc),e(qc,_xr),e(qc,jJ),e(jJ,bxr),e(qc,vxr),e(qc,DJ),e(DJ,Fxr),e(qc,Txr),e(hr,Mxr),e(hr,ux),e(ux,Exr),e(ux,MTe),e(MTe,Cxr),e(ux,wxr),e(hr,Axr),e(hr,Ot),M(_x,Ot,null),e(Ot,yxr),e(Ot,ETe),e(ETe,Lxr),e(Ot,xxr),e(Ot,Nc),e(Nc,$xr),e(Nc,CTe),e(CTe,kxr),e(Nc,Sxr),e(Nc,GJ),e(GJ,Rxr),e(Nc,Bxr),e(Ot,Pxr),M(r5,Ot,null),e(hr,Ixr),e(hr,Or),M(bx,Or,null),e(Or,qxr),e(Or,wTe),e(wTe,Nxr),e(Or,jxr),e(Or,un),e(un,Dxr),e(un,ATe),e(ATe,Gxr),e(un,Oxr),e(un,yTe),e(yTe,Vxr),e(un,Xxr),e(un,LTe),e(LTe,zxr),e(un,Qxr),e(Or,Wxr),e(Or,Le),e(Le,t5),e(t5,xTe),e(xTe,Hxr),e(t5,Uxr),e(t5,OJ),e(OJ,Jxr),e(t5,Yxr),e(Le,Kxr),e(Le,a5),e(a5,$Te),e($Te,Zxr),e(a5,e9r),e(a5,VJ),e(VJ,o9r),e(a5,r9r),e(Le,t9r),e(Le,n5),e(n5,kTe),e(kTe,a9r),e(n5,n9r),e(n5,XJ),e(XJ,s9r),e(n5,l9r),e(Le,i9r),e(Le,s5),e(s5,STe),e(STe,d9r),e(s5,c9r),e(s5,zJ),e(zJ,f9r),e(s5,m9r),e(Le,g9r),e(Le,l5),e(l5,RTe),e(RTe,h9r),e(l5,p9r),e(l5,QJ),e(QJ,u9r),e(l5,_9r),e(Le,b9r),e(Le,i5),e(i5,BTe),e(BTe,v9r),e(i5,F9r),e(i5,WJ),e(WJ,T9r),e(i5,M9r),e(Le,E9r),e(Le,d5),e(d5,PTe),e(PTe,C9r),e(d5,w9r),e(d5,HJ),e(HJ,A9r),e(d5,y9r),e(Le,L9r),e(Le,c5),e(c5,ITe),e(ITe,x9r),e(c5,$9r),e(c5,UJ),e(UJ,k9r),e(c5,S9r),e(Le,R9r),e(Le,f5),e(f5,qTe),e(qTe,B9r),e(f5,P9r),e(f5,JJ),e(JJ,I9r),e(f5,q9r),e(Le,N9r),e(Le,m5),e(m5,NTe),e(NTe,j9r),e(m5,D9r),e(m5,YJ),e(YJ,G9r),e(m5,O9r),e(Or,V9r),M(g5,Or,null),b(f,Wqe,_),b(f,jc,_),e(jc,h5),e(h5,jTe),M(vx,jTe,null),e(jc,X9r),e(jc,DTe),e(DTe,z9r),b(f,Hqe,_),b(f,pr,_),M(Fx,pr,null),e(pr,Q9r),e(pr,Dc),e(Dc,W9r),e(Dc,KJ),e(KJ,H9r),e(Dc,U9r),e(Dc,ZJ),e(ZJ,J9r),e(Dc,Y9r),e(pr,K9r),e(pr,Tx),e(Tx,Z9r),e(Tx,GTe),e(GTe,e$r),e(Tx,o$r),e(pr,r$r),e(pr,Vt),M(Mx,Vt,null),e(Vt,t$r),e(Vt,OTe),e(OTe,a$r),e(Vt,n$r),e(Vt,Gc),e(Gc,s$r),e(Gc,VTe),e(VTe,l$r),e(Gc,i$r),e(Gc,eY),e(eY,d$r),e(Gc,c$r),e(Vt,f$r),M(p5,Vt,null),e(pr,m$r),e(pr,Vr),M(Ex,Vr,null),e(Vr,g$r),e(Vr,XTe),e(XTe,h$r),e(Vr,p$r),e(Vr,_n),e(_n,u$r),e(_n,zTe),e(zTe,_$r),e(_n,b$r),e(_n,QTe),e(QTe,v$r),e(_n,F$r),e(_n,WTe),e(WTe,T$r),e(_n,M$r),e(Vr,E$r),e(Vr,Se),e(Se,u5),e(u5,HTe),e(HTe,C$r),e(u5,w$r),e(u5,oY),e(oY,A$r),e(u5,y$r),e(Se,L$r),e(Se,_5),e(_5,UTe),e(UTe,x$r),e(_5,$$r),e(_5,rY),e(rY,k$r),e(_5,S$r),e(Se,R$r),e(Se,b5),e(b5,JTe),e(JTe,B$r),e(b5,P$r),e(b5,tY),e(tY,I$r),e(b5,q$r),e(Se,N$r),e(Se,v5),e(v5,YTe),e(YTe,j$r),e(v5,D$r),e(v5,aY),e(aY,G$r),e(v5,O$r),e(Se,V$r),e(Se,F5),e(F5,KTe),e(KTe,X$r),e(F5,z$r),e(F5,nY),e(nY,Q$r),e(F5,W$r),e(Se,H$r),e(Se,T5),e(T5,ZTe),e(ZTe,U$r),e(T5,J$r),e(T5,sY),e(sY,Y$r),e(T5,K$r),e(Se,Z$r),e(Se,M5),e(M5,e7e),e(e7e,ekr),e(M5,okr),e(M5,lY),e(lY,rkr),e(M5,tkr),e(Se,akr),e(Se,E5),e(E5,o7e),e(o7e,nkr),e(E5,skr),e(E5,iY),e(iY,lkr),e(E5,ikr),e(Se,dkr),e(Se,C5),e(C5,r7e),e(r7e,ckr),e(C5,fkr),e(C5,dY),e(dY,mkr),e(C5,gkr),e(Vr,hkr),M(w5,Vr,null),b(f,Uqe,_),b(f,Oc,_),e(Oc,A5),e(A5,t7e),M(Cx,t7e,null),e(Oc,pkr),e(Oc,a7e),e(a7e,ukr),b(f,Jqe,_),b(f,ur,_),M(wx,ur,null),e(ur,_kr),e(ur,Vc),e(Vc,bkr),e(Vc,cY),e(cY,vkr),e(Vc,Fkr),e(Vc,fY),e(fY,Tkr),e(Vc,Mkr),e(ur,Ekr),e(ur,Ax),e(Ax,Ckr),e(Ax,n7e),e(n7e,wkr),e(Ax,Akr),e(ur,ykr),e(ur,Xt),M(yx,Xt,null),e(Xt,Lkr),e(Xt,s7e),e(s7e,xkr),e(Xt,$kr),e(Xt,Xc),e(Xc,kkr),e(Xc,l7e),e(l7e,Skr),e(Xc,Rkr),e(Xc,mY),e(mY,Bkr),e(Xc,Pkr),e(Xt,Ikr),M(y5,Xt,null),e(ur,qkr),e(ur,Xr),M(Lx,Xr,null),e(Xr,Nkr),e(Xr,i7e),e(i7e,jkr),e(Xr,Dkr),e(Xr,bn),e(bn,Gkr),e(bn,d7e),e(d7e,Okr),e(bn,Vkr),e(bn,c7e),e(c7e,Xkr),e(bn,zkr),e(bn,f7e),e(f7e,Qkr),e(bn,Wkr),e(Xr,Hkr),e(Xr,xe),e(xe,L5),e(L5,m7e),e(m7e,Ukr),e(L5,Jkr),e(L5,gY),e(gY,Ykr),e(L5,Kkr),e(xe,Zkr),e(xe,x5),e(x5,g7e),e(g7e,eSr),e(x5,oSr),e(x5,hY),e(hY,rSr),e(x5,tSr),e(xe,aSr),e(xe,$5),e($5,h7e),e(h7e,nSr),e($5,sSr),e($5,pY),e(pY,lSr),e($5,iSr),e(xe,dSr),e(xe,k5),e(k5,p7e),e(p7e,cSr),e(k5,fSr),e(k5,uY),e(uY,mSr),e(k5,gSr),e(xe,hSr),e(xe,S5),e(S5,u7e),e(u7e,pSr),e(S5,uSr),e(S5,_Y),e(_Y,_Sr),e(S5,bSr),e(xe,vSr),e(xe,R5),e(R5,_7e),e(_7e,FSr),e(R5,TSr),e(R5,bY),e(bY,MSr),e(R5,ESr),e(xe,CSr),e(xe,B5),e(B5,b7e),e(b7e,wSr),e(B5,ASr),e(B5,vY),e(vY,ySr),e(B5,LSr),e(xe,xSr),e(xe,P5),e(P5,v7e),e(v7e,$Sr),e(P5,kSr),e(P5,FY),e(FY,SSr),e(P5,RSr),e(xe,BSr),e(xe,I5),e(I5,F7e),e(F7e,PSr),e(I5,ISr),e(I5,TY),e(TY,qSr),e(I5,NSr),e(xe,jSr),e(xe,q5),e(q5,T7e),e(T7e,DSr),e(q5,GSr),e(q5,MY),e(MY,OSr),e(q5,VSr),e(Xr,XSr),M(N5,Xr,null),b(f,Yqe,_),b(f,zc,_),e(zc,j5),e(j5,M7e),M(xx,M7e,null),e(zc,zSr),e(zc,E7e),e(E7e,QSr),b(f,Kqe,_),b(f,_r,_),M($x,_r,null),e(_r,WSr),e(_r,Qc),e(Qc,HSr),e(Qc,EY),e(EY,USr),e(Qc,JSr),e(Qc,CY),e(CY,YSr),e(Qc,KSr),e(_r,ZSr),e(_r,kx),e(kx,eRr),e(kx,C7e),e(C7e,oRr),e(kx,rRr),e(_r,tRr),e(_r,zt),M(Sx,zt,null),e(zt,aRr),e(zt,w7e),e(w7e,nRr),e(zt,sRr),e(zt,Wc),e(Wc,lRr),e(Wc,A7e),e(A7e,iRr),e(Wc,dRr),e(Wc,wY),e(wY,cRr),e(Wc,fRr),e(zt,mRr),M(D5,zt,null),e(_r,gRr),e(_r,zr),M(Rx,zr,null),e(zr,hRr),e(zr,y7e),e(y7e,pRr),e(zr,uRr),e(zr,vn),e(vn,_Rr),e(vn,L7e),e(L7e,bRr),e(vn,vRr),e(vn,x7e),e(x7e,FRr),e(vn,TRr),e(vn,$7e),e($7e,MRr),e(vn,ERr),e(zr,CRr),e(zr,$e),e($e,G5),e(G5,k7e),e(k7e,wRr),e(G5,ARr),e(G5,AY),e(AY,yRr),e(G5,LRr),e($e,xRr),e($e,O5),e(O5,S7e),e(S7e,$Rr),e(O5,kRr),e(O5,yY),e(yY,SRr),e(O5,RRr),e($e,BRr),e($e,V5),e(V5,R7e),e(R7e,PRr),e(V5,IRr),e(V5,LY),e(LY,qRr),e(V5,NRr),e($e,jRr),e($e,X5),e(X5,B7e),e(B7e,DRr),e(X5,GRr),e(X5,xY),e(xY,ORr),e(X5,VRr),e($e,XRr),e($e,z5),e(z5,P7e),e(P7e,zRr),e(z5,QRr),e(z5,$Y),e($Y,WRr),e(z5,HRr),e($e,URr),e($e,Q5),e(Q5,I7e),e(I7e,JRr),e(Q5,YRr),e(Q5,kY),e(kY,KRr),e(Q5,ZRr),e($e,eBr),e($e,W5),e(W5,q7e),e(q7e,oBr),e(W5,rBr),e(W5,SY),e(SY,tBr),e(W5,aBr),e($e,nBr),e($e,H5),e(H5,N7e),e(N7e,sBr),e(H5,lBr),e(H5,RY),e(RY,iBr),e(H5,dBr),e($e,cBr),e($e,U5),e(U5,j7e),e(j7e,fBr),e(U5,mBr),e(U5,BY),e(BY,gBr),e(U5,hBr),e($e,pBr),e($e,J5),e(J5,D7e),e(D7e,uBr),e(J5,_Br),e(J5,PY),e(PY,bBr),e(J5,vBr),e(zr,FBr),M(Y5,zr,null),b(f,Zqe,_),b(f,Hc,_),e(Hc,K5),e(K5,G7e),M(Bx,G7e,null),e(Hc,TBr),e(Hc,O7e),e(O7e,MBr),b(f,eNe,_),b(f,br,_),M(Px,br,null),e(br,EBr),e(br,Uc),e(Uc,CBr),e(Uc,IY),e(IY,wBr),e(Uc,ABr),e(Uc,qY),e(qY,yBr),e(Uc,LBr),e(br,xBr),e(br,Ix),e(Ix,$Br),e(Ix,V7e),e(V7e,kBr),e(Ix,SBr),e(br,RBr),e(br,Qt),M(qx,Qt,null),e(Qt,BBr),e(Qt,X7e),e(X7e,PBr),e(Qt,IBr),e(Qt,Jc),e(Jc,qBr),e(Jc,z7e),e(z7e,NBr),e(Jc,jBr),e(Jc,NY),e(NY,DBr),e(Jc,GBr),e(Qt,OBr),M(Z5,Qt,null),e(br,VBr),e(br,Qr),M(Nx,Qr,null),e(Qr,XBr),e(Qr,Q7e),e(Q7e,zBr),e(Qr,QBr),e(Qr,Fn),e(Fn,WBr),e(Fn,W7e),e(W7e,HBr),e(Fn,UBr),e(Fn,H7e),e(H7e,JBr),e(Fn,YBr),e(Fn,U7e),e(U7e,KBr),e(Fn,ZBr),e(Qr,ePr),e(Qr,De),e(De,eC),e(eC,J7e),e(J7e,oPr),e(eC,rPr),e(eC,jY),e(jY,tPr),e(eC,aPr),e(De,nPr),e(De,oC),e(oC,Y7e),e(Y7e,sPr),e(oC,lPr),e(oC,DY),e(DY,iPr),e(oC,dPr),e(De,cPr),e(De,rC),e(rC,K7e),e(K7e,fPr),e(rC,mPr),e(rC,GY),e(GY,gPr),e(rC,hPr),e(De,pPr),e(De,tC),e(tC,Z7e),e(Z7e,uPr),e(tC,_Pr),e(tC,OY),e(OY,bPr),e(tC,vPr),e(De,FPr),e(De,aC),e(aC,eMe),e(eMe,TPr),e(aC,MPr),e(aC,VY),e(VY,EPr),e(aC,CPr),e(De,wPr),e(De,nC),e(nC,oMe),e(oMe,APr),e(nC,yPr),e(nC,XY),e(XY,LPr),e(nC,xPr),e(De,$Pr),e(De,sC),e(sC,rMe),e(rMe,kPr),e(sC,SPr),e(sC,zY),e(zY,RPr),e(sC,BPr),e(De,PPr),e(De,lC),e(lC,tMe),e(tMe,IPr),e(lC,qPr),e(lC,QY),e(QY,NPr),e(lC,jPr),e(Qr,DPr),M(iC,Qr,null),b(f,oNe,_),b(f,Yc,_),e(Yc,dC),e(dC,aMe),M(jx,aMe,null),e(Yc,GPr),e(Yc,nMe),e(nMe,OPr),b(f,rNe,_),b(f,vr,_),M(Dx,vr,null),e(vr,VPr),e(vr,Kc),e(Kc,XPr),e(Kc,WY),e(WY,zPr),e(Kc,QPr),e(Kc,HY),e(HY,WPr),e(Kc,HPr),e(vr,UPr),e(vr,Gx),e(Gx,JPr),e(Gx,sMe),e(sMe,YPr),e(Gx,KPr),e(vr,ZPr),e(vr,Wt),M(Ox,Wt,null),e(Wt,eIr),e(Wt,lMe),e(lMe,oIr),e(Wt,rIr),e(Wt,Zc),e(Zc,tIr),e(Zc,iMe),e(iMe,aIr),e(Zc,nIr),e(Zc,UY),e(UY,sIr),e(Zc,lIr),e(Wt,iIr),M(cC,Wt,null),e(vr,dIr),e(vr,Wr),M(Vx,Wr,null),e(Wr,cIr),e(Wr,dMe),e(dMe,fIr),e(Wr,mIr),e(Wr,Tn),e(Tn,gIr),e(Tn,cMe),e(cMe,hIr),e(Tn,pIr),e(Tn,fMe),e(fMe,uIr),e(Tn,_Ir),e(Tn,mMe),e(mMe,bIr),e(Tn,vIr),e(Wr,FIr),e(Wr,Ge),e(Ge,fC),e(fC,gMe),e(gMe,TIr),e(fC,MIr),e(fC,JY),e(JY,EIr),e(fC,CIr),e(Ge,wIr),e(Ge,mC),e(mC,hMe),e(hMe,AIr),e(mC,yIr),e(mC,YY),e(YY,LIr),e(mC,xIr),e(Ge,$Ir),e(Ge,gC),e(gC,pMe),e(pMe,kIr),e(gC,SIr),e(gC,KY),e(KY,RIr),e(gC,BIr),e(Ge,PIr),e(Ge,hC),e(hC,uMe),e(uMe,IIr),e(hC,qIr),e(hC,ZY),e(ZY,NIr),e(hC,jIr),e(Ge,DIr),e(Ge,pC),e(pC,_Me),e(_Me,GIr),e(pC,OIr),e(pC,eK),e(eK,VIr),e(pC,XIr),e(Ge,zIr),e(Ge,uC),e(uC,bMe),e(bMe,QIr),e(uC,WIr),e(uC,oK),e(oK,HIr),e(uC,UIr),e(Ge,JIr),e(Ge,_C),e(_C,vMe),e(vMe,YIr),e(_C,KIr),e(_C,rK),e(rK,ZIr),e(_C,eqr),e(Ge,oqr),e(Ge,bC),e(bC,FMe),e(FMe,rqr),e(bC,tqr),e(bC,tK),e(tK,aqr),e(bC,nqr),e(Wr,sqr),M(vC,Wr,null),b(f,tNe,_),b(f,ef,_),e(ef,FC),e(FC,TMe),M(Xx,TMe,null),e(ef,lqr),e(ef,MMe),e(MMe,iqr),b(f,aNe,_),b(f,Fr,_),M(zx,Fr,null),e(Fr,dqr),e(Fr,of),e(of,cqr),e(of,aK),e(aK,fqr),e(of,mqr),e(of,nK),e(nK,gqr),e(of,hqr),e(Fr,pqr),e(Fr,Qx),e(Qx,uqr),e(Qx,EMe),e(EMe,_qr),e(Qx,bqr),e(Fr,vqr),e(Fr,Ht),M(Wx,Ht,null),e(Ht,Fqr),e(Ht,CMe),e(CMe,Tqr),e(Ht,Mqr),e(Ht,rf),e(rf,Eqr),e(rf,wMe),e(wMe,Cqr),e(rf,wqr),e(rf,sK),e(sK,Aqr),e(rf,yqr),e(Ht,Lqr),M(TC,Ht,null),e(Fr,xqr),e(Fr,Hr),M(Hx,Hr,null),e(Hr,$qr),e(Hr,AMe),e(AMe,kqr),e(Hr,Sqr),e(Hr,Mn),e(Mn,Rqr),e(Mn,yMe),e(yMe,Bqr),e(Mn,Pqr),e(Mn,LMe),e(LMe,Iqr),e(Mn,qqr),e(Mn,xMe),e(xMe,Nqr),e(Mn,jqr),e(Hr,Dqr),e(Hr,$Me),e($Me,MC),e(MC,kMe),e(kMe,Gqr),e(MC,Oqr),e(MC,lK),e(lK,Vqr),e(MC,Xqr),e(Hr,zqr),M(EC,Hr,null),b(f,nNe,_),b(f,tf,_),e(tf,CC),e(CC,SMe),M(Ux,SMe,null),e(tf,Qqr),e(tf,RMe),e(RMe,Wqr),b(f,sNe,_),b(f,Tr,_),M(Jx,Tr,null),e(Tr,Hqr),e(Tr,af),e(af,Uqr),e(af,iK),e(iK,Jqr),e(af,Yqr),e(af,dK),e(dK,Kqr),e(af,Zqr),e(Tr,eNr),e(Tr,Yx),e(Yx,oNr),e(Yx,BMe),e(BMe,rNr),e(Yx,tNr),e(Tr,aNr),e(Tr,Ut),M(Kx,Ut,null),e(Ut,nNr),e(Ut,PMe),e(PMe,sNr),e(Ut,lNr),e(Ut,nf),e(nf,iNr),e(nf,IMe),e(IMe,dNr),e(nf,cNr),e(nf,cK),e(cK,fNr),e(nf,mNr),e(Ut,gNr),M(wC,Ut,null),e(Tr,hNr),e(Tr,Ur),M(Zx,Ur,null),e(Ur,pNr),e(Ur,qMe),e(qMe,uNr),e(Ur,_Nr),e(Ur,En),e(En,bNr),e(En,NMe),e(NMe,vNr),e(En,FNr),e(En,jMe),e(jMe,TNr),e(En,MNr),e(En,DMe),e(DMe,ENr),e(En,CNr),e(Ur,wNr),e(Ur,e9),e(e9,AC),e(AC,GMe),e(GMe,ANr),e(AC,yNr),e(AC,fK),e(fK,LNr),e(AC,xNr),e(e9,$Nr),e(e9,yC),e(yC,OMe),e(OMe,kNr),e(yC,SNr),e(yC,mK),e(mK,RNr),e(yC,BNr),e(Ur,PNr),M(LC,Ur,null),b(f,lNe,_),b(f,sf,_),e(sf,xC),e(xC,VMe),M(o9,VMe,null),e(sf,INr),e(sf,XMe),e(XMe,qNr),b(f,iNe,_),b(f,Mr,_),M(r9,Mr,null),e(Mr,NNr),e(Mr,lf),e(lf,jNr),e(lf,gK),e(gK,DNr),e(lf,GNr),e(lf,hK),e(hK,ONr),e(lf,VNr),e(Mr,XNr),e(Mr,t9),e(t9,zNr),e(t9,zMe),e(zMe,QNr),e(t9,WNr),e(Mr,HNr),e(Mr,Jt),M(a9,Jt,null),e(Jt,UNr),e(Jt,QMe),e(QMe,JNr),e(Jt,YNr),e(Jt,df),e(df,KNr),e(df,WMe),e(WMe,ZNr),e(df,ejr),e(df,pK),e(pK,ojr),e(df,rjr),e(Jt,tjr),M($C,Jt,null),e(Mr,ajr),e(Mr,Jr),M(n9,Jr,null),e(Jr,njr),e(Jr,HMe),e(HMe,sjr),e(Jr,ljr),e(Jr,Cn),e(Cn,ijr),e(Cn,UMe),e(UMe,djr),e(Cn,cjr),e(Cn,JMe),e(JMe,fjr),e(Cn,mjr),e(Cn,YMe),e(YMe,gjr),e(Cn,hjr),e(Jr,pjr),e(Jr,KMe),e(KMe,kC),e(kC,ZMe),e(ZMe,ujr),e(kC,_jr),e(kC,uK),e(uK,bjr),e(kC,vjr),e(Jr,Fjr),M(SC,Jr,null),dNe=!0},p(f,[_]){const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),bf.$set(s9);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),_g.$set(e4e);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),Ug.$set(o4e);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),Ch.$set(r4e);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),wh.$set(l9);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),Xh.$set(t4e);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),zh.$set(wn);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),Hh.$set(a4e);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),Nu.$set(n4e);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),Du.$set(s4e);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:f}),L_.$set(i9);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),$_.$set(l4e);const d9={};_&2&&(d9.$$scope={dirty:_,ctx:f}),g0.$set(d9);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),p0.$set(i4e);const c9={};_&2&&(c9.$$scope={dirty:_,ctx:f}),K0.$set(c9);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),e1.$set(d4e);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),v1.$set(c4e);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),T1.$set(f4e);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),_b.$set(cf);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),vb.$set(m4e);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),Jb.$set(g4e);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),Kb.$set(h4e);const f9={};_&2&&(f9.$$scope={dirty:_,ctx:f}),n2.$set(f9);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),l2.$set(p4e);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),V2.$set(u4e);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),z2.$set(_4e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),Rv.$set(Kr);const m9={};_&2&&(m9.$$scope={dirty:_,ctx:f}),Pv.$set(m9);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),Nv.$set(b4e);const g9={};_&2&&(g9.$$scope={dirty:_,ctx:f}),Dv.$set(g9);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),Zv.$set(v4e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),oF.$set(Zr);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),aF.$set(F4e);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),sF.$set(ff);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),uF.$set(T4e);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),bF.$set(M4e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),CF.$set(y);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),AF.$set(RC);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),IF.$set(E4e);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),NF.$set(C4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),OF.$set(BC);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),XF.$set(w4e);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),JF.$set(A4e);const PC={};_&2&&(PC.$$scope={dirty:_,ctx:f}),KF.$set(PC);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),t6.$set(y4e);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),n6.$set(L4e);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),d6.$set(IC);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),f6.$set(x4e);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),h6.$set($4e);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),u6.$set(qC);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),M6.$set(k4e);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),C6.$set(S4e);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),y6.$set(NC);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),x6.$set(R4e);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),FT.$set(B4e);const jC={};_&2&&(jC.$$scope={dirty:_,ctx:f}),MT.$set(jC);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),QT.$set(P4e);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),HT.$set(I4e);const DC={};_&2&&(DC.$$scope={dirty:_,ctx:f}),l7.$set(DC);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),d7.$set(q4e);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),g7.$set(N4e);const GC={};_&2&&(GC.$$scope={dirty:_,ctx:f}),p7.$set(GC);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),I7.$set(j4e);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),N7.$set(D4e);const OC={};_&2&&(OC.$$scope={dirty:_,ctx:f}),U7.$set(OC);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),Y7.$set(G4e);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),CM.$set(O4e);const VC={};_&2&&(VC.$$scope={dirty:_,ctx:f}),AM.$set(VC);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),XM.$set(V4e);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),QM.$set(X4e);const XC={};_&2&&(XC.$$scope={dirty:_,ctx:f}),UM.$set(XC);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),YM.$set(z4e);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),ZM.$set(Q4e);const zC={};_&2&&(zC.$$scope={dirty:_,ctx:f}),o4.$set(zC);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),M4.$set(W4e);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),C4.$set(H4e);const QC={};_&2&&(QC.$$scope={dirty:_,ctx:f}),z4.$set(QC);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),W4.$set(U4e);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),U4.$set(J4e);const WC={};_&2&&(WC.$$scope={dirty:_,ctx:f}),Y4.$set(WC);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),Z4.$set(Y4e);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),oE.$set(K4e);const HC={};_&2&&(HC.$$scope={dirty:_,ctx:f}),yE.$set(HC);const Z4e={};_&2&&(Z4e.$$scope={dirty:_,ctx:f}),xE.$set(Z4e);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),jE.$set(eEe);const UC={};_&2&&(UC.$$scope={dirty:_,ctx:f}),GE.$set(UC);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),e5.$set(oEe);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),r5.$set(rEe);const JC={};_&2&&(JC.$$scope={dirty:_,ctx:f}),g5.$set(JC);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),p5.$set(tEe);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),w5.$set(aEe);const YC={};_&2&&(YC.$$scope={dirty:_,ctx:f}),y5.$set(YC);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),N5.$set(nEe);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),D5.$set(sEe);const KC={};_&2&&(KC.$$scope={dirty:_,ctx:f}),Y5.$set(KC);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),Z5.$set(lEe);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),iC.$set(iEe);const ZC={};_&2&&(ZC.$$scope={dirty:_,ctx:f}),cC.$set(ZC);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),vC.$set(dEe);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),TC.$set(cEe);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),EC.$set(e3);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),wC.$set(fEe);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),LC.$set(mEe);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),$C.$set(o3);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),SC.$set(gEe)},i(f){dNe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(oA.$$.fragment,f),E(rA.$$.fragment,f),E(bf.$$.fragment,f),E(tA.$$.fragment,f),E(aA.$$.fragment,f),E(lA.$$.fragment,f),E(_g.$$.fragment,f),E(iA.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(gA.$$.fragment,f),E(Ug.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(vA.$$.fragment,f),E(Ch.$$.fragment,f),E(wh.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(wA.$$.fragment,f),E(Xh.$$.fragment,f),E(zh.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E($A.$$.fragment,f),E(Hh.$$.fragment,f),E(kA.$$.fragment,f),E(Nu.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(PA.$$.fragment,f),E(Du.$$.fragment,f),E(IA.$$.fragment,f),E(L_.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(DA.$$.fragment,f),E($_.$$.fragment,f),E(GA.$$.fragment,f),E(g0.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(zA.$$.fragment,f),E(p0.$$.fragment,f),E(QA.$$.fragment,f),E(K0.$$.fragment,f),E(WA.$$.fragment,f),E(HA.$$.fragment,f),E(JA.$$.fragment,f),E(e1.$$.fragment,f),E(YA.$$.fragment,f),E(v1.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(oy.$$.fragment,f),E(T1.$$.fragment,f),E(ry.$$.fragment,f),E(_b.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(vb.$$.fragment,f),E(ly.$$.fragment,f),E(Jb.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(Kb.$$.fragment,f),E(my.$$.fragment,f),E(n2.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(l2.$$.fragment,f),E(_y.$$.fragment,f),E(V2.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(z2.$$.fragment,f),E(My.$$.fragment,f),E(Rv.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(Pv.$$.fragment,f),E(yy.$$.fragment,f),E(Nv.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(Dv.$$.fragment,f),E(Sy.$$.fragment,f),E(Zv.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(oF.$$.fragment,f),E(qy.$$.fragment,f),E(aF.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(sF.$$.fragment,f),E(Oy.$$.fragment,f),E(uF.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(bF.$$.fragment,f),E(Wy.$$.fragment,f),E(CF.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(AF.$$.fragment,f),E(Ky.$$.fragment,f),E(IF.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(NF.$$.fragment,f),E(tL.$$.fragment,f),E(OF.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(XF.$$.fragment,f),E(dL.$$.fragment,f),E(JF.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(KF.$$.fragment,f),E(hL.$$.fragment,f),E(t6.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(n6.$$.fragment,f),E(vL.$$.fragment,f),E(d6.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(f6.$$.fragment,f),E(wL.$$.fragment,f),E(h6.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(u6.$$.fragment,f),E($L.$$.fragment,f),E(M6.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(BL.$$.fragment,f),E(C6.$$.fragment,f),E(PL.$$.fragment,f),E(y6.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(x6.$$.fragment,f),E(DL.$$.fragment,f),E(FT.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(MT.$$.fragment,f),E(zL.$$.fragment,f),E(QT.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(HT.$$.fragment,f),E(JL.$$.fragment,f),E(l7.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(d7.$$.fragment,f),E(o8.$$.fragment,f),E(g7.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(p7.$$.fragment,f),E(s8.$$.fragment,f),E(I7.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(N7.$$.fragment,f),E(f8.$$.fragment,f),E(U7.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(Y7.$$.fragment,f),E(u8.$$.fragment,f),E(CM.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(AM.$$.fragment,f),E(T8.$$.fragment,f),E(XM.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(QM.$$.fragment,f),E(A8.$$.fragment,f),E(UM.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(YM.$$.fragment,f),E(S8.$$.fragment,f),E(ZM.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(o4.$$.fragment,f),E(q8.$$.fragment,f),E(M4.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(C4.$$.fragment,f),E(O8.$$.fragment,f),E(z4.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(Q8.$$.fragment,f),E(W4.$$.fragment,f),E(W8.$$.fragment,f),E(U4.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(Y4.$$.fragment,f),E(K8.$$.fragment,f),E(Z4.$$.fragment,f),E(Z8.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(oE.$$.fragment,f),E(tx.$$.fragment,f),E(yE.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(xE.$$.fragment,f),E(ix.$$.fragment,f),E(jE.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(GE.$$.fragment,f),E(gx.$$.fragment,f),E(e5.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(r5.$$.fragment,f),E(bx.$$.fragment,f),E(g5.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(p5.$$.fragment,f),E(Ex.$$.fragment,f),E(w5.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(yx.$$.fragment,f),E(y5.$$.fragment,f),E(Lx.$$.fragment,f),E(N5.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(D5.$$.fragment,f),E(Rx.$$.fragment,f),E(Y5.$$.fragment,f),E(Bx.$$.fragment,f),E(Px.$$.fragment,f),E(qx.$$.fragment,f),E(Z5.$$.fragment,f),E(Nx.$$.fragment,f),E(iC.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(cC.$$.fragment,f),E(Vx.$$.fragment,f),E(vC.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(TC.$$.fragment,f),E(Hx.$$.fragment,f),E(EC.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(wC.$$.fragment,f),E(Zx.$$.fragment,f),E(LC.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E($C.$$.fragment,f),E(n9.$$.fragment,f),E(SC.$$.fragment,f),dNe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(oA.$$.fragment,f),C(rA.$$.fragment,f),C(bf.$$.fragment,f),C(tA.$$.fragment,f),C(aA.$$.fragment,f),C(lA.$$.fragment,f),C(_g.$$.fragment,f),C(iA.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(gA.$$.fragment,f),C(Ug.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(vA.$$.fragment,f),C(Ch.$$.fragment,f),C(wh.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(wA.$$.fragment,f),C(Xh.$$.fragment,f),C(zh.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C($A.$$.fragment,f),C(Hh.$$.fragment,f),C(kA.$$.fragment,f),C(Nu.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(PA.$$.fragment,f),C(Du.$$.fragment,f),C(IA.$$.fragment,f),C(L_.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(DA.$$.fragment,f),C($_.$$.fragment,f),C(GA.$$.fragment,f),C(g0.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(zA.$$.fragment,f),C(p0.$$.fragment,f),C(QA.$$.fragment,f),C(K0.$$.fragment,f),C(WA.$$.fragment,f),C(HA.$$.fragment,f),C(JA.$$.fragment,f),C(e1.$$.fragment,f),C(YA.$$.fragment,f),C(v1.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(oy.$$.fragment,f),C(T1.$$.fragment,f),C(ry.$$.fragment,f),C(_b.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(vb.$$.fragment,f),C(ly.$$.fragment,f),C(Jb.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(Kb.$$.fragment,f),C(my.$$.fragment,f),C(n2.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(l2.$$.fragment,f),C(_y.$$.fragment,f),C(V2.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(z2.$$.fragment,f),C(My.$$.fragment,f),C(Rv.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(Pv.$$.fragment,f),C(yy.$$.fragment,f),C(Nv.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(Dv.$$.fragment,f),C(Sy.$$.fragment,f),C(Zv.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(oF.$$.fragment,f),C(qy.$$.fragment,f),C(aF.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(sF.$$.fragment,f),C(Oy.$$.fragment,f),C(uF.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(bF.$$.fragment,f),C(Wy.$$.fragment,f),C(CF.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(AF.$$.fragment,f),C(Ky.$$.fragment,f),C(IF.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(NF.$$.fragment,f),C(tL.$$.fragment,f),C(OF.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(XF.$$.fragment,f),C(dL.$$.fragment,f),C(JF.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(KF.$$.fragment,f),C(hL.$$.fragment,f),C(t6.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(n6.$$.fragment,f),C(vL.$$.fragment,f),C(d6.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(f6.$$.fragment,f),C(wL.$$.fragment,f),C(h6.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(u6.$$.fragment,f),C($L.$$.fragment,f),C(M6.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(BL.$$.fragment,f),C(C6.$$.fragment,f),C(PL.$$.fragment,f),C(y6.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(x6.$$.fragment,f),C(DL.$$.fragment,f),C(FT.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(MT.$$.fragment,f),C(zL.$$.fragment,f),C(QT.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(HT.$$.fragment,f),C(JL.$$.fragment,f),C(l7.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(d7.$$.fragment,f),C(o8.$$.fragment,f),C(g7.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(p7.$$.fragment,f),C(s8.$$.fragment,f),C(I7.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(N7.$$.fragment,f),C(f8.$$.fragment,f),C(U7.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(Y7.$$.fragment,f),C(u8.$$.fragment,f),C(CM.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(AM.$$.fragment,f),C(T8.$$.fragment,f),C(XM.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(QM.$$.fragment,f),C(A8.$$.fragment,f),C(UM.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(YM.$$.fragment,f),C(S8.$$.fragment,f),C(ZM.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(o4.$$.fragment,f),C(q8.$$.fragment,f),C(M4.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(C4.$$.fragment,f),C(O8.$$.fragment,f),C(z4.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(Q8.$$.fragment,f),C(W4.$$.fragment,f),C(W8.$$.fragment,f),C(U4.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(Y4.$$.fragment,f),C(K8.$$.fragment,f),C(Z4.$$.fragment,f),C(Z8.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(oE.$$.fragment,f),C(tx.$$.fragment,f),C(yE.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(xE.$$.fragment,f),C(ix.$$.fragment,f),C(jE.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(GE.$$.fragment,f),C(gx.$$.fragment,f),C(e5.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(r5.$$.fragment,f),C(bx.$$.fragment,f),C(g5.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(p5.$$.fragment,f),C(Ex.$$.fragment,f),C(w5.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(yx.$$.fragment,f),C(y5.$$.fragment,f),C(Lx.$$.fragment,f),C(N5.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(D5.$$.fragment,f),C(Rx.$$.fragment,f),C(Y5.$$.fragment,f),C(Bx.$$.fragment,f),C(Px.$$.fragment,f),C(qx.$$.fragment,f),C(Z5.$$.fragment,f),C(Nx.$$.fragment,f),C(iC.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(cC.$$.fragment,f),C(Vx.$$.fragment,f),C(vC.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(TC.$$.fragment,f),C(Hx.$$.fragment,f),C(EC.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(wC.$$.fragment,f),C(Zx.$$.fragment,f),C(LC.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C($C.$$.fragment,f),C(n9.$$.fragment,f),C(SC.$$.fragment,f),dNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(gf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(pf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(sIe),f&&t(pi),w(oA),f&&t(lIe),f&&t($n),f&&t(iIe),w(rA,f),f&&t(dIe),f&&t(C$),f&&t(cIe),w(bf,f),f&&t(fIe),f&&t(ui),w(tA),f&&t(mIe),f&&t(Co),w(aA),w(lA),w(_g),w(iA),f&&t(gIe),f&&t(bi),w(dA),f&&t(hIe),f&&t(wo),w(cA),w(gA),w(Ug),w(hA),f&&t(pIe),f&&t(vi),w(pA),f&&t(uIe),f&&t(Ao),w(uA),w(vA),w(Ch),w(wh),w(FA),f&&t(_Ie),f&&t(Fi),w(TA),f&&t(bIe),f&&t(yo),w(MA),w(wA),w(Xh),w(zh),w(AA),f&&t(vIe),f&&t(Mi),w(yA),f&&t(FIe),f&&t(Lo),w(LA),w($A),w(Hh),w(kA),w(Nu),f&&t(TIe),f&&t(wi),w(SA),f&&t(MIe),f&&t(xo),w(RA),w(PA),w(Du),w(IA),w(L_),f&&t(EIe),f&&t(Li),w(qA),f&&t(CIe),f&&t($o),w(NA),w(DA),w($_),w(GA),w(g0),f&&t(wIe),f&&t(ki),w(OA),f&&t(AIe),f&&t(ko),w(VA),w(zA),w(p0),w(QA),w(K0),f&&t(yIe),f&&t(Bi),w(WA),f&&t(LIe),f&&t(So),w(HA),w(JA),w(e1),w(YA),w(v1),f&&t(xIe),f&&t(qi),w(KA),f&&t($Ie),f&&t(Ro),w(ZA),w(oy),w(T1),w(ry),w(_b),f&&t(kIe),f&&t(Di),w(ty),f&&t(SIe),f&&t(Bo),w(ay),w(sy),w(vb),w(ly),w(Jb),f&&t(RIe),f&&t(Vi),w(iy),f&&t(BIe),f&&t(Po),w(dy),w(fy),w(Kb),w(my),w(n2),f&&t(PIe),f&&t(Qi),w(gy),f&&t(IIe),f&&t(Io),w(hy),w(uy),w(l2),w(_y),w(V2),f&&t(qIe),f&&t(Ui),w(by),f&&t(NIe),f&&t(qo),w(vy),w(Ty),w(z2),w(My),w(Rv),f&&t(jIe),f&&t(Ki),w(Ey),f&&t(DIe),f&&t(No),w(Cy),w(Ay),w(Pv),w(yy),w(Nv),f&&t(GIe),f&&t(od),w(Ly),f&&t(OIe),f&&t(jo),w(xy),w(ky),w(Dv),w(Sy),w(Zv),f&&t(VIe),f&&t(ad),w(Ry),f&&t(XIe),f&&t(Do),w(By),w(Iy),w(oF),w(qy),w(aF),f&&t(zIe),f&&t(ld),w(Ny),f&&t(QIe),f&&t(Go),w(jy),w(Gy),w(sF),w(Oy),w(uF),f&&t(WIe),f&&t(cd),w(Vy),f&&t(HIe),f&&t(Oo),w(Xy),w(Qy),w(bF),w(Wy),w(CF),f&&t(UIe),f&&t(gd),w(Hy),f&&t(JIe),f&&t(Vo),w(Uy),w(Yy),w(AF),w(Ky),w(IF),f&&t(YIe),f&&t(ud),w(Zy),f&&t(KIe),f&&t(Xo),w(eL),w(rL),w(NF),w(tL),w(OF),f&&t(ZIe),f&&t(vd),w(nL),f&&t(eqe),f&&t(zo),w(sL),w(iL),w(XF),w(dL),w(JF),f&&t(oqe),f&&t(Md),w(cL),f&&t(rqe),f&&t(Qo),w(fL),w(gL),w(KF),w(hL),w(t6),f&&t(tqe),f&&t(Ad),w(pL),f&&t(aqe),f&&t(Wo),w(uL),w(bL),w(n6),w(vL),w(d6),f&&t(nqe),f&&t(xd),w(TL),f&&t(sqe),f&&t(Ho),w(ML),w(CL),w(f6),w(wL),w(h6),f&&t(lqe),f&&t(Sd),w(AL),f&&t(iqe),f&&t(Uo),w(yL),w(xL),w(u6),w($L),w(M6),f&&t(dqe),f&&t(Pd),w(kL),f&&t(cqe),f&&t(Jo),w(SL),w(BL),w(C6),w(PL),w(y6),f&&t(fqe),f&&t(Nd),w(IL),f&&t(mqe),f&&t(Yo),w(qL),w(jL),w(x6),w(DL),w(FT),f&&t(gqe),f&&t(Gd),w(GL),f&&t(hqe),f&&t(Ko),w(OL),w(XL),w(MT),w(zL),w(QT),f&&t(pqe),f&&t(Xd),w(QL),f&&t(uqe),f&&t(Zo),w(WL),w(UL),w(HT),w(JL),w(l7),f&&t(_qe),f&&t(Wd),w(YL),f&&t(bqe),f&&t(er),w(KL),w(e8),w(d7),w(o8),w(g7),f&&t(vqe),f&&t(Yd),w(r8),f&&t(Fqe),f&&t(or),w(t8),w(n8),w(p7),w(s8),w(I7),f&&t(Tqe),f&&t(ec),w(l8),f&&t(Mqe),f&&t(rr),w(i8),w(c8),w(N7),w(f8),w(U7),f&&t(Eqe),f&&t(tc),w(m8),f&&t(Cqe),f&&t(tr),w(g8),w(p8),w(Y7),w(u8),w(CM),f&&t(wqe),f&&t(sc),w(_8),f&&t(Aqe),f&&t(ar),w(b8),w(F8),w(AM),w(T8),w(XM),f&&t(yqe),f&&t(dc),w(M8),f&&t(Lqe),f&&t(nr),w(E8),w(w8),w(QM),w(A8),w(UM),f&&t(xqe),f&&t(mc),w(L8),f&&t($qe),f&&t(sr),w(x8),w(k8),w(YM),w(S8),w(ZM),f&&t(kqe),f&&t(pc),w(R8),f&&t(Sqe),f&&t(lr),w(B8),w(I8),w(o4),w(q8),w(M4),f&&t(Rqe),f&&t(bc),w(N8),f&&t(Bqe),f&&t(ir),w(j8),w(G8),w(C4),w(O8),w(z4),f&&t(Pqe),f&&t(Tc),w(V8),f&&t(Iqe),f&&t(dr),w(X8),w(Q8),w(W4),w(W8),w(U4),f&&t(qqe),f&&t(Cc),w(H8),f&&t(Nqe),f&&t(cr),w(U8),w(Y8),w(Y4),w(K8),w(Z4),f&&t(jqe),f&&t(yc),w(Z8),f&&t(Dqe),f&&t(fr),w(ex),w(rx),w(oE),w(tx),w(yE),f&&t(Gqe),f&&t($c),w(ax),f&&t(Oqe),f&&t(mr),w(nx),w(lx),w(xE),w(ix),w(jE),f&&t(Vqe),f&&t(Rc),w(dx),f&&t(Xqe),f&&t(gr),w(cx),w(mx),w(GE),w(gx),w(e5),f&&t(zqe),f&&t(Ic),w(hx),f&&t(Qqe),f&&t(hr),w(px),w(_x),w(r5),w(bx),w(g5),f&&t(Wqe),f&&t(jc),w(vx),f&&t(Hqe),f&&t(pr),w(Fx),w(Mx),w(p5),w(Ex),w(w5),f&&t(Uqe),f&&t(Oc),w(Cx),f&&t(Jqe),f&&t(ur),w(wx),w(yx),w(y5),w(Lx),w(N5),f&&t(Yqe),f&&t(zc),w(xx),f&&t(Kqe),f&&t(_r),w($x),w(Sx),w(D5),w(Rx),w(Y5),f&&t(Zqe),f&&t(Hc),w(Bx),f&&t(eNe),f&&t(br),w(Px),w(qx),w(Z5),w(Nx),w(iC),f&&t(oNe),f&&t(Yc),w(jx),f&&t(rNe),f&&t(vr),w(Dx),w(Ox),w(cC),w(Vx),w(vC),f&&t(tNe),f&&t(ef),w(Xx),f&&t(aNe),f&&t(Fr),w(zx),w(Wx),w(TC),w(Hx),w(EC),f&&t(nNe),f&&t(tf),w(Ux),f&&t(sNe),f&&t(Tr),w(Jx),w(Kx),w(wC),w(Zx),w(LC),f&&t(lNe),f&&t(sf),w(o9),f&&t(iNe),f&&t(Mr),w(r9),w(a9),w($C),w(n9),w(SC)}}}const a8t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function n8t(L){return nyt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class m8t extends oyt{constructor(g){super();ryt(this,g,n8t,t8t,tyt,{})}}export{m8t as default,a8t as metadata};
